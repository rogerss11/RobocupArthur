#/***************************************************************************
#*   Copyright (C) 2024 by DTU
#*   jcan@dtu.dk
#*
#*
#* The MIT License (MIT)  https://mit-license.org/
#*
#* Permission is hereby granted, free of charge, to any person obtaining a copy of this software
#* and associated documentation files (the “Software”), to deal in the Software without restriction,
#* including without limitation the rights to use, copy, modify, merge, publish, distribute,
#* sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
#* is furnished to do so, subject to the following conditions:
#*
#* The above copyright notice and this permission notice shall be included in all copies
#* or substantial portions of the Software.
#*
#* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#* PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
#* FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#* THE SOFTWARE. */


import time as t
from datetime import *

class UIntegrator:
  # factors for x and u parameters
  fx = 0.0
  ts = 1.0
  limit = -1
  tau = 1.0
  # value for x and y, newest and one sample old.
  x = [0.0, 0.0] # input; newest and one sample old
  u = [0.0, 0.0] # output; newest and one sample old

  def __init__(self, sampleTime, timeConstant, limit = -1):
    self.ts = sampleTime
    self.tau = timeConstant
    self.limit = limit
    # calculate parameters
    self.setup()

  def setup(self):
    # G(s) = u(s)/x(s) = 1/(tau s)
    #     2(z - 1)
    # s ~ --------
    #     T(z + 1)
    #                        T(1 + z^-1)
    # G(z) = u(z)/x(z) = ---------------
    #                    tau 2(1 - z^-1)
    #
    # u(z) tau 2 (1 - z^-1) = x(z) T(1 + z^-1)
    #
    # tau 2 (u[0] - u[1]) = T (x[0] + x[1])
    # u[0] = u[1] + T/(tau 2)(x[0] + x[1])
    #
    # fx = T/(2 tau)
    #
    if (tau > 0)
      self.fx = self.ts / (self.tau * 2.0)
    else
      self.fx = 0

  def print(self):
    print(f"% integrator ts={self.ts} sec, tau={self.tau} sec, fx={fx}")

  def tick(self, x):
    self.x[0] = x
    self.u[0] = self.u[1] + self.fx * (self.x[0] + self.x[1])
    # limit integration
    if self.limit > 0.0:
      # integrator symmetric output limit
      if self.u[0] > self.limit:
        self.u[0] = self.limit
      elif self.u[0] < -self.limit:
        self.u[0] = -self.limit
    # save as old value
    self.u[1] = self.u[0]
    self.x[1] = self.x[0]
    return self.u[0]

  def reset(self):
    self.x[1] = 0
    self.u[1] = 0

