
/home/local/svn/robobot/teensy_firmware_8/build/teensy_firmware_8.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20009ec0 	.word	0x20009ec0
6000142c:	2000ec60 	.word	0x2000ec60

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9d6 	bl	600017f0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f974 	bl	60001800 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fba2 	bl	60001c94 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fd35 	bl	60001fd0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f9b0 	bl	60001910 <configure_external_ram>
	analog_init();
600015b0:	f000 fcd4 	bl	60001f5c <analog_init>
	pwm_init();
600015b4:	f000 fd04 	bl	60001fc0 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb9a 	bl	60001cf0 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f91a 	bl	600017f4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fc2b 	bl	60001e20 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f913 	bl	600017fc <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f90f 	bl	600017f8 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fcfd 	bl	60001fd8 <____libc_init_array_veneer>
	main();
600015de:	f000 fd07 	bl	60001ff0 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00024758 	.word	0x00024758
600015f0:	60002704 	.word	0x60002704
600015f4:	00000000 	.word	0x00000000
600015f8:	20009ec0 	.word	0x20009ec0
600015fc:	60026e60 	.word	0x60026e60
60001600:	20000000 	.word	0x20000000
60001604:	20009c00 	.word	0x20009c00
60001608:	00016c09 	.word	0x00016c09
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	000157cd 	.word	0x000157cd
6000161c:	2000eaa8 	.word	0x2000eaa8
60001620:	000157d1 	.word	0x000157d1
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	2000eaac 	.word	0x2000eaac
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaabff 	.word	0xaaaaabff
6000166c:	00200007 	.word	0x00200007
60001670:	20058000 	.word	0x20058000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	20008148 	.word	0x20008148
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	20008148 	.word	0x20008148

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	20008148 	.word	0x20008148
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	20008148 	.word	0x20008148

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017f0:	4770      	bx	lr
600017f2:	bf00      	nop

600017f4 <startup_default_middle_hook>:
600017f4:	4770      	bx	lr
600017f6:	bf00      	nop

600017f8 <startup_default_late_hook>:
600017f8:	4770      	bx	lr
600017fa:	bf00      	nop

600017fc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017fc:	bf00      	nop
600017fe:	4770      	bx	lr

60001800 <configure_cache>:
{
60001800:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001806:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001808:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000180a:	4831      	ldr	r0, [pc, #196]	; (600018d0 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000180c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001810:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001814:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001816:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000181a:	482e      	ldr	r0, [pc, #184]	; (600018d4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000181c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001820:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001822:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001826:	482c      	ldr	r0, [pc, #176]	; (600018d8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001828:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000182c:	4a2b      	ldr	r2, [pc, #172]	; (600018dc <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000182e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001832:	4c2b      	ldr	r4, [pc, #172]	; (600018e0 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001834:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001838:	482a      	ldr	r0, [pc, #168]	; (600018e4 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000183a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001842:	4c29      	ldr	r4, [pc, #164]	; (600018e8 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001844:	4829      	ldr	r0, [pc, #164]	; (600018ec <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001846:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000184a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000184e:	4c28      	ldr	r4, [pc, #160]	; (600018f0 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001850:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001854:	4827      	ldr	r0, [pc, #156]	; (600018f4 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001856:	4a28      	ldr	r2, [pc, #160]	; (600018f8 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001858:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000185c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001860:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001864:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001868:	4c24      	ldr	r4, [pc, #144]	; (600018fc <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000186a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000186c:	4824      	ldr	r0, [pc, #144]	; (60001900 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000186e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001872:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001876:	4a23      	ldr	r2, [pc, #140]	; (60001904 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001878:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000187c:	4c22      	ldr	r4, [pc, #136]	; (60001908 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000187e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001882:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001886:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000188a:	4820      	ldr	r0, [pc, #128]	; (6000190c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000188c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001890:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001892:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001896:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000189a:	bf00      	nop
	asm("nop");
6000189c:	bf00      	nop
	asm("nop");
6000189e:	bf00      	nop
	asm("nop");
600018a0:	bf00      	nop
	asm("nop");
600018a2:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a4:	2201      	movs	r2, #1
600018a6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ae:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018b2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ba:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018be:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018c6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600018ca:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600018ce:	4770      	bx	lr
600018d0:	1000003f 	.word	0x1000003f
600018d4:	07080025 	.word	0x07080025
600018d8:	00100009 	.word	0x00100009
600018dc:	2000ec60 	.word	0x2000ec60
600018e0:	00200013 	.word	0x00200013
600018e4:	07020021 	.word	0x07020021
600018e8:	20000014 	.word	0x20000014
600018ec:	13080025 	.word	0x13080025
600018f0:	10000009 	.word	0x10000009
600018f4:	20200016 	.word	0x20200016
600018f8:	130b0027 	.word	0x130b0027
600018fc:	40000017 	.word	0x40000017
60001900:	60000018 	.word	0x60000018
60001904:	070b002f 	.word	0x070b002f
60001908:	70000019 	.word	0x70000019
6000190c:	8000001a 	.word	0x8000001a

60001910 <configure_external_ram>:
{
60001910:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001912:	4bb8      	ldr	r3, [pc, #736]	; (60001bf4 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001916:	4eb8      	ldr	r6, [pc, #736]	; (60001bf8 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001918:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000191a:	4fb8      	ldr	r7, [pc, #736]	; (60001bfc <configure_external_ram+0x2ec>)
{
6000191c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000191e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001922:	49b7      	ldr	r1, [pc, #732]	; (60001c00 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001924:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001928:	4db6      	ldr	r5, [pc, #728]	; (60001c04 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000192a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000192e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001932:	4cb5      	ldr	r4, [pc, #724]	; (60001c08 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001934:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001938:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000193c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001940:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001944:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001948:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000194c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000194e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001950:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001952:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001954:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
6000195a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000195e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001962:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001966:	4aa9      	ldr	r2, [pc, #676]	; (60001c0c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001968:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
6000196c:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001970:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001974:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001978:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000197c:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000197e:	4ba4      	ldr	r3, [pc, #656]	; (60001c10 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001980:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001982:	48a4      	ldr	r0, [pc, #656]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001986:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001988:	4aa4      	ldr	r2, [pc, #656]	; (60001c1c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000198a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000198c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001990:	f043 030c 	orr.w	r3, r3, #12
60001994:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001998:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000199c:	6803      	ldr	r3, [r0, #0]
6000199e:	f043 0302 	orr.w	r3, r3, #2
600019a2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019a6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019a8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019ac:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ae:	4b9c      	ldr	r3, [pc, #624]	; (60001c20 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019b0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019b2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b6:	4c9b      	ldr	r4, [pc, #620]	; (60001c24 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ba:	4a9b      	ldr	r2, [pc, #620]	; (60001c28 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019c0:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019c2:	68c3      	ldr	r3, [r0, #12]
600019c4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600019c8:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ca:	6a03      	ldr	r3, [r0, #32]
600019cc:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019ce:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d0:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d2:	6a03      	ldr	r3, [r0, #32]
600019d4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019d6:	4a95      	ldr	r2, [pc, #596]	; (60001c2c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d8:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019da:	4c95      	ldr	r4, [pc, #596]	; (60001c30 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019dc:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019de:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019e0:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019e2:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e4:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019ec:	f043 0301 	orr.w	r3, r3, #1
600019f0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f4:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019f8:	498e      	ldr	r1, [pc, #568]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019fe:	f043 0301 	orr.w	r3, r3, #1
60001a02:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a06:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a0a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a0c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a10:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a14:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a16:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a18:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1e:	6803      	ldr	r3, [r0, #0]
60001a20:	f023 0302 	bic.w	r3, r3, #2
60001a24:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a26:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a28:	4b83      	ldr	r3, [pc, #524]	; (60001c38 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2a:	4984      	ldr	r1, [pc, #528]	; (60001c3c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a2c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2e:	f843 2b04 	str.w	r2, [r3], #4
60001a32:	428b      	cmp	r3, r1
60001a34:	d1fb      	bne.n	60001a2e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a36:	4a77      	ldr	r2, [pc, #476]	; (60001c14 <configure_external_ram+0x304>)
60001a38:	6813      	ldr	r3, [r2, #0]
60001a3a:	f043 0301 	orr.w	r3, r3, #1
60001a3e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a40:	6813      	ldr	r3, [r2, #0]
60001a42:	f013 0301 	ands.w	r3, r3, #1
60001a46:	d1fb      	bne.n	60001a40 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a48:	487a      	ldr	r0, [pc, #488]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a4a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a4c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a50:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a52:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a56:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a58:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a5c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a60:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a64:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a68:	4975      	ldr	r1, [pc, #468]	; (60001c40 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a6a:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6e:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a72:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a76:	4873      	ldr	r0, [pc, #460]	; (60001c44 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a78:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a7c:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a80:	4c71      	ldr	r4, [pc, #452]	; (60001c48 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a82:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a86:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a8a:	4970      	ldr	r1, [pc, #448]	; (60001c4c <configure_external_ram+0x33c>)
60001a8c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a90:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a92:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a96:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9a:	485e      	ldr	r0, [pc, #376]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa8:	6943      	ldr	r3, [r0, #20]
60001aaa:	07da      	lsls	r2, r3, #31
60001aac:	d5fc      	bpl.n	60001aa8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aae:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab6:	4957      	ldr	r1, [pc, #348]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001aba:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac6:	694b      	ldr	r3, [r1, #20]
60001ac8:	07db      	lsls	r3, r3, #31
60001aca:	d5fc      	bpl.n	60001ac6 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001acc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ace:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	4a4f      	ldr	r2, [pc, #316]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	6953      	ldr	r3, [r2, #20]
60001ae6:	07df      	lsls	r7, r3, #31
60001ae8:	d5fc      	bpl.n	60001ae4 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aee:	4858      	ldr	r0, [pc, #352]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af0:	4948      	ldr	r1, [pc, #288]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001af8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	694b      	ldr	r3, [r1, #20]
60001b02:	07de      	lsls	r6, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001b06:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b0a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b0e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b10:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b12:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b14:	4293      	cmp	r3, r2
60001b16:	d165      	bne.n	60001be4 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001b18:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b20:	483c      	ldr	r0, [pc, #240]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b22:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b26:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b2a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b2e:	6943      	ldr	r3, [r0, #20]
60001b30:	07dd      	lsls	r5, r3, #31
60001b32:	d5fc      	bpl.n	60001b2e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b34:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b36:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b3c:	4a35      	ldr	r2, [pc, #212]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b40:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b44:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b48:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b4c:	6953      	ldr	r3, [r2, #20]
60001b4e:	07dc      	lsls	r4, r3, #31
60001b50:	d5fc      	bpl.n	60001b4c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b52:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b54:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b5c:	492d      	ldr	r1, [pc, #180]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b60:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b64:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b6c:	694b      	ldr	r3, [r1, #20]
60001b6e:	07d8      	lsls	r0, r3, #31
60001b70:	d5fc      	bpl.n	60001b6c <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b72:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b74:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b7c:	4a25      	ldr	r2, [pc, #148]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b7e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b80:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b84:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b88:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8c:	6953      	ldr	r3, [r2, #20]
60001b8e:	07d9      	lsls	r1, r3, #31
60001b90:	d5fc      	bpl.n	60001b8c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b92:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b94:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b98:	482d      	ldr	r0, [pc, #180]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	491e      	ldr	r1, [pc, #120]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b9c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b9e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ba2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	694b      	ldr	r3, [r1, #20]
60001bac:	07da      	lsls	r2, r3, #31
60001bae:	d5fc      	bpl.n	60001baa <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001bb0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bb8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001bba:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bbc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bbe:	4293      	cmp	r3, r2
60001bc0:	d050      	beq.n	60001c64 <configure_external_ram+0x354>
60001bc2:	2508      	movs	r5, #8
60001bc4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001bc8:	4922      	ldr	r1, [pc, #136]	; (60001c54 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bca:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001bcc:	4b22      	ldr	r3, [pc, #136]	; (60001c58 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001bce:	4a23      	ldr	r2, [pc, #140]	; (60001c5c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd0:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001bd2:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001bd4:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd6:	2301      	movs	r3, #1
60001bd8:	4821      	ldr	r0, [pc, #132]	; (60001c60 <configure_external_ram+0x350>)
60001bda:	4422      	add	r2, r4
60001bdc:	f000 fa0c 	bl	60001ff8 <__sm_set_pool_veneer>
}
60001be0:	b003      	add	sp, #12
60001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001be4:	4b1e      	ldr	r3, [pc, #120]	; (60001c60 <configure_external_ram+0x350>)
60001be6:	2200      	movs	r2, #0
60001be8:	e9c3 2200 	strd	r2, r2, [r3]
60001bec:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bf0:	b003      	add	sp, #12
60001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	401f8400 	.word	0x401f8400
60001c04:	000170f9 	.word	0x000170f9
60001c08:	400fc000 	.word	0x400fc000
60001c0c:	1ffffcff 	.word	0x1ffffcff
60001c10:	a0000300 	.word	0xa0000300
60001c14:	402a4000 	.word	0x402a4000
60001c18:	402a8000 	.word	0x402a8000
60001c1c:	ffff0012 	.word	0xffff0012
60001c20:	00f737ff 	.word	0x00f737ff
60001c24:	80000040 	.word	0x80000040
60001c28:	7cf0ff00 	.word	0x7cf0ff00
60001c2c:	830f00ff 	.word	0x830f00ff
60001c30:	00020063 	.word	0x00020063
60001c34:	5af05af0 	.word	0x5af05af0
60001c38:	402a4200 	.word	0x402a4200
60001c3c:	402a4300 	.word	0x402a4300
60001c40:	3018049f 	.word	0x3018049f
60001c44:	0a1806eb 	.word	0x0a1806eb
60001c48:	0a180638 	.word	0x0a180638
60001c4c:	26013206 	.word	0x26013206
60001c50:	00030004 	.word	0x00030004
60001c54:	70000000 	.word	0x70000000
60001c58:	70000000 	.word	0x70000000
60001c5c:	2000ec30 	.word	0x2000ec30
60001c60:	2000e180 	.word	0x2000e180
	FLEXSPI2_IPCR0 = addr;
60001c64:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c6c:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c6e:	4808      	ldr	r0, [pc, #32]	; (60001c90 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c70:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c74:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c78:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c7c:	6943      	ldr	r3, [r0, #20]
60001c7e:	07db      	lsls	r3, r3, #31
60001c80:	d5fc      	bpl.n	60001c7c <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c82:	2301      	movs	r3, #1
60001c84:	2510      	movs	r5, #16
60001c86:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c8a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c8c:	e79c      	b.n	60001bc8 <configure_external_ram+0x2b8>
60001c8e:	bf00      	nop
60001c90:	402a4000 	.word	0x402a4000

60001c94 <usb_pll_start>:
{
60001c94:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c96:	4a15      	ldr	r2, [pc, #84]	; (60001cec <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c98:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001ca6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001caa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cae:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001cb0:	f013 0f02 	tst.w	r3, #2
60001cb4:	d10e      	bne.n	60001cd4 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001cba:	d00f      	beq.n	60001cdc <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001cbc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001cc0:	d00e      	beq.n	60001ce0 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001cc2:	2b00      	cmp	r3, #0
60001cc4:	daf3      	bge.n	60001cae <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001cc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001cca:	d10b      	bne.n	60001ce4 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ccc:	065b      	lsls	r3, r3, #25
60001cce:	d50b      	bpl.n	60001ce8 <usb_pll_start+0x54>
}
60001cd0:	bcf0      	pop	{r4, r5, r6, r7}
60001cd2:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cd4:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cd6:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cd8:	6190      	str	r0, [r2, #24]
			continue;
60001cda:	e7e8      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cdc:	6155      	str	r5, [r2, #20]
			continue;
60001cde:	e7e6      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ce0:	6156      	str	r6, [r2, #20]
			continue;
60001ce2:	e7e4      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ce4:	6191      	str	r1, [r2, #24]
			continue;
60001ce6:	e7e2      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ce8:	6157      	str	r7, [r2, #20]
			continue;
60001cea:	e7e0      	b.n	60001cae <usb_pll_start+0x1a>
60001cec:	400d8000 	.word	0x400d8000

60001cf0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cf0:	4a3f      	ldr	r2, [pc, #252]	; (60001df0 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cf2:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cf4:	493f      	ldr	r1, [pc, #252]	; (60001df4 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf6:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cfa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cfe:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d02:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001df8 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d06:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d0a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dfc <tempmon_init+0x10c>
{
60001d0e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d14:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d18:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d1c:	4d38      	ldr	r5, [pc, #224]	; (60001e00 <tempmon_init+0x110>)
60001d1e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d20:	4c38      	ldr	r4, [pc, #224]	; (60001e04 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d22:	4839      	ldr	r0, [pc, #228]	; (60001e08 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d24:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d26:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d2a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d2c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d34:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d38:	ee07 1a10 	vmov	s14, r1
60001d3c:	4b33      	ldr	r3, [pc, #204]	; (60001e0c <tempmon_init+0x11c>)
60001d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d42:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d48:	4931      	ldr	r1, [pc, #196]	; (60001e10 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d52:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d56:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d5a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d5e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d62:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d6a:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d6e:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d76:	4827      	ldr	r0, [pc, #156]	; (60001e14 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d78:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d80:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d84:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d8c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d90:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d98:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001da0:	ee16 3a10 	vmov	r3, s12
60001da4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dac:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001db0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001dbe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001dc2:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001dc4:	4914      	ldr	r1, [pc, #80]	; (60001e18 <tempmon_init+0x128>)
60001dc6:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001dce:	f043 0302 	orr.w	r3, r3, #2
60001dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001dd6:	4b11      	ldr	r3, [pc, #68]	; (60001e1c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001dd8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001ddc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001de4:	2201      	movs	r2, #1
}
60001de6:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dec:	4770      	bx	lr
60001dee:	bf00      	nop
60001df0:	400d8100 	.word	0x400d8100
60001df4:	401f4400 	.word	0x401f4400
60001df8:	42aa0000 	.word	0x42aa0000
60001dfc:	42b40000 	.word	0x42b40000
60001e00:	2000e9c8 	.word	0x2000e9c8
60001e04:	2000e9c4 	.word	0x2000e9c4
60001e08:	2000e9cc 	.word	0x2000e9cc
60001e0c:	2000e9d0 	.word	0x2000e9d0
60001e10:	0fff0000 	.word	0x0fff0000
60001e14:	e000e400 	.word	0xe000e400
60001e18:	20009c00 	.word	0x20009c00
60001e1c:	00016df5 	.word	0x00016df5

60001e20 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e20:	4b31      	ldr	r3, [pc, #196]	; (60001ee8 <usb_init+0xc8>)
60001e22:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001e26:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e28:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e2c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001e30:	f000 f8d6 	bl	60001fe0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e34:	4a2d      	ldr	r2, [pc, #180]	; (60001eec <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001e36:	492e      	ldr	r1, [pc, #184]	; (60001ef0 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e3c:	482d      	ldr	r0, [pc, #180]	; (60001ef4 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e3e:	f043 0303 	orr.w	r3, r3, #3
60001e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e46:	4b2c      	ldr	r3, [pc, #176]	; (60001ef8 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e48:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e4c:	6802      	ldr	r2, [r0, #0]
60001e4e:	421a      	tst	r2, r3
60001e50:	d103      	bne.n	60001e5a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e52:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e56:	079a      	lsls	r2, r3, #30
60001e58:	d01b      	beq.n	60001e92 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e5a:	4a25      	ldr	r2, [pc, #148]	; (60001ef0 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e60:	4b24      	ldr	r3, [pc, #144]	; (60001ef4 <usb_init+0xd4>)
60001e62:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e64:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e68:	f043 0302 	orr.w	r3, r3, #2
60001e6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e70:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e74:	079b      	lsls	r3, r3, #30
60001e76:	d4fb      	bmi.n	60001e70 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e80:	4b1c      	ldr	r3, [pc, #112]	; (60001ef4 <usb_init+0xd4>)
60001e82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e86:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e8a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e8c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e8e:	f000 f8ab 	bl	60001fe8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e92:	4a18      	ldr	r2, [pc, #96]	; (60001ef4 <usb_init+0xd4>)
60001e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e98:	4c15      	ldr	r4, [pc, #84]	; (60001ef0 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e9a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e9c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e9e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea0:	4b16      	ldr	r3, [pc, #88]	; (60001efc <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001ea2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ea8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eac:	4618      	mov	r0, r3
60001eae:	f000 f88b 	bl	60001fc8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001eb2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eb6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001eb8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ebc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001ec0:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001ec2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001ec6:	641a      	str	r2, [r3, #64]	; 0x40
60001ec8:	4b0d      	ldr	r3, [pc, #52]	; (60001f00 <usb_init+0xe0>)
60001eca:	4a0e      	ldr	r2, [pc, #56]	; (60001f04 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ecc:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ed4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ed8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001edc:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ede:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001ee2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ee6:	bd10      	pop	{r4, pc}
60001ee8:	400d8000 	.word	0x400d8000
60001eec:	400fc000 	.word	0x400fc000
60001ef0:	402e0000 	.word	0x402e0000
60001ef4:	400d9000 	.word	0x400d9000
60001ef8:	001e1c00 	.word	0x001e1c00
60001efc:	20000000 	.word	0x20000000
60001f00:	20009c00 	.word	0x20009c00
60001f04:	00016fdd 	.word	0x00016fdd

60001f08 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001f08:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001f0a:	4b0e      	ldr	r3, [pc, #56]	; (60001f44 <_reboot_Teensyduino_+0x3c>)
60001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001f0e:	079b      	lsls	r3, r3, #30
60001f10:	d400      	bmi.n	60001f14 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001f12:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001f14:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001f16:	4b0c      	ldr	r3, [pc, #48]	; (60001f48 <_reboot_Teensyduino_+0x40>)
60001f18:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f1a:	4a0c      	ldr	r2, [pc, #48]	; (60001f4c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001f1c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f24:	490a      	ldr	r1, [pc, #40]	; (60001f50 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f26:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f2a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f2c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f2e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001f36:	4807      	ldr	r0, [pc, #28]	; (60001f54 <_reboot_Teensyduino_+0x4c>)
60001f38:	4a07      	ldr	r2, [pc, #28]	; (60001f58 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f3c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3e:	689b      	ldr	r3, [r3, #8]
60001f40:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f42:	bf00      	nop
60001f44:	401f4400 	.word	0x401f4400
60001f48:	402e0000 	.word	0x402e0000
60001f4c:	400ac000 	.word	0x400ac000
60001f50:	00200003 	.word	0x00200003
60001f54:	20208000 	.word	0x20208000
60001f58:	eb120000 	.word	0xeb120000

60001f5c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f5c:	4b10      	ldr	r3, [pc, #64]	; (60001fa0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f5e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f60:	4a10      	ldr	r2, [pc, #64]	; (60001fa4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f62:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f64:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f68:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f6a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f6c:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f72:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f76:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f78:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f7a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f7c:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f7e:	061b      	lsls	r3, r3, #24
60001f80:	d4fc      	bmi.n	60001f7c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f82:	4a09      	ldr	r2, [pc, #36]	; (60001fa8 <analog_init+0x4c>)
60001f84:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f88:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f8a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f8c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f94:	d1fb      	bne.n	60001f8e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f96:	4a05      	ldr	r2, [pc, #20]	; (60001fac <analog_init+0x50>)
60001f98:	7013      	strb	r3, [r2, #0]
}
60001f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f9e:	4770      	bx	lr
60001fa0:	400fc000 	.word	0x400fc000
60001fa4:	400c4000 	.word	0x400c4000
60001fa8:	400c8000 	.word	0x400c8000
60001fac:	2000ec2f 	.word	0x2000ec2f

60001fb0 <_init>:
60001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001fb2:	bf00      	nop
60001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001fb6:	bc08      	pop	{r3}
60001fb8:	469e      	mov	lr, r3
60001fba:	4770      	bx	lr
60001fbc:	0000      	movs	r0, r0
	...

60001fc0 <__pwm_init_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__pwm_init_veneer+0x4>
60001fc4:	00016af9 	.word	0x00016af9

60001fc8 <__memset_veneer>:
60001fc8:	f85f f000 	ldr.w	pc, [pc]	; 60001fcc <__memset_veneer+0x4>
60001fcc:	0001ba39 	.word	0x0001ba39

60001fd0 <__set_arm_clock_veneer>:
60001fd0:	f85f f000 	ldr.w	pc, [pc]	; 60001fd4 <__set_arm_clock_veneer+0x4>
60001fd4:	00015af1 	.word	0x00015af1

60001fd8 <____libc_init_array_veneer>:
60001fd8:	f85f f000 	ldr.w	pc, [pc]	; 60001fdc <____libc_init_array_veneer+0x4>
60001fdc:	0001ccc9 	.word	0x0001ccc9

60001fe0 <__usb_init_serialnumber_veneer>:
60001fe0:	f85f f000 	ldr.w	pc, [pc]	; 60001fe4 <__usb_init_serialnumber_veneer+0x4>
60001fe4:	0001774d 	.word	0x0001774d

60001fe8 <__delay_veneer>:
60001fe8:	f85f f000 	ldr.w	pc, [pc]	; 60001fec <__delay_veneer+0x4>
60001fec:	00015de1 	.word	0x00015de1

60001ff0 <__main_veneer>:
60001ff0:	f85f f000 	ldr.w	pc, [pc]	; 60001ff4 <__main_veneer+0x4>
60001ff4:	00016575 	.word	0x00016575

60001ff8 <__sm_set_pool_veneer>:
60001ff8:	f85f f000 	ldr.w	pc, [pc]	; 60001ffc <__sm_set_pool_veneer+0x4>
60001ffc:	00018061 	.word	0x00018061

60002000 <__frame_dummy_init_array_entry>:
60002000:	00000149 0000072d 00001d69 000021b1     I...-...i....!..
60002010:	000024ed 0000292d 00002dc5 00003569     .$..-)...-..i5..
60002020:	00004565 000050ed 0000561d 00005f45     eE...P...V..E_..
60002030:	00006d9d 00008419 00008f2d 0000a399     .m......-.......
60002040:	0000b5ad 0000b9dd 0000bfcd 0000cda5     ................
60002050:	0000dab5 0000fc7d 00014e35 00015a19     ....}...5N...Z..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
		// do callback function...
		//println("    completed");
		return true;
	}
	return false;
}
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char s[MSL];
  // changed to svs rather than svo, the bridge do not handle same name 
  // both to and from robot - gets relayed back to robot (create overhead)
  snprintf(s, MSL, "enc %lu %lu\r\n", encoder[0], encoder[1]);
  usb.send(s);
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
      2a:	4015      	ands	r5, r2

void USubss::sendPublishList(int & listNum)
{
  for (int i = 0; i < (int)subs.size(); i++)
    subs[i]->sendPublishList(listNum);
}
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0x9f>)
{
  const int MSL = 150;
  char s[MSL];
  snprintf(s, MSL, "# '%s';'%s';'%s'\r\n", lineName, lineState, lineFree);
  usb.send(s);
}
      30:	2601      	movs	r6, #1
      32:	619d      	str	r5, [r3, #24]
{
  const int MSL = 200;
  char s[MSL];
  snprintf(s, MSL, "pub %d %s %s\r\n", listNum++, msgKey, helpText);
  usb.send(s);
}
      34:	fa95 f4a5 	rbit	r4, r5
           motorCurrentRawAD[0],
           motorCurrentRawAD[1],
           supplyCurrent
  );
  usb.send(s);
}
      38:	fab4 f484 	clz	r4, r4
  bool pressed_now = not digitalReadFast(PIN_START_BUTTON);
  if (buttonPressed and not pressed_now and not robot.poweringOff)
    released = true;
  buttonPressed = pressed_now;
  return released;
}
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
		if (changebits & (1 << i)) {
			send_getstatus(i);
		}
	}
	queue_Data_Transfer(changepipe, &changebits, 1, this);
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
	queue_Data_Transfer(changepipe, &changebits, 1, this);
      44:	4798      	blx	r3
  //   int16_t * m = mpu.getMag();
  snprintf(reply, MRL, "# AS5147U: interface %d, reg  %x = warn=%d, err=%d, data= 0x%04x\r\n",
           reg16Interface, reg16, reg16Raw.values.pard, reg16Raw.values.ef, reg16Raw.values.data);
  usb.send(reply);
  reg16IsSend = true;
}
      46:	43a5      	bics	r5, r4
  snprintf(reply, MRL, "gyroo %f %f %f\r\n",
           offsetGyro[0],
           offsetGyro[1],
           offsetGyro[2]);
  usb.send(reply);
}
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa3>)
  char reply[MRL];
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
           motorCurrentMOffset[0]/300, motorCurrentMOffset[1]/300, 
           ad.motorCurrentRawAD[0], ad.motorCurrentRawAD[1]);
  usb.send(reply);
}
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
    65000; // default
  else if (frq < 100)
    PWMfrq = 100;
  else
    PWMfrq = frq;
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa7>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      6a:	4798      	blx	r3
}

// for debugging, hopefully never needed...
void USBHost::countFree(uint32_t &devices, uint32_t &pipes, uint32_t &transfers, uint32_t &strs)
{
	uint32_t ndev=0, npipe=0, ntransfer=0, nstr=0;
      6c:	43a5      	bics	r5, r4
	Transfer_t *transfer = free_Transfer_list;
	while (transfer) {
		ntransfer++;
		transfer = *(Transfer_t **)transfer;
	}
	strbuf_t *str = free_strbuf_list;
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xab>)
	while (str) {
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
	uint32_t ndev=0, npipe=0, ntransfer=0, nstr=0;
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xaf>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
      80:	fa95 f4a5 	rbit	r4, r5
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
        txbuf_[7] = 0x10;
        txbuf_[8] = 0x01;
        txbuf_[9] = 0x02;
        txbuf_[10] = 0x12;
        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        return driver_->sendControlPacket(0x21, 9, 0x305, 0, 11, txbuf_);
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb3>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
    }
    return false;
}
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb7>)
			write(iaddress.b[n]);
      a2:	2601      	movs	r6, #1
		} while (n > 0);
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
}
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FF8000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
      b2:	fa06 f404 	lsl.w	r4, r6, r4
      b6:	4798      	blx	r3
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      bc:	f3bf 8f4f 	dsb	sy
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	20009978 	.word	0x20009978
      c8:	42004000 	.word	0x42004000
      cc:	200099f8 	.word	0x200099f8
      d0:	42008000 	.word	0x42008000
      d4:	20009a78 	.word	0x20009a78
      d8:	4200c000 	.word	0x4200c000
      dc:	20009af8 	.word	0x20009af8

000000e0 <deregister_tm_clones>:
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList4c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList4c, sizeof(scrollList4c));
  TRANSACTION_END
}
      e0:	4803      	ldr	r0, [pc, #12]	; (f0 <deregister_tm_clones+0x10>)
      e2:	4b04      	ldr	r3, [pc, #16]	; (f4 <deregister_tm_clones+0x14>)
	// transfer value
	digitalWrite(chipSelectPin, LOW);
	SPI.transfer16(value);
	digitalWrite(chipSelectPin, HIGH);
	SPI.endTransaction();
}
      e4:	4283      	cmp	r3, r0
      e6:	d002      	beq.n	ee <deregister_tm_clones+0xe>
      e8:	4b03      	ldr	r3, [pc, #12]	; (f8 <deregister_tm_clones+0x18>)
      ea:	b103      	cbz	r3, ee <deregister_tm_clones+0xe>
      ec:	4718      	bx	r3
      ee:	4770      	bx	lr
      f0:	20009ec0 	.word	0x20009ec0
      f4:	20009ec0 	.word	0x20009ec0
      f8:	00000000 	.word	0x00000000

000000fc <register_tm_clones>:
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
      fc:	4805      	ldr	r0, [pc, #20]	; (114 <register_tm_clones+0x18>)
	if (pinmode & mask) {
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <register_tm_clones+0x1c>)
     100:	1a1b      	subs	r3, r3, r0
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     102:	0fd9      	lsrs	r1, r3, #31
     104:	eb01 01a3 	add.w	r1, r1, r3, asr #2
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
		    t += cycles / 2;
		}
	}
	else
	for (mask=0x01; mask; mask <<= 1) {
     108:	1049      	asrs	r1, r1, #1
     10a:	d002      	beq.n	112 <register_tm_clones+0x16>
     10c:	4b03      	ldr	r3, [pc, #12]	; (11c <register_tm_clones+0x20>)
	if (pin >= CORE_NUM_DIGITAL) return;
     10e:	b103      	cbz	r3, 112 <register_tm_clones+0x16>
     110:	4718      	bx	r3
     112:	4770      	bx	lr
     114:	20009ec0 	.word	0x20009ec0
     118:	20009ec0 	.word	0x20009ec0
     11c:	00000000 	.word	0x00000000

00000120 <__do_global_dtors_aux>:
     120:	b510      	push	{r4, lr}
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <__do_global_dtors_aux+0x1c>)
	pinmode = *(p->reg + 1);
     124:	7823      	ldrb	r3, [r4, #0]
	mask = p->mask;
     126:	b943      	cbnz	r3, 13a <__do_global_dtors_aux+0x1a>
	pinmode = *(p->reg + 1);
     128:	f7ff ffda 	bl	e0 <deregister_tm_clones>
	if (pinmode & mask) {
     12c:	4b04      	ldr	r3, [pc, #16]	; (140 <__do_global_dtors_aux+0x20>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	b113      	cbz	r3, 136 <__do_global_dtors_aux+0x16>
     130:	4804      	ldr	r0, [pc, #16]	; (144 <__do_global_dtors_aux+0x24>)
	pinmode = *(p->reg + 1);
     132:	f3af 8000 	nop.w
	if (pinmode & mask) {
     136:	2301      	movs	r3, #1
     138:	7023      	strb	r3, [r4, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	bd10      	pop	{r4, pc}
     13c:	2000d0e8 	.word	0x2000d0e8
     140:	00000000 	.word	0x00000000
     144:	60031c00 	.word	0x60031c00

00000148 <frame_dummy>:
     148:	b508      	push	{r3, lr}
     14a:	4b04      	ldr	r3, [pc, #16]	; (15c <frame_dummy+0x14>)
     14c:	b11b      	cbz	r3, 156 <frame_dummy+0xe>
     14e:	4904      	ldr	r1, [pc, #16]	; (160 <frame_dummy+0x18>)
     150:	4804      	ldr	r0, [pc, #16]	; (164 <frame_dummy+0x1c>)
     152:	f3af 8000 	nop.w
     156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     15a:	e7cf      	b.n	fc <register_tm_clones>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	00000000 	.word	0x00000000
     160:	2000d0ec 	.word	0x2000d0ec
    // setup adc_etc - BUGBUG have not used the preset values yet.
    if (IMXRT_ADC_ETC.CTRL & ADC_ETC_CTRL_SOFTRST)
    { // SOFTRST
        // Soft reset
        atomic::clearBitFlag(IMXRT_ADC_ETC.CTRL, ADC_ETC_CTRL_SOFTRST);
        delay(5); // give some time to be sure it is init
     164:	60031c00 	.word	0x60031c00

00000168 <getRevisionString()>:

///
const char * getRevisionString()
{
  return "$Id: teensy_firmware_8.ino 1033 2025-01-26 15:41:51Z jcan $";
}
     168:	4800      	ldr	r0, [pc, #0]	; (16c <getRevisionString()+0x4>)
     16a:	4770      	bx	lr
     16c:	20002684 	.word	0x20002684

00000170 <setup>:


// ////////////////////////////////////////

void setup()   // INITIALIZATION
{
     170:	b508      	push	{r3, lr}
   * Set intensity to 0=off, 1=max or 2..255 PWM intensity
   * */
  inline void setStatusLed(uint8_t value) {
    #if defined(REGBOT_HW4) || defined(REGBOT_HW41) || defined(REGBOT_HW63_35)
    int pin = PIN_LED_STATUS;
    if (robotHWversion == 9)
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <setup+0x24>)
    { // blue board (PCB version 6.x)
      pin = PIN_LED_STATUS_6;
    }
    if (value == 1)
      // boolean value, so max intensity
      analogWrite(pin, 4095);
     174:	f640 71ff 	movw	r1, #4095	; 0xfff
    if (robotHWversion == 9)
     178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
     17c:	2b09      	cmp	r3, #9
      analogWrite(pin, 4095);
     17e:	bf14      	ite	ne
     180:	2006      	movne	r0, #6
     182:	2000      	moveq	r0, #0
     184:	f016 fbdc 	bl	16940 <analogWrite>
  robot.setStatusLed(HIGH);
  service.setup();
     188:	4803      	ldr	r0, [pc, #12]	; (198 <setup+0x28>)
}
     18a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  service.setup();
     18e:	f00b bacb 	b.w	b728 <UService::setup()>
     192:	bf00      	nop
     194:	2000e654 	.word	0x2000e654
     198:	2000d0c8 	.word	0x2000d0c8

0000019c <loop>:
    if (robotHWversion == 9)
     19c:	4b11      	ldr	r3, [pc, #68]	; (1e4 <loop+0x48>)
    else
      // use value as is - but convert to 12 bit
      analogWrite(pin, value << 3);
     19e:	2100      	movs	r1, #0
* Main loop
* */
// const int MSL = 100;
// char s[MSL];
void loop ( void )
{
     1a0:	b570      	push	{r4, r5, r6, lr}
    if (robotHWversion == 9)
     1a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  robot.setStatusLed(LOW);
  int cnt = 0;
  bool done1 = false;
  while ( true )
  { // main loop
    if (service.isSampleTime())
     1a6:	4c10      	ldr	r4, [pc, #64]	; (1e8 <loop+0x4c>)
      pin = PIN_LED_STATUS_6;
     1a8:	2b09      	cmp	r3, #9
    {
      service.updateSensors();
      // advance mission
      done1 = dbehave.tick();
     1aa:	4e10      	ldr	r6, [pc, #64]	; (1ec <loop+0x50>)
      if (done1)
        usb.send("%% finished demo 1\n");
     1ac:	4d10      	ldr	r5, [pc, #64]	; (1f0 <loop+0x54>)
      analogWrite(pin, value << 3);
     1ae:	bf14      	ite	ne
     1b0:	2006      	movne	r0, #6
     1b2:	4608      	moveq	r0, r1
     1b4:	f016 fbc4 	bl	16940 <analogWrite>
    if (service.isSampleTime())
     1b8:	4620      	mov	r0, r4
     1ba:	f00b fb49 	bl	b850 <UService::isSampleTime()>
     1be:	2800      	cmp	r0, #0
     1c0:	d0fa      	beq.n	1b8 <loop+0x1c>
      service.updateSensors();
     1c2:	4620      	mov	r0, r4
     1c4:	f00b fb9a 	bl	b8fc <UService::updateSensors()>
      done1 = dbehave.tick();
     1c8:	4630      	mov	r0, r6
     1ca:	f000 f8b1 	bl	330 <UDemo_Behave::tick()>
     1ce:	4603      	mov	r3, r0
        usb.send("%% finished demo 1\n");
     1d0:	4629      	mov	r1, r5
     1d2:	4808      	ldr	r0, [pc, #32]	; (1f4 <loop+0x58>)
      if (done1)
     1d4:	b10b      	cbz	r3, 1da <loop+0x3e>
        usb.send("%% finished demo 1\n");
     1d6:	f00c f9a1 	bl	c51c <UUSB::send(char const*)>
      // implement mission actions
      service.updateActuators();
     1da:	4620      	mov	r0, r4
     1dc:	f00b fbca 	bl	b974 <UService::updateActuators()>
      cnt++;
     1e0:	e7ea      	b.n	1b8 <loop+0x1c>
     1e2:	bf00      	nop
     1e4:	2000e654 	.word	0x2000e654
     1e8:	2000d0c8 	.word	0x2000d0c8
     1ec:	2000dae4 	.word	0x2000dae4
     1f0:	200084b8 	.word	0x200084b8
     1f4:	2000eab8 	.word	0x2000eab8

000001f8 <UDemo_Behave::followLine(float) [clone .part.0]>:
  float e, u;
  const float kp = 0.5;
  if (ls.lineValid)
  { // line position is a value from
    // about -2 (robot too far right) to +2 (too far left)
    e = pos - ls.linePosition; // error compared to 'pos'
     1f8:	4b19      	ldr	r3, [pc, #100]	; (260 <UDemo_Behave::followLine(float) [clone .part.0]+0x68>)
    //u = kp * e;   // P controller
    u = lead.tick(kp * e);  // P-Lead controller
     1fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    e = pos - ls.linePosition; // error compared to 'pos'
     1fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
void UDemo_Behave::followLine(float pos)
     202:	4603      	mov	r3, r0
    // get average voltage
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     204:	4817      	ldr	r0, [pc, #92]	; (264 <UDemo_Behave::followLine(float) [clone .part.0]+0x6c>)
    e = pos - ls.linePosition; // error compared to 'pos'
     206:	ee30 0a67 	vsub.f32	s0, s0, s15


float ULead::tick(float x)
{
  float y = 0;
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     20a:	ed93 7a04 	vldr	s14, [r3, #16]
     20e:	edd3 7a03 	vldr	s15, [r3, #12]
     212:	ed93 4a02 	vldr	s8, [r3, #8]
    u = lead.tick(kp * e);  // P-Lead controller
     216:	ee20 0a06 	vmul.f32	s0, s0, s12
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     21a:	ed93 5a05 	vldr	s10, [r3, #20]
     21e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
     222:	edd3 6a01 	vldr	s13, [r3, #4]
     226:	edd3 5a00 	vldr	s11, [r3]
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     22a:	ed90 7a06 	vldr	s14, [r0, #24]
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     22e:	eee0 7a04 	vfma.f32	s15, s0, s8
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     232:	edd0 4a07 	vldr	s9, [r0, #28]
  x1 = x;
     236:	ed83 0a04 	vstr	s0, [r3, #16]
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     23a:	ee37 7a24 	vadd.f32	s14, s14, s9
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     23e:	eee5 7a26 	vfma.f32	s15, s10, s13
     242:	eec7 6aa5 	vdiv.f32	s13, s15, s11
    motor.setMotorVoltage(avgv - u, avgv + u);
     246:	eef0 0a66 	vmov.f32	s1, s13
  y1 = y;
     24a:	edc3 6a05 	vstr	s13, [r3, #20]
    motor.setMotorVoltage(avgv - u, avgv + u);
     24e:	eeb0 0a66 	vmov.f32	s0, s13
     252:	eee7 0a06 	vfma.f32	s1, s14, s12
     256:	ee97 0a06 	vfnms.f32	s0, s14, s12
     25a:	f008 bde5 	b.w	8e28 <UMotor::setMotorVoltage(float, float)>
     25e:	bf00      	nop
     260:	2000e384 	.word	0x2000e384
     264:	2000e4bc 	.word	0x2000e4bc

00000268 <ULead::setup(float, float, float)>:
  tauP2pT = tauP*2.0 + sampleTime;
     268:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     26c:	4a2d      	ldr	r2, [pc, #180]	; (324 <ULead::setup(float, float, float)+0xbc>)
  tauP2pT = tauP*2.0 + sampleTime;
     26e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     272:	2196      	movs	r1, #150	; 0x96
  tauP2pT = tauP*2.0 + sampleTime;
     274:	eeb7 7ae0 	vcvt.f64.f32	d7, s1
     278:	eeb0 2b41 	vmov.f64	d2, d1
  tauZ2pT = tauZ * 2.0 + sampleTime;
     27c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
  tauP2mT = tauP*2.0 - sampleTime;
     280:	eeb0 3b41 	vmov.f64	d3, d1
  tauZ2pT = tauZ * 2.0 + sampleTime;
     284:	eeb0 4b41 	vmov.f64	d4, d1
  tauZ2mT = tauZ * 2.0 - sampleTime;
     288:	eeb0 5b41 	vmov.f64	d5, d1
  tauP2pT = tauP*2.0 + sampleTime;
     28c:	eea7 2b06 	vfma.f64	d2, d7, d6
  tauP2mT = tauP*2.0 - sampleTime;
     290:	ee97 3b06 	vfnms.f64	d3, d7, d6
  tauZ2pT = tauZ * 2.0 + sampleTime;
     294:	eea0 4b06 	vfma.f64	d4, d0, d6
  tauZ2mT = tauZ * 2.0 - sampleTime;
     298:	ee90 5b06 	vfnms.f64	d5, d0, d6
  tauP2pT = tauP*2.0 + sampleTime;
     29c:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  tauP2mT = tauP*2.0 - sampleTime;
     2a0:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  tauZ2pT = tauZ * 2.0 + sampleTime;
     2a4:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
{
     2a8:	b530      	push	{r4, r5, lr}
  tauZ2mT = tauZ * 2.0 - sampleTime;
     2aa:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
{
     2ae:	b0af      	sub	sp, #188	; 0xbc
     2b0:	4604      	mov	r4, r0
  usb.send(s);
     2b2:	4d1d      	ldr	r5, [pc, #116]	; (328 <ULead::setup(float, float, float)+0xc0>)
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     2b4:	a808      	add	r0, sp, #32
     2b6:	ed8d 1b04 	vstr	d1, [sp, #16]
     2ba:	ed8d 7b02 	vstr	d7, [sp, #8]
     2be:	ed8d 0b00 	vstr	d0, [sp]
  tauP2pT = tauP*2.0 + sampleTime;
     2c2:	ed84 2a00 	vstr	s4, [r4]
  tauP2mT = tauP*2.0 - sampleTime;
     2c6:	ed84 3a01 	vstr	s6, [r4, #4]
  tauZ2pT = tauZ * 2.0 + sampleTime;
     2ca:	ed84 4a02 	vstr	s8, [r4, #8]
  tauZ2mT = tauZ * 2.0 - sampleTime;
     2ce:	ed84 5a03 	vstr	s10, [r4, #12]
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     2d2:	f01b f9df 	bl	1b694 <snprintf>
  usb.send(s);
     2d6:	a908      	add	r1, sp, #32
     2d8:	4628      	mov	r0, r5
     2da:	f00c f91f 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "%%       tauZ2pT = %g, tauZ2mT = %g, tauP2pT = %g, tauP2mT = %g\n",
     2de:	ed94 4a01 	vldr	s8, [r4, #4]
     2e2:	ed94 5a00 	vldr	s10, [r4]
     2e6:	2196      	movs	r1, #150	; 0x96
     2e8:	ed94 6a03 	vldr	s12, [r4, #12]
     2ec:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     2f0:	ed94 7a02 	vldr	s14, [r4, #8]
     2f4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
     2f8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     2fc:	4a0b      	ldr	r2, [pc, #44]	; (32c <ULead::setup(float, float, float)+0xc4>)
     2fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     302:	a808      	add	r0, sp, #32
     304:	ed8d 4b06 	vstr	d4, [sp, #24]
     308:	ed8d 5b04 	vstr	d5, [sp, #16]
     30c:	ed8d 6b02 	vstr	d6, [sp, #8]
     310:	ed8d 7b00 	vstr	d7, [sp]
     314:	f01b f9be 	bl	1b694 <snprintf>
  usb.send(s);
     318:	a908      	add	r1, sp, #32
     31a:	4628      	mov	r0, r5
     31c:	f00c f8fe 	bl	c51c <UUSB::send(char const*)>
}
     320:	b02f      	add	sp, #188	; 0xbc
     322:	bd30      	pop	{r4, r5, pc}
     324:	20004cf8 	.word	0x20004cf8
     328:	2000eab8 	.word	0x2000eab8
     32c:	20004d2c 	.word	0x20004d2c

00000330 <UDemo_Behave::tick()>:
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	6985      	ldr	r5, [r0, #24]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
     334:	b0b7      	sub	sp, #220	; 0xdc
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
     336:	4604      	mov	r4, r0
     338:	2d0e      	cmp	r5, #14
     33a:	dc14      	bgt.n	366 <UDemo_Behave::tick()+0x36>
     33c:	2d00      	cmp	r5, #0
     33e:	db23      	blt.n	388 <UDemo_Behave::tick()+0x58>
     340:	2d0e      	cmp	r5, #14
     342:	d821      	bhi.n	388 <UDemo_Behave::tick()+0x58>
     344:	e8df f015 	tbh	[pc, r5, lsl #1]
     348:	00200055 	.word	0x00200055
  // debug
  snprintf(s, MSL, "# calc K and R vel: R=%.3f, OK=%d\n", estR, estR > 0 and estK > 0);
  usb.send(s);
  // debug end
  return estR > 0 and estK > 0;
}
     34c:	00200020 	.word	0x00200020
     350:	00200020 	.word	0x00200020
     354:	00200020 	.word	0x00200020
     358:	00200020 	.word	0x00200020
     35c:	00cd009d 	.word	0x00cd009d
     360:	012200f5 	.word	0x012200f5
     364:	0146      	.short	0x0146
     366:	2d5a      	cmp	r5, #90	; 0x5a
     368:	d10e      	bne.n	388 <UDemo_Behave::tick()+0x58>
     36a:	4bc9      	ldr	r3, [pc, #804]	; (690 <UDemo_Behave::tick()+0x360>)
     36c:	edd0 7a07 	vldr	s15, [r0, #28]
     370:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
     374:	eeb4 7ae7 	vcmpe.f32	s14, s15
     378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     37c:	f340 8158 	ble.w	630 <UDemo_Behave::tick()+0x300>
     380:	2363      	movs	r3, #99	; 0x63
     382:	461d      	mov	r5, r3
     384:	61a3      	str	r3, [r4, #24]
     386:	e086      	b.n	496 <UDemo_Behave::tick()+0x166>
    encoderReversed = not encoderReversed;
     388:	2500      	movs	r5, #0
    return false;
     38a:	6a26      	ldr	r6, [r4, #32]
    usb.send("# encoder reversed is fixed, run test again\n");
     38c:	61a5      	str	r5, [r4, #24]
    encoderReversed = not encoderReversed;
     38e:	b1fe      	cbz	r6, 3d0 <UDemo_Behave::tick()+0xa0>
     390:	4bc0      	ldr	r3, [pc, #768]	; (694 <UDemo_Behave::tick()+0x364>)
    usb.send("# encoder reversed is fixed, run test again\n");
     392:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
     396:	f019 f839 	bl	1940c <__aeabi_ul2f>
}
     39a:	ee07 0a90 	vmov	s15, r0
     39e:	4633      	mov	r3, r6
     3a0:	4abd      	ldr	r2, [pc, #756]	; (698 <UDemo_Behave::tick()+0x368>)
     3a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  for (int i = 0; i < lowN; i++)
     3a6:	21c8      	movs	r1, #200	; 0xc8
     3a8:	a804      	add	r0, sp, #16
  float sumCurLow = 0;
     3aa:	9500      	str	r5, [sp, #0]
     3ac:	ed9f 6bae 	vldr	d6, [pc, #696]	; 668 <UDemo_Behave::tick()+0x338>
  for (int i = 0; i < highN; i++)
     3b0:	ee27 7b06 	vmul.f64	d7, d7, d6
  float sumCurHigh = 0;
     3b4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     3b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     3bc:	ed8d 7b02 	vstr	d7, [sp, #8]
     3c0:	f01b f968 	bl	1b694 <snprintf>
     3c4:	a904      	add	r1, sp, #16
     3c6:	48b5      	ldr	r0, [pc, #724]	; (69c <UDemo_Behave::tick()+0x36c>)
     3c8:	f00c f8a8 	bl	c51c <UUSB::send(char const*)>
     3cc:	69a3      	ldr	r3, [r4, #24]
     3ce:	6223      	str	r3, [r4, #32]
     3d0:	eddf 0ab3 	vldr	s1, [pc, #716]	; 6a0 <UDemo_Behave::tick()+0x370>
    motor.setMotorVoltage(0, 0);
     3d4:	48b3      	ldr	r0, [pc, #716]	; (6a4 <UDemo_Behave::tick()+0x374>)
     3d6:	eeb0 0a60 	vmov.f32	s0, s1
     3da:	f008 fd25 	bl	8e28 <UMotor::setMotorVoltage(float, float)>
    logger.stopLogging();
     3de:	48b2      	ldr	r0, [pc, #712]	; (6a8 <UDemo_Behave::tick()+0x378>)
     3e0:	f006 fe0a 	bl	6ff8 <ULog::stopLogging()>
    ls.lineSensorOn = false;
     3e4:	4bb1      	ldr	r3, [pc, #708]	; (6ac <UDemo_Behave::tick()+0x37c>)
     3e6:	2200      	movs	r2, #0
     3e8:	2001      	movs	r0, #1
     3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
     3ee:	b037      	add	sp, #220	; 0xdc
     3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return (CORE_PIN37_PINREG & CORE_PIN37_BITMASK) ? 1 : 0;
     3f2:	4baf      	ldr	r3, [pc, #700]	; (6b0 <UDemo_Behave::tick()+0x380>)
     3f4:	689b      	ldr	r3, [r3, #8]
     3f6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  if (buttonPressed and not pressed_now and not robot.poweringOff)
     3fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
     3fe:	f000 8167 	beq.w	6d0 <UDemo_Behave::tick()+0x3a0>
     402:	2b00      	cmp	r3, #0
     404:	f000 8165 	beq.w	6d2 <UDemo_Behave::tick()+0x3a2>
     408:	4baa      	ldr	r3, [pc, #680]	; (6b4 <UDemo_Behave::tick()+0x384>)
     40a:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
     40e:	2a00      	cmp	r2, #0
     410:	f040 817d 	bne.w	70e <UDemo_Behave::tick()+0x3de>
  buttonPressed = pressed_now;
     414:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
        usb.use_CRC = false;
     418:	2200      	movs	r2, #0
        encoder.clearPose();
     41a:	4d9d      	ldr	r5, [pc, #628]	; (690 <UDemo_Behave::tick()+0x360>)
        usb.use_CRC = false;
     41c:	489f      	ldr	r0, [pc, #636]	; (69c <UDemo_Behave::tick()+0x36c>)
        usb.send("%% starting\n");
     41e:	49a6      	ldr	r1, [pc, #664]	; (6b8 <UDemo_Behave::tick()+0x388>)
        robot.missionStart = false;
     420:	761a      	strb	r2, [r3, #24]
        usb.use_CRC = false;
     422:	f880 2121 	strb.w	r2, [r0, #289]	; 0x121
        usb.send("%% starting\n");
     426:	f00c f879 	bl	c51c <UUSB::send(char const*)>
        encoder.clearPose();
     42a:	4628      	mov	r0, r5
     42c:	f003 fd08 	bl	3e40 <UEncoder::clearPose()>
   * normally constant, but can be set for special
   * requirements, e.g. motortest */
  uint32_t sampleTime_us;
  float sampleTime_sec()
  {
    return float(sampleTime_us)/1e6;
     430:	4b98      	ldr	r3, [pc, #608]	; (694 <UDemo_Behave::tick()+0x364>)
     432:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 6bc <UDemo_Behave::tick()+0x38c>
        lead.setup(0.8, 0.15, service.sampleTime_sec());
     436:	4620      	mov	r0, r4
     438:	edd3 7a00 	vldr	s15, [r3]
     43c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 6c0 <UDemo_Behave::tick()+0x390>
     440:	eef8 7a67 	vcvt.f32.u32	s15, s15
     444:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 6c4 <UDemo_Behave::tick()+0x394>
     448:	ee87 1a81 	vdiv.f32	s2, s15, s2
     44c:	f7ff ff0c 	bl	268 <ULead::setup(float, float, float)>
        logger.startLogging(2, true);
     450:	2201      	movs	r2, #1
     452:	2102      	movs	r1, #2
     454:	4894      	ldr	r0, [pc, #592]	; (6a8 <UDemo_Behave::tick()+0x378>)
     456:	f007 fc17 	bl	7c88 <ULog::startLogging(int, bool)>
        endTime =encoder.tripBtime + 0.1;
     45a:	ed95 7a1d 	vldr	s14, [r5, #116]	; 0x74
        state = 10;
     45e:	230a      	movs	r3, #10
        ls.lineSensorOn = true;
     460:	4a92      	ldr	r2, [pc, #584]	; (6ac <UDemo_Behave::tick()+0x37c>)
        endTime =encoder.tripBtime + 0.1;
     462:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ls.lineSensorOn = true;
     466:	2101      	movs	r1, #1
     468:	461d      	mov	r5, r3
     46a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
        state = 10;
     46e:	61a3      	str	r3, [r4, #24]
        endTime =encoder.tripBtime + 0.1;
     470:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 670 <UDemo_Behave::tick()+0x340>
     474:	ee37 7b06 	vadd.f64	d7, d7, d6
     478:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     47c:	ed84 7a07 	vstr	s14, [r4, #28]
     480:	e009      	b.n	496 <UDemo_Behave::tick()+0x166>
      if (encoder.tripBtime > endTime)
     482:	4e83      	ldr	r6, [pc, #524]	; (690 <UDemo_Behave::tick()+0x360>)
     484:	edd0 7a07 	vldr	s15, [r0, #28]
     488:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     48c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     494:	dc62      	bgt.n	55c <UDemo_Behave::tick()+0x22c>
  if (state != lastState)
     496:	6a26      	ldr	r6, [r4, #32]
     498:	42b5      	cmp	r5, r6
     49a:	d074      	beq.n	586 <UDemo_Behave::tick()+0x256>
   * Not folding system time in us ~4e9 hours
   * NB! updated at sample time only. */
  uint64_t time_us;
  inline float time_sec()
  {
    return float(time_us)*1e-6;
     49c:	4b7d      	ldr	r3, [pc, #500]	; (694 <UDemo_Behave::tick()+0x364>)
     49e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
     4a2:	f018 ffb3 	bl	1940c <__aeabi_ul2f>
     4a6:	ee07 0a90 	vmov	s15, r0
    snprintf(s, MSL, "%% Demo behave:: state changed from %d to %d at %.4f sec\n",
     4aa:	4633      	mov	r3, r6
     4ac:	4a7a      	ldr	r2, [pc, #488]	; (698 <UDemo_Behave::tick()+0x368>)
     4ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
     4b2:	21c8      	movs	r1, #200	; 0xc8
     4b4:	a804      	add	r0, sp, #16
     4b6:	9500      	str	r5, [sp, #0]
     4b8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 668 <UDemo_Behave::tick()+0x338>
     4bc:	ee27 7b06 	vmul.f64	d7, d7, d6
     4c0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     4c4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     4c8:	ed8d 7b02 	vstr	d7, [sp, #8]
     4cc:	f01b f8e2 	bl	1b694 <snprintf>
    usb.send(s);
     4d0:	a904      	add	r1, sp, #16
     4d2:	4872      	ldr	r0, [pc, #456]	; (69c <UDemo_Behave::tick()+0x36c>)
     4d4:	f00c f822 	bl	c51c <UUSB::send(char const*)>
    lastState = state;
     4d8:	69a3      	ldr	r3, [r4, #24]
     4da:	2000      	movs	r0, #0
     4dc:	6223      	str	r3, [r4, #32]
}
     4de:	b037      	add	sp, #220	; 0xdc
     4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (encoder.tripBtime > endTime  or encoder.tripB > 0.3)
     4e2:	4e6b      	ldr	r6, [pc, #428]	; (690 <UDemo_Behave::tick()+0x360>)
     4e4:	edd0 7a07 	vldr	s15, [r0, #28]
     4e8:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     4ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
     4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4f4:	dc0a      	bgt.n	50c <UDemo_Behave::tick()+0x1dc>
     4f6:	ed96 7a19 	vldr	s14, [r6, #100]	; 0x64
     4fa:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 678 <UDemo_Behave::tick()+0x348>
     4fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     502:	eeb4 7bc6 	vcmpe.f64	d7, d6
     506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     50a:	ddc4      	ble.n	496 <UDemo_Behave::tick()+0x166>
        motor.setMotorVoltage(1.5, 3.0);
     50c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
     510:	4864      	ldr	r0, [pc, #400]	; (6a4 <UDemo_Behave::tick()+0x374>)
     512:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
     516:	f008 fc87 	bl	8e28 <UMotor::setMotorVoltage(float, float)>
        endTime = encoder.tripBtime + 10.0;
     51a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
     51e:	edd6 7a1d 	vldr	s15, [r6, #116]	; 0x74
        state = 12;
     522:	230c      	movs	r3, #12
        endTime = encoder.tripBtime + 10.0;
     524:	ee77 7a87 	vadd.f32	s15, s15, s14
        state = 12;
     528:	461d      	mov	r5, r3
     52a:	61a3      	str	r3, [r4, #24]
        endTime = encoder.tripBtime + 10.0;
     52c:	edc4 7a07 	vstr	s15, [r4, #28]
        state = 12;
     530:	e7b1      	b.n	496 <UDemo_Behave::tick()+0x166>
      if (encoder.tripBtime > endTime or encoder.tripBh > M_PI/2.0)
     532:	4e57      	ldr	r6, [pc, #348]	; (690 <UDemo_Behave::tick()+0x360>)
     534:	edd0 7a07 	vldr	s15, [r0, #28]
     538:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     53c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     544:	dc0a      	bgt.n	55c <UDemo_Behave::tick()+0x22c>
     546:	ed96 7a1b 	vldr	s14, [r6, #108]	; 0x6c
     54a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 680 <UDemo_Behave::tick()+0x350>
     54e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     552:	eeb4 7bc6 	vcmpe.f64	d7, d6
     556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     55a:	dd9c      	ble.n	496 <UDemo_Behave::tick()+0x166>
        motor.setMotorVoltage(2, 2);
     55c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
     560:	4850      	ldr	r0, [pc, #320]	; (6a4 <UDemo_Behave::tick()+0x374>)
     562:	eeb0 0a60 	vmov.f32	s0, s1
     566:	f008 fc5f 	bl	8e28 <UMotor::setMotorVoltage(float, float)>
        state = 13;
     56a:	230d      	movs	r3, #13
        endTime = encoder.tripBtime + 10.00;
     56c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
     570:	edd6 7a1d 	vldr	s15, [r6, #116]	; 0x74
        state = 13;
     574:	461d      	mov	r5, r3
  if (state != lastState)
     576:	6a26      	ldr	r6, [r4, #32]
        state = 13;
     578:	61a3      	str	r3, [r4, #24]
        endTime = encoder.tripBtime + 10.00;
     57a:	ee77 7a87 	vadd.f32	s15, s15, s14
  if (state != lastState)
     57e:	42b5      	cmp	r5, r6
        endTime = encoder.tripBtime + 10.00;
     580:	edc4 7a07 	vstr	s15, [r4, #28]
  if (state != lastState)
     584:	d18a      	bne.n	49c <UDemo_Behave::tick()+0x16c>
     586:	2000      	movs	r0, #0
}
     588:	b037      	add	sp, #220	; 0xdc
     58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (encoder.tripBtime > endTime or ls.lineValidCnt > 15)
     58c:	4e40      	ldr	r6, [pc, #256]	; (690 <UDemo_Behave::tick()+0x360>)
     58e:	edd0 7a07 	vldr	s15, [r0, #28]
     592:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     596:	4f45      	ldr	r7, [pc, #276]	; (6ac <UDemo_Behave::tick()+0x37c>)
     598:	eeb4 7ae7 	vcmpe.f32	s14, s15
     59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5a0:	dc04      	bgt.n	5ac <UDemo_Behave::tick()+0x27c>
     5a2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
     5a6:	2b0f      	cmp	r3, #15
     5a8:	f77f af75 	ble.w	496 <UDemo_Behave::tick()+0x166>
        if (not ls.lineValid)
     5ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
     5b0:	2b00      	cmp	r3, #0
     5b2:	f040 8094 	bne.w	6de <UDemo_Behave::tick()+0x3ae>
          motor.setMotorVoltage(0, 0);
     5b6:	eddf 0a3a 	vldr	s1, [pc, #232]	; 6a0 <UDemo_Behave::tick()+0x370>
     5ba:	483a      	ldr	r0, [pc, #232]	; (6a4 <UDemo_Behave::tick()+0x374>)
     5bc:	eeb0 0a60 	vmov.f32	s0, s1
     5c0:	f008 fc32 	bl	8e28 <UMotor::setMotorVoltage(float, float)>
          state = 90;
     5c4:	235a      	movs	r3, #90	; 0x5a
          usb.send("%% no line\n");
     5c6:	4940      	ldr	r1, [pc, #256]	; (6c8 <UDemo_Behave::tick()+0x398>)
     5c8:	4834      	ldr	r0, [pc, #208]	; (69c <UDemo_Behave::tick()+0x36c>)
          state = 90;
     5ca:	61a3      	str	r3, [r4, #24]
          usb.send("%% no line\n");
     5cc:	f00b ffa6 	bl	c51c <UUSB::send(char const*)>
  if (state != lastState)
     5d0:	69a5      	ldr	r5, [r4, #24]
     5d2:	e760      	b.n	496 <UDemo_Behave::tick()+0x166>
  if (ls.lineValid)
     5d4:	4f35      	ldr	r7, [pc, #212]	; (6ac <UDemo_Behave::tick()+0x37c>)
     5d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
     5da:	2b00      	cmp	r3, #0
     5dc:	f040 8092 	bne.w	704 <UDemo_Behave::tick()+0x3d4>
      if (encoder.tripBtime > endTime or ls.lineValidCnt < 5)
     5e0:	4e2b      	ldr	r6, [pc, #172]	; (690 <UDemo_Behave::tick()+0x360>)
     5e2:	edd4 7a07 	vldr	s15, [r4, #28]
     5e6:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     5ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
     5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5f2:	dc03      	bgt.n	5fc <UDemo_Behave::tick()+0x2cc>
     5f4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
     5f8:	2b04      	cmp	r3, #4
     5fa:	dc17      	bgt.n	62c <UDemo_Behave::tick()+0x2fc>
        motor.setMotorVoltage(0, 0);
     5fc:	eddf 0a28 	vldr	s1, [pc, #160]	; 6a0 <UDemo_Behave::tick()+0x370>
     600:	4828      	ldr	r0, [pc, #160]	; (6a4 <UDemo_Behave::tick()+0x374>)
     602:	eeb0 0a60 	vmov.f32	s0, s1
     606:	f008 fc0f 	bl	8e28 <UMotor::setMotorVoltage(float, float)>
        snprintf(s, MSL, "%% followed line in %f sec\n", encoder.tripBtime);
     60a:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
        state = 90;
     60e:	235a      	movs	r3, #90	; 0x5a
        snprintf(s, MSL, "%% followed line in %f sec\n", encoder.tripBtime);
     610:	21c8      	movs	r1, #200	; 0xc8
     612:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     616:	4a2d      	ldr	r2, [pc, #180]	; (6cc <UDemo_Behave::tick()+0x39c>)
        state = 90;
     618:	61a3      	str	r3, [r4, #24]
        snprintf(s, MSL, "%% followed line in %f sec\n", encoder.tripBtime);
     61a:	a804      	add	r0, sp, #16
     61c:	ed8d 7b00 	vstr	d7, [sp]
     620:	f01b f838 	bl	1b694 <snprintf>
        usb.send(s);
     624:	a904      	add	r1, sp, #16
     626:	481d      	ldr	r0, [pc, #116]	; (69c <UDemo_Behave::tick()+0x36c>)
     628:	f00b ff78 	bl	c51c <UUSB::send(char const*)>
  if (state != lastState)
     62c:	69a5      	ldr	r5, [r4, #24]
     62e:	e732      	b.n	496 <UDemo_Behave::tick()+0x166>
         (fabsf(encoder.motorVelocity[0]) < 0.01 and fabsf(encoder.motorVelocity[1]) < 0.01))
     630:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
     634:	eeb0 7ac7 	vabs.f32	s14, s14
      if (encoder.tripBtime > endTime or
     638:	ed9f 6b13 	vldr	d6, [pc, #76]	; 688 <UDemo_Behave::tick()+0x358>
         (fabsf(encoder.motorVelocity[0]) < 0.01 and fabsf(encoder.motorVelocity[1]) < 0.01))
     63c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      if (encoder.tripBtime > endTime or
     640:	eeb4 7bc6 	vcmpe.f64	d7, d6
     644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     648:	f57f af25 	bpl.w	496 <UDemo_Behave::tick()+0x166>
         (fabsf(encoder.motorVelocity[0]) < 0.01 and fabsf(encoder.motorVelocity[1]) < 0.01))
     64c:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
     650:	eeb0 7ac7 	vabs.f32	s14, s14
     654:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     658:	eeb4 7bc6 	vcmpe.f64	d7, d6
     65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     660:	f57f af19 	bpl.w	496 <UDemo_Behave::tick()+0x166>
     664:	e68c      	b.n	380 <UDemo_Behave::tick()+0x50>
     666:	bf00      	nop
     668:	a0b5ed8d 	.word	0xa0b5ed8d
     66c:	3eb0c6f7 	.word	0x3eb0c6f7
     670:	9999999a 	.word	0x9999999a
     674:	3fb99999 	.word	0x3fb99999
     678:	33333333 	.word	0x33333333
     67c:	3fd33333 	.word	0x3fd33333
     680:	54442d18 	.word	0x54442d18
     684:	3ff921fb 	.word	0x3ff921fb
     688:	47ae147b 	.word	0x47ae147b
     68c:	3f847ae1 	.word	0x3f847ae1
     690:	2000dc34 	.word	0x2000dc34
     694:	2000d0c8 	.word	0x2000d0c8
     698:	2000395c 	.word	0x2000395c
     69c:	2000eab8 	.word	0x2000eab8
     6a0:	00000000 	.word	0x00000000
     6a4:	2000e4bc 	.word	0x2000e4bc
     6a8:	2000e240 	.word	0x2000e240
     6ac:	2000e384 	.word	0x2000e384
     6b0:	42004000 	.word	0x42004000
     6b4:	2000e654 	.word	0x2000e654
     6b8:	20003910 	.word	0x20003910
     6bc:	49742400 	.word	0x49742400
     6c0:	3e19999a 	.word	0x3e19999a
     6c4:	3f4ccccd 	.word	0x3f4ccccd
     6c8:	20003920 	.word	0x20003920
     6cc:	20003940 	.word	0x20003940
  if (buttonPressed and not pressed_now and not robot.poweringOff)
     6d0:	b19b      	cbz	r3, 6fa <UDemo_Behave::tick()+0x3ca>
     6d2:	4b11      	ldr	r3, [pc, #68]	; (718 <UDemo_Behave::tick()+0x3e8>)
      if (buttonReleased() or robot.missionStart)
     6d4:	7e1a      	ldrb	r2, [r3, #24]
     6d6:	2a00      	cmp	r2, #0
     6d8:	f43f aedd 	beq.w	496 <UDemo_Behave::tick()+0x166>
     6dc:	e69c      	b.n	418 <UDemo_Behave::tick()+0xe8>
    tripAh = 0;
    tripAtime = 0;
  };
  void inline tripBreset()
  {
    tripB = 0;
     6de:	2300      	movs	r3, #0
          endTime = 10.0;
     6e0:	4a0e      	ldr	r2, [pc, #56]	; (71c <UDemo_Behave::tick()+0x3ec>)
          state = 14;
     6e2:	210e      	movs	r1, #14
          usb.send("%% following line\n");
     6e4:	480e      	ldr	r0, [pc, #56]	; (720 <UDemo_Behave::tick()+0x3f0>)
          state = 14;
     6e6:	61a1      	str	r1, [r4, #24]
     6e8:	6673      	str	r3, [r6, #100]	; 0x64
    tripBh = 0;
     6ea:	66f3      	str	r3, [r6, #108]	; 0x6c
    tripBtime = 0;
     6ec:	6773      	str	r3, [r6, #116]	; 0x74
          usb.send("%% following line\n");
     6ee:	490d      	ldr	r1, [pc, #52]	; (724 <UDemo_Behave::tick()+0x3f4>)
          endTime = 10.0;
     6f0:	61e2      	str	r2, [r4, #28]
          usb.send("%% following line\n");
     6f2:	f00b ff13 	bl	c51c <UUSB::send(char const*)>
  if (state != lastState)
     6f6:	69a5      	ldr	r5, [r4, #24]
     6f8:	e6cd      	b.n	496 <UDemo_Behave::tick()+0x166>
  buttonPressed = pressed_now;
     6fa:	2201      	movs	r2, #1
     6fc:	4b06      	ldr	r3, [pc, #24]	; (718 <UDemo_Behave::tick()+0x3e8>)
     6fe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  return released;
     702:	e7e7      	b.n	6d4 <UDemo_Behave::tick()+0x3a4>
     704:	ed9f 0a08 	vldr	s0, [pc, #32]	; 728 <UDemo_Behave::tick()+0x3f8>
     708:	f7ff fd76 	bl	1f8 <UDemo_Behave::followLine(float) [clone .part.0]>
     70c:	e768      	b.n	5e0 <UDemo_Behave::tick()+0x2b0>
  buttonPressed = pressed_now;
     70e:	2200      	movs	r2, #0
     710:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  return released;
     714:	e7de      	b.n	6d4 <UDemo_Behave::tick()+0x3a4>
     716:	bf00      	nop
     718:	2000e654 	.word	0x2000e654
     71c:	41200000 	.word	0x41200000
     720:	2000eab8 	.word	0x2000eab8
     724:	2000392c 	.word	0x2000392c
     728:	00000000 	.word	0x00000000

0000072c <_GLOBAL__sub_I_dbehave>:
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE. */
 
#pragma once

class ULead
     72c:	4b06      	ldr	r3, [pc, #24]	; (748 <_GLOBAL__sub_I_dbehave+0x1c>)
     72e:	2200      	movs	r2, #0
};

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

class UDemo_Behave
     730:	2100      	movs	r1, #0
     732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
class ULead
     736:	611a      	str	r2, [r3, #16]
     738:	615a      	str	r2, [r3, #20]
class UDemo_Behave
     73a:	6199      	str	r1, [r3, #24]
     73c:	61da      	str	r2, [r3, #28]
     73e:	6218      	str	r0, [r3, #32]
     740:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
  return y;
}
     744:	4770      	bx	lr
     746:	bf00      	nop
     748:	2000dae4 	.word	0x2000dae4

0000074c <AS5X47::AS5X47(unsigned char)>:
*/

#include "AS5X47.h"
#include "uusb.h"

AS5X47::AS5X47(uint8_t chipSelectPin) : spi(chipSelectPin) {
     74c:	b510      	push	{r4, lr}
     74e:	4604      	mov	r4, r0
     750:	f000 f9fc 	bl	b4c <AS5X47Spi::AS5X47Spi(unsigned char)>
}
     754:	4620      	mov	r0, r4
     756:	bd10      	pop	{r4, pc}

00000758 <AS5X47::readRegister(unsigned short)>:

  CommandFrame nopCommand;
  nopCommand.values.commandFrame = NOP_REG;
  nopCommand.values.rw = READ;
  nopCommand.values.parc = 0; //isEven(nopCommand.raw);
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  command.values.commandFrame = registerAddress;
     75c:	f3c1 010d 	ubfx	r1, r1, #0, #14
{
     760:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     762:	4311      	orrs	r1, r2
     764:	f000 fa06 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
	return receivedFrame;
}
     768:	bd08      	pop	{r3, pc}

static const char *decodeAscAscq(uint8_t asc, uint8_t ascq) {
	static char msg[64];
	uint16_t ascAscq = asc<<8 | ascq;

	switch (ascAscq) {
     76a:	bf00      	nop
     76c:	0000      	movs	r0, r0
	...

00000770 <AS5X47::readAngle()>:
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     770:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     774:	f647 71ff 	movw	r1, #32767	; 0x7fff
	contentFrame.values.low = 0;
	contentFrame.values.pard = 0; //isEven(contentFrame.raw);
	spi.writeData(command.raw, contentFrame.raw);
}

float AS5X47::readAngle() {
     778:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     77a:	f000 f9fb 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
	ReadDataFrame readDataFrame = readRegister(ANGLE_COMPSATED);
	Angle angle;
	angle.raw = readDataFrame.values.data;
	return angle.values.cordicang/16384.*360.;
     77e:	f3c0 000d 	ubfx	r0, r0, #0, #14
     782:	ed9f 7b05 	vldr	d7, [pc, #20]	; 798 <AS5X47::readAngle()+0x28>
     786:	ee00 0a10 	vmov	s0, r0
     78a:	eeba 0bc9 	vcvt.f64.s32	d0, d0, #14
     78e:	ee20 0b07 	vmul.f64	d0, d0, d7
}
     792:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     796:	bd08      	pop	{r3, pc}
     798:	00000000 	.word	0x00000000
     79c:	40768000 	.word	0x40768000

000007a0 <AS5X47::readVel()>:

float AS5X47::readVel()
{
     7a0:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     7a6:	f647 71fc 	movw	r1, #32764	; 0x7ffc
     7aa:	f000 f9e3 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
  angle.raw = readDataFrame.values.data;
  // 14 bit signed - default is +/-28000 RPM or 24.141 deg/s per LSB
  // can be changed in settings?
  // convert to deg/s
  // extend to get sign
  int16_t a = angle.values.cordicang << 2;
     7ae:	f340 000d 	sbfx	r0, r0, #0, #14
  return a*24.141 / 4.;
     7b2:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
     7b6:	0083      	lsls	r3, r0, #2
     7b8:	ee00 3a10 	vmov	s0, r3
     7bc:	ed9f 6b06 	vldr	d6, [pc, #24]	; 7d8 <AS5X47::readVel()+0x38>
     7c0:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
     7c4:	ee20 0b06 	vmul.f64	d0, d0, d6
     7c8:	ee20 0b07 	vmul.f64	d0, d0, d7
}
     7cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     7d0:	bd08      	pop	{r3, pc}
     7d2:	bf00      	nop
     7d4:	f3af 8000 	nop.w
     7d8:	9374bc6a 	.word	0x9374bc6a
     7dc:	40382418 	.word	0x40382418

000007e0 <AS5X47::readErr()>:
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     7e4:	f244 0101 	movw	r1, #16385	; 0x4001

Errfl AS5X47::readErr()
{
     7e8:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7ea:	f000 f9c3 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
  err.raw = readDataFrame.values.data;
  // 14 bit signed - default is +/-28000 RPM or 24.141 deg/s per LSB
  // can be changed in settings?
  // convert to deg/s
  return err;
}
     7ee:	f3c0 000d 	ubfx	r0, r0, #0, #14
     7f2:	bd08      	pop	{r3, pc}

000007f4 <AS5X47::printDebugString()>:
void AS5X47::writeZeroPosition(Zposm zposm, Zposl zposl){
	writeRegister(ZPOSM_REG, zposm.raw);
	writeRegister(ZPOSL_REG, zposl.raw);
}

void AS5X47::printDebugString() {
     7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	readDataFrame = readRegister(ERRFL_REG);
	Errfl errfl;
	errfl.raw = readDataFrame.values.data;
  const int MSL = 200;
  char s[MSL];
  usb.send("#======== AS5X47 Debug ========\r\n");
     7f8:	4c80      	ldr	r4, [pc, #512]	; (9fc <AS5X47::printDebugString()+0x208>)
void AS5X47::printDebugString() {
     7fa:	b0b6      	sub	sp, #216	; 0xd8
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     800:	f244 0101 	movw	r1, #16385	; 0x4001
void AS5X47::printDebugString() {
     804:	4605      	mov	r5, r0
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     806:	f000 f9b5 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
  usb.send("#======== AS5X47 Debug ========\r\n");
     80a:	497d      	ldr	r1, [pc, #500]	; (a00 <AS5X47::printDebugString()+0x20c>)
     80c:	f3c0 0a0d 	ubfx	sl, r0, #0, #14
     810:	f3c0 3980 	ubfx	r9, r0, #14, #1
     814:	f3c0 36c0 	ubfx	r6, r0, #15, #1
     818:	4620      	mov	r0, r4

	readDataFrame = readRegister(ANGLE_REG);
	Angle angle;
	angle.raw = readDataFrame.values.data;
  usb.send("#------- Angle Register: \r\n");
  snprintf(s, MSL, "#   (%x) Read Error: %d, CORDIANG: %d\r\n", ANGLE_REG,
     81a:	f8df 8218 	ldr.w	r8, [pc, #536]	; a34 <AS5X47::printDebugString()+0x240>
  usb.send("#======== AS5X47 Debug ========\r\n");
     81e:	f00b fe7d 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#------- ERRFL Register :\r\n");
     822:	f8df e214 	ldr.w	lr, [pc, #532]	; a38 <AS5X47::printDebugString()+0x244>
     826:	f10d 0c10 	add.w	ip, sp, #16

	readDataFrame = readRegister(SETTINGS1_REG);
	Settings1 settings1;
	settings1.raw = readDataFrame.values.data;
  usb.send("#------- Settings1 Register: \r\n");
  snprintf(s, MSL, "#   (%x) Read Error: %d, settings1: 0x%x\r\n", SETTINGS1_REG,
     82a:	4f76      	ldr	r7, [pc, #472]	; (a04 <AS5X47::printDebugString()+0x210>)
  snprintf(s, MSL, "#------- ERRFL Register :\r\n");
     82c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     834:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
     838:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  usb.send(s);
     83c:	a904      	add	r1, sp, #16
     83e:	4620      	mov	r0, r4
     840:	f00b fe6c 	bl	c51c <UUSB::send(char const*)>
	snprintf(s, MSL, "#   Read Warning %d, Read Error: %d, flags 0x%04x (see AS5247U manual reg 0x0001)\r\n",
     844:	4633      	mov	r3, r6
     846:	4a70      	ldr	r2, [pc, #448]	; (a08 <AS5X47::printDebugString()+0x214>)
     848:	21c8      	movs	r1, #200	; 0xc8
     84a:	a804      	add	r0, sp, #16
     84c:	e9cd 9a00 	strd	r9, sl, [sp]
     850:	f01a ff20 	bl	1b694 <snprintf>
  usb.send(s);
     854:	a904      	add	r1, sp, #16
     856:	4620      	mov	r0, r4
     858:	f00b fe60 	bl	c51c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     85c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     860:	f647 71f5 	movw	r1, #32757	; 0x7ff5
     864:	4628      	mov	r0, r5
     866:	f000 f985 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     86a:	4603      	mov	r3, r0
  usb.send("#------- DIAG Register: \r\n");
     86c:	4967      	ldr	r1, [pc, #412]	; (a0c <AS5X47::printDebugString()+0x218>)
     86e:	4620      	mov	r0, r4
     870:	f3c3 060d 	ubfx	r6, r3, #0, #14
     874:	f3c3 3380 	ubfx	r3, r3, #14, #1
     878:	9303      	str	r3, [sp, #12]
     87a:	f00b fe4f 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   Read Error: %d, Flags: 0x%04x (hex, see AS5147U manual, reg=0x3FF5)\r\n",
     87e:	9b03      	ldr	r3, [sp, #12]
     880:	21c8      	movs	r1, #200	; 0xc8
     882:	4a63      	ldr	r2, [pc, #396]	; (a10 <AS5X47::printDebugString()+0x21c>)
     884:	a804      	add	r0, sp, #16
     886:	9600      	str	r6, [sp, #0]
     888:	f01a ff04 	bl	1b694 <snprintf>
  usb.send(s);
     88c:	a904      	add	r1, sp, #16
     88e:	4620      	mov	r0, r4
     890:	f00b fe44 	bl	c51c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     894:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     898:	f647 71fd 	movw	r1, #32765	; 0x7ffd
     89c:	4628      	mov	r0, r5
     89e:	f000 f969 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     8a2:	4603      	mov	r3, r0
  usb.send("#------- MAG Register: \r\n");
     8a4:	495b      	ldr	r1, [pc, #364]	; (a14 <AS5X47::printDebugString()+0x220>)
     8a6:	4620      	mov	r0, r4
	mag.raw = readDataFrame.values.data;
     8a8:	f3c3 090d 	ubfx	r9, r3, #0, #14
     8ac:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- MAG Register: \r\n");
     8b0:	f00b fe34 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, CMAG: %d\r\n", MAG_REG,
     8b4:	4a58      	ldr	r2, [pc, #352]	; (a18 <AS5X47::printDebugString()+0x224>)
     8b6:	f3c9 030d 	ubfx	r3, r9, #0, #14
     8ba:	9600      	str	r6, [sp, #0]
     8bc:	21c8      	movs	r1, #200	; 0xc8
     8be:	a804      	add	r0, sp, #16
     8c0:	9301      	str	r3, [sp, #4]
     8c2:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     8c6:	f01a fee5 	bl	1b694 <snprintf>
  usb.send(s);
     8ca:	a904      	add	r1, sp, #16
     8cc:	4620      	mov	r0, r4
     8ce:	f00b fe25 	bl	c51c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     8d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     8d6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
     8da:	4628      	mov	r0, r5
     8dc:	f000 f94a 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     8e0:	4603      	mov	r3, r0
  usb.send("#------- Angle Register: \r\n");
     8e2:	494e      	ldr	r1, [pc, #312]	; (a1c <AS5X47::printDebugString()+0x228>)
     8e4:	4620      	mov	r0, r4
	angle.raw = readDataFrame.values.data;
     8e6:	f3c3 090d 	ubfx	r9, r3, #0, #14
     8ea:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- Angle Register: \r\n");
     8ee:	f00b fe15 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, CORDIANG: %d\r\n", ANGLE_REG,
     8f2:	4642      	mov	r2, r8
     8f4:	f3c9 030d 	ubfx	r3, r9, #0, #14
     8f8:	9600      	str	r6, [sp, #0]
     8fa:	21c8      	movs	r1, #200	; 0xc8
     8fc:	a804      	add	r0, sp, #16
     8fe:	9301      	str	r3, [sp, #4]
     900:	f643 73fe 	movw	r3, #16382	; 0x3ffe
     904:	f01a fec6 	bl	1b694 <snprintf>
  usb.send(s);
     908:	a904      	add	r1, sp, #16
     90a:	4620      	mov	r0, r4
     90c:	f00b fe06 	bl	c51c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     910:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     914:	f647 71fc 	movw	r1, #32764	; 0x7ffc
     918:	4628      	mov	r0, r5
     91a:	f000 f92b 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     91e:	4603      	mov	r3, r0
  usb.send("#------- Velocity Register: \r\n");
     920:	493f      	ldr	r1, [pc, #252]	; (a20 <AS5X47::printDebugString()+0x22c>)
     922:	4620      	mov	r0, r4
  velocity.raw = readDataFrame.values.data;
     924:	f3c3 090d 	ubfx	r9, r3, #0, #14
     928:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- Velocity Register: \r\n");
     92c:	f00b fdf6 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, CORDIANG: %d\r\n", ANGLE_VEL,
     930:	4642      	mov	r2, r8
     932:	f3c9 030d 	ubfx	r3, r9, #0, #14
     936:	9600      	str	r6, [sp, #0]
     938:	21c8      	movs	r1, #200	; 0xc8
     93a:	a804      	add	r0, sp, #16
     93c:	9301      	str	r3, [sp, #4]
     93e:	f643 73fc 	movw	r3, #16380	; 0x3ffc
     942:	f01a fea7 	bl	1b694 <snprintf>
  usb.send(s);
     946:	a904      	add	r1, sp, #16
     948:	4620      	mov	r0, r4
     94a:	f00b fde7 	bl	c51c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     94e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     952:	f647 71ff 	movw	r1, #32767	; 0x7fff
     956:	4628      	mov	r0, r5
     958:	f000 f90c 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     95c:	4603      	mov	r3, r0
  usb.send("#------- AngleCom Register: \r\n");
     95e:	4931      	ldr	r1, [pc, #196]	; (a24 <AS5X47::printDebugString()+0x230>)
     960:	4620      	mov	r0, r4
	anglecom.raw = readDataFrame.values.data;
     962:	f3c3 080d 	ubfx	r8, r3, #0, #14
     966:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- AngleCom Register: \r\n");
     96a:	f00b fdd7 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, DAECANG: %d\r\n", ANGLECOM_REG,
     96e:	4a2e      	ldr	r2, [pc, #184]	; (a28 <AS5X47::printDebugString()+0x234>)
     970:	f3c8 030d 	ubfx	r3, r8, #0, #14
     974:	9600      	str	r6, [sp, #0]
     976:	21c8      	movs	r1, #200	; 0xc8
     978:	a804      	add	r0, sp, #16
     97a:	9301      	str	r3, [sp, #4]
     97c:	f643 73ff 	movw	r3, #16383	; 0x3fff
     980:	f01a fe88 	bl	1b694 <snprintf>
  usb.send(s);
     984:	a904      	add	r1, sp, #16
     986:	4620      	mov	r0, r4
     988:	f00b fdc8 	bl	c51c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     98c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     990:	f244 0118 	movw	r1, #16408	; 0x4018
     994:	4628      	mov	r0, r5
     996:	f000 f8ed 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     99a:	4603      	mov	r3, r0
  usb.send("#------- Settings1 Register: \r\n");
     99c:	4923      	ldr	r1, [pc, #140]	; (a2c <AS5X47::printDebugString()+0x238>)
     99e:	4620      	mov	r0, r4
     9a0:	f3c3 3880 	ubfx	r8, r3, #14, #1
	settings1.raw = readDataFrame.values.data;
     9a4:	b2de      	uxtb	r6, r3
  usb.send("#------- Settings1 Register: \r\n");
     9a6:	f00b fdb9 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, settings1: 0x%x\r\n", SETTINGS1_REG,
     9aa:	2318      	movs	r3, #24
     9ac:	463a      	mov	r2, r7
     9ae:	21c8      	movs	r1, #200	; 0xc8
     9b0:	a804      	add	r0, sp, #16
     9b2:	e9cd 8600 	strd	r8, r6, [sp]
     9b6:	f01a fe6d 	bl	1b694 <snprintf>
           readDataFrame.values.ef, settings1.raw);
  usb.send(s);
     9ba:	a904      	add	r1, sp, #16
     9bc:	4620      	mov	r0, r4
     9be:	f00b fdad 	bl	c51c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     9c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     9c6:	4628      	mov	r0, r5
     9c8:	f244 0119 	movw	r1, #16409	; 0x4019
     9cc:	f000 f8d2 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
	return receivedFrame;
     9d0:	f3c0 3680 	ubfx	r6, r0, #14, #1
// 	Serial.println(settings1.values.pwmon);
// 	Serial.println("|");

	readDataFrame = readRegister(SETTINGS2_REG);
	Settings2 settings2;
	settings2.raw = readDataFrame.values.data;
     9d4:	b2c5      	uxtb	r5, r0
  usb.send("#------- Settings2 Register: \r\n");
     9d6:	4916      	ldr	r1, [pc, #88]	; (a30 <AS5X47::printDebugString()+0x23c>)
     9d8:	4620      	mov	r0, r4
     9da:	f00b fd9f 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, settings1: 0x%x\r\n", SETTINGS2_REG,
     9de:	463a      	mov	r2, r7
     9e0:	2319      	movs	r3, #25
     9e2:	21c8      	movs	r1, #200	; 0xc8
     9e4:	a804      	add	r0, sp, #16
     9e6:	9501      	str	r5, [sp, #4]
     9e8:	9600      	str	r6, [sp, #0]
     9ea:	f01a fe53 	bl	1b694 <snprintf>
           readDataFrame.values.ef, settings2.raw);
  usb.send(s);
     9ee:	a904      	add	r1, sp, #16
     9f0:	4620      	mov	r0, r4
     9f2:	f00b fd93 	bl	c51c <UUSB::send(char const*)>
// Non-Volatile Registers Addresses
#define ZPOSM_REG 		0x0016
#define ZPOSL_REG 		0x0017
#define SETTINGS1_REG 	0x0018
#define SETTINGS2_REG 	0x0019*/
}
     9f6:	b036      	add	sp, #216	; 0xd8
     9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9fc:	2000eab8 	.word	0x2000eab8
     a00:	20004dd0 	.word	0x20004dd0
     a04:	20004fd8 	.word	0x20004fd8
     a08:	20004e10 	.word	0x20004e10
     a0c:	20004e64 	.word	0x20004e64
     a10:	20004e80 	.word	0x20004e80
     a14:	20004ecc 	.word	0x20004ecc
     a18:	20004ee8 	.word	0x20004ee8
     a1c:	20004f0c 	.word	0x20004f0c
     a20:	20004f50 	.word	0x20004f50
     a24:	20004f70 	.word	0x20004f70
     a28:	20004f90 	.word	0x20004f90
     a2c:	20004fb8 	.word	0x20004fb8
     a30:	20005004 	.word	0x20005004
     a34:	20004f28 	.word	0x20004f28
     a38:	20004df4 	.word	0x20004df4

00000a3c <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
     a3c:	b430      	push	{r4, r5}
     a3e:	b082      	sub	sp, #8
     a40:	460c      	mov	r4, r1
     a42:	ab02      	add	r3, sp, #8
     a44:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
     a48:	7cc3      	ldrb	r3, [r0, #19]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d030      	beq.n	ab0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
     a4e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     a50:	7cc3      	ldrb	r3, [r0, #19]
     a52:	07da      	lsls	r2, r3, #31
     a54:	d508      	bpl.n	a68 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     a56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a5a:	6945      	ldr	r5, [r0, #20]
     a5c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
     a60:	402a      	ands	r2, r5
     a62:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     a64:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
     a68:	079d      	lsls	r5, r3, #30
     a6a:	d508      	bpl.n	a7e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     a6c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a70:	6985      	ldr	r5, [r0, #24]
     a72:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
     a76:	402a      	ands	r2, r5
     a78:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     a7a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
     a7e:	0759      	lsls	r1, r3, #29
     a80:	d508      	bpl.n	a94 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     a82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a86:	69c5      	ldr	r5, [r0, #28]
     a88:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
     a8c:	402a      	ands	r2, r5
     a8e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     a90:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
     a94:	071a      	lsls	r2, r3, #28
     a96:	d508      	bpl.n	aaa <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     a98:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a9c:	6a05      	ldr	r5, [r0, #32]
     a9e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
     aa2:	402a      	ands	r2, r5
     aa4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     aa6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
     aaa:	06db      	lsls	r3, r3, #27
     aac:	d42f      	bmi.n	b0e <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
     aae:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     ab0:	6883      	ldr	r3, [r0, #8]
     ab2:	429c      	cmp	r4, r3
     ab4:	d035      	beq.n	b22 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     ab6:	4b22      	ldr	r3, [pc, #136]	; (b40 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
     ab8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
     aba:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     abc:	4a21      	ldr	r2, [pc, #132]	; (b44 <SPIClass::beginTransaction(SPISettings)+0x108>)
     abe:	f3c3 1101 	ubfx	r1, r3, #4, #2
     ac2:	f3c3 6382 	ubfx	r3, r3, #26, #3
     ac6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
     aca:	3301      	adds	r3, #1
     acc:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     ad0:	b1cc      	cbz	r4, b06 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
     ad2:	4294      	cmp	r4, r2
     ad4:	d827      	bhi.n	b26 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
     ad6:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
     ada:	fbb2 f2f3 	udiv	r2, r2, r3
     ade:	4294      	cmp	r4, r2
     ae0:	d32c      	bcc.n	b3c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
     ae2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     ae6:	d320      	bcc.n	b2a <SPIClass::beginTransaction(SPISettings)+0xee>
     ae8:	4c17      	ldr	r4, [pc, #92]	; (b48 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     aea:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     aec:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     aee:	2203      	movs	r2, #3
		port().CR = 0;
     af0:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
     af2:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
     af4:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     af6:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
     af8:	2201      	movs	r2, #1
		port().CCR = _ccr;
     afa:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     afc:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     afe:	611a      	str	r2, [r3, #16]
	}
     b00:	b002      	add	sp, #8
     b02:	bc30      	pop	{r4, r5}
     b04:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
     b06:	4299      	cmp	r1, r3
     b08:	d3ef      	bcc.n	aea <SPIClass::beginTransaction(SPISettings)+0xae>
     b0a:	1c53      	adds	r3, r2, #1
     b0c:	e7e9      	b.n	ae2 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     b0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     b12:	6a41      	ldr	r1, [r0, #36]	; 0x24
     b14:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
     b18:	400b      	ands	r3, r1
     b1a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     b1c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
     b20:	e7c5      	b.n	aae <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
     b22:	68c4      	ldr	r4, [r0, #12]
     b24:	e7e2      	b.n	aec <SPIClass::beginTransaction(SPISettings)+0xb0>
     b26:	2400      	movs	r4, #0
     b28:	e7df      	b.n	aea <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
     b2a:	2b02      	cmp	r3, #2
     b2c:	d9fb      	bls.n	b26 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
     b2e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     b30:	085a      	lsrs	r2, r3, #1
     b32:	0214      	lsls	r4, r2, #8
     b34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     b38:	431c      	orrs	r4, r3
     b3a:	e7d6      	b.n	aea <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
     b3c:	461a      	mov	r2, r3
     b3e:	e7e4      	b.n	b0a <SPIClass::beginTransaction(SPISettings)+0xce>
     b40:	400fc000 	.word	0x400fc000
     b44:	20008138 	.word	0x20008138
     b48:	007f7fff 	.word	0x007f7fff

00000b4c <AS5X47Spi::AS5X47Spi(unsigned char)>:
AS5X47Spi::AS5X47Spi(uint8_t _chipSelectPin) {
     b4c:	460b      	mov	r3, r1
	pinMode(chipSelectPin, OUTPUT);
     b4e:	2101      	movs	r1, #1
AS5X47Spi::AS5X47Spi(uint8_t _chipSelectPin) {
     b50:	b510      	push	{r4, lr}
     b52:	4604      	mov	r4, r0
     b54:	4618      	mov	r0, r3
	chipSelectPin = _chipSelectPin;
     b56:	7023      	strb	r3, [r4, #0]
	pinMode(chipSelectPin, OUTPUT);
     b58:	f015 f9fc 	bl	15f54 <pinMode>
	digitalWrite(chipSelectPin, HIGH);
     b5c:	2101      	movs	r1, #1
     b5e:	7820      	ldrb	r0, [r4, #0]
     b60:	f015 f9bc 	bl	15edc <digitalWrite>
	SPI.begin();
     b64:	4802      	ldr	r0, [pc, #8]	; (b70 <AS5X47Spi::AS5X47Spi(unsigned char)+0x24>)
     b66:	f00e fed1 	bl	f90c <SPIClass::begin()>
}
     b6a:	4620      	mov	r0, r4
     b6c:	bd10      	pop	{r4, pc}
     b6e:	bf00      	nop
     b70:	200094c4 	.word	0x200094c4

00000b74 <AS5X47Spi::readData(unsigned short, unsigned short)>:

uint16_t AS5X47Spi::readData(uint16_t command, uint16_t nopCommand)
{
     b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE1));
     b78:	4b46      	ldr	r3, [pc, #280]	; (c94 <AS5X47Spi::readData(unsigned short, unsigned short)+0x120>)
{
     b7a:	b082      	sub	sp, #8
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
     b7c:	4c46      	ldr	r4, [pc, #280]	; (c98 <AS5X47Spi::readData(unsigned short, unsigned short)+0x124>)
     b7e:	4605      	mov	r5, r0
     b80:	4688      	mov	r8, r1
	SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE1));
     b82:	4846      	ldr	r0, [pc, #280]	; (c9c <AS5X47Spi::readData(unsigned short, unsigned short)+0x128>)
{
     b84:	4616      	mov	r6, r2
	SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE1));
     b86:	e9cd 4300 	strd	r4, r3, [sp]
     b8a:	ab02      	add	r3, sp, #8
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     b8c:	4c44      	ldr	r4, [pc, #272]	; (ca0 <AS5X47Spi::readData(unsigned short, unsigned short)+0x12c>)
     b8e:	e913 0006 	ldmdb	r3, {r1, r2}
     b92:	f7ff ff53 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
	// Send Read Command
	digitalWrite(chipSelectPin, LOW);
     b96:	2100      	movs	r1, #0
     b98:	7828      	ldrb	r0, [r5, #0]
     b9a:	f015 f99f 	bl	15edc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     b9e:	4941      	ldr	r1, [pc, #260]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     ba0:	4b41      	ldr	r3, [pc, #260]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
	uint32_t begin = ARM_DWT_CYCCNT;
     ba2:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     ba4:	6822      	ldr	r2, [r4, #0]
     ba6:	fba3 3202 	umull	r3, r2, r3, r2
     baa:	0c92      	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     bac:	684b      	ldr	r3, [r1, #4]
     bae:	1a1b      	subs	r3, r3, r0
     bb0:	429a      	cmp	r2, r3
     bb2:	d8fb      	bhi.n	bac <AS5X47Spi::readData(unsigned short, unsigned short)+0x38>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bb4:	4f39      	ldr	r7, [pc, #228]	; (c9c <AS5X47Spi::readData(unsigned short, unsigned short)+0x128>)
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     bb6:	4b3d      	ldr	r3, [pc, #244]	; (cac <AS5X47Spi::readData(unsigned short, unsigned short)+0x138>)
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bb8:	683a      	ldr	r2, [r7, #0]
		uint32_t tcr = port().TCR;
     bba:	6e11      	ldr	r1, [r2, #96]	; 0x60
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     bbc:	400b      	ands	r3, r1
     bbe:	f043 030f 	orr.w	r3, r3, #15
     bc2:	6613      	str	r3, [r2, #96]	; 0x60
		port().TDR = data;		// output 16 bit data.
     bc4:	f8c2 8064 	str.w	r8, [r2, #100]	; 0x64
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     bc8:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bca:	0798      	lsls	r0, r3, #30
     bcc:	d4fc      	bmi.n	bc8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x54>
	uint32_t begin = ARM_DWT_CYCCNT;
     bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	; ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>
		port().TCR = tcr;	// restore back
     bd2:	6611      	str	r1, [r2, #96]	; 0x60
		return port().RDR;
     bd4:	6f53      	ldr	r3, [r2, #116]	; 0x74
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     bd6:	4b34      	ldr	r3, [pc, #208]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
	uint32_t begin = ARM_DWT_CYCCNT;
     bd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     bdc:	6822      	ldr	r2, [r4, #0]
     bde:	fba3 3202 	umull	r3, r2, r3, r2
     be2:	0c92      	lsrs	r2, r2, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     be4:	f8d8 3004 	ldr.w	r3, [r8, #4]
     be8:	1a5b      	subs	r3, r3, r1
     bea:	429a      	cmp	r2, r3
     bec:	d8fa      	bhi.n	be4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x70>
  delayMicroseconds(1);
  SPI.transfer16(command);
  delayMicroseconds(1);
  digitalWrite(chipSelectPin, HIGH);
     bee:	2101      	movs	r1, #1
     bf0:	7828      	ldrb	r0, [r5, #0]
     bf2:	f015 f973 	bl	15edc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     bf6:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     bfa:	4b2b      	ldr	r3, [pc, #172]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
     bfc:	6822      	ldr	r2, [r4, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     bfe:	f8df 80a4 	ldr.w	r8, [pc, #164]	; ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c02:	fba3 3202 	umull	r3, r2, r3, r2
     c06:	0c92      	lsrs	r2, r2, #18
     c08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
     c10:	1a5b      	subs	r3, r3, r1
     c12:	429a      	cmp	r2, r3
     c14:	d8fa      	bhi.n	c0c <AS5X47Spi::readData(unsigned short, unsigned short)+0x98>
	delayMicroseconds(3);
	// Send Nop Command while receiving data
	digitalWrite(chipSelectPin, LOW);
     c16:	2100      	movs	r1, #0
     c18:	7828      	ldrb	r0, [r5, #0]
     c1a:	f015 f95f 	bl	15edc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     c1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c22:	4b21      	ldr	r3, [pc, #132]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
     c24:	6822      	ldr	r2, [r4, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c26:	491f      	ldr	r1, [pc, #124]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c28:	fba3 3202 	umull	r3, r2, r3, r2
     c2c:	0c92      	lsrs	r2, r2, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c2e:	684b      	ldr	r3, [r1, #4]
     c30:	1a1b      	subs	r3, r3, r0
     c32:	429a      	cmp	r2, r3
     c34:	d8fb      	bhi.n	c2e <AS5X47Spi::readData(unsigned short, unsigned short)+0xba>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c36:	683a      	ldr	r2, [r7, #0]
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     c38:	4b1c      	ldr	r3, [pc, #112]	; (cac <AS5X47Spi::readData(unsigned short, unsigned short)+0x138>)
		uint32_t tcr = port().TCR;
     c3a:	6e11      	ldr	r1, [r2, #96]	; 0x60
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     c3c:	400b      	ands	r3, r1
     c3e:	f043 030f 	orr.w	r3, r3, #15
     c42:	6613      	str	r3, [r2, #96]	; 0x60
		port().TDR = data;		// output 16 bit data.
     c44:	6656      	str	r6, [r2, #100]	; 0x64
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     c46:	6f13      	ldr	r3, [r2, #112]	; 0x70
     c48:	079b      	lsls	r3, r3, #30
     c4a:	d4fc      	bmi.n	c46 <AS5X47Spi::readData(unsigned short, unsigned short)+0xd2>
	uint32_t begin = ARM_DWT_CYCCNT;
     c4c:	4f15      	ldr	r7, [pc, #84]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
		port().TCR = tcr;	// restore back
     c4e:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c50:	4b15      	ldr	r3, [pc, #84]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
		return port().RDR;
     c52:	6f56      	ldr	r6, [r2, #116]	; 0x74
	uint32_t begin = ARM_DWT_CYCCNT;
     c54:	6879      	ldr	r1, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c56:	6822      	ldr	r2, [r4, #0]
     c58:	b2b6      	uxth	r6, r6
     c5a:	fba3 3202 	umull	r3, r2, r3, r2
     c5e:	0c92      	lsrs	r2, r2, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	1a5b      	subs	r3, r3, r1
     c64:	429a      	cmp	r2, r3
     c66:	d8fb      	bhi.n	c60 <AS5X47Spi::readData(unsigned short, unsigned short)+0xec>
  delayMicroseconds(1);
  uint16_t receivedData = SPI.transfer16(nopCommand);
  delayMicroseconds(1);
  digitalWrite(chipSelectPin, HIGH);
     c68:	2101      	movs	r1, #1
     c6a:	7828      	ldrb	r0, [r5, #0]
     c6c:	f015 f936 	bl	15edc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     c70:	6878      	ldr	r0, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c72:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
     c74:	6822      	ldr	r2, [r4, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c76:	490b      	ldr	r1, [pc, #44]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c78:	fba3 3202 	umull	r3, r2, r3, r2
     c7c:	0c92      	lsrs	r2, r2, #18
     c7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c82:	684b      	ldr	r3, [r1, #4]
     c84:	1a1b      	subs	r3, r3, r0
     c86:	429a      	cmp	r2, r3
     c88:	d8fb      	bhi.n	c82 <AS5X47Spi::readData(unsigned short, unsigned short)+0x10e>
//   receivedData = SPI.transfer16(nopCommand);
//   delayMicroseconds(1);
//   digitalWrite(chipSelectPin, HIGH);
//   SPI.endTransaction();
	return receivedData;
}
     c8a:	4630      	mov	r0, r6
     c8c:	b002      	add	sp, #8
     c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c92:	bf00      	nop
     c94:	40000007 	.word	0x40000007
     c98:	000f4240 	.word	0x000f4240
     c9c:	200094c4 	.word	0x200094c4
     ca0:	200094c0 	.word	0x200094c0
     ca4:	e0001000 	.word	0xe0001000
     ca8:	431bde83 	.word	0x431bde83
     cac:	fffff000 	.word	0xfffff000

00000cb0 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     cb0:	2000      	movs	r0, #0
     cb2:	4770      	bx	lr

00000cb4 <Print::flush()>:
	virtual void flush()				{ }
     cb4:	4770      	bx	lr
     cb6:	bf00      	nop

00000cb8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>:
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
     cb8:	2900      	cmp	r1, #0
     cba:	db05      	blt.n	cc8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
     cbc:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
     cc0:	458c      	cmp	ip, r1
     cc2:	dd01      	ble.n	cc8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
     cc4:	2a00      	cmp	r2, #0
     cc6:	da00      	bge.n	cca <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x12>
     cc8:	4770      	bx	lr
     cca:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
     cce:	4594      	cmp	ip, r2
     cd0:	ddfa      	ble.n	cc8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
     cd2:	b410      	push	{r4}
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
     cd4:	f890 c01a 	ldrb.w	ip, [r0, #26]
    switch (getRotation()) {
     cd8:	f1bc 0f02 	cmp.w	ip, #2
     cdc:	d00d      	beq.n	cfa <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x42>
     cde:	f1bc 0f03 	cmp.w	ip, #3
     ce2:	d058      	beq.n	d96 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xde>
     ce4:	f1bc 0f01 	cmp.w	ip, #1
     ce8:	d04c      	beq.n	d84 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xcc>
    switch (color) {
     cea:	2b01      	cmp	r3, #1
     cec:	d038      	beq.n	d60 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xa8>
     cee:	2b02      	cmp	r3, #2
     cf0:	d024      	beq.n	d3c <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x84>
     cf2:	b17b      	cbz	r3, d14 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x5c>
}
     cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
     cf8:	4770      	bx	lr
      x = WIDTH - x - 1;
     cfa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     cfe:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     d02:	ebac 0c01 	sub.w	ip, ip, r1
      y = HEIGHT - y - 1;
     d06:	8941      	ldrh	r1, [r0, #10]
     d08:	1a8a      	subs	r2, r1, r2
      x = WIDTH - x - 1;
     d0a:	fa0f f18c 	sxth.w	r1, ip
      y = HEIGHT - y - 1;
     d0e:	3a01      	subs	r2, #1
     d10:	b212      	sxth	r2, r2
      break;
     d12:	e7ea      	b.n	cea <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
     d14:	2a00      	cmp	r2, #0
     d16:	4613      	mov	r3, r2
     d18:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     d1c:	bfb8      	it	lt
     d1e:	1dd3      	addlt	r3, r2, #7
     d20:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     d22:	f002 0207 	and.w	r2, r2, #7
     d26:	2001      	movs	r0, #1
     d28:	10db      	asrs	r3, r3, #3
     d2a:	fa00 f202 	lsl.w	r2, r0, r2
     d2e:	fb13 130c 	smlabb	r3, r3, ip, r1
     d32:	5ce1      	ldrb	r1, [r4, r3]
     d34:	ea21 0202 	bic.w	r2, r1, r2
     d38:	54e2      	strb	r2, [r4, r3]
      break;
     d3a:	e7db      	b.n	cf4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
     d3c:	2a00      	cmp	r2, #0
     d3e:	4613      	mov	r3, r2
     d40:	8904      	ldrh	r4, [r0, #8]
     d42:	bfb8      	it	lt
     d44:	1dd3      	addlt	r3, r2, #7
     d46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     d48:	f002 0207 	and.w	r2, r2, #7
     d4c:	10db      	asrs	r3, r3, #3
     d4e:	fb13 1304 	smlabb	r3, r3, r4, r1
     d52:	2101      	movs	r1, #1
     d54:	5cc4      	ldrb	r4, [r0, r3]
     d56:	fa01 f202 	lsl.w	r2, r1, r2
     d5a:	4062      	eors	r2, r4
     d5c:	54c2      	strb	r2, [r0, r3]
}
     d5e:	e7c9      	b.n	cf4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
     d60:	2a00      	cmp	r2, #0
     d62:	4613      	mov	r3, r2
     d64:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     d68:	f002 0407 	and.w	r4, r2, #7
     d6c:	bfb8      	it	lt
     d6e:	1dd3      	addlt	r3, r2, #7
     d70:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     d72:	2201      	movs	r2, #1
     d74:	10db      	asrs	r3, r3, #3
     d76:	40a2      	lsls	r2, r4
     d78:	fb13 130c 	smlabb	r3, r3, ip, r1
     d7c:	5cc1      	ldrb	r1, [r0, r3]
     d7e:	430a      	orrs	r2, r1
     d80:	54c2      	strb	r2, [r0, r3]
      break;
     d82:	e7b7      	b.n	cf4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      x = WIDTH - x - 1;
     d84:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     d88:	ebac 0c02 	sub.w	ip, ip, r2
      break;
     d8c:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
     d8e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     d92:	b209      	sxth	r1, r1
      break;
     d94:	e7a9      	b.n	cea <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
      y = HEIGHT - y - 1;
     d96:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
     d9a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     d9e:	ebac 0c01 	sub.w	ip, ip, r1
      break;
     da2:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
     da4:	fa0f f28c 	sxth.w	r2, ip
      break;
     da8:	e79f      	b.n	cea <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
     daa:	bf00      	nop

00000dac <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>:
    if (x < 0) {                  // Clip left
     dac:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
     dae:	b530      	push	{r4, r5, lr}
     db0:	f8bd 400c 	ldrh.w	r4, [sp, #12]
    if (x < 0) {                  // Clip left
     db4:	da02      	bge.n	dbc <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x10>
      w += x;
     db6:	440b      	add	r3, r1
     db8:	2100      	movs	r1, #0
     dba:	b21b      	sxth	r3, r3
    if ((x + w) > WIDTH) { // Clip right
     dbc:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
     dc0:	185d      	adds	r5, r3, r1
      x = 0;
     dc2:	468e      	mov	lr, r1
    if ((x + w) > WIDTH) { // Clip right
     dc4:	4565      	cmp	r5, ip
     dc6:	dd02      	ble.n	dce <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x22>
      w = (WIDTH - x);
     dc8:	ebac 0101 	sub.w	r1, ip, r1
     dcc:	b20b      	sxth	r3, r1
    if (w > 0) { // Proceed only if width is positive
     dce:	2b00      	cmp	r3, #0
     dd0:	dd0f      	ble.n	df2 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x46>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
     dd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     dd4:	10d0      	asrs	r0, r2, #3
     dd6:	f002 0207 	and.w	r2, r2, #7
     dda:	fb1c ec00 	smlabb	ip, ip, r0, lr
     dde:	2001      	movs	r0, #1
     de0:	fa00 f202 	lsl.w	r2, r0, r2
      switch (color) {
     de4:	4284      	cmp	r4, r0
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
     de6:	4461      	add	r1, ip
     de8:	b2d2      	uxtb	r2, r2
      switch (color) {
     dea:	d019      	beq.n	e20 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x74>
     dec:	2c02      	cmp	r4, #2
     dee:	d00d      	beq.n	e0c <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x60>
     df0:	b104      	cbz	r4, df4 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x48>
}
     df2:	bd30      	pop	{r4, r5, pc}
        mask = ~mask;
     df4:	43d2      	mvns	r2, r2
     df6:	fa11 f383 	uxtah	r3, r1, r3
     dfa:	b2d2      	uxtb	r2, r2
          *pBuf++ &= mask;
     dfc:	f811 0b01 	ldrb.w	r0, [r1], #1
     e00:	4010      	ands	r0, r2
        while (w--) {
     e02:	4299      	cmp	r1, r3
          *pBuf++ &= mask;
     e04:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
     e08:	d1f8      	bne.n	dfc <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x50>
}
     e0a:	bd30      	pop	{r4, r5, pc}
        while (w--) {
     e0c:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ ^= mask;
     e10:	f811 0b01 	ldrb.w	r0, [r1], #1
     e14:	4050      	eors	r0, r2
        while (w--) {
     e16:	428b      	cmp	r3, r1
          *pBuf++ ^= mask;
     e18:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
     e1c:	d1f8      	bne.n	e10 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x64>
}
     e1e:	bd30      	pop	{r4, r5, pc}
        while (w--) {
     e20:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ |= mask;
     e24:	f811 0b01 	ldrb.w	r0, [r1], #1
     e28:	4310      	orrs	r0, r2
        while (w--) {
     e2a:	4299      	cmp	r1, r3
          *pBuf++ |= mask;
     e2c:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
     e30:	d1f8      	bne.n	e24 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x78>
}
     e32:	bd30      	pop	{r4, r5, pc}

00000e34 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>:
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
     e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
     e38:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
     e3c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
     e40:	458e      	cmp	lr, r1
     e42:	dd2d      	ble.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
    if (__y < 0) {               // Clip top
     e44:	2a00      	cmp	r2, #0
     e46:	db2d      	blt.n	ea4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
      __y = 0;
     e48:	4694      	mov	ip, r2
    if ((__y + __h) > HEIGHT) { // Clip bottom
     e4a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
     e4e:	449c      	add	ip, r3
     e50:	45a4      	cmp	ip, r4
     e52:	dd01      	ble.n	e58 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x24>
      __h = (HEIGHT - __y);
     e54:	1aa4      	subs	r4, r4, r2
     e56:	b223      	sxth	r3, r4
    if (__h > 0) { // Proceed only if height is now positive
     e58:	2b00      	cmp	r3, #0
     e5a:	dd21      	ble.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
     e5c:	f3c2 04c4 	ubfx	r4, r2, #3, #5
     e60:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
      if (mod) {
     e62:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
     e66:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
     e68:	fb1e 1404 	smlabb	r4, lr, r4, r1
     e6c:	eb06 0104 	add.w	r1, r6, r4
      if (mod) {
     e70:	d036      	beq.n	ee0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xac>
        mod = 8 - mod;
     e72:	f1c2 0c08 	rsb	ip, r2, #8
        uint8_t mask = pgm_read_byte(&premask[mod]);
     e76:	f8df 8118 	ldr.w	r8, [pc, #280]	; f90 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>
        mod = 8 - mod;
     e7a:	fa5f fc8c 	uxtb.w	ip, ip
        if (h < mod)
     e7e:	4563      	cmp	r3, ip
        uint8_t mask = pgm_read_byte(&premask[mod]);
     e80:	f818 700c 	ldrb.w	r7, [r8, ip]
        if (h < mod)
     e84:	d218      	bcs.n	eb8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x84>
          mask &= (0XFF >> (mod - h));
     e86:	ebac 0803 	sub.w	r8, ip, r3
     e8a:	f04f 0eff 	mov.w	lr, #255	; 0xff
        switch (color) {
     e8e:	2d01      	cmp	r5, #1
          mask &= (0XFF >> (mod - h));
     e90:	fa4e fe08 	asr.w	lr, lr, r8
     e94:	ea07 070e 	and.w	r7, r7, lr
        switch (color) {
     e98:	d071      	beq.n	f7e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14a>
     e9a:	2d02      	cmp	r5, #2
     e9c:	d049      	beq.n	f32 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xfe>
     e9e:	b18d      	cbz	r5, ec4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x90>
}
     ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __h += __y;
     ea4:	4413      	add	r3, r2
     ea6:	2200      	movs	r2, #0
    if ((__y + __h) > HEIGHT) { // Clip bottom
     ea8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __h += __y;
     eac:	b21b      	sxth	r3, r3
      __y = 0;
     eae:	4694      	mov	ip, r2
    if ((__y + __h) > HEIGHT) { // Clip bottom
     eb0:	449c      	add	ip, r3
     eb2:	45a4      	cmp	ip, r4
     eb4:	ddd0      	ble.n	e58 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x24>
     eb6:	e7cd      	b.n	e54 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x20>
        switch (color) {
     eb8:	2d01      	cmp	r5, #1
     eba:	d060      	beq.n	f7e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14a>
     ebc:	2d02      	cmp	r5, #2
     ebe:	d038      	beq.n	f32 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xfe>
     ec0:	2d00      	cmp	r5, #0
     ec2:	d13b      	bne.n	f3c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x108>
          *pBuf &= ~mask;
     ec4:	f816 e004 	ldrb.w	lr, [r6, r4]
     ec8:	ea2e 0e07 	bic.w	lr, lr, r7
      if (h >= mod) { // More to go?
     ecc:	4563      	cmp	r3, ip
          *pBuf ^= mask;
     ece:	f806 e004 	strb.w	lr, [r6, r4]
        pBuf += WIDTH;
     ed2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
      if (h >= mod) { // More to go?
     ed6:	d3e3      	bcc.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
        h -= mod;
     ed8:	3a08      	subs	r2, #8
        pBuf += WIDTH;
     eda:	4421      	add	r1, r4
        h -= mod;
     edc:	4413      	add	r3, r2
     ede:	b2db      	uxtb	r3, r3
        if (h >= 8) {
     ee0:	2b07      	cmp	r3, #7
     ee2:	d916      	bls.n	f12 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xde>
          if (color == SSD1306_INVERSE) {
     ee4:	2d02      	cmp	r5, #2
     ee6:	d035      	beq.n	f54 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x120>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
     ee8:	f1b5 0c00 	subs.w	ip, r5, #0
     eec:	461a      	mov	r2, r3
     eee:	bf18      	it	ne
     ef0:	f04f 0c01 	movne.w	ip, #1
     ef4:	f1cc 0c00 	rsb	ip, ip, #0
     ef8:	fa5f fc8c 	uxtb.w	ip, ip
              h -= 8;        // Subtract 8 rows from height
     efc:	3a08      	subs	r2, #8
              *pBuf = val;   // Set byte
     efe:	f881 c000 	strb.w	ip, [r1]
              pBuf += WIDTH; // Advance pointer 8 rows
     f02:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
     f06:	b2d2      	uxtb	r2, r2
              pBuf += WIDTH; // Advance pointer 8 rows
     f08:	4421      	add	r1, r4
            } while (h >= 8);
     f0a:	2a07      	cmp	r2, #7
     f0c:	d8f6      	bhi.n	efc <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xc8>
     f0e:	f003 0307 	and.w	r3, r3, #7
        if (h) { // Do the final partial byte, if necessary
     f12:	2b00      	cmp	r3, #0
     f14:	d0c4      	beq.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f16:	4a1e      	ldr	r2, [pc, #120]	; (f90 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>)
          switch (color) {
     f18:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f1a:	4413      	add	r3, r2
     f1c:	7a1b      	ldrb	r3, [r3, #8]
          switch (color) {
     f1e:	d033      	beq.n	f88 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x154>
     f20:	2d02      	cmp	r5, #2
     f22:	d028      	beq.n	f76 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x142>
     f24:	2d00      	cmp	r5, #0
     f26:	d1bb      	bne.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
            *pBuf &= ~mask;
     f28:	780a      	ldrb	r2, [r1, #0]
     f2a:	ea22 0303 	bic.w	r3, r2, r3
     f2e:	700b      	strb	r3, [r1, #0]
            break;
     f30:	e7b6      	b.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          *pBuf ^= mask;
     f32:	f816 e004 	ldrb.w	lr, [r6, r4]
     f36:	ea87 0e0e 	eor.w	lr, r7, lr
          break;
     f3a:	e7c7      	b.n	ecc <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x98>
        h -= mod;
     f3c:	3a08      	subs	r2, #8
        pBuf += WIDTH;
     f3e:	4471      	add	r1, lr
        h -= mod;
     f40:	4413      	add	r3, r2
     f42:	b2db      	uxtb	r3, r3
        if (h >= 8) {
     f44:	2b07      	cmp	r3, #7
     f46:	d8cf      	bhi.n	ee8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xb4>
        if (h) { // Do the final partial byte, if necessary
     f48:	2b00      	cmp	r3, #0
     f4a:	d0a9      	beq.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f4c:	4498      	add	r8, r3
     f4e:	f898 3008 	ldrb.w	r3, [r8, #8]
          switch (color) {
     f52:	e7e5      	b.n	f20 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xec>
     f54:	461a      	mov	r2, r3
              *pBuf ^= 0xFF; // Invert byte
     f56:	780c      	ldrb	r4, [r1, #0]
              h -= 8;        // Subtract 8 rows from height
     f58:	3a08      	subs	r2, #8
              *pBuf ^= 0xFF; // Invert byte
     f5a:	43e4      	mvns	r4, r4
              h -= 8;        // Subtract 8 rows from height
     f5c:	b2d2      	uxtb	r2, r2
              *pBuf ^= 0xFF; // Invert byte
     f5e:	700c      	strb	r4, [r1, #0]
            } while (h >= 8);
     f60:	2a07      	cmp	r2, #7
              pBuf += WIDTH; // Advance pointer 8 rows
     f62:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
     f66:	4421      	add	r1, r4
            } while (h >= 8);
     f68:	d8f5      	bhi.n	f56 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x122>
        if (h) { // Do the final partial byte, if necessary
     f6a:	f013 0307 	ands.w	r3, r3, #7
     f6e:	d097      	beq.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f70:	4a07      	ldr	r2, [pc, #28]	; (f90 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>)
     f72:	4413      	add	r3, r2
     f74:	7a1b      	ldrb	r3, [r3, #8]
            *pBuf ^= mask;
     f76:	780a      	ldrb	r2, [r1, #0]
     f78:	4053      	eors	r3, r2
     f7a:	700b      	strb	r3, [r1, #0]
}
     f7c:	e790      	b.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          *pBuf |= mask;
     f7e:	f816 e004 	ldrb.w	lr, [r6, r4]
     f82:	ea47 0e0e 	orr.w	lr, r7, lr
          break;
     f86:	e7a1      	b.n	ecc <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x98>
            *pBuf |= mask;
     f88:	780a      	ldrb	r2, [r1, #0]
     f8a:	4313      	orrs	r3, r2
     f8c:	700b      	strb	r3, [r1, #0]
            break;
     f8e:	e787      	b.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
     f90:	60002060 	.word	0x60002060

00000f94 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
     f94:	4694      	mov	ip, r2
  switch (rotation) {
     f96:	7e82      	ldrb	r2, [r0, #26]
     f98:	2a02      	cmp	r2, #2
                                     uint16_t color) {
     f9a:	b410      	push	{r4}
     f9c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
     fa0:	d028      	beq.n	ff4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x60>
     fa2:	2a03      	cmp	r2, #3
     fa4:	d021      	beq.n	fea <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x56>
     fa6:	2a01      	cmp	r2, #1
     fa8:	d00f      	beq.n	fca <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x36>
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
     faa:	f1bc 0f00 	cmp.w	ip, #0
     fae:	db09      	blt.n	fc4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
     fb0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
     fb4:	4562      	cmp	r2, ip
     fb6:	dd05      	ble.n	fc4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
     fb8:	9401      	str	r4, [sp, #4]
     fba:	4662      	mov	r2, ip
}
     fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
     fc0:	f7ff bef4 	b.w	dac <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
     fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
     fc8:	4770      	bx	lr
    x = WIDTH - x - 1;
     fca:	8902      	ldrh	r2, [r0, #8]
     fcc:	eba2 020c 	sub.w	r2, r2, ip
     fd0:	3a01      	subs	r2, #1
     fd2:	fa0f fc82 	sxth.w	ip, r2
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
     fd6:	f1bc 0f00 	cmp.w	ip, #0
     fda:	dbf3      	blt.n	fc4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
     fdc:	460a      	mov	r2, r1
     fde:	9401      	str	r4, [sp, #4]
     fe0:	4661      	mov	r1, ip
}
     fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
     fe6:	f7ff bf25 	b.w	e34 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    y -= (w - 1);
     fea:	4419      	add	r1, r3
     fec:	8942      	ldrh	r2, [r0, #10]
     fee:	1a52      	subs	r2, r2, r1
     ff0:	b211      	sxth	r1, r2
  if (bSwap)
     ff2:	e7f0      	b.n	fd6 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x42>
    y = HEIGHT - y - 1;
     ff4:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
     ff6:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
     ff8:	eba2 020c 	sub.w	r2, r2, ip
     ffc:	3a01      	subs	r2, #1
     ffe:	fa0f fc82 	sxth.w	ip, r2
    x -= (w - 1);
    1002:	8902      	ldrh	r2, [r0, #8]
    1004:	1a52      	subs	r2, r2, r1
    1006:	b211      	sxth	r1, r2
  if (bSwap)
    1008:	e7cf      	b.n	faa <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x16>
    100a:	bf00      	nop

0000100c <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
    100c:	4694      	mov	ip, r2
  switch (rotation) {
    100e:	7e82      	ldrb	r2, [r0, #26]
    1010:	2a02      	cmp	r2, #2
                                     uint16_t color) {
    1012:	b410      	push	{r4}
    1014:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
    1018:	d027      	beq.n	106a <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x5e>
    101a:	2a03      	cmp	r2, #3
    101c:	d014      	beq.n	1048 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x3c>
    101e:	2a01      	cmp	r2, #1
    1020:	d007      	beq.n	1032 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x26>
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    1022:	2900      	cmp	r1, #0
    1024:	db0d      	blt.n	1042 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    1026:	9401      	str	r4, [sp, #4]
    1028:	4662      	mov	r2, ip
}
    102a:	f85d 4b04 	ldr.w	r4, [sp], #4
    102e:	f7ff bf01 	b.w	e34 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x -= (h - 1);
    1032:	449c      	add	ip, r3
    1034:	8902      	ldrh	r2, [r0, #8]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1036:	2900      	cmp	r1, #0
    x -= (h - 1);
    1038:	eba2 020c 	sub.w	r2, r2, ip
    103c:	fa0f fc82 	sxth.w	ip, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1040:	da08      	bge.n	1054 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x48>
}
    1042:	f85d 4b04 	ldr.w	r4, [sp], #4
    1046:	4770      	bx	lr
    y = HEIGHT - y - 1;
    1048:	8942      	ldrh	r2, [r0, #10]
    104a:	1a52      	subs	r2, r2, r1
    104c:	3a01      	subs	r2, #1
    104e:	b211      	sxth	r1, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1050:	2900      	cmp	r1, #0
    1052:	dbf6      	blt.n	1042 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    1054:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    1058:	428a      	cmp	r2, r1
    105a:	ddf2      	ble.n	1042 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    105c:	460a      	mov	r2, r1
    105e:	9401      	str	r4, [sp, #4]
    1060:	4661      	mov	r1, ip
}
    1062:	f85d 4b04 	ldr.w	r4, [sp], #4
    1066:	f7ff bea1 	b.w	dac <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x = WIDTH - x - 1;
    106a:	8902      	ldrh	r2, [r0, #8]
    y -= (h - 1);
    106c:	449c      	add	ip, r3
    x = WIDTH - x - 1;
    106e:	1a52      	subs	r2, r2, r1
    1070:	3a01      	subs	r2, #1
    1072:	b211      	sxth	r1, r2
    y -= (h - 1);
    1074:	8942      	ldrh	r2, [r0, #10]
    1076:	eba2 020c 	sub.w	r2, r2, ip
    107a:	fa0f fc82 	sxth.w	ip, r2
  if (bSwap)
    107e:	e7d0      	b.n	1022 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x16>

00001080 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
    1080:	b570      	push	{r4, r5, r6, lr}
    1082:	4604      	mov	r4, r0
    1084:	461d      	mov	r5, r3
    1086:	f99d 6010 	ldrsb.w	r6, [sp, #16]
      wireClk(clkDuring), restoreClk(clkAfter)
    108a:	f00e f8a7 	bl	f1dc <Adafruit_GFX::Adafruit_GFX(short, short)>
    108e:	4b0f      	ldr	r3, [pc, #60]	; (10cc <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x4c>)
    1090:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    1092:	2300      	movs	r3, #0
    1094:	6263      	str	r3, [r4, #36]	; 0x24
    1096:	b1b5      	cbz	r5, 10c6 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x46>
      wireClk(clkDuring), restoreClk(clkAfter)
    1098:	9a05      	ldr	r2, [sp, #20]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    109a:	2300      	movs	r3, #0
	SPISettings() : _clock(4000000) {
    109c:	480c      	ldr	r0, [pc, #48]	; (10d0 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x50>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    109e:	2107      	movs	r1, #7
      wireClk(clkDuring), restoreClk(clkAfter)
    10a0:	65a2      	str	r2, [r4, #88]	; 0x58
    10a2:	9a06      	ldr	r2, [sp, #24]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    10a4:	62e3      	str	r3, [r4, #44]	; 0x2c
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    10a6:	23ff      	movs	r3, #255	; 0xff
      wireClk(clkDuring), restoreClk(clkAfter)
    10a8:	65e2      	str	r2, [r4, #92]	; 0x5c
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    10aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10ae:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    10b2:	62a5      	str	r5, [r4, #40]	; 0x28
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    10b4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    10b8:	86a2      	strh	r2, [r4, #52]	; 0x34
    10ba:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    10be:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
}
    10c2:	4620      	mov	r0, r4
    10c4:	bd70      	pop	{r4, r5, r6, pc}
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    10c6:	4d03      	ldr	r5, [pc, #12]	; (10d4 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x54>)
    10c8:	e7e6      	b.n	1098 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x18>
    10ca:	bf00      	nop
    10cc:	20007e1c 	.word	0x20007e1c
    10d0:	003d0900 	.word	0x003d0900
    10d4:	20009524 	.word	0x20009524

000010d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    10d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (wire) { // I2C
    10da:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    10dc:	4604      	mov	r4, r0
    10de:	460d      	mov	r5, r1
  if (wire) { // I2C
    10e0:	b1cb      	cbz	r3, 1116 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x3e>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    10e2:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    10e6:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    10e8:	2100      	movs	r1, #0
		txBuffer[0] = (address << 1);
    10ea:	40b2      	lsls	r2, r6
		transmitting = 1;
    10ec:	f883 6130 	strb.w	r6, [r3, #304]	; 0x130
		txBufferLength = 1;
    10f0:	f883 612f 	strb.w	r6, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    10f4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    10f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    10fa:	6803      	ldr	r3, [r0, #0]
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	4798      	blx	r3
    WIRE_WRITE(c);
    1100:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1102:	4629      	mov	r1, r5
    1104:	6803      	ldr	r3, [r0, #0]
    1106:	681b      	ldr	r3, [r3, #0]
    1108:	4798      	blx	r3
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    110a:	4631      	mov	r1, r6
    110c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    110e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1112:	f00d bc57 	b.w	e9c4 <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    1116:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1118:	6d00      	ldr	r0, [r0, #80]	; 0x50
    111a:	6813      	ldr	r3, [r2, #0]
  if (spi) {
    111c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    SSD1306_MODE_COMMAND
    111e:	ea23 0300 	bic.w	r3, r3, r0
    1122:	6013      	str	r3, [r2, #0]
  if (spi) {
    1124:	b139      	cbz	r1, 1136 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x5e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1126:	680a      	ldr	r2, [r1, #0]
		port().TDR = data;
    1128:	6655      	str	r5, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    112a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    112c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1130:	d0fb      	beq.n	112a <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x52>
    1132:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    1134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *clkPort |= clkPinMask;  // Clock high
    1136:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1138:	2008      	movs	r0, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    113a:	2180      	movs	r1, #128	; 0x80
    113c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    113e:	6832      	ldr	r2, [r6, #0]
      if (d & bit)
    1140:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
    1142:	6ca7      	ldr	r7, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1144:	ea4f 0151 	mov.w	r1, r1, lsr #1
        *mosiPort |= mosiPinMask;
    1148:	bf14      	ite	ne
    114a:	433a      	orrne	r2, r7
        *mosiPort &= ~mosiPinMask;
    114c:	43ba      	biceq	r2, r7
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    114e:	3801      	subs	r0, #1
        *mosiPort &= ~mosiPinMask;
    1150:	6032      	str	r2, [r6, #0]
      *clkPort |= clkPinMask;  // Clock high
    1152:	681a      	ldr	r2, [r3, #0]
    1154:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    1156:	ea42 0207 	orr.w	r2, r2, r7
    115a:	601a      	str	r2, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    115c:	681a      	ldr	r2, [r3, #0]
    115e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    1160:	ea22 0207 	bic.w	r2, r2, r7
    1164:	601a      	str	r2, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1166:	d1ea      	bne.n	113e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x66>
}
    1168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    116a:	bf00      	nop

0000116c <Adafruit_SSD1306::invertDisplay(bool)>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    116c:	b538      	push	{r3, r4, r5, lr}
    116e:	4604      	mov	r4, r0
  TRANSACTION_START
    1170:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
    1172:	460d      	mov	r5, r1
  TRANSACTION_START
    1174:	b178      	cbz	r0, 1196 <Adafruit_SSD1306::invertDisplay(bool)+0x2a>
    1176:	6da1      	ldr	r1, [r4, #88]	; 0x58
    1178:	f00d fdbc 	bl	ecf4 <TwoWire::setClock(unsigned long)>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    117c:	f1a5 015a 	sub.w	r1, r5, #90	; 0x5a
    1180:	4620      	mov	r0, r4
    1182:	b2c9      	uxtb	r1, r1
    1184:	f7ff ffa8 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  TRANSACTION_END
    1188:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    118a:	b198      	cbz	r0, 11b4 <Adafruit_SSD1306::invertDisplay(bool)+0x48>
    118c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
    118e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
    1192:	f00d bdaf 	b.w	ecf4 <TwoWire::setClock(unsigned long)>
  TRANSACTION_START
    1196:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1198:	b128      	cbz	r0, 11a6 <Adafruit_SSD1306::invertDisplay(bool)+0x3a>
    119a:	f104 0364 	add.w	r3, r4, #100	; 0x64
    119e:	e893 0006 	ldmia.w	r3, {r1, r2}
    11a2:	f7ff fc4b 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
    11a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    11a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    11aa:	6813      	ldr	r3, [r2, #0]
    11ac:	ea23 0301 	bic.w	r3, r3, r1
    11b0:	6013      	str	r3, [r2, #0]
    11b2:	e7e3      	b.n	117c <Adafruit_SSD1306::invertDisplay(bool)+0x10>
  TRANSACTION_END
    11b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    11b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    11b8:	680b      	ldr	r3, [r1, #0]
    11ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    11bc:	4303      	orrs	r3, r0
    11be:	600b      	str	r3, [r1, #0]
    11c0:	b322      	cbz	r2, 120c <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
		if (interruptMasksUsed) {
    11c2:	7cd3      	ldrb	r3, [r2, #19]
    11c4:	b313      	cbz	r3, 120c <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    11c6:	07dd      	lsls	r5, r3, #31
    11c8:	d504      	bpl.n	11d4 <Adafruit_SSD1306::invertDisplay(bool)+0x68>
    11ca:	6a90      	ldr	r0, [r2, #40]	; 0x28
    11cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11d0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    11d4:	079c      	lsls	r4, r3, #30
    11d6:	d504      	bpl.n	11e2 <Adafruit_SSD1306::invertDisplay(bool)+0x76>
    11d8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    11da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11de:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    11e2:	0758      	lsls	r0, r3, #29
    11e4:	d504      	bpl.n	11f0 <Adafruit_SSD1306::invertDisplay(bool)+0x84>
    11e6:	6b10      	ldr	r0, [r2, #48]	; 0x30
    11e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11ec:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    11f0:	0719      	lsls	r1, r3, #28
    11f2:	d504      	bpl.n	11fe <Adafruit_SSD1306::invertDisplay(bool)+0x92>
    11f4:	6b50      	ldr	r0, [r2, #52]	; 0x34
    11f6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11fa:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    11fe:	06db      	lsls	r3, r3, #27
    1200:	d504      	bpl.n	120c <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
    1202:	6b92      	ldr	r2, [r2, #56]	; 0x38
    1204:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1208:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    120c:	bd38      	pop	{r3, r4, r5, pc}
    120e:	bf00      	nop

00001210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>:
  if (wire) { // I2C
    1210:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    1212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1216:	4604      	mov	r4, r0
    1218:	460d      	mov	r5, r1
    121a:	4690      	mov	r8, r2
  if (wire) { // I2C
    121c:	2b00      	cmp	r3, #0
    121e:	d03b      	beq.n	1298 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x88>
		txBuffer[0] = (address << 1);
    1220:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    1224:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    1226:	2100      	movs	r1, #0
		txBuffer[0] = (address << 1);
    1228:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    122a:	f883 6130 	strb.w	r6, [r3, #304]	; 0x130
		txBufferLength = 1;
    122e:	f883 612f 	strb.w	r6, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1232:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    1236:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1238:	6803      	ldr	r3, [r0, #0]
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	4798      	blx	r3
    while (n--) {
    123e:	f1b8 0f00 	cmp.w	r8, #0
    1242:	d023      	beq.n	128c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
    1244:	eb05 0708 	add.w	r7, r5, r8
		return endTransmission(1);
    1248:	46b0      	mov	r8, r6
      WIRE_WRITE(pgm_read_byte(c++));
    124a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      bytesOut++;
    124c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
    124e:	f815 1b01 	ldrb.w	r1, [r5], #1
    1252:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
    1254:	b2b6      	uxth	r6, r6
      WIRE_WRITE(pgm_read_byte(c++));
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	4798      	blx	r3
    while (n--) {
    125a:	42af      	cmp	r7, r5
    125c:	d016      	beq.n	128c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
      if (bytesOut >= WIRE_MAX) {
    125e:	2e88      	cmp	r6, #136	; 0x88
    1260:	d1f3      	bne.n	124a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
    1262:	2101      	movs	r1, #1
    1264:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1266:	f00d fbad 	bl	e9c4 <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    126a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    126e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    1270:	2100      	movs	r1, #0
    1272:	0052      	lsls	r2, r2, #1
        bytesOut = 1;
    1274:	2601      	movs	r6, #1
		transmitting = 1;
    1276:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    127a:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    127e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    1282:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1284:	6803      	ldr	r3, [r0, #0]
    1286:	681b      	ldr	r3, [r3, #0]
    1288:	4798      	blx	r3
        bytesOut = 1;
    128a:	e7de      	b.n	124a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
		return endTransmission(1);
    128c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    128e:	2101      	movs	r1, #1
}
    1290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1294:	f00d bb96 	b.w	e9c4 <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    1298:	6c02      	ldr	r2, [r0, #64]	; 0x40
    129a:	6d01      	ldr	r1, [r0, #80]	; 0x50
    129c:	6813      	ldr	r3, [r2, #0]
    129e:	ea23 0301 	bic.w	r3, r3, r1
    12a2:	6013      	str	r3, [r2, #0]
    while (n--)
    12a4:	f1b8 0f00 	cmp.w	r8, #0
    12a8:	d00d      	beq.n	12c6 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb6>
  if (spi) {
    12aa:	6a47      	ldr	r7, [r0, #36]	; 0x24
    12ac:	44a8      	add	r8, r5
      SPIwrite(pgm_read_byte(c++));
    12ae:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (spi) {
    12b2:	b157      	cbz	r7, 12ca <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xba>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    12b4:	6839      	ldr	r1, [r7, #0]
		port().TDR = data;
    12b6:	664e      	str	r6, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    12b8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    12ba:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    12be:	d0fb      	beq.n	12b8 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xa8>
    12c0:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    while (n--)
    12c2:	4545      	cmp	r5, r8
    12c4:	d1f3      	bne.n	12ae <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x9e>
}
    12c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *clkPort |= clkPinMask;  // Clock high
    12ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12cc:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    12d0:	f04f 0c80 	mov.w	ip, #128	; 0x80
    12d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    12d6:	6808      	ldr	r0, [r1, #0]
      if (d & bit)
    12d8:	ea16 0f0c 	tst.w	r6, ip
        *mosiPort |= mosiPinMask;
    12dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    12de:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        *mosiPort |= mosiPinMask;
    12e2:	bf14      	ite	ne
    12e4:	4310      	orrne	r0, r2
        *mosiPort &= ~mosiPinMask;
    12e6:	4390      	biceq	r0, r2
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    12e8:	f1be 0e01 	subs.w	lr, lr, #1
        *mosiPort &= ~mosiPinMask;
    12ec:	6008      	str	r0, [r1, #0]
      *clkPort |= clkPinMask;  // Clock high
    12ee:	6818      	ldr	r0, [r3, #0]
    12f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    12f2:	ea40 0002 	orr.w	r0, r0, r2
    12f6:	6018      	str	r0, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    12f8:	6818      	ldr	r0, [r3, #0]
    12fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    12fc:	ea20 0002 	bic.w	r0, r0, r2
    1300:	6018      	str	r0, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1302:	d1e8      	bne.n	12d6 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xc6>
    1304:	e7dd      	b.n	12c2 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb2>
    1306:	bf00      	nop

00001308 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>:
                             bool periphBegin) {
    1308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    130c:	4604      	mov	r4, r0
    130e:	b086      	sub	sp, #24
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    1310:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
                             bool periphBegin) {
    1312:	461e      	mov	r6, r3
    1314:	460f      	mov	r7, r1
    1316:	4615      	mov	r5, r2
    1318:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    131c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    1320:	2800      	cmp	r0, #0
    1322:	f000 815d 	beq.w	15e0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2d8>
    1326:	1dda      	adds	r2, r3, #7
    1328:	bf48      	it	mi
    132a:	f103 020e 	addmi.w	r2, r3, #14
    132e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    1332:	10d2      	asrs	r2, r2, #3
    1334:	fb03 f202 	mul.w	r2, r3, r2
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    1338:	2100      	movs	r1, #0
    133a:	f01a fb7d 	bl	1ba38 <memset>
  if (HEIGHT > 32) {
    133e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
    1342:	2820      	cmp	r0, #32
    1344:	f300 80bd 	bgt.w	14c2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1ba>
    drawBitmap((WIDTH - dtu_width) / 2, (HEIGHT - dtu_height) / 2,
    1348:	f1b0 0220 	subs.w	r2, r0, #32
    134c:	f04f 0c01 	mov.w	ip, #1
    1350:	4bb9      	ldr	r3, [pc, #740]	; (1638 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x330>)
    1352:	bf48      	it	mi
    1354:	f1a0 021f 	submi.w	r2, r0, #31
    1358:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    135c:	f1b0 0167 	subs.w	r1, r0, #103	; 0x67
    1360:	ea4f 0262 	mov.w	r2, r2, asr #1
    1364:	bf48      	it	mi
    1366:	f1a0 0166 	submi.w	r1, r0, #102	; 0x66
    136a:	2020      	movs	r0, #32
    136c:	e9cd 0c01 	strd	r0, ip, [sp, #4]
    1370:	2067      	movs	r0, #103	; 0x67
    1372:	1049      	asrs	r1, r1, #1
    1374:	9000      	str	r0, [sp, #0]
    1376:	4620      	mov	r0, r4
    1378:	f00d ff48 	bl	f20c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    137c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    137e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    1382:	2800      	cmp	r0, #0
    1384:	f000 80bc 	beq.w	1500 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f8>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    1388:	2d00      	cmp	r5, #0
    138a:	f040 811d 	bne.w	15c8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2c0>
    138e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    1392:	2b20      	cmp	r3, #32
    1394:	bf0c      	ite	eq
    1396:	253c      	moveq	r5, #60	; 0x3c
    1398:	253d      	movne	r5, #61	; 0x3d
    139a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    139e:	f1b8 0f00 	cmp.w	r8, #0
    13a2:	f040 8118 	bne.w	15d6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2ce>
  if (reset && (rstPin >= 0)) {
    13a6:	2e00      	cmp	r6, #0
    13a8:	f000 80d8 	beq.w	155c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x254>
    13ac:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
    13b0:	2800      	cmp	r0, #0
    13b2:	db18      	blt.n	13e6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xde>
    pinMode(rstPin, OUTPUT);
    13b4:	2101      	movs	r1, #1
    13b6:	b2c0      	uxtb	r0, r0
    13b8:	f014 fdcc 	bl	15f54 <pinMode>
    digitalWrite(rstPin, HIGH);
    13bc:	2101      	movs	r1, #1
    13be:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    13c2:	f014 fd8b 	bl	15edc <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
    13c6:	2001      	movs	r0, #1
    13c8:	f014 fd0a 	bl	15de0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
    13cc:	2100      	movs	r1, #0
    13ce:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    13d2:	f014 fd83 	bl	15edc <digitalWrite>
    delay(10);                  // Wait 10 ms
    13d6:	200a      	movs	r0, #10
    13d8:	f014 fd02 	bl	15de0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
    13dc:	2101      	movs	r1, #1
    13de:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    13e2:	f014 fd7b 	bl	15edc <digitalWrite>
  TRANSACTION_START
    13e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    13e8:	2800      	cmp	r0, #0
    13ea:	f040 80b7 	bne.w	155c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x254>
    13ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13f0:	b128      	cbz	r0, 13fe <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xf6>
    13f2:	f104 0364 	add.w	r3, r4, #100	; 0x64
    13f6:	e893 0006 	ldmia.w	r3, {r1, r2}
    13fa:	f7ff fb1f 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
    13fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1400:	6d61      	ldr	r1, [r4, #84]	; 0x54
    1402:	6813      	ldr	r3, [r2, #0]
    1404:	ea23 0301 	bic.w	r3, r3, r1
    1408:	6013      	str	r3, [r2, #0]
  ssd1306_commandList(init1, sizeof(init1));
    140a:	2204      	movs	r2, #4
    140c:	498b      	ldr	r1, [pc, #556]	; (163c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x334>)
    140e:	4620      	mov	r0, r4
    1410:	f7ff fefe 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(HEIGHT - 1);
    1414:	8961      	ldrh	r1, [r4, #10]
    1416:	4620      	mov	r0, r4
    1418:	3901      	subs	r1, #1
    141a:	b2c9      	uxtb	r1, r1
    141c:	f7ff fe5c 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init2, sizeof(init2));
    1420:	4987      	ldr	r1, [pc, #540]	; (1640 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x338>)
    1422:	2204      	movs	r2, #4
    1424:	4620      	mov	r0, r4
    1426:	f7ff fef3 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
    142a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    142e:	4620      	mov	r0, r4
    1430:	2b01      	cmp	r3, #1
    1432:	bf0c      	ite	eq
    1434:	2110      	moveq	r1, #16
    1436:	2114      	movne	r1, #20
    1438:	f7ff fe4e 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init3, sizeof(init3));
    143c:	2204      	movs	r2, #4
    143e:	4981      	ldr	r1, [pc, #516]	; (1644 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x33c>)
    1440:	4620      	mov	r0, r4
    1442:	f7ff fee5 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    1446:	68a3      	ldr	r3, [r4, #8]
    1448:	4a7f      	ldr	r2, [pc, #508]	; (1648 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x340>)
  contrast = 0x8F;
    144a:	218f      	movs	r1, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    144c:	4293      	cmp	r3, r2
  contrast = 0x8F;
    144e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    1452:	d008      	beq.n	1466 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x15e>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    1454:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
    1458:	4293      	cmp	r3, r2
    145a:	f000 80d4 	beq.w	1606 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2fe>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    145e:	4a7b      	ldr	r2, [pc, #492]	; (164c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x344>)
    1460:	4293      	cmp	r3, r2
    1462:	f000 80da 	beq.w	161a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x312>
    comPins = 0x02;
    1466:	2502      	movs	r5, #2
  ssd1306_command1(SSD1306_SETCOMPINS);
    1468:	21da      	movs	r1, #218	; 0xda
    146a:	4620      	mov	r0, r4
    146c:	f7ff fe34 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(comPins);
    1470:	4629      	mov	r1, r5
    1472:	4620      	mov	r0, r4
    1474:	f7ff fe30 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETCONTRAST);
    1478:	2181      	movs	r1, #129	; 0x81
    147a:	4620      	mov	r0, r4
    147c:	f7ff fe2c 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(contrast);
    1480:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    1484:	4620      	mov	r0, r4
    1486:	f7ff fe27 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
    148a:	21d9      	movs	r1, #217	; 0xd9
    148c:	4620      	mov	r0, r4
    148e:	f7ff fe23 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
    1492:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    1496:	4620      	mov	r0, r4
    1498:	2b01      	cmp	r3, #1
    149a:	bf0c      	ite	eq
    149c:	2122      	moveq	r1, #34	; 0x22
    149e:	21f1      	movne	r1, #241	; 0xf1
    14a0:	f7ff fe1a 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init5, sizeof(init5));
    14a4:	4620      	mov	r0, r4
    14a6:	2206      	movs	r2, #6
    14a8:	4969      	ldr	r1, [pc, #420]	; (1650 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x348>)
    14aa:	f7ff feb1 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  TRANSACTION_END
    14ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    14b0:	2800      	cmp	r0, #0
    14b2:	d057      	beq.n	1564 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x25c>
    14b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    14b6:	f00d fc1d 	bl	ecf4 <TwoWire::setClock(unsigned long)>
  return true; // Success
    14ba:	2001      	movs	r0, #1
}
    14bc:	b006      	add	sp, #24
    14be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
    14c2:	3840      	subs	r0, #64	; 0x40
    14c4:	f04f 0e01 	mov.w	lr, #1
    14c8:	4b62      	ldr	r3, [pc, #392]	; (1654 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x34c>)
    14ca:	b200      	sxth	r0, r0
    14cc:	2800      	cmp	r0, #0
    14ce:	bfb8      	it	lt
    14d0:	3001      	addlt	r0, #1
    14d2:	1042      	asrs	r2, r0, #1
    14d4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    14d8:	f1b0 0152 	subs.w	r1, r0, #82	; 0x52
    14dc:	bf48      	it	mi
    14de:	f1a0 0151 	submi.w	r1, r0, #81	; 0x51
    14e2:	2040      	movs	r0, #64	; 0x40
    14e4:	e9cd 0e01 	strd	r0, lr, [sp, #4]
    14e8:	2052      	movs	r0, #82	; 0x52
    14ea:	1049      	asrs	r1, r1, #1
    14ec:	9000      	str	r0, [sp, #0]
    14ee:	4620      	mov	r0, r4
    14f0:	f00d fe8c 	bl	f20c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    14f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    14f6:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    14fa:	2800      	cmp	r0, #0
    14fc:	f47f af44 	bne.w	1388 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x80>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    1500:	2101      	movs	r1, #1
    1502:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    1506:	f014 fd25 	bl	15f54 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
    150a:	2101      	movs	r1, #1
    150c:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
    1510:	f014 fd20 	bl	15f54 <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    1514:	4d50      	ldr	r5, [pc, #320]	; (1658 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x350>)
    1516:	f994 2035 	ldrsb.w	r2, [r4, #53]	; 0x35
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    151a:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    151e:	0111      	lsls	r1, r2, #4
    if (spi) { // Hardware SPI
    1520:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    1522:	eb05 1202 	add.w	r2, r5, r2, lsl #4
    1526:	5869      	ldr	r1, [r5, r1]
    dcPinMask = digitalPinToBitMask(dcPin);
    1528:	68d2      	ldr	r2, [r2, #12]
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    152a:	6421      	str	r1, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
    152c:	6522      	str	r2, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    152e:	011a      	lsls	r2, r3, #4
    1530:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    1534:	58aa      	ldr	r2, [r5, r2]
    csPinMask = digitalPinToBitMask(csPin);
    1536:	68db      	ldr	r3, [r3, #12]
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    1538:	6462      	str	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
    153a:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
    153c:	6811      	ldr	r1, [r2, #0]
    153e:	430b      	orrs	r3, r1
    1540:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
    1542:	2800      	cmp	r0, #0
    1544:	f000 808a 	beq.w	165c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x354>
      if (periphBegin)
    1548:	f1b8 0f00 	cmp.w	r8, #0
    154c:	d16f      	bne.n	162e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x326>
  if (reset && (rstPin >= 0)) {
    154e:	2e00      	cmp	r6, #0
    1550:	f47f af2c 	bne.w	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  TRANSACTION_START
    1554:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1556:	2800      	cmp	r0, #0
    1558:	f43f af49 	beq.w	13ee <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xe6>
    155c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    155e:	f00d fbc9 	bl	ecf4 <TwoWire::setClock(unsigned long)>
    1562:	e752      	b.n	140a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x102>
  TRANSACTION_END
    1564:	6c61      	ldr	r1, [r4, #68]	; 0x44
    1566:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1568:	680b      	ldr	r3, [r1, #0]
    156a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    156c:	4303      	orrs	r3, r0
    156e:	600b      	str	r3, [r1, #0]
    1570:	b332      	cbz	r2, 15c0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
		if (interruptMasksUsed) {
    1572:	7cd3      	ldrb	r3, [r2, #19]
    1574:	b323      	cbz	r3, 15c0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1576:	07dd      	lsls	r5, r3, #31
    1578:	d504      	bpl.n	1584 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x27c>
    157a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    157c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1580:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1584:	079c      	lsls	r4, r3, #30
    1586:	d504      	bpl.n	1592 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x28a>
    1588:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    158a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    158e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1592:	0758      	lsls	r0, r3, #29
    1594:	d504      	bpl.n	15a0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x298>
    1596:	6b10      	ldr	r0, [r2, #48]	; 0x30
    1598:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    159c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    15a0:	0719      	lsls	r1, r3, #28
    15a2:	d504      	bpl.n	15ae <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2a6>
    15a4:	6b50      	ldr	r0, [r2, #52]	; 0x34
    15a6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    15aa:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    15ae:	06db      	lsls	r3, r3, #27
    15b0:	d506      	bpl.n	15c0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
    15b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    15b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  return true; // Success
    15b8:	2001      	movs	r0, #1
    15ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    15be:	e77d      	b.n	14bc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1b4>
    15c0:	2001      	movs	r0, #1
}
    15c2:	b006      	add	sp, #24
    15c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    15c8:	b26d      	sxtb	r5, r5
    15ca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    15ce:	f1b8 0f00 	cmp.w	r8, #0
    15d2:	f43f aee8 	beq.w	13a6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x9e>
      wire->begin();
    15d6:	f023 f8af 	bl	24738 <___ZN7TwoWire5beginEv_veneer>
  if (reset && (rstPin >= 0)) {
    15da:	2e00      	cmp	r6, #0
    15dc:	d0ba      	beq.n	1554 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    15de:	e6e5      	b.n	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    15e0:	1dda      	adds	r2, r3, #7
    15e2:	bf48      	it	mi
    15e4:	f103 020e 	addmi.w	r2, r3, #14
    15e8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    15ec:	10d2      	asrs	r2, r2, #3
    15ee:	fb03 f202 	mul.w	r2, r3, r2
    15f2:	4610      	mov	r0, r2
    15f4:	9205      	str	r2, [sp, #20]
    15f6:	f018 f909 	bl	1980c <malloc>
    15fa:	9a05      	ldr	r2, [sp, #20]
    15fc:	62e0      	str	r0, [r4, #44]	; 0x2c
    15fe:	2800      	cmp	r0, #0
    1600:	f47f ae9a 	bne.w	1338 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x30>
    1604:	e75a      	b.n	14bc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1b4>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    1606:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
    160a:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    160c:	2b01      	cmp	r3, #1
    160e:	bf0c      	ite	eq
    1610:	239f      	moveq	r3, #159	; 0x9f
    1612:	23cf      	movne	r3, #207	; 0xcf
    1614:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    1618:	e726      	b.n	1468 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x160>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    161a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x2; // ada x12
    161e:	2502      	movs	r5, #2
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    1620:	2b01      	cmp	r3, #1
    1622:	bf0c      	ite	eq
    1624:	2310      	moveq	r3, #16
    1626:	23af      	movne	r3, #175	; 0xaf
    1628:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    162c:	e71c      	b.n	1468 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x160>
        spi->begin();
    162e:	f00e f96d 	bl	f90c <SPIClass::begin()>
  if (reset && (rstPin >= 0)) {
    1632:	2e00      	cmp	r6, #0
    1634:	d08e      	beq.n	1554 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    1636:	e6b9      	b.n	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
    1638:	60002330 	.word	0x60002330
    163c:	600024d0 	.word	0x600024d0
    1640:	600024d4 	.word	0x600024d4
    1644:	600024d8 	.word	0x600024d8
    1648:	00200080 	.word	0x00200080
    164c:	00100060 	.word	0x00100060
    1650:	600024dc 	.word	0x600024dc
    1654:	60002070 	.word	0x60002070
    1658:	20008148 	.word	0x20008148
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
    165c:	2101      	movs	r1, #1
    165e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1662:	f014 fc77 	bl	15f54 <pinMode>
      pinMode(clkPin, OUTPUT);
    1666:	2101      	movs	r1, #1
    1668:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    166c:	f014 fc72 	bl	15f54 <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    1670:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
    1674:	0119      	lsls	r1, r3, #4
    1676:	eb05 1203 	add.w	r2, r5, r3, lsl #4
    167a:	586b      	ldr	r3, [r5, r1]
      mosiPinMask = digitalPinToBitMask(mosiPin);
    167c:	68d2      	ldr	r2, [r2, #12]
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    167e:	63a3      	str	r3, [r4, #56]	; 0x38
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    1680:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      mosiPinMask = digitalPinToBitMask(mosiPin);
    1684:	64a2      	str	r2, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    1686:	011a      	lsls	r2, r3, #4
    1688:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    168c:	58aa      	ldr	r2, [r5, r2]
      clkPinMask = digitalPinToBitMask(clkPin);
    168e:	68d9      	ldr	r1, [r3, #12]
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    1690:	63e2      	str	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
    1692:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
    1694:	6813      	ldr	r3, [r2, #0]
    1696:	ea23 0301 	bic.w	r3, r3, r1
    169a:	6013      	str	r3, [r2, #0]
  if (reset && (rstPin >= 0)) {
    169c:	2e00      	cmp	r6, #0
    169e:	f43f af59 	beq.w	1554 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    16a2:	e683      	b.n	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>

000016a4 <Adafruit_SSD1306::clearDisplay()>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    16a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    16a8:	2100      	movs	r1, #0
    16aa:	1dda      	adds	r2, r3, #7
    16ac:	bf48      	it	mi
    16ae:	f103 020e 	addmi.w	r2, r3, #14
    16b2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    16b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    16b8:	10d2      	asrs	r2, r2, #3
    16ba:	fb03 f202 	mul.w	r2, r3, r2
    16be:	f01a b9bb 	b.w	1ba38 <memset>
    16c2:	bf00      	nop

000016c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>:
void Adafruit_SSD1306::display(uint8_t page, uint8_t column) {
    16c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16c8:	4604      	mov	r4, r0
  TRANSACTION_START
    16ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::display(uint8_t page, uint8_t column) {
    16cc:	b082      	sub	sp, #8
    16ce:	460f      	mov	r7, r1
    16d0:	4615      	mov	r5, r2
  TRANSACTION_START
    16d2:	2800      	cmp	r0, #0
    16d4:	d078      	beq.n	17c8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x104>
    16d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    16d8:	f00d fb0c 	bl	ecf4 <TwoWire::setClock(unsigned long)>
  dlist1[0] = SSD1306_PAGEADDR,       // (0x22, 0, 0xff)
    16dc:	2322      	movs	r3, #34	; 0x22
  uint8_t /*PROGMEM*/ dlist1[] = {
    16de:	f242 12ff 	movw	r2, #8703	; 0x21ff
  ssd1306_commandList(dlist1, sizeof(dlist1));
    16e2:	4669      	mov	r1, sp
    16e4:	4620      	mov	r0, r4
  dlist1[0] = SSD1306_PAGEADDR,       // (0x22, 0, 0xff)
    16e6:	f88d 3000 	strb.w	r3, [sp]
      SSD1306_COLUMNADDR, uint8_t(column*32/2)}; // Column start address (0x21, 0, width)
    16ea:	012b      	lsls	r3, r5, #4
  uint8_t /*PROGMEM*/ dlist1[] = {
    16ec:	f8ad 2002 	strh.w	r2, [sp, #2]
  ssd1306_commandList(dlist1, sizeof(dlist1));
    16f0:	2205      	movs	r2, #5
      SSD1306_COLUMNADDR, uint8_t(column*32/2)}; // Column start address (0x21, 0, width)
    16f2:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    16f6:	012d      	lsls	r5, r5, #4
      SSD1306_COLUMNADDR, uint8_t(column*32/2)}; // Column start address (0x21, 0, width)
    16f8:	f88d 7001 	strb.w	r7, [sp, #1]
  ssd1306_commandList(dlist1, sizeof(dlist1));
    16fc:	f7ff fd88 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(WIDTH - 1); // Column end address
    1700:	8921      	ldrh	r1, [r4, #8]
    1702:	4620      	mov	r0, r4
    1704:	3901      	subs	r1, #1
    1706:	b2c9      	uxtb	r1, r1
    1708:	f7ff fce6 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  uint16_t countFull = WIDTH * ((HEIGHT + 7) / 8);
    170c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    1710:	8926      	ldrh	r6, [r4, #8]
    1712:	1dd3      	adds	r3, r2, #7
    1714:	bf48      	it	mi
    1716:	f102 030e 	addmi.w	r3, r2, #14
    171a:	10db      	asrs	r3, r3, #3
    171c:	fb16 f603 	smulbb	r6, r6, r3
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    1720:	f3c6 038d 	ubfx	r3, r6, #2, #14
  uint16_t count = countFull / (16*2); // divide transfer into 4 pages with 1/8 of width
    1724:	f3c6 164a 	ubfx	r6, r6, #5, #11
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    1728:	fb07 5103 	mla	r1, r7, r3, r5
  if (wire) { // I2C
    172c:	e9d4 350a 	ldrd	r3, r5, [r4, #40]	; 0x28
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    1730:	440d      	add	r5, r1
  if (wire) { // I2C
    1732:	2b00      	cmp	r3, #0
    1734:	d057      	beq.n	17e6 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x122>
		txBuffer[0] = (address << 1);
    1736:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
		transmitting = 1;
    173a:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
    173c:	2140      	movs	r1, #64	; 0x40
		txBuffer[0] = (address << 1);
    173e:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    1740:	f883 7130 	strb.w	r7, [r3, #304]	; 0x130
		txBufferLength = 1;
    1744:	f883 712f 	strb.w	r7, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1748:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    174c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    174e:	6803      	ldr	r3, [r0, #0]
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	4798      	blx	r3
    while (count--) {
    1754:	b356      	cbz	r6, 17ac <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xe8>
    1756:	442e      	add	r6, r5
		return endTransmission(1);
    1758:	46b8      	mov	r8, r7
        usb.send("# UDisplay:: hit MAX\n");
    175a:	f8df a168 	ldr.w	sl, [pc, #360]	; 18c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x200>
    175e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 18c8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x204>
      WIRE_WRITE(*ptr++);
    1762:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      bytesOut++;
    1764:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
    1766:	f815 1b01 	ldrb.w	r1, [r5], #1
    176a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
    176c:	b2bf      	uxth	r7, r7
      WIRE_WRITE(*ptr++);
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	4798      	blx	r3
    while (count--) {
    1772:	42b5      	cmp	r5, r6
    1774:	d01a      	beq.n	17ac <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xe8>
      if (bytesOut >= WIRE_MAX) {
    1776:	2f88      	cmp	r7, #136	; 0x88
    1778:	d1f3      	bne.n	1762 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x9e>
    177a:	2101      	movs	r1, #1
    177c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    177e:	f00d f921 	bl	e9c4 <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    1782:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    1786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WIRE_WRITE((uint8_t)0x40);
    1788:	2140      	movs	r1, #64	; 0x40
    178a:	0052      	lsls	r2, r2, #1
        bytesOut = 1;
    178c:	2701      	movs	r7, #1
		transmitting = 1;
    178e:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    1792:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1796:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        WIRE_WRITE((uint8_t)0x40);
    179a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    179c:	6803      	ldr	r3, [r0, #0]
    179e:	681b      	ldr	r3, [r3, #0]
    17a0:	4798      	blx	r3
        usb.send("# UDisplay:: hit MAX\n");
    17a2:	4651      	mov	r1, sl
    17a4:	4648      	mov	r0, r9
    17a6:	f00a feb9 	bl	c51c <UUSB::send(char const*)>
    17aa:	e7da      	b.n	1762 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x9e>
		return endTransmission(1);
    17ac:	2101      	movs	r1, #1
    17ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    17b0:	f00d f908 	bl	e9c4 <TwoWire::endTransmission(unsigned char)>
  TRANSACTION_END
    17b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    17b6:	2800      	cmp	r0, #0
    17b8:	f000 8081 	beq.w	18be <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1fa>
    17bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    17be:	f00d fa99 	bl	ecf4 <TwoWire::setClock(unsigned long)>
}
    17c2:	b002      	add	sp, #8
    17c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TRANSACTION_START
    17c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    17ca:	b128      	cbz	r0, 17d8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x114>
    17cc:	f104 0364 	add.w	r3, r4, #100	; 0x64
    17d0:	e893 0006 	ldmia.w	r3, {r1, r2}
    17d4:	f7ff f932 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
    17d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    17da:	6d61      	ldr	r1, [r4, #84]	; 0x54
    17dc:	6813      	ldr	r3, [r2, #0]
    17de:	ea23 0301 	bic.w	r3, r3, r1
    17e2:	6013      	str	r3, [r2, #0]
    17e4:	e77a      	b.n	16dc <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x18>
    SSD1306_MODE_DATA
    17e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    17e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
    17ea:	6813      	ldr	r3, [r2, #0]
  if (spi) {
    17ec:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
    SSD1306_MODE_DATA
    17f0:	430b      	orrs	r3, r1
    17f2:	6013      	str	r3, [r2, #0]
    while (count--)
    17f4:	b17e      	cbz	r6, 1816 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x152>
    17f6:	442e      	add	r6, r5
      SPIwrite(*ptr++);
    17f8:	f815 7b01 	ldrb.w	r7, [r5], #1
  if (spi) {
    17fc:	f1b8 0f00 	cmp.w	r8, #0
    1800:	d03e      	beq.n	1880 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1bc>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1802:	f8d8 2000 	ldr.w	r2, [r8]
		port().TDR = data;
    1806:	6657      	str	r7, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1808:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    180a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    180e:	d0fb      	beq.n	1808 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x144>
    1810:	6f53      	ldr	r3, [r2, #116]	; 0x74
    while (count--)
    1812:	42b5      	cmp	r5, r6
    1814:	d1f0      	bne.n	17f8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x134>
  TRANSACTION_END
    1816:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1818:	6d61      	ldr	r1, [r4, #84]	; 0x54
    181a:	6813      	ldr	r3, [r2, #0]
    181c:	430b      	orrs	r3, r1
    181e:	6013      	str	r3, [r2, #0]
    1820:	f1b8 0f00 	cmp.w	r8, #0
    1824:	d0cd      	beq.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
		if (interruptMasksUsed) {
    1826:	f898 3013 	ldrb.w	r3, [r8, #19]
    182a:	2b00      	cmp	r3, #0
    182c:	d0c9      	beq.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    182e:	07dc      	lsls	r4, r3, #31
    1830:	d505      	bpl.n	183e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x17a>
    1832:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    1836:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    183a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    183e:	0798      	lsls	r0, r3, #30
    1840:	d505      	bpl.n	184e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x18a>
    1842:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
    1846:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    184a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    184e:	0759      	lsls	r1, r3, #29
    1850:	d505      	bpl.n	185e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x19a>
    1852:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    1856:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    185a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    185e:	071a      	lsls	r2, r3, #28
    1860:	d505      	bpl.n	186e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1aa>
    1862:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    1866:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    186a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    186e:	06db      	lsls	r3, r3, #27
    1870:	d5a7      	bpl.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
    1872:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    1876:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    187a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    187e:	e7a0      	b.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
      *clkPort |= clkPinMask;  // Clock high
    1880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1882:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1886:	f04f 0c80 	mov.w	ip, #128	; 0x80
    188a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    188c:	6810      	ldr	r0, [r2, #0]
      if (d & bit)
    188e:	ea17 0f0c 	tst.w	r7, ip
        *mosiPort |= mosiPinMask;
    1892:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1894:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        *mosiPort |= mosiPinMask;
    1898:	bf14      	ite	ne
    189a:	4301      	orrne	r1, r0
        *mosiPort &= ~mosiPinMask;
    189c:	ea20 0101 	biceq.w	r1, r0, r1
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    18a0:	f1be 0e01 	subs.w	lr, lr, #1
        *mosiPort &= ~mosiPinMask;
    18a4:	6011      	str	r1, [r2, #0]
      *clkPort |= clkPinMask;  // Clock high
    18a6:	6818      	ldr	r0, [r3, #0]
    18a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    18aa:	ea41 0100 	orr.w	r1, r1, r0
    18ae:	6019      	str	r1, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    18b0:	6818      	ldr	r0, [r3, #0]
    18b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    18b4:	ea20 0001 	bic.w	r0, r0, r1
    18b8:	6018      	str	r0, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    18ba:	d1e7      	bne.n	188c <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1c8>
    18bc:	e7a9      	b.n	1812 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x14e>
  TRANSACTION_END
    18be:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
    18c2:	e7a8      	b.n	1816 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x152>
    18c4:	20003998 	.word	0x20003998
    18c8:	2000eab8 	.word	0x2000eab8

000018cc <USubss::sendData(int)>:
   * add subscription key */
  void addPublistItem(const char * key, const char * helpLine);
  /**
   * send data now from one of the subscription items
   * single request or as subscribed */
  virtual void sendData(int item) {};
    18cc:	4770      	bx	lr
    18ce:	bf00      	nop

000018d0 <USubss::sendHelp()>:
   * @brief sendHelpLine sends help line for this key
   */
  void subscribeSendHelp();
  /**
   * send command help */
  virtual void sendHelp() {};
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop

000018d4 <USubss::decode(char const*)>:
  /**
   * send data now from one of the subscription items
   * single request or as subscribed */
  virtual bool decode(const char * buf) { return false;};
    18d4:	2000      	movs	r0, #0
    18d6:	4770      	bx	lr

000018d8 <UAd::decode(char const*)>:
}
    18d8:	2000      	movs	r0, #0
    18da:	4770      	bx	lr

000018dc <UAd::sendHelp()>:
  usb.send("# AD converter -------\r\n");
    18dc:	4901      	ldr	r1, [pc, #4]	; (18e4 <UAd::sendHelp()+0x8>)
    18de:	4802      	ldr	r0, [pc, #8]	; (18e8 <UAd::sendHelp()+0xc>)
    18e0:	f00a be1c 	b.w	c51c <UUSB::send(char const*)>
    18e4:	20003dbc 	.word	0x20003dbc
    18e8:	2000eab8 	.word	0x2000eab8

000018ec <UAd::~UAd()>:
#include <ADC.h>
#include "main.h"
// #include "ucontrol.h"
#include "usubss.h"

class UAd : public USubss
    18ec:	b510      	push	{r4, lr}
class USubss
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <UAd::~UAd()+0x18>)
    18f0:	4604      	mov	r4, r0
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
    18f2:	6840      	ldr	r0, [r0, #4]
    18f4:	6023      	str	r3, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    18f6:	b118      	cbz	r0, 1900 <UAd::~UAd()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    18f8:	68e1      	ldr	r1, [r4, #12]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
    18fa:	1a09      	subs	r1, r1, r0
    18fc:	f014 fede 	bl	166bc <operator delete(void*, unsigned int)>
    1900:	4620      	mov	r0, r4
    1902:	bd10      	pop	{r4, pc}
    1904:	2000802c 	.word	0x2000802c

00001908 <UAd::setup()>:
{ // calibrate
    1908:	b538      	push	{r3, r4, r5, lr}
    190a:	4604      	mov	r4, r0
  adc.adc0->calibrate();
    190c:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    1910:	f00c f9a2 	bl	dc58 <ADC_Module::calibrate()>
  adc.adc0->wait_for_cal();
    1914:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
  motorCurrentRawAD[0] = adc.analogRead ( PIN_LEFT_MOTOR_CURRENT );
    1918:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
  adc.adc0->wait_for_cal();
    191c:	f00c fb7c 	bl	e018 <ADC_Module::wait_for_cal()>
  adc.adc1->calibrate();
    1920:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1924:	f00c f998 	bl	dc58 <ADC_Module::calibrate()>
  adc.adc1->wait_for_cal();
    1928:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    192c:	f00c fb74 	bl	e018 <ADC_Module::wait_for_cal()>
  adc.adc0->setResolution ( useADCresolution); 
    1930:	7d21      	ldrb	r1, [r4, #20]
    1932:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    1936:	f00c fb99 	bl	e06c <ADC_Module::setResolution(unsigned char)>
  adc.adc1->setResolution ( useADCresolution);
    193a:	7d21      	ldrb	r1, [r4, #20]
    193c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1940:	f00c fb94 	bl	e06c <ADC_Module::setResolution(unsigned char)>
  adc.adc0->setReference ( ADC_REFERENCE::REF_3V3);
    1944:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    1948:	2100      	movs	r1, #0
    194a:	f00c f99f 	bl	dc8c <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)>
  adc.adc1->setReference ( ADC_REFERENCE::REF_3V3);
    194e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1952:	2100      	movs	r1, #0
    1954:	f00c f99a 	bl	dc8c <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)>
  adc.adc0->setConversionSpeed ( ADC_CONVERSION_SPEED::MED_SPEED);
    1958:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    195c:	2101      	movs	r1, #1
    195e:	f00c f9c1 	bl	dce4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc.adc1->setConversionSpeed ( ADC_CONVERSION_SPEED::MED_SPEED);
    1962:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1966:	2101      	movs	r1, #1
    1968:	f00c f9bc 	bl	dce4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  pinMode ( PIN_BATTERY_VOLTAGE, INPUT ); // battery voltage (A9)
    196c:	2100      	movs	r1, #0
    196e:	2029      	movs	r0, #41	; 0x29
    1970:	f014 faf0 	bl	15f54 <pinMode>
  pinMode ( PIN_LEFT_MOTOR_CURRENT, INPUT ); // battery voltage (A9)
    1974:	2100      	movs	r1, #0
    1976:	200e      	movs	r0, #14
    1978:	f014 faec 	bl	15f54 <pinMode>
  pinMode ( PIN_RIGHT_MOTOR_CURRENT, INPUT ); // battery voltage (A9)
    197c:	2100      	movs	r1, #0
    197e:	200f      	movs	r0, #15
    1980:	f014 fae8 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_0, INPUT ); // Line sensor sensor value
    1984:	2100      	movs	r1, #0
    1986:	2014      	movs	r0, #20
    1988:	f014 fae4 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_1, INPUT ); // Line sensor sensor value
    198c:	2100      	movs	r1, #0
    198e:	201b      	movs	r0, #27
    1990:	f014 fae0 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_2, INPUT ); // Line sensor sensor value
    1994:	2100      	movs	r1, #0
    1996:	2015      	movs	r0, #21
    1998:	f014 fadc 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_3, INPUT ); // Line sensor sensor value
    199c:	2100      	movs	r1, #0
    199e:	201a      	movs	r0, #26
    19a0:	f014 fad8 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_4, INPUT ); // Line sensor sensor value
    19a4:	2100      	movs	r1, #0
    19a6:	2016      	movs	r0, #22
    19a8:	f014 fad4 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_5, INPUT ); // Line sensor sensor value
    19ac:	2100      	movs	r1, #0
    19ae:	2019      	movs	r0, #25
    19b0:	f014 fad0 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_6, INPUT ); // Line sensor sensor value
    19b4:	2100      	movs	r1, #0
    19b6:	2017      	movs	r0, #23
    19b8:	f014 facc 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_SENSOR_7, INPUT ); // Line sensor sensor value
    19bc:	2100      	movs	r1, #0
    19be:	2018      	movs	r0, #24
    19c0:	f014 fac8 	bl	15f54 <pinMode>
  motorCurrentRawAD[0] = adc.analogRead ( PIN_LEFT_MOTOR_CURRENT );
    19c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19c8:	210e      	movs	r1, #14
    19ca:	4628      	mov	r0, r5
    19cc:	f00c f8a4 	bl	db18 <ADC::analogRead(unsigned char, signed char)>
  motorCurrentRawAD[1] = adc.analogRead ( PIN_RIGHT_MOTOR_CURRENT );
    19d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  motorCurrentRawAD[0] = adc.analogRead ( PIN_LEFT_MOTOR_CURRENT );
    19d4:	8420      	strh	r0, [r4, #32]
  motorCurrentRawAD[1] = adc.analogRead ( PIN_RIGHT_MOTOR_CURRENT );
    19d6:	210f      	movs	r1, #15
    19d8:	4628      	mov	r0, r5
    19da:	f00c f89d 	bl	db18 <ADC::analogRead(unsigned char, signed char)>
    19de:	4603      	mov	r3, r0
  batVoltRawAD = adc.analogRead ( PIN_BATTERY_VOLTAGE );
    19e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19e4:	2129      	movs	r1, #41	; 0x29
  motorCurrentRawAD[1] = adc.analogRead ( PIN_RIGHT_MOTOR_CURRENT );
    19e6:	8463      	strh	r3, [r4, #34]	; 0x22
  batVoltRawAD = adc.analogRead ( PIN_BATTERY_VOLTAGE );
    19e8:	4628      	mov	r0, r5
    19ea:	f00c f895 	bl	db18 <ADC::analogRead(unsigned char, signed char)>
    19ee:	4603      	mov	r3, r0
  adc.adc0->enableInterrupts(adc0_isr); // ( ADC_0 );
    19f0:	22ff      	movs	r2, #255	; 0xff
    19f2:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
  batVoltRawAD = adc.analogRead ( PIN_BATTERY_VOLTAGE );
    19f6:	83a3      	strh	r3, [r4, #28]
  adc.adc0->enableInterrupts(adc0_isr); // ( ADC_0 );
    19f8:	490c      	ldr	r1, [pc, #48]	; (1a2c <UAd::setup()+0x124>)
    19fa:	f00c fbf3 	bl	e1e4 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
  adc.adc1->enableInterrupts(adc1_isr); // ( ADC_1 );
    19fe:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1a02:	22ff      	movs	r2, #255	; 0xff
    1a04:	490a      	ldr	r1, [pc, #40]	; (1a30 <UAd::setup()+0x128>)
    1a06:	f00c fbed 	bl	e1e4 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
  addPublistItem("ad", "Get raw AD values (ir1, ir2, battery, m1 current, m2 current, supply current)");
    1a0a:	4620      	mov	r0, r4
    1a0c:	4a09      	ldr	r2, [pc, #36]	; (1a34 <UAd::setup()+0x12c>)
    1a0e:	490a      	ldr	r1, [pc, #40]	; (1a38 <UAd::setup()+0x130>)
    1a10:	f00a fcb6 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ls", "Get raw line sensor AD values (n1, n2, ls1 (l,h), ls2 ... ls8, ct1, ct2 (us))");
    1a14:	4620      	mov	r0, r4
    1a16:	4909      	ldr	r1, [pc, #36]	; (1a3c <UAd::setup()+0x134>)
    1a18:	4a09      	ldr	r2, [pc, #36]	; (1a40 <UAd::setup()+0x138>)
    1a1a:	f00a fcb1 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    1a1e:	4621      	mov	r1, r4
    1a20:	4808      	ldr	r0, [pc, #32]	; (1a44 <UAd::setup()+0x13c>)
}
    1a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    1a26:	f00b b9a5 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    1a2a:	bf00      	nop
    1a2c:	00001d51 	.word	0x00001d51
    1a30:	00001d5d 	.word	0x00001d5d
    1a34:	20003d18 	.word	0x20003d18
    1a38:	200089ac 	.word	0x200089ac
    1a3c:	20003db8 	.word	0x20003db8
    1a40:	20003d68 	.word	0x20003d68
    1a44:	2000eab8 	.word	0x2000eab8

00001a48 <UAd::tick()>:
{ // start AD cycle
    1a48:	b530      	push	{r4, r5, lr}
    1a4a:	4604      	mov	r4, r0
  adcSeq = 0;
    1a4c:	2500      	movs	r5, #0
  adc.startSingleRead(adcPin[0]); // + 400;
    1a4e:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    1a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{ // start AD cycle
    1a56:	b091      	sub	sp, #68	; 0x44
  adc.startSingleRead(adcPin[0]); // + 400;
    1a58:	30bc      	adds	r0, #188	; 0xbc
  adcSeq = 0;
    1a5a:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  adcHalf = false;
    1a5e:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
  adc.startSingleRead(adcPin[0]); // + 400;
    1a62:	f00c f8a7 	bl	dbb4 <ADC::startSingleRead(unsigned char, signed char)>
  adcStartTime = micros();
    1a66:	f014 fa0f 	bl	15e88 <micros>
  adcStartCnt++;
    1a6a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  if (debug1adcIntCntLast == adcInt0Cnt)
    1a6e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
  adcStartCnt++;
    1a72:	3301      	adds	r3, #1
  adcStartTime = micros();
    1a74:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
  adcStartCnt++;
    1a78:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  if (debug1adcIntCntLast == adcInt0Cnt)
    1a7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    1a7e:	4293      	cmp	r3, r2
    1a80:	d003      	beq.n	1a8a <UAd::tick()+0x42>
    adcIntErrCnt = 0;
    1a82:	6625      	str	r5, [r4, #96]	; 0x60
  debug1adcIntCntLast = adcInt0Cnt;
    1a84:	65e2      	str	r2, [r4, #92]	; 0x5c
}
    1a86:	b011      	add	sp, #68	; 0x44
    1a88:	bd30      	pop	{r4, r5, pc}
    adcIntErrCnt++;
    1a8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    1a8c:	4816      	ldr	r0, [pc, #88]	; (1ae8 <UAd::tick()+0xa0>)
    1a8e:	3301      	adds	r3, #1
    1a90:	4916      	ldr	r1, [pc, #88]	; (1aec <UAd::tick()+0xa4>)
    1a92:	fb00 1103 	mla	r1, r0, r3, r1
    if (adcIntErrCnt % 100 == 0)
    1a96:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    adcIntErrCnt++;
    1a9a:	6623      	str	r3, [r4, #96]	; 0x60
    if (adcIntErrCnt % 100 == 0)
    1a9c:	3801      	subs	r0, #1
    1a9e:	ebb0 0fb1 	cmp.w	r0, r1, ror #2
    1aa2:	d3ef      	bcc.n	1a84 <UAd::tick()+0x3c>
      snprintf(s, MSL, "# ADC seq=%d, resetcnt=%d, reset\n", adcSeq, adcResetCnt);
    1aa4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    1aa6:	a802      	add	r0, sp, #8
    1aa8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1aac:	4a10      	ldr	r2, [pc, #64]	; (1af0 <UAd::tick()+0xa8>)
    1aae:	9100      	str	r1, [sp, #0]
    1ab0:	2136      	movs	r1, #54	; 0x36
    1ab2:	f019 fdef 	bl	1b694 <snprintf>
      usb.send(s);
    1ab6:	a902      	add	r1, sp, #8
    1ab8:	480e      	ldr	r0, [pc, #56]	; (1af4 <UAd::tick()+0xac>)
    1aba:	f00a fd2f 	bl	c51c <UUSB::send(char const*)>
      adc.adc0->enableInterrupts(adc0_isr); // ( ADC_0 );
    1abe:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    1ac2:	22ff      	movs	r2, #255	; 0xff
    1ac4:	490c      	ldr	r1, [pc, #48]	; (1af8 <UAd::tick()+0xb0>)
    1ac6:	f00c fb8d 	bl	e1e4 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
      adc.adc1->enableInterrupts(adc1_isr); // ( ADC_1 );
    1aca:	22ff      	movs	r2, #255	; 0xff
    1acc:	490b      	ldr	r1, [pc, #44]	; (1afc <UAd::tick()+0xb4>)
    1ace:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1ad2:	f00c fb87 	bl	e1e4 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
      adcResetCnt++;
    1ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  debug1adcIntCntLast = adcInt0Cnt;
    1ad8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
      adcResetCnt++;
    1adc:	3301      	adds	r3, #1
  debug1adcIntCntLast = adcInt0Cnt;
    1ade:	65e2      	str	r2, [r4, #92]	; 0x5c
      adcResetCnt++;
    1ae0:	65a3      	str	r3, [r4, #88]	; 0x58
}
    1ae2:	b011      	add	sp, #68	; 0x44
    1ae4:	bd30      	pop	{r4, r5, pc}
    1ae6:	bf00      	nop
    1ae8:	c28f5c29 	.word	0xc28f5c29
    1aec:	051eb850 	.word	0x051eb850
    1af0:	20003cf4 	.word	0x20003cf4
    1af4:	2000eab8 	.word	0x2000eab8
    1af8:	00001d51 	.word	0x00001d51
    1afc:	00001d5d 	.word	0x00001d5d

00001b00 <UAd::tickHalfTime()>:
  if ( adcSeq >= ADC_NUM_ALL )
    1b00:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    1b04:	2b0d      	cmp	r3, #13
{ // NB! called by timer interrupt
    1b06:	b510      	push	{r4, lr}
    1b08:	4604      	mov	r4, r0
  if ( adcSeq >= ADC_NUM_ALL )
    1b0a:	dc05      	bgt.n	1b18 <UAd::tickHalfTime()+0x18>
    adcHalfFailCnt++;
    1b0c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    1b10:	3301      	adds	r3, #1
    1b12:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
}
    1b16:	bd10      	pop	{r4, pc}
    adcHalfStartTime = micros();
    1b18:	f014 f9b6 	bl	15e88 <micros>
    adcSeq = 0;
    1b1c:	2300      	movs	r3, #0
    adc.startSingleRead ( adcPin[0] );
    1b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    adcHalfStartTime = micros();
    1b22:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
    adcSeq = 0;
    1b26:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    adc.startSingleRead ( adcPin[0] );
    1b2a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    1b2e:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    1b32:	f00c f83f 	bl	dbb4 <ADC::startSingleRead(unsigned char, signed char)>
    adcHalfCnt++;
    1b36:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    adcHalf = true;
    1b3a:	2201      	movs	r2, #1
    adcHalfCnt++;
    1b3c:	4413      	add	r3, r2
    adcHalf = true;
    1b3e:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    adcHalfCnt++;
    1b42:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
}
    1b46:	bd10      	pop	{r4, pc}

00001b48 <UAd::sendStatusLSRaw()>:

void UAd::sendStatusLSRaw()
{
    1b48:	4603      	mov	r3, r0
  const int MRL = 250;
  char reply[MRL];
  //                       #1 #2   LS0    LS1    LS2    LS3    LS4    LS5    LS6    LS7    timing (us)
  snprintf(reply, MRL, "ls %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %lu %lu %d\r\n",
    1b4a:	4a24      	ldr	r2, [pc, #144]	; (1bdc <UAd::sendStatusLSRaw()+0x94>)
    1b4c:	21fa      	movs	r1, #250	; 0xfa
{
    1b4e:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "ls %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %lu %lu %d\r\n",
    1b50:	f8b3 4048 	ldrh.w	r4, [r3, #72]	; 0x48
{
    1b54:	b0d4      	sub	sp, #336	; 0x150
  snprintf(reply, MRL, "ls %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %lu %lu %d\r\n",
    1b56:	9413      	str	r4, [sp, #76]	; 0x4c
    1b58:	a815      	add	r0, sp, #84	; 0x54
    1b5a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
    1b5c:	9412      	str	r4, [sp, #72]	; 0x48
    1b5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    1b60:	9411      	str	r4, [sp, #68]	; 0x44
    1b62:	f9b3 4032 	ldrsh.w	r4, [r3, #50]	; 0x32
    1b66:	9410      	str	r4, [sp, #64]	; 0x40
    1b68:	f9b3 4042 	ldrsh.w	r4, [r3, #66]	; 0x42
    1b6c:	940f      	str	r4, [sp, #60]	; 0x3c
    1b6e:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
    1b72:	940e      	str	r4, [sp, #56]	; 0x38
    1b74:	f9b3 4040 	ldrsh.w	r4, [r3, #64]	; 0x40
    1b78:	940d      	str	r4, [sp, #52]	; 0x34
    1b7a:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
    1b7e:	940c      	str	r4, [sp, #48]	; 0x30
    1b80:	f9b3 403e 	ldrsh.w	r4, [r3, #62]	; 0x3e
    1b84:	940b      	str	r4, [sp, #44]	; 0x2c
    1b86:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
    1b8a:	940a      	str	r4, [sp, #40]	; 0x28
    1b8c:	f9b3 403c 	ldrsh.w	r4, [r3, #60]	; 0x3c
    1b90:	9409      	str	r4, [sp, #36]	; 0x24
    1b92:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
    1b96:	9408      	str	r4, [sp, #32]
    1b98:	f9b3 403a 	ldrsh.w	r4, [r3, #58]	; 0x3a
    1b9c:	9407      	str	r4, [sp, #28]
    1b9e:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
    1ba2:	9406      	str	r4, [sp, #24]
    1ba4:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
    1ba8:	9405      	str	r4, [sp, #20]
    1baa:	f9b3 4026 	ldrsh.w	r4, [r3, #38]	; 0x26
    1bae:	9404      	str	r4, [sp, #16]
    1bb0:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
    1bb4:	9403      	str	r4, [sp, #12]
    1bb6:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
    1bba:	9402      	str	r4, [sp, #8]
    1bbc:	f9b3 4034 	ldrsh.w	r4, [r3, #52]	; 0x34
    1bc0:	9401      	str	r4, [sp, #4]
    1bc2:	f8b3 4046 	ldrh.w	r4, [r3, #70]	; 0x46
    1bc6:	9400      	str	r4, [sp, #0]
    1bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    1bcc:	f019 fd62 	bl	1b694 <snprintf>
           adcStartCnt, adcHalfCnt, 
           adcLSH[0], adcLSL[0], adcLSH[1], adcLSL[1], adcLSH[2], adcLSL[2], adcLSH[3], adcLSL[3], 
           adcLSH[4], adcLSL[4], adcLSH[5], adcLSL[5], adcLSH[6], adcLSL[6], adcLSH[7], adcLSL[7], 
           adcConvertTime, adcHalfConvertTime, adcHalfFailCnt);
  usb.send(reply);
    1bd0:	a915      	add	r1, sp, #84	; 0x54
    1bd2:	4803      	ldr	r0, [pc, #12]	; (1be0 <UAd::sendStatusLSRaw()+0x98>)
    1bd4:	f00a fca2 	bl	c51c <UUSB::send(char const*)>
}
    1bd8:	b054      	add	sp, #336	; 0x150
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	20003ca4 	.word	0x20003ca4
    1be0:	2000eab8 	.word	0x2000eab8

00001be4 <UAd::sendData(int)>:
  if (item == 0)
    1be4:	b111      	cbz	r1, 1bec <UAd::sendData(int)+0x8>
  else if (item == 1)
    1be6:	2901      	cmp	r1, #1
    1be8:	d01a      	beq.n	1c20 <UAd::sendData(int)+0x3c>
    1bea:	4770      	bx	lr
{
    1bec:	b500      	push	{lr}
  snprintf(s, MSL, "ad %d %d %d %d %d %d\n",
    1bee:	8bc1      	ldrh	r1, [r0, #30]
{
    1bf0:	b0a1      	sub	sp, #132	; 0x84
  snprintf(s, MSL, "ad %d %d %d %d %d %d\n",
    1bf2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
    1bf4:	4603      	mov	r3, r0
    1bf6:	8c00      	ldrh	r0, [r0, #32]
    1bf8:	e9cd 2103 	strd	r2, r1, [sp, #12]
    1bfc:	8b9a      	ldrh	r2, [r3, #28]
    1bfe:	8b59      	ldrh	r1, [r3, #26]
    1c00:	8b1b      	ldrh	r3, [r3, #24]
    1c02:	9100      	str	r1, [sp, #0]
    1c04:	2164      	movs	r1, #100	; 0x64
    1c06:	e9cd 2001 	strd	r2, r0, [sp, #4]
    1c0a:	4a06      	ldr	r2, [pc, #24]	; (1c24 <UAd::sendData(int)+0x40>)
    1c0c:	a807      	add	r0, sp, #28
    1c0e:	f019 fd41 	bl	1b694 <snprintf>
  usb.send(s);
    1c12:	a907      	add	r1, sp, #28
    1c14:	4804      	ldr	r0, [pc, #16]	; (1c28 <UAd::sendData(int)+0x44>)
    1c16:	f00a fc81 	bl	c51c <UUSB::send(char const*)>
}
    1c1a:	b021      	add	sp, #132	; 0x84
    1c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    sendStatusLSRaw();
    1c20:	f7ff bf92 	b.w	1b48 <UAd::sendStatusLSRaw()>
    1c24:	20003dd8 	.word	0x20003dd8
    1c28:	2000eab8 	.word	0x2000eab8

00001c2c <UAd::adInterrupt(int)>:
{
  // eeConfig.pushWord(deviceID);
}

void UAd::adInterrupt(int a)
{
    1c2c:	b538      	push	{r3, r4, r5, lr}
    1c2e:	4604      	mov	r4, r0
  uint16_t v;
  if (a == 0)
  {
    v = adc.readSingle ( ADC_0 );
    1c30:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
  if (a == 0)
    1c34:	bb19      	cbnz	r1, 1c7e <UAd::adInterrupt(int)+0x52>
    v = adc.readSingle ( ADC_0 );
    1c36:	4628      	mov	r0, r5
    1c38:	f00c f806 	bl	dc48 <ADC::readSingle(signed char)>
    adcInt0Cnt++;
    1c3c:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    v = adc.readSingle ( ADC_0 );
    1c40:	b280      	uxth	r0, r0
    adcInt0Cnt++;
    1c42:	3301      	adds	r3, #1
    1c44:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    nv[adcSeq] = v;
  }
  // debug end
  //uint8_t pin = ADC::sc1a2channelADC0[ADC0_SC1A&ADC_SC1A_CHANNELS];   // <- For ADC Debug
  //Serial.printf("ADC0 %d pin %d\n\r", v, pin);                        // <- For ADC Debug
  if ( adcSeq < ADC_NUM_IR_SENSORS )
    1c48:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1c4c:	2b01      	cmp	r3, #1
    1c4e:	dd24      	ble.n	1c9a <UAd::adInterrupt(int)+0x6e>
  {
    *adcDest[adcSeq] = v;
  }
  else if ( adcSeq < ADC_NUM_NO_LS )
    1c50:	2b05      	cmp	r3, #5
    1c52:	dc27      	bgt.n	1ca4 <UAd::adInterrupt(int)+0x78>
  { // low-pass filter battery and current sensor values at about 2ms time constant
    // result is in range 0..8196 (for measured between 0v and 1.2V or 3.3V for T4.1)
    *adcDest[adcSeq] = ( ( *adcDest[adcSeq] ) >> 1 ) + v;
    1c54:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    1c58:	6e51      	ldr	r1, [r2, #100]	; 0x64
    1c5a:	880a      	ldrh	r2, [r1, #0]
    1c5c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    1c60:	800a      	strh	r2, [r1, #0]
  }
  else
  {
    adcLSL[adcSeq - ADC_NUM_NO_LS] = v;
  }
  adcSeq++;
    1c62:	3301      	adds	r3, #1
    1c64:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
  {
    adc.startSingleRead ( adcPin[adcSeq] );
    1c68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1c6c:	4628      	mov	r0, r5
    1c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1c72:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
               adcHalfConvertTime,
               micros(), adcHalfFailCnt);
      usb.send(s);
    }
  }
}
    1c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    adc.startSingleRead ( adcPin[adcSeq] );
    1c7a:	f00b bf9b 	b.w	dbb4 <ADC::startSingleRead(unsigned char, signed char)>
    v = adc.readSingle ( ADC_1 );
    1c7e:	2101      	movs	r1, #1
    1c80:	4628      	mov	r0, r5
    1c82:	f00b ffe1 	bl	dc48 <ADC::readSingle(signed char)>
    adcInt1Cnt++;
    1c86:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    v = adc.readSingle ( ADC_1 );
    1c8a:	b280      	uxth	r0, r0
    adcInt1Cnt++;
    1c8c:	3301      	adds	r3, #1
    1c8e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
  if ( adcSeq < ADC_NUM_IR_SENSORS )
    1c92:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1c96:	2b01      	cmp	r3, #1
    1c98:	dcda      	bgt.n	1c50 <UAd::adInterrupt(int)+0x24>
    *adcDest[adcSeq] = v;
    1c9a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    1c9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    1ca0:	8010      	strh	r0, [r2, #0]
    1ca2:	e7de      	b.n	1c62 <UAd::adInterrupt(int)+0x36>
  else if ( adcHalf )
    1ca4:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
    1ca8:	b302      	cbz	r2, 1cec <UAd::adInterrupt(int)+0xc0>
    adcLSH[adcSeq - ADC_NUM_NO_LS] = v;
    1caa:	eb04 0243 	add.w	r2, r4, r3, lsl #1
  adcSeq++;
    1cae:	3301      	adds	r3, #1
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cb0:	2b0d      	cmp	r3, #13
    adcLSH[adcSeq - ADC_NUM_NO_LS] = v;
    1cb2:	8510      	strh	r0, [r2, #40]	; 0x28
  adcSeq++;
    1cb4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cb8:	ddd6      	ble.n	1c68 <UAd::adInterrupt(int)+0x3c>
      adcHalfConvertTime = micros() - adcHalfStartTime;
    1cba:	f014 f8e5 	bl	15e88 <micros>
      digitalWriteFast ( ls.highPowerPin, ls.lineSensorOn );
    1cbe:	4b21      	ldr	r3, [pc, #132]	; (1d44 <UAd::adInterrupt(int)+0x118>)
      adcHalfConvertTime = micros() - adcHalfStartTime;
    1cc0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1cc4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    1cc8:	1a40      	subs	r0, r0, r1
      digitalWriteFast ( ls.highPowerPin, ls.lineSensorOn );
    1cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
      adcHalfConvertTime = micros() - adcHalfStartTime;
    1cce:	6520      	str	r0, [r4, #80]	; 0x50
    1cd0:	b352      	cbz	r2, 1d28 <UAd::adInterrupt(int)+0xfc>
    1cd2:	4a1d      	ldr	r2, [pc, #116]	; (1d48 <UAd::adInterrupt(int)+0x11c>)
    1cd4:	011c      	lsls	r4, r3, #4
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
    1cd6:	491d      	ldr	r1, [pc, #116]	; (1d4c <UAd::adInterrupt(int)+0x120>)
    1cd8:	2080      	movs	r0, #128	; 0x80
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1cda:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1cde:	5912      	ldr	r2, [r2, r4]
    1ce0:	68db      	ldr	r3, [r3, #12]
    1ce2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
    1ce6:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
}
    1cea:	bd38      	pop	{r3, r4, r5, pc}
    adcLSL[adcSeq - ADC_NUM_NO_LS] = v;
    1cec:	eb04 0243 	add.w	r2, r4, r3, lsl #1
  adcSeq++;
    1cf0:	3301      	adds	r3, #1
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cf2:	2b0d      	cmp	r3, #13
    adcLSL[adcSeq - ADC_NUM_NO_LS] = v;
    1cf4:	8310      	strh	r0, [r2, #24]
  adcSeq++;
    1cf6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cfa:	ddb5      	ble.n	1c68 <UAd::adInterrupt(int)+0x3c>
      adcConvertTime = micros() - adcStartTime;
    1cfc:	f014 f8c4 	bl	15e88 <micros>
    1d00:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
      digitalWriteFast ( ls.highPowerPin, LOW );
    1d04:	4b0f      	ldr	r3, [pc, #60]	; (1d44 <UAd::adInterrupt(int)+0x118>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d06:	4a10      	ldr	r2, [pc, #64]	; (1d48 <UAd::adInterrupt(int)+0x11c>)
      adcConvertTime = micros() - adcStartTime;
    1d08:	1a40      	subs	r0, r0, r1
    1d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    1d0e:	64e0      	str	r0, [r4, #76]	; 0x4c
    1d10:	0118      	lsls	r0, r3, #4
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d12:	490e      	ldr	r1, [pc, #56]	; (1d4c <UAd::adInterrupt(int)+0x120>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d14:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1d18:	5810      	ldr	r0, [r2, r0]
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d1a:	2280      	movs	r2, #128	; 0x80
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d1c:	68db      	ldr	r3, [r3, #12]
    1d1e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
}
    1d26:	bd38      	pop	{r3, r4, r5, pc}
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d28:	4a07      	ldr	r2, [pc, #28]	; (1d48 <UAd::adInterrupt(int)+0x11c>)
    1d2a:	011c      	lsls	r4, r3, #4
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d2c:	4907      	ldr	r1, [pc, #28]	; (1d4c <UAd::adInterrupt(int)+0x120>)
    1d2e:	2080      	movs	r0, #128	; 0x80
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d30:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1d34:	5912      	ldr	r2, [r2, r4]
    1d36:	68db      	ldr	r3, [r3, #12]
    1d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d3c:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
    1d40:	bd38      	pop	{r3, r4, r5, pc}
    1d42:	bf00      	nop
    1d44:	2000e384 	.word	0x2000e384
    1d48:	20008148 	.word	0x20008148
    1d4c:	4200c000 	.word	0x4200c000

00001d50 <adc0_isr()>:

// If you enable interrupts make sure to call readSingle() to clear the interrupt.
void adc0_isr()
{
  ad.adInterrupt(0);
    1d50:	2100      	movs	r1, #0
    1d52:	4801      	ldr	r0, [pc, #4]	; (1d58 <adc0_isr()+0x8>)
    1d54:	f7ff bf6a 	b.w	1c2c <UAd::adInterrupt(int)>
    1d58:	2000d89c 	.word	0x2000d89c

00001d5c <adc1_isr()>:

//////////////////////////////////////////////////////////

void adc1_isr()
{
  ad.adInterrupt(1);
    1d5c:	2101      	movs	r1, #1
    1d5e:	4801      	ldr	r0, [pc, #4]	; (1d64 <adc1_isr()+0x8>)
    1d60:	f7ff bf64 	b.w	1c2c <UAd::adInterrupt(int)>
    1d64:	2000d89c 	.word	0x2000d89c

00001d68 <_GLOBAL__sub_I_ad>:
}
    1d68:	b538      	push	{r3, r4, r5, lr}
    1d6a:	4c1f      	ldr	r4, [pc, #124]	; (1de8 <_GLOBAL__sub_I_ad+0x80>)
    1d6c:	4d1f      	ldr	r5, [pc, #124]	; (1dec <_GLOBAL__sub_I_ad+0x84>)
    1d6e:	4620      	mov	r0, r4
    1d70:	f00a f9e2 	bl	c138 <USubss::USubss()>
    1d74:	4a1e      	ldr	r2, [pc, #120]	; (1df0 <_GLOBAL__sub_I_ad+0x88>)
    1d76:	2300      	movs	r3, #0
    1d78:	f104 0c7c 	add.w	ip, r4, #124	; 0x7c
    1d7c:	6022      	str	r2, [r4, #0]
    1d7e:	220c      	movs	r2, #12
    1d80:	6463      	str	r3, [r4, #68]	; 0x44
    1d82:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    1d86:	6563      	str	r3, [r4, #84]	; 0x54
    1d88:	65e3      	str	r3, [r4, #92]	; 0x5c
    1d8a:	6162      	str	r2, [r4, #20]
    1d8c:	2201      	movs	r2, #1
    1d8e:	6623      	str	r3, [r4, #96]	; 0x60
    1d90:	f104 0318 	add.w	r3, r4, #24
    1d94:	65a2      	str	r2, [r4, #88]	; 0x58
    1d96:	f104 021a 	add.w	r2, r4, #26
    1d9a:	6663      	str	r3, [r4, #100]	; 0x64
    1d9c:	f104 031c 	add.w	r3, r4, #28
    1da0:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
    1da4:	f104 0220 	add.w	r2, r4, #32
    1da8:	f104 0322 	add.w	r3, r4, #34	; 0x22
    1dac:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
    1db0:	f104 031e 	add.w	r3, r4, #30
    1db4:	67a3      	str	r3, [r4, #120]	; 0x78
    1db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1db8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1dbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1dc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1dc8:	e895 0003 	ldmia.w	r5, {r0, r1}
    1dcc:	e88c 0003 	stmia.w	ip, {r0, r1}
    1dd0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    1dd4:	f00b fe80 	bl	dad8 <ADC::ADC()>
UAd ad;
    1dd8:	4620      	mov	r0, r4
    1dda:	4a06      	ldr	r2, [pc, #24]	; (1df4 <_GLOBAL__sub_I_ad+0x8c>)
    1ddc:	4906      	ldr	r1, [pc, #24]	; (1df8 <_GLOBAL__sub_I_ad+0x90>)
}
    1dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
UAd ad;
    1de2:	f017 b889 	b.w	18ef8 <__aeabi_atexit>
    1de6:	bf00      	nop
    1de8:	2000d89c 	.word	0x2000d89c
    1dec:	20001df0 	.word	0x20001df0
    1df0:	20007f70 	.word	0x20007f70
    1df4:	20008f08 	.word	0x20008f08
    1df8:	000018ed 	.word	0x000018ed

00001dfc <UAsEnc::sendHelp()>:
{
    1dfc:	b530      	push	{r4, r5, lr}
  usb.send("# AS5x47 encoder -------\r\n");
    1dfe:	4c0f      	ldr	r4, [pc, #60]	; (1e3c <UAsEnc::sendHelp()+0x40>)
{
    1e00:	b0cf      	sub	sp, #316	; 0x13c
    1e02:	4605      	mov	r5, r0
  usb.send("# AS5x47 encoder -------\r\n");
    1e04:	490e      	ldr	r1, [pc, #56]	; (1e40 <UAsEnc::sendHelp()+0x44>)
    1e06:	4620      	mov	r0, r4
    1e08:	f00a fb88 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tasi N \tInitialize SPI channel N [0..2]\r\n");
    1e0c:	490d      	ldr	r1, [pc, #52]	; (1e44 <UAsEnc::sendHelp()+0x48>)
    1e0e:	4620      	mov	r0, r4
    1e10:	f00a fb84 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tencof o1 o2 o3 \tSet encoder offset\r\n (is=%d, %d, %d)\r\n",
    1e14:	2100      	movs	r1, #0
    1e16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e18:	a803      	add	r0, sp, #12
    1e1a:	4a0b      	ldr	r2, [pc, #44]	; (1e48 <UAsEnc::sendHelp()+0x4c>)
    1e1c:	e9cd 1100 	strd	r1, r1, [sp]
    1e20:	f44f 7196 	mov.w	r1, #300	; 0x12c
    1e24:	f019 fc36 	bl	1b694 <snprintf>
  usb.send(reply);
    1e28:	a903      	add	r1, sp, #12
    1e2a:	4620      	mov	r0, r4
    1e2c:	f00a fb76 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tas16 e i R \tGet register R value from interface i, disable if e=0 (use as16i to see)\r\n");
    1e30:	4906      	ldr	r1, [pc, #24]	; (1e4c <UAsEnc::sendHelp()+0x50>)
    1e32:	4620      	mov	r0, r4
    1e34:	f00a fb72 	bl	c51c <UUSB::send(char const*)>
}
    1e38:	b04f      	add	sp, #316	; 0x13c
    1e3a:	bd30      	pop	{r4, r5, pc}
    1e3c:	2000eab8 	.word	0x2000eab8
    1e40:	200052cc 	.word	0x200052cc
    1e44:	200052e8 	.word	0x200052e8
    1e48:	20005318 	.word	0x20005318
    1e4c:	20005358 	.word	0x20005358

00001e50 <UAsEnc::~UAsEnc()>:
#include "AS5X47.h"
#include "main.h"

class ULog;

class UAsEnc : public USubss
    1e50:	b510      	push	{r4, lr}
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <UAsEnc::~UAsEnc()+0x18>)
    1e54:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    1e56:	6840      	ldr	r0, [r0, #4]
    1e58:	6023      	str	r3, [r4, #0]
	if (__p)
    1e5a:	b118      	cbz	r0, 1e64 <UAsEnc::~UAsEnc()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1e5c:	68e1      	ldr	r1, [r4, #12]
    1e5e:	1a09      	subs	r1, r1, r0
    1e60:	f014 fc2c 	bl	166bc <operator delete(void*, unsigned int)>
    1e64:	4620      	mov	r0, r4
    1e66:	bd10      	pop	{r4, pc}
    1e68:	2000802c 	.word	0x2000802c

00001e6c <UAsEnc::decode(char const*)>:
{
    1e6c:	b530      	push	{r4, r5, lr}
    1e6e:	460c      	mov	r4, r1
    1e70:	b09d      	sub	sp, #116	; 0x74
    1e72:	4605      	mov	r5, r0
  if (strncmp(cmd, "aseof ", 6) == 0)
    1e74:	2206      	movs	r2, #6
    1e76:	4932      	ldr	r1, [pc, #200]	; (1f40 <UAsEnc::decode(char const*)+0xd4>)
    1e78:	4620      	mov	r0, r4
    1e7a:	f019 fec3 	bl	1bc04 <strncmp>
    1e7e:	b1e0      	cbz	r0, 1eba <UAsEnc::decode(char const*)+0x4e>
  else if (strncmp(cmd, "asi ", 4) == 0)
    1e80:	2204      	movs	r2, #4
    1e82:	4930      	ldr	r1, [pc, #192]	; (1f44 <UAsEnc::decode(char const*)+0xd8>)
    1e84:	4620      	mov	r0, r4
    1e86:	f019 febd 	bl	1bc04 <strncmp>
    1e8a:	b140      	cbz	r0, 1e9e <UAsEnc::decode(char const*)+0x32>
  else if (strncmp(cmd, "as16 ", 5) == 0)
    1e8c:	2205      	movs	r2, #5
    1e8e:	492e      	ldr	r1, [pc, #184]	; (1f48 <UAsEnc::decode(char const*)+0xdc>)
    1e90:	4620      	mov	r0, r4
    1e92:	f019 feb7 	bl	1bc04 <strncmp>
    1e96:	b300      	cbz	r0, 1eda <UAsEnc::decode(char const*)+0x6e>
    found = false;
    1e98:	2000      	movs	r0, #0
}
    1e9a:	b01d      	add	sp, #116	; 0x74
    1e9c:	bd30      	pop	{r4, r5, pc}
    const char * p1 = &cmd[4];
    1e9e:	1d20      	adds	r0, r4, #4
    unsigned int i = strtol(p1, (char**)&p1, 10);
    1ea0:	220a      	movs	r2, #10
    1ea2:	a903      	add	r1, sp, #12
    const char * p1 = &cmd[4];
    1ea4:	9003      	str	r0, [sp, #12]
    unsigned int i = strtol(p1, (char**)&p1, 10);
    1ea6:	f019 fa05 	bl	1b2b4 <strtol>
    if (i < AS_CNT)
    1eaa:	b190      	cbz	r0, 1ed2 <UAsEnc::decode(char const*)+0x66>
      usb.send("# not a valid device\n");
    1eac:	4927      	ldr	r1, [pc, #156]	; (1f4c <UAsEnc::decode(char const*)+0xe0>)
    1eae:	4828      	ldr	r0, [pc, #160]	; (1f50 <UAsEnc::decode(char const*)+0xe4>)
    1eb0:	f00a fb34 	bl	c51c <UUSB::send(char const*)>
  bool found = true;
    1eb4:	2001      	movs	r0, #1
}
    1eb6:	b01d      	add	sp, #116	; 0x74
    1eb8:	bd30      	pop	{r4, r5, pc}
    const char * p1 = &cmd[6];
    1eba:	1da0      	adds	r0, r4, #6
      encOffset[i] = strtof(p1, (char**)&p1);
    1ebc:	a903      	add	r1, sp, #12
    const char * p1 = &cmd[6];
    1ebe:	9003      	str	r0, [sp, #12]
      encOffset[i] = strtof(p1, (char**)&p1);
    1ec0:	f019 f8f4 	bl	1b0ac <strtof>
    1ec4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  bool found = true;
    1ec8:	2001      	movs	r0, #1
      encOffset[i] = strtof(p1, (char**)&p1);
    1eca:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
    1ece:	b01d      	add	sp, #116	; 0x74
    1ed0:	bd30      	pop	{r4, r5, pc}
      encs[i]->printDebugString();
    1ed2:	6a28      	ldr	r0, [r5, #32]
    1ed4:	f7fe fc8e 	bl	7f4 <AS5X47::printDebugString()>
    1ed8:	e7ec      	b.n	1eb4 <UAsEnc::decode(char const*)+0x48>
    const char * p1 = &cmd[5];
    1eda:	1d60      	adds	r0, r4, #5
    reg16Enabled = strtol(p1, (char**)&p1, 10);
    1edc:	a902      	add	r1, sp, #8
    1ede:	220a      	movs	r2, #10
    const char * p1 = &cmd[5];
    1ee0:	9002      	str	r0, [sp, #8]
    reg16Enabled = strtol(p1, (char**)&p1, 10);
    1ee2:	f019 f9e7 	bl	1b2b4 <strtol>
    1ee6:	3800      	subs	r0, #0
    reg16Interface = strtol(p1, (char**)&p1, 10);
    1ee8:	a902      	add	r1, sp, #8
    1eea:	f04f 020a 	mov.w	r2, #10
    reg16Enabled = strtol(p1, (char**)&p1, 10);
    1eee:	bf18      	it	ne
    1ef0:	2001      	movne	r0, #1
    1ef2:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    reg16Interface = strtol(p1, (char**)&p1, 10);
    1ef6:	9802      	ldr	r0, [sp, #8]
    1ef8:	f019 f9dc 	bl	1b2b4 <strtol>
    1efc:	4603      	mov	r3, r0
    reg16 = strtol(p1, (char**)&p1, 16);
    1efe:	a902      	add	r1, sp, #8
    1f00:	2210      	movs	r2, #16
    reg16Interface = strtol(p1, (char**)&p1, 10);
    1f02:	636b      	str	r3, [r5, #52]	; 0x34
    reg16 = strtol(p1, (char**)&p1, 16);
    1f04:	9802      	ldr	r0, [sp, #8]
    1f06:	f019 f9d5 	bl	1b2b4 <strtol>
    snprintf(s, MSL, "# reg16 interface %d reg %x\r\n", reg16Interface, reg16);
    1f0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    1f0c:	b281      	uxth	r1, r0
    1f0e:	4a11      	ldr	r2, [pc, #68]	; (1f54 <UAsEnc::decode(char const*)+0xe8>)
    1f10:	9100      	str	r1, [sp, #0]
    1f12:	2164      	movs	r1, #100	; 0x64
    reg16 = strtol(p1, (char**)&p1, 16);
    1f14:	85a8      	strh	r0, [r5, #44]	; 0x2c
    snprintf(s, MSL, "# reg16 interface %d reg %x\r\n", reg16Interface, reg16);
    1f16:	a803      	add	r0, sp, #12
    1f18:	f019 fbbc 	bl	1b694 <snprintf>
    usb.send(s);
    1f1c:	a903      	add	r1, sp, #12
    1f1e:	480c      	ldr	r0, [pc, #48]	; (1f50 <UAsEnc::decode(char const*)+0xe4>)
    1f20:	f00a fafc 	bl	c51c <UUSB::send(char const*)>
    snprintf(s, MSL, "# pack test 0x4007 should be = %x\r\n", aa.raw);
    1f24:	f244 0307 	movw	r3, #16391	; 0x4007
    1f28:	4a0b      	ldr	r2, [pc, #44]	; (1f58 <UAsEnc::decode(char const*)+0xec>)
    1f2a:	2164      	movs	r1, #100	; 0x64
    1f2c:	a803      	add	r0, sp, #12
    1f2e:	f019 fbb1 	bl	1b694 <snprintf>
    usb.send(s);
    1f32:	a903      	add	r1, sp, #12
    1f34:	4806      	ldr	r0, [pc, #24]	; (1f50 <UAsEnc::decode(char const*)+0xe4>)
    1f36:	f00a faf1 	bl	c51c <UUSB::send(char const*)>
  bool found = true;
    1f3a:	2001      	movs	r0, #1
}
    1f3c:	b01d      	add	sp, #116	; 0x74
    1f3e:	bd30      	pop	{r4, r5, pc}
    1f40:	2000519c 	.word	0x2000519c
    1f44:	200051a4 	.word	0x200051a4
    1f48:	200051c4 	.word	0x200051c4
    1f4c:	200051ac 	.word	0x200051ac
    1f50:	2000eab8 	.word	0x2000eab8
    1f54:	200051cc 	.word	0x200051cc
    1f58:	200051ec 	.word	0x200051ec

00001f5c <UAsEnc::sendData(int)>:
{
    1f5c:	b510      	push	{r4, lr}
    1f5e:	4604      	mov	r4, r0
    1f60:	b0c6      	sub	sp, #280	; 0x118
    1f62:	2905      	cmp	r1, #5
    1f64:	d81c      	bhi.n	1fa0 <UAsEnc::sendData(int)+0x44>
    1f66:	e8df f001 	tbb	[pc, r1]
    1f6a:	4939      	.short	0x4939
    1f6c:	1d5b4e03 	.word	0x1d5b4e03
  snprintf(reply, MRL, "asenp %.2f %.2f %.2f\r\n",
    1f70:	ed90 7a05 	vldr	s14, [r0, #20]
    1f74:	2200      	movs	r2, #0
    1f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f7a:	2000      	movs	r0, #0
    1f7c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1f80:	492f      	ldr	r1, [pc, #188]	; (2040 <UAsEnc::sendData(int)+0xe4>)
    1f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f86:	4a2f      	ldr	r2, [pc, #188]	; (2044 <UAsEnc::sendData(int)+0xe8>)
  snprintf(reply, MRL, "asenv %.1f %.1f %.1f\r\n",
    1f88:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1f8c:	ed8d 7b00 	vstr	d7, [sp]
    1f90:	21fa      	movs	r1, #250	; 0xfa
    1f92:	a807      	add	r0, sp, #28
    1f94:	f019 fb7e 	bl	1b694 <snprintf>
  usb.send(reply);
    1f98:	a907      	add	r1, sp, #28
    1f9a:	482b      	ldr	r0, [pc, #172]	; (2048 <UAsEnc::sendData(int)+0xec>)
    1f9c:	f00a fabe 	bl	c51c <UUSB::send(char const*)>
}
    1fa0:	b046      	add	sp, #280	; 0x118
    1fa2:	bd10      	pop	{r4, pc}
           reg16Interface, reg16, reg16Raw.values.pard, reg16Raw.values.ef, reg16Raw.values.data);
    1fa4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    1fa8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
  snprintf(reply, MRL, "# AS5147U: interface %d, reg  %x = warn=%d, err=%d, data= 0x%04x\r\n",
    1faa:	f3c3 1280 	ubfx	r2, r3, #6, #1
    1fae:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    1fb0:	f3c1 010d 	ubfx	r1, r1, #0, #14
    1fb4:	9202      	str	r2, [sp, #8]
    1fb6:	09da      	lsrs	r2, r3, #7
    1fb8:	9000      	str	r0, [sp, #0]
    1fba:	a807      	add	r0, sp, #28
    1fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1fbe:	9103      	str	r1, [sp, #12]
    1fc0:	21fa      	movs	r1, #250	; 0xfa
    1fc2:	9201      	str	r2, [sp, #4]
    1fc4:	4a21      	ldr	r2, [pc, #132]	; (204c <UAsEnc::sendData(int)+0xf0>)
    1fc6:	f019 fb65 	bl	1b694 <snprintf>
  usb.send(reply);
    1fca:	a907      	add	r1, sp, #28
    1fcc:	481e      	ldr	r0, [pc, #120]	; (2048 <UAsEnc::sendData(int)+0xec>)
    1fce:	f00a faa5 	bl	c51c <UUSB::send(char const*)>
  reg16IsSend = true;
    1fd2:	2301      	movs	r3, #1
    1fd4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
    1fd8:	b046      	add	sp, #280	; 0x118
    1fda:	bd10      	pop	{r4, pc}
  snprintf(reply, MRL, "asens %d %d %d\r\n",
    1fdc:	2002      	movs	r0, #2
    1fde:	2101      	movs	r1, #1
    1fe0:	7f23      	ldrb	r3, [r4, #28]
    1fe2:	4a1b      	ldr	r2, [pc, #108]	; (2050 <UAsEnc::sendData(int)+0xf4>)
  snprintf(reply, MRL, "aseno %d %d %d\r\n",
    1fe4:	e9cd 1000 	strd	r1, r0, [sp]
    1fe8:	a807      	add	r0, sp, #28
    1fea:	21fa      	movs	r1, #250	; 0xfa
    1fec:	f019 fb52 	bl	1b694 <snprintf>
  usb.send(reply);
    1ff0:	a907      	add	r1, sp, #28
    1ff2:	4815      	ldr	r0, [pc, #84]	; (2048 <UAsEnc::sendData(int)+0xec>)
    1ff4:	f00a fa92 	bl	c51c <UUSB::send(char const*)>
}
    1ff8:	b046      	add	sp, #280	; 0x118
    1ffa:	bd10      	pop	{r4, pc}
  snprintf(reply, MRL, "aseno %d %d %d\r\n",
    1ffc:	2002      	movs	r0, #2
    1ffe:	2101      	movs	r1, #1
    2000:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2002:	4a14      	ldr	r2, [pc, #80]	; (2054 <UAsEnc::sendData(int)+0xf8>)
    2004:	e7ee      	b.n	1fe4 <UAsEnc::sendData(int)+0x88>
  snprintf(reply, MRL, "asenv %.1f %.1f %.1f\r\n",
    2006:	ed90 7a06 	vldr	s14, [r0, #24]
    200a:	2200      	movs	r2, #0
    200c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2010:	2000      	movs	r0, #0
    2012:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2016:	490a      	ldr	r1, [pc, #40]	; (2040 <UAsEnc::sendData(int)+0xe4>)
    2018:	e9cd 2304 	strd	r2, r3, [sp, #16]
    201c:	4a0e      	ldr	r2, [pc, #56]	; (2058 <UAsEnc::sendData(int)+0xfc>)
    201e:	e7b3      	b.n	1f88 <UAsEnc::sendData(int)+0x2c>
  snprintf(reply, MRL, "asene 0x%04x 0x%04x 0x%04x\r\n",
    2020:	2100      	movs	r1, #0
    2022:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    2024:	4a0d      	ldr	r2, [pc, #52]	; (205c <UAsEnc::sendData(int)+0x100>)
    2026:	a807      	add	r0, sp, #28
    2028:	e9cd 1100 	strd	r1, r1, [sp]
    202c:	21fa      	movs	r1, #250	; 0xfa
    202e:	f019 fb31 	bl	1b694 <snprintf>
  usb.send(reply);
    2032:	a907      	add	r1, sp, #28
    2034:	4804      	ldr	r0, [pc, #16]	; (2048 <UAsEnc::sendData(int)+0xec>)
    2036:	f00a fa71 	bl	c51c <UUSB::send(char const*)>
}
    203a:	b046      	add	sp, #280	; 0x118
    203c:	bd10      	pop	{r4, pc}
    203e:	bf00      	nop
    2040:	3ff00000 	.word	0x3ff00000
    2044:	20005238 	.word	0x20005238
    2048:	2000eab8 	.word	0x2000eab8
    204c:	20005288 	.word	0x20005288
    2050:	20005210 	.word	0x20005210
    2054:	20005224 	.word	0x20005224
    2058:	20005250 	.word	0x20005250
    205c:	20005268 	.word	0x20005268

00002060 <UAsEnc::initEnc()>:
{
    2060:	b538      	push	{r3, r4, r5, lr}
  if (encs[0] == nullptr)
    2062:	6a05      	ldr	r5, [r0, #32]
{
    2064:	4604      	mov	r4, r0
  if (encs[0] == nullptr)
    2066:	b165      	cbz	r5, 2082 <UAsEnc::initEnc()+0x22>
    readDataFrame = encs[i]->readRegister(DIAG_REG);
    2068:	f643 71f5 	movw	r1, #16373	; 0x3ff5
    206c:	4628      	mov	r0, r5
    206e:	f7fe fb73 	bl	758 <AS5X47::readRegister(unsigned short)>
    encErr[i].raw = 0;
    2072:	2300      	movs	r3, #0
    readDataFrame = encs[i]->readRegister(DIAG_REG);
    2074:	b280      	uxth	r0, r0
    encErr[i].raw = 0;
    2076:	8763      	strh	r3, [r4, #58]	; 0x3a
    asencValid[i] = readDataFrame.raw > 0;
    2078:	1ac3      	subs	r3, r0, r3
    207a:	bf18      	it	ne
    207c:	2301      	movne	r3, #1
    207e:	7723      	strb	r3, [r4, #28]
}
    2080:	bd38      	pop	{r3, r4, r5, pc}
    encs[0] = new AS5X47{CS0};
    2082:	2001      	movs	r0, #1
    2084:	f014 fb18 	bl	166b8 <operator new(unsigned int)>
    2088:	4605      	mov	r5, r0
    208a:	2107      	movs	r1, #7
    208c:	f7fe fb5e 	bl	74c <AS5X47::AS5X47(unsigned char)>
    2090:	6225      	str	r5, [r4, #32]
    2092:	e7e9      	b.n	2068 <UAsEnc::initEnc()+0x8>

00002094 <UAsEnc::setup()>:
{
    2094:	b510      	push	{r4, lr}
    2096:	4604      	mov	r4, r0
  initEnc();
    2098:	f7ff ffe2 	bl	2060 <UAsEnc::initEnc()>
  addPublistItem("asens",  "Get encoder status 'asenc s1 s2 s3' 1=available");
    209c:	4a11      	ldr	r2, [pc, #68]	; (20e4 <UAsEnc::setup()+0x50>)
    209e:	4620      	mov	r0, r4
    20a0:	4911      	ldr	r1, [pc, #68]	; (20e8 <UAsEnc::setup()+0x54>)
    20a2:	f00a f96d 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("aseno",  "Get encoder offset 'aseno o1 o2 o3' in degrees");
    20a6:	4620      	mov	r0, r4
    20a8:	4a10      	ldr	r2, [pc, #64]	; (20ec <UAsEnc::setup()+0x58>)
    20aa:	4911      	ldr	r1, [pc, #68]	; (20f0 <UAsEnc::setup()+0x5c>)
    20ac:	f00a f968 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("asenp",  "Get encoder values 'asenv p1 p2 p3' (angle in degrees)");
    20b0:	4620      	mov	r0, r4
    20b2:	4a10      	ldr	r2, [pc, #64]	; (20f4 <UAsEnc::setup()+0x60>)
    20b4:	4910      	ldr	r1, [pc, #64]	; (20f8 <UAsEnc::setup()+0x64>)
    20b6:	f00a f963 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("asenv",  "Get encoder values 'asenv v1 v2 v3' (velocity in degrees/s)");
    20ba:	4620      	mov	r0, r4
    20bc:	4a0f      	ldr	r2, [pc, #60]	; (20fc <UAsEnc::setup()+0x68>)
    20be:	4910      	ldr	r1, [pc, #64]	; (2100 <UAsEnc::setup()+0x6c>)
    20c0:	f00a f95e 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("asene",  "Get encoder error flags 'asene e1 e2 e3' (Hex, see AS5147E doc)");
    20c4:	4620      	mov	r0, r4
    20c6:	4a0f      	ldr	r2, [pc, #60]	; (2104 <UAsEnc::setup()+0x70>)
    20c8:	490f      	ldr	r1, [pc, #60]	; (2108 <UAsEnc::setup()+0x74>)
    20ca:	f00a f959 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("as16",   "Get register values '#reg16 interface, reg, value'");
    20ce:	4620      	mov	r0, r4
    20d0:	490e      	ldr	r1, [pc, #56]	; (210c <UAsEnc::setup()+0x78>)
    20d2:	4a0f      	ldr	r2, [pc, #60]	; (2110 <UAsEnc::setup()+0x7c>)
    20d4:	f00a f954 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    20d8:	4621      	mov	r1, r4
    20da:	480e      	ldr	r0, [pc, #56]	; (2114 <UAsEnc::setup()+0x80>)
}
    20dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    20e0:	f00a be48 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    20e4:	20005024 	.word	0x20005024
    20e8:	20005054 	.word	0x20005054
    20ec:	2000505c 	.word	0x2000505c
    20f0:	2000508c 	.word	0x2000508c
    20f4:	20005094 	.word	0x20005094
    20f8:	200050cc 	.word	0x200050cc
    20fc:	200050d4 	.word	0x200050d4
    2100:	20005110 	.word	0x20005110
    2104:	20005118 	.word	0x20005118
    2108:	20005158 	.word	0x20005158
    210c:	20005194 	.word	0x20005194
    2110:	20005160 	.word	0x20005160
    2114:	2000eab8 	.word	0x2000eab8

00002118 <UAsEnc::tick()>:
{ // read data - first time will fail
    2118:	b538      	push	{r3, r4, r5, lr}
  tickCnt++;
    211a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{ // read data - first time will fail
    211c:	4604      	mov	r4, r0
    if (asencValid[i])
    211e:	7f02      	ldrb	r2, [r0, #28]
  tickCnt++;
    2120:	3301      	adds	r3, #1
    2122:	6243      	str	r3, [r0, #36]	; 0x24
    if (asencValid[i])
    2124:	b16a      	cbz	r2, 2142 <UAsEnc::tick()+0x2a>
      encPos[i] = encs[i]->readAngle();
    2126:	6a00      	ldr	r0, [r0, #32]
    2128:	f7fe fb22 	bl	770 <AS5X47::readAngle()>
      encVel[i] = encs[i]->readVel();
    212c:	6a20      	ldr	r0, [r4, #32]
      encPos[i] = encs[i]->readAngle();
    212e:	ed84 0a05 	vstr	s0, [r4, #20]
      encVel[i] = encs[i]->readVel();
    2132:	f7fe fb35 	bl	7a0 <AS5X47::readVel()>
      encErr[i] = encs[i]->readErr();
    2136:	6a20      	ldr	r0, [r4, #32]
      encVel[i] = encs[i]->readVel();
    2138:	ed84 0a06 	vstr	s0, [r4, #24]
      encErr[i] = encs[i]->readErr();
    213c:	f7fe fb50 	bl	7e0 <AS5X47::readErr()>
    2140:	8760      	strh	r0, [r4, #58]	; 0x3a
  if (reg16Enabled and reg16IsSend and reg16Interface < AS_CNT)
    2142:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2146:	b123      	cbz	r3, 2152 <UAsEnc::tick()+0x3a>
    2148:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    214c:	b10b      	cbz	r3, 2152 <UAsEnc::tick()+0x3a>
    214e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    2150:	b105      	cbz	r5, 2154 <UAsEnc::tick()+0x3c>
}
    2152:	bd38      	pop	{r3, r4, r5, pc}
    reg16Raw = encs[reg16Interface]->readRegister(reg16);
    2154:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    2156:	6a20      	ldr	r0, [r4, #32]
    2158:	f7fe fafe 	bl	758 <AS5X47::readRegister(unsigned short)>
    reg16IsSend = false;
    215c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    reg16Raw = encs[reg16Interface]->readRegister(reg16);
    2160:	85e0      	strh	r0, [r4, #46]	; 0x2e
}
    2162:	bd38      	pop	{r3, r4, r5, pc}

00002164 <UAsEnc::eePromSave()>:
{
    2164:	b510      	push	{r4, lr}
    2166:	4604      	mov	r4, r0
  eeConfig.pushByte(f);
    2168:	2101      	movs	r1, #1
    216a:	4807      	ldr	r0, [pc, #28]	; (2188 <UAsEnc::eePromSave()+0x24>)
    216c:	f000 ff58 	bl	3020 <EEConfig::pushByte(unsigned char)>
    eeConfig.pushFloat(encOffset[i]);
    2170:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  /** save a 32 bit float to configuration stack */
  inline void pushFloat(float value)
  {
    union {float f; uint32_t u32;} u;
    u.f = value;
    push32(u.u32);
    2172:	4805      	ldr	r0, [pc, #20]	; (2188 <UAsEnc::eePromSave()+0x24>)
    2174:	ee07 1a90 	vmov	s15, r1
    2178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2180:	ee17 1a90 	vmov	r1, s15
    2184:	f000 bf30 	b.w	2fe8 <EEConfig::push32(unsigned long)>
    2188:	2000dbe8 	.word	0x2000dbe8

0000218c <UAsEnc::eePromLoad()>:
{
    218c:	b538      	push	{r3, r4, r5, lr}
  /*uint8_t f =*/ eeConfig.readByte();
    218e:	4d07      	ldr	r5, [pc, #28]	; (21ac <UAsEnc::eePromLoad()+0x20>)
{
    2190:	4604      	mov	r4, r0
  /*uint8_t f =*/ eeConfig.readByte();
    2192:	4628      	mov	r0, r5
    2194:	f000 ff90 	bl	30b8 <EEConfig::readByte()>
  }
  // read 32 bit as float from configuration stack
  inline float readFloat()
  {
    union {float f; uint32_t u32;} u;
    u.u32 = read32();
    2198:	4628      	mov	r0, r5
    219a:	f000 ff79 	bl	3090 <EEConfig::read32()>
    encOffset[i] = eeConfig.readFloat();
    219e:	ee07 0a90 	vmov	s15, r0
    21a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    21a6:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
}
    21aa:	bd38      	pop	{r3, r4, r5, pc}
    21ac:	2000dbe8 	.word	0x2000dbe8

000021b0 <_GLOBAL__sub_I_asenc>:
}
    21b0:	b510      	push	{r4, lr}
    21b2:	4c0d      	ldr	r4, [pc, #52]	; (21e8 <_GLOBAL__sub_I_asenc+0x38>)
    21b4:	4620      	mov	r0, r4
    21b6:	f009 ffbf 	bl	c138 <USubss::USubss()>
    21ba:	2300      	movs	r3, #0
    21bc:	480b      	ldr	r0, [pc, #44]	; (21ec <_GLOBAL__sub_I_asenc+0x3c>)
    21be:	f643 71f5 	movw	r1, #16373	; 0x3ff5
    21c2:	7723      	strb	r3, [r4, #28]
    21c4:	6020      	str	r0, [r4, #0]
UAsEnc asenc;
    21c6:	4620      	mov	r0, r4
    21c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    21cc:	6363      	str	r3, [r4, #52]	; 0x34
    21ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    21d2:	4a07      	ldr	r2, [pc, #28]	; (21f0 <_GLOBAL__sub_I_asenc+0x40>)
    21d4:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
    21d8:	e9c4 3308 	strd	r3, r3, [r4, #32]
    21dc:	4905      	ldr	r1, [pc, #20]	; (21f4 <_GLOBAL__sub_I_asenc+0x44>)
}
    21de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UAsEnc asenc;
    21e2:	f016 be89 	b.w	18ef8 <__aeabi_atexit>
    21e6:	bf00      	nop
    21e8:	2000d9dc 	.word	0x2000d9dc
    21ec:	20007fc0 	.word	0x20007fc0
    21f0:	20008f08 	.word	0x20008f08
    21f4:	00001e51 	.word	0x00001e51

000021f8 <UCommand::sendHelp()>:

void UCommand::sendHelp()
{
  const int MRL = 320;
  char reply[MRL];
  snprintf(reply, MRL, "# Command information for %s %s ------- \r\n", robot.deviceName, robot.getRobotName());
    21f8:	4b15      	ldr	r3, [pc, #84]	; (2250 <UCommand::sendHelp()+0x58>)
    21fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
    21fe:	4a15      	ldr	r2, [pc, #84]	; (2254 <UCommand::sendHelp()+0x5c>)
    return robotname[deviceID];
    2200:	f853 0c05 	ldr.w	r0, [r3, #-5]
{
    2204:	b530      	push	{r4, r5, lr}
    2206:	3026      	adds	r0, #38	; 0x26
    2208:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
    220c:	b0d3      	sub	sp, #332	; 0x14c
  usb.send(reply);
    220e:	4d12      	ldr	r5, [pc, #72]	; (2258 <UCommand::sendHelp()+0x60>)
  snprintf(reply, MRL, "# Command information for %s %s ------- \r\n", robot.deviceName, robot.getRobotName());
    2210:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  snprintf(reply, MRL, "# -- \thelp \tThis help text.\r\n");
  snprintf(reply, MRL, "# -- \treboot \tReboot the Teensy processor.\r\n");
    2214:	4c11      	ldr	r4, [pc, #68]	; (225c <UCommand::sendHelp()+0x64>)
  snprintf(reply, MRL, "# Command information for %s %s ------- \r\n", robot.deviceName, robot.getRobotName());
    2216:	9000      	str	r0, [sp, #0]
    2218:	a802      	add	r0, sp, #8
    221a:	f019 fa3b 	bl	1b694 <snprintf>
  usb.send(reply);
    221e:	a902      	add	r1, sp, #8
    2220:	4628      	mov	r0, r5
    2222:	f00a f97b 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \treboot \tReboot the Teensy processor.\r\n");
    2226:	f10d 0c08 	add.w	ip, sp, #8
    222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    222c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2236:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    223a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
  usb.send(reply);
    223e:	a902      	add	r1, sp, #8
    2240:	4628      	mov	r0, r5
  snprintf(reply, MRL, "# -- \treboot \tReboot the Teensy processor.\r\n");
    2242:	f88c 3000 	strb.w	r3, [ip]
  usb.send(reply);
    2246:	f00a f969 	bl	c51c <UUSB::send(char const*)>
}
    224a:	b053      	add	sp, #332	; 0x14c
    224c:	bd30      	pop	{r4, r5, pc}
    224e:	bf00      	nop
    2250:	2000e685 	.word	0x2000e685
    2254:	200072d4 	.word	0x200072d4
    2258:	2000eab8 	.word	0x2000eab8
    225c:	20007300 	.word	0x20007300

00002260 <UCommand::~UCommand()>:
#endif
#include <mutex>
#include "usubss.h"


class UCommand : public USubss
    2260:	b510      	push	{r4, lr}
    2262:	4b05      	ldr	r3, [pc, #20]	; (2278 <UCommand::~UCommand()+0x18>)
    2264:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    2266:	6840      	ldr	r0, [r0, #4]
    2268:	6023      	str	r3, [r4, #0]
	if (__p)
    226a:	b118      	cbz	r0, 2274 <UCommand::~UCommand()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    226c:	68e1      	ldr	r1, [r4, #12]
    226e:	1a09      	subs	r1, r1, r0
    2270:	f014 fa24 	bl	166bc <operator delete(void*, unsigned int)>
    2274:	4620      	mov	r0, r4
    2276:	bd10      	pop	{r4, pc}
    2278:	2000802c 	.word	0x2000802c

0000227c <UCommand::decode(char const*)>:
{
    227c:	b510      	push	{r4, lr}
    227e:	460c      	mov	r4, r1
  if (strncmp(buf, "help", 4) == 0)
    2280:	2204      	movs	r2, #4
    2282:	4914      	ldr	r1, [pc, #80]	; (22d4 <UCommand::decode(char const*)+0x58>)
    2284:	4620      	mov	r0, r4
    2286:	f019 fcbd 	bl	1bc04 <strncmp>
    228a:	b1e0      	cbz	r0, 22c6 <UCommand::decode(char const*)+0x4a>
  else if (strncmp(buf, "leave", 5) == 0)
    228c:	2205      	movs	r2, #5
    228e:	4912      	ldr	r1, [pc, #72]	; (22d8 <UCommand::decode(char const*)+0x5c>)
    2290:	4620      	mov	r0, r4
    2292:	f019 fcb7 	bl	1bc04 <strncmp>
    2296:	4603      	mov	r3, r0
    2298:	b170      	cbz	r0, 22b8 <UCommand::decode(char const*)+0x3c>
  else if (strncmp(buf, "reboot", 6) == 0)
    229a:	2206      	movs	r2, #6
    229c:	490f      	ldr	r1, [pc, #60]	; (22dc <UCommand::decode(char const*)+0x60>)
    229e:	4620      	mov	r0, r4
    22a0:	f019 fcb0 	bl	1bc04 <strncmp>
    22a4:	b9a0      	cbnz	r0, 22d0 <UCommand::decode(char const*)+0x54>
    SRC_GPR5 = 0x0BAD00F1;
    22a6:	490e      	ldr	r1, [pc, #56]	; (22e0 <UCommand::decode(char const*)+0x64>)
    SCB_AIRCR = 0x05FA0004;
    22a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SRC_GPR5 = 0x0BAD00F1;
    22ac:	480d      	ldr	r0, [pc, #52]	; (22e4 <UCommand::decode(char const*)+0x68>)
    SCB_AIRCR = 0x05FA0004;
    22ae:	4a0e      	ldr	r2, [pc, #56]	; (22e8 <UCommand::decode(char const*)+0x6c>)
    SRC_GPR5 = 0x0BAD00F1;
    22b0:	6308      	str	r0, [r1, #48]	; 0x30
    SCB_AIRCR = 0x05FA0004;
    22b2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
    while (1) ;
    22b6:	e7fe      	b.n	22b6 <UCommand::decode(char const*)+0x3a>
    usb.usbIsUp = false;
    22b8:	480c      	ldr	r0, [pc, #48]	; (22ec <UCommand::decode(char const*)+0x70>)
    22ba:	f880 3120 	strb.w	r3, [r0, #288]	; 0x120
    usb.stopAllSubscriptions();
    22be:	f00a fc2b 	bl	cb18 <UUSB::stopAllSubscriptions()>
  bool used = true;
    22c2:	2001      	movs	r0, #1
}
    22c4:	bd10      	pop	{r4, pc}
    usb.sendAllHelp();
    22c6:	4809      	ldr	r0, [pc, #36]	; (22ec <UCommand::decode(char const*)+0x70>)
    22c8:	f00a fc3a 	bl	cb40 <UUSB::sendAllHelp()>
  bool used = true;
    22cc:	2001      	movs	r0, #1
}
    22ce:	bd10      	pop	{r4, pc}
    22d0:	2000      	movs	r0, #0
    22d2:	bd10      	pop	{r4, pc}
    22d4:	200072bc 	.word	0x200072bc
    22d8:	200072c4 	.word	0x200072c4
    22dc:	200072cc 	.word	0x200072cc
    22e0:	400f8000 	.word	0x400f8000
    22e4:	0bad00f1 	.word	0x0bad00f1
    22e8:	05fa0004 	.word	0x05fa0004
    22ec:	2000eab8 	.word	0x2000eab8

000022f0 <UCommand::setup()>:
{
    22f0:	b510      	push	{r4, lr}
    22f2:	4604      	mov	r4, r0
  addPublistItem("ver", "get version 'version SVN_rev.x date time'");
    22f4:	4904      	ldr	r1, [pc, #16]	; (2308 <UCommand::setup()+0x18>)
    22f6:	4a05      	ldr	r2, [pc, #20]	; (230c <UCommand::setup()+0x1c>)
    22f8:	f00a f842 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    22fc:	4621      	mov	r1, r4
    22fe:	4804      	ldr	r0, [pc, #16]	; (2310 <UCommand::setup()+0x20>)
}
    2300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    2304:	f00a bd36 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    2308:	200072b8 	.word	0x200072b8
    230c:	2000728c 	.word	0x2000728c
    2310:	2000eab8 	.word	0x2000eab8

00002314 <UCommand::getRevisionNumber()>:
{
    2314:	b508      	push	{r3, lr}
  const char * p1 = getRevisionString();
    2316:	f7fd ff27 	bl	168 <getRevisionString()>
  p1 = strstr(p1, ".ino");
    231a:	4909      	ldr	r1, [pc, #36]	; (2340 <UCommand::getRevisionNumber()+0x2c>)
    231c:	f019 ff0a 	bl	1c134 <strstr>
  if (p1 == nullptr)
    2320:	b150      	cbz	r0, 2338 <UCommand::getRevisionNumber()+0x24>
    return strtol(&p1[4], NULL, 10) * 10 + REV_MINOR;
    2322:	220a      	movs	r2, #10
    2324:	2100      	movs	r1, #0
    2326:	3004      	adds	r0, #4
    2328:	f018 ffc4 	bl	1b2b4 <strtol>
    232c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2330:	0040      	lsls	r0, r0, #1
    2332:	3005      	adds	r0, #5
    2334:	b280      	uxth	r0, r0
}
    2336:	bd08      	pop	{r3, pc}
    return 888;
    2338:	f44f 705e 	mov.w	r0, #888	; 0x378
}
    233c:	bd08      	pop	{r3, pc}
    233e:	bf00      	nop
    2340:	200071e0 	.word	0x200071e0

00002344 <UCommand::getCompileDate()>:
{
    2344:	b510      	push	{r4, lr}
    2346:	b082      	sub	sp, #8
    2348:	4604      	mov	r4, r0
  const char * p1 = getRevisionString();
    234a:	f7fd ff0d 	bl	168 <getRevisionString()>
  p1 = strstr(p1, ".ino");
    234e:	490f      	ldr	r1, [pc, #60]	; (238c <UCommand::getCompileDate()+0x48>)
  const char * p1 = getRevisionString();
    2350:	9001      	str	r0, [sp, #4]
  p1 = strstr(p1, ".ino");
    2352:	f019 feef 	bl	1c134 <strstr>
  if (p1 != nullptr)
    2356:	b1a8      	cbz	r0, 2384 <UCommand::getCompileDate()+0x40>
    p1+=4; // skip the '.cpp'
    2358:	3004      	adds	r0, #4
    strtol(p1, (char**)&p1, 10); // skip the version number
    235a:	a901      	add	r1, sp, #4
    235c:	220a      	movs	r2, #10
    p1+=4; // skip the '.cpp'
    235e:	9001      	str	r0, [sp, #4]
    strtol(p1, (char**)&p1, 10); // skip the version number
    2360:	f018 ffa8 	bl	1b2b4 <strtol>
    p1++; // next is the date
    2364:	9901      	ldr	r1, [sp, #4]
    strncpy(compileDate, p1, 20);
    2366:	f104 0314 	add.w	r3, r4, #20
    236a:	2214      	movs	r2, #20
    p1++; // next is the date
    236c:	3101      	adds	r1, #1
    strncpy(compileDate, p1, 20);
    236e:	4618      	mov	r0, r3
    p1++; // next is the date
    2370:	9101      	str	r1, [sp, #4]
    strncpy(compileDate, p1, 20);
    2372:	f019 fc8d 	bl	1bc90 <strncpy>
    2376:	4603      	mov	r3, r0
    compileDate[20] = '\0';
    2378:	2200      	movs	r2, #0
}
    237a:	4618      	mov	r0, r3
    compileDate[20] = '\0';
    237c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
    2380:	b002      	add	sp, #8
    2382:	bd10      	pop	{r4, pc}
    return "no date";
    2384:	4b02      	ldr	r3, [pc, #8]	; (2390 <UCommand::getCompileDate()+0x4c>)
}
    2386:	4618      	mov	r0, r3
    2388:	b002      	add	sp, #8
    238a:	bd10      	pop	{r4, pc}
    238c:	200071e0 	.word	0x200071e0
    2390:	200071d8 	.word	0x200071d8
    2394:	00000000 	.word	0x00000000

00002398 <UCommand::sendStatusVersion()>:
{
    2398:	b510      	push	{r4, lr}
    239a:	ed2d 8b02 	vpush	{d8}
    239e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    23a2:	4604      	mov	r4, r0
  const char * p1 = getRevisionString();
    23a4:	f7fd fee0 	bl	168 <getRevisionString()>
  p1 = strstr(p1, ".ino");
    23a8:	491b      	ldr	r1, [pc, #108]	; (2418 <UCommand::sendStatusVersion()+0x80>)
    23aa:	f019 fec3 	bl	1c134 <strstr>
  if (p1 == nullptr)
    23ae:	b350      	cbz	r0, 2406 <UCommand::sendStatusVersion()+0x6e>
    return strtol(&p1[4], NULL, 10) * 10 + REV_MINOR;
    23b0:	220a      	movs	r2, #10
    23b2:	2100      	movs	r1, #0
    23b4:	3004      	adds	r0, #4
    23b6:	f018 ff7d 	bl	1b2b4 <strtol>
  snprintf(reply, MRL, "version %.1f %d %s\r\n", (float)getRevisionNumber() / 10.0, robot.robotHWversion, getCompileDate());
    23ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    return strtol(&p1[4], NULL, 10) * 10 + REV_MINOR;
    23be:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    23c2:	005b      	lsls	r3, r3, #1
    23c4:	3305      	adds	r3, #5
  snprintf(reply, MRL, "version %.1f %d %s\r\n", (float)getRevisionNumber() / 10.0, robot.robotHWversion, getCompileDate());
    23c6:	b29b      	uxth	r3, r3
    23c8:	ee07 3a90 	vmov	s15, r3
    23cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    23d0:	ee87 8b06 	vdiv.f64	d8, d7, d6
    23d4:	4b11      	ldr	r3, [pc, #68]	; (241c <UCommand::sendStatusVersion()+0x84>)
    23d6:	4620      	mov	r0, r4
    23d8:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    23dc:	f7ff ffb2 	bl	2344 <UCommand::getCompileDate()>
    23e0:	4a0f      	ldr	r2, [pc, #60]	; (2420 <UCommand::sendStatusVersion()+0x88>)
    23e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    23e6:	e9cd 4002 	strd	r4, r0, [sp, #8]
    23ea:	ed8d 8b00 	vstr	d8, [sp]
    23ee:	a805      	add	r0, sp, #20
    23f0:	f019 f950 	bl	1b694 <snprintf>
  usb.send(reply);
    23f4:	a905      	add	r1, sp, #20
    23f6:	480b      	ldr	r0, [pc, #44]	; (2424 <UCommand::sendStatusVersion()+0x8c>)
    23f8:	f00a f890 	bl	c51c <UUSB::send(char const*)>
}
    23fc:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    2400:	ecbd 8b02 	vpop	{d8}
    2404:	bd10      	pop	{r4, pc}
    2406:	ed9f 8b02 	vldr	d8, [pc, #8]	; 2410 <UCommand::sendStatusVersion()+0x78>
    240a:	e7e3      	b.n	23d4 <UCommand::sendStatusVersion()+0x3c>
    240c:	f3af 8000 	nop.w
    2410:	33333333 	.word	0x33333333
    2414:	40563333 	.word	0x40563333
    2418:	200071e0 	.word	0x200071e0
    241c:	2000e654 	.word	0x2000e654
    2420:	200071e8 	.word	0x200071e8
    2424:	2000eab8 	.word	0x2000eab8

00002428 <UCommand::sendData(int)>:
  if (item == 0)
    2428:	b101      	cbz	r1, 242c <UCommand::sendData(int)+0x4>
}
    242a:	4770      	bx	lr
    sendStatusVersion();
    242c:	f7ff bfb4 	b.w	2398 <UCommand::sendStatusVersion()>

00002430 <UCommand::parse_and_execute_command(char*)>:
{ // command may be preceded by 'robot' or 'teensy' or robot type
    2430:	b510      	push	{r4, lr}
    2432:	460c      	mov	r4, r1
  if (strncmp(buf, "robot ", 6) == 0)
    2434:	2206      	movs	r2, #6
    2436:	4925      	ldr	r1, [pc, #148]	; (24cc <UCommand::parse_and_execute_command(char*)+0x9c>)
    2438:	4620      	mov	r0, r4
    243a:	f019 fbe3 	bl	1bc04 <strncmp>
    243e:	2800      	cmp	r0, #0
    2440:	d037      	beq.n	24b2 <UCommand::parse_and_execute_command(char*)+0x82>
  else if (strncmp(buf, "teensy ", 7) == 0)
    2442:	2207      	movs	r2, #7
    2444:	4922      	ldr	r1, [pc, #136]	; (24d0 <UCommand::parse_and_execute_command(char*)+0xa0>)
    2446:	4620      	mov	r0, r4
    2448:	f019 fbdc 	bl	1bc04 <strncmp>
    244c:	b988      	cbnz	r0, 2472 <UCommand::parse_and_execute_command(char*)+0x42>
    while (*buf == ' ')
    244e:	79e3      	ldrb	r3, [r4, #7]
    buf += 7; // move pointer 7 characters forward
    2450:	3407      	adds	r4, #7
    while (*buf == ' ')
    2452:	2b20      	cmp	r3, #32
    2454:	d103      	bne.n	245e <UCommand::parse_and_execute_command(char*)+0x2e>
    2456:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    245a:	2b20      	cmp	r3, #32
    245c:	d0fb      	beq.n	2456 <UCommand::parse_and_execute_command(char*)+0x26>
    usb.send("# discarding the 'teensy' part\n");
    245e:	491d      	ldr	r1, [pc, #116]	; (24d4 <UCommand::parse_and_execute_command(char*)+0xa4>)
    2460:	481d      	ldr	r0, [pc, #116]	; (24d8 <UCommand::parse_and_execute_command(char*)+0xa8>)
    2462:	f00a f85b 	bl	c51c <UUSB::send(char const*)>
  bool used = usb.decodeAll(buf);
    2466:	4621      	mov	r1, r4
    2468:	481b      	ldr	r0, [pc, #108]	; (24d8 <UCommand::parse_and_execute_command(char*)+0xa8>)
    246a:	f00a fb85 	bl	cb78 <UUSB::decodeAll(char const*)>
  if (not used)
    246e:	b1c8      	cbz	r0, 24a4 <UCommand::parse_and_execute_command(char*)+0x74>
}
    2470:	bd10      	pop	{r4, pc}
  else if (strncmp(buf, "regbot ", 7) == 0)
    2472:	2207      	movs	r2, #7
    2474:	4919      	ldr	r1, [pc, #100]	; (24dc <UCommand::parse_and_execute_command(char*)+0xac>)
    2476:	4620      	mov	r0, r4
    2478:	f019 fbc4 	bl	1bc04 <strncmp>
    247c:	2800      	cmp	r0, #0
    247e:	d1f2      	bne.n	2466 <UCommand::parse_and_execute_command(char*)+0x36>
    while (*buf == ' ')
    2480:	79e3      	ldrb	r3, [r4, #7]
    buf += 7; // move pointer 7 characters forward
    2482:	3407      	adds	r4, #7
    while (*buf == ' ')
    2484:	2b20      	cmp	r3, #32
    2486:	d103      	bne.n	2490 <UCommand::parse_and_execute_command(char*)+0x60>
    2488:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    248c:	2b20      	cmp	r3, #32
    248e:	d0fb      	beq.n	2488 <UCommand::parse_and_execute_command(char*)+0x58>
    usb.send("# discarding the 'regbot' part\n");
    2490:	4913      	ldr	r1, [pc, #76]	; (24e0 <UCommand::parse_and_execute_command(char*)+0xb0>)
    2492:	4811      	ldr	r0, [pc, #68]	; (24d8 <UCommand::parse_and_execute_command(char*)+0xa8>)
    2494:	f00a f842 	bl	c51c <UUSB::send(char const*)>
  bool used = usb.decodeAll(buf);
    2498:	4621      	mov	r1, r4
    249a:	480f      	ldr	r0, [pc, #60]	; (24d8 <UCommand::parse_and_execute_command(char*)+0xa8>)
    249c:	f00a fb6c 	bl	cb78 <UUSB::decodeAll(char const*)>
  if (not used)
    24a0:	2800      	cmp	r0, #0
    24a2:	d1e5      	bne.n	2470 <UCommand::parse_and_execute_command(char*)+0x40>
    usb.sendInfoAsCommentWithTime("Unhandled message", buf);
    24a4:	4622      	mov	r2, r4
    24a6:	490f      	ldr	r1, [pc, #60]	; (24e4 <UCommand::parse_and_execute_command(char*)+0xb4>)
    24a8:	480b      	ldr	r0, [pc, #44]	; (24d8 <UCommand::parse_and_execute_command(char*)+0xa8>)
}
    24aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usb.sendInfoAsCommentWithTime("Unhandled message", buf);
    24ae:	f00a b8f3 	b.w	c698 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)>
    usb.send("# discarding the 'robot' part\n");
    24b2:	490d      	ldr	r1, [pc, #52]	; (24e8 <UCommand::parse_and_execute_command(char*)+0xb8>)
    buf += 6; // move pointer 6 characters forward
    24b4:	3406      	adds	r4, #6
    usb.send("# discarding the 'robot' part\n");
    24b6:	4808      	ldr	r0, [pc, #32]	; (24d8 <UCommand::parse_and_execute_command(char*)+0xa8>)
    24b8:	f00a f830 	bl	c51c <UUSB::send(char const*)>
    while (*buf == ' ')
    24bc:	7823      	ldrb	r3, [r4, #0]
    24be:	2b20      	cmp	r3, #32
    24c0:	d1d1      	bne.n	2466 <UCommand::parse_and_execute_command(char*)+0x36>
    24c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    24c6:	2b20      	cmp	r3, #32
    24c8:	d0fb      	beq.n	24c2 <UCommand::parse_and_execute_command(char*)+0x92>
    24ca:	e7cc      	b.n	2466 <UCommand::parse_and_execute_command(char*)+0x36>
    24cc:	20007200 	.word	0x20007200
    24d0:	20007228 	.word	0x20007228
    24d4:	20007230 	.word	0x20007230
    24d8:	2000eab8 	.word	0x2000eab8
    24dc:	20007250 	.word	0x20007250
    24e0:	20007258 	.word	0x20007258
    24e4:	20007278 	.word	0x20007278
    24e8:	20007208 	.word	0x20007208

000024ec <_GLOBAL__sub_I_command>:
}
    24ec:	b510      	push	{r4, lr}
    24ee:	4c06      	ldr	r4, [pc, #24]	; (2508 <_GLOBAL__sub_I_command+0x1c>)
    24f0:	4620      	mov	r0, r4
    24f2:	f009 fe21 	bl	c138 <USubss::USubss()>
    24f6:	4b05      	ldr	r3, [pc, #20]	; (250c <_GLOBAL__sub_I_command+0x20>)
UCommand command;
    24f8:	4620      	mov	r0, r4
    24fa:	4a05      	ldr	r2, [pc, #20]	; (2510 <_GLOBAL__sub_I_command+0x24>)
    24fc:	6023      	str	r3, [r4, #0]
    24fe:	4905      	ldr	r1, [pc, #20]	; (2514 <_GLOBAL__sub_I_command+0x28>)
}
    2500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UCommand command;
    2504:	f016 bcf8 	b.w	18ef8 <__aeabi_atexit>
    2508:	2000da18 	.word	0x2000da18
    250c:	2000808c 	.word	0x2000808c
    2510:	20008f08 	.word	0x20008f08
    2514:	00002261 	.word	0x00002261

00002518 <UCurrent::decode(char const*)>:
}
    2518:	2000      	movs	r0, #0
    251a:	4770      	bx	lr

0000251c <UCurrent::sendHelp()>:
  usb.send("# Motor current -------\r\n");
    251c:	4901      	ldr	r1, [pc, #4]	; (2524 <UCurrent::sendHelp()+0x8>)
    251e:	4802      	ldr	r0, [pc, #8]	; (2528 <UCurrent::sendHelp()+0xc>)
    2520:	f009 bffc 	b.w	c51c <UUSB::send(char const*)>
    2524:	20007444 	.word	0x20007444
    2528:	2000eab8 	.word	0x2000eab8

0000252c <UCurrent::~UCurrent()>:
#include <stdint.h>
#include "main.h"
// #include "ucontrol.h"
#include "usubss.h"

class UCurrent : public USubss
    252c:	b510      	push	{r4, lr}
    252e:	4b05      	ldr	r3, [pc, #20]	; (2544 <UCurrent::~UCurrent()+0x18>)
    2530:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    2532:	6840      	ldr	r0, [r0, #4]
    2534:	6023      	str	r3, [r4, #0]
	if (__p)
    2536:	b118      	cbz	r0, 2540 <UCurrent::~UCurrent()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    2538:	68e1      	ldr	r1, [r4, #12]
    253a:	1a09      	subs	r1, r1, r0
    253c:	f014 f8be 	bl	166bc <operator delete(void*, unsigned int)>
    2540:	4620      	mov	r0, r4
    2542:	bd10      	pop	{r4, pc}
    2544:	2000802c 	.word	0x2000802c

00002548 <UCurrent::setup()>:
{
    2548:	b510      	push	{r4, lr}
    254a:	4604      	mov	r4, r0
  addPublistItem("mca", "Get motor current 'mca m1 m2' [Amps]");
    254c:	4a28      	ldr	r2, [pc, #160]	; (25f0 <UCurrent::setup()+0xa8>)
    254e:	4929      	ldr	r1, [pc, #164]	; (25f4 <UCurrent::setup()+0xac>)
    2550:	f009 ff16 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("mco", "Get motor current offset (AD: 0..4096) 'mco o1 o2 ad1 ad2'");
    2554:	4a28      	ldr	r2, [pc, #160]	; (25f8 <UCurrent::setup()+0xb0>)
    2556:	4929      	ldr	r1, [pc, #164]	; (25fc <UCurrent::setup()+0xb4>)
    2558:	4620      	mov	r0, r4
    255a:	f009 ff11 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("sca", "Get supply current in 'sca a n' a in amps, averaged over n samples");
    255e:	4a28      	ldr	r2, [pc, #160]	; (2600 <UCurrent::setup()+0xb8>)
    2560:	4620      	mov	r0, r4
    2562:	4928      	ldr	r1, [pc, #160]	; (2604 <UCurrent::setup()+0xbc>)
    2564:	f009 ff0c 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    2568:	4621      	mov	r1, r4
    256a:	4827      	ldr	r0, [pc, #156]	; (2608 <UCurrent::setup()+0xc0>)
    256c:	f00a fc02 	bl	cd74 <UUSB::addSubscriptionService(USubss*)>
  const float lpFilteredMaxADC = pow(2, ad.useADCresolution) * 2;
    2570:	4b26      	ldr	r3, [pc, #152]	; (260c <UCurrent::setup()+0xc4>)
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    2572:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    2576:	ed93 1a05 	vldr	s2, [r3, #20]
    257a:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
    257e:	f015 fdd7 	bl	18130 <pow>
    2582:	ee30 0b00 	vadd.f64	d0, d0, d0
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    2586:	eeb3 4b04 	vmov.f64	d4, #52	; 0x41a00000  20.0
  const float lpFilteredMaxADC = pow(2, ad.useADCresolution) * 2;
    258a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    258e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 25d0 <UCurrent::setup()+0x88>
    2592:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2596:	ed9f 2b10 	vldr	d2, [pc, #64]	; 25d8 <UCurrent::setup()+0x90>
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    259a:	ee86 3b00 	vdiv.f64	d3, d6, d0
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    259e:	ee20 0b02 	vmul.f64	d0, d0, d2
    25a2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 25e0 <UCurrent::setup()+0x98>
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    25a6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 25e8 <UCurrent::setup()+0xa0>
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    25aa:	ee20 0b07 	vmul.f64	d0, d0, d7
    25ae:	ee86 7b00 	vdiv.f64	d7, d6, d0
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    25b2:	ee83 6b04 	vdiv.f64	d6, d3, d4
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    25b6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    25ba:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    25be:	ee86 7b05 	vdiv.f64	d7, d6, d5
    25c2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    25c6:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
}
    25ca:	bd10      	pop	{r4, pc}
    25cc:	f3af 8000 	nop.w
    25d0:	66666666 	.word	0x66666666
    25d4:	400a6666 	.word	0x400a6666
    25d8:	7ced9169 	.word	0x7ced9169
    25dc:	3fea353f 	.word	0x3fea353f
    25e0:	00000000 	.word	0x00000000
    25e4:	4072c000 	.word	0x4072c000
    25e8:	53f7ced9 	.word	0x53f7ced9
    25ec:	3f9ba5e3 	.word	0x3f9ba5e3
    25f0:	20007390 	.word	0x20007390
    25f4:	200073b8 	.word	0x200073b8
    25f8:	200073bc 	.word	0x200073bc
    25fc:	200073f8 	.word	0x200073f8
    2600:	200073fc 	.word	0x200073fc
    2604:	20007440 	.word	0x20007440
    2608:	2000eab8 	.word	0x2000eab8
    260c:	2000d89c 	.word	0x2000d89c

00002610 <UCurrent::tick()>:

void UCurrent::logIntervalChanged()
{ // average value is always a factor 300 more than AD value
  // Low pass filter for motor and supply current
  // based on actual logging sample interval (in ms)
  if (logger.logInterval_ms <= 2)
    2610:	4b6b      	ldr	r3, [pc, #428]	; (27c0 <UCurrent::tick()+0x1b0>)
    2612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  tickCnt++;
    2614:	6d03      	ldr	r3, [r0, #80]	; 0x50
  if (logger.logInterval_ms <= 2)
    2616:	2a02      	cmp	r2, #2
  tickCnt++;
    2618:	f103 0301 	add.w	r3, r3, #1
{ //
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	4604      	mov	r4, r0
  tickCnt++;
    2620:	6503      	str	r3, [r0, #80]	; 0x50
  if (logger.logInterval_ms <= 2)
    2622:	d96c      	bls.n	26fe <UCurrent::tick()+0xee>
    lowPassFactor = 300/1; // use new value only
  else if (logger.logInterval_ms > 300)
    2624:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
    2628:	f240 80a6 	bls.w	2778 <UCurrent::tick()+0x168>
    262c:	2002      	movs	r0, #2
  if (currentOffsetting and not motor.motorPreEnabled)
    262e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lowPassFactor = 300/1; // use new value only
    2632:	87a0      	strh	r0, [r4, #60]	; 0x3c
  if (currentOffsetting and not motor.motorPreEnabled)
    2634:	2b00      	cmp	r3, #0
    2636:	d169      	bne.n	270c <UCurrent::tick()+0xfc>
  else if (motor.motorPreEnabled and not currentOffsetting)
    2638:	4b62      	ldr	r3, [pc, #392]	; (27c4 <UCurrent::tick()+0x1b4>)
    263a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    263e:	2a00      	cmp	r2, #0
    2640:	f040 80a3 	bne.w	278a <UCurrent::tick()+0x17a>
  if (postpondCalibration > 0)
    2644:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2646:	2b00      	cmp	r3, #0
    2648:	dd01      	ble.n	264e <UCurrent::tick()+0x3e>
    postpondCalibration--;
    264a:	3b01      	subs	r3, #1
    264c:	64e3      	str	r3, [r4, #76]	; 0x4c
    motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 
    264e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                               (300 - lowPassFactor))/300 +
    2650:	f5c0 7296 	rsb	r2, r0, #300	; 0x12c
    2654:	4e5c      	ldr	r6, [pc, #368]	; (27c8 <UCurrent::tick()+0x1b8>)
    motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 
    2656:	fb02 f303 	mul.w	r3, r2, r3
    motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 
    265a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                               ad.motorCurrentRawAD[0] * lowPassFactor;
    265c:	4d5b      	ldr	r5, [pc, #364]	; (27cc <UCurrent::tick()+0x1bc>)
                               (300 - lowPassFactor))/300 +
    265e:	fb86 ec03 	smull	lr, ip, r6, r3
    2662:	17db      	asrs	r3, r3, #31
    motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 
    2664:	fb02 f101 	mul.w	r1, r2, r1
                               (300 - lowPassFactor))/300 +
    2668:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                               (300 - lowPassFactor))/300 +
    266c:	fb86 c601 	smull	ip, r6, r6, r1
    2670:	17c9      	asrs	r1, r1, #31
    2672:	ebc1 1166 	rsb	r1, r1, r6, asr #5
                               ad.motorCurrentRawAD[0] * lowPassFactor;
    2676:	8c2e      	ldrh	r6, [r5, #32]
                               (300 - lowPassFactor))/300 +
    2678:	fb00 3306 	mla	r3, r0, r6, r3
                               ad.motorCurrentRawAD[1] * lowPassFactor;
    267c:	8c6e      	ldrh	r6, [r5, #34]	; 0x22
                               (300 - lowPassFactor))/300 +
    267e:	fb00 1106 	mla	r1, r0, r6, r1
    return float(value - motorCurrentMOffset[1]) * scale;
    2682:	6a66      	ldr	r6, [r4, #36]	; 0x24
    motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 
    2684:	62a3      	str	r3, [r4, #40]	; 0x28
    motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 
    2686:	62e1      	str	r1, [r4, #44]	; 0x2c
    return float(value - motorCurrentMOffset[1]) * scale;
    2688:	1b89      	subs	r1, r1, r6
    268a:	ee07 1a90 	vmov	s15, r1
    return float(value - motorCurrentMOffset[0]) * scale;
    268e:	6a21      	ldr	r1, [r4, #32]
    2690:	1a5b      	subs	r3, r3, r1
    return float(value - motorCurrentMOffset[1]) * scale;
    2692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    return float(value - motorCurrentMOffset[0]) * scale;
    2696:	ee07 3a90 	vmov	s15, r3
    269a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] * (300 - lowPassFactor))/300 + ad.supplyCurrent * lowPassFactor;
    269e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    26a0:	8be9      	ldrh	r1, [r5, #30]
    26a2:	fb03 f202 	mul.w	r2, r3, r2
    26a6:	4b48      	ldr	r3, [pc, #288]	; (27c8 <UCurrent::tick()+0x1b8>)
    26a8:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
    26ac:	fb83 5302 	smull	r5, r3, r3, r2
    26b0:	17d2      	asrs	r2, r2, #31
    return float(value - motorCurrentMOffset[0]) * scale;
    26b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    26b6:	edd4 5a11 	vldr	s11, [r4, #68]	; 0x44
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] * (300 - lowPassFactor))/300 + ad.supplyCurrent * lowPassFactor;
    26ba:	ebc2 1263 	rsb	r2, r2, r3, asr #5
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    26be:	ed9f 6a44 	vldr	s12, [pc, #272]	; 27d0 <UCurrent::tick()+0x1c0>
    return float(value - motorCurrentMOffset[1]) * scale;
    26c2:	ee66 6a87 	vmul.f32	s13, s13, s14
  if (supplyAvgCnt > 3000)
    26c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] * (300 - lowPassFactor))/300 + ad.supplyCurrent * lowPassFactor;
    26c8:	fb00 2201 	mla	r2, r0, r1, r2
  if (supplyAvgCnt > 3000)
    26cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
  motorCurrentA[0] = getMotorCurrentM(0, motorCurrentMLowPass[0]);
    26d0:	edc4 7a05 	vstr	s15, [r4, #20]
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    26d4:	ee07 2a90 	vmov	s15, r2
  if (supplyAvgCnt > 3000)
    26d8:	4283      	cmp	r3, r0
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] * (300 - lowPassFactor))/300 + ad.supplyCurrent * lowPassFactor;
    26da:	6322      	str	r2, [r4, #48]	; 0x30
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    26dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motorCurrentA[1] = getMotorCurrentM(1, motorCurrentMLowPass[1]);
    26e0:	edc4 6a06 	vstr	s13, [r4, #24]
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    26e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    26e8:	ee87 7a86 	vdiv.f32	s14, s15, s12
    26ec:	ed84 7a07 	vstr	s14, [r4, #28]
  if (supplyAvgCnt > 3000)
    26f0:	dc47      	bgt.n	2782 <UCurrent::tick()+0x172>
  supplyCurrentAvg += ad.supplyCurrent;
    26f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
  supplyAvgCnt++;
    26f4:	3301      	adds	r3, #1
  supplyCurrentAvg += ad.supplyCurrent;
    26f6:	4411      	add	r1, r2
  supplyAvgCnt++;
    26f8:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
}
    26fc:	bd70      	pop	{r4, r5, r6, pc}
    26fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
  if (currentOffsetting and not motor.motorPreEnabled)
    2702:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lowPassFactor = 300/1; // use new value only
    2706:	87a0      	strh	r0, [r4, #60]	; 0x3c
  if (currentOffsetting and not motor.motorPreEnabled)
    2708:	2b00      	cmp	r3, #0
    270a:	d095      	beq.n	2638 <UCurrent::tick()+0x28>
  currentOffsetting = motor.motorPreEnabled;
    270c:	4b2d      	ldr	r3, [pc, #180]	; (27c4 <UCurrent::tick()+0x1b4>)
  if (postpondCalibration > 0)
    270e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  currentOffsetting = motor.motorPreEnabled;
    2710:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
  if (postpondCalibration > 0)
    2714:	2a00      	cmp	r2, #0
  currentOffsetting = motor.motorPreEnabled;
    2716:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
  if (postpondCalibration > 0)
    271a:	dd01      	ble.n	2720 <UCurrent::tick()+0x110>
    postpondCalibration--;
    271c:	3a01      	subs	r2, #1
    271e:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (motor.motorPreEnabled and postpondCalibration == 0)
    2720:	2900      	cmp	r1, #0
    2722:	d094      	beq.n	264e <UCurrent::tick()+0x3e>
    2724:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2726:	2a00      	cmp	r2, #0
    2728:	d191      	bne.n	264e <UCurrent::tick()+0x3e>
    if (motor.motorPreEnabledRestart)
    272a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
    272e:	bb99      	cbnz	r1, 2798 <UCurrent::tick()+0x188>
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    2730:	f240 102b 	movw	r0, #299	; 0x12b
    2734:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2736:	4924      	ldr	r1, [pc, #144]	; (27c8 <UCurrent::tick()+0x1b8>)
    2738:	fb00 f202 	mul.w	r2, r0, r2
    273c:	fb81 5302 	smull	r5, r3, r1, r2
    2740:	17d2      	asrs	r2, r2, #31
    2742:	4d22      	ldr	r5, [pc, #136]	; (27cc <UCurrent::tick()+0x1bc>)
    2744:	ebc2 1263 	rsb	r2, r2, r3, asr #5
      motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 299)/300 + ad.motorCurrentRawAD[1];
    2748:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    274a:	fb00 f303 	mul.w	r3, r0, r3
    274e:	fb81 0103 	smull	r0, r1, r1, r3
    2752:	17db      	asrs	r3, r3, #31
    2754:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    2758:	8c69      	ldrh	r1, [r5, #34]	; 0x22
    275a:	440b      	add	r3, r1
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    275c:	8c29      	ldrh	r1, [r5, #32]
    275e:	440a      	add	r2, r1
      motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 299)/300 + ad.motorCurrentRawAD[1];
    2760:	62e3      	str	r3, [r4, #44]	; 0x2c
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    2762:	62a2      	str	r2, [r4, #40]	; 0x28
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] * (300 - lowPassFactor))/300 + ad.supplyCurrent * lowPassFactor;
    2764:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    motorCurrentMOffset[1] = motorCurrentMLowPass[1];
    2766:	eddf 7a1b 	vldr	s15, [pc, #108]	; 27d4 <UCurrent::tick()+0x1c4>
    276a:	e9c4 2308 	strd	r2, r3, [r4, #32]
    276e:	eeb0 7a67 	vmov.f32	s14, s15
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] * (300 - lowPassFactor))/300 + ad.supplyCurrent * lowPassFactor;
    2772:	f5c0 7296 	rsb	r2, r0, #300	; 0x12c
    motorCurrentMOffset[1] = motorCurrentMLowPass[1];
    2776:	e792      	b.n	269e <UCurrent::tick()+0x8e>
    lowPassFactor = 300/150; // time constant about 150ms
  else
    // use half the sample interval
    lowPassFactor = 2*300/logger.logInterval_ms;
    2778:	f44f 7016 	mov.w	r0, #600	; 0x258
    277c:	fbb0 f0f2 	udiv	r0, r0, r2
    2780:	e7bf      	b.n	2702 <UCurrent::tick()+0xf2>
    2782:	2301      	movs	r3, #1
  supplyAvgCnt++;
    2784:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
}
    2788:	bd70      	pop	{r4, r5, r6, pc}
  currentOffsetting = motor.motorPreEnabled;
    278a:	2101      	movs	r1, #1
    postpondCalibration--;
    278c:	f240 122b 	movw	r2, #299	; 0x12b
  currentOffsetting = motor.motorPreEnabled;
    2790:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    postpondCalibration--;
    2794:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (motor.motorPreEnabled and postpondCalibration == 0)
    2796:	e7c5      	b.n	2724 <UCurrent::tick()+0x114>
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    2798:	4d0c      	ldr	r5, [pc, #48]	; (27cc <UCurrent::tick()+0x1bc>)
      motor.motorPreEnabledRestart = false;
    279a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    279e:	f44f 7296 	mov.w	r2, #300	; 0x12c
    27a2:	8c2b      	ldrh	r3, [r5, #32]
      usb.send("# motor.motorPreEnabledRestart=true\n");
    27a4:	490c      	ldr	r1, [pc, #48]	; (27d8 <UCurrent::tick()+0x1c8>)
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    27a6:	fb02 f303 	mul.w	r3, r2, r3
      usb.send("# motor.motorPreEnabledRestart=true\n");
    27aa:	480c      	ldr	r0, [pc, #48]	; (27dc <UCurrent::tick()+0x1cc>)
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    27ac:	62a3      	str	r3, [r4, #40]	; 0x28
      motorCurrentMLowPass[1] = ad.motorCurrentRawAD[1] * 300;
    27ae:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    27b0:	fb02 f303 	mul.w	r3, r2, r3
    27b4:	62e3      	str	r3, [r4, #44]	; 0x2c
      usb.send("# motor.motorPreEnabledRestart=true\n");
    27b6:	f009 feb1 	bl	c51c <UUSB::send(char const*)>
    motorCurrentMOffset[1] = motorCurrentMLowPass[1];
    27ba:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    27be:	e7d1      	b.n	2764 <UCurrent::tick()+0x154>
    27c0:	2000e240 	.word	0x2000e240
    27c4:	2000e4bc 	.word	0x2000e4bc
    27c8:	1b4e81b5 	.word	0x1b4e81b5
    27cc:	2000d89c 	.word	0x2000d89c
    27d0:	43960000 	.word	0x43960000
    27d4:	00000000 	.word	0x00000000
    27d8:	20007368 	.word	0x20007368
    27dc:	2000eab8 	.word	0x2000eab8

000027e0 <UCurrent::sendSupplyCurrent()>:
  if (supplyAvgCnt < 1)
    27e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    27e2:	2b00      	cmp	r3, #0
{
    27e4:	b510      	push	{r4, lr}
    27e6:	4604      	mov	r4, r0
    27e8:	b094      	sub	sp, #80	; 0x50
  if (supplyAvgCnt < 1)
    27ea:	dd20      	ble.n	282e <UCurrent::sendSupplyCurrent()+0x4e>
  snprintf(reply, MRL,"sca %.2f %d\r\n", float(supplyCurrentAvg) * scaleSupplyCurrent/supplyAvgCnt, supplyAvgCnt);
    27ec:	ee07 3a90 	vmov	s15, r3
    27f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    27f4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    27f8:	2140      	movs	r1, #64	; 0x40
    27fa:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
    27fe:	a804      	add	r0, sp, #16
    2800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2804:	4a0d      	ldr	r2, [pc, #52]	; (283c <UCurrent::sendSupplyCurrent()+0x5c>)
    2806:	9302      	str	r3, [sp, #8]
    2808:	ee67 7a87 	vmul.f32	s15, s15, s14
    280c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2810:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2814:	ed8d 7b00 	vstr	d7, [sp]
    2818:	f018 ff3c 	bl	1b694 <snprintf>
  supplyCurrentAvg = 0;
    281c:	2300      	movs	r3, #0
  usb.send(reply);
    281e:	a904      	add	r1, sp, #16
    2820:	4807      	ldr	r0, [pc, #28]	; (2840 <UCurrent::sendSupplyCurrent()+0x60>)
  supplyAvgCnt = 0;
    2822:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  usb.send(reply);
    2826:	f009 fe79 	bl	c51c <UUSB::send(char const*)>
}
    282a:	b014      	add	sp, #80	; 0x50
    282c:	bd10      	pop	{r4, pc}
    supplyAvgCnt = 1;
    282e:	2201      	movs	r2, #1
    2830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    2834:	4613      	mov	r3, r2
    2836:	6382      	str	r2, [r0, #56]	; 0x38
    2838:	e7dc      	b.n	27f4 <UCurrent::sendSupplyCurrent()+0x14>
    283a:	bf00      	nop
    283c:	20007340 	.word	0x20007340
    2840:	2000eab8 	.word	0x2000eab8

00002844 <UCurrent::sendData(int)>:
{
    2844:	b510      	push	{r4, lr}
    2846:	b094      	sub	sp, #80	; 0x50
  if (item == 0)
    2848:	b129      	cbz	r1, 2856 <UCurrent::sendData(int)+0x12>
  else if (item == 1)
    284a:	2901      	cmp	r1, #1
    284c:	d01f      	beq.n	288e <UCurrent::sendData(int)+0x4a>
  else if (item == 2)
    284e:	2902      	cmp	r1, #2
    2850:	d018      	beq.n	2884 <UCurrent::sendData(int)+0x40>
}
    2852:	b014      	add	sp, #80	; 0x50
    2854:	bd10      	pop	{r4, pc}
  snprintf(reply, MRL,"mca %.3f %.3f\r\n", motorCurrentA[0], motorCurrentA[1]);
    2856:	ed90 6a06 	vldr	s12, [r0, #24]
    285a:	2140      	movs	r1, #64	; 0x40
    285c:	ed90 7a05 	vldr	s14, [r0, #20]
    2860:	a804      	add	r0, sp, #16
    2862:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2866:	4a19      	ldr	r2, [pc, #100]	; (28cc <UCurrent::sendData(int)+0x88>)
    2868:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    286c:	ed8d 6b02 	vstr	d6, [sp, #8]
    2870:	ed8d 7b00 	vstr	d7, [sp]
    2874:	f018 ff0e 	bl	1b694 <snprintf>
  usb.send(reply);
    2878:	a904      	add	r1, sp, #16
    287a:	4815      	ldr	r0, [pc, #84]	; (28d0 <UCurrent::sendData(int)+0x8c>)
    287c:	f009 fe4e 	bl	c51c <UUSB::send(char const*)>
}
    2880:	b014      	add	sp, #80	; 0x50
    2882:	bd10      	pop	{r4, pc}
    2884:	b014      	add	sp, #80	; 0x50
    2886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendSupplyCurrent();
    288a:	f7ff bfa9 	b.w	27e0 <UCurrent::sendSupplyCurrent()>
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
    288e:	e9d0 0208 	ldrd	r0, r2, [r0, #32]
    2892:	4910      	ldr	r1, [pc, #64]	; (28d4 <UCurrent::sendData(int)+0x90>)
    2894:	fb81 4300 	smull	r4, r3, r1, r0
    2898:	17c0      	asrs	r0, r0, #31
    289a:	ebc0 1363 	rsb	r3, r0, r3, asr #5
    289e:	fb81 0102 	smull	r0, r1, r1, r2
    28a2:	17d2      	asrs	r2, r2, #31
    28a4:	ebc2 1061 	rsb	r0, r2, r1, asr #5
    28a8:	4a0b      	ldr	r2, [pc, #44]	; (28d8 <UCurrent::sendData(int)+0x94>)
    28aa:	2140      	movs	r1, #64	; 0x40
    28ac:	9000      	str	r0, [sp, #0]
           ad.motorCurrentRawAD[0], ad.motorCurrentRawAD[1]);
    28ae:	480b      	ldr	r0, [pc, #44]	; (28dc <UCurrent::sendData(int)+0x98>)
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
    28b0:	8c44      	ldrh	r4, [r0, #34]	; 0x22
    28b2:	8c00      	ldrh	r0, [r0, #32]
    28b4:	e9cd 0401 	strd	r0, r4, [sp, #4]
    28b8:	a804      	add	r0, sp, #16
    28ba:	f018 feeb 	bl	1b694 <snprintf>
  usb.send(reply);
    28be:	a904      	add	r1, sp, #16
    28c0:	4803      	ldr	r0, [pc, #12]	; (28d0 <UCurrent::sendData(int)+0x8c>)
    28c2:	f009 fe2b 	bl	c51c <UUSB::send(char const*)>
}
    28c6:	b014      	add	sp, #80	; 0x50
    28c8:	bd10      	pop	{r4, pc}
    28ca:	bf00      	nop
    28cc:	20007330 	.word	0x20007330
    28d0:	2000eab8 	.word	0x2000eab8
    28d4:	1b4e81b5 	.word	0x1b4e81b5
    28d8:	20007350 	.word	0x20007350
    28dc:	2000d89c 	.word	0x2000d89c

000028e0 <UCurrent::getSupplyCurrent()>:
  return motorCurrentMLowPass[2] * scaleSupplyCurrent / 300.0;
    28e0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    28e4:	ed90 7a11 	vldr	s14, [r0, #68]	; 0x44
    28e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    28ec:	ed9f 0a03 	vldr	s0, [pc, #12]	; 28fc <UCurrent::getSupplyCurrent()+0x1c>
    28f0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
    28f4:	ee87 0a80 	vdiv.f32	s0, s15, s0
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	43960000 	.word	0x43960000

00002900 <UCurrent::logIntervalChanged()>:
  if (logger.logInterval_ms <= 2)
    2900:	4b09      	ldr	r3, [pc, #36]	; (2928 <UCurrent::logIntervalChanged()+0x28>)
    2902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2904:	2b02      	cmp	r3, #2
    2906:	d905      	bls.n	2914 <UCurrent::logIntervalChanged()+0x14>
  else if (logger.logInterval_ms > 300)
    2908:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    290c:	d906      	bls.n	291c <UCurrent::logIntervalChanged()+0x1c>
    290e:	2302      	movs	r3, #2
    lowPassFactor = 300/1; // use new value only
    2910:	8783      	strh	r3, [r0, #60]	; 0x3c
}
    2912:	4770      	bx	lr
    2914:	f44f 7396 	mov.w	r3, #300	; 0x12c
    lowPassFactor = 300/1; // use new value only
    2918:	8783      	strh	r3, [r0, #60]	; 0x3c
}
    291a:	4770      	bx	lr
    lowPassFactor = 2*300/logger.logInterval_ms;
    291c:	f44f 7216 	mov.w	r2, #600	; 0x258
    2920:	fbb2 f3f3 	udiv	r3, r2, r3
    lowPassFactor = 300/1; // use new value only
    2924:	8783      	strh	r3, [r0, #60]	; 0x3c
}
    2926:	4770      	bx	lr
    2928:	2000e240 	.word	0x2000e240

0000292c <_GLOBAL__sub_I_current>:
}

void UCurrent::eePromSave()
{
  // eeConfig.pushWord(deviceID);
}
    292c:	b510      	push	{r4, lr}
    292e:	4c0d      	ldr	r4, [pc, #52]	; (2964 <_GLOBAL__sub_I_current+0x38>)
    2930:	4620      	mov	r0, r4
    2932:	f009 fc01 	bl	c138 <USubss::USubss()>
    2936:	2300      	movs	r3, #0
    2938:	4622      	mov	r2, r4
    293a:	490b      	ldr	r1, [pc, #44]	; (2968 <_GLOBAL__sub_I_current+0x3c>)
    293c:	6223      	str	r3, [r4, #32]
UCurrent current;
    293e:	4620      	mov	r0, r4
    2940:	f842 1b20 	str.w	r1, [r2], #32
    2944:	62a3      	str	r3, [r4, #40]	; 0x28
    2946:	6053      	str	r3, [r2, #4]
    2948:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    294c:	4a07      	ldr	r2, [pc, #28]	; (296c <_GLOBAL__sub_I_current+0x40>)
    294e:	4908      	ldr	r1, [pc, #32]	; (2970 <_GLOBAL__sub_I_current+0x44>)
    2950:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    2954:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    2958:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
}
    295c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UCurrent current;
    2960:	f016 baca 	b.w	18ef8 <__aeabi_atexit>
    2964:	2000da90 	.word	0x2000da90
    2968:	200080a0 	.word	0x200080a0
    296c:	20008f08 	.word	0x20008f08
    2970:	0000252d 	.word	0x0000252d

00002974 <UDisplay::sendHelp()>:
{
    2974:	b510      	push	{r4, lr}
  usb.send("# Display -------\r\n");
    2976:	4c07      	ldr	r4, [pc, #28]	; (2994 <UDisplay::sendHelp()+0x20>)
    2978:	4907      	ldr	r1, [pc, #28]	; (2998 <UDisplay::sendHelp()+0x24>)
    297a:	4620      	mov	r0, r4
    297c:	f009 fdce 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tdisp text \tSet a display line text\r\n");
    2980:	4906      	ldr	r1, [pc, #24]	; (299c <UDisplay::sendHelp()+0x28>)
    2982:	4620      	mov	r0, r4
    2984:	f009 fdca 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tdispon V \tenable (1) or disable (0) display\r\n");
    2988:	4620      	mov	r0, r4
    298a:	4905      	ldr	r1, [pc, #20]	; (29a0 <UDisplay::sendHelp()+0x2c>)
}
    298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tdispon V \tenable (1) or disable (0) display\r\n");
    2990:	f009 bdc4 	b.w	c51c <UUSB::send(char const*)>
    2994:	2000eab8 	.word	0x2000eab8
    2998:	20007500 	.word	0x20007500
    299c:	20007514 	.word	0x20007514
    29a0:	20007540 	.word	0x20007540

000029a4 <UDisplay::~UDisplay()>:
// #endif
#include "usubss.h"



class UDisplay : public USubss
    29a4:	b510      	push	{r4, lr}
    29a6:	4b05      	ldr	r3, [pc, #20]	; (29bc <UDisplay::~UDisplay()+0x18>)
    29a8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    29aa:	6840      	ldr	r0, [r0, #4]
    29ac:	6023      	str	r3, [r4, #0]
	if (__p)
    29ae:	b118      	cbz	r0, 29b8 <UDisplay::~UDisplay()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    29b0:	68e1      	ldr	r1, [r4, #12]
    29b2:	1a09      	subs	r1, r1, r0
    29b4:	f013 fe82 	bl	166bc <operator delete(void*, unsigned int)>
    29b8:	4620      	mov	r0, r4
    29ba:	bd10      	pop	{r4, pc}
    29bc:	2000802c 	.word	0x2000802c

000029c0 <UDisplay::decode(char const*)>:
{
    29c0:	b570      	push	{r4, r5, r6, lr}
    29c2:	460c      	mov	r4, r1
    29c4:	4606      	mov	r6, r0
  if (strncmp(buf, "disp ", 5) == 0)
    29c6:	2205      	movs	r2, #5
    29c8:	4912      	ldr	r1, [pc, #72]	; (2a14 <UDisplay::decode(char const*)+0x54>)
    29ca:	4620      	mov	r0, r4
    29cc:	f019 f91a 	bl	1bc04 <strncmp>
    29d0:	b1a8      	cbz	r0, 29fe <UDisplay::decode(char const*)+0x3e>
  else if (strncmp(buf, "dispon ", 7) == 0)
    29d2:	2207      	movs	r2, #7
    29d4:	4910      	ldr	r1, [pc, #64]	; (2a18 <UDisplay::decode(char const*)+0x58>)
    29d6:	4620      	mov	r0, r4
    29d8:	f019 f914 	bl	1bc04 <strncmp>
    29dc:	b108      	cbz	r0, 29e2 <UDisplay::decode(char const*)+0x22>
    used = false;
    29de:	2000      	movs	r0, #0
}
    29e0:	bd70      	pop	{r4, r5, r6, pc}
    int v = strtol(p1, nullptr, 10);
    29e2:	4601      	mov	r1, r0
    29e4:	220a      	movs	r2, #10
    29e6:	1de0      	adds	r0, r4, #7
    29e8:	f018 fc64 	bl	1b2b4 <strtol>
    29ec:	4603      	mov	r3, r0
  bool used = true;
    29ee:	2001      	movs	r0, #1
    useDisplay = v == 1;
    29f0:	1a1b      	subs	r3, r3, r0
    29f2:	fab3 f383 	clz	r3, r3
    29f6:	095b      	lsrs	r3, r3, #5
    29f8:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
    29fc:	bd70      	pop	{r4, r5, r6, pc}

void UDisplay::setLine(const char* line)
{
  strncpy(lineFree, line, MAX_LINE_LENGTH);
    29fe:	4605      	mov	r5, r0
    2a00:	2227      	movs	r2, #39	; 0x27
    2a02:	1d61      	adds	r1, r4, #5
    2a04:	f106 0044 	add.w	r0, r6, #68	; 0x44
    2a08:	f019 f942 	bl	1bc90 <strncpy>
  bool used = true;
    2a0c:	2001      	movs	r0, #1
  lineFree[MAX_LINE_LENGTH-1] = '\0';
    2a0e:	f886 506b 	strb.w	r5, [r6, #107]	; 0x6b
}
    2a12:	bd70      	pop	{r4, r5, r6, pc}
    2a14:	200074dc 	.word	0x200074dc
    2a18:	200074e4 	.word	0x200074e4

00002a1c <UDisplay::sendData(int)>:
  if (item == 0)
    2a1c:	b101      	cbz	r1, 2a20 <UDisplay::sendData(int)+0x4>
    2a1e:	4770      	bx	lr
{
    2a20:	b510      	push	{r4, lr}
  snprintf(s, MSL, "# '%s';'%s';'%s'\r\n", lineName, lineState, lineFree);
    2a22:	f100 016c 	add.w	r1, r0, #108	; 0x6c
{
    2a26:	b0a8      	sub	sp, #160	; 0xa0
  snprintf(s, MSL, "# '%s';'%s';'%s'\r\n", lineName, lineState, lineFree);
    2a28:	f100 0444 	add.w	r4, r0, #68	; 0x44
    2a2c:	f100 031c 	add.w	r3, r0, #28
    2a30:	4a06      	ldr	r2, [pc, #24]	; (2a4c <UDisplay::sendData(int)+0x30>)
    2a32:	a802      	add	r0, sp, #8
    2a34:	e9cd 1400 	strd	r1, r4, [sp]
    2a38:	2196      	movs	r1, #150	; 0x96
    2a3a:	f018 fe2b 	bl	1b694 <snprintf>
  usb.send(s);
    2a3e:	a902      	add	r1, sp, #8
    2a40:	4803      	ldr	r0, [pc, #12]	; (2a50 <UDisplay::sendData(int)+0x34>)
    2a42:	f009 fd6b 	bl	c51c <UUSB::send(char const*)>
}
    2a46:	b028      	add	sp, #160	; 0xa0
    2a48:	bd10      	pop	{r4, pc}
    2a4a:	bf00      	nop
    2a4c:	200074ec 	.word	0x200074ec
    2a50:	2000eab8 	.word	0x2000eab8

00002a54 <UDisplay::setup()>:
{
    2a54:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (dss == nullptr)
    2a56:	6984      	ldr	r4, [r0, #24]
{
    2a58:	b085      	sub	sp, #20
    2a5a:	4605      	mov	r5, r0
  if (dss == nullptr)
    2a5c:	b374      	cbz	r4, 2abc <UDisplay::setup()+0x68>
  if(!dss->begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
    2a5e:	2301      	movs	r3, #1
    2a60:	223c      	movs	r2, #60	; 0x3c
    2a62:	2102      	movs	r1, #2
    2a64:	4620      	mov	r0, r4
    2a66:	9300      	str	r3, [sp, #0]
    2a68:	f7fe fc4e 	bl	1308 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>
    2a6c:	b308      	cbz	r0, 2ab2 <UDisplay::setup()+0x5e>
  Wire.setClock(1000000);
    2a6e:	491c      	ldr	r1, [pc, #112]	; (2ae0 <UDisplay::setup()+0x8c>)
  for (int i=0; i < 4; i++)
    2a70:	2700      	movs	r7, #0
  Wire.setClock(1000000);
    2a72:	481c      	ldr	r0, [pc, #112]	; (2ae4 <UDisplay::setup()+0x90>)
    2a74:	f00c f93e 	bl	ecf4 <TwoWire::setClock(unsigned long)>
    for (int c = 0; c < 8; c++) // send in smaller chunks (16 bytes)
    2a78:	b2fe      	uxtb	r6, r7
    2a7a:	2400      	movs	r4, #0
      dss->display(i, c);
    2a7c:	b2e2      	uxtb	r2, r4
    for (int c = 0; c < 8; c++) // send in smaller chunks (16 bytes)
    2a7e:	3401      	adds	r4, #1
      dss->display(i, c);
    2a80:	4631      	mov	r1, r6
    2a82:	69a8      	ldr	r0, [r5, #24]
    2a84:	f7fe fe1e 	bl	16c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>
    for (int c = 0; c < 8; c++) // send in smaller chunks (16 bytes)
    2a88:	2c08      	cmp	r4, #8
    2a8a:	d1f7      	bne.n	2a7c <UDisplay::setup()+0x28>
  for (int i=0; i < 4; i++)
    2a8c:	3701      	adds	r7, #1
    2a8e:	2f04      	cmp	r7, #4
    2a90:	d1f2      	bne.n	2a78 <UDisplay::setup()+0x24>
  delay(400); // Pause for 400 ms seconds
    2a92:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2a96:	f013 f9a3 	bl	15de0 <delay>
  addPublistItem("display", "Get current display text");
    2a9a:	4628      	mov	r0, r5
    2a9c:	4a12      	ldr	r2, [pc, #72]	; (2ae8 <UDisplay::setup()+0x94>)
    2a9e:	4913      	ldr	r1, [pc, #76]	; (2aec <UDisplay::setup()+0x98>)
    2aa0:	f009 fc6e 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    2aa4:	4629      	mov	r1, r5
    2aa6:	4812      	ldr	r0, [pc, #72]	; (2af0 <UDisplay::setup()+0x9c>)
}
    2aa8:	b005      	add	sp, #20
    2aaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  usb.addSubscriptionService(this);
    2aae:	f00a b961 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    usb.send("# UDisplay::setup: SSD1306 allocation failed\n");
    2ab2:	4910      	ldr	r1, [pc, #64]	; (2af4 <UDisplay::setup()+0xa0>)
    2ab4:	480e      	ldr	r0, [pc, #56]	; (2af0 <UDisplay::setup()+0x9c>)
    2ab6:	f009 fd31 	bl	c51c <UUSB::send(char const*)>
    2aba:	e7d8      	b.n	2a6e <UDisplay::setup()+0x1a>
      dss = new Adafruit_SSD1306(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire1, OLED_RESET, I2C_CLOCK); //, 1000000, 1000000);
    2abc:	206c      	movs	r0, #108	; 0x6c
    2abe:	f013 fdfb 	bl	166b8 <operator new(unsigned int)>
    2ac2:	4a0d      	ldr	r2, [pc, #52]	; (2af8 <UDisplay::setup()+0xa4>)
    2ac4:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <UDisplay::setup()+0x8c>)
    2ac6:	4604      	mov	r4, r0
    2ac8:	2180      	movs	r1, #128	; 0x80
    2aca:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ad2:	4b0a      	ldr	r3, [pc, #40]	; (2afc <UDisplay::setup()+0xa8>)
    2ad4:	9200      	str	r2, [sp, #0]
    2ad6:	2220      	movs	r2, #32
    2ad8:	f7fe fad2 	bl	1080 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>
    2adc:	61ac      	str	r4, [r5, #24]
    2ade:	e7be      	b.n	2a5e <UDisplay::setup()+0xa>
    2ae0:	000f4240 	.word	0x000f4240
    2ae4:	20009524 	.word	0x20009524
    2ae8:	200074b8 	.word	0x200074b8
    2aec:	200074d4 	.word	0x200074d4
    2af0:	2000eab8 	.word	0x2000eab8
    2af4:	20007488 	.word	0x20007488
    2af8:	000186a0 	.word	0x000186a0
    2afc:	20009664 	.word	0x20009664

00002b00 <UDisplay::tick()>:
  tickCnt++;
    2b00:	6943      	ldr	r3, [r0, #20]
  if (useDisplay)
    2b02:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
  tickCnt++;
    2b06:	3301      	adds	r3, #1
    2b08:	6143      	str	r3, [r0, #20]
  if (useDisplay)
    2b0a:	b1ba      	cbz	r2, 2b3c <UDisplay::tick()+0x3c>
    bool fast = tickCnt % 26 == 0;
    2b0c:	4a88      	ldr	r2, [pc, #544]	; (2d30 <UDisplay::tick()+0x230>)
    bool slow = tickCnt % 155 == 0;
    2b0e:	4989      	ldr	r1, [pc, #548]	; (2d34 <UDisplay::tick()+0x234>)
{
    2b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bool fast = tickCnt % 26 == 0;
    2b14:	fb82 6203 	smull	r6, r2, r2, r3
    2b18:	17dd      	asrs	r5, r3, #31
    2b1a:	4604      	mov	r4, r0
    2b1c:	201a      	movs	r0, #26
    2b1e:	ebc5 05e2 	rsb	r5, r5, r2, asr #3
    bool slow = tickCnt % 155 == 0;
    2b22:	4a85      	ldr	r2, [pc, #532]	; (2d38 <UDisplay::tick()+0x238>)
{
    2b24:	b08e      	sub	sp, #56	; 0x38
    bool fast = tickCnt % 26 == 0;
    2b26:	fb00 3515 	mls	r5, r0, r5, r3
    bool slow = tickCnt % 155 == 0;
    2b2a:	fb01 2303 	mla	r3, r1, r3, r2
    2b2e:	4a83      	ldr	r2, [pc, #524]	; (2d3c <UDisplay::tick()+0x23c>)
    if (fast or slow)
    2b30:	4293      	cmp	r3, r2
    2b32:	d904      	bls.n	2b3e <UDisplay::tick()+0x3e>
    2b34:	b11d      	cbz	r5, 2b3e <UDisplay::tick()+0x3e>
}
    2b36:	b00e      	add	sp, #56	; 0x38
    2b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b3c:	4770      	bx	lr
      dss->clearDisplay();
    2b3e:	69a0      	ldr	r0, [r4, #24]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2b40:	f04f 1901 	mov.w	r9, #65537	; 0x10001
    2b44:	f7fe fdae 	bl	16a4 <Adafruit_SSD1306::clearDisplay()>
      dss->setCursor(42,16);             // Start at row 8 (line 2), 16 = row 3
    2b48:	69a0      	ldr	r0, [r4, #24]
    cursor_x = x;
    2b4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      snprintf(lineName, MAX_LINE_LENGTH, "%d %s\n", robot.deviceID, robot.getRobotName());
    2b4e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2d68 <UDisplay::tick()+0x268>
      dss->setTextSize(2);             // Draw 1x or 2X-scale text
    2b52:	2102      	movs	r1, #2
      snprintf(lineName, MAX_LINE_LENGTH, "%d %s\n", robot.deviceID, robot.getRobotName());
    2b54:	f104 061c 	add.w	r6, r4, #28
    2b58:	6103      	str	r3, [r0, #16]
      lineName[10] = '\0';
    2b5a:	2700      	movs	r7, #0
      dss->setTextSize(2);             // Draw 1x or 2X-scale text
    2b5c:	f00c fe56 	bl	f80c <Adafruit_GFX::setTextSize(unsigned char)>
      snprintf(lineName, MAX_LINE_LENGTH, "%d %s\n", robot.deviceID, robot.getRobotName());
    2b60:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2b64:	69a2      	ldr	r2, [r4, #24]
    2b66:	4630      	mov	r0, r6
    2b68:	2128      	movs	r1, #40	; 0x28
    2b6a:	f8c2 9014 	str.w	r9, [r2, #20]
    2b6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
    2b72:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
    2b76:	9200      	str	r2, [sp, #0]
    2b78:	4a71      	ldr	r2, [pc, #452]	; (2d40 <UDisplay::tick()+0x240>)
    2b7a:	f018 fd8b 	bl	1b694 <snprintf>
      dss->print(F(lineName));
    2b7e:	f8d4 a018 	ldr.w	sl, [r4, #24]
							  return write((const uint8_t *)str, strlen(str)); }
    2b82:	4630      	mov	r0, r6
      lineName[10] = '\0';
    2b84:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
    2b88:	f01a fafa 	bl	1d180 <strlen>
    2b8c:	f8da 3000 	ldr.w	r3, [sl]
    2b90:	4631      	mov	r1, r6
    2b92:	4602      	mov	r2, r0
    2b94:	685b      	ldr	r3, [r3, #4]
    2b96:	4650      	mov	r0, sl
    2b98:	4798      	blx	r3
      dss->setTextSize(1);             // Normal 1:1 pixel scale
    2b9a:	69a0      	ldr	r0, [r4, #24]
    2b9c:	2101      	movs	r1, #1
    2b9e:	f00c fe35 	bl	f80c <Adafruit_GFX::setTextSize(unsigned char)>
      if (irdist.useDistSensor)
    2ba2:	4b68      	ldr	r3, [pc, #416]	; (2d44 <UDisplay::tick()+0x244>)
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2ba4:	ed98 7a05 	vldr	s14, [r8, #20]
      if (irdist.useDistSensor)
    2ba8:	7f1b      	ldrb	r3, [r3, #28]
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2baa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      if (irdist.useDistSensor)
    2bae:	42bb      	cmp	r3, r7
      if (imu2.imuAvailable > 0)
    2bb0:	4b65      	ldr	r3, [pc, #404]	; (2d48 <UDisplay::tick()+0x248>)
    2bb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      if (irdist.useDistSensor)
    2bb4:	bf08      	it	eq
    2bb6:	f04f 0e44 	moveq.w	lr, #68	; 0x44
      if (not motor.m1ok)
    2bba:	4b64      	ldr	r3, [pc, #400]	; (2d4c <UDisplay::tick()+0x24c>)
      if (irdist.useDistSensor)
    2bbc:	bf18      	it	ne
    2bbe:	f04f 0e64 	movne.w	lr, #100	; 0x64
      if (imu2.imuAvailable > 0)
    2bc2:	42ba      	cmp	r2, r7
      if (not motor.m1ok)
    2bc4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
      if (not motor.m2ok)
    2bc8:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
      if (imu2.imuAvailable > 0)
    2bcc:	bfd4      	ite	le
    2bce:	f04f 0c49 	movle.w	ip, #73	; 0x49
    2bd2:	f04f 0c69 	movgt.w	ip, #105	; 0x69
      if (usb.usbIsUp)
    2bd6:	4b5e      	ldr	r3, [pc, #376]	; (2d50 <UDisplay::tick()+0x250>)
      if (not motor.m1ok)
    2bd8:	42ba      	cmp	r2, r7
      if (usbhost.manOverride)
    2bda:	4a5e      	ldr	r2, [pc, #376]	; (2d54 <UDisplay::tick()+0x254>)
      if (usb.usbIsUp)
    2bdc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
      if (usbhost.manOverride)
    2be0:	f892 a014 	ldrb.w	sl, [r2, #20]
      if (not motor.m1ok)
    2be4:	bf14      	ite	ne
    2be6:	226d      	movne	r2, #109	; 0x6d
    2be8:	224d      	moveq	r2, #77	; 0x4d
      if (not motor.m2ok)
    2bea:	42b9      	cmp	r1, r7
      if (asenc.asencValid[0])
    2bec:	495a      	ldr	r1, [pc, #360]	; (2d58 <UDisplay::tick()+0x258>)
      if (not motor.m2ok)
    2bee:	bf14      	ite	ne
    2bf0:	206d      	movne	r0, #109	; 0x6d
    2bf2:	204d      	moveq	r0, #77	; 0x4d
      if (usb.usbIsUp)
    2bf4:	42bb      	cmp	r3, r7
      dss->setTextColor(SSD1306_WHITE);        // Draw white text
    2bf6:	69a3      	ldr	r3, [r4, #24]
      if (asenc.asencValid[0])
    2bf8:	7f09      	ldrb	r1, [r1, #28]
      if (usb.usbIsUp)
    2bfa:	bf18      	it	ne
    2bfc:	2675      	movne	r6, #117	; 0x75
    2bfe:	f8c3 9014 	str.w	r9, [r3, #20]
    2c02:	bf08      	it	eq
    2c04:	2655      	moveq	r6, #85	; 0x55
    cursor_x = x;
    2c06:	f44f 19c0 	mov.w	r9, #1572864	; 0x180000
      if (usbhost.manOverride)
    2c0a:	45ba      	cmp	sl, r7
    2c0c:	f8c3 9010 	str.w	r9, [r3, #16]
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c10:	9205      	str	r2, [sp, #20]
      if (usbhost.manOverride)
    2c12:	bf14      	ite	ne
    2c14:	2267      	movne	r2, #103	; 0x67
    2c16:	2247      	moveq	r2, #71	; 0x47
      if (asenc.asencValid[0])
    2c18:	42b9      	cmp	r1, r7
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c1a:	e9cd ce08 	strd	ip, lr, [sp, #32]
    2c1e:	e9cd 0606 	strd	r0, r6, [sp, #24]
    2c22:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
    2c26:	f104 066c 	add.w	r6, r4, #108	; 0x6c
    2c2a:	920a      	str	r2, [sp, #40]	; 0x28
      if (asenc.asencValid[0])
    2c2c:	bf0c      	ite	eq
    2c2e:	2241      	moveq	r2, #65	; 0x41
    2c30:	2261      	movne	r2, #97	; 0x61
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c32:	9304      	str	r3, [sp, #16]
               float(service.time_us % 100000000) * 1e-6,
    2c34:	4b49      	ldr	r3, [pc, #292]	; (2d5c <UDisplay::tick()+0x25c>)
      dss->println(F(lineFree));
    2c36:	f104 0844 	add.w	r8, r4, #68	; 0x44
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c3a:	920b      	str	r2, [sp, #44]	; 0x2c
    2c3c:	ed8d 7b02 	vstr	d7, [sp, #8]
               float(service.time_us % 100000000) * 1e-6,
    2c40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    2c44:	a336      	add	r3, pc, #216	; (adr r3, 2d20 <UDisplay::tick()+0x220>)
    2c46:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c4a:	f016 fc25 	bl	19498 <__aeabi_uldivmod>
    2c4e:	ee07 2a90 	vmov	s15, r2
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c52:	2128      	movs	r1, #40	; 0x28
    2c54:	4a42      	ldr	r2, [pc, #264]	; (2d60 <UDisplay::tick()+0x260>)
               float(service.time_us % 100000000) * 1e-6,
    2c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c5a:	4630      	mov	r0, r6
    2c5c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 2d28 <UDisplay::tick()+0x228>
               float(service.time_us % 100000000) * 1e-6,
    2c60:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c64:	ee27 7b06 	vmul.f64	d7, d7, d6
    2c68:	ed8d 7b00 	vstr	d7, [sp]
    2c6c:	f018 fd12 	bl	1b694 <snprintf>
      dss->println(F(lineState));    
    2c70:	f8d4 9018 	ldr.w	r9, [r4, #24]
    2c74:	4630      	mov	r0, r6
      lineState[MAX_LINE_LENGTH-1] = '\0';
    2c76:	f884 7093 	strb.w	r7, [r4, #147]	; 0x93
    2c7a:	f01a fa81 	bl	1d180 <strlen>
    2c7e:	f8d9 3000 	ldr.w	r3, [r9]
    2c82:	4602      	mov	r2, r0
    2c84:	4631      	mov	r1, r6
    2c86:	685b      	ldr	r3, [r3, #4]
    2c88:	4648      	mov	r0, r9
    2c8a:	4798      	blx	r3
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c8c:	4648      	mov	r0, r9
    2c8e:	f012 ff05 	bl	15a9c <Print::println()>
      dss->setCursor(0,0);             // Start at top-left corner
    2c92:	69a6      	ldr	r6, [r4, #24]
							  return write((const uint8_t *)str, strlen(str)); }
    2c94:	4640      	mov	r0, r8
    2c96:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    2c9a:	6137      	str	r7, [r6, #16]
    2c9c:	f01a fa70 	bl	1d180 <strlen>
    2ca0:	6833      	ldr	r3, [r6, #0]
    2ca2:	4602      	mov	r2, r0
    2ca4:	4641      	mov	r1, r8
    2ca6:	685b      	ldr	r3, [r3, #4]
    2ca8:	4630      	mov	r0, r6
    2caa:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2cac:	4630      	mov	r0, r6
    2cae:	f012 fef5 	bl	15a9c <Print::println()>
      if (fast)
    2cb2:	b1fd      	cbz	r5, 2cf4 <UDisplay::tick()+0x1f4>
        dss->display(updSlowLine, updSlowCol++);
    2cb4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    2cb8:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    2cbc:	1c53      	adds	r3, r2, #1
    2cbe:	69a0      	ldr	r0, [r4, #24]
    2cc0:	b2d2      	uxtb	r2, r2
    2cc2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    2cc6:	f7fe fcfd 	bl	16c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>
        if (updSlowCol >= 8)
    2cca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    2cce:	2b07      	cmp	r3, #7
    2cd0:	f77f af31 	ble.w	2b36 <UDisplay::tick()+0x36>
          updSlowLine = (updSlowLine + 1) % 3; // slow is first 3 lines only
    2cd4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    2cd8:	4b22      	ldr	r3, [pc, #136]	; (2d64 <UDisplay::tick()+0x264>)
    2cda:	3201      	adds	r2, #1
          updSlowCol = 0;
    2cdc:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
          updSlowLine = (updSlowLine + 1) % 3; // slow is first 3 lines only
    2ce0:	fb83 1302 	smull	r1, r3, r3, r2
    2ce4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    2ce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2cec:	1ad2      	subs	r2, r2, r3
    2cee:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
}
    2cf2:	e720      	b.n	2b36 <UDisplay::tick()+0x36>
        dss->display(3, updFastCol);
    2cf4:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    2cf8:	2103      	movs	r1, #3
    2cfa:	69a0      	ldr	r0, [r4, #24]
    2cfc:	f7fe fce2 	bl	16c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>
        updFastCol = (updFastCol + 1) % 8; // send 16 bytes in one burst
    2d00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    2d04:	3301      	adds	r3, #1
    2d06:	1afa      	subs	r2, r7, r3
    2d08:	f003 0307 	and.w	r3, r3, #7
    2d0c:	f002 0207 	and.w	r2, r2, #7
    2d10:	bf58      	it	pl
    2d12:	4253      	negpl	r3, r2
    2d14:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    2d18:	e70d      	b.n	2b36 <UDisplay::tick()+0x36>
    2d1a:	bf00      	nop
    2d1c:	f3af 8000 	nop.w
    2d20:	05f5e100 	.word	0x05f5e100
    2d24:	00000000 	.word	0x00000000
    2d28:	a0b5ed8d 	.word	0xa0b5ed8d
    2d2c:	3eb0c6f7 	.word	0x3eb0c6f7
    2d30:	4ec4ec4f 	.word	0x4ec4ec4f
    2d34:	592fe593 	.word	0x592fe593
    2d38:	00d3680d 	.word	0x00d3680d
    2d3c:	01a6d01a 	.word	0x01a6d01a
    2d40:	20007460 	.word	0x20007460
    2d44:	2000e190 	.word	0x2000e190
    2d48:	2000cfd0 	.word	0x2000cfd0
    2d4c:	2000e4bc 	.word	0x2000e4bc
    2d50:	2000eab8 	.word	0x2000eab8
    2d54:	2000a400 	.word	0x2000a400
    2d58:	2000d9dc 	.word	0x2000d9dc
    2d5c:	2000d0c8 	.word	0x2000d0c8
    2d60:	20007468 	.word	0x20007468
    2d64:	55555556 	.word	0x55555556
    2d68:	2000e654 	.word	0x2000e654

00002d6c <UDisplay::setLine(char const*)>:
{
    2d6c:	b510      	push	{r4, lr}
  strncpy(lineFree, line, MAX_LINE_LENGTH);
    2d6e:	2227      	movs	r2, #39	; 0x27
{
    2d70:	4604      	mov	r4, r0
  strncpy(lineFree, line, MAX_LINE_LENGTH);
    2d72:	3044      	adds	r0, #68	; 0x44
    2d74:	f018 ff8c 	bl	1bc90 <strncpy>
  lineFree[MAX_LINE_LENGTH-1] = '\0';
    2d78:	2300      	movs	r3, #0
    2d7a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
}
    2d7e:	bd10      	pop	{r4, pc}

00002d80 <UDisplay::eePromSave()>:


/////////////////////////////////////

void UDisplay::eePromSave()
{
    2d80:	4603      	mov	r3, r0
  uint8_t v = useDisplay == 1;
  eeConfig.pushByte(v);
    2d82:	4802      	ldr	r0, [pc, #8]	; (2d8c <UDisplay::eePromSave()+0xc>)
    2d84:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
    2d88:	f000 b94a 	b.w	3020 <EEConfig::pushByte(unsigned char)>
    2d8c:	2000dbe8 	.word	0x2000dbe8

00002d90 <UDisplay::eePromLoad()>:
    return stringConfig;
    2d90:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <UDisplay::eePromLoad()+0x30>)

/////////////////////////////////////

void UDisplay::eePromLoad()
{
  if (not eeConfig.isStringConfig())
    2d92:	f893 2020 	ldrb.w	r2, [r3, #32]
    2d96:	b11a      	cbz	r2, 2da0 <UDisplay::eePromLoad()+0x10>
  }
  /** skip some bytes from the configuration stack
   * \param bytes is the number of bytes to skib. */
  void skipAddr(int bytes)
  {
    configAddr+=bytes;
    2d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2d9a:	3201      	adds	r2, #1
    2d9c:	625a      	str	r2, [r3, #36]	; 0x24
    2d9e:	4770      	bx	lr
{
    2da0:	b510      	push	{r4, lr}
    2da2:	4604      	mov	r4, r0
  {
    int f = eeConfig.readByte();
    2da4:	4618      	mov	r0, r3
    2da6:	f000 f987 	bl	30b8 <EEConfig::readByte()>
    if (f & 0x01)
    2daa:	f010 0001 	ands.w	r0, r0, #1
    2dae:	d003      	beq.n	2db8 <UDisplay::eePromLoad()+0x28>
      useDisplay = true;
    2db0:	2301      	movs	r3, #1
    2db2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      useDisplay = false;
  }
  else
    // display is robot specific
    eeConfig.skipAddr(1);
}
    2db6:	bd10      	pop	{r4, pc}
      useDisplay = false;
    2db8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
    2dbc:	bd10      	pop	{r4, pc}
    2dbe:	bf00      	nop
    2dc0:	2000dbe8 	.word	0x2000dbe8

00002dc4 <_GLOBAL__sub_I_display>:
    2dc4:	b510      	push	{r4, lr}
    2dc6:	4c0b      	ldr	r4, [pc, #44]	; (2df4 <_GLOBAL__sub_I_display+0x30>)
    2dc8:	4620      	mov	r0, r4
    2dca:	f009 f9b5 	bl	c138 <USubss::USubss()>
    2dce:	2300      	movs	r3, #0
    2dd0:	4909      	ldr	r1, [pc, #36]	; (2df8 <_GLOBAL__sub_I_display+0x34>)
    2dd2:	f04f 0c01 	mov.w	ip, #1
UDisplay display;
    2dd6:	4620      	mov	r0, r4
    2dd8:	61a3      	str	r3, [r4, #24]
    2dda:	6021      	str	r1, [r4, #0]
    2ddc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    2de0:	f884 c0a0 	strb.w	ip, [r4, #160]	; 0xa0
    2de4:	4a05      	ldr	r2, [pc, #20]	; (2dfc <_GLOBAL__sub_I_display+0x38>)
    2de6:	4906      	ldr	r1, [pc, #24]	; (2e00 <_GLOBAL__sub_I_display+0x3c>)
    2de8:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
}
    2dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UDisplay display;
    2df0:	f016 b882 	b.w	18ef8 <__aeabi_atexit>
    2df4:	2000db0c 	.word	0x2000db0c
    2df8:	200080b4 	.word	0x200080b4
    2dfc:	20008f08 	.word	0x20008f08
    2e00:	000029a5 	.word	0x000029a5

00002e04 <EEConfig::sendHelp()>:
    used = false;
  return used;
}

void EEConfig::sendHelp()
{
    2e04:	b570      	push	{r4, r5, r6, lr}
  const int MRL = 250;
  char reply[MRL];
  usb.send("# EE (configuration flash) --------\r\n");
    2e06:	4e1d      	ldr	r6, [pc, #116]	; (2e7c <EEConfig::sendHelp()+0x78>)
{
    2e08:	b0c0      	sub	sp, #256	; 0x100
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2e0a:	4c1d      	ldr	r4, [pc, #116]	; (2e80 <EEConfig::sendHelp()+0x7c>)
  usb.send("# EE (configuration flash) --------\r\n");
    2e0c:	491d      	ldr	r1, [pc, #116]	; (2e84 <EEConfig::sendHelp()+0x80>)
    2e0e:	4630      	mov	r0, r6
    2e10:	f009 fb84 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2e14:	f10d 0c04 	add.w	ip, sp, #4
  usb.send(reply);
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2e18:	4d1b      	ldr	r5, [pc, #108]	; (2e88 <EEConfig::sendHelp()+0x84>)
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2e1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2e22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2e28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e2c:	6823      	ldr	r3, [r4, #0]
  usb.send(reply);
    2e2e:	a901      	add	r1, sp, #4
    2e30:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2e32:	ac01      	add	r4, sp, #4
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2e34:	0c1a      	lsrs	r2, r3, #16
    2e36:	f82c 3b02 	strh.w	r3, [ip], #2
    2e3a:	f88c 2000 	strb.w	r2, [ip]
  usb.send(reply);
    2e3e:	f009 fb6d 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  usb.send(reply);
  snprintf(reply, MRL, "# -- \teeusb \tGet current configuration to USB\r\n");
    2e4e:	4d0f      	ldr	r5, [pc, #60]	; (2e8c <EEConfig::sendHelp()+0x88>)
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2e50:	c407      	stmia	r4!, {r0, r1, r2}
  usb.send(reply);
    2e52:	a901      	add	r1, sp, #4
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2e54:	7023      	strb	r3, [r4, #0]
  usb.send(reply);
    2e56:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \teeusb \tGet current configuration to USB\r\n");
    2e58:	ac01      	add	r4, sp, #4
  usb.send(reply);
    2e5a:	f009 fb5f 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \teeusb \tGet current configuration to USB\r\n");
    2e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usb.send(reply);
    2e6e:	a901      	add	r1, sp, #4
    2e70:	4630      	mov	r0, r6
    2e72:	f009 fb53 	bl	c51c <UUSB::send(char const*)>
}
    2e76:	b040      	add	sp, #256	; 0x100
    2e78:	bd70      	pop	{r4, r5, r6, pc}
    2e7a:	bf00      	nop
    2e7c:	2000eab8 	.word	0x2000eab8
    2e80:	200063f8 	.word	0x200063f8
    2e84:	200063d0 	.word	0x200063d0
    2e88:	2000642c 	.word	0x2000642c
    2e8c:	2000645c 	.word	0x2000645c

00002e90 <EEConfig::~EEConfig()>:
class EEConfig : public USubss
    2e90:	b510      	push	{r4, lr}
    2e92:	4b05      	ldr	r3, [pc, #20]	; (2ea8 <EEConfig::~EEConfig()+0x18>)
    2e94:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    2e96:	6840      	ldr	r0, [r0, #4]
    2e98:	6023      	str	r3, [r4, #0]
	if (__p)
    2e9a:	b118      	cbz	r0, 2ea4 <EEConfig::~EEConfig()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    2e9c:	68e1      	ldr	r1, [r4, #12]
    2e9e:	1a09      	subs	r1, r1, r0
    2ea0:	f013 fc0c 	bl	166bc <operator delete(void*, unsigned int)>
    2ea4:	4620      	mov	r0, r4
    2ea6:	bd10      	pop	{r4, pc}
    2ea8:	2000802c 	.word	0x2000802c

00002eac <EEConfig::EEConfig()>:
EEConfig::EEConfig()
    2eac:	b538      	push	{r3, r4, r5, lr}
    2eae:	4604      	mov	r4, r0
    2eb0:	f009 f942 	bl	c138 <USubss::USubss()>
  sbufCnt = 0;
    2eb4:	2300      	movs	r3, #0
EEConfig::EEConfig()
    2eb6:	480a      	ldr	r0, [pc, #40]	; (2ee0 <EEConfig::EEConfig()+0x34>)
    2eb8:	4a0a      	ldr	r2, [pc, #40]	; (2ee4 <EEConfig::EEConfig()+0x38>)
    2eba:	490b      	ldr	r1, [pc, #44]	; (2ee8 <EEConfig::EEConfig()+0x3c>)
    2ebc:	4d0b      	ldr	r5, [pc, #44]	; (2eec <EEConfig::EEConfig()+0x40>)
  sbufCnt = 0;
    2ebe:	61e3      	str	r3, [r4, #28]
  stringConfig = false;
    2ec0:	f884 3020 	strb.w	r3, [r4, #32]
  config = NULL;
    2ec4:	61a3      	str	r3, [r4, #24]
EEConfig::EEConfig()
    2ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2eca:	62e0      	str	r0, [r4, #44]	; 0x2c
    2ecc:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    2ece:	4620      	mov	r0, r4
EEConfig::EEConfig()
    2ed0:	6025      	str	r5, [r4, #0]
    2ed2:	63a1      	str	r1, [r4, #56]	; 0x38
    2ed4:	6422      	str	r2, [r4, #64]	; 0x40
    2ed6:	6163      	str	r3, [r4, #20]
    2ed8:	e9c4 210c 	strd	r2, r1, [r4, #48]	; 0x30
}
    2edc:	bd38      	pop	{r3, r4, r5, pc}
    2ede:	bf00      	nop
    2ee0:	2000648c 	.word	0x2000648c
    2ee4:	20006ac0 	.word	0x20006ac0
    2ee8:	20007158 	.word	0x20007158
    2eec:	20008078 	.word	0x20008078

00002ef0 <EEConfig::stringConfigToUSB(unsigned char const*, int)>:



void EEConfig::stringConfigToUSB(const uint8_t * configBuffer, int configBufferLength)
{
    2ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ef4:	b09f      	sub	sp, #124	; 0x7c
  int length = configBufferLength;
  const uint8_t * cfg = configBuffer;
  if (cfg == NULL)
    2ef6:	9101      	str	r1, [sp, #4]
    2ef8:	2900      	cmp	r1, #0
    2efa:	d05d      	beq.n	2fb8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xc8>
    2efc:	4690      	mov	r8, r2
    char s[MSL];
    char * p1 = s;
    int n = 0;
    int line = 0;
    int i = 0;
    while (i < length)
    2efe:	f1b8 0f00 	cmp.w	r8, #0
    2f02:	dd41      	ble.n	2f88 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x98>
    int i = 0;
    2f04:	2500      	movs	r5, #0
      snprintf(s, MSL, "#cfg%02d", line++);
      n += strlen(p1);
      p1 = &s[n];
      for (int j = 0; j < 32; j++)
      {
        snprintf(p1, MSL-n, " %02x", cfg[i]);
    2f06:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 2fe4 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xf4>
    int line = 0;
    2f0a:	46ab      	mov	fp, r5
      snprintf(s, MSL, "#cfg%02d", line++);
    2f0c:	465b      	mov	r3, fp
    2f0e:	4a31      	ldr	r2, [pc, #196]	; (2fd4 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe4>)
    2f10:	216e      	movs	r1, #110	; 0x6e
    2f12:	a802      	add	r0, sp, #8
    2f14:	f018 fbbe 	bl	1b694 <snprintf>
      n += strlen(p1);
    2f18:	a802      	add	r0, sp, #8
    2f1a:	f01a f931 	bl	1d180 <strlen>
    2f1e:	1e6f      	subs	r7, r5, #1
    2f20:	9b01      	ldr	r3, [sp, #4]
      snprintf(s, MSL, "#cfg%02d", line++);
    2f22:	f10b 0b01 	add.w	fp, fp, #1
      n += strlen(p1);
    2f26:	f105 0920 	add.w	r9, r5, #32
    2f2a:	4604      	mov	r4, r0
      p1 = &s[n];
    2f2c:	441f      	add	r7, r3
    2f2e:	f100 0308 	add.w	r3, r0, #8
    2f32:	eb0d 0603 	add.w	r6, sp, r3
      for (int j = 0; j < 32; j++)
    2f36:	e001      	b.n	2f3c <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x4c>
    2f38:	454d      	cmp	r5, r9
    2f3a:	d028      	beq.n	2f8e <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x9e>
        snprintf(p1, MSL-n, " %02x", cfg[i]);
    2f3c:	f1c4 016e 	rsb	r1, r4, #110	; 0x6e
    2f40:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    2f44:	4652      	mov	r2, sl
    2f46:	4630      	mov	r0, r6
    2f48:	f018 fba4 	bl	1b694 <snprintf>
        n += strlen(p1);
    2f4c:	4630      	mov	r0, r6
    2f4e:	f01a f917 	bl	1d180 <strlen>
        p1 = &s[n];
        i++;
    2f52:	3501      	adds	r5, #1
        n += strlen(p1);
    2f54:	4404      	add	r4, r0
        if (i >= length)
    2f56:	4545      	cmp	r5, r8
        p1 = &s[n];
    2f58:	f104 0308 	add.w	r3, r4, #8
    2f5c:	eb0d 0603 	add.w	r6, sp, r3
        if (i >= length)
    2f60:	dbea      	blt.n	2f38 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x48>
      if (i < length)
      { // not finished, so add a linefeed escape character
        // to make it easier to copy-paste into code
        *p1++ = '\\';
      }
      *p1++ = '\n';
    2f62:	f104 0378 	add.w	r3, r4, #120	; 0x78
    2f66:	250a      	movs	r5, #10
      *p1++ = '\0';
      usb.send(s);
    2f68:	a902      	add	r1, sp, #8
    2f6a:	481b      	ldr	r0, [pc, #108]	; (2fd8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
      *p1++ = '\n';
    2f6c:	eb0d 0203 	add.w	r2, sp, r3
      *p1++ = '\0';
    2f70:	2300      	movs	r3, #0
      *p1++ = '\n';
    2f72:	f802 5c70 	strb.w	r5, [r2, #-112]
      *p1++ = '\0';
    2f76:	7073      	strb	r3, [r6, #1]
      usb.send(s);
    2f78:	f009 fad0 	bl	c51c <UUSB::send(char const*)>
      if (n > MSL - 4)
    2f7c:	2c6a      	cmp	r4, #106	; 0x6a
    2f7e:	dd03      	ble.n	2f88 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x98>
        usb.send("# stringConfigToUSB error\n");
    2f80:	4916      	ldr	r1, [pc, #88]	; (2fdc <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xec>)
    2f82:	4815      	ldr	r0, [pc, #84]	; (2fd8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
    2f84:	f009 faca 	bl	c51c <UUSB::send(char const*)>
      p1 = s;
      n = 0;
    }
  }
}
    2f88:	b01f      	add	sp, #124	; 0x7c
    2f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *p1++ = '\\';
    2f8e:	f104 0378 	add.w	r3, r4, #120	; 0x78
    2f92:	225c      	movs	r2, #92	; 0x5c
      usb.send(s);
    2f94:	a902      	add	r1, sp, #8
    2f96:	4810      	ldr	r0, [pc, #64]	; (2fd8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
        *p1++ = '\\';
    2f98:	446b      	add	r3, sp
    2f9a:	f803 2c70 	strb.w	r2, [r3, #-112]
      *p1++ = '\n';
    2f9e:	230a      	movs	r3, #10
    2fa0:	7073      	strb	r3, [r6, #1]
      *p1++ = '\0';
    2fa2:	2300      	movs	r3, #0
    2fa4:	70b3      	strb	r3, [r6, #2]
      usb.send(s);
    2fa6:	f009 fab9 	bl	c51c <UUSB::send(char const*)>
      if (n > MSL - 4)
    2faa:	2c6a      	cmp	r4, #106	; 0x6a
    2fac:	ddae      	ble.n	2f0c <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x1c>
        usb.send("# stringConfigToUSB error\n");
    2fae:	490b      	ldr	r1, [pc, #44]	; (2fdc <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xec>)
    2fb0:	4809      	ldr	r0, [pc, #36]	; (2fd8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
    2fb2:	f009 fab3 	bl	c51c <UUSB::send(char const*)>
    while (i < length)
    2fb6:	e7a9      	b.n	2f0c <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x1c>
    cfg = config;
    2fb8:	6983      	ldr	r3, [r0, #24]
    length = configAddrMax;
    2fba:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    cfg = config;
    2fbe:	9301      	str	r3, [sp, #4]
  if (cfg == NULL)
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d19c      	bne.n	2efe <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe>
    usb.send("# error: configuration not generated as string\n");
    2fc4:	4906      	ldr	r1, [pc, #24]	; (2fe0 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xf0>)
    2fc6:	4804      	ldr	r0, [pc, #16]	; (2fd8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
}
    2fc8:	b01f      	add	sp, #124	; 0x7c
    2fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usb.send("# error: configuration not generated as string\n");
    2fce:	f009 baa5 	b.w	c51c <UUSB::send(char const*)>
    2fd2:	bf00      	nop
    2fd4:	20006398 	.word	0x20006398
    2fd8:	2000eab8 	.word	0x2000eab8
    2fdc:	200063ac 	.word	0x200063ac
    2fe0:	20006368 	.word	0x20006368
    2fe4:	200063a4 	.word	0x200063a4

00002fe8 <EEConfig::push32(unsigned long)>:
  
void EEConfig::push32(uint32_t value)
{
    2fe8:	b538      	push	{r3, r4, r5, lr}
  //   const int MSL = 100;
  //   char s[MSL];
  //   snprintf(s, MSL, "# ee saved: at %lu, value %lu\r\n", eePushAdr, value);
  //   usb.send(s);
  //
  if (stringConfig)
    2fea:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    2fee:	4604      	mov	r4, r0
    2ff0:	460d      	mov	r5, r1
  if (stringConfig)
    2ff2:	b123      	cbz	r3, 2ffe <EEConfig::push32(unsigned long)+0x16>
  {
    if (config != NULL)
    2ff4:	6983      	ldr	r3, [r0, #24]
    2ff6:	b153      	cbz	r3, 300e <EEConfig::push32(unsigned long)+0x26>
      memcpy(&config[configAddr], &value, 4);
    2ff8:	6a42      	ldr	r2, [r0, #36]	; 0x24
    2ffa:	5099      	str	r1, [r3, r2]
    2ffc:	e007      	b.n	300e <EEConfig::push32(unsigned long)+0x26>
  }
  else
  {
    eeprom_busy_wait();
    2ffe:	f013 f895 	bl	1612c <eeprom_is_ready>
    3002:	2800      	cmp	r0, #0
    3004:	d0fb      	beq.n	2ffe <EEConfig::push32(unsigned long)+0x16>
    eeprom_write_dword((uint32_t*)configAddr, value);
    3006:	4629      	mov	r1, r5
    3008:	6a60      	ldr	r0, [r4, #36]	; 0x24
    300a:	f013 fa09 	bl	16420 <eeprom_write_dword>
  }
  configAddr += 4;
  if (configAddr > configAddrMax)
    300e:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
  configAddr += 4;
    3012:	3304      	adds	r3, #4
  if (configAddr > configAddrMax)
    3014:	4293      	cmp	r3, r2
  configAddr += 4;
    3016:	6263      	str	r3, [r4, #36]	; 0x24
    configAddrMax = configAddr;
    3018:	bfc8      	it	gt
    301a:	62a3      	strgt	r3, [r4, #40]	; 0x28
}
    301c:	bd38      	pop	{r3, r4, r5, pc}
#define SENSE_CODE_KEYED(_asc_, _fmt_)
#define SENSE_CODE(_asc_, _ascq_, _msg_) case _asc_<<8 | _ascq_: return _msg_;
	ASC_NUM_LIST
    301e:	bf00      	nop

00003020 <EEConfig::pushByte(unsigned char)>:

////////////////////////////////////////////////

void EEConfig::pushByte(uint8_t value)
{ // save one byte
    3020:	b538      	push	{r3, r4, r5, lr}
  if (stringConfig)
    3022:	f890 3020 	ldrb.w	r3, [r0, #32]
{ // save one byte
    3026:	4604      	mov	r4, r0
    3028:	460d      	mov	r5, r1
  if (stringConfig)
    302a:	b123      	cbz	r3, 3036 <EEConfig::pushByte(unsigned char)+0x16>
  {
    if (config != NULL)
    302c:	6983      	ldr	r3, [r0, #24]
    302e:	b153      	cbz	r3, 3046 <EEConfig::pushByte(unsigned char)+0x26>
      config[configAddr] = value;
    3030:	6a42      	ldr	r2, [r0, #36]	; 0x24
    3032:	5499      	strb	r1, [r3, r2]
    3034:	e007      	b.n	3046 <EEConfig::pushByte(unsigned char)+0x26>
  }
  else
  {
    eeprom_busy_wait();
    3036:	f013 f879 	bl	1612c <eeprom_is_ready>
    303a:	2800      	cmp	r0, #0
    303c:	d0fb      	beq.n	3036 <EEConfig::pushByte(unsigned char)+0x16>
    eeprom_write_byte((uint8_t*)configAddr, value);
    303e:	4629      	mov	r1, r5
    3040:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3042:	f013 f947 	bl	162d4 <eeprom_write_byte>
  }
  configAddr++;
  if (configAddr > configAddrMax)
    3046:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
  configAddr++;
    304a:	3301      	adds	r3, #1
  if (configAddr > configAddrMax)
    304c:	4293      	cmp	r3, r2
  configAddr++;
    304e:	6263      	str	r3, [r4, #36]	; 0x24
    configAddrMax = configAddr;
    3050:	bfc8      	it	gt
    3052:	62a3      	strgt	r3, [r4, #40]	; 0x28
}
    3054:	bd38      	pop	{r3, r4, r5, pc}
    3056:	bf00      	nop

00003058 <EEConfig::pushWord(unsigned short)>:

////////////////////////////////////////////////

void EEConfig::pushWord(uint16_t value)
{ // save one byte
    3058:	b538      	push	{r3, r4, r5, lr}
  if (stringConfig)
    305a:	f890 3020 	ldrb.w	r3, [r0, #32]
{ // save one byte
    305e:	4604      	mov	r4, r0
    3060:	460d      	mov	r5, r1
  if (stringConfig)
    3062:	b123      	cbz	r3, 306e <EEConfig::pushWord(unsigned short)+0x16>
  {
    if (config != NULL)
    3064:	6983      	ldr	r3, [r0, #24]
    3066:	b153      	cbz	r3, 307e <EEConfig::pushWord(unsigned short)+0x26>
      memcpy(&config[configAddr], &value, 2);
    3068:	6a42      	ldr	r2, [r0, #36]	; 0x24
    306a:	5299      	strh	r1, [r3, r2]
    306c:	e007      	b.n	307e <EEConfig::pushWord(unsigned short)+0x26>
  }
  else
  {
    eeprom_busy_wait();
    306e:	f013 f85d 	bl	1612c <eeprom_is_ready>
    3072:	2800      	cmp	r0, #0
    3074:	d0fb      	beq.n	306e <EEConfig::pushWord(unsigned short)+0x16>
    eeprom_write_word((uint16_t*)configAddr, value);
    3076:	4629      	mov	r1, r5
    3078:	6a60      	ldr	r0, [r4, #36]	; 0x24
    307a:	f013 f9c5 	bl	16408 <eeprom_write_word>
  }
  configAddr += 2;
  if (configAddr > configAddrMax)
    307e:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
  configAddr += 2;
    3082:	3302      	adds	r3, #2
  if (configAddr > configAddrMax)
    3084:	4293      	cmp	r3, r2
  configAddr += 2;
    3086:	6263      	str	r3, [r4, #36]	; 0x24
    configAddrMax = configAddr;
    3088:	bfc8      	it	gt
    308a:	62a3      	strgt	r3, [r4, #40]	; 0x28
}
    308c:	bd38      	pop	{r3, r4, r5, pc}
    308e:	bf00      	nop

00003090 <EEConfig::read32()>:

//////////////////////////////////////////////

uint32_t EEConfig::read32()
{
    3090:	b538      	push	{r3, r4, r5, lr}
  uint32_t b;
  if (stringConfig)
    3092:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    3096:	4604      	mov	r4, r0
  if (stringConfig)
    3098:	b133      	cbz	r3, 30a8 <EEConfig::read32()+0x18>
  {
    if (config != NULL)
    309a:	6980      	ldr	r0, [r0, #24]
      b = *(uint32_t *)&config[configAddr];
    309c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if (config != NULL)
    309e:	b100      	cbz	r0, 30a2 <EEConfig::read32()+0x12>
      b = *(uint32_t *)&config[configAddr];
    30a0:	5940      	ldr	r0, [r0, r5]
  }
  else
  {
    b = eeprom_read_dword((uint32_t*)configAddr);
  }
  configAddr += 4;
    30a2:	3504      	adds	r5, #4
    30a4:	6265      	str	r5, [r4, #36]	; 0x24
  return b;
}
    30a6:	bd38      	pop	{r3, r4, r5, pc}
    b = eeprom_read_dword((uint32_t*)configAddr);
    30a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    30aa:	4628      	mov	r0, r5
  configAddr += 4;
    30ac:	3504      	adds	r5, #4
    b = eeprom_read_dword((uint32_t*)configAddr);
    30ae:	f013 f825 	bl	160fc <eeprom_read_dword>
  configAddr += 4;
    30b2:	6265      	str	r5, [r4, #36]	; 0x24
}
    30b4:	bd38      	pop	{r3, r4, r5, pc}
    30b6:	bf00      	nop

000030b8 <EEConfig::readByte()>:

/////////////////////////////////////////////////

uint8_t EEConfig::readByte()
{
    30b8:	b538      	push	{r3, r4, r5, lr}
  uint8_t b;
  if (stringConfig)
    30ba:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    30be:	4604      	mov	r4, r0
  if (stringConfig)
    30c0:	b133      	cbz	r3, 30d0 <EEConfig::readByte()+0x18>
  {
    if (config != NULL)
    30c2:	6980      	ldr	r0, [r0, #24]
      b = config[configAddr];
    30c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if (config != NULL)
    30c6:	b100      	cbz	r0, 30ca <EEConfig::readByte()+0x12>
      b = config[configAddr];
    30c8:	5d40      	ldrb	r0, [r0, r5]
  }
  else
  {
    b = eeprom_read_byte((uint8_t*)configAddr);
  }
  configAddr++;
    30ca:	3501      	adds	r5, #1
    30cc:	6265      	str	r5, [r4, #36]	; 0x24
  return b;
}
    30ce:	bd38      	pop	{r3, r4, r5, pc}
    b = eeprom_read_byte((uint8_t*)configAddr);
    30d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    30d2:	4628      	mov	r0, r5
  configAddr++;
    30d4:	3501      	adds	r5, #1
    b = eeprom_read_byte((uint8_t*)configAddr);
    30d6:	f012 ffc7 	bl	16068 <eeprom_read_byte>
  configAddr++;
    30da:	6265      	str	r5, [r4, #36]	; 0x24
}
    30dc:	bd38      	pop	{r3, r4, r5, pc}
    30de:	bf00      	nop

000030e0 <EEConfig::readWord()>:

/////////////////////////////////////////////////

uint16_t EEConfig::readWord()
{
    30e0:	b538      	push	{r3, r4, r5, lr}
  uint16_t b;
  if (stringConfig)
    30e2:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    30e6:	4604      	mov	r4, r0
  if (stringConfig)
    30e8:	b133      	cbz	r3, 30f8 <EEConfig::readWord()+0x18>
  {
    if (config != NULL)
    30ea:	6980      	ldr	r0, [r0, #24]
      b = *(uint16_t *)&config[configAddr];
    30ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if (config != NULL)
    30ee:	b100      	cbz	r0, 30f2 <EEConfig::readWord()+0x12>
      b = *(uint16_t *)&config[configAddr];
    30f0:	5b40      	ldrh	r0, [r0, r5]
  }
  else
  {
    b = eeprom_read_word((uint16_t*)configAddr);
  }
  configAddr += 2;
    30f2:	3502      	adds	r5, #2
    30f4:	6265      	str	r5, [r4, #36]	; 0x24
  return b;
}
    30f6:	bd38      	pop	{r3, r4, r5, pc}
    b = eeprom_read_word((uint16_t*)configAddr);
    30f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    30fa:	4628      	mov	r0, r5
  configAddr += 2;
    30fc:	3502      	adds	r5, #2
    b = eeprom_read_word((uint16_t*)configAddr);
    30fe:	f012 fff1 	bl	160e4 <eeprom_read_word>
  configAddr += 2;
    3102:	6265      	str	r5, [r4, #36]	; 0x24
}
    3104:	bd38      	pop	{r3, r4, r5, pc}
    3106:	bf00      	nop

00003108 <EEConfig::eePromSaveStatus(bool)>:
  
///////////////////////////////////////////////////

void EEConfig::eePromSaveStatus(bool toUSB)
{ // reserve first 4 bytes for dword count
    3108:	b5f0      	push	{r4, r5, r6, r7, lr}
  char s[MSL];
  // debug
  // debug end
  stringConfig = toUSB;
  // save space for used bytes in configuration
  configAddr = 4;
    310a:	2304      	movs	r3, #4
{ // reserve first 4 bytes for dword count
    310c:	4604      	mov	r4, r0
    310e:	b09d      	sub	sp, #116	; 0x74
  configAddrMax = 4;
  // save revision number
  push32(command.getRevisionNumber());
  // main values
  robot.eePromSave();
    3110:	4f33      	ldr	r7, [pc, #204]	; (31e0 <EEConfig::eePromSaveStatus(bool)+0xd8>)
  configAddr = 4;
    3112:	6263      	str	r3, [r4, #36]	; 0x24
{ // reserve first 4 bytes for dword count
    3114:	460d      	mov	r5, r1
  configAddrMax = 4;
    3116:	62a3      	str	r3, [r4, #40]	; 0x28
  stringConfig = toUSB;
    3118:	f884 1020 	strb.w	r1, [r4, #32]
  push32(command.getRevisionNumber());
    311c:	4831      	ldr	r0, [pc, #196]	; (31e4 <EEConfig::eePromSaveStatus(bool)+0xdc>)
    311e:	f7ff f8f9 	bl	2314 <UCommand::getRevisionNumber()>
    3122:	4601      	mov	r1, r0
    3124:	4620      	mov	r0, r4
    3126:	f7ff ff5f 	bl	2fe8 <EEConfig::push32(unsigned long)>
  robot.eePromSave();
    312a:	4638      	mov	r0, r7
    312c:	f008 fa1e 	bl	b56c <URobot::eePromSave()>
  // save gyro zero offset
  imu2.eePromSave();
    3130:	482d      	ldr	r0, [pc, #180]	; (31e8 <EEConfig::eePromSaveStatus(bool)+0xe0>)
    3132:	f001 fbcf 	bl	48d4 <UImu2::eePromSave()>
  // logger values
  logger.eePromSaveStatusLog();
    3136:	482d      	ldr	r0, [pc, #180]	; (31ec <EEConfig::eePromSaveStatus(bool)+0xe4>)
    3138:	f005 f90e 	bl	8358 <ULog::eePromSaveStatusLog()>
  // save line sensor calibration
  ls.eePromSaveLinesensor();
    313c:	482c      	ldr	r0, [pc, #176]	; (31f0 <EEConfig::eePromSaveStatus(bool)+0xe8>)
    313e:	f003 fd27 	bl	6b90 <ULineSensor::eePromSaveLinesensor()>
  // and IR distance sensor
  irdist.eePromSave();
    3142:	482c      	ldr	r0, [pc, #176]	; (31f4 <EEConfig::eePromSaveStatus(bool)+0xec>)
    3144:	f002 fa10 	bl	5568 <UIrDist::eePromSave()>
  // save servo configuration
  servo.eePromSave();
    3148:	482b      	ldr	r0, [pc, #172]	; (31f8 <EEConfig::eePromSaveStatus(bool)+0xf0>)
    314a:	f008 ff0f 	bl	bf6c <UServo::eePromSave()>
  // encoder calibration values
  encoder.eePromSave();
    314e:	482b      	ldr	r0, [pc, #172]	; (31fc <EEConfig::eePromSaveStatus(bool)+0xf4>)
    3150:	f000 fdcc 	bl	3cec <UEncoder::eePromSave()>
  display.eePromSave();
    3154:	482a      	ldr	r0, [pc, #168]	; (3200 <EEConfig::eePromSaveStatus(bool)+0xf8>)
    3156:	f7ff fe13 	bl	2d80 <UDisplay::eePromSave()>
  motor.eePromSave();
    315a:	482a      	ldr	r0, [pc, #168]	; (3204 <EEConfig::eePromSaveStatus(bool)+0xfc>)
    315c:	f005 fe28 	bl	8db0 <UMotor::eePromSave()>
  asenc.eePromSave();
    3160:	4829      	ldr	r0, [pc, #164]	; (3208 <EEConfig::eePromSaveStatus(bool)+0x100>)
    3162:	f7fe ffff 	bl	2164 <UAsEnc::eePromSave()>
  motortest.eePromSave();
    3166:	4829      	ldr	r0, [pc, #164]	; (320c <EEConfig::eePromSaveStatus(bool)+0x104>)
    3168:	f006 f86a 	bl	9240 <UMotorTest::eePromSave()>
  
//   eePromSaveEncoderCalibrateInfo();
  // then save length
  uint32_t cnt = configAddr;
  configAddr = 0;
    316c:	2100      	movs	r1, #0
  uint32_t cnt = configAddr;
    316e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  configAddr = 0;
    3170:	6261      	str	r1, [r4, #36]	; 0x24
    return deviceID > 0 and deviceID < MAX_ROBOT_NAMES;
    3172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3174:	3b01      	subs	r3, #1
  if (not robot.robotIDvalid())
    3176:	2b95      	cmp	r3, #149	; 0x95
    3178:	d91b      	bls.n	31b2 <EEConfig::eePromSaveStatus(bool)+0xaa>
  {
    // ignore ee-prom at next reboot
    push32(0);
    snprintf(s, MSL, "# EE-prom D set to default values at next reboot\r\n");
    317a:	af03      	add	r7, sp, #12
    317c:	4d24      	ldr	r5, [pc, #144]	; (3210 <EEConfig::eePromSaveStatus(bool)+0x108>)
    push32(0);
    317e:	4620      	mov	r0, r4
    3180:	f7ff ff32 	bl	2fe8 <EEConfig::push32(unsigned long)>
    snprintf(s, MSL, "# EE-prom D set to default values at next reboot\r\n");
    3184:	46bc      	mov	ip, r7
    3186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3188:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    318c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    318e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3198:	682b      	ldr	r3, [r5, #0]
    319a:	f82c 3b02 	strh.w	r3, [ip], #2
    319e:	0c1b      	lsrs	r3, r3, #16
    31a0:	f88c 3000 	strb.w	r3, [ip]
    else
      snprintf(s, MSL, "# Saved %lu bytes (of %d) to EE-prom D\r\n", cnt, EEPROM_SIZE);
  }
  configAddr = cnt;
  // tell user
  usb.send(s);
    31a4:	4639      	mov	r1, r7
  configAddr = cnt;
    31a6:	6266      	str	r6, [r4, #36]	; 0x24
  usb.send(s);
    31a8:	481a      	ldr	r0, [pc, #104]	; (3214 <EEConfig::eePromSaveStatus(bool)+0x10c>)
    31aa:	f009 f9b7 	bl	c51c <UUSB::send(char const*)>
}
    31ae:	b01d      	add	sp, #116	; 0x74
    31b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    push32(cnt);
    31b2:	4631      	mov	r1, r6
    31b4:	4620      	mov	r0, r4
    31b6:	f7ff ff17 	bl	2fe8 <EEConfig::push32(unsigned long)>
      snprintf(s, MSL, "# Send %lu config bytes (of %d) to USB\r\n", cnt, EEPROM_SIZE);
    31ba:	f241 02bc 	movw	r2, #4284	; 0x10bc
    31be:	af03      	add	r7, sp, #12
    31c0:	4633      	mov	r3, r6
    31c2:	9200      	str	r2, [sp, #0]
    if (toUSB)
    31c4:	b12d      	cbz	r5, 31d2 <EEConfig::eePromSaveStatus(bool)+0xca>
      snprintf(s, MSL, "# Send %lu config bytes (of %d) to USB\r\n", cnt, EEPROM_SIZE);
    31c6:	4a14      	ldr	r2, [pc, #80]	; (3218 <EEConfig::eePromSaveStatus(bool)+0x110>)
    31c8:	2164      	movs	r1, #100	; 0x64
    31ca:	4638      	mov	r0, r7
    31cc:	f018 fa62 	bl	1b694 <snprintf>
    31d0:	e7e8      	b.n	31a4 <EEConfig::eePromSaveStatus(bool)+0x9c>
      snprintf(s, MSL, "# Saved %lu bytes (of %d) to EE-prom D\r\n", cnt, EEPROM_SIZE);
    31d2:	4a12      	ldr	r2, [pc, #72]	; (321c <EEConfig::eePromSaveStatus(bool)+0x114>)
    31d4:	2164      	movs	r1, #100	; 0x64
    31d6:	4638      	mov	r0, r7
    31d8:	f018 fa5c 	bl	1b694 <snprintf>
    31dc:	e7e2      	b.n	31a4 <EEConfig::eePromSaveStatus(bool)+0x9c>
    31de:	bf00      	nop
    31e0:	2000e654 	.word	0x2000e654
    31e4:	2000da18 	.word	0x2000da18
    31e8:	2000cfd0 	.word	0x2000cfd0
    31ec:	2000e240 	.word	0x2000e240
    31f0:	2000e384 	.word	0x2000e384
    31f4:	2000e190 	.word	0x2000e190
    31f8:	2000ea58 	.word	0x2000ea58
    31fc:	2000dc34 	.word	0x2000dc34
    3200:	2000db0c 	.word	0x2000db0c
    3204:	2000e4bc 	.word	0x2000e4bc
    3208:	2000d9dc 	.word	0x2000d9dc
    320c:	2000e518 	.word	0x2000e518
    3210:	200062dc 	.word	0x200062dc
    3214:	2000eab8 	.word	0x2000eab8
    3218:	20006310 	.word	0x20006310
    321c:	2000633c 	.word	0x2000633c

00003220 <EEConfig::decode(char const*) [clone .part.0]>:
bool EEConfig::decode(const char* buf)
    3220:	b530      	push	{r4, r5, lr}
  else if (strncmp(buf, "eew", 3) == 0)
    3222:	780a      	ldrb	r2, [r1, #0]
bool EEConfig::decode(const char* buf)
    3224:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
    3228:	460b      	mov	r3, r1
    322a:	4604      	mov	r4, r0
  else if (strncmp(buf, "eew", 3) == 0)
    322c:	2a65      	cmp	r2, #101	; 0x65
    322e:	d10b      	bne.n	3248 <EEConfig::decode(char const*) [clone .part.0]+0x28>
    3230:	784a      	ldrb	r2, [r1, #1]
    3232:	2a65      	cmp	r2, #101	; 0x65
    3234:	d108      	bne.n	3248 <EEConfig::decode(char const*) [clone .part.0]+0x28>
    3236:	7889      	ldrb	r1, [r1, #2]
    3238:	3977      	subs	r1, #119	; 0x77
    323a:	d105      	bne.n	3248 <EEConfig::decode(char const*) [clone .part.0]+0x28>
    eePromSaveStatus(false);
    323c:	f7ff ff64 	bl	3108 <EEConfig::eePromSaveStatus(bool)>
  bool used = true;
    3240:	2001      	movs	r0, #1
}
    3242:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
    3246:	bd30      	pop	{r4, r5, pc}
  else if (strncmp(buf, "eeusb", 5) == 0)
    3248:	2205      	movs	r2, #5
    324a:	490e      	ldr	r1, [pc, #56]	; (3284 <EEConfig::decode(char const*) [clone .part.0]+0x64>)
    324c:	4618      	mov	r0, r3
    324e:	f018 fcd9 	bl	1bc04 <strncmp>
    3252:	4605      	mov	r5, r0
    3254:	b118      	cbz	r0, 325e <EEConfig::decode(char const*) [clone .part.0]+0x3e>
    used = false;
    3256:	2000      	movs	r0, #0
}
    3258:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
    325c:	bd30      	pop	{r4, r5, pc}
    eePromSaveStatus(true);
    325e:	4620      	mov	r0, r4
    3260:	2101      	movs	r1, #1
    configAddr = 0;
    3262:	6265      	str	r5, [r4, #36]	; 0x24
    config = string2kBuffer;
    3264:	f8c4 d018 	str.w	sp, [r4, #24]
    configAddrMax = 0;
    3268:	62a5      	str	r5, [r4, #40]	; 0x28
    326a:	f7ff ff4d 	bl	3108 <EEConfig::eePromSaveStatus(bool)>
    stringConfigToUSB(nullptr, 0);
    326e:	4620      	mov	r0, r4
    3270:	462a      	mov	r2, r5
    3272:	4629      	mov	r1, r5
    3274:	f7ff fe3c 	bl	2ef0 <EEConfig::stringConfigToUSB(unsigned char const*, int)>
  bool used = true;
    3278:	2001      	movs	r0, #1
    config = NULL;
    327a:	61a5      	str	r5, [r4, #24]
}
    327c:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
    3280:	bd30      	pop	{r4, r5, pc}
    3282:	bf00      	nop
    3284:	200063c8 	.word	0x200063c8

00003288 <EEConfig::eePromLoadStatus(bool)>:
{ 
  const int MSL = 1000;
  char s[MSL]; 
  //eePushAdr = 0;
  stringConfig = from2Kbuffer;  
  configAddr = 0;
    3288:	2300      	movs	r3, #0
{ 
    328a:	b5f0      	push	{r4, r5, r6, r7, lr}
    328c:	4604      	mov	r4, r0
    328e:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
  configAddr = 0;
    3292:	6243      	str	r3, [r0, #36]	; 0x24
  stringConfig = from2Kbuffer;  
    3294:	f880 1020 	strb.w	r1, [r0, #32]
  if (stringConfig)
    3298:	2900      	cmp	r1, #0
    329a:	f000 8081 	beq.w	33a0 <EEConfig::eePromLoadStatus(bool)+0x118>
    if (config != NULL)
    329e:	6987      	ldr	r7, [r0, #24]
    32a0:	2f00      	cmp	r7, #0
    32a2:	d05a      	beq.n	335a <EEConfig::eePromLoadStatus(bool)+0xd2>
      b = *(uint32_t *)&config[configAddr];
    32a4:	e9d7 5700 	ldrd	r5, r7, [r7]
  configAddr += 4;
    32a8:	2308      	movs	r3, #8
  uint32_t cnt = read32();
  uint32_t rev = read32();
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    32aa:	ae04      	add	r6, sp, #16
    32ac:	485c      	ldr	r0, [pc, #368]	; (3420 <EEConfig::eePromLoadStatus(bool)+0x198>)
  configAddr += 4;
    32ae:	6263      	str	r3, [r4, #36]	; 0x24
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    32b0:	f7ff f830 	bl	2314 <UCommand::getRevisionNumber()>
    32b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    32b8:	9001      	str	r0, [sp, #4]
    32ba:	462b      	mov	r3, r5
    32bc:	4a59      	ldr	r2, [pc, #356]	; (3424 <EEConfig::eePromLoadStatus(bool)+0x19c>)
    32be:	4630      	mov	r0, r6
    32c0:	9700      	str	r7, [sp, #0]
    32c2:	f018 f9e7 	bl	1b694 <snprintf>
  usb.send(s);
    32c6:	4631      	mov	r1, r6
    32c8:	4857      	ldr	r0, [pc, #348]	; (3428 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    32ca:	f009 f927 	bl	c51c <UUSB::send(char const*)>
  if (cnt == 0 or cnt >= uint32_t(maxEESize) or rev == 0)
    32ce:	2d00      	cmp	r5, #0
    32d0:	d057      	beq.n	3382 <EEConfig::eePromLoadStatus(bool)+0xfa>
    32d2:	6963      	ldr	r3, [r4, #20]
    32d4:	42ab      	cmp	r3, r5
    32d6:	d954      	bls.n	3382 <EEConfig::eePromLoadStatus(bool)+0xfa>
    32d8:	2f00      	cmp	r7, #0
    32da:	d052      	beq.n	3382 <EEConfig::eePromLoadStatus(bool)+0xfa>
  {
    snprintf(s, MSL, "# No saved configuration - save a configuration first (config size=%lu, rev=%lu)\r\n", cnt, rev);
    usb.send(s);
    return;
  }
  if (rev != command.getRevisionNumber())
    32dc:	4850      	ldr	r0, [pc, #320]	; (3420 <EEConfig::eePromLoadStatus(bool)+0x198>)
    32de:	f7ff f819 	bl	2314 <UCommand::getRevisionNumber()>
    32e2:	42b8      	cmp	r0, r7
    32e4:	d173      	bne.n	33ce <EEConfig::eePromLoadStatus(bool)+0x146>
  {
    snprintf(s, MSL, "# configuration from old SW version now:%g != ee:%g - continues\r\n", command.getRevisionNumber()/100.0, rev/100.0);
    usb.send(s);
  }
  robot.eePromLoad();
    32e6:	4f51      	ldr	r7, [pc, #324]	; (342c <EEConfig::eePromLoadStatus(bool)+0x1a4>)
    32e8:	4638      	mov	r0, r7
    32ea:	f008 f8ad 	bl	b448 <URobot::eePromLoad()>
    32ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32f0:	3b01      	subs	r3, #1
  if (robot.robotIDvalid())
    32f2:	2b95      	cmp	r3, #149	; 0x95
    32f4:	d85f      	bhi.n	33b6 <EEConfig::eePromLoadStatus(bool)+0x12e>
  { // gyro zero value
    imu2.eePromLoad();
    32f6:	484e      	ldr	r0, [pc, #312]	; (3430 <EEConfig::eePromLoadStatus(bool)+0x1a8>)
    32f8:	f001 fb04 	bl	4904 <UImu2::eePromLoad()>
    // values to logger
    logger.eePromLoadStatusLog();
    32fc:	484d      	ldr	r0, [pc, #308]	; (3434 <EEConfig::eePromLoadStatus(bool)+0x1ac>)
    32fe:	f005 f84d 	bl	839c <ULog::eePromLoadStatusLog()>
    // line sensor
    ls.eePromLoadLinesensor();
    3302:	484d      	ldr	r0, [pc, #308]	; (3438 <EEConfig::eePromLoadStatus(bool)+0x1b0>)
    3304:	f003 fcca 	bl	6c9c <ULineSensor::eePromLoadLinesensor()>
    // load data from IR sensor
    irdist.eePromLoad();
    3308:	484c      	ldr	r0, [pc, #304]	; (343c <EEConfig::eePromLoadStatus(bool)+0x1b4>)
    330a:	f002 f947 	bl	559c <UIrDist::eePromLoad()>
    // load servo settings (mostly steering parameters)
    servo.eePromLoad();
    330e:	484c      	ldr	r0, [pc, #304]	; (3440 <EEConfig::eePromLoadStatus(bool)+0x1b8>)
    3310:	f008 fe42 	bl	bf98 <UServo::eePromLoad()>
    encoder.eePromLoad();
    3314:	484b      	ldr	r0, [pc, #300]	; (3444 <EEConfig::eePromLoadStatus(bool)+0x1bc>)
    3316:	f000 fd0b 	bl	3d30 <UEncoder::eePromLoad()>
    display.eePromLoad();
    331a:	484b      	ldr	r0, [pc, #300]	; (3448 <EEConfig::eePromLoadStatus(bool)+0x1c0>)
    331c:	f7ff fd38 	bl	2d90 <UDisplay::eePromLoad()>
    motor.eePromLoad();
    3320:	484a      	ldr	r0, [pc, #296]	; (344c <EEConfig::eePromLoadStatus(bool)+0x1c4>)
    3322:	f005 fd5d 	bl	8de0 <UMotor::eePromLoad()>
    asenc.eePromLoad();
    3326:	484a      	ldr	r0, [pc, #296]	; (3450 <EEConfig::eePromLoadStatus(bool)+0x1c8>)
    3328:	f7fe ff30 	bl	218c <UAsEnc::eePromLoad()>
    motortest.eePromLoad();
    332c:	4849      	ldr	r0, [pc, #292]	; (3454 <EEConfig::eePromLoadStatus(bool)+0x1cc>)
    332e:	f005 ffc7 	bl	92c0 <UMotorTest::eePromLoad()>
    // motor pins depend on HW-version, so re-setup (reboot is better)
    if (not isStringConfig())
    3332:	f894 3020 	ldrb.w	r3, [r4, #32]
    3336:	2b00      	cmp	r3, #0
    3338:	d069      	beq.n	340e <EEConfig::eePromLoadStatus(bool)+0x186>
      motor.setup();
    // note changes in ee-prom size
    if (cnt != (uint32_t)configAddr)
    333a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    333c:	42a9      	cmp	r1, r5
    333e:	d03e      	beq.n	33be <EEConfig::eePromLoadStatus(bool)+0x136>
    {
      snprintf(s, MSL, "# configuration size has changed! %lu != %d bytes\r\n", cnt, configAddr);
    3340:	9100      	str	r1, [sp, #0]
    3342:	462b      	mov	r3, r5
    3344:	4a44      	ldr	r2, [pc, #272]	; (3458 <EEConfig::eePromLoadStatus(bool)+0x1d0>)
    3346:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    334a:	4630      	mov	r0, r6
    334c:	f018 f9a2 	bl	1b694 <snprintf>
      usb.send(s);
    3350:	4631      	mov	r1, r6
    3352:	4835      	ldr	r0, [pc, #212]	; (3428 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    3354:	f009 f8e2 	bl	c51c <UUSB::send(char const*)>
    3358:	e031      	b.n	33be <EEConfig::eePromLoadStatus(bool)+0x136>
  configAddr += 4;
    335a:	2308      	movs	r3, #8
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    335c:	ae04      	add	r6, sp, #16
    335e:	4830      	ldr	r0, [pc, #192]	; (3420 <EEConfig::eePromLoadStatus(bool)+0x198>)
      b = 0;
    3360:	463d      	mov	r5, r7
  configAddr += 4;
    3362:	6263      	str	r3, [r4, #36]	; 0x24
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    3364:	f7fe ffd6 	bl	2314 <UCommand::getRevisionNumber()>
    3368:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    336c:	463b      	mov	r3, r7
    336e:	4a2d      	ldr	r2, [pc, #180]	; (3424 <EEConfig::eePromLoadStatus(bool)+0x19c>)
    3370:	e9cd 7000 	strd	r7, r0, [sp]
    3374:	4630      	mov	r0, r6
    3376:	f018 f98d 	bl	1b694 <snprintf>
  usb.send(s);
    337a:	4631      	mov	r1, r6
    337c:	482a      	ldr	r0, [pc, #168]	; (3428 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    337e:	f009 f8cd 	bl	c51c <UUSB::send(char const*)>
    snprintf(s, MSL, "# No saved configuration - save a configuration first (config size=%lu, rev=%lu)\r\n", cnt, rev);
    3382:	462b      	mov	r3, r5
    3384:	4a35      	ldr	r2, [pc, #212]	; (345c <EEConfig::eePromLoadStatus(bool)+0x1d4>)
    3386:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    338a:	4630      	mov	r0, r6
    338c:	9700      	str	r7, [sp, #0]
    338e:	f018 f981 	bl	1b694 <snprintf>
    usb.send(s);
    3392:	4631      	mov	r1, r6
    3394:	4824      	ldr	r0, [pc, #144]	; (3428 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    3396:	f009 f8c1 	bl	c51c <UUSB::send(char const*)>
  {
    usb.send("# skipped major part of ee-load, as ID == 0\n");
  }
  // pin position may have changed, so reinit
  motor.motorSetEnable(0,0);
}
    339a:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
    339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = eeprom_read_dword((uint32_t*)configAddr);
    33a0:	4608      	mov	r0, r1
    33a2:	f012 feab 	bl	160fc <eeprom_read_dword>
  configAddr += 4;
    33a6:	2304      	movs	r3, #4
    b = eeprom_read_dword((uint32_t*)configAddr);
    33a8:	4605      	mov	r5, r0
  configAddr += 4;
    33aa:	6263      	str	r3, [r4, #36]	; 0x24
    b = eeprom_read_dword((uint32_t*)configAddr);
    33ac:	4618      	mov	r0, r3
    33ae:	f012 fea5 	bl	160fc <eeprom_read_dword>
    33b2:	4607      	mov	r7, r0
    33b4:	e778      	b.n	32a8 <EEConfig::eePromLoadStatus(bool)+0x20>
    usb.send("# skipped major part of ee-load, as ID == 0\n");
    33b6:	492a      	ldr	r1, [pc, #168]	; (3460 <EEConfig::eePromLoadStatus(bool)+0x1d8>)
    33b8:	481b      	ldr	r0, [pc, #108]	; (3428 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    33ba:	f009 f8af 	bl	c51c <UUSB::send(char const*)>
  motor.motorSetEnable(0,0);
    33be:	2200      	movs	r2, #0
    33c0:	4822      	ldr	r0, [pc, #136]	; (344c <EEConfig::eePromLoadStatus(bool)+0x1c4>)
    33c2:	4611      	mov	r1, r2
    33c4:	f005 f98a 	bl	86dc <UMotor::motorSetEnable(bool, bool)>
}
    33c8:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
    33cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    snprintf(s, MSL, "# configuration from old SW version now:%g != ee:%g - continues\r\n", command.getRevisionNumber()/100.0, rev/100.0);
    33ce:	4814      	ldr	r0, [pc, #80]	; (3420 <EEConfig::eePromLoadStatus(bool)+0x198>)
    33d0:	f7fe ffa0 	bl	2314 <UCommand::getRevisionNumber()>
    33d4:	ee07 7a90 	vmov	s15, r7
    33d8:	ee06 0a90 	vmov	s13, r0
    33dc:	4a21      	ldr	r2, [pc, #132]	; (3464 <EEConfig::eePromLoadStatus(bool)+0x1dc>)
    33de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    33e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    33e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    33ea:	4630      	mov	r0, r6
    33ec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 3418 <EEConfig::eePromLoadStatus(bool)+0x190>
    33f0:	ee87 4b05 	vdiv.f64	d4, d7, d5
    33f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
    33f8:	ed8d 4b02 	vstr	d4, [sp, #8]
    33fc:	ed8d 7b00 	vstr	d7, [sp]
    3400:	f018 f948 	bl	1b694 <snprintf>
    usb.send(s);
    3404:	4631      	mov	r1, r6
    3406:	4808      	ldr	r0, [pc, #32]	; (3428 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    3408:	f009 f888 	bl	c51c <UUSB::send(char const*)>
    340c:	e76b      	b.n	32e6 <EEConfig::eePromLoadStatus(bool)+0x5e>
      motor.setup();
    340e:	480f      	ldr	r0, [pc, #60]	; (344c <EEConfig::eePromLoadStatus(bool)+0x1c4>)
    3410:	f005 f89c 	bl	854c <UMotor::setup()>
    3414:	e791      	b.n	333a <EEConfig::eePromLoadStatus(bool)+0xb2>
    3416:	bf00      	nop
    3418:	00000000 	.word	0x00000000
    341c:	40590000 	.word	0x40590000
    3420:	2000da18 	.word	0x2000da18
    3424:	20006198 	.word	0x20006198
    3428:	2000eab8 	.word	0x2000eab8
    342c:	2000e654 	.word	0x2000e654
    3430:	2000cfd0 	.word	0x2000cfd0
    3434:	2000e240 	.word	0x2000e240
    3438:	2000e384 	.word	0x2000e384
    343c:	2000e190 	.word	0x2000e190
    3440:	2000ea58 	.word	0x2000ea58
    3444:	2000dc34 	.word	0x2000dc34
    3448:	2000db0c 	.word	0x2000db0c
    344c:	2000e4bc 	.word	0x2000e4bc
    3450:	2000d9dc 	.word	0x2000d9dc
    3454:	2000e518 	.word	0x2000e518
    3458:	20006278 	.word	0x20006278
    345c:	200061e0 	.word	0x200061e0
    3460:	200062ac 	.word	0x200062ac
    3464:	20006234 	.word	0x20006234

00003468 <EEConfig::setup()>:
{
    3468:	b510      	push	{r4, lr}
    346a:	4604      	mov	r4, r0
  usb.addSubscriptionService(this);
    346c:	4804      	ldr	r0, [pc, #16]	; (3480 <EEConfig::setup()+0x18>)
    346e:	4621      	mov	r1, r4
    3470:	f009 fc80 	bl	cd74 <UUSB::addSubscriptionService(USubss*)>
  eePromLoadStatus (false);
    3474:	4620      	mov	r0, r4
    3476:	2100      	movs	r1, #0
}
    3478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eePromLoadStatus (false);
    347c:	f7ff bf04 	b.w	3288 <EEConfig::eePromLoadStatus(bool)>
    3480:	2000eab8 	.word	0x2000eab8

00003484 <EEConfig::decode(char const*)>:
{
    3484:	b508      	push	{r3, lr}
    3486:	460b      	mov	r3, r1
  if (strncmp(buf, "eer", 3) == 0)
    3488:	7809      	ldrb	r1, [r1, #0]
{
    348a:	4602      	mov	r2, r0
  if (strncmp(buf, "eer", 3) == 0)
    348c:	2965      	cmp	r1, #101	; 0x65
    348e:	d109      	bne.n	34a4 <EEConfig::decode(char const*)+0x20>
    3490:	7859      	ldrb	r1, [r3, #1]
    3492:	2965      	cmp	r1, #101	; 0x65
    3494:	d106      	bne.n	34a4 <EEConfig::decode(char const*)+0x20>
    3496:	7899      	ldrb	r1, [r3, #2]
    3498:	3972      	subs	r1, #114	; 0x72
    349a:	d103      	bne.n	34a4 <EEConfig::decode(char const*)+0x20>
    eePromLoadStatus(false);
    349c:	f7ff fef4 	bl	3288 <EEConfig::eePromLoadStatus(bool)>
}
    34a0:	2001      	movs	r0, #1
    34a2:	bd08      	pop	{r3, pc}
    34a4:	4619      	mov	r1, r3
    34a6:	4610      	mov	r0, r2
    34a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    34ac:	f7ff beb8 	b.w	3220 <EEConfig::decode(char const*) [clone .part.0]>

000034b0 <EEConfig::pushBlock(char const*, int)>:
    // debug end
  }
  /** get the address of the next push or read operation on the configuration stack */
  int getAddr()
  {
    return configAddr;
    34b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
/////////////////////////////////////////////////

bool EEConfig::pushBlock(const char * data, int dataCnt)
{
    34b2:	b570      	push	{r4, r5, r6, lr}
  if (getAddr() + dataCnt < 2048 - 2)
    34b4:	eb03 0c02 	add.w	ip, r3, r2
{
    34b8:	4615      	mov	r5, r2
  if (getAddr() + dataCnt < 2048 - 2)
    34ba:	f240 72fd 	movw	r2, #2045	; 0x7fd
    34be:	4594      	cmp	ip, r2
    34c0:	dc15      	bgt.n	34ee <EEConfig::pushBlock(char const*, int)+0x3e>
    if (not stringConfig)
    34c2:	f890 2020 	ldrb.w	r2, [r0, #32]
    34c6:	4604      	mov	r4, r0
    34c8:	460e      	mov	r6, r1
    34ca:	b99a      	cbnz	r2, 34f4 <EEConfig::pushBlock(char const*, int)+0x44>
      eeprom_busy_wait();
    34cc:	f012 fe2e 	bl	1612c <eeprom_is_ready>
    34d0:	2800      	cmp	r0, #0
    34d2:	d0fb      	beq.n	34cc <EEConfig::pushBlock(char const*, int)+0x1c>
    if (not stringConfig)
    34d4:	f894 3020 	ldrb.w	r3, [r4, #32]
    34d8:	b95b      	cbnz	r3, 34f2 <EEConfig::pushBlock(char const*, int)+0x42>
      eeprom_write_block(data, (void*)configAddr, n);
    34da:	462a      	mov	r2, r5
    34dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    34de:	4630      	mov	r0, r6
    34e0:	f012 ffb4 	bl	1644c <eeprom_write_block>
    configAddr += n;
    34e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  {
    busy_wait();
    write_block(data, dataCnt);
    return true;
    34e6:	2001      	movs	r0, #1
    34e8:	442b      	add	r3, r5
    34ea:	6263      	str	r3, [r4, #36]	; 0x24
  }
  else
    return false;
}
    34ec:	bd70      	pop	{r4, r5, r6, pc}
    return false;
    34ee:	2000      	movs	r0, #0
}
    34f0:	bd70      	pop	{r4, r5, r6, pc}
      eeprom_write_block(data, (void*)configAddr, n);
    34f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      memcpy(&config[configAddr], data, n);
    34f4:	69a0      	ldr	r0, [r4, #24]
    34f6:	4631      	mov	r1, r6
    34f8:	462a      	mov	r2, r5
    34fa:	4418      	add	r0, r3
    34fc:	f013 f842 	bl	16584 <memcpy>
    3500:	e7f0      	b.n	34e4 <EEConfig::pushBlock(char const*, int)+0x34>
    3502:	bf00      	nop

00003504 <EEConfig::readBlock(char*, int)>:

bool EEConfig::readBlock(char * data, int dataCnt)
{
    3504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (getAddr() + dataCnt < 2048 - 2)
    3506:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3508:	f240 74fd 	movw	r4, #2045	; 0x7fd
    350c:	4413      	add	r3, r2
    350e:	42a3      	cmp	r3, r4
    3510:	dc28      	bgt.n	3564 <EEConfig::readBlock(char*, int)+0x60>
    if (not stringConfig)
    3512:	f890 3020 	ldrb.w	r3, [r0, #32]
    3516:	4605      	mov	r5, r0
    3518:	4617      	mov	r7, r2
    351a:	460e      	mov	r6, r1
    351c:	b91b      	cbnz	r3, 3526 <EEConfig::readBlock(char*, int)+0x22>
      eeprom_busy_wait();
    351e:	f012 fe05 	bl	1612c <eeprom_is_ready>
    3522:	2800      	cmp	r0, #0
    3524:	d0fb      	beq.n	351e <EEConfig::readBlock(char*, int)+0x1a>
  {
    busy_wait();
    for (int n = 0; n < dataCnt; n++)
    3526:	2f00      	cmp	r7, #0
    3528:	dd1a      	ble.n	3560 <EEConfig::readBlock(char*, int)+0x5c>
    352a:	3e01      	subs	r6, #1
    352c:	4437      	add	r7, r6
    352e:	e009      	b.n	3544 <EEConfig::readBlock(char*, int)+0x40>
    if (config != NULL)
    3530:	69a8      	ldr	r0, [r5, #24]
      b = config[configAddr];
    3532:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if (config != NULL)
    3534:	b100      	cbz	r0, 3538 <EEConfig::readBlock(char*, int)+0x34>
      b = config[configAddr];
    3536:	5d00      	ldrb	r0, [r0, r4]
  configAddr++;
    3538:	3401      	adds	r4, #1
    353a:	626c      	str	r4, [r5, #36]	; 0x24
    {
      data[n] = readByte();
    353c:	f806 0f01 	strb.w	r0, [r6, #1]!
    for (int n = 0; n < dataCnt; n++)
    3540:	42be      	cmp	r6, r7
    3542:	d00d      	beq.n	3560 <EEConfig::readBlock(char*, int)+0x5c>
  if (stringConfig)
    3544:	f895 3020 	ldrb.w	r3, [r5, #32]
    3548:	2b00      	cmp	r3, #0
    354a:	d1f1      	bne.n	3530 <EEConfig::readBlock(char*, int)+0x2c>
    b = eeprom_read_byte((uint8_t*)configAddr);
    354c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    354e:	4620      	mov	r0, r4
  configAddr++;
    3550:	3401      	adds	r4, #1
    b = eeprom_read_byte((uint8_t*)configAddr);
    3552:	f012 fd89 	bl	16068 <eeprom_read_byte>
  configAddr++;
    3556:	626c      	str	r4, [r5, #36]	; 0x24
      data[n] = readByte();
    3558:	f806 0f01 	strb.w	r0, [r6, #1]!
    for (int n = 0; n < dataCnt; n++)
    355c:	42be      	cmp	r6, r7
    355e:	d1f1      	bne.n	3544 <EEConfig::readBlock(char*, int)+0x40>
    }
    return true;
    3560:	2001      	movs	r0, #1
  }
  else
    return false;
}
    3562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return false;
    3564:	2000      	movs	r0, #0
}
    3566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003568 <_GLOBAL__sub_I_eeConfig>:
    3568:	b510      	push	{r4, lr}
EEConfig eeConfig;
    356a:	4c05      	ldr	r4, [pc, #20]	; (3580 <_GLOBAL__sub_I_eeConfig+0x18>)
    356c:	4620      	mov	r0, r4
    356e:	f7ff fc9d 	bl	2eac <EEConfig::EEConfig()>
    3572:	4620      	mov	r0, r4
    3574:	4a03      	ldr	r2, [pc, #12]	; (3584 <_GLOBAL__sub_I_eeConfig+0x1c>)
    3576:	4904      	ldr	r1, [pc, #16]	; (3588 <_GLOBAL__sub_I_eeConfig+0x20>)
}
    3578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
EEConfig eeConfig;
    357c:	f015 bcbc 	b.w	18ef8 <__aeabi_atexit>
    3580:	2000dbe8 	.word	0x2000dbe8
    3584:	20008f08 	.word	0x20008f08
    3588:	00002e91 	.word	0x00002e91

0000358c <UEncoder::sendHelp()>:
{
    358c:	b530      	push	{r4, r5, lr}
  usb.send("# Encoder settings -------\r\n");
    358e:	4d19      	ldr	r5, [pc, #100]	; (35f4 <UEncoder::sendHelp()+0x68>)
{
    3590:	b0cd      	sub	sp, #308	; 0x134
  snprintf(reply, MRL, "# -- \tenc0 \tReset pose to (0,0,0)\r\n");
    3592:	4c19      	ldr	r4, [pc, #100]	; (35f8 <UEncoder::sendHelp()+0x6c>)
  usb.send("# Encoder settings -------\r\n");
    3594:	4919      	ldr	r1, [pc, #100]	; (35fc <UEncoder::sendHelp()+0x70>)
    3596:	4628      	mov	r0, r5
    3598:	f008 ffc0 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tenc0 \tReset pose to (0,0,0)\r\n");
    359c:	f10d 0c04 	add.w	ip, sp, #4
    35a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    35a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    35a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    35a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    35ac:	6823      	ldr	r3, [r4, #0]
  usb.send(reply);
    35ae:	a901      	add	r1, sp, #4
    35b0:	4628      	mov	r0, r5
  snprintf(reply, MRL, "# -- \tenc0 \tReset pose to (0,0,0)\r\n");
    35b2:	f8cc 3000 	str.w	r3, [ip]
  usb.send(reply);
    35b6:	f008 ffb1 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tconfw rl rr g t wb \tSet configuration (radius gear encTick wheelbase)\r\n");
    35ba:	224e      	movs	r2, #78	; 0x4e
    35bc:	4910      	ldr	r1, [pc, #64]	; (3600 <UEncoder::sendHelp()+0x74>)
    35be:	a801      	add	r0, sp, #4
    35c0:	f012 ffe0 	bl	16584 <memcpy>
  usb.send(reply);
    35c4:	a901      	add	r1, sp, #4
    35c6:	4628      	mov	r0, r5
    35c8:	f008 ffa8 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tencrev R \tSet motortest reversed encoder (R=0 normal, R=1 reversed)\r\n");
    35cc:	224c      	movs	r2, #76	; 0x4c
    35ce:	490d      	ldr	r1, [pc, #52]	; (3604 <UEncoder::sendHelp()+0x78>)
    35d0:	a801      	add	r0, sp, #4
    35d2:	f012 ffd7 	bl	16584 <memcpy>
  usb.send(reply);
    35d6:	a901      	add	r1, sp, #4
    35d8:	4628      	mov	r0, r5
    35da:	f008 ff9f 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \t         \tNormal: motv 3 3 => left enc decrease, right enc increase.\r\n");
    35de:	224d      	movs	r2, #77	; 0x4d
    35e0:	4909      	ldr	r1, [pc, #36]	; (3608 <UEncoder::sendHelp()+0x7c>)
    35e2:	a801      	add	r0, sp, #4
    35e4:	f012 ffce 	bl	16584 <memcpy>
  usb.send(reply);
    35e8:	a901      	add	r1, sp, #4
    35ea:	4628      	mov	r0, r5
    35ec:	f008 ff96 	bl	c51c <UUSB::send(char const*)>
}
    35f0:	b04d      	add	sp, #308	; 0x134
    35f2:	bd30      	pop	{r4, r5, pc}
    35f4:	2000eab8 	.word	0x2000eab8
    35f8:	20007824 	.word	0x20007824
    35fc:	20007804 	.word	0x20007804
    3600:	20007848 	.word	0x20007848
    3604:	20007898 	.word	0x20007898
    3608:	200078e4 	.word	0x200078e4
    360c:	00000000 	.word	0x00000000

00003610 <UEncoder::decode(char const*)>:
{
    3610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3614:	460d      	mov	r5, r1
    3616:	b0bf      	sub	sp, #252	; 0xfc
    3618:	4604      	mov	r4, r0
  if (strncmp(buf, "enc0", 4) == 0)
    361a:	2204      	movs	r2, #4
    361c:	497c      	ldr	r1, [pc, #496]	; (3810 <UEncoder::decode(char const*)+0x200>)
    361e:	4628      	mov	r0, r5
    3620:	f018 faf0 	bl	1bc04 <strncmp>
    3624:	b998      	cbnz	r0, 364e <UEncoder::decode(char const*)+0x3e>
  }
}

void UEncoder::clearPose()
{
  pose[0] = 0;
    3626:	2200      	movs	r2, #0
    3628:	4603      	mov	r3, r0
  bool used = true;
    362a:	2001      	movs	r0, #1
  pose[0] = 0;
    362c:	64e2      	str	r2, [r4, #76]	; 0x4c
  pose[1] = 0;
    362e:	6522      	str	r2, [r4, #80]	; 0x50
  pose[2] = 0;
    3630:	6562      	str	r2, [r4, #84]	; 0x54
  // pose[3] = 0; NB! tilt should NOT be reset
  encoder[0] = 0;
  encoder[1] = 0;
  encoderLast[0] = 0;
  encoderLast[1] = 0;
  distance = 0.0;
    3632:	65e2      	str	r2, [r4, #92]	; 0x5c
    tripA = 0;
    3634:	6622      	str	r2, [r4, #96]	; 0x60
    tripAh = 0;
    3636:	66a2      	str	r2, [r4, #104]	; 0x68
    tripAtime = 0;
    3638:	6722      	str	r2, [r4, #112]	; 0x70
    tripB = 0;
    363a:	6662      	str	r2, [r4, #100]	; 0x64
    tripBh = 0;
    363c:	66e2      	str	r2, [r4, #108]	; 0x6c
    tripBtime = 0;
    363e:	6762      	str	r2, [r4, #116]	; 0x74
  encoder[1] = 0;
    3640:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  encoderLast[1] = 0;
    3644:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
}
    3648:	b03f      	add	sp, #252	; 0xfc
    364a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (strncmp(buf, "encd", 4) == 0)
    364e:	2204      	movs	r2, #4
    3650:	4970      	ldr	r1, [pc, #448]	; (3814 <UEncoder::decode(char const*)+0x204>)
    3652:	4628      	mov	r0, r5
    3654:	f018 fad6 	bl	1bc04 <strncmp>
    3658:	4606      	mov	r6, r0
    365a:	b188      	cbz	r0, 3680 <UEncoder::decode(char const*)+0x70>
  else if (strncmp(buf, "confw ", 5) == 0)
    365c:	2205      	movs	r2, #5
    365e:	496e      	ldr	r1, [pc, #440]	; (3818 <UEncoder::decode(char const*)+0x208>)
    3660:	4628      	mov	r0, r5
    3662:	f018 facf 	bl	1bc04 <strncmp>
    3666:	2800      	cmp	r0, #0
    3668:	d052      	beq.n	3710 <UEncoder::decode(char const*)+0x100>
  else if (strncmp(buf, "encrev ", 6) == 0)
    366a:	2206      	movs	r2, #6
    366c:	496b      	ldr	r1, [pc, #428]	; (381c <UEncoder::decode(char const*)+0x20c>)
    366e:	4628      	mov	r0, r5
    3670:	f018 fac8 	bl	1bc04 <strncmp>
    3674:	2800      	cmp	r0, #0
    3676:	d03d      	beq.n	36f4 <UEncoder::decode(char const*)+0xe4>
    used = false;
    3678:	2000      	movs	r0, #0
}
    367a:	b03f      	add	sp, #252	; 0xfc
    367c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int n = eportCnt;
    3680:	f8d4 74ec 	ldr.w	r7, [r4, #1260]	; 0x4ec
    snprintf(s, MSL, "encp %d\n", n);
    3684:	21c8      	movs	r1, #200	; 0xc8
    3686:	4a66      	ldr	r2, [pc, #408]	; (3820 <UEncoder::decode(char const*)+0x210>)
    3688:	a80c      	add	r0, sp, #48	; 0x30
    368a:	463b      	mov	r3, r7
    368c:	f018 f802 	bl	1b694 <snprintf>
    usb.send(s);
    3690:	a90c      	add	r1, sp, #48	; 0x30
    3692:	4864      	ldr	r0, [pc, #400]	; (3824 <UEncoder::decode(char const*)+0x214>)
    3694:	f008 ff42 	bl	c51c <UUSB::send(char const*)>
    for (int i = 0; i < n; i++)    
    3698:	2f00      	cmp	r7, #0
    369a:	dd24      	ble.n	36e6 <UEncoder::decode(char const*)+0xd6>
    369c:	4625      	mov	r5, r4
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    369e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 3838 <UEncoder::decode(char const*)+0x228>
      usb.send(s);
    36a2:	f8df 8180 	ldr.w	r8, [pc, #384]	; 3824 <UEncoder::decode(char const*)+0x214>
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    36a6:	ed95 7ad7 	vldr	s14, [r5, #860]	; 0x35c
    36aa:	464a      	mov	r2, r9
    36ac:	21c8      	movs	r1, #200	; 0xc8
    36ae:	a80c      	add	r0, sp, #48	; 0x30
    36b0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    for (int i = 0; i < n; i++)    
    36b4:	3504      	adds	r5, #4
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    36b6:	ed8d 7b04 	vstr	d7, [sp, #16]
    36ba:	f895 31ca 	ldrb.w	r3, [r5, #458]	; 0x1ca
    36be:	9303      	str	r3, [sp, #12]
    36c0:	f895 31c9 	ldrb.w	r3, [r5, #457]	; 0x1c9
    36c4:	9302      	str	r3, [sp, #8]
    36c6:	f895 31c8 	ldrb.w	r3, [r5, #456]	; 0x1c8
    36ca:	9301      	str	r3, [sp, #4]
    36cc:	f895 31cb 	ldrb.w	r3, [r5, #459]	; 0x1cb
    36d0:	9300      	str	r3, [sp, #0]
    36d2:	4633      	mov	r3, r6
    for (int i = 0; i < n; i++)    
    36d4:	3601      	adds	r6, #1
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    36d6:	f017 ffdd 	bl	1b694 <snprintf>
      usb.send(s);
    36da:	a90c      	add	r1, sp, #48	; 0x30
    36dc:	4640      	mov	r0, r8
    36de:	f008 ff1d 	bl	c51c <UUSB::send(char const*)>
    for (int i = 0; i < n; i++)    
    36e2:	42b7      	cmp	r7, r6
    36e4:	d1df      	bne.n	36a6 <UEncoder::decode(char const*)+0x96>
    eportCnt = 0;
    36e6:	2300      	movs	r3, #0
  bool used = true;
    36e8:	2001      	movs	r0, #1
    eportCnt = 0;
    36ea:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
}
    36ee:	b03f      	add	sp, #252	; 0xfc
    36f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    const char * p1 = &buf[6];
    36f4:	1da8      	adds	r0, r5, #6
    motortest.encoderReversed = strtol(p1, (char**) &p1, 10);
    36f6:	220a      	movs	r2, #10
    36f8:	a90c      	add	r1, sp, #48	; 0x30
    const char * p1 = &buf[6];
    36fa:	900c      	str	r0, [sp, #48]	; 0x30
    motortest.encoderReversed = strtol(p1, (char**) &p1, 10);
    36fc:	f017 fdda 	bl	1b2b4 <strtol>
    3700:	4603      	mov	r3, r0
    3702:	4a49      	ldr	r2, [pc, #292]	; (3828 <UEncoder::decode(char const*)+0x218>)
  bool used = true;
    3704:	2001      	movs	r0, #1
    motortest.encoderReversed = strtol(p1, (char**) &p1, 10);
    3706:	3b00      	subs	r3, #0
    3708:	bf18      	it	ne
    370a:	2301      	movne	r3, #1
    370c:	7713      	strb	r3, [r2, #28]
    370e:	e79b      	b.n	3648 <UEncoder::decode(char const*)+0x38>
    const char * p1 = &buf[5];
    3710:	1d68      	adds	r0, r5, #5
    odoWheelRadius[0] = strtof(p1, (char**) &p1);
    3712:	a90b      	add	r1, sp, #44	; 0x2c
    const char * p1 = &buf[5];
    3714:	900b      	str	r0, [sp, #44]	; 0x2c
    odoWheelRadius[0] = strtof(p1, (char**) &p1);
    3716:	f017 fcc9 	bl	1b0ac <strtof>
    odoWheelRadius[1] = strtof(p1, (char**) &p1);
    371a:	a90b      	add	r1, sp, #44	; 0x2c
    371c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    odoWheelRadius[0] = strtof(p1, (char**) &p1);
    371e:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
    odoWheelRadius[1] = strtof(p1, (char**) &p1);
    3722:	f017 fcc3 	bl	1b0ac <strtof>
    gear = strtof(p1, (char**) &p1);
    3726:	a90b      	add	r1, sp, #44	; 0x2c
    3728:	980b      	ldr	r0, [sp, #44]	; 0x2c
    odoWheelRadius[1] = strtof(p1, (char**) &p1);
    372a:	ed84 0a21 	vstr	s0, [r4, #132]	; 0x84
    gear = strtof(p1, (char**) &p1);
    372e:	f017 fcbd 	bl	1b0ac <strtof>
    pulsPerRev = strtol(p1, (char**) &p1, 10);
    3732:	220a      	movs	r2, #10
    3734:	a90b      	add	r1, sp, #44	; 0x2c
    gear = strtof(p1, (char**) &p1);
    3736:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
    pulsPerRev = strtol(p1, (char**) &p1, 10);
    373a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    373c:	f017 fdba 	bl	1b2b4 <strtol>
    3740:	4603      	mov	r3, r0
    odoWheelBase = strtof(p1, (char**) &p1);
    3742:	a90b      	add	r1, sp, #44	; 0x2c
    3744:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pulsPerRev = strtol(p1, (char**) &p1, 10);
    3746:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    odoWheelBase = strtof(p1, (char**) &p1);
    374a:	f017 fcaf 	bl	1b0ac <strtof>
    snprintf(s, MSL, "# got confw: r1=%g, r2=%g, G=%g, PPR=%d, WB=%g\n", odoWheelRadius[0],
    374e:	ed94 5a22 	vldr	s10, [r4, #136]	; 0x88
    3752:	ed94 6a21 	vldr	s12, [r4, #132]	; 0x84
    3756:	eeb7 4ac0 	vcvt.f64.f32	d4, s0
    375a:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    375e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3762:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3766:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    376a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    odoWheelBase = strtof(p1, (char**) &p1);
    376e:	ed84 0a23 	vstr	s0, [r4, #140]	; 0x8c
    snprintf(s, MSL, "# got confw: r1=%g, r2=%g, G=%g, PPR=%d, WB=%g\n", odoWheelRadius[0],
    3772:	4a2e      	ldr	r2, [pc, #184]	; (382c <UEncoder::decode(char const*)+0x21c>)
    3774:	21c8      	movs	r1, #200	; 0xc8
    3776:	9306      	str	r3, [sp, #24]
    3778:	a80c      	add	r0, sp, #48	; 0x30
    377a:	ed8d 4b08 	vstr	d4, [sp, #32]
    377e:	ed8d 5b04 	vstr	d5, [sp, #16]
    3782:	ed8d 6b02 	vstr	d6, [sp, #8]
    3786:	ed8d 7b00 	vstr	d7, [sp]
    378a:	f017 ff83 	bl	1b694 <snprintf>
    usb.send(s);
    378e:	a90c      	add	r1, sp, #48	; 0x30
    3790:	4824      	ldr	r0, [pc, #144]	; (3824 <UEncoder::decode(char const*)+0x214>)
    3792:	f008 fec3 	bl	c51c <UUSB::send(char const*)>
    if (pulsPerRev < 1)
    3796:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    379a:	b343      	cbz	r3, 37ee <UEncoder::decode(char const*)+0x1de>
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    379c:	ee07 3a90 	vmov	s15, r3
    37a0:	ed9f 5b17 	vldr	d5, [pc, #92]	; 3800 <UEncoder::decode(char const*)+0x1f0>
    37a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    37a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
    37ac:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    if (gear < 1)
    37b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    37b4:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
    if (odoWheelBase < 0.02)
    37b8:	ed9f 5b13 	vldr	d5, [pc, #76]	; 3808 <UEncoder::decode(char const*)+0x1f8>
    if (gear < 1)
    37bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    if (odoWheelBase < 0.02)
    37c0:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
    if (gear < 1)
    37c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      gear = 1;
    37c8:	bf48      	it	mi
    37ca:	edc4 7a22 	vstrmi	s15, [r4, #136]	; 0x88
    if (odoWheelBase < 0.02)
    37ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    37d2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    37d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    37da:	d502      	bpl.n	37e2 <UEncoder::decode(char const*)+0x1d2>
      odoWheelBase = 0.02;
    37dc:	4b14      	ldr	r3, [pc, #80]	; (3830 <UEncoder::decode(char const*)+0x220>)
    37de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  bool used = true;
    37e2:	2001      	movs	r0, #1
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    37e4:	ed84 6a72 	vstr	s12, [r4, #456]	; 0x1c8
}
    37e8:	b03f      	add	sp, #252	; 0xfc
    37ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pulsPerRev = 1;
    37ee:	2301      	movs	r3, #1
    37f0:	ed9f 6a10 	vldr	s12, [pc, #64]	; 3834 <UEncoder::decode(char const*)+0x224>
    37f4:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    37f8:	e7da      	b.n	37b0 <UEncoder::decode(char const*)+0x1a0>
    37fa:	bf00      	nop
    37fc:	f3af 8000 	nop.w
    3800:	54442d18 	.word	0x54442d18
    3804:	401921fb 	.word	0x401921fb
    3808:	47ae147b 	.word	0x47ae147b
    380c:	3f947ae1 	.word	0x3f947ae1
    3810:	20007790 	.word	0x20007790
    3814:	20007798 	.word	0x20007798
    3818:	200077c4 	.word	0x200077c4
    381c:	200077fc 	.word	0x200077fc
    3820:	200077a0 	.word	0x200077a0
    3824:	2000eab8 	.word	0x2000eab8
    3828:	2000e518 	.word	0x2000e518
    382c:	200077cc 	.word	0x200077cc
    3830:	3ca3d70a 	.word	0x3ca3d70a
    3834:	40c90fdb 	.word	0x40c90fdb
    3838:	200077ac 	.word	0x200077ac

0000383c <UEncoder::~UEncoder()>:
class UEncoder : public USubss
    383c:	b510      	push	{r4, lr}
    383e:	4b05      	ldr	r3, [pc, #20]	; (3854 <UEncoder::~UEncoder()+0x18>)
    3840:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    3842:	6840      	ldr	r0, [r0, #4]
    3844:	6023      	str	r3, [r4, #0]
	if (__p)
    3846:	b118      	cbz	r0, 3850 <UEncoder::~UEncoder()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    3848:	68e1      	ldr	r1, [r4, #12]
    384a:	1a09      	subs	r1, r1, r0
    384c:	f012 ff36 	bl	166bc <operator delete(void*, unsigned int)>
    3850:	4620      	mov	r0, r4
    3852:	bd10      	pop	{r4, pc}
    3854:	2000802c 	.word	0x2000802c

00003858 <UEncoder::setup()>:
{ // input should be default, but pin PIN_RIGHT_ENCODER_B on HW41 fails
    3858:	b538      	push	{r3, r4, r5, lr}
  pinMode(M1ENC_A, INPUT_PULLUP);
    385a:	2102      	movs	r1, #2
{ // input should be default, but pin PIN_RIGHT_ENCODER_B on HW41 fails
    385c:	4604      	mov	r4, r0
  pinMode(M1ENC_A, INPUT_PULLUP);
    385e:	201d      	movs	r0, #29
    3860:	f012 fb78 	bl	15f54 <pinMode>
  pinMode(M1ENC_B, INPUT_PULLUP);
    3864:	2102      	movs	r1, #2
    3866:	201c      	movs	r0, #28
    3868:	f012 fb74 	bl	15f54 <pinMode>
  pinMode(M2ENC_A, INPUT_PULLUP);
    386c:	2102      	movs	r1, #2
    386e:	201f      	movs	r0, #31
    3870:	f012 fb70 	bl	15f54 <pinMode>
  pinMode(M2ENC_B, INPUT_PULLUP);
    3874:	2102      	movs	r1, #2
    3876:	201e      	movs	r0, #30
    3878:	f012 fb6c 	bl	15f54 <pinMode>
  *digital_pin_to_info_PGM[M1ENC_A].pad |= IOMUXC_PAD_HYS;
    387c:	4b2e      	ldr	r3, [pc, #184]	; (3938 <UEncoder::setup()+0xe0>)
    387e:	f8d3 01d8 	ldr.w	r0, [r3, #472]	; 0x1d8
  *digital_pin_to_info_PGM[M1ENC_B].pad |= IOMUXC_PAD_HYS;
    3882:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
  *digital_pin_to_info_PGM[M1ENC_A].pad |= IOMUXC_PAD_HYS;
    3886:	6802      	ldr	r2, [r0, #0]
  *digital_pin_to_info_PGM[M2ENC_A].pad |= IOMUXC_PAD_HYS;
    3888:	f8d3 51f8 	ldr.w	r5, [r3, #504]	; 0x1f8
  *digital_pin_to_info_PGM[M1ENC_A].pad |= IOMUXC_PAD_HYS;
    388c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    3890:	6002      	str	r2, [r0, #0]
  *digital_pin_to_info_PGM[M1ENC_B].pad |= IOMUXC_PAD_HYS;
    3892:	680a      	ldr	r2, [r1, #0]
  *digital_pin_to_info_PGM[M2ENC_B].pad |= IOMUXC_PAD_HYS;
    3894:	f8d3 01e8 	ldr.w	r0, [r3, #488]	; 0x1e8
  *digital_pin_to_info_PGM[M1ENC_B].pad |= IOMUXC_PAD_HYS;
    3898:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    389c:	600a      	str	r2, [r1, #0]
  pinMode(7, OUTPUT); // CS
    389e:	2101      	movs	r1, #1
  *digital_pin_to_info_PGM[M2ENC_A].pad |= IOMUXC_PAD_HYS;
    38a0:	682b      	ldr	r3, [r5, #0]
    38a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    38a6:	602b      	str	r3, [r5, #0]
  *digital_pin_to_info_PGM[M2ENC_B].pad |= IOMUXC_PAD_HYS;
    38a8:	6803      	ldr	r3, [r0, #0]
    38aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    38ae:	6003      	str	r3, [r0, #0]
  pinMode(7, OUTPUT); // CS
    38b0:	2007      	movs	r0, #7
    38b2:	f012 fb4f 	bl	15f54 <pinMode>
  pinMode(11, OUTPUT);//MOSI
    38b6:	2101      	movs	r1, #1
    38b8:	200b      	movs	r0, #11
    38ba:	f012 fb4b 	bl	15f54 <pinMode>
  pinMode(12, OUTPUT);//MISO
    38be:	2101      	movs	r1, #1
    38c0:	200c      	movs	r0, #12
    38c2:	f012 fb47 	bl	15f54 <pinMode>
  attachInterrupt ( M1ENC_A, m1EncoderA, CHANGE );
    38c6:	2204      	movs	r2, #4
    38c8:	491c      	ldr	r1, [pc, #112]	; (393c <UEncoder::setup()+0xe4>)
    38ca:	201d      	movs	r0, #29
    38cc:	f012 fdd0 	bl	16470 <attachInterrupt>
  attachInterrupt ( M2ENC_A, m2EncoderA, CHANGE );
    38d0:	2204      	movs	r2, #4
    38d2:	491b      	ldr	r1, [pc, #108]	; (3940 <UEncoder::setup()+0xe8>)
    38d4:	201f      	movs	r0, #31
    38d6:	f012 fdcb 	bl	16470 <attachInterrupt>
  attachInterrupt ( M1ENC_B, m1EncoderB, CHANGE );
    38da:	2204      	movs	r2, #4
    38dc:	4919      	ldr	r1, [pc, #100]	; (3944 <UEncoder::setup()+0xec>)
    38de:	201c      	movs	r0, #28
    38e0:	f012 fdc6 	bl	16470 <attachInterrupt>
  attachInterrupt ( M2ENC_B, m2EncoderB, CHANGE );
    38e4:	2204      	movs	r2, #4
    38e6:	4918      	ldr	r1, [pc, #96]	; (3948 <UEncoder::setup()+0xf0>)
    38e8:	201e      	movs	r0, #30
    38ea:	f012 fdc1 	bl	16470 <attachInterrupt>
  addPublistItem("enc", "Get encoder value 'enc M1 M2' (int32)");
    38ee:	4620      	mov	r0, r4
    38f0:	4a16      	ldr	r2, [pc, #88]	; (394c <UEncoder::setup()+0xf4>)
    38f2:	4917      	ldr	r1, [pc, #92]	; (3950 <UEncoder::setup()+0xf8>)
    38f4:	f008 fd44 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("pose", "Get current pose 'pose t x y h tilt' (sec,m,m,rad, rad)");
    38f8:	4620      	mov	r0, r4
    38fa:	4a16      	ldr	r2, [pc, #88]	; (3954 <UEncoder::setup()+0xfc>)
    38fc:	4916      	ldr	r1, [pc, #88]	; (3958 <UEncoder::setup()+0x100>)
    38fe:	f008 fd3f 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("vel", "Get velocity 'left right' (m/s)");
    3902:	4620      	mov	r0, r4
    3904:	4a15      	ldr	r2, [pc, #84]	; (395c <UEncoder::setup()+0x104>)
    3906:	4916      	ldr	r1, [pc, #88]	; (3960 <UEncoder::setup()+0x108>)
    3908:	f008 fd3a 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("conf", "Get robot conf (radius, radius, gear, pulsPerRev, wheelbase, sample-time, reversed)");
    390c:	4620      	mov	r0, r4
    390e:	4a15      	ldr	r2, [pc, #84]	; (3964 <UEncoder::setup()+0x10c>)
    3910:	4915      	ldr	r1, [pc, #84]	; (3968 <UEncoder::setup()+0x110>)
    3912:	f008 fd35 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("vem", "Get motor and wheel velocity 'left right left right' (rad/s)");
    3916:	4620      	mov	r0, r4
    3918:	4a14      	ldr	r2, [pc, #80]	; (396c <UEncoder::setup()+0x114>)
    391a:	4915      	ldr	r1, [pc, #84]	; (3970 <UEncoder::setup()+0x118>)
    391c:	f008 fd30 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ene", "Get encoder error 'enc NANcount reversed M1err M2err' (int32)");
    3920:	4620      	mov	r0, r4
    3922:	4914      	ldr	r1, [pc, #80]	; (3974 <UEncoder::setup()+0x11c>)
    3924:	4a14      	ldr	r2, [pc, #80]	; (3978 <UEncoder::setup()+0x120>)
    3926:	f008 fd2b 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    392a:	4621      	mov	r1, r4
    392c:	4813      	ldr	r0, [pc, #76]	; (397c <UEncoder::setup()+0x124>)
}
    392e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    3932:	f009 ba1f 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    3936:	bf00      	nop
    3938:	20008148 	.word	0x20008148
    393c:	000044e5 	.word	0x000044e5
    3940:	00004505 	.word	0x00004505
    3944:	00004525 	.word	0x00004525
    3948:	00004545 	.word	0x00004545
    394c:	2000761c 	.word	0x2000761c
    3950:	20007644 	.word	0x20007644
    3954:	20007648 	.word	0x20007648
    3958:	20007680 	.word	0x20007680
    395c:	20007688 	.word	0x20007688
    3960:	200076a8 	.word	0x200076a8
    3964:	200076ac 	.word	0x200076ac
    3968:	20007700 	.word	0x20007700
    396c:	20007708 	.word	0x20007708
    3970:	20007748 	.word	0x20007748
    3974:	2000778c 	.word	0x2000778c
    3978:	2000774c 	.word	0x2000774c
    397c:	2000eab8 	.word	0x2000eab8

00003980 <UEncoder::sendEncoderErrors()>:
           motortest.encoderReversed,
    3980:	4b15      	ldr	r3, [pc, #84]	; (39d8 <UEncoder::sendEncoderErrors()+0x58>)
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    3982:	f8d0 1528 	ldr.w	r1, [r0, #1320]	; 0x528
    3986:	f8d0 2524 	ldr.w	r2, [r0, #1316]	; 0x524
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    398a:	7f1b      	ldrb	r3, [r3, #28]
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    398c:	440a      	add	r2, r1
{ // return esc status
    398e:	b500      	push	{lr}
    3990:	b09f      	sub	sp, #124	; 0x7c
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3992:	9300      	str	r3, [sp, #0]
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    3994:	f8d0 1534 	ldr.w	r1, [r0, #1332]	; 0x534
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3998:	f8d0 34f0 	ldr.w	r3, [r0, #1264]	; 0x4f0
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    399c:	440a      	add	r2, r1
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    399e:	f8d0 1538 	ldr.w	r1, [r0, #1336]	; 0x538
    39a2:	440a      	add	r2, r1
           errCntA[0][0] + errCntA[0][1] + errCntB[0][0] + errCntB[0][1],
    39a4:	f8d0 151c 	ldr.w	r1, [r0, #1308]	; 0x51c
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    39a8:	9202      	str	r2, [sp, #8]
           errCntA[0][0] + errCntA[0][1] + errCntB[0][0] + errCntB[0][1],
    39aa:	f8d0 2520 	ldr.w	r2, [r0, #1312]	; 0x520
    39ae:	4411      	add	r1, r2
    39b0:	f8d0 252c 	ldr.w	r2, [r0, #1324]	; 0x52c
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    39b4:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
           errCntA[0][0] + errCntA[0][1] + errCntB[0][0] + errCntB[0][1],
    39b8:	4411      	add	r1, r2
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    39ba:	4a08      	ldr	r2, [pc, #32]	; (39dc <UEncoder::sendEncoderErrors()+0x5c>)
    39bc:	4401      	add	r1, r0
    39be:	a805      	add	r0, sp, #20
    39c0:	9101      	str	r1, [sp, #4]
    39c2:	2164      	movs	r1, #100	; 0x64
    39c4:	f017 fe66 	bl	1b694 <snprintf>
  usb.send(s);
    39c8:	a905      	add	r1, sp, #20
    39ca:	4805      	ldr	r0, [pc, #20]	; (39e0 <UEncoder::sendEncoderErrors()+0x60>)
    39cc:	f008 fda6 	bl	c51c <UUSB::send(char const*)>
}
    39d0:	b01f      	add	sp, #124	; 0x7c
    39d2:	f85d fb04 	ldr.w	pc, [sp], #4
    39d6:	bf00      	nop
    39d8:	2000e518 	.word	0x2000e518
    39dc:	200075d0 	.word	0x200075d0
    39e0:	2000eab8 	.word	0x2000eab8
    39e4:	00000000 	.word	0x00000000

000039e8 <UEncoder::sendRobotConfig()>:
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    39e8:	4a1f      	ldr	r2, [pc, #124]	; (3a68 <UEncoder::sendRobotConfig()+0x80>)
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    39ea:	2164      	movs	r1, #100	; 0x64
    39ec:	ed90 3a23 	vldr	s6, [r0, #140]	; 0x8c
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    39f0:	ed92 7a00 	vldr	s14, [r2]
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    39f4:	ed90 4a22 	vldr	s8, [r0, #136]	; 0x88
    39f8:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    39fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3a00:	ed90 5a21 	vldr	s10, [r0, #132]	; 0x84
    3a04:	ed90 6a20 	vldr	s12, [r0, #128]	; 0x80
    3a08:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    3a0c:	4b17      	ldr	r3, [pc, #92]	; (3a6c <UEncoder::sendRobotConfig()+0x84>)
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3a0e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    3a12:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3a16:	4a16      	ldr	r2, [pc, #88]	; (3a70 <UEncoder::sendRobotConfig()+0x88>)
    3a18:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3a1c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 3a60 <UEncoder::sendRobotConfig()+0x78>
{ // return esc status
    3a20:	b510      	push	{r4, lr}
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3a22:	ee87 2b01 	vdiv.f64	d2, d7, d1
{ // return esc status
    3a26:	b0a8      	sub	sp, #160	; 0xa0
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3a28:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    3a2c:	f8b0 3094 	ldrh.w	r3, [r0, #148]	; 0x94
    3a30:	a80f      	add	r0, sp, #60	; 0x3c
    3a32:	940c      	str	r4, [sp, #48]	; 0x30
    3a34:	9306      	str	r3, [sp, #24]
    3a36:	ed8d 3b08 	vstr	d3, [sp, #32]
    3a3a:	ed8d 4b04 	vstr	d4, [sp, #16]
    3a3e:	ed8d 5b02 	vstr	d5, [sp, #8]
    3a42:	ed8d 6b00 	vstr	d6, [sp]
    3a46:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
    3a4a:	f017 fe23 	bl	1b694 <snprintf>
  usb.send(s);
    3a4e:	a90f      	add	r1, sp, #60	; 0x3c
    3a50:	4808      	ldr	r0, [pc, #32]	; (3a74 <UEncoder::sendRobotConfig()+0x8c>)
    3a52:	f008 fd63 	bl	c51c <UUSB::send(char const*)>
}
    3a56:	b028      	add	sp, #160	; 0xa0
    3a58:	bd10      	pop	{r4, pc}
    3a5a:	bf00      	nop
    3a5c:	f3af 8000 	nop.w
    3a60:	00000000 	.word	0x00000000
    3a64:	412e8480 	.word	0x412e8480
    3a68:	2000d0c8 	.word	0x2000d0c8
    3a6c:	2000e4bc 	.word	0x2000e4bc
    3a70:	200075a8 	.word	0x200075a8
    3a74:	2000eab8 	.word	0x2000eab8

00003a78 <UEncoder::sendPose()>:
{
    3a78:	4603      	mov	r3, r0
    3a7a:	4a1f      	ldr	r2, [pc, #124]	; (3af8 <UEncoder::sendPose()+0x80>)
  snprintf(s, MSL, "pose %.4f %.3f %.3f %.4f %.4f\n",
    3a7c:	ed93 4a16 	vldr	s8, [r3, #88]	; 0x58
    3a80:	ed93 5a15 	vldr	s10, [r3, #84]	; 0x54
    3a84:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
    3a88:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    3a8c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    3a90:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3a94:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3a98:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    3a9c:	b500      	push	{lr}
    3a9e:	b0bd      	sub	sp, #244	; 0xf4
    3aa0:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
  snprintf(s, MSL, "pose %.4f %.3f %.3f %.4f %.4f\n",
    3aa4:	ed8d 4b08 	vstr	d4, [sp, #32]
    3aa8:	ed8d 5b06 	vstr	d5, [sp, #24]
    3aac:	ed8d 7b02 	vstr	d7, [sp, #8]
    3ab0:	ed8d 6b04 	vstr	d6, [sp, #16]
    3ab4:	f015 fcaa 	bl	1940c <__aeabi_ul2f>
    3ab8:	ee07 0a90 	vmov	s15, r0
    3abc:	4a0f      	ldr	r2, [pc, #60]	; (3afc <UEncoder::sendPose()+0x84>)
    3abe:	21c8      	movs	r1, #200	; 0xc8
    3ac0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    3ac4:	a80a      	add	r0, sp, #40	; 0x28
    3ac6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 3af0 <UEncoder::sendPose()+0x78>
    3aca:	ee27 7b06 	vmul.f64	d7, d7, d6
    3ace:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3ad2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3ad6:	ed8d 7b00 	vstr	d7, [sp]
    3ada:	f017 fddb 	bl	1b694 <snprintf>
  usb.send(s);
    3ade:	a90a      	add	r1, sp, #40	; 0x28
    3ae0:	4807      	ldr	r0, [pc, #28]	; (3b00 <UEncoder::sendPose()+0x88>)
    3ae2:	f008 fd1b 	bl	c51c <UUSB::send(char const*)>
}
    3ae6:	b03d      	add	sp, #244	; 0xf4
    3ae8:	f85d fb04 	ldr.w	pc, [sp], #4
    3aec:	f3af 8000 	nop.w
    3af0:	a0b5ed8d 	.word	0xa0b5ed8d
    3af4:	3eb0c6f7 	.word	0x3eb0c6f7
    3af8:	2000d0c8 	.word	0x2000d0c8
    3afc:	20007934 	.word	0x20007934
    3b00:	2000eab8 	.word	0x2000eab8
    3b04:	00000000 	.word	0x00000000

00003b08 <UEncoder::sendVelocity()>:
  if (velSubscribeCnt > 0)
    3b08:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	dc00      	bgt.n	3b12 <UEncoder::sendVelocity()+0xa>
    3b10:	4770      	bx	lr
{
    3b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3b16:	ee07 3a90 	vmov	s15, r3
{
    3b1a:	b0ae      	sub	sp, #184	; 0xb8
             robotVelocitySum/velSubscribeCnt,
    3b1c:	f200 550c 	addw	r5, r0, #1292	; 0x50c
             robotTurnrateSum/velSubscribeCnt,
    3b20:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
             wheelVelocityEstSum[1]/velSubscribeCnt,
    3b24:	f200 5704 	addw	r7, r0, #1284	; 0x504
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3b28:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
    snprintf(s, MSL, "vel %.4f %.3f %.3f %.4f %.3f %d\n",
    3b2c:	930a      	str	r3, [sp, #40]	; 0x28
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
             robotVelocitySum/velSubscribeCnt,
    3b32:	edd5 5a00 	vldr	s11, [r5]
    3b36:	4604      	mov	r4, r0
             robotTurnrateSum/velSubscribeCnt,
    3b38:	ed96 6a00 	vldr	s12, [r6]
             wheelVelocityEstSum[1]/velSubscribeCnt,
    3b3c:	ed97 7a00 	vldr	s14, [r7]
             robotVelocitySum/velSubscribeCnt,
    3b40:	ee85 4aa7 	vdiv.f32	s8, s11, s15
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3b44:	edd8 6a00 	vldr	s13, [r8]
    3b48:	4b21      	ldr	r3, [pc, #132]	; (3bd0 <UEncoder::sendVelocity()+0xc8>)
             robotTurnrateSum/velSubscribeCnt,
    3b4a:	ee86 5a27 	vdiv.f32	s10, s12, s15
             wheelVelocityEstSum[1]/velSubscribeCnt,
    3b4e:	ee87 6a27 	vdiv.f32	s12, s14, s15
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    snprintf(s, MSL, "vel %.4f %.3f %.3f %.4f %.3f %d\n",
    3b56:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    3b5a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3b5e:	ed8d 4b08 	vstr	d4, [sp, #32]
    3b62:	ed8d 5b06 	vstr	d5, [sp, #24]
    3b66:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3b6a:	ed8d 6b04 	vstr	d6, [sp, #16]
    3b6e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3b72:	ed8d 7b02 	vstr	d7, [sp, #8]
    3b76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    3b7a:	f015 fc47 	bl	1940c <__aeabi_ul2f>
    3b7e:	ee07 0a90 	vmov	s15, r0
    3b82:	4a14      	ldr	r2, [pc, #80]	; (3bd4 <UEncoder::sendVelocity()+0xcc>)
    3b84:	2182      	movs	r1, #130	; 0x82
    3b86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    3b8a:	a80d      	add	r0, sp, #52	; 0x34
    3b8c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 3bc8 <UEncoder::sendVelocity()+0xc0>
    3b90:	ee27 7b06 	vmul.f64	d7, d7, d6
    3b94:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3b98:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3b9c:	ed8d 7b00 	vstr	d7, [sp]
    3ba0:	f017 fd78 	bl	1b694 <snprintf>
    usb.send(s);
    3ba4:	a90d      	add	r1, sp, #52	; 0x34
    3ba6:	480c      	ldr	r0, [pc, #48]	; (3bd8 <UEncoder::sendVelocity()+0xd0>)
    3ba8:	f008 fcb8 	bl	c51c <UUSB::send(char const*)>
    wheelVelocityEstSum[0] = 0;
    3bac:	2300      	movs	r3, #0
    velSubscribeCnt = 0;
    3bae:	2200      	movs	r2, #0
    wheelVelocityEstSum[0] = 0;
    3bb0:	f8c8 3000 	str.w	r3, [r8]
    wheelVelocityEstSum[1] = 0;
    3bb4:	603b      	str	r3, [r7, #0]
    robotTurnrateSum = 0.0;
    3bb6:	6033      	str	r3, [r6, #0]
    robotVelocitySum = 0.0;
    3bb8:	602b      	str	r3, [r5, #0]
    velSubscribeCnt = 0;
    3bba:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
}
    3bbe:	b02e      	add	sp, #184	; 0xb8
    3bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc4:	f3af 8000 	nop.w
    3bc8:	a0b5ed8d 	.word	0xa0b5ed8d
    3bcc:	3eb0c6f7 	.word	0x3eb0c6f7
    3bd0:	2000d0c8 	.word	0x2000d0c8
    3bd4:	20007574 	.word	0x20007574
    3bd8:	2000eab8 	.word	0x2000eab8
    3bdc:	00000000 	.word	0x00000000

00003be0 <UEncoder::sendMotorVelocity()>:
{
    3be0:	4603      	mov	r3, r0
    3be2:	4a2b      	ldr	r2, [pc, #172]	; (3c90 <UEncoder::sendMotorVelocity()+0xb0>)
  snprintf(s, MSL, "vem %.4f %.1f %.1f %.2f %.2f %d %d %d %d %d %d %d %d\n",
    3be4:	ed93 4a27 	vldr	s8, [r3, #156]	; 0x9c
    3be8:	ed93 5a26 	vldr	s10, [r3, #152]	; 0x98
    3bec:	ed93 6a29 	vldr	s12, [r3, #164]	; 0xa4
    3bf0:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    3bf4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    3bf8:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3bfc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3c00:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    3c04:	b500      	push	{lr}
    3c06:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    3c0a:	b0b5      	sub	sp, #212	; 0xd4
  snprintf(s, MSL, "vem %.4f %.1f %.1f %.2f %.2f %d %d %d %d %d %d %d %d\n",
    3c0c:	f8d3 2538 	ldr.w	r2, [r3, #1336]	; 0x538
    3c10:	ed8d 4b08 	vstr	d4, [sp, #32]
    3c14:	ed8d 5b06 	vstr	d5, [sp, #24]
    3c18:	9211      	str	r2, [sp, #68]	; 0x44
    3c1a:	f8d3 2534 	ldr.w	r2, [r3, #1332]	; 0x534
    3c1e:	ed8d 7b02 	vstr	d7, [sp, #8]
    3c22:	ed8d 6b04 	vstr	d6, [sp, #16]
    3c26:	9210      	str	r2, [sp, #64]	; 0x40
    3c28:	f8d3 2530 	ldr.w	r2, [r3, #1328]	; 0x530
    3c2c:	920f      	str	r2, [sp, #60]	; 0x3c
    3c2e:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    3c32:	920e      	str	r2, [sp, #56]	; 0x38
    3c34:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
    3c38:	920d      	str	r2, [sp, #52]	; 0x34
    3c3a:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
    3c3e:	920c      	str	r2, [sp, #48]	; 0x30
    3c40:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3c44:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
    3c48:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    3c4c:	f015 fbde 	bl	1940c <__aeabi_ul2f>
    3c50:	ee07 0a90 	vmov	s15, r0
    3c54:	4a0f      	ldr	r2, [pc, #60]	; (3c94 <UEncoder::sendMotorVelocity()+0xb4>)
    3c56:	2182      	movs	r1, #130	; 0x82
    3c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    3c5c:	a813      	add	r0, sp, #76	; 0x4c
    3c5e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 3c88 <UEncoder::sendMotorVelocity()+0xa8>
    3c62:	ee27 7b06 	vmul.f64	d7, d7, d6
    3c66:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3c6a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3c6e:	ed8d 7b00 	vstr	d7, [sp]
    3c72:	f017 fd0f 	bl	1b694 <snprintf>
  usb.send(s);
    3c76:	a913      	add	r1, sp, #76	; 0x4c
    3c78:	4807      	ldr	r0, [pc, #28]	; (3c98 <UEncoder::sendMotorVelocity()+0xb8>)
    3c7a:	f008 fc4f 	bl	c51c <UUSB::send(char const*)>
}
    3c7e:	b035      	add	sp, #212	; 0xd4
    3c80:	f85d fb04 	ldr.w	pc, [sp], #4
    3c84:	f3af 8000 	nop.w
    3c88:	a0b5ed8d 	.word	0xa0b5ed8d
    3c8c:	3eb0c6f7 	.word	0x3eb0c6f7
    3c90:	2000d0c8 	.word	0x2000d0c8
    3c94:	200075e4 	.word	0x200075e4
    3c98:	2000eab8 	.word	0x2000eab8

00003c9c <UEncoder::sendData(int)>:
  if (item == 0)
    3c9c:	2905      	cmp	r1, #5
    3c9e:	d804      	bhi.n	3caa <UEncoder::sendData(int)+0xe>
    3ca0:	e8df f001 	tbb	[pc, r1]
    3ca4:	1b191706 	.word	0x1b191706
    3ca8:	041d      	.short	0x041d
    3caa:	4770      	bx	lr
    sendEncoderErrors();
    3cac:	f7ff be68 	b.w	3980 <UEncoder::sendEncoderErrors()>
{
    3cb0:	b500      	push	{lr}
  snprintf(s, MSL, "enc %lu %lu\r\n", encoder[0], encoder[1]);
    3cb2:	e9d0 310d 	ldrd	r3, r1, [r0, #52]	; 0x34
{
    3cb6:	b09d      	sub	sp, #116	; 0x74
  snprintf(s, MSL, "enc %lu %lu\r\n", encoder[0], encoder[1]);
    3cb8:	4a0a      	ldr	r2, [pc, #40]	; (3ce4 <UEncoder::sendData(int)+0x48>)
    3cba:	9100      	str	r1, [sp, #0]
    3cbc:	a803      	add	r0, sp, #12
    3cbe:	2164      	movs	r1, #100	; 0x64
    3cc0:	f017 fce8 	bl	1b694 <snprintf>
  usb.send(s);
    3cc4:	a903      	add	r1, sp, #12
    3cc6:	4808      	ldr	r0, [pc, #32]	; (3ce8 <UEncoder::sendData(int)+0x4c>)
    3cc8:	f008 fc28 	bl	c51c <UUSB::send(char const*)>
}
    3ccc:	b01d      	add	sp, #116	; 0x74
    3cce:	f85d fb04 	ldr.w	pc, [sp], #4
    sendPose();
    3cd2:	f7ff bed1 	b.w	3a78 <UEncoder::sendPose()>
    sendVelocity();
    3cd6:	f7ff bf17 	b.w	3b08 <UEncoder::sendVelocity()>
    sendRobotConfig();
    3cda:	f7ff be85 	b.w	39e8 <UEncoder::sendRobotConfig()>
    sendMotorVelocity();
    3cde:	f7ff bf7f 	b.w	3be0 <UEncoder::sendMotorVelocity()>
    3ce2:	bf00      	nop
    3ce4:	20007598 	.word	0x20007598
    3ce8:	2000eab8 	.word	0x2000eab8

00003cec <UEncoder::eePromSave()>:
{
    3cec:	b510      	push	{r4, lr}
    3cee:	4604      	mov	r4, r0
    push32(u.u32);
    3cf0:	480d      	ldr	r0, [pc, #52]	; (3d28 <UEncoder::eePromSave()+0x3c>)
    3cf2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    3cf6:	f7ff f977 	bl	2fe8 <EEConfig::push32(unsigned long)>
    3cfa:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    3cfe:	480a      	ldr	r0, [pc, #40]	; (3d28 <UEncoder::eePromSave()+0x3c>)
    3d00:	f7ff f972 	bl	2fe8 <EEConfig::push32(unsigned long)>
    3d04:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    3d08:	4807      	ldr	r0, [pc, #28]	; (3d28 <UEncoder::eePromSave()+0x3c>)
    3d0a:	f7ff f96d 	bl	2fe8 <EEConfig::push32(unsigned long)>
  eeConfig.pushWord(pulsPerRev);
    3d0e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    3d12:	4805      	ldr	r0, [pc, #20]	; (3d28 <UEncoder::eePromSave()+0x3c>)
    3d14:	f7ff f9a0 	bl	3058 <EEConfig::pushWord(unsigned short)>
    3d18:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    3d1c:	4802      	ldr	r0, [pc, #8]	; (3d28 <UEncoder::eePromSave()+0x3c>)
}
    3d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d22:	f7ff b961 	b.w	2fe8 <EEConfig::push32(unsigned long)>
    3d26:	bf00      	nop
    3d28:	2000dbe8 	.word	0x2000dbe8
    3d2c:	00000000 	.word	0x00000000

00003d30 <UEncoder::eePromLoad()>:
{
    3d30:	b538      	push	{r3, r4, r5, lr}
    return stringConfig;
    3d32:	4d3f      	ldr	r5, [pc, #252]	; (3e30 <UEncoder::eePromLoad()+0x100>)
  if (not eeConfig.isStringConfig())
    3d34:	f895 3020 	ldrb.w	r3, [r5, #32]
    3d38:	b11b      	cbz	r3, 3d42 <UEncoder::eePromLoad()+0x12>
    configAddr+=bytes;
    3d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3d3c:	3312      	adds	r3, #18
    3d3e:	626b      	str	r3, [r5, #36]	; 0x24
}
    3d40:	bd38      	pop	{r3, r4, r5, pc}
    u.u32 = read32();
    3d42:	4604      	mov	r4, r0
    3d44:	4628      	mov	r0, r5
    3d46:	f7ff f9a3 	bl	3090 <EEConfig::read32()>
    3d4a:	4603      	mov	r3, r0
    3d4c:	4628      	mov	r0, r5
    odoWheelRadius[0] =  eeConfig.readFloat();
    3d4e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    3d52:	f7ff f99d 	bl	3090 <EEConfig::read32()>
    3d56:	4603      	mov	r3, r0
    3d58:	4628      	mov	r0, r5
    odoWheelRadius[1] =  eeConfig.readFloat();
    3d5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    3d5e:	f7ff f997 	bl	3090 <EEConfig::read32()>
    3d62:	4603      	mov	r3, r0
    pulsPerRev = eeConfig.readWord();
    3d64:	4628      	mov	r0, r5
    gear = eeConfig.readFloat();
    3d66:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    pulsPerRev = eeConfig.readWord();
    3d6a:	f7ff f9b9 	bl	30e0 <EEConfig::readWord()>
    3d6e:	4603      	mov	r3, r0
    3d70:	4628      	mov	r0, r5
    3d72:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    3d76:	f7ff f98b 	bl	3090 <EEConfig::read32()>
    if (pulsPerRev < 1)
    3d7a:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    return u.f;  
    3d7e:	ee07 0a90 	vmov	s15, r0
    3d82:	2b00      	cmp	r3, #0
    3d84:	d042      	beq.n	3e0c <UEncoder::eePromLoad()+0xdc>
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    3d86:	ee07 3a10 	vmov	s14, r3
    3d8a:	ed9f 4b23 	vldr	d4, [pc, #140]	; 3e18 <UEncoder::eePromLoad()+0xe8>
    3d8e:	eeb8 6bc7 	vcvt.f64.s32	d6, s14
    3d92:	ee84 5b06 	vdiv.f64	d5, d4, d6
    3d96:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    if (gear < 1)
    3d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3d9e:	edd4 6a22 	vldr	s13, [r4, #136]	; 0x88
    if (odoWheelRadius[0] < 0.001)
    3da2:	ed94 6a20 	vldr	s12, [r4, #128]	; 0x80
    if (gear < 1)
    3da6:	eef4 6ac7 	vcmpe.f32	s13, s14
    if (odoWheelRadius[0] < 0.001)
    3daa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3dae:	ed9f 4b1c 	vldr	d4, [pc, #112]	; 3e20 <UEncoder::eePromLoad()+0xf0>
    if (gear < 1)
    3db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (odoWheelRadius[0] < 0.001)
    3db6:	eeb4 6bc4 	vcmpe.f64	d6, d4
      gear = 1;
    3dba:	bf48      	it	mi
    3dbc:	ed84 7a22 	vstrmi	s14, [r4, #136]	; 0x88
    if (odoWheelRadius[0] < 0.001)
    3dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dc4:	d502      	bpl.n	3dcc <UEncoder::eePromLoad()+0x9c>
      odoWheelRadius[0] = 0.001;
    3dc6:	4b1b      	ldr	r3, [pc, #108]	; (3e34 <UEncoder::eePromLoad()+0x104>)
    3dc8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (odoWheelRadius[1] < 0.001)
    3dcc:	ed94 6a21 	vldr	s12, [r4, #132]	; 0x84
    3dd0:	ed9f 4b13 	vldr	d4, [pc, #76]	; 3e20 <UEncoder::eePromLoad()+0xf0>
    3dd4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3dd8:	eeb4 6bc4 	vcmpe.f64	d6, d4
    3ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3de0:	d502      	bpl.n	3de8 <UEncoder::eePromLoad()+0xb8>
      odoWheelRadius[1] = 0.001;
    3de2:	4b14      	ldr	r3, [pc, #80]	; (3e34 <UEncoder::eePromLoad()+0x104>)
    3de4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (odoWheelBase < 0.01)
    3de8:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
      odoWheelBase = 0.01;
    3dec:	ed9f 7a12 	vldr	s14, [pc, #72]	; 3e38 <UEncoder::eePromLoad()+0x108>
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    3df0:	ed84 5a72 	vstr	s10, [r4, #456]	; 0x1c8
    if (odoWheelBase < 0.01)
    3df4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 3e28 <UEncoder::eePromLoad()+0xf8>
      odoWheelBase = 0.01;
    3df8:	eeb4 4b46 	vcmp.f64	d4, d6
    3dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e00:	bf48      	it	mi
    3e02:	eef0 7a47 	vmovmi.f32	s15, s14
    3e06:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
}
    3e0a:	bd38      	pop	{r3, r4, r5, pc}
      pulsPerRev = 1;
    3e0c:	2301      	movs	r3, #1
    3e0e:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 3e3c <UEncoder::eePromLoad()+0x10c>
    3e12:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    3e16:	e7c0      	b.n	3d9a <UEncoder::eePromLoad()+0x6a>
    3e18:	54442d18 	.word	0x54442d18
    3e1c:	401921fb 	.word	0x401921fb
    3e20:	d2f1a9fc 	.word	0xd2f1a9fc
    3e24:	3f50624d 	.word	0x3f50624d
    3e28:	47ae147b 	.word	0x47ae147b
    3e2c:	3f847ae1 	.word	0x3f847ae1
    3e30:	2000dbe8 	.word	0x2000dbe8
    3e34:	3a83126f 	.word	0x3a83126f
    3e38:	3c23d70a 	.word	0x3c23d70a
    3e3c:	40c90fdb 	.word	0x40c90fdb

00003e40 <UEncoder::clearPose()>:
  pose[0] = 0;
    3e40:	2300      	movs	r3, #0
  encoder[0] = 0;
    3e42:	2200      	movs	r2, #0
  pose[0] = 0;
    3e44:	64c3      	str	r3, [r0, #76]	; 0x4c
  pose[1] = 0;
    3e46:	6503      	str	r3, [r0, #80]	; 0x50
  pose[2] = 0;
    3e48:	6543      	str	r3, [r0, #84]	; 0x54
  distance = 0.0;
    3e4a:	65c3      	str	r3, [r0, #92]	; 0x5c
    tripA = 0;
    3e4c:	6603      	str	r3, [r0, #96]	; 0x60
    tripAh = 0;
    3e4e:	6683      	str	r3, [r0, #104]	; 0x68
    tripAtime = 0;
    3e50:	6703      	str	r3, [r0, #112]	; 0x70
    tripB = 0;
    3e52:	6643      	str	r3, [r0, #100]	; 0x64
    tripBh = 0;
    3e54:	66c3      	str	r3, [r0, #108]	; 0x6c
    tripBtime = 0;
    3e56:	6743      	str	r3, [r0, #116]	; 0x74
  encoder[1] = 0;
    3e58:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  encoderLast[1] = 0;
    3e5c:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
  tripAreset();
  tripBreset();
}
    3e60:	4770      	bx	lr
    3e62:	bf00      	nop
    3e64:	0000      	movs	r0, r0
	...

00003e68 <UEncoder::updatePose(unsigned long)>:


void UEncoder::updatePose(uint32_t loop)
{
  // wheel velocity on radians per second
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3e68:	edd0 7a28 	vldr	s15, [r0, #160]	; 0xa0
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
  // Turnrate in rad/sec
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
  // Velocity in m/s
  robotVelocity = (wheelVelocityEst[0] + wheelVelocityEst[0])/2.0;
    3e6c:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3e70:	edd0 6a22 	vldr	s13, [r0, #136]	; 0x88
  //
  // sum for subscriber
  wheelVelocityEstSum[0] += wheelVelocityEst[0];
    3e74:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3e78:	eef1 7a67 	vneg.f32	s15, s15
  wheelVelocity[1] =  motorVelocity[1] /gear;
    3e7c:	ed90 7a29 	vldr	s14, [r0, #164]	; 0xa4
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
    3e80:	ed90 5a20 	vldr	s10, [r0, #128]	; 0x80
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3e84:	f200 5104 	addw	r1, r0, #1284	; 0x504
  wheelVelocity[1] =  motorVelocity[1] /gear;
    3e88:	eec7 5a26 	vdiv.f32	s11, s14, s13
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
    3e8c:	edd0 3a21 	vldr	s7, [r0, #132]	; 0x84
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3e90:	ed90 4a23 	vldr	s8, [r0, #140]	; 0x8c
  robotTurnrateSum += robotTurnrate;
    3e94:	f500 6ca1 	add.w	ip, r0, #1288	; 0x508
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3e98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
{
    3e9c:	b510      	push	{r4, lr}
    3e9e:	4604      	mov	r4, r0
  robotVelocitySum += robotVelocity;
    3ea0:	f200 500c 	addw	r0, r0, #1292	; 0x50c
{
    3ea4:	ed2d 8b06 	vpush	{d8-d10}
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
    3ea8:	ee25 6aa3 	vmul.f32	s12, s11, s7
  wheelVelocity[1] =  motorVelocity[1] /gear;
    3eac:	edc4 5a27 	vstr	s11, [r4, #156]	; 0x9c
  tripAh += dh;
  tripB += ds;
  tripBh += dh;

  // add half the angle
  pose[2] += dh/2.0;
    3eb0:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
    3eb4:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
    3eb8:	ee67 7a05 	vmul.f32	s15, s14, s10
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3ebc:	ed84 7a26 	vstr	s14, [r4, #152]	; 0x98
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3ec0:	ee76 5a67 	vsub.f32	s11, s12, s15
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
    3ec4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
  robotVelocity = (wheelVelocityEst[0] + wheelVelocityEst[0])/2.0;
    3ec8:	ee37 7aa7 	vadd.f32	s14, s15, s15
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3ecc:	ee85 3a84 	vdiv.f32	s6, s11, s8
  robotVelocity = (wheelVelocityEst[0] + wheelVelocityEst[0])/2.0;
    3ed0:	ee27 7a24 	vmul.f32	s14, s14, s9
    3ed4:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3ed8:	ed84 3a1e 	vstr	s6, [r4, #120]	; 0x78
  wheelVelocityEstSum[0] += wheelVelocityEst[0];
    3edc:	edd3 5a00 	vldr	s11, [r3]
    3ee0:	ee75 7aa7 	vadd.f32	s15, s11, s15
    3ee4:	edc3 7a00 	vstr	s15, [r3]
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3ee8:	edd1 7a00 	vldr	s15, [r1]
  velSubscribeCnt++;
    3eec:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3ef0:	ee77 7a86 	vadd.f32	s15, s15, s12
  velSubscribeCnt++;
    3ef4:	1c5a      	adds	r2, r3, #1
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3ef6:	edc1 7a00 	vstr	s15, [r1]
  robotTurnrateSum += robotTurnrate;
    3efa:	eddc 7a00 	vldr	s15, [ip]
    3efe:	ee77 7a83 	vadd.f32	s15, s15, s6
  uint32_t p1 = encoder[0];
    3f02:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
  robotTurnrateSum += robotTurnrate;
    3f06:	edcc 7a00 	vstr	s15, [ip]
  robotVelocitySum += robotVelocity;
    3f0a:	edd0 7a00 	vldr	s15, [r0]
    3f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
    3f12:	edc0 7a00 	vstr	s15, [r0]
  velSubscribeCnt++;
    3f16:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    3f1a:	ed94 3a72 	vldr	s6, [r4, #456]	; 0x1c8
  distance += ds;
    3f1e:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
  tripA += ds;
    3f22:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
  int dp1 = (int32_t)p1 - (int32_t)encoderLast[0];
    3f26:	e9d4 202d 	ldrd	r2, r0, [r4, #180]	; 0xb4
  encoderLast[1] = p2;
    3f2a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  int dp2 = (int32_t)p2 - (int32_t)encoderLast[1];
    3f2e:	1a1b      	subs	r3, r3, r0
  encoderLast[0] = p1;
    3f30:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  pose[2] += dh/2.0;
    3f34:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
  int dp2 = (int32_t)p2 - (int32_t)encoderLast[1];
    3f38:	ee07 3a90 	vmov	s15, r3
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    3f3c:	1a53      	subs	r3, r2, r1
  pose[2] += dh/2.0;
    3f3e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    3f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    3f46:	ee07 3a10 	vmov	s14, r3
    3f4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    3f4e:	ee67 7a83 	vmul.f32	s15, s15, s6
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    3f52:	ee27 7a03 	vmul.f32	s14, s14, s6
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    3f56:	eec7 8aa6 	vdiv.f32	s17, s15, s13
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    3f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    3f5e:	ee68 8aa3 	vmul.f32	s17, s17, s7
  float dh = (d2 - d1) / odoWheelBase;
    3f62:	eeb0 7a68 	vmov.f32	s14, s17
  float ds = (d1 + d2) / 2.0;
    3f66:	eee5 8a27 	vfma.f32	s17, s10, s15
  float dh = (d2 - d1) / odoWheelBase;
    3f6a:	eea5 7a67 	vfms.f32	s14, s10, s15
  float ds = (d1 + d2) / 2.0;
    3f6e:	ee68 8aa4 	vmul.f32	s17, s17, s9
  float dh = (d2 - d1) / odoWheelBase;
    3f72:	eec7 6a04 	vdiv.f32	s13, s14, s8
  tripA += ds;
    3f76:	ee76 7a28 	vadd.f32	s15, s12, s17
  tripB += ds;
    3f7a:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
  distance += ds;
    3f7e:	ee35 7aa8 	vadd.f32	s14, s11, s17
  tripB += ds;
    3f82:	ee36 6a28 	vadd.f32	s12, s12, s17
  tripA += ds;
    3f86:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
  distance += ds;
    3f8a:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
  tripBh += dh;
    3f8e:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
  tripAh += dh;
    3f92:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
  tripB += ds;
    3f96:	ed84 6a19 	vstr	s12, [r4, #100]	; 0x64
  pose[2] += dh/2.0;
    3f9a:	eeb7 aae6 	vcvt.f64.f32	d10, s13
  tripAh += dh;
    3f9e:	ee37 7a26 	vadd.f32	s14, s14, s13
  tripBh += dh;
    3fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
  pose[2] += dh/2.0;
    3fa6:	eeaa 0b09 	vfma.f64	d0, d10, d9
  tripAh += dh;
    3faa:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
  tripBh += dh;
    3fae:	edc4 7a1b 	vstr	s15, [r4, #108]	; 0x6c
  pose[2] += dh/2.0;
    3fb2:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
  // update pose position
  pose[0] += cosf(pose[2]) * ds;
    3fb6:	eeb0 0a48 	vmov.f32	s0, s16
    3fba:	f014 fc7d 	bl	188b8 <cosf>
    3fbe:	eeb0 7a40 	vmov.f32	s14, s0
    3fc2:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
  pose[1] += sinf(pose[2]) * ds;
    3fc6:	eeb0 0a48 	vmov.f32	s0, s16
  pose[0] += cosf(pose[2]) * ds;
    3fca:	eee7 7a28 	vfma.f32	s15, s14, s17
    3fce:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
  pose[1] += sinf(pose[2]) * ds;
    3fd2:	f014 fb6d 	bl	186b0 <sinf>
  // add other half angle
  pose[2] += dh/2.0;
    3fd6:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
  pose[1] += sinf(pose[2]) * ds;
    3fda:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
  pose[2] += dh/2.0;
    3fde:	eeaa 7b09 	vfma.f64	d7, d10, d9
  pose[1] += sinf(pose[2]) * ds;
    3fe2:	eee0 6a28 	vfma.f32	s13, s0, s17
  // fold angle
  if (pose[2] > M_PI)
    3fe6:	ed9f 5b18 	vldr	d5, [pc, #96]	; 4048 <UEncoder::updatePose(unsigned long)+0x1e0>
  pose[2] += dh/2.0;
    3fea:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  pose[1] += sinf(pose[2]) * ds;
    3fee:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
  if (pose[2] > M_PI)
    3ff2:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
    3ff6:	eeb4 6bc5 	vcmpe.f64	d6, d5
    3ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ffe:	dd0a      	ble.n	4016 <UEncoder::updatePose(unsigned long)+0x1ae>
    pose[2] -= M_PI * 2;
    4000:	ed9f 7b13 	vldr	d7, [pc, #76]	; 4050 <UEncoder::updatePose(unsigned long)+0x1e8>
  else if (pose[2] < -M_PI)
    pose[2] += M_PI * 2;

}
    4004:	ecbd 8b06 	vpop	{d8-d10}
    pose[2] -= M_PI * 2;
    4008:	ee36 6b47 	vsub.f64	d6, d6, d7
    400c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    4010:	ed84 6a15 	vstr	s12, [r4, #84]	; 0x54
}
    4014:	bd10      	pop	{r4, pc}
  else if (pose[2] < -M_PI)
    4016:	ed9f 5b10 	vldr	d5, [pc, #64]	; 4058 <UEncoder::updatePose(unsigned long)+0x1f0>
    401a:	eeb4 6bc5 	vcmpe.f64	d6, d5
    401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4022:	d50a      	bpl.n	403a <UEncoder::updatePose(unsigned long)+0x1d2>
    pose[2] += M_PI * 2;
    4024:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 4050 <UEncoder::updatePose(unsigned long)+0x1e8>
}
    4028:	ecbd 8b06 	vpop	{d8-d10}
    pose[2] += M_PI * 2;
    402c:	ee36 6b07 	vadd.f64	d6, d6, d7
    4030:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    4034:	ed84 6a15 	vstr	s12, [r4, #84]	; 0x54
}
    4038:	bd10      	pop	{r4, pc}
    403a:	ecbd 8b06 	vpop	{d8-d10}
  pose[2] += dh/2.0;
    403e:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
}
    4042:	bd10      	pop	{r4, pc}
    4044:	f3af 8000 	nop.w
    4048:	54442d18 	.word	0x54442d18
    404c:	400921fb 	.word	0x400921fb
    4050:	54442d18 	.word	0x54442d18
    4054:	401921fb 	.word	0x401921fb
    4058:	54442d18 	.word	0x54442d18
    405c:	c00921fb 	.word	0xc00921fb

00004060 <UEncoder::updateVelocityEstimate()>:

void UEncoder::updateVelocityEstimate()
{
    4060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4064:	b08d      	sub	sp, #52	; 0x34
  const float    one_sec_in_cpu  = F_CPU;
  const uint32_t half_sec_in_cpu = F_CPU/2;
  // motor 1 velocity
  int j = active;
    4066:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
  float velSum[MOTOR_CNT] = {0};
  int velSumCnt[MOTOR_CNT] = {0};
  float velSlowSum[MOTOR_CNT] = {0};
  int velSlowSumCnt[MOTOR_CNT] = {0};
  // angle for full period of encoder
  const float app = anglePerPuls * 4;
    406a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    406e:	ed90 6a72 	vldr	s12, [r0, #456]	; 0x1c8
    4072:	ab06      	add	r3, sp, #24
  float velSum[MOTOR_CNT] = {0};
    4074:	2200      	movs	r2, #0
        velSlowSumCnt[m]++;
      }
      else
      { // use time since saved transition
        uint32_t dt_cpu = transitionTime_cpu[m][j][ab4] - lastTransitionTime_cpu[m][ab4];
        float v = 0;
    4076:	ed9f 5a5f 	vldr	s10, [pc, #380]	; 41f4 <UEncoder::updateVelocityEstimate()+0x194>
    407a:	f10d 0c10 	add.w	ip, sp, #16
    407e:	9302      	str	r3, [sp, #8]
  active = (j + 1) % 2;
    4080:	1c4b      	adds	r3, r1, #1
    4082:	f101 010e 	add.w	r1, r1, #14
  const float app = anglePerPuls * 4;
    4086:	ee26 6a27 	vmul.f32	s12, s12, s15
  active = (j + 1) % 2;
    408a:	f003 0301 	and.w	r3, r3, #1
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
        { // no overload, and valid timing
          v = one_sec_in_cpu / dt_cpu * incrEncoder[m][j][ab4] * app;
    408e:	eddf 5a5a 	vldr	s11, [pc, #360]	; 41f8 <UEncoder::updateVelocityEstimate()+0x198>
    4092:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    4096:	f10d 0e20 	add.w	lr, sp, #32
  active = (j + 1) % 2;
    409a:	bf48      	it	mi
    409c:	425b      	negmi	r3, r3
    409e:	ac0a      	add	r4, sp, #40	; 0x28
    40a0:	9101      	str	r1, [sp, #4]
    40a2:	f100 08a0 	add.w	r8, r0, #160	; 0xa0
    40a6:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
    40aa:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
    40ae:	4f53      	ldr	r7, [pc, #332]	; (41fc <UEncoder::updateVelocityEstimate()+0x19c>)
    40b0:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
        // save new transition time as last
        lastTransitionTime_cpu[m][ab4] = transitionTime_cpu[m][j][ab4];
        // edges used in this sample
        incrEnc[m][ab4] = incrEncoder[m][j][ab4];
        // prepare for next period
        incrEncoder[m][j][ab4] = 0;
    40b4:	4616      	mov	r6, r2
  float velSum[MOTOR_CNT] = {0};
    40b6:	9204      	str	r2, [sp, #16]
  int velSumCnt[MOTOR_CNT] = {0};
    40b8:	9206      	str	r2, [sp, #24]
  float velSlowSum[MOTOR_CNT] = {0};
    40ba:	9208      	str	r2, [sp, #32]
  int velSlowSumCnt[MOTOR_CNT] = {0};
    40bc:	920a      	str	r2, [sp, #40]	; 0x28
  float velSum[MOTOR_CNT] = {0};
    40be:	9205      	str	r2, [sp, #20]
  int velSumCnt[MOTOR_CNT] = {0};
    40c0:	9207      	str	r2, [sp, #28]
  float velSlowSum[MOTOR_CNT] = {0};
    40c2:	9209      	str	r2, [sp, #36]	; 0x24
  int velSlowSumCnt[MOTOR_CNT] = {0};
    40c4:	920b      	str	r2, [sp, #44]	; 0x2c
    40c6:	9103      	str	r1, [sp, #12]
{
    40c8:	9801      	ldr	r0, [sp, #4]
    40ca:	f103 0910 	add.w	r9, r3, #16
      dEncoder[m][ab4] = incrEncoder[m][j][ab4];
    40ce:	f850 1f04 	ldr.w	r1, [r0, #4]!
    40d2:	f843 1f04 	str.w	r1, [r3, #4]!
      if (incrEncoder[m][j][ab4] == 0)
    40d6:	2900      	cmp	r1, #0
    40d8:	d143      	bne.n	4162 <UEncoder::updateVelocityEstimate()+0x102>
        uint32_t dt_cpu = ARM_DWT_CYCCNT - lastTransitionTime_cpu[m][ab4];
    40da:	4949      	ldr	r1, [pc, #292]	; (4200 <UEncoder::updateVelocityEstimate()+0x1a0>)
    40dc:	684d      	ldr	r5, [r1, #4]
    40de:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
    40e2:	1a69      	subs	r1, r5, r1
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
    40e4:	1e4d      	subs	r5, r1, #1
    40e6:	42bd      	cmp	r5, r7
    40e8:	d863      	bhi.n	41b2 <UEncoder::updateVelocityEstimate()+0x152>
          v = one_sec_in_cpu/dt_cpu;
    40ea:	ee07 1a90 	vmov	s15, r1
          if (fabsf(v) * app < fabsf(motorVelocity[m]))
    40ee:	edd8 6a00 	vldr	s13, [r8]
          v = one_sec_in_cpu/dt_cpu;
    40f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
          if (fabsf(v) * app < fabsf(motorVelocity[m]))
    40f6:	eef0 6ae6 	vabs.f32	s13, s13
          v = one_sec_in_cpu/dt_cpu;
    40fa:	eec5 7a87 	vdiv.f32	s15, s11, s14
          if (fabsf(v) * app < fabsf(motorVelocity[m]))
    40fe:	ee67 7a86 	vmul.f32	s15, s15, s12
    4102:	eef4 7ae6 	vcmpe.f32	s15, s13
    4106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    410a:	d45a      	bmi.n	41c2 <UEncoder::updateVelocityEstimate()+0x162>
            if (velocityPart[m][ab4] > 0)
    410c:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
        velSlowSum[m] +=  velocityPart[m][ab4];
    4110:	ed9e 7a00 	vldr	s14, [lr]
        velSlowSumCnt[m]++;
    4114:	6821      	ldr	r1, [r4, #0]
        velSlowSum[m] +=  velocityPart[m][ab4];
    4116:	ee77 7a27 	vadd.f32	s15, s14, s15
        incrEnc[m][ab4] = 0;
    411a:	669e      	str	r6, [r3, #104]	; 0x68
        velSlowSumCnt[m]++;
    411c:	3101      	adds	r1, #1
        velSlowSum[m] +=  velocityPart[m][ab4];
    411e:	edce 7a00 	vstr	s15, [lr]
        velSlowSumCnt[m]++;
    4122:	6021      	str	r1, [r4, #0]
    for (int ab4 = 0; ab4 < 4; ab4++)
    4124:	454b      	cmp	r3, r9
    4126:	d1d2      	bne.n	40ce <UEncoder::updateVelocityEstimate()+0x6e>
        // use this velocity
        velSum[m] += v;
        velSumCnt[m]++;
      }
    }
    if (velSumCnt[m] > 0)
    4128:	2a00      	cmp	r2, #0
    412a:	dd59      	ble.n	41e0 <UEncoder::updateVelocityEstimate()+0x180>
      motorVelocity[m] = velSum[m] / velSumCnt[m];
    412c:	ee07 2a90 	vmov	s15, r2
    4130:	eddc 6a00 	vldr	s13, [ip]
    4134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    4138:	eec6 7a87 	vdiv.f32	s15, s13, s14
  for (int m = 0; m < MOTOR_CNT; m++)
    413c:	9b01      	ldr	r3, [sp, #4]
    413e:	f10c 0c04 	add.w	ip, ip, #4
    4142:	ece8 7a01 	vstmia	r8!, {s15}
    4146:	f10e 0e04 	add.w	lr, lr, #4
    414a:	3320      	adds	r3, #32
    414c:	3404      	adds	r4, #4
    414e:	9301      	str	r3, [sp, #4]
    4150:	9b03      	ldr	r3, [sp, #12]
    4152:	4598      	cmp	r8, r3
    4154:	d041      	beq.n	41da <UEncoder::updateVelocityEstimate()+0x17a>
        velSumCnt[m]++;
    4156:	9902      	ldr	r1, [sp, #8]
    4158:	464b      	mov	r3, r9
    415a:	f851 2f04 	ldr.w	r2, [r1, #4]!
    415e:	9102      	str	r1, [sp, #8]
    4160:	e7b2      	b.n	40c8 <UEncoder::updateVelocityEstimate()+0x68>
        uint32_t dt_cpu = transitionTime_cpu[m][j][ab4] - lastTransitionTime_cpu[m][ab4];
    4162:	f8d0 a060 	ldr.w	sl, [r0, #96]	; 0x60
    4166:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    416a:	ebaa 0505 	sub.w	r5, sl, r5
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
    416e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
    4172:	45bb      	cmp	fp, r7
    4174:	d822      	bhi.n	41bc <UEncoder::updateVelocityEstimate()+0x15c>
          v = one_sec_in_cpu / dt_cpu * incrEncoder[m][j][ab4] * app;
    4176:	ee07 5a90 	vmov	s15, r5
    417a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    417e:	eec5 7a87 	vdiv.f32	s15, s11, s14
    4182:	ee07 1a10 	vmov	s14, r1
    4186:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    418a:	ee67 7a87 	vmul.f32	s15, s15, s14
    418e:	ee67 7a86 	vmul.f32	s15, s15, s12
          velocityPart[m][ab4] = v;
    4192:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        velSum[m] += v;
    4196:	ed9c 7a00 	vldr	s14, [ip]
        velSumCnt[m]++;
    419a:	3201      	adds	r2, #1
        incrEnc[m][ab4] = incrEncoder[m][j][ab4];
    419c:	6699      	str	r1, [r3, #104]	; 0x68
        velSum[m] += v;
    419e:	ee77 7a27 	vadd.f32	s15, s14, s15
        velSumCnt[m]++;
    41a2:	9902      	ldr	r1, [sp, #8]
        lastTransitionTime_cpu[m][ab4] = transitionTime_cpu[m][j][ab4];
    41a4:	f8c3 a0cc 	str.w	sl, [r3, #204]	; 0xcc
        velSumCnt[m]++;
    41a8:	600a      	str	r2, [r1, #0]
        incrEncoder[m][j][ab4] = 0;
    41aa:	6006      	str	r6, [r0, #0]
        velSum[m] += v;
    41ac:	edcc 7a00 	vstr	s15, [ip]
        velSumCnt[m]++;
    41b0:	e7b8      	b.n	4124 <UEncoder::updateVelocityEstimate()+0xc4>
          velocityPart[m][ab4] = 0;
    41b2:	eddf 7a10 	vldr	s15, [pc, #64]	; 41f4 <UEncoder::updateVelocityEstimate()+0x194>
    41b6:	ed83 5a3b 	vstr	s10, [r3, #236]	; 0xec
    41ba:	e7a9      	b.n	4110 <UEncoder::updateVelocityEstimate()+0xb0>
        float v = 0;
    41bc:	eef0 7a45 	vmov.f32	s15, s10
    41c0:	e7e9      	b.n	4196 <UEncoder::updateVelocityEstimate()+0x136>
            if (velocityPart[m][ab4] > 0)
    41c2:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
    41c6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    41ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              velocityPart[m][ab4] = -v * app;
    41ce:	bfd8      	it	le
    41d0:	eef1 7a67 	vnegle.f32	s15, s15
    41d4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    41d8:	e79a      	b.n	4110 <UEncoder::updateVelocityEstimate()+0xb0>
    // char s[MSL];
    // snprintf(s, MSL, "# UpdateVel:: %g %g\r\n", motorVelocity[0], motorVelocity[1]);
    // usb.send(s);
    // debug end
  }
}
    41da:	b00d      	add	sp, #52	; 0x34
    41dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      motorVelocity[m] = velSlowSum[m] / velSlowSumCnt[m];
    41e0:	edd4 7a00 	vldr	s15, [r4]
    41e4:	edde 6a00 	vldr	s13, [lr]
    41e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    41ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
    41f0:	e7a4      	b.n	413c <UEncoder::updateVelocityEstimate()+0xdc>
    41f2:	bf00      	nop
    41f4:	00000000 	.word	0x00000000
    41f8:	4e0f0d18 	.word	0x4e0f0d18
    41fc:	11e1a2fe 	.word	0x11e1a2fe
    4200:	e0001000 	.word	0xe0001000
    4204:	00000000 	.word	0x00000000

00004208 <UEncoder::tick()>:
{ // Update pose estimates
    4208:	b538      	push	{r3, r4, r5, lr}
  uint32_t t_CPU = ARM_DWT_CYCCNT;
    420a:	4b3f      	ldr	r3, [pc, #252]	; (4308 <UEncoder::tick()+0x100>)
  uint32_t dt_us = dt * CPU_us;
    420c:	f200 41f4 	addw	r1, r0, #1268	; 0x4f4
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4210:	eddf 7a3e 	vldr	s15, [pc, #248]	; 430c <UEncoder::tick()+0x104>
{ // Update pose estimates
    4214:	4604      	mov	r4, r0
  uint32_t t_CPU = ARM_DWT_CYCCNT;
    4216:	685a      	ldr	r2, [r3, #4]
  uint32_t dt = t_CPU - lastSample_CPU;
    4218:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
  uint32_t dt_us = dt * CPU_us;
    421c:	ed91 6a00 	vldr	s12, [r1]
  uint32_t dt = t_CPU - lastSample_CPU;
    4220:	1ad3      	subs	r3, r2, r3
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4222:	eddf 6a3b 	vldr	s13, [pc, #236]	; 4310 <UEncoder::tick()+0x108>
  tickCnt++;
    4226:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
  uint32_t dt = t_CPU - lastSample_CPU;
    422a:	ee07 3a10 	vmov	s14, r3
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    422e:	f500 639f 	add.w	r3, r0, #1272	; 0x4f8
  tickCnt++;
    4232:	3501      	adds	r5, #1
  uint32_t dt_us = dt * CPU_us;
    4234:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{ // Update pose estimates
    4238:	ed2d 8b02 	vpush	{d8}
  uint32_t dt_us = dt * CPU_us;
    423c:	ee27 7a06 	vmul.f32	s14, s14, s12
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4240:	ed93 6a00 	vldr	s12, [r3]
  lastSample_CPU = t_CPU;
    4244:	f8c0 24fc 	str.w	r2, [r0, #1276]	; 0x4fc
  tickCnt++;
    4248:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
  uint32_t dt_us = dt * CPU_us;
    424c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4250:	eeb8 8a47 	vcvt.f32.u32	s16, s14
    4254:	eeb0 7a48 	vmov.f32	s14, s16
    4258:	eea6 7a27 	vfma.f32	s14, s12, s15
    425c:	eec7 7a26 	vdiv.f32	s15, s14, s13
    4260:	edc3 7a00 	vstr	s15, [r3]
  updateVelocityEstimate();
    4264:	f7ff fefc 	bl	4060 <UEncoder::updateVelocityEstimate()>
  if (isnan(pose[0]) or isnan(pose[1]) or isnan(pose[2]))
    4268:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
    426c:	eef4 7a67 	vcmp.f32	s15, s15
    4270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4274:	d62c      	bvs.n	42d0 <UEncoder::tick()+0xc8>
    4276:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
    427a:	eef4 7a67 	vcmp.f32	s15, s15
    427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4282:	d625      	bvs.n	42d0 <UEncoder::tick()+0xc8>
    4284:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
    4288:	eef4 7a67 	vcmp.f32	s15, s15
    428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4290:	d61e      	bvs.n	42d0 <UEncoder::tick()+0xc8>
  updatePose(tickCnt);
    4292:	4629      	mov	r1, r5
    4294:	4620      	mov	r0, r4
    4296:	f7ff fde7 	bl	3e68 <UEncoder::updatePose(unsigned long)>
  tripAtime += float(dt_us) * 1e-6;
    429a:	ed94 5a1c 	vldr	s10, [r4, #112]	; 0x70
  tripBtime += float(dt_us) * 1e-6;
    429e:	ed94 6a1d 	vldr	s12, [r4, #116]	; 0x74
  tripAtime += float(dt_us) * 1e-6;
    42a2:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    42a6:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  tripBtime += float(dt_us) * 1e-6;
    42aa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
  tripAtime += float(dt_us) * 1e-6;
    42ae:	ed9f 4b14 	vldr	d4, [pc, #80]	; 4300 <UEncoder::tick()+0xf8>
    42b2:	eea8 5b04 	vfma.f64	d5, d8, d4
  tripBtime += float(dt_us) * 1e-6;
    42b6:	eea8 6b04 	vfma.f64	d6, d8, d4
}
    42ba:	ecbd 8b02 	vpop	{d8}
  tripAtime += float(dt_us) * 1e-6;
    42be:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  tripBtime += float(dt_us) * 1e-6;
    42c2:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  tripAtime += float(dt_us) * 1e-6;
    42c6:	ed84 5a1c 	vstr	s10, [r4, #112]	; 0x70
  tripBtime += float(dt_us) * 1e-6;
    42ca:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
}
    42ce:	bd38      	pop	{r3, r4, r5, pc}
    nanCnt++;
    42d0:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
  pose[0] = 0;
    42d4:	2300      	movs	r3, #0
  encoder[0] = 0;
    42d6:	2200      	movs	r2, #0
    nanCnt++;
    42d8:	3101      	adds	r1, #1
  pose[0] = 0;
    42da:	64e3      	str	r3, [r4, #76]	; 0x4c
  pose[1] = 0;
    42dc:	6523      	str	r3, [r4, #80]	; 0x50
  pose[2] = 0;
    42de:	6563      	str	r3, [r4, #84]	; 0x54
  distance = 0.0;
    42e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    tripA = 0;
    42e2:	6623      	str	r3, [r4, #96]	; 0x60
    tripAh = 0;
    42e4:	66a3      	str	r3, [r4, #104]	; 0x68
    tripAtime = 0;
    42e6:	6723      	str	r3, [r4, #112]	; 0x70
    tripB = 0;
    42e8:	6663      	str	r3, [r4, #100]	; 0x64
    tripBh = 0;
    42ea:	66e3      	str	r3, [r4, #108]	; 0x6c
    tripBtime = 0;
    42ec:	6763      	str	r3, [r4, #116]	; 0x74
    nanCnt++;
    42ee:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
  encoder[1] = 0;
    42f2:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
  encoderLast[1] = 0;
    42f6:	e9c4 222d 	strd	r2, r2, [r4, #180]	; 0xb4
    nanCnt++;
    42fa:	e7ca      	b.n	4292 <UEncoder::tick()+0x8a>
    42fc:	f3af 8000 	nop.w
    4300:	a0b5ed8d 	.word	0xa0b5ed8d
    4304:	3eb0c6f7 	.word	0x3eb0c6f7
    4308:	e0001000 	.word	0xe0001000
    430c:	42440000 	.word	0x42440000
    4310:	42480000 	.word	0x42480000

00004314 <UEncoder::encoderInterrupt(int, bool)>:
int p12a = 0;
int p12b = 0;
#endif

void UEncoder::encoderInterrupt(int m, bool encA)
{ // get interrupt timing
    4314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4318:	eb00 0681 	add.w	r6, r0, r1, lsl #2
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    431c:	4d6b      	ldr	r5, [pc, #428]	; (44cc <UEncoder::encoderInterrupt(int, bool)+0x1b8>)
  uint32_t edge_cpu = ARM_DWT_CYCCNT;
    431e:	4b6c      	ldr	r3, [pc, #432]	; (44d0 <UEncoder::encoderInterrupt(int, bool)+0x1bc>)
    4320:	f896 c014 	ldrb.w	ip, [r6, #20]
    4324:	685c      	ldr	r4, [r3, #4]
    4326:	ea4f 170c 	mov.w	r7, ip, lsl #4
    432a:	7f33      	ldrb	r3, [r6, #28]
    432c:	eb05 1c0c 	add.w	ip, r5, ip, lsl #4
    4330:	f855 e007 	ldr.w	lr, [r5, r7]
    4334:	f8dc 700c 	ldr.w	r7, [ip, #12]
    4338:	f8de e008 	ldr.w	lr, [lr, #8]
    433c:	ea1e 0e07 	ands.w	lr, lr, r7
    4340:	ea4f 1703 	mov.w	r7, r3, lsl #4
    4344:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    4348:	59ef      	ldr	r7, [r5, r7]
    434a:	68dd      	ldr	r5, [r3, #12]
    434c:	bf18      	it	ne
    434e:	2301      	movne	r3, #1
    4350:	68bf      	ldr	r7, [r7, #8]
    4352:	bf08      	it	eq
    4354:	2300      	moveq	r3, #0
    4356:	422f      	tst	r7, r5
    4358:	bf14      	ite	ne
    435a:	f04f 0c01 	movne.w	ip, #1
    435e:	f04f 0c00 	moveq.w	ip, #0
  bool ccv;
  bool err = false;
  // edge index: A-up = 0, A-down = 1, B-up = 2, B-down = 3
  int ab4;
#ifdef USE_SPI_PINS
  if (m == 0)
    4362:	2900      	cmp	r1, #0
    4364:	d160      	bne.n	4428 <UEncoder::encoderInterrupt(int, bool)+0x114>
    digitalWriteFast(11, p11++ % 2);
    4366:	f8df 8178 	ldr.w	r8, [pc, #376]	; 44e0 <UEncoder::encoderInterrupt(int, bool)+0x1cc>
    436a:	f8d8 7000 	ldr.w	r7, [r8]
    436e:	f007 0501 	and.w	r5, r7, #1
    4372:	2f00      	cmp	r7, #0
    4374:	f107 0701 	add.w	r7, r7, #1
    4378:	bfb8      	it	lt
    437a:	426d      	neglt	r5, r5
    437c:	f8c8 7000 	str.w	r7, [r8]
		if (val) {
    4380:	b2ed      	uxtb	r5, r5
    4382:	b375      	cbz	r5, 43e2 <UEncoder::encoderInterrupt(int, bool)+0xce>
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    4384:	4d53      	ldr	r5, [pc, #332]	; (44d4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    4386:	2704      	movs	r7, #4
    4388:	f8c5 7084 	str.w	r7, [r5, #132]	; 0x84
      digitalWriteFast(12, p12a++ % 2);
    else
      digitalWriteFast(7, p12b++ % 2);
  }
#endif
  if (encA)
    438c:	b37a      	cbz	r2, 43ee <UEncoder::encoderInterrupt(int, bool)+0xda>
  { // encode pin A interrupt
    ccv = pA == pB;
    err = pA == lastA[m];
    438e:	1842      	adds	r2, r0, r1
    4390:	f892 5518 	ldrb.w	r5, [r2, #1304]	; 0x518
    lastA[m] = pA;
    4394:	f882 3518 	strb.w	r3, [r2, #1304]	; 0x518
    if (err)
    4398:	42ab      	cmp	r3, r5
    439a:	d05e      	beq.n	445a <UEncoder::encoderInterrupt(int, bool)+0x146>
    ccv = pA == pB;
    439c:	ebac 0203 	sub.w	r2, ip, r3
      errCntA[m][pA]++;
    if (pA)
      ab4 = 0;
    else
      ab4 = 1;
    43a0:	fabe f38e 	clz	r3, lr
  { // this was a spurious interrupt, ignore
    // encoder value didn't change
    return;
  }
  // use this set of data to save values
  int j = active;
    43a4:	f8d0 5184 	ldr.w	r5, [r0, #388]	; 0x184
    ccv = pA == pB;
    43a8:	fab2 f282 	clz	r2, r2
      ab4 = 1;
    43ac:	095b      	lsrs	r3, r3, #5
    ccv = pA == pB;
    43ae:	0952      	lsrs	r2, r2, #5
  if (ccv)
    43b0:	b362      	cbz	r2, 440c <UEncoder::encoderInterrupt(int, bool)+0xf8>
  {
    encoder[m]--;
    // and within sample period
    incrEncoder[m][j][ab4]--;
    43b2:	eb05 0241 	add.w	r2, r5, r1, lsl #1
    encoder[m]--;
    43b6:	6b77      	ldr	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]--;
    43b8:	0049      	lsls	r1, r1, #1
    43ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    encoder[m]--;
    43be:	3f01      	subs	r7, #1
    incrEncoder[m][j][ab4]--;
    43c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    encoder[m]--;
    43c4:	6377      	str	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]--;
    43c6:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    43ca:	3a01      	subs	r2, #1
    43cc:	4429      	add	r1, r5
    43ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    43d2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    43d6:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  {
    encoder[m]++;
    // and within sample period
    incrEncoder[m][j][ab4]++;
  }
  transitionTime_cpu[m][j][ab4] = edge_cpu;
    43da:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
}
    43de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    43e2:	4d3c      	ldr	r5, [pc, #240]	; (44d4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    43e4:	2704      	movs	r7, #4
    43e6:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
  if (encA)
    43ea:	2a00      	cmp	r2, #0
    43ec:	d1cf      	bne.n	438e <UEncoder::encoderInterrupt(int, bool)+0x7a>
    err = pB == lastB[m];
    43ee:	1842      	adds	r2, r0, r1
    43f0:	f892 551a 	ldrb.w	r5, [r2, #1306]	; 0x51a
    lastB[m] = pB;
    43f4:	f882 c51a 	strb.w	ip, [r2, #1306]	; 0x51a
    if (err)
    43f8:	4565      	cmp	r5, ip
    43fa:	d051      	beq.n	44a0 <UEncoder::encoderInterrupt(int, bool)+0x18c>
    43fc:	ea83 020c 	eor.w	r2, r3, ip
  int j = active;
    4400:	f8d0 5184 	ldr.w	r5, [r0, #388]	; 0x184
    if (pA)
    4404:	f1c3 0303 	rsb	r3, r3, #3
  if (ccv)
    4408:	2a00      	cmp	r2, #0
    440a:	d1d2      	bne.n	43b2 <UEncoder::encoderInterrupt(int, bool)+0x9e>
    incrEncoder[m][j][ab4]++;
    440c:	eb05 0241 	add.w	r2, r5, r1, lsl #1
    encoder[m]++;
    4410:	6b77      	ldr	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]++;
    4412:	0049      	lsls	r1, r1, #1
    4414:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    encoder[m]++;
    4418:	3701      	adds	r7, #1
    incrEncoder[m][j][ab4]++;
    441a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    encoder[m]++;
    441e:	6377      	str	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]++;
    4420:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    4424:	3201      	adds	r2, #1
    4426:	e7d1      	b.n	43cc <UEncoder::encoderInterrupt(int, bool)+0xb8>
    if (encA)
    4428:	b312      	cbz	r2, 4470 <UEncoder::encoderInterrupt(int, bool)+0x15c>
      digitalWriteFast(12, p12a++ % 2);
    442a:	4f2b      	ldr	r7, [pc, #172]	; (44d8 <UEncoder::encoderInterrupt(int, bool)+0x1c4>)
    442c:	683d      	ldr	r5, [r7, #0]
    442e:	f005 0201 	and.w	r2, r5, #1
    4432:	2d00      	cmp	r5, #0
    4434:	f105 0501 	add.w	r5, r5, #1
    4438:	bfb8      	it	lt
    443a:	4252      	neglt	r2, r2
    443c:	603d      	str	r5, [r7, #0]
		if (val) {
    443e:	b2d2      	uxtb	r2, r2
    4440:	2a00      	cmp	r2, #0
    4442:	d03e      	beq.n	44c2 <UEncoder::encoderInterrupt(int, bool)+0x1ae>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4444:	4a23      	ldr	r2, [pc, #140]	; (44d4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    4446:	2502      	movs	r5, #2
    4448:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
    err = pA == lastA[m];
    444c:	1842      	adds	r2, r0, r1
    444e:	f892 5518 	ldrb.w	r5, [r2, #1304]	; 0x518
    lastA[m] = pA;
    4452:	f882 3518 	strb.w	r3, [r2, #1304]	; 0x518
    if (err)
    4456:	42ab      	cmp	r3, r5
    4458:	d1a0      	bne.n	439c <UEncoder::encoderInterrupt(int, bool)+0x88>
      errCntA[m][pA]++;
    445a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    445e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    4462:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    4466:	3201      	adds	r2, #1
    4468:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
}
    446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWriteFast(7, p12b++ % 2);
    4470:	4f1a      	ldr	r7, [pc, #104]	; (44dc <UEncoder::encoderInterrupt(int, bool)+0x1c8>)
    4472:	683d      	ldr	r5, [r7, #0]
    4474:	f005 0201 	and.w	r2, r5, #1
    4478:	2d00      	cmp	r5, #0
    447a:	f105 0501 	add.w	r5, r5, #1
    447e:	bfb8      	it	lt
    4480:	4252      	neglt	r2, r2
    4482:	603d      	str	r5, [r7, #0]
		if (val) {
    4484:	b2d2      	uxtb	r2, r2
    4486:	b1b2      	cbz	r2, 44b6 <UEncoder::encoderInterrupt(int, bool)+0x1a2>
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    4488:	4a12      	ldr	r2, [pc, #72]	; (44d4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    448a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    448e:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
    err = pB == lastB[m];
    4492:	1842      	adds	r2, r0, r1
    4494:	f892 551a 	ldrb.w	r5, [r2, #1306]	; 0x51a
    lastB[m] = pB;
    4498:	f882 c51a 	strb.w	ip, [r2, #1306]	; 0x51a
    if (err)
    449c:	4565      	cmp	r5, ip
    449e:	d1ad      	bne.n	43fc <UEncoder::encoderInterrupt(int, bool)+0xe8>
      errCntB[m][pB]++;
    44a0:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    44a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    44a8:	f8dc 352c 	ldr.w	r3, [ip, #1324]	; 0x52c
    44ac:	3301      	adds	r3, #1
    44ae:	f8cc 352c 	str.w	r3, [ip, #1324]	; 0x52c
}
    44b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    44b6:	4a07      	ldr	r2, [pc, #28]	; (44d4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    44b8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    44bc:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
    44c0:	e795      	b.n	43ee <UEncoder::encoderInterrupt(int, bool)+0xda>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    44c2:	4a04      	ldr	r2, [pc, #16]	; (44d4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    44c4:	2502      	movs	r5, #2
    44c6:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
    44ca:	e760      	b.n	438e <UEncoder::encoderInterrupt(int, bool)+0x7a>
    44cc:	20008148 	.word	0x20008148
    44d0:	e0001000 	.word	0xe0001000
    44d4:	42004000 	.word	0x42004000
    44d8:	2000e644 	.word	0x2000e644
    44dc:	2000e648 	.word	0x2000e648
    44e0:	2000e640 	.word	0x2000e640

000044e4 <m1EncoderA()>:


//////////////////////////////////////////////////////////////

void m1EncoderA()
{ // motor 1 encoder A change
    44e4:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(0,true);
    44e6:	4c06      	ldr	r4, [pc, #24]	; (4500 <m1EncoderA()+0x1c>)
    44e8:	2201      	movs	r2, #1
    44ea:	2100      	movs	r1, #0
    44ec:	4620      	mov	r0, r4
    44ee:	f7ff ff11 	bl	4314 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    44f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    44f6:	3301      	adds	r3, #1
    44f8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
//   // get timestamp now
}
    44fc:	bd10      	pop	{r4, pc}
    44fe:	bf00      	nop
    4500:	2000dc34 	.word	0x2000dc34

00004504 <m2EncoderA()>:

void m2EncoderA()
{ // motor 2 encoder A
    encoder.encoderInterrupt(1, true);
    4504:	2201      	movs	r2, #1
{ // motor 2 encoder A
    4506:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(1, true);
    4508:	4c05      	ldr	r4, [pc, #20]	; (4520 <m2EncoderA()+0x1c>)
    450a:	4611      	mov	r1, r2
    450c:	4620      	mov	r0, r4
    450e:	f7ff ff01 	bl	4314 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    4512:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4516:	3301      	adds	r3, #1
    4518:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
    451c:	bd10      	pop	{r4, pc}
    451e:	bf00      	nop
    4520:	2000dc34 	.word	0x2000dc34

00004524 <m1EncoderB()>:

void m1EncoderB()
{ // motor 1 encoder pin B
    encoder.encoderInterrupt(0, false);
    4524:	2200      	movs	r2, #0
{ // motor 1 encoder pin B
    4526:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(0, false);
    4528:	4c05      	ldr	r4, [pc, #20]	; (4540 <m1EncoderB()+0x1c>)
    452a:	4611      	mov	r1, r2
    452c:	4620      	mov	r0, r4
    452e:	f7ff fef1 	bl	4314 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    4532:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4536:	3301      	adds	r3, #1
    4538:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
    453c:	bd10      	pop	{r4, pc}
    453e:	bf00      	nop
    4540:	2000dc34 	.word	0x2000dc34

00004544 <m2EncoderB()>:

void m2EncoderB()
{ // motor 2 encoder pin B
    4544:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(1, false);
    4546:	4c06      	ldr	r4, [pc, #24]	; (4560 <m2EncoderB()+0x1c>)
    4548:	2200      	movs	r2, #0
    454a:	2101      	movs	r1, #1
    454c:	4620      	mov	r0, r4
    454e:	f7ff fee1 	bl	4314 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    4552:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4556:	3301      	adds	r3, #1
    4558:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
    455c:	bd10      	pop	{r4, pc}
    455e:	bf00      	nop
    4560:	2000dc34 	.word	0x2000dc34

00004564 <_GLOBAL__sub_I_encoder>:
    4564:	b510      	push	{r4, lr}
class UEncoder : public USubss
    4566:	4c41      	ldr	r4, [pc, #260]	; (466c <_GLOBAL__sub_I_encoder+0x108>)
    4568:	4620      	mov	r0, r4
    456a:	f007 fde5 	bl	c138 <USubss::USubss()>
    456e:	4b40      	ldr	r3, [pc, #256]	; (4670 <_GLOBAL__sub_I_encoder+0x10c>)
    4570:	4622      	mov	r2, r4
    4572:	4940      	ldr	r1, [pc, #256]	; (4674 <_GLOBAL__sub_I_encoder+0x110>)
    4574:	f104 0c1c 	add.w	ip, r4, #28
    4578:	f8df e10c 	ldr.w	lr, [pc, #268]	; 4688 <_GLOBAL__sub_I_encoder+0x124>
    457c:	f842 1b14 	str.w	r1, [r2], #20
    4580:	f8c4 e088 	str.w	lr, [r4, #136]	; 0x88
    4584:	f8df e104 	ldr.w	lr, [pc, #260]	; 468c <_GLOBAL__sub_I_encoder+0x128>
    4588:	e893 0003 	ldmia.w	r3, {r0, r1}
    458c:	e882 0003 	stmia.w	r2, {r0, r1}
    4590:	f103 0108 	add.w	r1, r3, #8
    4594:	f103 0210 	add.w	r2, r3, #16
    4598:	2300      	movs	r3, #0
    459a:	c903      	ldmia	r1, {r0, r1}
    459c:	64e3      	str	r3, [r4, #76]	; 0x4c
    459e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    45a2:	65a3      	str	r3, [r4, #88]	; 0x58
    45a4:	e88c 0003 	stmia.w	ip, {r0, r1}
    45a8:	e892 0003 	ldmia.w	r2, {r0, r1}
    45ac:	f104 0280 	add.w	r2, r4, #128	; 0x80
    45b0:	f04f 0c00 	mov.w	ip, #0
    45b4:	e882 0003 	stmia.w	r2, {r0, r1}
    45b8:	492f      	ldr	r1, [pc, #188]	; (4678 <_GLOBAL__sub_I_encoder+0x114>)
    45ba:	2044      	movs	r0, #68	; 0x44
    45bc:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
    45c0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    45c4:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
UEncoder encoder;
    45c8:	4620      	mov	r0, r4
    45ca:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
    45ce:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
    45d2:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
    45d6:	f8c4 c064 	str.w	ip, [r4, #100]	; 0x64
    45da:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    45de:	f8c4 c06c 	str.w	ip, [r4, #108]	; 0x6c
    45e2:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    45e6:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
    45ea:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    45ee:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    45f2:	4a22      	ldr	r2, [pc, #136]	; (467c <_GLOBAL__sub_I_encoder+0x118>)
    45f4:	4922      	ldr	r1, [pc, #136]	; (4680 <_GLOBAL__sub_I_encoder+0x11c>)
    45f6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    45fa:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    45fe:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    4602:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    4606:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    460a:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    460e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4612:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    4616:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    461a:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    461e:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    4622:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
    4626:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
    462a:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
    462e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    4632:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    4636:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    463a:	4b12      	ldr	r3, [pc, #72]	; (4684 <_GLOBAL__sub_I_encoder+0x120>)
    463c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    4640:	f204 43f4 	addw	r3, r4, #1268	; 0x4f4
    4644:	f8c3 e000 	str.w	lr, [r3]
    4648:	f504 639f 	add.w	r3, r4, #1272	; 0x4f8
    464c:	f8df e040 	ldr.w	lr, [pc, #64]	; 4690 <_GLOBAL__sub_I_encoder+0x12c>
    4650:	f8c3 e000 	str.w	lr, [r3]
    4654:	f504 63a1 	add.w	r3, r4, #1288	; 0x508
    4658:	f204 540c 	addw	r4, r4, #1292	; 0x50c
    465c:	f8c3 c000 	str.w	ip, [r3]
    4660:	f8c4 c000 	str.w	ip, [r4]
}
    4664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UEncoder encoder;
    4668:	f014 bc46 	b.w	18ef8 <__aeabi_atexit>
    466c:	2000dc34 	.word	0x2000dc34
    4670:	20001e28 	.word	0x20001e28
    4674:	200080c8 	.word	0x200080c8
    4678:	3e6f9db2 	.word	0x3e6f9db2
    467c:	20008f08 	.word	0x20008f08
    4680:	0000383d 	.word	0x0000383d
    4684:	3dbd3c19 	.word	0x3dbd3c19
    4688:	41980000 	.word	0x41980000
    468c:	3ada740e 	.word	0x3ada740e
    4690:	447a0000 	.word	0x447a0000

00004694 <UImu2::sendHelp()>:
{
    4694:	b530      	push	{r4, r5, lr}
  usb.send("# IMU -------\r\n");
    4696:	4c0e      	ldr	r4, [pc, #56]	; (46d0 <UImu2::sendHelp()+0x3c>)
{
    4698:	b0cd      	sub	sp, #308	; 0x134
    469a:	4605      	mov	r5, r0
  usb.send("# IMU -------\r\n");
    469c:	490d      	ldr	r1, [pc, #52]	; (46d4 <UImu2::sendHelp()+0x40>)
    469e:	4620      	mov	r0, r4
    46a0:	f007 ff3c 	bl	c51c <UUSB::send(char const*)>
  usb.send(            "# -- \tgyrocal \tSet gyro calibration values (offset[3])\n");
    46a4:	490c      	ldr	r1, [pc, #48]	; (46d8 <UImu2::sendHelp()+0x44>)
    46a6:	4620      	mov	r0, r4
    46a8:	f007 ff38 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tgyroc \tStart gyro calibration (finished=%d)\r\n", gyroOffsetDone);
    46ac:	7e2b      	ldrb	r3, [r5, #24]
    46ae:	4a0b      	ldr	r2, [pc, #44]	; (46dc <UImu2::sendHelp()+0x48>)
    46b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
    46b4:	a801      	add	r0, sp, #4
    46b6:	f016 ffed 	bl	1b694 <snprintf>
  usb.send(reply);
    46ba:	a901      	add	r1, sp, #4
    46bc:	4620      	mov	r0, r4
    46be:	f007 ff2d 	bl	c51c <UUSB::send(char const*)>
  usb.send(            "# -- \timuon E F M \tEnable IMU (E=1), Madgwick (F=1), use magnetometer (M=1) \r\n");
    46c2:	4907      	ldr	r1, [pc, #28]	; (46e0 <UImu2::sendHelp()+0x4c>)
    46c4:	4620      	mov	r0, r4
    46c6:	f007 ff29 	bl	c51c <UUSB::send(char const*)>
}
    46ca:	b04d      	add	sp, #308	; 0x134
    46cc:	bd30      	pop	{r4, r5, pc}
    46ce:	bf00      	nop
    46d0:	2000eab8 	.word	0x2000eab8
    46d4:	20004c2c 	.word	0x20004c2c
    46d8:	20004c3c 	.word	0x20004c3c
    46dc:	20004c74 	.word	0x20004c74
    46e0:	20004ca8 	.word	0x20004ca8

000046e4 <UImu2::~UImu2()>:
#define ADDRESS_MPU				   0x68
// #define ADDRESS_COM          0x0C // not used (Magnetometer)

class ULog;

class UImu2 : public USubss
    46e4:	b510      	push	{r4, lr}
    46e6:	4b05      	ldr	r3, [pc, #20]	; (46fc <UImu2::~UImu2()+0x18>)
    46e8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    46ea:	6840      	ldr	r0, [r0, #4]
    46ec:	6023      	str	r3, [r4, #0]
	if (__p)
    46ee:	b118      	cbz	r0, 46f8 <UImu2::~UImu2()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    46f0:	68e1      	ldr	r1, [r4, #12]
    46f2:	1a09      	subs	r1, r1, r0
    46f4:	f011 ffe2 	bl	166bc <operator delete(void*, unsigned int)>
    46f8:	4620      	mov	r0, r4
    46fa:	bd10      	pop	{r4, pc}
    46fc:	2000802c 	.word	0x2000802c

00004700 <UImu2::initMpu()>:
{
    4700:	b570      	push	{r4, r5, r6, lr}
    4702:	4604      	mov	r4, r0
    4704:	b09c      	sub	sp, #112	; 0x70
  Wire.begin();
    4706:	481d      	ldr	r0, [pc, #116]	; (477c <UImu2::initMpu()+0x7c>)
  uint8_t id = 0;
    4708:	2600      	movs	r6, #0
  mpu.setWire(&Wire);
    470a:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
  Wire.begin();
    470e:	f020 f813 	bl	24738 <___ZN7TwoWire5beginEv_veneer>
  Wire.setClock(400000);
    4712:	491b      	ldr	r1, [pc, #108]	; (4780 <UImu2::initMpu()+0x80>)
    4714:	4819      	ldr	r0, [pc, #100]	; (477c <UImu2::initMpu()+0x7c>)
    4716:	f00a faed 	bl	ecf4 <TwoWire::setClock(unsigned long)>
  mpu.setWire(&Wire);
    471a:	4918      	ldr	r1, [pc, #96]	; (477c <UImu2::initMpu()+0x7c>)
    471c:	4628      	mov	r0, r5
    471e:	f009 fee7 	bl	e4f0 <MPU9250_asukiaaa::setWire(TwoWire*)>
  uint8_t retval = mpu.readId(&id);
    4722:	f10d 010b 	add.w	r1, sp, #11
    4726:	4628      	mov	r0, r5
  uint8_t id = 0;
    4728:	f88d 600b 	strb.w	r6, [sp, #11]
  uint8_t retval = mpu.readId(&id);
    472c:	f009 fee2 	bl	e4f4 <MPU9250_asukiaaa::readId(unsigned char*)>
  if (retval != 0)
    4730:	b130      	cbz	r0, 4740 <UImu2::initMpu()+0x40>
    usb.send("# Error initializing communication with IMU\n");
    4732:	4914      	ldr	r1, [pc, #80]	; (4784 <UImu2::initMpu()+0x84>)
    4734:	4814      	ldr	r0, [pc, #80]	; (4788 <UImu2::initMpu()+0x88>)
    4736:	f007 fef1 	bl	c51c <UUSB::send(char const*)>
    imuAvailable = 0;
    473a:	6766      	str	r6, [r4, #116]	; 0x74
}
    473c:	b01c      	add	sp, #112	; 0x70
    473e:	bd70      	pop	{r4, r5, r6, pc}
    snprintf(s, MSL, "# MPU9250 'who_am_i'=%d (0x%x)\n", id, id);
    4740:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4744:	2164      	movs	r1, #100	; 0x64
    4746:	4a11      	ldr	r2, [pc, #68]	; (478c <UImu2::initMpu()+0x8c>)
    4748:	a803      	add	r0, sp, #12
    474a:	9300      	str	r3, [sp, #0]
    474c:	f016 ffa2 	bl	1b694 <snprintf>
    usb.send(s);
    4750:	a903      	add	r1, sp, #12
    4752:	480d      	ldr	r0, [pc, #52]	; (4788 <UImu2::initMpu()+0x88>)
    4754:	f007 fee2 	bl	c51c <UUSB::send(char const*)>
    mpu.beginAccel(ACC_FULL_SCALE_4_G);
    4758:	2108      	movs	r1, #8
    475a:	4628      	mov	r0, r5
    475c:	f009 fee0 	bl	e520 <MPU9250_asukiaaa::beginAccel(unsigned char)>
    mpu.beginGyro(GYRO_FULL_SCALE_1000_DPS);
    4760:	2110      	movs	r1, #16
    4762:	4628      	mov	r0, r5
    4764:	f009 ffcc 	bl	e700 <MPU9250_asukiaaa::beginGyro(unsigned char)>
    if (useMag)
    4768:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    476c:	2b00      	cmp	r3, #0
    476e:	d0e5      	beq.n	473c <UImu2::initMpu()+0x3c>
      mpu.beginMag(MAG_MODE_CONTINUOUS_100HZ);
    4770:	2106      	movs	r1, #6
    4772:	4628      	mov	r0, r5
    4774:	f009 ff30 	bl	e5d8 <MPU9250_asukiaaa::beginMag(unsigned char)>
}
    4778:	b01c      	add	sp, #112	; 0x70
    477a:	bd70      	pop	{r4, r5, r6, pc}
    477c:	20009524 	.word	0x20009524
    4780:	00061a80 	.word	0x00061a80
    4784:	20004bdc 	.word	0x20004bdc
    4788:	2000eab8 	.word	0x2000eab8
    478c:	20004c0c 	.word	0x20004c0c

00004790 <UImu2::setup()>:
{
    4790:	b510      	push	{r4, lr}
    4792:	4604      	mov	r4, r0
  initMpu();
    4794:	f7ff ffb4 	bl	4700 <UImu2::initMpu()>
  addPublistItem("gyro",  "Get calibrated gyro value as 'gyro gx gy gz' (deg/s)");
    4798:	4a0f      	ldr	r2, [pc, #60]	; (47d8 <UImu2::setup()+0x48>)
    479a:	4620      	mov	r0, r4
    479c:	490f      	ldr	r1, [pc, #60]	; (47dc <UImu2::setup()+0x4c>)
    479e:	f007 fdef 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("gyroo", "Get gyro offset 'gyroo ox oy oz'");
    47a2:	4620      	mov	r0, r4
    47a4:	4a0e      	ldr	r2, [pc, #56]	; (47e0 <UImu2::setup()+0x50>)
    47a6:	490f      	ldr	r1, [pc, #60]	; (47e4 <UImu2::setup()+0x54>)
    47a8:	f007 fdea 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("acc",   "Get accelerometer values 'acc ax ay az' (m/s^2)");
    47ac:	4620      	mov	r0, r4
    47ae:	4a0e      	ldr	r2, [pc, #56]	; (47e8 <UImu2::setup()+0x58>)
    47b0:	490e      	ldr	r1, [pc, #56]	; (47ec <UImu2::setup()+0x5c>)
    47b2:	f007 fde5 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("gyro0",  "Get calibrated gyro value as 'gyro0 gx gy gz' (deg/s) averaged for subscriber");
    47b6:	4620      	mov	r0, r4
    47b8:	4a0d      	ldr	r2, [pc, #52]	; (47f0 <UImu2::setup()+0x60>)
    47ba:	490e      	ldr	r1, [pc, #56]	; (47f4 <UImu2::setup()+0x64>)
    47bc:	f007 fde0 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("acc0",   "Get calibrated acc  value as 'acc0 ax ay az' (m/s^2) averaged for subscriber");
    47c0:	4620      	mov	r0, r4
    47c2:	490d      	ldr	r1, [pc, #52]	; (47f8 <UImu2::setup()+0x68>)
    47c4:	4a0d      	ldr	r2, [pc, #52]	; (47fc <UImu2::setup()+0x6c>)
    47c6:	f007 fddb 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    47ca:	4621      	mov	r1, r4
    47cc:	480c      	ldr	r0, [pc, #48]	; (4800 <UImu2::setup()+0x70>)
}
    47ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    47d2:	f008 bacf 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    47d6:	bf00      	nop
    47d8:	20004a3c 	.word	0x20004a3c
    47dc:	20004a74 	.word	0x20004a74
    47e0:	20004a7c 	.word	0x20004a7c
    47e4:	20004aa0 	.word	0x20004aa0
    47e8:	20004aa8 	.word	0x20004aa8
    47ec:	20004ad8 	.word	0x20004ad8
    47f0:	20004adc 	.word	0x20004adc
    47f4:	20004b2c 	.word	0x20004b2c
    47f8:	20004b84 	.word	0x20004b84
    47fc:	20004b34 	.word	0x20004b34
    4800:	2000eab8 	.word	0x2000eab8

00004804 <UImu2::decode(char const*)>:
{
    4804:	b570      	push	{r4, r5, r6, lr}
    4806:	460c      	mov	r4, r1
    4808:	b082      	sub	sp, #8
    480a:	4605      	mov	r5, r0
  if (strncmp(cmd, "gyrocal ", 8) == 0)
    480c:	2208      	movs	r2, #8
    480e:	492b      	ldr	r1, [pc, #172]	; (48bc <UImu2::decode(char const*)+0xb8>)
    4810:	4620      	mov	r0, r4
    4812:	f017 f9f7 	bl	1bc04 <strncmp>
    4816:	b1a0      	cbz	r0, 4842 <UImu2::decode(char const*)+0x3e>
  else if (strncmp(cmd, "gyroc", 5) == 0)
    4818:	2205      	movs	r2, #5
    481a:	4929      	ldr	r1, [pc, #164]	; (48c0 <UImu2::decode(char const*)+0xbc>)
    481c:	4620      	mov	r0, r4
    481e:	f017 f9f1 	bl	1bc04 <strncmp>
    4822:	4603      	mov	r3, r0
    4824:	b148      	cbz	r0, 483a <UImu2::decode(char const*)+0x36>
  else if (strncmp(cmd, "imuon ", 6) == 0)
    4826:	2206      	movs	r2, #6
    4828:	4926      	ldr	r1, [pc, #152]	; (48c4 <UImu2::decode(char const*)+0xc0>)
    482a:	4620      	mov	r0, r4
    482c:	f017 f9ea 	bl	1bc04 <strncmp>
    4830:	4606      	mov	r6, r0
    4832:	b1e8      	cbz	r0, 4870 <UImu2::decode(char const*)+0x6c>
    found = false;
    4834:	2000      	movs	r0, #0
}
    4836:	b002      	add	sp, #8
    4838:	bd70      	pop	{r4, r5, r6, pc}
  bool found = true;
    483a:	2001      	movs	r0, #1
    gyroOffsetDone = false;
    483c:	762b      	strb	r3, [r5, #24]
}
    483e:	b002      	add	sp, #8
    4840:	bd70      	pop	{r4, r5, r6, pc}
    const char * p1 = &cmd[8];
    4842:	f104 0008 	add.w	r0, r4, #8
    offsetGyro[0] = strtof(p1, (char**)&p1);
    4846:	a901      	add	r1, sp, #4
    const char * p1 = &cmd[8];
    4848:	9001      	str	r0, [sp, #4]
    offsetGyro[0] = strtof(p1, (char**)&p1);
    484a:	f016 fc2f 	bl	1b0ac <strtof>
    offsetGyro[1] = strtof(p1, (char**)&p1);
    484e:	a901      	add	r1, sp, #4
    4850:	9801      	ldr	r0, [sp, #4]
    offsetGyro[0] = strtof(p1, (char**)&p1);
    4852:	ed85 0a1e 	vstr	s0, [r5, #120]	; 0x78
    offsetGyro[1] = strtof(p1, (char**)&p1);
    4856:	f016 fc29 	bl	1b0ac <strtof>
    offsetGyro[2] = strtof(p1, (char**)&p1);
    485a:	9801      	ldr	r0, [sp, #4]
    485c:	a901      	add	r1, sp, #4
    offsetGyro[1] = strtof(p1, (char**)&p1);
    485e:	ed85 0a1f 	vstr	s0, [r5, #124]	; 0x7c
    offsetGyro[2] = strtof(p1, (char**)&p1);
    4862:	f016 fc23 	bl	1b0ac <strtof>
  bool found = true;
    4866:	2001      	movs	r0, #1
    offsetGyro[2] = strtof(p1, (char**)&p1);
    4868:	ed85 0a20 	vstr	s0, [r5, #128]	; 0x80
}
    486c:	b002      	add	sp, #8
    486e:	bd70      	pop	{r4, r5, r6, pc}
    char * p1 = (char*)&cmd[6];
    4870:	1da0      	adds	r0, r4, #6
    int e = strtol(p1, &p1, 10);
    4872:	220a      	movs	r2, #10
    4874:	a901      	add	r1, sp, #4
    char * p1 = (char*)&cmd[6];
    4876:	9001      	str	r0, [sp, #4]
    int e = strtol(p1, &p1, 10);
    4878:	f016 fd1c 	bl	1b2b4 <strtol>
    487c:	4604      	mov	r4, r0
    /*int m =*/ strtol(p1, &p1, 10);
    487e:	220a      	movs	r2, #10
    4880:	a901      	add	r1, sp, #4
    4882:	9801      	ldr	r0, [sp, #4]
    4884:	f016 fd16 	bl	1b2b4 <strtol>
    if (e == 1)
    4888:	2c01      	cmp	r4, #1
    488a:	d104      	bne.n	4896 <UImu2::decode(char const*)+0x92>
      if (imuAvailable == 0)
    488c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
    488e:	b144      	cbz	r4, 48a2 <UImu2::decode(char const*)+0x9e>
  bool found = true;
    4890:	2001      	movs	r0, #1
}
    4892:	b002      	add	sp, #8
    4894:	bd70      	pop	{r4, r5, r6, pc}
      usb.send("# Stopped using MPU9250\n");
    4896:	490c      	ldr	r1, [pc, #48]	; (48c8 <UImu2::decode(char const*)+0xc4>)
      imuAvailable = 0;
    4898:	676e      	str	r6, [r5, #116]	; 0x74
      usb.send("# Stopped using MPU9250\n");
    489a:	480c      	ldr	r0, [pc, #48]	; (48cc <UImu2::decode(char const*)+0xc8>)
    489c:	f007 fe3e 	bl	c51c <UUSB::send(char const*)>
    48a0:	e7f6      	b.n	4890 <UImu2::decode(char const*)+0x8c>
        initMpu();
    48a2:	4628      	mov	r0, r5
    48a4:	f7ff ff2c 	bl	4700 <UImu2::initMpu()>
        imuAvailable = 10;
    48a8:	230a      	movs	r3, #10
        usb.send("# initializing MPU9250\n");
    48aa:	4909      	ldr	r1, [pc, #36]	; (48d0 <UImu2::decode(char const*)+0xcc>)
        tickCnt = 0;
    48ac:	f8c5 40e0 	str.w	r4, [r5, #224]	; 0xe0
        imuAvailable = 10;
    48b0:	676b      	str	r3, [r5, #116]	; 0x74
        usb.send("# initializing MPU9250\n");
    48b2:	4806      	ldr	r0, [pc, #24]	; (48cc <UImu2::decode(char const*)+0xc8>)
    48b4:	f007 fe32 	bl	c51c <UUSB::send(char const*)>
    48b8:	e7ea      	b.n	4890 <UImu2::decode(char const*)+0x8c>
    48ba:	bf00      	nop
    48bc:	20004b8c 	.word	0x20004b8c
    48c0:	20004b98 	.word	0x20004b98
    48c4:	20004ba0 	.word	0x20004ba0
    48c8:	20004bc0 	.word	0x20004bc0
    48cc:	2000eab8 	.word	0x2000eab8
    48d0:	20004ba8 	.word	0x20004ba8

000048d4 <UImu2::eePromSave()>:
{
    48d4:	b510      	push	{r4, lr}
    48d6:	4604      	mov	r4, r0
  eeConfig.pushByte(f);
    48d8:	2101      	movs	r1, #1
    48da:	4809      	ldr	r0, [pc, #36]	; (4900 <UImu2::eePromSave()+0x2c>)
    48dc:	f7fe fba0 	bl	3020 <EEConfig::pushByte(unsigned char)>
    push32(u.u32);
    48e0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    48e2:	4807      	ldr	r0, [pc, #28]	; (4900 <UImu2::eePromSave()+0x2c>)
    48e4:	f7fe fb80 	bl	2fe8 <EEConfig::push32(unsigned long)>
    48e8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    48ea:	4805      	ldr	r0, [pc, #20]	; (4900 <UImu2::eePromSave()+0x2c>)
    48ec:	f7fe fb7c 	bl	2fe8 <EEConfig::push32(unsigned long)>
    48f0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    48f4:	4802      	ldr	r0, [pc, #8]	; (4900 <UImu2::eePromSave()+0x2c>)
}
    48f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48fa:	f7fe bb75 	b.w	2fe8 <EEConfig::push32(unsigned long)>
    48fe:	bf00      	nop
    4900:	2000dbe8 	.word	0x2000dbe8

00004904 <UImu2::eePromLoad()>:
{
    4904:	b538      	push	{r3, r4, r5, lr}
  /*uint8_t f =*/ eeConfig.readByte();
    4906:	4d0b      	ldr	r5, [pc, #44]	; (4934 <UImu2::eePromLoad()+0x30>)
{
    4908:	4604      	mov	r4, r0
  /*uint8_t f =*/ eeConfig.readByte();
    490a:	4628      	mov	r0, r5
    490c:	f7fe fbd4 	bl	30b8 <EEConfig::readByte()>
    u.u32 = read32();
    4910:	4628      	mov	r0, r5
    4912:	f7fe fbbd 	bl	3090 <EEConfig::read32()>
    4916:	4603      	mov	r3, r0
    4918:	4628      	mov	r0, r5
  offsetGyro[0] = eeConfig.readFloat();
    491a:	67a3      	str	r3, [r4, #120]	; 0x78
    491c:	f7fe fbb8 	bl	3090 <EEConfig::read32()>
    4920:	4603      	mov	r3, r0
    4922:	4628      	mov	r0, r5
  offsetGyro[1] = eeConfig.readFloat();
    4924:	67e3      	str	r3, [r4, #124]	; 0x7c
    4926:	f7fe fbb3 	bl	3090 <EEConfig::read32()>
  gyroOffsetDone = true;
    492a:	2301      	movs	r3, #1
  offsetGyro[2] = eeConfig.readFloat();
    492c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  gyroOffsetDone = true;
    4930:	7623      	strb	r3, [r4, #24]
}
    4932:	bd38      	pop	{r3, r4, r5, pc}
    4934:	2000dbe8 	.word	0x2000dbe8

00004938 <UImu2::sendStatusGyro()>:
    4938:	4b1b      	ldr	r3, [pc, #108]	; (49a8 <UImu2::sendStatusGyro()+0x70>)
{
    493a:	b510      	push	{r4, lr}
    493c:	4604      	mov	r4, r0
    493e:	b0c8      	sub	sp, #288	; 0x120
    4940:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    4944:	f014 fd62 	bl	1940c <__aeabi_ul2f>
    4948:	ee07 0a90 	vmov	s15, r0
  snprintf(reply, MRL, "gyro %f %f %f %.3f\r\n",
    494c:	ed94 4a09 	vldr	s8, [r4, #36]	; 0x24
    4950:	21fa      	movs	r1, #250	; 0xfa
    4952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    4956:	ed94 5a08 	vldr	s10, [r4, #32]
    495a:	ed94 6a07 	vldr	s12, [r4, #28]
    495e:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    4962:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4966:	4a11      	ldr	r2, [pc, #68]	; (49ac <UImu2::sendStatusGyro()+0x74>)
    4968:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    496c:	a809      	add	r0, sp, #36	; 0x24
    496e:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 49a0 <UImu2::sendStatusGyro()+0x68>
    4972:	ed8d 4b04 	vstr	d4, [sp, #16]
    4976:	ed8d 5b02 	vstr	d5, [sp, #8]
    497a:	ee27 7b03 	vmul.f64	d7, d7, d3
    497e:	ed8d 6b00 	vstr	d6, [sp]
    4982:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    4986:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    498a:	ed8d 7b06 	vstr	d7, [sp, #24]
    498e:	f016 fe81 	bl	1b694 <snprintf>
  usb.send(reply);
    4992:	a909      	add	r1, sp, #36	; 0x24
    4994:	4806      	ldr	r0, [pc, #24]	; (49b0 <UImu2::sendStatusGyro()+0x78>)
    4996:	f007 fdc1 	bl	c51c <UUSB::send(char const*)>
}
    499a:	b048      	add	sp, #288	; 0x120
    499c:	bd10      	pop	{r4, pc}
    499e:	bf00      	nop
    49a0:	a0b5ed8d 	.word	0xa0b5ed8d
    49a4:	3eb0c6f7 	.word	0x3eb0c6f7
    49a8:	2000d0c8 	.word	0x2000d0c8
    49ac:	2000495c 	.word	0x2000495c
    49b0:	2000eab8 	.word	0x2000eab8
    49b4:	00000000 	.word	0x00000000

000049b8 <UImu2::sendStatusAcc()>:
    49b8:	4b1b      	ldr	r3, [pc, #108]	; (4a28 <UImu2::sendStatusAcc()+0x70>)
{
    49ba:	b510      	push	{r4, lr}
    49bc:	4604      	mov	r4, r0
    49be:	b0c8      	sub	sp, #288	; 0x120
    49c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    49c4:	f014 fd22 	bl	1940c <__aeabi_ul2f>
    49c8:	ee07 0a90 	vmov	s15, r0
  snprintf(reply, MRL, "acc %f %f %f %.3f\r\n",
    49cc:	ed94 4a10 	vldr	s8, [r4, #64]	; 0x40
    49d0:	21fa      	movs	r1, #250	; 0xfa
    49d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    49d6:	ed94 5a0f 	vldr	s10, [r4, #60]	; 0x3c
    49da:	ed94 6a0e 	vldr	s12, [r4, #56]	; 0x38
    49de:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    49e2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    49e6:	4a11      	ldr	r2, [pc, #68]	; (4a2c <UImu2::sendStatusAcc()+0x74>)
    49e8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    49ec:	a809      	add	r0, sp, #36	; 0x24
    49ee:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 4a20 <UImu2::sendStatusAcc()+0x68>
    49f2:	ed8d 4b04 	vstr	d4, [sp, #16]
    49f6:	ed8d 5b02 	vstr	d5, [sp, #8]
    49fa:	ee27 7b03 	vmul.f64	d7, d7, d3
    49fe:	ed8d 6b00 	vstr	d6, [sp]
    4a02:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    4a06:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4a0a:	ed8d 7b06 	vstr	d7, [sp, #24]
    4a0e:	f016 fe41 	bl	1b694 <snprintf>
  usb.send(reply);
    4a12:	a909      	add	r1, sp, #36	; 0x24
    4a14:	4806      	ldr	r0, [pc, #24]	; (4a30 <UImu2::sendStatusAcc()+0x78>)
    4a16:	f007 fd81 	bl	c51c <UUSB::send(char const*)>
}
    4a1a:	b048      	add	sp, #288	; 0x120
    4a1c:	bd10      	pop	{r4, pc}
    4a1e:	bf00      	nop
    4a20:	a0b5ed8d 	.word	0xa0b5ed8d
    4a24:	3eb0c6f7 	.word	0x3eb0c6f7
    4a28:	2000d0c8 	.word	0x2000d0c8
    4a2c:	20004934 	.word	0x20004934
    4a30:	2000eab8 	.word	0x2000eab8

00004a34 <UImu2::sendRawAcc()>:
  usb.send(reply);
}

void UImu2::sendRawAcc()
{
  float div = acc0Cnt;
    4a34:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    4a36:	b530      	push	{r4, r5, lr}
    4a38:	4604      	mov	r4, r0
    4a3a:	ed2d 8b02 	vpush	{d8}
    4a3e:	b0cb      	sub	sp, #300	; 0x12c
  const int MSL = 250;
  char s[MSL];
  if (acc0Cnt == 0)
    4a40:	bb7b      	cbnz	r3, 4aa2 <UImu2::sendRawAcc()+0x6e>
    snprintf(s, MSL, "acc0 %g %g %g %d\n", mpu.accelX(), mpu.accelY(), mpu.accelZ(), acc0Cnt);
    4a42:	30a0      	adds	r0, #160	; 0xa0
    4a44:	ad0b      	add	r5, sp, #44	; 0x2c
    4a46:	9009      	str	r0, [sp, #36]	; 0x24
    4a48:	f009 fe24 	bl	e694 <MPU9250_asukiaaa::accelX()>
    4a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    4a4e:	eeb0 8a40 	vmov.f32	s16, s0
    4a52:	f009 fe31 	bl	e6b8 <MPU9250_asukiaaa::accelY()>
    4a56:	eef0 8a40 	vmov.f32	s17, s0
    4a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    4a5c:	f009 fe3e 	bl	e6dc <MPU9250_asukiaaa::accelZ()>
    4a60:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
    4a64:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
    4a68:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4a6a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4a6e:	4a1f      	ldr	r2, [pc, #124]	; (4aec <UImu2::sendRawAcc()+0xb8>)
    4a70:	21fa      	movs	r1, #250	; 0xfa
    4a72:	4628      	mov	r0, r5
    4a74:	9306      	str	r3, [sp, #24]
    4a76:	ed8d 6b02 	vstr	d6, [sp, #8]
    4a7a:	ed8d 0b04 	vstr	d0, [sp, #16]
    4a7e:	ed8d 7b00 	vstr	d7, [sp]
    4a82:	f016 fe07 	bl	1b694 <snprintf>
  else
    snprintf(s, MSL, "acc0 %g %g %g %d\n", acc0[0]/div, acc0[1]/div, acc0[2]/div, acc0Cnt);
  usb.send(s);
    4a86:	4629      	mov	r1, r5
    4a88:	4819      	ldr	r0, [pc, #100]	; (4af0 <UImu2::sendRawAcc()+0xbc>)
    4a8a:	f007 fd47 	bl	c51c <UUSB::send(char const*)>
  acc0[0] = 0;
    4a8e:	2300      	movs	r3, #0
  acc0[1] = 0;
  acc0[2] = 0;
  acc0Cnt = 0;
    4a90:	2200      	movs	r2, #0
  acc0[0] = 0;
    4a92:	6463      	str	r3, [r4, #68]	; 0x44
  acc0[1] = 0;
    4a94:	64a3      	str	r3, [r4, #72]	; 0x48
  acc0[2] = 0;
    4a96:	64e3      	str	r3, [r4, #76]	; 0x4c
  acc0Cnt = 0;
    4a98:	6522      	str	r2, [r4, #80]	; 0x50
}
    4a9a:	b04b      	add	sp, #300	; 0x12c
    4a9c:	ecbd 8b02 	vpop	{d8}
    4aa0:	bd30      	pop	{r4, r5, pc}
  float div = acc0Cnt;
    4aa2:	ee07 3a90 	vmov	s15, r3
    snprintf(s, MSL, "acc0 %g %g %g %d\n", acc0[0]/div, acc0[1]/div, acc0[2]/div, acc0Cnt);
    4aa6:	ed90 6a13 	vldr	s12, [r0, #76]	; 0x4c
    4aaa:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
    4aae:	ad0b      	add	r5, sp, #44	; 0x2c
  float div = acc0Cnt;
    4ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    snprintf(s, MSL, "acc0 %g %g %g %d\n", acc0[0]/div, acc0[1]/div, acc0[2]/div, acc0Cnt);
    4ab4:	edd0 6a11 	vldr	s13, [r0, #68]	; 0x44
    4ab8:	4a0c      	ldr	r2, [pc, #48]	; (4aec <UImu2::sendRawAcc()+0xb8>)
    4aba:	21fa      	movs	r1, #250	; 0xfa
    4abc:	4628      	mov	r0, r5
    4abe:	9306      	str	r3, [sp, #24]
    4ac0:	ee86 5a27 	vdiv.f32	s10, s12, s15
    4ac4:	ee87 6a27 	vdiv.f32	s12, s14, s15
    4ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    4acc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4ad0:	ed8d 5b04 	vstr	d5, [sp, #16]
    4ad4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4ad8:	ed8d 6b02 	vstr	d6, [sp, #8]
    4adc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4ae0:	ed8d 7b00 	vstr	d7, [sp]
    4ae4:	f016 fdd6 	bl	1b694 <snprintf>
    4ae8:	e7cd      	b.n	4a86 <UImu2::sendRawAcc()+0x52>
    4aea:	bf00      	nop
    4aec:	2000490c 	.word	0x2000490c
    4af0:	2000eab8 	.word	0x2000eab8

00004af4 <UImu2::sendRawGyro()>:

void UImu2::sendRawGyro()
{
  float div = gyro0Cnt;
    4af4:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
    4af6:	b530      	push	{r4, r5, lr}
    4af8:	4604      	mov	r4, r0
    4afa:	ed2d 8b02 	vpush	{d8}
    4afe:	b0cb      	sub	sp, #300	; 0x12c
  const int MSL = 250;
  char s[MSL];
  if (gyro0Cnt == 0)
    4b00:	bb7b      	cbnz	r3, 4b62 <UImu2::sendRawGyro()+0x6e>
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", mpu.gyroX(), mpu.gyroY(), mpu.gyroZ(), gyro0Cnt);
    4b02:	30a0      	adds	r0, #160	; 0xa0
    4b04:	ad0b      	add	r5, sp, #44	; 0x2c
    4b06:	9009      	str	r0, [sp, #36]	; 0x24
    4b08:	f009 fe40 	bl	e78c <MPU9250_asukiaaa::gyroX()>
    4b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    4b0e:	eeb0 8a40 	vmov.f32	s16, s0
    4b12:	f009 fe4d 	bl	e7b0 <MPU9250_asukiaaa::gyroY()>
    4b16:	eef0 8a40 	vmov.f32	s17, s0
    4b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    4b1c:	f009 fe5a 	bl	e7d4 <MPU9250_asukiaaa::gyroZ()>
    4b20:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
    4b24:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
    4b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b2a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4b2e:	4a1f      	ldr	r2, [pc, #124]	; (4bac <UImu2::sendRawGyro()+0xb8>)
    4b30:	21fa      	movs	r1, #250	; 0xfa
    4b32:	4628      	mov	r0, r5
    4b34:	9306      	str	r3, [sp, #24]
    4b36:	ed8d 6b02 	vstr	d6, [sp, #8]
    4b3a:	ed8d 0b04 	vstr	d0, [sp, #16]
    4b3e:	ed8d 7b00 	vstr	d7, [sp]
    4b42:	f016 fda7 	bl	1b694 <snprintf>
  else
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", gyro0[0]/div, gyro0[1]/div, gyro0[2]/div, gyro0Cnt);
  usb.send(s);
    4b46:	4629      	mov	r1, r5
    4b48:	4819      	ldr	r0, [pc, #100]	; (4bb0 <UImu2::sendRawGyro()+0xbc>)
    4b4a:	f007 fce7 	bl	c51c <UUSB::send(char const*)>
  gyro0[0] = 0;
    4b4e:	2300      	movs	r3, #0
  gyro0[1] = 0;
  gyro0[2] = 0;
  gyro0Cnt = 0;
    4b50:	2200      	movs	r2, #0
  gyro0[0] = 0;
    4b52:	62a3      	str	r3, [r4, #40]	; 0x28
  gyro0[1] = 0;
    4b54:	62e3      	str	r3, [r4, #44]	; 0x2c
  gyro0[2] = 0;
    4b56:	6323      	str	r3, [r4, #48]	; 0x30
  gyro0Cnt = 0;
    4b58:	6362      	str	r2, [r4, #52]	; 0x34
}
    4b5a:	b04b      	add	sp, #300	; 0x12c
    4b5c:	ecbd 8b02 	vpop	{d8}
    4b60:	bd30      	pop	{r4, r5, pc}
  float div = gyro0Cnt;
    4b62:	ee07 3a90 	vmov	s15, r3
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", gyro0[0]/div, gyro0[1]/div, gyro0[2]/div, gyro0Cnt);
    4b66:	ed90 6a0c 	vldr	s12, [r0, #48]	; 0x30
    4b6a:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
    4b6e:	ad0b      	add	r5, sp, #44	; 0x2c
  float div = gyro0Cnt;
    4b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", gyro0[0]/div, gyro0[1]/div, gyro0[2]/div, gyro0Cnt);
    4b74:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
    4b78:	4a0c      	ldr	r2, [pc, #48]	; (4bac <UImu2::sendRawGyro()+0xb8>)
    4b7a:	21fa      	movs	r1, #250	; 0xfa
    4b7c:	4628      	mov	r0, r5
    4b7e:	9306      	str	r3, [sp, #24]
    4b80:	ee86 5a27 	vdiv.f32	s10, s12, s15
    4b84:	ee87 6a27 	vdiv.f32	s12, s14, s15
    4b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    4b8c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4b90:	ed8d 5b04 	vstr	d5, [sp, #16]
    4b94:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4b98:	ed8d 6b02 	vstr	d6, [sp, #8]
    4b9c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4ba0:	ed8d 7b00 	vstr	d7, [sp]
    4ba4:	f016 fd76 	bl	1b694 <snprintf>
    4ba8:	e7cd      	b.n	4b46 <UImu2::sendRawGyro()+0x52>
    4baa:	bf00      	nop
    4bac:	20004920 	.word	0x20004920
    4bb0:	2000eab8 	.word	0x2000eab8

00004bb4 <UImu2::sendData(int)>:
  if (item == 0)
    4bb4:	2904      	cmp	r1, #4
    4bb6:	d804      	bhi.n	4bc2 <UImu2::sendData(int)+0xe>
    4bb8:	e8df f001 	tbb	[pc, r1]
    4bbc:	2a280806 	.word	0x2a280806
    4bc0:	04          	.byte	0x04
    4bc1:	00          	.byte	0x00
    4bc2:	4770      	bx	lr
    sendRawAcc();
    4bc4:	f7ff bf36 	b.w	4a34 <UImu2::sendRawAcc()>
    sendStatusGyro();
    4bc8:	f7ff beb6 	b.w	4938 <UImu2::sendStatusGyro()>
  snprintf(reply, MRL, "gyroo %f %f %f\r\n",
    4bcc:	ed90 5a20 	vldr	s10, [r0, #128]	; 0x80
    4bd0:	21fa      	movs	r1, #250	; 0xfa
    4bd2:	ed90 6a1f 	vldr	s12, [r0, #124]	; 0x7c
    4bd6:	ed90 7a1e 	vldr	s14, [r0, #120]	; 0x78
    4bda:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4bde:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4be2:	4a0c      	ldr	r2, [pc, #48]	; (4c14 <UImu2::sendData(int)+0x60>)
    4be4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    4be8:	b500      	push	{lr}
    4bea:	b0c7      	sub	sp, #284	; 0x11c
  snprintf(reply, MRL, "gyroo %f %f %f\r\n",
    4bec:	ed8d 5b04 	vstr	d5, [sp, #16]
    4bf0:	ed8d 6b02 	vstr	d6, [sp, #8]
    4bf4:	ed8d 7b00 	vstr	d7, [sp]
    4bf8:	a807      	add	r0, sp, #28
    4bfa:	f016 fd4b 	bl	1b694 <snprintf>
  usb.send(reply);
    4bfe:	a907      	add	r1, sp, #28
    4c00:	4805      	ldr	r0, [pc, #20]	; (4c18 <UImu2::sendData(int)+0x64>)
    4c02:	f007 fc8b 	bl	c51c <UUSB::send(char const*)>
}
    4c06:	b047      	add	sp, #284	; 0x11c
    4c08:	f85d fb04 	ldr.w	pc, [sp], #4
    sendStatusAcc();
    4c0c:	f7ff bed4 	b.w	49b8 <UImu2::sendStatusAcc()>
    sendRawGyro();
    4c10:	f7ff bf70 	b.w	4af4 <UImu2::sendRawGyro()>
    4c14:	20004948 	.word	0x20004948
    4c18:	2000eab8 	.word	0x2000eab8
    4c1c:	00000000 	.word	0x00000000

00004c20 <UImu2::estimateTilt()>:
// float tiltu1  = 0; // old value for complementary filter
// float accAng;   // for debug
// float gyroTiltRate;
void UImu2::estimateTilt()
{ // use actual sample time
  float T = sampleTime_us * 1e-6;
    4c20:	edd0 7a39 	vldr	s15, [r0, #228]	; 0xe4
  float tau = 1.0; // seems to give good response
  float b = T/(T + 2 * tau);
    4c24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  float a = -(T - 2 * tau)/(T + 2 * tau);
  float u; // input to filter
  float est; // estimated angle
  // gyro mounted on top plate!
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4c28:	edd0 0a10 	vldr	s1, [r0, #64]	; 0x40
  float T = sampleTime_us * 1e-6;
    4c2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4c30:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
    4c34:	eef1 0a60 	vneg.f32	s1, s1
    4c38:	eeb1 0a40 	vneg.f32	s0, s0
  float T = sampleTime_us * 1e-6;
    4c3c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 4df0 <UImu2::estimateTilt()+0x1d0>
{ // use actual sample time
    4c40:	b510      	push	{r4, lr}
  float T = sampleTime_us * 1e-6;
    4c42:	ee27 7b05 	vmul.f64	d7, d7, d5
{ // use actual sample time
    4c46:	4604      	mov	r4, r0
    4c48:	ed2d 8b02 	vpush	{d8}
  float T = sampleTime_us * 1e-6;
    4c4c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  float a = -(T - 2 * tau)/(T + 2 * tau);
    4c50:	ee77 7a66 	vsub.f32	s15, s14, s13
  float b = T/(T + 2 * tau);
    4c54:	ee77 6a26 	vadd.f32	s13, s14, s13
  float a = -(T - 2 * tau)/(T + 2 * tau);
    4c58:	eef1 7a67 	vneg.f32	s15, s15
  float b = T/(T + 2 * tau);
    4c5c:	eec7 8a26 	vdiv.f32	s17, s14, s13
  float a = -(T - 2 * tau)/(T + 2 * tau);
    4c60:	ee87 8aa6 	vdiv.f32	s16, s15, s13
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4c64:	f013 fa3e 	bl	180e4 <atan2f>
  // offset with value that makes the robot balance
  // accAng -= rY; // rY is board rotation on yAxis (tilt offset)
  // New and old angle must be in same revolution
  if ((accAng - encoder.pose[3]) > M_PI)
    4c68:	4b6f      	ldr	r3, [pc, #444]	; (4e28 <UImu2::estimateTilt()+0x208>)
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4c6a:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
  if ((accAng - encoder.pose[3]) > M_PI)
    4c6e:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
    4c72:	ee30 7a46 	vsub.f32	s14, s0, s12
    4c76:	ed9f 5b60 	vldr	d5, [pc, #384]	; 4df8 <UImu2::estimateTilt()+0x1d8>
    4c7a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4c7e:	eeb4 7bc5 	vcmpe.f64	d7, d5
    4c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c86:	f340 80a0 	ble.w	4dca <UImu2::estimateTilt()+0x1aa>
    accAng -= 2*M_PI;
    4c8a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4c8e:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 4e00 <UImu2::estimateTilt()+0x1e0>
    4c92:	ee30 0b47 	vsub.f64	d0, d0, d7
    4c96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    4c9a:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
  else if ((accAng - encoder.pose[3]) < -M_PI)
    accAng += 2*M_PI;
  // gyro is running in mode 2 (0= 250 grader/sek, 1 = 500 deg/s, 2=1000 deg/s 3=2000 deg/s)
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4c9e:	ed94 7a08 	vldr	s14, [r4, #32]
  // add gyro and accelerometer reading
  u = accAng + gyroTiltRate * tau;
  if (true) // imuGyro[0] < 245 and imuGyro[0] > -245)
  { // gyro not saturated
    // filter
    if (accAng > 0.0 and encoder.pose[3] < -M_PI/2.0)
    4ca2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4ca6:	ed9f 5b54 	vldr	d5, [pc, #336]	; 4df8 <UImu2::estimateTilt()+0x1d8>
    4caa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    if (accAng > 0.0 and encoder.pose[3] < -M_PI/2.0)
    4cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4cb2:	ee27 7b05 	vmul.f64	d7, d7, d5
    4cb6:	ed9f 4b54 	vldr	d4, [pc, #336]	; 4e08 <UImu2::estimateTilt()+0x1e8>
    4cba:	ee87 5b04 	vdiv.f64	d5, d7, d4
    4cbe:	eef7 6bc5 	vcvt.f32.f64	s13, d5
  u = accAng + gyroTiltRate * tau;
    4cc2:	ee76 4a80 	vadd.f32	s9, s13, s0
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4cc6:	edc4 6a1c 	vstr	s13, [r4, #112]	; 0x70
    if (accAng > 0.0 and encoder.pose[3] < -M_PI/2.0)
    4cca:	dd1f      	ble.n	4d0c <UImu2::estimateTilt()+0xec>
    4ccc:	eeb7 5ac6 	vcvt.f64.f32	d5, s12
    4cd0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 4e10 <UImu2::estimateTilt()+0x1f0>
    4cd4:	eeb4 5bc7 	vcmpe.f64	d5, d7
    4cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4cdc:	d516      	bpl.n	4d0c <UImu2::estimateTilt()+0xec>
      est = a * (encoder.pose[3] + 2 * M_PI) + b * u + b * tiltu1;
    4cde:	ee28 3aa4 	vmul.f32	s6, s17, s9
    4ce2:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
    4ce6:	eeb7 2ac8 	vcvt.f64.f32	d2, s16
    4cea:	ed9f 1b45 	vldr	d1, [pc, #276]	; 4e00 <UImu2::estimateTilt()+0x1e0>
    4cee:	ee35 5b01 	vadd.f64	d5, d5, d1
    else if (accAng < 0.0 and encoder.pose[3] > M_PI/2.0)
      est = a * (encoder.pose[3] - 2 * M_PI) + b * u + b * tiltu1;
    4cf2:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    4cf6:	ee28 7a87 	vmul.f32	s14, s17, s14
    4cfa:	eea2 3b05 	vfma.f64	d3, d2, d5
    4cfe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4d02:	ee37 7b03 	vadd.f64	d7, d7, d3
    4d06:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    4d0a:	e00c      	b.n	4d26 <UImu2::estimateTilt()+0x106>
    else if (accAng < 0.0 and encoder.pose[3] > M_PI/2.0)
    4d0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    4d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d14:	d445      	bmi.n	4da2 <UImu2::estimateTilt()+0x182>
    else
      est = a * encoder.pose[3] + b * u + b * tiltu1;
    4d16:	ee28 7aa4 	vmul.f32	s14, s17, s9
    4d1a:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
    4d1e:	eea6 7a08 	vfma.f32	s14, s12, s16
    4d22:	eea7 7aa8 	vfma.f32	s14, s15, s17
             accAng, gyroTiltRate, u, est, tiltu1, a, b, T);
    usb.send(s);
  }
  // debug end
  //
  if (est > M_PI)
    4d26:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
    4d2a:	ed9f 3b33 	vldr	d3, [pc, #204]	; 4df8 <UImu2::estimateTilt()+0x1d8>
    4d2e:	eeb4 5bc3 	vcmpe.f64	d5, d3
    4d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d36:	dd16      	ble.n	4d66 <UImu2::estimateTilt()+0x146>
  { // folded
    est -= 2 * M_PI;
    // save last value of u in right angle space
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d38:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4d3c:	eeb7 3ae6 	vcvt.f64.f32	d3, s13
    est -= 2 * M_PI;
    4d40:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 4e00 <UImu2::estimateTilt()+0x1e0>
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d44:	ee30 6b47 	vsub.f64	d6, d0, d7
    est -= 2 * M_PI;
    4d48:	ee35 7b47 	vsub.f64	d7, d5, d7
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d4c:	ee36 6b03 	vadd.f64	d6, d6, d3
    est -= 2 * M_PI;
    4d50:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d54:	eef7 4bc6 	vcvt.f32.f64	s9, d6
    4d58:	edc4 4a1a 	vstr	s9, [r4, #104]	; 0x68
  else
  { // no folding
    tiltu1 = u;
  }
  //
  encoder.pose[3] = est;
    4d5c:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
}
    4d60:	ecbd 8b02 	vpop	{d8}
    4d64:	bd10      	pop	{r4, pc}
  else if (est < -M_PI)
    4d66:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 4e18 <UImu2::estimateTilt()+0x1f8>
    4d6a:	eeb4 5bc3 	vcmpe.f64	d5, d3
    4d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d72:	d5f1      	bpl.n	4d58 <UImu2::estimateTilt()+0x138>
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d74:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4d78:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
    est += 2 * M_PI;
    4d7c:	ed9f 4b20 	vldr	d4, [pc, #128]	; 4e00 <UImu2::estimateTilt()+0x1e0>
}
    4d80:	ecbd 8b02 	vpop	{d8}
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d84:	ee30 0b44 	vsub.f64	d0, d0, d4
    est += 2 * M_PI;
    4d88:	ee35 5b04 	vadd.f64	d5, d5, d4
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d8c:	ee30 0b07 	vadd.f64	d0, d0, d7
    est += 2 * M_PI;
    4d90:	eeb7 7bc5 	vcvt.f32.f64	s14, d5
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d94:	eef7 4bc0 	vcvt.f32.f64	s9, d0
  encoder.pose[3] = est;
    4d98:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4d9c:	edc4 4a1a 	vstr	s9, [r4, #104]	; 0x68
}
    4da0:	bd10      	pop	{r4, pc}
    else if (accAng < 0.0 and encoder.pose[3] > M_PI/2.0)
    4da2:	eeb7 5ac6 	vcvt.f64.f32	d5, s12
    4da6:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 4e20 <UImu2::estimateTilt()+0x200>
    4daa:	eeb4 5bc7 	vcmpe.f64	d5, d7
    4dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4db2:	ddb0      	ble.n	4d16 <UImu2::estimateTilt()+0xf6>
      est = a * (encoder.pose[3] - 2 * M_PI) + b * u + b * tiltu1;
    4db4:	ee28 3aa4 	vmul.f32	s6, s17, s9
    4db8:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
    4dbc:	eeb7 2ac8 	vcvt.f64.f32	d2, s16
    4dc0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 4e00 <UImu2::estimateTilt()+0x1e0>
    4dc4:	ee35 5b41 	vsub.f64	d5, d5, d1
    4dc8:	e793      	b.n	4cf2 <UImu2::estimateTilt()+0xd2>
  else if ((accAng - encoder.pose[3]) < -M_PI)
    4dca:	ed9f 5b13 	vldr	d5, [pc, #76]	; 4e18 <UImu2::estimateTilt()+0x1f8>
    4dce:	eeb4 7bc5 	vcmpe.f64	d7, d5
    4dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dd6:	f57f af62 	bpl.w	4c9e <UImu2::estimateTilt()+0x7e>
    accAng += 2*M_PI;
    4dda:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4dde:	ed9f 7b08 	vldr	d7, [pc, #32]	; 4e00 <UImu2::estimateTilt()+0x1e0>
    4de2:	ee30 0b07 	vadd.f64	d0, d0, d7
    4de6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    4dea:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    4dee:	e756      	b.n	4c9e <UImu2::estimateTilt()+0x7e>
    4df0:	a0b5ed8d 	.word	0xa0b5ed8d
    4df4:	3eb0c6f7 	.word	0x3eb0c6f7
    4df8:	54442d18 	.word	0x54442d18
    4dfc:	400921fb 	.word	0x400921fb
    4e00:	54442d18 	.word	0x54442d18
    4e04:	401921fb 	.word	0x401921fb
    4e08:	00000000 	.word	0x00000000
    4e0c:	40668000 	.word	0x40668000
    4e10:	54442d18 	.word	0x54442d18
    4e14:	bff921fb 	.word	0xbff921fb
    4e18:	54442d18 	.word	0x54442d18
    4e1c:	c00921fb 	.word	0xc00921fb
    4e20:	54442d18 	.word	0x54442d18
    4e24:	3ff921fb 	.word	0x3ff921fb
    4e28:	2000dc34 	.word	0x2000dc34

00004e2c <UImu2::tick()>:
  tickCnt++;
    4e2c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
    4e30:	3301      	adds	r3, #1
  if (tickCnt < 20)
    4e32:	2b13      	cmp	r3, #19
{ // read data - first time will fail
    4e34:	b530      	push	{r4, r5, lr}
    4e36:	4604      	mov	r4, r0
    4e38:	ed2d 8b02 	vpush	{d8}
  tickCnt++;
    4e3c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
{ // read data - first time will fail
    4e40:	b0ab      	sub	sp, #172	; 0xac
  if (tickCnt < 20)
    4e42:	d94f      	bls.n	4ee4 <UImu2::tick()+0xb8>
  if (imuAvailable > 0)
    4e44:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4e46:	2b00      	cmp	r3, #0
    4e48:	dc03      	bgt.n	4e52 <UImu2::tick()+0x26>
}
    4e4a:	b02b      	add	sp, #172	; 0xac
    4e4c:	ecbd 8b02 	vpop	{d8}
    4e50:	bd30      	pop	{r4, r5, pc}
    uint32_t nt = micros();
    4e52:	f011 f819 	bl	15e88 <micros>
      imuuSec = service.time_us;
    4e56:	4a9c      	ldr	r2, [pc, #624]	; (50c8 <UImu2::tick()+0x29c>)
    int dt = nt - lastRead;
    4e58:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
      if (mpu.accelUpdate() == 0)
    4e5c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
      lastRead = nt;
    4e60:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    int dt = nt - lastRead;
    4e64:	1ac3      	subs	r3, r0, r3
      if (mpu.accelUpdate() == 0)
    4e66:	4628      	mov	r0, r5
      imuuSec = service.time_us;
    4e68:	ed92 7b02 	vldr	d7, [r2, #8]
      sampleTime_us = dt;
    4e6c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
      imuuSec = service.time_us;
    4e70:	ed84 7b3a 	vstr	d7, [r4, #232]	; 0xe8
      if (mpu.accelUpdate() == 0)
    4e74:	f009 fc02 	bl	e67c <MPU9250_asukiaaa::accelUpdate()>
    4e78:	2800      	cmp	r0, #0
    4e7a:	f000 8095 	beq.w	4fa8 <UImu2::tick()+0x17c>
      if (mpu.gyroUpdate() == 0)
    4e7e:	4628      	mov	r0, r5
    4e80:	f009 fc78 	bl	e774 <MPU9250_asukiaaa::gyroUpdate()>
    4e84:	2800      	cmp	r0, #0
    4e86:	d13c      	bne.n	4f02 <UImu2::tick()+0xd6>
        if (gyroOffsetDone)
    4e88:	7e23      	ldrb	r3, [r4, #24]
          gyro[0] = mpu.gyroX() - offsetGyro[0];
    4e8a:	4628      	mov	r0, r5
        if (gyroOffsetDone)
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d142      	bne.n	4f16 <UImu2::tick()+0xea>
          gyro[0] = mpu.gyroX();
    4e90:	f009 fc7c 	bl	e78c <MPU9250_asukiaaa::gyroX()>
          gyro[1] = mpu.gyroY();
    4e94:	4628      	mov	r0, r5
          gyro[0] = mpu.gyroX();
    4e96:	ed84 0a07 	vstr	s0, [r4, #28]
          gyro[1] = mpu.gyroY();
    4e9a:	f009 fc89 	bl	e7b0 <MPU9250_asukiaaa::gyroY()>
          gyro[2] = -mpu.gyroZ();
    4e9e:	4628      	mov	r0, r5
          gyro[1] = mpu.gyroY();
    4ea0:	ed84 0a08 	vstr	s0, [r4, #32]
          gyro[2] = -mpu.gyroZ();
    4ea4:	f009 fc96 	bl	e7d4 <MPU9250_asukiaaa::gyroZ()>
          if (tickCnt < gyroOffsetStartCnt)
    4ea8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    4eac:	6963      	ldr	r3, [r4, #20]
          gyro[2] = -mpu.gyroZ();
    4eae:	eef1 7a40 	vneg.f32	s15, s0
          if (tickCnt < gyroOffsetStartCnt)
    4eb2:	429a      	cmp	r2, r3
          gyro[2] = -mpu.gyroZ();
    4eb4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
          if (tickCnt < gyroOffsetStartCnt)
    4eb8:	f080 80ab 	bcs.w	5012 <UImu2::tick()+0x1e6>
            offsetGyro[0] = 0;
    4ebc:	2300      	movs	r3, #0
    4ebe:	67a3      	str	r3, [r4, #120]	; 0x78
            offsetGyro[1] = 0;
    4ec0:	67e3      	str	r3, [r4, #124]	; 0x7c
            offsetGyro[2] = 0;
    4ec2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        if (imuAvailable < 10)
    4ec6:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4ec8:	2b09      	cmp	r3, #9
    4eca:	dc01      	bgt.n	4ed0 <UImu2::tick()+0xa4>
          imuAvailable++;
    4ecc:	3301      	adds	r3, #1
    4ece:	6763      	str	r3, [r4, #116]	; 0x74
      estimateTilt();
    4ed0:	4620      	mov	r0, r4
    4ed2:	f7ff fea5 	bl	4c20 <UImu2::estimateTilt()>
      tiltOnly = true;
    4ed6:	2301      	movs	r3, #1
    4ed8:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
}
    4edc:	b02b      	add	sp, #172	; 0xac
    4ede:	ecbd 8b02 	vpop	{d8}
    4ee2:	bd30      	pop	{r4, r5, pc}
    snprintf(s, MSL,"# UImu2::tick %lu, sampleTime = %dus, imuavail=%d\n", tickCnt, sampleTime_us, imuAvailable);
    4ee4:	6f41      	ldr	r1, [r0, #116]	; 0x74
    4ee6:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
    4eea:	a804      	add	r0, sp, #16
    4eec:	e9cd 2100 	strd	r2, r1, [sp]
    4ef0:	4a76      	ldr	r2, [pc, #472]	; (50cc <UImu2::tick()+0x2a0>)
    4ef2:	2164      	movs	r1, #100	; 0x64
    4ef4:	f016 fbce 	bl	1b694 <snprintf>
    usb.send(s);
    4ef8:	a904      	add	r1, sp, #16
    4efa:	4875      	ldr	r0, [pc, #468]	; (50d0 <UImu2::tick()+0x2a4>)
    4efc:	f007 fb0e 	bl	c51c <UUSB::send(char const*)>
    4f00:	e7a0      	b.n	4e44 <UImu2::tick()+0x18>
        imuAvailable--;
    4f02:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4f04:	3b01      	subs	r3, #1
    4f06:	6763      	str	r3, [r4, #116]	; 0x74
        if (imuAvailable == 0)
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d1e1      	bne.n	4ed0 <UImu2::tick()+0xa4>
          usb.send("# message failed to read from MPU9250 10 times in a row, stopped trying\n");
    4f0c:	4971      	ldr	r1, [pc, #452]	; (50d4 <UImu2::tick()+0x2a8>)
    4f0e:	4870      	ldr	r0, [pc, #448]	; (50d0 <UImu2::tick()+0x2a4>)
    4f10:	f007 fb04 	bl	c51c <UUSB::send(char const*)>
    4f14:	e7dc      	b.n	4ed0 <UImu2::tick()+0xa4>
          gyro[0] = mpu.gyroX() - offsetGyro[0];
    4f16:	f009 fc39 	bl	e78c <MPU9250_asukiaaa::gyroX()>
    4f1a:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
          gyro[1] = mpu.gyroY() - offsetGyro[1];
    4f1e:	4628      	mov	r0, r5
          gyro[0] = mpu.gyroX() - offsetGyro[0];
    4f20:	ee30 0a67 	vsub.f32	s0, s0, s15
    4f24:	ed84 0a07 	vstr	s0, [r4, #28]
          gyro[1] = mpu.gyroY() - offsetGyro[1];
    4f28:	f009 fc42 	bl	e7b0 <MPU9250_asukiaaa::gyroY()>
    4f2c:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
          gyro[2] = -mpu.gyroZ() - offsetGyro[2];
    4f30:	4628      	mov	r0, r5
          gyro[1] = mpu.gyroY() - offsetGyro[1];
    4f32:	ee30 0a67 	vsub.f32	s0, s0, s15
    4f36:	ed84 0a08 	vstr	s0, [r4, #32]
          gyro[2] = -mpu.gyroZ() - offsetGyro[2];
    4f3a:	f009 fc4b 	bl	e7d4 <MPU9250_asukiaaa::gyroZ()>
    4f3e:	eeb1 0a40 	vneg.f32	s0, s0
    4f42:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
          gyro0[0] += mpu.gyroX()  - offsetGyro[0];
    4f46:	4628      	mov	r0, r5
          gyro[2] = -mpu.gyroZ() - offsetGyro[2];
    4f48:	ee30 0a67 	vsub.f32	s0, s0, s15
    4f4c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
          gyro0[0] += mpu.gyroX()  - offsetGyro[0];
    4f50:	f009 fc1c 	bl	e78c <MPU9250_asukiaaa::gyroX()>
    4f54:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
    4f58:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
          gyro0[1] += mpu.gyroY()  - offsetGyro[1];
    4f5c:	4628      	mov	r0, r5
          gyro0[0] += mpu.gyroX()  - offsetGyro[0];
    4f5e:	ee30 0a47 	vsub.f32	s0, s0, s14
    4f62:	ee77 7a80 	vadd.f32	s15, s15, s0
    4f66:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
          gyro0[1] += mpu.gyroY()  - offsetGyro[1];
    4f6a:	f009 fc21 	bl	e7b0 <MPU9250_asukiaaa::gyroY()>
    4f6e:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
    4f72:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    4f76:	4628      	mov	r0, r5
          gyro0[1] += mpu.gyroY()  - offsetGyro[1];
    4f78:	ee30 0a47 	vsub.f32	s0, s0, s14
    4f7c:	ee77 7a80 	vadd.f32	s15, s15, s0
    4f80:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    4f84:	f009 fc26 	bl	e7d4 <MPU9250_asukiaaa::gyroZ()>
    4f88:	eeb1 0a40 	vneg.f32	s0, s0
    4f8c:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    4f90:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    4f94:	ee30 0a47 	vsub.f32	s0, s0, s14
          gyro0Cnt++;
    4f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4f9a:	3301      	adds	r3, #1
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    4f9c:	ee77 7a80 	vadd.f32	s15, s15, s0
          gyro0Cnt++;
    4fa0:	6363      	str	r3, [r4, #52]	; 0x34
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    4fa2:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
          gyro0Cnt++;
    4fa6:	e78e      	b.n	4ec6 <UImu2::tick()+0x9a>
        accw[0] = mpu.accelX();
    4fa8:	4628      	mov	r0, r5
    4faa:	f009 fb73 	bl	e694 <MPU9250_asukiaaa::accelX()>
        accw[1] = mpu.accelY();
    4fae:	4628      	mov	r0, r5
        accw[0] = mpu.accelX();
    4fb0:	eef0 8a40 	vmov.f32	s17, s0
        accw[1] = mpu.accelY();
    4fb4:	f009 fb80 	bl	e6b8 <MPU9250_asukiaaa::accelY()>
        accw[2] = -mpu.accelZ();
    4fb8:	4628      	mov	r0, r5
        accw[1] = mpu.accelY();
    4fba:	eeb0 8a40 	vmov.f32	s16, s0
        accw[2] = -mpu.accelZ();
    4fbe:	f009 fb8d 	bl	e6dc <MPU9250_asukiaaa::accelZ()>
        acc0[0] += accw[0];
    4fc2:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
        acc0[1] += accw[1];
    4fc6:	edd4 5a12 	vldr	s11, [r4, #72]	; 0x48
        acc0[2] += accw[2];
    4fca:	ed94 6a13 	vldr	s12, [r4, #76]	; 0x4c
        acc0[0] += accw[0];
    4fce:	ee35 5a28 	vadd.f32	s10, s10, s17
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    4fd2:	edd4 6a24 	vldr	s13, [r4, #144]	; 0x90
        acc0[1] += accw[1];
    4fd6:	ee75 5a88 	vadd.f32	s11, s11, s16
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    4fda:	ed94 7a25 	vldr	s14, [r4, #148]	; 0x94
        acc0[2] += accw[2];
    4fde:	ee36 6a40 	vsub.f32	s12, s12, s0
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    4fe2:	edd4 4a26 	vldr	s9, [r4, #152]	; 0x98
    4fe6:	ee66 6aa8 	vmul.f32	s13, s13, s17
        acc0Cnt++;
    4fea:	6d23      	ldr	r3, [r4, #80]	; 0x50
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    4fec:	ee27 7a08 	vmul.f32	s14, s14, s16
    4ff0:	ee60 7a64 	vnmul.f32	s15, s0, s9
        acc0[0] += accw[0];
    4ff4:	ed84 5a11 	vstr	s10, [r4, #68]	; 0x44
        acc0Cnt++;
    4ff8:	3301      	adds	r3, #1
        acc0[1] += accw[1];
    4ffa:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
        acc0[2] += accw[2];
    4ffe:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
        acc0Cnt++;
    5002:	6523      	str	r3, [r4, #80]	; 0x50
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    5004:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    5008:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    500c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
        for (int i = 0; i < 3; i++)
    5010:	e735      	b.n	4e7e <UImu2::tick()+0x52>
          else if (tickCnt <= gyroOffsetStartCnt + 1000)
    5012:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
    5016:	428a      	cmp	r2, r1
    5018:	d83b      	bhi.n	5092 <UImu2::tick()+0x266>
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    501a:	1ad3      	subs	r3, r2, r3
    501c:	482e      	ldr	r0, [pc, #184]	; (50d8 <UImu2::tick()+0x2ac>)
            offsetGyro[0] += gyro[0];
    501e:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
            offsetGyro[1] += gyro[1];
    5022:	edd4 6a1f 	vldr	s13, [r4, #124]	; 0x7c
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    5026:	fb03 f000 	mul.w	r0, r3, r0
            offsetGyro[2] += gyro[2];
    502a:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
            offsetGyro[0] += gyro[0];
    502e:	ed94 6a07 	vldr	s12, [r4, #28]
            offsetGyro[1] += gyro[1];
    5032:	edd4 5a08 	vldr	s11, [r4, #32]
            offsetGyro[2] += gyro[2];
    5036:	ee77 7ac0 	vsub.f32	s15, s15, s0
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    503a:	4d28      	ldr	r5, [pc, #160]	; (50dc <UImu2::tick()+0x2b0>)
            offsetGyro[0] += gyro[0];
    503c:	ee36 7a07 	vadd.f32	s14, s12, s14
            offsetGyro[1] += gyro[1];
    5040:	ee76 6aa5 	vadd.f32	s13, s13, s11
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    5044:	ebb5 0fb0 	cmp.w	r5, r0, ror #2
            offsetGyro[2] += gyro[2];
    5048:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
            offsetGyro[0] += gyro[0];
    504c:	ed84 7a1e 	vstr	s14, [r4, #120]	; 0x78
            offsetGyro[1] += gyro[1];
    5050:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    5054:	d220      	bcs.n	5098 <UImu2::tick()+0x26c>
            if (tickCnt == gyroOffsetStartCnt + 1000)
    5056:	4291      	cmp	r1, r2
    5058:	f47f af35 	bne.w	4ec6 <UImu2::tick()+0x9a>
              offsetGyro[0] /= 1000;
    505c:	edd4 6a1e 	vldr	s13, [r4, #120]	; 0x78
    5060:	eddf 7a1f 	vldr	s15, [pc, #124]	; 50e0 <UImu2::tick()+0x2b4>
              offsetGyro[1] /= 1000;
    5064:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
              offsetGyro[2] /= 1000;
    5068:	edd4 5a20 	vldr	s11, [r4, #128]	; 0x80
              offsetGyro[0] /= 1000;
    506c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
              usb.send("# gyro offset finished\r\n");
    5070:	491c      	ldr	r1, [pc, #112]	; (50e4 <UImu2::tick()+0x2b8>)
    5072:	4817      	ldr	r0, [pc, #92]	; (50d0 <UImu2::tick()+0x2a4>)
              offsetGyro[1] /= 1000;
    5074:	eec7 6a27 	vdiv.f32	s13, s14, s15
              offsetGyro[2] /= 1000;
    5078:	ee85 7aa7 	vdiv.f32	s14, s11, s15
              offsetGyro[0] /= 1000;
    507c:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
              offsetGyro[1] /= 1000;
    5080:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
              offsetGyro[2] /= 1000;
    5084:	ed84 7a20 	vstr	s14, [r4, #128]	; 0x80
              usb.send("# gyro offset finished\r\n");
    5088:	f007 fa48 	bl	c51c <UUSB::send(char const*)>
              gyroOffsetDone  = true;
    508c:	2301      	movs	r3, #1
    508e:	7623      	strb	r3, [r4, #24]
    5090:	e719      	b.n	4ec6 <UImu2::tick()+0x9a>
            gyroOffsetStartCnt = tickCnt + 10;
    5092:	320a      	adds	r2, #10
    5094:	6162      	str	r2, [r4, #20]
    5096:	e716      	b.n	4ec6 <UImu2::tick()+0x9a>
              snprintf(s, MSL,"# UImu2::gyrooffset n=%lu, gx=%g sumgx=%g\n", tickCnt - gyroOffsetStartCnt, gyro[0], offsetGyro[0]);
    5098:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    509c:	4a12      	ldr	r2, [pc, #72]	; (50e8 <UImu2::tick()+0x2bc>)
    509e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    50a2:	2196      	movs	r1, #150	; 0x96
    50a4:	a804      	add	r0, sp, #16
    50a6:	ed8d 7b02 	vstr	d7, [sp, #8]
    50aa:	ed8d 6b00 	vstr	d6, [sp]
    50ae:	f016 faf1 	bl	1b694 <snprintf>
              usb.send(s);
    50b2:	a904      	add	r1, sp, #16
    50b4:	4806      	ldr	r0, [pc, #24]	; (50d0 <UImu2::tick()+0x2a4>)
    50b6:	f007 fa31 	bl	c51c <UUSB::send(char const*)>
            if (tickCnt == gyroOffsetStartCnt + 1000)
    50ba:	6961      	ldr	r1, [r4, #20]
    50bc:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    50c0:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    50c4:	e7c7      	b.n	5056 <UImu2::tick()+0x22a>
    50c6:	bf00      	nop
    50c8:	2000d0c8 	.word	0x2000d0c8
    50cc:	20004974 	.word	0x20004974
    50d0:	2000eab8 	.word	0x2000eab8
    50d4:	200049f0 	.word	0x200049f0
    50d8:	c28f5c29 	.word	0xc28f5c29
    50dc:	028f5c28 	.word	0x028f5c28
    50e0:	447a0000 	.word	0x447a0000
    50e4:	200049d4 	.word	0x200049d4
    50e8:	200049a8 	.word	0x200049a8

000050ec <_GLOBAL__sub_I_imu2>:
}
    50ec:	b570      	push	{r4, r5, r6, lr}
    50ee:	4c23      	ldr	r4, [pc, #140]	; (517c <_GLOBAL__sub_I_imu2+0x90>)
    50f0:	2500      	movs	r5, #0
    50f2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    50f6:	4620      	mov	r0, r4
    50f8:	f007 f81e 	bl	c138 <USubss::USubss()>
    50fc:	4b20      	ldr	r3, [pc, #128]	; (5180 <_GLOBAL__sub_I_imu2+0x94>)
    50fe:	4a21      	ldr	r2, [pc, #132]	; (5184 <_GLOBAL__sub_I_imu2+0x98>)
    5100:	6023      	str	r3, [r4, #0]
    5102:	2300      	movs	r3, #0
    5104:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    5108:	66a3      	str	r3, [r4, #104]	; 0x68
    510a:	230a      	movs	r3, #10
    510c:	62e5      	str	r5, [r4, #44]	; 0x2c
    510e:	6763      	str	r3, [r4, #116]	; 0x74
    5110:	f104 0390 	add.w	r3, r4, #144	; 0x90
    5114:	6325      	str	r5, [r4, #48]	; 0x30
    5116:	6166      	str	r6, [r4, #20]
    5118:	61e5      	str	r5, [r4, #28]
    511a:	62a5      	str	r5, [r4, #40]	; 0x28
    511c:	6465      	str	r5, [r4, #68]	; 0x44
    511e:	65e5      	str	r5, [r4, #92]	; 0x5c
    5120:	67a5      	str	r5, [r4, #120]	; 0x78
    5122:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    5126:	ca07      	ldmia	r2, {r0, r1, r2}
    5128:	e9c4 5508 	strd	r5, r5, [r4, #32]
    512c:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
    5130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    5134:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    5138:	e9c4 551f 	strd	r5, r5, [r4, #124]	; 0x7c
    513c:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
    5140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    5144:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    5148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    514c:	2168      	movs	r1, #104	; 0x68
    514e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    5152:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
    5156:	f009 f9bf 	bl	e4d8 <MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)>
UImu2 imu2;
    515a:	4620      	mov	r0, r4
    515c:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    5160:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
    5164:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    5168:	4a07      	ldr	r2, [pc, #28]	; (5188 <_GLOBAL__sub_I_imu2+0x9c>)
    516a:	4908      	ldr	r1, [pc, #32]	; (518c <_GLOBAL__sub_I_imu2+0xa0>)
    516c:	e9c4 5533 	strd	r5, r5, [r4, #204]	; 0xcc
    5170:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
}
    5174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
UImu2 imu2;
    5178:	f013 bebe 	b.w	18ef8 <__aeabi_atexit>
    517c:	2000cfd0 	.word	0x2000cfd0
    5180:	20007fac 	.word	0x20007fac
    5184:	20001e40 	.word	0x20001e40
    5188:	20008f08 	.word	0x20008f08
    518c:	000046e5 	.word	0x000046e5

00005190 <UIrDist::sendHelp()>:
    sendStatusDistIR2();
}


void UIrDist::sendHelp()
{
    5190:	b510      	push	{r4, lr}
  const int MRL = 300;
  char reply[MRL];
  usb.send("# IR distance -------\r\n");
    5192:	4c0a      	ldr	r4, [pc, #40]	; (51bc <UIrDist::sendHelp()+0x2c>)
{
    5194:	b0cc      	sub	sp, #304	; 0x130
  usb.send("# IR distance -------\r\n");
    5196:	490a      	ldr	r1, [pc, #40]	; (51c0 <UIrDist::sendHelp()+0x30>)
    5198:	4620      	mov	r0, r4
    519a:	f007 f9bf 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tirc A13 A50 B13 B50 V\tSet calibration values: Axx=sensor 1 (side), xx=distance in cm; Bxx=Sensor 2 (front); V=1 in on\r\n");
    519e:	227e      	movs	r2, #126	; 0x7e
    51a0:	4908      	ldr	r1, [pc, #32]	; (51c4 <UIrDist::sendHelp()+0x34>)
    51a2:	a801      	add	r0, sp, #4
    51a4:	f011 f9ee 	bl	16584 <memcpy>
  usb.send(reply);
    51a8:	a901      	add	r1, sp, #4
    51aa:	4620      	mov	r0, r4
    51ac:	f007 f9b6 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tiron V \tTurn IR sensor on or off V=1 for on (0=off)\r\n");
    51b0:	4905      	ldr	r1, [pc, #20]	; (51c8 <UIrDist::sendHelp()+0x38>)
    51b2:	4620      	mov	r0, r4
    51b4:	f007 f9b2 	bl	c51c <UUSB::send(char const*)>
}
    51b8:	b04c      	add	sp, #304	; 0x130
    51ba:	bd10      	pop	{r4, pc}
    51bc:	2000eab8 	.word	0x2000eab8
    51c0:	200060c4 	.word	0x200060c4
    51c4:	200060dc 	.word	0x200060dc
    51c8:	2000615c 	.word	0x2000615c

000051cc <UIrDist::~UIrDist()>:
#ifndef IR_DIST_H
#define IR_DIST_H

#include "usubss.h"

class UIrDist : public USubss
    51cc:	b510      	push	{r4, lr}
    51ce:	4b05      	ldr	r3, [pc, #20]	; (51e4 <UIrDist::~UIrDist()+0x18>)
    51d0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    51d2:	6840      	ldr	r0, [r0, #4]
    51d4:	6023      	str	r3, [r4, #0]
	if (__p)
    51d6:	b118      	cbz	r0, 51e0 <UIrDist::~UIrDist()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    51d8:	68e1      	ldr	r1, [r4, #12]
    51da:	1a09      	subs	r1, r1, r0
    51dc:	f011 fa6e 	bl	166bc <operator delete(void*, unsigned int)>
    51e0:	4620      	mov	r0, r4
    51e2:	bd10      	pop	{r4, pc}
    51e4:	2000802c 	.word	0x2000802c

000051e8 <UIrDist::estimateIrDistance() [clone .part.0]>:
{
  if (useDistSensor)
  { // dist sensor has power, so estimate
    // sensor uses 28ms, AD every 1ms, so filter over 10 samples
    // removes some noise from wire
    if (initIrFilter)
    51e8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void UIrDist::estimateIrDistance()
    51ec:	b430      	push	{r4, r5}
    if (initIrFilter)
    51ee:	2b00      	cmp	r3, #0
    51f0:	d054      	beq.n	529c <UIrDist::estimateIrDistance() [clone .part.0]+0xb4>
    { // when IR is first turned on
      irRaw[0] = ad.irRawAD[0] * 10;
    51f2:	4b37      	ldr	r3, [pc, #220]	; (52d0 <UIrDist::estimateIrDistance() [clone .part.0]+0xe8>)
      irRaw[1] = ad.irRawAD[1] * 10;
      initIrFilter = false;
    51f4:	2100      	movs	r1, #0
      irRaw[0] = ad.irRawAD[0] * 10;
    51f6:	8b1a      	ldrh	r2, [r3, #24]
      irRaw[1] = ad.irRawAD[1] * 10;
    51f8:	8b5b      	ldrh	r3, [r3, #26]
      irRaw[0] = ad.irRawAD[0] * 10;
    51fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      initIrFilter = false;
    51fe:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
      irRaw[1] = ad.irRawAD[1] * 10;
    5202:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      irRaw[0] = ad.irRawAD[0] * 10;
    5206:	0052      	lsls	r2, r2, #1
      irRaw[1] = ad.irRawAD[1] * 10;
    5208:	005b      	lsls	r3, r3, #1
    520a:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
    else
    {
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    }
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    520e:	ee07 2a90 	vmov	s15, r2
    5212:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
    5216:	edd0 5a11 	vldr	s11, [r0, #68]	; 0x44
    521a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    521e:	ee07 3a90 	vmov	s15, r3
    5222:	ed90 6a10 	vldr	s12, [r0, #64]	; 0x40
    5226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    522a:	edd0 6a12 	vldr	s13, [r0, #72]	; 0x48
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    522e:	eed7 5a05 	vfnms.f32	s11, s14, s10
    5232:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    5236:	eed7 6a86 	vfnms.f32	s13, s15, s12
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    523a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    523e:	ee85 6a25 	vdiv.f32	s12, s10, s11
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    5242:	ee85 7a26 	vdiv.f32	s14, s10, s13
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    5246:	eeb4 6ae7 	vcmpe.f32	s12, s15
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    524a:	ed80 6a05 	vstr	s12, [r0, #20]
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    5252:	ed80 7a06 	vstr	s14, [r0, #24]
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    5256:	dc1d      	bgt.n	5294 <UIrDist::estimateIrDistance() [clone .part.0]+0xac>
    5258:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    525c:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 52c8 <UIrDist::estimateIrDistance() [clone .part.0]+0xe0>
    5260:	eeb4 6bc5 	vcmpe.f64	d6, d5
    5264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5268:	d414      	bmi.n	5294 <UIrDist::estimateIrDistance() [clone .part.0]+0xac>
      irDistance[0] = 1.5;
    if (irDistance[1] > 1.5 or irDistance[1] < 0.05)
    526a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    526e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5276:	dc08      	bgt.n	528a <UIrDist::estimateIrDistance() [clone .part.0]+0xa2>
    5278:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    527c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 52c8 <UIrDist::estimateIrDistance() [clone .part.0]+0xe0>
    5280:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5288:	d502      	bpl.n	5290 <UIrDist::estimateIrDistance() [clone .part.0]+0xa8>
      irDistance[1] = 1.5;
    528a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    528e:	6183      	str	r3, [r0, #24]
  else
  { // not installed or not on (set to far away 10m)
    irDistance[0] = 10.0;
    irDistance[1] = 10.0;
  }
}
    5290:	bc30      	pop	{r4, r5}
    5292:	4770      	bx	lr
      irDistance[0] = 1.5;
    5294:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    5298:	6143      	str	r3, [r0, #20]
    529a:	e7e6      	b.n	526a <UIrDist::estimateIrDistance() [clone .part.0]+0x82>
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
    529c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    529e:	4d0c      	ldr	r5, [pc, #48]	; (52d0 <UIrDist::estimateIrDistance() [clone .part.0]+0xe8>)
    52a0:	4c0c      	ldr	r4, [pc, #48]	; (52d4 <UIrDist::estimateIrDistance() [clone .part.0]+0xec>)
    52a2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    52a6:	8b2a      	ldrh	r2, [r5, #24]
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    52a8:	8b6b      	ldrh	r3, [r5, #26]
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
    52aa:	fba4 5101 	umull	r5, r1, r4, r1
    52ae:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    52b2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    52b4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
    52b8:	6342      	str	r2, [r0, #52]	; 0x34
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    52ba:	fba4 4101 	umull	r4, r1, r4, r1
    52be:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
    52c2:	6383      	str	r3, [r0, #56]	; 0x38
    52c4:	e7a3      	b.n	520e <UIrDist::estimateIrDistance() [clone .part.0]+0x26>
    52c6:	bf00      	nop
    52c8:	9999999a 	.word	0x9999999a
    52cc:	3fa99999 	.word	0x3fa99999
    52d0:	2000d89c 	.word	0x2000d89c
    52d4:	cccccccd 	.word	0xcccccccd

000052d8 <UIrDist::setup()>:
{
    52d8:	b510      	push	{r4, lr}
  pinMode ( PIN_POWER_IR, OUTPUT ); // line sensor LED half power (HW2) - or power to IR (with new power board) (output anyhow)
    52da:	2101      	movs	r1, #1
{
    52dc:	4604      	mov	r4, r0
  pinMode ( PIN_POWER_IR, OUTPUT ); // line sensor LED half power (HW2) - or power to IR (with new power board) (output anyhow)
    52de:	2024      	movs	r0, #36	; 0x24
    52e0:	f010 fe38 	bl	15f54 <pinMode>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
    52e4:	4b0a      	ldr	r3, [pc, #40]	; (5310 <UIrDist::setup()+0x38>)
    52e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  addPublistItem("ir", "Get IR and calibration data 'ir dist1(m) dist2(m) raw1 raw2 cal1-13 cal1-50 cal2-13 cal2-50 use");
    52ea:	4a0a      	ldr	r2, [pc, #40]	; (5314 <UIrDist::setup()+0x3c>)
    52ec:	490a      	ldr	r1, [pc, #40]	; (5318 <UIrDist::setup()+0x40>)
    52ee:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    52f2:	4620      	mov	r0, r4
    52f4:	f007 f844 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ird", "Get IR distance 'ird dist1(m) dist2(m) sensorOn");
    52f8:	4620      	mov	r0, r4
    52fa:	4908      	ldr	r1, [pc, #32]	; (531c <UIrDist::setup()+0x44>)
    52fc:	4a08      	ldr	r2, [pc, #32]	; (5320 <UIrDist::setup()+0x48>)
    52fe:	f007 f83f 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    5302:	4621      	mov	r1, r4
    5304:	4807      	ldr	r0, [pc, #28]	; (5324 <UIrDist::setup()+0x4c>)
}
    5306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    530a:	f007 bd33 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    530e:	bf00      	nop
    5310:	42004000 	.word	0x42004000
    5314:	20006000 	.word	0x20006000
    5318:	20006060 	.word	0x20006060
    531c:	20006094 	.word	0x20006094
    5320:	20006064 	.word	0x20006064
    5324:	2000eab8 	.word	0x2000eab8

00005328 <UIrDist::tick()>:
  if (useDistSensor)
    5328:	7f02      	ldrb	r2, [r0, #28]
    532a:	b10a      	cbz	r2, 5330 <UIrDist::tick()+0x8>
    532c:	f7ff bf5c 	b.w	51e8 <UIrDist::estimateIrDistance() [clone .part.0]>
    irDistance[0] = 10.0;
    5330:	4a01      	ldr	r2, [pc, #4]	; (5338 <UIrDist::tick()+0x10>)
    5332:	6142      	str	r2, [r0, #20]
    irDistance[1] = 10.0;
    5334:	6182      	str	r2, [r0, #24]
}
    5336:	4770      	bx	lr
    5338:	41200000 	.word	0x41200000

0000533c <UIrDist::sendStatusDistIR()>:
{
    533c:	4603      	mov	r3, r0
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %lu %lu %lu %lu %d\r\n" ,
    533e:	4a13      	ldr	r2, [pc, #76]	; (538c <UIrDist::sendStatusDistIR()+0x50>)
    5340:	2140      	movs	r1, #64	; 0x40
    5342:	ed93 6a06 	vldr	s12, [r3, #24]
    5346:	ed93 7a05 	vldr	s14, [r3, #20]
    534a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    534e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    5352:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %lu %lu %lu %lu %d\r\n" ,
    5354:	7f1c      	ldrb	r4, [r3, #28]
{
    5356:	b09c      	sub	sp, #112	; 0x70
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %lu %lu %lu %lu %d\r\n" ,
    5358:	ed8d 6b02 	vstr	d6, [sp, #8]
    535c:	ed8d 7b00 	vstr	d7, [sp]
    5360:	940a      	str	r4, [sp, #40]	; 0x28
    5362:	a80c      	add	r0, sp, #48	; 0x30
    5364:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    5366:	9409      	str	r4, [sp, #36]	; 0x24
    5368:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    536a:	9408      	str	r4, [sp, #32]
    536c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    536e:	9407      	str	r4, [sp, #28]
    5370:	6a1c      	ldr	r4, [r3, #32]
    5372:	9406      	str	r4, [sp, #24]
    5374:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    5376:	9405      	str	r4, [sp, #20]
    5378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    537a:	9304      	str	r3, [sp, #16]
    537c:	f016 f98a 	bl	1b694 <snprintf>
  usb.send(reply);
    5380:	a90c      	add	r1, sp, #48	; 0x30
    5382:	4803      	ldr	r0, [pc, #12]	; (5390 <UIrDist::sendStatusDistIR()+0x54>)
    5384:	f007 f8ca 	bl	c51c <UUSB::send(char const*)>
}
    5388:	b01c      	add	sp, #112	; 0x70
    538a:	bd10      	pop	{r4, pc}
    538c:	20005fb8 	.word	0x20005fb8
    5390:	2000eab8 	.word	0x2000eab8

00005394 <UIrDist::sendStatusDistIR2()>:
{
    5394:	4603      	mov	r3, r0
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %d\r\n" ,
    5396:	4a0f      	ldr	r2, [pc, #60]	; (53d4 <UIrDist::sendStatusDistIR2()+0x40>)
    5398:	2140      	movs	r1, #64	; 0x40
    539a:	ed93 6a06 	vldr	s12, [r3, #24]
    539e:	ed93 7a05 	vldr	s14, [r3, #20]
    53a2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    53a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    53aa:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %d\r\n" ,
    53ac:	7f1c      	ldrb	r4, [r3, #28]
{
    53ae:	b098      	sub	sp, #96	; 0x60
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %d\r\n" ,
    53b0:	ed8d 6b02 	vstr	d6, [sp, #8]
    53b4:	ed8d 7b00 	vstr	d7, [sp]
    53b8:	9406      	str	r4, [sp, #24]
    53ba:	a808      	add	r0, sp, #32
    53bc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    53be:	9405      	str	r4, [sp, #20]
    53c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    53c2:	9304      	str	r3, [sp, #16]
    53c4:	f016 f966 	bl	1b694 <snprintf>
  usb.send(reply);
    53c8:	a908      	add	r1, sp, #32
    53ca:	4803      	ldr	r0, [pc, #12]	; (53d8 <UIrDist::sendStatusDistIR2()+0x44>)
    53cc:	f007 f8a6 	bl	c51c <UUSB::send(char const*)>
}
    53d0:	b018      	add	sp, #96	; 0x60
    53d2:	bd10      	pop	{r4, pc}
    53d4:	20005fe4 	.word	0x20005fe4
    53d8:	2000eab8 	.word	0x2000eab8

000053dc <UIrDist::sendData(int)>:
  if (item == 0)
    53dc:	b111      	cbz	r1, 53e4 <UIrDist::sendData(int)+0x8>
  else if (item == 1)
    53de:	2901      	cmp	r1, #1
    53e0:	d002      	beq.n	53e8 <UIrDist::sendData(int)+0xc>
}
    53e2:	4770      	bx	lr
    sendStatusDistIR();
    53e4:	f7ff bfaa 	b.w	533c <UIrDist::sendStatusDistIR()>
    sendStatusDistIR2();
    53e8:	f7ff bfd4 	b.w	5394 <UIrDist::sendStatusDistIR2()>

000053ec <UIrDist::calibrateIr()>:
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    53ec:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
    float dri = float(d1-d2)/float(v1-v2);
    53f0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    53f2:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
    53f6:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
    float dri = float(d1-d2)/float(v1-v2);
    53fa:	ed9f 5a18 	vldr	s10, [pc, #96]	; 545c <UIrDist::calibrateIr()+0x70>
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    53fe:	eef8 4ae7 	vcvt.f32.s32	s9, s15
    5402:	ed9f 6a17 	vldr	s12, [pc, #92]	; 5460 <UIrDist::calibrateIr()+0x74>
    irA[i] = dri / 100.0; // inclination
    5406:	eddf 6a17 	vldr	s13, [pc, #92]	; 5464 <UIrDist::calibrateIr()+0x78>
    float dri = float(d1-d2)/float(v1-v2);
    540a:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    540e:	1a52      	subs	r2, r2, r1
    5410:	ee17 1a90 	vmov	r1, s15
    5414:	ee07 2a90 	vmov	s15, r2
    5418:	1a5b      	subs	r3, r3, r1
    541a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    541e:	ee07 3a90 	vmov	s15, r3
    5422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5426:	eec5 5a07 	vdiv.f32	s11, s10, s14
    542a:	ee85 7a27 	vdiv.f32	s14, s10, s15
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    542e:	eef0 7a46 	vmov.f32	s15, s12
    5432:	eee4 7a25 	vfma.f32	s15, s8, s11
    irA[i] = dri / 100.0; // inclination
    5436:	ee85 5aa6 	vdiv.f32	s10, s11, s13
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    543a:	eea4 6a87 	vfma.f32	s12, s9, s14
    irA[i] = dri / 100.0; // inclination
    543e:	eec7 5a26 	vdiv.f32	s11, s14, s13
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    5442:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    5446:	eec6 7a26 	vdiv.f32	s15, s12, s13
    irA[i] = dri / 100.0; // inclination
    544a:	ed80 5a0f 	vstr	s10, [r0, #60]	; 0x3c
    544e:	edc0 5a10 	vstr	s11, [r0, #64]	; 0x40
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    5452:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    5456:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
}
    545a:	4770      	bx	lr
    545c:	440e4000 	.word	0x440e4000
    5460:	c3480000 	.word	0xc3480000
    5464:	42c80000 	.word	0x42c80000

00005468 <UIrDist::decode(char const*)>:
{
    5468:	b530      	push	{r4, r5, lr}
    546a:	460c      	mov	r4, r1
    546c:	b083      	sub	sp, #12
    546e:	4605      	mov	r5, r0
  if (strncmp(buf, "iron ", 5) == 0)
    5470:	2205      	movs	r2, #5
    5472:	4937      	ldr	r1, [pc, #220]	; (5550 <UIrDist::decode(char const*)+0xe8>)
    5474:	4620      	mov	r0, r4
    5476:	f016 fbc5 	bl	1bc04 <strncmp>
    547a:	2800      	cmp	r0, #0
    547c:	d035      	beq.n	54ea <UIrDist::decode(char const*)+0x82>
  else if (strncmp(buf, "irc ", 4) == 0)
    547e:	2204      	movs	r2, #4
    5480:	4934      	ldr	r1, [pc, #208]	; (5554 <UIrDist::decode(char const*)+0xec>)
    5482:	4620      	mov	r0, r4
    5484:	f016 fbbe 	bl	1bc04 <strncmp>
    5488:	b110      	cbz	r0, 5490 <UIrDist::decode(char const*)+0x28>
    used = false;
    548a:	2000      	movs	r0, #0
}
    548c:	b003      	add	sp, #12
    548e:	bd30      	pop	{r4, r5, pc}
    char * p1 = (char *)&buf[4];
    5490:	1d20      	adds	r0, r4, #4
    irCal13cm[0] = strtol(p1, &p1, 10);
    5492:	220a      	movs	r2, #10
    5494:	a901      	add	r1, sp, #4
    char * p1 = (char *)&buf[4];
    5496:	9001      	str	r0, [sp, #4]
    irCal13cm[0] = strtol(p1, &p1, 10);
    5498:	f015 ff0c 	bl	1b2b4 <strtol>
    irCal50cm[0] = strtol(p1, &p1, 10);
    549c:	220a      	movs	r2, #10
    549e:	a901      	add	r1, sp, #4
    irCal13cm[0] = strtol(p1, &p1, 10);
    54a0:	6228      	str	r0, [r5, #32]
    irCal50cm[0] = strtol(p1, &p1, 10);
    54a2:	9801      	ldr	r0, [sp, #4]
    54a4:	f015 ff06 	bl	1b2b4 <strtol>
    irCal13cm[1] = strtol(p1, &p1, 10);
    54a8:	220a      	movs	r2, #10
    54aa:	a901      	add	r1, sp, #4
    irCal50cm[0] = strtol(p1, &p1, 10);
    54ac:	62a8      	str	r0, [r5, #40]	; 0x28
    irCal13cm[1] = strtol(p1, &p1, 10);
    54ae:	9801      	ldr	r0, [sp, #4]
    54b0:	f015 ff00 	bl	1b2b4 <strtol>
    irCal50cm[1] = strtol(p1, &p1, 10);
    54b4:	220a      	movs	r2, #10
    54b6:	a901      	add	r1, sp, #4
    irCal13cm[1] = strtol(p1, &p1, 10);
    54b8:	6268      	str	r0, [r5, #36]	; 0x24
    irCal50cm[1] = strtol(p1, &p1, 10);
    54ba:	9801      	ldr	r0, [sp, #4]
    54bc:	f015 fefa 	bl	1b2b4 <strtol>
    54c0:	4603      	mov	r3, r0
    setIRpower(strtol(p1, &p1, 10));
    54c2:	220a      	movs	r2, #10
    54c4:	a901      	add	r1, sp, #4
    54c6:	9801      	ldr	r0, [sp, #4]
    irCal50cm[1] = strtol(p1, &p1, 10);
    54c8:	62eb      	str	r3, [r5, #44]	; 0x2c
    setIRpower(strtol(p1, &p1, 10));
    54ca:	f015 fef3 	bl	1b2b4 <strtol>



void UIrDist::setIRpower(bool power)
{
  if (power and not useDistSensor)
    54ce:	b378      	cbz	r0, 5530 <UIrDist::decode(char const*)+0xc8>
    54d0:	7f2b      	ldrb	r3, [r5, #28]
    54d2:	b913      	cbnz	r3, 54da <UIrDist::decode(char const*)+0x72>
  { // initialize average filter
    initIrFilter = true;
    54d4:	2301      	movs	r3, #1
    54d6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  }
  useDistSensor = power;
    54da:	2101      	movs	r1, #1
				CORE_PIN36_PORTSET = CORE_PIN36_BITMASK;
    54dc:	4b1e      	ldr	r3, [pc, #120]	; (5558 <UIrDist::decode(char const*)+0xf0>)
    54de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    54e2:	7729      	strb	r1, [r5, #28]
    54e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    54e8:	e028      	b.n	553c <UIrDist::decode(char const*)+0xd4>
    const char * p1 = &buf[5];
    54ea:	1d60      	adds	r0, r4, #5
    uint8_t v = strtol(p1, (char**)&p1, 10);
    54ec:	220a      	movs	r2, #10
    54ee:	a901      	add	r1, sp, #4
    const char * p1 = &buf[5];
    54f0:	9001      	str	r0, [sp, #4]
    uint8_t v = strtol(p1, (char**)&p1, 10);
    54f2:	f015 fedf 	bl	1b2b4 <strtol>
  if (power and not useDistSensor)
    54f6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    54fa:	d00c      	beq.n	5516 <UIrDist::decode(char const*)+0xae>
    54fc:	7f2b      	ldrb	r3, [r5, #28]
    54fe:	b913      	cbnz	r3, 5506 <UIrDist::decode(char const*)+0x9e>
    initIrFilter = true;
    5500:	2301      	movs	r3, #1
    5502:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  useDistSensor = power;
    5506:	2101      	movs	r1, #1
    5508:	4b13      	ldr	r3, [pc, #76]	; (5558 <UIrDist::decode(char const*)+0xf0>)
    550a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    550e:	7729      	strb	r1, [r5, #28]
    5510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    5514:	e005      	b.n	5522 <UIrDist::decode(char const*)+0xba>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
    5516:	4b10      	ldr	r3, [pc, #64]	; (5558 <UIrDist::decode(char const*)+0xf0>)
    5518:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    551c:	7728      	strb	r0, [r5, #28]
    551e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    usb.send("# ir set\n");
    5522:	490e      	ldr	r1, [pc, #56]	; (555c <UIrDist::decode(char const*)+0xf4>)
    5524:	480e      	ldr	r0, [pc, #56]	; (5560 <UIrDist::decode(char const*)+0xf8>)
    5526:	f006 fff9 	bl	c51c <UUSB::send(char const*)>
  bool used = true;
    552a:	2001      	movs	r0, #1
}
    552c:	b003      	add	sp, #12
    552e:	bd30      	pop	{r4, r5, pc}
    5530:	4b09      	ldr	r3, [pc, #36]	; (5558 <UIrDist::decode(char const*)+0xf0>)
    5532:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  useDistSensor = power;
    5536:	7728      	strb	r0, [r5, #28]
    5538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    usb.send("# ir calibrate\n");      
    553c:	4909      	ldr	r1, [pc, #36]	; (5564 <UIrDist::decode(char const*)+0xfc>)
    553e:	4808      	ldr	r0, [pc, #32]	; (5560 <UIrDist::decode(char const*)+0xf8>)
    5540:	f006 ffec 	bl	c51c <UUSB::send(char const*)>
    calibrateIr();
    5544:	4628      	mov	r0, r5
    5546:	f7ff ff51 	bl	53ec <UIrDist::calibrateIr()>
  bool used = true;
    554a:	2001      	movs	r0, #1
}
    554c:	b003      	add	sp, #12
    554e:	bd30      	pop	{r4, r5, pc}
    5550:	20006098 	.word	0x20006098
    5554:	200060ac 	.word	0x200060ac
    5558:	42004000 	.word	0x42004000
    555c:	200060a0 	.word	0x200060a0
    5560:	2000eab8 	.word	0x2000eab8
    5564:	200060b4 	.word	0x200060b4

00005568 <UIrDist::eePromSave()>:


/////////////////////////////////////

void UIrDist::eePromSave()
{
    5568:	b510      	push	{r4, lr}
    556a:	4604      	mov	r4, r0
  uint8_t f = 0;
  if (useDistSensor) f = 1 << 0;
  eeConfig.pushByte(f);
    556c:	480a      	ldr	r0, [pc, #40]	; (5598 <UIrDist::eePromSave()+0x30>)
    556e:	7f21      	ldrb	r1, [r4, #28]
    5570:	f7fd fd56 	bl	3020 <EEConfig::pushByte(unsigned char)>
  eeConfig.pushWord(irCal13cm[0]);
    5574:	8c21      	ldrh	r1, [r4, #32]
    5576:	4808      	ldr	r0, [pc, #32]	; (5598 <UIrDist::eePromSave()+0x30>)
    5578:	f7fd fd6e 	bl	3058 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(irCal13cm[1]);
    557c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    557e:	4806      	ldr	r0, [pc, #24]	; (5598 <UIrDist::eePromSave()+0x30>)
    5580:	f7fd fd6a 	bl	3058 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(irCal50cm[0]);
    5584:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    5586:	4804      	ldr	r0, [pc, #16]	; (5598 <UIrDist::eePromSave()+0x30>)
    5588:	f7fd fd66 	bl	3058 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(irCal50cm[1]);
    558c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    558e:	4802      	ldr	r0, [pc, #8]	; (5598 <UIrDist::eePromSave()+0x30>)
}
    5590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eeConfig.pushWord(irCal50cm[1]);
    5594:	f7fd bd60 	b.w	3058 <EEConfig::pushWord(unsigned short)>
    5598:	2000dbe8 	.word	0x2000dbe8

0000559c <UIrDist::eePromLoad()>:
    return stringConfig;
    559c:	4b1d      	ldr	r3, [pc, #116]	; (5614 <UIrDist::eePromLoad()+0x78>)

/////////////////////////////////////

void UIrDist::eePromLoad()
{
  if (not eeConfig.isStringConfig())
    559e:	f893 2020 	ldrb.w	r2, [r3, #32]
    55a2:	b11a      	cbz	r2, 55ac <UIrDist::eePromLoad()+0x10>
    configAddr+=bytes;
    55a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    55a6:	3209      	adds	r2, #9
    55a8:	625a      	str	r2, [r3, #36]	; 0x24
    55aa:	4770      	bx	lr
{
    55ac:	b510      	push	{r4, lr}
    55ae:	4604      	mov	r4, r0
  {
    int f = eeConfig.readByte();
    55b0:	4618      	mov	r0, r3
    55b2:	f7fd fd81 	bl	30b8 <EEConfig::readByte()>
  if (power and not useDistSensor)
    55b6:	f010 0001 	ands.w	r0, r0, #1
    55ba:	d00c      	beq.n	55d6 <UIrDist::eePromLoad()+0x3a>
    55bc:	7f23      	ldrb	r3, [r4, #28]
    55be:	b913      	cbnz	r3, 55c6 <UIrDist::eePromLoad()+0x2a>
    initIrFilter = true;
    55c0:	2301      	movs	r3, #1
    55c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  useDistSensor = power;
    55c6:	2101      	movs	r1, #1
				CORE_PIN36_PORTSET = CORE_PIN36_BITMASK;
    55c8:	4b13      	ldr	r3, [pc, #76]	; (5618 <UIrDist::eePromLoad()+0x7c>)
    55ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    55ce:	7721      	strb	r1, [r4, #28]
    55d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    55d4:	e005      	b.n	55e2 <UIrDist::eePromLoad()+0x46>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
    55d6:	4b10      	ldr	r3, [pc, #64]	; (5618 <UIrDist::eePromLoad()+0x7c>)
    55d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    55dc:	7720      	strb	r0, [r4, #28]
    55de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    bool use = f & (1 << 0);
    setIRpower(use);
    // old calibration values - set default
    irCal13cm[0] = eeConfig.readWord();
    55e2:	480c      	ldr	r0, [pc, #48]	; (5614 <UIrDist::eePromLoad()+0x78>)
    55e4:	f7fd fd7c 	bl	30e0 <EEConfig::readWord()>
    55e8:	4603      	mov	r3, r0
    irCal13cm[1] = eeConfig.readWord();
    55ea:	480a      	ldr	r0, [pc, #40]	; (5614 <UIrDist::eePromLoad()+0x78>)
    irCal13cm[0] = eeConfig.readWord();
    55ec:	6223      	str	r3, [r4, #32]
    irCal13cm[1] = eeConfig.readWord();
    55ee:	f7fd fd77 	bl	30e0 <EEConfig::readWord()>
    55f2:	4603      	mov	r3, r0
    irCal50cm[0] = eeConfig.readWord();
    55f4:	4807      	ldr	r0, [pc, #28]	; (5614 <UIrDist::eePromLoad()+0x78>)
    irCal13cm[1] = eeConfig.readWord();
    55f6:	6263      	str	r3, [r4, #36]	; 0x24
    irCal50cm[0] = eeConfig.readWord();
    55f8:	f7fd fd72 	bl	30e0 <EEConfig::readWord()>
    55fc:	4603      	mov	r3, r0
    irCal50cm[1] = eeConfig.readWord();
    55fe:	4805      	ldr	r0, [pc, #20]	; (5614 <UIrDist::eePromLoad()+0x78>)
    irCal50cm[0] = eeConfig.readWord();
    5600:	62a3      	str	r3, [r4, #40]	; 0x28
    irCal50cm[1] = eeConfig.readWord();
    5602:	f7fd fd6d 	bl	30e0 <EEConfig::readWord()>
    5606:	4603      	mov	r3, r0
    calibrateIr();
    5608:	4620      	mov	r0, r4
    irCal50cm[1] = eeConfig.readWord();
    560a:	62e3      	str	r3, [r4, #44]	; 0x2c
  else
  { // skip the same number of bytes
    int skip = 1 + 4 * 2;
    eeConfig.skipAddr(skip);
  }
}
    560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calibrateIr();
    5610:	f7ff beec 	b.w	53ec <UIrDist::calibrateIr()>
    5614:	2000dbe8 	.word	0x2000dbe8
    5618:	42004000 	.word	0x42004000

0000561c <_GLOBAL__sub_I_irdist>:
}
    561c:	b510      	push	{r4, lr}
    561e:	4c10      	ldr	r4, [pc, #64]	; (5660 <_GLOBAL__sub_I_irdist+0x44>)
    5620:	4620      	mov	r0, r4
    5622:	f006 fd89 	bl	c138 <USubss::USubss()>
    5626:	4b0f      	ldr	r3, [pc, #60]	; (5664 <_GLOBAL__sub_I_irdist+0x48>)
    5628:	490f      	ldr	r1, [pc, #60]	; (5668 <_GLOBAL__sub_I_irdist+0x4c>)
    562a:	f104 0e20 	add.w	lr, r4, #32
    562e:	f103 0c08 	add.w	ip, r3, #8
    5632:	2201      	movs	r2, #1
    5634:	6021      	str	r1, [r4, #0]
    5636:	7722      	strb	r2, [r4, #28]
    5638:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
UIrDist irdist;
    563c:	4a0b      	ldr	r2, [pc, #44]	; (566c <_GLOBAL__sub_I_irdist+0x50>)
    563e:	e893 0003 	ldmia.w	r3, {r0, r1}
    5642:	f104 0328 	add.w	r3, r4, #40	; 0x28
    5646:	e88e 0003 	stmia.w	lr, {r0, r1}
    564a:	e89c 0003 	ldmia.w	ip, {r0, r1}
    564e:	e883 0003 	stmia.w	r3, {r0, r1}
    5652:	4620      	mov	r0, r4
    5654:	4906      	ldr	r1, [pc, #24]	; (5670 <_GLOBAL__sub_I_irdist+0x54>)
}
    5656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UIrDist irdist;
    565a:	f013 bc4d 	b.w	18ef8 <__aeabi_atexit>
    565e:	bf00      	nop
    5660:	2000e190 	.word	0x2000e190
    5664:	20001e4c 	.word	0x20001e4c
    5668:	20008064 	.word	0x20008064
    566c:	20008f08 	.word	0x20008f08
    5670:	000051cd 	.word	0x000051cd

00005674 <ULedBand::sendHelp()>:
  }
}


void ULedBand::sendHelp()
{
    5674:	b510      	push	{r4, lr}
  usb.send("# Leds -------\r\n");
    5676:	4c07      	ldr	r4, [pc, #28]	; (5694 <ULedBand::sendHelp()+0x20>)
    5678:	4907      	ldr	r1, [pc, #28]	; (5698 <ULedBand::sendHelp()+0x24>)
    567a:	4620      	mov	r0, r4
    567c:	f006 ff4e 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tleds N R G B\tSet LED N to this value (e.g. 14 128 25 254 (LED 14 to purple)\r\n");
    5680:	4906      	ldr	r1, [pc, #24]	; (569c <ULedBand::sendHelp()+0x28>)
    5682:	4620      	mov	r0, r4
    5684:	f006 ff4a 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tleda N M R G B\tSet LEDs from N through M to value (e.g. 14 16 128 25 254 (LED 14,15,16 to purple)\r\n");
    5688:	4620      	mov	r0, r4
    568a:	4905      	ldr	r1, [pc, #20]	; (56a0 <ULedBand::sendHelp()+0x2c>)
}
    568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tleda N M R G B\tSet LEDs from N through M to value (e.g. 14 16 128 25 254 (LED 14,15,16 to purple)\r\n");
    5690:	f006 bf44 	b.w	c51c <UUSB::send(char const*)>
    5694:	2000eab8 	.word	0x2000eab8
    5698:	200079cc 	.word	0x200079cc
    569c:	200079e0 	.word	0x200079e0
    56a0:	20007a34 	.word	0x20007a34

000056a4 <ULedBand::~ULedBand()>:
#include "usubss.h"
#include "main.h"



class ULedBand : public USubss
    56a4:	b510      	push	{r4, lr}
    56a6:	4b05      	ldr	r3, [pc, #20]	; (56bc <ULedBand::~ULedBand()+0x18>)
    56a8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    56aa:	6840      	ldr	r0, [r0, #4]
    56ac:	6023      	str	r3, [r4, #0]
	if (__p)
    56ae:	b118      	cbz	r0, 56b8 <ULedBand::~ULedBand()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    56b0:	68e1      	ldr	r1, [r4, #12]
    56b2:	1a09      	subs	r1, r1, r0
    56b4:	f011 f802 	bl	166bc <operator delete(void*, unsigned int)>
    56b8:	4620      	mov	r0, r4
    56ba:	bd10      	pop	{r4, pc}
    56bc:	2000802c 	.word	0x2000802c

000056c0 <ULedBand::decode(char const*)>:

bool ULedBand::decode(const char* cmd)
{ // no current commands
    56c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56c4:	460c      	mov	r4, r1
    56c6:	b082      	sub	sp, #8
  bool found = true;
  if (strncmp(cmd, "leds ", 5) == 0)
    56c8:	2205      	movs	r2, #5
    56ca:	4959      	ldr	r1, [pc, #356]	; (5830 <ULedBand::decode(char const*)+0x170>)
    56cc:	4620      	mov	r0, r4
    56ce:	f016 fa99 	bl	1bc04 <strncmp>
    56d2:	2800      	cmp	r0, #0
    56d4:	d060      	beq.n	5798 <ULedBand::decode(char const*)+0xd8>
    // const int MSL = 100;
    // char s[MSL];
    // snprintf(s, MSL, "# set LED %d to %d %d %d\r\n", n, r, g, b);
    // usb.send(s);
  }
  else if (strncmp(cmd, "leda ", 5) == 0)
    56d6:	2205      	movs	r2, #5
    56d8:	4956      	ldr	r1, [pc, #344]	; (5834 <ULedBand::decode(char const*)+0x174>)
    56da:	4620      	mov	r0, r4
    56dc:	f016 fa92 	bl	1bc04 <strncmp>
    56e0:	4605      	mov	r5, r0
    56e2:	b118      	cbz	r0, 56ec <ULedBand::decode(char const*)+0x2c>
    b = strtol(p1, (char**)&p1, 10);
    for (int i = n; i <= m; i++)
      leds.setPixel(i, r, g, b);
  }
  else
    found = false;
    56e4:	2000      	movs	r0, #0
  return found;
}
    56e6:	b002      	add	sp, #8
    56e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char * p1 = &cmd[5];
    56ec:	1d60      	adds	r0, r4, #5
    n = strtol(p1, (char**)&p1, 10);
    56ee:	220a      	movs	r2, #10
    56f0:	a901      	add	r1, sp, #4
    const char * p1 = &cmd[5];
    56f2:	9001      	str	r0, [sp, #4]
    n = strtol(p1, (char**)&p1, 10);
    56f4:	f015 fdde 	bl	1b2b4 <strtol>
    m = strtol(p1, (char**)&p1, 10);
    56f8:	220a      	movs	r2, #10
    56fa:	a901      	add	r1, sp, #4
    n = strtol(p1, (char**)&p1, 10);
    56fc:	4604      	mov	r4, r0
    m = strtol(p1, (char**)&p1, 10);
    56fe:	9801      	ldr	r0, [sp, #4]
    5700:	f015 fdd8 	bl	1b2b4 <strtol>
    r = strtol(p1, (char**)&p1, 10);
    5704:	220a      	movs	r2, #10
    m = strtol(p1, (char**)&p1, 10);
    5706:	4607      	mov	r7, r0
    r = strtol(p1, (char**)&p1, 10);
    5708:	a901      	add	r1, sp, #4
    570a:	9801      	ldr	r0, [sp, #4]
    570c:	f015 fdd2 	bl	1b2b4 <strtol>
    g = strtol(p1, (char**)&p1, 10);
    5710:	220a      	movs	r2, #10
    5712:	a901      	add	r1, sp, #4
    r = strtol(p1, (char**)&p1, 10);
    5714:	4606      	mov	r6, r0
    g = strtol(p1, (char**)&p1, 10);
    5716:	9801      	ldr	r0, [sp, #4]
    5718:	f015 fdcc 	bl	1b2b4 <strtol>
    b = strtol(p1, (char**)&p1, 10);
    571c:	a901      	add	r1, sp, #4
    g = strtol(p1, (char**)&p1, 10);
    571e:	4680      	mov	r8, r0
    b = strtol(p1, (char**)&p1, 10);
    5720:	220a      	movs	r2, #10
    5722:	9801      	ldr	r0, [sp, #4]
    5724:	f015 fdc6 	bl	1b2b4 <strtol>
    for (int i = n; i <= m; i++)
    5728:	42bc      	cmp	r4, r7
    572a:	dc31      	bgt.n	5790 <ULedBand::decode(char const*)+0xd0>
			drawBuffer[num+0] = color & 255;
			drawBuffer[num+1] = (color >> 8) & 255;
			drawBuffer[num+2] = (color >> 16) & 255;
		} else {
			num *= 4;
			drawBuffer[num+0] = color & 255;
    572c:	fa5f fc80 	uxtb.w	ip, r0
    5730:	4b41      	ldr	r3, [pc, #260]	; (5838 <ULedBand::decode(char const*)+0x178>)
			drawBuffer[num+1] = (color >> 8) & 255;
    5732:	fa5f fe88 	uxtb.w	lr, r8
    5736:	1c78      	adds	r0, r7, #1
			drawBuffer[num+2] = (color >> 16) & 255;
    5738:	b2f6      	uxtb	r6, r6
    573a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    573e:	00a2      	lsls	r2, r4, #2
    5740:	e00d      	b.n	575e <ULedBand::decode(char const*)+0x9e>
			drawBuffer[num+0] = color & 255;
    5742:	f807 c001 	strb.w	ip, [r7, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5746:	689f      	ldr	r7, [r3, #8]
    5748:	440f      	add	r7, r1
    574a:	f887 e001 	strb.w	lr, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    574e:	689f      	ldr	r7, [r3, #8]
    5750:	440f      	add	r7, r1
    5752:	70be      	strb	r6, [r7, #2]
    5754:	3401      	adds	r4, #1
    5756:	3103      	adds	r1, #3
    5758:	3204      	adds	r2, #4
    575a:	4284      	cmp	r4, r0
    575c:	d018      	beq.n	5790 <ULedBand::decode(char const*)+0xd0>
		if (num >= numled) return;
    575e:	881f      	ldrh	r7, [r3, #0]
    5760:	42bc      	cmp	r4, r7
    5762:	d2f7      	bcs.n	5754 <ULedBand::decode(char const*)+0x94>
		if (config < 6) {
    5764:	78df      	ldrb	r7, [r3, #3]
    5766:	2f05      	cmp	r7, #5
			drawBuffer[num+0] = color & 255;
    5768:	689f      	ldr	r7, [r3, #8]
		if (config < 6) {
    576a:	d9ea      	bls.n	5742 <ULedBand::decode(char const*)+0x82>
			drawBuffer[num+0] = color & 255;
    576c:	f807 c002 	strb.w	ip, [r7, r2]
    5770:	3401      	adds	r4, #1
			drawBuffer[num+1] = (color >> 8) & 255;
    5772:	689f      	ldr	r7, [r3, #8]
    5774:	3103      	adds	r1, #3
    5776:	4284      	cmp	r4, r0
    5778:	4417      	add	r7, r2
    577a:	f887 e001 	strb.w	lr, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    577e:	689f      	ldr	r7, [r3, #8]
    5780:	4417      	add	r7, r2
    5782:	70be      	strb	r6, [r7, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5784:	689f      	ldr	r7, [r3, #8]
    5786:	4417      	add	r7, r2
    5788:	f102 0204 	add.w	r2, r2, #4
    578c:	70fd      	strb	r5, [r7, #3]
    578e:	d1e6      	bne.n	575e <ULedBand::decode(char const*)+0x9e>
  bool found = true;
    5790:	2001      	movs	r0, #1
}
    5792:	b002      	add	sp, #8
    5794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char * p1 = &cmd[5];
    5798:	4605      	mov	r5, r0
    579a:	1d60      	adds	r0, r4, #5
    n = strtol(p1, (char**)&p1, 10);
    579c:	220a      	movs	r2, #10
    579e:	a901      	add	r1, sp, #4
    const char * p1 = &cmd[5];
    57a0:	9001      	str	r0, [sp, #4]
    n = strtol(p1, (char**)&p1, 10);
    57a2:	f015 fd87 	bl	1b2b4 <strtol>
    r = strtol(p1, (char**)&p1, 10);
    57a6:	220a      	movs	r2, #10
    57a8:	a901      	add	r1, sp, #4
    n = strtol(p1, (char**)&p1, 10);
    57aa:	4606      	mov	r6, r0
    r = strtol(p1, (char**)&p1, 10);
    57ac:	9801      	ldr	r0, [sp, #4]
    57ae:	f015 fd81 	bl	1b2b4 <strtol>
    g = strtol(p1, (char**)&p1, 10);
    57b2:	220a      	movs	r2, #10
    57b4:	a901      	add	r1, sp, #4
    r = strtol(p1, (char**)&p1, 10);
    57b6:	4604      	mov	r4, r0
    g = strtol(p1, (char**)&p1, 10);
    57b8:	9801      	ldr	r0, [sp, #4]
    57ba:	f015 fd7b 	bl	1b2b4 <strtol>
    b = strtol(p1, (char**)&p1, 10);
    57be:	220a      	movs	r2, #10
    57c0:	a901      	add	r1, sp, #4
    g = strtol(p1, (char**)&p1, 10);
    57c2:	4607      	mov	r7, r0
    b = strtol(p1, (char**)&p1, 10);
    57c4:	9801      	ldr	r0, [sp, #4]
    57c6:	f015 fd75 	bl	1b2b4 <strtol>
		if (num >= numled) return;
    57ca:	4a1b      	ldr	r2, [pc, #108]	; (5838 <ULedBand::decode(char const*)+0x178>)
    57cc:	8813      	ldrh	r3, [r2, #0]
    57ce:	429e      	cmp	r6, r3
    57d0:	d2de      	bcs.n	5790 <ULedBand::decode(char const*)+0xd0>
	}
	uint8_t getBrightness() {
		return brightness;
	}
	uint32_t Color(uint8_t red, uint8_t green, uint8_t blue) {
		return (red << 16) | (green << 8) | blue;
    57d2:	0423      	lsls	r3, r4, #16
		if (config < 6) {
    57d4:	78d1      	ldrb	r1, [r2, #3]
		return (red << 16) | (green << 8) | blue;
    57d6:	023f      	lsls	r7, r7, #8
    57d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    57dc:	b2c0      	uxtb	r0, r0
    57de:	b2bf      	uxth	r7, r7
		if (config < 6) {
    57e0:	2905      	cmp	r1, #5
		return (red << 16) | (green << 8) | blue;
    57e2:	ea43 0307 	orr.w	r3, r3, r7
    57e6:	ea43 0300 	orr.w	r3, r3, r0
		if (config < 6) {
    57ea:	d80d      	bhi.n	5808 <ULedBand::decode(char const*)+0x148>
			drawBuffer[num+0] = color & 255;
    57ec:	6891      	ldr	r1, [r2, #8]
			num *= 3;
    57ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
			drawBuffer[num+1] = (color >> 8) & 255;
    57f2:	0a18      	lsrs	r0, r3, #8
			drawBuffer[num+0] = color & 255;
    57f4:	558b      	strb	r3, [r1, r6]
			drawBuffer[num+2] = (color >> 16) & 255;
    57f6:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    57f8:	6891      	ldr	r1, [r2, #8]
    57fa:	4431      	add	r1, r6
    57fc:	7048      	strb	r0, [r1, #1]
  bool found = true;
    57fe:	2001      	movs	r0, #1
			drawBuffer[num+2] = (color >> 16) & 255;
    5800:	6892      	ldr	r2, [r2, #8]
    5802:	4432      	add	r2, r6
    5804:	7093      	strb	r3, [r2, #2]
    5806:	e7c4      	b.n	5792 <ULedBand::decode(char const*)+0xd2>
			drawBuffer[num+0] = color & 255;
    5808:	6891      	ldr	r1, [r2, #8]
			drawBuffer[num+1] = (color >> 8) & 255;
    580a:	0a18      	lsrs	r0, r3, #8
			drawBuffer[num+0] = color & 255;
    580c:	f801 3026 	strb.w	r3, [r1, r6, lsl #2]
			drawBuffer[num+2] = (color >> 16) & 255;
    5810:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5812:	6891      	ldr	r1, [r2, #8]
    5814:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    5818:	7048      	strb	r0, [r1, #1]
    581a:	2001      	movs	r0, #1
			drawBuffer[num+2] = (color >> 16) & 255;
    581c:	6891      	ldr	r1, [r2, #8]
    581e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    5822:	708b      	strb	r3, [r1, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5824:	6893      	ldr	r3, [r2, #8]
    5826:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    582a:	70dd      	strb	r5, [r3, #3]
    582c:	e7b1      	b.n	5792 <ULedBand::decode(char const*)+0xd2>
    582e:	bf00      	nop
    5830:	200079bc 	.word	0x200079bc
    5834:	200079c4 	.word	0x200079c4
    5838:	20009b78 	.word	0x20009b78

0000583c <ULedBand::setup()>:
{
    583c:	b538      	push	{r3, r4, r5, lr}
  leds.begin();
    583e:	4c25      	ldr	r4, [pc, #148]	; (58d4 <ULedBand::setup()+0x98>)
{
    5840:	4605      	mov	r5, r0
  leds.begin();
    5842:	4620      	mov	r0, r4
    5844:	f00f fbda 	bl	14ffc <WS2812Serial::begin()>
		brightness = n;
    5848:	23ff      	movs	r3, #255	; 0xff
  addPublistItem("leds", "get leds status 'leds N r g b r g b ...' (N=leds, r,g,b in hex)");
    584a:	4a23      	ldr	r2, [pc, #140]	; (58d8 <ULedBand::setup()+0x9c>)
    584c:	4628      	mov	r0, r5
    584e:	4923      	ldr	r1, [pc, #140]	; (58dc <ULedBand::setup()+0xa0>)
    5850:	7523      	strb	r3, [r4, #20]
    5852:	f006 fd95 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    5856:	4629      	mov	r1, r5
    5858:	4821      	ldr	r0, [pc, #132]	; (58e0 <ULedBand::setup()+0xa4>)
    585a:	f007 fa8b 	bl	cd74 <UUSB::addSubscriptionService(USubss*)>
    585e:	2200      	movs	r2, #0
    5860:	4611      	mov	r1, r2
  for(int i = 0; i < numled; i++)
    5862:	4613      	mov	r3, r2
			drawBuffer[num+0] = color & 255;
    5864:	4610      	mov	r0, r2
    5866:	e00f      	b.n	5888 <ULedBand::setup()+0x4c>
			drawBuffer[num+0] = color & 255;
    5868:	5468      	strb	r0, [r5, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    586a:	68a5      	ldr	r5, [r4, #8]
    586c:	eb05 0c01 	add.w	ip, r5, r1
    5870:	f88c 0001 	strb.w	r0, [ip, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5874:	68a5      	ldr	r5, [r4, #8]
    5876:	eb05 0c01 	add.w	ip, r5, r1
    587a:	f88c 0002 	strb.w	r0, [ip, #2]
    587e:	3301      	adds	r3, #1
    5880:	3103      	adds	r1, #3
    5882:	3204      	adds	r2, #4
    5884:	2b12      	cmp	r3, #18
    5886:	d01f      	beq.n	58c8 <ULedBand::setup()+0x8c>
		if (num >= numled) return;
    5888:	f8b4 c000 	ldrh.w	ip, [r4]
    588c:	459c      	cmp	ip, r3
    588e:	d9f6      	bls.n	587e <ULedBand::setup()+0x42>
		if (config < 6) {
    5890:	f894 c003 	ldrb.w	ip, [r4, #3]
			drawBuffer[num+0] = color & 255;
    5894:	68a5      	ldr	r5, [r4, #8]
		if (config < 6) {
    5896:	f1bc 0f05 	cmp.w	ip, #5
    589a:	d9e5      	bls.n	5868 <ULedBand::setup()+0x2c>
			drawBuffer[num+0] = color & 255;
    589c:	54a8      	strb	r0, [r5, r2]
    589e:	3301      	adds	r3, #1
			drawBuffer[num+1] = (color >> 8) & 255;
    58a0:	68a5      	ldr	r5, [r4, #8]
    58a2:	3103      	adds	r1, #3
    58a4:	2b12      	cmp	r3, #18
    58a6:	eb05 0c02 	add.w	ip, r5, r2
    58aa:	f88c 0001 	strb.w	r0, [ip, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    58ae:	68a5      	ldr	r5, [r4, #8]
    58b0:	eb05 0c02 	add.w	ip, r5, r2
    58b4:	f88c 0002 	strb.w	r0, [ip, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    58b8:	68a5      	ldr	r5, [r4, #8]
    58ba:	eb05 0c02 	add.w	ip, r5, r2
    58be:	f102 0204 	add.w	r2, r2, #4
    58c2:	f88c 0003 	strb.w	r0, [ip, #3]
    58c6:	d1df      	bne.n	5888 <ULedBand::setup()+0x4c>
  leds.show();
    58c8:	4802      	ldr	r0, [pc, #8]	; (58d4 <ULedBand::setup()+0x98>)
}
    58ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  leds.show();
    58ce:	f00f bc85 	b.w	151dc <WS2812Serial::show()>
    58d2:	bf00      	nop
    58d4:	20009b78 	.word	0x20009b78
    58d8:	20007974 	.word	0x20007974
    58dc:	200079b4 	.word	0x200079b4
    58e0:	2000eab8 	.word	0x2000eab8
    58e4:	00000000 	.word	0x00000000

000058e8 <ULedBand::tick()>:
  for (int i = 0; i < 8; i++)
    58e8:	f100 0c24 	add.w	ip, r0, #36	; 0x24
    58ec:	4a86      	ldr	r2, [pc, #536]	; (5b08 <ULedBand::tick()+0x220>)
    58ee:	f100 0144 	add.w	r1, r0, #68	; 0x44
{ //
    58f2:	4663      	mov	r3, ip
    58f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58f8:	b083      	sub	sp, #12
    line[i] += ls.lineSensorValue[i];
    58fa:	edd3 7a00 	vldr	s15, [r3]
    58fe:	ecb2 7a01 	vldmia	r2!, {s14}
    5902:	ee77 7a87 	vadd.f32	s15, s15, s14
    5906:	ece3 7a01 	vstmia	r3!, {s15}
  for (int i = 0; i < 8; i++)
    590a:	4299      	cmp	r1, r3
    590c:	d1f5      	bne.n	58fa <ULedBand::tick()+0x12>
  lineCnt++;
    590e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  gyroSumCnt++;
    5910:	6d41      	ldr	r1, [r0, #84]	; 0x54
    gyroSum[i] = imu2.gyro[i];
    5912:	4b7e      	ldr	r3, [pc, #504]	; (5b0c <ULedBand::tick()+0x224>)
  lineCnt++;
    5914:	3201      	adds	r2, #1
  gyroSumCnt++;
    5916:	3101      	adds	r1, #1
    gyroSum[i] = imu2.gyro[i];
    5918:	69dc      	ldr	r4, [r3, #28]
  gyroSumCnt++;
    591a:	6541      	str	r1, [r0, #84]	; 0x54
  lineCnt++;
    591c:	6442      	str	r2, [r0, #68]	; 0x44
	return systick_millis_count;
    591e:	497c      	ldr	r1, [pc, #496]	; (5b10 <ULedBand::tick()+0x228>)
    gyroSum[i] = imu2.gyro[i];
    5920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5922:	6484      	str	r4, [r0, #72]	; 0x48
    5924:	6502      	str	r2, [r0, #80]	; 0x50
    5926:	6a1c      	ldr	r4, [r3, #32]
  if (millis() > nextDisplayTime)
    5928:	69c2      	ldr	r2, [r0, #28]
    592a:	680b      	ldr	r3, [r1, #0]
    gyroSum[i] = imu2.gyro[i];
    592c:	64c4      	str	r4, [r0, #76]	; 0x4c
  if (millis() > nextDisplayTime)
    592e:	429a      	cmp	r2, r3
    5930:	d319      	bcc.n	5966 <ULedBand::tick()+0x7e>
      if (irdist.irDistance[i] < minIR[i])
    5932:	4b78      	ldr	r3, [pc, #480]	; (5b14 <ULedBand::tick()+0x22c>)
    5934:	ed90 7a16 	vldr	s14, [r0, #88]	; 0x58
    5938:	edd3 7a05 	vldr	s15, [r3, #20]
    593c:	eef4 7ac7 	vcmpe.f32	s15, s14
    5940:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
    5944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        minIR[i] = irdist.irDistance[i];
    5948:	bf48      	it	mi
    594a:	edc0 7a16 	vstrmi	s15, [r0, #88]	; 0x58
      if (irdist.irDistance[i] < minIR[i])
    594e:	edd3 7a06 	vldr	s15, [r3, #24]
    5952:	eef4 7ac7 	vcmpe.f32	s15, s14
    5956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    595a:	d501      	bpl.n	5960 <ULedBand::tick()+0x78>
        minIR[i] = irdist.irDistance[i];
    595c:	edc0 7a17 	vstr	s15, [r0, #92]	; 0x5c
}
    5960:	b003      	add	sp, #12
    5962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5966:	680b      	ldr	r3, [r1, #0]
    nextDisplayTime += 80;
    5968:	3250      	adds	r2, #80	; 0x50
    int a = abs(int((millis() % 2000) - 1000))/10; // 0..100 in 2 seconds
    596a:	496b      	ldr	r1, [pc, #428]	; (5b18 <ULedBand::tick()+0x230>)
    nextDisplayTime += 80;
    596c:	61c2      	str	r2, [r0, #28]
    int a = abs(int((millis() % 2000) - 1000))/10; // 0..100 in 2 seconds
    596e:	fba1 4103 	umull	r4, r1, r1, r3
    5972:	09ca      	lsrs	r2, r1, #7
    5974:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    5978:	fb01 3212 	mls	r2, r1, r2, r3
    597c:	4b67      	ldr	r3, [pc, #412]	; (5b1c <ULedBand::tick()+0x234>)
  void stopLogging(void);
  /**
  * Returns true if logger is logging and not full */
  inline bool loggerLogging() 
  {
    return toLog and not logFull;
    597e:	4968      	ldr	r1, [pc, #416]	; (5b20 <ULedBand::tick()+0x238>)
    5980:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
    5984:	2a00      	cmp	r2, #0
    5986:	bfb8      	it	lt
    5988:	4252      	neglt	r2, r2
    598a:	fba3 3202 	umull	r3, r2, r3, r2
    598e:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
    5992:	08d2      	lsrs	r2, r2, #3
    5994:	2b00      	cmp	r3, #0
    5996:	f040 8084 	bne.w	5aa2 <ULedBand::tick()+0x1ba>
		if (num >= numled) return;
    599a:	4b62      	ldr	r3, [pc, #392]	; (5b24 <ULedBand::tick()+0x23c>)
    599c:	f8b3 a000 	ldrh.w	sl, [r3]
    59a0:	f1ba 0f00 	cmp.w	sl, #0
    59a4:	d013      	beq.n	59ce <ULedBand::tick()+0xe6>
		return (red << 16) | (green << 8) | blue;
    59a6:	0211      	lsls	r1, r2, #8
    59a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    59ac:	430a      	orrs	r2, r1
		if (config < 6) {
    59ae:	78d9      	ldrb	r1, [r3, #3]
    59b0:	2905      	cmp	r1, #5
			drawBuffer[num+0] = color & 255;
    59b2:	6899      	ldr	r1, [r3, #8]
			drawBuffer[num+1] = (color >> 8) & 255;
    59b4:	ea4f 2412 	mov.w	r4, r2, lsr #8
			drawBuffer[num+0] = color & 255;
    59b8:	700a      	strb	r2, [r1, #0]
			drawBuffer[num+2] = (color >> 16) & 255;
    59ba:	ea4f 4212 	mov.w	r2, r2, lsr #16
			drawBuffer[num+1] = (color >> 8) & 255;
    59be:	6899      	ldr	r1, [r3, #8]
    59c0:	704c      	strb	r4, [r1, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    59c2:	6899      	ldr	r1, [r3, #8]
    59c4:	708a      	strb	r2, [r1, #2]
		if (config < 6) {
    59c6:	f200 8183 	bhi.w	5cd0 <ULedBand::tick()+0x3e8>
		if (num >= numled) return;
    59ca:	f8b3 a000 	ldrh.w	sl, [r3]
{ //
    59ce:	2505      	movs	r5, #5
    59d0:	2104      	movs	r1, #4
          leds.setPixel(i + 1, 0, 0, v *100);
    59d2:	ed9f 5a55 	vldr	s10, [pc, #340]	; 5b28 <ULedBand::tick()+0x240>
{ //
    59d6:	2203      	movs	r2, #3
    59d8:	46ab      	mov	fp, r5
    59da:	460f      	mov	r7, r1
    59dc:	f04f 0e01 	mov.w	lr, #1
    59e0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 5b30 <ULedBand::tick()+0x248>
			drawBuffer[num+1] = (color >> 8) & 255;
    59e4:	f04f 0800 	mov.w	r8, #0
      line[i] = 0;
    59e8:	eddf 5a50 	vldr	s11, [pc, #320]	; 5b2c <ULedBand::tick()+0x244>
        if (v > 0.8)
    59ec:	ed9f 4b44 	vldr	d4, [pc, #272]	; 5b00 <ULedBand::tick()+0x218>
    59f0:	e02c      	b.n	5a4c <ULedBand::tick()+0x164>
		if (num >= numled) return;
    59f2:	45f2      	cmp	sl, lr
    59f4:	d91a      	bls.n	5a2c <ULedBand::tick()+0x144>
          leds.setPixel(i + 1, 0, v * 100, 0);
    59f6:	ee27 7a05 	vmul.f32	s14, s14, s10
		if (config < 6) {
    59fa:	f893 a003 	ldrb.w	sl, [r3, #3]
    59fe:	f1ba 0f05 	cmp.w	sl, #5
    5a02:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    5a06:	edcd 7a01 	vstr	s15, [sp, #4]
		return (red << 16) | (green << 8) | blue;
    5a0a:	f89d 4004 	ldrb.w	r4, [sp, #4]
    5a0e:	ea4f 2404 	mov.w	r4, r4, lsl #8
			drawBuffer[num+1] = (color >> 8) & 255;
    5a12:	ea4f 2a14 	mov.w	sl, r4, lsr #8
			drawBuffer[num+0] = color & 255;
    5a16:	689c      	ldr	r4, [r3, #8]
		if (config < 6) {
    5a18:	f200 8134 	bhi.w	5c84 <ULedBand::tick()+0x39c>
			drawBuffer[num+0] = color & 255;
    5a1c:	f804 8002 	strb.w	r8, [r4, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5a20:	689c      	ldr	r4, [r3, #8]
    5a22:	f804 a007 	strb.w	sl, [r4, r7]
			drawBuffer[num+2] = (color >> 16) & 255;
    5a26:	689c      	ldr	r4, [r3, #8]
    5a28:	f804 800b 	strb.w	r8, [r4, fp]
    for (int i = 0; i < 8; i++)
    5a2c:	3203      	adds	r2, #3
    5a2e:	f10e 0e01 	add.w	lr, lr, #1
    5a32:	3703      	adds	r7, #3
    5a34:	f10b 0b03 	add.w	fp, fp, #3
    5a38:	2a1b      	cmp	r2, #27
    5a3a:	f101 0104 	add.w	r1, r1, #4
    5a3e:	f105 0504 	add.w	r5, r5, #4
      line[i] = 0;
    5a42:	ecec 5a01 	vstmia	ip!, {s11}
    for (int i = 0; i < 8; i++)
    5a46:	d075      	beq.n	5b34 <ULedBand::tick()+0x24c>
		if (num >= numled) return;
    5a48:	f8b3 a000 	ldrh.w	sl, [r3]
      if (ls.lineSensorOn)
    5a4c:	f899 403c 	ldrb.w	r4, [r9, #60]	; 0x3c
    5a50:	2c00      	cmp	r4, #0
    5a52:	d042      	beq.n	5ada <ULedBand::tick()+0x1f2>
        float v = line[i] / lineCnt;
    5a54:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
    5a58:	eddc 6a00 	vldr	s13, [ip]
    5a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        if (v > 0.8)
    5a64:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
    5a68:	eeb4 6bc4 	vcmpe.f64	d6, d4
    5a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a70:	dcbf      	bgt.n	59f2 <ULedBand::tick()+0x10a>
    5a72:	45f2      	cmp	sl, lr
    5a74:	d9da      	bls.n	5a2c <ULedBand::tick()+0x144>
          leds.setPixel(i + 1, 0, 0, v *100);
    5a76:	ee27 7a05 	vmul.f32	s14, s14, s10
		if (config < 6) {
    5a7a:	78dc      	ldrb	r4, [r3, #3]
    5a7c:	2c05      	cmp	r4, #5
			drawBuffer[num+0] = color & 255;
    5a7e:	689c      	ldr	r4, [r3, #8]
    5a80:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    5a84:	edcd 7a01 	vstr	s15, [sp, #4]
    5a88:	f89d a004 	ldrb.w	sl, [sp, #4]
		if (config < 6) {
    5a8c:	f200 8108 	bhi.w	5ca0 <ULedBand::tick()+0x3b8>
			drawBuffer[num+0] = color & 255;
    5a90:	f804 a002 	strb.w	sl, [r4, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5a94:	689c      	ldr	r4, [r3, #8]
    5a96:	f804 8007 	strb.w	r8, [r4, r7]
			drawBuffer[num+2] = (color >> 16) & 255;
    5a9a:	689c      	ldr	r4, [r3, #8]
    5a9c:	f804 800b 	strb.w	r8, [r4, fp]
    5aa0:	e7c4      	b.n	5a2c <ULedBand::tick()+0x144>
    5aa2:	f891 1055 	ldrb.w	r1, [r1, #85]	; 0x55
    5aa6:	2900      	cmp	r1, #0
    5aa8:	f47f af77 	bne.w	599a <ULedBand::tick()+0xb2>
		if (num >= numled) return;
    5aac:	4b1d      	ldr	r3, [pc, #116]	; (5b24 <ULedBand::tick()+0x23c>)
    5aae:	f8b3 a000 	ldrh.w	sl, [r3]
    5ab2:	f1ba 0f00 	cmp.w	sl, #0
    5ab6:	d08a      	beq.n	59ce <ULedBand::tick()+0xe6>
		if (config < 6) {
    5ab8:	78dc      	ldrb	r4, [r3, #3]
		return (red << 16) | (green << 8) | blue;
    5aba:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
		if (config < 6) {
    5abe:	2c05      	cmp	r4, #5
			drawBuffer[num+0] = color & 255;
    5ac0:	689c      	ldr	r4, [r3, #8]
    5ac2:	7022      	strb	r2, [r4, #0]
			drawBuffer[num+2] = (color >> 16) & 255;
    5ac4:	ea4f 4212 	mov.w	r2, r2, lsr #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5ac8:	689c      	ldr	r4, [r3, #8]
    5aca:	7061      	strb	r1, [r4, #1]
		if (config < 6) {
    5acc:	f200 816e 	bhi.w	5dac <ULedBand::tick()+0x4c4>
			drawBuffer[num+2] = (color >> 16) & 255;
    5ad0:	6899      	ldr	r1, [r3, #8]
		if (num >= numled) return;
    5ad2:	f8b3 a000 	ldrh.w	sl, [r3]
			drawBuffer[num+2] = (color >> 16) & 255;
    5ad6:	708a      	strb	r2, [r1, #2]
    5ad8:	e779      	b.n	59ce <ULedBand::tick()+0xe6>
		if (num >= numled) return;
    5ada:	45f2      	cmp	sl, lr
    5adc:	d9a6      	bls.n	5a2c <ULedBand::tick()+0x144>
		if (config < 6) {
    5ade:	f893 a003 	ldrb.w	sl, [r3, #3]
			drawBuffer[num+0] = color & 255;
    5ae2:	689e      	ldr	r6, [r3, #8]
		if (config < 6) {
    5ae4:	f1ba 0f05 	cmp.w	sl, #5
    5ae8:	f200 80e0 	bhi.w	5cac <ULedBand::tick()+0x3c4>
			drawBuffer[num+0] = color & 255;
    5aec:	54b4      	strb	r4, [r6, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5aee:	689e      	ldr	r6, [r3, #8]
    5af0:	55f4      	strb	r4, [r6, r7]
			drawBuffer[num+2] = (color >> 16) & 255;
    5af2:	689e      	ldr	r6, [r3, #8]
    5af4:	f806 400b 	strb.w	r4, [r6, fp]
    5af8:	e798      	b.n	5a2c <ULedBand::tick()+0x144>
    5afa:	bf00      	nop
    5afc:	f3af 8000 	nop.w
    5b00:	9999999a 	.word	0x9999999a
    5b04:	3fe99999 	.word	0x3fe99999
    5b08:	2000e40c 	.word	0x2000e40c
    5b0c:	2000cfd0 	.word	0x2000cfd0
    5b10:	2000eaac 	.word	0x2000eaac
    5b14:	2000e190 	.word	0x2000e190
    5b18:	10624dd3 	.word	0x10624dd3
    5b1c:	cccccccd 	.word	0xcccccccd
    5b20:	2000e240 	.word	0x2000e240
    5b24:	20009b78 	.word	0x20009b78
    5b28:	42c80000 	.word	0x42c80000
    5b2c:	00000000 	.word	0x00000000
    5b30:	2000e384 	.word	0x2000e384
      int v = int(gyroSum[i]/gyroSumCnt*30.0);
    5b34:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
    lineCnt = 0;
    5b38:	f04f 0c00 	mov.w	ip, #0
		if (num >= numled) return;
    5b3c:	881f      	ldrh	r7, [r3, #0]
    5b3e:	f100 0648 	add.w	r6, r0, #72	; 0x48
    5b42:	2524      	movs	r5, #36	; 0x24
    5b44:	2409      	movs	r4, #9
      gyroSum[i] = 0;
    5b46:	f04f 0e00 	mov.w	lr, #0
    lineCnt = 0;
    5b4a:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
      int v = int(gyroSum[i]/gyroSumCnt*30.0);
    5b4e:	edd0 7a15 	vldr	s15, [r0, #84]	; 0x54
    5b52:	ecf6 6a01 	vldmia	r6!, {s13}
    5b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      gyroSum[i] = 0;
    5b5a:	f846 ec04 	str.w	lr, [r6, #-4]
      int v = int(gyroSum[i]/gyroSumCnt*30.0);
    5b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    5b62:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    5b66:	ee27 7b05 	vmul.f64	d7, d7, d5
    5b6a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    5b6e:	ee17 1a90 	vmov	r1, s15
      if (v > 255)
    5b72:	29ff      	cmp	r1, #255	; 0xff
    5b74:	dc71      	bgt.n	5c5a <ULedBand::tick()+0x372>
      else if (v < -255)
    5b76:	f111 0fff 	cmn.w	r1, #255	; 0xff
    5b7a:	f280 80a5 	bge.w	5cc8 <ULedBand::tick()+0x3e0>
      gyroSum[i] = 0;
    5b7e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5b82:	42a7      	cmp	r7, r4
    5b84:	d910      	bls.n	5ba8 <ULedBand::tick()+0x2c0>
		if (config < 6) {
    5b86:	78df      	ldrb	r7, [r3, #3]
    5b88:	2f05      	cmp	r7, #5
			drawBuffer[num+0] = color & 255;
    5b8a:	689f      	ldr	r7, [r3, #8]
		if (config < 6) {
    5b8c:	d868      	bhi.n	5c60 <ULedBand::tick()+0x378>
			drawBuffer[num+0] = color & 255;
    5b8e:	f807 c002 	strb.w	ip, [r7, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5b92:	ea4f 2811 	mov.w	r8, r1, lsr #8
    5b96:	689f      	ldr	r7, [r3, #8]
			drawBuffer[num+2] = (color >> 16) & 255;
    5b98:	0c09      	lsrs	r1, r1, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5b9a:	4417      	add	r7, r2
    5b9c:	f887 8001 	strb.w	r8, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5ba0:	689f      	ldr	r7, [r3, #8]
    5ba2:	4417      	add	r7, r2
    5ba4:	70b9      	strb	r1, [r7, #2]
		if (num >= numled) return;
    5ba6:	881f      	ldrh	r7, [r3, #0]
    for (int i = 0; i < 3; i++)
    5ba8:	3401      	adds	r4, #1
    5baa:	3203      	adds	r2, #3
    5bac:	3504      	adds	r5, #4
    5bae:	2c0c      	cmp	r4, #12
    5bb0:	d1cd      	bne.n	5b4e <ULedBand::tick()+0x266>
    if (irdist.useDistSensor)
    5bb2:	4a9e      	ldr	r2, [pc, #632]	; (5e2c <ULedBand::tick()+0x544>)
    gyroSumCnt = 0;
    5bb4:	2100      	movs	r1, #0
    if (irdist.useDistSensor)
    5bb6:	7f12      	ldrb	r2, [r2, #28]
    gyroSumCnt = 0;
    5bb8:	6541      	str	r1, [r0, #84]	; 0x54
    if (irdist.useDistSensor)
    5bba:	2a00      	cmp	r2, #0
    5bbc:	f000 809b 	beq.w	5cf6 <ULedBand::tick()+0x40e>
        if (a > greenDist)
    5bc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        float a = minIR[i];
    5bc4:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
        if (a > greenDist)
    5bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
    5bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bd0:	f300 80b8 	bgt.w	5d44 <ULedBand::tick()+0x45c>
        else if (a < redDist)
    5bd4:	ed9f 7a96 	vldr	s14, [pc, #600]	; 5e30 <ULedBand::tick()+0x548>
    5bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
    5bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5be0:	d57a      	bpl.n	5cd8 <ULedBand::tick()+0x3f0>
    5be2:	2f0c      	cmp	r7, #12
    5be4:	d90b      	bls.n	5bfe <ULedBand::tick()+0x316>
		if (config < 6) {
    5be6:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+2] = (color >> 16) & 255;
    5be8:	2428      	movs	r4, #40	; 0x28
		if (config < 6) {
    5bea:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5bec:	689a      	ldr	r2, [r3, #8]
		if (config < 6) {
    5bee:	f200 810a 	bhi.w	5e06 <ULedBand::tick()+0x51e>
			drawBuffer[num+0] = color & 255;
    5bf2:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5bf6:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5bfa:	f882 4026 	strb.w	r4, [r2, #38]	; 0x26
        if (a > greenDist)
    5bfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        float a = minIR[i];
    5c02:	edd0 7a17 	vldr	s15, [r0, #92]	; 0x5c
        minIR[i] = 2.0;
    5c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
		if (num >= numled) return;
    5c0a:	8819      	ldrh	r1, [r3, #0]
        if (a > greenDist)
    5c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
        minIR[i] = 2.0;
    5c10:	6582      	str	r2, [r0, #88]	; 0x58
        if (a > greenDist)
    5c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c16:	f300 80a4 	bgt.w	5d62 <ULedBand::tick()+0x47a>
        else if (a < redDist)
    5c1a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 5e30 <ULedBand::tick()+0x548>
    5c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c26:	d57e      	bpl.n	5d26 <ULedBand::tick()+0x43e>
    5c28:	290d      	cmp	r1, #13
    5c2a:	d90d      	bls.n	5c48 <ULedBand::tick()+0x360>
		if (config < 6) {
    5c2c:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+2] = (color >> 16) & 255;
    5c2e:	2128      	movs	r1, #40	; 0x28
			drawBuffer[num+0] = color & 255;
    5c30:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5c32:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5c34:	f04f 0200 	mov.w	r2, #0
		if (config < 6) {
    5c38:	f200 80dc 	bhi.w	5df4 <ULedBand::tick()+0x50c>
			drawBuffer[num+0] = color & 255;
    5c3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			drawBuffer[num+1] = (color >> 8) & 255;
    5c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5c44:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
        minIR[i] = 2.0;
    5c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c4c:	65c3      	str	r3, [r0, #92]	; 0x5c
    leds.show();
    5c4e:	4879      	ldr	r0, [pc, #484]	; (5e34 <ULedBand::tick()+0x54c>)
}
    5c50:	b003      	add	sp, #12
    5c52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    leds.show();
    5c56:	f00f bac1 	b.w	151dc <WS2812Serial::show()>
      gyroSum[i] = 0;
    5c5a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    5c5e:	e790      	b.n	5b82 <ULedBand::tick()+0x29a>
			drawBuffer[num+0] = color & 255;
    5c60:	f807 c005 	strb.w	ip, [r7, r5]
			drawBuffer[num+1] = (color >> 8) & 255;
    5c64:	ea4f 2811 	mov.w	r8, r1, lsr #8
    5c68:	689f      	ldr	r7, [r3, #8]
			drawBuffer[num+2] = (color >> 16) & 255;
    5c6a:	0c09      	lsrs	r1, r1, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5c6c:	442f      	add	r7, r5
    5c6e:	f887 8001 	strb.w	r8, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5c72:	689f      	ldr	r7, [r3, #8]
    5c74:	442f      	add	r7, r5
    5c76:	70b9      	strb	r1, [r7, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5c78:	6899      	ldr	r1, [r3, #8]
    5c7a:	4429      	add	r1, r5
    5c7c:	f881 c003 	strb.w	ip, [r1, #3]
		if (num >= numled) return;
    5c80:	881f      	ldrh	r7, [r3, #0]
    5c82:	e791      	b.n	5ba8 <ULedBand::tick()+0x2c0>
			drawBuffer[num+0] = color & 255;
    5c84:	f804 8001 	strb.w	r8, [r4, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5c88:	689c      	ldr	r4, [r3, #8]
    5c8a:	f804 a005 	strb.w	sl, [r4, r5]
			drawBuffer[num+2] = (color >> 16) & 255;
    5c8e:	689c      	ldr	r4, [r3, #8]
    5c90:	440c      	add	r4, r1
    5c92:	f884 8002 	strb.w	r8, [r4, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5c96:	689c      	ldr	r4, [r3, #8]
    5c98:	440c      	add	r4, r1
    5c9a:	f884 8003 	strb.w	r8, [r4, #3]
    5c9e:	e6c5      	b.n	5a2c <ULedBand::tick()+0x144>
			drawBuffer[num+0] = color & 255;
    5ca0:	f804 a001 	strb.w	sl, [r4, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5ca4:	689c      	ldr	r4, [r3, #8]
    5ca6:	f804 8005 	strb.w	r8, [r4, r5]
    5caa:	e7f0      	b.n	5c8e <ULedBand::tick()+0x3a6>
			drawBuffer[num+0] = color & 255;
    5cac:	5474      	strb	r4, [r6, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5cae:	689e      	ldr	r6, [r3, #8]
    5cb0:	5574      	strb	r4, [r6, r5]
			drawBuffer[num+2] = (color >> 16) & 255;
    5cb2:	689e      	ldr	r6, [r3, #8]
    5cb4:	eb06 0a01 	add.w	sl, r6, r1
    5cb8:	f88a 4002 	strb.w	r4, [sl, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5cbc:	689e      	ldr	r6, [r3, #8]
    5cbe:	eb06 0a01 	add.w	sl, r6, r1
    5cc2:	f88a 4003 	strb.w	r4, [sl, #3]
    5cc6:	e6b1      	b.n	5a2c <ULedBand::tick()+0x144>
      if (v < 0)
    5cc8:	2900      	cmp	r1, #0
    5cca:	db29      	blt.n	5d20 <ULedBand::tick()+0x438>
		return (red << 16) | (green << 8) | blue;
    5ccc:	0209      	lsls	r1, r1, #8
    5cce:	e758      	b.n	5b82 <ULedBand::tick()+0x29a>
			drawBuffer[num+3] = (color >> 24) & 255;
    5cd0:	2100      	movs	r1, #0
    5cd2:	689a      	ldr	r2, [r3, #8]
    5cd4:	70d1      	strb	r1, [r2, #3]
    5cd6:	e678      	b.n	59ca <ULedBand::tick()+0xe2>
		if (num >= numled) return;
    5cd8:	2f0c      	cmp	r7, #12
    5cda:	d990      	bls.n	5bfe <ULedBand::tick()+0x316>
		if (config < 6) {
    5cdc:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+1] = (color >> 8) & 255;
    5cde:	2414      	movs	r4, #20
		if (config < 6) {
    5ce0:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5ce2:	689a      	ldr	r2, [r3, #8]
		if (config < 6) {
    5ce4:	f200 8098 	bhi.w	5e18 <ULedBand::tick()+0x530>
			drawBuffer[num+0] = color & 255;
    5ce8:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5cec:	f882 4025 	strb.w	r4, [r2, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5cf0:	f882 4026 	strb.w	r4, [r2, #38]	; 0x26
    5cf4:	e783      	b.n	5bfe <ULedBand::tick()+0x316>
		if (num >= numled) return;
    5cf6:	2f0c      	cmp	r7, #12
    5cf8:	d9a9      	bls.n	5c4e <ULedBand::tick()+0x366>
		if (config < 6) {
    5cfa:	78d9      	ldrb	r1, [r3, #3]
			drawBuffer[num+0] = color & 255;
    5cfc:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5cfe:	2905      	cmp	r1, #5
    5d00:	d840      	bhi.n	5d84 <ULedBand::tick()+0x49c>
		if (num >= numled) return;
    5d02:	2f0d      	cmp	r7, #13
			drawBuffer[num+0] = color & 255;
    5d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5d0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		if (num >= numled) return;
    5d10:	d09d      	beq.n	5c4e <ULedBand::tick()+0x366>
			drawBuffer[num+0] = color & 255;
    5d12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			drawBuffer[num+1] = (color >> 8) & 255;
    5d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5d1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    5d1e:	e796      	b.n	5c4e <ULedBand::tick()+0x366>
        g = -v;
    5d20:	4249      	negs	r1, r1
		return (red << 16) | (green << 8) | blue;
    5d22:	0409      	lsls	r1, r1, #16
        v = 0;
    5d24:	e72d      	b.n	5b82 <ULedBand::tick()+0x29a>
		if (num >= numled) return;
    5d26:	290d      	cmp	r1, #13
    5d28:	d98e      	bls.n	5c48 <ULedBand::tick()+0x360>
		if (config < 6) {
    5d2a:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+0] = color & 255;
    5d2c:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5d2e:	2a05      	cmp	r2, #5
    5d30:	d855      	bhi.n	5dde <ULedBand::tick()+0x4f6>
			drawBuffer[num+1] = (color >> 8) & 255;
    5d32:	2214      	movs	r2, #20
			drawBuffer[num+0] = color & 255;
    5d34:	2100      	movs	r1, #0
			drawBuffer[num+1] = (color >> 8) & 255;
    5d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5d3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			drawBuffer[num+0] = color & 255;
    5d3e:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
			drawBuffer[num+2] = (color >> 16) & 255;
    5d42:	e781      	b.n	5c48 <ULedBand::tick()+0x360>
		if (num >= numled) return;
    5d44:	2f0c      	cmp	r7, #12
    5d46:	f67f af5a 	bls.w	5bfe <ULedBand::tick()+0x316>
		if (config < 6) {
    5d4a:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+1] = (color >> 8) & 255;
    5d4c:	2414      	movs	r4, #20
		if (config < 6) {
    5d4e:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5d50:	689a      	ldr	r2, [r3, #8]
		if (config < 6) {
    5d52:	d83b      	bhi.n	5dcc <ULedBand::tick()+0x4e4>
			drawBuffer[num+0] = color & 255;
    5d54:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5d58:	f882 4025 	strb.w	r4, [r2, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5d5c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    5d60:	e74d      	b.n	5bfe <ULedBand::tick()+0x316>
		if (num >= numled) return;
    5d62:	290d      	cmp	r1, #13
    5d64:	f67f af70 	bls.w	5c48 <ULedBand::tick()+0x360>
		if (config < 6) {
    5d68:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+1] = (color >> 8) & 255;
    5d6a:	2114      	movs	r1, #20
			drawBuffer[num+0] = color & 255;
    5d6c:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5d6e:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5d70:	f04f 0200 	mov.w	r2, #0
		if (config < 6) {
    5d74:	d821      	bhi.n	5dba <ULedBand::tick()+0x4d2>
			drawBuffer[num+0] = color & 255;
    5d76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			drawBuffer[num+2] = (color >> 16) & 255;
    5d7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			drawBuffer[num+1] = (color >> 8) & 255;
    5d7e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5d82:	e761      	b.n	5c48 <ULedBand::tick()+0x360>
		if (num >= numled) return;
    5d84:	2f0d      	cmp	r7, #13
			drawBuffer[num+0] = color & 255;
    5d86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5d8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5d8e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5d92:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		if (num >= numled) return;
    5d96:	f43f af5a 	beq.w	5c4e <ULedBand::tick()+0x366>
			drawBuffer[num+0] = color & 255;
    5d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			drawBuffer[num+1] = (color >> 8) & 255;
    5d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			drawBuffer[num+2] = (color >> 16) & 255;
    5da2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			drawBuffer[num+3] = (color >> 24) & 255;
    5da6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    5daa:	e750      	b.n	5c4e <ULedBand::tick()+0x366>
			drawBuffer[num+2] = (color >> 16) & 255;
    5dac:	689c      	ldr	r4, [r3, #8]
    5dae:	70a2      	strb	r2, [r4, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5db0:	689a      	ldr	r2, [r3, #8]
    5db2:	70d1      	strb	r1, [r2, #3]
		if (num >= numled) return;
    5db4:	f8b3 a000 	ldrh.w	sl, [r3]
    5db8:	e609      	b.n	59ce <ULedBand::tick()+0xe6>
			drawBuffer[num+0] = color & 255;
    5dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			drawBuffer[num+2] = (color >> 16) & 255;
    5dbe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			drawBuffer[num+1] = (color >> 8) & 255;
    5dc2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
			drawBuffer[num+3] = (color >> 24) & 255;
    5dc6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    5dca:	e73d      	b.n	5c48 <ULedBand::tick()+0x360>
			drawBuffer[num+0] = color & 255;
    5dcc:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5dd0:	f882 4031 	strb.w	r4, [r2, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5dd4:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5dd8:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    5ddc:	e70f      	b.n	5bfe <ULedBand::tick()+0x316>
			drawBuffer[num+0] = color & 255;
    5dde:	2100      	movs	r1, #0
			drawBuffer[num+1] = (color >> 8) & 255;
    5de0:	2214      	movs	r2, #20
			drawBuffer[num+0] = color & 255;
    5de2:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			drawBuffer[num+3] = (color >> 24) & 255;
    5de6:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
			drawBuffer[num+1] = (color >> 8) & 255;
    5dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			drawBuffer[num+2] = (color >> 16) & 255;
    5dee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			drawBuffer[num+3] = (color >> 24) & 255;
    5df2:	e729      	b.n	5c48 <ULedBand::tick()+0x360>
			drawBuffer[num+0] = color & 255;
    5df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			drawBuffer[num+1] = (color >> 8) & 255;
    5df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			drawBuffer[num+2] = (color >> 16) & 255;
    5dfc:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
			drawBuffer[num+3] = (color >> 24) & 255;
    5e00:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    5e04:	e720      	b.n	5c48 <ULedBand::tick()+0x360>
			drawBuffer[num+0] = color & 255;
    5e06:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5e0a:	f882 1031 	strb.w	r1, [r2, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5e0e:	f882 4032 	strb.w	r4, [r2, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5e12:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    5e16:	e6f2      	b.n	5bfe <ULedBand::tick()+0x316>
			drawBuffer[num+0] = color & 255;
    5e18:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5e1c:	f882 4031 	strb.w	r4, [r2, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5e20:	f882 4032 	strb.w	r4, [r2, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5e24:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    5e28:	e6e9      	b.n	5bfe <ULedBand::tick()+0x316>
    5e2a:	bf00      	nop
    5e2c:	2000e190 	.word	0x2000e190
    5e30:	3e051eb8 	.word	0x3e051eb8
    5e34:	20009b78 	.word	0x20009b78

00005e38 <ULedBand::setPixel(int, int, int, int)>:
		if (num >= numled) return;
    5e38:	481c      	ldr	r0, [pc, #112]	; (5eac <ULedBand::setPixel(int, int, int, int)+0x74>)
    5e3a:	f8b0 c000 	ldrh.w	ip, [r0]
    5e3e:	4561      	cmp	r1, ip
    5e40:	d233      	bcs.n	5eaa <ULedBand::setPixel(int, int, int, int)+0x72>
		return (red << 16) | (green << 8) | blue;
    5e42:	021b      	lsls	r3, r3, #8
    5e44:	f8dd c000 	ldr.w	ip, [sp]
    5e48:	0412      	lsls	r2, r2, #16
    5e4a:	fa5f fc8c 	uxtb.w	ip, ip
    5e4e:	b29b      	uxth	r3, r3
    5e50:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    5e54:	ea43 030c 	orr.w	r3, r3, ip
    5e58:	4313      	orrs	r3, r2
		if (config < 6) {
    5e5a:	78c2      	ldrb	r2, [r0, #3]
    5e5c:	2a05      	cmp	r2, #5
    5e5e:	d80e      	bhi.n	5e7e <ULedBand::setPixel(int, int, int, int)+0x46>
			drawBuffer[num+0] = color & 255;
    5e60:	6882      	ldr	r2, [r0, #8]
			num *= 3;
    5e62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
			drawBuffer[num+1] = (color >> 8) & 255;
    5e66:	ea4f 2c13 	mov.w	ip, r3, lsr #8
			drawBuffer[num+0] = color & 255;
    5e6a:	5453      	strb	r3, [r2, r1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5e6c:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5e6e:	6882      	ldr	r2, [r0, #8]
    5e70:	440a      	add	r2, r1
    5e72:	f882 c001 	strb.w	ip, [r2, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5e76:	6882      	ldr	r2, [r0, #8]
    5e78:	4411      	add	r1, r2
    5e7a:	708b      	strb	r3, [r1, #2]
    5e7c:	4770      	bx	lr
			drawBuffer[num+0] = color & 255;
    5e7e:	6882      	ldr	r2, [r0, #8]
			drawBuffer[num+1] = (color >> 8) & 255;
    5e80:	ea4f 2c13 	mov.w	ip, r3, lsr #8
			drawBuffer[num+0] = color & 255;
    5e84:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
			drawBuffer[num+2] = (color >> 16) & 255;
    5e88:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5e8a:	6882      	ldr	r2, [r0, #8]
    5e8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5e90:	f882 c001 	strb.w	ip, [r2, #1]
			drawBuffer[num+3] = (color >> 24) & 255;
    5e94:	f04f 0c00 	mov.w	ip, #0
			drawBuffer[num+2] = (color >> 16) & 255;
    5e98:	6882      	ldr	r2, [r0, #8]
    5e9a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5e9e:	7093      	strb	r3, [r2, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5ea0:	6883      	ldr	r3, [r0, #8]
    5ea2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5ea6:	f883 c003 	strb.w	ip, [r3, #3]
}

void ULedBand::setPixel(int n, int r, int g, int b)
{
  leds.setPixel(n, r, g, b);
}
    5eaa:	4770      	bx	lr
    5eac:	20009b78 	.word	0x20009b78

00005eb0 <ULedBand::sendLedsData()>:


void ULedBand::sendLedsData()
{
    5eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5eb4:	f5ad 6dbd 	sub.w	sp, sp, #1512	; 0x5e8
  const int MRL = 1500;
  char reply[MRL];
  snprintf(reply, MRL, "leds %d ", numled);
    5eb8:	2312      	movs	r3, #18
    5eba:	4a1b      	ldr	r2, [pc, #108]	; (5f28 <ULedBand::sendLedsData()+0x78>)
    5ebc:	f240 51dc 	movw	r1, #1500	; 0x5dc
    5ec0:	a803      	add	r0, sp, #12
    5ec2:	4c1a      	ldr	r4, [pc, #104]	; (5f2c <ULedBand::sendLedsData()+0x7c>)
    5ec4:	f015 fbe6 	bl	1b694 <snprintf>
  int n = strlen(reply);
    5ec8:	a803      	add	r0, sp, #12
    5eca:	f017 f959 	bl	1d180 <strlen>
  char * p1 = &reply[n];
    5ece:	ab03      	add	r3, sp, #12
  for (int l = 0; l < numled; l++)
  {
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5ed0:	f240 58dc 	movw	r8, #1500	; 0x5dc
  int n = strlen(reply);
    5ed4:	4605      	mov	r5, r0
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5ed6:	f8df a060 	ldr.w	sl, [pc, #96]	; 5f38 <ULedBand::sendLedsData()+0x88>
    5eda:	f104 0936 	add.w	r9, r4, #54	; 0x36
  char * p1 = &reply[n];
    5ede:	181e      	adds	r6, r3, r0
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5ee0:	f894 c000 	ldrb.w	ip, [r4]
    5ee4:	eba8 0105 	sub.w	r1, r8, r5
    5ee8:	7867      	ldrb	r7, [r4, #1]
    5eea:	4652      	mov	r2, sl
    5eec:	78a3      	ldrb	r3, [r4, #2]
    5eee:	4630      	mov	r0, r6
  for (int l = 0; l < numled; l++)
    5ef0:	3403      	adds	r4, #3
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5ef2:	e9cd 7c00 	strd	r7, ip, [sp]
    5ef6:	f015 fbcd 	bl	1b694 <snprintf>
             drawingMemory[l*BytePerLed+BytePerLed-1],
             drawingMemory[l*BytePerLed+BytePerLed-2],
             drawingMemory[l*BytePerLed+BytePerLed-3]);
    n += strlen(p1);
    5efa:	4630      	mov	r0, r6
    5efc:	f017 f940 	bl	1d180 <strlen>
    p1 = &reply[n];
    5f00:	ab03      	add	r3, sp, #12
    n += strlen(p1);
    5f02:	4405      	add	r5, r0
  for (int l = 0; l < numled; l++)
    5f04:	45a1      	cmp	r9, r4
    p1 = &reply[n];
    5f06:	eb03 0605 	add.w	r6, r3, r5
  for (int l = 0; l < numled; l++)
    5f0a:	d1e9      	bne.n	5ee0 <ULedBand::sendLedsData()+0x30>
  }
  snprintf(p1, MRL - n, "\r\n");
    5f0c:	4a08      	ldr	r2, [pc, #32]	; (5f30 <ULedBand::sendLedsData()+0x80>)
    5f0e:	eba8 0105 	sub.w	r1, r8, r5
    5f12:	4630      	mov	r0, r6
    5f14:	f015 fbbe 	bl	1b694 <snprintf>
  usb.send(reply);
    5f18:	a903      	add	r1, sp, #12
    5f1a:	4806      	ldr	r0, [pc, #24]	; (5f34 <ULedBand::sendLedsData()+0x84>)
    5f1c:	f006 fafe 	bl	c51c <UUSB::send(char const*)>
}
    5f20:	f50d 6dbd 	add.w	sp, sp, #1512	; 0x5e8
    5f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f28:	20007954 	.word	0x20007954
    5f2c:	2000dbb0 	.word	0x2000dbb0
    5f30:	20004cf4 	.word	0x20004cf4
    5f34:	2000eab8 	.word	0x2000eab8
    5f38:	20007960 	.word	0x20007960

00005f3c <ULedBand::sendData(int)>:
  if (item == 0)
    5f3c:	b101      	cbz	r1, 5f40 <ULedBand::sendData(int)+0x4>
}
    5f3e:	4770      	bx	lr
    sendLedsData();
    5f40:	f7ff bfb6 	b.w	5eb0 <ULedBand::sendLedsData()>

00005f44 <_GLOBAL__sub_I_ledband>:
}

void ULedBand::eePromSave()
{
  // eeConfig.pushWord(deviceID);
}
    5f44:	b538      	push	{r3, r4, r5, lr}
    5f46:	4c0e      	ldr	r4, [pc, #56]	; (5f80 <_GLOBAL__sub_I_ledband+0x3c>)
    5f48:	2500      	movs	r5, #0
    5f4a:	4620      	mov	r0, r4
    5f4c:	f006 f8f4 	bl	c138 <USubss::USubss()>
    5f50:	4b0c      	ldr	r3, [pc, #48]	; (5f84 <_GLOBAL__sub_I_ledband+0x40>)
    5f52:	4629      	mov	r1, r5
    5f54:	2220      	movs	r2, #32
    5f56:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5f5a:	6023      	str	r3, [r4, #0]
    5f5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    5f60:	e9c4 5507 	strd	r5, r5, [r4, #28]
    5f64:	f015 fd68 	bl	1ba38 <memset>
ULedBand ledband;
    5f68:	4620      	mov	r0, r4
    5f6a:	6565      	str	r5, [r4, #84]	; 0x54
    5f6c:	4a06      	ldr	r2, [pc, #24]	; (5f88 <_GLOBAL__sub_I_ledband+0x44>)
    5f6e:	4907      	ldr	r1, [pc, #28]	; (5f8c <_GLOBAL__sub_I_ledband+0x48>)
    5f70:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    5f74:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
}
    5f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
ULedBand ledband;
    5f7c:	f012 bfbc 	b.w	18ef8 <__aeabi_atexit>
    5f80:	2000e1e0 	.word	0x2000e1e0
    5f84:	200080dc 	.word	0x200080dc
    5f88:	20008f08 	.word	0x20008f08
    5f8c:	000056a5 	.word	0x000056a5

00005f90 <ULineSensor::decode(char const*)>:
  addPublistItem("lip", "Get line-sensor position 'lip left right valid validCnt crossing crossingCnt'");
  usb.addSubscriptionService(this);
}

bool ULineSensor::decode(const char* buf)
{
    5f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f94:	460c      	mov	r4, r1
    5f96:	4605      	mov	r5, r0
  bool used = true;
  // is for the line sensor
  if (strncmp(buf, "lip ", 4) == 0)
    5f98:	2204      	movs	r2, #4
    5f9a:	499e      	ldr	r1, [pc, #632]	; (6214 <ULineSensor::decode(char const*)+0x284>)
    5f9c:	4620      	mov	r0, r4
{
    5f9e:	ed2d 8b02 	vpush	{d8}
    5fa2:	b082      	sub	sp, #8
  if (strncmp(buf, "lip ", 4) == 0)
    5fa4:	f015 fe2e 	bl	1bc04 <strncmp>
    5fa8:	2800      	cmp	r0, #0
    5faa:	f000 80a4 	beq.w	60f6 <ULineSensor::decode(char const*)+0x166>
      lineValidThreshold = strtof(p1, &p1);
    if (strlen(p1) > 2)
      crossingThreshold = strtof(p1, &p1);
    //usb.send("# got a lip\n");
  }
  else if (strncmp(buf, "litw ", 5) == 0 and strlen(buf) > 19)
    5fae:	2205      	movs	r2, #5
    5fb0:	4999      	ldr	r1, [pc, #612]	; (6218 <ULineSensor::decode(char const*)+0x288>)
    5fb2:	4620      	mov	r0, r4
    5fb4:	f015 fe26 	bl	1bc04 <strncmp>
    5fb8:	bba0      	cbnz	r0, 6024 <ULineSensor::decode(char const*)+0x94>
    5fba:	4620      	mov	r0, r4
    5fbc:	f017 f8e0 	bl	1d180 <strlen>
    5fc0:	2813      	cmp	r0, #19
    5fc2:	d92f      	bls.n	6024 <ULineSensor::decode(char const*)+0x94>
  { // calibrate white from provided values
    const char * p1 = &buf[5];
    5fc4:	1d60      	adds	r0, r4, #5
    5fc6:	f105 073e 	add.w	r7, r5, #62	; 0x3e
    5fca:	f105 0860 	add.w	r8, r5, #96	; 0x60
    {
      int16_t v = strtol(p1, (char **)&p1, 10);
      if (blackLevel[i] >= v)
        v = blackLevel[i] + 1;
      whiteLevel[i] = v;
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    5fce:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
    5fd2:	354e      	adds	r5, #78	; 0x4e
    5fd4:	ae01      	add	r6, sp, #4
    const char * p1 = &buf[5];
    5fd6:	9001      	str	r0, [sp, #4]
    for (int i = 0; i < 8; i++)
    5fd8:	e000      	b.n	5fdc <ULineSensor::decode(char const*)+0x4c>
      int16_t v = strtol(p1, (char **)&p1, 10);
    5fda:	9801      	ldr	r0, [sp, #4]
    5fdc:	220a      	movs	r2, #10
    5fde:	4631      	mov	r1, r6
    5fe0:	f015 f968 	bl	1b2b4 <strtol>
      if (blackLevel[i] >= v)
    5fe4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
      int16_t v = strtol(p1, (char **)&p1, 10);
    5fe8:	b202      	sxth	r2, r0
        v = blackLevel[i] + 1;
    5fea:	1c59      	adds	r1, r3, #1
      if (blackLevel[i] >= v)
    5fec:	4293      	cmp	r3, r2
        v = blackLevel[i] + 1;
    5fee:	bfa8      	it	ge
    5ff0:	b20a      	sxthge	r2, r1
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    5ff2:	1ad3      	subs	r3, r2, r3
      whiteLevel[i] = v;
    5ff4:	f827 2f02 	strh.w	r2, [r7, #2]!
    for (int i = 0; i < 8; i++)
    5ff8:	42bd      	cmp	r5, r7
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    5ffa:	ee07 3a90 	vmov	s15, r3
    5ffe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6002:	ee88 6b07 	vdiv.f64	d6, d8, d7
    6006:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    600a:	eca8 6a01 	vstmia	r8!, {s12}
    for (int i = 0; i < 8; i++)
    600e:	d1e4      	bne.n	5fda <ULineSensor::decode(char const*)+0x4a>
    }
    usb.send("# ULineSensor:: white level set from values\n");
    6010:	4982      	ldr	r1, [pc, #520]	; (621c <ULineSensor::decode(char const*)+0x28c>)
    6012:	4883      	ldr	r0, [pc, #524]	; (6220 <ULineSensor::decode(char const*)+0x290>)
    6014:	f006 fa82 	bl	c51c <UUSB::send(char const*)>
  bool used = true;
    6018:	2001      	movs	r0, #1
    }
  }
  else
    used = false;
  return used;
}
    601a:	b002      	add	sp, #8
    601c:	ecbd 8b02 	vpop	{d8}
    6020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (strncmp(buf, "licw", 4) == 0)
    6024:	2204      	movs	r2, #4
    6026:	497f      	ldr	r1, [pc, #508]	; (6224 <ULineSensor::decode(char const*)+0x294>)
    6028:	4620      	mov	r0, r4
    602a:	f015 fdeb 	bl	1bc04 <strncmp>
    602e:	2800      	cmp	r0, #0
    6030:	d078      	beq.n	6124 <ULineSensor::decode(char const*)+0x194>
  else if (strncmp(buf, "litb ", 5) == 0 and strlen(buf) > 19)
    6032:	2205      	movs	r2, #5
    6034:	497c      	ldr	r1, [pc, #496]	; (6228 <ULineSensor::decode(char const*)+0x298>)
    6036:	4620      	mov	r0, r4
    6038:	f015 fde4 	bl	1bc04 <strncmp>
    603c:	bb80      	cbnz	r0, 60a0 <ULineSensor::decode(char const*)+0x110>
    603e:	4620      	mov	r0, r4
    6040:	f017 f89e 	bl	1d180 <strlen>
    6044:	2813      	cmp	r0, #19
    6046:	d92b      	bls.n	60a0 <ULineSensor::decode(char const*)+0x110>
    const char * p1 = &buf[5];
    6048:	1d60      	adds	r0, r4, #5
    604a:	f105 0760 	add.w	r7, r5, #96	; 0x60
    604e:	f105 043e 	add.w	r4, r5, #62	; 0x3e
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6052:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
    6056:	354e      	adds	r5, #78	; 0x4e
    6058:	ae01      	add	r6, sp, #4
    const char * p1 = &buf[5];
    605a:	9001      	str	r0, [sp, #4]
    for (int i = 0; i < 8; i++)
    605c:	e000      	b.n	6060 <ULineSensor::decode(char const*)+0xd0>
      int16_t v = strtol(p1, (char **)&p1, 10);
    605e:	9801      	ldr	r0, [sp, #4]
    6060:	220a      	movs	r2, #10
    6062:	4631      	mov	r1, r6
    6064:	f015 f926 	bl	1b2b4 <strtol>
      if (whiteLevel[i] == v)
    6068:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
    606c:	b200      	sxth	r0, r0
    606e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6072:	4298      	cmp	r0, r3
    6074:	d101      	bne.n	607a <ULineSensor::decode(char const*)+0xea>
        v--;
    6076:	3801      	subs	r0, #1
    6078:	b200      	sxth	r0, r0
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    607a:	1a1b      	subs	r3, r3, r0
    for (int i = 0; i < 8; i++)
    607c:	42a5      	cmp	r5, r4
      blackLevel[i] = v;
    607e:	8220      	strh	r0, [r4, #16]
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6080:	ee07 3a90 	vmov	s15, r3
    6084:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6088:	ee88 6b07 	vdiv.f64	d6, d8, d7
    608c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    6090:	eca7 6a01 	vstmia	r7!, {s12}
    for (int i = 0; i < 8; i++)
    6094:	d1e3      	bne.n	605e <ULineSensor::decode(char const*)+0xce>
    usb.send("# ULineSensor:: black level set from values\n");
    6096:	4965      	ldr	r1, [pc, #404]	; (622c <ULineSensor::decode(char const*)+0x29c>)
    6098:	4861      	ldr	r0, [pc, #388]	; (6220 <ULineSensor::decode(char const*)+0x290>)
    609a:	f006 fa3f 	bl	c51c <UUSB::send(char const*)>
    609e:	e03b      	b.n	6118 <ULineSensor::decode(char const*)+0x188>
  else if (strncmp(buf, "licb", 4) == 0)
    60a0:	2204      	movs	r2, #4
    60a2:	4963      	ldr	r1, [pc, #396]	; (6230 <ULineSensor::decode(char const*)+0x2a0>)
    60a4:	4620      	mov	r0, r4
    60a6:	f015 fdad 	bl	1bc04 <strncmp>
    60aa:	2800      	cmp	r0, #0
    60ac:	d14b      	bne.n	6146 <ULineSensor::decode(char const*)+0x1b6>
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    60ae:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    60b2:	f105 013e 	add.w	r1, r5, #62	; 0x3e
    60b6:	f105 0460 	add.w	r4, r5, #96	; 0x60
    60ba:	485e      	ldr	r0, [pc, #376]	; (6234 <ULineSensor::decode(char const*)+0x2a4>)
    60bc:	354e      	adds	r5, #78	; 0x4e
      int16_t v = ad.adcLSH[i] - ad.adcLSL[i];
    60be:	8a43      	ldrh	r3, [r0, #18]
    60c0:	f830 2f02 	ldrh.w	r2, [r0, #2]!
    60c4:	1a9b      	subs	r3, r3, r2
      if (whiteLevel[i] == v)
    60c6:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
    60ca:	b21b      	sxth	r3, r3
    60cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    60d0:	4293      	cmp	r3, r2
    60d2:	d101      	bne.n	60d8 <ULineSensor::decode(char const*)+0x148>
        v--;
    60d4:	3b01      	subs	r3, #1
    60d6:	b21b      	sxth	r3, r3
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    60d8:	1ad2      	subs	r2, r2, r3
    for (int i = 0; i < 8; i++)
    60da:	42a9      	cmp	r1, r5
      blackLevel[i] = v;
    60dc:	820b      	strh	r3, [r1, #16]
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    60de:	ee07 2a90 	vmov	s15, r2
    60e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    60e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
    60ea:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    60ee:	eca4 6a01 	vstmia	r4!, {s12}
    for (int i = 0; i < 8; i++)
    60f2:	d1e4      	bne.n	60be <ULineSensor::decode(char const*)+0x12e>
    60f4:	e010      	b.n	6118 <ULineSensor::decode(char const*)+0x188>
    char * p1 = (char *)&buf[4];
    60f6:	1d20      	adds	r0, r4, #4
    lineSensorOn = strtol(p1, &p1, 10);
    60f8:	220a      	movs	r2, #10
    60fa:	a901      	add	r1, sp, #4
    char * p1 = (char *)&buf[4];
    60fc:	9001      	str	r0, [sp, #4]
    lineSensorOn = strtol(p1, &p1, 10);
    60fe:	f015 f8d9 	bl	1b2b4 <strtol>
    6102:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    6104:	9c01      	ldr	r4, [sp, #4]
    lineSensorOn = strtol(p1, &p1, 10);
    6106:	bf18      	it	ne
    6108:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    610a:	4620      	mov	r0, r4
    lineSensorOn = strtol(p1, &p1, 10);
    610c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if (strlen(p1) > 2)
    6110:	f017 f836 	bl	1d180 <strlen>
    6114:	2802      	cmp	r0, #2
    6116:	d81c      	bhi.n	6152 <ULineSensor::decode(char const*)+0x1c2>
  bool used = true;
    6118:	2001      	movs	r0, #1
}
    611a:	b002      	add	sp, #8
    611c:	ecbd 8b02 	vpop	{d8}
    6120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int n = strtol(p1, nullptr, 10);
    6124:	4601      	mov	r1, r0
    6126:	220a      	movs	r2, #10
    6128:	1d20      	adds	r0, r4, #4
    612a:	f015 f8c3 	bl	1b2b4 <strtol>
    612e:	4603      	mov	r3, r0
  bool used = true;
    6130:	2001      	movs	r0, #1
      n = 10;
    6132:	2b00      	cmp	r3, #0
    6134:	bf08      	it	eq
    6136:	230a      	moveq	r3, #10
      calibrateWhite = n;
    6138:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
}
    613c:	b002      	add	sp, #8
    613e:	ecbd 8b02 	vpop	{d8}
    6142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    used = false;
    6146:	2000      	movs	r0, #0
}
    6148:	b002      	add	sp, #8
    614a:	ecbd 8b02 	vpop	{d8}
    614e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      lsIsWhite = strtol(p1, &p1, 10);
    6152:	220a      	movs	r2, #10
    6154:	a901      	add	r1, sp, #4
    6156:	4620      	mov	r0, r4
    6158:	f015 f8ac 	bl	1b2b4 <strtol>
    615c:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    615e:	9c01      	ldr	r4, [sp, #4]
      lsIsWhite = strtol(p1, &p1, 10);
    6160:	bf18      	it	ne
    6162:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    6164:	4620      	mov	r0, r4
      lsIsWhite = strtol(p1, &p1, 10);
    6166:	752b      	strb	r3, [r5, #20]
    if (strlen(p1) > 2)
    6168:	f017 f80a 	bl	1d180 <strlen>
    616c:	2802      	cmp	r0, #2
    616e:	d9d3      	bls.n	6118 <ULineSensor::decode(char const*)+0x188>
      lsPowerHigh = strtol(p1, &p1, 10);
    6170:	220a      	movs	r2, #10
    6172:	a901      	add	r1, sp, #4
    6174:	4620      	mov	r0, r4
    6176:	f015 f89d 	bl	1b2b4 <strtol>
    617a:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    617c:	9c01      	ldr	r4, [sp, #4]
      lsPowerHigh = strtol(p1, &p1, 10);
    617e:	bf18      	it	ne
    6180:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    6182:	4620      	mov	r0, r4
      lsPowerHigh = strtol(p1, &p1, 10);
    6184:	756b      	strb	r3, [r5, #21]
    if (strlen(p1) > 2)
    6186:	f016 fffb 	bl	1d180 <strlen>
    618a:	2802      	cmp	r0, #2
    618c:	d9c4      	bls.n	6118 <ULineSensor::decode(char const*)+0x188>
      lsTiltCompensate = strtol(p1, &p1, 10);
    618e:	220a      	movs	r2, #10
    6190:	a901      	add	r1, sp, #4
    6192:	4620      	mov	r0, r4
    6194:	f015 f88e 	bl	1b2b4 <strtol>
    6198:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    619a:	9c01      	ldr	r4, [sp, #4]
      lsTiltCompensate = strtol(p1, &p1, 10);
    619c:	bf18      	it	ne
    619e:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    61a0:	4620      	mov	r0, r4
      lsTiltCompensate = strtol(p1, &p1, 10);
    61a2:	75ab      	strb	r3, [r5, #22]
    if (strlen(p1) > 2)
    61a4:	f016 ffec 	bl	1d180 <strlen>
    61a8:	2802      	cmp	r0, #2
    61aa:	d9b5      	bls.n	6118 <ULineSensor::decode(char const*)+0x188>
      wideSensor = strtol(p1, &p1, 10);
    61ac:	220a      	movs	r2, #10
    61ae:	a901      	add	r1, sp, #4
    61b0:	4620      	mov	r0, r4
    61b2:	f015 f87f 	bl	1b2b4 <strtol>
    61b6:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    61b8:	9c01      	ldr	r4, [sp, #4]
      wideSensor = strtol(p1, &p1, 10);
    61ba:	bf18      	it	ne
    61bc:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    61be:	4620      	mov	r0, r4
      wideSensor = strtol(p1, &p1, 10);
    61c0:	f885 3101 	strb.w	r3, [r5, #257]	; 0x101
    if (strlen(p1) > 2)
    61c4:	f016 ffdc 	bl	1d180 <strlen>
    61c8:	2802      	cmp	r0, #2
    61ca:	d9a5      	bls.n	6118 <ULineSensor::decode(char const*)+0x188>
      swapLeftRight = strtol(p1, &p1, 10);
    61cc:	220a      	movs	r2, #10
    61ce:	a901      	add	r1, sp, #4
    61d0:	4620      	mov	r0, r4
    61d2:	f015 f86f 	bl	1b2b4 <strtol>
    61d6:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    61d8:	9c01      	ldr	r4, [sp, #4]
      swapLeftRight = strtol(p1, &p1, 10);
    61da:	bf18      	it	ne
    61dc:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    61de:	4620      	mov	r0, r4
      swapLeftRight = strtol(p1, &p1, 10);
    61e0:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
    if (strlen(p1) > 2)
    61e4:	f016 ffcc 	bl	1d180 <strlen>
    61e8:	2802      	cmp	r0, #2
    61ea:	d995      	bls.n	6118 <ULineSensor::decode(char const*)+0x188>
      lineValidThreshold = strtof(p1, &p1);
    61ec:	4620      	mov	r0, r4
    61ee:	a901      	add	r1, sp, #4
    61f0:	f014 ff5c 	bl	1b0ac <strtof>
    if (strlen(p1) > 2)
    61f4:	9c01      	ldr	r4, [sp, #4]
      lineValidThreshold = strtof(p1, &p1);
    61f6:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    if (strlen(p1) > 2)
    61fa:	4620      	mov	r0, r4
    61fc:	f016 ffc0 	bl	1d180 <strlen>
    6200:	2802      	cmp	r0, #2
    6202:	d989      	bls.n	6118 <ULineSensor::decode(char const*)+0x188>
      crossingThreshold = strtof(p1, &p1);
    6204:	a901      	add	r1, sp, #4
    6206:	4620      	mov	r0, r4
    6208:	f014 ff50 	bl	1b0ac <strtof>
    620c:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    6210:	e782      	b.n	6118 <ULineSensor::decode(char const*)+0x188>
    6212:	bf00      	nop
    6214:	20003698 	.word	0x20003698
    6218:	200036a0 	.word	0x200036a0
    621c:	200036a8 	.word	0x200036a8
    6220:	2000eab8 	.word	0x2000eab8
    6224:	200036d8 	.word	0x200036d8
    6228:	200036e0 	.word	0x200036e0
    622c:	200036e8 	.word	0x200036e8
    6230:	20003718 	.word	0x20003718
    6234:	2000d8be 	.word	0x2000d8be

00006238 <ULineSensor::sendHelp()>:


void ULineSensor::sendHelp()
{
    6238:	b510      	push	{r4, lr}
//   const int MRL = 150;
//   char reply[MRL];
  usb.send("# Line sensor -------\r\n");
    623a:	4c0d      	ldr	r4, [pc, #52]	; (6270 <ULineSensor::sendHelp()+0x38>)
    623c:	490d      	ldr	r1, [pc, #52]	; (6274 <ULineSensor::sendHelp()+0x3c>)
    623e:	4620      	mov	r0, r4
    6240:	f006 f96c 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlip p [w h t wi s lth xth] \tSettings: p=on, w=white, h=high power, t=tilt comp, wi=wide, s=swap, lth=line thresh (0..1), xth=cross_th (0..1), all but first parameter are optional.\r\n");
    6244:	490c      	ldr	r1, [pc, #48]	; (6278 <ULineSensor::sendHelp()+0x40>)
    6246:	4620      	mov	r0, r4
    6248:	f006 f968 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlicw N\tUse current value as white, average over N samples\r\n");
    624c:	490b      	ldr	r1, [pc, #44]	; (627c <ULineSensor::sendHelp()+0x44>)
    624e:	4620      	mov	r0, r4
    6250:	f006 f964 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlicb \tUse current value as black (should be zero)\r\n");
    6254:	490a      	ldr	r1, [pc, #40]	; (6280 <ULineSensor::sendHelp()+0x48>)
    6256:	4620      	mov	r0, r4
    6258:	f006 f960 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlitw w w w w w w w w \tUse these values as white\r\n");
    625c:	4909      	ldr	r1, [pc, #36]	; (6284 <ULineSensor::sendHelp()+0x4c>)
    625e:	4620      	mov	r0, r4
    6260:	f006 f95c 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlitb b b b b b b b b \tUse these values as black (should be zero)\r\n");
    6264:	4620      	mov	r0, r4
    6266:	4908      	ldr	r1, [pc, #32]	; (6288 <ULineSensor::sendHelp()+0x50>)
}
    6268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tlitb b b b b b b b b \tUse these values as black (should be zero)\r\n");
    626c:	f006 b956 	b.w	c51c <UUSB::send(char const*)>
    6270:	2000eab8 	.word	0x2000eab8
    6274:	20003738 	.word	0x20003738
    6278:	20003750 	.word	0x20003750
    627c:	2000380c 	.word	0x2000380c
    6280:	20003850 	.word	0x20003850
    6284:	2000388c 	.word	0x2000388c
    6288:	200038c4 	.word	0x200038c4

0000628c <ULineSensor::~ULineSensor()>:
#ifndef ULINESENSOR_H
#define ULINESENSOR_H

#include "usubss.h"

class ULineSensor : public USubss
    628c:	b510      	push	{r4, lr}
    628e:	4b05      	ldr	r3, [pc, #20]	; (62a4 <ULineSensor::~ULineSensor()+0x18>)
    6290:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    6292:	6840      	ldr	r0, [r0, #4]
    6294:	6023      	str	r3, [r4, #0]
	if (__p)
    6296:	b118      	cbz	r0, 62a0 <ULineSensor::~ULineSensor()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6298:	68e1      	ldr	r1, [r4, #12]
    629a:	1a09      	subs	r1, r1, r0
    629c:	f010 fa0e 	bl	166bc <operator delete(void*, unsigned int)>
    62a0:	4620      	mov	r0, r4
    62a2:	bd10      	pop	{r4, pc}
    62a4:	2000802c 	.word	0x2000802c

000062a8 <ULineSensor::setup()>:
{
    62a8:	b538      	push	{r3, r4, r5, lr}
    62aa:	4604      	mov	r4, r0
  highPowerPin = PIN_LINE_LED_HIGH; // can be changed by HW config load (eePromLoadLinesensor)
    62ac:	2322      	movs	r3, #34	; 0x22
  pinModeLed = OUTPUT; // switch to input for half power
    62ae:	2501      	movs	r5, #1
  pinMode ( highPowerPin, OUTPUT ); // line sensor LED full power
    62b0:	4618      	mov	r0, r3
  highPowerPin = PIN_LINE_LED_HIGH; // can be changed by HW config load (eePromLoadLinesensor)
    62b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  pinMode ( highPowerPin, OUTPUT ); // line sensor LED full power
    62b6:	4629      	mov	r1, r5
  pinModeLed = OUTPUT; // switch to input for half power
    62b8:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
  pinMode ( highPowerPin, OUTPUT ); // line sensor LED full power
    62bc:	f00f fe4a 	bl	15f54 <pinMode>
  pinMode ( PIN_LINE_LED_LOW, OUTPUT ); // LED line sensor - half power (HW3)
    62c0:	4629      	mov	r1, r5
    62c2:	2021      	movs	r0, #33	; 0x21
    62c4:	f00f fe46 	bl	15f54 <pinMode>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    62c8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    62cc:	4a19      	ldr	r2, [pc, #100]	; (6334 <ULineSensor::setup()+0x8c>)
  lineSensorOn = false;
    62ce:	2000      	movs	r0, #0
    62d0:	0119      	lsls	r1, r3, #4
    62d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    62d6:	5851      	ldr	r1, [r2, r1]
    62d8:	68db      	ldr	r3, [r3, #12]
  addPublistItem("liv", "Get line-sensor raw AD value 'liv ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8'");
    62da:	4a17      	ldr	r2, [pc, #92]	; (6338 <ULineSensor::setup()+0x90>)
  lineSensorOn = false;
    62dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  addPublistItem("liv", "Get line-sensor raw AD value 'liv ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8'");
    62e0:	4620      	mov	r0, r4
    62e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    62e6:	4915      	ldr	r1, [pc, #84]	; (633c <ULineSensor::setup()+0x94>)
    62e8:	f006 f84a 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("liw", "Get line-sensor white (AD) level 'liw w1 w2 w3 w4 w5 w6 w7 w8'");
    62ec:	4620      	mov	r0, r4
    62ee:	4a14      	ldr	r2, [pc, #80]	; (6340 <ULineSensor::setup()+0x98>)
    62f0:	4914      	ldr	r1, [pc, #80]	; (6344 <ULineSensor::setup()+0x9c>)
    62f2:	f006 f845 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lib", "Get line-sensor black (AD) level 'lib b1 b2 b3 b4 b5 b6 b7 b8'");
    62f6:	4620      	mov	r0, r4
    62f8:	4a13      	ldr	r2, [pc, #76]	; (6348 <ULineSensor::setup()+0xa0>)
    62fa:	4914      	ldr	r1, [pc, #80]	; (634c <ULineSensor::setup()+0xa4>)
    62fc:	f006 f840 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lig", "Get line-sensor channel gain 'lig g1 g2 g3 g4 g5 g6 g7 g8'");
    6300:	4620      	mov	r0, r4
    6302:	4a13      	ldr	r2, [pc, #76]	; (6350 <ULineSensor::setup()+0xa8>)
    6304:	4913      	ldr	r1, [pc, #76]	; (6354 <ULineSensor::setup()+0xac>)
    6306:	f006 f83b 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("livn", "Get line-sensor normalized value 'livn ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8' values x 1000");
    630a:	4620      	mov	r0, r4
    630c:	4a12      	ldr	r2, [pc, #72]	; (6358 <ULineSensor::setup()+0xb0>)
    630e:	4913      	ldr	r1, [pc, #76]	; (635c <ULineSensor::setup()+0xb4>)
    6310:	f006 f836 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lis", "Get line-sensor settings 'lis on white high tilt crossTh wide swap'");
    6314:	4620      	mov	r0, r4
    6316:	4a12      	ldr	r2, [pc, #72]	; (6360 <ULineSensor::setup()+0xb8>)
    6318:	4912      	ldr	r1, [pc, #72]	; (6364 <ULineSensor::setup()+0xbc>)
    631a:	f006 f831 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lip", "Get line-sensor position 'lip left right valid validCnt crossing crossingCnt'");
    631e:	4620      	mov	r0, r4
    6320:	4911      	ldr	r1, [pc, #68]	; (6368 <ULineSensor::setup()+0xc0>)
    6322:	4a12      	ldr	r2, [pc, #72]	; (636c <ULineSensor::setup()+0xc4>)
    6324:	f006 f82c 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    6328:	4621      	mov	r1, r4
    632a:	4811      	ldr	r0, [pc, #68]	; (6370 <ULineSensor::setup()+0xc8>)
}
    632c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    6330:	f006 bd20 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    6334:	20008148 	.word	0x20008148
    6338:	2000348c 	.word	0x2000348c
    633c:	200034d0 	.word	0x200034d0
    6340:	200034d4 	.word	0x200034d4
    6344:	20003514 	.word	0x20003514
    6348:	20003518 	.word	0x20003518
    634c:	20003558 	.word	0x20003558
    6350:	2000355c 	.word	0x2000355c
    6354:	20003598 	.word	0x20003598
    6358:	2000359c 	.word	0x2000359c
    635c:	200035f4 	.word	0x200035f4
    6360:	200035fc 	.word	0x200035fc
    6364:	20003640 	.word	0x20003640
    6368:	20003694 	.word	0x20003694
    636c:	20003644 	.word	0x20003644
    6370:	2000eab8 	.word	0x2000eab8
    6374:	00000000 	.word	0x00000000

00006378 <ULineSensor::lineDetect()>:
void ULineSensor::lineDetect()
{
  float sum = 0;
  float posSum = 0;
  float low = 2.0;
  float high = 0.0;
    6378:	ed9f 7a57 	vldr	s14, [pc, #348]	; 64d8 <ULineSensor::lineDetect()+0x160>
    637c:	f100 0288 	add.w	r2, r0, #136	; 0x88
    6380:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
  float sum = 0;
    6384:	eef0 6a47 	vmov.f32	s13, s14
{
    6388:	4613      	mov	r3, r2
  // # find levels (and average)
  // # using normalised readings (0.0 (no reflection) to 1.0 (calibrated white)))
  for (int i = 0; i < 8; i++)
  {
    sum += lineSensorValue[i]; // for average
    638a:	ecf3 7a01 	vldmia	r3!, {s15}
    if (lineSensorValue[i] > high)
      high = lineSensorValue[i]; // # most bright value (like line)
    638e:	eef4 7a47 	vcmp.f32	s15, s14
    sum += lineSensorValue[i]; // for average
    6392:	ee76 6aa7 	vadd.f32	s13, s13, s15
      high = lineSensorValue[i]; // # most bright value (like line)
    6396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    639a:	fe37 7a87 	vselgt.f32	s14, s15, s14
  for (int i = 0; i < 8; i++)
    639e:	4299      	cmp	r1, r3
    63a0:	d1f3      	bne.n	638a <ULineSensor::lineDetect()+0x12>
  }
  reflectAverage = sum / 8.0;
    63a2:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
  // use average for crossing detect
  crossing = reflectAverage >= crossingThreshold;
    63a6:	ed90 3a0b 	vldr	s6, [r0, #44]	; 0x2c
  // use high for line valid
  lineValid = high >= lineValidThreshold;
    63aa:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
  // # find line position
  // # using COG method from lowest value
  sum = 0;
  // discard anything below this value
  low = lineValidThreshold - 0.1;
    63ae:	2301      	movs	r3, #1
  float posSum = 0;
    63b0:	ed9f 4a49 	vldr	s8, [pc, #292]	; 64d8 <ULineSensor::lineDetect()+0x160>
  reflectAverage = sum / 8.0;
    63b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
  low = lineValidThreshold - 0.1;
    63b8:	eeb7 5ae3 	vcvt.f64.f32	d5, s7
  sum = 0;
    63bc:	eef0 4a44 	vmov.f32	s9, s8
  crossing = reflectAverage >= crossingThreshold;
    63c0:	eef4 6ac3 	vcmpe.f32	s13, s6
  reflectAverage = sum / 8.0;
    63c4:	edc0 6a0e 	vstr	s13, [r0, #56]	; 0x38
  low = lineValidThreshold - 0.1;
    63c8:	ed9f 2b41 	vldr	d2, [pc, #260]	; 64d0 <ULineSensor::lineDetect()+0x158>
  crossing = reflectAverage >= crossingThreshold;
    63cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  lineValid = high >= lineValidThreshold;
    63d0:	eef4 3ac7 	vcmpe.f32	s7, s14
  low = lineValidThreshold - 0.1;
    63d4:	ee35 5b42 	vsub.f64	d5, d5, d2
  crossing = reflectAverage >= crossingThreshold;
    63d8:	bfac      	ite	ge
    63da:	4619      	movge	r1, r3
    63dc:	2100      	movlt	r1, #0
  lineValid = high >= lineValidThreshold;
    63de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  low = lineValidThreshold - 0.1;
    63e2:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  crossing = reflectAverage >= crossingThreshold;
    63e6:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
  lineValid = high >= lineValidThreshold;
    63ea:	bf94      	ite	ls
    63ec:	4619      	movls	r1, r3
    63ee:	2100      	movhi	r1, #0
    63f0:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
  for (int i = 0; i < 8; i++)
  {
    float v = lineSensorValue[i] - low;
    63f4:	ecf2 7a01 	vldmia	r2!, {s15}
    63f8:	ee77 7ac5 	vsub.f32	s15, s15, s10
    if (v > 0)
    63fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    6400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6404:	dd07      	ble.n	6416 <ULineSensor::lineDetect()+0x9e>
    { // probably a line
      sum += v;
      posSum += (i+1) * v;
    6406:	ee06 3a10 	vmov	s12, r3
      sum += v;
    640a:	ee74 4aa7 	vadd.f32	s9, s9, s15
      posSum += (i+1) * v;
    640e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    6412:	eea6 4a27 	vfma.f32	s8, s12, s15
  for (int i = 0; i < 8; i++)
    6416:	3301      	adds	r3, #1
    6418:	2b09      	cmp	r3, #9
    641a:	d1eb      	bne.n	63f4 <ULineSensor::lineDetect()+0x7c>
    }
  }
  if (sum > 0 and lineValidCnt > 0)
    641c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
    6420:	2200      	movs	r2, #0
    6422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6426:	dd3d      	ble.n	64a4 <ULineSensor::lineDetect()+0x12c>
    6428:	f990 3021 	ldrsb.w	r3, [r0, #33]	; 0x21
    642c:	2b00      	cmp	r3, #0
    642e:	dd21      	ble.n	6474 <ULineSensor::lineDetect()+0xfc>
  { // get COG for line part.
    linePosition = posSum/sum - 4.5;
    6430:	eec4 7a24 	vdiv.f32	s15, s8, s9
    6434:	eeb1 6a02 	vmov.f32	s12, #18	; 0x40900000  4.5
    linePosition = 0;
  //
  // make compatible with logging and old code
  lsLeftSide = linePosition;
  lsRightSide = linePosition;
  if (lineValid and lineValidCnt < 20)
    6438:	eef4 3ac7 	vcmpe.f32	s7, s14
    643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    linePosition = posSum/sum - 4.5;
    6440:	ee77 7ac6 	vsub.f32	s15, s15, s12
    6444:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
  lsLeftSide = linePosition;
    6448:	edc0 7a06 	vstr	s15, [r0, #24]
  lsRightSide = linePosition;
    644c:	edc0 7a07 	vstr	s15, [r0, #28]
  if (lineValid and lineValidCnt < 20)
    6450:	d834      	bhi.n	64bc <ULineSensor::lineDetect()+0x144>
    6452:	2b13      	cmp	r3, #19
    6454:	dd16      	ble.n	6484 <ULineSensor::lineDetect()+0x10c>
    if (lineValidCnt > 0)
      lineValidCnt --;
    else
      lineValidCnt = 0;
  }
  if (crossing and crossingLineCnt < 20)
    6456:	eef4 6ac3 	vcmpe.f32	s13, s6
    645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    645e:	da19      	bge.n	6494 <ULineSensor::lineDetect()+0x11c>
    crossingLineCnt++;
  else if (not crossing)
  {
    crossingLineCnt --;
    6460:	f890 3020 	ldrb.w	r3, [r0, #32]
    6464:	3b01      	subs	r3, #1
    6466:	b25b      	sxtb	r3, r3
    if (crossingLineCnt < 0)
    6468:	2b00      	cmp	r3, #0
      crossingLineCnt = 0;
    646a:	bfb8      	it	lt
    646c:	2300      	movlt	r3, #0
    646e:	f880 3020 	strb.w	r3, [r0, #32]
  }
}
    6472:	4770      	bx	lr
  if (lineValid and lineValidCnt < 20)
    6474:	eef4 3ac7 	vcmpe.f32	s7, s14
    6478:	6242      	str	r2, [r0, #36]	; 0x24
  lsLeftSide = linePosition;
    647a:	6182      	str	r2, [r0, #24]
  lsRightSide = linePosition;
    647c:	61c2      	str	r2, [r0, #28]
  if (lineValid and lineValidCnt < 20)
    647e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6482:	d820      	bhi.n	64c6 <ULineSensor::lineDetect()+0x14e>
  if (crossing and crossingLineCnt < 20)
    6484:	eef4 6ac3 	vcmpe.f32	s13, s6
    lineValidCnt++;
    6488:	3301      	adds	r3, #1
    648a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if (crossing and crossingLineCnt < 20)
    648e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6492:	dbe5      	blt.n	6460 <ULineSensor::lineDetect()+0xe8>
    6494:	f990 3020 	ldrsb.w	r3, [r0, #32]
    6498:	2b13      	cmp	r3, #19
    649a:	dc13      	bgt.n	64c4 <ULineSensor::lineDetect()+0x14c>
    crossingLineCnt++;
    649c:	3301      	adds	r3, #1
    649e:	f880 3020 	strb.w	r3, [r0, #32]
    64a2:	4770      	bx	lr
  if (lineValid and lineValidCnt < 20)
    64a4:	eef4 3ac7 	vcmpe.f32	s7, s14
  if (sum > 0 and lineValidCnt > 0)
    64a8:	f990 3021 	ldrsb.w	r3, [r0, #33]	; 0x21
    64ac:	6242      	str	r2, [r0, #36]	; 0x24
  lsLeftSide = linePosition;
    64ae:	6182      	str	r2, [r0, #24]
  if (lineValid and lineValidCnt < 20)
    64b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  lsRightSide = linePosition;
    64b4:	61c2      	str	r2, [r0, #28]
  if (lineValid and lineValidCnt < 20)
    64b6:	d9cc      	bls.n	6452 <ULineSensor::lineDetect()+0xda>
    if (lineValidCnt > 0)
    64b8:	2b00      	cmp	r3, #0
    64ba:	dd04      	ble.n	64c6 <ULineSensor::lineDetect()+0x14e>
      lineValidCnt --;
    64bc:	3b01      	subs	r3, #1
    64be:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    64c2:	e7c8      	b.n	6456 <ULineSensor::lineDetect()+0xde>
}
    64c4:	4770      	bx	lr
      lineValidCnt = 0;
    64c6:	2300      	movs	r3, #0
    64c8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    64cc:	e7c3      	b.n	6456 <ULineSensor::lineDetect()+0xde>
    64ce:	bf00      	nop
    64d0:	9999999a 	.word	0x9999999a
    64d4:	3fb99999 	.word	0x3fb99999
    64d8:	00000000 	.word	0x00000000

000064dc <ULineSensor::calibrateWhiteNow()>:


void ULineSensor::calibrateWhiteNow()
{
  if (calibrateWhite <= 0 or lineSensorOnCnt > 0)
    64dc:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    64e0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    64e4:	2a00      	cmp	r2, #0
{
    64e6:	b570      	push	{r4, r5, r6, lr}
    64e8:	4604      	mov	r4, r0
    64ea:	b0ba      	sub	sp, #232	; 0xe8
  if (calibrateWhite <= 0 or lineSensorOnCnt > 0)
    64ec:	dd1b      	ble.n	6526 <ULineSensor::calibrateWhiteNow()+0x4a>
    64ee:	2b00      	cmp	r3, #0
    64f0:	dc19      	bgt.n	6526 <ULineSensor::calibrateWhiteNow()+0x4a>
  { // no calibration or just turned on
    // wait a bit after turn on
    lineSensorOnCnt--;
    return;
  }
  if (calibrateWhiteSumCnt < calibrateWhite)
    64f2:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    64f6:	429a      	cmp	r2, r3
    64f8:	dd1a      	ble.n	6530 <ULineSensor::calibrateWhiteNow()+0x54>
    64fa:	f500 7282 	add.w	r2, r0, #260	; 0x104
    64fe:	4d28      	ldr	r5, [pc, #160]	; (65a0 <ULineSensor::calibrateWhiteNow()+0xc4>)
    6500:	f500 7692 	add.w	r6, r0, #292	; 0x124
  {
    for (int i = 0; i < 8; i++)
    { // sum value from this measurement
      calibrateWhiteSum[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    6504:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
    6508:	f935 cf02 	ldrsh.w	ip, [r5, #2]!
    650c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    6510:	eba0 000c 	sub.w	r0, r0, ip
    for (int i = 0; i < 8; i++)
    6514:	4296      	cmp	r6, r2
      calibrateWhiteSum[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    6516:	4401      	add	r1, r0
    6518:	6011      	str	r1, [r2, #0]
    for (int i = 0; i < 8; i++)
    651a:	d1f3      	bne.n	6504 <ULineSensor::calibrateWhiteNow()+0x28>
    }
    calibrateWhiteSumCnt++;
    651c:	3301      	adds	r3, #1
    651e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    snprintf(s, MSL, "# ULineSensor::calibrateWhiteNow: set white from %d measurements\n", calibrateWhiteSumCnt);
    usb.send(s);
    calibrateWhiteSumCnt = 0;
    calibrateWhite = 0;
  }
}
    6522:	b03a      	add	sp, #232	; 0xe8
    6524:	bd70      	pop	{r4, r5, r6, pc}
    lineSensorOnCnt--;
    6526:	3b01      	subs	r3, #1
    6528:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
}
    652c:	b03a      	add	sp, #232	; 0xe8
    652e:	bd70      	pop	{r4, r5, r6, pc}
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6530:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    6534:	303e      	adds	r0, #62	; 0x3e
    6536:	f504 7182 	add.w	r1, r4, #260	; 0x104
    653a:	f504 7e92 	add.w	lr, r4, #292	; 0x124
      calibrateWhiteSum[i] = 0; // reset
    653e:	2600      	movs	r6, #0
      whiteLevel[i] = calibrateWhiteSum[i]/calibrateWhiteSumCnt;
    6540:	f851 2f04 	ldr.w	r2, [r1, #4]!
    6544:	fb92 fcf3 	sdiv	ip, r2, r3
    6548:	fa0f f28c 	sxth.w	r2, ip
    654c:	f820 2f02 	strh.w	r2, [r0, #2]!
      if (whiteLevel[i] == blackLevel[i])
    6550:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
      calibrateWhiteSum[i] = 0; // reset
    6554:	600e      	str	r6, [r1, #0]
      if (whiteLevel[i] == blackLevel[i])
    6556:	42aa      	cmp	r2, r5
    6558:	d104      	bne.n	6564 <ULineSensor::calibrateWhiteNow()+0x88>
        whiteLevel[i]++; // avoid divide by zero
    655a:	f10c 0c01 	add.w	ip, ip, #1
    655e:	fa0f f28c 	sxth.w	r2, ip
    6562:	8002      	strh	r2, [r0, #0]
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6564:	1b52      	subs	r2, r2, r5
    for (int i = 0; i < 8; i++)
    6566:	4571      	cmp	r1, lr
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6568:	ee07 2a90 	vmov	s15, r2
    656c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6570:	ee85 6b07 	vdiv.f64	d6, d5, d7
    6574:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    6578:	ed01 6a2a 	vstr	s12, [r1, #-168]	; 0xffffff58
    for (int i = 0; i < 8; i++)
    657c:	d1e0      	bne.n	6540 <ULineSensor::calibrateWhiteNow()+0x64>
    snprintf(s, MSL, "# ULineSensor::calibrateWhiteNow: set white from %d measurements\n", calibrateWhiteSumCnt);
    657e:	4a09      	ldr	r2, [pc, #36]	; (65a4 <ULineSensor::calibrateWhiteNow()+0xc8>)
    6580:	21e6      	movs	r1, #230	; 0xe6
    6582:	4668      	mov	r0, sp
    6584:	f015 f886 	bl	1b694 <snprintf>
    usb.send(s);
    6588:	4669      	mov	r1, sp
    658a:	4807      	ldr	r0, [pc, #28]	; (65a8 <ULineSensor::calibrateWhiteNow()+0xcc>)
    658c:	f005 ffc6 	bl	c51c <UUSB::send(char const*)>
    calibrateWhiteSumCnt = 0;
    6590:	2300      	movs	r3, #0
    6592:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    calibrateWhite = 0;
    6596:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
}
    659a:	b03a      	add	sp, #232	; 0xe8
    659c:	bd70      	pop	{r4, r5, r6, pc}
    659e:	bf00      	nop
    65a0:	2000d8be 	.word	0x2000d8be
    65a4:	20003358 	.word	0x20003358
    65a8:	2000eab8 	.word	0x2000eab8

000065ac <ULineSensor::sendLineSensorStatus()>:
      break;
  }
}

void ULineSensor::sendLineSensorStatus()
{
    65ac:	4603      	mov	r3, r0
  const int MRL = 150;
  char reply[MRL];
  snprintf(reply, MRL, "lis %d %d %d %d %d %d %.2f %.2f\r\n",
    65ae:	4a13      	ldr	r2, [pc, #76]	; (65fc <ULineSensor::sendLineSensorStatus()+0x50>)
    65b0:	2196      	movs	r1, #150	; 0x96
    65b2:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
    65b6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
    65ba:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    65be:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    65c2:	b510      	push	{r4, lr}
    65c4:	b0b0      	sub	sp, #192	; 0xc0
  snprintf(reply, MRL, "lis %d %d %d %d %d %d %.2f %.2f\r\n",
    65c6:	ed8d 6b08 	vstr	d6, [sp, #32]
    65ca:	ed8d 7b06 	vstr	d7, [sp, #24]
    65ce:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    65d2:	a80a      	add	r0, sp, #40	; 0x28
    65d4:	9404      	str	r4, [sp, #16]
    65d6:	f893 4101 	ldrb.w	r4, [r3, #257]	; 0x101
    65da:	9403      	str	r4, [sp, #12]
    65dc:	7d9c      	ldrb	r4, [r3, #22]
    65de:	9402      	str	r4, [sp, #8]
    65e0:	7d5c      	ldrb	r4, [r3, #21]
    65e2:	9401      	str	r4, [sp, #4]
    65e4:	7d1c      	ldrb	r4, [r3, #20]
    65e6:	9400      	str	r4, [sp, #0]
    65e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    65ec:	f015 f852 	bl	1b694 <snprintf>
           lineSensorOn, 
           lsIsWhite,
           lsPowerHigh, lsTiltCompensate,
           wideSensor, swapLeftRight, lineValidThreshold, crossingThreshold
  );
  usb.send(reply);
    65f0:	a90a      	add	r1, sp, #40	; 0x28
    65f2:	4803      	ldr	r0, [pc, #12]	; (6600 <ULineSensor::sendLineSensorStatus()+0x54>)
    65f4:	f005 ff92 	bl	c51c <UUSB::send(char const*)>
}
    65f8:	b030      	add	sp, #192	; 0xc0
    65fa:	bd10      	pop	{r4, pc}
    65fc:	200033bc 	.word	0x200033bc
    6600:	2000eab8 	.word	0x2000eab8

00006604 <ULineSensor::sendLineSensorPosition()>:

void ULineSensor::sendLineSensorPosition()
{
    6604:	4603      	mov	r3, r0
  const int MRL = 150;
  char reply[MRL];
  snprintf(reply, MRL, "lip %.2f %.2f %d %d %d %d\r\n",
    6606:	4a12      	ldr	r2, [pc, #72]	; (6650 <ULineSensor::sendLineSensorPosition()+0x4c>)
    6608:	2196      	movs	r1, #150	; 0x96
    660a:	ed93 6a07 	vldr	s12, [r3, #28]
    660e:	ed93 7a06 	vldr	s14, [r3, #24]
    6612:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    6616:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    661a:	b510      	push	{r4, lr}
    661c:	b0ae      	sub	sp, #184	; 0xb8
  snprintf(reply, MRL, "lip %.2f %.2f %d %d %d %d\r\n",
    661e:	f993 4020 	ldrsb.w	r4, [r3, #32]
    6622:	ed8d 6b02 	vstr	d6, [sp, #8]
    6626:	ed8d 7b00 	vstr	d7, [sp]
    662a:	9407      	str	r4, [sp, #28]
    662c:	a808      	add	r0, sp, #32
    662e:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    6632:	9406      	str	r4, [sp, #24]
    6634:	f993 4021 	ldrsb.w	r4, [r3, #33]	; 0x21
    6638:	9405      	str	r4, [sp, #20]
    663a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    663e:	9304      	str	r3, [sp, #16]
    6640:	f015 f828 	bl	1b694 <snprintf>
           lsLeftSide, lsRightSide,
           lineValid, lineValidCnt,
           crossing, crossingLineCnt
  );
  usb.send(reply);
    6644:	a908      	add	r1, sp, #32
    6646:	4803      	ldr	r0, [pc, #12]	; (6654 <ULineSensor::sendLineSensorPosition()+0x50>)
    6648:	f005 ff68 	bl	c51c <UUSB::send(char const*)>
}
    664c:	b02e      	add	sp, #184	; 0xb8
    664e:	bd10      	pop	{r4, pc}
    6650:	20003430 	.word	0x20003430
    6654:	2000eab8 	.word	0x2000eab8

00006658 <ULineSensor::sendStatusLineSensorLimitsWhite()>:
//////////////////////////////////////////////

void ULineSensor::sendStatusLineSensorLimitsWhite()
{
    6658:	4603      	mov	r3, r0
  const int MRL = 70;
  char reply[MRL];
  snprintf(reply, MRL, "liw %d %d %d %d %d %d %d %d\r\n" ,
    665a:	4a12      	ldr	r2, [pc, #72]	; (66a4 <ULineSensor::sendStatusLineSensorLimitsWhite()+0x4c>)
    665c:	2146      	movs	r1, #70	; 0x46
{
    665e:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "liw %d %d %d %d %d %d %d %d\r\n" ,
    6660:	f9b3 404e 	ldrsh.w	r4, [r3, #78]	; 0x4e
{
    6664:	b09a      	sub	sp, #104	; 0x68
  snprintf(reply, MRL, "liw %d %d %d %d %d %d %d %d\r\n" ,
    6666:	9406      	str	r4, [sp, #24]
    6668:	a808      	add	r0, sp, #32
    666a:	f9b3 404c 	ldrsh.w	r4, [r3, #76]	; 0x4c
    666e:	9405      	str	r4, [sp, #20]
    6670:	f9b3 404a 	ldrsh.w	r4, [r3, #74]	; 0x4a
    6674:	9404      	str	r4, [sp, #16]
    6676:	f9b3 4048 	ldrsh.w	r4, [r3, #72]	; 0x48
    667a:	9403      	str	r4, [sp, #12]
    667c:	f9b3 4046 	ldrsh.w	r4, [r3, #70]	; 0x46
    6680:	9402      	str	r4, [sp, #8]
    6682:	f9b3 4044 	ldrsh.w	r4, [r3, #68]	; 0x44
    6686:	9401      	str	r4, [sp, #4]
    6688:	f9b3 4042 	ldrsh.w	r4, [r3, #66]	; 0x42
    668c:	9400      	str	r4, [sp, #0]
    668e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
    6692:	f014 ffff 	bl	1b694 <snprintf>
           whiteLevel[4],
           whiteLevel[5],
           whiteLevel[6],
           whiteLevel[7]
  );
  usb.send(reply);
    6696:	a908      	add	r1, sp, #32
    6698:	4803      	ldr	r0, [pc, #12]	; (66a8 <ULineSensor::sendStatusLineSensorLimitsWhite()+0x50>)
    669a:	f005 ff3f 	bl	c51c <UUSB::send(char const*)>
}
    669e:	b01a      	add	sp, #104	; 0x68
    66a0:	bd10      	pop	{r4, pc}
    66a2:	bf00      	nop
    66a4:	2000346c 	.word	0x2000346c
    66a8:	2000eab8 	.word	0x2000eab8

000066ac <ULineSensor::sendStatusLineSensorLimitsBlack()>:

void ULineSensor::sendStatusLineSensorLimitsBlack()
{
    66ac:	4603      	mov	r3, r0
  const int MRL = 70;
  char reply[MRL];
  snprintf(reply, MRL, "lib %d %d %d %d %d %d %d %d\r\n" ,
    66ae:	4a12      	ldr	r2, [pc, #72]	; (66f8 <ULineSensor::sendStatusLineSensorLimitsBlack()+0x4c>)
    66b0:	2146      	movs	r1, #70	; 0x46
{
    66b2:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "lib %d %d %d %d %d %d %d %d\r\n" ,
    66b4:	f9b3 405e 	ldrsh.w	r4, [r3, #94]	; 0x5e
{
    66b8:	b09a      	sub	sp, #104	; 0x68
  snprintf(reply, MRL, "lib %d %d %d %d %d %d %d %d\r\n" ,
    66ba:	9406      	str	r4, [sp, #24]
    66bc:	a808      	add	r0, sp, #32
    66be:	f9b3 405c 	ldrsh.w	r4, [r3, #92]	; 0x5c
    66c2:	9405      	str	r4, [sp, #20]
    66c4:	f9b3 405a 	ldrsh.w	r4, [r3, #90]	; 0x5a
    66c8:	9404      	str	r4, [sp, #16]
    66ca:	f9b3 4058 	ldrsh.w	r4, [r3, #88]	; 0x58
    66ce:	9403      	str	r4, [sp, #12]
    66d0:	f9b3 4056 	ldrsh.w	r4, [r3, #86]	; 0x56
    66d4:	9402      	str	r4, [sp, #8]
    66d6:	f9b3 4054 	ldrsh.w	r4, [r3, #84]	; 0x54
    66da:	9401      	str	r4, [sp, #4]
    66dc:	f9b3 4052 	ldrsh.w	r4, [r3, #82]	; 0x52
    66e0:	9400      	str	r4, [sp, #0]
    66e2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
    66e6:	f014 ffd5 	bl	1b694 <snprintf>
           blackLevel[4],
           blackLevel[5],
           blackLevel[6],
           blackLevel[7]
  );
  usb.send(reply);
    66ea:	a908      	add	r1, sp, #32
    66ec:	4803      	ldr	r0, [pc, #12]	; (66fc <ULineSensor::sendStatusLineSensorLimitsBlack()+0x50>)
    66ee:	f005 ff15 	bl	c51c <UUSB::send(char const*)>
}
    66f2:	b01a      	add	sp, #104	; 0x68
    66f4:	bd10      	pop	{r4, pc}
    66f6:	bf00      	nop
    66f8:	2000344c 	.word	0x2000344c
    66fc:	2000eab8 	.word	0x2000eab8

00006700 <ULineSensor::sendStatusLineSensor(bool)>:

//////////////////////////////////////////////

void ULineSensor::sendStatusLineSensor(bool normalized)
{
    6700:	b570      	push	{r4, r5, r6, lr}
    6702:	4604      	mov	r4, r0
    6704:	b0b4      	sub	sp, #208	; 0xd0
  const int MRL = 170;
  char reply[MRL];
//   sendLineSensorPosition();
  if (normalized)
    6706:	2900      	cmp	r1, #0
    6708:	d067      	beq.n	67da <ULineSensor::sendStatusLineSensor(bool)+0xda>
  { // compensated for calibration and tilt,
    // value in range 0..1
    int n = lineSensorValueSumCnt;
    if (n < 1)
    670a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
      n = 1;
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    670e:	ae09      	add	r6, sp, #36	; 0x24
             int(lineSensorValueSum[0]/n * 1000),
    6710:	edd0 2a2a 	vldr	s5, [r0, #168]	; 0xa8
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    6714:	21aa      	movs	r1, #170	; 0xaa
    6716:	2b01      	cmp	r3, #1
             int(lineSensorValueSum[2]/n * 1000),
             int(lineSensorValueSum[3]/n * 1000),
             int(lineSensorValueSum[4]/n * 1000),
             int(lineSensorValueSum[5]/n * 1000),
             int(lineSensorValueSum[6]/n * 1000),
             int(lineSensorValueSum[7]/n * 1000), n
    6718:	ed90 4a31 	vldr	s8, [r0, #196]	; 0xc4
             int(lineSensorValueSum[6]/n * 1000),
    671c:	edd0 4a30 	vldr	s9, [r0, #192]	; 0xc0
    6720:	bfb8      	it	lt
    6722:	2301      	movlt	r3, #1
             int(lineSensorValueSum[5]/n * 1000),
    6724:	ed90 5a2f 	vldr	s10, [r0, #188]	; 0xbc
             int(lineSensorValueSum[4]/n * 1000),
    6728:	edd0 5a2e 	vldr	s11, [r0, #184]	; 0xb8
             int(lineSensorValueSum[0]/n * 1000),
    672c:	ee07 3a90 	vmov	s15, r3
             int(lineSensorValueSum[3]/n * 1000),
    6730:	ed90 6a2d 	vldr	s12, [r0, #180]	; 0xb4
             int(lineSensorValueSum[2]/n * 1000),
    6734:	edd0 6a2c 	vldr	s13, [r0, #176]	; 0xb0
             int(lineSensorValueSum[0]/n * 1000),
    6738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
             int(lineSensorValueSum[1]/n * 1000),
    673c:	ed90 3a2b 	vldr	s6, [r0, #172]	; 0xac
             int(lineSensorValueSum[0]/n * 1000),
    6740:	eddf 7a47 	vldr	s15, [pc, #284]	; 6860 <ULineSensor::sendStatusLineSensor(bool)+0x160>
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    6744:	4630      	mov	r0, r6
    6746:	4a47      	ldr	r2, [pc, #284]	; (6864 <ULineSensor::sendStatusLineSensor(bool)+0x164>)
             int(lineSensorValueSum[7]/n * 1000), n
    6748:	eec4 3a07 	vdiv.f32	s7, s8, s14
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    674c:	9307      	str	r3, [sp, #28]
             int(lineSensorValueSum[6]/n * 1000),
    674e:	ee84 4a87 	vdiv.f32	s8, s9, s14
             int(lineSensorValueSum[5]/n * 1000),
    6752:	eec5 4a07 	vdiv.f32	s9, s10, s14
             int(lineSensorValueSum[4]/n * 1000),
    6756:	ee85 5a87 	vdiv.f32	s10, s11, s14
             int(lineSensorValueSum[3]/n * 1000),
    675a:	eec6 5a07 	vdiv.f32	s11, s12, s14
             int(lineSensorValueSum[2]/n * 1000),
    675e:	ee86 6a87 	vdiv.f32	s12, s13, s14
             int(lineSensorValueSum[1]/n * 1000),
    6762:	eec3 6a07 	vdiv.f32	s13, s6, s14
             int(lineSensorValueSum[0]/n * 1000),
    6766:	ee82 3a87 	vdiv.f32	s6, s5, s14
             int(lineSensorValueSum[7]/n * 1000), n
    676a:	ee63 3aa7 	vmul.f32	s7, s7, s15
             int(lineSensorValueSum[6]/n * 1000),
    676e:	ee24 4a27 	vmul.f32	s8, s8, s15
             int(lineSensorValueSum[5]/n * 1000),
    6772:	ee64 4aa7 	vmul.f32	s9, s9, s15
             int(lineSensorValueSum[4]/n * 1000),
    6776:	ee25 5a27 	vmul.f32	s10, s10, s15
             int(lineSensorValueSum[3]/n * 1000),
    677a:	ee65 5aa7 	vmul.f32	s11, s11, s15
             int(lineSensorValueSum[2]/n * 1000),
    677e:	ee26 6a27 	vmul.f32	s12, s12, s15
             int(lineSensorValueSum[1]/n * 1000),
    6782:	ee26 7aa7 	vmul.f32	s14, s13, s15
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    6786:	eefd 3ae3 	vcvt.s32.f32	s7, s7
    678a:	eebd 4ac4 	vcvt.s32.f32	s8, s8
    678e:	eefd 4ae4 	vcvt.s32.f32	s9, s9
    6792:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    6796:	edcd 3a06 	vstr	s7, [sp, #24]
             int(lineSensorValueSum[0]/n * 1000),
    679a:	ee63 7a27 	vmul.f32	s15, s6, s15
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    679e:	ed8d 4a05 	vstr	s8, [sp, #20]
    67a2:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    67a6:	edcd 4a04 	vstr	s9, [sp, #16]
    67aa:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    67ae:	ed8d 5a03 	vstr	s10, [sp, #12]
    67b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    67b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    67ba:	edcd 5a02 	vstr	s11, [sp, #8]
    67be:	ed8d 6a01 	vstr	s12, [sp, #4]
    67c2:	ed8d 7a00 	vstr	s14, [sp]
    67c6:	ee17 3a90 	vmov	r3, s15
    67ca:	f014 ff63 	bl	1b694 <snprintf>
    );
    adcLSDACnt = 0;
    for (int i = 0; i < 8; i++)
      adcLSDA[i] = 0;
  }
  usb.send(reply);
    67ce:	4631      	mov	r1, r6
    67d0:	4825      	ldr	r0, [pc, #148]	; (6868 <ULineSensor::sendStatusLineSensor(bool)+0x168>)
    67d2:	f005 fea3 	bl	c51c <UUSB::send(char const*)>
    // send also position
}
    67d6:	b034      	add	sp, #208	; 0xd0
    67d8:	bd70      	pop	{r4, r5, r6, pc}
    if (adcLSDACnt < 1)
    67da:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
    67de:	460d      	mov	r5, r1
    snprintf(reply, MRL, "liv %ld %ld %ld %ld %ld %ld %ld %ld %d\r\n" ,
    67e0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
    67e4:	ae09      	add	r6, sp, #36	; 0x24
    67e6:	2a01      	cmp	r2, #1
    67e8:	bfb8      	it	lt
    67ea:	2201      	movlt	r2, #1
    67ec:	9207      	str	r2, [sp, #28]
    67ee:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    67f2:	fb91 f1f2 	sdiv	r1, r1, r2
    67f6:	9106      	str	r1, [sp, #24]
    67f8:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
    67fc:	fb91 f1f2 	sdiv	r1, r1, r2
    6800:	9105      	str	r1, [sp, #20]
    6802:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    6806:	fb91 f1f2 	sdiv	r1, r1, r2
    680a:	9104      	str	r1, [sp, #16]
    680c:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    6810:	fb91 f1f2 	sdiv	r1, r1, r2
    6814:	9103      	str	r1, [sp, #12]
    6816:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
    681a:	fb91 f1f2 	sdiv	r1, r1, r2
    681e:	9102      	str	r1, [sp, #8]
    6820:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
    6824:	fb91 f1f2 	sdiv	r1, r1, r2
    6828:	9101      	str	r1, [sp, #4]
    682a:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    682e:	4630      	mov	r0, r6
    6830:	fb91 f1f2 	sdiv	r1, r1, r2
    6834:	fb93 f3f2 	sdiv	r3, r3, r2
    6838:	9100      	str	r1, [sp, #0]
    683a:	21aa      	movs	r1, #170	; 0xaa
    683c:	4a0b      	ldr	r2, [pc, #44]	; (686c <ULineSensor::sendStatusLineSensor(bool)+0x16c>)
    683e:	f014 ff29 	bl	1b694 <snprintf>
      adcLSDA[i] = 0;
    6842:	2220      	movs	r2, #32
    6844:	4629      	mov	r1, r5
    6846:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    adcLSDACnt = 0;
    684a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
      adcLSDA[i] = 0;
    684e:	f015 f8f3 	bl	1ba38 <memset>
  usb.send(reply);
    6852:	4631      	mov	r1, r6
    6854:	4804      	ldr	r0, [pc, #16]	; (6868 <ULineSensor::sendStatusLineSensor(bool)+0x168>)
    6856:	f005 fe61 	bl	c51c <UUSB::send(char const*)>
}
    685a:	b034      	add	sp, #208	; 0xd0
    685c:	bd70      	pop	{r4, r5, r6, pc}
    685e:	bf00      	nop
    6860:	447a0000 	.word	0x447a0000
    6864:	200033e0 	.word	0x200033e0
    6868:	2000eab8 	.word	0x2000eab8
    686c:	20003404 	.word	0x20003404

00006870 <ULineSensor::sendLineSensorGain()>:


void ULineSensor::sendLineSensorGain()
{
    6870:	4603      	mov	r3, r0
  const int MRL = 120;
  char reply[MRL];
  //   sendLineSensorPosition();
  //if (useLineSensor)
  snprintf(reply, MRL, "#lig %g %g %g %g %g %g %g %g\r\n" ,
    6872:	4a1f      	ldr	r2, [pc, #124]	; (68f0 <ULineSensor::sendLineSensorGain()+0x80>)
    6874:	2178      	movs	r1, #120	; 0x78
    6876:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
    687a:	ed93 1a1e 	vldr	s2, [r3, #120]	; 0x78
    687e:	ed93 2a1d 	vldr	s4, [r3, #116]	; 0x74
    6882:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    6886:	ed93 3a1c 	vldr	s6, [r3, #112]	; 0x70
    688a:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    688e:	ed93 4a1b 	vldr	s8, [r3, #108]	; 0x6c
    6892:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    6896:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
    689a:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    689e:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
    68a2:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    68a6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    68aa:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    68ae:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    68b2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    68b6:	b500      	push	{lr}
    68b8:	b0af      	sub	sp, #188	; 0xbc
  snprintf(reply, MRL, "#lig %g %g %g %g %g %g %g %g\r\n" ,
    68ba:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
    68be:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
    68c2:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
    68c6:	ed8d 3b08 	vstr	d3, [sp, #32]
    68ca:	ed8d 4b06 	vstr	d4, [sp, #24]
    68ce:	ed8d 5b04 	vstr	d5, [sp, #16]
    68d2:	ed8d 6b02 	vstr	d6, [sp, #8]
    68d6:	ed8d 7b00 	vstr	d7, [sp]
    68da:	a810      	add	r0, sp, #64	; 0x40
    68dc:	f014 feda 	bl	1b694 <snprintf>
           lsGain[4],
           lsGain[5],
           lsGain[6],
           lsGain[7]
  );
  usb.send(reply);
    68e0:	a910      	add	r1, sp, #64	; 0x40
    68e2:	4804      	ldr	r0, [pc, #16]	; (68f4 <ULineSensor::sendLineSensorGain()+0x84>)
    68e4:	f005 fe1a 	bl	c51c <UUSB::send(char const*)>
}
    68e8:	b02f      	add	sp, #188	; 0xbc
    68ea:	f85d fb04 	ldr.w	pc, [sp], #4
    68ee:	bf00      	nop
    68f0:	2000339c 	.word	0x2000339c
    68f4:	2000eab8 	.word	0x2000eab8

000068f8 <ULineSensor::sendData(int)>:
  switch (item)
    68f8:	2906      	cmp	r1, #6
    68fa:	d815      	bhi.n	6928 <ULineSensor::sendData(int)+0x30>
    68fc:	e8df f001 	tbb	[pc, r1]
    6900:	0d0b0906 	.word	0x0d0b0906
    6904:	120f      	.short	0x120f
    6906:	04          	.byte	0x04
    6907:	00          	.byte	0x00
      sendLineSensorPosition();
    6908:	f7ff be7c 	b.w	6604 <ULineSensor::sendLineSensorPosition()>
      sendStatusLineSensor(false);
    690c:	2100      	movs	r1, #0
    690e:	f7ff bef7 	b.w	6700 <ULineSensor::sendStatusLineSensor(bool)>
      sendStatusLineSensorLimitsWhite();
    6912:	f7ff bea1 	b.w	6658 <ULineSensor::sendStatusLineSensorLimitsWhite()>
      sendStatusLineSensorLimitsBlack();
    6916:	f7ff bec9 	b.w	66ac <ULineSensor::sendStatusLineSensorLimitsBlack()>
      sendLineSensorGain();
    691a:	f7ff bfa9 	b.w	6870 <ULineSensor::sendLineSensorGain()>
      sendStatusLineSensor(true);
    691e:	2101      	movs	r1, #1
    6920:	f7ff beee 	b.w	6700 <ULineSensor::sendStatusLineSensor(bool)>
      sendLineSensorStatus();
    6924:	f7ff be42 	b.w	65ac <ULineSensor::sendLineSensorStatus()>
      usb.send("# line sensor error\n");
    6928:	4901      	ldr	r1, [pc, #4]	; (6930 <ULineSensor::sendData(int)+0x38>)
    692a:	4802      	ldr	r0, [pc, #8]	; (6934 <ULineSensor::sendData(int)+0x3c>)
    692c:	f005 bdf6 	b.w	c51c <UUSB::send(char const*)>
    6930:	20003720 	.word	0x20003720
    6934:	2000eab8 	.word	0x2000eab8

00006938 <ULineSensor::normalize()>:

//////////////////////////////////////////////


void ULineSensor::normalize(void)
{
    6938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // float lineValMin = 1.0;
  // float lineValMax = 0.0;
  float lsv;
  if (lineSensorValueSumCnt > 300)
    693c:	f8d0 70c8 	ldr.w	r7, [r0, #200]	; 0xc8
{
    6940:	4604      	mov	r4, r0
  if (lineSensorValueSumCnt > 300)
    6942:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
{
    6946:	ed2d 8b04 	vpush	{d8-d9}
  if (lineSensorValueSumCnt > 300)
    694a:	f300 8087 	bgt.w	6a5c <ULineSensor::normalize()+0x124>
    // save normalized value
    lineSensorValue[i] = lsv;
    // also average for subscriptions
    lineSensorValueSum[i] += lsv;
  }
  lineSensorValueSumCnt += 1;
    694e:	3701      	adds	r7, #1
      if (encoder.pose[3] >= 0)
    6950:	4b4b      	ldr	r3, [pc, #300]	; (6a80 <ULineSensor::normalize()+0x148>)
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6952:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
          lsv /= (1.0 + 2.0 * encoder.pose[3]);
    6956:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
    if (lsTiltCompensate)
    695a:	7da6      	ldrb	r6, [r4, #22]
          lsv /= (1.0 + 1.5 * encoder.pose[3]);
    695c:	eeb7 4b08 	vmov.f64	d4, #120	; 0x3fc00000  1.5
      if (encoder.pose[3] >= 0)
    6960:	edd3 0a16 	vldr	s1, [r3, #88]	; 0x58
          lsv /= (1.0 + 2.5 * encoder.pose[3]);
    6964:	eeb0 5b04 	vmov.f64	d5, #4	; 0x40200000  2.5
    6968:	4d46      	ldr	r5, [pc, #280]	; (6a84 <ULineSensor::normalize()+0x14c>)
    696a:	f104 014e 	add.w	r1, r4, #78	; 0x4e
    696e:	f104 0260 	add.w	r2, r4, #96	; 0x60
      if (encoder.pose[3] >= 0)
    6972:	2000      	movs	r0, #0
        if (i == 0 or i == 7)
    6974:	f04f 0c81 	mov.w	ip, #129	; 0x81
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6978:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 6a70 <ULineSensor::normalize()+0x138>
          lsv /= (1.0 + 1.8 * encoder.pose[3]);
    697c:	ed9f 2b3e 	vldr	d2, [pc, #248]	; 6a78 <ULineSensor::normalize()+0x140>
    6980:	e01c      	b.n	69bc <ULineSensor::normalize()+0x84>
        if (i == 0 or i == 7)
    6982:	fa2c f300 	lsr.w	r3, ip, r0
          lsv /= (1.0 + 2.5 * encoder.pose[3]);
    6986:	eeb7 8ae0 	vcvt.f64.f32	d8, s1
    698a:	eeb0 9b46 	vmov.f64	d9, d6
        if (i == 0 or i == 7)
    698e:	07db      	lsls	r3, r3, #31
          lsv /= (1.0 + 2.5 * encoder.pose[3]);
    6990:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6994:	bf4c      	ite	mi
    6996:	eea8 9b05 	vfmami.f64	d9, d8, d5
          lsv /= (1.0 + 1.5 * encoder.pose[3]);
    699a:	eea8 9b04 	vfmapl.f64	d9, d8, d4
    699e:	ee87 8b09 	vdiv.f64	d8, d7, d9
    69a2:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    lineSensorValueSum[i] += lsv;
    69a6:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
  for (int i = 0; i < 8; i++)
    69aa:	3001      	adds	r0, #1
    lineSensorValue[i] = lsv;
    69ac:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
    lineSensorValueSum[i] += lsv;
    69b0:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i = 0; i < 8; i++)
    69b4:	2808      	cmp	r0, #8
    lineSensorValueSum[i] += lsv;
    69b6:	edc2 7a11 	vstr	s15, [r2, #68]	; 0x44
  for (int i = 0; i < 8; i++)
    69ba:	d049      	beq.n	6a50 <ULineSensor::normalize()+0x118>
    int16_t v = ad.adcLSH[i] - ad.adcLSL[i];
    69bc:	8a6b      	ldrh	r3, [r5, #18]
    69be:	f835 8f02 	ldrh.w	r8, [r5, #2]!
    adcLSD[i] = (v + adcLSD[i])/2;
    69c2:	f9b1 e07e 	ldrsh.w	lr, [r1, #126]	; 0x7e
    int16_t v = ad.adcLSH[i] - ad.adcLSL[i];
    69c6:	eba3 0308 	sub.w	r3, r3, r8
    lsv = v * lsGain[i];
    69ca:	ecf2 7a01 	vldmia	r2!, {s15}
    adcLSD[i] = (v + adcLSD[i])/2;
    69ce:	fa0e f383 	sxtah	r3, lr, r3
    69d2:	2b00      	cmp	r3, #0
    69d4:	bfb8      	it	lt
    69d6:	3301      	addlt	r3, #1
    69d8:	105b      	asrs	r3, r3, #1
    69da:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
    v = adcLSD[i] - blackLevel[i];
    69de:	f831 ef02 	ldrh.w	lr, [r1, #2]!
    69e2:	eba3 030e 	sub.w	r3, r3, lr
    lsv = v * lsGain[i];
    69e6:	b21b      	sxth	r3, r3
    69e8:	ee07 3a10 	vmov	s14, r3
    69ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    69f0:	ee27 7a27 	vmul.f32	s14, s14, s15
    if (lsTiltCompensate)
    69f4:	2e00      	cmp	r6, #0
    69f6:	d0d6      	beq.n	69a6 <ULineSensor::normalize()+0x6e>
      if (encoder.pose[3] >= 0)
    69f8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    69fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a00:	dabf      	bge.n	6982 <ULineSensor::normalize()+0x4a>
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6a02:	eeb7 8ae0 	vcvt.f64.f32	d8, s1
    6a06:	eeb0 9b46 	vmov.f64	d9, d6
    6a0a:	2807      	cmp	r0, #7
    6a0c:	d817      	bhi.n	6a3e <ULineSensor::normalize()+0x106>
    6a0e:	e8df f000 	tbb	[pc, r0]
    6a12:	040d      	.short	0x040d
    6a14:	16161616 	.word	0x16161616
    6a18:	0d04      	.short	0x0d04
          lsv /= (1.0 + 1.8 * encoder.pose[3]);
    6a1a:	eea8 9b02 	vfma.f64	d9, d8, d2
    6a1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6a22:	ee87 8b09 	vdiv.f64	d8, d7, d9
    6a26:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    6a2a:	e7bc      	b.n	69a6 <ULineSensor::normalize()+0x6e>
          lsv /= (1.0 + 2.0 * encoder.pose[3]);
    6a2c:	eea8 9b03 	vfma.f64	d9, d8, d3
    6a30:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6a34:	ee87 8b09 	vdiv.f64	d8, d7, d9
    6a38:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    6a3c:	e7b3      	b.n	69a6 <ULineSensor::normalize()+0x6e>
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6a3e:	eea8 9b01 	vfma.f64	d9, d8, d1
    6a42:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6a46:	ee87 8b09 	vdiv.f64	d8, d7, d9
    6a4a:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    6a4e:	e7aa      	b.n	69a6 <ULineSensor::normalize()+0x6e>
}
    6a50:	ecbd 8b04 	vpop	{d8-d9}
  lineSensorValueSumCnt += 1;
    6a54:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
}
    6a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      lineSensorValueSum[i] = 0;
    6a5c:	2220      	movs	r2, #32
    6a5e:	2100      	movs	r1, #0
    6a60:	30a8      	adds	r0, #168	; 0xa8
    6a62:	2701      	movs	r7, #1
    6a64:	f014 ffe8 	bl	1ba38 <memset>
    6a68:	e772      	b.n	6950 <ULineSensor::normalize()+0x18>
    6a6a:	bf00      	nop
    6a6c:	f3af 8000 	nop.w
    6a70:	9999999a 	.word	0x9999999a
    6a74:	3ff99999 	.word	0x3ff99999
    6a78:	cccccccd 	.word	0xcccccccd
    6a7c:	3ffccccc 	.word	0x3ffccccc
    6a80:	2000dc34 	.word	0x2000dc34
    6a84:	2000d8be 	.word	0x2000d8be

00006a88 <ULineSensor::tick()>:
  tickCnt++;
    6a88:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{ //
    6a8c:	b570      	push	{r4, r5, r6, lr}
  tickCnt++;
    6a8e:	3301      	adds	r3, #1
  bool toOn = lineSensorOn and not lineSensorIsOn;
    6a90:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
{ //
    6a94:	4604      	mov	r4, r0
  tickCnt++;
    6a96:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  bool toOn = lineSensorOn and not lineSensorIsOn;
    6a9a:	b3bd      	cbz	r5, 6b0c <ULineSensor::tick()+0x84>
    6a9c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    6aa0:	bba3      	cbnz	r3, 6b0c <ULineSensor::tick()+0x84>
  if (ls.lsPowerHigh and (pinModeLed == INPUT or toOn))
    6aa2:	4b38      	ldr	r3, [pc, #224]	; (6b84 <ULineSensor::tick()+0xfc>)
    6aa4:	7d5b      	ldrb	r3, [r3, #21]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d05e      	beq.n	6b68 <ULineSensor::tick()+0xe0>
    pinMode(highPowerPin, OUTPUT); // Line sensor power control
    6aaa:	2101      	movs	r1, #1
    6aac:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    6ab0:	f00f fa50 	bl	15f54 <pinMode>
  if (adcLSDACnt > 1000)
    6ab4:	f8d4 60fc 	ldr.w	r6, [r4, #252]	; 0xfc
    pinModeLed = OUTPUT;
    6ab8:	2301      	movs	r3, #1
    lineSensorIsOn = lineSensorOn;
    6aba:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
  if (adcLSDACnt > 1000)
    6abe:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    pinModeLed = OUTPUT;
    6ac2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    lineSensorIsOn = lineSensorOn;
    6ac6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  if (adcLSDACnt > 1000)
    6aca:	dc2b      	bgt.n	6b24 <ULineSensor::tick()+0x9c>
    6acc:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
    6ad0:	482d      	ldr	r0, [pc, #180]	; (6b88 <ULineSensor::tick()+0x100>)
    6ad2:	f104 0ef8 	add.w	lr, r4, #248	; 0xf8
      adcLSDA[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    6ad6:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    6ada:	f930 cf02 	ldrsh.w	ip, [r0, #2]!
    6ade:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6ae2:	eba1 010c 	sub.w	r1, r1, ip
    for (int i = 0; i < 8; i++)
    6ae6:	459e      	cmp	lr, r3
      adcLSDA[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    6ae8:	440a      	add	r2, r1
    6aea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
    6aec:	d1f3      	bne.n	6ad6 <ULineSensor::tick()+0x4e>
    adcLSDACnt++;
    6aee:	3601      	adds	r6, #1
    adcLSDACnt = 1;
    6af0:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
  if (lineSensorOn)
    6af4:	b34d      	cbz	r5, 6b4a <ULineSensor::tick()+0xc2>
    calibrateWhiteNow();
    6af6:	4620      	mov	r0, r4
    6af8:	f7ff fcf0 	bl	64dc <ULineSensor::calibrateWhiteNow()>
    normalize();
    6afc:	4620      	mov	r0, r4
    6afe:	f7ff ff1b 	bl	6938 <ULineSensor::normalize()>
    lineDetect();
    6b02:	4620      	mov	r0, r4
}
    6b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lineDetect();
    6b08:	f7ff bc36 	b.w	6378 <ULineSensor::lineDetect()>
  if (ls.lsPowerHigh and (pinModeLed == INPUT or toOn))
    6b0c:	4b1d      	ldr	r3, [pc, #116]	; (6b84 <ULineSensor::tick()+0xfc>)
    6b0e:	7d5b      	ldrb	r3, [r3, #21]
    6b10:	b333      	cbz	r3, 6b60 <ULineSensor::tick()+0xd8>
    6b12:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    6b16:	2b00      	cmp	r3, #0
    6b18:	d0c7      	beq.n	6aaa <ULineSensor::tick()+0x22>
  if (adcLSDACnt > 1000)
    6b1a:	f8d4 60fc 	ldr.w	r6, [r4, #252]	; 0xfc
    6b1e:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    6b22:	ddd3      	ble.n	6acc <ULineSensor::tick()+0x44>
    6b24:	4918      	ldr	r1, [pc, #96]	; (6b88 <ULineSensor::tick()+0x100>)
    6b26:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
    6b2a:	f104 06f8 	add.w	r6, r4, #248	; 0xf8
      adcLSDA[i] = ad.adcLSH[i] - ad.adcLSL[i];;
    6b2e:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
    6b32:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
    6b36:	1a1b      	subs	r3, r3, r0
    6b38:	f842 3f04 	str.w	r3, [r2, #4]!
    for (int i = 0; i < 8; i++)
    6b3c:	4296      	cmp	r6, r2
    6b3e:	d1f6      	bne.n	6b2e <ULineSensor::tick()+0xa6>
    6b40:	2601      	movs	r6, #1
    adcLSDACnt = 1;
    6b42:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
  if (lineSensorOn)
    6b46:	2d00      	cmp	r5, #0
    6b48:	d1d5      	bne.n	6af6 <ULineSensor::tick()+0x6e>
  else if (calibrateWhite > 0)
    6b4a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6b4e:	2b00      	cmp	r3, #0
    6b50:	dd05      	ble.n	6b5e <ULineSensor::tick()+0xd6>
    lineSensorOn = true;
    6b52:	2201      	movs	r2, #1
    lineSensorOnCnt = 7;
    6b54:	2307      	movs	r3, #7
    lineSensorOn = true;
    6b56:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    lineSensorOnCnt = 7;
    6b5a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
}
    6b5e:	bd70      	pop	{r4, r5, r6, pc}
  else if (not ls.lsPowerHigh and (pinModeLed == OUTPUT or toOn))
    6b60:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    6b64:	2b00      	cmp	r3, #0
    6b66:	d0d8      	beq.n	6b1a <ULineSensor::tick()+0x92>
    pinMode(highPowerPin, INPUT); // Line sensor power control
    6b68:	2100      	movs	r1, #0
    6b6a:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    6b6e:	f00f f9f1 	bl	15f54 <pinMode>
    pinModeLed = INPUT;
    6b72:	2300      	movs	r3, #0
    lineSensorIsOn = lineSensorOn;
    6b74:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
    pinModeLed = INPUT;
    6b78:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    lineSensorIsOn = lineSensorOn;
    6b7c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    6b80:	e7cb      	b.n	6b1a <ULineSensor::tick()+0x92>
    6b82:	bf00      	nop
    6b84:	2000e384 	.word	0x2000e384
    6b88:	2000d8be 	.word	0x2000d8be
    6b8c:	00000000 	.word	0x00000000

00006b90 <ULineSensor::eePromSaveLinesensor()>:
void ULineSensor::eePromSaveLinesensor()
{
  char v = 0x00;
  if (lineSensorOn)
    v |= 0x01;
  if (lsIsWhite)
    6b90:	7d03      	ldrb	r3, [r0, #20]
  char v = 0x00;
    6b92:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
{
    6b96:	b570      	push	{r4, r5, r6, lr}
    6b98:	4605      	mov	r5, r0
    6b9a:	b082      	sub	sp, #8
  if (lsIsWhite)
    6b9c:	b10b      	cbz	r3, 6ba2 <ULineSensor::eePromSaveLinesensor()+0x12>
    v |= 0x02;
    6b9e:	f041 0102 	orr.w	r1, r1, #2
  if (lsPowerHigh)
    6ba2:	7d6b      	ldrb	r3, [r5, #21]
    6ba4:	b10b      	cbz	r3, 6baa <ULineSensor::eePromSaveLinesensor()+0x1a>
    v |= 0x04;
    6ba6:	f041 0104 	orr.w	r1, r1, #4
  if (lsTiltCompensate)
    6baa:	7dab      	ldrb	r3, [r5, #22]
    6bac:	b10b      	cbz	r3, 6bb2 <ULineSensor::eePromSaveLinesensor()+0x22>
    v |= 0x08;
    6bae:	f041 0108 	orr.w	r1, r1, #8
  if (wideSensor)
    6bb2:	f895 3101 	ldrb.w	r3, [r5, #257]	; 0x101
    6bb6:	b10b      	cbz	r3, 6bbc <ULineSensor::eePromSaveLinesensor()+0x2c>
    v |= 0x10;
    6bb8:	f041 0110 	orr.w	r1, r1, #16
  if (swapLeftRight)
    6bbc:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
    6bc0:	b10b      	cbz	r3, 6bc6 <ULineSensor::eePromSaveLinesensor()+0x36>
    v |= 0x20;
    6bc2:	f041 0120 	orr.w	r1, r1, #32
  eeConfig.pushByte(v);
    6bc6:	4832      	ldr	r0, [pc, #200]	; (6c90 <ULineSensor::eePromSaveLinesensor()+0x100>)
    6bc8:	f7fc fa2a 	bl	3020 <EEConfig::pushByte(unsigned char)>
  // limit value space (error values)
  if (crossingThreshold >= 1 or crossingThreshold < 0.3)
    6bcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6bd0:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
    6bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bdc:	db32      	blt.n	6c44 <ULineSensor::eePromSaveLinesensor()+0xb4>
    crossingThreshold = 0.8;
    6bde:	4b2d      	ldr	r3, [pc, #180]	; (6c94 <ULineSensor::eePromSaveLinesensor()+0x104>)
    6be0:	21a0      	movs	r1, #160	; 0xa0
    6be2:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (lineValidThreshold >= 1 or lineValidThreshold < 0.3)
    6be4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6be8:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
    6bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bf4:	db3a      	blt.n	6c6c <ULineSensor::eePromSaveLinesensor()+0xdc>
    lineValidThreshold = 0.85;
    6bf6:	4b28      	ldr	r3, [pc, #160]	; (6c98 <ULineSensor::eePromSaveLinesensor()+0x108>)
    6bf8:	636b      	str	r3, [r5, #52]	; 0x34
  eeConfig.pushByte(int(crossingThreshold*200.0));
    6bfa:	4825      	ldr	r0, [pc, #148]	; (6c90 <ULineSensor::eePromSaveLinesensor()+0x100>)
    6bfc:	f105 043e 	add.w	r4, r5, #62	; 0x3e
    6c00:	f7fc fa0e 	bl	3020 <EEConfig::pushByte(unsigned char)>
  eeConfig.pushByte(int(lineValidThreshold*200.0));
    6c04:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
  for (int i = 0; i < 8; i++)
  {
    eeConfig.pushWord(blackLevel[i]);
    6c08:	4e21      	ldr	r6, [pc, #132]	; (6c90 <ULineSensor::eePromSaveLinesensor()+0x100>)
    6c0a:	354e      	adds	r5, #78	; 0x4e
  eeConfig.pushByte(int(lineValidThreshold*200.0));
    6c0c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6c10:	4630      	mov	r0, r6
    6c12:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 6c80 <ULineSensor::eePromSaveLinesensor()+0xf0>
    6c16:	ee27 7b06 	vmul.f64	d7, d7, d6
    6c1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    6c1e:	edcd 7a01 	vstr	s15, [sp, #4]
    6c22:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6c26:	f7fc f9fb 	bl	3020 <EEConfig::pushByte(unsigned char)>
    eeConfig.pushWord(blackLevel[i]);
    6c2a:	8a61      	ldrh	r1, [r4, #18]
    6c2c:	4630      	mov	r0, r6
    6c2e:	f7fc fa13 	bl	3058 <EEConfig::pushWord(unsigned short)>
    eeConfig.pushWord(whiteLevel[i]);
    6c32:	f834 1f02 	ldrh.w	r1, [r4, #2]!
    6c36:	4630      	mov	r0, r6
    6c38:	f7fc fa0e 	bl	3058 <EEConfig::pushWord(unsigned short)>
  for (int i = 0; i < 8; i++)
    6c3c:	42a5      	cmp	r5, r4
    6c3e:	d1f4      	bne.n	6c2a <ULineSensor::eePromSaveLinesensor()+0x9a>
  }
}
    6c40:	b002      	add	sp, #8
    6c42:	bd70      	pop	{r4, r5, r6, pc}
  if (crossingThreshold >= 1 or crossingThreshold < 0.3)
    6c44:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6c48:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 6c88 <ULineSensor::eePromSaveLinesensor()+0xf8>
    6c4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    6c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6c54:	d4c3      	bmi.n	6bde <ULineSensor::eePromSaveLinesensor()+0x4e>
  eeConfig.pushByte(int(crossingThreshold*200.0));
    6c56:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 6c80 <ULineSensor::eePromSaveLinesensor()+0xf0>
    6c5a:	ee27 7b06 	vmul.f64	d7, d7, d6
    6c5e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    6c62:	edcd 7a01 	vstr	s15, [sp, #4]
    6c66:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6c6a:	e7bb      	b.n	6be4 <ULineSensor::eePromSaveLinesensor()+0x54>
  if (lineValidThreshold >= 1 or lineValidThreshold < 0.3)
    6c6c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6c70:	ed9f 6b05 	vldr	d6, [pc, #20]	; 6c88 <ULineSensor::eePromSaveLinesensor()+0xf8>
    6c74:	eeb4 7bc6 	vcmpe.f64	d7, d6
    6c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6c7c:	d5bd      	bpl.n	6bfa <ULineSensor::eePromSaveLinesensor()+0x6a>
    6c7e:	e7ba      	b.n	6bf6 <ULineSensor::eePromSaveLinesensor()+0x66>
    6c80:	00000000 	.word	0x00000000
    6c84:	40690000 	.word	0x40690000
    6c88:	33333333 	.word	0x33333333
    6c8c:	3fd33333 	.word	0x3fd33333
    6c90:	2000dbe8 	.word	0x2000dbe8
    6c94:	3f4ccccd 	.word	0x3f4ccccd
    6c98:	3f59999a 	.word	0x3f59999a

00006c9c <ULineSensor::eePromLoadLinesensor()>:

/////////////////////////////////////////////////////

void ULineSensor::eePromLoadLinesensor()
{
    6c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char v = eeConfig.readByte();
    6ca0:	4e3b      	ldr	r6, [pc, #236]	; (6d90 <ULineSensor::eePromLoadLinesensor()+0xf4>)
{
    6ca2:	4607      	mov	r7, r0
    6ca4:	ed2d 8b02 	vpush	{d8}
  char v = eeConfig.readByte();
    6ca8:	4630      	mov	r0, r6
  lsPowerHigh = (v & 0x04) == 0x04;
  lsTiltCompensate = (v & 0x08) == 0x08;
  wideSensor = (v & 0x10) == 0x10;
  swapLeftRight = (v & 0x20) == 0x20;
  // limit 4 crossing detect
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6caa:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 6d94 <ULineSensor::eePromLoadLinesensor()+0xf8>
  char v = eeConfig.readByte();
    6cae:	f7fc fa03 	bl	30b8 <EEConfig::readByte()>
    6cb2:	4603      	mov	r3, r0
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6cb4:	4630      	mov	r0, r6
  lineSensorOn = (v & 0x01) == 0x01;
    6cb6:	f003 0201 	and.w	r2, r3, #1
    6cba:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
  lsIsWhite = (v & 0x02) == 0x02;
    6cbe:	f3c3 0240 	ubfx	r2, r3, #1, #1
    6cc2:	753a      	strb	r2, [r7, #20]
  lsPowerHigh = (v & 0x04) == 0x04;
    6cc4:	f3c3 0280 	ubfx	r2, r3, #2, #1
    6cc8:	757a      	strb	r2, [r7, #21]
  lsTiltCompensate = (v & 0x08) == 0x08;
    6cca:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    6cce:	75ba      	strb	r2, [r7, #22]
  wideSensor = (v & 0x10) == 0x10;
    6cd0:	f3c3 1200 	ubfx	r2, r3, #4, #1
  swapLeftRight = (v & 0x20) == 0x20;
    6cd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
  wideSensor = (v & 0x10) == 0x10;
    6cd8:	f887 2101 	strb.w	r2, [r7, #257]	; 0x101
  swapLeftRight = (v & 0x20) == 0x20;
    6cdc:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6ce0:	f7fc f9ea 	bl	30b8 <EEConfig::readByte()>
    6ce4:	ee07 0a90 	vmov	s15, r0
  lineValidThreshold = float(eeConfig.readByte()) / 200.0;
    6ce8:	4630      	mov	r0, r6
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    6cee:	ee87 7a88 	vdiv.f32	s14, s15, s16
    6cf2:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
  lineValidThreshold = float(eeConfig.readByte()) / 200.0;
    6cf6:	f7fc f9df 	bl	30b8 <EEConfig::readByte()>
    6cfa:	ee07 0a90 	vmov	s15, r0
  // number of bytes to skip if not robot-specific configuration
  int skipCount = 8*(2 + 2);
  if (not eeConfig.isStringConfig())
    6cfe:	f896 3020 	ldrb.w	r3, [r6, #32]
  lineValidThreshold = float(eeConfig.readByte()) / 200.0;
    6d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
    6d06:	ee87 7a88 	vdiv.f32	s14, s15, s16
    6d0a:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
  if (not eeConfig.isStringConfig())
    6d0e:	bb7b      	cbnz	r3, 6d70 <ULineSensor::eePromLoadLinesensor()+0xd4>
    6d10:	f107 043e 	add.w	r4, r7, #62	; 0x3e
    6d14:	f107 084e 	add.w	r8, r7, #78	; 0x4e
    6d18:	4625      	mov	r5, r4
  { // load from flash
    for (int i = 0; i < 8; i++)
    {
      blackLevel[i] = eeConfig.readWord();
    6d1a:	4630      	mov	r0, r6
    6d1c:	f7fc f9e0 	bl	30e0 <EEConfig::readWord()>
    6d20:	4603      	mov	r3, r0
      whiteLevel[i] = eeConfig.readWord();
    6d22:	4630      	mov	r0, r6
      blackLevel[i] = eeConfig.readWord();
    6d24:	826b      	strh	r3, [r5, #18]
      whiteLevel[i] = eeConfig.readWord();
    6d26:	f7fc f9db 	bl	30e0 <EEConfig::readWord()>
    6d2a:	f825 0f02 	strh.w	r0, [r5, #2]!
    for (int i = 0; i < 8; i++)
    6d2e:	4545      	cmp	r5, r8
    6d30:	d1f3      	bne.n	6d1a <ULineSensor::eePromLoadLinesensor()+0x7e>
    }
    for (int i = 0; i < 8; i++)
    { // set gains from new values
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6d32:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    6d36:	f107 0260 	add.w	r2, r7, #96	; 0x60
    6d3a:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
    6d3e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
    for (int i = 0; i < 8; i++)
    6d42:	4544      	cmp	r4, r8
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6d44:	eba3 0301 	sub.w	r3, r3, r1
    6d48:	ee07 3a90 	vmov	s15, r3
    6d4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6d50:	ee85 6b07 	vdiv.f64	d6, d5, d7
    6d54:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    6d58:	eca2 6a01 	vstmia	r2!, {s12}
    for (int i = 0; i < 8; i++)
    6d5c:	d1ed      	bne.n	6d3a <ULineSensor::eePromLoadLinesensor()+0x9e>
  }
  else
    // load from hard-coded mission
    eeConfig.skipAddr(skipCount);
  #ifdef REGBOT_HW41
  if (robot.robotHWversion == 9)
    6d5e:	4b0e      	ldr	r3, [pc, #56]	; (6d98 <ULineSensor::eePromLoadLinesensor()+0xfc>)
    6d60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    6d64:	2b09      	cmp	r3, #9
    6d66:	d00b      	beq.n	6d80 <ULineSensor::eePromLoadLinesensor()+0xe4>
    highPowerPin = PIN_LINE_LED_HIGH;
  #endif
}
    6d68:	ecbd 8b02 	vpop	{d8}
    6d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d70:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6d72:	3320      	adds	r3, #32
    6d74:	6273      	str	r3, [r6, #36]	; 0x24
  if (robot.robotHWversion == 9)
    6d76:	4b08      	ldr	r3, [pc, #32]	; (6d98 <ULineSensor::eePromLoadLinesensor()+0xfc>)
    6d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    6d7c:	2b09      	cmp	r3, #9
    6d7e:	d1f3      	bne.n	6d68 <ULineSensor::eePromLoadLinesensor()+0xcc>
    highPowerPin = PIN_LINE_LED_HIGH;
    6d80:	2322      	movs	r3, #34	; 0x22
    6d82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
}
    6d86:	ecbd 8b02 	vpop	{d8}
    6d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d8e:	bf00      	nop
    6d90:	2000dbe8 	.word	0x2000dbe8
    6d94:	43480000 	.word	0x43480000
    6d98:	2000e654 	.word	0x2000e654

00006d9c <_GLOBAL__sub_I_ls>:
    6d9c:	b570      	push	{r4, r5, r6, lr}
    6d9e:	4c2e      	ldr	r4, [pc, #184]	; (6e58 <_GLOBAL__sub_I_ls+0xbc>)
    6da0:	2500      	movs	r5, #0
    6da2:	f44f 7680 	mov.w	r6, #256	; 0x100
    6da6:	4620      	mov	r0, r4
    6da8:	f005 f9c6 	bl	c138 <USubss::USubss()>
    6dac:	492b      	ldr	r1, [pc, #172]	; (6e5c <_GLOBAL__sub_I_ls+0xc0>)
    6dae:	f240 1201 	movw	r2, #257	; 0x101
    6db2:	2300      	movs	r3, #0
    6db4:	6021      	str	r1, [r4, #0]
    6db6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    6dba:	4929      	ldr	r1, [pc, #164]	; (6e60 <_GLOBAL__sub_I_ls+0xc4>)
    6dbc:	82a2      	strh	r2, [r4, #20]
    6dbe:	62e1      	str	r1, [r4, #44]	; 0x2c
    6dc0:	2122      	movs	r1, #34	; 0x22
    6dc2:	4a28      	ldr	r2, [pc, #160]	; (6e64 <_GLOBAL__sub_I_ls+0xc8>)
    6dc4:	6263      	str	r3, [r4, #36]	; 0x24
    6dc6:	63a3      	str	r3, [r4, #56]	; 0x38
    6dc8:	f44f 7316 	mov.w	r3, #600	; 0x258
    6dcc:	6362      	str	r2, [r4, #52]	; 0x34
    6dce:	2220      	movs	r2, #32
    6dd0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    6dd4:	4629      	mov	r1, r5
    6dd6:	6425      	str	r5, [r4, #64]	; 0x40
    6dd8:	75a5      	strb	r5, [r4, #22]
    6dda:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    6dde:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    6de2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    6de6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    6dea:	6525      	str	r5, [r4, #80]	; 0x50
    6dec:	64e5      	str	r5, [r4, #76]	; 0x4c
    6dee:	65e5      	str	r5, [r4, #92]	; 0x5c
    6df0:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    6df4:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    6df8:	f014 fe1e 	bl	1ba38 <memset>
    6dfc:	4629      	mov	r1, r5
    6dfe:	2220      	movs	r2, #32
    6e00:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    6e04:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    6e08:	f014 fe16 	bl	1ba38 <memset>
    6e0c:	4b16      	ldr	r3, [pc, #88]	; (6e68 <_GLOBAL__sub_I_ls+0xcc>)
    6e0e:	f104 0ecc 	add.w	lr, r4, #204	; 0xcc
    6e12:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    6e16:	f103 0c10 	add.w	ip, r3, #16
    6e1a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    6e1e:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    6e22:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    6e26:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    6e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6e2c:	e9c4 554c 	strd	r5, r5, [r4, #304]	; 0x130
    6e30:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    6e34:	f104 05dc 	add.w	r5, r4, #220	; 0xdc
    6e38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6e3e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    6e42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
ULineSensor ls;
    6e46:	4620      	mov	r0, r4
    6e48:	f8a4 6100 	strh.w	r6, [r4, #256]	; 0x100
    6e4c:	4a07      	ldr	r2, [pc, #28]	; (6e6c <_GLOBAL__sub_I_ls+0xd0>)
    6e4e:	4908      	ldr	r1, [pc, #32]	; (6e70 <_GLOBAL__sub_I_ls+0xd4>)
}
    6e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ULineSensor ls;
    6e54:	f012 b850 	b.w	18ef8 <__aeabi_atexit>
    6e58:	2000e384 	.word	0x2000e384
    6e5c:	20007d94 	.word	0x20007d94
    6e60:	3f4ccccd 	.word	0x3f4ccccd
    6e64:	3f59999a 	.word	0x3f59999a
    6e68:	20001e5c 	.word	0x20001e5c
    6e6c:	20008f08 	.word	0x20008f08
    6e70:	0000628d 	.word	0x0000628d

00006e74 <ULog::sendHelp()>:
    logRowCnt = 0; // reset normal logging too
  }
}

void ULog::sendHelp()
{
    6e74:	b510      	push	{r4, lr}
  usb.send("# logger ------\n");
    6e76:	4c0d      	ldr	r4, [pc, #52]	; (6eac <ULog::sendHelp()+0x38>)
    6e78:	490d      	ldr	r1, [pc, #52]	; (6eb0 <ULog::sendHelp()+0x3c>)
    6e7a:	4620      	mov	r0, r4
    6e7c:	f005 fb4e 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlognow I\tstart logging now with I interval in ms\r\n");
    6e80:	490c      	ldr	r1, [pc, #48]	; (6eb4 <ULog::sendHelp()+0x40>)
    6e82:	4620      	mov	r0, r4
    6e84:	f005 fb4a 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlog \tGet current log, if any\r\n");
    6e88:	490b      	ldr	r1, [pc, #44]	; (6eb8 <ULog::sendHelp()+0x44>)
    6e8a:	4620      	mov	r0, r4
    6e8c:	f005 fb46 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlfls \tSet log flags - same order as lfl\r\n");
    6e90:	490a      	ldr	r1, [pc, #40]	; (6ebc <ULog::sendHelp()+0x48>)
    6e92:	4620      	mov	r0, r4
    6e94:	f005 fb42 	bl	c51c <UUSB::send(char const*)>
//   usb.send("# -- \tlfcs \tSet log control log flags - same order as lfc\n");
  usb.send("# -- \tlsts \tSet log interval (for timing info only)\r\n");
    6e98:	4909      	ldr	r1, [pc, #36]	; (6ec0 <ULog::sendHelp()+0x4c>)
    6e9a:	4620      	mov	r0, r4
    6e9c:	f005 fb3e 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tlogmsg \tStart log of (all) streamed messages (e.g. subscriptions)\r\n");
    6ea0:	4620      	mov	r0, r4
    6ea2:	4908      	ldr	r1, [pc, #32]	; (6ec4 <ULog::sendHelp()+0x50>)
}
    6ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tlogmsg \tStart log of (all) streamed messages (e.g. subscriptions)\r\n");
    6ea8:	f005 bb38 	b.w	c51c <UUSB::send(char const*)>
    6eac:	2000eab8 	.word	0x2000eab8
    6eb0:	200042a0 	.word	0x200042a0
    6eb4:	200042b4 	.word	0x200042b4
    6eb8:	200042f0 	.word	0x200042f0
    6ebc:	20004318 	.word	0x20004318
    6ec0:	20004348 	.word	0x20004348
    6ec4:	20004380 	.word	0x20004380

00006ec8 <ULog::~ULog()>:
class ULog : public USubss
    6ec8:	b510      	push	{r4, lr}
    6eca:	4b05      	ldr	r3, [pc, #20]	; (6ee0 <ULog::~ULog()+0x18>)
    6ecc:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    6ece:	6840      	ldr	r0, [r0, #4]
    6ed0:	6023      	str	r3, [r4, #0]
	if (__p)
    6ed2:	b118      	cbz	r0, 6edc <ULog::~ULog()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6ed4:	68e1      	ldr	r1, [r4, #12]
    6ed6:	1a09      	subs	r1, r1, r0
    6ed8:	f00f fbf0 	bl	166bc <operator delete(void*, unsigned int)>
    6edc:	4620      	mov	r0, r4
    6ede:	bd10      	pop	{r4, pc}
    6ee0:	2000802c 	.word	0x2000802c

00006ee4 <ULog::setup()>:
  if (logBuffer == nullptr)
    6ee4:	6d83      	ldr	r3, [r0, #88]	; 0x58
{ // allocate buffer space on heap (better on Teensy 4.1)
    6ee6:	b510      	push	{r4, lr}
    6ee8:	4604      	mov	r4, r0
  if (logBuffer == nullptr)
    6eea:	b17b      	cbz	r3, 6f0c <ULog::setup()+0x28>
  addPublistItem("lfl", "Get log flags 'lfl mis acc gyro mag motref motv mota enc vel turnrate pose line dist batt timing extra chirp'");
    6eec:	4620      	mov	r0, r4
    6eee:	4a0a      	ldr	r2, [pc, #40]	; (6f18 <ULog::setup()+0x34>)
    6ef0:	490a      	ldr	r1, [pc, #40]	; (6f1c <ULog::setup()+0x38>)
    6ef2:	f005 fa45 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lst", "Get log status 'lst interval rows rowsMax logSize'");
    6ef6:	4620      	mov	r0, r4
    6ef8:	4909      	ldr	r1, [pc, #36]	; (6f20 <ULog::setup()+0x3c>)
    6efa:	4a0a      	ldr	r2, [pc, #40]	; (6f24 <ULog::setup()+0x40>)
    6efc:	f005 fa40 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService((USubss*)this);
    6f00:	4621      	mov	r1, r4
    6f02:	4809      	ldr	r0, [pc, #36]	; (6f28 <ULog::setup()+0x44>)
}
    6f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService((USubss*)this);
    6f08:	f005 bf34 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    logBuffer = (int8_t *) malloc(LOG_BUFFER_MAX);
    6f0c:	4807      	ldr	r0, [pc, #28]	; (6f2c <ULog::setup()+0x48>)
    6f0e:	f012 fc7d 	bl	1980c <malloc>
    6f12:	65a0      	str	r0, [r4, #88]	; 0x58
    6f14:	e7ea      	b.n	6eec <ULog::setup()+0x8>
    6f16:	bf00      	nop
    6f18:	200041c0 	.word	0x200041c0
    6f1c:	20004230 	.word	0x20004230
    6f20:	20004268 	.word	0x20004268
    6f24:	20004234 	.word	0x20004234
    6f28:	2000eab8 	.word	0x2000eab8
    6f2c:	0003d090 	.word	0x0003d090

00006f30 <ULog::sendLogFlagsOther()>:
//   );
//   usb.send(s);
// }

void ULog::sendLogFlagsOther()
{
    6f30:	4603      	mov	r3, r0
  const int MSL = 150;
  char s[MSL];
  snprintf(s, MSL, "lfl %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
    6f32:	4a1e      	ldr	r2, [pc, #120]	; (6fac <ULog::sendLogFlagsOther()+0x7c>)
    6f34:	2196      	movs	r1, #150	; 0x96
{
    6f36:	b510      	push	{r4, lr}
  snprintf(s, MSL, "lfl %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
    6f38:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
{
    6f3c:	b0b6      	sub	sp, #216	; 0xd8
  snprintf(s, MSL, "lfl %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
    6f3e:	940f      	str	r4, [sp, #60]	; 0x3c
    6f40:	a810      	add	r0, sp, #64	; 0x40
    6f42:	f893 4037 	ldrb.w	r4, [r3, #55]	; 0x37
    6f46:	940e      	str	r4, [sp, #56]	; 0x38
    6f48:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
    6f4c:	940d      	str	r4, [sp, #52]	; 0x34
    6f4e:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
    6f52:	940c      	str	r4, [sp, #48]	; 0x30
    6f54:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
    6f58:	940b      	str	r4, [sp, #44]	; 0x2c
    6f5a:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    6f5e:	940a      	str	r4, [sp, #40]	; 0x28
    6f60:	f893 4027 	ldrb.w	r4, [r3, #39]	; 0x27
    6f64:	9409      	str	r4, [sp, #36]	; 0x24
    6f66:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
    6f6a:	9408      	str	r4, [sp, #32]
    6f6c:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
    6f70:	9407      	str	r4, [sp, #28]
    6f72:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    6f76:	9406      	str	r4, [sp, #24]
    6f78:	f893 4023 	ldrb.w	r4, [r3, #35]	; 0x23
    6f7c:	9405      	str	r4, [sp, #20]
    6f7e:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
    6f82:	9404      	str	r4, [sp, #16]
    6f84:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
    6f88:	9403      	str	r4, [sp, #12]
    6f8a:	f893 4020 	ldrb.w	r4, [r3, #32]
    6f8e:	9402      	str	r4, [sp, #8]
    6f90:	7fdc      	ldrb	r4, [r3, #31]
    6f92:	9401      	str	r4, [sp, #4]
    6f94:	7f9c      	ldrb	r4, [r3, #30]
    6f96:	9400      	str	r4, [sp, #0]
    6f98:	7f5b      	ldrb	r3, [r3, #29]
    6f9a:	f014 fb7b 	bl	1b694 <snprintf>
           logRowFlags[LOG_BATT],
           logRowFlags[LOG_TIMING],
           logRowFlags[LOG_EXTRA],
           logRowFlags[LOG_CHIRP]
  );
  usb.send(s);
    6f9e:	a910      	add	r1, sp, #64	; 0x40
    6fa0:	4803      	ldr	r0, [pc, #12]	; (6fb0 <ULog::sendLogFlagsOther()+0x80>)
    6fa2:	f005 fabb 	bl	c51c <UUSB::send(char const*)>
}
    6fa6:	b036      	add	sp, #216	; 0xd8
    6fa8:	bd10      	pop	{r4, pc}
    6faa:	bf00      	nop
    6fac:	2000415c 	.word	0x2000415c
    6fb0:	2000eab8 	.word	0x2000eab8

00006fb4 <ULog::sendData(int)>:
  if (item == 0)
    6fb4:	b111      	cbz	r1, 6fbc <ULog::sendData(int)+0x8>
  else if (item==1)
    6fb6:	2901      	cmp	r1, #1
    6fb8:	d002      	beq.n	6fc0 <ULog::sendData(int)+0xc>
    6fba:	4770      	bx	lr
    sendLogFlagsOther();
    6fbc:	f7ff bfb8 	b.w	6f30 <ULog::sendLogFlagsOther()>
{
    6fc0:	b500      	push	{lr}
  snprintf(s, MSL, "lst %lu %d %d %d\r\n",
    6fc2:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
{
    6fc6:	b0ab      	sub	sp, #172	; 0xac
    6fc8:	4603      	mov	r3, r0
  snprintf(s, MSL, "lst %lu %d %d %d\r\n",
    6fca:	4808      	ldr	r0, [pc, #32]	; (6fec <ULog::sendData(int)+0x38>)
    6fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6fce:	9201      	str	r2, [sp, #4]
    6fd0:	9002      	str	r0, [sp, #8]
    6fd2:	a804      	add	r0, sp, #16
    6fd4:	4a06      	ldr	r2, [pc, #24]	; (6ff0 <ULog::sendData(int)+0x3c>)
    6fd6:	9100      	str	r1, [sp, #0]
    6fd8:	2196      	movs	r1, #150	; 0x96
    6fda:	f014 fb5b 	bl	1b694 <snprintf>
  usb.send(s);
    6fde:	a904      	add	r1, sp, #16
    6fe0:	4804      	ldr	r0, [pc, #16]	; (6ff4 <ULog::sendData(int)+0x40>)
    6fe2:	f005 fa9b 	bl	c51c <UUSB::send(char const*)>
}
    6fe6:	b02b      	add	sp, #172	; 0xac
    6fe8:	f85d fb04 	ldr.w	pc, [sp], #4
    6fec:	0003d090 	.word	0x0003d090
    6ff0:	20003e10 	.word	0x20003e10
    6ff4:	2000eab8 	.word	0x2000eab8

00006ff8 <ULog::stopLogging()>:
  toLog = true;
}

void ULog::stopLogging(void)
{
  toLog = false;
    6ff8:	2300      	movs	r3, #0
    6ffa:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
    6ffe:	4770      	bx	lr

00007000 <ULog::stateToLog()>:
  //   char s[MSL];
  // //  snprintf(s, MSL, "# state to log, flags, time=%d, mission=%d,...\n", logRowFlags[LOG_TIME], logRowFlags[LOG_MISSION]);
  //   snprintf(s, MSL, "#time %.3f mission %d, state %d.%d, logger line %d/%d\r\n", 
  //            time, mission, missionState, misLineNum, logRowCnt, logRowsCntMax);
  //   usb.send(s);
  if (not logFull)
    7000:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    7004:	b103      	cbz	r3, 7008 <ULog::stateToLog()+0x8>
    7006:	4770      	bx	lr

//////////////////////////////////////////////////////

bool ULog::addNewRowToLog()
{ // logRowCnt is next log entry - uses (logRowCnt-1)
  if (logRowCnt >= logRowsCntMax)
    7008:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
{ 
    700c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (logRowCnt >= logRowsCntMax)
    700e:	4293      	cmp	r3, r2
{ 
    7010:	b089      	sub	sp, #36	; 0x24
    7012:	4604      	mov	r4, r0
  if (logRowCnt >= logRowsCntMax)
    7014:	f280 80d6 	bge.w	71c4 <ULog::stateToLog()+0x1c4>
    return false;
  int8_t * pd = logBuffer + logRowCnt * logRowSize;
    7018:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    701c:	6d86      	ldr	r6, [r0, #88]	; 0x58
    701e:	fb01 f003 	mul.w	r0, r1, r3
    7022:	1835      	adds	r5, r6, r0
  if (uint32_t(0x20000000) > (uint32_t)pd and (uint32_t(0x20000000) < ((uint32_t)pd + (uint32_t)logRowSize))) 
    7024:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    7028:	f0c0 80c2 	bcc.w	71b0 <ULog::stateToLog()+0x1b0>
//     usb.send(s);
    logRowCnt++;
    if (logRowCnt >= logRowsCntMax)
      return false;    
  }
  logRowCnt++;
    702c:	3301      	adds	r3, #1
    702e:	4ac0      	ldr	r2, [pc, #768]	; (7330 <ULog::stateToLog()+0x330>)
    logFull = not addNewRowToLog();
    7030:	2100      	movs	r1, #0
  logRowCnt++;
    7032:	6163      	str	r3, [r4, #20]
    logFull = not addNewRowToLog();
    7034:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
    7038:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    703c:	f012 f9e6 	bl	1940c <__aeabi_ul2f>
    7040:	ee07 0a90 	vmov	s15, r0
      float t = service.time_sec() - log_start_time_sec;
    7044:	edd4 6a2d 	vldr	s13, [r4, #180]	; 0xb4
    7048:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    704c:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
    7050:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 7328 <ULog::stateToLog()+0x328>
    7054:	ee27 7b05 	vmul.f64	d7, d7, d5
    7058:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      float t = service.time_sec() - log_start_time_sec;
    705c:	ee37 7a66 	vsub.f32	s14, s14, s13
  memcpy(pd, data, dataCnt);
    7060:	ee17 2a10 	vmov	r2, s14
    7064:	50ea      	str	r2, [r5, r3]
      if (logRowFlags[LOG_ACC])
    7066:	7fa3      	ldrb	r3, [r4, #30]
    7068:	2b00      	cmp	r3, #0
    706a:	f040 817d 	bne.w	7368 <ULog::stateToLog()+0x368>
      if (logRowFlags[LOG_GYRO])
    706e:	7fe3      	ldrb	r3, [r4, #31]
    7070:	2b00      	cmp	r3, #0
    7072:	f040 8149 	bne.w	7308 <ULog::stateToLog()+0x308>
      if (logRowFlags[LOG_MOTV])
    7076:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    707a:	2b00      	cmp	r3, #0
    707c:	f040 8135 	bne.w	72ea <ULog::stateToLog()+0x2ea>
      if (logRowFlags[LOG_ENC])
    7080:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    7084:	2b00      	cmp	r3, #0
    7086:	f040 8121 	bne.w	72cc <ULog::stateToLog()+0x2cc>
      if (logRowFlags[LOG_MOTA])
    708a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    708e:	2b00      	cmp	r3, #0
    7090:	f040 810c 	bne.w	72ac <ULog::stateToLog()+0x2ac>
      if (logRowFlags[LOG_WHEELVEL])
    7094:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    7098:	2b00      	cmp	r3, #0
    709a:	f040 80f8 	bne.w	728e <ULog::stateToLog()+0x28e>
      if (logRowFlags[LOG_TURNRATE])
    709e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    70a2:	2b00      	cmp	r3, #0
    70a4:	f040 80e6 	bne.w	7274 <ULog::stateToLog()+0x274>
      if (logRowFlags[LOG_POSE])
    70a8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    70ac:	2b00      	cmp	r3, #0
    70ae:	f040 80cd 	bne.w	724c <ULog::stateToLog()+0x24c>
      if (logRowFlags[LOG_LINE])
    70b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    70b6:	2b00      	cmp	r3, #0
    70b8:	d05a      	beq.n	7170 <ULog::stateToLog()+0x170>
    70ba:	4b9e      	ldr	r3, [pc, #632]	; (7334 <ULog::stateToLog()+0x334>)
    70bc:	f1ad 0202 	sub.w	r2, sp, #2
          ldv[i] = int16_t(ls.lineSensorValue[i] * 1000); // ad.adcLSH[0] - ad.adcLSL[0];
    70c0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 7338 <ULog::stateToLog()+0x338>
    70c4:	f103 0120 	add.w	r1, r3, #32
    70c8:	ecf3 7a01 	vldmia	r3!, {s15}
    70cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (int i = 0; i < 8; i++)
    70d0:	428b      	cmp	r3, r1
          ldv[i] = int16_t(ls.lineSensorValue[i] * 1000); // ad.adcLSH[0] - ad.adcLSL[0];
    70d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    70d6:	ee17 0a90 	vmov	r0, s15
    70da:	f822 0f02 	strh.w	r0, [r2, #2]!
        for (int i = 0; i < 8; i++)
    70de:	d1f3      	bne.n	70c8 <ULog::stateToLog()+0xc8>
        fdv[0] = ls.lsLeftSide;  // word  8 and  9 (32 bit float) [cm]
    70e0:	4b96      	ldr	r3, [pc, #600]	; (733c <ULog::stateToLog()+0x33c>)
    70e2:	6999      	ldr	r1, [r3, #24]
        fdv[1] = ls.lsRightSide; // word 10 and 11 (32 bit float)
    70e4:	69da      	ldr	r2, [r3, #28]
        fdv[0] = ls.lsLeftSide;  // word  8 and  9 (32 bit float) [cm]
    70e6:	9104      	str	r1, [sp, #16]
        lsc[0] = ls.crossingLineCnt; // word 14
    70e8:	8c19      	ldrh	r1, [r3, #32]
        fdv[2] = ls.reflectAverage; // findCrossingLineVal; // word 12 og 13
    70ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
        fdv[1] = ls.lsRightSide; // word 10 and 11 (32 bit float)
    70ec:	9205      	str	r2, [sp, #20]
        lsc[0] = ls.crossingLineCnt; // word 14
    70ee:	f8ad 101c 	strh.w	r1, [sp, #28]
          *flags = 1;
    70f2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
        if (ls.lsIsWhite)
    70f6:	7d19      	ldrb	r1, [r3, #20]
        fdv[2] = ls.reflectAverage; // findCrossingLineVal; // word 12 og 13
    70f8:	9006      	str	r0, [sp, #24]
        if (ls.lineSensorOn)
    70fa:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lsIsWhite)
    70fe:	b119      	cbz	r1, 7108 <ULog::stateToLog()+0x108>
          *flags |= 2;
    7100:	f042 0202 	orr.w	r2, r2, #2
    7104:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lineValid)
    7108:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    710c:	b12a      	cbz	r2, 711a <ULog::stateToLog()+0x11a>
          *flags |= 4;
    710e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    7112:	f042 0204 	orr.w	r2, r2, #4
    7116:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.crossing)
    711a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    711e:	b12a      	cbz	r2, 712c <ULog::stateToLog()+0x12c>
          *flags |= 8;
    7120:	f89d 201e 	ldrb.w	r2, [sp, #30]
    7124:	f042 0208 	orr.w	r2, r2, #8
    7128:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lsPowerHigh)
    712c:	7d5a      	ldrb	r2, [r3, #21]
    712e:	b12a      	cbz	r2, 713c <ULog::stateToLog()+0x13c>
          *flags |= 0x10;
    7130:	f89d 201e 	ldrb.w	r2, [sp, #30]
    7134:	f042 0210 	orr.w	r2, r2, #16
    7138:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lsTiltCompensate)
    713c:	7d9b      	ldrb	r3, [r3, #22]
    713e:	2b00      	cmp	r3, #0
    7140:	d149      	bne.n	71d6 <ULog::stateToLog()+0x1d6>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7142:	6963      	ldr	r3, [r4, #20]
  memcpy(pd, data, dataCnt);
    7144:	466d      	mov	r5, sp
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7146:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    714a:	f8b4 c0d0 	ldrh.w	ip, [r4, #208]	; 0xd0
    714e:	3b01      	subs	r3, #1
    7150:	6da7      	ldr	r7, [r4, #88]	; 0x58
    7152:	fb02 cc03 	mla	ip, r2, r3, ip
  memcpy(pd, data, dataCnt);
    7156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7158:	eb07 060c 	add.w	r6, r7, ip
  memcpy(pd, data, dataCnt);
    715c:	f847 000c 	str.w	r0, [r7, ip]
    7160:	6071      	str	r1, [r6, #4]
    7162:	60b2      	str	r2, [r6, #8]
    7164:	60f3      	str	r3, [r6, #12]
    7166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7168:	6130      	str	r0, [r6, #16]
    716a:	6171      	str	r1, [r6, #20]
    716c:	61b2      	str	r2, [r6, #24]
    716e:	61f3      	str	r3, [r6, #28]
      if (logRowFlags[LOG_DIST])
    7170:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    7174:	2b00      	cmp	r3, #0
    7176:	d15a      	bne.n	722e <ULog::stateToLog()+0x22e>
      if (logRowFlags[LOG_BATT])
    7178:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    717c:	2b00      	cmp	r3, #0
    717e:	d149      	bne.n	7214 <ULog::stateToLog()+0x214>
      if (logRowFlags[LOG_TIMING])
    7180:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    7184:	bb73      	cbnz	r3, 71e4 <ULog::stateToLog()+0x1e4>
      if (logRowFlags[LOG_EXTRA])
    7186:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    718a:	b1fb      	cbz	r3, 71cc <ULog::stateToLog()+0x1cc>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    718c:	6962      	ldr	r2, [r4, #20]
  memcpy(pd, data, dataCnt);
    718e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7192:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    7196:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    719a:	3a01      	subs	r2, #1
    719c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    719e:	fb05 3302 	mla	r3, r5, r2, r3
  memcpy(pd, data, dataCnt);
    71a2:	2250      	movs	r2, #80	; 0x50
    71a4:	4418      	add	r0, r3
}
    71a6:	b009      	add	sp, #36	; 0x24
    71a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  memcpy(pd, data, dataCnt);
    71ac:	f00f b9ea 	b.w	16584 <memcpy>
  if (uint32_t(0x20000000) > (uint32_t)pd and (uint32_t(0x20000000) < ((uint32_t)pd + (uint32_t)logRowSize))) 
    71b0:	eb01 0c05 	add.w	ip, r1, r5
    71b4:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
    71b8:	f67f af38 	bls.w	702c <ULog::stateToLog()+0x2c>
    logRowCnt++;
    71bc:	3301      	adds	r3, #1
    if (logRowCnt >= logRowsCntMax)
    71be:	429a      	cmp	r2, r3
    logRowCnt++;
    71c0:	6163      	str	r3, [r4, #20]
    if (logRowCnt >= logRowsCntMax)
    71c2:	dc05      	bgt.n	71d0 <ULog::stateToLog()+0x1d0>
  toLog = false;
    71c4:	f44f 7380 	mov.w	r3, #256	; 0x100
    71c8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
}
    71cc:	b009      	add	sp, #36	; 0x24
    71ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    71d0:	4408      	add	r0, r1
    71d2:	1835      	adds	r5, r6, r0
    71d4:	e72a      	b.n	702c <ULog::stateToLog()+0x2c>
          *flags |= 0x20;
    71d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    71da:	f043 0320 	orr.w	r3, r3, #32
    71de:	f88d 301e 	strb.w	r3, [sp, #30]
    71e2:	e7ae      	b.n	7142 <ULog::stateToLog()+0x142>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    71e4:	6963      	ldr	r3, [r4, #20]
    71e6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    71ea:	f8b4 c0d6 	ldrh.w	ip, [r4, #214]	; 0xd6
    71ee:	3b01      	subs	r3, #1
    71f0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    71f2:	fb02 cc03 	mla	ip, r2, r3, ip
  memcpy(pd, data, dataCnt);
    71f6:	4d52      	ldr	r5, [pc, #328]	; (7340 <ULog::stateToLog()+0x340>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    71f8:	eb07 060c 	add.w	r6, r7, ip
  memcpy(pd, data, dataCnt);
    71fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    71fe:	f847 000c 	str.w	r0, [r7, ip]
    7202:	6071      	str	r1, [r6, #4]
    7204:	60b2      	str	r2, [r6, #8]
    7206:	60f3      	str	r3, [r6, #12]
    7208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    720a:	6130      	str	r0, [r6, #16]
    720c:	6171      	str	r1, [r6, #20]
    720e:	61b2      	str	r2, [r6, #24]
    7210:	61f3      	str	r3, [r6, #28]
}
    7212:	e7b8      	b.n	7186 <ULog::stateToLog()+0x186>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7214:	6962      	ldr	r2, [r4, #20]
    7216:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
  memcpy(pd, data, dataCnt);
    721a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    721c:	3a01      	subs	r2, #1
    721e:	4949      	ldr	r1, [pc, #292]	; (7344 <ULog::stateToLog()+0x344>)
  memcpy(pd, data, dataCnt);
    7220:	fb00 3302 	mla	r3, r0, r2, r3
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7224:	f8b4 20d4 	ldrh.w	r2, [r4, #212]	; 0xd4
    7228:	6949      	ldr	r1, [r1, #20]
  memcpy(pd, data, dataCnt);
    722a:	5099      	str	r1, [r3, r2]
}
    722c:	e7a8      	b.n	7180 <ULog::stateToLog()+0x180>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    722e:	6962      	ldr	r2, [r4, #20]
    7230:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    7234:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    7238:	3a01      	subs	r2, #1
    723a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    723c:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    7240:	4a41      	ldr	r2, [pc, #260]	; (7348 <ULog::stateToLog()+0x348>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7242:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    7244:	ca03      	ldmia	r2!, {r0, r1}
    7246:	50e8      	str	r0, [r5, r3]
    7248:	6071      	str	r1, [r6, #4]
}
    724a:	e795      	b.n	7178 <ULog::stateToLog()+0x178>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    724c:	6963      	ldr	r3, [r4, #20]
    724e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    7252:	f8b4 60ce 	ldrh.w	r6, [r4, #206]	; 0xce
    7256:	3b01      	subs	r3, #1
    7258:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    725c:	fb02 6603 	mla	r6, r2, r3, r6
  memcpy(pd, data, dataCnt);
    7260:	4d3a      	ldr	r5, [pc, #232]	; (734c <ULog::stateToLog()+0x34c>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7262:	eb0c 0706 	add.w	r7, ip, r6
  memcpy(pd, data, dataCnt);
    7266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7268:	f84c 0006 	str.w	r0, [ip, r6]
    726c:	6079      	str	r1, [r7, #4]
    726e:	60ba      	str	r2, [r7, #8]
    7270:	60fb      	str	r3, [r7, #12]
}
    7272:	e71e      	b.n	70b2 <ULog::stateToLog()+0xb2>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7274:	6962      	ldr	r2, [r4, #20]
    7276:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
  memcpy(pd, data, dataCnt);
    727a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    727c:	3a01      	subs	r2, #1
        float v = encoder.robotTurnrate;
    727e:	4934      	ldr	r1, [pc, #208]	; (7350 <ULog::stateToLog()+0x350>)
  memcpy(pd, data, dataCnt);
    7280:	fb00 3302 	mla	r3, r0, r2, r3
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7284:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
  memcpy(pd, data, dataCnt);
    7288:	6f89      	ldr	r1, [r1, #120]	; 0x78
    728a:	5099      	str	r1, [r3, r2]
    728c:	e70c      	b.n	70a8 <ULog::stateToLog()+0xa8>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    728e:	6962      	ldr	r2, [r4, #20]
    7290:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    7294:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    7298:	3a01      	subs	r2, #1
    729a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    729c:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    72a0:	4a2c      	ldr	r2, [pc, #176]	; (7354 <ULog::stateToLog()+0x354>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72a2:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    72a4:	ca03      	ldmia	r2!, {r0, r1}
    72a6:	50e8      	str	r0, [r5, r3]
    72a8:	6071      	str	r1, [r6, #4]
}
    72aa:	e6f8      	b.n	709e <ULog::stateToLog()+0x9e>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72ac:	6963      	ldr	r3, [r4, #20]
    72ae:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    72b2:	f8b4 50c6 	ldrh.w	r5, [r4, #198]	; 0xc6
    72b6:	3b01      	subs	r3, #1
    72b8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    72ba:	fb02 5503 	mla	r5, r2, r3, r5
  memcpy(pd, data, dataCnt);
    72be:	4b26      	ldr	r3, [pc, #152]	; (7358 <ULog::stateToLog()+0x358>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72c0:	197e      	adds	r6, r7, r5
  memcpy(pd, data, dataCnt);
    72c2:	cb07      	ldmia	r3!, {r0, r1, r2}
    72c4:	5178      	str	r0, [r7, r5]
    72c6:	6071      	str	r1, [r6, #4]
    72c8:	60b2      	str	r2, [r6, #8]
}
    72ca:	e6e3      	b.n	7094 <ULog::stateToLog()+0x94>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72cc:	6962      	ldr	r2, [r4, #20]
    72ce:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    72d2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    72d6:	3a01      	subs	r2, #1
    72d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    72da:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    72de:	4a1f      	ldr	r2, [pc, #124]	; (735c <ULog::stateToLog()+0x35c>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72e0:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    72e2:	ca03      	ldmia	r2!, {r0, r1}
    72e4:	50e8      	str	r0, [r5, r3]
    72e6:	6071      	str	r1, [r6, #4]
}
    72e8:	e6cf      	b.n	708a <ULog::stateToLog()+0x8a>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72ea:	6962      	ldr	r2, [r4, #20]
    72ec:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    72f0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    72f4:	3a01      	subs	r2, #1
    72f6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    72f8:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    72fc:	4a18      	ldr	r2, [pc, #96]	; (7360 <ULog::stateToLog()+0x360>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72fe:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    7300:	ca03      	ldmia	r2!, {r0, r1}
    7302:	50e8      	str	r0, [r5, r3]
    7304:	6071      	str	r1, [r6, #4]
}
    7306:	e6bb      	b.n	7080 <ULog::stateToLog()+0x80>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7308:	6963      	ldr	r3, [r4, #20]
    730a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    730e:	f8b4 50be 	ldrh.w	r5, [r4, #190]	; 0xbe
    7312:	3b01      	subs	r3, #1
    7314:	6da7      	ldr	r7, [r4, #88]	; 0x58
    7316:	fb02 5503 	mla	r5, r2, r3, r5
  memcpy(pd, data, dataCnt);
    731a:	4b12      	ldr	r3, [pc, #72]	; (7364 <ULog::stateToLog()+0x364>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    731c:	197e      	adds	r6, r7, r5
  memcpy(pd, data, dataCnt);
    731e:	cb07      	ldmia	r3!, {r0, r1, r2}
    7320:	5178      	str	r0, [r7, r5]
    7322:	6071      	str	r1, [r6, #4]
    7324:	60b2      	str	r2, [r6, #8]
}
    7326:	e6a6      	b.n	7076 <ULog::stateToLog()+0x76>
    7328:	a0b5ed8d 	.word	0xa0b5ed8d
    732c:	3eb0c6f7 	.word	0x3eb0c6f7
    7330:	2000d0c8 	.word	0x2000d0c8
    7334:	2000e40c 	.word	0x2000e40c
    7338:	447a0000 	.word	0x447a0000
    733c:	2000e384 	.word	0x2000e384
    7340:	2000e6c8 	.word	0x2000e6c8
    7344:	2000e654 	.word	0x2000e654
    7348:	2000e1c4 	.word	0x2000e1c4
    734c:	2000dc80 	.word	0x2000dc80
    7350:	2000dc34 	.word	0x2000dc34
    7354:	2000dc78 	.word	0x2000dc78
    7358:	2000daa4 	.word	0x2000daa4
    735c:	2000dc68 	.word	0x2000dc68
    7360:	2000e4d4 	.word	0x2000e4d4
    7364:	2000cfec 	.word	0x2000cfec
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7368:	6963      	ldr	r3, [r4, #20]
    736a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    736e:	f8b4 50bc 	ldrh.w	r5, [r4, #188]	; 0xbc
    7372:	3b01      	subs	r3, #1
    7374:	6da7      	ldr	r7, [r4, #88]	; 0x58
    7376:	fb02 5503 	mla	r5, r2, r3, r5
  memcpy(pd, data, dataCnt);
    737a:	4b03      	ldr	r3, [pc, #12]	; (7388 <ULog::stateToLog()+0x388>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    737c:	197e      	adds	r6, r7, r5
  memcpy(pd, data, dataCnt);
    737e:	cb07      	ldmia	r3!, {r0, r1, r2}
    7380:	5178      	str	r0, [r7, r5]
    7382:	6071      	str	r1, [r6, #4]
    7384:	60b2      	str	r2, [r6, #8]
}
    7386:	e672      	b.n	706e <ULog::stateToLog()+0x6e>
    7388:	2000d008 	.word	0x2000d008

0000738c <ULog::writeTime(signed char*, int, char*, int)>:
  if (row < 0)
    738c:	2a00      	cmp	r2, #0
{ // write time in seconds to string
    738e:	4684      	mov	ip, r0
  float v = *(float*)data;
    7390:	ed91 7a00 	vldr	s14, [r1]
{ // write time in seconds to string
    7394:	4618      	mov	r0, r3
    7396:	b510      	push	{r4, lr}
    7398:	b084      	sub	sp, #16
  if (row < 0)
    739a:	db09      	blt.n	73b0 <ULog::writeTime(signed char*, int, char*, int)+0x24>
    snprintf(p1, maxLength, "%.4f ", v);
    739c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    73a0:	4a0f      	ldr	r2, [pc, #60]	; (73e0 <ULog::writeTime(signed char*, int, char*, int)+0x54>)
    73a2:	9906      	ldr	r1, [sp, #24]
    73a4:	ed8d 7b00 	vstr	d7, [sp]
    73a8:	f014 f974 	bl	1b694 <snprintf>
}
    73ac:	b004      	add	sp, #16
    73ae:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d    time %.4f sec, from %s (%d)\r\n", col++, v, robot.getRobotName(), robot.deviceID);
    73b0:	f8dc 30ac 	ldr.w	r3, [ip, #172]	; 0xac
    73b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    return robotname[deviceID];
    73b8:	4c0a      	ldr	r4, [pc, #40]	; (73e4 <ULog::writeTime(signed char*, int, char*, int)+0x58>)
    73ba:	1c5a      	adds	r2, r3, #1
    73bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    73be:	f8cc 20ac 	str.w	r2, [ip, #172]	; 0xac
    73c2:	f101 0c26 	add.w	ip, r1, #38	; 0x26
    73c6:	4a08      	ldr	r2, [pc, #32]	; (73e8 <ULog::writeTime(signed char*, int, char*, int)+0x5c>)
    73c8:	ed8d 7b00 	vstr	d7, [sp]
    73cc:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    73d0:	e9cd 4102 	strd	r4, r1, [sp, #8]
    73d4:	9906      	ldr	r1, [sp, #24]
    73d6:	f014 f95d 	bl	1b694 <snprintf>
}
    73da:	b004      	add	sp, #16
    73dc:	bd10      	pop	{r4, pc}
    73de:	bf00      	nop
    73e0:	20004594 	.word	0x20004594
    73e4:	2000e654 	.word	0x2000e654
    73e8:	2000456c 	.word	0x2000456c

000073ec <ULog::writeAcc(signed char*, int, char*, int)>:
  if (row < 0)
    73ec:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d %2d Acc x,y,z [m/s2]: %g %g %g\r\n", col, col+1, col+2, v[0], v[1], v[2]);
    73ee:	ed91 5a02 	vldr	s10, [r1, #8]
    73f2:	ed91 6a01 	vldr	s12, [r1, #4]
    73f6:	ed91 7a00 	vldr	s14, [r1]
{
    73fa:	b510      	push	{r4, lr}
    73fc:	4604      	mov	r4, r0
    73fe:	b088      	sub	sp, #32
    7400:	4618      	mov	r0, r3
  if (row < 0)
    7402:	db11      	blt.n	7428 <ULog::writeAcc(signed char*, int, char*, int)+0x3c>
    snprintf(p1, maxLength, "%f %f %f ", v[0], v[1], v[2]);
    7404:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7408:	4a16      	ldr	r2, [pc, #88]	; (7464 <ULog::writeAcc(signed char*, int, char*, int)+0x78>)
    740a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    740e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7410:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7414:	ed8d 5b04 	vstr	d5, [sp, #16]
    7418:	ed8d 6b02 	vstr	d6, [sp, #8]
    741c:	ed8d 7b00 	vstr	d7, [sp]
    7420:	f014 f938 	bl	1b694 <snprintf>
}
    7424:	b008      	add	sp, #32
    7426:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d %2d Acc x,y,z [m/s2]: %g %g %g\r\n", col, col+1, col+2, v[0], v[1], v[2]);
    7428:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    742c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7430:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7434:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7438:	1c9a      	adds	r2, r3, #2
    743a:	1c59      	adds	r1, r3, #1
    743c:	9201      	str	r2, [sp, #4]
    743e:	9100      	str	r1, [sp, #0]
    7440:	4a09      	ldr	r2, [pc, #36]	; (7468 <ULog::writeAcc(signed char*, int, char*, int)+0x7c>)
    7442:	990a      	ldr	r1, [sp, #40]	; 0x28
    7444:	ed8d 5b06 	vstr	d5, [sp, #24]
    7448:	ed8d 6b04 	vstr	d6, [sp, #16]
    744c:	ed8d 7b02 	vstr	d7, [sp, #8]
    7450:	f014 f920 	bl	1b694 <snprintf>
    col += 3;
    7454:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7458:	3303      	adds	r3, #3
    745a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    745e:	b008      	add	sp, #32
    7460:	bd10      	pop	{r4, pc}
    7462:	bf00      	nop
    7464:	200043f8 	.word	0x200043f8
    7468:	200043cc 	.word	0x200043cc

0000746c <ULog::writeGyro(signed char*, int, char*, int)>:
  if (row < 0)
    746c:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d %2d Gyro x,y,z [deg/s]: %g %g %g\r\n", 
    746e:	ed91 5a02 	vldr	s10, [r1, #8]
    7472:	ed91 6a01 	vldr	s12, [r1, #4]
    7476:	ed91 7a00 	vldr	s14, [r1]
{
    747a:	b510      	push	{r4, lr}
    747c:	4604      	mov	r4, r0
    747e:	b088      	sub	sp, #32
    7480:	4618      	mov	r0, r3
  if (row < 0)
    7482:	db11      	blt.n	74a8 <ULog::writeGyro(signed char*, int, char*, int)+0x3c>
    snprintf(p1, maxLength, "%.4f %.4f %.4f ", v[0], v[1], v[2]);
    7484:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7488:	4a16      	ldr	r2, [pc, #88]	; (74e4 <ULog::writeGyro(signed char*, int, char*, int)+0x78>)
    748a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    748e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7490:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7494:	ed8d 5b04 	vstr	d5, [sp, #16]
    7498:	ed8d 6b02 	vstr	d6, [sp, #8]
    749c:	ed8d 7b00 	vstr	d7, [sp]
    74a0:	f014 f8f8 	bl	1b694 <snprintf>
}
    74a4:	b008      	add	sp, #32
    74a6:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d %2d Gyro x,y,z [deg/s]: %g %g %g\r\n", 
    74a8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    74ac:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    74b0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    74b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    74b8:	1c9a      	adds	r2, r3, #2
    74ba:	1c59      	adds	r1, r3, #1
    74bc:	9201      	str	r2, [sp, #4]
    74be:	9100      	str	r1, [sp, #0]
    74c0:	4a09      	ldr	r2, [pc, #36]	; (74e8 <ULog::writeGyro(signed char*, int, char*, int)+0x7c>)
    74c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    74c4:	ed8d 5b06 	vstr	d5, [sp, #24]
    74c8:	ed8d 6b04 	vstr	d6, [sp, #16]
    74cc:	ed8d 7b02 	vstr	d7, [sp, #8]
    74d0:	f014 f8e0 	bl	1b694 <snprintf>
    col += 3;
    74d4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    74d8:	3303      	adds	r3, #3
    74da:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    74de:	b008      	add	sp, #32
    74e0:	bd10      	pop	{r4, pc}
    74e2:	bf00      	nop
    74e4:	200044fc 	.word	0x200044fc
    74e8:	200044cc 	.word	0x200044cc

000074ec <ULog::writeCurrent(signed char*, int, char*, int)>:
  if (row < 0)
    74ec:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d Motor current left, right, supply [A]: %.3f %.3f %.3f\r\n", col, col+2, v[0], v[1], v[2]);
    74ee:	ed91 5a02 	vldr	s10, [r1, #8]
    74f2:	ed91 6a01 	vldr	s12, [r1, #4]
    74f6:	ed91 7a00 	vldr	s14, [r1]
{
    74fa:	b510      	push	{r4, lr}
    74fc:	4604      	mov	r4, r0
    74fe:	b088      	sub	sp, #32
    7500:	4618      	mov	r0, r3
  if (row < 0)
    7502:	db11      	blt.n	7528 <ULog::writeCurrent(signed char*, int, char*, int)+0x3c>
    snprintf(p1, maxLength, "%.3f %.3f %.3f ", v[0], v[1], v[2]);
    7504:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7508:	4a15      	ldr	r2, [pc, #84]	; (7560 <ULog::writeCurrent(signed char*, int, char*, int)+0x74>)
    750a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    750e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7510:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7514:	ed8d 5b04 	vstr	d5, [sp, #16]
    7518:	ed8d 6b02 	vstr	d6, [sp, #8]
    751c:	ed8d 7b00 	vstr	d7, [sp]
    7520:	f014 f8b8 	bl	1b694 <snprintf>
}
    7524:	b008      	add	sp, #32
    7526:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d Motor current left, right, supply [A]: %.3f %.3f %.3f\r\n", col, col+2, v[0], v[1], v[2]);
    7528:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    752c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7530:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7534:	4a0b      	ldr	r2, [pc, #44]	; (7564 <ULog::writeCurrent(signed char*, int, char*, int)+0x78>)
    7536:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    753a:	1c99      	adds	r1, r3, #2
    753c:	ed8d 5b06 	vstr	d5, [sp, #24]
    7540:	9100      	str	r1, [sp, #0]
    7542:	990a      	ldr	r1, [sp, #40]	; 0x28
    7544:	ed8d 6b04 	vstr	d6, [sp, #16]
    7548:	ed8d 7b02 	vstr	d7, [sp, #8]
    754c:	f014 f8a2 	bl	1b694 <snprintf>
    col += 3;
    7550:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7554:	3303      	adds	r3, #3
    7556:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    755a:	b008      	add	sp, #32
    755c:	bd10      	pop	{r4, pc}
    755e:	bf00      	nop
    7560:	20003edc 	.word	0x20003edc
    7564:	20003e98 	.word	0x20003e98

00007568 <ULog::writeVel(signed char*, int, char*, int)>:
  if (row < 0)
    7568:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d Wheel velocity (m/s) left, right: %.4f %.4f\r\n", col, col +1, v[0], v[1]);
    756a:	ed91 6a01 	vldr	s12, [r1, #4]
    756e:	ed91 7a00 	vldr	s14, [r1]
{
    7572:	b510      	push	{r4, lr}
    7574:	4604      	mov	r4, r0
    7576:	b086      	sub	sp, #24
    7578:	4618      	mov	r0, r3
  if (row < 0)
    757a:	db0d      	blt.n	7598 <ULog::writeVel(signed char*, int, char*, int)+0x30>
    snprintf(p1, maxLength, "%.4f %.4f ", v[0], v[1]);
    757c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7580:	4a11      	ldr	r2, [pc, #68]	; (75c8 <ULog::writeVel(signed char*, int, char*, int)+0x60>)
    7582:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7586:	9908      	ldr	r1, [sp, #32]
    7588:	ed8d 6b02 	vstr	d6, [sp, #8]
    758c:	ed8d 7b00 	vstr	d7, [sp]
    7590:	f014 f880 	bl	1b694 <snprintf>
}
    7594:	b006      	add	sp, #24
    7596:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d Wheel velocity (m/s) left, right: %.4f %.4f\r\n", col, col +1, v[0], v[1]);
    7598:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    759c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    75a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    75a4:	4a09      	ldr	r2, [pc, #36]	; (75cc <ULog::writeVel(signed char*, int, char*, int)+0x64>)
    75a6:	1c59      	adds	r1, r3, #1
    75a8:	ed8d 6b04 	vstr	d6, [sp, #16]
    75ac:	9100      	str	r1, [sp, #0]
    75ae:	9908      	ldr	r1, [sp, #32]
    75b0:	ed8d 7b02 	vstr	d7, [sp, #8]
    75b4:	f014 f86e 	bl	1b694 <snprintf>
    col += 2;
    75b8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    75bc:	3302      	adds	r3, #2
    75be:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    75c2:	b006      	add	sp, #24
    75c4:	bd10      	pop	{r4, pc}
    75c6:	bf00      	nop
    75c8:	2000446c 	.word	0x2000446c
    75cc:	20004430 	.word	0x20004430

000075d0 <ULog::writeEnc(signed char*, int, char*, int)>:
{
    75d0:	b510      	push	{r4, lr}
  if (row < 0)
    75d2:	2a00      	cmp	r2, #0
{
    75d4:	b084      	sub	sp, #16
    75d6:	4604      	mov	r4, r0
    75d8:	468c      	mov	ip, r1
    75da:	4618      	mov	r0, r3
    75dc:	9906      	ldr	r1, [sp, #24]
  if (row < 0)
    75de:	db08      	blt.n	75f2 <ULog::writeEnc(signed char*, int, char*, int)+0x22>
    snprintf(p1, maxLength, "%ld %ld ", v[0], v[1]);
    75e0:	4a0e      	ldr	r2, [pc, #56]	; (761c <ULog::writeEnc(signed char*, int, char*, int)+0x4c>)
    75e2:	e9dc 3400 	ldrd	r3, r4, [ip]
    75e6:	9406      	str	r4, [sp, #24]
}
    75e8:	b004      	add	sp, #16
    75ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(p1, maxLength, "%ld %ld ", v[0], v[1]);
    75ee:	f014 b851 	b.w	1b694 <snprintf>
    snprintf(p1, maxLength, "%% %2d %2d Encoder left, right: %ld %ld\r\n", col, col+1, v[0], v[1]);
    75f2:	f8dc 2004 	ldr.w	r2, [ip, #4]
    75f6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    75fa:	9202      	str	r2, [sp, #8]
    75fc:	f8dc 2000 	ldr.w	r2, [ip]
    7600:	9201      	str	r2, [sp, #4]
    7602:	1c5a      	adds	r2, r3, #1
    7604:	9200      	str	r2, [sp, #0]
    7606:	4a06      	ldr	r2, [pc, #24]	; (7620 <ULog::writeEnc(signed char*, int, char*, int)+0x50>)
    7608:	f014 f844 	bl	1b694 <snprintf>
    col += 2;
    760c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7610:	3302      	adds	r3, #2
    7612:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7616:	b004      	add	sp, #16
    7618:	bd10      	pop	{r4, pc}
    761a:	bf00      	nop
    761c:	20003e8c 	.word	0x20003e8c
    7620:	20004404 	.word	0x20004404

00007624 <ULog::writeMotVolt(signed char*, int, char*, int)>:
  if (row < 0)
    7624:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d Motor voltage (V) left, right: %.2f %.2f\r\n", col, col+1, v[0], v[1]);
    7626:	ed91 6a01 	vldr	s12, [r1, #4]
    762a:	ed91 7a00 	vldr	s14, [r1]
{
    762e:	b510      	push	{r4, lr}
    7630:	4604      	mov	r4, r0
    7632:	b086      	sub	sp, #24
    7634:	4618      	mov	r0, r3
  if (row < 0)
    7636:	db0d      	blt.n	7654 <ULog::writeMotVolt(signed char*, int, char*, int)+0x30>
    snprintf(p1, maxLength, "%.2f %.2f ", v[0], v[1]);
    7638:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    763c:	4a11      	ldr	r2, [pc, #68]	; (7684 <ULog::writeMotVolt(signed char*, int, char*, int)+0x60>)
    763e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7642:	9908      	ldr	r1, [sp, #32]
    7644:	ed8d 6b02 	vstr	d6, [sp, #8]
    7648:	ed8d 7b00 	vstr	d7, [sp]
    764c:	f014 f822 	bl	1b694 <snprintf>
}
    7650:	b006      	add	sp, #24
    7652:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d Motor voltage (V) left, right: %.2f %.2f\r\n", col, col+1, v[0], v[1]);
    7654:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7658:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    765c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7660:	4a09      	ldr	r2, [pc, #36]	; (7688 <ULog::writeMotVolt(signed char*, int, char*, int)+0x64>)
    7662:	1c59      	adds	r1, r3, #1
    7664:	ed8d 6b04 	vstr	d6, [sp, #16]
    7668:	9100      	str	r1, [sp, #0]
    766a:	9908      	ldr	r1, [sp, #32]
    766c:	ed8d 7b02 	vstr	d7, [sp, #8]
    7670:	f014 f810 	bl	1b694 <snprintf>
    col += 2;
    7674:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7678:	3302      	adds	r3, #2
    767a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    767e:	b006      	add	sp, #24
    7680:	bd10      	pop	{r4, pc}
    7682:	bf00      	nop
    7684:	20003f24 	.word	0x20003f24
    7688:	20003eec 	.word	0x20003eec

0000768c <ULog::writePose(signed char*, int, char*, int)>:
  if (row < 0)
    768c:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d %2d %2d Pose x,y,h,tilt (m,m,rad,rad): %.4f %.4f %.4f %.4f\r\n", col, col+1, col+2, col+3, v[0], v[1], v[2], v[3]);
    768e:	ed91 4a03 	vldr	s8, [r1, #12]
    7692:	ed91 5a02 	vldr	s10, [r1, #8]
    7696:	ed91 6a01 	vldr	s12, [r1, #4]
    769a:	ed91 7a00 	vldr	s14, [r1]
{
    769e:	b510      	push	{r4, lr}
    76a0:	4604      	mov	r4, r0
    76a2:	b08c      	sub	sp, #48	; 0x30
    76a4:	4618      	mov	r0, r3
  if (row < 0)
    76a6:	db15      	blt.n	76d4 <ULog::writePose(signed char*, int, char*, int)+0x48>
    snprintf(p1, maxLength, "%.4f %.4f %.5f %.5f ", v[0], v[1], v[2], v[3]);
    76a8:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    76ac:	4a1b      	ldr	r2, [pc, #108]	; (771c <ULog::writePose(signed char*, int, char*, int)+0x90>)
    76ae:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    76b2:	990e      	ldr	r1, [sp, #56]	; 0x38
    76b4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    76b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    76bc:	ed8d 4b06 	vstr	d4, [sp, #24]
    76c0:	ed8d 5b04 	vstr	d5, [sp, #16]
    76c4:	ed8d 6b02 	vstr	d6, [sp, #8]
    76c8:	ed8d 7b00 	vstr	d7, [sp]
    76cc:	f013 ffe2 	bl	1b694 <snprintf>
}
    76d0:	b00c      	add	sp, #48	; 0x30
    76d2:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d %2d %2d Pose x,y,h,tilt (m,m,rad,rad): %.4f %.4f %.4f %.4f\r\n", col, col+1, col+2, col+3, v[0], v[1], v[2], v[3]);
    76d4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    76d8:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    76dc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    76e0:	1cda      	adds	r2, r3, #3
    76e2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    76e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    76ea:	1c99      	adds	r1, r3, #2
    76ec:	9202      	str	r2, [sp, #8]
    76ee:	1c5a      	adds	r2, r3, #1
    76f0:	ed8d 4b0a 	vstr	d4, [sp, #40]	; 0x28
    76f4:	e9cd 2100 	strd	r2, r1, [sp]
    76f8:	ed8d 5b08 	vstr	d5, [sp, #32]
    76fc:	4a08      	ldr	r2, [pc, #32]	; (7720 <ULog::writePose(signed char*, int, char*, int)+0x94>)
    76fe:	990e      	ldr	r1, [sp, #56]	; 0x38
    7700:	ed8d 6b06 	vstr	d6, [sp, #24]
    7704:	ed8d 7b04 	vstr	d7, [sp, #16]
    7708:	f013 ffc4 	bl	1b694 <snprintf>
    col += 4;
    770c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7710:	3304      	adds	r3, #4
    7712:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7716:	b00c      	add	sp, #48	; 0x30
    7718:	bd10      	pop	{r4, pc}
    771a:	bf00      	nop
    771c:	20004554 	.word	0x20004554
    7720:	2000450c 	.word	0x2000450c

00007724 <ULog::writeTiming(signed char*, int, char*, int)>:
  if (row < 0)
    7724:	2a00      	cmp	r2, #0
{
    7726:	b530      	push	{r4, r5, lr}
    7728:	4604      	mov	r4, r0
    772a:	b087      	sub	sp, #28
    772c:	4618      	mov	r0, r3
  if (row < 0)
    772e:	db28      	blt.n	7782 <ULog::writeTiming(signed char*, int, char*, int)+0x5e>
    v2[3] = v[3];
    7730:	68cb      	ldr	r3, [r1, #12]
    if (v2[1] > 3000)
    7732:	f640 3cb8 	movw	ip, #3000	; 0xbb8
    v2[2] = v[2];
    7736:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
      v2[3] = -1;
    773a:	4563      	cmp	r3, ip
    773c:	bfc8      	it	gt
    773e:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
      v2[1] = -1;
    7742:	4564      	cmp	r4, ip
    7744:	bfc8      	it	gt
    7746:	f04f 34ff 	movgt.w	r4, #4294967295	; 0xffffffff
      v2[2] = -1;
    774a:	4562      	cmp	r2, ip
    774c:	bfc8      	it	gt
    774e:	f04f 32ff 	movgt.w	r2, #4294967295	; 0xffffffff
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    7752:	9302      	str	r3, [sp, #8]
    7754:	9201      	str	r2, [sp, #4]
    7756:	9400      	str	r4, [sp, #0]
    v2[4] = v[4];
    7758:	690c      	ldr	r4, [r1, #16]
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    775a:	680b      	ldr	r3, [r1, #0]
      v2[4] = -1;
    775c:	4564      	cmp	r4, ip
    775e:	bfc8      	it	gt
    7760:	f04f 34ff 	movgt.w	r4, #4294967295	; 0xffffffff
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    7764:	4a0e      	ldr	r2, [pc, #56]	; (77a0 <ULog::writeTiming(signed char*, int, char*, int)+0x7c>)
    7766:	9403      	str	r4, [sp, #12]
    v2[6] = v[6];
    7768:	698c      	ldr	r4, [r1, #24]
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    776a:	694d      	ldr	r5, [r1, #20]
      v2[6] = -1;
    776c:	4564      	cmp	r4, ip
    776e:	bfc8      	it	gt
    7770:	f04f 34ff 	movgt.w	r4, #4294967295	; 0xffffffff
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    7774:	990a      	ldr	r1, [sp, #40]	; 0x28
    7776:	9504      	str	r5, [sp, #16]
    7778:	9405      	str	r4, [sp, #20]
    777a:	f013 ff8b 	bl	1b694 <snprintf>
}
    777e:	b007      	add	sp, #28
    7780:	bd30      	pop	{r4, r5, pc}
    snprintf(p1, maxLength, "%% %2d %2d timing (CPU_clock(us), ad, sensor, control, end, T-sample, load o/oo)\r\n",
    7782:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7786:	4a07      	ldr	r2, [pc, #28]	; (77a4 <ULog::writeTiming(signed char*, int, char*, int)+0x80>)
    7788:	1d9d      	adds	r5, r3, #6
    778a:	990a      	ldr	r1, [sp, #40]	; 0x28
    778c:	9500      	str	r5, [sp, #0]
    778e:	f013 ff81 	bl	1b694 <snprintf>
    col += 7;
    7792:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7796:	3307      	adds	r3, #7
    7798:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    779c:	b007      	add	sp, #28
    779e:	bd30      	pop	{r4, r5, pc}
    77a0:	20003e78 	.word	0x20003e78
    77a4:	20003e24 	.word	0x20003e24

000077a8 <ULog::writeExtra(signed char*, int, char*, int)>:
{
    77a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (row < 0)
    77ac:	2a00      	cmp	r2, #0
{
    77ae:	b083      	sub	sp, #12
    77b0:	460d      	mov	r5, r1
    77b2:	461c      	mov	r4, r3
    77b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if (row < 0)
    77b6:	db19      	blt.n	77ec <ULog::writeExtra(signed char*, int, char*, int)+0x44>
      m = 0;
    77b8:	2600      	movs	r6, #0
        snprintf(p1, maxLength - m, "%g ", v[i]);
    77ba:	f8df 909c 	ldr.w	r9, [pc, #156]	; 7858 <ULog::writeExtra(signed char*, int, char*, int)+0xb0>
    77be:	f101 0850 	add.w	r8, r1, #80	; 0x50
    77c2:	ecb5 7a01 	vldmia	r5!, {s14}
    77c6:	1bb9      	subs	r1, r7, r6
    77c8:	464a      	mov	r2, r9
    77ca:	4620      	mov	r0, r4
    77cc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    77d0:	ed8d 7b00 	vstr	d7, [sp]
    77d4:	f013 ff5e 	bl	1b694 <snprintf>
        n = strlen(p1);
    77d8:	4620      	mov	r0, r4
    77da:	f015 fcd1 	bl	1d180 <strlen>
      for (int i = 0; i < dataloggerExtraSize; i++)
    77de:	4545      	cmp	r5, r8
        m += n;
    77e0:	4406      	add	r6, r0
        p1 += n;
    77e2:	4404      	add	r4, r0
      for (int i = 0; i < dataloggerExtraSize; i++)
    77e4:	d1ed      	bne.n	77c2 <ULog::writeExtra(signed char*, int, char*, int)+0x1a>
}
    77e6:	b003      	add	sp, #12
    77e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      snprintf(p1, maxLength, "%% %2d %2d linesensorExtra ", col, col+dataloggerExtraSize-1);
    77ec:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
    77f0:	4606      	mov	r6, r0
    77f2:	4a17      	ldr	r2, [pc, #92]	; (7850 <ULog::writeExtra(signed char*, int, char*, int)+0xa8>)
    77f4:	4639      	mov	r1, r7
    77f6:	f103 0013 	add.w	r0, r3, #19
    77fa:	f105 0850 	add.w	r8, r5, #80	; 0x50
        snprintf(p1, maxLength - m, "%g ", v[i]);
    77fe:	f8df 9058 	ldr.w	r9, [pc, #88]	; 7858 <ULog::writeExtra(signed char*, int, char*, int)+0xb0>
      snprintf(p1, maxLength, "%% %2d %2d linesensorExtra ", col, col+dataloggerExtraSize-1);
    7802:	9000      	str	r0, [sp, #0]
    7804:	4620      	mov	r0, r4
    7806:	f013 ff45 	bl	1b694 <snprintf>
      col += dataloggerExtraSize;
    780a:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
      n = strlen(p1);
    780e:	4620      	mov	r0, r4
      col += dataloggerExtraSize;
    7810:	3314      	adds	r3, #20
    7812:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
      n = strlen(p1);
    7816:	f015 fcb3 	bl	1d180 <strlen>
      m = n;
    781a:	4606      	mov	r6, r0
        snprintf(p1, maxLength - m, "%g ", v[i]);
    781c:	ecb5 7a01 	vldmia	r5!, {s14}
        p1 += n;
    7820:	4404      	add	r4, r0
        snprintf(p1, maxLength - m, "%g ", v[i]);
    7822:	1bb9      	subs	r1, r7, r6
    7824:	464a      	mov	r2, r9
    7826:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    782a:	4620      	mov	r0, r4
    782c:	ed8d 7b00 	vstr	d7, [sp]
    7830:	f013 ff30 	bl	1b694 <snprintf>
        n = strlen(p1);
    7834:	4620      	mov	r0, r4
    7836:	f015 fca3 	bl	1d180 <strlen>
      for (int i = 0; i < dataloggerExtraSize; i++)
    783a:	45a8      	cmp	r8, r5
        m += n;
    783c:	4406      	add	r6, r0
      for (int i = 0; i < dataloggerExtraSize; i++)
    783e:	d1ed      	bne.n	781c <ULog::writeExtra(signed char*, int, char*, int)+0x74>
      snprintf(p1, maxLength - m, "\r\n");
    7840:	4a04      	ldr	r2, [pc, #16]	; (7854 <ULog::writeExtra(signed char*, int, char*, int)+0xac>)
    7842:	1bb9      	subs	r1, r7, r6
    7844:	4420      	add	r0, r4
}
    7846:	b003      	add	sp, #12
    7848:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      snprintf(p1, maxLength - m, "\r\n");
    784c:	f013 bf22 	b.w	1b694 <snprintf>
    7850:	20003df0 	.word	0x20003df0
    7854:	20004cf4 	.word	0x20004cf4
    7858:	20003e0c 	.word	0x20003e0c

0000785c <ULog::writeLineSensor(signed char*, int, char*, int)>:
  if (row < 0)
    785c:	2a00      	cmp	r2, #0
  uint8_t flags = v[15];
    785e:	f9b1 c01e 	ldrsh.w	ip, [r1, #30]
{
    7862:	b530      	push	{r4, r5, lr}
    7864:	4604      	mov	r4, r0
    7866:	b097      	sub	sp, #92	; 0x5c
    7868:	4618      	mov	r0, r3
  if (row < 0)
    786a:	db44      	blt.n	78f6 <ULog::writeLineSensor(signed char*, int, char*, int)+0x9a>
    snprintf(p1, maxLength, "%.2f %.2f %x %x %d %d %d %d %d %d %d %d  %d %d %d %.2f %d %d ",
    786c:	f991 301d 	ldrsb.w	r3, [r1, #29]
    7870:	ed91 5a04 	vldr	s10, [r1, #16]
    7874:	ed91 6a06 	vldr	s12, [r1, #24]
    7878:	ed91 7a05 	vldr	s14, [r1, #20]
    787c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7880:	f991 201c 	ldrsb.w	r2, [r1, #28]
    7884:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7888:	9315      	str	r3, [sp, #84]	; 0x54
    788a:	f3cc 1300 	ubfx	r3, ip, #4, #1
    788e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7892:	9214      	str	r2, [sp, #80]	; 0x50
    7894:	9310      	str	r3, [sp, #64]	; 0x40
    7896:	f00c 0201 	and.w	r2, ip, #1
    789a:	f3cc 0340 	ubfx	r3, ip, #1, #1
    789e:	920f      	str	r2, [sp, #60]	; 0x3c
    78a0:	930e      	str	r3, [sp, #56]	; 0x38
    78a2:	4a1d      	ldr	r2, [pc, #116]	; (7918 <ULog::writeLineSensor(signed char*, int, char*, int)+0xbc>)
    78a4:	ed8d 5b00 	vstr	d5, [sp]
    78a8:	ed8d 6b12 	vstr	d6, [sp, #72]	; 0x48
    78ac:	ed8d 7b02 	vstr	d7, [sp, #8]
    78b0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    78b4:	930d      	str	r3, [sp, #52]	; 0x34
    78b6:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    78ba:	930c      	str	r3, [sp, #48]	; 0x30
    78bc:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
    78c0:	930b      	str	r3, [sp, #44]	; 0x2c
    78c2:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
    78c6:	930a      	str	r3, [sp, #40]	; 0x28
    78c8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    78cc:	9309      	str	r3, [sp, #36]	; 0x24
    78ce:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    78d2:	9308      	str	r3, [sp, #32]
    78d4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    78d8:	f9b1 4000 	ldrsh.w	r4, [r1]
    78dc:	f3cc 01c0 	ubfx	r1, ip, #3, #1
    78e0:	9307      	str	r3, [sp, #28]
    78e2:	f3cc 0380 	ubfx	r3, ip, #2, #1
    78e6:	e9cd 1405 	strd	r1, r4, [sp, #20]
    78ea:	991a      	ldr	r1, [sp, #104]	; 0x68
    78ec:	9304      	str	r3, [sp, #16]
    78ee:	f013 fed1 	bl	1b694 <snprintf>
}
    78f2:	b017      	add	sp, #92	; 0x5c
    78f4:	bd30      	pop	{r4, r5, pc}
    snprintf(p1, maxLength, "%% %2d .. %2d Edge sensor: left pos, right pos, "
    78f6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    78fa:	4a08      	ldr	r2, [pc, #32]	; (791c <ULog::writeLineSensor(signed char*, int, char*, int)+0xc0>)
    78fc:	f103 0512 	add.w	r5, r3, #18
    7900:	991a      	ldr	r1, [sp, #104]	; 0x68
    7902:	9500      	str	r5, [sp, #0]
    7904:	f013 fec6 	bl	1b694 <snprintf>
    col += 19;
    7908:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    790c:	3313      	adds	r3, #19
    790e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7912:	b017      	add	sp, #92	; 0x5c
    7914:	bd30      	pop	{r4, r5, pc}
    7916:	bf00      	nop
    7918:	200040c8 	.word	0x200040c8
    791c:	20004018 	.word	0x20004018

00007920 <ULog::writeDistSensor(signed char*, int, char*, int)>:
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7920:	ed91 6a00 	vldr	s12, [r1]
    7924:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7928:	ed91 7a01 	vldr	s14, [r1, #4]
  if (d1 > 1.5 or d1 < 0.05)
    792c:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7930:	4937      	ldr	r1, [pc, #220]	; (7a10 <ULog::writeDistSensor(signed char*, int, char*, int)+0xf0>)
    7932:	eeb8 6a46 	vcvt.f32.u32	s12, s12
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7936:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    793a:	edd1 6a11 	vldr	s13, [r1, #68]	; 0x44
    793e:	ed91 4a0f 	vldr	s8, [r1, #60]	; 0x3c
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7942:	edd1 7a12 	vldr	s15, [r1, #72]	; 0x48
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7946:	eed6 6a04 	vfnms.f32	s13, s12, s8
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    794a:	edd1 4a10 	vldr	s9, [r1, #64]	; 0x40
    794e:	eed7 7a24 	vfnms.f32	s15, s14, s9
{
    7952:	b530      	push	{r4, r5, lr}
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7954:	ee85 7aa6 	vdiv.f32	s14, s11, s13
{
    7958:	4604      	mov	r4, r0
    795a:	b087      	sub	sp, #28
    795c:	4618      	mov	r0, r3
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    795e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  if (d1 > 1.5 or d1 < 0.05)
    7962:	eeb4 7ac5 	vcmpe.f32	s14, s10
    7966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    796a:	dc2c      	bgt.n	79c6 <ULog::writeDistSensor(signed char*, int, char*, int)+0xa6>
    796c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  if (d2 > 1.5 or d2 < 0.05)
    7970:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
  if (d1 > 1.5 or d1 < 0.05)
    7974:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
    7978:	ed9f 4b23 	vldr	d4, [pc, #140]	; 7a08 <ULog::writeDistSensor(signed char*, int, char*, int)+0xe8>
    797c:	eeb4 7b44 	vcmp.f64	d7, d4
    7980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (d2 > 1.5 or d2 < 0.05)
    7984:	eeb4 6ae6 	vcmpe.f32	s12, s13
  if (d1 > 1.5 or d1 < 0.05)
    7988:	bf48      	it	mi
    798a:	eeb0 7b45 	vmovmi.f64	d7, d5
  if (d2 > 1.5 or d2 < 0.05)
    798e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7992:	dc21      	bgt.n	79d8 <ULog::writeDistSensor(signed char*, int, char*, int)+0xb8>
    7994:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7998:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
    799c:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 7a08 <ULog::writeDistSensor(signed char*, int, char*, int)+0xe8>
    79a0:	eeb4 6b44 	vcmp.f64	d6, d4
    79a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79a8:	bf48      	it	mi
    79aa:	eeb0 6b45 	vmovmi.f64	d6, d5
  if (row < 0)
    79ae:	2a00      	cmp	r2, #0
    79b0:	db16      	blt.n	79e0 <ULog::writeDistSensor(signed char*, int, char*, int)+0xc0>
      snprintf(p1, maxLength, "%.3f %.3f ", d1, d2);
    79b2:	4a18      	ldr	r2, [pc, #96]	; (7a14 <ULog::writeDistSensor(signed char*, int, char*, int)+0xf4>)
    79b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    79b6:	ed8d 6b02 	vstr	d6, [sp, #8]
    79ba:	ed8d 7b00 	vstr	d7, [sp]
    79be:	f013 fe69 	bl	1b694 <snprintf>
}
    79c2:	b007      	add	sp, #28
    79c4:	bd30      	pop	{r4, r5, pc}
  if (d2 > 1.5 or d2 < 0.05)
    79c6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    79ca:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
    79ce:	eeb4 6ae6 	vcmpe.f32	s12, s13
    79d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79d6:	dddd      	ble.n	7994 <ULog::writeDistSensor(signed char*, int, char*, int)+0x74>
  if (row < 0)
    79d8:	2a00      	cmp	r2, #0
    79da:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    79de:	dae8      	bge.n	79b2 <ULog::writeDistSensor(signed char*, int, char*, int)+0x92>
      snprintf(p1, maxLength, "%% %2d %2d Distance sensor (m): %.3f %.3f\r\n", col, col+1, d1, d2);
    79e0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    79e4:	4a0c      	ldr	r2, [pc, #48]	; (7a18 <ULog::writeDistSensor(signed char*, int, char*, int)+0xf8>)
    79e6:	1c5d      	adds	r5, r3, #1
    79e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    79ea:	9500      	str	r5, [sp, #0]
    79ec:	ed8d 6b04 	vstr	d6, [sp, #16]
    79f0:	ed8d 7b02 	vstr	d7, [sp, #8]
    79f4:	f013 fe4e 	bl	1b694 <snprintf>
    col += 2;
    79f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    79fc:	3302      	adds	r3, #2
    79fe:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7a02:	b007      	add	sp, #28
    7a04:	bd30      	pop	{r4, r5, pc}
    7a06:	bf00      	nop
    7a08:	9999999a 	.word	0x9999999a
    7a0c:	3fa99999 	.word	0x3fa99999
    7a10:	2000e190 	.word	0x2000e190
    7a14:	2000400c 	.word	0x2000400c
    7a18:	20003fe0 	.word	0x20003fe0

00007a1c <ULog::writeBufferMsg()>:
  if (logStreamedMsgOutPos == 0)
    7a1c:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
    7a1e:	b530      	push	{r4, r5, lr}
    7a20:	4604      	mov	r4, r0
    7a22:	b083      	sub	sp, #12
  if (logStreamedMsgOutPos == 0)
    7a24:	b123      	cbz	r3, 7a30 <ULog::writeBufferMsg()+0x14>
  if (logStreamedMsgOutPos < logStreamedMsgPos)
    7a26:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7a28:	429a      	cmp	r2, r3
    7a2a:	d814      	bhi.n	7a56 <ULog::writeBufferMsg()+0x3a>
}
    7a2c:	b003      	add	sp, #12
    7a2e:	bd30      	pop	{r4, r5, pc}
  * \param n is number of bytes to send
  * \param blocking if false, then send if space only, else don't return until send
  */
  inline bool send_block(const char * str, int n) //, bool blocking)
  {
    return client_send_str(str, n); //, blocking);
    7a30:	2234      	movs	r2, #52	; 0x34
    7a32:	4912      	ldr	r1, [pc, #72]	; (7a7c <ULog::writeBufferMsg()+0x60>)
    7a34:	4812      	ldr	r0, [pc, #72]	; (7a80 <ULog::writeBufferMsg()+0x64>)
    7a36:	f004 fd29 	bl	c48c <UUSB::client_send_str(char const*, int)>
    7a3a:	2231      	movs	r2, #49	; 0x31
    7a3c:	4911      	ldr	r1, [pc, #68]	; (7a84 <ULog::writeBufferMsg()+0x68>)
    7a3e:	4810      	ldr	r0, [pc, #64]	; (7a80 <ULog::writeBufferMsg()+0x64>)
    7a40:	f004 fd24 	bl	c48c <UUSB::client_send_str(char const*, int)>
    7a44:	221f      	movs	r2, #31
    7a46:	4910      	ldr	r1, [pc, #64]	; (7a88 <ULog::writeBufferMsg()+0x6c>)
    7a48:	480d      	ldr	r0, [pc, #52]	; (7a80 <ULog::writeBufferMsg()+0x64>)
    7a4a:	f004 fd1f 	bl	c48c <UUSB::client_send_str(char const*, int)>
  if (logStreamedMsgOutPos < logStreamedMsgPos)
    7a4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7a50:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7a52:	429a      	cmp	r2, r3
    7a54:	d9ea      	bls.n	7a2c <ULog::writeBufferMsg()+0x10>
    const char * p1 = (char*)logBuffer + logStreamedMsgOutPos;
    7a56:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7a58:	4419      	add	r1, r3
    int n = strlen(p1);
    7a5a:	4608      	mov	r0, r1
    7a5c:	9101      	str	r1, [sp, #4]
    7a5e:	f015 fb8f 	bl	1d180 <strlen>
    7a62:	9901      	ldr	r1, [sp, #4]
    7a64:	4605      	mov	r5, r0
    7a66:	4602      	mov	r2, r0
    7a68:	4805      	ldr	r0, [pc, #20]	; (7a80 <ULog::writeBufferMsg()+0x64>)
    7a6a:	f004 fd0f 	bl	c48c <UUSB::client_send_str(char const*, int)>
    logStreamedMsgOutPos += n + 1;
    7a6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7a70:	3301      	adds	r3, #1
    7a72:	442b      	add	r3, r5
    7a74:	64a3      	str	r3, [r4, #72]	; 0x48
}
    7a76:	b003      	add	sp, #12
    7a78:	bd30      	pop	{r4, r5, pc}
    7a7a:	bf00      	nop
    7a7c:	20003f54 	.word	0x20003f54
    7a80:	2000eab8 	.word	0x2000eab8
    7a84:	20003f8c 	.word	0x20003f8c
    7a88:	20003fc0 	.word	0x20003fc0

00007a8c <ULog::initLogStructure()>:
{ // stop logging of messages
    7a8c:	b530      	push	{r4, r5, lr}
  logRowFlags[LOG_TIME] = true;
    7a8e:	2201      	movs	r2, #1
  logStreamedMsg = false;
    7a90:	2400      	movs	r4, #0
  logRowFlags[LOG_TIME] = true;
    7a92:	4601      	mov	r1, r0
    7a94:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
    7a98:	f100 0e38 	add.w	lr, r0, #56	; 0x38
    7a9c:	4d17      	ldr	r5, [pc, #92]	; (7afc <ULog::initLogStructure()+0x70>)
  logStreamedMsg = false;
    7a9e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  logRowSize = 0;
    7aa2:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
  logRowFlags[LOG_TIME] = true;
    7aa6:	f801 2f1c 	strb.w	r2, [r1, #28]!
    if (logRowFlags[i])
    7aaa:	b192      	cbz	r2, 7ad2 <ULog::initLogStructure()+0x46>
    7aac:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
      switch (logRowItemSize[i * 2 + 1])
    7ab0:	f04f 0c01 	mov.w	ip, #1
      logRowPos[i] = logRowSize;
    7ab4:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
    7ab8:	3a49      	subs	r2, #73	; 0x49
    7aba:	801c      	strh	r4, [r3, #0]
      switch (logRowItemSize[i * 2 + 1])
    7abc:	b2d2      	uxtb	r2, r2
    7abe:	2a22      	cmp	r2, #34	; 0x22
    7ac0:	bf98      	it	ls
    7ac2:	f915 c002 	ldrsbls.w	ip, [r5, r2]
      logRowSize += bz * logRowItemSize[i * 2];
    7ac6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    7aca:	fb0c 4402 	mla	r4, ip, r2, r4
    7ace:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
  for (int i = 0; i <  LOG_MAX_CNT; i++)
    7ad2:	4571      	cmp	r1, lr
    7ad4:	f103 0302 	add.w	r3, r3, #2
    7ad8:	d002      	beq.n	7ae0 <ULog::initLogStructure()+0x54>
    if (logRowFlags[i])
    7ada:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7ade:	e7e4      	b.n	7aaa <ULog::initLogStructure()+0x1e>
  if (logBuffer == nullptr)
    7ae0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    7ae2:	b123      	cbz	r3, 7aee <ULog::initLogStructure()+0x62>
    logRowsCntMax = LOG_BUFFER_MAX / logRowSize;
    7ae4:	4b06      	ldr	r3, [pc, #24]	; (7b00 <ULog::initLogStructure()+0x74>)
    7ae6:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    7aea:	fb93 f3f2 	sdiv	r3, r3, r2
  logRowCnt = 0;
    7aee:	2200      	movs	r2, #0
    7af0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  logFull = false;
    7af4:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
}
    7af8:	bd30      	pop	{r4, r5, pc}
    7afa:	bf00      	nop
    7afc:	2000264c 	.word	0x2000264c
    7b00:	0003d090 	.word	0x0003d090

00007b04 <ULog::setLogFlagsOther(char const*)>:
{
    7b04:	b510      	push	{r4, lr}
  logRowFlags[LOG_TIME] = true; //strtol(p1, (char **) &p1, 10);
    7b06:	2301      	movs	r3, #1
{
    7b08:	b082      	sub	sp, #8
    7b0a:	4604      	mov	r4, r0
  const char * p1 = &buf[5];
    7b0c:	1d48      	adds	r0, r1, #5
  logRowFlags[LOG_MISSION] = strtol(p1, (char **) &p1, 10); // not available
    7b0e:	220a      	movs	r2, #10
    7b10:	a901      	add	r1, sp, #4
  logRowFlags[LOG_TIME] = true; //strtol(p1, (char **) &p1, 10);
    7b12:	7723      	strb	r3, [r4, #28]
  const char * p1 = &buf[5];
    7b14:	9001      	str	r0, [sp, #4]
  logRowFlags[LOG_MISSION] = strtol(p1, (char **) &p1, 10); // not available
    7b16:	f013 fbcd 	bl	1b2b4 <strtol>
    7b1a:	3800      	subs	r0, #0
  logRowFlags[LOG_ACC] = strtol(p1, (char **) &p1, 10);
    7b1c:	a901      	add	r1, sp, #4
    7b1e:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MISSION] = strtol(p1, (char **) &p1, 10); // not available
    7b22:	bf18      	it	ne
    7b24:	2001      	movne	r0, #1
    7b26:	7760      	strb	r0, [r4, #29]
  logRowFlags[LOG_ACC] = strtol(p1, (char **) &p1, 10);
    7b28:	9801      	ldr	r0, [sp, #4]
    7b2a:	f013 fbc3 	bl	1b2b4 <strtol>
    7b2e:	3800      	subs	r0, #0
  logRowFlags[LOG_GYRO] = strtol(p1, (char **) &p1, 10);
    7b30:	a901      	add	r1, sp, #4
    7b32:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_ACC] = strtol(p1, (char **) &p1, 10);
    7b36:	bf18      	it	ne
    7b38:	2001      	movne	r0, #1
    7b3a:	77a0      	strb	r0, [r4, #30]
  logRowFlags[LOG_GYRO] = strtol(p1, (char **) &p1, 10);
    7b3c:	9801      	ldr	r0, [sp, #4]
    7b3e:	f013 fbb9 	bl	1b2b4 <strtol>
    7b42:	3800      	subs	r0, #0
  logRowFlags[LOG_MAG] = strtol(p1, (char **) &p1, 10); // not enabled
    7b44:	a901      	add	r1, sp, #4
    7b46:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_GYRO] = strtol(p1, (char **) &p1, 10);
    7b4a:	bf18      	it	ne
    7b4c:	2001      	movne	r0, #1
    7b4e:	77e0      	strb	r0, [r4, #31]
  logRowFlags[LOG_MAG] = strtol(p1, (char **) &p1, 10); // not enabled
    7b50:	9801      	ldr	r0, [sp, #4]
    7b52:	f013 fbaf 	bl	1b2b4 <strtol>
    7b56:	3800      	subs	r0, #0
  logRowFlags[LOG_MOTV_REF] = strtol(p1, (char **) &p1, 10); // not available
    7b58:	a901      	add	r1, sp, #4
    7b5a:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MAG] = strtol(p1, (char **) &p1, 10); // not enabled
    7b5e:	bf18      	it	ne
    7b60:	2001      	movne	r0, #1
    7b62:	f884 0020 	strb.w	r0, [r4, #32]
  logRowFlags[LOG_MOTV_REF] = strtol(p1, (char **) &p1, 10); // not available
    7b66:	9801      	ldr	r0, [sp, #4]
    7b68:	f013 fba4 	bl	1b2b4 <strtol>
    7b6c:	3800      	subs	r0, #0
  logRowFlags[LOG_MOTV]  = strtol(p1, (char **) &p1, 10);
    7b6e:	a901      	add	r1, sp, #4
    7b70:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MOTV_REF] = strtol(p1, (char **) &p1, 10); // not available
    7b74:	bf18      	it	ne
    7b76:	2001      	movne	r0, #1
    7b78:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  logRowFlags[LOG_MOTV]  = strtol(p1, (char **) &p1, 10);
    7b7c:	9801      	ldr	r0, [sp, #4]
    7b7e:	f013 fb99 	bl	1b2b4 <strtol>
    7b82:	3800      	subs	r0, #0
  logRowFlags[LOG_MOTA]  = strtol(p1, (char **) &p1, 10);
    7b84:	a901      	add	r1, sp, #4
    7b86:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MOTV]  = strtol(p1, (char **) &p1, 10);
    7b8a:	bf18      	it	ne
    7b8c:	2001      	movne	r0, #1
    7b8e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  logRowFlags[LOG_MOTA]  = strtol(p1, (char **) &p1, 10);
    7b92:	9801      	ldr	r0, [sp, #4]
    7b94:	f013 fb8e 	bl	1b2b4 <strtol>
    7b98:	3800      	subs	r0, #0
  logRowFlags[LOG_ENC]  = strtol(p1, (char **) &p1, 10);
    7b9a:	a901      	add	r1, sp, #4
    7b9c:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MOTA]  = strtol(p1, (char **) &p1, 10);
    7ba0:	bf18      	it	ne
    7ba2:	2001      	movne	r0, #1
    7ba4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  logRowFlags[LOG_ENC]  = strtol(p1, (char **) &p1, 10);
    7ba8:	9801      	ldr	r0, [sp, #4]
    7baa:	f013 fb83 	bl	1b2b4 <strtol>
    7bae:	3800      	subs	r0, #0
  logRowFlags[LOG_WHEELVEL]  = strtol(p1, (char **) &p1, 10);
    7bb0:	a901      	add	r1, sp, #4
    7bb2:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_ENC]  = strtol(p1, (char **) &p1, 10);
    7bb6:	bf18      	it	ne
    7bb8:	2001      	movne	r0, #1
    7bba:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  logRowFlags[LOG_WHEELVEL]  = strtol(p1, (char **) &p1, 10);
    7bbe:	9801      	ldr	r0, [sp, #4]
    7bc0:	f013 fb78 	bl	1b2b4 <strtol>
    7bc4:	3800      	subs	r0, #0
  logRowFlags[LOG_TURNRATE]  = strtol(p1, (char **) &p1, 10);
    7bc6:	a901      	add	r1, sp, #4
    7bc8:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_WHEELVEL]  = strtol(p1, (char **) &p1, 10);
    7bcc:	bf18      	it	ne
    7bce:	2001      	movne	r0, #1
    7bd0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  logRowFlags[LOG_TURNRATE]  = strtol(p1, (char **) &p1, 10);
    7bd4:	9801      	ldr	r0, [sp, #4]
    7bd6:	f013 fb6d 	bl	1b2b4 <strtol>
    7bda:	3800      	subs	r0, #0
  logRowFlags[LOG_POSE]  = strtol(p1, (char **) &p1, 10);
    7bdc:	a901      	add	r1, sp, #4
    7bde:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_TURNRATE]  = strtol(p1, (char **) &p1, 10);
    7be2:	bf18      	it	ne
    7be4:	2001      	movne	r0, #1
    7be6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  logRowFlags[LOG_POSE]  = strtol(p1, (char **) &p1, 10);
    7bea:	9801      	ldr	r0, [sp, #4]
    7bec:	f013 fb62 	bl	1b2b4 <strtol>
    7bf0:	3800      	subs	r0, #0
  logRowFlags[LOG_LINE]  = strtol(p1, (char **) &p1, 10);
    7bf2:	a901      	add	r1, sp, #4
    7bf4:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_POSE]  = strtol(p1, (char **) &p1, 10);
    7bf8:	bf18      	it	ne
    7bfa:	2001      	movne	r0, #1
    7bfc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
  logRowFlags[LOG_LINE]  = strtol(p1, (char **) &p1, 10);
    7c00:	9801      	ldr	r0, [sp, #4]
    7c02:	f013 fb57 	bl	1b2b4 <strtol>
    7c06:	3800      	subs	r0, #0
  logRowFlags[LOG_DIST]  = strtol(p1, (char **) &p1, 10);
    7c08:	a901      	add	r1, sp, #4
    7c0a:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_LINE]  = strtol(p1, (char **) &p1, 10);
    7c0e:	bf18      	it	ne
    7c10:	2001      	movne	r0, #1
    7c12:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  logRowFlags[LOG_DIST]  = strtol(p1, (char **) &p1, 10);
    7c16:	9801      	ldr	r0, [sp, #4]
    7c18:	f013 fb4c 	bl	1b2b4 <strtol>
    7c1c:	3800      	subs	r0, #0
  logRowFlags[LOG_BATT]  = strtol(p1, (char **) &p1, 10);
    7c1e:	a901      	add	r1, sp, #4
    7c20:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_DIST]  = strtol(p1, (char **) &p1, 10);
    7c24:	bf18      	it	ne
    7c26:	2001      	movne	r0, #1
    7c28:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  logRowFlags[LOG_BATT]  = strtol(p1, (char **) &p1, 10);
    7c2c:	9801      	ldr	r0, [sp, #4]
    7c2e:	f013 fb41 	bl	1b2b4 <strtol>
    7c32:	3800      	subs	r0, #0
  logRowFlags[LOG_TIMING]  = strtol(p1, (char **) &p1, 10);
    7c34:	a901      	add	r1, sp, #4
    7c36:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_BATT]  = strtol(p1, (char **) &p1, 10);
    7c3a:	bf18      	it	ne
    7c3c:	2001      	movne	r0, #1
    7c3e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  logRowFlags[LOG_TIMING]  = strtol(p1, (char **) &p1, 10);
    7c42:	9801      	ldr	r0, [sp, #4]
    7c44:	f013 fb36 	bl	1b2b4 <strtol>
    7c48:	3800      	subs	r0, #0
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7c4a:	a901      	add	r1, sp, #4
    7c4c:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_TIMING]  = strtol(p1, (char **) &p1, 10);
    7c50:	bf18      	it	ne
    7c52:	2001      	movne	r0, #1
    7c54:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7c58:	9801      	ldr	r0, [sp, #4]
    7c5a:	f013 fb2b 	bl	1b2b4 <strtol>
    7c5e:	1e03      	subs	r3, r0, #0
  logRowFlags[LOG_CHIRP]  = strtol(p1, (char **) &p1, 10); // not available
    7c60:	f04f 020a 	mov.w	r2, #10
    7c64:	a901      	add	r1, sp, #4
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7c66:	bf18      	it	ne
    7c68:	2301      	movne	r3, #1
  logRowFlags[LOG_CHIRP]  = strtol(p1, (char **) &p1, 10); // not available
    7c6a:	9801      	ldr	r0, [sp, #4]
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7c6c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  logRowFlags[LOG_CHIRP]  = strtol(p1, (char **) &p1, 10); // not available
    7c70:	f013 fb20 	bl	1b2b4 <strtol>
  logRowFlags[LOG_MISSION] = false;
    7c74:	2300      	movs	r3, #0
  initLogStructure();
    7c76:	4620      	mov	r0, r4
  logRowFlags[LOG_MISSION] = false;
    7c78:	7763      	strb	r3, [r4, #29]
  logRowFlags[LOG_MAG] = false;
    7c7a:	8423      	strh	r3, [r4, #32]
  logRowFlags[LOG_CHIRP] = false;
    7c7c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  initLogStructure();
    7c80:	f7ff ff04 	bl	7a8c <ULog::initLogStructure()>
}
    7c84:	b002      	add	sp, #8
    7c86:	bd10      	pop	{r4, pc}

00007c88 <ULog::startLogging(int, bool)>:
  if (loginterval > 0)
    7c88:	2900      	cmp	r1, #0
{
    7c8a:	b538      	push	{r3, r4, r5, lr}
    7c8c:	4604      	mov	r4, r0
    7c8e:	4615      	mov	r5, r2
  if (loginterval > 0)
    7c90:	dc04      	bgt.n	7c9c <ULog::startLogging(int, bool)+0x14>
  if (restart)
    7c92:	b94d      	cbnz	r5, 7ca8 <ULog::startLogging(int, bool)+0x20>
  toLog = true;
    7c94:	2301      	movs	r3, #1
    7c96:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
    7c9a:	bd38      	pop	{r3, r4, r5, pc}
    current.logIntervalChanged();
    7c9c:	4810      	ldr	r0, [pc, #64]	; (7ce0 <ULog::startLogging(int, bool)+0x58>)
        logInterval_ms = loginterval;
    7c9e:	63e1      	str	r1, [r4, #60]	; 0x3c
    current.logIntervalChanged();
    7ca0:	f7fa fe2e 	bl	2900 <UCurrent::logIntervalChanged()>
  if (restart)
    7ca4:	2d00      	cmp	r5, #0
    7ca6:	d0f5      	beq.n	7c94 <ULog::startLogging(int, bool)+0xc>
    initLogStructure();
    7ca8:	4620      	mov	r0, r4
    7caa:	f7ff feef 	bl	7a8c <ULog::initLogStructure()>
    7cae:	4b0d      	ldr	r3, [pc, #52]	; (7ce4 <ULog::startLogging(int, bool)+0x5c>)
    7cb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    7cb4:	f011 fbaa 	bl	1940c <__aeabi_ul2f>
    7cb8:	ee07 0a90 	vmov	s15, r0
  toLog = true;
    7cbc:	2301      	movs	r3, #1
    7cbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    7cc2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    7cc6:	ed9f 6b04 	vldr	d6, [pc, #16]	; 7cd8 <ULog::startLogging(int, bool)+0x50>
    7cca:	ee27 7b06 	vmul.f64	d7, d7, d6
    7cce:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    7cd2:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
}
    7cd6:	bd38      	pop	{r3, r4, r5, pc}
    7cd8:	a0b5ed8d 	.word	0xa0b5ed8d
    7cdc:	3eb0c6f7 	.word	0x3eb0c6f7
    7ce0:	2000da90 	.word	0x2000da90
    7ce4:	2000d0c8 	.word	0x2000d0c8

00007ce8 <ULog::decode(char const*)>:
{
    7ce8:	b538      	push	{r3, r4, r5, lr}
    7cea:	460c      	mov	r4, r1
    7cec:	4605      	mov	r5, r0
  if (strncmp(buf, "lfls ", 5) == 0)
    7cee:	2205      	movs	r2, #5
    7cf0:	494f      	ldr	r1, [pc, #316]	; (7e30 <ULog::decode(char const*)+0x148>)
    7cf2:	4620      	mov	r0, r4
    7cf4:	f013 ff86 	bl	1bc04 <strncmp>
    7cf8:	2800      	cmp	r0, #0
    7cfa:	d045      	beq.n	7d88 <ULog::decode(char const*)+0xa0>
  else if (strncmp(buf, "lognow ", 6) == 0)
    7cfc:	2206      	movs	r2, #6
    7cfe:	494d      	ldr	r1, [pc, #308]	; (7e34 <ULog::decode(char const*)+0x14c>)
    7d00:	4620      	mov	r0, r4
    7d02:	f013 ff7f 	bl	1bc04 <strncmp>
    7d06:	b1f0      	cbz	r0, 7d46 <ULog::decode(char const*)+0x5e>
  else if (strncmp(buf, "lsts ", 5) == 0)
    7d08:	2205      	movs	r2, #5
    7d0a:	494b      	ldr	r1, [pc, #300]	; (7e38 <ULog::decode(char const*)+0x150>)
    7d0c:	4620      	mov	r0, r4
    7d0e:	f013 ff79 	bl	1bc04 <strncmp>
    7d12:	2800      	cmp	r0, #0
    7d14:	d058      	beq.n	7dc8 <ULog::decode(char const*)+0xe0>
  else if (strncmp(buf, "logmsg ", 6) == 0)
    7d16:	2206      	movs	r2, #6
    7d18:	4948      	ldr	r1, [pc, #288]	; (7e3c <ULog::decode(char const*)+0x154>)
    7d1a:	4620      	mov	r0, r4
    7d1c:	f013 ff72 	bl	1bc04 <strncmp>
    7d20:	b3c0      	cbz	r0, 7d94 <ULog::decode(char const*)+0xac>
  else if (strncmp(buf, "log ", 3) == 0)
    7d22:	7823      	ldrb	r3, [r4, #0]
    7d24:	2b6c      	cmp	r3, #108	; 0x6c
    7d26:	d14d      	bne.n	7dc4 <ULog::decode(char const*)+0xdc>
    7d28:	7863      	ldrb	r3, [r4, #1]
    7d2a:	2b6f      	cmp	r3, #111	; 0x6f
    7d2c:	d14a      	bne.n	7dc4 <ULog::decode(char const*)+0xdc>
    7d2e:	78a3      	ldrb	r3, [r4, #2]
    7d30:	3b67      	subs	r3, #103	; 0x67
    7d32:	d147      	bne.n	7dc4 <ULog::decode(char const*)+0xdc>
    if (logRowCnt > 0)
    7d34:	696a      	ldr	r2, [r5, #20]
    7d36:	2a00      	cmp	r2, #0
    7d38:	dd66      	ble.n	7e08 <ULog::decode(char const*)+0x120>
      logToUSB = true;
    7d3a:	2201      	movs	r2, #1
      logStreamedMsgOutPos = 0;
    7d3c:	64ab      	str	r3, [r5, #72]	; 0x48
  bool used = true;
    7d3e:	4610      	mov	r0, r2
      logToUSB = true;
    7d40:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
}
    7d44:	bd38      	pop	{r3, r4, r5, pc}
        logInterval_ms = strtol(p1, nullptr, 10);
    7d46:	4601      	mov	r1, r0
    7d48:	220a      	movs	r2, #10
    7d4a:	1da0      	adds	r0, r4, #6
    7d4c:	f013 fab2 	bl	1b2b4 <strtol>
  if (loginterval > 0)
    7d50:	2800      	cmp	r0, #0
        logInterval_ms = strtol(p1, nullptr, 10);
    7d52:	63e8      	str	r0, [r5, #60]	; 0x3c
  if (loginterval > 0)
    7d54:	dc32      	bgt.n	7dbc <ULog::decode(char const*)+0xd4>
    initLogStructure();
    7d56:	4628      	mov	r0, r5
    7d58:	f7ff fe98 	bl	7a8c <ULog::initLogStructure()>
    7d5c:	4b38      	ldr	r3, [pc, #224]	; (7e40 <ULog::decode(char const*)+0x158>)
    7d5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    7d62:	f011 fb53 	bl	1940c <__aeabi_ul2f>
    7d66:	ee07 0a90 	vmov	s15, r0
  toLog = true;
    7d6a:	2301      	movs	r3, #1
    7d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  bool used = true;
    7d70:	4618      	mov	r0, r3
  toLog = true;
    7d72:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    7d76:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 7e28 <ULog::decode(char const*)+0x140>
    7d7a:	ee27 7b06 	vmul.f64	d7, d7, d6
    7d7e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    7d82:	ed85 7a2d 	vstr	s14, [r5, #180]	; 0xb4
}
    7d86:	bd38      	pop	{r3, r4, r5, pc}
    setLogFlagsOther(buf);
    7d88:	4628      	mov	r0, r5
    7d8a:	4621      	mov	r1, r4
    7d8c:	f7ff feba 	bl	7b04 <ULog::setLogFlagsOther(char const*)>
  bool used = true;
    7d90:	2001      	movs	r0, #1
}
    7d92:	bd38      	pop	{r3, r4, r5, pc}
    while (not isDigit(*p1) and *p1 != '\0')
    7d94:	79a3      	ldrb	r3, [r4, #6]
    const char * p1 = &buf[6];
    7d96:	3406      	adds	r4, #6


// Checks for a digit (0 through 9).
inline boolean isDigit(int c)
{
  return ( isdigit (c) == 0 ? false : true);
    7d98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while (not isDigit(*p1) and *p1 != '\0')
    7d9c:	2a09      	cmp	r2, #9
    7d9e:	d906      	bls.n	7dae <ULog::decode(char const*)+0xc6>
    7da0:	b333      	cbz	r3, 7df0 <ULog::decode(char const*)+0x108>
    7da2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7da6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7daa:	2a09      	cmp	r2, #9
    7dac:	d8f8      	bhi.n	7da0 <ULog::decode(char const*)+0xb8>
    if (*p1 == '0')
    7dae:	2b30      	cmp	r3, #48	; 0x30
    7db0:	d11e      	bne.n	7df0 <ULog::decode(char const*)+0x108>
      logStreamedMsgFull = true;
    7db2:	2301      	movs	r3, #1
  bool used = true;
    7db4:	4618      	mov	r0, r3
      logStreamedMsgFull = true;
    7db6:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
    7dba:	bd38      	pop	{r3, r4, r5, pc}
    current.logIntervalChanged();
    7dbc:	4821      	ldr	r0, [pc, #132]	; (7e44 <ULog::decode(char const*)+0x15c>)
    7dbe:	f7fa fd9f 	bl	2900 <UCurrent::logIntervalChanged()>
    7dc2:	e7c8      	b.n	7d56 <ULog::decode(char const*)+0x6e>
    used = false;
    7dc4:	2000      	movs	r0, #0
}
    7dc6:	bd38      	pop	{r3, r4, r5, pc}
        logInterval_ms = strtol(p1, nullptr, 10);
    7dc8:	4601      	mov	r1, r0
    7dca:	220a      	movs	r2, #10
    7dcc:	1d60      	adds	r0, r4, #5
    7dce:	f013 fa71 	bl	1b2b4 <strtol>
        logInterval_ms = (logInterval_ms*1000)/service.sampleTime_us;
    7dd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        logInterval_ms = strtol(p1, nullptr, 10);
    7dd6:	4603      	mov	r3, r0
        logInterval_ms = (logInterval_ms*1000)/service.sampleTime_us;
    7dd8:	4a19      	ldr	r2, [pc, #100]	; (7e40 <ULog::decode(char const*)+0x158>)
    current.logIntervalChanged();
    7dda:	481a      	ldr	r0, [pc, #104]	; (7e44 <ULog::decode(char const*)+0x15c>)
        logInterval_ms = (logInterval_ms*1000)/service.sampleTime_us;
    7ddc:	fb01 f303 	mul.w	r3, r1, r3
    7de0:	6812      	ldr	r2, [r2, #0]
    7de2:	fbb3 f3f2 	udiv	r3, r3, r2
    7de6:	63eb      	str	r3, [r5, #60]	; 0x3c
    current.logIntervalChanged();
    7de8:	f7fa fd8a 	bl	2900 <UCurrent::logIntervalChanged()>
  bool used = true;
    7dec:	2001      	movs	r0, #1
}
    7dee:	bd38      	pop	{r3, r4, r5, pc}
  if ((char*)logBuffer != nullptr)
    7df0:	6dab      	ldr	r3, [r5, #88]	; 0x58
    7df2:	b18b      	cbz	r3, 7e18 <ULog::decode(char const*)+0x130>
    logStreamedMsgPos = 0;
    7df4:	2300      	movs	r3, #0
    logStreamedMsg = true;
    7df6:	2201      	movs	r2, #1
    logStreamedMsgPos = 0;
    7df8:	646b      	str	r3, [r5, #68]	; 0x44
  bool used = true;
    7dfa:	4610      	mov	r0, r2
    logStreamedMsg = true;
    7dfc:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
    logStreamedMsgFull = false;
    7e00:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    logRowCnt = 0; // reset normal logging too
    7e04:	616b      	str	r3, [r5, #20]
}
    7e06:	bd38      	pop	{r3, r4, r5, pc}
    else if (motortest.mLogIndex > 0)
    7e08:	480f      	ldr	r0, [pc, #60]	; (7e48 <ULog::decode(char const*)+0x160>)
    7e0a:	6983      	ldr	r3, [r0, #24]
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	dd05      	ble.n	7e1c <ULog::decode(char const*)+0x134>
      motortest.getMotorTestLog();
    7e10:	f001 ffd8 	bl	9dc4 <UMotorTest::getMotorTestLog()>
  bool used = true;
    7e14:	2001      	movs	r0, #1
}
    7e16:	bd38      	pop	{r3, r4, r5, pc}
  bool used = true;
    7e18:	2001      	movs	r0, #1
}
    7e1a:	bd38      	pop	{r3, r4, r5, pc}
      usb.send("%% log is empty\n");
    7e1c:	490b      	ldr	r1, [pc, #44]	; (7e4c <ULog::decode(char const*)+0x164>)
    7e1e:	480c      	ldr	r0, [pc, #48]	; (7e50 <ULog::decode(char const*)+0x168>)
    7e20:	f004 fb7c 	bl	c51c <UUSB::send(char const*)>
  bool used = true;
    7e24:	2001      	movs	r0, #1
}
    7e26:	bd38      	pop	{r3, r4, r5, pc}
    7e28:	a0b5ed8d 	.word	0xa0b5ed8d
    7e2c:	3eb0c6f7 	.word	0x3eb0c6f7
    7e30:	2000426c 	.word	0x2000426c
    7e34:	20004274 	.word	0x20004274
    7e38:	2000427c 	.word	0x2000427c
    7e3c:	20004284 	.word	0x20004284
    7e40:	2000d0c8 	.word	0x2000d0c8
    7e44:	2000da90 	.word	0x2000da90
    7e48:	2000e518 	.word	0x2000e518
    7e4c:	2000428c 	.word	0x2000428c
    7e50:	2000eab8 	.word	0x2000eab8
    7e54:	00000000 	.word	0x00000000

00007e58 <ULog::addMsgLog(char const*)>:
{
    7e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (logStreamedMsgFull or not logStreamedMsg)
    7e5c:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
{
    7e60:	b082      	sub	sp, #8
  if (logStreamedMsgFull or not logStreamedMsg)
    7e62:	2d00      	cmp	r5, #0
    7e64:	d13a      	bne.n	7edc <ULog::addMsgLog(char const*)+0x84>
    7e66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7e6a:	4604      	mov	r4, r0
    7e6c:	b3b3      	cbz	r3, 7edc <ULog::addMsgLog(char const*)+0x84>
    int n = strlen(data);
    7e6e:	4608      	mov	r0, r1
    7e70:	460e      	mov	r6, r1
    7e72:	f015 f985 	bl	1d180 <strlen>
    if (n + MSL + logStreamedMsgPos < LOG_BUFFER_MAX)
    7e76:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7e78:	4921      	ldr	r1, [pc, #132]	; (7f00 <ULog::addMsgLog(char const*)+0xa8>)
    int n = strlen(data);
    7e7a:	4607      	mov	r7, r0
    if (n + MSL + logStreamedMsgPos < LOG_BUFFER_MAX)
    7e7c:	f102 0320 	add.w	r3, r2, #32
    7e80:	4403      	add	r3, r0
    7e82:	428b      	cmp	r3, r1
    7e84:	d82d      	bhi.n	7ee2 <ULog::addMsgLog(char const*)+0x8a>
    7e86:	491f      	ldr	r1, [pc, #124]	; (7f04 <ULog::addMsgLog(char const*)+0xac>)
      char * pd = (char*)logBuffer + logStreamedMsgPos;
    7e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7e8a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7e8e:	eb03 0802 	add.w	r8, r3, r2
    7e92:	f011 fabb 	bl	1940c <__aeabi_ul2f>
    7e96:	ee07 0a90 	vmov	s15, r0
      snprintf(pd, MSL, "%.3f ", service.time_sec());
    7e9a:	4a1b      	ldr	r2, [pc, #108]	; (7f08 <ULog::addMsgLog(char const*)+0xb0>)
    7e9c:	2120      	movs	r1, #32
    7e9e:	4640      	mov	r0, r8
    7ea0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    7ea4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 7ef8 <ULog::addMsgLog(char const*)+0xa0>
    7ea8:	ee27 7b06 	vmul.f64	d7, d7, d6
    7eac:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    7eb0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7eb4:	ed8d 7b00 	vstr	d7, [sp]
    7eb8:	f013 fbec 	bl	1b694 <snprintf>
      pd[32] = '\0'; // just in case
    7ebc:	f888 5020 	strb.w	r5, [r8, #32]
      int m = strlen(pd);
    7ec0:	4640      	mov	r0, r8
    7ec2:	f015 f95d 	bl	1d180 <strlen>
      strncpy(pd, data, n+1);
    7ec6:	4631      	mov	r1, r6
      int m = strlen(pd);
    7ec8:	4605      	mov	r5, r0
      strncpy(pd, data, n+1);
    7eca:	1c7a      	adds	r2, r7, #1
    7ecc:	4440      	add	r0, r8
    7ece:	f013 fedf 	bl	1bc90 <strncpy>
      logStreamedMsgPos += n + m + 1;
    7ed2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7ed4:	443d      	add	r5, r7
    7ed6:	3301      	adds	r3, #1
    7ed8:	442b      	add	r3, r5
    7eda:	6463      	str	r3, [r4, #68]	; 0x44
}
    7edc:	b002      	add	sp, #8
    7ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      logStreamedMsgFull = true;
    7ee2:	2301      	movs	r3, #1
      usb.send("# log message buffer full\n");
    7ee4:	4909      	ldr	r1, [pc, #36]	; (7f0c <ULog::addMsgLog(char const*)+0xb4>)
    7ee6:	480a      	ldr	r0, [pc, #40]	; (7f10 <ULog::addMsgLog(char const*)+0xb8>)
      logStreamedMsgFull = true;
    7ee8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
    7eec:	b002      	add	sp, #8
    7eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb.send("# log message buffer full\n");
    7ef2:	f004 bb13 	b.w	c51c <UUSB::send(char const*)>
    7ef6:	bf00      	nop
    7ef8:	a0b5ed8d 	.word	0xa0b5ed8d
    7efc:	3eb0c6f7 	.word	0x3eb0c6f7
    7f00:	0003d08f 	.word	0x0003d08f
    7f04:	2000d0c8 	.word	0x2000d0c8
    7f08:	20004478 	.word	0x20004478
    7f0c:	20004480 	.word	0x20004480
    7f10:	2000eab8 	.word	0x2000eab8

00007f14 <ULog::logWriteBufferTo(int)>:
//////////////////////////////////////////////////

int tried = 0;

int ULog::logWriteBufferTo(int row)
{
    7f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char logline[MLL + 3];
  char * p1 = logline;
  int n = 0; // used number of characters
  // write all recorded rows
  // row -1 is flag to get matlab text
  if (row <= 0)
    7f18:	f1b1 0900 	subs.w	r9, r1, #0
{
    7f1c:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
    7f20:	4680      	mov	r8, r0
  if (row <= 0)
    7f22:	f340 8121 	ble.w	8168 <ULog::logWriteBufferTo(int)+0x254>
    // used by text printout in all write functions
    col = 1;
  }
  else
    // find position for this row
    bp = logBuffer + row * logRowSize;
    7f26:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    7f2a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    7f2c:	fb02 3a09 	mla	sl, r2, r9, r3
  //     // it was last usable row
  //     return row;
  //   bp += logRowSize;
  // }
  // send all recorded data types
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    7f30:	f108 061b 	add.w	r6, r8, #27
{
    7f34:	2401      	movs	r4, #1
  int n = 0; // used number of characters
    7f36:	2500      	movs	r5, #0
      if (row == -1)
      { // first log line is send as MATLAB individual comment lines
        if (logToUSB)
        { // send one headline at a time
          logline[n] = '\0';
          rowSendOK = usb.send(logline);
    7f38:	f8df b290 	ldr.w	fp, [pc, #656]	; 81cc <ULog::logWriteBufferTo(int)+0x2b8>
  char * p1 = logline;
    7f3c:	af03      	add	r7, sp, #12
    7f3e:	1e63      	subs	r3, r4, #1
    if (logRowFlags[item])
    7f40:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    7f44:	b2db      	uxtb	r3, r3
    7f46:	b1c2      	cbz	r2, 7f7a <ULog::logWriteBufferTo(int)+0x66>
      switch (item)
    7f48:	2b1b      	cmp	r3, #27
    7f4a:	d80f      	bhi.n	7f6c <ULog::logWriteBufferTo(int)+0x58>
    7f4c:	e8df f003 	tbb	[pc, r3]
    7f50:	c8d40ee0 	.word	0xc8d40ee0
    7f54:	b0bc0e0e 	.word	0xb0bc0e0e
    7f58:	798598a4 	.word	0x798598a4
    7f5c:	414d616d 	.word	0x414d616d
    7f60:	0e0e0e0e 	.word	0x0e0e0e0e
    7f64:	0e0e0e0e 	.word	0x0e0e0e0e
    7f68:	1a0e0e0e 	.word	0x1a0e0e0e
          usb.send("# ULog::WriteBufferTo: flag do not exist - get log will fail!\n");
    7f6c:	4994      	ldr	r1, [pc, #592]	; (81c0 <ULog::logWriteBufferTo(int)+0x2ac>)
    7f6e:	4658      	mov	r0, fp
    7f70:	f004 fad4 	bl	c51c <UUSB::send(char const*)>
      if (row == -1)
    7f74:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    7f78:	d019      	beq.n	7fae <ULog::logWriteBufferTo(int)+0x9a>
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    7f7a:	2c1d      	cmp	r4, #29
    7f7c:	d020      	beq.n	7fc0 <ULog::logWriteBufferTo(int)+0xac>
    7f7e:	3401      	adds	r4, #1
    7f80:	b2e4      	uxtb	r4, r4
    7f82:	e7dc      	b.n	7f3e <ULog::logWriteBufferTo(int)+0x2a>
        case LOG_EXTRA: writeExtra(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    7f84:	f8b8 10ee 	ldrh.w	r1, [r8, #238]	; 0xee
    7f88:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    7f8c:	464a      	mov	r2, r9
    7f8e:	4640      	mov	r0, r8
    7f90:	9300      	str	r3, [sp, #0]
    7f92:	4451      	add	r1, sl
    7f94:	463b      	mov	r3, r7
    7f96:	f7ff fc07 	bl	77a8 <ULog::writeExtra(signed char*, int, char*, int)>
    7f9a:	4638      	mov	r0, r7
    7f9c:	f015 f8f0 	bl	1d180 <strlen>
    7fa0:	ab03      	add	r3, sp, #12
    7fa2:	4405      	add	r5, r0
      if (row == -1)
    7fa4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
        case LOG_EXTRA: writeExtra(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    7fa8:	eb03 0705 	add.w	r7, r3, r5
      if (row == -1)
    7fac:	d1e7      	bne.n	7f7e <ULog::logWriteBufferTo(int)+0x6a>
        if (logToUSB)
    7fae:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
    7fb2:	2b00      	cmp	r3, #0
    7fb4:	f040 80b8 	bne.w	8128 <ULog::logWriteBufferTo(int)+0x214>
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    7fb8:	2c1d      	cmp	r4, #29
        }
        // reset result string for new headline.
        n = 0;
    7fba:	461d      	mov	r5, r3
        p1 = logline;
    7fbc:	af03      	add	r7, sp, #12
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    7fbe:	d1de      	bne.n	7f7e <ULog::logWriteBufferTo(int)+0x6a>
      }
    }
  }
  //add a new line after a full data-line
  if (row >= 0)
    7fc0:	f1b9 0f00 	cmp.w	r9, #0
    7fc4:	f280 80bc 	bge.w	8140 <ULog::logWriteBufferTo(int)+0x22c>
    {
      tried = 0;
    }
  }
  return row;
}
    7fc8:	4648      	mov	r0, r9
    7fca:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
    7fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writeTiming(&bp[logRowPos[item]], row, p1, MLL - n);
    7fd2:	f8b8 10d6 	ldrh.w	r1, [r8, #214]	; 0xd6
    7fd6:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    7fda:	464a      	mov	r2, r9
    7fdc:	4640      	mov	r0, r8
    7fde:	9300      	str	r3, [sp, #0]
    7fe0:	4451      	add	r1, sl
    7fe2:	463b      	mov	r3, r7
    7fe4:	f7ff fb9e 	bl	7724 <ULog::writeTiming(signed char*, int, char*, int)>
            n += strlen(p1);
    7fe8:	e7d7      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
          writeBatt(&bp[logRowPos[item]], row, p1, MLL - n);
    7fea:	f8b8 30d4 	ldrh.w	r3, [r8, #212]	; 0xd4
  if (row < 0)
    7fee:	f1b9 0f00 	cmp.w	r9, #0
          writeBatt(&bp[logRowPos[item]], row, p1, MLL - n);
    7ff2:	f5c5 61fa 	rsb	r1, r5, #2000	; 0x7d0
    7ff6:	4453      	add	r3, sl
    snprintf(p1, maxLength, "%% %2d    Battery voltage (%.2f V)\r\n", col++, *v);
    7ff8:	ed93 7a00 	vldr	s14, [r3]
    7ffc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8000:	ed8d 7b00 	vstr	d7, [sp]
  if (row < 0)
    8004:	f2c0 80c2 	blt.w	818c <ULog::logWriteBufferTo(int)+0x278>
    snprintf(p1, maxLength, "%.2f ", *v);
    8008:	4a6e      	ldr	r2, [pc, #440]	; (81c4 <ULog::logWriteBufferTo(int)+0x2b0>)
    800a:	4638      	mov	r0, r7
    800c:	f013 fb42 	bl	1b694 <snprintf>
    8010:	e7c3      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_DIST:  writeDistSensor(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8012:	f8b8 10d2 	ldrh.w	r1, [r8, #210]	; 0xd2
    8016:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    801a:	464a      	mov	r2, r9
    801c:	4640      	mov	r0, r8
    801e:	9300      	str	r3, [sp, #0]
    8020:	4451      	add	r1, sl
    8022:	463b      	mov	r3, r7
    8024:	f7ff fc7c 	bl	7920 <ULog::writeDistSensor(signed char*, int, char*, int)>
    8028:	e7b7      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
            writeLineSensor(&bp[logRowPos[item]], row, p1, MLL - n);
    802a:	f8b8 10d0 	ldrh.w	r1, [r8, #208]	; 0xd0
    802e:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8032:	464a      	mov	r2, r9
    8034:	4640      	mov	r0, r8
    8036:	9300      	str	r3, [sp, #0]
    8038:	4451      	add	r1, sl
    803a:	463b      	mov	r3, r7
    803c:	f7ff fc0e 	bl	785c <ULog::writeLineSensor(signed char*, int, char*, int)>
            n += strlen(p1);
    8040:	e7ab      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_POSE:  writePose(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8042:	f8b8 10ce 	ldrh.w	r1, [r8, #206]	; 0xce
    8046:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    804a:	464a      	mov	r2, r9
    804c:	4640      	mov	r0, r8
    804e:	9300      	str	r3, [sp, #0]
    8050:	4451      	add	r1, sl
    8052:	463b      	mov	r3, r7
    8054:	f7ff fb1a 	bl	768c <ULog::writePose(signed char*, int, char*, int)>
    8058:	e79f      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_TURNRATE:   writeTurnrate(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    805a:	f8b8 30cc 	ldrh.w	r3, [r8, #204]	; 0xcc
  if (row < 0)
    805e:	f1b9 0f00 	cmp.w	r9, #0
        case LOG_TURNRATE:   writeTurnrate(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8062:	f5c5 61fa 	rsb	r1, r5, #2000	; 0x7d0
    8066:	4453      	add	r3, sl
    snprintf(p1, maxLength, "%%  %d    Turnrate (rad/s): %.4f\r\n", col, v[0]);
    8068:	ed93 7a00 	vldr	s14, [r3]
    806c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8070:	ed8d 7b00 	vstr	d7, [sp]
  if (row < 0)
    8074:	db7e      	blt.n	8174 <ULog::logWriteBufferTo(int)+0x260>
    snprintf(p1, maxLength, "%.4f ", v[0]);
    8076:	4a54      	ldr	r2, [pc, #336]	; (81c8 <ULog::logWriteBufferTo(int)+0x2b4>)
    8078:	4638      	mov	r0, r7
    807a:	f013 fb0b 	bl	1b694 <snprintf>
    807e:	e78c      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_WHEELVEL:   writeVel(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8080:	f8b8 10ca 	ldrh.w	r1, [r8, #202]	; 0xca
    8084:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8088:	464a      	mov	r2, r9
    808a:	4640      	mov	r0, r8
    808c:	9300      	str	r3, [sp, #0]
    808e:	4451      	add	r1, sl
    8090:	463b      	mov	r3, r7
    8092:	f7ff fa69 	bl	7568 <ULog::writeVel(signed char*, int, char*, int)>
    8096:	e780      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_ENC:   writeEnc(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8098:	f8b8 10c8 	ldrh.w	r1, [r8, #200]	; 0xc8
    809c:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    80a0:	464a      	mov	r2, r9
    80a2:	4640      	mov	r0, r8
    80a4:	9300      	str	r3, [sp, #0]
    80a6:	4451      	add	r1, sl
    80a8:	463b      	mov	r3, r7
    80aa:	f7ff fa91 	bl	75d0 <ULog::writeEnc(signed char*, int, char*, int)>
    80ae:	e774      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_MOTA:  writeCurrent(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    80b0:	f8b8 10c6 	ldrh.w	r1, [r8, #198]	; 0xc6
    80b4:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    80b8:	464a      	mov	r2, r9
    80ba:	4640      	mov	r0, r8
    80bc:	9300      	str	r3, [sp, #0]
    80be:	4451      	add	r1, sl
    80c0:	463b      	mov	r3, r7
    80c2:	f7ff fa13 	bl	74ec <ULog::writeCurrent(signed char*, int, char*, int)>
    80c6:	e768      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_MOTV:  writeMotVolt(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    80c8:	f8b8 10c4 	ldrh.w	r1, [r8, #196]	; 0xc4
    80cc:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    80d0:	464a      	mov	r2, r9
    80d2:	4640      	mov	r0, r8
    80d4:	9300      	str	r3, [sp, #0]
    80d6:	4451      	add	r1, sl
    80d8:	463b      	mov	r3, r7
    80da:	f7ff faa3 	bl	7624 <ULog::writeMotVolt(signed char*, int, char*, int)>
    80de:	e75c      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_GYRO:  writeGyro(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    80e0:	f8b8 10be 	ldrh.w	r1, [r8, #190]	; 0xbe
    80e4:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    80e8:	464a      	mov	r2, r9
    80ea:	4640      	mov	r0, r8
    80ec:	9300      	str	r3, [sp, #0]
    80ee:	4451      	add	r1, sl
    80f0:	463b      	mov	r3, r7
    80f2:	f7ff f9bb 	bl	746c <ULog::writeGyro(signed char*, int, char*, int)>
    80f6:	e750      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_ACC:   writeAcc(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    80f8:	f8b8 10bc 	ldrh.w	r1, [r8, #188]	; 0xbc
    80fc:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8100:	464a      	mov	r2, r9
    8102:	4640      	mov	r0, r8
    8104:	9300      	str	r3, [sp, #0]
    8106:	4451      	add	r1, sl
    8108:	463b      	mov	r3, r7
    810a:	f7ff f96f 	bl	73ec <ULog::writeAcc(signed char*, int, char*, int)>
    810e:	e744      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_TIME:  writeTime(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8110:	f8b8 10b8 	ldrh.w	r1, [r8, #184]	; 0xb8
    8114:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8118:	464a      	mov	r2, r9
    811a:	4640      	mov	r0, r8
    811c:	9300      	str	r3, [sp, #0]
    811e:	4451      	add	r1, sl
    8120:	463b      	mov	r3, r7
    8122:	f7ff f933 	bl	738c <ULog::writeTime(signed char*, int, char*, int)>
    8126:	e738      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
          logline[n] = '\0';
    8128:	2300      	movs	r3, #0
    812a:	aa03      	add	r2, sp, #12
          rowSendOK = usb.send(logline);
    812c:	4658      	mov	r0, fp
        p1 = logline;
    812e:	af03      	add	r7, sp, #12
          logline[n] = '\0';
    8130:	5553      	strb	r3, [r2, r5]
          rowSendOK = usb.send(logline);
    8132:	4611      	mov	r1, r2
        n = 0;
    8134:	461d      	mov	r5, r3
          rowSendOK = usb.send(logline);
    8136:	f004 f9f1 	bl	c51c <UUSB::send(char const*)>
    813a:	f888 012c 	strb.w	r0, [r8, #300]	; 0x12c
    813e:	e71c      	b.n	7f7a <ULog::logWriteBufferTo(int)+0x66>
    *p1++ = '\r';
    8140:	230d      	movs	r3, #13
    *p1++ = '\0';
    8142:	2400      	movs	r4, #0
    rowSendOK = usb.send(logline); //, rowSendOK, true);
    8144:	a903      	add	r1, sp, #12
    8146:	4821      	ldr	r0, [pc, #132]	; (81cc <ULog::logWriteBufferTo(int)+0x2b8>)
    *p1++ = '\r';
    8148:	703b      	strb	r3, [r7, #0]
    *p1++ = '\n';
    814a:	230a      	movs	r3, #10
    *p1++ = '\0';
    814c:	70bc      	strb	r4, [r7, #2]
    *p1++ = '\n';
    814e:	707b      	strb	r3, [r7, #1]
    rowSendOK = usb.send(logline); //, rowSendOK, true);
    8150:	f004 f9e4 	bl	c51c <UUSB::send(char const*)>
    8154:	f888 012c 	strb.w	r0, [r8, #300]	; 0x12c
    if (not rowSendOK)
    8158:	b318      	cbz	r0, 81a2 <ULog::logWriteBufferTo(int)+0x28e>
      tried = 0;
    815a:	4b1d      	ldr	r3, [pc, #116]	; (81d0 <ULog::logWriteBufferTo(int)+0x2bc>)
}
    815c:	4648      	mov	r0, r9
      tried = 0;
    815e:	601c      	str	r4, [r3, #0]
}
    8160:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
    8164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    col = 1;
    8168:	2301      	movs	r3, #1
    bp = logBuffer;
    816a:	f8d0 a058 	ldr.w	sl, [r0, #88]	; 0x58
    col = 1;
    816e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    8172:	e6dd      	b.n	7f30 <ULog::logWriteBufferTo(int)+0x1c>
    snprintf(p1, maxLength, "%%  %d    Turnrate (rad/s): %.4f\r\n", col, v[0]);
    8174:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
    8178:	4638      	mov	r0, r7
    817a:	4a16      	ldr	r2, [pc, #88]	; (81d4 <ULog::logWriteBufferTo(int)+0x2c0>)
    817c:	f013 fa8a 	bl	1b694 <snprintf>
    col += 1;
    8180:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
    8184:	3301      	adds	r3, #1
    8186:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
}
    818a:	e706      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
    snprintf(p1, maxLength, "%% %2d    Battery voltage (%.2f V)\r\n", col++, *v);
    818c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
    8190:	4638      	mov	r0, r7
    8192:	4a11      	ldr	r2, [pc, #68]	; (81d8 <ULog::logWriteBufferTo(int)+0x2c4>)
    8194:	f103 0c01 	add.w	ip, r3, #1
    8198:	f8c8 c0ac 	str.w	ip, [r8, #172]	; 0xac
    819c:	f013 fa7a 	bl	1b694 <snprintf>
}
    81a0:	e6fb      	b.n	7f9a <ULog::logWriteBufferTo(int)+0x86>
      tried++;
    81a2:	4a0b      	ldr	r2, [pc, #44]	; (81d0 <ULog::logWriteBufferTo(int)+0x2bc>)
      row--;
    81a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      usb.send("# UUsb::re-try\r\n");
    81a8:	490c      	ldr	r1, [pc, #48]	; (81dc <ULog::logWriteBufferTo(int)+0x2c8>)
      tried++;
    81aa:	6813      	ldr	r3, [r2, #0]
      usb.send("# UUsb::re-try\r\n");
    81ac:	4807      	ldr	r0, [pc, #28]	; (81cc <ULog::logWriteBufferTo(int)+0x2b8>)
      tried++;
    81ae:	3301      	adds	r3, #1
    81b0:	6013      	str	r3, [r2, #0]
      usb.send("# UUsb::re-try\r\n");
    81b2:	f004 f9b3 	bl	c51c <UUSB::send(char const*)>
}
    81b6:	4648      	mov	r0, r9
    81b8:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
    81bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81c0:	20004108 	.word	0x20004108
    81c4:	200044c4 	.word	0x200044c4
    81c8:	20004594 	.word	0x20004594
    81cc:	2000eab8 	.word	0x2000eab8
    81d0:	2000eab4 	.word	0x2000eab4
    81d4:	20003f30 	.word	0x20003f30
    81d8:	2000449c 	.word	0x2000449c
    81dc:	20004148 	.word	0x20004148

000081e0 <ULog::tick()>:
	return systick_millis_count;
    81e0:	4b33      	ldr	r3, [pc, #204]	; (82b0 <ULog::tick()+0xd0>)
  if ((ltc - lastTimerCnt ) >= logInterval_ms /*or control.chirpRun*/)
    81e2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    81e4:	681a      	ldr	r2, [r3, #0]
    81e6:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    81ea:	1ad3      	subs	r3, r2, r3
    81ec:	428b      	cmp	r3, r1
{
    81ee:	b570      	push	{r4, r5, r6, lr}
    81f0:	4604      	mov	r4, r0
  ltc = millis(); // counts tick
    81f2:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
  if ((ltc - lastTimerCnt ) >= logInterval_ms /*or control.chirpRun*/)
    81f6:	d30e      	bcc.n	8216 <ULog::tick()+0x36>
      m++;
    81f8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    return toLog and not logFull;
    81fc:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
    8200:	3301      	adds	r3, #1
      lastTimerCnt = ltc;
    8202:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
      m++;
    8206:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    820a:	b121      	cbz	r1, 8216 <ULog::tick()+0x36>
    820c:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    8210:	b90b      	cbnz	r3, 8216 <ULog::tick()+0x36>
        stateToLog();
    8212:	f7fe fef5 	bl	7000 <ULog::stateToLog()>
  if (logToUSB) // send log to USB or wifi
    8216:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    821a:	b903      	cbnz	r3, 821e <ULog::tick()+0x3e>
}
    821c:	bd70      	pop	{r4, r5, r6, pc}
    if (robotHWversion == 9)
    821e:	4d25      	ldr	r5, [pc, #148]	; (82b4 <ULog::tick()+0xd4>)
      analogWrite(pin, 4095);
    8220:	f640 71ff 	movw	r1, #4095	; 0xfff
    if (logger.logRowCnt > 0)
    8224:	4e24      	ldr	r6, [pc, #144]	; (82b8 <ULog::tick()+0xd8>)
    if (robotHWversion == 9)
    8226:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    822a:	2b09      	cmp	r3, #9
      analogWrite(pin, 4095);
    822c:	bf14      	ite	ne
    822e:	2006      	movne	r0, #6
    8230:	2000      	moveq	r0, #0
    8232:	f00e fb85 	bl	16940 <analogWrite>
    8236:	6973      	ldr	r3, [r6, #20]
    8238:	2b00      	cmp	r3, #0
    823a:	dc0d      	bgt.n	8258 <ULog::tick()+0x78>
    else if (logStreamedMsg)
    823c:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
    8240:	b37e      	cbz	r6, 82a2 <ULog::tick()+0xc2>
      writeBufferMsg();
    8242:	4620      	mov	r0, r4
    8244:	f7ff fbea 	bl	7a1c <ULog::writeBufferMsg()>
      if (logStreamedMsgOutPos >= logStreamedMsgPos)
    8248:	e9d4 3211 	ldrd	r3, r2, [r4, #68]	; 0x44
    824c:	429a      	cmp	r2, r3
    824e:	d315      	bcc.n	827c <ULog::tick()+0x9c>
        logToUSB = false;
    8250:	2300      	movs	r3, #0
    8252:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    8256:	e011      	b.n	827c <ULog::tick()+0x9c>
      row = logger.logWriteBufferTo (row);
    8258:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    825c:	4630      	mov	r0, r6
    825e:	f7ff fe59 	bl	7f14 <ULog::logWriteBufferTo(int)>
      if ( row >= logger.logRowCnt ) // finished
    8262:	6973      	ldr	r3, [r6, #20]
      row++;
    8264:	3001      	adds	r0, #1
      if ( row >= logger.logRowCnt ) // finished
    8266:	4298      	cmp	r0, r3
      row++;
    8268:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
      if ( row >= logger.logRowCnt ) // finished
    826c:	db06      	blt.n	827c <ULog::tick()+0x9c>
        logToUSB = false;
    826e:	2200      	movs	r2, #0
        row = -1;
    8270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        logToUSB = false;
    8274:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        row = -1;
    8278:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    if (robotHWversion == 9)
    827c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
      analogWrite(pin, value << 3);
    8280:	2100      	movs	r1, #0
    if (robotHWversion == 9)
    8282:	2b09      	cmp	r3, #9
      analogWrite(pin, value << 3);
    8284:	bf14      	ite	ne
    8286:	2006      	movne	r0, #6
    8288:	4608      	moveq	r0, r1
    828a:	f00e fb59 	bl	16940 <analogWrite>
    if (not logToUSB)
    828e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    8292:	2b00      	cmp	r3, #0
    8294:	d1c2      	bne.n	821c <ULog::tick()+0x3c>
      usb.send("%% logend\n");
    8296:	4909      	ldr	r1, [pc, #36]	; (82bc <ULog::tick()+0xdc>)
    8298:	4809      	ldr	r0, [pc, #36]	; (82c0 <ULog::tick()+0xe0>)
}
    829a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      usb.send("%% logend\n");
    829e:	f004 b93d 	b.w	c51c <UUSB::send(char const*)>
      usb.send("%% Log buffer is empty\r\n");
    82a2:	4908      	ldr	r1, [pc, #32]	; (82c4 <ULog::tick()+0xe4>)
    82a4:	4806      	ldr	r0, [pc, #24]	; (82c0 <ULog::tick()+0xe0>)
    82a6:	f004 f939 	bl	c51c <UUSB::send(char const*)>
      logToUSB = false;
    82aa:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    82ae:	e7e5      	b.n	827c <ULog::tick()+0x9c>
    82b0:	2000eaac 	.word	0x2000eaac
    82b4:	2000e654 	.word	0x2000e654
    82b8:	2000e240 	.word	0x2000e240
    82bc:	200041b4 	.word	0x200041b4
    82c0:	2000eab8 	.word	0x2000eab8
    82c4:	20004198 	.word	0x20004198

000082c8 <ULog::setLogFlagDefault()>:
 * Mission init is called before any control is attempted,
 * this can be used to initialize ant variables dependent on measured values, i.e.
 * battery voltage or gyro.
 * and to set data logger options */
void ULog::setLogFlagDefault()
{
    82c8:	b430      	push	{r4, r5}
  logRowItemSize[item * 2] = count;
    82ca:	f246 6401 	movw	r4, #26113	; 0x6601
  //
  logRowFlags[LOG_TIME] = 1; // not tested - time always on
  //
  // log flags (default)
//   control.missionState = 0;
  logRowFlags[LOG_TIME] = true; // state number in mission
    82ce:	2201      	movs	r2, #1
  logRowItemSize[item * 2] = count;
    82d0:	491b      	ldr	r1, [pc, #108]	; (8340 <ULog::setLogFlagDefault()+0x78>)
  logRowFlags[LOG_POSE] = true;    // calculated pose x,y,th
  logRowFlags[LOG_LINE] = true;    // line sensor
  logRowFlags[LOG_DIST] = false;    // distance sensor
  logRowFlags[LOG_BATT] = true;    // battery oltage in Volts
  logRowFlags[LOG_TIMING] = false;    // battery oltage in Volts
  logRowFlags[LOG_CTRL_VELL] = false;  // All relevant values in controller
    82d2:	2300      	movs	r3, #0
  logRowItemSize[item * 2] = count;
    82d4:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    82d8:	f246 6402 	movw	r4, #26114	; 0x6602
  logRowFlags[LOG_TIME] = true; // state number in mission
    82dc:	61c2      	str	r2, [r0, #28]
  logRowFlags[LOG_POSE] = true;    // calculated pose x,y,th
    82de:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
  logRowItemSize[item * 2] = count;
    82e2:	f8a0 40fe 	strh.w	r4, [r0, #254]	; 0xfe
    82e6:	f104 44cc 	add.w	r4, r4, #1711276032	; 0x66000000
    82ea:	4a16      	ldr	r2, [pc, #88]	; (8344 <ULog::setLogFlagDefault()+0x7c>)
    82ec:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
    82f0:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
    82f4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  logRowFlags[LOG_LINE] = true;    // line sensor
    82f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  logRowItemSize[item * 2] = count;
    82fc:	4a12      	ldr	r2, [pc, #72]	; (8348 <ULog::setLogFlagDefault()+0x80>)
  logRowFlags[LOG_LINE] = true;    // line sensor
    82fe:	6281      	str	r1, [r0, #40]	; 0x28
  logRowItemSize[item * 2] = count;
    8300:	4912      	ldr	r1, [pc, #72]	; (834c <ULog::setLogFlagDefault()+0x84>)
    8302:	4d13      	ldr	r5, [pc, #76]	; (8350 <ULog::setLogFlagDefault()+0x88>)
  logRowFlags[LOG_CTRL_VELL] = false;  // All relevant values in controller
    8304:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  logRowItemSize[item * 2] = count;
    8308:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
  logRowFlags[LOG_CTRL_VELR] = false;   
    830c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  logRowFlags[LOG_CTRL_TURN] = false;   
  logRowFlags[LOG_CTRL_POS] = false;    
    830e:	6303      	str	r3, [r0, #48]	; 0x30
  logRowFlags[LOG_CTRL_EDGE] = false;    
  logRowFlags[LOG_CTRL_WALL] = false;    
  logRowFlags[LOG_CTRL_FWD_DIST] = false;    
  logRowFlags[LOG_CTRL_BAL] = false;    // 
    8310:	8683      	strh	r3, [r0, #52]	; 0x34
  logRowFlags[LOG_CTRL_BAL_VEL] = false;  // 
  logRowFlags[LOG_CTRL_BAL_POS] = false;  // control of in balance position
    8312:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  logRowFlags[LOG_CHIRP] = false;    // chirp log not default
    8316:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  logRowItemSize[item * 2] = count;
    831a:	e9c0 4241 	strd	r4, r2, [r0, #260]	; 0x104
    831e:	4a0d      	ldr	r2, [pc, #52]	; (8354 <ULog::setLogFlagDefault()+0x8c>)
    8320:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
    8324:	e9c0 1243 	strd	r1, r2, [r0, #268]	; 0x10c
    8328:	3412      	adds	r4, #18
  logRowFlags[LOG_MAG] = false;    // not used
    832a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  logRowFlags[LOG_ENC] = false;    // raw encoder counter
    832e:	f44f 7280 	mov.w	r2, #256	; 0x100
  logRowItemSize[item * 2] = count;
    8332:	f8c0 4128 	str.w	r4, [r0, #296]	; 0x128
  logRowFlags[LOG_MAG] = false;    // not used
    8336:	6201      	str	r1, [r0, #32]
  logRowFlags[LOG_ENC] = false;    // raw encoder counter
    8338:	8482      	strh	r2, [r0, #36]	; 0x24

}
    833a:	bc30      	pop	{r4, r5}
    833c:	4770      	bx	lr
    833e:	bf00      	nop
    8340:	66036a04 	.word	0x66036a04
    8344:	4b026603 	.word	0x4b026603
    8348:	4a166604 	.word	0x4a166604
    834c:	66014b02 	.word	0x66014b02
    8350:	66036603 	.word	0x66036603
    8354:	6b034b07 	.word	0x6b034b07

00008358 <ULog::eePromSaveStatusLog()>:


void ULog::eePromSaveStatusLog()
{
  uint32_t flags = 0;
  for (int i = 0; i < LOG_MAX_CNT; i++)
    8358:	f06f 0c1a 	mvn.w	ip, #26
  uint32_t flags = 0;
    835c:	2100      	movs	r1, #0
    835e:	f100 031b 	add.w	r3, r0, #27
    8362:	ebac 0c00 	sub.w	ip, ip, r0
{
    8366:	b570      	push	{r4, r5, r6, lr}
  { // LOG_MAX_CNT is about 16 and less than 32
    if (logRowFlags[i])
      flags += 1 << i;
    8368:	2501      	movs	r5, #1
{
    836a:	4606      	mov	r6, r0
    836c:	f100 0e38 	add.w	lr, r0, #56	; 0x38
      flags += 1 << i;
    8370:	eb0c 0203 	add.w	r2, ip, r3
    if (logRowFlags[i])
    8374:	f813 4f01 	ldrb.w	r4, [r3, #1]!
      flags += 1 << i;
    8378:	fa05 f202 	lsl.w	r2, r5, r2
    if (logRowFlags[i])
    837c:	b104      	cbz	r4, 8380 <ULog::eePromSaveStatusLog()+0x28>
      flags += 1 << i;
    837e:	4411      	add	r1, r2
  for (int i = 0; i < LOG_MAX_CNT; i++)
    8380:	4573      	cmp	r3, lr
    8382:	d1f5      	bne.n	8370 <ULog::eePromSaveStatusLog()+0x18>
  }
  eeConfig.push32(flags);
    8384:	4804      	ldr	r0, [pc, #16]	; (8398 <ULog::eePromSaveStatusLog()+0x40>)
    8386:	f7fa fe2f 	bl	2fe8 <EEConfig::push32(unsigned long)>
  eeConfig.push32(logInterval_ms);
    838a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    838c:	4802      	ldr	r0, [pc, #8]	; (8398 <ULog::eePromSaveStatusLog()+0x40>)
}
    838e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  eeConfig.push32(logInterval_ms);
    8392:	f7fa be29 	b.w	2fe8 <EEConfig::push32(unsigned long)>
    8396:	bf00      	nop
    8398:	2000dbe8 	.word	0x2000dbe8

0000839c <ULog::eePromLoadStatusLog()>:

void ULog::eePromLoadStatusLog()
{
    839c:	b538      	push	{r3, r4, r5, lr}
    return deviceID > 0 and deviceID < MAX_ROBOT_NAMES;
    839e:	4b1b      	ldr	r3, [pc, #108]	; (840c <ULog::eePromLoadStatusLog()+0x70>)
    83a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    83a2:	3b01      	subs	r3, #1
  uint32_t flags;
  int skipCount = 4 + 4;
  if (robot.robotIDvalid() and not eeConfig.isStringConfig())
    83a4:	2b95      	cmp	r3, #149	; 0x95
    83a6:	d904      	bls.n	83b2 <ULog::eePromLoadStatusLog()+0x16>
    83a8:	4819      	ldr	r0, [pc, #100]	; (8410 <ULog::eePromLoadStatusLog()+0x74>)
    83aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    83ac:	3308      	adds	r3, #8
    83ae:	6243      	str	r3, [r0, #36]	; 0x24
  }
  else
  { // just skip, leaving default settings
    eeConfig.skipAddr(skipCount);
  }
}
    83b0:	bd38      	pop	{r3, r4, r5, pc}
    return stringConfig;
    83b2:	4605      	mov	r5, r0
    83b4:	4816      	ldr	r0, [pc, #88]	; (8410 <ULog::eePromLoadStatusLog()+0x74>)
  if (robot.robotIDvalid() and not eeConfig.isStringConfig())
    83b6:	f890 4020 	ldrb.w	r4, [r0, #32]
    83ba:	2c00      	cmp	r4, #0
    83bc:	d1f5      	bne.n	83aa <ULog::eePromLoadStatusLog()+0xe>
    flags = eeConfig.read32();
    83be:	f7fa fe67 	bl	3090 <EEConfig::read32()>
    for (int i = 0; i < LOG_MAX_CNT; i++)
    83c2:	4623      	mov	r3, r4
    83c4:	f105 021b 	add.w	r2, r5, #27
    flags = eeConfig.read32();
    83c8:	4604      	mov	r4, r0
      logRowFlags[i] = (flags & (1 << i)) != 0;
    83ca:	f04f 0c01 	mov.w	ip, #1
    83ce:	fa0c f103 	lsl.w	r1, ip, r3
    for (int i = 0; i < LOG_MAX_CNT; i++)
    83d2:	3301      	adds	r3, #1
      logRowFlags[i] = (flags & (1 << i)) != 0;
    83d4:	4221      	tst	r1, r4
    83d6:	bf14      	ite	ne
    83d8:	2101      	movne	r1, #1
    83da:	2100      	moveq	r1, #0
    for (int i = 0; i < LOG_MAX_CNT; i++)
    83dc:	2b1d      	cmp	r3, #29
      logRowFlags[i] = (flags & (1 << i)) != 0;
    83de:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (int i = 0; i < LOG_MAX_CNT; i++)
    83e2:	d1f4      	bne.n	83ce <ULog::eePromLoadStatusLog()+0x32>
    logRowFlags[LOG_MISSION] = false;
    83e4:	2300      	movs	r3, #0
    logInterval_ms = eeConfig.read32();
    83e6:	480a      	ldr	r0, [pc, #40]	; (8410 <ULog::eePromLoadStatusLog()+0x74>)
      logRowFlags[j] = false;
    83e8:	632b      	str	r3, [r5, #48]	; 0x30
    logRowFlags[LOG_MISSION] = false;
    83ea:	776b      	strb	r3, [r5, #29]
    logRowFlags[LOG_MAG] = false;
    83ec:	842b      	strh	r3, [r5, #32]
    logRowFlags[LOG_CHIRP] = false;
    83ee:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
      logRowFlags[j] = false;
    83f2:	62eb      	str	r3, [r5, #44]	; 0x2c
    83f4:	f8c5 3033 	str.w	r3, [r5, #51]	; 0x33
    logInterval_ms = eeConfig.read32();
    83f8:	f7fa fe4a 	bl	3090 <EEConfig::read32()>
    83fc:	4603      	mov	r3, r0
    current.logIntervalChanged();
    83fe:	4805      	ldr	r0, [pc, #20]	; (8414 <ULog::eePromLoadStatusLog()+0x78>)
    logInterval_ms = eeConfig.read32();
    8400:	63eb      	str	r3, [r5, #60]	; 0x3c
}
    8402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    current.logIntervalChanged();
    8406:	f7fa ba7b 	b.w	2900 <UCurrent::logIntervalChanged()>
    840a:	bf00      	nop
    840c:	2000e654 	.word	0x2000e654
    8410:	2000dbe8 	.word	0x2000dbe8
    8414:	2000da90 	.word	0x2000da90

00008418 <_GLOBAL__sub_I_logger>:
}
    8418:	b510      	push	{r4, lr}
class ULog : public USubss
    841a:	4c11      	ldr	r4, [pc, #68]	; (8460 <_GLOBAL__sub_I_logger+0x48>)
    841c:	4620      	mov	r0, r4
    841e:	f003 fe8b 	bl	c138 <USubss::USubss()>
    8422:	4910      	ldr	r1, [pc, #64]	; (8464 <_GLOBAL__sub_I_logger+0x4c>)
    8424:	2300      	movs	r3, #0
    8426:	2201      	movs	r2, #1
    8428:	2000      	movs	r0, #0
    842a:	6021      	str	r1, [r4, #0]
    842c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8430:	63e2      	str	r2, [r4, #60]	; 0x3c
    8432:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
ULog logger;
    8436:	4620      	mov	r0, r4
    8438:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    843c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    8440:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    8444:	65a3      	str	r3, [r4, #88]	; 0x58
    8446:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    844a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    844e:	4906      	ldr	r1, [pc, #24]	; (8468 <_GLOBAL__sub_I_logger+0x50>)
    8450:	e9c4 322b 	strd	r3, r2, [r4, #172]	; 0xac
    8454:	4a05      	ldr	r2, [pc, #20]	; (846c <_GLOBAL__sub_I_logger+0x54>)
}
    8456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ULog logger;
    845a:	f010 bd4d 	b.w	18ef8 <__aeabi_atexit>
    845e:	bf00      	nop
    8460:	2000e240 	.word	0x2000e240
    8464:	20007f84 	.word	0x20007f84
    8468:	00006ec9 	.word	0x00006ec9
    846c:	20008f08 	.word	0x20008f08

00008470 <UMotor::sendHelp()>:
{
    8470:	b530      	push	{r4, r5, lr}
  usb.send("# Motor -------\r\n");
    8472:	4d29      	ldr	r5, [pc, #164]	; (8518 <UMotor::sendHelp()+0xa8>)
{
    8474:	b0d1      	sub	sp, #324	; 0x144
    8476:	4604      	mov	r4, r0
  usb.send("# Motor -------\r\n");
    8478:	4928      	ldr	r1, [pc, #160]	; (851c <UMotor::sendHelp()+0xac>)
    847a:	4628      	mov	r0, r5
    847c:	f004 f84e 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotr V \tSet motor reversed; V=0 for small motors, V=1 for some big motors\r\n");
    8480:	2252      	movs	r2, #82	; 0x52
    8482:	4927      	ldr	r1, [pc, #156]	; (8520 <UMotor::sendHelp()+0xb0>)
    8484:	a805      	add	r0, sp, #20
    8486:	f00e f87d 	bl	16584 <memcpy>
  usb.send(reply);
    848a:	a905      	add	r1, sp, #20
    848c:	4628      	mov	r0, r5
    848e:	f004 f845 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotv m1 m2 \tSet motor voltage -24.0..24.0 - and enable motors\r\n");
    8492:	2246      	movs	r2, #70	; 0x46
    8494:	4923      	ldr	r1, [pc, #140]	; (8524 <UMotor::sendHelp()+0xb4>)
    8496:	a805      	add	r0, sp, #20
    8498:	f00e f874 	bl	16584 <memcpy>
  usb.send(reply);
    849c:	a905      	add	r1, sp, #20
    849e:	4628      	mov	r0, r5
    84a0:	f004 f83c 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotfrq \tSet motor PWM frequency [100..50000], is %d\r\n", PWMfrq);
    84a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    84a6:	4a20      	ldr	r2, [pc, #128]	; (8528 <UMotor::sendHelp()+0xb8>)
    84a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
    84ac:	a805      	add	r0, sp, #20
    84ae:	f013 f8f1 	bl	1b694 <snprintf>
  usb.send(reply);
    84b2:	a905      	add	r1, sp, #20
    84b4:	4628      	mov	r0, r5
    84b6:	f004 f831 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tdeadband L R\tSet PWM deadband ([0..100%%], is left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    84ba:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
    84be:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
    84c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    84c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    84ca:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
    84ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    84d2:	4a16      	ldr	r2, [pc, #88]	; (852c <UMotor::sendHelp()+0xbc>)
    84d4:	a805      	add	r0, sp, #20
    84d6:	ee87 6a26 	vdiv.f32	s12, s14, s13
    84da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    84de:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8510 <UMotor::sendHelp()+0xa0>
    84e2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    84e6:	ee26 6b05 	vmul.f64	d6, d6, d5
    84ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    84ee:	ee27 7b05 	vmul.f64	d7, d7, d5
    84f2:	ed8d 6b02 	vstr	d6, [sp, #8]
    84f6:	ed8d 7b00 	vstr	d7, [sp]
    84fa:	f013 f8cb 	bl	1b694 <snprintf>
  usb.send(reply);
    84fe:	a905      	add	r1, sp, #20
    8500:	4628      	mov	r0, r5
    8502:	f004 f80b 	bl	c51c <UUSB::send(char const*)>
}
    8506:	b051      	add	sp, #324	; 0x144
    8508:	bd30      	pop	{r4, r5, pc}
    850a:	bf00      	nop
    850c:	f3af 8000 	nop.w
    8510:	00000000 	.word	0x00000000
    8514:	40590000 	.word	0x40590000
    8518:	2000eab8 	.word	0x2000eab8
    851c:	20005564 	.word	0x20005564
    8520:	20005578 	.word	0x20005578
    8524:	200055cc 	.word	0x200055cc
    8528:	20005614 	.word	0x20005614
    852c:	20005650 	.word	0x20005650

00008530 <UMotor::~UMotor()>:

#include <stdint.h>
#include "main.h"
#include "usubss.h"

class UMotor : public USubss
    8530:	b510      	push	{r4, lr}
    8532:	4b05      	ldr	r3, [pc, #20]	; (8548 <UMotor::~UMotor()+0x18>)
    8534:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    8536:	6840      	ldr	r0, [r0, #4]
    8538:	6023      	str	r3, [r4, #0]
	if (__p)
    853a:	b118      	cbz	r0, 8544 <UMotor::~UMotor()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    853c:	68e1      	ldr	r1, [r4, #12]
    853e:	1a09      	subs	r1, r1, r0
    8540:	f00e f8bc 	bl	166bc <operator delete(void*, unsigned int)>
    8544:	4620      	mov	r0, r4
    8546:	bd10      	pop	{r4, pc}
    8548:	2000802c 	.word	0x2000802c

0000854c <UMotor::setup()>:
{
    854c:	b538      	push	{r3, r4, r5, lr}
    854e:	4604      	mov	r4, r0
  motorPreEnabled = true;
    8550:	2501      	movs	r5, #1
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    8552:	200c      	movs	r0, #12
    8554:	f00e fb4a 	bl	16bec <analogWriteRes>
  pinMode(PIN_LEFT_IN2,OUTPUT); // motor 1 IN1 ()
    8558:	2003      	movs	r0, #3
    855a:	4629      	mov	r1, r5
  motorPreEnabled = true;
    855c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  pinMode(PIN_LEFT_IN2,OUTPUT); // motor 1 IN1 ()
    8560:	f00d fcf8 	bl	15f54 <pinMode>
  pinMode(PIN_RIGHT_IN2,OUTPUT); // motor 2 IN1 ()
    8564:	4629      	mov	r1, r5
    8566:	2005      	movs	r0, #5
    8568:	f00d fcf4 	bl	15f54 <pinMode>
  pinMode(PIN_LEFT_IN1,OUTPUT); // motor 1 IN2 ()
    856c:	4629      	mov	r1, r5
    856e:	2002      	movs	r0, #2
    8570:	f00d fcf0 	bl	15f54 <pinMode>
  pinMode(PIN_RIGHT_IN1,OUTPUT); //motor 2 IN2 ()
    8574:	4629      	mov	r1, r5
    8576:	2004      	movs	r0, #4
    8578:	f00d fcec 	bl	15f54 <pinMode>
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    857c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    8580:	f44f 3284 	mov.w	r2, #67584	; 0x10800
		if (val) {
    8584:	f894 3020 	ldrb.w	r3, [r4, #32]
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    8588:	8661      	strh	r1, [r4, #50]	; 0x32
  motorAnkerDir[1] = m2PWM >= 0;
    858a:	8725      	strh	r5, [r4, #56]	; 0x38
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    858c:	6362      	str	r2, [r4, #52]	; 0x34
    858e:	2b00      	cmp	r3, #0
    8590:	d052      	beq.n	8638 <UMotor::setup()+0xec>
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    8592:	4b47      	ldr	r3, [pc, #284]	; (86b0 <UMotor::setup()+0x164>)
    8594:	2210      	movs	r2, #16
    8596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    859a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    859e:	2003      	movs	r0, #3
    85a0:	f00e f9ce 	bl	16940 <analogWrite>
		if (val) {
    85a4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    85a8:	2b00      	cmp	r3, #0
    85aa:	d05b      	beq.n	8664 <UMotor::setup()+0x118>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    85ac:	4b40      	ldr	r3, [pc, #256]	; (86b0 <UMotor::setup()+0x164>)
    85ae:	2240      	movs	r2, #64	; 0x40
    85b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    85b4:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    85b8:	2005      	movs	r0, #5
    85ba:	f00e f9c1 	bl	16940 <analogWrite>
  switch (robot.robotHWversion)
    85be:	4b3d      	ldr	r3, [pc, #244]	; (86b4 <UMotor::setup()+0x168>)
    85c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    85c4:	2b08      	cmp	r3, #8
    85c6:	d069      	beq.n	869c <UMotor::setup()+0x150>
  setPWMfrq(PWMfrq);
    85c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (frq > 150000) // limit'ish of motor driver
    85ca:	4a3b      	ldr	r2, [pc, #236]	; (86b8 <UMotor::setup()+0x16c>)
    85cc:	4293      	cmp	r3, r2
    85ce:	dd42      	ble.n	8656 <UMotor::setup()+0x10a>
    PWMfrq=
    85d0:	f64f 53e8 	movw	r3, #65000	; 0xfde8
    85d4:	ed9f 0a39 	vldr	s0, [pc, #228]	; 86bc <UMotor::setup()+0x170>
    85d8:	6263      	str	r3, [r4, #36]	; 0x24
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
    85da:	2003      	movs	r0, #3
    85dc:	f00e fa16 	bl	16a0c <analogWriteFrequency>
  analogWriteFrequency(PIN_RIGHT_IN2, PWMfrq); /// frequency (Hz)
    85e0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    85e4:	2005      	movs	r0, #5
    85e6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    85ea:	f00e fa0f 	bl	16a0c <analogWriteFrequency>
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    85ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    85f2:	f44f 3184 	mov.w	r1, #67584	; 0x10800
  motorAnkerDir[1] = m2PWM >= 0;
    85f6:	2201      	movs	r2, #1
		if (val) {
    85f8:	f894 3020 	ldrb.w	r3, [r4, #32]
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    85fc:	8660      	strh	r0, [r4, #50]	; 0x32
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    85fe:	6361      	str	r1, [r4, #52]	; 0x34
  motorAnkerDir[1] = m2PWM >= 0;
    8600:	8722      	strh	r2, [r4, #56]	; 0x38
    8602:	b31b      	cbz	r3, 864c <UMotor::setup()+0x100>
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    8604:	4b2a      	ldr	r3, [pc, #168]	; (86b0 <UMotor::setup()+0x164>)
    8606:	2210      	movs	r2, #16
    8608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    860c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8610:	2003      	movs	r0, #3
    8612:	f00e f995 	bl	16940 <analogWrite>
		if (val) {
    8616:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    861a:	b193      	cbz	r3, 8642 <UMotor::setup()+0xf6>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    861c:	4b24      	ldr	r3, [pc, #144]	; (86b0 <UMotor::setup()+0x164>)
    861e:	2240      	movs	r2, #64	; 0x40
    8620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    8624:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    8628:	2005      	movs	r0, #5
    862a:	f00e f989 	bl	16940 <analogWrite>
  if (setupCnt == 0)
    862e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8630:	b313      	cbz	r3, 8678 <UMotor::setup()+0x12c>
  setupCnt++;
    8632:	3301      	adds	r3, #1
    8634:	64e3      	str	r3, [r4, #76]	; 0x4c
}
    8636:	bd38      	pop	{r3, r4, r5, pc}
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8638:	4b1d      	ldr	r3, [pc, #116]	; (86b0 <UMotor::setup()+0x164>)
    863a:	2210      	movs	r2, #16
    863c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    8640:	e7ab      	b.n	859a <UMotor::setup()+0x4e>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8642:	4b1b      	ldr	r3, [pc, #108]	; (86b0 <UMotor::setup()+0x164>)
    8644:	2240      	movs	r2, #64	; 0x40
    8646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    864a:	e7eb      	b.n	8624 <UMotor::setup()+0xd8>
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    864c:	4b18      	ldr	r3, [pc, #96]	; (86b0 <UMotor::setup()+0x164>)
    864e:	2210      	movs	r2, #16
    8650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    8654:	e7da      	b.n	860c <UMotor::setup()+0xc0>
  else if (frq < 100)
    8656:	2b63      	cmp	r3, #99	; 0x63
    8658:	dc09      	bgt.n	866e <UMotor::setup()+0x122>
    PWMfrq = 100;
    865a:	2364      	movs	r3, #100	; 0x64
    865c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 86c0 <UMotor::setup()+0x174>
    8660:	6263      	str	r3, [r4, #36]	; 0x24
    8662:	e7ba      	b.n	85da <UMotor::setup()+0x8e>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8664:	4b12      	ldr	r3, [pc, #72]	; (86b0 <UMotor::setup()+0x164>)
    8666:	2240      	movs	r2, #64	; 0x40
    8668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    866c:	e7a2      	b.n	85b4 <UMotor::setup()+0x68>
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
    866e:	ee07 3a90 	vmov	s15, r3
    8672:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8676:	e7b0      	b.n	85da <UMotor::setup()+0x8e>
    addPublistItem("mot", "Get motor voltage 'mot m1(V) m2(V) vel_ref1(m/s) vel_ref2(m/s) reversed'");
    8678:	4a12      	ldr	r2, [pc, #72]	; (86c4 <UMotor::setup()+0x178>)
    867a:	4620      	mov	r0, r4
    867c:	4912      	ldr	r1, [pc, #72]	; (86c8 <UMotor::setup()+0x17c>)
    867e:	f003 fe7f 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
    addPublistItem("motpwm", "Get motor direction and PWM 'motpwm dir1 pwm1 dir2 pwm2'");
    8682:	4a12      	ldr	r2, [pc, #72]	; (86cc <UMotor::setup()+0x180>)
    8684:	4620      	mov	r0, r4
    8686:	4912      	ldr	r1, [pc, #72]	; (86d0 <UMotor::setup()+0x184>)
    8688:	f003 fe7a 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
    usb.addSubscriptionService(this);
    868c:	4621      	mov	r1, r4
    868e:	4811      	ldr	r0, [pc, #68]	; (86d4 <UMotor::setup()+0x188>)
    8690:	f004 fb70 	bl	cd74 <UUSB::addSubscriptionService(USubss*)>
  setupCnt++;
    8694:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8696:	3301      	adds	r3, #1
    8698:	64e3      	str	r3, [r4, #76]	; 0x4c
}
    869a:	bd38      	pop	{r3, r4, r5, pc}
      pinMode(PIN_MOTORS_ENABLE,OUTPUT); // hardware 8 has common enable
    869c:	2101      	movs	r1, #1
    869e:	2020      	movs	r0, #32
    86a0:	f00d fc58 	bl	15f54 <pinMode>
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    86a4:	4b0c      	ldr	r3, [pc, #48]	; (86d8 <UMotor::setup()+0x18c>)
    86a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    86aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    86ae:	e78b      	b.n	85c8 <UMotor::setup()+0x7c>
    86b0:	4200c000 	.word	0x4200c000
    86b4:	2000e654 	.word	0x2000e654
    86b8:	000249f0 	.word	0x000249f0
    86bc:	477de800 	.word	0x477de800
    86c0:	42c80000 	.word	0x42c80000
    86c4:	20005434 	.word	0x20005434
    86c8:	20005480 	.word	0x20005480
    86cc:	20005484 	.word	0x20005484
    86d0:	200054c0 	.word	0x200054c0
    86d4:	2000eab8 	.word	0x2000eab8
    86d8:	42004000 	.word	0x42004000

000086dc <UMotor::motorSetEnable(bool, bool)>:
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    86dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
    86e0:	b410      	push	{r4}
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    86e2:	2b00      	cmp	r3, #0
    86e4:	d046      	beq.n	8774 <UMotor::motorSetEnable(bool, bool)+0x98>
    86e6:	b9f9      	cbnz	r1, 8728 <UMotor::motorSetEnable(bool, bool)+0x4c>
    86e8:	b9f2      	cbnz	r2, 8728 <UMotor::motorSetEnable(bool, bool)+0x4c>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    86ea:	4b28      	ldr	r3, [pc, #160]	; (878c <UMotor::motorSetEnable(bool, bool)+0xb0>)
  motorEnable[0] = e1;
    86ec:	2400      	movs	r4, #0
    86ee:	2120      	movs	r1, #32
  motorEnable[1] = e2;
    86f0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  motorEnable[0] = e1;
    86f4:	f880 4020 	strb.w	r4, [r0, #32]
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    86f8:	2410      	movs	r4, #16
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    86fa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    motorSleeping[0] = true;
    86fe:	2101      	movs	r1, #1
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8700:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
    8704:	8741      	strh	r1, [r0, #58]	; 0x3a
  if (not motorEnable[1])
    8706:	bb6a      	cbnz	r2, 8764 <UMotor::motorSetEnable(bool, bool)+0x88>
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8708:	f44f 7480 	mov.w	r4, #256	; 0x100
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    870c:	2240      	movs	r2, #64	; 0x40
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    870e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    motorSleeping[1] = true;
    8716:	8781      	strh	r1, [r0, #60]	; 0x3c
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8718:	4b1d      	ldr	r3, [pc, #116]	; (8790 <UMotor::motorSetEnable(bool, bool)+0xb4>)
    871a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
}
    871e:	f85d 4b04 	ldr.w	r4, [sp], #4
    8722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    8726:	4770      	bx	lr
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    8728:	f890 3020 	ldrb.w	r3, [r0, #32]
    872c:	bb5b      	cbnz	r3, 8786 <UMotor::motorSetEnable(bool, bool)+0xaa>
    872e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    8732:	b913      	cbnz	r3, 873a <UMotor::motorSetEnable(bool, bool)+0x5e>
    motorPreEnabled = false;
    8734:	f44f 7380 	mov.w	r3, #256	; 0x100
    8738:	8583      	strh	r3, [r0, #44]	; 0x2c
  if (e1 and not motorEnable[0])
    873a:	2900      	cmp	r1, #0
    873c:	d0d5      	beq.n	86ea <UMotor::motorSetEnable(bool, bool)+0xe>
    overloadCount = 0;
    873e:	2300      	movs	r3, #0
    8740:	6283      	str	r3, [r0, #40]	; 0x28
  motorEnable[0] = e1;
    8742:	2301      	movs	r3, #1
  motorEnable[1] = e2;
    8744:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  motorEnable[0] = e1;
    8748:	f880 3020 	strb.w	r3, [r0, #32]
  if (not motorEnable[1])
    874c:	b952      	cbnz	r2, 8764 <UMotor::motorSetEnable(bool, bool)+0x88>
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    874e:	4a0f      	ldr	r2, [pc, #60]	; (878c <UMotor::motorSetEnable(bool, bool)+0xb0>)
    8750:	f44f 7480 	mov.w	r4, #256	; 0x100
    8754:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8758:	2440      	movs	r4, #64	; 0x40
    875a:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
    motorSleeping[1] = true;
    875e:	8783      	strh	r3, [r0, #60]	; 0x3c
		if (val) {
    8760:	2900      	cmp	r1, #0
    8762:	d0d9      	beq.n	8718 <UMotor::motorSetEnable(bool, bool)+0x3c>
				CORE_PIN32_PORTSET = CORE_PIN32_BITMASK;
    8764:	4b0a      	ldr	r3, [pc, #40]	; (8790 <UMotor::motorSetEnable(bool, bool)+0xb4>)
    8766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
}
    876a:	f85d 4b04 	ldr.w	r4, [sp], #4
    876e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    8772:	4770      	bx	lr
  if (e1 and not motorEnable[0])
    8774:	2900      	cmp	r1, #0
    8776:	d0b8      	beq.n	86ea <UMotor::motorSetEnable(bool, bool)+0xe>
    8778:	f890 3020 	ldrb.w	r3, [r0, #32]
    877c:	2b00      	cmp	r3, #0
    877e:	d1e0      	bne.n	8742 <UMotor::motorSetEnable(bool, bool)+0x66>
    overloadCount = 0;
    8780:	2300      	movs	r3, #0
    8782:	6283      	str	r3, [r0, #40]	; 0x28
    8784:	e7dd      	b.n	8742 <UMotor::motorSetEnable(bool, bool)+0x66>
  if (e1 and not motorEnable[0])
    8786:	2900      	cmp	r1, #0
    8788:	d1db      	bne.n	8742 <UMotor::motorSetEnable(bool, bool)+0x66>
    878a:	e7ae      	b.n	86ea <UMotor::motorSetEnable(bool, bool)+0xe>
    878c:	4200c000 	.word	0x4200c000
    8790:	42004000 	.word	0x42004000

00008794 <UMotor::motorSetPWM(int, int)>:
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    8794:	2900      	cmp	r1, #0
    8796:	bfb4      	ite	lt
    8798:	1c4b      	addlt	r3, r1, #1
    879a:	460b      	movge	r3, r1
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    879c:	2a00      	cmp	r2, #0
  motorAnkerDir[0] = m1PWM >= 0; // just for debug/log
    879e:	ea6f 0101 	mvn.w	r1, r1
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    87a2:	ea4f 0363 	mov.w	r3, r3, asr #1
  motorAnkerDir[0] = m1PWM >= 0; // just for debug/log
    87a6:	ea4f 71d1 	mov.w	r1, r1, lsr #31
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    87aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{ // PWM is 12 bit
    87ae:	b510      	push	{r4, lr}
    87b0:	4604      	mov	r4, r0
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    87b2:	4610      	mov	r0, r2
    87b4:	bfb8      	it	lt
    87b6:	1c50      	addlt	r0, r2, #1
  motorAnkerDir[1] = m2PWM >= 0;
    87b8:	43d2      	mvns	r2, r2
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    87ba:	b21b      	sxth	r3, r3
  motorAnkerDir[0] = m1PWM >= 0; // just for debug/log
    87bc:	86e1      	strh	r1, [r4, #54]	; 0x36
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    87be:	1040      	asrs	r0, r0, #1
		if (val) {
    87c0:	f894 1020 	ldrb.w	r1, [r4, #32]
  motorAnkerDir[1] = m2PWM >= 0;
    87c4:	0fd2      	lsrs	r2, r2, #31
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    87c6:	8663      	strh	r3, [r4, #50]	; 0x32
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    87c8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  motorAnkerDir[1] = m2PWM >= 0;
    87cc:	8722      	strh	r2, [r4, #56]	; 0x38
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    87ce:	86a0      	strh	r0, [r4, #52]	; 0x34
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    87d0:	4a16      	ldr	r2, [pc, #88]	; (882c <UMotor::motorSetPWM(int, int)+0x98>)
		if (val) {
    87d2:	b1a1      	cbz	r1, 87fe <UMotor::motorSetPWM(int, int)+0x6a>
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    87d4:	2110      	movs	r1, #16
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    87d6:	2003      	movs	r0, #3
    87d8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    87dc:	4619      	mov	r1, r3
    87de:	f00e f8af 	bl	16940 <analogWrite>
		if (val) {
    87e2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    87e6:	b1ab      	cbz	r3, 8814 <UMotor::motorSetPWM(int, int)+0x80>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    87e8:	4b10      	ldr	r3, [pc, #64]	; (882c <UMotor::motorSetPWM(int, int)+0x98>)
    87ea:	2240      	movs	r2, #64	; 0x40
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    87ec:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    87f0:	2005      	movs	r0, #5
    87f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    87f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    87fa:	f00e b8a1 	b.w	16940 <analogWrite>
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    87fe:	2110      	movs	r1, #16
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    8800:	2003      	movs	r0, #3
    8802:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    8806:	4619      	mov	r1, r3
    8808:	f00e f89a 	bl	16940 <analogWrite>
		if (val) {
    880c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    8810:	2b00      	cmp	r3, #0
    8812:	d1e9      	bne.n	87e8 <UMotor::motorSetPWM(int, int)+0x54>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8814:	4b05      	ldr	r3, [pc, #20]	; (882c <UMotor::motorSetPWM(int, int)+0x98>)
    8816:	2240      	movs	r2, #64	; 0x40
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    8818:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    881c:	2005      	movs	r0, #5
    881e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    8822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    8826:	f00e b88b 	b.w	16940 <analogWrite>
    882a:	bf00      	nop
    882c:	4200c000 	.word	0x4200c000

00008830 <UMotor::motorSetAnchorVoltage()>:
{
    8830:	b538      	push	{r3, r4, r5, lr}
  float batteryNominalVoltage = robot.batteryVoltage;
    8832:	4b4f      	ldr	r3, [pc, #316]	; (8970 <UMotor::motorSetAnchorVoltage()+0x140>)
  if (batteryNominalVoltage < 5.0)
    8834:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
{
    8838:	4604      	mov	r4, r0
  float batteryNominalVoltage = robot.batteryVoltage;
    883a:	edd3 7a05 	vldr	s15, [r3, #20]
  if (batteryNominalVoltage < 5.0)
    883e:	eef4 7ac7 	vcmpe.f32	s15, s14
{
    8842:	ed2d 8b02 	vpush	{d8}
  if (batteryNominalVoltage < 5.0)
    8846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    884a:	d463      	bmi.n	8914 <UMotor::motorSetAnchorVoltage()+0xe4>
  float scaleFactor = MAX_PWM / (batteryNominalVoltage - voltageLoss);
    884c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    8850:	ee77 7ac7 	vsub.f32	s15, s15, s14
  if (overloadCount > 500 and motorEnable[0])
    8854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  float scaleFactor = MAX_PWM / (batteryNominalVoltage - voltageLoss);
    8856:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
  if (overloadCount > 500 and motorEnable[0])
    885a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  float scaleFactor = MAX_PWM / (batteryNominalVoltage - voltageLoss);
    885e:	ee87 8a27 	vdiv.f32	s16, s14, s15
  if (overloadCount > 500 and motorEnable[0])
    8862:	dd03      	ble.n	886c <UMotor::motorSetAnchorVoltage()+0x3c>
    8864:	f894 3020 	ldrb.w	r3, [r4, #32]
    8868:	2b00      	cmp	r3, #0
    886a:	d15c      	bne.n	8926 <UMotor::motorSetAnchorVoltage()+0xf6>
  if (motorVoltage[0] > 0.001)
    886c:	edd4 7a06 	vldr	s15, [r4, #24]
    8870:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8960 <UMotor::motorSetAnchorVoltage()+0x130>
    8874:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    8878:	eeb4 6bc5 	vcmpe.f64	d6, d5
    887c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8880:	dd3c      	ble.n	88fc <UMotor::motorSetAnchorVoltage()+0xcc>
    v1 = motorVoltage[0] + minV;
    8882:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8974 <UMotor::motorSetAnchorVoltage()+0x144>
    8886:	ee37 7a87 	vadd.f32	s14, s15, s14
  if (motorVoltage[1] > 0.001)
    888a:	edd4 7a07 	vldr	s15, [r4, #28]
    888e:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8960 <UMotor::motorSetAnchorVoltage()+0x130>
    8892:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    8896:	eeb4 6bc5 	vcmpe.f64	d6, d5
    889a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    889e:	dd1f      	ble.n	88e0 <UMotor::motorSetAnchorVoltage()+0xb0>
    v2 = motorVoltage[1] + minV;
    88a0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8974 <UMotor::motorSetAnchorVoltage()+0x144>
    88a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
  w2 = int16_t(-v2 * scaleFactor);
    88a8:	eef1 7a67 	vneg.f32	s15, s15
  if (motorReversed)
    88ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    88b0:	b10b      	cbz	r3, 88b6 <UMotor::motorSetAnchorVoltage()+0x86>
    scaleFactor *= -1.0;
    88b2:	eeb1 8a48 	vneg.f32	s16, s16
  w2 = int16_t(-v2 * scaleFactor);
    88b6:	ee68 7a27 	vmul.f32	s15, s16, s15
  motorSetPWM(w1, w2);
    88ba:	4620      	mov	r0, r4
  w1 = int16_t(v1 * scaleFactor);
    88bc:	ee28 8a07 	vmul.f32	s16, s16, s14
  w2 = int16_t(-v2 * scaleFactor);
    88c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  w1 = int16_t(v1 * scaleFactor);
    88c4:	eebd 8ac8 	vcvt.s32.f32	s16, s16
  motorSetPWM(w1, w2);
    88c8:	ee17 3a90 	vmov	r3, s15
    88cc:	b21a      	sxth	r2, r3
    88ce:	ee18 3a10 	vmov	r3, s16
}
    88d2:	ecbd 8b02 	vpop	{d8}
  motorSetPWM(w1, w2);
    88d6:	b219      	sxth	r1, r3
}
    88d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  motorSetPWM(w1, w2);
    88dc:	f7ff bf5a 	b.w	8794 <UMotor::motorSetPWM(int, int)>
  else if (motorVoltage[1] < -0.001)
    88e0:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8968 <UMotor::motorSetAnchorVoltage()+0x138>
    88e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
    88e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    88ec:	d518      	bpl.n	8920 <UMotor::motorSetAnchorVoltage()+0xf0>
    v2 = motorVoltage[1] - minV;
    88ee:	eddf 6a21 	vldr	s13, [pc, #132]	; 8974 <UMotor::motorSetAnchorVoltage()+0x144>
    88f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
  w2 = int16_t(-v2 * scaleFactor);
    88f6:	eef1 7a67 	vneg.f32	s15, s15
    88fa:	e7d7      	b.n	88ac <UMotor::motorSetAnchorVoltage()+0x7c>
  else if (motorVoltage[0] < -0.001)
    88fc:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8968 <UMotor::motorSetAnchorVoltage()+0x138>
    8900:	eeb4 6bc5 	vcmpe.f64	d6, d5
    8904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8908:	d507      	bpl.n	891a <UMotor::motorSetAnchorVoltage()+0xea>
    v1 = motorVoltage[0] - minV;
    890a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8974 <UMotor::motorSetAnchorVoltage()+0x144>
    890e:	ee37 7ac7 	vsub.f32	s14, s15, s14
    8912:	e7ba      	b.n	888a <UMotor::motorSetAnchorVoltage()+0x5a>
    8914:	eddf 7a18 	vldr	s15, [pc, #96]	; 8978 <UMotor::motorSetAnchorVoltage()+0x148>
    8918:	e79c      	b.n	8854 <UMotor::motorSetAnchorVoltage()+0x24>
    v1 = 0;
    891a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 897c <UMotor::motorSetAnchorVoltage()+0x14c>
    891e:	e7b4      	b.n	888a <UMotor::motorSetAnchorVoltage()+0x5a>
    8920:	eddf 7a17 	vldr	s15, [pc, #92]	; 8980 <UMotor::motorSetAnchorVoltage()+0x150>
    8924:	e7c2      	b.n	88ac <UMotor::motorSetAnchorVoltage()+0x7c>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8926:	4b17      	ldr	r3, [pc, #92]	; (8984 <UMotor::motorSetAnchorVoltage()+0x154>)
  motorEnable[0] = e1;
    8928:	2000      	movs	r0, #0
    892a:	2120      	movs	r1, #32
    motorSleeping[0] = true;
    892c:	2201      	movs	r2, #1
  motorEnable[0] = e1;
    892e:	8420      	strh	r0, [r4, #32]
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8930:	2010      	movs	r0, #16
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8932:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8936:	f44f 7180 	mov.w	r1, #256	; 0x100
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    893a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    motorSleeping[0] = true;
    893e:	8762      	strh	r2, [r4, #58]	; 0x3a
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8940:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8944:	2140      	movs	r1, #64	; 0x40
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8946:	4d10      	ldr	r5, [pc, #64]	; (8988 <UMotor::motorSetAnchorVoltage()+0x158>)
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8948:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    894c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    motorSleeping[1] = true;
    8950:	87a2      	strh	r2, [r4, #60]	; 0x3c
    usb.send("# UMotor::motorSetAnchorVoltage: overload, disabled motors\n");
    8952:	490e      	ldr	r1, [pc, #56]	; (898c <UMotor::motorSetAnchorVoltage()+0x15c>)
    8954:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    8958:	480d      	ldr	r0, [pc, #52]	; (8990 <UMotor::motorSetAnchorVoltage()+0x160>)
    895a:	f003 fddf 	bl	c51c <UUSB::send(char const*)>
    895e:	e785      	b.n	886c <UMotor::motorSetAnchorVoltage()+0x3c>
    8960:	d2f1a9fc 	.word	0xd2f1a9fc
    8964:	3f50624d 	.word	0x3f50624d
    8968:	d2f1a9fc 	.word	0xd2f1a9fc
    896c:	bf50624d 	.word	0xbf50624d
    8970:	2000e654 	.word	0x2000e654
    8974:	3ecccccd 	.word	0x3ecccccd
    8978:	4121999a 	.word	0x4121999a
    897c:	00000000 	.word	0x00000000
    8980:	80000000 	.word	0x80000000
    8984:	4200c000 	.word	0x4200c000
    8988:	42004000 	.word	0x42004000
    898c:	200053f8 	.word	0x200053f8
    8990:	2000eab8 	.word	0x2000eab8
    8994:	00000000 	.word	0x00000000

00008998 <UMotor::decode(char const*)>:
{
    8998:	b570      	push	{r4, r5, r6, lr}
    899a:	460c      	mov	r4, r1
    899c:	4605      	mov	r5, r0
  if (strncmp(buf, "motr", 4) == 0)
    899e:	2204      	movs	r2, #4
    89a0:	4993      	ldr	r1, [pc, #588]	; (8bf0 <UMotor::decode(char const*)+0x258>)
    89a2:	4620      	mov	r0, r4
{
    89a4:	ed2d 8b02 	vpush	{d8}
    89a8:	b0b8      	sub	sp, #224	; 0xe0
  if (strncmp(buf, "motr", 4) == 0)
    89aa:	f013 f92b 	bl	1bc04 <strncmp>
    89ae:	2800      	cmp	r0, #0
    89b0:	d04b      	beq.n	8a4a <UMotor::decode(char const*)+0xb2>
  else if (strncmp(buf, "motv", 4) == 0)
    89b2:	2204      	movs	r2, #4
    89b4:	498f      	ldr	r1, [pc, #572]	; (8bf4 <UMotor::decode(char const*)+0x25c>)
    89b6:	4620      	mov	r0, r4
    89b8:	f013 f924 	bl	1bc04 <strncmp>
    89bc:	4606      	mov	r6, r0
    89be:	b198      	cbz	r0, 89e8 <UMotor::decode(char const*)+0x50>
  else if (strncmp(buf, "motfrq ", 7) == 0)
    89c0:	2207      	movs	r2, #7
    89c2:	498d      	ldr	r1, [pc, #564]	; (8bf8 <UMotor::decode(char const*)+0x260>)
    89c4:	4620      	mov	r0, r4
    89c6:	f013 f91d 	bl	1bc04 <strncmp>
    89ca:	2800      	cmp	r0, #0
    89cc:	d069      	beq.n	8aa2 <UMotor::decode(char const*)+0x10a>
  else if (strncmp(buf, "deadband ", 9) == 0)
    89ce:	2209      	movs	r2, #9
    89d0:	498a      	ldr	r1, [pc, #552]	; (8bfc <UMotor::decode(char const*)+0x264>)
    89d2:	4620      	mov	r0, r4
    89d4:	f013 f916 	bl	1bc04 <strncmp>
    89d8:	2800      	cmp	r0, #0
    89da:	f000 8082 	beq.w	8ae2 <UMotor::decode(char const*)+0x14a>
    used = false;
    89de:	2000      	movs	r0, #0
}
    89e0:	b038      	add	sp, #224	; 0xe0
    89e2:	ecbd 8b02 	vpop	{d8}
    89e6:	bd70      	pop	{r4, r5, r6, pc}
    const char * p1 = &buf[4];
    89e8:	1d20      	adds	r0, r4, #4
    m1 = strtof(p1, (char**)&p1);
    89ea:	a906      	add	r1, sp, #24
    const char * p1 = &buf[4];
    89ec:	9006      	str	r0, [sp, #24]
    m1 = strtof(p1, (char**)&p1);
    89ee:	f012 fb5d 	bl	1b0ac <strtof>
    89f2:	eeb0 8a40 	vmov.f32	s16, s0
    m2 = strtof(p1, (char**)&p1);
    89f6:	a906      	add	r1, sp, #24
    89f8:	9806      	ldr	r0, [sp, #24]
    89fa:	f012 fb57 	bl	1b0ac <strtof>
    motorVoltage[1] = m2;
    89fe:	ed85 0a07 	vstr	s0, [r5, #28]
  { return __builtin_fabsf(__x); }
    8a02:	eeb0 7ac8 	vabs.f32	s14, s16
    motorVoltage[0] = m1;
    8a06:	ed85 8a06 	vstr	s16, [r5, #24]
    if ((fabs(m1) < 0.01) and (fabs(m2) < 0.01))
    8a0a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8be0 <UMotor::decode(char const*)+0x248>
    8a0e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8a12:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a1a:	d509      	bpl.n	8a30 <UMotor::decode(char const*)+0x98>
    8a1c:	eeb0 0ac0 	vabs.f32	s0, s0
    8a20:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    8a24:	eeb4 0bc6 	vcmpe.f64	d0, d6
    8a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a2c:	f100 80b4 	bmi.w	8b98 <UMotor::decode(char const*)+0x200>
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    8a30:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    8a34:	b303      	cbz	r3, 8a78 <UMotor::decode(char const*)+0xe0>
    8a36:	f895 3020 	ldrb.w	r3, [r5, #32]
    8a3a:	bb13      	cbnz	r3, 8a82 <UMotor::decode(char const*)+0xea>
    8a3c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    8a40:	b9eb      	cbnz	r3, 8a7e <UMotor::decode(char const*)+0xe6>
    motorPreEnabled = false;
    8a42:	f44f 7380 	mov.w	r3, #256	; 0x100
    8a46:	85ab      	strh	r3, [r5, #44]	; 0x2c
    8a48:	e019      	b.n	8a7e <UMotor::decode(char const*)+0xe6>
    const char * p1 = &buf[4];
    8a4a:	3404      	adds	r4, #4
    bool rev = strtol(p1, (char**)&p1, 10);
    8a4c:	220a      	movs	r2, #10
    8a4e:	a906      	add	r1, sp, #24
    8a50:	4620      	mov	r0, r4
    const char * p1 = &buf[4];
    8a52:	9406      	str	r4, [sp, #24]
    bool rev = strtol(p1, (char**)&p1, 10);
    8a54:	f012 fc2e 	bl	1b2b4 <strtol>
    8a58:	4603      	mov	r3, r0
    if (p1 == &buf[4] or rev)
    8a5a:	9a06      	ldr	r2, [sp, #24]
  bool used = true;
    8a5c:	2001      	movs	r0, #1
    if (p1 == &buf[4] or rev)
    8a5e:	3b00      	subs	r3, #0
    8a60:	bf18      	it	ne
    8a62:	2301      	movne	r3, #1
    8a64:	42a2      	cmp	r2, r4
    8a66:	bf08      	it	eq
    8a68:	f043 0301 	orreq.w	r3, r3, #1
    8a6c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
    8a70:	b038      	add	sp, #224	; 0xe0
    8a72:	ecbd 8b02 	vpop	{d8}
    8a76:	bd70      	pop	{r4, r5, r6, pc}
  if (e1 and not motorEnable[0])
    8a78:	f895 3020 	ldrb.w	r3, [r5, #32]
    8a7c:	b90b      	cbnz	r3, 8a82 <UMotor::decode(char const*)+0xea>
    overloadCount = 0;
    8a7e:	2300      	movs	r3, #0
    8a80:	62ab      	str	r3, [r5, #40]	; 0x28
  motorEnable[0] = e1;
    8a82:	f240 1101 	movw	r1, #257	; 0x101
				CORE_PIN32_PORTSET = CORE_PIN32_BITMASK;
    8a86:	4b5e      	ldr	r3, [pc, #376]	; (8c00 <UMotor::decode(char const*)+0x268>)
    8a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8a8c:	8429      	strh	r1, [r5, #32]
    8a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    motorSetAnchorVoltage();
    8a92:	4628      	mov	r0, r5
    8a94:	f7ff fecc 	bl	8830 <UMotor::motorSetAnchorVoltage()>
  bool used = true;
    8a98:	2001      	movs	r0, #1
}
    8a9a:	b038      	add	sp, #224	; 0xe0
    8a9c:	ecbd 8b02 	vpop	{d8}
    8aa0:	bd70      	pop	{r4, r5, r6, pc}
    int frq = strtol(p1, nullptr, 10);
    8aa2:	4601      	mov	r1, r0
    8aa4:	220a      	movs	r2, #10
    8aa6:	1de0      	adds	r0, r4, #7
    8aa8:	f012 fc04 	bl	1b2b4 <strtol>
  if (frq > 150000) // limit'ish of motor driver
    8aac:	4b55      	ldr	r3, [pc, #340]	; (8c04 <UMotor::decode(char const*)+0x26c>)
    8aae:	4298      	cmp	r0, r3
    8ab0:	dc6d      	bgt.n	8b8e <UMotor::decode(char const*)+0x1f6>
    8ab2:	2864      	cmp	r0, #100	; 0x64
    8ab4:	4603      	mov	r3, r0
    8ab6:	bfb8      	it	lt
    8ab8:	2364      	movlt	r3, #100	; 0x64
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
    8aba:	ee07 3a90 	vmov	s15, r3
    8abe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8ac2:	626b      	str	r3, [r5, #36]	; 0x24
    8ac4:	2003      	movs	r0, #3
    8ac6:	f00d ffa1 	bl	16a0c <analogWriteFrequency>
  analogWriteFrequency(PIN_RIGHT_IN2, PWMfrq); /// frequency (Hz)
    8aca:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
    8ace:	2005      	movs	r0, #5
    8ad0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    8ad4:	f00d ff9a 	bl	16a0c <analogWriteFrequency>
  bool used = true;
    8ad8:	2001      	movs	r0, #1
}
    8ada:	b038      	add	sp, #224	; 0xe0
    8adc:	ecbd 8b02 	vpop	{d8}
    8ae0:	bd70      	pop	{r4, r5, r6, pc}
    const char * p1 = &buf[9];
    8ae2:	3409      	adds	r4, #9
    float deadbandLeft = strtof(p1, &p2);
    8ae4:	a904      	add	r1, sp, #16
    8ae6:	4620      	mov	r0, r4
    8ae8:	f012 fae0 	bl	1b0ac <strtof>
    float deadbandRight = strtof(p2, &p3);
    8aec:	a905      	add	r1, sp, #20
    8aee:	9804      	ldr	r0, [sp, #16]
    float deadbandLeft = strtof(p1, &p2);
    8af0:	eeb0 8a40 	vmov.f32	s16, s0
    float deadbandRight = strtof(p2, &p3);
    8af4:	f012 fada 	bl	1b0ac <strtof>
    if (p2 != p1)
    8af8:	9b04      	ldr	r3, [sp, #16]
    float deadbandRight = strtof(p2, &p3);
    8afa:	eef0 6a40 	vmov.f32	s13, s0
    if (p2 != p1)
    8afe:	42a3      	cmp	r3, r4
    8b00:	d066      	beq.n	8bd0 <UMotor::decode(char const*)+0x238>
      pwmDeadband[0] = int(deadbandLeft / 100.0 * MAX_PWM);
    8b02:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    8b06:	edd5 5a14 	vldr	s11, [r5, #80]	; 0x50
    8b0a:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8be8 <UMotor::decode(char const*)+0x250>
    8b0e:	ee88 7b04 	vdiv.f64	d7, d8, d4
    8b12:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
    8b16:	ee27 7b04 	vmul.f64	d7, d7, d4
    8b1a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    8b1e:	ed85 7a15 	vstr	s14, [r5, #84]	; 0x54
    if (p2 != p3)
    8b22:	9a05      	ldr	r2, [sp, #20]
    8b24:	4293      	cmp	r3, r2
    8b26:	d050      	beq.n	8bca <UMotor::decode(char const*)+0x232>
      pwmDeadband[1] = int(deadbandRight / 100.0 * MAX_PWM);
    8b28:	eeb7 0ae6 	vcvt.f64.f32	d0, s13
    8b2c:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
    8b30:	ed9f 3b2d 	vldr	d3, [pc, #180]	; 8be8 <UMotor::decode(char const*)+0x250>
    8b34:	ee80 6b03 	vdiv.f64	d6, d0, d3
    8b38:	ee26 6b04 	vmul.f64	d6, d6, d4
    8b3c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    8b40:	ed85 6a16 	vstr	s12, [r5, #88]	; 0x58
    snprintf(s, MSL, "# PWM dead-band set to left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    8b44:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    8b48:	4a2f      	ldr	r2, [pc, #188]	; (8c08 <UMotor::decode(char const*)+0x270>)
    8b4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    8b4e:	21c8      	movs	r1, #200	; 0xc8
    8b50:	a806      	add	r0, sp, #24
    8b52:	eec6 6a25 	vdiv.f32	s13, s12, s11
    8b56:	eec7 7a25 	vdiv.f32	s15, s14, s11
    8b5a:	ed9f 4b23 	vldr	d4, [pc, #140]	; 8be8 <UMotor::decode(char const*)+0x250>
    8b5e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
    8b62:	ee26 6b04 	vmul.f64	d6, d6, d4
    8b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    8b6a:	ee27 7b04 	vmul.f64	d7, d7, d4
    8b6e:	ed8d 6b02 	vstr	d6, [sp, #8]
    8b72:	ed8d 7b00 	vstr	d7, [sp]
    8b76:	f012 fd8d 	bl	1b694 <snprintf>
    usb.send(s);
    8b7a:	a906      	add	r1, sp, #24
    8b7c:	4823      	ldr	r0, [pc, #140]	; (8c0c <UMotor::decode(char const*)+0x274>)
    8b7e:	f003 fccd 	bl	c51c <UUSB::send(char const*)>
    usb.send("# NB! dead-band setting is not saved to flash (lost after reboot)\n");
    8b82:	4923      	ldr	r1, [pc, #140]	; (8c10 <UMotor::decode(char const*)+0x278>)
    8b84:	4821      	ldr	r0, [pc, #132]	; (8c0c <UMotor::decode(char const*)+0x274>)
    8b86:	f003 fcc9 	bl	c51c <UUSB::send(char const*)>
  bool used = true;
    8b8a:	2001      	movs	r0, #1
    8b8c:	e728      	b.n	89e0 <UMotor::decode(char const*)+0x48>
    8b8e:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8c14 <UMotor::decode(char const*)+0x27c>
    PWMfrq=
    8b92:	f64f 53e8 	movw	r3, #65000	; 0xfde8
    8b96:	e794      	b.n	8ac2 <UMotor::decode(char const*)+0x12a>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8b98:	4b1f      	ldr	r3, [pc, #124]	; (8c18 <UMotor::decode(char const*)+0x280>)
    8b9a:	2020      	movs	r0, #32
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8b9c:	2110      	movs	r1, #16
  motorEnable[0] = e1;
    8b9e:	842e      	strh	r6, [r5, #32]
    motorSleeping[0] = true;
    8ba0:	2201      	movs	r2, #1
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8ba2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8ba6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8baa:	f44f 7080 	mov.w	r0, #256	; 0x100
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8bae:	2140      	movs	r1, #64	; 0x40
    8bb0:	876a      	strh	r2, [r5, #58]	; 0x3a
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8bb2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8bb6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8bba:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    8bbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    motorSleeping[1] = true;
    8bc2:	87aa      	strh	r2, [r5, #60]	; 0x3c
    8bc4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
}
    8bc8:	e763      	b.n	8a92 <UMotor::decode(char const*)+0xfa>
    snprintf(s, MSL, "# PWM dead-band set to left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    8bca:	ed95 6a16 	vldr	s12, [r5, #88]	; 0x58
    8bce:	e7b9      	b.n	8b44 <UMotor::decode(char const*)+0x1ac>
      pwmDeadband[0] = int(deadbandLeft / 100.0 * MAX_PWM);
    8bd0:	edd5 5a14 	vldr	s11, [r5, #80]	; 0x50
    snprintf(s, MSL, "# PWM dead-band set to left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    8bd4:	ed95 7a15 	vldr	s14, [r5, #84]	; 0x54
    8bd8:	e7a3      	b.n	8b22 <UMotor::decode(char const*)+0x18a>
    8bda:	bf00      	nop
    8bdc:	f3af 8000 	nop.w
    8be0:	47ae147b 	.word	0x47ae147b
    8be4:	3f847ae1 	.word	0x3f847ae1
    8be8:	00000000 	.word	0x00000000
    8bec:	40590000 	.word	0x40590000
    8bf0:	200054c8 	.word	0x200054c8
    8bf4:	200054d0 	.word	0x200054d0
    8bf8:	200054d8 	.word	0x200054d8
    8bfc:	200054e0 	.word	0x200054e0
    8c00:	42004000 	.word	0x42004000
    8c04:	000249f0 	.word	0x000249f0
    8c08:	200054ec 	.word	0x200054ec
    8c0c:	2000eab8 	.word	0x2000eab8
    8c10:	20005520 	.word	0x20005520
    8c14:	477de800 	.word	0x477de800
    8c18:	4200c000 	.word	0x4200c000
    8c1c:	00000000 	.word	0x00000000

00008c20 <UMotor::sendMotorValues()>:
{
    8c20:	b500      	push	{lr}
  snprintf(s, MSL, "mot %.2g %.2g %.3g %.4g %d\r\n", 
    8c22:	a313      	add	r3, pc, #76	; (adr r3, 8c70 <UMotor::sendMotorValues()+0x50>)
    8c24:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    8c28:	b0b1      	sub	sp, #196	; 0xc4
  snprintf(s, MSL, "mot %.2g %.2g %.3g %.4g %d\r\n", 
    8c2a:	2196      	movs	r1, #150	; 0x96
    8c2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8c30:	e9cd 2304 	strd	r2, r3, [sp, #16]
    8c34:	ed90 6a07 	vldr	s12, [r0, #28]
    8c38:	ed90 7a06 	vldr	s14, [r0, #24]
    8c3c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    8c40:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    8c44:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8c48:	4a07      	ldr	r2, [pc, #28]	; (8c68 <UMotor::sendMotorValues()+0x48>)
    8c4a:	9308      	str	r3, [sp, #32]
    8c4c:	a80a      	add	r0, sp, #40	; 0x28
    8c4e:	ed8d 6b02 	vstr	d6, [sp, #8]
    8c52:	ed8d 7b00 	vstr	d7, [sp]
    8c56:	f012 fd1d 	bl	1b694 <snprintf>
  usb.send(s);
    8c5a:	a90a      	add	r1, sp, #40	; 0x28
    8c5c:	4803      	ldr	r0, [pc, #12]	; (8c6c <UMotor::sendMotorValues()+0x4c>)
    8c5e:	f003 fc5d 	bl	c51c <UUSB::send(char const*)>
}
    8c62:	b031      	add	sp, #196	; 0xc4
    8c64:	f85d fb04 	ldr.w	pc, [sp], #4
    8c68:	200053d8 	.word	0x200053d8
    8c6c:	2000eab8 	.word	0x2000eab8
    8c70:	9999999a 	.word	0x9999999a
    8c74:	3fb99999 	.word	0x3fb99999

00008c78 <UMotor::sendMotorPWM()>:
{
    8c78:	4603      	mov	r3, r0
  snprintf(s, MSL, "motpwm %d %d %d %d %d %d %d\r\n", 
    8c7a:	4a10      	ldr	r2, [pc, #64]	; (8cbc <UMotor::sendMotorPWM()+0x44>)
    8c7c:	2196      	movs	r1, #150	; 0x96
{
    8c7e:	b510      	push	{r4, lr}
  snprintf(s, MSL, "motpwm %d %d %d %d %d %d %d\r\n", 
    8c80:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
{
    8c84:	b0ac      	sub	sp, #176	; 0xb0
  snprintf(s, MSL, "motpwm %d %d %d %d %d %d %d\r\n", 
    8c86:	9405      	str	r4, [sp, #20]
    8c88:	a806      	add	r0, sp, #24
    8c8a:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
    8c8e:	9404      	str	r4, [sp, #16]
    8c90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8c92:	9403      	str	r4, [sp, #12]
    8c94:	f9b3 4034 	ldrsh.w	r4, [r3, #52]	; 0x34
    8c98:	9402      	str	r4, [sp, #8]
    8c9a:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
    8c9e:	9401      	str	r4, [sp, #4]
    8ca0:	f9b3 4032 	ldrsh.w	r4, [r3, #50]	; 0x32
    8ca4:	9400      	str	r4, [sp, #0]
    8ca6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
    8caa:	f012 fcf3 	bl	1b694 <snprintf>
  usb.send(s);
    8cae:	a906      	add	r1, sp, #24
    8cb0:	4803      	ldr	r0, [pc, #12]	; (8cc0 <UMotor::sendMotorPWM()+0x48>)
    8cb2:	f003 fc33 	bl	c51c <UUSB::send(char const*)>
}
    8cb6:	b02c      	add	sp, #176	; 0xb0
    8cb8:	bd10      	pop	{r4, pc}
    8cba:	bf00      	nop
    8cbc:	200053b8 	.word	0x200053b8
    8cc0:	2000eab8 	.word	0x2000eab8

00008cc4 <UMotor::sendData(int)>:
  if (item == 0)
    8cc4:	b121      	cbz	r1, 8cd0 <UMotor::sendData(int)+0xc>
  if (item == 1)
    8cc6:	2901      	cmp	r1, #1
    8cc8:	d000      	beq.n	8ccc <UMotor::sendData(int)+0x8>
}
    8cca:	4770      	bx	lr
    sendMotorPWM();
    8ccc:	f7ff bfd4 	b.w	8c78 <UMotor::sendMotorPWM()>
    sendMotorValues();
    8cd0:	f7ff bfa6 	b.w	8c20 <UMotor::sendMotorValues()>
    8cd4:	0000      	movs	r0, r0
	...

00008cd8 <UMotor::tick()>:
}

void UMotor::tick()
{ //
  tickCnt++;
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8cd8:	ed90 7a06 	vldr	s14, [r0, #24]
  tickCnt++;
    8cdc:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8cde:	eeb0 7ac7 	vabs.f32	s14, s14
  tickCnt++;
    8ce2:	3301      	adds	r3, #1
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8ce4:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8d98 <UMotor::tick()+0xc0>
    8ce8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{ //
    8cec:	b510      	push	{r4, lr}
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8cee:	eeb4 7bc6 	vcmpe.f64	d7, d6
{ //
    8cf2:	4604      	mov	r4, r0
  tickCnt++;
    8cf4:	6483      	str	r3, [r0, #72]	; 0x48
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cfa:	d80a      	bhi.n	8d12 <UMotor::tick()+0x3a>
      fabsf(motorVoltage[1]) <= 0.01 and
    8cfc:	ed90 7a07 	vldr	s14, [r0, #28]
    8d00:	eeb0 7ac7 	vabs.f32	s14, s14
    8d04:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8d08:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d10:	d90b      	bls.n	8d2a <UMotor::tick()+0x52>
      fabsf(encoder.motorVelocity[1]) < 0.1)
  { // saves a bit of current
    motorSetEnable(false, false);
  }
  else
    motorSetAnchorVoltage();
    8d12:	4620      	mov	r0, r4
    8d14:	f7ff fd8c 	bl	8830 <UMotor::motorSetAnchorVoltage()>
  // set flags for o-led display
  m1ok = motorEnable[0];
    8d18:	f894 2020 	ldrb.w	r2, [r4, #32]
  m2ok = motorEnable[1];
    8d1c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  m1ok = motorEnable[0];
    8d20:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  m2ok = motorEnable[1];
    8d24:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
    8d28:	bd10      	pop	{r4, pc}
      fabsf(encoder.motorVelocity[0]) < 0.1 and
    8d2a:	4b1f      	ldr	r3, [pc, #124]	; (8da8 <UMotor::tick()+0xd0>)
    8d2c:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    8d30:	eeb0 7ac7 	vabs.f32	s14, s14
      fabsf(motorVoltage[1]) <= 0.01 and
    8d34:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8da0 <UMotor::tick()+0xc8>
      fabsf(encoder.motorVelocity[0]) < 0.1 and
    8d38:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      fabsf(motorVoltage[1]) <= 0.01 and
    8d3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d44:	d5e5      	bpl.n	8d12 <UMotor::tick()+0x3a>
      fabsf(encoder.motorVelocity[1]) < 0.1)
    8d46:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
    8d4a:	eeb0 7ac7 	vabs.f32	s14, s14
    8d4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      fabsf(encoder.motorVelocity[0]) < 0.1 and
    8d52:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d5a:	d5da      	bpl.n	8d12 <UMotor::tick()+0x3a>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8d5c:	4a13      	ldr	r2, [pc, #76]	; (8dac <UMotor::tick()+0xd4>)
  motorEnable[0] = e1;
    8d5e:	2300      	movs	r3, #0
    8d60:	2020      	movs	r0, #32
    motorSleeping[0] = true;
    8d62:	2101      	movs	r1, #1
  motorEnable[0] = e1;
    8d64:	8423      	strh	r3, [r4, #32]
    8d66:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8d6a:	2010      	movs	r0, #16
    8d6c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8d70:	f44f 7080 	mov.w	r0, #256	; 0x100
    motorSleeping[0] = true;
    8d74:	8761      	strh	r1, [r4, #58]	; 0x3a
    8d76:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8d7a:	2040      	movs	r0, #64	; 0x40
    8d7c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8d80:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    8d84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    motorSleeping[1] = true;
    8d88:	87a1      	strh	r1, [r4, #60]	; 0x3c
    8d8a:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
}
    8d8e:	461a      	mov	r2, r3
    8d90:	e7c6      	b.n	8d20 <UMotor::tick()+0x48>
    8d92:	bf00      	nop
    8d94:	f3af 8000 	nop.w
    8d98:	47ae147b 	.word	0x47ae147b
    8d9c:	3f847ae1 	.word	0x3f847ae1
    8da0:	9999999a 	.word	0x9999999a
    8da4:	3fb99999 	.word	0x3fb99999
    8da8:	2000dc34 	.word	0x2000dc34
    8dac:	4200c000 	.word	0x4200c000

00008db0 <UMotor::eePromSave()>:

///////////////////////////////////////////////////////

void UMotor::eePromSave()
{
    8db0:	b510      	push	{r4, lr}
    8db2:	4604      	mov	r4, r0
  // save desired PWM FRQ
  uint16_t flags = 0;
  flags |= motorReversed << 0;
  eeConfig.pushWord(flags);
    8db4:	4808      	ldr	r0, [pc, #32]	; (8dd8 <UMotor::eePromSave()+0x28>)
    8db6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    8dba:	f7fa f94d 	bl	3058 <EEConfig::pushWord(unsigned short)>
  // save in kHz
  eeConfig.pushWord(PWMfrq/1000);
    8dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8dc0:	4a06      	ldr	r2, [pc, #24]	; (8ddc <UMotor::eePromSave()+0x2c>)
    8dc2:	17d9      	asrs	r1, r3, #31
    8dc4:	4804      	ldr	r0, [pc, #16]	; (8dd8 <UMotor::eePromSave()+0x28>)
    8dc6:	fb82 2303 	smull	r2, r3, r2, r3
    8dca:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
}
    8dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eeConfig.pushWord(PWMfrq/1000);
    8dd2:	b289      	uxth	r1, r1
    8dd4:	f7fa b940 	b.w	3058 <EEConfig::pushWord(unsigned short)>
    8dd8:	2000dbe8 	.word	0x2000dbe8
    8ddc:	10624dd3 	.word	0x10624dd3

00008de0 <UMotor::eePromLoad()>:

void UMotor::eePromLoad()
{
    8de0:	b538      	push	{r3, r4, r5, lr}
    8de2:	4c0f      	ldr	r4, [pc, #60]	; (8e20 <UMotor::eePromLoad()+0x40>)
  if (not eeConfig.isStringConfig())
    8de4:	f894 3020 	ldrb.w	r3, [r4, #32]
    8de8:	b11b      	cbz	r3, 8df2 <UMotor::eePromLoad()+0x12>
    configAddr+=bytes;
    8dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8dec:	3304      	adds	r3, #4
    8dee:	6263      	str	r3, [r4, #36]	; 0x24
  else
  { // skip robot specific items
    int skip = 2 + 2;
    eeConfig.skipAddr(skip);
  }
}
    8df0:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t flags = eeConfig.readWord();
    8df2:	4605      	mov	r5, r0
    8df4:	4620      	mov	r0, r4
    8df6:	f7fa f973 	bl	30e0 <EEConfig::readWord()>
    8dfa:	4603      	mov	r3, r0
    PWMfrq = eeConfig.readWord() * 1000;
    8dfc:	4620      	mov	r0, r4
    motorReversed = (flags & 0x01) > 0; 
    8dfe:	f003 0301 	and.w	r3, r3, #1
    8e02:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    PWMfrq = eeConfig.readWord() * 1000;
    8e06:	f7fa f96b 	bl	30e0 <EEConfig::readWord()>
    8e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8e0e:	4603      	mov	r3, r0
    setup();
    8e10:	4628      	mov	r0, r5
    PWMfrq = eeConfig.readWord() * 1000;
    8e12:	fb02 f303 	mul.w	r3, r2, r3
    8e16:	626b      	str	r3, [r5, #36]	; 0x24
}
    8e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setup();
    8e1c:	f7ff bb96 	b.w	854c <UMotor::setup()>
    8e20:	2000dbe8 	.word	0x2000dbe8
    8e24:	00000000 	.word	0x00000000

00008e28 <UMotor::setMotorVoltage(float, float)>:

void UMotor::setMotorVoltage(float left, float right)
{ // left
  if (left > maxMotorVoltage)
    8e28:	edd0 7a05 	vldr	s15, [r0, #20]
{ // left
    8e2c:	eeb0 7a60 	vmov.f32	s14, s1
  if (left > maxMotorVoltage)
    8e30:	eef4 7ac0 	vcmpe.f32	s15, s0
    8e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e38:	d42d      	bmi.n	8e96 <UMotor::setMotorVoltage(float, float)+0x6e>
    motorVoltage[0] = maxMotorVoltage;
  else if (left < -maxMotorVoltage)
    8e3a:	eef1 6a67 	vneg.f32	s13, s15
    8e3e:	eef4 6ac0 	vcmpe.f32	s13, s0
    8e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e46:	fe76 6a80 	vselgt.f32	s13, s13, s0
    motorVoltage[0] = -maxMotorVoltage;
  else
    motorVoltage[0] = left;
  // right
  if (right > maxMotorVoltage)
    8e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
    motorVoltage[0] = maxMotorVoltage;
    8e4e:	edc0 6a06 	vstr	s13, [r0, #24]
  if (right > maxMotorVoltage)
    8e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e56:	d407      	bmi.n	8e68 <UMotor::setMotorVoltage(float, float)+0x40>
    motorVoltage[1] = maxMotorVoltage;
  else if (right < -maxMotorVoltage)
    8e58:	eef1 7a67 	vneg.f32	s15, s15
    8e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
    8e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e64:	fe77 7a87 	vselgt.f32	s15, s15, s14
    motorVoltage[1] = -maxMotorVoltage;
  else
    motorVoltage[1] = right;
  // enable ?
  if (fabsf(left) > 0.01 and fabsf(right) > 0.01)
    8e68:	eeb0 0ac0 	vabs.f32	s0, s0
    motorVoltage[1] = maxMotorVoltage;
    8e6c:	edc0 7a07 	vstr	s15, [r0, #28]
  if (fabsf(left) > 0.01 and fabsf(right) > 0.01)
    8e70:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8ed8 <UMotor::setMotorVoltage(float, float)+0xb0>
    8e74:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    8e78:	eeb4 0bc6 	vcmpe.f64	d0, d6
    8e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e80:	dd08      	ble.n	8e94 <UMotor::setMotorVoltage(float, float)+0x6c>
    8e82:	eeb0 7ac7 	vabs.f32	s14, s14
    8e86:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8e8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e92:	dc03      	bgt.n	8e9c <UMotor::setMotorVoltage(float, float)+0x74>
    motorSetEnable(true, true);
}
    8e94:	4770      	bx	lr
    8e96:	eef0 6a67 	vmov.f32	s13, s15
    8e9a:	e7d6      	b.n	8e4a <UMotor::setMotorVoltage(float, float)+0x22>
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    8e9c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    8ea0:	b14b      	cbz	r3, 8eb6 <UMotor::setMotorVoltage(float, float)+0x8e>
    8ea2:	f890 3020 	ldrb.w	r3, [r0, #32]
    8ea6:	b95b      	cbnz	r3, 8ec0 <UMotor::setMotorVoltage(float, float)+0x98>
    8ea8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    8eac:	b933      	cbnz	r3, 8ebc <UMotor::setMotorVoltage(float, float)+0x94>
    motorPreEnabled = false;
    8eae:	f44f 7380 	mov.w	r3, #256	; 0x100
    8eb2:	8583      	strh	r3, [r0, #44]	; 0x2c
    8eb4:	e002      	b.n	8ebc <UMotor::setMotorVoltage(float, float)+0x94>
  if (e1 and not motorEnable[0])
    8eb6:	f890 3020 	ldrb.w	r3, [r0, #32]
    8eba:	b90b      	cbnz	r3, 8ec0 <UMotor::setMotorVoltage(float, float)+0x98>
    overloadCount = 0;
    8ebc:	2300      	movs	r3, #0
    8ebe:	6283      	str	r3, [r0, #40]	; 0x28
  motorEnable[0] = e1;
    8ec0:	f240 1101 	movw	r1, #257	; 0x101
				CORE_PIN32_PORTSET = CORE_PIN32_BITMASK;
    8ec4:	4b06      	ldr	r3, [pc, #24]	; (8ee0 <UMotor::setMotorVoltage(float, float)+0xb8>)
    8ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8eca:	8401      	strh	r1, [r0, #32]
    8ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    8ed0:	4770      	bx	lr
    8ed2:	bf00      	nop
    8ed4:	f3af 8000 	nop.w
    8ed8:	47ae147b 	.word	0x47ae147b
    8edc:	3f847ae1 	.word	0x3f847ae1
    8ee0:	42004000 	.word	0x42004000

00008ee4 <UMotor::stopAllMotors()>:


void UMotor::stopAllMotors()
{ // 
    8ee4:	b410      	push	{r4}
  motorVoltage[0] = 0;
    8ee6:	2100      	movs	r1, #0
  motorEnable[0] = e1;
    8ee8:	2400      	movs	r4, #0
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8eea:	4b0e      	ldr	r3, [pc, #56]	; (8f24 <UMotor::stopAllMotors()+0x40>)
    motorSleeping[0] = true;
    8eec:	2201      	movs	r2, #1
  motorVoltage[0] = 0;
    8eee:	6181      	str	r1, [r0, #24]
  motorVoltage[1] = 0;
    8ef0:	61c1      	str	r1, [r0, #28]
    8ef2:	2120      	movs	r1, #32
  motorEnable[0] = e1;
    8ef4:	8404      	strh	r4, [r0, #32]
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8ef6:	2410      	movs	r4, #16
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8ef8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8efc:	f44f 7180 	mov.w	r1, #256	; 0x100
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8f00:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8f04:	2440      	movs	r4, #64	; 0x40
    motorSleeping[0] = true;
    8f06:	8742      	strh	r2, [r0, #58]	; 0x3a
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8f08:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8f0c:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8f14:	4904      	ldr	r1, [pc, #16]	; (8f28 <UMotor::stopAllMotors()+0x44>)
    motorSleeping[1] = true;
    8f16:	8782      	strh	r2, [r0, #60]	; 0x3c
  motorSetEnable(false, false);
}
    8f18:	f85d 4b04 	ldr.w	r4, [sp], #4
    8f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop
    8f24:	4200c000 	.word	0x4200c000
    8f28:	42004000 	.word	0x42004000

00008f2c <_GLOBAL__sub_I_motor>:
    8f2c:	b510      	push	{r4, lr}
    8f2e:	4c0f      	ldr	r4, [pc, #60]	; (8f6c <_GLOBAL__sub_I_motor+0x40>)
    8f30:	4620      	mov	r0, r4
    8f32:	f003 f901 	bl	c138 <USubss::USubss()>
    8f36:	4a0e      	ldr	r2, [pc, #56]	; (8f70 <_GLOBAL__sub_I_motor+0x44>)
    8f38:	480e      	ldr	r0, [pc, #56]	; (8f74 <_GLOBAL__sub_I_motor+0x48>)
    8f3a:	2300      	movs	r3, #0
    8f3c:	490e      	ldr	r1, [pc, #56]	; (8f78 <_GLOBAL__sub_I_motor+0x4c>)
    8f3e:	6020      	str	r0, [r4, #0]
    8f40:	f04f 408b 	mov.w	r0, #1166016512	; 0x45800000
    8f44:	6162      	str	r2, [r4, #20]
    8f46:	f240 1201 	movw	r2, #257	; 0x101
    8f4a:	6261      	str	r1, [r4, #36]	; 0x24
    8f4c:	85e2      	strh	r2, [r4, #46]	; 0x2e
    8f4e:	6520      	str	r0, [r4, #80]	; 0x50
UMotor motor;
    8f50:	4620      	mov	r0, r4
    8f52:	8423      	strh	r3, [r4, #32]
    8f54:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    8f58:	6563      	str	r3, [r4, #84]	; 0x54
    8f5a:	65a3      	str	r3, [r4, #88]	; 0x58
    8f5c:	4a07      	ldr	r2, [pc, #28]	; (8f7c <_GLOBAL__sub_I_motor+0x50>)
    8f5e:	4908      	ldr	r1, [pc, #32]	; (8f80 <_GLOBAL__sub_I_motor+0x54>)
    8f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
}
    8f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UMotor motor;
    8f68:	f00f bfc6 	b.w	18ef8 <__aeabi_atexit>
    8f6c:	2000e4bc 	.word	0x2000e4bc
    8f70:	41200000 	.word	0x41200000
    8f74:	20007fd4 	.word	0x20007fd4
    8f78:	000109a0 	.word	0x000109a0
    8f7c:	20008f08 	.word	0x20008f08
    8f80:	00008531 	.word	0x00008531

00008f84 <UMotorTest::sendHelp()>:
{
    8f84:	b510      	push	{r4, lr}
  usb.send("# Motor test -------\r\n");
    8f86:	4c0d      	ldr	r4, [pc, #52]	; (8fbc <UMotorTest::sendHelp()+0x38>)
{
    8f88:	b0cc      	sub	sp, #304	; 0x130
  usb.send("# Motor test -------\r\n");
    8f8a:	490d      	ldr	r1, [pc, #52]	; (8fc0 <UMotorTest::sendHelp()+0x3c>)
    8f8c:	4620      	mov	r0, r4
    8f8e:	f003 fac5 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmottest C M\tStart motor test C=0:CV, C=1:CCV, C=-1:stop; M is motor (0..3)\r\n");
    8f92:	2253      	movs	r2, #83	; 0x53
    8f94:	490b      	ldr	r1, [pc, #44]	; (8fc4 <UMotorTest::sendHelp()+0x40>)
    8f96:	a801      	add	r0, sp, #4
    8f98:	f00d faf4 	bl	16584 <memcpy>
  usb.send(reply);
    8f9c:	a901      	add	r1, sp, #4
    8f9e:	4620      	mov	r0, r4
    8fa0:	f003 fabc 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotset Vlow Vhigh\tMotortest voltage Vlow 3-6 Volt, Vhigh > VLow, samples per state (ms).\r\n");
    8fa4:	2261      	movs	r2, #97	; 0x61
    8fa6:	4908      	ldr	r1, [pc, #32]	; (8fc8 <UMotorTest::sendHelp()+0x44>)
    8fa8:	a801      	add	r0, sp, #4
    8faa:	f00d faeb 	bl	16584 <memcpy>
  usb.send(reply);
    8fae:	a901      	add	r1, sp, #4
    8fb0:	4620      	mov	r0, r4
    8fb2:	f003 fab3 	bl	c51c <UUSB::send(char const*)>
}
    8fb6:	b04c      	add	sp, #304	; 0x130
    8fb8:	bd10      	pop	{r4, pc}
    8fba:	bf00      	nop
    8fbc:	2000eab8 	.word	0x2000eab8
    8fc0:	20003164 	.word	0x20003164
    8fc4:	2000317c 	.word	0x2000317c
    8fc8:	200031d0 	.word	0x200031d0
    8fcc:	00000000 	.word	0x00000000

00008fd0 <UMotorTest::decode(char const*)>:
{
    8fd0:	b530      	push	{r4, r5, lr}
    8fd2:	460c      	mov	r4, r1
    8fd4:	b085      	sub	sp, #20
    8fd6:	4605      	mov	r5, r0
  if (strncmp(buf, "motset ", 7) == 0)
    8fd8:	2207      	movs	r2, #7
    8fda:	494d      	ldr	r1, [pc, #308]	; (9110 <UMotorTest::decode(char const*)+0x140>)
    8fdc:	4620      	mov	r0, r4
    8fde:	f012 fe11 	bl	1bc04 <strncmp>
    8fe2:	2800      	cmp	r0, #0
    8fe4:	d040      	beq.n	9068 <UMotorTest::decode(char const*)+0x98>
  else if (strncmp(buf, "mottest", 7) == 0)
    8fe6:	2207      	movs	r2, #7
    8fe8:	494a      	ldr	r1, [pc, #296]	; (9114 <UMotorTest::decode(char const*)+0x144>)
    8fea:	4620      	mov	r0, r4
    8fec:	f012 fe0a 	bl	1bc04 <strncmp>
    8ff0:	b110      	cbz	r0, 8ff8 <UMotorTest::decode(char const*)+0x28>
    used = false;
    8ff2:	2000      	movs	r0, #0
}
    8ff4:	b005      	add	sp, #20
    8ff6:	bd30      	pop	{r4, r5, pc}
    if (voltageLow < 0.5)
    8ff8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8ffc:	ed95 7a19 	vldr	s14, [r5, #100]	; 0x64
    9000:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9008:	d501      	bpl.n	900e <UMotorTest::decode(char const*)+0x3e>
      voltageLow = 3;
    900a:	4b43      	ldr	r3, [pc, #268]	; (9118 <UMotorTest::decode(char const*)+0x148>)
    900c:	666b      	str	r3, [r5, #100]	; 0x64
    if (voltageHigh < 0.6)
    900e:	ed95 7a1a 	vldr	s14, [r5, #104]	; 0x68
    9012:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 9108 <UMotorTest::decode(char const*)+0x138>
    9016:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    901a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    901e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9022:	d459      	bmi.n	90d8 <UMotorTest::decode(char const*)+0x108>
    switch (strtol(p1, (char**)&p1, 10))
    9024:	a903      	add	r1, sp, #12
    const char * p1 = &buf[7];
    9026:	1de0      	adds	r0, r4, #7
    switch (strtol(p1, (char**)&p1, 10))
    9028:	220a      	movs	r2, #10
    902a:	9101      	str	r1, [sp, #4]
    const char * p1 = &buf[7];
    902c:	9003      	str	r0, [sp, #12]
    switch (strtol(p1, (char**)&p1, 10))
    902e:	f012 f941 	bl	1b2b4 <strtol>
    9032:	9901      	ldr	r1, [sp, #4]
    9034:	2800      	cmp	r0, #0
    9036:	d05e      	beq.n	90f6 <UMotorTest::decode(char const*)+0x126>
    9038:	2801      	cmp	r0, #1
    903a:	d150      	bne.n	90de <UMotorTest::decode(char const*)+0x10e>
        voltageCCV = -1;
    903c:	4b37      	ldr	r3, [pc, #220]	; (911c <UMotorTest::decode(char const*)+0x14c>)
        mLogIndex = 0;
    903e:	2200      	movs	r2, #0
        motorTestRunning = true;
    9040:	7528      	strb	r0, [r5, #20]
        mLogIndex = 0;
    9042:	61aa      	str	r2, [r5, #24]
        voltageCCV = -1;
    9044:	66eb      	str	r3, [r5, #108]	; 0x6c
    testMotor = strtol(p1, (char**)&p1, 10);
    9046:	220a      	movs	r2, #10
    9048:	9803      	ldr	r0, [sp, #12]
    904a:	f012 f933 	bl	1b2b4 <strtol>
    if (testMotor < 0)
    904e:	2800      	cmp	r0, #0
    9050:	db4e      	blt.n	90f0 <UMotorTest::decode(char const*)+0x120>
    else if (testMotor > motor.MOTOR_CNT - 1)
    9052:	2801      	cmp	r0, #1
    9054:	dd56      	ble.n	9104 <UMotorTest::decode(char const*)+0x134>
      testMotor = motor.MOTOR_CNT - 1;
    9056:	2301      	movs	r3, #1
    9058:	62ab      	str	r3, [r5, #40]	; 0x28
    usb.send("# ----- starting motor test (in 1 second) ------\n");
    905a:	4931      	ldr	r1, [pc, #196]	; (9120 <UMotorTest::decode(char const*)+0x150>)
    905c:	4831      	ldr	r0, [pc, #196]	; (9124 <UMotorTest::decode(char const*)+0x154>)
    905e:	f003 fa5d 	bl	c51c <UUSB::send(char const*)>
  bool used = true;
    9062:	2001      	movs	r0, #1
}
    9064:	b005      	add	sp, #20
    9066:	bd30      	pop	{r4, r5, pc}
    const char * p1 = &buf[7];
    9068:	1de0      	adds	r0, r4, #7
    voltageLow = strtof(p1, (char**)&p1);
    906a:	a903      	add	r1, sp, #12
    const char * p1 = &buf[7];
    906c:	9003      	str	r0, [sp, #12]
    voltageLow = strtof(p1, (char**)&p1);
    906e:	9101      	str	r1, [sp, #4]
    9070:	f012 f81c 	bl	1b0ac <strtof>
    voltageHigh = strtof(p1, (char**)&p1);
    9074:	9901      	ldr	r1, [sp, #4]
    9076:	9803      	ldr	r0, [sp, #12]
    voltageLow = strtof(p1, (char**)&p1);
    9078:	ed85 0a19 	vstr	s0, [r5, #100]	; 0x64
    voltageHigh = strtof(p1, (char**)&p1);
    907c:	f012 f816 	bl	1b0ac <strtof>
    if (voltageLow < 0.5)
    9080:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    9084:	ed95 7a19 	vldr	s14, [r5, #100]	; 0x64
    9088:	9901      	ldr	r1, [sp, #4]
    908a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    908e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9092:	d501      	bpl.n	9098 <UMotorTest::decode(char const*)+0xc8>
      voltageLow = 3;
    9094:	4b20      	ldr	r3, [pc, #128]	; (9118 <UMotorTest::decode(char const*)+0x148>)
    9096:	666b      	str	r3, [r5, #100]	; 0x64
    if (voltageHigh < 0.6)
    9098:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    int state_ms = strtol(p1, (char**)&p1, 10);
    909c:	220a      	movs	r2, #10
      voltageHigh = 6;
    909e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    int state_ms = strtol(p1, (char**)&p1, 10);
    90a2:	9803      	ldr	r0, [sp, #12]
    if (voltageHigh < 0.6)
    90a4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 9108 <UMotorTest::decode(char const*)+0x138>
      voltageHigh = 6;
    90a8:	eeb4 5b46 	vcmp.f64	d5, d6
    90ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90b0:	bf48      	it	mi
    90b2:	eeb0 0a67 	vmovmi.f32	s0, s15
    90b6:	ed85 0a1a 	vstr	s0, [r5, #104]	; 0x68
    int state_ms = strtol(p1, (char**)&p1, 10);
    90ba:	f012 f8fb 	bl	1b2b4 <strtol>
    90be:	4603      	mov	r3, r0
    if (state_ms * 7 > max)
    90c0:	f640 625b 	movw	r2, #3675	; 0xe5b
  bool used = true;
    90c4:	2001      	movs	r0, #1
    if (state_ms * 7 > max)
    90c6:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
      state_ms = max/7 -1;
    90ca:	4291      	cmp	r1, r2
    90cc:	bfc8      	it	gt
    90ce:	f44f 7303 	movgt.w	r3, #524	; 0x20c
    stateLength = state_ms;
    90d2:	65eb      	str	r3, [r5, #92]	; 0x5c
}
    90d4:	b005      	add	sp, #20
    90d6:	bd30      	pop	{r4, r5, pc}
      voltageHigh = 6;
    90d8:	4b13      	ldr	r3, [pc, #76]	; (9128 <UMotorTest::decode(char const*)+0x158>)
    90da:	66ab      	str	r3, [r5, #104]	; 0x68
    90dc:	e7a2      	b.n	9024 <UMotorTest::decode(char const*)+0x54>
        motorTestEnd = true;
    90de:	2301      	movs	r3, #1
    testMotor = strtol(p1, (char**)&p1, 10);
    90e0:	220a      	movs	r2, #10
    90e2:	9803      	ldr	r0, [sp, #12]
        motorTestEnd = true;
    90e4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    testMotor = strtol(p1, (char**)&p1, 10);
    90e8:	f012 f8e4 	bl	1b2b4 <strtol>
    if (testMotor < 0)
    90ec:	2800      	cmp	r0, #0
    90ee:	dab0      	bge.n	9052 <UMotorTest::decode(char const*)+0x82>
      testMotor = 0;
    90f0:	2300      	movs	r3, #0
    90f2:	62ab      	str	r3, [r5, #40]	; 0x28
    90f4:	e7b1      	b.n	905a <UMotorTest::decode(char const*)+0x8a>
        voltageCCV = 1;
    90f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        motorTestRunning = true;
    90fa:	2201      	movs	r2, #1
        mLogIndex = 0;
    90fc:	61a8      	str	r0, [r5, #24]
        motorTestRunning = true;
    90fe:	752a      	strb	r2, [r5, #20]
        voltageCCV = 1;
    9100:	66eb      	str	r3, [r5, #108]	; 0x6c
        break;
    9102:	e7a0      	b.n	9046 <UMotorTest::decode(char const*)+0x76>
    testMotor = strtol(p1, (char**)&p1, 10);
    9104:	62a8      	str	r0, [r5, #40]	; 0x28
    9106:	e7a8      	b.n	905a <UMotorTest::decode(char const*)+0x8a>
    9108:	33333333 	.word	0x33333333
    910c:	3fe33333 	.word	0x3fe33333
    9110:	2000310c 	.word	0x2000310c
    9114:	20003114 	.word	0x20003114
    9118:	40400000 	.word	0x40400000
    911c:	bf800000 	.word	0xbf800000
    9120:	2000311c 	.word	0x2000311c
    9124:	2000eab8 	.word	0x2000eab8
    9128:	40c00000 	.word	0x40c00000

0000912c <UMotorTest::~UMotorTest()>:


///////////////////////////////////////////////////////////////////


class UMotorTest : public USubss
    912c:	b510      	push	{r4, lr}
    912e:	4b05      	ldr	r3, [pc, #20]	; (9144 <UMotorTest::~UMotorTest()+0x18>)
    9130:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    9132:	6840      	ldr	r0, [r0, #4]
    9134:	6023      	str	r3, [r4, #0]
	if (__p)
    9136:	b118      	cbz	r0, 9140 <UMotorTest::~UMotorTest()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9138:	68e1      	ldr	r1, [r4, #12]
    913a:	1a09      	subs	r1, r1, r0
    913c:	f00d fabe 	bl	166bc <operator delete(void*, unsigned int)>
    9140:	4620      	mov	r0, r4
    9142:	bd10      	pop	{r4, pc}
    9144:	2000802c 	.word	0x2000802c

00009148 <UMotorTest::sendMotorParameters()>:
{
    9148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    914c:	2600      	movs	r6, #0
{
    914e:	b0b7      	sub	sp, #220	; 0xdc
    snprintf(s, MSL, "motest %d %f %g %g %g %g %g %g %d\r\n",
    9150:	f8df 908c 	ldr.w	r9, [pc, #140]	; 91e0 <UMotorTest::sendMotorParameters()+0x98>
{
    9154:	4605      	mov	r5, r0
    usb.send(s);
    9156:	f8df 808c 	ldr.w	r8, [pc, #140]	; 91e4 <UMotorTest::sendMotorParameters()+0x9c>
    915a:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
    915e:	f100 0740 	add.w	r7, r0, #64	; 0x40
    snprintf(s, MSL, "motest %d %f %g %g %g %g %g %g %d\r\n",
    9162:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    9166:	4623      	mov	r3, r4
    9168:	3404      	adds	r4, #4
    916a:	ed95 6a1b 	vldr	s12, [r5, #108]	; 0x6c
    916e:	910e      	str	r1, [sp, #56]	; 0x38
    9170:	464a      	mov	r2, r9
    9172:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
    9176:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    917a:	ed93 4a00 	vldr	s8, [r3]
    917e:	2196      	movs	r1, #150	; 0x96
    9180:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9184:	ed93 5a08 	vldr	s10, [r3, #32]
    9188:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    918c:	4633      	mov	r3, r6
    918e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9192:	a810      	add	r0, sp, #64	; 0x40
    9194:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    9198:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    919c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    91a0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    91a4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    91a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    91ac:	ed8d 7b08 	vstr	d7, [sp, #32]
    91b0:	ed94 7a03 	vldr	s14, [r4, #12]
    91b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    91b8:	ed8d 4b04 	vstr	d4, [sp, #16]
    91bc:	ed8d 5b02 	vstr	d5, [sp, #8]
    91c0:	ed8d 6b00 	vstr	d6, [sp]
    91c4:	ed8d 7b06 	vstr	d7, [sp, #24]
    91c8:	f012 fa64 	bl	1b694 <snprintf>
    usb.send(s);
    91cc:	a910      	add	r1, sp, #64	; 0x40
    91ce:	4640      	mov	r0, r8
    91d0:	f003 f9a4 	bl	c51c <UUSB::send(char const*)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    91d4:	b116      	cbz	r6, 91dc <UMotorTest::sendMotorParameters()+0x94>
}
    91d6:	b037      	add	sp, #220	; 0xdc
    91d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    91dc:	2601      	movs	r6, #1
    91de:	e7c0      	b.n	9162 <UMotorTest::sendMotorParameters()+0x1a>
    91e0:	20002fd8 	.word	0x20002fd8
    91e4:	2000eab8 	.word	0x2000eab8

000091e8 <UMotorTest::sendData(int)>:
  if (item == 0)
    91e8:	b111      	cbz	r1, 91f0 <UMotorTest::sendData(int)+0x8>
  else if (item == 1)
    91ea:	2901      	cmp	r1, #1
    91ec:	d002      	beq.n	91f4 <UMotorTest::sendData(int)+0xc>
    91ee:	4770      	bx	lr
    sendMotorParameters();
    91f0:	f7ff bfaa 	b.w	9148 <UMotorTest::sendMotorParameters()>
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    91f4:	ed90 7a1b 	vldr	s14, [r0, #108]	; 0x6c
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    91f8:	2196      	movs	r1, #150	; 0x96
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    91fa:	edd0 7a19 	vldr	s15, [r0, #100]	; 0x64
    91fe:	ed90 6a1a 	vldr	s12, [r0, #104]	; 0x68
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    9202:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    9204:	ee27 6a06 	vmul.f32	s12, s14, s12
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    9208:	4a0b      	ldr	r2, [pc, #44]	; (9238 <UMotorTest::sendData(int)+0x50>)
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    920a:	ee27 7a27 	vmul.f32	s14, s14, s15
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    920e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9212:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    9216:	b500      	push	{lr}
    9218:	b0ad      	sub	sp, #180	; 0xb4
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    921a:	9304      	str	r3, [sp, #16]
    921c:	a806      	add	r0, sp, #24
    921e:	ed8d 6b02 	vstr	d6, [sp, #8]
    9222:	ed8d 7b00 	vstr	d7, [sp]
    9226:	f012 fa35 	bl	1b694 <snprintf>
  usb.send(s);
    922a:	a906      	add	r1, sp, #24
    922c:	4803      	ldr	r0, [pc, #12]	; (923c <UMotorTest::sendData(int)+0x54>)
    922e:	f003 f975 	bl	c51c <UUSB::send(char const*)>
}
    9232:	b02d      	add	sp, #180	; 0xb4
    9234:	f85d fb04 	ldr.w	pc, [sp], #4
    9238:	20003150 	.word	0x20003150
    923c:	2000eab8 	.word	0x2000eab8

00009240 <UMotorTest::eePromSave()>:
{
    9240:	b570      	push	{r4, r5, r6, lr}
    9242:	4605      	mov	r5, r0
  eeConfig.pushWord(flags);
    9244:	481d      	ldr	r0, [pc, #116]	; (92bc <UMotorTest::eePromSave()+0x7c>)
    flags |= testValid[i] << i;
    9246:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
    push32(u.u32);
    924a:	4606      	mov	r6, r0
  flags |= encoderReversed << 4;
    924c:	7f2a      	ldrb	r2, [r5, #28]
    924e:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
    flags |= testValid[i] << i;
    9252:	005b      	lsls	r3, r3, #1
  flags |= encoderReversed << 4;
    9254:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
    9258:	35d0      	adds	r5, #208	; 0xd0
    925a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  eeConfig.pushWord(flags);
    925e:	4319      	orrs	r1, r3
    9260:	f7f9 fefa 	bl	3058 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(stateLength);
    9264:	f835 1c74 	ldrh.w	r1, [r5, #-116]
    9268:	4630      	mov	r0, r6
    926a:	f7f9 fef5 	bl	3058 <EEConfig::pushWord(unsigned short)>
    926e:	f855 1c6c 	ldr.w	r1, [r5, #-108]
    9272:	4630      	mov	r0, r6
    9274:	f7f9 feb8 	bl	2fe8 <EEConfig::push32(unsigned long)>
    9278:	f855 1c68 	ldr.w	r1, [r5, #-104]
    927c:	4630      	mov	r0, r6
    927e:	f7f9 feb3 	bl	2fe8 <EEConfig::push32(unsigned long)>
    eeConfig.pushFloat(mResistance[i]);
    9282:	f854 1b04 	ldr.w	r1, [r4], #4
    9286:	4630      	mov	r0, r6
    9288:	f7f9 feae 	bl	2fe8 <EEConfig::push32(unsigned long)>
    928c:	4630      	mov	r0, r6
    928e:	68e1      	ldr	r1, [r4, #12]
    9290:	f7f9 feaa 	bl	2fe8 <EEConfig::push32(unsigned long)>
    9294:	69e1      	ldr	r1, [r4, #28]
    9296:	4630      	mov	r0, r6
    9298:	f7f9 fea6 	bl	2fe8 <EEConfig::push32(unsigned long)>
    929c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    929e:	4630      	mov	r0, r6
    92a0:	f7f9 fea2 	bl	2fe8 <EEConfig::push32(unsigned long)>
    92a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    92a6:	4630      	mov	r0, r6
    92a8:	f7f9 fe9e 	bl	2fe8 <EEConfig::push32(unsigned long)>
    92ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    92ae:	4630      	mov	r0, r6
    92b0:	f7f9 fe9a 	bl	2fe8 <EEConfig::push32(unsigned long)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    92b4:	42a5      	cmp	r5, r4
    92b6:	d1e4      	bne.n	9282 <UMotorTest::eePromSave()+0x42>
}
    92b8:	bd70      	pop	{r4, r5, r6, pc}
    92ba:	bf00      	nop
    92bc:	2000dbe8 	.word	0x2000dbe8

000092c0 <UMotorTest::eePromLoad()>:
{
    92c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return stringConfig;
    92c2:	4d47      	ldr	r5, [pc, #284]	; (93e0 <UMotorTest::eePromLoad()+0x120>)
  if (not eeConfig.isStringConfig())
    92c4:	f895 3020 	ldrb.w	r3, [r5, #32]
    92c8:	b11b      	cbz	r3, 92d2 <UMotorTest::eePromLoad()+0x12>
    configAddr+=bytes;
    92ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    92cc:	336c      	adds	r3, #108	; 0x6c
    92ce:	626b      	str	r3, [r5, #36]	; 0x24
}
    92d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t flags = eeConfig.readWord();
    92d2:	4604      	mov	r4, r0
    92d4:	4628      	mov	r0, r5
    92d6:	f7f9 ff03 	bl	30e0 <EEConfig::readWord()>
    92da:	4603      	mov	r3, r0
    stateLength = eeConfig.readWord();
    92dc:	4628      	mov	r0, r5
    testValid[0] = (flags & 0x01) > 0;
    92de:	f003 0201 	and.w	r2, r3, #1
    92e2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    testValid[1] = (flags & 0x02) > 0;
    92e6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    encoderReversed = (flags & 0x10) > 0;
    92ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
    testValid[1] = (flags & 0x02) > 0;
    92ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    encoderReversed = (flags & 0x10) > 0;
    92f2:	7723      	strb	r3, [r4, #28]
    stateLength = eeConfig.readWord();
    92f4:	f7f9 fef4 	bl	30e0 <EEConfig::readWord()>
    92f8:	4603      	mov	r3, r0
    u.u32 = read32();
    92fa:	4628      	mov	r0, r5
    92fc:	65e3      	str	r3, [r4, #92]	; 0x5c
    92fe:	f7f9 fec7 	bl	3090 <EEConfig::read32()>
    9302:	4603      	mov	r3, r0
    9304:	4628      	mov	r0, r5
    voltageLow = eeConfig.readFloat();
    9306:	6663      	str	r3, [r4, #100]	; 0x64
    9308:	f7f9 fec2 	bl	3090 <EEConfig::read32()>
    if (stateLength < 300 or stateLength > 2000)
    930c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    930e:	f240 62a4 	movw	r2, #1700	; 0x6a4
    return u.f;  
    9312:	ee07 0a90 	vmov	s15, r0
    9316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    voltageHigh = eeConfig.readFloat();
    931a:	66a0      	str	r0, [r4, #104]	; 0x68
    if (stateLength < 300 or stateLength > 2000)
    931c:	4293      	cmp	r3, r2
    931e:	d902      	bls.n	9326 <UMotorTest::eePromLoad()+0x66>
      stateLength = 1000;
    9320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9324:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (voltageLow < 0.5 or isnanf(voltageLow))
    9326:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    932a:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
    932e:	eeb4 7ae6 	vcmpe.f32	s14, s13
    9332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9336:	d534      	bpl.n	93a2 <UMotorTest::eePromLoad()+0xe2>
      voltageLow = 3;
    9338:	4b2a      	ldr	r3, [pc, #168]	; (93e4 <UMotorTest::eePromLoad()+0x124>)
    933a:	6663      	str	r3, [r4, #100]	; 0x64
    if (voltageHigh < 0.6 or isnanf(voltageHigh))
    933c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    9340:	ed9f 5b25 	vldr	d5, [pc, #148]	; 93d8 <UMotorTest::eePromLoad()+0x118>
    9344:	eeb4 6bc5 	vcmpe.f64	d6, d5
    9348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    934c:	d42f      	bmi.n	93ae <UMotorTest::eePromLoad()+0xee>
    934e:	eef4 7a67 	vcmp.f32	s15, s15
    9352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9356:	d62a      	bvs.n	93ae <UMotorTest::eePromLoad()+0xee>
    9358:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    935c:	f104 07d0 	add.w	r7, r4, #208	; 0xd0
    u.u32 = read32();
    9360:	4e1f      	ldr	r6, [pc, #124]	; (93e0 <UMotorTest::eePromLoad()+0x120>)
    9362:	4630      	mov	r0, r6
    9364:	f7f9 fe94 	bl	3090 <EEConfig::read32()>
      mResistance[i] = eeConfig.readFloat();
    9368:	f845 0b04 	str.w	r0, [r5], #4
    936c:	4630      	mov	r0, r6
    936e:	f7f9 fe8f 	bl	3090 <EEConfig::read32()>
      mInductance[i] = eeConfig.readFloat();
    9372:	60e8      	str	r0, [r5, #12]
    9374:	4630      	mov	r0, r6
    9376:	f7f9 fe8b 	bl	3090 <EEConfig::read32()>
      mKonstant[i] = eeConfig.readFloat();
    937a:	61e8      	str	r0, [r5, #28]
    937c:	4630      	mov	r0, r6
    937e:	f7f9 fe87 	bl	3090 <EEConfig::read32()>
      mFricDyn[i] = eeConfig.readFloat();
    9382:	62e8      	str	r0, [r5, #44]	; 0x2c
    9384:	4630      	mov	r0, r6
    9386:	f7f9 fe83 	bl	3090 <EEConfig::read32()>
      mFricStat[i] = eeConfig.readFloat();
    938a:	63e8      	str	r0, [r5, #60]	; 0x3c
    938c:	4630      	mov	r0, r6
    938e:	f7f9 fe7f 	bl	3090 <EEConfig::read32()>
    for (int i = 0; i < motor.MOTOR_CNT; i++)
    9392:	42bd      	cmp	r5, r7
      mInertia[i] = eeConfig.readFloat();
    9394:	64e8      	str	r0, [r5, #76]	; 0x4c
    for (int i = 0; i < motor.MOTOR_CNT; i++)
    9396:	d1e4      	bne.n	9362 <UMotorTest::eePromLoad()+0xa2>
  if (setupCnt == 0)
    9398:	6a63      	ldr	r3, [r4, #36]	; 0x24
    939a:	b15b      	cbz	r3, 93b4 <UMotorTest::eePromLoad()+0xf4>
  setupCnt++;
    939c:	3301      	adds	r3, #1
    939e:	6263      	str	r3, [r4, #36]	; 0x24
}
    93a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (voltageLow < 0.5 or isnanf(voltageLow))
    93a2:	eeb4 7a47 	vcmp.f32	s14, s14
    93a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93aa:	d7c7      	bvc.n	933c <UMotorTest::eePromLoad()+0x7c>
    93ac:	e7c4      	b.n	9338 <UMotorTest::eePromLoad()+0x78>
      voltageHigh = 6;
    93ae:	4b0e      	ldr	r3, [pc, #56]	; (93e8 <UMotorTest::eePromLoad()+0x128>)
    93b0:	66a3      	str	r3, [r4, #104]	; 0x68
    93b2:	e7d1      	b.n	9358 <UMotorTest::eePromLoad()+0x98>
    addPublistItem("motest", "Get estimated parameters 'motest mot[0,1] cv=0/ccv=1 Km R L B S I");
    93b4:	4a0d      	ldr	r2, [pc, #52]	; (93ec <UMotorTest::eePromLoad()+0x12c>)
    93b6:	4620      	mov	r0, r4
    93b8:	490d      	ldr	r1, [pc, #52]	; (93f0 <UMotorTest::eePromLoad()+0x130>)
    93ba:	f002 ffe1 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
    addPublistItem("motpar", "Get test parameters 'motpars lowVolt highVolt state-time'");
    93be:	4a0d      	ldr	r2, [pc, #52]	; (93f4 <UMotorTest::eePromLoad()+0x134>)
    93c0:	4620      	mov	r0, r4
    93c2:	490d      	ldr	r1, [pc, #52]	; (93f8 <UMotorTest::eePromLoad()+0x138>)
    93c4:	f002 ffdc 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
    usb.addSubscriptionService(this);
    93c8:	4621      	mov	r1, r4
    93ca:	480c      	ldr	r0, [pc, #48]	; (93fc <UMotorTest::eePromLoad()+0x13c>)
    93cc:	f003 fcd2 	bl	cd74 <UUSB::addSubscriptionService(USubss*)>
  setupCnt++;
    93d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    93d2:	e7e3      	b.n	939c <UMotorTest::eePromLoad()+0xdc>
    93d4:	f3af 8000 	nop.w
    93d8:	33333333 	.word	0x33333333
    93dc:	3fe33333 	.word	0x3fe33333
    93e0:	2000dbe8 	.word	0x2000dbe8
    93e4:	40400000 	.word	0x40400000
    93e8:	40c00000 	.word	0x40c00000
    93ec:	2000307c 	.word	0x2000307c
    93f0:	200030c0 	.word	0x200030c0
    93f4:	200030c8 	.word	0x200030c8
    93f8:	20003104 	.word	0x20003104
    93fc:	2000eab8 	.word	0x2000eab8

00009400 <UMotorTest::testCurrent(float, float, float, float&)>:
           testMotor, mInertia[testMotor]);
  usb.send(s);
}

float UMotorTest::testCurrent(float mK, float mR, float mInduc, float & kerr)
{
    9400:	b430      	push	{r4, r5}
  char s[MSL];
//   snprintf(s, MSL, "# testCurrent: - has %d samples (%d bytes) mK=%g, mR=%g, mL=%g\n",
//            mLogIndex, mLogIndex * sizeof(UMotorTestMeasurementData),
//            mK, mR, mInduc);
//   usb.send(s);
  for (int j = 1; j < mLogIndex; j++)
    9402:	6985      	ldr	r5, [r0, #24]
  UMotorTestMeasurementData * dd = mLog;
    9404:	6c83      	ldr	r3, [r0, #72]	; 0x48
  for (int j = 1; j < mLogIndex; j++)
    9406:	2d01      	cmp	r5, #1
  int32_t t0 = dd[0].mTime10us;
    9408:	681a      	ldr	r2, [r3, #0]
  float dv = dd[0].mVoltage;
    940a:	ed93 4a01 	vldr	s8, [r3, #4]
{
    940e:	ed2d 8b0c 	vpush	{d8-d13}
  for (int j = 1; j < mLogIndex; j++)
    9412:	f340 80c1 	ble.w	9598 <UMotorTest::testCurrent(float, float, float, float&)+0x198>
  {
    //dd[j].clearEsimate(); // remove all previous estimates
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    9416:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 95c8 <UMotorTest::testCurrent(float, float, float, float&)+0x1c8>
    if (dt > 0 and fabsf(dd->mVoltage) > 0.5)
    { // next sample will have a motor voltage.
      // using odometry estimated velocity (a bit filtered)
      float vel0 = fabsf(dd->velocity);
      Vm = fabsf(dd[-1].mVoltage); // actual motor voltage (from previous sample)
      Vdif = Vm - vel0 * Km; // anker coil voltage
    941a:	eeb1 3a40 	vneg.f32	s6, s0
  float w = 0.1;
    941e:	eddf 6a6b 	vldr	s13, [pc, #428]	; 95cc <UMotorTest::testCurrent(float, float, float, float&)+0x1cc>
    if (dt > 0 and fabsf(dd->mVoltage) > 0.5)
    9422:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
  float kerrSum = 0;
    9426:	eeb0 aa47 	vmov.f32	s20, s14
  for (int j = 1; j < mLogIndex; j++)
    942a:	2001      	movs	r0, #1
  float Vdif = 0;
    942c:	eef0 5a47 	vmov.f32	s11, s14
  int kCnt = 0;
    9430:	f04f 0c00 	mov.w	ip, #0
  float iL = 0;
    9434:	eeb0 6a47 	vmov.f32	s12, s14
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    9438:	ed9f 5a65 	vldr	s10, [pc, #404]	; 95d0 <UMotorTest::testCurrent(float, float, float, float&)+0x1d0>
  float diffSum = 0.0;
    943c:	eeb0 0a47 	vmov.f32	s0, s14
        dv = Vm;
        w += dwi;
        if (w > 1.0)
        {
          w = 1.0;
          dwi = -0.005;
    9440:	ed9f ba64 	vldr	s22, [pc, #400]	; 95d4 <UMotorTest::testCurrent(float, float, float, float&)+0x1d4>
  float wsum = 0.0;
    9444:	eef0 1a47 	vmov.f32	s3, s14
  float dwi = 0.0;
    9448:	eef0 aa47 	vmov.f32	s21, s14
          dwi = 0.1;
    944c:	eef0 ba66 	vmov.f32	s23, s13
        }
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
        {
          w = 0.03;
          dwi = 0.0;
    9450:	eeb0 ca47 	vmov.f32	s24, s14
        if (fabsf(dv - Vm) > 0.3)
    9454:	ed9f 2b56 	vldr	d2, [pc, #344]	; 95b0 <UMotorTest::testCurrent(float, float, float, float&)+0x1b0>
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
    9458:	ed9f 9b57 	vldr	d9, [pc, #348]	; 95b8 <UMotorTest::testCurrent(float, float, float, float&)+0x1b8>
    945c:	ed9f 8b58 	vldr	d8, [pc, #352]	; 95c0 <UMotorTest::testCurrent(float, float, float, float&)+0x1c0>
    9460:	e025      	b.n	94ae <UMotorTest::testCurrent(float, float, float, float&)+0xae>
        if (fabsf(dv - Vm) > 0.3)
    9462:	ee34 4a67 	vsub.f32	s8, s8, s15
    9466:	eeb0 4ac4 	vabs.f32	s8, s8
    946a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    946e:	eeb4 4bc2 	vcmpe.f64	d4, d2
    9472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9476:	dd69      	ble.n	954c <UMotorTest::testCurrent(float, float, float, float&)+0x14c>
        dv = Vm;
    9478:	eeb0 4a67 	vmov.f32	s8, s15
        w += dwi;
    947c:	eddf 6a56 	vldr	s13, [pc, #344]	; 95d8 <UMotorTest::testCurrent(float, float, float, float&)+0x1d8>
          dwi = 0.1;
    9480:	eef0 aa6b 	vmov.f32	s21, s23
                  j, w, dwi, wsum, diffSum, dd->mCurrent, iL, dt, Vl, Vdif);
          usb.send(s);
        }
      }
      wsum += w;
      float di = iL - dd->mCurrent; // current is always positive
    9484:	edd3 4a13 	vldr	s9, [r3, #76]	; 0x4c
      diffSum += w * di * di;
      if (fabsf(Vm) > 0.5)
    9488:	eef4 7ae3 	vcmpe.f32	s15, s7
      wsum += w;
    948c:	ee71 1aa6 	vadd.f32	s3, s3, s13
      float di = iL - dd->mCurrent; // current is always positive
    9490:	ee76 4a64 	vsub.f32	s9, s12, s9
      if (fabsf(Vm) > 0.5)
    9494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      diffSum += w * di * di;
    9498:	ee66 caa4 	vmul.f32	s25, s13, s9
    949c:	eeac 0aa4 	vfma.f32	s0, s25, s9
      if (fabsf(Vm) > 0.5)
    94a0:	dd03      	ble.n	94aa <UMotorTest::testCurrent(float, float, float, float&)+0xaa>
      {
        kerrSum += di * di;
    94a2:	eea4 aaa4 	vfma.f32	s20, s9, s9
        kCnt++;
    94a6:	f10c 0c01 	add.w	ip, ip, #1
    94aa:	3344      	adds	r3, #68	; 0x44
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    94ac:	4622      	mov	r2, r4
  for (int j = 1; j < mLogIndex; j++)
    94ae:	3001      	adds	r0, #1
      }
    }
    if (toLog)
    {
      dd->weightCurrent = w;
    94b0:	edc3 6a07 	vstr	s13, [r3, #28]
      dd->e_dt = dt;
    94b4:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
  for (int j = 1; j < mLogIndex; j++)
    94b8:	42a8      	cmp	r0, r5
      dd->e_current = iL;
    94ba:	ed83 6a0c 	vstr	s12, [r3, #48]	; 0x30
      dd->e_dif = Vdif;
    94be:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
  for (int j = 1; j < mLogIndex; j++)
    94c2:	d035      	beq.n	9530 <UMotorTest::testCurrent(float, float, float, float&)+0x130>
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    94c4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    94c6:	1aa2      	subs	r2, r4, r2
    94c8:	ee07 2a90 	vmov	s15, r2
    94cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    94d0:	ee87 7a85 	vdiv.f32	s14, s15, s10
    if (dt > 0 and fabsf(dd->mVoltage) > 0.5)
    94d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    94d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94dc:	dde5      	ble.n	94aa <UMotorTest::testCurrent(float, float, float, float&)+0xaa>
    94de:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    94e2:	eef0 7ae7 	vabs.f32	s15, s15
    94e6:	eef4 7ae3 	vcmpe.f32	s15, s7
    94ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94ee:	dddc      	ble.n	94aa <UMotorTest::testCurrent(float, float, float, float&)+0xaa>
      Vm = fabsf(dd[-1].mVoltage); // actual motor voltage (from previous sample)
    94f0:	edd3 7a01 	vldr	s15, [r3, #4]
      if (fabsf(Vm) < 1.0)
    94f4:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
      float vel0 = fabsf(dd->velocity);
    94f8:	edd3 4a15 	vldr	s9, [r3, #84]	; 0x54
      Vm = fabsf(dd[-1].mVoltage); // actual motor voltage (from previous sample)
    94fc:	eef0 7ae7 	vabs.f32	s15, s15
      float vel0 = fabsf(dd->velocity);
    9500:	eef0 4ae4 	vabs.f32	s9, s9
      Vdif = Vm - vel0 * Km; // anker coil voltage
    9504:	eef0 5a67 	vmov.f32	s11, s15
      if (fabsf(Vm) < 1.0)
    9508:	eef4 7aec 	vcmpe.f32	s15, s25
      Vdif = Vm - vel0 * Km; // anker coil voltage
    950c:	eee3 5a24 	vfma.f32	s11, s6, s9
      if (fabsf(Vm) < 1.0)
    9510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      float Vl = Vdif - iL * Ra; // voltage over inductor
    9514:	eef0 4a65 	vmov.f32	s9, s11
    9518:	eee6 4a60 	vfms.f32	s9, s12, s1
      iL += Vl * dt / L; // motor current
    951c:	ee67 4a24 	vmul.f32	s9, s14, s9
    9520:	ee84 da81 	vdiv.f32	s26, s9, s2
    9524:	ee36 6a0d 	vadd.f32	s12, s12, s26
      if (fabsf(Vm) < 1.0)
    9528:	d59b      	bpl.n	9462 <UMotorTest::testCurrent(float, float, float, float&)+0x62>
        w = 0.0;
    952a:	eddf 6a27 	vldr	s13, [pc, #156]	; 95c8 <UMotorTest::testCurrent(float, float, float, float&)+0x1c8>
    952e:	e7a9      	b.n	9484 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
    }
    t0 = dd->mTime10us;
    dd++;
  }
  kerr = kerrSum/kCnt;
    9530:	ee07 ca90 	vmov	s15, ip
    9534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9538:	ee8a 7a27 	vdiv.f32	s14, s20, s15
  return diffSum/wsum;
}
    953c:	ee80 0a21 	vdiv.f32	s0, s0, s3
    9540:	ecbd 8b0c 	vpop	{d8-d13}
    9544:	bc30      	pop	{r4, r5}
  kerr = kerrSum/kCnt;
    9546:	ed81 7a00 	vstr	s14, [r1]
}
    954a:	4770      	bx	lr
        w += dwi;
    954c:	ee76 6aaa 	vadd.f32	s13, s13, s21
        if (w > 1.0)
    9550:	eef4 6aec 	vcmpe.f32	s13, s25
    9554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9558:	dd06      	ble.n	9568 <UMotorTest::testCurrent(float, float, float, float&)+0x168>
          w = 1.0;
    955a:	eef0 6a6c 	vmov.f32	s13, s25
        dv = Vm;
    955e:	eeb0 4a67 	vmov.f32	s8, s15
          dwi = -0.005;
    9562:	eef0 aa4b 	vmov.f32	s21, s22
    9566:	e78d      	b.n	9484 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
    9568:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
    956c:	eeb4 4bc9 	vcmpe.f64	d4, d9
    9570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9574:	d519      	bpl.n	95aa <UMotorTest::testCurrent(float, float, float, float&)+0x1aa>
    9576:	eeb0 4aea 	vabs.f32	s8, s21
    957a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    957e:	eeb4 4bc8 	vcmpe.f64	d4, d8
        dv = Vm;
    9582:	eeb0 4a67 	vmov.f32	s8, s15
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
    9586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    958a:	f77f af7b 	ble.w	9484 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
          dwi = 0.0;
    958e:	eef0 aa4c 	vmov.f32	s21, s24
          w = 0.03;
    9592:	eddf 6a12 	vldr	s13, [pc, #72]	; 95dc <UMotorTest::testCurrent(float, float, float, float&)+0x1dc>
    9596:	e775      	b.n	9484 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
  for (int j = 1; j < mLogIndex; j++)
    9598:	eddf 7a0b 	vldr	s15, [pc, #44]	; 95c8 <UMotorTest::testCurrent(float, float, float, float&)+0x1c8>
  float kerrSum = 0;
    959c:	eeb0 aa67 	vmov.f32	s20, s15
  float diffSum = 0.0;
    95a0:	eeb0 0a67 	vmov.f32	s0, s15
  float wsum = 0.0;
    95a4:	eef0 1a67 	vmov.f32	s3, s15
    95a8:	e7c6      	b.n	9538 <UMotorTest::testCurrent(float, float, float, float&)+0x138>
        dv = Vm;
    95aa:	eeb0 4a67 	vmov.f32	s8, s15
    95ae:	e769      	b.n	9484 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
    95b0:	33333333 	.word	0x33333333
    95b4:	3fd33333 	.word	0x3fd33333
    95b8:	47ae147b 	.word	0x47ae147b
    95bc:	3f847ae1 	.word	0x3f847ae1
    95c0:	88e368f1 	.word	0x88e368f1
    95c4:	3ee4f8b5 	.word	0x3ee4f8b5
    95c8:	00000000 	.word	0x00000000
    95cc:	3dcccccd 	.word	0x3dcccccd
    95d0:	47c35000 	.word	0x47c35000
    95d4:	bba3d70a 	.word	0xbba3d70a
    95d8:	3e99999a 	.word	0x3e99999a
    95dc:	3cf5c28f 	.word	0x3cf5c28f

000095e0 <UMotorTest::estimateFriction(float, float, float, float&)>:


float UMotorTest::estimateFriction(float b, float s, float j, float & jerr)
{
    95e0:	b570      	push	{r4, r5, r6, lr}
  dd->e_tau1 = 0;
  dd->e_tau2 = 0;
  dd->e_vel = 0;
  dd->weightInertia = 0;
  bool step = false;
  for (int i = 1; i < mLogIndex; i++)
    95e2:	6985      	ldr	r5, [r0, #24]
  dd->e_current = 0;
    95e4:	eddf 7a78 	vldr	s15, [pc, #480]	; 97c8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1e8>
  UMotorTestMeasurementData * dd = mLog;
    95e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
  for (int i = 1; i < mLogIndex; i++)
    95ea:	2d01      	cmp	r5, #1
{
    95ec:	ed2d 8b0c 	vpush	{d8-d13}
  dd->e_current = 0;
    95f0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  dd->e_tau0 = 0;
    95f4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  dd->e_tau1 = 0;
    95f8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  dd->e_tau2 = 0;
    95fc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  dd->e_vel = 0;
    9600:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  dd->weightInertia = 0;
    9604:	edc3 7a08 	vstr	s15, [r3, #32]
  for (int i = 1; i < mLogIndex; i++)
    9608:	f340 80c9 	ble.w	979e <UMotorTest::estimateFriction(float, float, float, float&)+0x1be>
  bool step = false;
    960c:	2400      	movs	r4, #0
    float acc = 0;
    float Vm1 = fabsf(dd[-1].mVoltage);
    if (not step)
      step = (Vm1 - Vm) > 0.1;
    Vm = Vm1;
    if (Vm1 > 0.5 and vel > 1.0)
    960e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
  float dwj = 0;
    9612:	eeb0 ba67 	vmov.f32	s22, s15
  for (int i = 1; i < mLogIndex; i++)
    9616:	2201      	movs	r2, #1
  float w = 0;
    9618:	eef0 5a67 	vmov.f32	s11, s15
  int sumCnt = 0;
    961c:	46a6      	mov	lr, r4
  float sumJerr = 0;
    961e:	eef0 9a67 	vmov.f32	s19, s15
    }
    else
    {
      w = 0;
      tau0 = 0.0077;
      tau1 = 0.0088;
    9622:	eddf aa6a 	vldr	s21, [pc, #424]	; 97cc <UMotorTest::estimateFriction(float, float, float, float&)+0x1ec>
  float sumJweight = 0;
    9626:	eeb0 9a67 	vmov.f32	s18, s15
      tau0 = 0.0077;
    962a:	ed9f aa69 	vldr	s20, [pc, #420]	; 97d0 <UMotorTest::estimateFriction(float, float, float, float&)+0x1f0>
  float sumErr = 0.0;
    962e:	eef0 1a67 	vmov.f32	s3, s15
        dwj = 0.15;
    9632:	ed9f ca68 	vldr	s24, [pc, #416]	; 97d4 <UMotorTest::estimateFriction(float, float, float, float&)+0x1f4>
  float estVel = 0;
    9636:	eeb0 5a67 	vmov.f32	s10, s15
        dwj = -0.0075;
    963a:	eddf ba67 	vldr	s23, [pc, #412]	; 97d8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1f8>
      tau2 = 0;
    963e:	eeb0 4a67 	vmov.f32	s8, s15
      step = (Vm1 - Vm) > 0.1;
    9642:	ed9f 3b5b 	vldr	d3, [pc, #364]	; 97b0 <UMotorTest::estimateFriction(float, float, float, float&)+0x1d0>
      else if (w < 0.01 and fabsf(dwj) > 0.00001)
    9646:	ed9f 8b5c 	vldr	d8, [pc, #368]	; 97b8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1d8>
    964a:	ed9f 2b5d 	vldr	d2, [pc, #372]	; 97c0 <UMotorTest::estimateFriction(float, float, float, float&)+0x1e0>
    964e:	e048      	b.n	96e2 <UMotorTest::estimateFriction(float, float, float, float&)+0x102>
    float vel = fabsf(dd->velocity); // actual velocity
    9650:	eeb0 7ac7 	vabs.f32	s14, s14
    if (Vm1 > 0.5 and vel > 1.0)
    9654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    9658:	eeb4 7ae6 	vcmpe.f32	s14, s13
    965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9660:	dd58      	ble.n	9714 <UMotorTest::estimateFriction(float, float, float, float&)+0x134>
      tau0 = dd->mCurrent * mKonstant[testMotor]; // generated torque
    9662:	6a86      	ldr	r6, [r0, #40]	; 0x28
    9664:	edd3 6a02 	vldr	s13, [r3, #8]
    9668:	eb00 0c86 	add.w	ip, r0, r6, lsl #2
      float dt = dd->e_dt; // time since last sample
    966c:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
      tau0 = dd->mCurrent * mKonstant[testMotor]; // generated torque
    9670:	eddc ca3a 	vldr	s25, [ip, #232]	; 0xe8
    9674:	ee6c caa6 	vmul.f32	s25, s25, s13
      if (tau0 > 0 and tau0 > s)
    9678:	eef5 cac0 	vcmpe.f32	s25, #0.0
    967c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9680:	dd51      	ble.n	9726 <UMotorTest::estimateFriction(float, float, float, float&)+0x146>
    9682:	eef4 cae0 	vcmpe.f32	s25, s1
    9686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    968a:	dd4c      	ble.n	9726 <UMotorTest::estimateFriction(float, float, float, float&)+0x146>
        tau1 = tau0 - s;
    968c:	ee7c dae0 	vsub.f32	s27, s25, s1
      tau2 = tau1 - b * vel;
    9690:	eeb0 da6d 	vmov.f32	s26, s27
    9694:	eea7 da40 	vfms.f32	s26, s14, s0
      float acc = tau2 / j;
    9698:	eecd 6a01 	vdiv.f32	s13, s26, s2
      estVel += acc*dt; // estimated velocity
    969c:	eea6 5a26 	vfma.f32	s10, s12, s13
      if (step)
    96a0:	2c00      	cmp	r4, #0
    96a2:	d04c      	beq.n	973e <UMotorTest::estimateFriction(float, float, float, float&)+0x15e>
      w += dwj;
    96a4:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
        dwj = 0.15;
    96a8:	eeb0 ba4c 	vmov.f32	s22, s24
      float verr = vel - estVel;
    96ac:	ee37 7a45 	vsub.f32	s14, s14, s10
      sumCnt++;
    96b0:	f10e 0e01 	add.w	lr, lr, #1
      sumJweight += w;
    96b4:	ee39 9a25 	vadd.f32	s18, s18, s11
    }
    96b8:	2400      	movs	r4, #0
      sumJerr += w * verr * verr;
    96ba:	ee65 6a87 	vmul.f32	s13, s11, s14
      sumErr += verr * verr;
    96be:	eee7 1a07 	vfma.f32	s3, s14, s14
      sumJerr += w * verr * verr;
    96c2:	eee6 9a87 	vfma.f32	s19, s13, s14
  for (int i = 1; i < mLogIndex; i++)
    96c6:	3201      	adds	r2, #1
      ddd++;
    }
    if (toLog)
    {
      // save to log
      dd->e_tau0 = tau0;
    96c8:	edc3 ca0d 	vstr	s25, [r3, #52]	; 0x34
      dd->e_tau1 = tau1;
    96cc:	edc3 da0e 	vstr	s27, [r3, #56]	; 0x38
      dd->e_tau2 = tau2;
      dd->e_vel = estVel;
      dd->weightInertia = w;
    }
    //
    dd++;
    96d0:	3344      	adds	r3, #68	; 0x44
  for (int i = 1; i < mLogIndex; i++)
    96d2:	42aa      	cmp	r2, r5
      dd->e_tau2 = tau2;
    96d4:	ed03 da02 	vstr	s26, [r3, #-8]
      dd->e_vel = estVel;
    96d8:	ed03 5a01 	vstr	s10, [r3, #-4]
      dd->weightInertia = w;
    96dc:	ed43 5a09 	vstr	s11, [r3, #-36]	; 0xffffffdc
  for (int i = 1; i < mLogIndex; i++)
    96e0:	d03b      	beq.n	975a <UMotorTest::estimateFriction(float, float, float, float&)+0x17a>
    float Vm1 = fabsf(dd[-1].mVoltage);
    96e2:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
    96e6:	eeb0 6a67 	vmov.f32	s12, s15
    float vel = fabsf(dd->velocity); // actual velocity
    96ea:	ed93 7a04 	vldr	s14, [r3, #16]
    float Vm1 = fabsf(dd[-1].mVoltage);
    96ee:	eef0 7ae6 	vabs.f32	s15, s13
    if (not step)
    96f2:	b954      	cbnz	r4, 970a <UMotorTest::estimateFriction(float, float, float, float&)+0x12a>
      step = (Vm1 - Vm) > 0.1;
    96f4:	ee37 6ac6 	vsub.f32	s12, s15, s12
    96f8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    96fc:	eeb4 6bc3 	vcmpe.f64	d6, d3
    9700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9704:	bfcc      	ite	gt
    9706:	2401      	movgt	r4, #1
    9708:	2400      	movle	r4, #0
    if (Vm1 > 0.5 and vel > 1.0)
    970a:	eef4 7ae4 	vcmpe.f32	s15, s9
    970e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9712:	dc9d      	bgt.n	9650 <UMotorTest::estimateFriction(float, float, float, float&)+0x70>
      tau2 = 0;
    9714:	eeb0 da44 	vmov.f32	s26, s8
      w = 0;
    9718:	eddf 5a2b 	vldr	s11, [pc, #172]	; 97c8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1e8>
      tau1 = 0.0088;
    971c:	eef0 da6a 	vmov.f32	s27, s21
      tau0 = 0.0077;
    9720:	eef0 ca4a 	vmov.f32	s25, s20
    9724:	e7cf      	b.n	96c6 <UMotorTest::estimateFriction(float, float, float, float&)+0xe6>
      else if (tau0 < -s)
    9726:	eef1 6a60 	vneg.f32	s13, s1
    972a:	eef4 6aec 	vcmpe.f32	s13, s25
    972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        tau1 = tau0 + s;
    9732:	bfcc      	ite	gt
    9734:	ee7c daa0 	vaddgt.f32	s27, s25, s1
        tau1 = 0;
    9738:	eef0 da44 	vmovle.f32	s27, s8
    973c:	e7a8      	b.n	9690 <UMotorTest::estimateFriction(float, float, float, float&)+0xb0>
      w += dwj;
    973e:	ee75 5a8b 	vadd.f32	s11, s11, s22
      if (w > 1.0)
    9742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    9746:	eef4 5ae6 	vcmpe.f32	s11, s13
    974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    974e:	dd11      	ble.n	9774 <UMotorTest::estimateFriction(float, float, float, float&)+0x194>
        w = 1.0;
    9750:	eef0 5a66 	vmov.f32	s11, s13
        dwj = -0.0075;
    9754:	eeb0 ba6b 	vmov.f32	s22, s23
    9758:	e7a8      	b.n	96ac <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
  }  // go to next value.
  jerr = sumJerr / sumJweight;
  return sumErr / sumCnt;
    975a:	ee07 ea90 	vmov	s15, lr
    975e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  jerr = sumJerr / sumJweight;
    9762:	ee89 7a89 	vdiv.f32	s14, s19, s18
}
    9766:	ee81 0a80 	vdiv.f32	s0, s3, s0
    976a:	ecbd 8b0c 	vpop	{d8-d13}
  jerr = sumJerr / sumJweight;
    976e:	ed81 7a00 	vstr	s14, [r1]
}
    9772:	bd70      	pop	{r4, r5, r6, pc}
      else if (w < 0.01 and fabsf(dwj) > 0.00001)
    9774:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
    9778:	eeb4 6bc8 	vcmpe.f64	d6, d8
    977c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9780:	d594      	bpl.n	96ac <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
    9782:	eeb0 6acb 	vabs.f32	s12, s22
    9786:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    978a:	eeb4 6bc2 	vcmpe.f64	d6, d2
    978e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9792:	dd8b      	ble.n	96ac <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
        dwj = 0.0;
    9794:	eeb0 ba44 	vmov.f32	s22, s8
        w = 0.01;
    9798:	eddf 5a10 	vldr	s11, [pc, #64]	; 97dc <UMotorTest::estimateFriction(float, float, float, float&)+0x1fc>
    979c:	e786      	b.n	96ac <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
  for (int i = 1; i < mLogIndex; i++)
    979e:	eeb0 0a67 	vmov.f32	s0, s15
  float sumJerr = 0;
    97a2:	eef0 9a67 	vmov.f32	s19, s15
  float sumJweight = 0;
    97a6:	eeb0 9a67 	vmov.f32	s18, s15
  float sumErr = 0.0;
    97aa:	eef0 1a67 	vmov.f32	s3, s15
    97ae:	e7d8      	b.n	9762 <UMotorTest::estimateFriction(float, float, float, float&)+0x182>
    97b0:	9999999a 	.word	0x9999999a
    97b4:	3fb99999 	.word	0x3fb99999
    97b8:	47ae147b 	.word	0x47ae147b
    97bc:	3f847ae1 	.word	0x3f847ae1
    97c0:	88e368f1 	.word	0x88e368f1
    97c4:	3ee4f8b5 	.word	0x3ee4f8b5
    97c8:	00000000 	.word	0x00000000
    97cc:	3c102de0 	.word	0x3c102de0
    97d0:	3bfc5048 	.word	0x3bfc5048
    97d4:	3e19999a 	.word	0x3e19999a
    97d8:	bbf5c28f 	.word	0xbbf5c28f
    97dc:	3c23d70a 	.word	0x3c23d70a

000097e0 <UMotorTest::testModel()>:


bool UMotorTest::testModel()
{
    97e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool dKs = false;
  bool dLs = false;
  bool isOK = false;
  float e1;
  //
  for (int i = 0; i < 30; i++)
    97e4:	2400      	movs	r4, #0
{
    97e6:	4607      	mov	r7, r0
    e2k = testCurrent(km2, r1, l1, k2e);
    float l2 = l1 + dL; // Henry
    e2l = testCurrent(km1, r1, l2, dummy);
    if (true)
    {
      snprintf(s, MSL, "# motor %d current %d r1=%.4f Ohm, K1=%.5f Nm/A, L=%.5f Henry, e1=%g, e2r=%g, e2k=%g, e2L=%g, k2e=%g\n",
    97e8:	f8df 928c 	ldr.w	r9, [pc, #652]	; 9a78 <UMotorTest::testModel()+0x298>
  bool dLs = false;
    97ec:	4626      	mov	r6, r4
  bool dKs = false;
    97ee:	46a2      	mov	sl, r4
  bool dRs = false;
    97f0:	4625      	mov	r5, r4
                testMotor, i, r2, km2, l2, e1, e2r, e2k, e2l, k2e);
      usb.send(s);
    97f2:	f8df 8264 	ldr.w	r8, [pc, #612]	; 9a58 <UMotorTest::testModel()+0x278>
{
    97f6:	ed2d 8b10 	vpush	{d8-d15}
  float dL = 0.0001;
    97fa:	eddf 8a91 	vldr	s17, [pc, #580]	; 9a40 <UMotorTest::testModel()+0x260>
{
    97fe:	b0d1      	sub	sp, #324	; 0x144
  float dR = 0.01;
    9800:	ed9f 9a90 	vldr	s18, [pc, #576]	; 9a44 <UMotorTest::testModel()+0x264>
  float dK = 0.0001;
    9804:	eef0 9a68 	vmov.f32	s19, s17
  float l1 = 0.003; // Henry
    9808:	ed9f fa8f 	vldr	s30, [pc, #572]	; 9a48 <UMotorTest::testModel()+0x268>
  float r1 = 1.1; // Ohm
    980c:	eddf ea8f 	vldr	s29, [pc, #572]	; 9a4c <UMotorTest::testModel()+0x26c>
  float km1 = 0.0188; // Nm/A
    9810:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 9a50 <UMotorTest::testModel()+0x270>
    9814:	e001      	b.n	981a <UMotorTest::testModel()+0x3a>
    {
      if (i > 3)
        dK *= 0.8;
      dKs = sign;
    }
    sign = e2l < e1;
    9816:	4616      	mov	r6, r2
    sign = (k2e < k1e);
    9818:	469a      	mov	sl, r3
    e1 = testCurrent(km1, r1, l1, k1e);
    981a:	eeb0 1a4f 	vmov.f32	s2, s30
    981e:	a919      	add	r1, sp, #100	; 0x64
    9820:	eef0 0a6e 	vmov.f32	s1, s29
    9824:	4638      	mov	r0, r7
    9826:	eeb0 0a48 	vmov.f32	s0, s16
    982a:	f7ff fde9 	bl	9400 <UMotorTest::testCurrent(float, float, float, float&)>
    float r2 = r1 + dR;
    982e:	ee7e da89 	vadd.f32	s27, s29, s18
    e1 = testCurrent(km1, r1, l1, k1e);
    9832:	eef0 aa40 	vmov.f32	s21, s0
    e2r = testCurrent(km1, r2, l1, dummy);
    9836:	a91b      	add	r1, sp, #108	; 0x6c
    9838:	4638      	mov	r0, r7
    983a:	eeb0 0a48 	vmov.f32	s0, s16
    983e:	eef0 0a6d 	vmov.f32	s1, s27
    9842:	f7ff fddd 	bl	9400 <UMotorTest::testCurrent(float, float, float, float&)>
    float km2 = km1 + dK; // Nm/A
    9846:	ee78 fa29 	vadd.f32	s31, s16, s19
    e2k = testCurrent(km2, r1, l1, k2e);
    984a:	eef0 0a6e 	vmov.f32	s1, s29
    984e:	a91a      	add	r1, sp, #104	; 0x68
    e2r = testCurrent(km1, r2, l1, dummy);
    9850:	eeb0 aa40 	vmov.f32	s20, s0
    e2k = testCurrent(km2, r1, l1, k2e);
    9854:	4638      	mov	r0, r7
    9856:	eeb0 0a6f 	vmov.f32	s0, s31
    985a:	f7ff fdd1 	bl	9400 <UMotorTest::testCurrent(float, float, float, float&)>
    float l2 = l1 + dL; // Henry
    985e:	ee3f da28 	vadd.f32	s26, s30, s17
    e2k = testCurrent(km2, r1, l1, k2e);
    9862:	eeb0 ca40 	vmov.f32	s24, s0
    e2l = testCurrent(km1, r1, l2, dummy);
    9866:	a91b      	add	r1, sp, #108	; 0x6c
    9868:	4638      	mov	r0, r7
    986a:	eeb0 0a48 	vmov.f32	s0, s16
    986e:	eeb0 1a4d 	vmov.f32	s2, s26
    9872:	f7ff fdc5 	bl	9400 <UMotorTest::testCurrent(float, float, float, float&)>
      snprintf(s, MSL, "# motor %d current %d r1=%.4f Ohm, K1=%.5f Nm/A, L=%.5f Henry, e1=%g, e2r=%g, e2k=%g, e2L=%g, k2e=%g\n",
    9876:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
    987a:	eeb7 3aca 	vcvt.f64.f32	d3, s20
    987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9880:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9884:	464a      	mov	r2, r9
    9886:	eeb7 2ac0 	vcvt.f64.f32	d2, s0
    988a:	21c8      	movs	r1, #200	; 0xc8
    988c:	eeb7 4acd 	vcvt.f64.f32	d4, s26
    9890:	a81e      	add	r0, sp, #120	; 0x78
    9892:	eeb7 5aef 	vcvt.f64.f32	d5, s31
    9896:	9400      	str	r4, [sp, #0]
    9898:	eeb7 6aed 	vcvt.f64.f32	d6, s27
    989c:	eeb7 baea 	vcvt.f64.f32	d11, s21
    98a0:	eeb7 cacc 	vcvt.f64.f32	d12, s24
    e2l = testCurrent(km1, r1, l2, dummy);
    98a4:	eeb0 ea40 	vmov.f32	s28, s0
      snprintf(s, MSL, "# motor %d current %d r1=%.4f Ohm, K1=%.5f Nm/A, L=%.5f Henry, e1=%g, e2r=%g, e2k=%g, e2L=%g, k2e=%g\n",
    98a8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    98ac:	ed8d 2b0e 	vstr	d2, [sp, #56]	; 0x38
    98b0:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
    98b4:	ed8d 4b06 	vstr	d4, [sp, #24]
    98b8:	ed8d 5b04 	vstr	d5, [sp, #16]
    98bc:	ed8d 6b02 	vstr	d6, [sp, #8]
    98c0:	ed8d cb0c 	vstr	d12, [sp, #48]	; 0x30
    98c4:	ed8d bb08 	vstr	d11, [sp, #32]
    98c8:	f011 fee4 	bl	1b694 <snprintf>
      usb.send(s);
    98cc:	a91e      	add	r1, sp, #120	; 0x78
    98ce:	4640      	mov	r0, r8
    98d0:	f002 fe24 	bl	c51c <UUSB::send(char const*)>
    bool sign = (e2r < e1);
    98d4:	eef4 aaca 	vcmpe.f32	s21, s20
    98d8:	462b      	mov	r3, r5
    98da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98de:	bfcd      	iteet	gt
    98e0:	2501      	movgt	r5, #1
    98e2:	2500      	movle	r5, #0
      r1 -= dR;
    98e4:	ee7e eac9 	vsuble.f32	s29, s29, s18
      r1 += dR;
    98e8:	eef0 ea6d 	vmovgt.f32	s29, s27
    if (sign != dRs)
    98ec:	429d      	cmp	r5, r3
    98ee:	d009      	beq.n	9904 <UMotorTest::testModel()+0x124>
      if (i > 3)
    98f0:	2c03      	cmp	r4, #3
    98f2:	dd07      	ble.n	9904 <UMotorTest::testModel()+0x124>
        dR *= 0.8;
    98f4:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
    98f8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 9a08 <UMotorTest::testModel()+0x228>
    98fc:	ee27 7b06 	vmul.f64	d7, d7, d6
    9900:	eeb7 9bc7 	vcvt.f32.f64	s18, d7
    sign = (k2e < k1e);
    9904:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
    9908:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
    990c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9914:	bf4d      	iteet	mi
    9916:	2301      	movmi	r3, #1
    9918:	2300      	movpl	r3, #0
      km1 -= dK;
    991a:	ee38 8a69 	vsubpl.f32	s16, s16, s19
      km1 += dK;
    991e:	eeb0 8a6f 	vmovmi.f32	s16, s31
    if (sign != dKs)
    9922:	4553      	cmp	r3, sl
    9924:	d009      	beq.n	993a <UMotorTest::testModel()+0x15a>
      if (i > 3)
    9926:	2c03      	cmp	r4, #3
    9928:	dd07      	ble.n	993a <UMotorTest::testModel()+0x15a>
        dK *= 0.8;
    992a:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    992e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 9a08 <UMotorTest::testModel()+0x228>
    9932:	ee27 7b06 	vmul.f64	d7, d7, d6
    9936:	eef7 9bc7 	vcvt.f32.f64	s19, d7
    sign = e2l < e1;
    993a:	eef4 aace 	vcmpe.f32	s21, s28
    993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9942:	bfcd      	iteet	gt
    9944:	2201      	movgt	r2, #1
    9946:	2200      	movle	r2, #0
    if (sign)
      l1 += dL;
    else
      l1 -= dL;
    9948:	ee3f fa68 	vsuble.f32	s30, s30, s17
      l1 += dL;
    994c:	eeb0 fa4d 	vmovgt.f32	s30, s26
    if (sign != dLs)
    9950:	42b2      	cmp	r2, r6
    9952:	d009      	beq.n	9968 <UMotorTest::testModel()+0x188>
    {
      if (i > 3)
    9954:	2c03      	cmp	r4, #3
    9956:	dd07      	ble.n	9968 <UMotorTest::testModel()+0x188>
        dL *=0.8;
    9958:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
    995c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 9a08 <UMotorTest::testModel()+0x228>
    9960:	ee27 7b06 	vmul.f64	d7, d7, d6
    9964:	eef7 8bc7 	vcvt.f32.f64	s17, d7
  for (int i = 0; i < 30; i++)
    9968:	3401      	adds	r4, #1
    996a:	2c1e      	cmp	r4, #30
    996c:	f47f af53 	bne.w	9816 <UMotorTest::testModel()+0x36>
      dLs = sign;
    }
  }
  // save result
  if (km1 > 0.001 and r1 > 0.2 and l1 > 0.0005)
    9970:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
    9974:	ed9f 6b26 	vldr	d6, [pc, #152]	; 9a10 <UMotorTest::testModel()+0x230>
    9978:	eeb4 7bc6 	vcmpe.f64	d7, d6
    997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9980:	dd09      	ble.n	9996 <UMotorTest::testModel()+0x1b6>
    9982:	eeb7 7aee 	vcvt.f64.f32	d7, s29
    9986:	ed9f 6b24 	vldr	d6, [pc, #144]	; 9a18 <UMotorTest::testModel()+0x238>
    998a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    998e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9992:	f300 8151 	bgt.w	9c38 <UMotorTest::testModel()+0x458>
  bool isOK = false;
    9996:	2300      	movs	r3, #0
    9998:	9317      	str	r3, [sp, #92]	; 0x5c
  float dj = j1 / 20.0;
  bool dbs = false;
  bool dss = false;
  bool djs = false;
  float e1j, e2j;
  usb.send("#-------\n");
    999a:	492e      	ldr	r1, [pc, #184]	; (9a54 <UMotorTest::testModel()+0x274>)
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
           testMotor, b1, s1, j1);
  usb.send(s);
  for (int i = 0; i < 100; i++)
    999c:	2400      	movs	r4, #0
  usb.send("#-------\n");
    999e:	482e      	ldr	r0, [pc, #184]	; (9a58 <UMotorTest::testModel()+0x278>)
    99a0:	f002 fdbc 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
    99a4:	21c8      	movs	r1, #200	; 0xc8
    99a6:	a81e      	add	r0, sp, #120	; 0x78
  float dj = j1 / 20.0;
    99a8:	ed9f aa2c 	vldr	s20, [pc, #176]	; 9a5c <UMotorTest::testModel()+0x27c>
  float ds = s1 / 20.0;
    99ac:	eddf 9a2c 	vldr	s19, [pc, #176]	; 9a60 <UMotorTest::testModel()+0x280>
  bool djs = false;
    99b0:	46a2      	mov	sl, r4
  float db = b1 / 10.0;
    99b2:	ed9f 9a2c 	vldr	s18, [pc, #176]	; 9a64 <UMotorTest::testModel()+0x284>
  bool dss = false;
    99b6:	4626      	mov	r6, r4
  float j1 = 0.0000037; // (Kg m^2)
    99b8:	eddf aa2b 	vldr	s21, [pc, #172]	; 9a68 <UMotorTest::testModel()+0x288>
  bool dbs = false;
    99bc:	4625      	mov	r5, r4
  float s1 = 0.0037; // (Nm)
    99be:	eddf 8a2b 	vldr	s17, [pc, #172]	; 9a6c <UMotorTest::testModel()+0x28c>
  float b1 = 7.0e-6; // (Nm s/rad)
    99c2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 9a70 <UMotorTest::testModel()+0x290>
    {
      if (i > 3)
        dj *= 0.95;
      djs = sign;
    }
    snprintf(s, MSL, "# motor %d fric %d b1=%11.4g, dbs=%d, s1=%.5fg, j1=%11.4g,\t e1=%.0f, e2b=%.0f, e2s=%.0f, e2j=%.0f, e1j=%.0f, djs=%d\n",
    99c6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 9a7c <UMotorTest::testModel()+0x29c>
              testMotor, i, b1, dbs, s1, j1, e1, e2b, e2s, e2j, e1j, djs);
    usb.send(s);
    99ca:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9a58 <UMotorTest::testModel()+0x278>
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
    99ce:	a314      	add	r3, pc, #80	; (adr r3, 9a20 <UMotorTest::testModel()+0x240>)
    99d0:	e9d3 2300 	ldrd	r2, r3, [r3]
        db *= 0.95;
    99d4:	ed9f cb14 	vldr	d12, [pc, #80]	; 9a28 <UMotorTest::testModel()+0x248>
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
    99d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    99dc:	a314      	add	r3, pc, #80	; (adr r3, 9a30 <UMotorTest::testModel()+0x250>)
    99de:	e9d3 2300 	ldrd	r2, r3, [r3]
    99e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    99e6:	a314      	add	r3, pc, #80	; (adr r3, 9a38 <UMotorTest::testModel()+0x258>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	e9cd 2300 	strd	r2, r3, [sp]
    99f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99f2:	4a20      	ldr	r2, [pc, #128]	; (9a74 <UMotorTest::testModel()+0x294>)
    99f4:	f011 fe4e 	bl	1b694 <snprintf>
  usb.send(s);
    99f8:	a91e      	add	r1, sp, #120	; 0x78
    99fa:	4817      	ldr	r0, [pc, #92]	; (9a58 <UMotorTest::testModel()+0x278>)
    99fc:	f002 fd8e 	bl	c51c <UUSB::send(char const*)>
  for (int i = 0; i < 100; i++)
    9a00:	e042      	b.n	9a88 <UMotorTest::testModel()+0x2a8>
    9a02:	bf00      	nop
    9a04:	f3af 8000 	nop.w
    9a08:	9999999a 	.word	0x9999999a
    9a0c:	3fe99999 	.word	0x3fe99999
    9a10:	d2f1a9fc 	.word	0xd2f1a9fc
    9a14:	3f50624d 	.word	0x3f50624d
    9a18:	9999999a 	.word	0x9999999a
    9a1c:	3fc99999 	.word	0x3fc99999
    9a20:	80000000 	.word	0x80000000
    9a24:	3ecf09b0 	.word	0x3ecf09b0
    9a28:	66666666 	.word	0x66666666
    9a2c:	3fee6666 	.word	0x3fee6666
    9a30:	60000000 	.word	0x60000000
    9a34:	3f6e4f76 	.word	0x3f6e4f76
    9a38:	60000000 	.word	0x60000000
    9a3c:	3edd5c31 	.word	0x3edd5c31
    9a40:	38d1b717 	.word	0x38d1b717
    9a44:	3c23d70a 	.word	0x3c23d70a
    9a48:	3b449ba6 	.word	0x3b449ba6
    9a4c:	3f8ccccd 	.word	0x3f8ccccd
    9a50:	3c9a0275 	.word	0x3c9a0275
    9a54:	2000329c 	.word	0x2000329c
    9a58:	2000eab8 	.word	0x2000eab8
    9a5c:	3446a46a 	.word	0x3446a46a
    9a60:	3941fc8f 	.word	0x3941fc8f
    9a64:	353be7a2 	.word	0x353be7a2
    9a68:	36784d84 	.word	0x36784d84
    9a6c:	3b727bb3 	.word	0x3b727bb3
    9a70:	36eae18b 	.word	0x36eae18b
    9a74:	200032a8 	.word	0x200032a8
    9a78:	20003234 	.word	0x20003234
    9a7c:	200032e0 	.word	0x200032e0
    9a80:	43960000 	.word	0x43960000
    sign = e2j < e1j;
    9a84:	46b2      	mov	sl, r6
      sign = e2s < e1;
    9a86:	4646      	mov	r6, r8
    e1 = estimateFriction(b1, s1, j1, e1j);
    9a88:	eeb0 1a6a 	vmov.f32	s2, s21
    9a8c:	4638      	mov	r0, r7
    9a8e:	eef0 0a68 	vmov.f32	s1, s17
    9a92:	a91c      	add	r1, sp, #112	; 0x70
    9a94:	eeb0 0a48 	vmov.f32	s0, s16
    9a98:	f7ff fda2 	bl	95e0 <UMotorTest::estimateFriction(float, float, float, float&)>
    float e2b = estimateFriction(b1 + db, s1, j1, dummy);
    9a9c:	ee38 ea09 	vadd.f32	s28, s16, s18
    9aa0:	a91b      	add	r1, sp, #108	; 0x6c
    e1 = estimateFriction(b1, s1, j1, e1j);
    9aa2:	eeb0 da40 	vmov.f32	s26, s0
    float e2b = estimateFriction(b1 + db, s1, j1, dummy);
    9aa6:	eeb0 0a4e 	vmov.f32	s0, s28
    9aaa:	f7ff fd99 	bl	95e0 <UMotorTest::estimateFriction(float, float, float, float&)>
    float e2s = estimateFriction(b1, s1 + ds, j1, dummy);
    9aae:	ee78 daa9 	vadd.f32	s27, s17, s19
    float e2b = estimateFriction(b1 + db, s1, j1, dummy);
    9ab2:	eeb0 ba40 	vmov.f32	s22, s0
    float e2s = estimateFriction(b1, s1 + ds, j1, dummy);
    9ab6:	eeb0 0a48 	vmov.f32	s0, s16
    9aba:	eef0 0a6d 	vmov.f32	s1, s27
    9abe:	f7ff fd8f 	bl	95e0 <UMotorTest::estimateFriction(float, float, float, float&)>
    dummy = estimateFriction(b1, s1, j1 + dj, e2j);
    9ac2:	ee3a 1a8a 	vadd.f32	s2, s21, s20
    float e2s = estimateFriction(b1, s1 + ds, j1, dummy);
    9ac6:	eef0 ba40 	vmov.f32	s23, s0
    dummy = estimateFriction(b1, s1, j1 + dj, e2j);
    9aca:	a91d      	add	r1, sp, #116	; 0x74
    9acc:	eeb0 0a48 	vmov.f32	s0, s16
    9ad0:	eef0 0a68 	vmov.f32	s1, s17
    9ad4:	f7ff fd84 	bl	95e0 <UMotorTest::estimateFriction(float, float, float, float&)>
    bool sign = e2b < e1;
    9ad8:	eeb4 dacb 	vcmpe.f32	s26, s22
    9adc:	462a      	mov	r2, r5
    dummy = estimateFriction(b1, s1, j1 + dj, e2j);
    9ade:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
    bool sign = e2b < e1;
    9ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ae6:	bfcd      	iteet	gt
    9ae8:	2501      	movgt	r5, #1
    9aea:	2500      	movle	r5, #0
      b1 -= db;
    9aec:	ee38 8a49 	vsuble.f32	s16, s16, s18
      b1 += db;
    9af0:	eeb0 8a4e 	vmovgt.f32	s16, s28
    if (sign != dbs)
    9af4:	4295      	cmp	r5, r2
    9af6:	d007      	beq.n	9b08 <UMotorTest::testModel()+0x328>
      if (i > 3)
    9af8:	2c03      	cmp	r4, #3
    9afa:	dd05      	ble.n	9b08 <UMotorTest::testModel()+0x328>
        db *= 0.95;
    9afc:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
    9b00:	ee27 7b0c 	vmul.f64	d7, d7, d12
    9b04:	eeb7 9bc7 	vcvt.f32.f64	s18, d7
      sign = e2s < e1;
    9b08:	eeb4 daeb 	vcmpe.f32	s26, s23
    9b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b10:	bfcd      	iteet	gt
    9b12:	f04f 0801 	movgt.w	r8, #1
    9b16:	f04f 0800 	movle.w	r8, #0
        s1 -= ds;
    9b1a:	ee78 8ae9 	vsuble.f32	s17, s17, s19
        s1 += ds;
    9b1e:	eef0 8a6d 	vmovgt.f32	s17, s27
      if (sign != dss)
    9b22:	45b0      	cmp	r8, r6
    9b24:	d007      	beq.n	9b36 <UMotorTest::testModel()+0x356>
        if (i > 3)
    9b26:	2c03      	cmp	r4, #3
    9b28:	dd05      	ble.n	9b36 <UMotorTest::testModel()+0x356>
          ds *= 0.95;
    9b2a:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    9b2e:	ee27 7b0c 	vmul.f64	d7, d7, d12
    9b32:	eef7 9bc7 	vcvt.f32.f64	s19, d7
    sign = e2j < e1j;
    9b36:	ed9d 5a1d 	vldr	s10, [sp, #116]	; 0x74
    9b3a:	ed9d 4a1c 	vldr	s8, [sp, #112]	; 0x70
    9b3e:	eeb4 5ac4 	vcmpe.f32	s10, s8
    9b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b46:	bf4d      	iteet	mi
    9b48:	2601      	movmi	r6, #1
    9b4a:	2600      	movpl	r6, #0
       j1 -= dj;
    9b4c:	ee7a aaca 	vsubpl.f32	s21, s21, s20
       j1 += dj;
    9b50:	eef0 aa41 	vmovmi.f32	s21, s2
    if (sign != djs)
    9b54:	4556      	cmp	r6, sl
    9b56:	d007      	beq.n	9b68 <UMotorTest::testModel()+0x388>
      if (i > 3)
    9b58:	2c03      	cmp	r4, #3
    9b5a:	dd05      	ble.n	9b68 <UMotorTest::testModel()+0x388>
        dj *= 0.95;
    9b5c:	eeb7 7aca 	vcvt.f64.f32	d7, s20
    9b60:	ee27 7b0c 	vmul.f64	d7, d7, d12
    9b64:	eeb7 abc7 	vcvt.f32.f64	s20, d7
    snprintf(s, MSL, "# motor %d fric %d b1=%11.4g, dbs=%d, s1=%.5fg, j1=%11.4g,\t e1=%.0f, e2b=%.0f, e2s=%.0f, e2j=%.0f, e1j=%.0f, djs=%d\n",
    9b68:	eeb7 6aeb 	vcvt.f64.f32	d6, s23
    9b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b6e:	eeb7 7acb 	vcvt.f64.f32	d7, s22
    9b72:	465a      	mov	r2, fp
    9b74:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    9b78:	21c8      	movs	r1, #200	; 0xc8
    9b7a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9b7e:	9400      	str	r4, [sp, #0]
    9b80:	eeb7 1acd 	vcvt.f64.f32	d1, s26
  for (int i = 0; i < 100; i++)
    9b84:	3401      	adds	r4, #1
    snprintf(s, MSL, "# motor %d fric %d b1=%11.4g, dbs=%d, s1=%.5fg, j1=%11.4g,\t e1=%.0f, e2b=%.0f, e2s=%.0f, e2j=%.0f, e1j=%.0f, djs=%d\n",
    9b86:	eeb7 2aea 	vcvt.f64.f32	d2, s21
    9b8a:	a81e      	add	r0, sp, #120	; 0x78
    9b8c:	eeb7 3ae8 	vcvt.f64.f32	d3, s17
    9b90:	9614      	str	r6, [sp, #80]	; 0x50
    9b92:	eeb7 bac8 	vcvt.f64.f32	d11, s16
    9b96:	9504      	str	r5, [sp, #16]
    9b98:	ed8d 4b12 	vstr	d4, [sp, #72]	; 0x48
    9b9c:	ed8d 5b10 	vstr	d5, [sp, #64]	; 0x40
    9ba0:	ed8d 6b0e 	vstr	d6, [sp, #56]	; 0x38
    9ba4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    9ba8:	ed8d 1b0a 	vstr	d1, [sp, #40]	; 0x28
    9bac:	ed8d 2b08 	vstr	d2, [sp, #32]
    9bb0:	ed8d 3b06 	vstr	d3, [sp, #24]
    9bb4:	ed8d bb02 	vstr	d11, [sp, #8]
    9bb8:	f011 fd6c 	bl	1b694 <snprintf>
    usb.send(s);
    9bbc:	a91e      	add	r1, sp, #120	; 0x78
    9bbe:	4648      	mov	r0, r9
    9bc0:	f002 fcac 	bl	c51c <UUSB::send(char const*)>
  for (int i = 0; i < 100; i++)
    9bc4:	2c64      	cmp	r4, #100	; 0x64
    9bc6:	f47f af5d 	bne.w	9a84 <UMotorTest::testModel()+0x2a4>
  }
  if (b1 > 0 and s1 > 0 and j1 > 0 and e1 < 300)
    9bca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    9bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9bd2:	dd21      	ble.n	9c18 <UMotorTest::testModel()+0x438>
    9bd4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    9bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9bdc:	dd1c      	ble.n	9c18 <UMotorTest::testModel()+0x438>
    9bde:	eef5 aac0 	vcmpe.f32	s21, #0.0
    9be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9be6:	dd17      	ble.n	9c18 <UMotorTest::testModel()+0x438>
    9be8:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 9a80 <UMotorTest::testModel()+0x2a0>
    9bec:	eeb4 dae7 	vcmpe.f32	s26, s15
    9bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9bf4:	d510      	bpl.n	9c18 <UMotorTest::testModel()+0x438>
  {
    mFricStat[testMotor] = s1;
    9bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9bf8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    mFricDyn[testMotor] = b1;
    mInertia[testMotor] = j1;
  }
  return isOK and e1 < 300;
    9bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    mFricStat[testMotor] = s1;
    9bfe:	edc7 8a42 	vstr	s17, [r7, #264]	; 0x108
    mFricDyn[testMotor] = b1;
    9c02:	ed87 8a3e 	vstr	s16, [r7, #248]	; 0xf8
    mInertia[testMotor] = j1;
    9c06:	edc7 aa46 	vstr	s21, [r7, #280]	; 0x118
  return isOK and e1 < 300;
    9c0a:	b97b      	cbnz	r3, 9c2c <UMotorTest::testModel()+0x44c>
    9c0c:	2000      	movs	r0, #0
}
    9c0e:	b051      	add	sp, #324	; 0x144
    9c10:	ecbd 8b10 	vpop	{d8-d15}
    9c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return isOK and e1 < 300;
    9c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d0f6      	beq.n	9c0c <UMotorTest::testModel()+0x42c>
    9c1e:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 9a80 <UMotorTest::testModel()+0x2a0>
    9c22:	eeb4 dae7 	vcmpe.f32	s26, s15
    9c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c2a:	d5ef      	bpl.n	9c0c <UMotorTest::testModel()+0x42c>
    9c2c:	2001      	movs	r0, #1
}
    9c2e:	b051      	add	sp, #324	; 0x144
    9c30:	ecbd 8b10 	vpop	{d8-d15}
    9c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (km1 > 0.001 and r1 > 0.2 and l1 > 0.0005)
    9c38:	eeb7 7acf 	vcvt.f64.f32	d7, s30
    9c3c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 9c78 <UMotorTest::testModel()+0x498>
    9c40:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c48:	f77f aea5 	ble.w	9996 <UMotorTest::testModel()+0x1b6>
    mKonstant[testMotor] = km1;
    9c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    isOK = e1 < 0.02;;
    9c4e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 9c80 <UMotorTest::testModel()+0x4a0>
    9c52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    9c56:	eeb4 bbc7 	vcmpe.f64	d11, d7
    mKonstant[testMotor] = km1;
    9c5a:	ed83 8a3a 	vstr	s16, [r3, #232]	; 0xe8
    mInductance[testMotor] = l1;
    9c5e:	ed83 fa36 	vstr	s30, [r3, #216]	; 0xd8
    mResistance[testMotor] = r1;
    9c62:	edc3 ea32 	vstr	s29, [r3, #200]	; 0xc8
    isOK = e1 < 0.02;;
    9c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c6a:	bf4c      	ite	mi
    9c6c:	2301      	movmi	r3, #1
    9c6e:	2300      	movpl	r3, #0
    9c70:	9317      	str	r3, [sp, #92]	; 0x5c
    if (false)
    9c72:	e692      	b.n	999a <UMotorTest::testModel()+0x1ba>
    9c74:	f3af 8000 	nop.w
    9c78:	d2f1a9fc 	.word	0xd2f1a9fc
    9c7c:	3f40624d 	.word	0x3f40624d
    9c80:	47ae147b 	.word	0x47ae147b
    9c84:	3f947ae1 	.word	0x3f947ae1

00009c88 <UMotorTest::estimateMotorParams()>:
  if (mLog == nullptr or mLogIndex == 0)
    9c88:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	f000 808b 	beq.w	9da6 <UMotorTest::estimateMotorParams()+0x11e>
    9c90:	6982      	ldr	r2, [r0, #24]
{
    9c92:	b530      	push	{r4, r5, lr}
    9c94:	4604      	mov	r4, r0
    9c96:	b0d3      	sub	sp, #332	; 0x14c
  if (mLog == nullptr or mLogIndex == 0)
    9c98:	2a00      	cmp	r2, #0
    9c9a:	f000 8082 	beq.w	9da2 <UMotorTest::estimateMotorParams()+0x11a>
    mKonstant[testMotor] = 1.0;
    9c9e:	6a85      	ldr	r5, [r0, #40]	; 0x28
    9ca0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  logStartTime = mLog[0].mTime10us;
    9ca4:	6819      	ldr	r1, [r3, #0]
    9ca6:	eb00 0385 	add.w	r3, r0, r5, lsl #2
  testValid[testMotor] = testModel(); // left motor
    9caa:	4425      	add	r5, r4
    mKonstant[testMotor] = 1.0;
    9cac:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    mFricDyn[testMotor] = 1.0;
    9cb0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    mFricStat[testMotor] = 1.0;
    9cb4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    mInertia[testMotor] = 1.0;
    9cb8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    mResistance[testMotor] = 0.1;
    9cbc:	4a3a      	ldr	r2, [pc, #232]	; (9da8 <UMotorTest::estimateMotorParams()+0x120>)
    9cbe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    mInductance[testMotor] = 0.001;
    9cc2:	4a3a      	ldr	r2, [pc, #232]	; (9dac <UMotorTest::estimateMotorParams()+0x124>)
    9cc4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  logStartTime = mLog[0].mTime10us;
    9cc8:	62c1      	str	r1, [r0, #44]	; 0x2c
  testValid[testMotor] = testModel(); // left motor
    9cca:	f7ff fd89 	bl	97e0 <UMotorTest::testModel()>
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9cce:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
    9cd2:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
  snprintf(s, MSL, "# UMotorTest:: encoder reversed=%d, Low voltage=%g, High voltage=%g\r\n",
    9cd6:	f44f 7196 	mov.w	r1, #300	; 0x12c
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9cda:	ed94 6a1a 	vldr	s12, [r4, #104]	; 0x68
  snprintf(s, MSL, "# UMotorTest:: encoder reversed=%d, Low voltage=%g, High voltage=%g\r\n",
    9cde:	7f23      	ldrb	r3, [r4, #28]
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9ce0:	ee27 6a06 	vmul.f32	s12, s14, s12
  testValid[testMotor] = testModel(); // left motor
    9ce4:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
  snprintf(s, MSL, "# UMotorTest:: encoder reversed=%d, Low voltage=%g, High voltage=%g\r\n",
    9cec:	4a30      	ldr	r2, [pc, #192]	; (9db0 <UMotorTest::estimateMotorParams()+0x128>)
    9cee:	a807      	add	r0, sp, #28
    9cf0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9cf4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9cf8:	ed8d 6b02 	vstr	d6, [sp, #8]
    9cfc:	ed8d 7b00 	vstr	d7, [sp]
    9d00:	f011 fcc8 	bl	1b694 <snprintf>
  usb.send(s);
    9d04:	a907      	add	r1, sp, #28
    9d06:	482b      	ldr	r0, [pc, #172]	; (9db4 <UMotorTest::estimateMotorParams()+0x12c>)
    9d08:	f002 fc08 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "# UMotorTest:: motor %d, R=%.4f Ohm, K=%.5f V/(rad/s) or Nm/A, L=%.5f Henry.\r\n",
    9d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9d12:	a807      	add	r0, sp, #28
    9d14:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    9d18:	ed92 5a36 	vldr	s10, [r2, #216]	; 0xd8
    9d1c:	ed92 6a3a 	vldr	s12, [r2, #232]	; 0xe8
    9d20:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
    9d24:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9d28:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9d2c:	4a22      	ldr	r2, [pc, #136]	; (9db8 <UMotorTest::estimateMotorParams()+0x130>)
    9d2e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9d32:	ed8d 5b04 	vstr	d5, [sp, #16]
    9d36:	ed8d 6b02 	vstr	d6, [sp, #8]
    9d3a:	ed8d 7b00 	vstr	d7, [sp]
    9d3e:	f011 fca9 	bl	1b694 <snprintf>
  usb.send(s);
    9d42:	a907      	add	r1, sp, #28
    9d44:	481b      	ldr	r0, [pc, #108]	; (9db4 <UMotorTest::estimateMotorParams()+0x12c>)
    9d46:	f002 fbe9 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "# UMotorTest:: motor %d, friction: static=%g Nm, dynamic=%g Nm/(rad/sec).\r\n",
    9d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d4c:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9d50:	a807      	add	r0, sp, #28
    9d52:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    9d56:	ed92 6a3e 	vldr	s12, [r2, #248]	; 0xf8
    9d5a:	ed92 7a42 	vldr	s14, [r2, #264]	; 0x108
    9d5e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9d62:	4a16      	ldr	r2, [pc, #88]	; (9dbc <UMotorTest::estimateMotorParams()+0x134>)
    9d64:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9d68:	ed8d 6b02 	vstr	d6, [sp, #8]
    9d6c:	ed8d 7b00 	vstr	d7, [sp]
    9d70:	f011 fc90 	bl	1b694 <snprintf>
  usb.send(s);
    9d74:	a907      	add	r1, sp, #28
    9d76:	480f      	ldr	r0, [pc, #60]	; (9db4 <UMotorTest::estimateMotorParams()+0x12c>)
    9d78:	f002 fbd0 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "# UMotorTest:: motor %d, inertia=%g kg m^2.\r\n",
    9d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d7e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9d82:	4a0f      	ldr	r2, [pc, #60]	; (9dc0 <UMotorTest::estimateMotorParams()+0x138>)
           testMotor, mInertia[testMotor]);
    9d84:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  snprintf(s, MSL, "# UMotorTest:: motor %d, inertia=%g kg m^2.\r\n",
    9d88:	a807      	add	r0, sp, #28
    9d8a:	ed94 7a46 	vldr	s14, [r4, #280]	; 0x118
    9d8e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9d92:	ed8d 7b00 	vstr	d7, [sp]
    9d96:	f011 fc7d 	bl	1b694 <snprintf>
  usb.send(s);
    9d9a:	a907      	add	r1, sp, #28
    9d9c:	4805      	ldr	r0, [pc, #20]	; (9db4 <UMotorTest::estimateMotorParams()+0x12c>)
    9d9e:	f002 fbbd 	bl	c51c <UUSB::send(char const*)>
}
    9da2:	b053      	add	sp, #332	; 0x14c
    9da4:	bd30      	pop	{r4, r5, pc}
    9da6:	4770      	bx	lr
    9da8:	3dcccccd 	.word	0x3dcccccd
    9dac:	3a83126f 	.word	0x3a83126f
    9db0:	20002ec4 	.word	0x20002ec4
    9db4:	2000eab8 	.word	0x2000eab8
    9db8:	20002f0c 	.word	0x20002f0c
    9dbc:	20002f5c 	.word	0x20002f5c
    9dc0:	20002fa8 	.word	0x20002fa8

00009dc4 <UMotorTest::getMotorTestLog()>:


void UMotorTest::getMotorTestLog()
{
    9dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const int MSL = 200;
  char s[MSL];
  usb.send("% Motor test log\r\n");
    9dc8:	4971      	ldr	r1, [pc, #452]	; (9f90 <UMotorTest::getMotorTestLog()+0x1cc>)
{
    9dca:	b0bf      	sub	sp, #252	; 0xfc
    9dcc:	4605      	mov	r5, r0
  usb.send("% Motor test log\r\n");
    9dce:	4871      	ldr	r0, [pc, #452]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9dd0:	f002 fba4 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 1 time stamp (sec)\r\n");
    9dd4:	4970      	ldr	r1, [pc, #448]	; (9f98 <UMotorTest::getMotorTestLog()+0x1d4>)
    9dd6:	486f      	ldr	r0, [pc, #444]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
  usb.send("% 14 estimated generated torque (Nm) after static friction\r\n");
  usb.send("% 15 estimated generated torque (Nm) after friction\r\n");
  usb.send("% 16 weight for J estimate\r\n");
  usb.send("% 17 estimated velocity\r\n");
  usb.send("% 18 motor index\r\n");
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9dd8:	2600      	movs	r6, #0
  usb.send("% 1 time stamp (sec)\r\n");
    9dda:	f002 fb9f 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 2 sample number\r\n");
    9dde:	496f      	ldr	r1, [pc, #444]	; (9f9c <UMotorTest::getMotorTestLog()+0x1d8>)
    9de0:	486c      	ldr	r0, [pc, #432]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9de2:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
    9de6:	f002 fb99 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 3 motor voltage (V)\r\n");
    9dea:	496d      	ldr	r1, [pc, #436]	; (9fa0 <UMotorTest::getMotorTestLog()+0x1dc>)
    9dec:	4869      	ldr	r0, [pc, #420]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9dee:	f002 fb95 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 4 motor current (Amps)\r\n");
    9df2:	496c      	ldr	r1, [pc, #432]	; (9fa4 <UMotorTest::getMotorTestLog()+0x1e0>)
    9df4:	4867      	ldr	r0, [pc, #412]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9df6:	f002 fb91 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 5 encoder position (ticks)\r\n");
    9dfa:	496b      	ldr	r1, [pc, #428]	; (9fa8 <UMotorTest::getMotorTestLog()+0x1e4>)
    9dfc:	4865      	ldr	r0, [pc, #404]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9dfe:	f002 fb8d 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 6 velocity (rad/s)\r\n");
    9e02:	496a      	ldr	r1, [pc, #424]	; (9fac <UMotorTest::getMotorTestLog()+0x1e8>)
    9e04:	4863      	ldr	r0, [pc, #396]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e06:	f002 fb89 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 7 Battery voltage (Volt)\r\n");
    9e0a:	4969      	ldr	r1, [pc, #420]	; (9fb0 <UMotorTest::getMotorTestLog()+0x1ec>)
    9e0c:	4861      	ldr	r0, [pc, #388]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e0e:	f002 fb85 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 8 System current (Amps)\r\n");
    9e12:	4968      	ldr	r1, [pc, #416]	; (9fb4 <UMotorTest::getMotorTestLog()+0x1f0>)
    9e14:	485f      	ldr	r0, [pc, #380]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e16:	f002 fb81 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 9 sample time (ms)\r\n");
    9e1a:	4967      	ldr	r1, [pc, #412]	; (9fb8 <UMotorTest::getMotorTestLog()+0x1f4>)
    9e1c:	485d      	ldr	r0, [pc, #372]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e1e:	f002 fb7d 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 10 Vm - Vemf\r\n");
    9e22:	4966      	ldr	r1, [pc, #408]	; (9fbc <UMotorTest::getMotorTestLog()+0x1f8>)
    9e24:	485b      	ldr	r0, [pc, #364]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e26:	f002 fb79 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 11 estmated current\r\n");
    9e2a:	4965      	ldr	r1, [pc, #404]	; (9fc0 <UMotorTest::getMotorTestLog()+0x1fc>)
    9e2c:	4859      	ldr	r0, [pc, #356]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e2e:	f002 fb75 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 12 Weight for R and L estimate\r\n");
    9e32:	4964      	ldr	r1, [pc, #400]	; (9fc4 <UMotorTest::getMotorTestLog()+0x200>)
    9e34:	4857      	ldr	r0, [pc, #348]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e36:	f002 fb71 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 13 estimated generated torque (Nm)\r\n");
    9e3a:	4963      	ldr	r1, [pc, #396]	; (9fc8 <UMotorTest::getMotorTestLog()+0x204>)
    9e3c:	4855      	ldr	r0, [pc, #340]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e3e:	f002 fb6d 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 14 estimated generated torque (Nm) after static friction\r\n");
    9e42:	4962      	ldr	r1, [pc, #392]	; (9fcc <UMotorTest::getMotorTestLog()+0x208>)
    9e44:	4853      	ldr	r0, [pc, #332]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e46:	f002 fb69 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 15 estimated generated torque (Nm) after friction\r\n");
    9e4a:	4961      	ldr	r1, [pc, #388]	; (9fd0 <UMotorTest::getMotorTestLog()+0x20c>)
    9e4c:	4851      	ldr	r0, [pc, #324]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e4e:	f002 fb65 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 16 weight for J estimate\r\n");
    9e52:	4960      	ldr	r1, [pc, #384]	; (9fd4 <UMotorTest::getMotorTestLog()+0x210>)
    9e54:	484f      	ldr	r0, [pc, #316]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e56:	f002 fb61 	bl	c51c <UUSB::send(char const*)>
  {
    snprintf(s, MSL, "%% M=%d,  Km = %g, Ra = %g, B = %g, S = %g, J = %g, L = %g\r\n",
    9e5a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9ff4 <UMotorTest::getMotorTestLog()+0x230>
  usb.send("% 17 estimated velocity\r\n");
    9e5e:	495e      	ldr	r1, [pc, #376]	; (9fd8 <UMotorTest::getMotorTestLog()+0x214>)
    9e60:	484c      	ldr	r0, [pc, #304]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
            i, mKonstant[i], mResistance[i], mFricDyn[i], mFricStat[i], mInertia[i], mInductance[i]);
    usb.send(s);
    9e62:	4f4c      	ldr	r7, [pc, #304]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
  usb.send("% 17 estimated velocity\r\n");
    9e64:	f002 fb5a 	bl	c51c <UUSB::send(char const*)>
  usb.send("% 18 motor index\r\n");
    9e68:	495c      	ldr	r1, [pc, #368]	; (9fdc <UMotorTest::getMotorTestLog()+0x218>)
    9e6a:	484a      	ldr	r0, [pc, #296]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9e6c:	f002 fb56 	bl	c51c <UUSB::send(char const*)>
    snprintf(s, MSL, "%% M=%d,  Km = %g, Ra = %g, B = %g, S = %g, J = %g, L = %g\r\n",
    9e70:	ed94 7a04 	vldr	s14, [r4, #16]
    9e74:	3404      	adds	r4, #4
    9e76:	ed14 5a01 	vldr	s10, [r4, #-4]
    9e7a:	21c8      	movs	r1, #200	; 0xc8
    9e7c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9e80:	ed94 6a07 	vldr	s12, [r4, #28]
    9e84:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9e88:	4633      	mov	r3, r6
    9e8a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9e8e:	4642      	mov	r2, r8
    9e90:	a80c      	add	r0, sp, #48	; 0x30
    9e92:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    9e96:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
    9e9a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9e9e:	ed8d 7b08 	vstr	d7, [sp, #32]
    9ea2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    9ea6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9eaa:	ed8d 7b06 	vstr	d7, [sp, #24]
    9eae:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    9eb2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9eb6:	ed8d 5b02 	vstr	d5, [sp, #8]
    9eba:	ed8d 6b00 	vstr	d6, [sp]
    9ebe:	ed8d 7b04 	vstr	d7, [sp, #16]
    9ec2:	f011 fbe7 	bl	1b694 <snprintf>
    usb.send(s);
    9ec6:	a90c      	add	r1, sp, #48	; 0x30
    9ec8:	4638      	mov	r0, r7
    9eca:	f002 fb27 	bl	c51c <UUSB::send(char const*)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9ece:	2e00      	cmp	r6, #0
    9ed0:	d05c      	beq.n	9f8c <UMotorTest::getMotorTestLog()+0x1c8>
  }
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9ed2:	2600      	movs	r6, #0
  {
    snprintf(s, MSL, "%% M=%d, enc0 = %lu, encEnd = %lu\n", i, mLog[0].mEncoder, mLog[mLogIndex-1].mEncoder);
    9ed4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 9ff8 <UMotorTest::getMotorTestLog()+0x234>
    usb.send(s);
    9ed8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9f94 <UMotorTest::getMotorTestLog()+0x1d0>
    snprintf(s, MSL, "%% M=%d, enc0 = %lu, encEnd = %lu\n", i, mLog[0].mEncoder, mLog[mLogIndex-1].mEncoder);
    9edc:	69ac      	ldr	r4, [r5, #24]
    9ede:	21c8      	movs	r1, #200	; 0xc8
    9ee0:	6caf      	ldr	r7, [r5, #72]	; 0x48
    9ee2:	4633      	mov	r3, r6
    9ee4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    9ee8:	464a      	mov	r2, r9
    9eea:	a80c      	add	r0, sp, #48	; 0x30
    9eec:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    9ef0:	f854 4c38 	ldr.w	r4, [r4, #-56]
    9ef4:	9401      	str	r4, [sp, #4]
    9ef6:	68fc      	ldr	r4, [r7, #12]
    9ef8:	9400      	str	r4, [sp, #0]
    9efa:	f011 fbcb 	bl	1b694 <snprintf>
    usb.send(s);
    9efe:	a90c      	add	r1, sp, #48	; 0x30
    9f00:	4640      	mov	r0, r8
    9f02:	f002 fb0b 	bl	c51c <UUSB::send(char const*)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9f06:	2e00      	cmp	r6, #0
    9f08:	d03e      	beq.n	9f88 <UMotorTest::getMotorTestLog()+0x1c4>
  }
  snprintf(s, MSL, "%% Time = %lu ms, Time End = %lu ms\n", mLog[0].mTime10us / 100, mLog[mLogIndex-1].mTime10us / 100);
    9f0a:	69a9      	ldr	r1, [r5, #24]
    9f0c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    9f0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    9f12:	6813      	ldr	r3, [r2, #0]
    9f14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    9f18:	4931      	ldr	r1, [pc, #196]	; (9fe0 <UMotorTest::getMotorTestLog()+0x21c>)
    9f1a:	f852 2c44 	ldr.w	r2, [r2, #-68]
    9f1e:	fba1 0202 	umull	r0, r2, r1, r2
    9f22:	a80c      	add	r0, sp, #48	; 0x30
    9f24:	fba1 1303 	umull	r1, r3, r1, r3
    9f28:	21c8      	movs	r1, #200	; 0xc8
    9f2a:	0952      	lsrs	r2, r2, #5
    9f2c:	095b      	lsrs	r3, r3, #5
    9f2e:	9200      	str	r2, [sp, #0]
    9f30:	4a2c      	ldr	r2, [pc, #176]	; (9fe4 <UMotorTest::getMotorTestLog()+0x220>)
    9f32:	f011 fbaf 	bl	1b694 <snprintf>
  usb.send(s);
    9f36:	a90c      	add	r1, sp, #48	; 0x30
    9f38:	4816      	ldr	r0, [pc, #88]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f3a:	f002 faef 	bl	c51c <UUSB::send(char const*)>
  snprintf(s, MSL, "%% Pulses per revolution=%d\n", encoder.pulsPerRev);
    9f3e:	4b2a      	ldr	r3, [pc, #168]	; (9fe8 <UMotorTest::getMotorTestLog()+0x224>)
    9f40:	4a2a      	ldr	r2, [pc, #168]	; (9fec <UMotorTest::getMotorTestLog()+0x228>)
    9f42:	21c8      	movs	r1, #200	; 0xc8
    9f44:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
    9f48:	a80c      	add	r0, sp, #48	; 0x30
    9f4a:	f011 fba3 	bl	1b694 <snprintf>
  usb.send(s);
    9f4e:	a90c      	add	r1, sp, #48	; 0x30
    9f50:	4810      	ldr	r0, [pc, #64]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f52:	f002 fae3 	bl	c51c <UUSB::send(char const*)>
  if (mLogIndex == 0 or mLog == nullptr)
    9f56:	69ab      	ldr	r3, [r5, #24]
    9f58:	b17b      	cbz	r3, 9f7a <UMotorTest::getMotorTestLog()+0x1b6>
    9f5a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    9f5c:	b16b      	cbz	r3, 9f7a <UMotorTest::getMotorTestLog()+0x1b6>
  }
  else
  {
    motorTestGetIndex = 0;
    motorTestGetLog = true;
    logStartTime = mLog[0].mTime10us;
    9f5e:	6819      	ldr	r1, [r3, #0]
    motorTestGetIndex = 0;
    9f60:	2200      	movs	r2, #0
    valL = 0;
    9f62:	2300      	movs	r3, #0
    motorTestGetLog = true;
    9f64:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
    logStartTime = mLog[0].mTime10us;
    9f68:	62e9      	str	r1, [r5, #44]	; 0x2c
    valL = 0;
    9f6a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
    motorTestGetIndex = 0;
    9f6e:	656a      	str	r2, [r5, #84]	; 0x54
    valR = 0;
    9f70:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
  }
}
    9f74:	b03f      	add	sp, #252	; 0xfc
    9f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    usb.send("%\n% Log empty\n");
    9f7a:	491d      	ldr	r1, [pc, #116]	; (9ff0 <UMotorTest::getMotorTestLog()+0x22c>)
    9f7c:	4805      	ldr	r0, [pc, #20]	; (9f94 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f7e:	f002 facd 	bl	c51c <UUSB::send(char const*)>
}
    9f82:	b03f      	add	sp, #252	; 0xfc
    9f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9f88:	2601      	movs	r6, #1
    9f8a:	e7a7      	b.n	9edc <UMotorTest::getMotorTestLog()+0x118>
    9f8c:	2601      	movs	r6, #1
    9f8e:	e76f      	b.n	9e70 <UMotorTest::getMotorTestLog()+0xac>
    9f90:	20002bc8 	.word	0x20002bc8
    9f94:	2000eab8 	.word	0x2000eab8
    9f98:	20002bdc 	.word	0x20002bdc
    9f9c:	20002bf4 	.word	0x20002bf4
    9fa0:	20002c08 	.word	0x20002c08
    9fa4:	20002c20 	.word	0x20002c20
    9fa8:	20002c3c 	.word	0x20002c3c
    9fac:	20002c5c 	.word	0x20002c5c
    9fb0:	20002c74 	.word	0x20002c74
    9fb4:	20002c94 	.word	0x20002c94
    9fb8:	20002cb0 	.word	0x20002cb0
    9fbc:	20002cc8 	.word	0x20002cc8
    9fc0:	20002cdc 	.word	0x20002cdc
    9fc4:	20002cf4 	.word	0x20002cf4
    9fc8:	20002d18 	.word	0x20002d18
    9fcc:	20002d40 	.word	0x20002d40
    9fd0:	20002d80 	.word	0x20002d80
    9fd4:	20002db8 	.word	0x20002db8
    9fd8:	20002dd8 	.word	0x20002dd8
    9fdc:	20002df4 	.word	0x20002df4
    9fe0:	51eb851f 	.word	0x51eb851f
    9fe4:	20002e6c 	.word	0x20002e6c
    9fe8:	2000dc34 	.word	0x2000dc34
    9fec:	20002e94 	.word	0x20002e94
    9ff0:	20002eb4 	.word	0x20002eb4
    9ff4:	20002e08 	.word	0x20002e08
    9ff8:	20002e48 	.word	0x20002e48
    9ffc:	00000000 	.word	0x00000000

0000a000 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)>:

void UMotorTest::send(UMotorTestMeasurementData * d, int j, uint32_t logStart)
{
  const int MSL = 400;
  char s[MSL];
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a000:	ed91 6a10 	vldr	s12, [r1, #64]	; 0x40
            float(d->mTime10us - logStart) / 100000.0, j,
            d->mVoltage, d->mCurrent, int32_t(d->mEncoder), d->velocity,
            d->batVolt, d->sysCurrent,
            d->e_dt*1000, d->e_dif, d->e_current, d->weightCurrent, d->e_tau0, d->e_tau1, d->e_tau2, d->weightInertia, d->e_vel, testMotor);
    a004:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a008:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
            d->e_dt*1000, d->e_dif, d->e_current, d->weightCurrent, d->e_tau0, d->e_tau1, d->e_tau2, d->weightInertia, d->e_vel, testMotor);
    a00c:	eddf 7a3e 	vldr	s15, [pc, #248]	; a108 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x108>
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a010:	ed91 0a0b 	vldr	s0, [r1, #44]	; 0x2c
            d->e_dt*1000, d->e_dif, d->e_current, d->weightCurrent, d->e_tau0, d->e_tau1, d->e_tau2, d->weightInertia, d->e_vel, testMotor);
    a014:	ee27 7a27 	vmul.f32	s14, s14, s15
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a018:	ed91 1a06 	vldr	s2, [r1, #24]
    a01c:	ed91 3a05 	vldr	s6, [r1, #20]
    a020:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    a024:	ed91 4a04 	vldr	s8, [r1, #16]
    a028:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    a02c:	ed91 5a02 	vldr	s10, [r1, #8]
    a030:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    a034:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    a038:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    a03c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    a040:	b510      	push	{r4, lr}
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a042:	6a84      	ldr	r4, [r0, #40]	; 0x28
    a044:	68c8      	ldr	r0, [r1, #12]
{
    a046:	ed2d 8b0c 	vpush	{d8-d13}
    a04a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a04e:	ed91 da08 	vldr	s26, [r1, #32]
    a052:	ed91 ca0f 	vldr	s24, [r1, #60]	; 0x3c
    a056:	ed91 ba0e 	vldr	s22, [r1, #56]	; 0x38
    a05a:	eeb7 dacd 	vcvt.f64.f32	d13, s26
    a05e:	ed91 aa0d 	vldr	s20, [r1, #52]	; 0x34
    a062:	eeb7 cacc 	vcvt.f64.f32	d12, s24
    a066:	ed91 9a07 	vldr	s18, [r1, #28]
    a06a:	eeb7 bacb 	vcvt.f64.f32	d11, s22
    a06e:	ed91 8a0c 	vldr	s16, [r1, #48]	; 0x30
    a072:	eeb7 aaca 	vcvt.f64.f32	d10, s20
    a076:	9422      	str	r4, [sp, #136]	; 0x88
    a078:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
    a07c:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    a080:	ed8d 6b20 	vstr	d6, [sp, #128]	; 0x80
    a084:	ed91 6a01 	vldr	s12, [r1, #4]
    a088:	9008      	str	r0, [sp, #32]
    a08a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a08e:	ed8d 0b12 	vstr	d0, [sp, #72]	; 0x48
    a092:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    a096:	ed8d 1b0e 	vstr	d1, [sp, #56]	; 0x38
    a09a:	ed8d 3b0c 	vstr	d3, [sp, #48]	; 0x30
    a09e:	ed8d 4b0a 	vstr	d4, [sp, #40]	; 0x28
    a0a2:	ed8d db1e 	vstr	d13, [sp, #120]	; 0x78
    a0a6:	ed8d cb1c 	vstr	d12, [sp, #112]	; 0x70
    a0aa:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
    a0ae:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
    a0b2:	ed8d 9b16 	vstr	d9, [sp, #88]	; 0x58
    a0b6:	ed8d 8b14 	vstr	d8, [sp, #80]	; 0x50
    a0ba:	ed8d 5b06 	vstr	d5, [sp, #24]
    a0be:	ed8d 6b04 	vstr	d6, [sp, #16]
    a0c2:	9202      	str	r2, [sp, #8]
            float(d->mTime10us - logStart) / 100000.0, j,
    a0c4:	6808      	ldr	r0, [r1, #0]
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a0c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
    a0ca:	4a10      	ldr	r2, [pc, #64]	; (a10c <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x10c>)
            float(d->mTime10us - logStart) / 100000.0, j,
    a0cc:	1ac3      	subs	r3, r0, r3
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a0ce:	a824      	add	r0, sp, #144	; 0x90
            float(d->mTime10us - logStart) / 100000.0, j,
    a0d0:	ee07 3a10 	vmov	s14, r3
    a0d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a0d8:	ed9f 2b09 	vldr	d2, [pc, #36]	; a100 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x100>
            float(d->mTime10us - logStart) / 100000.0, j,
    a0dc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a0e0:	ee87 6b02 	vdiv.f64	d6, d7, d2
    a0e4:	ed8d 6b00 	vstr	d6, [sp]
    a0e8:	f011 fad4 	bl	1b694 <snprintf>
  usb.send(s);
    a0ec:	a924      	add	r1, sp, #144	; 0x90
    a0ee:	4808      	ldr	r0, [pc, #32]	; (a110 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x110>)
    a0f0:	f002 fa14 	bl	c51c <UUSB::send(char const*)>
}
    a0f4:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
    a0f8:	ecbd 8b0c 	vpop	{d8-d13}
    a0fc:	bd10      	pop	{r4, pc}
    a0fe:	bf00      	nop
    a100:	00000000 	.word	0x00000000
    a104:	40f86a00 	.word	0x40f86a00
    a108:	447a0000 	.word	0x447a0000
    a10c:	20002ffc 	.word	0x20002ffc
    a110:	2000eab8 	.word	0x2000eab8

0000a114 <UMotorTest::tick()>:
{ //
    a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (mLogIndex == 0 and motorTestRunning)
    a116:	6985      	ldr	r5, [r0, #24]
{ //
    a118:	4604      	mov	r4, r0
  if (mLogIndex == 0 and motorTestRunning)
    a11a:	2d00      	cmp	r5, #0
    a11c:	d141      	bne.n	a1a2 <UMotorTest::tick()+0x8e>
    a11e:	7d03      	ldrb	r3, [r0, #20]
    a120:	b99b      	cbnz	r3, a14a <UMotorTest::tick()+0x36>
  else if (motorTestGetLog)
    a122:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    a126:	b163      	cbz	r3, a142 <UMotorTest::tick()+0x2e>
    if (motorTestGetIndex >= (mLogIndex - 35))
    a128:	69a3      	ldr	r3, [r4, #24]
    a12a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    a12c:	3b23      	subs	r3, #35	; 0x23
    a12e:	429a      	cmp	r2, r3
    a130:	f2c0 80bf 	blt.w	a2b2 <UMotorTest::tick()+0x19e>
      motorTestGetLog = false;
    a134:	2300      	movs	r3, #0
      usb.send("logend\n");
    a136:	4990      	ldr	r1, [pc, #576]	; (a378 <UMotorTest::tick()+0x264>)
    a138:	4890      	ldr	r0, [pc, #576]	; (a37c <UMotorTest::tick()+0x268>)
      motorTestGetLog = false;
    a13a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      usb.send("logend\n");
    a13e:	f002 f9ed 	bl	c51c <UUSB::send(char const*)>
  tickCnt++;
    a142:	6a23      	ldr	r3, [r4, #32]
    a144:	3301      	adds	r3, #1
    a146:	6223      	str	r3, [r4, #32]
}
    a148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    logger.stopLogging();
    a14a:	4f8d      	ldr	r7, [pc, #564]	; (a380 <UMotorTest::tick()+0x26c>)
}

void UMotorTest::clear(UMotorTestMeasurementData * d)
{
  d->mTime10us = 0;
  d->mVoltage = 0;
    a14c:	2600      	movs	r6, #0
    logger.stopLogging();
    a14e:	4638      	mov	r0, r7
    a150:	f7fc ff52 	bl	6ff8 <ULog::stopLogging()>
    mLog = (UMotorTestMeasurementData *)logger.logBuffer;
    a154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    logger.logRowCnt = 0;
    a156:	617d      	str	r5, [r7, #20]
    motor.motorSetEnable(1,1);
    a158:	2201      	movs	r2, #1
    mLog = (UMotorTestMeasurementData *)logger.logBuffer;
    a15a:	64a3      	str	r3, [r4, #72]	; 0x48
    motor.motorSetEnable(1,1);
    a15c:	4f89      	ldr	r7, [pc, #548]	; (a384 <UMotorTest::tick()+0x270>)
    a15e:	4611      	mov	r1, r2
  d->mTime10us = 0;
    a160:	601d      	str	r5, [r3, #0]
  d->mVoltage = 0;
    a162:	605e      	str	r6, [r3, #4]
    motor.motorSetEnable(1,1);
    a164:	4638      	mov	r0, r7
  d->mCurrent = 0;
    a166:	609e      	str	r6, [r3, #8]
  d->mEncoder = 0;
    a168:	60dd      	str	r5, [r3, #12]
  d->velocity = 0;
    a16a:	611e      	str	r6, [r3, #16]
  d->batVolt = 0;
    a16c:	615e      	str	r6, [r3, #20]
  d->sysCurrent = 0;
    a16e:	619e      	str	r6, [r3, #24]
  d->e_dt = 0;
    a170:	625e      	str	r6, [r3, #36]	; 0x24
  d->e_denc = 0;
    a172:	629d      	str	r5, [r3, #40]	; 0x28
  d->e_dif = 0; // Voltage - emf
    a174:	62de      	str	r6, [r3, #44]	; 0x2c
  d->e_current = 0; // estimated current
    a176:	631e      	str	r6, [r3, #48]	; 0x30
  d->e_tau0 = 0; // generated
    a178:	635e      	str	r6, [r3, #52]	; 0x34
  d->e_tau1 = 0; // after static friction
    a17a:	639e      	str	r6, [r3, #56]	; 0x38
  d->e_tau2 = 0; // after dyn friction
    a17c:	63de      	str	r6, [r3, #60]	; 0x3c
  d->e_vel = 0;  // estimate velocity
    a17e:	641e      	str	r6, [r3, #64]	; 0x40
    mLogIndexMax = LOG_BUFFER_MAX / sizeof(UMotorTestMeasurementData) - 1;
    a180:	f640 635b 	movw	r3, #3675	; 0xe5b
    motorTestEnd = false;
    a184:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    mLogIndexMax = LOG_BUFFER_MAX / sizeof(UMotorTestMeasurementData) - 1;
    a188:	64e3      	str	r3, [r4, #76]	; 0x4c
    tickCnt = 0;
    a18a:	6225      	str	r5, [r4, #32]
    testState = MS_OFFSET;
    a18c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    motor.motorSetEnable(1,1);
    a190:	f7fe faa4 	bl	86dc <UMotor::motorSetEnable(bool, bool)>
      encoderStart[i] = encoder.encoder[i];
    a194:	4b7c      	ldr	r3, [pc, #496]	; (a388 <UMotorTest::tick()+0x274>)
      motor.motorVoltage[i] = 0;
    a196:	61be      	str	r6, [r7, #24]
      encoderStart[i] = encoder.encoder[i];
    a198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      motor.motorVoltage[i] = 0;
    a19a:	61fe      	str	r6, [r7, #28]
      encoderStart[i] = encoder.encoder[i];
    a19c:	6322      	str	r2, [r4, #48]	; 0x30
    a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a1a0:	6363      	str	r3, [r4, #52]	; 0x34
  if (motorTestRunning)
    a1a2:	7d23      	ldrb	r3, [r4, #20]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d0bc      	beq.n	a122 <UMotorTest::tick()+0xe>
    if (testState == MS_OFFSET)
    a1a8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    a1ac:	b913      	cbnz	r3, a1b4 <UMotorTest::tick()+0xa0>
      testState = MS_OFF;
    a1ae:	2301      	movs	r3, #1
    a1b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (mLogIndex < mLogIndexMax and mLog != nullptr)
    a1b4:	69a3      	ldr	r3, [r4, #24]
    a1b6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    a1b8:	4293      	cmp	r3, r2
    a1ba:	da54      	bge.n	a266 <UMotorTest::tick()+0x152>
    a1bc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    a1be:	2e00      	cmp	r6, #0
    a1c0:	d051      	beq.n	a266 <UMotorTest::tick()+0x152>
      mLog[mLogIndex].mTime10us = micros();
    a1c2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    a1c6:	009d      	lsls	r5, r3, #2
    a1c8:	f00b fe5e 	bl	15e88 <micros>
      mLog[mLogIndex].mCurrent  = current.motorCurrentA[testMotor];
    a1cc:	69a3      	ldr	r3, [r4, #24]
    a1ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a1d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
      mLog[mLogIndex].mTime10us = micros();
    a1d4:	5170      	str	r0, [r6, r5]
      mLog[mLogIndex].mCurrent  = current.motorCurrentA[testMotor];
    a1d6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    a1d8:	486c      	ldr	r0, [pc, #432]	; (a38c <UMotorTest::tick()+0x278>)
    a1da:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    a1de:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    a1e2:	695b      	ldr	r3, [r3, #20]
    a1e4:	60ab      	str	r3, [r5, #8]
      mLog[mLogIndex].mVoltage = motor.motorVoltage[testMotor];
    a1e6:	4b67      	ldr	r3, [pc, #412]	; (a384 <UMotorTest::tick()+0x270>)
    a1e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a1ec:	699b      	ldr	r3, [r3, #24]
    a1ee:	606b      	str	r3, [r5, #4]
      mLog[mLogIndex].mEncoder = encoder.encoder[testMotor];
    a1f0:	4b65      	ldr	r3, [pc, #404]	; (a388 <UMotorTest::tick()+0x274>)
    a1f2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    a1f6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
      mLog[mLogIndex].velocity = encoder.motorVelocity[testMotor];
    a1f8:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
      mLog[mLogIndex].mEncoder = encoder.encoder[testMotor];
    a1fc:	60ea      	str	r2, [r5, #12]
      mLog[mLogIndex].velocity = encoder.motorVelocity[testMotor];
    a1fe:	612b      	str	r3, [r5, #16]
      mLog[mLogIndex].sysCurrent = current.getSupplyCurrent();
    a200:	f7f8 fb6e 	bl	28e0 <UCurrent::getSupplyCurrent()>
      mLog[mLogIndex].batVolt = robot.batteryVoltage;
    a204:	69a3      	ldr	r3, [r4, #24]
    a206:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    a208:	eb03 1003 	add.w	r0, r3, r3, lsl #4
    a20c:	4a60      	ldr	r2, [pc, #384]	; (a390 <UMotorTest::tick()+0x27c>)
      mLog[mLogIndex].sysCurrent = current.getSupplyCurrent();
    a20e:	ed85 0a06 	vstr	s0, [r5, #24]
      mLogIndex++;
    a212:	3301      	adds	r3, #1
      mLog[mLogIndex].batVolt = robot.batteryVoltage;
    a214:	0081      	lsls	r1, r0, #2
    a216:	6955      	ldr	r5, [r2, #20]
    a218:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  d->mVoltage = 0;
    a21c:	2200      	movs	r2, #0
      clear(&mLog[mLogIndex]);
    a21e:	3144      	adds	r1, #68	; 0x44
      mLog[mLogIndex].batVolt = robot.batteryVoltage;
    a220:	6145      	str	r5, [r0, #20]
  d->mTime10us = 0;
    a222:	2000      	movs	r0, #0
      mLogIndex++;
    a224:	61a3      	str	r3, [r4, #24]
      clear(&mLog[mLogIndex]);
    a226:	1873      	adds	r3, r6, r1
  d->mTime10us = 0;
    a228:	5070      	str	r0, [r6, r1]
  d->mVoltage = 0;
    a22a:	605a      	str	r2, [r3, #4]
  d->mCurrent = 0;
    a22c:	609a      	str	r2, [r3, #8]
  d->velocity = 0;
    a22e:	611a      	str	r2, [r3, #16]
  d->batVolt = 0;
    a230:	615a      	str	r2, [r3, #20]
  d->sysCurrent = 0;
    a232:	619a      	str	r2, [r3, #24]
  d->e_dt = 0;
    a234:	625a      	str	r2, [r3, #36]	; 0x24
  d->e_dif = 0; // Voltage - emf
    a236:	62da      	str	r2, [r3, #44]	; 0x2c
  d->e_current = 0; // estimated current
    a238:	631a      	str	r2, [r3, #48]	; 0x30
  d->e_tau0 = 0; // generated
    a23a:	635a      	str	r2, [r3, #52]	; 0x34
  d->e_tau1 = 0; // after static friction
    a23c:	639a      	str	r2, [r3, #56]	; 0x38
  d->e_tau2 = 0; // after dyn friction
    a23e:	63da      	str	r2, [r3, #60]	; 0x3c
  d->e_vel = 0;  // estimate velocity
    a240:	641a      	str	r2, [r3, #64]	; 0x40
  d->mEncoder = 0;
    a242:	60d8      	str	r0, [r3, #12]
    if (tickCnt > stateLength or (testState == MS_OFF and tickCnt > 120))
    a244:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  d->e_denc = 0;
    a246:	6298      	str	r0, [r3, #40]	; 0x28
    if (tickCnt > stateLength or (testState == MS_OFF and tickCnt > 120))
    a248:	6a23      	ldr	r3, [r4, #32]
    a24a:	4293      	cmp	r3, r2
    a24c:	dd16      	ble.n	a27c <UMotorTest::tick()+0x168>
      switch (testState)
    a24e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
      tickCnt = 0;
    a252:	2200      	movs	r2, #0
      switch (testState)
    a254:	3b01      	subs	r3, #1
      tickCnt = 0;
    a256:	6222      	str	r2, [r4, #32]
      switch (testState)
    a258:	2b03      	cmp	r3, #3
    a25a:	f200 8086 	bhi.w	a36a <UMotorTest::tick()+0x256>
    a25e:	e8df f003 	tbb	[pc, r3]
    a262:	556f      	.short	0x556f
    a264:	3847      	.short	0x3847
      motorTestEnd = true;
    a266:	2301      	movs	r3, #1
      usb.send("# motor test log is full (or no buffer)\n");
    a268:	494a      	ldr	r1, [pc, #296]	; (a394 <UMotorTest::tick()+0x280>)
    a26a:	4844      	ldr	r0, [pc, #272]	; (a37c <UMotorTest::tick()+0x268>)
      motorTestEnd = true;
    a26c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      usb.send("# motor test log is full (or no buffer)\n");
    a270:	f002 f954 	bl	c51c <UUSB::send(char const*)>
    if (tickCnt > stateLength or (testState == MS_OFF and tickCnt > 120))
    a274:	6a23      	ldr	r3, [r4, #32]
    a276:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    a278:	4293      	cmp	r3, r2
    a27a:	dce8      	bgt.n	a24e <UMotorTest::tick()+0x13a>
    a27c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
    a280:	2a01      	cmp	r2, #1
    a282:	d101      	bne.n	a288 <UMotorTest::tick()+0x174>
    a284:	2b78      	cmp	r3, #120	; 0x78
    a286:	dc59      	bgt.n	a33c <UMotorTest::tick()+0x228>
    if (motorTestEnd)
    a288:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    a28c:	2b00      	cmp	r3, #0
    a28e:	f43f af58 	beq.w	a142 <UMotorTest::tick()+0x2e>
      motor.motorVoltage[0] = 0;
    a292:	2300      	movs	r3, #0
      motorTestRunning = false;
    a294:	2200      	movs	r2, #0
      motor.motorVoltage[0] = 0;
    a296:	483b      	ldr	r0, [pc, #236]	; (a384 <UMotorTest::tick()+0x270>)
      motorTestRunning = false;
    a298:	7522      	strb	r2, [r4, #20]
      motor.motorSetEnable(0,0);
    a29a:	4611      	mov	r1, r2
      motor.motorVoltage[0] = 0;
    a29c:	6183      	str	r3, [r0, #24]
      motor.motorVoltage[1] = 0;
    a29e:	61c3      	str	r3, [r0, #28]
      motor.motorSetEnable(0,0);
    a2a0:	f7fe fa1c 	bl	86dc <UMotor::motorSetEnable(bool, bool)>
      estimateMotorParams();
    a2a4:	4620      	mov	r0, r4
    a2a6:	f7ff fcef 	bl	9c88 <UMotorTest::estimateMotorParams()>
  tickCnt++;
    a2aa:	6a23      	ldr	r3, [r4, #32]
    a2ac:	3301      	adds	r3, #1
    a2ae:	6223      	str	r3, [r4, #32]
}
    a2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    send(&mLog[motorTestGetIndex], motorTestGetIndex, logStartTime);
    a2b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a2b4:	eb02 1102 	add.w	r1, r2, r2, lsl #4
    a2b8:	4620      	mov	r0, r4
    a2ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a2be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a2c0:	f7ff fe9e 	bl	a000 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)>
      motorTestGetIndex++;
    a2c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a2c6:	3301      	adds	r3, #1
    a2c8:	6563      	str	r3, [r4, #84]	; 0x54
  tickCnt++;
    a2ca:	6a23      	ldr	r3, [r4, #32]
    a2cc:	3301      	adds	r3, #1
    a2ce:	6223      	str	r3, [r4, #32]
}
    a2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          rightTestIndex[5] = mLogIndex - 1; // end of high
    a2d2:	69a2      	ldr	r2, [r4, #24]
          testState = MS_ROLL_OFF;
    a2d4:	2005      	movs	r0, #5
          motor.motorVoltage[0 + testMotor] = 0;
    a2d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          rightTestIndex[5] = mLogIndex - 1; // end of high
    a2d8:	3a01      	subs	r2, #1
          motor.motorVoltage[0 + testMotor] = 0;
    a2da:	4b2a      	ldr	r3, [pc, #168]	; (a384 <UMotorTest::tick()+0x270>)
          testState = MS_ROLL_OFF;
    a2dc:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          rightTestIndex[5] = mLogIndex - 1; // end of high
    a2e0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
          motor.motorVoltage[0 + testMotor] = 0;
    a2e4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a2e8:	2200      	movs	r2, #0
    a2ea:	6182      	str	r2, [r0, #24]
          motor.motorVoltage[1 + testMotor] = 0;
    a2ec:	61c2      	str	r2, [r0, #28]
          break;
    a2ee:	e7cb      	b.n	a288 <UMotorTest::tick()+0x174>
          leftTestIndex[5] = mLogIndex - 1; // end of low
    a2f0:	69a2      	ldr	r2, [r4, #24]
          testState = MS_LEND;
    a2f2:	2004      	movs	r0, #4
          motor.motorVoltage[testMotor] = 0;
    a2f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    a2f6:	4b23      	ldr	r3, [pc, #140]	; (a384 <UMotorTest::tick()+0x270>)
          leftTestIndex[5] = mLogIndex - 1; // end of low
    a2f8:	3a01      	subs	r2, #1
          testState = MS_LEND;
    a2fa:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          motor.motorVoltage[testMotor] = 0;
    a2fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    a302:	2100      	movs	r1, #0
          leftTestIndex[5] = mLogIndex - 1; // end of low
    a304:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          motor.motorVoltage[testMotor] = 0;
    a308:	6199      	str	r1, [r3, #24]
          break;
    a30a:	e7bd      	b.n	a288 <UMotorTest::tick()+0x174>
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a30c:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
          testState = MS_LHIGH;
    a310:	2003      	movs	r0, #3
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a312:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
          leftTestIndex[2] = mLogIndex - 1; // end of low
    a316:	69a1      	ldr	r1, [r4, #24]
          leftTestIndex[4] = mLogIndex + steadyStateTime; // start of SS
    a318:	6e23      	ldr	r3, [r4, #96]	; 0x60
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a31a:	ee67 7a87 	vmul.f32	s15, s15, s14
    a31e:	4a19      	ldr	r2, [pc, #100]	; (a384 <UMotorTest::tick()+0x270>)
    a320:	6aa5      	ldr	r5, [r4, #40]	; 0x28
          leftTestIndex[4] = mLogIndex + steadyStateTime; // start of SS
    a322:	440b      	add	r3, r1
          testState = MS_LHIGH;
    a324:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          leftTestIndex[2] = mLogIndex - 1; // end of low
    a328:	1e48      	subs	r0, r1, #1
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a32a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
          leftTestIndex[4] = mLogIndex + steadyStateTime; // start of SS
    a32e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          leftTestIndex[2] = mLogIndex - 1; // end of low
    a332:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a336:	edc2 7a06 	vstr	s15, [r2, #24]
          break;
    a33a:	e7a5      	b.n	a288 <UMotorTest::tick()+0x174>
      tickCnt = 0;
    a33c:	2300      	movs	r3, #0
    a33e:	6223      	str	r3, [r4, #32]
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a340:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
          testState = MS_LLOW;
    a344:	2002      	movs	r0, #2
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a346:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
          leftTestIndex[0] = mLogIndex;
    a34a:	69a1      	ldr	r1, [r4, #24]
          leftTestIndex[1] = mLogIndex + steadyStateTime;
    a34c:	6e23      	ldr	r3, [r4, #96]	; 0x60
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a34e:	ee67 7a87 	vmul.f32	s15, s15, s14
    a352:	4a0c      	ldr	r2, [pc, #48]	; (a384 <UMotorTest::tick()+0x270>)
    a354:	6aa5      	ldr	r5, [r4, #40]	; 0x28
          leftTestIndex[1] = mLogIndex + steadyStateTime;
    a356:	440b      	add	r3, r1
          testState = MS_LLOW;
    a358:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a35c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
          leftTestIndex[0] = mLogIndex;
    a360:	6721      	str	r1, [r4, #112]	; 0x70
          leftTestIndex[1] = mLogIndex + steadyStateTime;
    a362:	6763      	str	r3, [r4, #116]	; 0x74
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a364:	edc2 7a06 	vstr	s15, [r2, #24]
          break;
    a368:	e78e      	b.n	a288 <UMotorTest::tick()+0x174>
          motorTestEnd = true;
    a36a:	2201      	movs	r2, #1
          testState = MS_END;
    a36c:	2306      	movs	r3, #6
          motorTestEnd = true;
    a36e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          testState = MS_END;
    a372:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (motorTestEnd)
    a376:	e78c      	b.n	a292 <UMotorTest::tick()+0x17e>
    a378:	20003074 	.word	0x20003074
    a37c:	2000eab8 	.word	0x2000eab8
    a380:	2000e240 	.word	0x2000e240
    a384:	2000e4bc 	.word	0x2000e4bc
    a388:	2000dc34 	.word	0x2000dc34
    a38c:	2000da90 	.word	0x2000da90
    a390:	2000e654 	.word	0x2000e654
    a394:	20003048 	.word	0x20003048

0000a398 <_GLOBAL__sub_I_motortest>:
  clearEsimate(d);
}
    a398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a39c:	4c36      	ldr	r4, [pc, #216]	; (a478 <_GLOBAL__sub_I_motortest+0xe0>)
    a39e:	f04f 0832 	mov.w	r8, #50	; 0x32
    a3a2:	4d36      	ldr	r5, [pc, #216]	; (a47c <_GLOBAL__sub_I_motortest+0xe4>)
    a3a4:	4620      	mov	r0, r4
    a3a6:	f001 fec7 	bl	c138 <USubss::USubss()>
    a3aa:	f8a4 801e 	strh.w	r8, [r4, #30]
    a3ae:	4a34      	ldr	r2, [pc, #208]	; (a480 <_GLOBAL__sub_I_motortest+0xe8>)
    a3b0:	f04f 0801 	mov.w	r8, #1
    a3b4:	2300      	movs	r3, #0
    a3b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    a3ba:	6662      	str	r2, [r4, #100]	; 0x64
    a3bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a3c0:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
    a3c4:	f04f 08c8 	mov.w	r8, #200	; 0xc8
    a3c8:	492e      	ldr	r1, [pc, #184]	; (a484 <_GLOBAL__sub_I_motortest+0xec>)
    a3ca:	66e0      	str	r0, [r4, #108]	; 0x6c
UMotorTest motortest;
    a3cc:	4620      	mov	r0, r4
    a3ce:	6021      	str	r1, [r4, #0]
    a3d0:	7523      	strb	r3, [r4, #20]
    a3d2:	61a3      	str	r3, [r4, #24]
    a3d4:	7723      	strb	r3, [r4, #28]
    a3d6:	6323      	str	r3, [r4, #48]	; 0x30
    a3d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    a3dc:	f8c4 3041 	str.w	r3, [r4, #65]	; 0x41
    a3e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    a3e4:	6563      	str	r3, [r4, #84]	; 0x54
    a3e6:	66a5      	str	r5, [r4, #104]	; 0x68
    a3e8:	6723      	str	r3, [r4, #112]	; 0x70
    a3ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    a3ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    a3f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    a3f4:	4924      	ldr	r1, [pc, #144]	; (a488 <_GLOBAL__sub_I_motortest+0xf0>)
    a3f6:	e9c4 2817 	strd	r2, r8, [r4, #92]	; 0x5c
    a3fa:	e9c4 3308 	strd	r3, r3, [r4, #32]
    a3fe:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    a402:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    a406:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    a40a:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
    a40e:	e9c4 331f 	strd	r3, r3, [r4, #124]	; 0x7c
    a412:	4a1e      	ldr	r2, [pc, #120]	; (a48c <_GLOBAL__sub_I_motortest+0xf4>)
    a414:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    a418:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    a41c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    a420:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    a424:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    a428:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    a42c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    a430:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    a434:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    a438:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
    a43c:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
    a440:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
    a444:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
    a448:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
    a44c:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
    a450:	e9c4 333a 	strd	r3, r3, [r4, #232]	; 0xe8
    a454:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
    a458:	e9c4 333e 	strd	r3, r3, [r4, #248]	; 0xf8
    a45c:	e9c4 3340 	strd	r3, r3, [r4, #256]	; 0x100
    a460:	e9c4 3342 	strd	r3, r3, [r4, #264]	; 0x108
    a464:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
    a468:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
    a46c:	e9c4 3348 	strd	r3, r3, [r4, #288]	; 0x120
}
    a470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
UMotorTest motortest;
    a474:	f00e bd40 	b.w	18ef8 <__aeabi_atexit>
    a478:	2000e518 	.word	0x2000e518
    a47c:	41100000 	.word	0x41100000
    a480:	40400000 	.word	0x40400000
    a484:	20007d80 	.word	0x20007d80
    a488:	0000912d 	.word	0x0000912d
    a48c:	20008f08 	.word	0x20008f08

0000a490 <URobot::sendHelp()>:
  usb.send(reply);
}


void URobot::sendHelp()
{
    a490:	b570      	push	{r4, r5, r6, lr}
  const int MRL = 150;
  char reply[MRL];
  usb.send("# Robot settings -------\r\n");
    a492:	4e3a      	ldr	r6, [pc, #232]	; (a57c <URobot::sendHelp()+0xec>)
{
    a494:	b0a6      	sub	sp, #152	; 0x98
    a496:	4604      	mov	r4, r0
  usb.send("# Robot settings -------\r\n");
    a498:	4939      	ldr	r1, [pc, #228]	; (a580 <URobot::sendHelp()+0xf0>)
    a49a:	4630      	mov	r0, r6
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tsetid string \tSet device type to string (< 32 chars, is=%s).\r\n", deviceName);
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tsethw N \tSet hardware version (is = %d, part of hbt).\r\n", robotHWversion);
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a49c:	4d39      	ldr	r5, [pc, #228]	; (a584 <URobot::sendHelp()+0xf4>)
  usb.send("# Robot settings -------\r\n");
    a49e:	f002 f83d 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsetidx N \tSet ID to N (sets robot name) (id=%d, part of hbt).\r\n", deviceID);
    a4a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a4a4:	4a38      	ldr	r2, [pc, #224]	; (a588 <URobot::sendHelp()+0xf8>)
    a4a6:	2196      	movs	r1, #150	; 0x96
    a4a8:	4668      	mov	r0, sp
    a4aa:	f011 f8f3 	bl	1b694 <snprintf>
  usb.send(reply);
    a4ae:	4669      	mov	r1, sp
    a4b0:	4630      	mov	r0, r6
    a4b2:	f002 f833 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsetid string \tSet device type to string (< 32 chars, is=%s).\r\n", deviceName);
    a4b6:	f104 0331 	add.w	r3, r4, #49	; 0x31
    a4ba:	4a34      	ldr	r2, [pc, #208]	; (a58c <URobot::sendHelp()+0xfc>)
    a4bc:	2196      	movs	r1, #150	; 0x96
    a4be:	4668      	mov	r0, sp
    a4c0:	f011 f8e8 	bl	1b694 <snprintf>
  usb.send(reply);
    a4c4:	4669      	mov	r1, sp
    a4c6:	4630      	mov	r0, r6
    a4c8:	f002 f828 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsethw N \tSet hardware version (is = %d, part of hbt).\r\n", robotHWversion);
    a4cc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    a4d0:	4a2f      	ldr	r2, [pc, #188]	; (a590 <URobot::sendHelp()+0x100>)
    a4d2:	2196      	movs	r1, #150	; 0x96
    a4d4:	4668      	mov	r0, sp
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a4d6:	466c      	mov	r4, sp
  snprintf(reply, MRL, "# -- \tsethw N \tSet hardware version (is = %d, part of hbt).\r\n", robotHWversion);
    a4d8:	f011 f8dc 	bl	1b694 <snprintf>
  usb.send(reply);
    a4dc:	4669      	mov	r1, sp
    a4de:	4630      	mov	r0, r6
    a4e0:	f002 f81c 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a4e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a4e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a4ec:	e895 0003 	ldmia.w	r5, {r0, r1}
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tstart \tStart (activate something)\r\n");
    a4f0:	4d28      	ldr	r5, [pc, #160]	; (a594 <URobot::sendHelp()+0x104>)
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a4f2:	0c0b      	lsrs	r3, r1, #16
    a4f4:	f844 0b04 	str.w	r0, [r4], #4
  usb.send(reply);
    a4f8:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a4fa:	f824 1b02 	strh.w	r1, [r4], #2
  usb.send(reply);
    a4fe:	4669      	mov	r1, sp
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a500:	7023      	strb	r3, [r4, #0]
  usb.send(reply);
    a502:	f002 f80b 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tstart \tStart (activate something)\r\n");
    a506:	466c      	mov	r4, sp
    a508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a50a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a50c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a50e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a510:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    a514:	c403      	stmia	r4!, {r0, r1}
    a516:	8022      	strh	r2, [r4, #0]
  usb.send(reply);
    a518:	4669      	mov	r1, sp
  snprintf(reply, MRL, "# -- \toff T\tTurn off power (cuts power after T seconds)\r\n");
    a51a:	4c1f      	ldr	r4, [pc, #124]	; (a598 <URobot::sendHelp()+0x108>)
  usb.send(reply);
    a51c:	4630      	mov	r0, r6
    a51e:	f001 fffd 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \toff T\tTurn off power (cuts power after T seconds)\r\n");
    a522:	46ec      	mov	ip, sp
    a524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a52a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a52c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a536:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    a53a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
  usb.send(reply);
    a53e:	4669      	mov	r1, sp
  snprintf(reply, MRL, "# -- \toff T\tTurn off power (cuts power after T seconds)\r\n");
    a540:	f8ac 2000 	strh.w	r2, [ip]
  usb.send(reply);
    a544:	4630      	mov	r0, r6
    a546:	f001 ffe9 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tstime us\tSet sample time typically around 1000 (> 20) is %ld\r\n", service.sampleTime_us);
    a54a:	4b14      	ldr	r3, [pc, #80]	; (a59c <URobot::sendHelp()+0x10c>)
    a54c:	4a14      	ldr	r2, [pc, #80]	; (a5a0 <URobot::sendHelp()+0x110>)
    a54e:	2196      	movs	r1, #150	; 0x96
    a550:	681b      	ldr	r3, [r3, #0]
    a552:	4668      	mov	r0, sp
    a554:	f011 f89e 	bl	1b694 <snprintf>
  usb.send(reply);
    a558:	4669      	mov	r1, sp
    a55a:	4630      	mov	r0, r6
    a55c:	f001 ffde 	bl	c51c <UUSB::send(char const*)>
  usb.send(            "# -- \tpind pin v [p]\tSet pin direction v=1 output, p=1 pull up, p=-1 pull down\r\n");
    a560:	4910      	ldr	r1, [pc, #64]	; (a5a4 <URobot::sendHelp()+0x114>)
    a562:	4630      	mov	r0, r6
    a564:	f001 ffda 	bl	c51c <UUSB::send(char const*)>
  usb.send(            "# -- \tpinv pin v\tSet pin to v [0..1]\r\n");
    a568:	490f      	ldr	r1, [pc, #60]	; (a5a8 <URobot::sendHelp()+0x118>)
    a56a:	4630      	mov	r0, r6
    a56c:	f001 ffd6 	bl	c51c <UUSB::send(char const*)>
  usb.send(            "# -- \tFor all subscriptions ('sub' commands) below, 'N' is the interval in ms\r\n");
    a570:	490e      	ldr	r1, [pc, #56]	; (a5ac <URobot::sendHelp()+0x11c>)
    a572:	4630      	mov	r0, r6
    a574:	f001 ffd2 	bl	c51c <UUSB::send(char const*)>
}
    a578:	b026      	add	sp, #152	; 0x98
    a57a:	bd70      	pop	{r4, r5, r6, pc}
    a57c:	2000eab8 	.word	0x2000eab8
    a580:	20005a9c 	.word	0x20005a9c
    a584:	20005b88 	.word	0x20005b88
    a588:	20005ab8 	.word	0x20005ab8
    a58c:	20005b00 	.word	0x20005b00
    a590:	20005b48 	.word	0x20005b48
    a594:	20005bb0 	.word	0x20005bb0
    a598:	20005bdc 	.word	0x20005bdc
    a59c:	2000d0c8 	.word	0x2000d0c8
    a5a0:	20005c18 	.word	0x20005c18
    a5a4:	20005c60 	.word	0x20005c60
    a5a8:	20005cb4 	.word	0x20005cb4
    a5ac:	20005cdc 	.word	0x20005cdc

0000a5b0 <URobot::~URobot()>:
class URobot : public USubss
    a5b0:	b510      	push	{r4, lr}
    a5b2:	4b05      	ldr	r3, [pc, #20]	; (a5c8 <URobot::~URobot()+0x18>)
    a5b4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    a5b6:	6840      	ldr	r0, [r0, #4]
    a5b8:	6023      	str	r3, [r4, #0]
	if (__p)
    a5ba:	b118      	cbz	r0, a5c4 <URobot::~URobot()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a5bc:	68e1      	ldr	r1, [r4, #12]
    a5be:	1a09      	subs	r1, r1, r0
    a5c0:	f00c f87c 	bl	166bc <operator delete(void*, unsigned int)>
    a5c4:	4620      	mov	r0, r4
    a5c6:	bd10      	pop	{r4, pc}
    a5c8:	2000802c 	.word	0x2000802c
    a5cc:	00000000 	.word	0x00000000

0000a5d0 <URobot::setup()>:
{ // hold power on
    a5d0:	b538      	push	{r3, r4, r5, lr}
  pinMode ( PIN_POWER_ROBOT, OUTPUT );
    a5d2:	2101      	movs	r1, #1
{ // hold power on
    a5d4:	4604      	mov	r4, r0
  pinMode ( PIN_POWER_ROBOT, OUTPUT );
    a5d6:	2023      	movs	r0, #35	; 0x23
{ // no warning, just on
  digitalWriteFast(PIN_POWER_ROBOT, HIGH);
  batteryOff = false;
  batteryGone = false;
  display.setLine(deviceName);
  usb.send("# URobot:: power on\r\n");
    a5d8:	4d33      	ldr	r5, [pc, #204]	; (a6a8 <URobot::setup()+0xd8>)
  pinMode ( PIN_POWER_ROBOT, OUTPUT );
    a5da:	f00b fcbb 	bl	15f54 <pinMode>
  batteryOff = false;
    a5de:	2300      	movs	r3, #0
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    a5e0:	4a32      	ldr	r2, [pc, #200]	; (a6ac <URobot::setup()+0xdc>)
    a5e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  display.setLine(deviceName);
    a5e6:	4832      	ldr	r0, [pc, #200]	; (a6b0 <URobot::setup()+0xe0>)
    a5e8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    a5ec:	f104 0131 	add.w	r1, r4, #49	; 0x31
  batteryOff = false;
    a5f0:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    a5f4:	f7f8 fbba 	bl	2d6c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    a5f8:	492e      	ldr	r1, [pc, #184]	; (a6b4 <URobot::setup()+0xe4>)
    a5fa:	4628      	mov	r0, r5
    a5fc:	f001 ff8e 	bl	c51c <UUSB::send(char const*)>
  pinMode ( PIN_START_BUTTON, INPUT_PULLUP ); // start switch - version 2B
    a600:	2102      	movs	r1, #2
    a602:	2025      	movs	r0, #37	; 0x25
    a604:	f00b fca6 	bl	15f54 <pinMode>
  pinMode ( PIN_LED_DEBUG, OUTPUT );
    a608:	2101      	movs	r1, #1
    a60a:	200d      	movs	r0, #13
    a60c:	f00b fca2 	bl	15f54 <pinMode>
  addPublistItem("hbt", "Get time and state 'hbt time idx revision batVolt state hw'");
    a610:	4a29      	ldr	r2, [pc, #164]	; (a6b8 <URobot::setup()+0xe8>)
    a612:	492a      	ldr	r1, [pc, #168]	; (a6bc <URobot::setup()+0xec>)
    a614:	4620      	mov	r0, r4
    a616:	f001 feb3 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("id",  "Get device type and name 'name type name'");
    a61a:	4a29      	ldr	r2, [pc, #164]	; (a6c0 <URobot::setup()+0xf0>)
    a61c:	4929      	ldr	r1, [pc, #164]	; (a6c4 <URobot::setup()+0xf4>)
    a61e:	4620      	mov	r0, r4
    a620:	f001 feae 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("time",  "sample timing [us] 'time CPU_clk ad_us sensor_us control_us done_us T_us load_o/o'");
    a624:	4a28      	ldr	r2, [pc, #160]	; (a6c8 <URobot::setup()+0xf8>)
    a626:	4929      	ldr	r1, [pc, #164]	; (a6cc <URobot::setup()+0xfc>)
    a628:	4620      	mov	r0, r4
    a62a:	f001 fea9 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("pin",  "Get pin value (pin is set by 'pind') 'pin pin value'");
    a62e:	4a28      	ldr	r2, [pc, #160]	; (a6d0 <URobot::setup()+0x100>)
    a630:	4928      	ldr	r1, [pc, #160]	; (a6d4 <URobot::setup()+0x104>)
    a632:	4620      	mov	r0, r4
    a634:	f001 fea4 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("auto",  "Get value of auto mission  start flag 'start value' value=[0,1].");
    a638:	4a27      	ldr	r2, [pc, #156]	; (a6d8 <URobot::setup()+0x108>)
    a63a:	4928      	ldr	r1, [pc, #160]	; (a6dc <URobot::setup()+0x10c>)
    a63c:	4620      	mov	r0, r4
    a63e:	f001 fe9f 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    a642:	4621      	mov	r1, r4
    a644:	4628      	mov	r0, r5
    a646:	f002 fb95 	bl	cd74 <UUSB::addSubscriptionService(USubss*)>
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a64a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a64e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a652:	4a23      	ldr	r2, [pc, #140]	; (a6e0 <URobot::setup()+0x110>)
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a654:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a658:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a65c:	ed9f 3b0c 	vldr	d3, [pc, #48]	; a690 <URobot::setup()+0xc0>
    a660:	ed9f 4b0d 	vldr	d4, [pc, #52]	; a698 <URobot::setup()+0xc8>
    a664:	ed9f 5b0e 	vldr	d5, [pc, #56]	; a6a0 <URobot::setup()+0xd0>
    a668:	ee83 6b07 	vdiv.f64	d6, d3, d7
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a66c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a670:	ee26 6b04 	vmul.f64	d6, d6, d4
    a674:	ee86 7b05 	vdiv.f64	d7, d6, d5
    a678:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a67c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a680:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a684:	6813      	ldr	r3, [r2, #0]
    a686:	f043 0301 	orr.w	r3, r3, #1
    a68a:	6013      	str	r3, [r2, #0]
}
    a68c:	bd38      	pop	{r3, r4, r5, pc}
    a68e:	bf00      	nop
    a690:	66666666 	.word	0x66666666
    a694:	400a6666 	.word	0x400a6666
    a698:	9999999a 	.word	0x9999999a
    a69c:	4049d999 	.word	0x4049d999
    a6a0:	cccccccd 	.word	0xcccccccd
    a6a4:	4012cccc 	.word	0x4012cccc
    a6a8:	2000eab8 	.word	0x2000eab8
    a6ac:	42004000 	.word	0x42004000
    a6b0:	2000db0c 	.word	0x2000db0c
    a6b4:	200057f8 	.word	0x200057f8
    a6b8:	20005810 	.word	0x20005810
    a6bc:	2000584c 	.word	0x2000584c
    a6c0:	20005850 	.word	0x20005850
    a6c4:	200087b8 	.word	0x200087b8
    a6c8:	2000587c 	.word	0x2000587c
    a6cc:	200058d0 	.word	0x200058d0
    a6d0:	200058d8 	.word	0x200058d8
    a6d4:	20005910 	.word	0x20005910
    a6d8:	20005914 	.word	0x20005914
    a6dc:	20005958 	.word	0x20005958
    a6e0:	e0001000 	.word	0xe0001000
    a6e4:	00000000 	.word	0x00000000

0000a6e8 <URobot::sendState()>:
    a6e8:	4b2b      	ldr	r3, [pc, #172]	; (a798 <URobot::sendState()+0xb0>)
{
    a6ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ec:	4605      	mov	r5, r0
    a6ee:	ed2d 8b06 	vpush	{d8-d10}
    a6f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    a6f6:	b0a9      	sub	sp, #164	; 0xa4
    a6f8:	f00e fe88 	bl	1940c <__aeabi_ul2f>
    a6fc:	ee08 0a10 	vmov	s16, r0
           command.getRevisionNumber()/10, 
    a700:	4826      	ldr	r0, [pc, #152]	; (a79c <URobot::sendState()+0xb4>)
    a702:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a706:	6aee      	ldr	r6, [r5, #44]	; 0x2c
    a708:	ed9f 7b21 	vldr	d7, [pc, #132]	; a790 <URobot::sendState()+0xa8>
    a70c:	ee28 8b07 	vmul.f64	d8, d8, d7
           command.getRevisionNumber()/10, 
    a710:	f7f7 fe00 	bl	2314 <UCommand::getRevisionNumber()>
           load * 100,
    a714:	eddf 7a22 	vldr	s15, [pc, #136]	; a7a0 <URobot::sendState()+0xb8>
           command.getRevisionNumber()/10, 
    a718:	4604      	mov	r4, r0
           load * 100,
    a71a:	ed95 9a08 	vldr	s18, [r5, #32]
           robot.batteryVoltage, //sensor.batteryVoltagef,
    a71e:	4b21      	ldr	r3, [pc, #132]	; (a7a4 <URobot::sendState()+0xbc>)
           current.getSupplyCurrent(),
    a720:	4821      	ldr	r0, [pc, #132]	; (a7a8 <URobot::sendState()+0xc0>)
           load * 100,
    a722:	ee29 9a27 	vmul.f32	s18, s18, s15
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a726:	ed93 aa05 	vldr	s20, [r3, #20]
    a72a:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    a72e:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
           current.getSupplyCurrent(),
    a732:	f7f8 f8d5 	bl	28e0 <UCurrent::getSupplyCurrent()>
           command.getRevisionNumber()/10, 
    a736:	4b1d      	ldr	r3, [pc, #116]	; (a7ac <URobot::sendState()+0xc4>)
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a738:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    a73c:	9707      	str	r7, [sp, #28]
           command.getRevisionNumber()/10, 
    a73e:	fba3 3404 	umull	r3, r4, r3, r4
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a742:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    a746:	eeb7 aaca 	vcvt.f64.f32	d10, s20
    a74a:	f8d5 2338 	ldr.w	r2, [r5, #824]	; 0x338
    a74e:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
    a752:	2304      	movs	r3, #4
    a754:	f3c4 04cf 	ubfx	r4, r4, #3, #16
    a758:	920c      	str	r2, [sp, #48]	; 0x30
    a75a:	9306      	str	r3, [sp, #24]
    a75c:	2164      	movs	r1, #100	; 0x64
    a75e:	4a14      	ldr	r2, [pc, #80]	; (a7b0 <URobot::sendState()+0xc8>)
    a760:	a80f      	add	r0, sp, #60	; 0x3c
    a762:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
    a766:	ed8d 9b08 	vstr	d9, [sp, #32]
    a76a:	ed8d ab04 	vstr	d10, [sp, #16]
    a76e:	e9cd 6402 	strd	r6, r4, [sp, #8]
    a772:	ed8d 8b00 	vstr	d8, [sp]
    a776:	f010 ff8d 	bl	1b694 <snprintf>
  usb.send(reply);
    a77a:	a90f      	add	r1, sp, #60	; 0x3c
    a77c:	480d      	ldr	r0, [pc, #52]	; (a7b4 <URobot::sendState()+0xcc>)
    a77e:	f001 fecd 	bl	c51c <UUSB::send(char const*)>
}
    a782:	b029      	add	sp, #164	; 0xa4
    a784:	ecbd 8b06 	vpop	{d8-d10}
    a788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a78a:	bf00      	nop
    a78c:	f3af 8000 	nop.w
    a790:	a0b5ed8d 	.word	0xa0b5ed8d
    a794:	3eb0c6f7 	.word	0x3eb0c6f7
    a798:	2000d0c8 	.word	0x2000d0c8
    a79c:	2000da18 	.word	0x2000da18
    a7a0:	42c80000 	.word	0x42c80000
    a7a4:	2000e654 	.word	0x2000e654
    a7a8:	2000da90 	.word	0x2000da90
    a7ac:	cccccccd 	.word	0xcccccccd
    a7b0:	20005d2c 	.word	0x20005d2c
    a7b4:	2000eab8 	.word	0x2000eab8

0000a7b8 <URobot::sendPinValue()>:
  int v = digitalReadFast(debugPin);
    a7b8:	f8d0 32fc 	ldr.w	r3, [r0, #764]	; 0x2fc
  snprintf(s, MSL, "pin %d %d\r\n", debugPin, v);
    a7bc:	211e      	movs	r1, #30
    a7be:	4a0e      	ldr	r2, [pc, #56]	; (a7f8 <URobot::sendPinValue()+0x40>)
    a7c0:	fa5f fc83 	uxtb.w	ip, r3
{
    a7c4:	b530      	push	{r4, r5, lr}
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    a7c6:	4c0d      	ldr	r4, [pc, #52]	; (a7fc <URobot::sendPinValue()+0x44>)
    a7c8:	ea4f 150c 	mov.w	r5, ip, lsl #4
    a7cc:	b08b      	sub	sp, #44	; 0x2c
    a7ce:	eb04 1c0c 	add.w	ip, r4, ip, lsl #4
    a7d2:	5965      	ldr	r5, [r4, r5]
  snprintf(s, MSL, "pin %d %d\r\n", debugPin, v);
    a7d4:	a802      	add	r0, sp, #8
    a7d6:	f8dc 400c 	ldr.w	r4, [ip, #12]
    a7da:	68ad      	ldr	r5, [r5, #8]
    a7dc:	4225      	tst	r5, r4
    a7de:	bf14      	ite	ne
    a7e0:	2401      	movne	r4, #1
    a7e2:	2400      	moveq	r4, #0
    a7e4:	9400      	str	r4, [sp, #0]
    a7e6:	f010 ff55 	bl	1b694 <snprintf>
  usb.send(s);
    a7ea:	a902      	add	r1, sp, #8
    a7ec:	4804      	ldr	r0, [pc, #16]	; (a800 <URobot::sendPinValue()+0x48>)
    a7ee:	f001 fe95 	bl	c51c <UUSB::send(char const*)>
}
    a7f2:	b00b      	add	sp, #44	; 0x2c
    a7f4:	bd30      	pop	{r4, r5, pc}
    a7f6:	bf00      	nop
    a7f8:	200056dc 	.word	0x200056dc
    a7fc:	20008148 	.word	0x20008148
    a800:	2000eab8 	.word	0x2000eab8

0000a804 <URobot::sendTiming()>:
{
    a804:	4603      	mov	r3, r0
    snprintf(s, MSL, "time %ld %ld %ld %ld %ld %ld %ld %.1f\r\n",
    a806:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    a80a:	4a14      	ldr	r2, [pc, #80]	; (a85c <URobot::sendTiming()+0x58>)
    a80c:	2164      	movs	r1, #100	; 0x64
           float(cycleTime2[6]) / 10.0
    a80e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
    a812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
{
    a816:	b510      	push	{r4, lr}
           float(cycleTime2[6]) / 10.0
    a818:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    a81c:	b0a2      	sub	sp, #136	; 0x88
    snprintf(s, MSL, "time %ld %ld %ld %ld %ld %ld %ld %.1f\r\n",
    a81e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
    a822:	a809      	add	r0, sp, #36	; 0x24
    a824:	ee87 6b05 	vdiv.f64	d6, d7, d5
    a828:	9405      	str	r4, [sp, #20]
    a82a:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
    a82e:	9404      	str	r4, [sp, #16]
    a830:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
    a834:	9403      	str	r4, [sp, #12]
    a836:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    a83a:	9402      	str	r4, [sp, #8]
    a83c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    a83e:	9401      	str	r4, [sp, #4]
    a840:	6f9c      	ldr	r4, [r3, #120]	; 0x78
    a842:	9400      	str	r4, [sp, #0]
    a844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    a846:	ed8d 6b06 	vstr	d6, [sp, #24]
    a84a:	f010 ff23 	bl	1b694 <snprintf>
  usb.send(s);
    a84e:	a909      	add	r1, sp, #36	; 0x24
    a850:	4803      	ldr	r0, [pc, #12]	; (a860 <URobot::sendTiming()+0x5c>)
    a852:	f001 fe63 	bl	c51c <UUSB::send(char const*)>
}
    a856:	b022      	add	sp, #136	; 0x88
    a858:	bd10      	pop	{r4, pc}
    a85a:	bf00      	nop
    a85c:	200056a8 	.word	0x200056a8
    a860:	2000eab8 	.word	0x2000eab8

0000a864 <URobot::sendData(int)>:
{
    a864:	b500      	push	{lr}
    a866:	b09d      	sub	sp, #116	; 0x74
    a868:	2904      	cmp	r1, #4
    a86a:	d814      	bhi.n	a896 <URobot::sendData(int)+0x32>
    a86c:	e8df f001 	tbb	[pc, r1]
    a870:	2d280323 	.word	0x2d280323
    a874:	16          	.byte	0x16
    a875:	00          	.byte	0x00
    return robotname[deviceID];
    a876:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  snprintf(reply, MRL, "dname %s %s\r\n", deviceName, getRobotName());
    a878:	f100 0331 	add.w	r3, r0, #49	; 0x31
    a87c:	4a15      	ldr	r2, [pc, #84]	; (a8d4 <URobot::sendData(int)+0x70>)
    a87e:	3126      	adds	r1, #38	; 0x26
    a880:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    a884:	a803      	add	r0, sp, #12
    a886:	9100      	str	r1, [sp, #0]
    a888:	2164      	movs	r1, #100	; 0x64
    a88a:	f010 ff03 	bl	1b694 <snprintf>
  usb.send(reply);
    a88e:	a903      	add	r1, sp, #12
    a890:	4811      	ldr	r0, [pc, #68]	; (a8d8 <URobot::sendData(int)+0x74>)
    a892:	f001 fe43 	bl	c51c <UUSB::send(char const*)>
}
    a896:	b01d      	add	sp, #116	; 0x74
    a898:	f85d fb04 	ldr.w	pc, [sp], #4
  snprintf(s, MSL, "start %d\r\n", missionAutoStart);
    a89c:	7e43      	ldrb	r3, [r0, #25]
    a89e:	211e      	movs	r1, #30
    a8a0:	4a0e      	ldr	r2, [pc, #56]	; (a8dc <URobot::sendData(int)+0x78>)
    a8a2:	a803      	add	r0, sp, #12
    a8a4:	f010 fef6 	bl	1b694 <snprintf>
  usb.send(s);
    a8a8:	a903      	add	r1, sp, #12
    a8aa:	480b      	ldr	r0, [pc, #44]	; (a8d8 <URobot::sendData(int)+0x74>)
    a8ac:	f001 fe36 	bl	c51c <UUSB::send(char const*)>
}
    a8b0:	b01d      	add	sp, #116	; 0x74
    a8b2:	f85d fb04 	ldr.w	pc, [sp], #4
    a8b6:	b01d      	add	sp, #116	; 0x74
    a8b8:	f85d eb04 	ldr.w	lr, [sp], #4
    sendState();
    a8bc:	f7ff bf14 	b.w	a6e8 <URobot::sendState()>
}
    a8c0:	b01d      	add	sp, #116	; 0x74
    a8c2:	f85d eb04 	ldr.w	lr, [sp], #4
    sendTiming();
    a8c6:	f7ff bf9d 	b.w	a804 <URobot::sendTiming()>
}
    a8ca:	b01d      	add	sp, #116	; 0x74
    a8cc:	f85d eb04 	ldr.w	lr, [sp], #4
    sendPinValue();
    a8d0:	f7ff bf72 	b.w	a7b8 <URobot::sendPinValue()>
    a8d4:	20005a78 	.word	0x20005a78
    a8d8:	2000eab8 	.word	0x2000eab8
    a8dc:	200056d0 	.word	0x200056d0

0000a8e0 <URobot::saveCycleTime()>:
  uint32_t t0 = cycleTime[0];
    a8e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
  cycleTimeInterval = t0 - cycleTime2[0];
    a8e2:	6f42      	ldr	r2, [r0, #116]	; 0x74
  cycleTime2[4] = (cycleTime[4] - t0)/us;
    a8e4:	6e41      	ldr	r1, [r0, #100]	; 0x64
  cycleTimeInterval = t0 - cycleTime2[0];
    a8e6:	1a9a      	subs	r2, r3, r2
  cycleTime2[0] = t0;
    a8e8:	6743      	str	r3, [r0, #116]	; 0x74
  cycleTime2[4] = (cycleTime[4] - t0)/us;
    a8ea:	1ac9      	subs	r1, r1, r3
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a8ec:	ee07 2a90 	vmov	s15, r2
  cycleTimeInterval = t0 - cycleTime2[0];
    a8f0:	66c2      	str	r2, [r0, #108]	; 0x6c
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a8f2:	ee07 1a10 	vmov	s14, r1
  cycleTime2[5] = cycleTimeInterval / us;
    a8f6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
  cycleTime2[2] = (cycleTime[2] - t0)/us;
    a8fe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a900:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  cycleTime2[4] = (cycleTime[4] - t0)/us;
    a904:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  cycleTime2[2] = (cycleTime[2] - t0)/us;
    a908:	1ad2      	subs	r2, r2, r3
  cycleTime2[7] = (t0 - cycleTime[5])/us; // half cycle time is in previous sample
    a90a:	6e81      	ldr	r1, [r0, #104]	; 0x68
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a90c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  cycleTime2[2] = (cycleTime[2] - t0)/us;
    a910:	67c2      	str	r2, [r0, #124]	; 0x7c
  cycleTime2[3] = (cycleTime[3] - t0)/us;
    a912:	6e02      	ldr	r2, [r0, #96]	; 0x60
  cycleTime2[7] = (t0 - cycleTime[5])/us; // half cycle time is in previous sample
    a914:	1a59      	subs	r1, r3, r1
  cycleTime2[3] = (cycleTime[3] - t0)/us;
    a916:	1ad2      	subs	r2, r2, r3
  cycleTime2[7] = (t0 - cycleTime[5])/us; // half cycle time is in previous sample
    a918:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  cycleTime2[3] = (cycleTime[3] - t0)/us;
    a91c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  cycleTime2[6] = int(load * 1000.0);
    a920:	ed9f 5b09 	vldr	d5, [pc, #36]	; a948 <URobot::saveCycleTime()+0x68>
{
    a924:	b410      	push	{r4}
  cycleTime2[1] = (cycleTime[1] - t0)/us;
    a926:	6d84      	ldr	r4, [r0, #88]	; 0x58
    a928:	1ae4      	subs	r4, r4, r3
    a92a:	6784      	str	r4, [r0, #120]	; 0x78
}
    a92c:	f85d 4b04 	ldr.w	r4, [sp], #4
  cycleTime2[6] = int(load * 1000.0);
    a930:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a934:	edc0 6a08 	vstr	s13, [r0, #32]
  cycleTime2[6] = int(load * 1000.0);
    a938:	ee27 7b05 	vmul.f64	d7, d7, d5
    a93c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a940:	ed80 7a23 	vstr	s14, [r0, #140]	; 0x8c
}
    a944:	4770      	bx	lr
    a946:	bf00      	nop
    a948:	00000000 	.word	0x00000000
    a94c:	408f4000 	.word	0x408f4000

0000a950 <URobot::batteryMonitoring()>:
  if (batteryOff)
    a950:	f890 3334 	ldrb.w	r3, [r0, #820]	; 0x334
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    a954:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
{ // keep an eye on battery voltage 
    a958:	b570      	push	{r4, r5, r6, lr}
    a95a:	4604      	mov	r4, r0
    a95c:	b09c      	sub	sp, #112	; 0x70
  if (batteryOff)
    a95e:	b36b      	cbz	r3, a9bc <URobot::batteryMonitoring()+0x6c>
  const uint16_t batteryGoneInt = int(7 / batVoltIntToFloat);
    a960:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    if (batteryGone)
    a964:	f890 2335 	ldrb.w	r2, [r0, #821]	; 0x335
  const uint16_t batteryGoneInt = int(7 / batVoltIntToFloat);
    a968:	eec6 7a87 	vdiv.f32	s15, s13, s14
    a96c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    a970:	ee17 3a90 	vmov	r3, s15
    a974:	b29b      	uxth	r3, r3
    if (batteryGone)
    a976:	b94a      	cbnz	r2, a98c <URobot::batteryMonitoring()+0x3c>
      batteryGone = ad.batVoltRawAD < batteryGoneInt;
    a978:	4a73      	ldr	r2, [pc, #460]	; (ab48 <URobot::batteryMonitoring()+0x1f8>)
    a97a:	8b92      	ldrh	r2, [r2, #28]
    a97c:	429a      	cmp	r2, r3
    a97e:	bf2c      	ite	cs
    a980:	2300      	movcs	r3, #0
    a982:	2301      	movcc	r3, #1
    a984:	f880 3335 	strb.w	r3, [r0, #821]	; 0x335
}
    a988:	b01c      	add	sp, #112	; 0x70
    a98a:	bd70      	pop	{r4, r5, r6, pc}
      if (ad.batVoltRawAD > batteryGoneInt)
    a98c:	4a6e      	ldr	r2, [pc, #440]	; (ab48 <URobot::batteryMonitoring()+0x1f8>)
    a98e:	8b92      	ldrh	r2, [r2, #28]
    a990:	429a      	cmp	r2, r3
    a992:	d9f9      	bls.n	a988 <URobot::batteryMonitoring()+0x38>
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    a994:	4a6d      	ldr	r2, [pc, #436]	; (ab4c <URobot::batteryMonitoring()+0x1fc>)
  batteryOff = false;
    a996:	2300      	movs	r3, #0
    a998:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine(deviceName);
    a99c:	f104 0131 	add.w	r1, r4, #49	; 0x31
    a9a0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    a9a4:	486a      	ldr	r0, [pc, #424]	; (ab50 <URobot::batteryMonitoring()+0x200>)
  batteryOff = false;
    a9a6:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    a9aa:	f7f8 f9df 	bl	2d6c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    a9ae:	4969      	ldr	r1, [pc, #420]	; (ab54 <URobot::batteryMonitoring()+0x204>)
    a9b0:	4869      	ldr	r0, [pc, #420]	; (ab58 <URobot::batteryMonitoring()+0x208>)
}
    a9b2:	b01c      	add	sp, #112	; 0x70
    a9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb.send("# URobot:: power on\r\n");
    a9b8:	f001 bdb0 	b.w	c51c <UUSB::send(char const*)>
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    a9bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    a9c0:	4b61      	ldr	r3, [pc, #388]	; (ab48 <URobot::batteryMonitoring()+0x1f8>)
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    a9c2:	ed9f 5b5d 	vldr	d5, [pc, #372]	; ab38 <URobot::batteryMonitoring()+0x1e8>
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    a9c6:	8b9a      	ldrh	r2, [r3, #28]
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    a9c8:	ee85 6b07 	vdiv.f64	d6, d5, d7
    a9cc:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    a9d0:	ee16 3a10 	vmov	r3, s12
    a9d4:	b29b      	uxth	r3, r3
    a9d6:	429a      	cmp	r2, r3
    a9d8:	d260      	bcs.n	aa9c <URobot::batteryMonitoring()+0x14c>
    a9da:	ed9f 5b59 	vldr	d5, [pc, #356]	; ab40 <URobot::batteryMonitoring()+0x1f0>
    a9de:	ee85 6b07 	vdiv.f64	d6, d5, d7
    a9e2:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    a9e6:	ee16 3a10 	vmov	r3, s12
    a9ea:	429a      	cmp	r2, r3
    a9ec:	dd56      	ble.n	aa9c <URobot::batteryMonitoring()+0x14c>
    return float(sampleTime_us)/1e6;
    a9ee:	4a5b      	ldr	r2, [pc, #364]	; (ab5c <URobot::batteryMonitoring()+0x20c>)
    const int shutDownSamples = int(shutDownDelaySec/service.sampleTime_sec());
    a9f0:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
    a9f4:	ed9f 6a5a 	vldr	s12, [pc, #360]	; ab60 <URobot::batteryMonitoring()+0x210>
    a9f8:	edd2 7a00 	vldr	s15, [r2]
    batLowCnt++;
    a9fc:	f8d4 3338 	ldr.w	r3, [r4, #824]	; 0x338
    aa00:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    aa04:	4a57      	ldr	r2, [pc, #348]	; (ab64 <URobot::batteryMonitoring()+0x214>)
    batLowCnt++;
    aa06:	1c58      	adds	r0, r3, #1
    aa08:	ee87 7a86 	vdiv.f32	s14, s15, s12
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    aa0c:	fb82 1200 	smull	r1, r2, r2, r0
    aa10:	17c3      	asrs	r3, r0, #31
    aa12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    batLowCnt++;
    aa16:	f8c4 0338 	str.w	r0, [r4, #824]	; 0x338
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    aa1a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    aa1e:	fb01 0313 	mls	r3, r1, r3, r0
    aa22:	2b64      	cmp	r3, #100	; 0x64
    const int shutDownSamples = int(shutDownDelaySec/service.sampleTime_sec());
    aa24:	eec6 7a87 	vdiv.f32	s15, s13, s14
    aa28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    aa2c:	ee17 5a90 	vmov	r5, s15
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    aa30:	d101      	bne.n	aa36 <URobot::batteryMonitoring()+0xe6>
    aa32:	42a8      	cmp	r0, r5
    aa34:	db45      	blt.n	aac2 <URobot::batteryMonitoring()+0x172>
    if (batLowCnt > shutDownSamples or batteryHalt)
    aa36:	4285      	cmp	r5, r0
    aa38:	da38      	bge.n	aaac <URobot::batteryMonitoring()+0x15c>
      if (servo.servoEnabled[0] or servo.servoEnabled[1] or servo.servoEnabled[2])
    aa3a:	4e4b      	ldr	r6, [pc, #300]	; (ab68 <URobot::batteryMonitoring()+0x218>)
    aa3c:	7d33      	ldrb	r3, [r6, #20]
    aa3e:	b91b      	cbnz	r3, aa48 <URobot::batteryMonitoring()+0xf8>
    aa40:	7d73      	ldrb	r3, [r6, #21]
    aa42:	b90b      	cbnz	r3, aa48 <URobot::batteryMonitoring()+0xf8>
    aa44:	7db3      	ldrb	r3, [r6, #22]
    aa46:	b1ab      	cbz	r3, aa74 <URobot::batteryMonitoring()+0x124>
        usb.send("# disabling servo!\r\n");
    aa48:	4948      	ldr	r1, [pc, #288]	; (ab6c <URobot::batteryMonitoring()+0x21c>)
    aa4a:	4843      	ldr	r0, [pc, #268]	; (ab58 <URobot::batteryMonitoring()+0x208>)
    aa4c:	f001 fd66 	bl	c51c <UUSB::send(char const*)>
  * */  
  inline void setServoPWM(int serviIdx, int16_t pwm, bool enable, int16_t vel)
  {
    if (serviIdx >= 0 and serviIdx < MAX_SERVO_CNT)
    {
      if (serviIdx < 4 or robot.robotHWversion != 9)
    aa50:	4a47      	ldr	r2, [pc, #284]	; (ab70 <URobot::batteryMonitoring()+0x220>)
      { // hardware 9 (version 6.x PCB) has 4 servos only
        servoRef[serviIdx] = pwm;
    aa52:	2300      	movs	r3, #0
      if (serviIdx < 4 or robot.robotHWversion != 9)
    aa54:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
        servoRef[serviIdx] = pwm;
    aa58:	8773      	strh	r3, [r6, #58]	; 0x3a
      if (serviIdx < 4 or robot.robotHWversion != 9)
    aa5a:	2a09      	cmp	r2, #9
        servoRef[serviIdx] = pwm;
    aa5c:	63f3      	str	r3, [r6, #60]	; 0x3c
    aa5e:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
        servoEnaRef[serviIdx] = enable;
    aa62:	6473      	str	r3, [r6, #68]	; 0x44
        servoVel[serviIdx] = vel;
    aa64:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
      if (serviIdx < 4 or robot.robotHWversion != 9)
    aa68:	d004      	beq.n	aa74 <URobot::batteryMonitoring()+0x124>
        servoRef[serviIdx] = pwm;
    aa6a:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
        servoEnaRef[serviIdx] = enable;
    aa6e:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
        servoVel[serviIdx] = vel;
    aa72:	8733      	strh	r3, [r6, #56]	; 0x38
      if (not batteryHalt)
    aa74:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    aa78:	b1f3      	cbz	r3, aab8 <URobot::batteryMonitoring()+0x168>
				CORE_PIN35_PORTCLEAR = CORE_PIN35_BITMASK;
    aa7a:	4a34      	ldr	r2, [pc, #208]	; (ab4c <URobot::batteryMonitoring()+0x1fc>)
}

void URobot::powerOff()
{ // no warning, just off
  digitalWriteFast(PIN_POWER_ROBOT, LOW);
  batteryOff = true;
    aa7c:	2301      	movs	r3, #1
    aa7e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine("Power off");
    aa82:	493c      	ldr	r1, [pc, #240]	; (ab74 <URobot::batteryMonitoring()+0x224>)
    aa84:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  batteryOff = true;
    aa88:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  display.setLine("Power off");
    aa8c:	4830      	ldr	r0, [pc, #192]	; (ab50 <URobot::batteryMonitoring()+0x200>)
    aa8e:	f7f8 f96d 	bl	2d6c <UDisplay::setLine(char const*)>
      batLowCnt = -800;
    aa92:	4b39      	ldr	r3, [pc, #228]	; (ab78 <URobot::batteryMonitoring()+0x228>)
    aa94:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
}
    aa98:	b01c      	add	sp, #112	; 0x70
    aa9a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    aa9c:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	d1a4      	bne.n	a9ee <URobot::batteryMonitoring()+0x9e>
    batLowCnt = 0;
    aaa4:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
}
    aaa8:	b01c      	add	sp, #112	; 0x70
    aaaa:	bd70      	pop	{r4, r5, r6, pc}
    if (batLowCnt > shutDownSamples or batteryHalt)
    aaac:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    aab0:	2b00      	cmp	r3, #0
    aab2:	f43f af69 	beq.w	a988 <URobot::batteryMonitoring()+0x38>
    aab6:	e7c0      	b.n	aa3a <URobot::batteryMonitoring()+0xea>
        usb.send("# Battery low! (shut down all (but USB) power!)\r\n");
    aab8:	4930      	ldr	r1, [pc, #192]	; (ab7c <URobot::batteryMonitoring()+0x22c>)
    aaba:	4827      	ldr	r0, [pc, #156]	; (ab58 <URobot::batteryMonitoring()+0x208>)
    aabc:	f001 fd2e 	bl	c51c <UUSB::send(char const*)>
    aac0:	e7db      	b.n	aa7a <URobot::batteryMonitoring()+0x12a>
      snprintf(s, MSL, "# Battery low - going POWER OFF in %.0f second!\r\n", (shutDownSamples - batLowCnt) * service.sampleTime_sec());
    aac2:	1a2b      	subs	r3, r5, r0
    aac4:	4a2e      	ldr	r2, [pc, #184]	; (ab80 <URobot::batteryMonitoring()+0x230>)
    aac6:	2164      	movs	r1, #100	; 0x64
    aac8:	a803      	add	r0, sp, #12
    aaca:	ee07 3a90 	vmov	s15, r3
    aace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    aad2:	ee27 7a87 	vmul.f32	s14, s15, s14
    aad6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    aada:	ed8d 7b00 	vstr	d7, [sp]
    aade:	f010 fdd9 	bl	1b694 <snprintf>
      usb.send(s);
    aae2:	a903      	add	r1, sp, #12
    aae4:	481c      	ldr	r0, [pc, #112]	; (ab58 <URobot::batteryMonitoring()+0x208>)
    aae6:	f001 fd19 	bl	c51c <UUSB::send(char const*)>
      if (batLowCnt >= 5000)
    aaea:	f8d4 0338 	ldr.w	r0, [r4, #824]	; 0x338
    aaee:	f241 3387 	movw	r3, #4999	; 0x1387
    aaf2:	4298      	cmp	r0, r3
    aaf4:	dd9f      	ble.n	aa36 <URobot::batteryMonitoring()+0xe6>
        if (servo.servoEnabled[0] or servo.servoEnabled[1] or servo.servoEnabled[2])
    aaf6:	4e1c      	ldr	r6, [pc, #112]	; (ab68 <URobot::batteryMonitoring()+0x218>)
    aaf8:	7d33      	ldrb	r3, [r6, #20]
    aafa:	b923      	cbnz	r3, ab06 <URobot::batteryMonitoring()+0x1b6>
    aafc:	7d73      	ldrb	r3, [r6, #21]
    aafe:	b913      	cbnz	r3, ab06 <URobot::batteryMonitoring()+0x1b6>
    ab00:	7db3      	ldrb	r3, [r6, #22]
    ab02:	2b00      	cmp	r3, #0
    ab04:	d097      	beq.n	aa36 <URobot::batteryMonitoring()+0xe6>
          usb.send("# Battery low - disabling servo!\r\n");
    ab06:	491f      	ldr	r1, [pc, #124]	; (ab84 <URobot::batteryMonitoring()+0x234>)
    ab08:	4813      	ldr	r0, [pc, #76]	; (ab58 <URobot::batteryMonitoring()+0x208>)
    ab0a:	f001 fd07 	bl	c51c <UUSB::send(char const*)>
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab0e:	4a18      	ldr	r2, [pc, #96]	; (ab70 <URobot::batteryMonitoring()+0x220>)
        servoRef[serviIdx] = pwm;
    ab10:	2300      	movs	r3, #0
    if (batLowCnt > shutDownSamples or batteryHalt)
    ab12:	f8d4 0338 	ldr.w	r0, [r4, #824]	; 0x338
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab16:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
        servoRef[serviIdx] = pwm;
    ab1a:	8773      	strh	r3, [r6, #58]	; 0x3a
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab1c:	2a09      	cmp	r2, #9
        servoRef[serviIdx] = pwm;
    ab1e:	63f3      	str	r3, [r6, #60]	; 0x3c
    ab20:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
        servoEnaRef[serviIdx] = enable;
    ab24:	6473      	str	r3, [r6, #68]	; 0x44
        servoVel[serviIdx] = vel;
    ab26:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab2a:	d084      	beq.n	aa36 <URobot::batteryMonitoring()+0xe6>
        servoRef[serviIdx] = pwm;
    ab2c:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
        servoEnaRef[serviIdx] = enable;
    ab30:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
        servoVel[serviIdx] = vel;
    ab34:	8733      	strh	r3, [r6, #56]	; 0x38
    ab36:	e77e      	b.n	aa36 <URobot::batteryMonitoring()+0xe6>
    ab38:	66666666 	.word	0x66666666
    ab3c:	40246666 	.word	0x40246666
    ab40:	33333333 	.word	0x33333333
    ab44:	40153333 	.word	0x40153333
    ab48:	2000d89c 	.word	0x2000d89c
    ab4c:	42004000 	.word	0x42004000
    ab50:	2000db0c 	.word	0x2000db0c
    ab54:	200057f8 	.word	0x200057f8
    ab58:	2000eab8 	.word	0x2000eab8
    ab5c:	2000d0c8 	.word	0x2000d0c8
    ab60:	49742400 	.word	0x49742400
    ab64:	10624dd3 	.word	0x10624dd3
    ab68:	2000ea58 	.word	0x2000ea58
    ab6c:	20005740 	.word	0x20005740
    ab70:	2000e654 	.word	0x2000e654
    ab74:	2000578c 	.word	0x2000578c
    ab78:	fffffce0 	.word	0xfffffce0
    ab7c:	20005758 	.word	0x20005758
    ab80:	200056e8 	.word	0x200056e8
    ab84:	2000571c 	.word	0x2000571c

0000ab88 <URobot::powerOff(float)>:
}

void URobot::powerOff(float after)
{ // no warning, just off
  powerOffCntDown = 1000;
  if (after < -0.5)
    ab88:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
  powerOffCntDown = 1000;
    ab8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{ // no warning, just off
    ab90:	b510      	push	{r4, lr}
  if (after < -0.5)
    ab92:	eeb4 0ae7 	vcmpe.f32	s0, s15
{ // no warning, just off
    ab96:	4604      	mov	r4, r0
    ab98:	ed2d 8b02 	vpush	{d8}
  if (after < -0.5)
    ab9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{ // no warning, just off
    aba0:	b090      	sub	sp, #64	; 0x40
  powerOffCntDown = 1000;
    aba2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
  if (after < -0.5)
    aba6:	d51a      	bpl.n	abde <URobot::powerOff(float)+0x56>
    // stop count down
    poweringOff = false;
  else 
  {
    if (after > 0.001)
    aba8:	eeb7 8ac0 	vcvt.f64.f32	d8, s0
    poweringOff = false;
    abac:	2300      	movs	r3, #0
    abae:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
    ledband.setPixel(14, 200, 200, 200);
  }
  // alarm the PC, that we are powering off
  const int MSL = 50;
  char s[MSL];
  snprintf(s, MSL, "power off %.2f\r\n", after);
    abb2:	4a33      	ldr	r2, [pc, #204]	; (ac80 <URobot::powerOff(float)+0xf8>)
    abb4:	2132      	movs	r1, #50	; 0x32
    abb6:	a803      	add	r0, sp, #12
    abb8:	ed8d 8b00 	vstr	d8, [sp]
    abbc:	f010 fd6a 	bl	1b694 <snprintf>
  usb.send(s);
    abc0:	a903      	add	r1, sp, #12
    abc2:	4830      	ldr	r0, [pc, #192]	; (ac84 <URobot::powerOff(float)+0xfc>)
    abc4:	f001 fcaa 	bl	c51c <UUSB::send(char const*)>
  if (poweringOff)
    abc8:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    abcc:	b383      	cbz	r3, ac30 <URobot::powerOff(float)+0xa8>
    display.setLine(s);
    abce:	a903      	add	r1, sp, #12
    abd0:	482d      	ldr	r0, [pc, #180]	; (ac88 <URobot::powerOff(float)+0x100>)
    abd2:	f7f8 f8cb 	bl	2d6c <UDisplay::setLine(char const*)>
  else
  { // canceled
    powerOn();
  }
}
    abd6:	b010      	add	sp, #64	; 0x40
    abd8:	ecbd 8b02 	vpop	{d8}
    abdc:	bd10      	pop	{r4, pc}
    if (after > 0.001)
    abde:	ed9f 7b26 	vldr	d7, [pc, #152]	; ac78 <URobot::powerOff(float)+0xf0>
    abe2:	eeb7 8ac0 	vcvt.f64.f32	d8, s0
    abe6:	4b29      	ldr	r3, [pc, #164]	; (ac8c <URobot::powerOff(float)+0x104>)
    abe8:	eeb4 8bc7 	vcmpe.f64	d8, d7
    abec:	ed9f 7a28 	vldr	s14, [pc, #160]	; ac90 <URobot::powerOff(float)+0x108>
    abf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abf4:	dc30      	bgt.n	ac58 <URobot::powerOff(float)+0xd0>
    abf6:	edd3 7a00 	vldr	s15, [r3]
      powerOffCntDown = int(1.0/service.sampleTime_sec());
    abfa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ac02:	ee87 6a87 	vdiv.f32	s12, s15, s14
    ac06:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    ac0a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    ac0e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    ac12:	ee17 2a90 	vmov	r2, s15
    ledband.setPixel(14, 200, 200, 200);
    ac16:	23c8      	movs	r3, #200	; 0xc8
    poweringOff = true;
    ac18:	2101      	movs	r1, #1
    ledband.setPixel(14, 200, 200, 200);
    ac1a:	481e      	ldr	r0, [pc, #120]	; (ac94 <URobot::powerOff(float)+0x10c>)
    poweringOff = true;
    ac1c:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
    ledband.setPixel(14, 200, 200, 200);
    ac20:	210e      	movs	r1, #14
    powerOffCntMax = powerOffCntDown;
    ac22:	e9c4 22c2 	strd	r2, r2, [r4, #776]	; 0x308
    ledband.setPixel(14, 200, 200, 200);
    ac26:	461a      	mov	r2, r3
    ac28:	9300      	str	r3, [sp, #0]
    ac2a:	f7fb f905 	bl	5e38 <ULedBand::setPixel(int, int, int, int)>
    ac2e:	e7c0      	b.n	abb2 <URobot::powerOff(float)+0x2a>
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    ac30:	4a19      	ldr	r2, [pc, #100]	; (ac98 <URobot::powerOff(float)+0x110>)
    ac32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine(deviceName);
    ac36:	f104 0131 	add.w	r1, r4, #49	; 0x31
    ac3a:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
  batteryOff = false;
    ac3e:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    ac42:	4811      	ldr	r0, [pc, #68]	; (ac88 <URobot::powerOff(float)+0x100>)
    ac44:	f7f8 f892 	bl	2d6c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    ac48:	4914      	ldr	r1, [pc, #80]	; (ac9c <URobot::powerOff(float)+0x114>)
    ac4a:	480e      	ldr	r0, [pc, #56]	; (ac84 <URobot::powerOff(float)+0xfc>)
    ac4c:	f001 fc66 	bl	c51c <UUSB::send(char const*)>
}
    ac50:	b010      	add	sp, #64	; 0x40
    ac52:	ecbd 8b02 	vpop	{d8}
    ac56:	bd10      	pop	{r4, pc}
    ac58:	edd3 7a00 	vldr	s15, [r3]
    ac5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ac60:	eec7 6a87 	vdiv.f32	s13, s15, s14
      powerOffCntDown = int(after/service.sampleTime_sec());
    ac64:	ee80 7a26 	vdiv.f32	s14, s0, s13
    ac68:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    ac6c:	ee17 2a90 	vmov	r2, s15
    ac70:	e7d1      	b.n	ac16 <URobot::powerOff(float)+0x8e>
    ac72:	bf00      	nop
    ac74:	f3af 8000 	nop.w
    ac78:	d2f1a9fc 	.word	0xd2f1a9fc
    ac7c:	3f50624d 	.word	0x3f50624d
    ac80:	20005a88 	.word	0x20005a88
    ac84:	2000eab8 	.word	0x2000eab8
    ac88:	2000db0c 	.word	0x2000db0c
    ac8c:	2000d0c8 	.word	0x2000d0c8
    ac90:	49742400 	.word	0x49742400
    ac94:	2000e1e0 	.word	0x2000e1e0
    ac98:	42004000 	.word	0x42004000
    ac9c:	200057f8 	.word	0x200057f8

0000aca0 <URobot::tick()>:
  batteryVoltage = getBatteryVoltage(ad.batVoltRawAD);
    aca0:	4bb9      	ldr	r3, [pc, #740]	; (af88 <URobot::tick()+0x2e8>)
  return adValue * batVoltIntToFloat;
    aca2:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
    aca6:	8b9b      	ldrh	r3, [r3, #28]
    aca8:	ee07 3a90 	vmov	s15, r3
  tickCnt++;
    acac:	f8d0 32f8 	ldr.w	r3, [r0, #760]	; 0x2f8
  return adValue * batVoltIntToFloat;
    acb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  tickCnt++;
    acb4:	3301      	adds	r3, #1
{ // safety things and timing
    acb6:	b570      	push	{r4, r5, r6, lr}
  return adValue * batVoltIntToFloat;
    acb8:	ee67 7a87 	vmul.f32	s15, s15, s14
{ // safety things and timing
    acbc:	4604      	mov	r4, r0
    acbe:	ed2d 8b02 	vpush	{d8}
  tickCnt++;
    acc2:	f8c0 32f8 	str.w	r3, [r0, #760]	; 0x2f8
{ // safety things and timing
    acc6:	b0d0      	sub	sp, #320	; 0x140
  batteryVoltage = getBatteryVoltage(ad.batVoltRawAD);
    acc8:	edc0 7a05 	vstr	s15, [r0, #20]
  batteryMonitoring();
    accc:	f7ff fe40 	bl	a950 <URobot::batteryMonitoring()>
  bool b = not digitalRead(PIN_START_BUTTON);
    acd0:	2025      	movs	r0, #37	; 0x25
    acd2:	f00b f92d 	bl	15f30 <digitalRead>
    if (buttonCnt == 0)
    acd6:	69e3      	ldr	r3, [r4, #28]
  if (b)
    acd8:	2800      	cmp	r0, #0
    acda:	f040 80cc 	bne.w	ae76 <URobot::tick()+0x1d6>
    if (buttonCnt == 0)
    acde:	2b00      	cmp	r3, #0
    ace0:	d156      	bne.n	ad90 <URobot::tick()+0xf0>
    return float(time_us)*1e-6;
    ace2:	4baa      	ldr	r3, [pc, #680]	; (af8c <URobot::tick()+0x2ec>)
    ace4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    ace8:	f00e fb90 	bl	1940c <__aeabi_ul2f>
    acec:	ee07 0a90 	vmov	s15, r0
      buttonCnt = 50;
    acf0:	2332      	movs	r3, #50	; 0x32
    acf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    acf6:	61e3      	str	r3, [r4, #28]
    acf8:	ed9f 6b9f 	vldr	d6, [pc, #636]	; af78 <URobot::tick()+0x2d8>
    acfc:	ee27 7b06 	vmul.f64	d7, d7, d6
    ad00:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
    ad04:	eeb0 7a48 	vmov.f32	s14, s16
      pressTime = service.time_sec();
    ad08:	ed84 8a1c 	vstr	s16, [r4, #112]	; 0x70
      if ((service.time_sec() - pressTime) > 5.0)
    ad0c:	ee37 7a48 	vsub.f32	s14, s14, s16
    ad10:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    ad14:	eeb4 7ae7 	vcmpe.f32	s14, s15
    ad18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad1c:	dd0a      	ble.n	ad34 <URobot::tick()+0x94>
        if (usb.usbIsUp)
    ad1e:	4b9c      	ldr	r3, [pc, #624]	; (af90 <URobot::tick()+0x2f0>)
    ad20:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
    ad24:	2b00      	cmp	r3, #0
    ad26:	f000 80b0 	beq.w	ae8a <URobot::tick()+0x1ea>
          powerOff(40.0);
    ad2a:	ed9f 0a9a 	vldr	s0, [pc, #616]	; af94 <URobot::tick()+0x2f4>
    ad2e:	4620      	mov	r0, r4
    ad30:	f7ff ff2a 	bl	ab88 <URobot::powerOff(float)>
  if (poweringOff)
    ad34:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    ad38:	2a00      	cmp	r2, #0
    ad3a:	d166      	bne.n	ae0a <URobot::tick()+0x16a>
	return systick_millis_count;
    ad3c:	4b96      	ldr	r3, [pc, #600]	; (af98 <URobot::tick()+0x2f8>)
  int a = millis() % 1000;
    ad3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ad42:	4996      	ldr	r1, [pc, #600]	; (af9c <URobot::tick()+0x2fc>)
    ad44:	681b      	ldr	r3, [r3, #0]
    return toLog and not logFull;
    ad46:	4a96      	ldr	r2, [pc, #600]	; (afa0 <URobot::tick()+0x300>)
    ad48:	fba1 5103 	umull	r5, r1, r1, r3
    ad4c:	0989      	lsrs	r1, r1, #6
    ad4e:	fb00 3111 	mls	r1, r0, r1, r3
    ad52:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
    ad56:	2b00      	cmp	r3, #0
    ad58:	d041      	beq.n	adde <URobot::tick()+0x13e>
    ad5a:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d13d      	bne.n	adde <URobot::tick()+0x13e>
    if (robotHWversion == 9)
    ad62:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ad66:	2b09      	cmp	r3, #9
    ad68:	bf14      	ite	ne
    ad6a:	2006      	movne	r0, #6
    ad6c:	2000      	moveq	r0, #0
    if (value == 1)
    ad6e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    ad72:	d322      	bcc.n	adba <URobot::tick()+0x11a>
    setStatusLed ( a < 500 );
    ad74:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    ad78:	bfac      	ite	ge
    ad7a:	2100      	movge	r1, #0
    ad7c:	2101      	movlt	r1, #1
      analogWrite(pin, value << 3);
    ad7e:	00c9      	lsls	r1, r1, #3
    ad80:	f00b fdde 	bl	16940 <analogWrite>
  if (missionAutoStart and tickCnt == 300)
    ad84:	7e63      	ldrb	r3, [r4, #25]
    ad86:	b9fb      	cbnz	r3, adc8 <URobot::tick()+0x128>
}
    ad88:	b050      	add	sp, #320	; 0x140
    ad8a:	ecbd 8b02 	vpop	{d8}
    ad8e:	bd70      	pop	{r4, r5, r6, pc}
    else if (buttonCnt < 20)
    ad90:	2b13      	cmp	r3, #19
    ad92:	f340 8082 	ble.w	ae9a <URobot::tick()+0x1fa>
    ad96:	4b7d      	ldr	r3, [pc, #500]	; (af8c <URobot::tick()+0x2ec>)
      if ((service.time_sec() - pressTime) > 5.0)
    ad98:	ed94 8a1c 	vldr	s16, [r4, #112]	; 0x70
    ad9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    ada0:	f00e fb34 	bl	1940c <__aeabi_ul2f>
    ada4:	ee07 0a90 	vmov	s15, r0
    ada8:	ed9f 6b73 	vldr	d6, [pc, #460]	; af78 <URobot::tick()+0x2d8>
    adac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    adb0:	ee27 7b06 	vmul.f64	d7, d7, d6
    adb4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    adb8:	e7a8      	b.n	ad0c <URobot::tick()+0x6c>
      analogWrite(pin, 4095);
    adba:	f640 71ff 	movw	r1, #4095	; 0xfff
    adbe:	f00b fdbf 	bl	16940 <analogWrite>
  if (missionAutoStart and tickCnt == 300)
    adc2:	7e63      	ldrb	r3, [r4, #25]
    adc4:	2b00      	cmp	r3, #0
    adc6:	d0df      	beq.n	ad88 <URobot::tick()+0xe8>
    adc8:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
    adcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    add0:	d1da      	bne.n	ad88 <URobot::tick()+0xe8>
    missionStart = true;
    add2:	2301      	movs	r3, #1
    add4:	7623      	strb	r3, [r4, #24]
}
    add6:	b050      	add	sp, #320	; 0x140
    add8:	ecbd 8b02 	vpop	{d8}
    addc:	bd70      	pop	{r4, r5, r6, pc}
    if (robotHWversion == 9)
    adde:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ade2:	2b09      	cmp	r3, #9
    ade4:	bf14      	ite	ne
    ade6:	2006      	movne	r0, #6
    ade8:	2000      	moveq	r0, #0
    if (value == 1)
    adea:	2963      	cmp	r1, #99	; 0x63
    adec:	d9e5      	bls.n	adba <URobot::tick()+0x11a>
    setStatusLed ( a < 100 );
    adee:	bfd4      	ite	le
    adf0:	2101      	movle	r1, #1
    adf2:	2100      	movgt	r1, #0
      analogWrite(pin, value << 3);
    adf4:	00c9      	lsls	r1, r1, #3
    adf6:	f00b fda3 	bl	16940 <analogWrite>
    adfa:	e7e2      	b.n	adc2 <URobot::tick()+0x122>
    if (buttonCnt == 1 and not poweringOff)
    adfc:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    ae00:	2b00      	cmp	r3, #0
    ae02:	f000 80af 	beq.w	af64 <URobot::tick()+0x2c4>
      buttonCnt--;
    ae06:	2300      	movs	r3, #0
    ae08:	61e3      	str	r3, [r4, #28]
    int tickPerSec = 1e6 / service.sampleTime_us;
    ae0a:	4960      	ldr	r1, [pc, #384]	; (af8c <URobot::tick()+0x2ec>)
    if (powerOffCntDown == powerOffCntMax)
    ae0c:	e9d4 23c2 	ldrd	r2, r3, [r4, #776]	; 0x308
    int tickPerSec = 1e6 / service.sampleTime_us;
    ae10:	680d      	ldr	r5, [r1, #0]
    if (powerOffCntDown == powerOffCntMax)
    ae12:	4293      	cmp	r3, r2
    ae14:	d049      	beq.n	aeaa <URobot::tick()+0x20a>
    int n = powerOffCntMax / 900;
    ae16:	4963      	ldr	r1, [pc, #396]	; (afa4 <URobot::tick()+0x304>)
    ae18:	fb81 0103 	smull	r0, r1, r1, r3
    ae1c:	4419      	add	r1, r3
    ae1e:	17db      	asrs	r3, r3, #31
    ae20:	ebc3 2361 	rsb	r3, r3, r1, asr #9
    else if (powerOffCntDown % n == 0)
    ae24:	fb92 f1f3 	sdiv	r1, r2, r3
    ae28:	fb03 2311 	mls	r3, r3, r1, r2
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d064      	beq.n	aefa <URobot::tick()+0x25a>
    powerOffCntDown--;
    ae30:	3a01      	subs	r2, #1
    if (powerOffCntDown <= 0)
    ae32:	2a00      	cmp	r2, #0
    powerOffCntDown--;
    ae34:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    if (powerOffCntDown <= 0)
    ae38:	dd4f      	ble.n	aeda <URobot::tick()+0x23a>
    int tickPerSec = 1e6 / service.sampleTime_us;
    ae3a:	ee07 5a90 	vmov	s15, r5
    ae3e:	ed9f 5b50 	vldr	d5, [pc, #320]	; af80 <URobot::tick()+0x2e0>
    ae42:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    ae46:	ee85 7b06 	vdiv.f64	d7, d5, d6
    ae4a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    ae4e:	ee17 1a90 	vmov	r1, s15
    else if (powerOffCntDown % tickPerSec == 1)
    ae52:	fb92 f3f1 	sdiv	r3, r2, r1
    ae56:	fb01 2213 	mls	r2, r1, r3, r2
    ae5a:	2a01      	cmp	r2, #1
    ae5c:	f47f af6e 	bne.w	ad3c <URobot::tick()+0x9c>
      snprintf(s, MSL, "power off %d sec\n", powerOffCntDown / tickPerSec);
    ae60:	4a51      	ldr	r2, [pc, #324]	; (afa8 <URobot::tick()+0x308>)
    ae62:	f44f 7196 	mov.w	r1, #300	; 0x12c
    ae66:	a805      	add	r0, sp, #20
    ae68:	f010 fc14 	bl	1b694 <snprintf>
      display.setLine(s);
    ae6c:	a905      	add	r1, sp, #20
    ae6e:	484f      	ldr	r0, [pc, #316]	; (afac <URobot::tick()+0x30c>)
    ae70:	f7f7 ff7c 	bl	2d6c <UDisplay::setLine(char const*)>
    ae74:	e762      	b.n	ad3c <URobot::tick()+0x9c>
    if (buttonCnt == 1 and not poweringOff)
    ae76:	2b01      	cmp	r3, #1
    ae78:	d0c0      	beq.n	adfc <URobot::tick()+0x15c>
    if (buttonCnt > 0)
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	f77f af5a 	ble.w	ad34 <URobot::tick()+0x94>
      buttonCnt--;
    ae80:	3b01      	subs	r3, #1
  if (poweringOff)
    ae82:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
      buttonCnt--;
    ae86:	61e3      	str	r3, [r4, #28]
    ae88:	e756      	b.n	ad38 <URobot::tick()+0x98>
          powerOff(0.00003);
    ae8a:	ed9f 0a49 	vldr	s0, [pc, #292]	; afb0 <URobot::tick()+0x310>
    ae8e:	4620      	mov	r0, r4
    ae90:	f7ff fe7a 	bl	ab88 <URobot::powerOff(float)>
  if (poweringOff)
    ae94:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    ae98:	e74e      	b.n	ad38 <URobot::tick()+0x98>
      buttonCnt++;
    ae9a:	3301      	adds	r3, #1
    ae9c:	4a3b      	ldr	r2, [pc, #236]	; (af8c <URobot::tick()+0x2ec>)
      if ((service.time_sec() - pressTime) > 5.0)
    ae9e:	ed94 8a1c 	vldr	s16, [r4, #112]	; 0x70
      buttonCnt++;
    aea2:	61e3      	str	r3, [r4, #28]
    aea4:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    aea8:	e77a      	b.n	ada0 <URobot::tick()+0x100>
    powerOffCntDown--;
    aeaa:	3a01      	subs	r2, #1
        r1[i] = 100;
    aeac:	2364      	movs	r3, #100	; 0x64
    if (powerOffCntDown <= 0)
    aeae:	2a00      	cmp	r2, #0
        r1[i] = 100;
    aeb0:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
        r2[i] = 100;
    aeb4:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
        r3[i] = 100;
    aeb8:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
        r1[i] = 100;
    aebc:	f8c4 3314 	str.w	r3, [r4, #788]	; 0x314
        r2[i] = 100;
    aec0:	f8c4 3320 	str.w	r3, [r4, #800]	; 0x320
        r3[i] = 100;
    aec4:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
        r1[i] = 100;
    aec8:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
        r2[i] = 100;
    aecc:	f8c4 3324 	str.w	r3, [r4, #804]	; 0x324
        r3[i] = 100;
    aed0:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
    powerOffCntDown--;
    aed4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    if (powerOffCntDown <= 0)
    aed8:	dcaf      	bgt.n	ae3a <URobot::tick()+0x19a>
  batteryOff = true;
    aeda:	2301      	movs	r3, #1
				CORE_PIN35_PORTCLEAR = CORE_PIN35_BITMASK;
    aedc:	4a35      	ldr	r2, [pc, #212]	; (afb4 <URobot::tick()+0x314>)
    aede:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine("Power off");
    aee2:	4935      	ldr	r1, [pc, #212]	; (afb8 <URobot::tick()+0x318>)
    aee4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  batteryOff = true;
    aee8:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  display.setLine("Power off");
    aeec:	482f      	ldr	r0, [pc, #188]	; (afac <URobot::tick()+0x30c>)
    aeee:	f7f7 ff3d 	bl	2d6c <UDisplay::setLine(char const*)>
      poweringOff = false;
    aef2:	2300      	movs	r3, #0
    aef4:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    aef8:	e720      	b.n	ad3c <URobot::tick()+0x9c>
  if (v[0] > 0)
    aefa:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
    aefe:	2900      	cmp	r1, #0
    af00:	dd7e      	ble.n	b000 <URobot::tick()+0x360>
    v[0]--;
    af02:	3901      	subs	r1, #1
  if (v[0] > 0)
    af04:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    af08:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    v[0]--;
    af0c:	f8c4 1328 	str.w	r1, [r4, #808]	; 0x328
        snprintf(s, MSL, "# Shut down %d %d %d (count=%d)\n", r1[0], r2[0], r3[0], powerOffCntDown);
    af10:	9000      	str	r0, [sp, #0]
    af12:	a805      	add	r0, sp, #20
    af14:	e9cd 1201 	strd	r1, r2, [sp, #4]
    af18:	4a28      	ldr	r2, [pc, #160]	; (afbc <URobot::tick()+0x31c>)
    af1a:	2196      	movs	r1, #150	; 0x96
    af1c:	f010 fbba 	bl	1b694 <snprintf>
        usb.send(s);
    af20:	a905      	add	r1, sp, #20
    af22:	481b      	ldr	r0, [pc, #108]	; (af90 <URobot::tick()+0x2f0>)
    af24:	f001 fafa 	bl	c51c <UUSB::send(char const*)>
      ledband.setPixel(14, r1[0], r1[1] , r1[2]);
    af28:	f8d4 2310 	ldr.w	r2, [r4, #784]	; 0x310
    af2c:	4824      	ldr	r0, [pc, #144]	; (afc0 <URobot::tick()+0x320>)
    af2e:	e9d4 31c5 	ldrd	r3, r1, [r4, #788]	; 0x314
    af32:	9100      	str	r1, [sp, #0]
    af34:	210e      	movs	r1, #14
    af36:	f7fa ff7f 	bl	5e38 <ULedBand::setPixel(int, int, int, int)>
      ledband.setPixel(15, r2[0], r2[1] , r2[2]);
    af3a:	f8d4 231c 	ldr.w	r2, [r4, #796]	; 0x31c
    af3e:	4820      	ldr	r0, [pc, #128]	; (afc0 <URobot::tick()+0x320>)
    af40:	e9d4 31c8 	ldrd	r3, r1, [r4, #800]	; 0x320
    af44:	9100      	str	r1, [sp, #0]
    af46:	210f      	movs	r1, #15
    af48:	f7fa ff76 	bl	5e38 <ULedBand::setPixel(int, int, int, int)>
      ledband.setPixel(16, r3[0], r3[1] , r3[2]);
    af4c:	f8d4 2328 	ldr.w	r2, [r4, #808]	; 0x328
    af50:	481b      	ldr	r0, [pc, #108]	; (afc0 <URobot::tick()+0x320>)
    af52:	e9d4 31cb 	ldrd	r3, r1, [r4, #812]	; 0x32c
    af56:	9100      	str	r1, [sp, #0]
    af58:	2110      	movs	r1, #16
    af5a:	f7fa ff6d 	bl	5e38 <ULedBand::setPixel(int, int, int, int)>
    powerOffCntDown--;
    af5e:	f8d4 2308 	ldr.w	r2, [r4, #776]	; 0x308
    af62:	e765      	b.n	ae30 <URobot::tick()+0x190>
      if (usb.use_CRC)
    af64:	4d0a      	ldr	r5, [pc, #40]	; (af90 <URobot::tick()+0x2f0>)
    af66:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    af6a:	bb5b      	cbnz	r3, afc4 <URobot::tick()+0x324>
      if (batteryOff)
    af6c:	f894 3334 	ldrb.w	r3, [r4, #820]	; 0x334
    af70:	bb9b      	cbnz	r3, afda <URobot::tick()+0x33a>
      buttonCnt--;
    af72:	61e3      	str	r3, [r4, #28]
  if (poweringOff)
    af74:	e6e2      	b.n	ad3c <URobot::tick()+0x9c>
    af76:	bf00      	nop
    af78:	a0b5ed8d 	.word	0xa0b5ed8d
    af7c:	3eb0c6f7 	.word	0x3eb0c6f7
    af80:	00000000 	.word	0x00000000
    af84:	412e8480 	.word	0x412e8480
    af88:	2000d89c 	.word	0x2000d89c
    af8c:	2000d0c8 	.word	0x2000d0c8
    af90:	2000eab8 	.word	0x2000eab8
    af94:	42200000 	.word	0x42200000
    af98:	2000eaac 	.word	0x2000eaac
    af9c:	10624dd3 	.word	0x10624dd3
    afa0:	2000e240 	.word	0x2000e240
    afa4:	91a2b3c5 	.word	0x91a2b3c5
    afa8:	200057e4 	.word	0x200057e4
    afac:	2000db0c 	.word	0x2000db0c
    afb0:	37fba882 	.word	0x37fba882
    afb4:	42004000 	.word	0x42004000
    afb8:	2000578c 	.word	0x2000578c
    afbc:	200057c0 	.word	0x200057c0
    afc0:	2000e1e0 	.word	0x2000e1e0
        usb.send("start\r\n");
    afc4:	4936      	ldr	r1, [pc, #216]	; (b0a0 <URobot::tick()+0x400>)
    afc6:	4628      	mov	r0, r5
    afc8:	f001 faa8 	bl	c51c <UUSB::send(char const*)>
        usb.send("# sent start (button release)\r\n");
    afcc:	4935      	ldr	r1, [pc, #212]	; (b0a4 <URobot::tick()+0x404>)
    afce:	4628      	mov	r0, r5
    afd0:	f001 faa4 	bl	c51c <UUSB::send(char const*)>
      if (batteryOff)
    afd4:	f894 3334 	ldrb.w	r3, [r4, #820]	; 0x334
    afd8:	b183      	cbz	r3, affc <URobot::tick()+0x35c>
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    afda:	4a33      	ldr	r2, [pc, #204]	; (b0a8 <URobot::tick()+0x408>)
    afdc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  batteryOff = false;
    afe0:	2300      	movs	r3, #0
  display.setLine(deviceName);
    afe2:	f104 0131 	add.w	r1, r4, #49	; 0x31
    afe6:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    afea:	4830      	ldr	r0, [pc, #192]	; (b0ac <URobot::tick()+0x40c>)
  batteryOff = false;
    afec:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    aff0:	f7f7 febc 	bl	2d6c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    aff4:	492e      	ldr	r1, [pc, #184]	; (b0b0 <URobot::tick()+0x410>)
    aff6:	482f      	ldr	r0, [pc, #188]	; (b0b4 <URobot::tick()+0x414>)
    aff8:	f001 fa90 	bl	c51c <UUSB::send(char const*)>
    if (buttonCnt > 0)
    affc:	69e3      	ldr	r3, [r4, #28]
}
    affe:	e73c      	b.n	ae7a <URobot::tick()+0x1da>
  else if (v[1] > 0)
    b000:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
    b004:	2b00      	cmp	r3, #0
    b006:	dd07      	ble.n	b018 <URobot::tick()+0x378>
    v[1]--;
    b008:	3b01      	subs	r3, #1
  if (v[0] > 0)
    b00a:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    v[1]--;
    b00e:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
  if (v[0] > 0)
    b012:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b016:	e77b      	b.n	af10 <URobot::tick()+0x270>
  else if (v[2] > 0)
    b018:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
    b01c:	2b00      	cmp	r3, #0
    b01e:	dd07      	ble.n	b030 <URobot::tick()+0x390>
    v[2]--;
    b020:	3b01      	subs	r3, #1
  if (v[0] > 0)
    b022:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    v[2]--;
    b026:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
  if (v[0] > 0)
    b02a:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b02e:	e76f      	b.n	af10 <URobot::tick()+0x270>
    b030:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    b034:	2800      	cmp	r0, #0
    b036:	dd05      	ble.n	b044 <URobot::tick()+0x3a4>
    v[0]--;
    b038:	3801      	subs	r0, #1
  if (v[0] > 0)
    b03a:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    v[0]--;
    b03e:	f8c4 031c 	str.w	r0, [r4, #796]	; 0x31c
  return counting;
    b042:	e765      	b.n	af10 <URobot::tick()+0x270>
  else if (v[1] > 0)
    b044:	f8d4 3320 	ldr.w	r3, [r4, #800]	; 0x320
    b048:	2b00      	cmp	r3, #0
    b04a:	dd05      	ble.n	b058 <URobot::tick()+0x3b8>
    v[1]--;
    b04c:	3b01      	subs	r3, #1
    b04e:	f8c4 3320 	str.w	r3, [r4, #800]	; 0x320
  if (v[0] > 0)
    b052:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b056:	e75b      	b.n	af10 <URobot::tick()+0x270>
  else if (v[2] > 0)
    b058:	f8d4 3324 	ldr.w	r3, [r4, #804]	; 0x324
    b05c:	2b00      	cmp	r3, #0
    b05e:	dd05      	ble.n	b06c <URobot::tick()+0x3cc>
    v[2]--;
    b060:	3b01      	subs	r3, #1
    b062:	f8c4 3324 	str.w	r3, [r4, #804]	; 0x324
  if (v[0] > 0)
    b066:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b06a:	e751      	b.n	af10 <URobot::tick()+0x270>
    b06c:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b070:	2b00      	cmp	r3, #0
    b072:	dd03      	ble.n	b07c <URobot::tick()+0x3dc>
    v[0]--;
    b074:	3b01      	subs	r3, #1
    b076:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
    b07a:	e749      	b.n	af10 <URobot::tick()+0x270>
  else if (v[1] > 0)
    b07c:	f8d4 6314 	ldr.w	r6, [r4, #788]	; 0x314
    b080:	2e00      	cmp	r6, #0
    b082:	dd03      	ble.n	b08c <URobot::tick()+0x3ec>
    v[1]--;
    b084:	3e01      	subs	r6, #1
    b086:	f8c4 6314 	str.w	r6, [r4, #788]	; 0x314
    b08a:	e741      	b.n	af10 <URobot::tick()+0x270>
  else if (v[2] > 0)
    b08c:	f8d4 6318 	ldr.w	r6, [r4, #792]	; 0x318
    b090:	2e00      	cmp	r6, #0
    b092:	f77f af3d 	ble.w	af10 <URobot::tick()+0x270>
    v[2]--;
    b096:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    b09a:	f8c4 c318 	str.w	ip, [r4, #792]	; 0x318
    b09e:	e737      	b.n	af10 <URobot::tick()+0x270>
    b0a0:	20005798 	.word	0x20005798
    b0a4:	200057a0 	.word	0x200057a0
    b0a8:	42004000 	.word	0x42004000
    b0ac:	2000db0c 	.word	0x2000db0c
    b0b0:	200057f8 	.word	0x200057f8
    b0b4:	2000eab8 	.word	0x2000eab8

0000b0b8 <URobot::decode(char const*)>:
{
    b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0bc:	460d      	mov	r5, r1
    b0be:	b09c      	sub	sp, #112	; 0x70
    b0c0:	4606      	mov	r6, r0
  if (strncmp(buf, "setidx ", 7) == 0)
    b0c2:	2207      	movs	r2, #7
    b0c4:	49ba      	ldr	r1, [pc, #744]	; (b3b0 <URobot::decode(char const*)+0x2f8>)
    b0c6:	4628      	mov	r0, r5
    b0c8:	f010 fd9c 	bl	1bc04 <strncmp>
    b0cc:	2800      	cmp	r0, #0
    b0ce:	d05d      	beq.n	b18c <URobot::decode(char const*)+0xd4>
  else if (strncmp(buf, "sethw ", 6) == 0)
    b0d0:	2206      	movs	r2, #6
    b0d2:	49b8      	ldr	r1, [pc, #736]	; (b3b4 <URobot::decode(char const*)+0x2fc>)
    b0d4:	4628      	mov	r0, r5
    b0d6:	f010 fd95 	bl	1bc04 <strncmp>
    b0da:	b360      	cbz	r0, b136 <URobot::decode(char const*)+0x7e>
  else if (strncmp(buf, "setid ", 6) == 0)
    b0dc:	2206      	movs	r2, #6
    b0de:	49b6      	ldr	r1, [pc, #728]	; (b3b8 <URobot::decode(char const*)+0x300>)
    b0e0:	4628      	mov	r0, r5
    b0e2:	f010 fd8f 	bl	1bc04 <strncmp>
    b0e6:	2800      	cmp	r0, #0
    b0e8:	d15e      	bne.n	b1a8 <URobot::decode(char const*)+0xf0>
    const char * p1 = &buf[6];
    b0ea:	3506      	adds	r5, #6
    b0ec:	462f      	mov	r7, r5
    while (isSpace(*p1))
    b0ee:	f815 8b01 	ldrb.w	r8, [r5], #1
// Checks for white-space characters. For the avr-libc library,
// these are: space, formfeed ('\f'), newline ('\n'), carriage
// return ('\r'), horizontal tab ('\t'), and vertical tab ('\v').
inline boolean isSpace(int c)
{
  return ( isspace (c) == 0 ? false : true);
    b0f2:	4640      	mov	r0, r8
    b0f4:	f010 f8fe 	bl	1b2f4 <isspace>
    b0f8:	4604      	mov	r4, r0
    b0fa:	2800      	cmp	r0, #0
    b0fc:	d1f6      	bne.n	b0ec <URobot::decode(char const*)+0x34>
    if (*p1 < ' ')
    b0fe:	f1b8 0f1f 	cmp.w	r8, #31
    b102:	d86e      	bhi.n	b1e2 <URobot::decode(char const*)+0x12a>
            deviceName[0] = '_';
    b104:	235f      	movs	r3, #95	; 0x5f
            deviceName[1] = '\0';
    b106:	f886 0032 	strb.w	r0, [r6, #50]	; 0x32
      usb.send("# set name to nothing ('_')\r\n");
    b10a:	49ac      	ldr	r1, [pc, #688]	; (b3bc <URobot::decode(char const*)+0x304>)
    b10c:	48ac      	ldr	r0, [pc, #688]	; (b3c0 <URobot::decode(char const*)+0x308>)
            deviceName[0] = '_';
    b10e:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
      usb.send("# set name to nothing ('_')\r\n");
    b112:	f001 fa03 	bl	c51c <UUSB::send(char const*)>
    if (strncasecmp(deviceName, "robobot", 7) == 0)
    b116:	2207      	movs	r2, #7
    b118:	49aa      	ldr	r1, [pc, #680]	; (b3c4 <URobot::decode(char const*)+0x30c>)
    b11a:	f106 0031 	add.w	r0, r6, #49	; 0x31
    b11e:	f010 fd43 	bl	1bba8 <strncasecmp>
    b122:	2800      	cmp	r0, #0
    b124:	f040 809f 	bne.w	b266 <URobot::decode(char const*)+0x1ae>
      robobot = true;
    b128:	2301      	movs	r3, #1
}
    b12a:	2001      	movs	r0, #1
      robobot = true;
    b12c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
}
    b130:	b01c      	add	sp, #112	; 0x70
    b132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char * p1 = &buf[6];
    b136:	3506      	adds	r5, #6
    robotHWversion = strtol(p1, NULL, 10);
    b138:	4601      	mov	r1, r0
    b13a:	220a      	movs	r2, #10
    b13c:	4628      	mov	r0, r5
    b13e:	f010 f8b9 	bl	1b2b4 <strtol>
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b142:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
    robotHWversion = strtol(p1, NULL, 10);
    b146:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
    snprintf(s, MSL, "# URobot:decode  hw=%d from sethw '%s'\r\n", robotHWversion, p1);
    b14a:	b2c3      	uxtb	r3, r0
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b14c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    snprintf(s, MSL, "# URobot:decode  hw=%d from sethw '%s'\r\n", robotHWversion, p1);
    b150:	2164      	movs	r1, #100	; 0x64
    b152:	9500      	str	r5, [sp, #0]
    b154:	a803      	add	r0, sp, #12
    b156:	4a9c      	ldr	r2, [pc, #624]	; (b3c8 <URobot::decode(char const*)+0x310>)
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b158:	ed9f 3b8f 	vldr	d3, [pc, #572]	; b398 <URobot::decode(char const*)+0x2e0>
    b15c:	ed9f 4b90 	vldr	d4, [pc, #576]	; b3a0 <URobot::decode(char const*)+0x2e8>
    b160:	ed9f 5b91 	vldr	d5, [pc, #580]	; b3a8 <URobot::decode(char const*)+0x2f0>
    b164:	ee83 6b07 	vdiv.f64	d6, d3, d7
    b168:	ee26 6b04 	vmul.f64	d6, d6, d4
    b16c:	ee86 7b05 	vdiv.f64	d7, d6, d5
    b170:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    b174:	ed86 7a0a 	vstr	s14, [r6, #40]	; 0x28
    snprintf(s, MSL, "# URobot:decode  hw=%d from sethw '%s'\r\n", robotHWversion, p1);
    b178:	f010 fa8c 	bl	1b694 <snprintf>
    usb.send(s);
    b17c:	a903      	add	r1, sp, #12
    b17e:	4890      	ldr	r0, [pc, #576]	; (b3c0 <URobot::decode(char const*)+0x308>)
    b180:	f001 f9cc 	bl	c51c <UUSB::send(char const*)>
}
    b184:	2001      	movs	r0, #1
    b186:	b01c      	add	sp, #112	; 0x70
    b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    deviceID = strtol(p1, NULL, 10);
    b18c:	4604      	mov	r4, r0
    b18e:	4601      	mov	r1, r0
    b190:	220a      	movs	r2, #10
    b192:	1de8      	adds	r0, r5, #7
    b194:	f010 f88e 	bl	1b2b4 <strtol>
    b198:	2896      	cmp	r0, #150	; 0x96
    b19a:	bf98      	it	ls
    b19c:	4604      	movls	r4, r0
}
    b19e:	2001      	movs	r0, #1
    deviceID = strtol(p1, NULL, 10);
    b1a0:	62f4      	str	r4, [r6, #44]	; 0x2c
}
    b1a2:	b01c      	add	sp, #112	; 0x70
    b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (strncmp(buf, "pind ", 5) == 0)
    b1a8:	2205      	movs	r2, #5
    b1aa:	4988      	ldr	r1, [pc, #544]	; (b3cc <URobot::decode(char const*)+0x314>)
    b1ac:	4628      	mov	r0, r5
    b1ae:	f010 fd29 	bl	1bc04 <strncmp>
    b1b2:	b3a8      	cbz	r0, b220 <URobot::decode(char const*)+0x168>
  else if (strncmp(buf, "pinv ", 5) == 0)
    b1b4:	2205      	movs	r2, #5
    b1b6:	4986      	ldr	r1, [pc, #536]	; (b3d0 <URobot::decode(char const*)+0x318>)
    b1b8:	4628      	mov	r0, r5
    b1ba:	f010 fd23 	bl	1bc04 <strncmp>
    b1be:	2800      	cmp	r0, #0
    b1c0:	f000 80a2 	beq.w	b308 <URobot::decode(char const*)+0x250>
  else if (strncmp(buf, "halt", 4) == 0)
    b1c4:	2204      	movs	r2, #4
    b1c6:	4983      	ldr	r1, [pc, #524]	; (b3d4 <URobot::decode(char const*)+0x31c>)
    b1c8:	4628      	mov	r0, r5
    b1ca:	f010 fd1b 	bl	1bc04 <strncmp>
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d150      	bne.n	b274 <URobot::decode(char const*)+0x1bc>
    if (buf[4] >= ' ')
    b1d2:	792b      	ldrb	r3, [r5, #4]
    b1d4:	2b1f      	cmp	r3, #31
    b1d6:	f200 8081 	bhi.w	b2dc <URobot::decode(char const*)+0x224>
      batteryHalt = true;
    b1da:	2301      	movs	r3, #1
    b1dc:	f886 333c 	strb.w	r3, [r6, #828]	; 0x33c
    b1e0:	e7d0      	b.n	b184 <URobot::decode(char const*)+0xcc>
      usb.send("# got new name (get with 'id')\r\n");
    b1e2:	497d      	ldr	r1, [pc, #500]	; (b3d8 <URobot::decode(char const*)+0x320>)
    b1e4:	3f01      	subs	r7, #1
    b1e6:	4876      	ldr	r0, [pc, #472]	; (b3c0 <URobot::decode(char const*)+0x308>)
    b1e8:	f106 0830 	add.w	r8, r6, #48	; 0x30
    b1ec:	f001 f996 	bl	c51c <UUSB::send(char const*)>
      for (int i = 0; i < MAX_NAME_LENGTH-1; i++)
    b1f0:	e009      	b.n	b206 <URobot::decode(char const*)+0x14e>
        if (isalnum(*p1))
    b1f2:	f010 f877 	bl	1b2e4 <isalnum>
      for (int i = 0; i < MAX_NAME_LENGTH-1; i++)
    b1f6:	3401      	adds	r4, #1
                    deviceName[i] = '_';
    b1f8:	2800      	cmp	r0, #0
    b1fa:	bf08      	it	eq
    b1fc:	255f      	moveq	r5, #95	; 0x5f
      for (int i = 0; i < MAX_NAME_LENGTH-1; i++)
    b1fe:	2c1f      	cmp	r4, #31
    b200:	f808 5f01 	strb.w	r5, [r8, #1]!
    b204:	d008      	beq.n	b218 <URobot::decode(char const*)+0x160>
        if (*p1 <= ' ')
    b206:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    b20a:	2d20      	cmp	r5, #32
        if (isalnum(*p1))
    b20c:	4628      	mov	r0, r5
        if (*p1 <= ' ')
    b20e:	d8f0      	bhi.n	b1f2 <URobot::decode(char const*)+0x13a>
                    deviceName[i] = '\0';
    b210:	4434      	add	r4, r6
    b212:	2300      	movs	r3, #0
    b214:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
            deviceName[MAX_NAME_LENGTH-1] = '\0';
    b218:	2300      	movs	r3, #0
    b21a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    b21e:	e77a      	b.n	b116 <URobot::decode(char const*)+0x5e>
    const char * p1 = &buf[5];
    b220:	1d68      	adds	r0, r5, #5
    debugPin = strtol(p1, (char**)&p1, 10);
    b222:	220a      	movs	r2, #10
    b224:	a903      	add	r1, sp, #12
    const char * p1 = &buf[5];
    b226:	9003      	str	r0, [sp, #12]
    debugPin = strtol(p1, (char**)&p1, 10);
    b228:	f010 f844 	bl	1b2b4 <strtol>
    int dir = strtol(p1, (char**)&p1, 10);
    b22c:	220a      	movs	r2, #10
    b22e:	a903      	add	r1, sp, #12
    debugPin = strtol(p1, (char**)&p1, 10);
    b230:	f8c6 02fc 	str.w	r0, [r6, #764]	; 0x2fc
    int dir = strtol(p1, (char**)&p1, 10);
    b234:	9803      	ldr	r0, [sp, #12]
    b236:	f010 f83d 	bl	1b2b4 <strtol>
    int pud = strtol(p1, (char**)&p1, 10);
    b23a:	220a      	movs	r2, #10
    int dir = strtol(p1, (char**)&p1, 10);
    b23c:	4604      	mov	r4, r0
    int pud = strtol(p1, (char**)&p1, 10);
    b23e:	a903      	add	r1, sp, #12
    b240:	9803      	ldr	r0, [sp, #12]
    b242:	f010 f837 	bl	1b2b4 <strtol>
    switch (pud)
    b246:	1c43      	adds	r3, r0, #1
    b248:	d041      	beq.n	b2ce <URobot::decode(char const*)+0x216>
    b24a:	2801      	cmp	r0, #1
    b24c:	d138      	bne.n	b2c0 <URobot::decode(char const*)+0x208>
      case 1:  pinMode(debugPin, INPUT_PULLUP); break;
    b24e:	2102      	movs	r1, #2
    b250:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
      default: pinMode(debugPin, dir); break;
    b254:	b2e4      	uxtb	r4, r4
      case 1:  pinMode(debugPin, INPUT_PULLUP); break;
    b256:	f00a fe7d 	bl	15f54 <pinMode>
    pinMode(debugPin, dir);
    b25a:	4621      	mov	r1, r4
    b25c:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
    b260:	f00a fe78 	bl	15f54 <pinMode>
    b264:	e78e      	b.n	b184 <URobot::decode(char const*)+0xcc>
      robobot = false;
    b266:	2300      	movs	r3, #0
}
    b268:	2001      	movs	r0, #1
      robobot = false;
    b26a:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
}
    b26e:	b01c      	add	sp, #112	; 0x70
    b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (strncmp(buf, "stop", 4) == 0)
    b274:	2204      	movs	r2, #4
    b276:	4959      	ldr	r1, [pc, #356]	; (b3dc <URobot::decode(char const*)+0x324>)
    b278:	4628      	mov	r0, r5
    b27a:	f010 fcc3 	bl	1bc04 <strncmp>
    b27e:	4604      	mov	r4, r0
    b280:	2800      	cmp	r0, #0
    b282:	d036      	beq.n	b2f2 <URobot::decode(char const*)+0x23a>
  else if (strncmp(buf, "start", 5) == 0)
    b284:	2205      	movs	r2, #5
    b286:	4956      	ldr	r1, [pc, #344]	; (b3e0 <URobot::decode(char const*)+0x328>)
    b288:	4628      	mov	r0, r5
    b28a:	f010 fcbb 	bl	1bc04 <strncmp>
    b28e:	2800      	cmp	r0, #0
    b290:	d055      	beq.n	b33e <URobot::decode(char const*)+0x286>
  else if (strncmp(buf, "auto", 4) == 0)
    b292:	2204      	movs	r2, #4
    b294:	4953      	ldr	r1, [pc, #332]	; (b3e4 <URobot::decode(char const*)+0x32c>)
    b296:	4628      	mov	r0, r5
    b298:	f010 fcb4 	bl	1bc04 <strncmp>
    b29c:	2800      	cmp	r0, #0
    b29e:	d06b      	beq.n	b378 <URobot::decode(char const*)+0x2c0>
  else if (strncmp(buf, "off", 3) == 0)
    b2a0:	782b      	ldrb	r3, [r5, #0]
    b2a2:	2b6f      	cmp	r3, #111	; 0x6f
    b2a4:	d152      	bne.n	b34c <URobot::decode(char const*)+0x294>
    b2a6:	786b      	ldrb	r3, [r5, #1]
    b2a8:	2b66      	cmp	r3, #102	; 0x66
    b2aa:	d14f      	bne.n	b34c <URobot::decode(char const*)+0x294>
    b2ac:	78a9      	ldrb	r1, [r5, #2]
    b2ae:	3966      	subs	r1, #102	; 0x66
    b2b0:	d14c      	bne.n	b34c <URobot::decode(char const*)+0x294>
    float ts = strtof(p1, nullptr);
    b2b2:	1d28      	adds	r0, r5, #4
    b2b4:	f00f fefa 	bl	1b0ac <strtof>
    powerOff(ts);
    b2b8:	4630      	mov	r0, r6
    b2ba:	f7ff fc65 	bl	ab88 <URobot::powerOff(float)>
    b2be:	e761      	b.n	b184 <URobot::decode(char const*)+0xcc>
      default: pinMode(debugPin, dir); break;
    b2c0:	b2e4      	uxtb	r4, r4
    b2c2:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
    b2c6:	4621      	mov	r1, r4
    b2c8:	f00a fe44 	bl	15f54 <pinMode>
    b2cc:	e7c5      	b.n	b25a <URobot::decode(char const*)+0x1a2>
      case -1: pinMode(debugPin, INPUT_PULLDOWN); break;
    b2ce:	2103      	movs	r1, #3
    b2d0:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
      default: pinMode(debugPin, dir); break;
    b2d4:	b2e4      	uxtb	r4, r4
      case -1: pinMode(debugPin, INPUT_PULLDOWN); break;
    b2d6:	f00a fe3d 	bl	15f54 <pinMode>
    b2da:	e7be      	b.n	b25a <URobot::decode(char const*)+0x1a2>
      batteryHalt = strtol(&buf[5], NULL, 10);
    b2dc:	4601      	mov	r1, r0
    b2de:	220a      	movs	r2, #10
    b2e0:	1d68      	adds	r0, r5, #5
    b2e2:	f00f ffe7 	bl	1b2b4 <strtol>
    b2e6:	3800      	subs	r0, #0
    b2e8:	bf18      	it	ne
    b2ea:	2001      	movne	r0, #1
    b2ec:	f886 033c 	strb.w	r0, [r6, #828]	; 0x33c
    b2f0:	e748      	b.n	b184 <URobot::decode(char const*)+0xcc>

void URobot::stop()
{ // command motors to stop
  // and set state to manual
  usb.send("# stopping\r\n");
    b2f2:	493d      	ldr	r1, [pc, #244]	; (b3e8 <URobot::decode(char const*)+0x330>)
    b2f4:	4832      	ldr	r0, [pc, #200]	; (b3c0 <URobot::decode(char const*)+0x308>)
    missionStart = false;
    b2f6:	7634      	strb	r4, [r6, #24]
  usb.send("# stopping\r\n");
    b2f8:	f001 f910 	bl	c51c <UUSB::send(char const*)>
  motor.stopAllMotors();
    b2fc:	483b      	ldr	r0, [pc, #236]	; (b3ec <URobot::decode(char const*)+0x334>)
    b2fe:	f7fd fdf1 	bl	8ee4 <UMotor::stopAllMotors()>
  motortest.motorTestRunning = false;
    b302:	4b3b      	ldr	r3, [pc, #236]	; (b3f0 <URobot::decode(char const*)+0x338>)
    b304:	751c      	strb	r4, [r3, #20]
}
    b306:	e73d      	b.n	b184 <URobot::decode(char const*)+0xcc>
    const char * p1 = &buf[5];
    b308:	1d68      	adds	r0, r5, #5
    int pin = strtol(p1, (char**)&p1, 10);
    b30a:	220a      	movs	r2, #10
    b30c:	a903      	add	r1, sp, #12
    const char * p1 = &buf[5];
    b30e:	9003      	str	r0, [sp, #12]
    int pin = strtol(p1, (char**)&p1, 10);
    b310:	f00f ffd0 	bl	1b2b4 <strtol>
    b314:	4604      	mov	r4, r0
    int val = strtol(p1, (char**)&p1, 10);
    b316:	220a      	movs	r2, #10
    b318:	a903      	add	r1, sp, #12
    b31a:	9803      	ldr	r0, [sp, #12]
    b31c:	f00f ffca 	bl	1b2b4 <strtol>
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    b320:	4a34      	ldr	r2, [pc, #208]	; (b3f4 <URobot::decode(char const*)+0x33c>)
    b322:	b2e3      	uxtb	r3, r4
    b324:	b2c0      	uxtb	r0, r0
    b326:	0119      	lsls	r1, r3, #4
    b328:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    b32c:	5852      	ldr	r2, [r2, r1]
    b32e:	68db      	ldr	r3, [r3, #12]
    b330:	b110      	cbz	r0, b338 <URobot::decode(char const*)+0x280>
    b332:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    b336:	e725      	b.n	b184 <URobot::decode(char const*)+0xcc>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    b338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    b33c:	e722      	b.n	b184 <URobot::decode(char const*)+0xcc>
    missionStart = true;
    b33e:	2301      	movs	r3, #1
    usb.send("# starting\r\n");
    b340:	492d      	ldr	r1, [pc, #180]	; (b3f8 <URobot::decode(char const*)+0x340>)
    b342:	481f      	ldr	r0, [pc, #124]	; (b3c0 <URobot::decode(char const*)+0x308>)
    missionStart = true;
    b344:	7633      	strb	r3, [r6, #24]
    usb.send("# starting\r\n");
    b346:	f001 f8e9 	bl	c51c <UUSB::send(char const*)>
    b34a:	e71b      	b.n	b184 <URobot::decode(char const*)+0xcc>
  else if (strncmp(buf, "stime ", 6) == 0)
    b34c:	2206      	movs	r2, #6
    b34e:	492b      	ldr	r1, [pc, #172]	; (b3fc <URobot::decode(char const*)+0x344>)
    b350:	4628      	mov	r0, r5
    b352:	f010 fc57 	bl	1bc04 <strncmp>
    b356:	2800      	cmp	r0, #0
    b358:	d156      	bne.n	b408 <URobot::decode(char const*)+0x350>
    int32_t ts = strtol(p1, nullptr, 10);
    b35a:	220a      	movs	r2, #10
    b35c:	4601      	mov	r1, r0
    b35e:	1da8      	adds	r0, r5, #6
    b360:	f00f ffa8 	bl	1b2b4 <strtol>
    if (ts >= 20 and ts <= 500000)
    b364:	4b26      	ldr	r3, [pc, #152]	; (b400 <URobot::decode(char const*)+0x348>)
    b366:	f1a0 0214 	sub.w	r2, r0, #20
    b36a:	429a      	cmp	r2, r3
    b36c:	d853      	bhi.n	b416 <URobot::decode(char const*)+0x35e>
      service.setSampleTime(ts);
    b36e:	4601      	mov	r1, r0
    b370:	4824      	ldr	r0, [pc, #144]	; (b404 <URobot::decode(char const*)+0x34c>)
    b372:	f000 faa1 	bl	b8b8 <UService::setSampleTime(long)>
    b376:	e705      	b.n	b184 <URobot::decode(char const*)+0xcc>
    const char * p1 = &buf[4];
    b378:	3504      	adds	r5, #4
    int a = strtol(p1, &p2, 10);
    b37a:	220a      	movs	r2, #10
    b37c:	a902      	add	r1, sp, #8
    b37e:	4628      	mov	r0, r5
    b380:	f00f ff98 	bl	1b2b4 <strtol>
    if (p2 == p1)
    b384:	9b02      	ldr	r3, [sp, #8]
    b386:	42ab      	cmp	r3, r5
    b388:	d04a      	beq.n	b420 <URobot::decode(char const*)+0x368>
      missionAutoStart = a != 0;
    b38a:	1e03      	subs	r3, r0, #0
    b38c:	bf18      	it	ne
    b38e:	2301      	movne	r3, #1
    b390:	7673      	strb	r3, [r6, #25]
    b392:	e6f7      	b.n	b184 <URobot::decode(char const*)+0xcc>
    b394:	f3af 8000 	nop.w
    b398:	66666666 	.word	0x66666666
    b39c:	400a6666 	.word	0x400a6666
    b3a0:	9999999a 	.word	0x9999999a
    b3a4:	4049d999 	.word	0x4049d999
    b3a8:	cccccccd 	.word	0xcccccccd
    b3ac:	4012cccc 	.word	0x4012cccc
    b3b0:	20005960 	.word	0x20005960
    b3b4:	20005968 	.word	0x20005968
    b3b8:	2000599c 	.word	0x2000599c
    b3bc:	200059a4 	.word	0x200059a4
    b3c0:	2000eab8 	.word	0x2000eab8
    b3c4:	200059e8 	.word	0x200059e8
    b3c8:	20005970 	.word	0x20005970
    b3cc:	200059f0 	.word	0x200059f0
    b3d0:	200059f8 	.word	0x200059f8
    b3d4:	20005a00 	.word	0x20005a00
    b3d8:	200059c4 	.word	0x200059c4
    b3dc:	20005a08 	.word	0x20005a08
    b3e0:	20005a20 	.word	0x20005a20
    b3e4:	20005958 	.word	0x20005958
    b3e8:	20005a10 	.word	0x20005a10
    b3ec:	2000e4bc 	.word	0x2000e4bc
    b3f0:	2000e518 	.word	0x2000e518
    b3f4:	20008148 	.word	0x20008148
    b3f8:	20005a28 	.word	0x20005a28
    b3fc:	20005a38 	.word	0x20005a38
    b400:	0007a10c 	.word	0x0007a10c
    b404:	2000d0c8 	.word	0x2000d0c8
  else if (subscribeDecode(buf)) {}
    b408:	4629      	mov	r1, r5
    b40a:	4630      	mov	r0, r6
}
    b40c:	b01c      	add	sp, #112	; 0x70
    b40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else if (subscribeDecode(buf)) {}
    b412:	f000 be9b 	b.w	c14c <USubss::subscribeDecode(char const*)>
      usb.send("# sample time T out of bounds (19<=T<=500000 (us))\r\n");
    b416:	4908      	ldr	r1, [pc, #32]	; (b438 <URobot::decode(char const*)+0x380>)
    b418:	4808      	ldr	r0, [pc, #32]	; (b43c <URobot::decode(char const*)+0x384>)
    b41a:	f001 f87f 	bl	c51c <UUSB::send(char const*)>
    b41e:	e6b1      	b.n	b184 <URobot::decode(char const*)+0xcc>
  snprintf(s, MSL, "start %d\r\n", missionAutoStart);
    b420:	7e73      	ldrb	r3, [r6, #25]
    b422:	211e      	movs	r1, #30
    b424:	4a06      	ldr	r2, [pc, #24]	; (b440 <URobot::decode(char const*)+0x388>)
    b426:	a803      	add	r0, sp, #12
    b428:	f010 f934 	bl	1b694 <snprintf>
  usb.send(s);
    b42c:	a903      	add	r1, sp, #12
    b42e:	4803      	ldr	r0, [pc, #12]	; (b43c <URobot::decode(char const*)+0x384>)
    b430:	f001 f874 	bl	c51c <UUSB::send(char const*)>
}
    b434:	e6a6      	b.n	b184 <URobot::decode(char const*)+0xcc>
    b436:	bf00      	nop
    b438:	20005a40 	.word	0x20005a40
    b43c:	2000eab8 	.word	0x2000eab8
    b440:	200056d0 	.word	0x200056d0
    b444:	00000000 	.word	0x00000000

0000b448 <URobot::eePromLoad()>:


void URobot::eePromLoad()
{
    b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return stringConfig;
    b44c:	4c42      	ldr	r4, [pc, #264]	; (b558 <URobot::eePromLoad()+0x110>)
    b44e:	f894 6020 	ldrb.w	r6, [r4, #32]
  if (not eeConfig.isStringConfig())
    b452:	b126      	cbz	r6, b45e <URobot::eePromLoad()+0x16>
    configAddr+=bytes;
    b454:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b456:	3325      	adds	r3, #37	; 0x25
    b458:	6263      	str	r3, [r4, #36]	; 0x24
  else
  { // hard coded mission should not change name and ID
    int skip = 2 + 2 + 1 + MAX_NAME_LENGTH;
    eeConfig.skipAddr(skip);
  }
}
    b45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ts = eeConfig.read32(); // in 10 us unit
    b45e:	4605      	mov	r5, r0
    b460:	4620      	mov	r0, r4
    b462:	f7f7 fe15 	bl	3090 <EEConfig::read32()>
    b466:	4601      	mov	r1, r0
    service.setSampleTime(ts); // param in us
    b468:	483c      	ldr	r0, [pc, #240]	; (b55c <URobot::eePromLoad()+0x114>)
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b46a:	f105 0831 	add.w	r8, r5, #49	; 0x31
    service.setSampleTime(ts); // param in us
    b46e:	f000 fa23 	bl	b8b8 <UService::setSampleTime(long)>
    deviceID = eeConfig.readWord();
    b472:	4620      	mov	r0, r4
    b474:	f7f7 fe34 	bl	30e0 <EEConfig::readWord()>
    b478:	4603      	mov	r3, r0
    robotHWversion = eeConfig.readByte();
    b47a:	4620      	mov	r0, r4
    deviceID = eeConfig.readWord();
    b47c:	2b96      	cmp	r3, #150	; 0x96
    b47e:	bf94      	ite	ls
    b480:	461a      	movls	r2, r3
    b482:	4632      	movhi	r2, r6
    b484:	62ea      	str	r2, [r5, #44]	; 0x2c
    robotHWversion = eeConfig.readByte();
    b486:	f7f7 fe17 	bl	30b8 <EEConfig::readByte()>
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b48a:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
    robotHWversion = eeConfig.readByte();
    b48e:	4603      	mov	r3, r0
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b490:	2220      	movs	r2, #32
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b492:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b496:	4620      	mov	r0, r4
    robotHWversion = eeConfig.readByte();
    b498:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b49c:	4641      	mov	r1, r8
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b49e:	ed9f 3b28 	vldr	d3, [pc, #160]	; b540 <URobot::eePromLoad()+0xf8>
    b4a2:	ed9f 4b29 	vldr	d4, [pc, #164]	; b548 <URobot::eePromLoad()+0x100>
    b4a6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; b550 <URobot::eePromLoad()+0x108>
    b4aa:	ee83 6b07 	vdiv.f64	d6, d3, d7
    b4ae:	ee26 6b04 	vmul.f64	d6, d6, d4
    b4b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
    b4b6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    b4ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b4be:	f7f8 f821 	bl	3504 <EEConfig::readBlock(char*, int)>
    if (deviceName[0] == '\0')
    b4c2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    deviceName[MAX_NAME_LENGTH-1] = '\0';
    b4c6:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
    if (deviceName[0] == '\0')
    b4ca:	b34b      	cbz	r3, b520 <URobot::eePromLoad()+0xd8>
    else if (strncasecmp(deviceName, "robobot", 7) == 0)
    b4cc:	2207      	movs	r2, #7
    b4ce:	4924      	ldr	r1, [pc, #144]	; (b560 <URobot::eePromLoad()+0x118>)
    b4d0:	4640      	mov	r0, r8
    b4d2:	f010 fb69 	bl	1bba8 <strncasecmp>
    b4d6:	b1c8      	cbz	r0, b50c <URobot::eePromLoad()+0xc4>
      robobot = false;
    b4d8:	f885 6051 	strb.w	r6, [r5, #81]	; 0x51
      for (int i = 1; i < MAX_NAME_LENGTH; i++)
    b4dc:	4644      	mov	r4, r8
    b4de:	f105 0750 	add.w	r7, r5, #80	; 0x50
                deviceName[i] = '_';
    b4e2:	265f      	movs	r6, #95	; 0x5f
        if (deviceName[i] != '\0' and not isalnum(deviceName[i]))
    b4e4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    b4e8:	b118      	cbz	r0, b4f2 <URobot::eePromLoad()+0xaa>
    b4ea:	f00f fefb 	bl	1b2e4 <isalnum>
    b4ee:	b900      	cbnz	r0, b4f2 <URobot::eePromLoad()+0xaa>
                deviceName[i] = '_';
    b4f0:	7026      	strb	r6, [r4, #0]
      for (int i = 1; i < MAX_NAME_LENGTH; i++)
    b4f2:	42bc      	cmp	r4, r7
    b4f4:	d1f6      	bne.n	b4e4 <URobot::eePromLoad()+0x9c>
    missionAutoStart = (flags & 0x01) > 0;
    b4f6:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
    display.setLine(deviceName);
    b4fa:	4641      	mov	r1, r8
    b4fc:	4819      	ldr	r0, [pc, #100]	; (b564 <URobot::eePromLoad()+0x11c>)
    missionAutoStart = (flags & 0x01) > 0;
    b4fe:	f006 0601 	and.w	r6, r6, #1
    b502:	766e      	strb	r6, [r5, #25]
}
    b504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    display.setLine(deviceName);
    b508:	f7f7 bc30 	b.w	2d6c <UDisplay::setLine(char const*)>
      robobot = true;
    b50c:	2301      	movs	r3, #1
    display.setLine(deviceName);
    b50e:	4641      	mov	r1, r8
    missionAutoStart = (flags & 0x01) > 0;
    b510:	766e      	strb	r6, [r5, #25]
      robobot = true;
    b512:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
    display.setLine(deviceName);
    b516:	4813      	ldr	r0, [pc, #76]	; (b564 <URobot::eePromLoad()+0x11c>)
}
    b518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    display.setLine(deviceName);
    b51c:	f7f7 bc26 	b.w	2d6c <UDisplay::setLine(char const*)>
      strncpy(deviceName, "unknown", MAX_NAME_LENGTH);
    b520:	4911      	ldr	r1, [pc, #68]	; (b568 <URobot::eePromLoad()+0x120>)
    b522:	4640      	mov	r0, r8
    b524:	2220      	movs	r2, #32
    b526:	f010 fbb3 	bl	1bc90 <strncpy>
    missionAutoStart = (flags & 0x01) > 0;
    b52a:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
    display.setLine(deviceName);
    b52e:	4641      	mov	r1, r8
    b530:	480c      	ldr	r0, [pc, #48]	; (b564 <URobot::eePromLoad()+0x11c>)
    missionAutoStart = (flags & 0x01) > 0;
    b532:	f006 0601 	and.w	r6, r6, #1
    b536:	766e      	strb	r6, [r5, #25]
}
    b538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    display.setLine(deviceName);
    b53c:	f7f7 bc16 	b.w	2d6c <UDisplay::setLine(char const*)>
    b540:	66666666 	.word	0x66666666
    b544:	400a6666 	.word	0x400a6666
    b548:	9999999a 	.word	0x9999999a
    b54c:	4049d999 	.word	0x4049d999
    b550:	cccccccd 	.word	0xcccccccd
    b554:	4012cccc 	.word	0x4012cccc
    b558:	2000dbe8 	.word	0x2000dbe8
    b55c:	2000d0c8 	.word	0x2000d0c8
    b560:	200059e8 	.word	0x200059e8
    b564:	2000db0c 	.word	0x2000db0c
    b568:	200056a0 	.word	0x200056a0

0000b56c <URobot::eePromSave()>:

void URobot::eePromSave()
{
  eeConfig.push32(service.sampleTime_us);
    b56c:	4b0d      	ldr	r3, [pc, #52]	; (b5a4 <URobot::eePromSave()+0x38>)
{
    b56e:	b510      	push	{r4, lr}
    b570:	4604      	mov	r4, r0
  eeConfig.push32(service.sampleTime_us);
    b572:	6819      	ldr	r1, [r3, #0]
    b574:	480c      	ldr	r0, [pc, #48]	; (b5a8 <URobot::eePromSave()+0x3c>)
    b576:	f7f7 fd37 	bl	2fe8 <EEConfig::push32(unsigned long)>
  eeConfig.pushWord(deviceID);
    b57a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    b57c:	480a      	ldr	r0, [pc, #40]	; (b5a8 <URobot::eePromSave()+0x3c>)
    b57e:	f7f7 fd6b 	bl	3058 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushByte(robotHWversion);
    b582:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    b586:	4808      	ldr	r0, [pc, #32]	; (b5a8 <URobot::eePromSave()+0x3c>)
    b588:	f7f7 fd4a 	bl	3020 <EEConfig::pushByte(unsigned char)>
  // flags introduced as last character in device name without changing ee-flash layout.
  // limits the name length to 30 chars (rather than 31)
  uint8_t flags = missionAutoStart & 0x01;
  deviceName[MAX_NAME_LENGTH-1] = flags;
    b58c:	7e63      	ldrb	r3, [r4, #25]
  eeConfig.pushBlock(deviceName, MAX_NAME_LENGTH);
    b58e:	f104 0131 	add.w	r1, r4, #49	; 0x31
    b592:	2220      	movs	r2, #32
  deviceName[MAX_NAME_LENGTH-1] = flags;
    b594:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  eeConfig.pushBlock(deviceName, MAX_NAME_LENGTH);
    b598:	4803      	ldr	r0, [pc, #12]	; (b5a8 <URobot::eePromSave()+0x3c>)
}
    b59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eeConfig.pushBlock(deviceName, MAX_NAME_LENGTH);
    b59e:	f7f7 bf87 	b.w	34b0 <EEConfig::pushBlock(char const*, int)>
    b5a2:	bf00      	nop
    b5a4:	2000d0c8 	.word	0x2000d0c8
    b5a8:	2000dbe8 	.word	0x2000dbe8

0000b5ac <_GLOBAL__sub_I_robot>:
}
    b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
class URobot : public USubss
    b5ae:	4c33      	ldr	r4, [pc, #204]	; (b67c <_GLOBAL__sub_I_robot+0xd0>)
    b5b0:	2500      	movs	r5, #0
    b5b2:	4f33      	ldr	r7, [pc, #204]	; (b680 <_GLOBAL__sub_I_robot+0xd4>)
    b5b4:	4620      	mov	r0, r4
    b5b6:	f000 fdbf 	bl	c138 <USubss::USubss()>
    b5ba:	4a32      	ldr	r2, [pc, #200]	; (b684 <_GLOBAL__sub_I_robot+0xd8>)
    b5bc:	4b32      	ldr	r3, [pc, #200]	; (b688 <_GLOBAL__sub_I_robot+0xdc>)
      return pow(__type(__x), __type(__y));
    b5be:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    b5c2:	ed92 1a05 	vldr	s2, [r2, #20]
    b5c6:	f107 0620 	add.w	r6, r7, #32
    b5ca:	6023      	str	r3, [r4, #0]
    b5cc:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
    b5d0:	8325      	strh	r5, [r4, #24]
    b5d2:	61e5      	str	r5, [r4, #28]
    b5d4:	f00c fdac 	bl	18130 <pow>
    b5d8:	ee30 0b00 	vadd.f64	d0, d0, d0
    b5dc:	2308      	movs	r3, #8
    b5de:	f104 0c31 	add.w	ip, r4, #49	; 0x31
    b5e2:	62e5      	str	r5, [r4, #44]	; 0x2c
    b5e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    b5e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    b5ec:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    b5f0:	463d      	mov	r5, r7
    b5f2:	f10c 0c10 	add.w	ip, ip, #16
    b5f6:	3710      	adds	r7, #16
    b5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b5fa:	42b5      	cmp	r5, r6
    b5fc:	f84c 0c10 	str.w	r0, [ip, #-16]
    b600:	f84c 1c0c 	str.w	r1, [ip, #-12]
    b604:	f84c 2c08 	str.w	r2, [ip, #-8]
    b608:	f84c 3c04 	str.w	r3, [ip, #-4]
    b60c:	d1f0      	bne.n	b5f0 <_GLOBAL__sub_I_robot+0x44>
    b60e:	783b      	ldrb	r3, [r7, #0]
    b610:	2500      	movs	r5, #0
    b612:	4e1e      	ldr	r6, [pc, #120]	; (b68c <_GLOBAL__sub_I_robot+0xe0>)
    b614:	2220      	movs	r2, #32
    b616:	f88c 3000 	strb.w	r3, [ip]
    b61a:	2300      	movs	r3, #0
    b61c:	6565      	str	r5, [r4, #84]	; 0x54
    b61e:	4629      	mov	r1, r5
    b620:	18b0      	adds	r0, r6, r2
    b622:	6175      	str	r5, [r6, #20]
    b624:	6723      	str	r3, [r4, #112]	; 0x70
    b626:	66e5      	str	r5, [r4, #108]	; 0x6c
    b628:	e9c6 5501 	strd	r5, r5, [r6, #4]
    b62c:	e9c6 5503 	strd	r5, r5, [r6, #12]
    b630:	f010 fa02 	bl	1ba38 <memset>
    b634:	f44f 7217 	mov.w	r2, #604	; 0x25c
    b638:	4915      	ldr	r1, [pc, #84]	; (b690 <_GLOBAL__sub_I_robot+0xe4>)
    b63a:	f106 0044 	add.w	r0, r6, #68	; 0x44
    b63e:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    b642:	f00a ff9f 	bl	16584 <memcpy>
    b646:	2102      	movs	r1, #2
    b648:	f44f 7380 	mov.w	r3, #256	; 0x100
    b64c:	f8c6 52b0 	str.w	r5, [r6, #688]	; 0x2b0
URobot robot;
    b650:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
    b654:	f8c4 130c 	str.w	r1, [r4, #780]	; 0x30c
    b658:	f884 52f4 	strb.w	r5, [r4, #756]	; 0x2f4
    b65c:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    b660:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
    b664:	f8c4 5338 	str.w	r5, [r4, #824]	; 0x338
    b668:	f884 533c 	strb.w	r5, [r4, #828]	; 0x33c
    b66c:	4a09      	ldr	r2, [pc, #36]	; (b694 <_GLOBAL__sub_I_robot+0xe8>)
    b66e:	490a      	ldr	r1, [pc, #40]	; (b698 <_GLOBAL__sub_I_robot+0xec>)
    b670:	e9c4 55bf 	strd	r5, r5, [r4, #764]	; 0x2fc
}
    b674:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
URobot robot;
    b678:	f00d bc3e 	b.w	18ef8 <__aeabi_atexit>
    b67c:	2000e654 	.word	0x2000e654
    b680:	20001e8c 	.word	0x20001e8c
    b684:	2000d89c 	.word	0x2000d89c
    b688:	20007fe8 	.word	0x20007fe8
    b68c:	2000e6a8 	.word	0x2000e6a8
    b690:	20001eb0 	.word	0x20001eb0
    b694:	20008f08 	.word	0x20008f08
    b698:	0000a5b1 	.word	0x0000a5b1
    b69c:	00000000 	.word	0x00000000

0000b6a0 <UService::sampleTimeInterrupt()>:
}

void UService::sampleTimeInterrupt()
{ // interrupt at half sample time
  // advance system time in micro seconds
  service.time_us += service.sampleTime_us/2;
    b6a0:	4b17      	ldr	r3, [pc, #92]	; (b700 <UService::sampleTimeInterrupt()+0x60>)
    b6a2:	f04f 0c00 	mov.w	ip, #0
    b6a6:	681a      	ldr	r2, [r3, #0]
    b6a8:	e9d3 1002 	ldrd	r1, r0, [r3, #8]
    b6ac:	0852      	lsrs	r2, r2, #1
    b6ae:	1889      	adds	r1, r1, r2
    b6b0:	f140 0000 	adc.w	r0, r0, #0
    b6b4:	6099      	str	r1, [r3, #8]
  if (service.nextIsHalf)
    b6b6:	7e59      	ldrb	r1, [r3, #25]
  service.time_us += service.sampleTime_us/2;
    b6b8:	60d8      	str	r0, [r3, #12]
  if (service.nextIsHalf)
    b6ba:	b1b1      	cbz	r1, b6ea <UService::sampleTimeInterrupt()+0x4a>
  { // flip half sample time flag
    service.nextIsHalf = false;
    service.sampleTimeHalfNow = true;
    b6bc:	2101      	movs	r1, #1
    service.nextIsHalf = false;
    b6be:	f883 c019 	strb.w	ip, [r3, #25]
    service.sampleTimeHalfNow = true;
    b6c2:	7459      	strb	r1, [r3, #17]
}


void UService::timePassed_us(uint32_t dt)
{
  time += float(dt)*1e-6;
    b6c4:	ee07 2a90 	vmov	s15, r2
    b6c8:	ed93 6a05 	vldr	s12, [r3, #20]
    b6cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    b6d0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    b6d4:	ed9f 5b08 	vldr	d5, [pc, #32]	; b6f8 <UService::sampleTimeInterrupt()+0x58>
    b6d8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    b6dc:	eea7 6b05 	vfma.f64	d6, d7, d5
    b6e0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    b6e4:	ed83 6a05 	vstr	s12, [r3, #20]
}
    b6e8:	4770      	bx	lr
    service.nextIsHalf = true;
    b6ea:	2101      	movs	r1, #1
    b6ec:	7659      	strb	r1, [r3, #25]
    service.sampleTimeNow = true;
    b6ee:	7419      	strb	r1, [r3, #16]
    b6f0:	e7e8      	b.n	b6c4 <UService::sampleTimeInterrupt()+0x24>
    b6f2:	bf00      	nop
    b6f4:	f3af 8000 	nop.w
    b6f8:	a0b5ed8d 	.word	0xa0b5ed8d
    b6fc:	3eb0c6f7 	.word	0x3eb0c6f7
    b700:	2000d0c8 	.word	0x2000d0c8

0000b704 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
    b704:	6803      	ldr	r3, [r0, #0]
    b706:	4718      	bx	r3

0000b708 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
    b708:	680b      	ldr	r3, [r1, #0]
    b70a:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    b70c:	4770      	bx	lr
    b70e:	bf00      	nop

0000b710 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
    b710:	680b      	ldr	r3, [r1, #0]
    b712:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    b714:	4770      	bx	lr
    b716:	bf00      	nop

0000b718 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
    b718:	4770      	bx	lr
    b71a:	bf00      	nop

0000b71c <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    b71c:	b510      	push	{r4, lr}
    b71e:	4604      	mov	r4, r0
		end();
    b720:	f00a f942 	bl	159a8 <IntervalTimer::end()>
	}
    b724:	4620      	mov	r0, r4
    b726:	bd10      	pop	{r4, pc}

0000b728 <UService::setup()>:
  sampleTime_us = 2000;
    b728:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  time_us = 0;
    b72c:	2200      	movs	r2, #0
{ // system sample time
    b72e:	b510      	push	{r4, lr}
  sampleTime_us = 2000;
    b730:	6003      	str	r3, [r0, #0]
  time_us = 0;
    b732:	2300      	movs	r3, #0
{ // system sample time
    b734:	b08c      	sub	sp, #48	; 0x30
  robot.setup();
    b736:	4c31      	ldr	r4, [pc, #196]	; (b7fc <UService::setup()+0xd4>)
  time_us = 0;
    b738:	e9c0 2302 	strd	r2, r3, [r0, #8]
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
    b73c:	4b30      	ldr	r3, [pc, #192]	; (b800 <UService::setup()+0xd8>)
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
    b73e:	a902      	add	r1, sp, #8
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    b740:	4a30      	ldr	r2, [pc, #192]	; (b804 <UService::setup()+0xdc>)
        vtable_ptr_->copy_ptr(
    b742:	a808      	add	r0, sp, #32
        vtable_ptr_ = std::addressof(vt);
    b744:	9300      	str	r3, [sp, #0]
        vtable_ptr_{other.vtable_ptr_}
    b746:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    b748:	9202      	str	r2, [sp, #8]
        vtable_ptr_->copy_ptr(
    b74a:	f7ff ffdd 	bl	b708 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    b74e:	a906      	add	r1, sp, #24
    b750:	f645 52bf 	movw	r2, #23999	; 0x5dbf
    b754:	482c      	ldr	r0, [pc, #176]	; (b808 <UService::setup()+0xe0>)
    b756:	f00a f8a5 	bl	158a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    b75a:	9b06      	ldr	r3, [sp, #24]
    b75c:	a808      	add	r0, sp, #32
    b75e:	68db      	ldr	r3, [r3, #12]
    b760:	4798      	blx	r3
    b762:	9b00      	ldr	r3, [sp, #0]
    b764:	a802      	add	r0, sp, #8
    b766:	68db      	ldr	r3, [r3, #12]
    b768:	4798      	blx	r3
  robot.setup();
    b76a:	4620      	mov	r0, r4
    b76c:	f7fe ff30 	bl	a5d0 <URobot::setup()>
  ad.setup();
    b770:	4826      	ldr	r0, [pc, #152]	; (b80c <UService::setup()+0xe4>)
    b772:	f7f6 f8c9 	bl	1908 <UAd::setup()>
  usb.setup();
    b776:	4826      	ldr	r0, [pc, #152]	; (b810 <UService::setup()+0xe8>)
    b778:	f001 faa0 	bl	ccbc <UUSB::setup()>
  command.setup();
    b77c:	4825      	ldr	r0, [pc, #148]	; (b814 <UService::setup()+0xec>)
    b77e:	f7f6 fdb7 	bl	22f0 <UCommand::setup()>
  asenc.setup();
    b782:	4825      	ldr	r0, [pc, #148]	; (b818 <UService::setup()+0xf0>)
    b784:	f7f6 fc86 	bl	2094 <UAsEnc::setup()>
  encoder.setup();
    b788:	4824      	ldr	r0, [pc, #144]	; (b81c <UService::setup()+0xf4>)
    b78a:	f7f8 f865 	bl	3858 <UEncoder::setup()>
  ls.setup();
    b78e:	4824      	ldr	r0, [pc, #144]	; (b820 <UService::setup()+0xf8>)
    b790:	f7fa fd8a 	bl	62a8 <ULineSensor::setup()>
  irdist.setup();
    b794:	4823      	ldr	r0, [pc, #140]	; (b824 <UService::setup()+0xfc>)
    b796:	f7f9 fd9f 	bl	52d8 <UIrDist::setup()>
  imu2.setup();
    b79a:	4823      	ldr	r0, [pc, #140]	; (b828 <UService::setup()+0x100>)
    b79c:	f7f8 fff8 	bl	4790 <UImu2::setup()>
  logger.setup();
    b7a0:	4822      	ldr	r0, [pc, #136]	; (b82c <UService::setup()+0x104>)
    b7a2:	f7fb fb9f 	bl	6ee4 <ULog::setup()>
  logger.setLogFlagDefault();
    b7a6:	4821      	ldr	r0, [pc, #132]	; (b82c <UService::setup()+0x104>)
    b7a8:	f7fc fd8e 	bl	82c8 <ULog::setLogFlagDefault()>
  logger.initLogStructure ();
    b7ac:	481f      	ldr	r0, [pc, #124]	; (b82c <UService::setup()+0x104>)
    b7ae:	f7fc f96d 	bl	7a8c <ULog::initLogStructure()>
  eeConfig.setup();
    b7b2:	481f      	ldr	r0, [pc, #124]	; (b830 <UService::setup()+0x108>)
    b7b4:	f7f7 fe58 	bl	3468 <EEConfig::setup()>
  current.setup();
    b7b8:	481e      	ldr	r0, [pc, #120]	; (b834 <UService::setup()+0x10c>)
    b7ba:	f7f6 fec5 	bl	2548 <UCurrent::setup()>
  servo.setup();  // set PWM for available servo pins
    b7be:	481e      	ldr	r0, [pc, #120]	; (b838 <UService::setup()+0x110>)
    b7c0:	f000 f952 	bl	ba68 <UServo::setup()>
  motor.setup();  // set motor pins
    b7c4:	481d      	ldr	r0, [pc, #116]	; (b83c <UService::setup()+0x114>)
    b7c6:	f7fc fec1 	bl	854c <UMotor::setup()>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    b7ca:	4b1d      	ldr	r3, [pc, #116]	; (b840 <UService::setup()+0x118>)
    b7cc:	2208      	movs	r2, #8
  display.setup();
    b7ce:	481d      	ldr	r0, [pc, #116]	; (b844 <UService::setup()+0x11c>)
    b7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    b7d4:	f7f7 f93e 	bl	2a54 <UDisplay::setup()>
  ledband.setup();
    b7d8:	481b      	ldr	r0, [pc, #108]	; (b848 <UService::setup()+0x120>)
    b7da:	f7fa f82f 	bl	583c <ULedBand::setup()>
  usbhost.setup();
    b7de:	481b      	ldr	r0, [pc, #108]	; (b84c <UService::setup()+0x124>)
    b7e0:	f001 fd7a 	bl	d2d8 <UUsbHost::setup()>
    if (robotHWversion == 9)
    b7e4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      analogWrite(pin, value << 3);
    b7e8:	2100      	movs	r1, #0
    if (robotHWversion == 9)
    b7ea:	2b09      	cmp	r3, #9
      analogWrite(pin, value << 3);
    b7ec:	bf14      	ite	ne
    b7ee:	2006      	movne	r0, #6
    b7f0:	4608      	moveq	r0, r1
}
    b7f2:	b00c      	add	sp, #48	; 0x30
    b7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7f8:	f00b b8a2 	b.w	16940 <analogWrite>
    b7fc:	2000e654 	.word	0x2000e654
    b800:	20008128 	.word	0x20008128
    b804:	0000b6a1 	.word	0x0000b6a1
    b808:	20009bd0 	.word	0x20009bd0
    b80c:	2000d89c 	.word	0x2000d89c
    b810:	2000eab8 	.word	0x2000eab8
    b814:	2000da18 	.word	0x2000da18
    b818:	2000d9dc 	.word	0x2000d9dc
    b81c:	2000dc34 	.word	0x2000dc34
    b820:	2000e384 	.word	0x2000e384
    b824:	2000e190 	.word	0x2000e190
    b828:	2000cfd0 	.word	0x2000cfd0
    b82c:	2000e240 	.word	0x2000e240
    b830:	2000dbe8 	.word	0x2000dbe8
    b834:	2000da90 	.word	0x2000da90
    b838:	2000ea58 	.word	0x2000ea58
    b83c:	2000e4bc 	.word	0x2000e4bc
    b840:	42004000 	.word	0x42004000
    b844:	2000db0c 	.word	0x2000db0c
    b848:	2000e1e0 	.word	0x2000e1e0
    b84c:	2000a400 	.word	0x2000a400

0000b850 <UService::isSampleTime()>:
{
    b850:	b538      	push	{r3, r4, r5, lr}
  if (cycleStarted)
    b852:	7e03      	ldrb	r3, [r0, #24]
{
    b854:	4604      	mov	r4, r0
  if (cycleStarted)
    b856:	b9eb      	cbnz	r3, b894 <UService::isSampleTime()+0x44>
  if (service.sampleTimeNow)
    b858:	4b13      	ldr	r3, [pc, #76]	; (b8a8 <UService::isSampleTime()+0x58>)
    b85a:	7c1d      	ldrb	r5, [r3, #16]
    b85c:	b985      	cbnz	r5, b880 <UService::isSampleTime()+0x30>
  else if (service.sampleTimeHalfNow)
    b85e:	7c5a      	ldrb	r2, [r3, #17]
    b860:	b922      	cbnz	r2, b86c <UService::isSampleTime()+0x1c>
    usb.tick(); // service commands from USB
    b862:	4812      	ldr	r0, [pc, #72]	; (b8ac <UService::isSampleTime()+0x5c>)
    b864:	f001 f89e 	bl	c9a4 <UUSB::tick()>
}
    b868:	4628      	mov	r0, r5
    b86a:	bd38      	pop	{r3, r4, r5, pc}
    ad.tickHalfTime();
    b86c:	4810      	ldr	r0, [pc, #64]	; (b8b0 <UService::isSampleTime()+0x60>)
    service.sampleTimeHalfNow = false;
    b86e:	745d      	strb	r5, [r3, #17]
    ad.tickHalfTime();
    b870:	f7f6 f946 	bl	1b00 <UAd::tickHalfTime()>
    cycleTime[item] = micros();
    b874:	f00a fb08 	bl	15e88 <micros>
    b878:	4b0e      	ldr	r3, [pc, #56]	; (b8b4 <UService::isSampleTime()+0x64>)
    b87a:	6698      	str	r0, [r3, #104]	; 0x68
}
    b87c:	4628      	mov	r0, r5
    b87e:	bd38      	pop	{r3, r4, r5, pc}
    cycleStarted = true;
    b880:	2101      	movs	r1, #1
    service.sampleTimeNow = false;
    b882:	2200      	movs	r2, #0
    cycleStarted = true;
    b884:	7621      	strb	r1, [r4, #24]
    service.sampleTimeNow = false;
    b886:	741a      	strb	r2, [r3, #16]
    b888:	f00a fafe 	bl	15e88 <micros>
    b88c:	4b09      	ldr	r3, [pc, #36]	; (b8b4 <UService::isSampleTime()+0x64>)
    b88e:	6558      	str	r0, [r3, #84]	; 0x54
}
    b890:	4628      	mov	r0, r5
    b892:	bd38      	pop	{r3, r4, r5, pc}
    b894:	f00a faf8 	bl	15e88 <micros>
    b898:	4603      	mov	r3, r0
    b89a:	4806      	ldr	r0, [pc, #24]	; (b8b4 <UService::isSampleTime()+0x64>)
    b89c:	6643      	str	r3, [r0, #100]	; 0x64
    robot.saveCycleTime();
    b89e:	f7ff f81f 	bl	a8e0 <URobot::saveCycleTime()>
    cycleStarted = false;
    b8a2:	2300      	movs	r3, #0
    b8a4:	7623      	strb	r3, [r4, #24]
    b8a6:	e7d7      	b.n	b858 <UService::isSampleTime()+0x8>
    b8a8:	2000d0c8 	.word	0x2000d0c8
    b8ac:	2000eab8 	.word	0x2000eab8
    b8b0:	2000d89c 	.word	0x2000d89c
    b8b4:	2000e654 	.word	0x2000e654

0000b8b8 <UService::setSampleTime(long)>:
  if (sampleTimeus < 20 or sampleTimeus > 500000)
    b8b8:	4b0b      	ldr	r3, [pc, #44]	; (b8e8 <UService::setSampleTime(long)+0x30>)
    b8ba:	f1a1 0214 	sub.w	r2, r1, #20
    b8be:	429a      	cmp	r2, r3
    b8c0:	d903      	bls.n	b8ca <UService::setSampleTime(long)+0x12>
    usb.send("# sample time T out of bounds (19<=T<=500000 (us))\r\n");
    b8c2:	490a      	ldr	r1, [pc, #40]	; (b8ec <UService::setSampleTime(long)+0x34>)
    b8c4:	480a      	ldr	r0, [pc, #40]	; (b8f0 <UService::setSampleTime(long)+0x38>)
    b8c6:	f000 be29 	b.w	c51c <UUSB::send(char const*)>
	// with this new setting.
	template <typename period_t>
	void update(period_t period){
		uint32_t cycles = cyclesFromPeriod(period);
		if (cycles < 17) return;
		if (channel) channel->LDVAL = cycles;
    b8ca:	4b0a      	ldr	r3, [pc, #40]	; (b8f4 <UService::setSampleTime(long)+0x3c>)
    sampleTime_us = sampleTimeus;
    b8cc:	6001      	str	r1, [r0, #0]
    b8ce:	681a      	ldr	r2, [r3, #0]
    b8d0:	b132      	cbz	r2, b8e0 <UService::setSampleTime(long)+0x28>
		static_assert(std::is_arithmetic_v<period_t>, "Period must be arithmetic");

		if (period < 0 || period > MAX_PERIOD)
			return 0;
		if constexpr (std::is_integral_v<period_t>)       // handles all integral types
			return (24000000 / 1000000) * period - 1;
    b8d2:	f021 0301 	bic.w	r3, r1, #1
    b8d6:	eb03 0361 	add.w	r3, r3, r1, asr #1
    b8da:	00db      	lsls	r3, r3, #3
    b8dc:	3b01      	subs	r3, #1
		if (channel) channel->LDVAL = cycles;
    b8de:	6013      	str	r3, [r2, #0]
    imu2.imuAvailable = 10;
    b8e0:	4b05      	ldr	r3, [pc, #20]	; (b8f8 <UService::setSampleTime(long)+0x40>)
    b8e2:	220a      	movs	r2, #10
    b8e4:	675a      	str	r2, [r3, #116]	; 0x74
}
    b8e6:	4770      	bx	lr
    b8e8:	0007a10c 	.word	0x0007a10c
    b8ec:	20005a40 	.word	0x20005a40
    b8f0:	2000eab8 	.word	0x2000eab8
    b8f4:	20009bd0 	.word	0x20009bd0
    b8f8:	2000cfd0 	.word	0x2000cfd0

0000b8fc <UService::updateSensors()>:
{
    b8fc:	b510      	push	{r4, lr}
  ad.tick();
    b8fe:	4813      	ldr	r0, [pc, #76]	; (b94c <UService::updateSensors()+0x50>)
    b900:	f7f6 f8a2 	bl	1a48 <UAd::tick()>
    b904:	4c12      	ldr	r4, [pc, #72]	; (b950 <UService::updateSensors()+0x54>)
    b906:	f00a fabf 	bl	15e88 <micros>
    b90a:	4603      	mov	r3, r0
  encoder.tick();
    b90c:	4811      	ldr	r0, [pc, #68]	; (b954 <UService::updateSensors()+0x58>)
    b90e:	65a3      	str	r3, [r4, #88]	; 0x58
    b910:	f7f8 fc7a 	bl	4208 <UEncoder::tick()>
  current.tick();
    b914:	4810      	ldr	r0, [pc, #64]	; (b958 <UService::updateSensors()+0x5c>)
    b916:	f7f6 fe7b 	bl	2610 <UCurrent::tick()>
  if (not motortest.motorTestRunning)
    b91a:	4b10      	ldr	r3, [pc, #64]	; (b95c <UService::updateSensors()+0x60>)
    b91c:	7d1b      	ldrb	r3, [r3, #20]
    b91e:	b173      	cbz	r3, b93e <UService::updateSensors()+0x42>
    b920:	f00a fab2 	bl	15e88 <micros>
    b924:	4603      	mov	r3, r0
  ls.tick();
    b926:	480e      	ldr	r0, [pc, #56]	; (b960 <UService::updateSensors()+0x64>)
    b928:	65e3      	str	r3, [r4, #92]	; 0x5c
    b92a:	f7fb f8ad 	bl	6a88 <ULineSensor::tick()>
  irdist.tick();
    b92e:	480d      	ldr	r0, [pc, #52]	; (b964 <UService::updateSensors()+0x68>)
    b930:	f7f9 fcfa 	bl	5328 <UIrDist::tick()>
  usbhost.tick();
    b934:	480c      	ldr	r0, [pc, #48]	; (b968 <UService::updateSensors()+0x6c>)
}
    b936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbhost.tick();
    b93a:	f001 bcfd 	b.w	d338 <UUsbHost::tick()>
    imu2.tick();
    b93e:	480b      	ldr	r0, [pc, #44]	; (b96c <UService::updateSensors()+0x70>)
    b940:	f7f9 fa74 	bl	4e2c <UImu2::tick()>
    asenc.tick();
    b944:	480a      	ldr	r0, [pc, #40]	; (b970 <UService::updateSensors()+0x74>)
    b946:	f7f6 fbe7 	bl	2118 <UAsEnc::tick()>
    b94a:	e7e9      	b.n	b920 <UService::updateSensors()+0x24>
    b94c:	2000d89c 	.word	0x2000d89c
    b950:	2000e654 	.word	0x2000e654
    b954:	2000dc34 	.word	0x2000dc34
    b958:	2000da90 	.word	0x2000da90
    b95c:	2000e518 	.word	0x2000e518
    b960:	2000e384 	.word	0x2000e384
    b964:	2000e190 	.word	0x2000e190
    b968:	2000a400 	.word	0x2000a400
    b96c:	2000cfd0 	.word	0x2000cfd0
    b970:	2000d9dc 	.word	0x2000d9dc

0000b974 <UService::updateActuators()>:
{
    b974:	b538      	push	{r3, r4, r5, lr}
  servo.tick();
    b976:	4812      	ldr	r0, [pc, #72]	; (b9c0 <UService::updateActuators()+0x4c>)
  motortest.tick();
    b978:	4c12      	ldr	r4, [pc, #72]	; (b9c4 <UService::updateActuators()+0x50>)
  servo.tick();
    b97a:	f000 fa27 	bl	bdcc <UServo::tick()>
  robot.tick();
    b97e:	4d12      	ldr	r5, [pc, #72]	; (b9c8 <UService::updateActuators()+0x54>)
  motor.tick();
    b980:	4812      	ldr	r0, [pc, #72]	; (b9cc <UService::updateActuators()+0x58>)
    b982:	f7fd f9a9 	bl	8cd8 <UMotor::tick()>
  motortest.tick();
    b986:	4620      	mov	r0, r4
    b988:	f7fe fbc4 	bl	a114 <UMotorTest::tick()>
  robot.tick();
    b98c:	4628      	mov	r0, r5
    b98e:	f7ff f987 	bl	aca0 <URobot::tick()>
    b992:	f00a fa79 	bl	15e88 <micros>
    b996:	4603      	mov	r3, r0
  logger.tick();
    b998:	480d      	ldr	r0, [pc, #52]	; (b9d0 <UService::updateActuators()+0x5c>)
    b99a:	662b      	str	r3, [r5, #96]	; 0x60
    b99c:	f7fc fc20 	bl	81e0 <ULog::tick()>
  if (not motortest.motorTestRunning)
    b9a0:	7d23      	ldrb	r3, [r4, #20]
    b9a2:	b123      	cbz	r3, b9ae <UService::updateActuators()+0x3a>
  ledband.tick();
    b9a4:	480b      	ldr	r0, [pc, #44]	; (b9d4 <UService::updateActuators()+0x60>)
}
    b9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ledband.tick();
    b9aa:	f7f9 bf9d 	b.w	58e8 <ULedBand::tick()>
    display.tick();
    b9ae:	480a      	ldr	r0, [pc, #40]	; (b9d8 <UService::updateActuators()+0x64>)
    b9b0:	f7f7 f8a6 	bl	2b00 <UDisplay::tick()>
  ledband.tick();
    b9b4:	4807      	ldr	r0, [pc, #28]	; (b9d4 <UService::updateActuators()+0x60>)
}
    b9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ledband.tick();
    b9ba:	f7f9 bf95 	b.w	58e8 <ULedBand::tick()>
    b9be:	bf00      	nop
    b9c0:	2000ea58 	.word	0x2000ea58
    b9c4:	2000e518 	.word	0x2000e518
    b9c8:	2000e654 	.word	0x2000e654
    b9cc:	2000e4bc 	.word	0x2000e4bc
    b9d0:	2000e240 	.word	0x2000e240
    b9d4:	2000e1e0 	.word	0x2000e1e0
    b9d8:	2000db0c 	.word	0x2000db0c

0000b9dc <_GLOBAL__sub_I_service>:
class UService
    b9dc:	4b06      	ldr	r3, [pc, #24]	; (b9f8 <_GLOBAL__sub_I_service+0x1c>)
    b9de:	2000      	movs	r0, #0
    b9e0:	f04f 0c00 	mov.w	ip, #0
IntervalTimer sampleTimer;
    b9e4:	4a05      	ldr	r2, [pc, #20]	; (b9fc <_GLOBAL__sub_I_service+0x20>)
    b9e6:	8218      	strh	r0, [r3, #16]
    b9e8:	8318      	strh	r0, [r3, #24]
    b9ea:	4905      	ldr	r1, [pc, #20]	; (ba00 <_GLOBAL__sub_I_service+0x24>)
    b9ec:	4805      	ldr	r0, [pc, #20]	; (ba04 <_GLOBAL__sub_I_service+0x28>)
    b9ee:	f8c3 c014 	str.w	ip, [r3, #20]
    b9f2:	f00d ba81 	b.w	18ef8 <__aeabi_atexit>
    b9f6:	bf00      	nop
    b9f8:	2000d0c8 	.word	0x2000d0c8
    b9fc:	20008f08 	.word	0x20008f08
    ba00:	0000b71d 	.word	0x0000b71d
    ba04:	20009bd0 	.word	0x20009bd0

0000ba08 <UServo::~UServo()>:
class UServo : public USubss
    ba08:	b510      	push	{r4, lr}
    ba0a:	4b05      	ldr	r3, [pc, #20]	; (ba20 <UServo::~UServo()+0x18>)
    ba0c:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    ba0e:	6840      	ldr	r0, [r0, #4]
    ba10:	6023      	str	r3, [r4, #0]
	if (__p)
    ba12:	b118      	cbz	r0, ba1c <UServo::~UServo()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    ba14:	68e1      	ldr	r1, [r4, #12]
    ba16:	1a09      	subs	r1, r1, r0
    ba18:	f00a fe50 	bl	166bc <operator delete(void*, unsigned int)>
    ba1c:	4620      	mov	r0, r4
    ba1e:	bd10      	pop	{r4, pc}
    ba20:	2000802c 	.word	0x2000802c

0000ba24 <UServo::sendHelp()>:
  else
    return false;
}

void UServo::sendHelp()
{
    ba24:	b508      	push	{r3, lr}
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    ba26:	4b0b      	ldr	r3, [pc, #44]	; (ba54 <UServo::sendHelp()+0x30>)
    ba28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    ba2c:	2b02      	cmp	r3, #2
    ba2e:	d901      	bls.n	ba34 <UServo::sendHelp()+0x10>
    ba30:	2b05      	cmp	r3, #5
    ba32:	d100      	bne.n	ba36 <UServo::sendHelp()+0x12>
  {
    usb.send("# Servo ------\n");
    usb.send("# -- \tsvos  e p v  e p v ... \tset all servos e=enable, p=position +/-1024, v=velocity.\r\n");
    usb.send("# -- \tservo i p v\tset one servo i=index 1..5, pos ~ +/-800 (us), v=velocity 0..4000 (val/s), 0=max, 1=sloooow\r\n");
  }
}
    ba34:	bd08      	pop	{r3, pc}
    usb.send("# Servo ------\n");
    ba36:	4908      	ldr	r1, [pc, #32]	; (ba58 <UServo::sendHelp()+0x34>)
    ba38:	4808      	ldr	r0, [pc, #32]	; (ba5c <UServo::sendHelp()+0x38>)
    ba3a:	f000 fd6f 	bl	c51c <UUSB::send(char const*)>
    usb.send("# -- \tsvos  e p v  e p v ... \tset all servos e=enable, p=position +/-1024, v=velocity.\r\n");
    ba3e:	4908      	ldr	r1, [pc, #32]	; (ba60 <UServo::sendHelp()+0x3c>)
    ba40:	4806      	ldr	r0, [pc, #24]	; (ba5c <UServo::sendHelp()+0x38>)
    ba42:	f000 fd6b 	bl	c51c <UUSB::send(char const*)>
    usb.send("# -- \tservo i p v\tset one servo i=index 1..5, pos ~ +/-800 (us), v=velocity 0..4000 (val/s), 0=max, 1=sloooow\r\n");
    ba46:	4907      	ldr	r1, [pc, #28]	; (ba64 <UServo::sendHelp()+0x40>)
    ba48:	4804      	ldr	r0, [pc, #16]	; (ba5c <UServo::sendHelp()+0x38>)
}
    ba4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usb.send("# -- \tservo i p v\tset one servo i=index 1..5, pos ~ +/-800 (us), v=velocity 0..4000 (val/s), 0=max, 1=sloooow\r\n");
    ba4e:	f000 bd65 	b.w	c51c <UUSB::send(char const*)>
    ba52:	bf00      	nop
    ba54:	2000e654 	.word	0x2000e654
    ba58:	20005ea0 	.word	0x20005ea0
    ba5c:	2000eab8 	.word	0x2000eab8
    ba60:	20005eb0 	.word	0x20005eb0
    ba64:	20005f0c 	.word	0x20005f0c

0000ba68 <UServo::setup()>:
{
    ba68:	b538      	push	{r3, r4, r5, lr}
    ba6a:	2401      	movs	r4, #1
    ba6c:	4605      	mov	r5, r0
    ba6e:	ed2d 8b02 	vpush	{d8}
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    ba72:	ed9f 8a26 	vldr	s16, [pc, #152]	; bb0c <UServo::setup()+0xa4>


int UServo::getServoPin(int i)
{
  int pin;
  switch (i)
    ba76:	2c02      	cmp	r4, #2
    ba78:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    ba7c:	d027      	beq.n	bace <UServo::setup()+0x66>
    ba7e:	2b02      	cmp	r3, #2
    pinMode(pin, OUTPUT);
    ba80:	f04f 0101 	mov.w	r1, #1
    ba84:	f04f 000a 	mov.w	r0, #10
  switch (i)
    ba88:	d030      	beq.n	baec <UServo::setup()+0x84>
    pinMode(pin, OUTPUT);
    ba8a:	f00a fa63 	bl	15f54 <pinMode>
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    ba8e:	eeb0 0a48 	vmov.f32	s0, s16
    ba92:	200a      	movs	r0, #10
    ba94:	f00a ffba 	bl	16a0c <analogWriteFrequency>
    analogWrite(pin, 0);
    ba98:	2100      	movs	r1, #0
    ba9a:	200a      	movs	r0, #10
    ba9c:	f00a ff50 	bl	16940 <analogWrite>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    baa0:	2c05      	cmp	r4, #5
    baa2:	d121      	bne.n	bae8 <UServo::setup()+0x80>
    servoEnabled[i] = false;
    baa4:	2100      	movs	r1, #0
    servoValue[i] = 0;
    baa6:	222d      	movs	r2, #45	; 0x2d
    baa8:	f105 001c 	add.w	r0, r5, #28
    servoEnabled[i] = false;
    baac:	6169      	str	r1, [r5, #20]
    baae:	7629      	strb	r1, [r5, #24]
    servoValue[i] = 0;
    bab0:	f00f ffc2 	bl	1ba38 <memset>
  addPublistItem("svo", "get servo configuration 'svo {enabeled pos[0...1000] vel}*5'");
    bab4:	4628      	mov	r0, r5
    bab6:	4916      	ldr	r1, [pc, #88]	; (bb10 <UServo::setup()+0xa8>)
    bab8:	4a16      	ldr	r2, [pc, #88]	; (bb14 <UServo::setup()+0xac>)
    baba:	f000 fc61 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    babe:	4629      	mov	r1, r5
    bac0:	4815      	ldr	r0, [pc, #84]	; (bb18 <UServo::setup()+0xb0>)
}
    bac2:	ecbd 8b02 	vpop	{d8}
    bac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    baca:	f001 b953 	b.w	cd74 <UUSB::addSubscriptionService(USubss*)>
    pinMode(pin, OUTPUT);
    bace:	4619      	mov	r1, r3
    bad0:	2009      	movs	r0, #9
    bad2:	f00a fa3f 	bl	15f54 <pinMode>
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    bad6:	2009      	movs	r0, #9
    bad8:	eeb0 0a48 	vmov.f32	s0, s16
    badc:	f00a ff96 	bl	16a0c <analogWriteFrequency>
    analogWrite(pin, 0);
    bae0:	2100      	movs	r1, #0
    bae2:	2009      	movs	r0, #9
    bae4:	f00a ff2c 	bl	16940 <analogWrite>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    bae8:	3401      	adds	r4, #1
    baea:	e7c4      	b.n	ba76 <UServo::setup()+0xe>
    pinMode(pin, OUTPUT);
    baec:	2101      	movs	r1, #1
    baee:	2008      	movs	r0, #8
    baf0:	f00a fa30 	bl	15f54 <pinMode>
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    baf4:	eeb0 0a48 	vmov.f32	s0, s16
    baf8:	2008      	movs	r0, #8
    bafa:	3401      	adds	r4, #1
    bafc:	f00a ff86 	bl	16a0c <analogWriteFrequency>
    analogWrite(pin, 0);
    bb00:	2100      	movs	r1, #0
    bb02:	2008      	movs	r0, #8
    bb04:	f00a ff1c 	bl	16940 <analogWrite>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    bb08:	e7b5      	b.n	ba76 <UServo::setup()+0xe>
    bb0a:	bf00      	nop
    bb0c:	43a68000 	.word	0x43a68000
    bb10:	20005e8c 	.word	0x20005e8c
    bb14:	20005e4c 	.word	0x20005e4c
    bb18:	2000eab8 	.word	0x2000eab8

0000bb1c <UServo::setServo(signed char, short, bool, signed char)>:
  setServoPWM(idx-1, value, enable, vel);
    bb1c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    if (serviIdx >= 0 and serviIdx < MAX_SERVO_CNT)
    bb20:	f1bc 0f04 	cmp.w	ip, #4
{
    bb24:	b510      	push	{r4, lr}
    bb26:	f99d e008 	ldrsb.w	lr, [sp, #8]
    bb2a:	d808      	bhi.n	bb3e <UServo::setServo(signed char, short, bool, signed char)+0x22>
      if (serviIdx < 4 or robot.robotHWversion != 9)
    bb2c:	d008      	beq.n	bb40 <UServo::setServo(signed char, short, bool, signed char)+0x24>
        servoRef[serviIdx] = pwm;
    bb2e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
        servoEnaRef[serviIdx] = enable;
    bb32:	4460      	add	r0, ip
        servoRef[serviIdx] = pwm;
    bb34:	870a      	strh	r2, [r1, #56]	; 0x38
        servoEnaRef[serviIdx] = enable;
    bb36:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  setServoPWM(idx-1, value, enable, vel);
    bb3a:	f8a1 e02e 	strh.w	lr, [r1, #46]	; 0x2e
}
    bb3e:	bd10      	pop	{r4, pc}
      if (serviIdx < 4 or robot.robotHWversion != 9)
    bb40:	4c02      	ldr	r4, [pc, #8]	; (bb4c <UServo::setServo(signed char, short, bool, signed char)+0x30>)
    bb42:	f894 4030 	ldrb.w	r4, [r4, #48]	; 0x30
    bb46:	2c09      	cmp	r4, #9
    bb48:	d1f1      	bne.n	bb2e <UServo::setServo(signed char, short, bool, signed char)+0x12>
    bb4a:	e7f8      	b.n	bb3e <UServo::setServo(signed char, short, bool, signed char)+0x22>
    bb4c:	2000e654 	.word	0x2000e654

0000bb50 <UServo::sendServoStatus()>:
           servo.servoEnabled[0], int(servo.servoValue[0]/100), servo.servoVel[0],
    bb50:	4824      	ldr	r0, [pc, #144]	; (bbe4 <UServo::sendServoStatus()+0x94>)
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bb52:	4b25      	ldr	r3, [pc, #148]	; (bbe8 <UServo::sendServoStatus()+0x98>)
    bb54:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bb56:	f9b0 1038 	ldrsh.w	r1, [r0, #56]	; 0x38
{ // return servo status
    bb5a:	b530      	push	{r4, r5, lr}
    bb5c:	b0b1      	sub	sp, #196	; 0xc4
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bb5e:	910d      	str	r1, [sp, #52]	; 0x34
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bb60:	fb83 4102 	smull	r4, r1, r3, r2
           servo.servoEnabled[3], int(servo.servoValue[3]/100), servo.servoVel[3],
    bb64:	6a85      	ldr	r5, [r0, #40]	; 0x28
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bb66:	17d2      	asrs	r2, r2, #31
           servo.servoEnabled[3], int(servo.servoValue[3]/100), servo.servoVel[3],
    bb68:	fb83 ec05 	smull	lr, ip, r3, r5
    bb6c:	17ed      	asrs	r5, r5, #31
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bb6e:	ebc2 1261 	rsb	r2, r2, r1, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bb72:	7e01      	ldrb	r1, [r0, #24]
           servo.servoEnabled[3], int(servo.servoValue[3]/100), servo.servoVel[3],
    bb74:	ebc5 156c 	rsb	r5, r5, ip, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bb78:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
           servo.servoEnabled[0], int(servo.servoValue[0]/100), servo.servoVel[0],
    bb7c:	69c4      	ldr	r4, [r0, #28]
           servo.servoEnabled[1], int(servo.servoValue[1]/100), servo.servoVel[1],
    bb7e:	e9d0 2108 	ldrd	r2, r1, [r0, #32]
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bb82:	9509      	str	r5, [sp, #36]	; 0x24
           servo.servoEnabled[0], int(servo.servoValue[0]/100), servo.servoVel[0],
    bb84:	fb83 c504 	smull	ip, r5, r3, r4
    bb88:	17e4      	asrs	r4, r4, #31
    bb8a:	ebc4 1465 	rsb	r4, r4, r5, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bb8e:	9400      	str	r4, [sp, #0]
           servo.servoEnabled[2], int(servo.servoValue[2]/100), servo.servoVel[2],
    bb90:	fb83 5401 	smull	r5, r4, r3, r1
    bb94:	17c9      	asrs	r1, r1, #31
    bb96:	ebc1 1164 	rsb	r1, r1, r4, asr #5
           servo.servoEnabled[1], int(servo.servoValue[1]/100), servo.servoVel[1],
    bb9a:	fb83 4302 	smull	r4, r3, r3, r2
    bb9e:	17d2      	asrs	r2, r2, #31
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bba0:	9106      	str	r1, [sp, #24]
           servo.servoEnabled[1], int(servo.servoValue[1]/100), servo.servoVel[1],
    bba2:	ebc2 1263 	rsb	r2, r2, r3, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bba6:	7d81      	ldrb	r1, [r0, #22]
    bba8:	7d43      	ldrb	r3, [r0, #21]
    bbaa:	9105      	str	r1, [sp, #20]
    bbac:	f9b0 1032 	ldrsh.w	r1, [r0, #50]	; 0x32
    bbb0:	9302      	str	r3, [sp, #8]
    bbb2:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
    bbb6:	e9cd 2103 	strd	r2, r1, [sp, #12]
    bbba:	9301      	str	r3, [sp, #4]
    bbbc:	2182      	movs	r1, #130	; 0x82
    bbbe:	f9b0 4036 	ldrsh.w	r4, [r0, #54]	; 0x36
    bbc2:	7d03      	ldrb	r3, [r0, #20]
    bbc4:	940a      	str	r4, [sp, #40]	; 0x28
    bbc6:	7dc4      	ldrb	r4, [r0, #23]
    bbc8:	4a08      	ldr	r2, [pc, #32]	; (bbec <UServo::sendServoStatus()+0x9c>)
    bbca:	9408      	str	r4, [sp, #32]
    bbcc:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
    bbd0:	9007      	str	r0, [sp, #28]
    bbd2:	a80f      	add	r0, sp, #60	; 0x3c
    bbd4:	f00f fd5e 	bl	1b694 <snprintf>
  usb.send(s);
    bbd8:	a90f      	add	r1, sp, #60	; 0x3c
    bbda:	4805      	ldr	r0, [pc, #20]	; (bbf0 <UServo::sendServoStatus()+0xa0>)
    bbdc:	f000 fc9e 	bl	c51c <UUSB::send(char const*)>
}
    bbe0:	b031      	add	sp, #196	; 0xc4
    bbe2:	bd30      	pop	{r4, r5, pc}
    bbe4:	2000ea58 	.word	0x2000ea58
    bbe8:	51eb851f 	.word	0x51eb851f
    bbec:	20005dd0 	.word	0x20005dd0
    bbf0:	2000eab8 	.word	0x2000eab8

0000bbf4 <UServo::sendData(int)>:
  switch (item)
    bbf4:	b101      	cbz	r1, bbf8 <UServo::sendData(int)+0x4>
}
    bbf6:	4770      	bx	lr
    case 0: sendServoStatus(); break;
    bbf8:	f7ff bfaa 	b.w	bb50 <UServo::sendServoStatus()>

0000bbfc <UServo::setServoConfig(char const*)>:
{
    bbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bc00:	b083      	sub	sp, #12
    bc02:	4608      	mov	r0, r1
    e = strtol(p1, (char**)&p1, 10);
    bc04:	220a      	movs	r2, #10
    bc06:	4f22      	ldr	r7, [pc, #136]	; (bc90 <UServo::setServoConfig(char const*)+0x94>)
    bc08:	a901      	add	r1, sp, #4
  const char * p1 = line;
    bc0a:	9001      	str	r0, [sp, #4]
    e = strtol(p1, (char**)&p1, 10);
    bc0c:	f00f fb52 	bl	1b2b4 <strtol>
    v = strtol(p1, (char**)&p1, 10);
    bc10:	220a      	movs	r2, #10
    e = strtol(p1, (char**)&p1, 10);
    bc12:	4604      	mov	r4, r0
    v = strtol(p1, (char**)&p1, 10);
    bc14:	a901      	add	r1, sp, #4
    bc16:	9801      	ldr	r0, [sp, #4]
    bc18:	f107 0915 	add.w	r9, r7, #21
    bc1c:	f00f fb4a 	bl	1b2b4 <strtol>
    a = strtol(p1, (char**)&p1, 10);
    bc20:	220a      	movs	r2, #10
    bc22:	a901      	add	r1, sp, #4
    v = strtol(p1, (char**)&p1, 10);
    bc24:	b205      	sxth	r5, r0
    a = strtol(p1, (char**)&p1, 10);
    bc26:	9801      	ldr	r0, [sp, #4]
  setServoPWM(idx-1, value, enable, vel);
    bc28:	2601      	movs	r6, #1
    a = strtol(p1, (char**)&p1, 10);
    bc2a:	f00f fb43 	bl	1b2b4 <strtol>
    bc2e:	f8df 8064 	ldr.w	r8, [pc, #100]	; bc94 <UServo::setServoConfig(char const*)+0x98>
    servo.setServo(i, v, e != 0, a);
    bc32:	b223      	sxth	r3, r4
  setServoPWM(idx-1, value, enable, vel);
    bc34:	b240      	sxtb	r0, r0
    servo.setServo(i, v, e != 0, a);
    bc36:	3b00      	subs	r3, #0
    bc38:	bf18      	it	ne
    bc3a:	2301      	movne	r3, #1
  for (int i = 1; i <= 5; i++)
    bc3c:	2e05      	cmp	r6, #5
        servoRef[serviIdx] = pwm;
    bc3e:	81bd      	strh	r5, [r7, #12]
    e = strtol(p1, (char**)&p1, 10);
    bc40:	f04f 020a 	mov.w	r2, #10
        servoEnaRef[serviIdx] = enable;
    bc44:	f809 3f01 	strb.w	r3, [r9, #1]!
    bc48:	a901      	add	r1, sp, #4
        servoVel[serviIdx] = vel;
    bc4a:	f827 0f02 	strh.w	r0, [r7, #2]!
  for (int i = 1; i <= 5; i++)
    bc4e:	d01c      	beq.n	bc8a <UServo::setServoConfig(char const*)+0x8e>
    e = strtol(p1, (char**)&p1, 10);
    bc50:	9801      	ldr	r0, [sp, #4]
    bc52:	f00f fb2f 	bl	1b2b4 <strtol>
    v = strtol(p1, (char**)&p1, 10);
    bc56:	220a      	movs	r2, #10
    e = strtol(p1, (char**)&p1, 10);
    bc58:	4604      	mov	r4, r0
    v = strtol(p1, (char**)&p1, 10);
    bc5a:	a901      	add	r1, sp, #4
    bc5c:	9801      	ldr	r0, [sp, #4]
    bc5e:	f00f fb29 	bl	1b2b4 <strtol>
    a = strtol(p1, (char**)&p1, 10);
    bc62:	220a      	movs	r2, #10
    v = strtol(p1, (char**)&p1, 10);
    bc64:	4605      	mov	r5, r0
    a = strtol(p1, (char**)&p1, 10);
    bc66:	a901      	add	r1, sp, #4
    bc68:	9801      	ldr	r0, [sp, #4]
    bc6a:	f00f fb23 	bl	1b2b4 <strtol>
    servo.setServo(i, v, e != 0, a);
    bc6e:	b223      	sxth	r3, r4
    v = strtol(p1, (char**)&p1, 10);
    bc70:	b22d      	sxth	r5, r5
    servo.setServo(i, v, e != 0, a);
    bc72:	3b00      	subs	r3, #0
  setServoPWM(idx-1, value, enable, vel);
    bc74:	b240      	sxtb	r0, r0
    servo.setServo(i, v, e != 0, a);
    bc76:	bf18      	it	ne
    bc78:	2301      	movne	r3, #1
      if (serviIdx < 4 or robot.robotHWversion != 9)
    bc7a:	2e04      	cmp	r6, #4
    bc7c:	f106 0601 	add.w	r6, r6, #1
    bc80:	d1dc      	bne.n	bc3c <UServo::setServoConfig(char const*)+0x40>
    bc82:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
    bc86:	2a09      	cmp	r2, #9
    bc88:	d1d8      	bne.n	bc3c <UServo::setServoConfig(char const*)+0x40>
}
    bc8a:	b003      	add	sp, #12
    bc8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bc90:	2000ea86 	.word	0x2000ea86
    bc94:	2000e654 	.word	0x2000e654

0000bc98 <UServo::setOneServo(char const*)>:
{
    bc98:	b570      	push	{r4, r5, r6, lr}
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    bc9a:	4d2f      	ldr	r5, [pc, #188]	; (bd58 <UServo::setOneServo(char const*)+0xc0>)
{
    bc9c:	b082      	sub	sp, #8
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    bc9e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    bca2:	2b02      	cmp	r3, #2
    bca4:	d912      	bls.n	bccc <UServo::setOneServo(char const*)+0x34>
    bca6:	2b05      	cmp	r3, #5
    bca8:	d010      	beq.n	bccc <UServo::setOneServo(char const*)+0x34>
    int8_t idx = strtol(p1, (char**)&p1, 10);
    bcaa:	4608      	mov	r0, r1
    const char * p1 = line;
    bcac:	9101      	str	r1, [sp, #4]
    int8_t idx = strtol(p1, (char**)&p1, 10);
    bcae:	220a      	movs	r2, #10
    bcb0:	a901      	add	r1, sp, #4
    bcb2:	f00f faff 	bl	1b2b4 <strtol>
    if (idx >= 1 and idx <= 6)
    bcb6:	1e43      	subs	r3, r0, #1
    int8_t idx = strtol(p1, (char**)&p1, 10);
    bcb8:	4604      	mov	r4, r0
    if (idx >= 1 and idx <= 6)
    bcba:	b2db      	uxtb	r3, r3
    bcbc:	2b05      	cmp	r3, #5
    bcbe:	d90c      	bls.n	bcda <UServo::setOneServo(char const*)+0x42>
      usb.send("# unknown servo: 1-3 is servo 4,5 is pins\r\n");
    bcc0:	4926      	ldr	r1, [pc, #152]	; (bd5c <UServo::setOneServo(char const*)+0xc4>)
    bcc2:	4827      	ldr	r0, [pc, #156]	; (bd60 <UServo::setOneServo(char const*)+0xc8>)
    bcc4:	f000 fc2a 	bl	c51c <UUSB::send(char const*)>
}
    bcc8:	b002      	add	sp, #8
    bcca:	bd70      	pop	{r4, r5, r6, pc}
    usb.send("# supported on hardware version 3\r\n");
    bccc:	4925      	ldr	r1, [pc, #148]	; (bd64 <UServo::setOneServo(char const*)+0xcc>)
    bcce:	4824      	ldr	r0, [pc, #144]	; (bd60 <UServo::setOneServo(char const*)+0xc8>)
}
    bcd0:	b002      	add	sp, #8
    bcd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    usb.send("# supported on hardware version 3\r\n");
    bcd6:	f000 bc21 	b.w	c51c <UUSB::send(char const*)>
      int us = strtol(p1, (char**)&p1, 10);
    bcda:	220a      	movs	r2, #10
    bcdc:	a901      	add	r1, sp, #4
    bcde:	9801      	ldr	r0, [sp, #4]
      switch (idx)
    bce0:	b264      	sxtb	r4, r4
      int us = strtol(p1, (char**)&p1, 10);
    bce2:	f00f fae7 	bl	1b2b4 <strtol>
    bce6:	4606      	mov	r6, r0
      int vel = strtol(p1, (char**)&p1, 10);
    bce8:	220a      	movs	r2, #10
    bcea:	a901      	add	r1, sp, #4
    bcec:	9801      	ldr	r0, [sp, #4]
      switch (idx)
    bcee:	3c01      	subs	r4, #1
      int vel = strtol(p1, (char**)&p1, 10);
    bcf0:	f00f fae0 	bl	1b2b4 <strtol>
      enable = us >= -1024 and us <= 1024;
    bcf4:	f506 6380 	add.w	r3, r6, #1024	; 0x400
    bcf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bcfc:	bf8c      	ite	hi
    bcfe:	2300      	movhi	r3, #0
    bd00:	2301      	movls	r3, #1
      switch (idx)
    bd02:	2c04      	cmp	r4, #4
    bd04:	d8e0      	bhi.n	bcc8 <UServo::setOneServo(char const*)+0x30>
    bd06:	e8df f004 	tbb	[pc, r4]
    bd0a:	140e      	.short	0x140e
    bd0c:	201a      	.short	0x201a
    bd0e:	03          	.byte	0x03
    bd0f:	00          	.byte	0x00
    bd10:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    bd14:	2a09      	cmp	r2, #9
    bd16:	d0d7      	beq.n	bcc8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    bd18:	4a13      	ldr	r2, [pc, #76]	; (bd68 <UServo::setOneServo(char const*)+0xd0>)
        case 5: servo.setServoPWM(4, us, enable, vel); break; 
    bd1a:	f8a2 6042 	strh.w	r6, [r2, #66]	; 0x42
        servoEnaRef[serviIdx] = enable;
    bd1e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    bd22:	8710      	strh	r0, [r2, #56]	; 0x38
    bd24:	e7d0      	b.n	bcc8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    bd26:	4a10      	ldr	r2, [pc, #64]	; (bd68 <UServo::setOneServo(char const*)+0xd0>)
          servo.setServoPWM(0, us, enable, vel); 
    bd28:	8756      	strh	r6, [r2, #58]	; 0x3a
        servoEnaRef[serviIdx] = enable;
    bd2a:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
    bd2e:	8610      	strh	r0, [r2, #48]	; 0x30
    bd30:	e7ca      	b.n	bcc8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    bd32:	4a0d      	ldr	r2, [pc, #52]	; (bd68 <UServo::setOneServo(char const*)+0xd0>)
        case 2: servo.setServoPWM(1, us, enable, vel); break;
    bd34:	8796      	strh	r6, [r2, #60]	; 0x3c
        servoEnaRef[serviIdx] = enable;
    bd36:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    bd3a:	8650      	strh	r0, [r2, #50]	; 0x32
    bd3c:	e7c4      	b.n	bcc8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    bd3e:	4a0a      	ldr	r2, [pc, #40]	; (bd68 <UServo::setOneServo(char const*)+0xd0>)
        case 3: servo.setServoPWM(2, us, enable, vel); break;
    bd40:	87d6      	strh	r6, [r2, #62]	; 0x3e
        servoEnaRef[serviIdx] = enable;
    bd42:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    bd46:	8690      	strh	r0, [r2, #52]	; 0x34
    bd48:	e7be      	b.n	bcc8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    bd4a:	4a07      	ldr	r2, [pc, #28]	; (bd68 <UServo::setOneServo(char const*)+0xd0>)
        case 4: servo.setServoPWM(3, us, enable, vel); break;
    bd4c:	f8a2 6040 	strh.w	r6, [r2, #64]	; 0x40
        servoEnaRef[serviIdx] = enable;
    bd50:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
    bd54:	86d0      	strh	r0, [r2, #54]	; 0x36
    bd56:	e7b7      	b.n	bcc8 <UServo::setOneServo(char const*)+0x30>
    bd58:	2000e654 	.word	0x2000e654
    bd5c:	20005d80 	.word	0x20005d80
    bd60:	2000eab8 	.word	0x2000eab8
    bd64:	20005dac 	.word	0x20005dac
    bd68:	2000ea58 	.word	0x2000ea58

0000bd6c <UServo::decode(char const*)>:
{
    bd6c:	b538      	push	{r3, r4, r5, lr}
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    bd6e:	4b13      	ldr	r3, [pc, #76]	; (bdbc <UServo::decode(char const*)+0x50>)
    bd70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    bd74:	2b05      	cmp	r3, #5
    bd76:	bf18      	it	ne
    bd78:	2b02      	cmpne	r3, #2
    bd7a:	bf8c      	ite	hi
    bd7c:	2401      	movhi	r4, #1
    bd7e:	2400      	movls	r4, #0
    bd80:	d90d      	bls.n	bd9e <UServo::decode(char const*)+0x32>
    bd82:	460d      	mov	r5, r1
    if (strncmp(buf, "svos ", 5) == 0)
    bd84:	2205      	movs	r2, #5
    bd86:	490e      	ldr	r1, [pc, #56]	; (bdc0 <UServo::decode(char const*)+0x54>)
    bd88:	4628      	mov	r0, r5
    bd8a:	f00f ff3b 	bl	1bc04 <strncmp>
    bd8e:	b140      	cbz	r0, bda2 <UServo::decode(char const*)+0x36>
    else if (strncmp(buf, "servo ", 6) == 0)
    bd90:	2206      	movs	r2, #6
    bd92:	490c      	ldr	r1, [pc, #48]	; (bdc4 <UServo::decode(char const*)+0x58>)
    bd94:	4628      	mov	r0, r5
    bd96:	f00f ff35 	bl	1bc04 <strncmp>
    bd9a:	b140      	cbz	r0, bdae <UServo::decode(char const*)+0x42>
    return false;
    bd9c:	2400      	movs	r4, #0
}
    bd9e:	4620      	mov	r0, r4
    bda0:	bd38      	pop	{r3, r4, r5, pc}
      servo.setServoConfig(&buf[5]);
    bda2:	1d69      	adds	r1, r5, #5
    bda4:	4808      	ldr	r0, [pc, #32]	; (bdc8 <UServo::decode(char const*)+0x5c>)
    bda6:	f7ff ff29 	bl	bbfc <UServo::setServoConfig(char const*)>
}
    bdaa:	4620      	mov	r0, r4
    bdac:	bd38      	pop	{r3, r4, r5, pc}
      servo.setOneServo(&buf[6]);
    bdae:	1da9      	adds	r1, r5, #6
    bdb0:	4805      	ldr	r0, [pc, #20]	; (bdc8 <UServo::decode(char const*)+0x5c>)
    bdb2:	f7ff ff71 	bl	bc98 <UServo::setOneServo(char const*)>
}
    bdb6:	4620      	mov	r0, r4
    bdb8:	bd38      	pop	{r3, r4, r5, pc}
    bdba:	bf00      	nop
    bdbc:	2000e654 	.word	0x2000e654
    bdc0:	20005e90 	.word	0x20005e90
    bdc4:	20005e98 	.word	0x20005e98
    bdc8:	2000ea58 	.word	0x2000ea58

0000bdcc <UServo::tick()>:
  return pin;
}


void UServo::tick()
{ // speed limit on servo
    bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bdd0:	2400      	movs	r4, #0
    bdd2:	f04f 0801 	mov.w	r8, #1
    bdd6:	b0a5      	sub	sp, #148	; 0x94
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    bdd8:	f8df 9180 	ldr.w	r9, [pc, #384]	; bf5c <UServo::tick()+0x190>
  // pt. servo 2 (index 1) handled only 
  //
  // disable servo nicely
  for (int i = 0; i < MAX_SERVO_CNT; i++)
  {
    if (i == 4 and robot.robotHWversion == 9)
    bddc:	2c04      	cmp	r4, #4
{ // speed limit on servo
    bdde:	4606      	mov	r6, r0
          analogWrite(pin, 0);
          servoEnabled[i] = false;
        }
      }
      else
        servoEnabled[i] = true;
    bde0:	46c2      	mov	sl, r8
    bde2:	f100 0514 	add.w	r5, r0, #20
    if (i == 4 and robot.robotHWversion == 9)
    bde6:	f8df b178 	ldr.w	fp, [pc, #376]	; bf60 <UServo::tick()+0x194>
    bdea:	d01d      	beq.n	be28 <UServo::tick()+0x5c>
  switch (i)
    bdec:	2c01      	cmp	r4, #1
    bdee:	d062      	beq.n	beb6 <UServo::tick()+0xea>
    bdf0:	2c02      	cmp	r4, #2
    bdf2:	d11d      	bne.n	be30 <UServo::tick()+0x64>
    if (servoEnabled[i] != servoEnaRef[i])
    bdf4:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    bdf8:	782b      	ldrb	r3, [r5, #0]
    bdfa:	42bb      	cmp	r3, r7
    bdfc:	d00e      	beq.n	be1c <UServo::tick()+0x50>
    case 2: pin = PIN_SERVO3; break;
    bdfe:	2008      	movs	r0, #8
      if (not servoEnaRef[i])
    be00:	b9f7      	cbnz	r7, be40 <UServo::tick()+0x74>
    be02:	0103      	lsls	r3, r0, #4
    be04:	f859 3003 	ldr.w	r3, [r9, r3]
    be08:	689a      	ldr	r2, [r3, #8]
    be0a:	eb09 1300 	add.w	r3, r9, r0, lsl #4
    be0e:	68db      	ldr	r3, [r3, #12]
    be10:	421a      	tst	r2, r3
    be12:	f000 8099 	beq.w	bf48 <UServo::tick()+0x17c>
  for (int i = 0; i < MAX_SERVO_CNT; i++)
    be16:	f1b8 0f05 	cmp.w	r8, #5
    be1a:	d016      	beq.n	be4a <UServo::tick()+0x7e>
    be1c:	3401      	adds	r4, #1
    be1e:	f108 0801 	add.w	r8, r8, #1
    be22:	3501      	adds	r5, #1
    if (i == 4 and robot.robotHWversion == 9)
    be24:	2c04      	cmp	r4, #4
    be26:	d1e1      	bne.n	bdec <UServo::tick()+0x20>
    be28:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
    be2c:	2b09      	cmp	r3, #9
    be2e:	d00c      	beq.n	be4a <UServo::tick()+0x7e>
  switch (i)
    be30:	200a      	movs	r0, #10
    if (servoEnabled[i] != servoEnaRef[i])
    be32:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    be36:	782b      	ldrb	r3, [r5, #0]
    be38:	42bb      	cmp	r3, r7
    be3a:	d0ec      	beq.n	be16 <UServo::tick()+0x4a>
      if (not servoEnaRef[i])
    be3c:	2f00      	cmp	r7, #0
    be3e:	d0e0      	beq.n	be02 <UServo::tick()+0x36>
  for (int i = 0; i < MAX_SERVO_CNT; i++)
    be40:	f1b8 0f05 	cmp.w	r8, #5
        servoEnabled[i] = true;
    be44:	f885 a000 	strb.w	sl, [r5]
  for (int i = 0; i < MAX_SERVO_CNT; i++)
    be48:	d1e8      	bne.n	be1c <UServo::tick()+0x50>
    be4a:	f106 081c 	add.w	r8, r6, #28
    be4e:	f106 0730 	add.w	r7, r6, #48	; 0x30
    case 2: pin = PIN_SERVO3; break;
    be52:	2400      	movs	r4, #0
    be54:	3613      	adds	r6, #19
    }
  }
  //
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
  {
    if (i == 4 and robot.robotHWversion == 9)
    be56:	f8df 9108 	ldr.w	r9, [pc, #264]	; bf60 <UServo::tick()+0x194>
      { // implement new value
          servoValue[i] += dw;
        // midt v= 2040, min=1240, max= 2840
        // valid for HiTec HS7235-MH in high angle mode
        // v is pulsewidth in us
        int v = ((servoValue[i]/100) * msPulse/2) / 512 + midt;
    be5a:	f8df b108 	ldr.w	fp, [pc, #264]	; bf64 <UServo::tick()+0x198>
	return systick_millis_count;
    be5e:	f8df a108 	ldr.w	sl, [pc, #264]	; bf68 <UServo::tick()+0x19c>
    if (i == 4 and robot.robotHWversion == 9)
    be62:	2c04      	cmp	r4, #4
    be64:	d02b      	beq.n	bebe <UServo::tick()+0xf2>
  switch (i)
    be66:	2c01      	cmp	r4, #1
    be68:	d027      	beq.n	beba <UServo::tick()+0xee>
    case 0: pin = PIN_SERVO1; break;
    be6a:	2c02      	cmp	r4, #2
    be6c:	bf0c      	ite	eq
    be6e:	2008      	moveq	r0, #8
    be70:	200a      	movne	r0, #10
    if (servoEnabled[i] /*and (millis() % 10 == i)*/)
    be72:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    be76:	b1ab      	cbz	r3, bea4 <UServo::tick()+0xd8>
      int e = servoRef[i]*100 - servoValue[i];
    be78:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
    be7c:	f8d8 3000 	ldr.w	r3, [r8]
    be80:	eb05 0585 	add.w	r5, r5, r5, lsl #2
      if (abs(dw) > servoVel[i] and servoVel[i] > 0)
    be84:	f9b7 2000 	ldrsh.w	r2, [r7]
      int e = servoRef[i]*100 - servoValue[i];
    be88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    be8c:	ebc3 0585 	rsb	r5, r3, r5, lsl #2
      if (abs(dw) > servoVel[i] and servoVel[i] > 0)
    be90:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
    be94:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
    be98:	4291      	cmp	r1, r2
    be9a:	dd01      	ble.n	bea0 <UServo::tick()+0xd4>
    be9c:	2a00      	cmp	r2, #0
    be9e:	dc14      	bgt.n	beca <UServo::tick()+0xfe>
      int e = servoRef[i]*100 - servoValue[i];
    bea0:	462a      	mov	r2, r5
      if (dw != 0)
    bea2:	b9ba      	cbnz	r2, bed4 <UServo::tick()+0x108>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    bea4:	3401      	adds	r4, #1
    bea6:	f108 0804 	add.w	r8, r8, #4
    beaa:	3702      	adds	r7, #2
    beac:	2c05      	cmp	r4, #5
    beae:	d1d8      	bne.n	be62 <UServo::tick()+0x96>
                 i, servoRef[i], e, servoValue[i], servoVel[i], dw, v);
        usb.send(s);
      }
    }
  }
}
    beb0:	b025      	add	sp, #148	; 0x94
    beb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case 1: pin = PIN_SERVO2; break;
    beb6:	2009      	movs	r0, #9
    beb8:	e7bb      	b.n	be32 <UServo::tick()+0x66>
    beba:	2009      	movs	r0, #9
    bebc:	e7d9      	b.n	be72 <UServo::tick()+0xa6>
    if (i == 4 and robot.robotHWversion == 9)
    bebe:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    bec2:	2b09      	cmp	r3, #9
    bec4:	d0f4      	beq.n	beb0 <UServo::tick()+0xe4>
    case 0: pin = PIN_SERVO1; break;
    bec6:	200a      	movs	r0, #10
    bec8:	e7d3      	b.n	be72 <UServo::tick()+0xa6>
        if (dw > 0)
    beca:	2d00      	cmp	r5, #0
    becc:	dce9      	bgt.n	bea2 <UServo::tick()+0xd6>
          dw = -servoVel[i];
    bece:	4252      	negs	r2, r2
      if (dw != 0)
    bed0:	2a00      	cmp	r2, #0
    bed2:	d0e7      	beq.n	bea4 <UServo::tick()+0xd8>
          servoValue[i] += dw;
    bed4:	4413      	add	r3, r2
    bed6:	9209      	str	r2, [sp, #36]	; 0x24
        int v = ((servoValue[i]/100) * msPulse/2) / 512 + midt;
    bed8:	fb8b c103 	smull	ip, r1, fp, r3
          servoValue[i] += dw;
    bedc:	f8c8 3000 	str.w	r3, [r8]
        int v = ((servoValue[i]/100) * msPulse/2) / 512 + midt;
    bee0:	17db      	asrs	r3, r3, #31
    bee2:	ebc3 1161 	rsb	r1, r3, r1, asr #5
    bee6:	f240 5353 	movw	r3, #1363	; 0x553
    beea:	fb03 f101 	mul.w	r1, r3, r1
    beee:	f640 43b2 	movw	r3, #3250	; 0xcb2
    bef2:	2900      	cmp	r1, #0
    bef4:	bfb8      	it	lt
    bef6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
    befa:	1289      	asrs	r1, r1, #10
    befc:	f201 71fc 	addw	r1, r1, #2044	; 0x7fc
    bf00:	4299      	cmp	r1, r3
    bf02:	bfa8      	it	ge
    bf04:	4619      	movge	r1, r3
    bf06:	29c8      	cmp	r1, #200	; 0xc8
    bf08:	bfb8      	it	lt
    bf0a:	21c8      	movlt	r1, #200	; 0xc8
        analogWrite(pin, v);
    bf0c:	9108      	str	r1, [sp, #32]
    bf0e:	f00a fd17 	bl	16940 <analogWrite>
        snprintf(s, MSL, "# setvo t=%lu, %d, ref=%d, e=%d, value=%ld, vel=%d, dw=%d, v=%d\n",
    bf12:	9908      	ldr	r1, [sp, #32]
    bf14:	a80b      	add	r0, sp, #44	; 0x2c
    bf16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bf18:	9106      	str	r1, [sp, #24]
    bf1a:	2164      	movs	r1, #100	; 0x64
    bf1c:	9205      	str	r2, [sp, #20]
    bf1e:	9502      	str	r5, [sp, #8]
    bf20:	f9b7 3000 	ldrsh.w	r3, [r7]
    bf24:	9304      	str	r3, [sp, #16]
    bf26:	f8d8 3000 	ldr.w	r3, [r8]
    bf2a:	9303      	str	r3, [sp, #12]
    bf2c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
    bf30:	f8da 3000 	ldr.w	r3, [sl]
    bf34:	e9cd 4200 	strd	r4, r2, [sp]
    bf38:	4a06      	ldr	r2, [pc, #24]	; (bf54 <UServo::tick()+0x188>)
    bf3a:	f00f fbab 	bl	1b694 <snprintf>
        usb.send(s);
    bf3e:	a90b      	add	r1, sp, #44	; 0x2c
    bf40:	4805      	ldr	r0, [pc, #20]	; (bf58 <UServo::tick()+0x18c>)
    bf42:	f000 faeb 	bl	c51c <UUSB::send(char const*)>
    bf46:	e7ad      	b.n	bea4 <UServo::tick()+0xd8>
          analogWrite(pin, 0);
    bf48:	4639      	mov	r1, r7
    bf4a:	f00a fcf9 	bl	16940 <analogWrite>
          servoEnabled[i] = false;
    bf4e:	702f      	strb	r7, [r5, #0]
    bf50:	e761      	b.n	be16 <UServo::tick()+0x4a>
    bf52:	bf00      	nop
    bf54:	20005e08 	.word	0x20005e08
    bf58:	2000eab8 	.word	0x2000eab8
    bf5c:	20008148 	.word	0x20008148
    bf60:	2000e654 	.word	0x2000e654
    bf64:	51eb851f 	.word	0x51eb851f
    bf68:	2000eaac 	.word	0x2000eaac

0000bf6c <UServo::eePromSave()>:

///////////////////////////////////////////////////////

void UServo::eePromSave()
{
    bf6c:	b508      	push	{r3, lr}
  uint8_t flag = 0;
  // flags - no flags to save here
  if (false)
    flag +=  1 << 0;
  eeConfig.pushByte(flag);
    bf6e:	4809      	ldr	r0, [pc, #36]	; (bf94 <UServo::eePromSave()+0x28>)
    bf70:	2100      	movs	r1, #0
    bf72:	f7f7 f855 	bl	3020 <EEConfig::pushByte(unsigned char)>
  eeConfig.pushWord(0); // not used anymore (steering servo)
    bf76:	2100      	movs	r1, #0
    bf78:	4806      	ldr	r0, [pc, #24]	; (bf94 <UServo::eePromSave()+0x28>)
    bf7a:	f7f7 f86d 	bl	3058 <EEConfig::pushWord(unsigned short)>
    push32(u.u32);
    bf7e:	2100      	movs	r1, #0
    bf80:	4804      	ldr	r0, [pc, #16]	; (bf94 <UServo::eePromSave()+0x28>)
    bf82:	f7f7 f831 	bl	2fe8 <EEConfig::push32(unsigned long)>
    bf86:	2100      	movs	r1, #0
    bf88:	4802      	ldr	r0, [pc, #8]	; (bf94 <UServo::eePromSave()+0x28>)
  eeConfig.pushFloat(0.0);
  eeConfig.pushFloat(0.0);
}
    bf8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bf8e:	f7f7 b82b 	b.w	2fe8 <EEConfig::push32(unsigned long)>
    bf92:	bf00      	nop
    bf94:	2000dbe8 	.word	0x2000dbe8

0000bf98 <UServo::eePromLoad()>:

void UServo::eePromLoad()
{ // not used, but has reserved space for servo calibration
    bf98:	b510      	push	{r4, lr}
    return stringConfig;
    bf9a:	4c0b      	ldr	r4, [pc, #44]	; (bfc8 <UServo::eePromLoad()+0x30>)
  if (eeConfig.isStringConfig())
    bf9c:	f894 3020 	ldrb.w	r3, [r4, #32]
    bfa0:	b11b      	cbz	r3, bfaa <UServo::eePromLoad()+0x12>
    configAddr+=bytes;
    bfa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bfa4:	330b      	adds	r3, #11
    bfa6:	6263      	str	r3, [r4, #36]	; 0x24
    // distance to front wheel
    eeConfig.readFloat();
    // angle servo turns when PW change from 1 to 2 ms
    eeConfig.readFloat();
  }
}
    bfa8:	bd10      	pop	{r4, pc}
    /*uint8_t flag =*/ eeConfig.readByte();
    bfaa:	4620      	mov	r0, r4
    bfac:	f7f7 f884 	bl	30b8 <EEConfig::readByte()>
    eeConfig.readWord();
    bfb0:	4620      	mov	r0, r4
    bfb2:	f7f7 f895 	bl	30e0 <EEConfig::readWord()>
    u.u32 = read32();
    bfb6:	4620      	mov	r0, r4
    bfb8:	f7f7 f86a 	bl	3090 <EEConfig::read32()>
    bfbc:	4620      	mov	r0, r4
}
    bfbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bfc2:	f7f7 b865 	b.w	3090 <EEConfig::read32()>
    bfc6:	bf00      	nop
    bfc8:	2000dbe8 	.word	0x2000dbe8

0000bfcc <_GLOBAL__sub_I_servo>:
    bfcc:	b510      	push	{r4, lr}
UServo::UServo()
    bfce:	4c06      	ldr	r4, [pc, #24]	; (bfe8 <_GLOBAL__sub_I_servo+0x1c>)
    bfd0:	4620      	mov	r0, r4
    bfd2:	f000 f8b1 	bl	c138 <USubss::USubss()>
    bfd6:	4b05      	ldr	r3, [pc, #20]	; (bfec <_GLOBAL__sub_I_servo+0x20>)
UServo servo;
    bfd8:	4620      	mov	r0, r4
    bfda:	4a05      	ldr	r2, [pc, #20]	; (bff0 <_GLOBAL__sub_I_servo+0x24>)
UServo::UServo()
    bfdc:	6023      	str	r3, [r4, #0]
UServo servo;
    bfde:	4905      	ldr	r1, [pc, #20]	; (bff4 <_GLOBAL__sub_I_servo+0x28>)
}
    bfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UServo servo;
    bfe4:	f00c bf88 	b.w	18ef8 <__aeabi_atexit>
    bfe8:	2000ea58 	.word	0x2000ea58
    bfec:	20008018 	.word	0x20008018
    bff0:	20008f08 	.word	0x20008f08
    bff4:	0000ba09 	.word	0x0000ba09

0000bff8 <USubs::USubs(char const*, char const*)>:
USubs::USubs(const char * key, const char * help)
    bff8:	b510      	push	{r4, lr}
    bffa:	2300      	movs	r3, #0
    bffc:	4604      	mov	r4, r0
    bffe:	60c3      	str	r3, [r0, #12]
  keySize = strlen(msgKey);
    c000:	4608      	mov	r0, r1
USubs::USubs(const char * key, const char * help)
    c002:	7623      	strb	r3, [r4, #24]
    c004:	e9c4 3304 	strd	r3, r3, [r4, #16]
  helpText = help;
    c008:	e9c4 1200 	strd	r1, r2, [r4]
  keySize = strlen(msgKey);
    c00c:	f011 f8b8 	bl	1d180 <strlen>
    c010:	4603      	mov	r3, r0
}
    c012:	4620      	mov	r0, r4
  keySize = strlen(msgKey);
    c014:	60a3      	str	r3, [r4, #8]
}
    c016:	bd10      	pop	{r4, pc}

0000c018 <USubs::decode(char const*, bool)>:
{
    c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c01a:	4605      	mov	r5, r0
    if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == ' ')
    c01c:	6887      	ldr	r7, [r0, #8]
{
    c01e:	460e      	mov	r6, r1
  if (newSubscription)
    c020:	4614      	mov	r4, r2
    if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == ' ')
    c022:	6800      	ldr	r0, [r0, #0]
  if (newSubscription)
    c024:	b152      	cbz	r2, c03c <USubs::decode(char const*, bool)+0x24>
    if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == ' ')
    c026:	463a      	mov	r2, r7
    c028:	f00f fdec 	bl	1bc04 <strncmp>
    c02c:	4601      	mov	r1, r0
    c02e:	b918      	cbnz	r0, c038 <USubs::decode(char const*, bool)+0x20>
    c030:	5df2      	ldrb	r2, [r6, r7]
    c032:	19f0      	adds	r0, r6, r7
    c034:	2a20      	cmp	r2, #32
    c036:	d00d      	beq.n	c054 <USubs::decode(char const*, bool)+0x3c>
  bool used = false;
    c038:	2000      	movs	r0, #0
}
    c03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == 'i')
    c03c:	463a      	mov	r2, r7
    c03e:	f00f fde1 	bl	1bc04 <strncmp>
    c042:	2800      	cmp	r0, #0
    c044:	d1f8      	bne.n	c038 <USubs::decode(char const*, bool)+0x20>
    c046:	5df2      	ldrb	r2, [r6, r7]
    c048:	2a69      	cmp	r2, #105	; 0x69
    c04a:	d1f6      	bne.n	c03a <USubs::decode(char const*, bool)+0x22>
    dataRequest = true;
    c04c:	2301      	movs	r3, #1
    used = true;
    c04e:	4618      	mov	r0, r3
    dataRequest = true;
    c050:	762b      	strb	r3, [r5, #24]
}
    c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      int n = strtol(p1,nullptr, 10);
    c054:	220a      	movs	r2, #10
    c056:	f00f f92d 	bl	1b2b4 <strtol>
    c05a:	4603      	mov	r3, r0
      used = true;
    c05c:	4620      	mov	r0, r4
      subN = n; //int(n/(float(service.sampleTime_us) / 1000.0));
    c05e:	616b      	str	r3, [r5, #20]
}
    c060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c062:	bf00      	nop

0000c064 <USubs::tick()>:
{
    c064:	b538      	push	{r3, r4, r5, lr}
  bool isTime = dataRequest;
    c066:	7e05      	ldrb	r5, [r0, #24]
{
    c068:	4604      	mov	r4, r0
  if (dataRequest)
    c06a:	b11d      	cbz	r5, c074 <USubs::tick()+0x10>
    dataRequest = false;
    c06c:	2300      	movs	r3, #0
    c06e:	7603      	strb	r3, [r0, #24]
}
    c070:	4628      	mov	r0, r5
    c072:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t us = micros();
    c074:	f009 ff08 	bl	15e88 <micros>
    int32_t dt = us - sendTime;
    c078:	68e3      	ldr	r3, [r4, #12]
    if (dt < 0)
    c07a:	1ac3      	subs	r3, r0, r3
    c07c:	d40f      	bmi.n	c09e <USubs::tick()+0x3a>
    if (subN > 0 and (dt >= subN * 1000 or dt < 0))
    c07e:	6962      	ldr	r2, [r4, #20]
    c080:	2a00      	cmp	r2, #0
    c082:	ddf5      	ble.n	c070 <USubs::tick()+0xc>
    c084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c088:	fb01 f202 	mul.w	r2, r1, r2
    c08c:	429a      	cmp	r2, r3
    c08e:	dcef      	bgt.n	c070 <USubs::tick()+0xc>
      sendCnt++;
    c090:	6923      	ldr	r3, [r4, #16]
      isTime = true;
    c092:	2501      	movs	r5, #1
      sendTime = us;
    c094:	60e0      	str	r0, [r4, #12]
      sendCnt++;
    c096:	442b      	add	r3, r5
}
    c098:	4628      	mov	r0, r5
      sendCnt++;
    c09a:	6123      	str	r3, [r4, #16]
}
    c09c:	bd38      	pop	{r3, r4, r5, pc}
    if (subN > 0 and (dt >= subN * 1000 or dt < 0))
    c09e:	6963      	ldr	r3, [r4, #20]
      sendTime = us;
    c0a0:	60e0      	str	r0, [r4, #12]
    if (subN > 0 and (dt >= subN * 1000 or dt < 0))
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	dcf4      	bgt.n	c090 <USubs::tick()+0x2c>
    c0a6:	e7e3      	b.n	c070 <USubs::tick()+0xc>

0000c0a8 <USubs::serviceStatus(int)>:
{
    c0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (subN > 0)
    c0ac:	6946      	ldr	r6, [r0, #20]
{
    c0ae:	b0b6      	sub	sp, #216	; 0xd8
  if (subN > 0)
    c0b0:	2e00      	cmp	r6, #0
    c0b2:	dd1d      	ble.n	c0f0 <USubs::serviceStatus(int)+0x48>
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c0b4:	4604      	mov	r4, r0
    c0b6:	460d      	mov	r5, r1
    c0b8:	6807      	ldr	r7, [r0, #0]
    c0ba:	f8d0 8010 	ldr.w	r8, [r0, #16]
            me, msgKey, sendCnt, subN, (int32_t(micros() - sendTime)/1000));
    c0be:	f009 fee3 	bl	15e88 <micros>
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c0c2:	9602      	str	r6, [sp, #8]
    c0c4:	21c8      	movs	r1, #200	; 0xc8
            me, msgKey, sendCnt, subN, (int32_t(micros() - sendTime)/1000));
    c0c6:	68e3      	ldr	r3, [r4, #12]
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c0c8:	4a0b      	ldr	r2, [pc, #44]	; (c0f8 <USubs::serviceStatus(int)+0x50>)
            me, msgKey, sendCnt, subN, (int32_t(micros() - sendTime)/1000));
    c0ca:	1ac0      	subs	r0, r0, r3
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c0cc:	f8cd 8004 	str.w	r8, [sp, #4]
    c0d0:	462b      	mov	r3, r5
    c0d2:	9700      	str	r7, [sp, #0]
    c0d4:	17c4      	asrs	r4, r0, #31
    c0d6:	fb82 2000 	smull	r2, r0, r2, r0
    c0da:	4a08      	ldr	r2, [pc, #32]	; (c0fc <USubs::serviceStatus(int)+0x54>)
    c0dc:	ebc4 10a0 	rsb	r0, r4, r0, asr #6
    c0e0:	9003      	str	r0, [sp, #12]
    c0e2:	a804      	add	r0, sp, #16
    c0e4:	f00f fad6 	bl	1b694 <snprintf>
    usb.send(s);
    c0e8:	a904      	add	r1, sp, #16
    c0ea:	4805      	ldr	r0, [pc, #20]	; (c100 <USubs::serviceStatus(int)+0x58>)
    c0ec:	f000 fa16 	bl	c51c <UUSB::send(char const*)>
}
    c0f0:	b036      	add	sp, #216	; 0xd8
    c0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0f6:	bf00      	nop
    c0f8:	10624dd3 	.word	0x10624dd3
    c0fc:	20004d90 	.word	0x20004d90
    c100:	2000eab8 	.word	0x2000eab8

0000c104 <USubs::sendHelpLine()>:
{
    c104:	4684      	mov	ip, r0
  snprintf(s, MSL, "# -- \t%si and 'sub %s N' \t%s\r\n", msgKey, msgKey, helpText);
    c106:	4a0a      	ldr	r2, [pc, #40]	; (c130 <USubs::sendHelpLine()+0x2c>)
    c108:	f44f 7116 	mov.w	r1, #600	; 0x258
{
    c10c:	b510      	push	{r4, lr}
  snprintf(s, MSL, "# -- \t%si and 'sub %s N' \t%s\r\n", msgKey, msgKey, helpText);
    c10e:	e9dc 3400 	ldrd	r3, r4, [ip]
{
    c112:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
  snprintf(s, MSL, "# -- \t%si and 'sub %s N' \t%s\r\n", msgKey, msgKey, helpText);
    c116:	e9cd 3400 	strd	r3, r4, [sp]
    c11a:	a802      	add	r0, sp, #8
    c11c:	f00f faba 	bl	1b694 <snprintf>
  usb.send(s);
    c120:	a902      	add	r1, sp, #8
    c122:	4804      	ldr	r0, [pc, #16]	; (c134 <USubs::sendHelpLine()+0x30>)
    c124:	f000 f9fa 	bl	c51c <UUSB::send(char const*)>
}
    c128:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
    c12c:	bd10      	pop	{r4, pc}
    c12e:	bf00      	nop
    c130:	20004d70 	.word	0x20004d70
    c134:	2000eab8 	.word	0x2000eab8

0000c138 <USubss::USubss()>:
	: _M_start(), _M_finish(), _M_end_of_storage()
    c138:	2200      	movs	r2, #0
USubss::USubss()
    c13a:	4903      	ldr	r1, [pc, #12]	; (c148 <USubss::USubss()+0x10>)
    c13c:	e9c0 2202 	strd	r2, r2, [r0, #8]
    c140:	e9c0 1200 	strd	r1, r2, [r0]
    c144:	6102      	str	r2, [r0, #16]
}
    c146:	4770      	bx	lr
    c148:	2000802c 	.word	0x2000802c

0000c14c <USubss::subscribeDecode(char const*)>:
{ // if the subscribe command is for any of my data, then return true.
    c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c150:	460f      	mov	r7, r1
    c152:	4606      	mov	r6, r0
  bool newSubscription = strncmp(p1, "sub ", 4) == 0;
    c154:	2204      	movs	r2, #4
    c156:	4914      	ldr	r1, [pc, #80]	; (c1a8 <USubss::subscribeDecode(char const*)+0x5c>)
    c158:	4638      	mov	r0, r7
    c15a:	f00f fd53 	bl	1bc04 <strncmp>
    c15e:	2800      	cmp	r0, #0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c160:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
    c164:	bf0c      	ite	eq
    c166:	f04f 0801 	moveq.w	r8, #1
    c16a:	f04f 0800 	movne.w	r8, #0
    c16e:	eba3 0305 	sub.w	r3, r3, r5
    p1 += 4;
    c172:	bf08      	it	eq
    c174:	3704      	addeq	r7, #4
  for (int i = 0; i < (int)subs.size(); i++)
    c176:	2b00      	cmp	r3, #0
    c178:	dd12      	ble.n	c1a0 <USubss::subscribeDecode(char const*)+0x54>
    c17a:	2400      	movs	r4, #0
    c17c:	e005      	b.n	c18a <USubss::subscribeDecode(char const*)+0x3e>
    c17e:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
    c182:	1b5b      	subs	r3, r3, r5
    c184:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c188:	da0a      	bge.n	c1a0 <USubss::subscribeDecode(char const*)+0x54>
    used = subs[i]->decode(p1, newSubscription);
    c18a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    c18e:	4642      	mov	r2, r8
    c190:	4639      	mov	r1, r7
  for (int i = 0; i < (int)subs.size(); i++)
    c192:	3401      	adds	r4, #1
    used = subs[i]->decode(p1, newSubscription);
    c194:	f7ff ff40 	bl	c018 <USubs::decode(char const*, bool)>
    if (used)
    c198:	2800      	cmp	r0, #0
    c19a:	d0f0      	beq.n	c17e <USubss::subscribeDecode(char const*)+0x32>
}
    c19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < (int)subs.size(); i++)
    c1a0:	2000      	movs	r0, #0
}
    c1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1a6:	bf00      	nop
    c1a8:	20005fa0 	.word	0x20005fa0

0000c1ac <USubss::subscribeService()>:
{
    c1ac:	b538      	push	{r3, r4, r5, lr}
    c1ae:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
  for (int i = subscribeState; i < (int)subs.size(); i++)
    c1b2:	6905      	ldr	r5, [r0, #16]
    c1b4:	1a9b      	subs	r3, r3, r2
    c1b6:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
    c1ba:	da1f      	bge.n	c1fc <USubss::subscribeService()+0x50>
    c1bc:	1099      	asrs	r1, r3, #2
    c1be:	4604      	mov	r4, r0
    c1c0:	462b      	mov	r3, r5
    c1c2:	e009      	b.n	c1d8 <USubss::subscribeService()+0x2c>
    c1c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    c1c8:	3501      	adds	r5, #1
    c1ca:	1a9b      	subs	r3, r3, r2
    c1cc:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
    c1d0:	ea4f 01a3 	mov.w	r1, r3, asr #2
    c1d4:	da12      	bge.n	c1fc <USubss::subscribeService()+0x50>
    subscribeState++;
    c1d6:	6923      	ldr	r3, [r4, #16]
    c1d8:	3301      	adds	r3, #1
      subscribeState = 0;
    c1da:	428b      	cmp	r3, r1
    c1dc:	bfa8      	it	ge
    c1de:	2300      	movge	r3, #0
    c1e0:	6123      	str	r3, [r4, #16]
    if (subs[i]->tick())
    c1e2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
    c1e6:	f7ff ff3d 	bl	c064 <USubs::tick()>
    c1ea:	2800      	cmp	r0, #0
    c1ec:	d0ea      	beq.n	c1c4 <USubss::subscribeService()+0x18>
      sendData(i);
    c1ee:	6823      	ldr	r3, [r4, #0]
    c1f0:	4a06      	ldr	r2, [pc, #24]	; (c20c <USubss::subscribeService()+0x60>)
    c1f2:	681b      	ldr	r3, [r3, #0]
    c1f4:	4293      	cmp	r3, r2
    c1f6:	d103      	bne.n	c200 <USubss::subscribeService()+0x54>
      finished = false;
    c1f8:	2000      	movs	r0, #0
}
    c1fa:	bd38      	pop	{r3, r4, r5, pc}
  bool finished = true;
    c1fc:	2001      	movs	r0, #1
}
    c1fe:	bd38      	pop	{r3, r4, r5, pc}
      sendData(i);
    c200:	4620      	mov	r0, r4
    c202:	4629      	mov	r1, r5
    c204:	4798      	blx	r3
      finished = false;
    c206:	2000      	movs	r0, #0
}
    c208:	bd38      	pop	{r3, r4, r5, pc}
    c20a:	bf00      	nop
    c20c:	000018cd 	.word	0x000018cd

0000c210 <USubss::serviceStatus(int)>:
{
    c210:	b530      	push	{r4, r5, lr}
    c212:	b0cd      	sub	sp, #308	; 0x134
    c214:	460b      	mov	r3, r1
  snprintf(s, MSL, "# USubss::serviceStatus: idx=%d:\n", me);
    c216:	4a0f      	ldr	r2, [pc, #60]	; (c254 <USubss::serviceStatus(int)+0x44>)
{
    c218:	4605      	mov	r5, r0
  snprintf(s, MSL, "# USubss::serviceStatus: idx=%d:\n", me);
    c21a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    c21e:	a801      	add	r0, sp, #4
    c220:	f00f fa38 	bl	1b694 <snprintf>
  usb.send(s);
    c224:	a901      	add	r1, sp, #4
    c226:	480c      	ldr	r0, [pc, #48]	; (c258 <USubss::serviceStatus(int)+0x48>)
    c228:	f000 f978 	bl	c51c <UUSB::send(char const*)>
    c22c:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    c230:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c232:	2b00      	cmp	r3, #0
    c234:	dd0c      	ble.n	c250 <USubss::serviceStatus(int)+0x40>
    c236:	2400      	movs	r4, #0
    subs[i]->serviceStatus(i);
    c238:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    c23c:	4621      	mov	r1, r4
    c23e:	f7ff ff33 	bl	c0a8 <USubs::serviceStatus(int)>
  for (int i = 0; i < (int)subs.size(); i++)
    c242:	3401      	adds	r4, #1
    c244:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    c248:	1a9b      	subs	r3, r3, r2
    c24a:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c24e:	dbf3      	blt.n	c238 <USubss::serviceStatus(int)+0x28>
}
    c250:	b04d      	add	sp, #308	; 0x134
    c252:	bd30      	pop	{r4, r5, pc}
    c254:	20005f7c 	.word	0x20005f7c
    c258:	2000eab8 	.word	0x2000eab8

0000c25c <USubss::stopSubscriptions()>:
    c25c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c260:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c262:	2b00      	cmp	r3, #0
    c264:	dd0d      	ble.n	c282 <USubss::stopSubscriptions()+0x26>
    c266:	1098      	asrs	r0, r3, #2
    c268:	2300      	movs	r3, #0
    c26a:	3a04      	subs	r2, #4
{
    c26c:	b410      	push	{r4}
  void sendPublishList(int & listNum);
  /**
   * Stop all pulished items */
  void stopSubscription()
  {
    subN = 0;
    c26e:	461c      	mov	r4, r3
  for (int i = 0; i < (int)subs.size(); i++)
    c270:	3301      	adds	r3, #1
    c272:	f852 1f04 	ldr.w	r1, [r2, #4]!
    c276:	4283      	cmp	r3, r0
    c278:	614c      	str	r4, [r1, #20]
    c27a:	dbf9      	blt.n	c270 <USubss::stopSubscriptions()+0x14>
}
    c27c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c280:	4770      	bx	lr
    c282:	4770      	bx	lr

0000c284 <USubss::subscribeSendHelp()>:
{
    c284:	b538      	push	{r3, r4, r5, lr}
    c286:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c28a:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c28c:	2b00      	cmp	r3, #0
    c28e:	dd0c      	ble.n	c2aa <USubss::subscribeSendHelp()+0x26>
    c290:	4605      	mov	r5, r0
    c292:	2400      	movs	r4, #0
    subs[i]->sendHelpLine();
    c294:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  for (int i = 0; i < (int)subs.size(); i++)
    c298:	3401      	adds	r4, #1
    subs[i]->sendHelpLine();
    c29a:	f7ff ff33 	bl	c104 <USubs::sendHelpLine()>
    c29e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    c2a2:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c2a4:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c2a8:	dbf4      	blt.n	c294 <USubss::subscribeSendHelp()+0x10>
}
    c2aa:	bd38      	pop	{r3, r4, r5, pc}

0000c2ac <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    c2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2b0:	e9d0 8900 	ldrd	r8, r9, [r0]
    c2b4:	460f      	mov	r7, r1
    c2b6:	4692      	mov	sl, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    c2b8:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c2bc:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
    c2c0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    c2c4:	d054      	beq.n	c370 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xc4>
    c2c6:	1093      	asrs	r3, r2, #2
    c2c8:	4606      	mov	r6, r0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    c2ca:	eba7 0508 	sub.w	r5, r7, r8
    c2ce:	2b01      	cmp	r3, #1
    c2d0:	461a      	mov	r2, r3
    c2d2:	bf38      	it	cc
    c2d4:	2201      	movcc	r2, #1
    c2d6:	189c      	adds	r4, r3, r2
    c2d8:	d248      	bcs.n	c36c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c2da:	2c00      	cmp	r4, #0
    c2dc:	d13c      	bne.n	c358 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xac>
    c2de:	46a3      	mov	fp, r4
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    c2e0:	f8da 3000 	ldr.w	r3, [sl]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    c2e4:	2d00      	cmp	r5, #0
    c2e6:	f84b 3005 	str.w	r3, [fp, r5]
    c2ea:	dc24      	bgt.n	c336 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x8a>
      ptrdiff_t __count = __last - __first;
    c2ec:	eba9 0907 	sub.w	r9, r9, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    c2f0:	3504      	adds	r5, #4
      if (__count > 0)
    c2f2:	f1b9 0f00 	cmp.w	r9, #0
    c2f6:	445d      	add	r5, fp
    c2f8:	dc13      	bgt.n	c322 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
    c2fa:	444d      	add	r5, r9
	if (__p)
    c2fc:	f1b8 0f00 	cmp.w	r8, #0
    c300:	d104      	bne.n	c30c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x60>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c302:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    c304:	e9c6 b500 	strd	fp, r5, [r6]
    }
    c308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
    c30c:	68b1      	ldr	r1, [r6, #8]
    c30e:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    c312:	4640      	mov	r0, r8
    c314:	f00a f9d2 	bl	166bc <operator delete(void*, unsigned int)>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c318:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    c31a:	e9c6 b500 	strd	fp, r5, [r6]
    }
    c31e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c322:	4628      	mov	r0, r5
    c324:	4639      	mov	r1, r7
    c326:	464a      	mov	r2, r9
      return __result + __count;
    c328:	444d      	add	r5, r9
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c32a:	f00a f92b 	bl	16584 <memcpy>
    c32e:	f1b8 0f00 	cmp.w	r8, #0
    c332:	d0e6      	beq.n	c302 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x56>
    c334:	e7ea      	b.n	c30c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x60>
      ptrdiff_t __count = __last - __first;
    c336:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c33a:	462a      	mov	r2, r5
    c33c:	4641      	mov	r1, r8
    c33e:	4658      	mov	r0, fp
	      ++__new_finish;
    c340:	3504      	adds	r5, #4
    c342:	f00f fafd 	bl	1b940 <memmove>
      if (__count > 0)
    c346:	f1b9 0f00 	cmp.w	r9, #0
    c34a:	445d      	add	r5, fp
    c34c:	dce9      	bgt.n	c322 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
    c34e:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
    c350:	444d      	add	r5, r9
    c352:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    c356:	e7dc      	b.n	c312 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x66>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    c358:	428c      	cmp	r4, r1
    c35a:	bf28      	it	cs
    c35c:	460c      	movcs	r4, r1
    c35e:	00a4      	lsls	r4, r4, #2
    c360:	4620      	mov	r0, r4
    c362:	f00a f9a9 	bl	166b8 <operator new(unsigned int)>
    c366:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c368:	4404      	add	r4, r0
    c36a:	e7b9      	b.n	c2e0 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x34>
    c36c:	4c02      	ldr	r4, [pc, #8]	; (c378 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xcc>)
    c36e:	e7f7      	b.n	c360 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xb4>
	  __throw_length_error(__N(__s));
    c370:	4802      	ldr	r0, [pc, #8]	; (c37c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xd0>)
    c372:	f7ff fe41 	bl	bff8 <USubs::USubs(char const*, char const*)>
    c376:	bf00      	nop
    c378:	7ffffffc 	.word	0x7ffffffc
    c37c:	20007d5c 	.word	0x20007d5c

0000c380 <USubss::addPublistItem(char const*, char const*)>:

void USubss::addPublistItem(const char* key, const char * helpLine)
{
    c380:	b530      	push	{r4, r5, lr}
    c382:	b085      	sub	sp, #20
    c384:	4604      	mov	r4, r0
  subs.push_back(new USubs(key, helpLine));
    c386:	201c      	movs	r0, #28
{
    c388:	e9cd 2100 	strd	r2, r1, [sp]
  subs.push_back(new USubs(key, helpLine));
    c38c:	f00a f994 	bl	166b8 <operator new(unsigned int)>
    c390:	4605      	mov	r5, r0
    c392:	e9dd 2100 	ldrd	r2, r1, [sp]
    c396:	f7ff fe2f 	bl	bff8 <USubs::USubs(char const*, char const*)>
    c39a:	9503      	str	r5, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    c39c:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
    c3a0:	4299      	cmp	r1, r3
    c3a2:	d004      	beq.n	c3ae <USubss::addPublistItem(char const*, char const*)+0x2e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    c3a4:	f841 5b04 	str.w	r5, [r1], #4
	    ++this->_M_impl._M_finish;
    c3a8:	60a1      	str	r1, [r4, #8]
}
    c3aa:	b005      	add	sp, #20
    c3ac:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    c3ae:	aa03      	add	r2, sp, #12
    c3b0:	1d20      	adds	r0, r4, #4
    c3b2:	f7ff ff7b 	bl	c2ac <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)>
    c3b6:	b005      	add	sp, #20
    c3b8:	bd30      	pop	{r4, r5, pc}
    c3ba:	bf00      	nop

0000c3bc <UUSB::~UUSB()>:
class UUSB : public USubss
    c3bc:	b510      	push	{r4, lr}
    c3be:	4b0a      	ldr	r3, [pc, #40]	; (c3e8 <UUSB::~UUSB()+0x2c>)
    c3c0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    c3c2:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
    c3c6:	6023      	str	r3, [r4, #0]
	if (__p)
    c3c8:	b120      	cbz	r0, c3d4 <UUSB::~UUSB()+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    c3ca:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
	::operator delete(__p
    c3ce:	1a09      	subs	r1, r1, r0
    c3d0:	f00a f974 	bl	166bc <operator delete(void*, unsigned int)>
    c3d4:	4b05      	ldr	r3, [pc, #20]	; (c3ec <UUSB::~UUSB()+0x30>)
	_M_deallocate(_M_impl._M_start,
    c3d6:	6860      	ldr	r0, [r4, #4]
    c3d8:	6023      	str	r3, [r4, #0]
	if (__p)
    c3da:	b118      	cbz	r0, c3e4 <UUSB::~UUSB()+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    c3dc:	68e1      	ldr	r1, [r4, #12]
    c3de:	1a09      	subs	r1, r1, r0
    c3e0:	f00a f96c 	bl	166bc <operator delete(void*, unsigned int)>
    c3e4:	4620      	mov	r0, r4
    c3e6:	bd10      	pop	{r4, pc}
    c3e8:	20007f98 	.word	0x20007f98
    c3ec:	2000802c 	.word	0x2000802c

0000c3f0 <UUSB::decode(char const*)>:
  send(reply);
  send(                "# -- \talive \tIgnorred, but used to keep communication alive (once a sec is fine)\r\n");
}

bool UUSB::decode(const char* buf)
{
    c3f0:	b538      	push	{r3, r4, r5, lr}
  bool used = true;
  if (strncmp(buf, "i ", 2) == 0)
    c3f2:	780b      	ldrb	r3, [r1, #0]
{
    c3f4:	460c      	mov	r4, r1
    c3f6:	4605      	mov	r5, r0
  if (strncmp(buf, "i ", 2) == 0)
    c3f8:	2b69      	cmp	r3, #105	; 0x69
    c3fa:	d10f      	bne.n	c41c <UUSB::decode(char const*)+0x2c>
    c3fc:	784b      	ldrb	r3, [r1, #1]
    c3fe:	2b20      	cmp	r3, #32
    c400:	d10c      	bne.n	c41c <UUSB::decode(char const*)+0x2c>
  {
    const char * p1 = &buf[2];
    localEcho = *p1 == '1';
    c402:	788a      	ldrb	r2, [r1, #2]
  bool used = true;
    c404:	2301      	movs	r3, #1
    localEcho = *p1 == '1';
    c406:	2a31      	cmp	r2, #49	; 0x31
    c408:	bf0d      	iteet	eq
    c40a:	4619      	moveq	r1, r3
    c40c:	2100      	movne	r1, #0
    // when local echo, there is no need for CRC, so turn it off
    use_CRC = not localEcho;
    c40e:	461a      	movne	r2, r3
    c410:	2200      	moveq	r2, #0
    localEcho = *p1 == '1';
    c412:	7701      	strb	r1, [r0, #28]
    use_CRC = not localEcho;
    c414:	f880 2121 	strb.w	r2, [r0, #289]	; 0x121
    // accepted, but ignored
  }
  else
    used = false;
  return used;
}
    c418:	4618      	mov	r0, r3
    c41a:	bd38      	pop	{r3, r4, r5, pc}
  else if (strncmp(buf, "silent ", 7) == 0)
    c41c:	2207      	movs	r2, #7
    c41e:	4918      	ldr	r1, [pc, #96]	; (c480 <UUSB::decode(char const*)+0x90>)
    c420:	4620      	mov	r0, r4
    c422:	f00f fbef 	bl	1bc04 <strncmp>
    c426:	b170      	cbz	r0, c446 <UUSB::decode(char const*)+0x56>
  else if (strncmp(buf, "nocrc ", 8) == 0)
    c428:	4916      	ldr	r1, [pc, #88]	; (c484 <UUSB::decode(char const*)+0x94>)
    c42a:	4620      	mov	r0, r4
    c42c:	f010 fc8c 	bl	1cd48 <strcmp>
    c430:	b1b0      	cbz	r0, c460 <UUSB::decode(char const*)+0x70>
  else if (strncmp(buf, "alive", 5) == 0)
    c432:	2205      	movs	r2, #5
    c434:	4914      	ldr	r1, [pc, #80]	; (c488 <UUSB::decode(char const*)+0x98>)
    c436:	4620      	mov	r0, r4
    c438:	f00f fbe4 	bl	1bc04 <strncmp>
    c43c:	fab0 f380 	clz	r3, r0
    c440:	095b      	lsrs	r3, r3, #5
}
    c442:	4618      	mov	r0, r3
    c444:	bd38      	pop	{r3, r4, r5, pc}
    silenceUSBauto = strtol(p1, nullptr, 10);
    c446:	4601      	mov	r1, r0
    c448:	220a      	movs	r2, #10
    c44a:	1de0      	adds	r0, r4, #7
    c44c:	f00e ff32 	bl	1b2b4 <strtol>
    c450:	3800      	subs	r0, #0
  bool used = true;
    c452:	f04f 0301 	mov.w	r3, #1
    silenceUSBauto = strtol(p1, nullptr, 10);
    c456:	bf18      	it	ne
    c458:	2001      	movne	r0, #1
    c45a:	7528      	strb	r0, [r5, #20]
}
    c45c:	4618      	mov	r0, r3
    c45e:	bd38      	pop	{r3, r4, r5, pc}
        allowNoCRC = strtol(p1, nullptr, 10);
    c460:	4601      	mov	r1, r0
    c462:	220a      	movs	r2, #10
    c464:	f104 0008 	add.w	r0, r4, #8
    c468:	f00e ff24 	bl	1b2b4 <strtol>
    c46c:	3800      	subs	r0, #0
  bool used = true;
    c46e:	f04f 0301 	mov.w	r3, #1
        allowNoCRC = strtol(p1, nullptr, 10);
    c472:	bf18      	it	ne
    c474:	2001      	movne	r0, #1
    c476:	f885 014c 	strb.w	r0, [r5, #332]	; 0x14c
}
    c47a:	4618      	mov	r0, r3
    c47c:	bd38      	pop	{r3, r4, r5, pc}
    c47e:	bf00      	nop
    c480:	20004794 	.word	0x20004794
    c484:	2000479c 	.word	0x2000479c
    c488:	200047a4 	.word	0x200047a4

0000c48c <UUSB::client_send_str(char const*, int)>:

bool UUSB::client_send_str(const char * str, int m) // , bool blocking) //, bool toUSB, bool toWifi)
{
  //int n = strlen(str);
  bool okSend = true;
  if (use_CRC)
    c48c:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
{
    c490:	b530      	push	{r4, r5, lr}
    c492:	460d      	mov	r5, r1
    c494:	b083      	sub	sp, #12
    c496:	4614      	mov	r4, r2
  if (use_CRC)
    c498:	b343      	cbz	r3, c4ec <UUSB::client_send_str(char const*, int)+0x60>
  { // generate q-code first
    int sum = 0;
    const char * p1 = str;
    for (int i = 0; i < m; i++)
    c49a:	2a00      	cmp	r2, #0
    c49c:	dd38      	ble.n	c510 <UUSB::client_send_str(char const*, int)+0x84>
    c49e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    int sum = 0;
    c4a2:	2300      	movs	r3, #0
    c4a4:	4462      	add	r2, ip
    {
      if (*p1 >= ' ')
    c4a6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    c4aa:	f1be 0f1f 	cmp.w	lr, #31
        sum += *p1;
    c4ae:	bf88      	it	hi
    c4b0:	4473      	addhi	r3, lr
    for (int i = 0; i < m; i++)
    c4b2:	4594      	cmp	ip, r2
    c4b4:	d1f7      	bne.n	c4a6 <UUSB::client_send_str(char const*, int)+0x1a>
      p1++;
    } 
    const int MQL = 4;
    char q[MQL];
    snprintf(q, MQL, ";%02d", (sum % 99) + 1);
    c4b6:	4a17      	ldr	r2, [pc, #92]	; (c514 <UUSB::client_send_str(char const*, int)+0x88>)
    c4b8:	fba2 2c03 	umull	r2, ip, r2, r3
    c4bc:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
    c4c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    c4c4:	eb0c 1c4c 	add.w	ip, ip, ip, lsl #5
    c4c8:	eba3 030c 	sub.w	r3, r3, ip
    c4cc:	3301      	adds	r3, #1
    c4ce:	2104      	movs	r1, #4
    c4d0:	4a11      	ldr	r2, [pc, #68]	; (c518 <UUSB::client_send_str(char const*, int)+0x8c>)
    c4d2:	eb0d 0001 	add.w	r0, sp, r1
    c4d6:	f00f f8dd 	bl	1b694 <snprintf>
    int a = usb_serial_write(q, 3);
    c4da:	2103      	movs	r1, #3
    c4dc:	a801      	add	r0, sp, #4
    c4de:	f00b fc9d 	bl	17e1c <usb_serial_write>
    if (a == 3)
    c4e2:	2803      	cmp	r0, #3
    c4e4:	d00b      	beq.n	c4fe <UUSB::client_send_str(char const*, int)+0x72>
    {
      a = usb_serial_write(str, m);
      okSend += a + 2;
    }
    else
      okSend = false;
    c4e6:	2000      	movs	r0, #0
  else
  { // just send as is
    okSend = usb_serial_write(str, m);
  }
  return okSend;
}
    c4e8:	b003      	add	sp, #12
    c4ea:	bd30      	pop	{r4, r5, pc}
    okSend = usb_serial_write(str, m);
    c4ec:	4611      	mov	r1, r2
    c4ee:	4628      	mov	r0, r5
    c4f0:	f00b fc94 	bl	17e1c <usb_serial_write>
    c4f4:	3800      	subs	r0, #0
    c4f6:	bf18      	it	ne
    c4f8:	2001      	movne	r0, #1
}
    c4fa:	b003      	add	sp, #12
    c4fc:	bd30      	pop	{r4, r5, pc}
      a = usb_serial_write(str, m);
    c4fe:	4621      	mov	r1, r4
    c500:	4628      	mov	r0, r5
    c502:	f00b fc8b 	bl	17e1c <usb_serial_write>
      okSend += a + 2;
    c506:	3003      	adds	r0, #3
    c508:	bf18      	it	ne
    c50a:	2001      	movne	r0, #1
}
    c50c:	b003      	add	sp, #12
    c50e:	bd30      	pop	{r4, r5, pc}
    for (int i = 0; i < m; i++)
    c510:	2301      	movs	r3, #1
    c512:	e7dc      	b.n	c4ce <UUSB::client_send_str(char const*, int)+0x42>
    c514:	a57eb503 	.word	0xa57eb503
    c518:	200045c0 	.word	0x200045c0

0000c51c <UUSB::send(char const*)>:
  if (localEcho == 1 and justSendPrompt)
    c51c:	7f03      	ldrb	r3, [r0, #28]
{
    c51e:	b570      	push	{r4, r5, r6, lr}
    c520:	4604      	mov	r4, r0
    c522:	460d      	mov	r5, r1
  if (localEcho == 1 and justSendPrompt)
    c524:	b10b      	cbz	r3, c52a <UUSB::send(char const*)+0xe>
    c526:	7f43      	ldrb	r3, [r0, #29]
    c528:	bb13      	cbnz	r3, c570 <UUSB::send(char const*)+0x54>
  if (usbIsUp)
    c52a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    c52e:	b973      	cbnz	r3, c54e <UUSB::send(char const*)+0x32>
    usbSendFail++;
    c530:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    c534:	2600      	movs	r6, #0
    c536:	3301      	adds	r3, #1
    c538:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (logger.logStreamedMsg and not logger.logStreamedMsgFull)
    c53c:	4812      	ldr	r0, [pc, #72]	; (c588 <UUSB::send(char const*)+0x6c>)
    c53e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    c542:	b113      	cbz	r3, c54a <UUSB::send(char const*)+0x2e>
    c544:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
    c548:	b1cb      	cbz	r3, c57e <UUSB::send(char const*)+0x62>
}
    c54a:	4630      	mov	r0, r6
    c54c:	bd70      	pop	{r4, r5, r6, pc}
    int n = strlen(str);
    c54e:	4628      	mov	r0, r5
    c550:	f010 fe16 	bl	1d180 <strlen>
    sendOK = client_send_str(str, n);
    c554:	4629      	mov	r1, r5
    int n = strlen(str);
    c556:	4602      	mov	r2, r0
    sendOK = client_send_str(str, n);
    c558:	4620      	mov	r0, r4
    c55a:	f7ff ff97 	bl	c48c <UUSB::client_send_str(char const*, int)>
  if (sendOK == false)
    c55e:	4606      	mov	r6, r0
    c560:	2800      	cmp	r0, #0
    c562:	d0e5      	beq.n	c530 <UUSB::send(char const*)+0x14>
    usbSendCnt++;
    c564:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c568:	3301      	adds	r3, #1
    c56a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    c56e:	e7e5      	b.n	c53c <UUSB::send(char const*)+0x20>
    client_send_str("\n\r", 2);
    c570:	2202      	movs	r2, #2
    c572:	4906      	ldr	r1, [pc, #24]	; (c58c <UUSB::send(char const*)+0x70>)
    c574:	f7ff ff8a 	bl	c48c <UUSB::client_send_str(char const*, int)>
    justSendPrompt = false;
    c578:	2300      	movs	r3, #0
    c57a:	7763      	strb	r3, [r4, #29]
    c57c:	e7d5      	b.n	c52a <UUSB::send(char const*)+0xe>
    logger.addMsgLog(str);
    c57e:	4629      	mov	r1, r5
    c580:	f7fb fc6a 	bl	7e58 <ULog::addMsgLog(char const*)>
}
    c584:	4630      	mov	r0, r6
    c586:	bd70      	pop	{r4, r5, r6, pc}
    c588:	2000e240 	.word	0x2000e240
    c58c:	200046b4 	.word	0x200046b4

0000c590 <UUSB::sendUSBstatus()>:
{
    c590:	4603      	mov	r3, r0
    return float(time_us)*1e-6;
    c592:	4a1d      	ldr	r2, [pc, #116]	; (c608 <UUSB::sendUSBstatus()+0x78>)
    c594:	b500      	push	{lr}
    c596:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    c59a:	b0a9      	sub	sp, #164	; 0xa4
  snprintf(s, MSL, "# usb %.3f %d %d %d %d %d %d %d\r\n",
    c59c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    c5a0:	9208      	str	r2, [sp, #32]
    c5a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    c5a6:	9207      	str	r2, [sp, #28]
    c5a8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    c5ac:	9206      	str	r2, [sp, #24]
    c5ae:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    c5b2:	9205      	str	r2, [sp, #20]
    c5b4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c5b8:	9204      	str	r2, [sp, #16]
    c5ba:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    c5be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
    c5c2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c5c6:	f00c ff21 	bl	1940c <__aeabi_ul2f>
    c5ca:	ee07 0a90 	vmov	s15, r0
    c5ce:	4a0f      	ldr	r2, [pc, #60]	; (c60c <UUSB::sendUSBstatus()+0x7c>)
    c5d0:	2178      	movs	r1, #120	; 0x78
    c5d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    c5d6:	a80a      	add	r0, sp, #40	; 0x28
    c5d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; c600 <UUSB::sendUSBstatus()+0x70>
    c5dc:	ee27 7b06 	vmul.f64	d7, d7, d6
    c5e0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c5e4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c5e8:	ed8d 7b00 	vstr	d7, [sp]
    c5ec:	f00f f852 	bl	1b694 <snprintf>
  usb.send(s);
    c5f0:	a90a      	add	r1, sp, #40	; 0x28
    c5f2:	4807      	ldr	r0, [pc, #28]	; (c610 <UUSB::sendUSBstatus()+0x80>)
    c5f4:	f7ff ff92 	bl	c51c <UUSB::send(char const*)>
}
    c5f8:	b029      	add	sp, #164	; 0xa4
    c5fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c5fe:	bf00      	nop
    c600:	a0b5ed8d 	.word	0xa0b5ed8d
    c604:	3eb0c6f7 	.word	0x3eb0c6f7
    c608:	2000d0c8 	.word	0x2000d0c8
    c60c:	2000459c 	.word	0x2000459c
    c610:	2000eab8 	.word	0x2000eab8

0000c614 <UUSB::sendHelp()>:
{
    c614:	b530      	push	{r4, r5, lr}
  snprintf(reply, MRL, "# USB connection ------- \r\n");
    c616:	4d1b      	ldr	r5, [pc, #108]	; (c684 <UUSB::sendHelp()+0x70>)
{
    c618:	b0d1      	sub	sp, #324	; 0x144
    c61a:	4604      	mov	r4, r0
  snprintf(reply, MRL, "# USB connection ------- \r\n");
    c61c:	46ec      	mov	ip, sp
    c61e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    c628:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  send(reply);
    c62c:	4669      	mov	r1, sp
    c62e:	4620      	mov	r0, r4
    c630:	f7ff ff74 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \ti V \tInteractive: V=1: local echo (is=%d) (for use with telnet)\r\n", localEcho);
    c634:	7f23      	ldrb	r3, [r4, #28]
    c636:	4a14      	ldr	r2, [pc, #80]	; (c688 <UUSB::sendHelp()+0x74>)
    c638:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c63c:	4668      	mov	r0, sp
    c63e:	f00f f829 	bl	1b694 <snprintf>
  send(reply);
    c642:	4669      	mov	r1, sp
    c644:	4620      	mov	r0, r4
    c646:	f7ff ff69 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tnocrc V \tAllow messages without CRC: V=1: allow (is=%d)\r\n", allowNoCRC );
    c64a:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
    c64e:	4a0f      	ldr	r2, [pc, #60]	; (c68c <UUSB::sendHelp()+0x78>)
    c650:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c654:	4668      	mov	r0, sp
    c656:	f00f f81d 	bl	1b694 <snprintf>
  send(reply);
    c65a:	4669      	mov	r1, sp
    c65c:	4620      	mov	r0, r4
    c65e:	f7ff ff5d 	bl	c51c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsilent V \tShould USB be silent, if no communication (1=auto silent) silent=%d (pt no effect)\r\n", silenceUSBauto);
    c662:	7d23      	ldrb	r3, [r4, #20]
    c664:	4a0a      	ldr	r2, [pc, #40]	; (c690 <UUSB::sendHelp()+0x7c>)
    c666:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c66a:	4668      	mov	r0, sp
    c66c:	f00f f812 	bl	1b694 <snprintf>
  send(reply);
    c670:	4669      	mov	r1, sp
    c672:	4620      	mov	r0, r4
    c674:	f7ff ff52 	bl	c51c <UUSB::send(char const*)>
  send(                "# -- \talive \tIgnorred, but used to keep communication alive (once a sec is fine)\r\n");
    c678:	4906      	ldr	r1, [pc, #24]	; (c694 <UUSB::sendHelp()+0x80>)
    c67a:	4620      	mov	r0, r4
    c67c:	f7ff ff4e 	bl	c51c <UUSB::send(char const*)>
}
    c680:	b051      	add	sp, #324	; 0x144
    c682:	bd30      	pop	{r4, r5, pc}
    c684:	200047ac 	.word	0x200047ac
    c688:	200047c8 	.word	0x200047c8
    c68c:	20004810 	.word	0x20004810
    c690:	20004850 	.word	0x20004850
    c694:	200048b8 	.word	0x200048b8

0000c698 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)>:
{
    c698:	b530      	push	{r4, r5, lr}
    c69a:	4d15      	ldr	r5, [pc, #84]	; (c6f0 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)+0x58>)
    c69c:	b0e9      	sub	sp, #420	; 0x1a4
    c69e:	460b      	mov	r3, r1
    c6a0:	4604      	mov	r4, r0
    c6a2:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
  snprintf(s, MSL, "# %.3f %s: %s\r\n", service.time_sec(), info, msg);
    c6a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c6aa:	f00c feaf 	bl	1940c <__aeabi_ul2f>
    c6ae:	ee07 0a90 	vmov	s15, r0
    c6b2:	4a10      	ldr	r2, [pc, #64]	; (c6f4 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)+0x5c>)
    c6b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c6b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    c6bc:	a804      	add	r0, sp, #16
    c6be:	ed9f 6b0a 	vldr	d6, [pc, #40]	; c6e8 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)+0x50>
    c6c2:	ee27 7b06 	vmul.f64	d7, d7, d6
    c6c6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c6ca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c6ce:	ed8d 7b00 	vstr	d7, [sp]
    c6d2:	f00e ffdf 	bl	1b694 <snprintf>
  isOK = send(s);
    c6d6:	a904      	add	r1, sp, #16
    c6d8:	4620      	mov	r0, r4
    c6da:	f7ff ff1f 	bl	c51c <UUSB::send(char const*)>
}
    c6de:	b069      	add	sp, #420	; 0x1a4
    c6e0:	bd30      	pop	{r4, r5, pc}
    c6e2:	bf00      	nop
    c6e4:	f3af 8000 	nop.w
    c6e8:	a0b5ed8d 	.word	0xa0b5ed8d
    c6ec:	3eb0c6f7 	.word	0x3eb0c6f7
    c6f0:	2000d0c8 	.word	0x2000d0c8
    c6f4:	200046a4 	.word	0x200046a4

0000c6f8 <UUSB::sendSubscriptionStatus()>:
{
    c6f8:	b530      	push	{r4, r5, lr}
    c6fa:	4605      	mov	r5, r0
    c6fc:	b0b3      	sub	sp, #204	; 0xcc
  snprintf(s, MSL, "# UUSB::tick: (sec) size=%d\n", subscriptions.size());
    c6fe:	4a10      	ldr	r2, [pc, #64]	; (c740 <UUSB::sendSubscriptionStatus()+0x48>)
    c700:	21c8      	movs	r1, #200	; 0xc8
    c702:	4668      	mov	r0, sp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c704:	e9d5 4349 	ldrd	r4, r3, [r5, #292]	; 0x124
    c708:	1b1b      	subs	r3, r3, r4
    c70a:	109b      	asrs	r3, r3, #2
    c70c:	f00e ffc2 	bl	1b694 <snprintf>
  usb.send(s);
    c710:	4669      	mov	r1, sp
    c712:	480c      	ldr	r0, [pc, #48]	; (c744 <UUSB::sendSubscriptionStatus()+0x4c>)
    c714:	f7ff ff02 	bl	c51c <UUSB::send(char const*)>
    c718:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    c71c:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    c71e:	2b00      	cmp	r3, #0
    c720:	dd0c      	ble.n	c73c <UUSB::sendSubscriptionStatus()+0x44>
    c722:	2400      	movs	r4, #0
    subscriptions[i]->serviceStatus(i);
    c724:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    c728:	4621      	mov	r1, r4
    c72a:	f7ff fd71 	bl	c210 <USubss::serviceStatus(int)>
  for (int i = 0; i < (int)subscriptions.size(); i++)
    c72e:	3401      	adds	r4, #1
    c730:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    c734:	1a9b      	subs	r3, r3, r2
    c736:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c73a:	dbf3      	blt.n	c724 <UUSB::sendSubscriptionStatus()+0x2c>
}
    c73c:	b033      	add	sp, #204	; 0xcc
    c73e:	bd30      	pop	{r4, r5, pc}
    c740:	20004684 	.word	0x20004684
    c744:	2000eab8 	.word	0x2000eab8

0000c748 <UUSB::sendData(int)>:
  if (item == 0)
    c748:	b111      	cbz	r1, c750 <UUSB::sendData(int)+0x8>
  else if (item == 1)
    c74a:	2901      	cmp	r1, #1
    c74c:	d002      	beq.n	c754 <UUSB::sendData(int)+0xc>
}
    c74e:	4770      	bx	lr
    sendUSBstatus();
    c750:	f7ff bf1e 	b.w	c590 <UUSB::sendUSBstatus()>
    sendSubscriptionStatus();
    c754:	f7ff bfd0 	b.w	c6f8 <UUSB::sendSubscriptionStatus()>

0000c758 <UUSB::receivedCharFromUSB(unsigned char)>:
 * Put it into buffer, and if a full line, then intrepid the result.
 * \param n is the new character */
bool UUSB::receivedCharFromUSB(uint8_t n)
{ // got another character from USB (command)
  bool fullMsg = false;
  if (n >= ' ')
    c758:	291f      	cmp	r1, #31
{ // got another character from USB (command)
    c75a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c75c:	460d      	mov	r5, r1
    c75e:	b0d1      	sub	sp, #324	; 0x144
    c760:	4604      	mov	r4, r0
  if (n >= ' ')
    c762:	d952      	bls.n	c80a <UUSB::receivedCharFromUSB(unsigned char)+0xb2>
  {
    usbRxBuf[usbRxBufCnt] = n;
    c764:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    c768:	18c2      	adds	r2, r0, r3
    if (usbRxBufCnt < RX_BUF_SIZE - 1)
    c76a:	2bc6      	cmp	r3, #198	; 0xc6
    usbRxBuf[usbRxBufCnt] = n;
    c76c:	7791      	strb	r1, [r2, #30]
    if (usbRxBufCnt < RX_BUF_SIZE - 1)
    c76e:	dc0c      	bgt.n	c78a <UUSB::receivedCharFromUSB(unsigned char)+0x32>
      usbRxBufCnt++;
    c770:	3301      	adds	r3, #1
      usbRxBufCnt = 0;
      usbRxBuf[usbRxBufCnt] = '\0';
    }
  }
  //
  if (localEcho) // and not silentUSB)
    c772:	7f02      	ldrb	r2, [r0, #28]
      usbRxBufCnt++;
    c774:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  if (localEcho) // and not silentUSB)
    c778:	b98a      	cbnz	r2, c79e <UUSB::receivedCharFromUSB(unsigned char)+0x46>
      }
    }
    // flush remaining input
    usbRxBufCnt = 0;
  }
  else if (usbRxBufCnt >= RX_BUF_SIZE - 1)
    c77a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    c77e:	2bc6      	cmp	r3, #198	; 0xc6
    c780:	dc47      	bgt.n	c812 <UUSB::receivedCharFromUSB(unsigned char)+0xba>
  bool fullMsg = false;
    c782:	2600      	movs	r6, #0
    const char * msg = "** Discarded (missing \\n)\r\n";
    send(msg);
    usbRxBufCnt = 0;
  }
  return fullMsg;
}
    c784:	4630      	mov	r0, r6
    c786:	b051      	add	sp, #324	; 0x144
    c788:	bdf0      	pop	{r4, r5, r6, r7, pc}
      usbRxBufCnt = 0;
    c78a:	2300      	movs	r3, #0
      usbRxBufOverflow = true;
    c78c:	2201      	movs	r2, #1
  if (localEcho) // and not silentUSB)
    c78e:	7f06      	ldrb	r6, [r0, #28]
      usbRxBufOverflow = true;
    c790:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
      usbRxBufCnt = 0;
    c794:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
      usbRxBuf[usbRxBufCnt] = '\0';
    c798:	7783      	strb	r3, [r0, #30]
  if (localEcho) // and not silentUSB)
    c79a:	2e00      	cmp	r6, #0
    c79c:	d0f2      	beq.n	c784 <UUSB::receivedCharFromUSB(unsigned char)+0x2c>
    usb_serial_putchar(n);
    c79e:	4628      	mov	r0, r5
    c7a0:	f00b fb26 	bl	17df0 <usb_serial_putchar>
  if (n == '\n' or n=='\r')
    c7a4:	2d0d      	cmp	r5, #13
    c7a6:	bf18      	it	ne
    c7a8:	2d0a      	cmpne	r5, #10
    c7aa:	bf0c      	ite	eq
    c7ac:	2501      	moveq	r5, #1
    c7ae:	2500      	movne	r5, #0
    c7b0:	d1e3      	bne.n	c77a <UUSB::receivedCharFromUSB(unsigned char)+0x22>
    if (usbRxBufOverflow)
    c7b2:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
    c7b6:	2e00      	cmp	r6, #0
    c7b8:	d138      	bne.n	c82c <UUSB::receivedCharFromUSB(unsigned char)+0xd4>
      if (usbRxBufCnt > 0)
    c7ba:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
    c7be:	2a00      	cmp	r2, #0
    c7c0:	dd1b      	ble.n	c7fa <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
        usbRxBuf[usbRxBufCnt] = '\0';
    c7c2:	18a3      	adds	r3, r4, r2
    c7c4:	779e      	strb	r6, [r3, #30]
        if (usbRxBuf[0] == ';')
    c7c6:	7fa3      	ldrb	r3, [r4, #30]
    c7c8:	2b3b      	cmp	r3, #59	; 0x3b
    c7ca:	d03e      	beq.n	c84a <UUSB::receivedCharFromUSB(unsigned char)+0xf2>
        else if (not allowNoCRC or not use_CRC)
    c7cc:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	f000 809e 	beq.w	c912 <UUSB::receivedCharFromUSB(unsigned char)+0x1ba>
    c7d6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    c7da:	b973      	cbnz	r3, c7fa <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
                     crc, (sum % 99) + 1, sum, sumCnt, usbRxBuf);
    c7dc:	f104 061e 	add.w	r6, r4, #30
          command.parse_and_execute_command(usbRxBuf);
    c7e0:	4631      	mov	r1, r6
    c7e2:	4857      	ldr	r0, [pc, #348]	; (c940 <UUSB::receivedCharFromUSB(unsigned char)+0x1e8>)
    c7e4:	f7f5 fe24 	bl	2430 <UCommand::parse_and_execute_command(char*)>
          usbInMsgCnt++;
    c7e8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
          debugCnt = 0;
    c7ec:	2200      	movs	r2, #0
          fullMsg = true;
    c7ee:	462e      	mov	r6, r5
          usbInMsgCnt++;
    c7f0:	3301      	adds	r3, #1
          debugCnt = 0;
    c7f2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
          usbInMsgCnt++;
    c7f6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
      if (localEcho == 1)
    c7fa:	7f23      	ldrb	r3, [r4, #28]
    c7fc:	b9f3      	cbnz	r3, c83c <UUSB::receivedCharFromUSB(unsigned char)+0xe4>
    usbRxBufCnt = 0;
    c7fe:	2300      	movs	r3, #0
}
    c800:	4630      	mov	r0, r6
    usbRxBufCnt = 0;
    c802:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
}
    c806:	b051      	add	sp, #324	; 0x144
    c808:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (localEcho) // and not silentUSB)
    c80a:	7f03      	ldrb	r3, [r0, #28]
    c80c:	2b00      	cmp	r3, #0
    c80e:	d0c9      	beq.n	c7a4 <UUSB::receivedCharFromUSB(unsigned char)+0x4c>
    c810:	e7c5      	b.n	c79e <UUSB::receivedCharFromUSB(unsigned char)+0x46>
    usbRxBuf[usbRxBufCnt] = 0;
    c812:	2500      	movs	r5, #0
    c814:	4423      	add	r3, r4
    send(msg);
    c816:	494b      	ldr	r1, [pc, #300]	; (c944 <UUSB::receivedCharFromUSB(unsigned char)+0x1ec>)
    c818:	4620      	mov	r0, r4
  bool fullMsg = false;
    c81a:	462e      	mov	r6, r5
    usbRxBuf[usbRxBufCnt] = 0;
    c81c:	779d      	strb	r5, [r3, #30]
    send(msg);
    c81e:	f7ff fe7d 	bl	c51c <UUSB::send(char const*)>
    usbRxBufCnt = 0;
    c822:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
}
    c826:	4630      	mov	r0, r6
    c828:	b051      	add	sp, #324	; 0x144
    c82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      usbRxBufOverflow = false;
    c82c:	2600      	movs	r6, #0
      send("# USB rx-buffer overflow\r\n");
    c82e:	4946      	ldr	r1, [pc, #280]	; (c948 <UUSB::receivedCharFromUSB(unsigned char)+0x1f0>)
    c830:	4620      	mov	r0, r4
      usbRxBufOverflow = false;
    c832:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
      send("# USB rx-buffer overflow\r\n");
    c836:	f7ff fe71 	bl	c51c <UUSB::send(char const*)>
    c83a:	e7e0      	b.n	c7fe <UUSB::receivedCharFromUSB(unsigned char)+0xa6>
        send("\r\n>>");
    c83c:	4943      	ldr	r1, [pc, #268]	; (c94c <UUSB::receivedCharFromUSB(unsigned char)+0x1f4>)
    c83e:	4620      	mov	r0, r4
    c840:	f7ff fe6c 	bl	c51c <UUSB::send(char const*)>
        justSendPrompt = true;
    c844:	2301      	movs	r3, #1
    c846:	7763      	strb	r3, [r4, #29]
    c848:	e7d9      	b.n	c7fe <UUSB::receivedCharFromUSB(unsigned char)+0xa6>
          int crc = int(p1[1] - '0') * 10 + int(p1[2] - '0');
    c84a:	7fe3      	ldrb	r3, [r4, #31]
          for (int i = 3; i < usbRxBufCnt; i++)
    c84c:	2a03      	cmp	r2, #3
          int crc = int(p1[1] - '0') * 10 + int(p1[2] - '0');
    c84e:	f894 1020 	ldrb.w	r1, [r4, #32]
          int sumCnt = 0;
    c852:	4637      	mov	r7, r6
          int crc = int(p1[1] - '0') * 10 + int(p1[2] - '0');
    c854:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    c858:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    c85c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c860:	eb01 0343 	add.w	r3, r1, r3, lsl #1
          for (int i = 3; i < usbRxBufCnt; i++)
    c864:	dd68      	ble.n	c938 <UUSB::receivedCharFromUSB(unsigned char)+0x1e0>
    c866:	f104 061d 	add.w	r6, r4, #29
          int sum = 0;
    c86a:	4638      	mov	r0, r7
    c86c:	4416      	add	r6, r2
    c86e:	f104 0220 	add.w	r2, r4, #32
            if (usbRxBuf[i] >= ' ')
    c872:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c876:	291f      	cmp	r1, #31
    c878:	d901      	bls.n	c87e <UUSB::receivedCharFromUSB(unsigned char)+0x126>
              sum += usbRxBuf[i];
    c87a:	4408      	add	r0, r1
              sumCnt++;
    c87c:	3701      	adds	r7, #1
          for (int i = 3; i < usbRxBufCnt; i++)
    c87e:	42b2      	cmp	r2, r6
    c880:	d1f7      	bne.n	c872 <UUSB::receivedCharFromUSB(unsigned char)+0x11a>
          crcOK = (sum % 99) + 1 == crc;
    c882:	4a33      	ldr	r2, [pc, #204]	; (c950 <UUSB::receivedCharFromUSB(unsigned char)+0x1f8>)
    c884:	fba2 1200 	umull	r1, r2, r2, r0
    c888:	0992      	lsrs	r2, r2, #6
    c88a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c88e:	eb02 1242 	add.w	r2, r2, r2, lsl #5
    c892:	1a81      	subs	r1, r0, r2
    c894:	3101      	adds	r1, #1
          if (crcOK or localEcho)
    c896:	428b      	cmp	r3, r1
    c898:	d017      	beq.n	c8ca <UUSB::receivedCharFromUSB(unsigned char)+0x172>
    c89a:	7f26      	ldrb	r6, [r4, #28]
    c89c:	b9ae      	cbnz	r6, c8ca <UUSB::receivedCharFromUSB(unsigned char)+0x172>
            snprintf(s, MSL, "# CRC failed (crc=%d, found to be %d, sum=%d, %d chars), for '%s'\r\n",
    c89e:	9100      	str	r1, [sp, #0]
    c8a0:	f104 011e 	add.w	r1, r4, #30
    c8a4:	4a2b      	ldr	r2, [pc, #172]	; (c954 <UUSB::receivedCharFromUSB(unsigned char)+0x1fc>)
    c8a6:	9103      	str	r1, [sp, #12]
    c8a8:	f240 111d 	movw	r1, #285	; 0x11d
    c8ac:	e9cd 0701 	strd	r0, r7, [sp, #4]
    c8b0:	a805      	add	r0, sp, #20
    c8b2:	f00e feef 	bl	1b694 <snprintf>
            send(s);
    c8b6:	a905      	add	r1, sp, #20
    c8b8:	4620      	mov	r0, r4
    c8ba:	f7ff fe2f 	bl	c51c <UUSB::send(char const*)>
            usbInErrCnt++;
    c8be:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    c8c2:	3301      	adds	r3, #1
    c8c4:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    c8c8:	e797      	b.n	c7fa <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
            if (confirm)
    c8ca:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
            char * msg = &usbRxBuf[3];
    c8ce:	f104 0621 	add.w	r6, r4, #33	; 0x21
            if (confirm)
    c8d2:	2a21      	cmp	r2, #33	; 0x21
    c8d4:	d184      	bne.n	c7e0 <UUSB::receivedCharFromUSB(unsigned char)+0x88>
            command.parse_and_execute_command(msg);
    c8d6:	f104 0122 	add.w	r1, r4, #34	; 0x22
    c8da:	4819      	ldr	r0, [pc, #100]	; (c940 <UUSB::receivedCharFromUSB(unsigned char)+0x1e8>)
    c8dc:	f7f5 fda8 	bl	2430 <UCommand::parse_and_execute_command(char*)>
            usbInMsgCnt++;
    c8e0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
            debugCnt = 0;
    c8e4:	2700      	movs	r7, #0
              snprintf(s, MSL, "confirm %s\n", &usbRxBuf[3]);
    c8e6:	21fa      	movs	r1, #250	; 0xfa
            usbInMsgCnt++;
    c8e8:	1c5a      	adds	r2, r3, #1
              snprintf(s, MSL, "confirm %s\n", &usbRxBuf[3]);
    c8ea:	a805      	add	r0, sp, #20
    c8ec:	4633      	mov	r3, r6
            debugCnt = 0;
    c8ee:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
            usbInMsgCnt++;
    c8f2:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
            fullMsg = true;
    c8f6:	462e      	mov	r6, r5
              snprintf(s, MSL, "confirm %s\n", &usbRxBuf[3]);
    c8f8:	4a17      	ldr	r2, [pc, #92]	; (c958 <UUSB::receivedCharFromUSB(unsigned char)+0x200>)
    c8fa:	f00e fecb 	bl	1b694 <snprintf>
              s[MSL-1] = '\n';
    c8fe:	230a      	movs	r3, #10
              send(s);
    c900:	a905      	add	r1, sp, #20
    c902:	4620      	mov	r0, r4
              s[MSL] = '\0';
    c904:	f88d 710e 	strb.w	r7, [sp, #270]	; 0x10e
              s[MSL-1] = '\n';
    c908:	f88d 310d 	strb.w	r3, [sp, #269]	; 0x10d
              send(s);
    c90c:	f7ff fe06 	bl	c51c <UUSB::send(char const*)>
    c910:	e773      	b.n	c7fa <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
          if (use_CRC)
    c912:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    c916:	2b00      	cmp	r3, #0
    c918:	f43f af60 	beq.w	c7dc <UUSB::receivedCharFromUSB(unsigned char)+0x84>
            snprintf(s, MSL, "# processing under protest - no CRC '%s'\r\n", usbRxBuf);
    c91c:	f104 061e 	add.w	r6, r4, #30
    c920:	4a0e      	ldr	r2, [pc, #56]	; (c95c <UUSB::receivedCharFromUSB(unsigned char)+0x204>)
    c922:	f44f 7196 	mov.w	r1, #300	; 0x12c
    c926:	a805      	add	r0, sp, #20
    c928:	4633      	mov	r3, r6
    c92a:	f00e feb3 	bl	1b694 <snprintf>
            send(s);
    c92e:	a905      	add	r1, sp, #20
    c930:	4620      	mov	r0, r4
    c932:	f7ff fdf3 	bl	c51c <UUSB::send(char const*)>
    c936:	e753      	b.n	c7e0 <UUSB::receivedCharFromUSB(unsigned char)+0x88>
          for (int i = 3; i < usbRxBufCnt; i++)
    c938:	2101      	movs	r1, #1
          int sum = 0;
    c93a:	4630      	mov	r0, r6
    c93c:	e7ab      	b.n	c896 <UUSB::receivedCharFromUSB(unsigned char)+0x13e>
    c93e:	bf00      	nop
    c940:	2000da18 	.word	0x2000da18
    c944:	20004668 	.word	0x20004668
    c948:	200045c8 	.word	0x200045c8
    c94c:	20004660 	.word	0x20004660
    c950:	a57eb503 	.word	0xa57eb503
    c954:	200045f0 	.word	0x200045f0
    c958:	200045e4 	.word	0x200045e4
    c95c:	20004634 	.word	0x20004634

0000c960 <UUSB::handleIncoming()>:
{
    c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c962:	4607      	mov	r7, r0
  m = usb_serial_available();
    c964:	f00b f9f0 	bl	17d48 <usb_serial_available>
  if (m > 0)
    c968:	1e05      	subs	r5, r0, #0
    c96a:	dd17      	ble.n	c99c <UUSB::handleIncoming()+0x3c>
    for (int i = 0; i < m; i++)
    c96c:	2400      	movs	r4, #0
  bool dataReceived = false;
    c96e:	4626      	mov	r6, r4
    c970:	e001      	b.n	c976 <UUSB::handleIncoming()+0x16>
    for (int i = 0; i < m; i++)
    c972:	42a5      	cmp	r5, r4
    c974:	d010      	beq.n	c998 <UUSB::handleIncoming()+0x38>
      n = usb_serial_getchar();
    c976:	f00b fa2b 	bl	17dd0 <usb_serial_getchar>
      if (n < 0)
    c97a:	2800      	cmp	r0, #0
    for (int i = 0; i < m; i++)
    c97c:	f104 0401 	add.w	r4, r4, #1
      if (n >= '\n' and n < 0x80)
    c980:	f1a0 030a 	sub.w	r3, r0, #10
      if (n < 0)
    c984:	db08      	blt.n	c998 <UUSB::handleIncoming()+0x38>
      if (n >= '\n' and n < 0x80)
    c986:	2b75      	cmp	r3, #117	; 0x75
    c988:	d8f3      	bhi.n	c972 <UUSB::handleIncoming()+0x12>
        dataReceived = receivedCharFromUSB(n) ;
    c98a:	b2c1      	uxtb	r1, r0
    c98c:	4638      	mov	r0, r7
    c98e:	f7ff fee3 	bl	c758 <UUSB::receivedCharFromUSB(unsigned char)>
    for (int i = 0; i < m; i++)
    c992:	42a5      	cmp	r5, r4
        dataReceived = receivedCharFromUSB(n) ;
    c994:	4606      	mov	r6, r0
    for (int i = 0; i < m; i++)
    c996:	d1ee      	bne.n	c976 <UUSB::handleIncoming()+0x16>
}
    c998:	4630      	mov	r0, r6
    c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool dataReceived = false;
    c99c:	2600      	movs	r6, #0
}
    c99e:	4630      	mov	r0, r6
    c9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c9a2:	bf00      	nop

0000c9a4 <UUSB::tick()>:
{ // check for messages
    c9a4:	b570      	push	{r4, r5, r6, lr}
    c9a6:	4604      	mov	r4, r0
  bool done = handleIncoming();
    c9a8:	f7ff ffda 	bl	c960 <UUSB::handleIncoming()>
  if (not done)
    c9ac:	bb58      	cbnz	r0, ca06 <UUSB::tick()+0x62>
    c9ae:	e9d4 1349 	ldrd	r1, r3, [r4, #292]	; 0x124
    c9b2:	1a5b      	subs	r3, r3, r1
    for (int i = 0; i < (int)subscriptions.size(); i++)
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	dd26      	ble.n	ca06 <UUSB::tick()+0x62>
    c9b8:	4605      	mov	r5, r0
          subscribeServiceState = 0;
    c9ba:	4606      	mov	r6, r0
    c9bc:	e016      	b.n	c9ec <UUSB::tick()+0x48>
        subscribeServiceState++;
    c9be:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    c9c2:	e9d4 1249 	ldrd	r1, r2, [r4, #292]	; 0x124
    c9c6:	3301      	adds	r3, #1
    c9c8:	1a52      	subs	r2, r2, r1
    c9ca:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
        if (subscribeServiceState >= (int)subscriptions.size())
    c9ce:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    c9d2:	ea4f 00a2 	mov.w	r0, r2, asr #2
    c9d6:	db06      	blt.n	c9e6 <UUSB::tick()+0x42>
          subServiceLoops++;
    c9d8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
          subscribeServiceState = 0;
    c9dc:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
          subServiceLoops++;
    c9e0:	3301      	adds	r3, #1
    c9e2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    for (int i = 0; i < (int)subscriptions.size(); i++)
    c9e6:	3501      	adds	r5, #1
    c9e8:	4285      	cmp	r5, r0
    c9ea:	da0c      	bge.n	ca06 <UUSB::tick()+0x62>
	return *(this->_M_impl._M_start + __n);
    c9ec:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
      done = subscriptions[subscribeServiceState]->subscribeService();
    c9f0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    c9f4:	f7ff fbda 	bl	c1ac <USubss::subscribeService()>
      if (done)
    c9f8:	2800      	cmp	r0, #0
    c9fa:	d1e0      	bne.n	c9be <UUSB::tick()+0x1a>
        subServicedCnt++;
    c9fc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    ca00:	3301      	adds	r3, #1
    ca02:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    ca06:	4a41      	ldr	r2, [pc, #260]	; (cb0c <UUSB::tick()+0x168>)
  if (millis() > lastSec)
    ca08:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    ca0c:	6812      	ldr	r2, [r2, #0]
    ca0e:	4293      	cmp	r3, r2
    ca10:	d22c      	bcs.n	ca6c <UUSB::tick()+0xc8>
    if (usbInMsgCnt > 0)
    ca12:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
    lastSec += 1000;
    ca16:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    if (usbInMsgCnt > 0)
    ca1a:	2d00      	cmp	r5, #0
    lastSec += 1000;
    ca1c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    if (usbInMsgCnt > 0)
    ca20:	dd25      	ble.n	ca6e <UUSB::tick()+0xca>
      usbSendFailSumLast = usbSendFailSum;
    ca22:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
      if (not usbIsUp)
    ca26:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
      usbSendFailSumLast = usbSendFailSum;
    ca2a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
      if (not usbIsUp)
    ca2e:	b3bb      	cbz	r3, caa0 <UUSB::tick()+0xfc>
      usbIsUp = true;
    ca30:	2301      	movs	r3, #1
    ca32:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
    if (usbInMsgCnt > 0)
    ca36:	2d00      	cmp	r5, #0
    ca38:	dd3b      	ble.n	cab2 <UUSB::tick()+0x10e>
    ca3a:	2000      	movs	r0, #0
    usbSendFailSum += usbSendFail;
    ca3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    usbInMsgCnt = 0;
    ca40:	2300      	movs	r3, #0
    usbSendFailSum += usbSendFail;
    ca42:	440a      	add	r2, r1
    usbInMsgCnt = 0;
    ca44:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
      usbInMsg0CntSecs = 0;
    ca48:	e9c4 503d 	strd	r5, r0, [r4, #244]	; 0xf4
    subServiceLoopsSec = subServiceLoops;
    ca4c:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    usbSendFailSum += usbSendFail;
    ca50:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    usbSendCntSec = usbSendCnt;
    ca54:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    subServiceLoopsSec = subServiceLoops;
    ca58:	e9c4 304d 	strd	r3, r0, [r4, #308]	; 0x134
    subServicedCntSec = subServicedCnt;
    ca5c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    usbSendFail = 0;
    ca60:	e9c4 3140 	strd	r3, r1, [r4, #256]	; 0x100
    subServicedCnt = 0;
    ca64:	e9c4 304f 	strd	r3, r0, [r4, #316]	; 0x13c
    usbSendCnt = 0;
    ca68:	e9c4 3251 	strd	r3, r2, [r4, #324]	; 0x144
}
    ca6c:	bd70      	pop	{r4, r5, r6, pc}
    else if (usbIsUp)
    ca6e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    ca72:	b17b      	cbz	r3, ca94 <UUSB::tick()+0xf0>
      if ((usbSendFailSum - usbSendFailSumLast) > N)
    ca74:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
    ca78:	1ad3      	subs	r3, r2, r3
    ca7a:	2b0a      	cmp	r3, #10
    ca7c:	dc1d      	bgt.n	caba <UUSB::tick()+0x116>
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    ca7e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    ca82:	2b3c      	cmp	r3, #60	; 0x3c
    ca84:	4618      	mov	r0, r3
    ca86:	dd09      	ble.n	ca9c <UUSB::tick()+0xf8>
    ca88:	7f21      	ldrb	r1, [r4, #28]
    ca8a:	b9a1      	cbnz	r1, cab6 <UUSB::tick()+0x112>
        usbIsUp = false;
    ca8c:	2300      	movs	r3, #0
    ca8e:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
    ca92:	e7d0      	b.n	ca36 <UUSB::tick()+0x92>
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    ca94:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
      usbSendFailSumLast = usbSendFailSum;
    ca98:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
      usbInMsg0CntSecs++;
    ca9c:	3001      	adds	r0, #1
    ca9e:	e7cd      	b.n	ca3c <UUSB::tick()+0x98>
        usb.send("# USB is up\n");
    caa0:	491b      	ldr	r1, [pc, #108]	; (cb10 <UUSB::tick()+0x16c>)
    caa2:	481c      	ldr	r0, [pc, #112]	; (cb14 <UUSB::tick()+0x170>)
    caa4:	f7ff fd3a 	bl	c51c <UUSB::send(char const*)>
    if (usbInMsgCnt > 0)
    caa8:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
    usbSendFailSum += usbSendFail;
    caac:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    cab0:	e7be      	b.n	ca30 <UUSB::tick()+0x8c>
    cab2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
      usbInMsg0CntSecs++;
    cab6:	4618      	mov	r0, r3
    cab8:	e7f0      	b.n	ca9c <UUSB::tick()+0xf8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    caba:	e9d4 1349 	ldrd	r1, r3, [r4, #292]	; 0x124
    cabe:	1a5b      	subs	r3, r3, r1
  subscriptions.push_back(newToBeServiced);
}

void UUSB::stopAllSubscriptions()
{
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cac0:	2b00      	cmp	r3, #0
    cac2:	dd1a      	ble.n	cafa <UUSB::tick()+0x156>
    cac4:	2500      	movs	r5, #0
  {
    subscriptions[i]->stopSubscriptions();
    cac6:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    caca:	3501      	adds	r5, #1
    subscriptions[i]->stopSubscriptions();
    cacc:	f7ff fbc6 	bl	c25c <USubss::stopSubscriptions()>
    cad0:	e9d4 1349 	ldrd	r1, r3, [r4, #292]	; 0x124
    cad4:	1a5b      	subs	r3, r3, r1
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cad6:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
    cada:	dbf4      	blt.n	cac6 <UUSB::tick()+0x122>
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cadc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
        usbIsUp = false;
    cae0:	2100      	movs	r1, #0
    if (usbInMsgCnt > 0)
    cae2:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cae6:	2b3c      	cmp	r3, #60	; 0x3c
    usbSendFailSum += usbSendFail;
    cae8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        usbIsUp = false;
    caec:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    caf0:	dda1      	ble.n	ca36 <UUSB::tick()+0x92>
    caf2:	7f23      	ldrb	r3, [r4, #28]
    caf4:	2b00      	cmp	r3, #0
    caf6:	d19e      	bne.n	ca36 <UUSB::tick()+0x92>
    caf8:	e7c8      	b.n	ca8c <UUSB::tick()+0xe8>
    cafa:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
        usbIsUp = false;
    cafe:	2100      	movs	r1, #0
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cb00:	2b3c      	cmp	r3, #60	; 0x3c
        usbIsUp = false;
    cb02:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cb06:	dcbf      	bgt.n	ca88 <UUSB::tick()+0xe4>
      usbInMsg0CntSecs++;
    cb08:	4618      	mov	r0, r3
    cb0a:	e7c7      	b.n	ca9c <UUSB::tick()+0xf8>
    cb0c:	2000eaac 	.word	0x2000eaac
    cb10:	200046b8 	.word	0x200046b8
    cb14:	2000eab8 	.word	0x2000eab8

0000cb18 <UUSB::stopAllSubscriptions()>:
{
    cb18:	b538      	push	{r3, r4, r5, lr}
    cb1a:	e9d0 2349 	ldrd	r2, r3, [r0, #292]	; 0x124
    cb1e:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb20:	2b00      	cmp	r3, #0
    cb22:	dd0c      	ble.n	cb3e <UUSB::stopAllSubscriptions()+0x26>
    cb24:	4605      	mov	r5, r0
    cb26:	2400      	movs	r4, #0
    subscriptions[i]->stopSubscriptions();
    cb28:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb2c:	3401      	adds	r4, #1
    subscriptions[i]->stopSubscriptions();
    cb2e:	f7ff fb95 	bl	c25c <USubss::stopSubscriptions()>
    cb32:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    cb36:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb38:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    cb3c:	dbf4      	blt.n	cb28 <UUSB::stopAllSubscriptions()+0x10>
  }
}
    cb3e:	bd38      	pop	{r3, r4, r5, pc}

0000cb40 <UUSB::sendAllHelp()>:

void UUSB::sendAllHelp()
{
    cb40:	b538      	push	{r3, r4, r5, lr}
    cb42:	e9d0 2349 	ldrd	r2, r3, [r0, #292]	; 0x124
    cb46:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb48:	2b00      	cmp	r3, #0
    cb4a:	dd13      	ble.n	cb74 <UUSB::sendAllHelp()+0x34>
    cb4c:	4605      	mov	r5, r0
    cb4e:	2400      	movs	r4, #0
  {
    subscriptions[i]->sendHelp();
    cb50:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    cb54:	6803      	ldr	r3, [r0, #0]
    cb56:	685b      	ldr	r3, [r3, #4]
    cb58:	4798      	blx	r3
    subscriptions[i]->subscribeSendHelp();
    cb5a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    cb5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb62:	3401      	adds	r4, #1
    subscriptions[i]->subscribeSendHelp();
    cb64:	f7ff fb8e 	bl	c284 <USubss::subscribeSendHelp()>
    cb68:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    cb6c:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb6e:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    cb72:	dbed      	blt.n	cb50 <UUSB::sendAllHelp()+0x10>
  }
}
    cb74:	bd38      	pop	{r3, r4, r5, pc}
    cb76:	bf00      	nop

0000cb78 <UUSB::decodeAll(char const*)>:

bool UUSB::decodeAll(const char* buf)
{
    cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb7a:	e9d0 2349 	ldrd	r2, r3, [r0, #292]	; 0x124
    cb7e:	1a9b      	subs	r3, r3, r2
  bool used = false;
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb80:	2b00      	cmp	r3, #0
    cb82:	dd22      	ble.n	cbca <UUSB::decodeAll(char const*)+0x52>
    cb84:	4606      	mov	r6, r0
    cb86:	460f      	mov	r7, r1
    cb88:	2400      	movs	r4, #0
    cb8a:	e00d      	b.n	cba8 <UUSB::decodeAll(char const*)+0x30>
      if (i == ctrlVel1)
        subscriptions[ctrlVel2]->decode(buf);
      // non-subscribe command found, stop here
      break;
    }
    used = subscriptions[i]->subscribeDecode(buf);
    cb8c:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
    cb90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cb94:	3401      	adds	r4, #1
    used = subscriptions[i]->subscribeDecode(buf);
    cb96:	f7ff fad9 	bl	c14c <USubss::subscribeDecode(char const*)>
    if (used)
    cb9a:	b998      	cbnz	r0, cbc4 <UUSB::decodeAll(char const*)+0x4c>
    cb9c:	e9d6 2349 	ldrd	r2, r3, [r6, #292]	; 0x124
    cba0:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cba2:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    cba6:	da10      	bge.n	cbca <UUSB::decodeAll(char const*)+0x52>
    used = subscriptions[i]->decode(buf);
    cba8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    cbac:	4639      	mov	r1, r7
    cbae:	6803      	ldr	r3, [r0, #0]
    cbb0:	689b      	ldr	r3, [r3, #8]
    cbb2:	4798      	blx	r3
    used = subscriptions[i]->subscribeDecode(buf);
    cbb4:	4639      	mov	r1, r7
    if (used)
    cbb6:	4605      	mov	r5, r0
    cbb8:	2800      	cmp	r0, #0
    cbba:	d0e7      	beq.n	cb8c <UUSB::decodeAll(char const*)+0x14>
      if (i == ctrlVel1)
    cbbc:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
    cbc0:	42a3      	cmp	r3, r4
    cbc2:	d005      	beq.n	cbd0 <UUSB::decodeAll(char const*)+0x58>
    used = subscriptions[i]->decode(buf);
    cbc4:	2501      	movs	r5, #1
      // debug end
      break;
    }
  }
  return used;
}
    cbc6:	4628      	mov	r0, r5
    cbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    used = subscriptions[i]->decode(buf);
    cbca:	2500      	movs	r5, #0
}
    cbcc:	4628      	mov	r0, r5
    cbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        subscriptions[ctrlVel2]->decode(buf);
    cbd0:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
	return *(this->_M_impl._M_start + __n);
    cbd4:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
    cbd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    cbdc:	6803      	ldr	r3, [r0, #0]
    cbde:	689b      	ldr	r3, [r3, #8]
    cbe0:	4798      	blx	r3
}
    cbe2:	4628      	mov	r0, r5
    cbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cbe6:	bf00      	nop

0000cbe8 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)>:
      vector<_Tp, _Alloc>::
    cbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbec:	e9d0 8900 	ldrd	r8, r9, [r0]
    cbf0:	460f      	mov	r7, r1
    cbf2:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
    cbf4:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cbf8:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
    cbfc:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    cc00:	d054      	beq.n	ccac <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xc4>
    cc02:	1093      	asrs	r3, r2, #2
    cc04:	4606      	mov	r6, r0
    cc06:	eba7 0508 	sub.w	r5, r7, r8
    cc0a:	2b01      	cmp	r3, #1
    cc0c:	461a      	mov	r2, r3
    cc0e:	bf38      	it	cc
    cc10:	2201      	movcc	r2, #1
    cc12:	189c      	adds	r4, r3, r2
    cc14:	d248      	bcs.n	cca8 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cc16:	2c00      	cmp	r4, #0
    cc18:	d13c      	bne.n	cc94 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xac>
    cc1a:	46a3      	mov	fp, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    cc1c:	f8da 3000 	ldr.w	r3, [sl]
      if (__count > 0)
    cc20:	2d00      	cmp	r5, #0
    cc22:	f84b 3005 	str.w	r3, [fp, r5]
    cc26:	dc24      	bgt.n	cc72 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x8a>
      ptrdiff_t __count = __last - __first;
    cc28:	eba9 0907 	sub.w	r9, r9, r7
	      ++__new_finish;
    cc2c:	3504      	adds	r5, #4
      if (__count > 0)
    cc2e:	f1b9 0f00 	cmp.w	r9, #0
    cc32:	445d      	add	r5, fp
    cc34:	dc13      	bgt.n	cc5e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x76>
      return __result + __count;
    cc36:	444d      	add	r5, r9
	if (__p)
    cc38:	f1b8 0f00 	cmp.w	r8, #0
    cc3c:	d104      	bne.n	cc48 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x60>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cc3e:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    cc40:	e9c6 b500 	strd	fp, r5, [r6]
    }
    cc44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
    cc48:	68b1      	ldr	r1, [r6, #8]
    cc4a:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    cc4e:	4640      	mov	r0, r8
    cc50:	f009 fd34 	bl	166bc <operator delete(void*, unsigned int)>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cc54:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    cc56:	e9c6 b500 	strd	fp, r5, [r6]
    }
    cc5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    cc5e:	4628      	mov	r0, r5
    cc60:	4639      	mov	r1, r7
    cc62:	464a      	mov	r2, r9
      return __result + __count;
    cc64:	444d      	add	r5, r9
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    cc66:	f009 fc8d 	bl	16584 <memcpy>
    cc6a:	f1b8 0f00 	cmp.w	r8, #0
    cc6e:	d0e6      	beq.n	cc3e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x56>
    cc70:	e7ea      	b.n	cc48 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x60>
      ptrdiff_t __count = __last - __first;
    cc72:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    cc76:	462a      	mov	r2, r5
    cc78:	4641      	mov	r1, r8
    cc7a:	4658      	mov	r0, fp
	      ++__new_finish;
    cc7c:	3504      	adds	r5, #4
    cc7e:	f00e fe5f 	bl	1b940 <memmove>
      if (__count > 0)
    cc82:	f1b9 0f00 	cmp.w	r9, #0
    cc86:	445d      	add	r5, fp
    cc88:	dce9      	bgt.n	cc5e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
    cc8a:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
    cc8c:	444d      	add	r5, r9
    cc8e:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    cc92:	e7dc      	b.n	cc4e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x66>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    cc94:	428c      	cmp	r4, r1
    cc96:	bf28      	it	cs
    cc98:	460c      	movcs	r4, r1
    cc9a:	00a4      	lsls	r4, r4, #2
    cc9c:	4620      	mov	r0, r4
    cc9e:	f009 fd0b 	bl	166b8 <operator new(unsigned int)>
    cca2:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cca4:	4404      	add	r4, r0
    cca6:	e7b9      	b.n	cc1c <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x34>
    cca8:	4c02      	ldr	r4, [pc, #8]	; (ccb4 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xcc>)
    ccaa:	e7f7      	b.n	cc9c <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xb4>
	  __throw_length_error(__N(__s));
    ccac:	4802      	ldr	r0, [pc, #8]	; (ccb8 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xd0>)
    ccae:	f7ff f9a3 	bl	bff8 <USubs::USubs(char const*, char const*)>
    ccb2:	bf00      	nop
    ccb4:	7ffffffc 	.word	0x7ffffffc
    ccb8:	20007d5c 	.word	0x20007d5c

0000ccbc <UUSB::setup()>:
{ // init USB connection (parameter is not used - always 12MB/s)
    ccbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    ccc0:	4d23      	ldr	r5, [pc, #140]	; (cd50 <UUSB::setup()+0x94>)
    ccc2:	b082      	sub	sp, #8
    ccc4:	4c23      	ldr	r4, [pc, #140]	; (cd54 <UUSB::setup()+0x98>)
    ccc6:	4607      	mov	r7, r0
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    ccc8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; cd6c <UUSB::setup()+0xb0>
				if (elapsed > 750) break;
    cccc:	f240 29ee 	movw	r9, #750	; 0x2ee
		uint32_t millis_begin = systick_millis_count;
    ccd0:	682e      	ldr	r6, [r5, #0]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    ccd2:	f8df a09c 	ldr.w	sl, [pc, #156]	; cd70 <UUSB::setup()+0xb4>
		yield();
    ccd6:	f00b f91f 	bl	17f18 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    ccda:	7823      	ldrb	r3, [r4, #0]
    ccdc:	b31b      	cbz	r3, cd26 <UUSB::setup()+0x6a>
    ccde:	f898 3000 	ldrb.w	r3, [r8]
    cce2:	07db      	lsls	r3, r3, #31
    cce4:	d51f      	bpl.n	cd26 <UUSB::setup()+0x6a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    cce6:	682b      	ldr	r3, [r5, #0]
    cce8:	f8da 2000 	ldr.w	r2, [sl]
    ccec:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    ccee:	2b0e      	cmp	r3, #14
    ccf0:	d919      	bls.n	cd26 <UUSB::setup()+0x6a>
  send("# welcome - ready in a moment\r\n");
    ccf2:	4919      	ldr	r1, [pc, #100]	; (cd58 <UUSB::setup()+0x9c>)
    ccf4:	4638      	mov	r0, r7
    ccf6:	f7ff fc11 	bl	c51c <UUSB::send(char const*)>
  addPublistItem("usb", "Get status for USB connection 'usb time inCnt inErr serviced/sec serviceLoopCnt/sec sendFail/sec'");
    ccfa:	4a18      	ldr	r2, [pc, #96]	; (cd5c <UUSB::setup()+0xa0>)
    ccfc:	4918      	ldr	r1, [pc, #96]	; (cd60 <UUSB::setup()+0xa4>)
    ccfe:	4638      	mov	r0, r7
    cd00:	f7ff fb3e 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ssv", "Get subscription status (as info with key and interval time)");
    cd04:	4917      	ldr	r1, [pc, #92]	; (cd64 <UUSB::setup()+0xa8>)
    cd06:	4a18      	ldr	r2, [pc, #96]	; (cd68 <UUSB::setup()+0xac>)
    cd08:	4638      	mov	r0, r7
    cd0a:	f7ff fb39 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addSubscriptionService(this);
    cd0e:	9701      	str	r7, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    cd10:	e9d7 134a 	ldrd	r1, r3, [r7, #296]	; 0x128
    cd14:	4299      	cmp	r1, r3
    cd16:	d013      	beq.n	cd40 <UUSB::setup()+0x84>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    cd18:	f841 7b04 	str.w	r7, [r1], #4
	    ++this->_M_impl._M_finish;
    cd1c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
}
    cd20:	b002      	add	sp, #8
    cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    cd26:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    cd28:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    cd2a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    cd2c:	b12a      	cbz	r2, cd3a <UUSB::setup()+0x7e>
				if (elapsed > 2000) break;
    cd2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    cd32:	d8de      	bhi.n	ccf2 <UUSB::setup()+0x36>
			yield();
    cd34:	f00b f8f0 	bl	17f18 <yield>
    cd38:	e7cd      	b.n	ccd6 <UUSB::setup()+0x1a>
				if (elapsed > 750) break;
    cd3a:	454b      	cmp	r3, r9
    cd3c:	d9fa      	bls.n	cd34 <UUSB::setup()+0x78>
    cd3e:	e7d8      	b.n	ccf2 <UUSB::setup()+0x36>
	  _M_realloc_insert(end(), __x);
    cd40:	aa01      	add	r2, sp, #4
    cd42:	f507 7092 	add.w	r0, r7, #292	; 0x124
    cd46:	f7ff ff4f 	bl	cbe8 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)>
    cd4a:	b002      	add	sp, #8
    cd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd50:	2000eaac 	.word	0x2000eaac
    cd54:	2000ec39 	.word	0x2000ec39
    cd58:	200046c8 	.word	0x200046c8
    cd5c:	200046e8 	.word	0x200046e8
    cd60:	2000474c 	.word	0x2000474c
    cd64:	20004790 	.word	0x20004790
    cd68:	20004750 	.word	0x20004750
    cd6c:	2000ec38 	.word	0x2000ec38
    cd70:	2000ec10 	.word	0x2000ec10

0000cd74 <UUSB::addSubscriptionService(USubss*)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    cd74:	e9d0 324a 	ldrd	r3, r2, [r0, #296]	; 0x128
{
    cd78:	b500      	push	{lr}
    cd7a:	4293      	cmp	r3, r2
    cd7c:	b083      	sub	sp, #12
    cd7e:	9101      	str	r1, [sp, #4]
    cd80:	d006      	beq.n	cd90 <UUSB::addSubscriptionService(USubss*)+0x1c>
    cd82:	f843 1b04 	str.w	r1, [r3], #4
	    ++this->_M_impl._M_finish;
    cd86:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
}
    cd8a:	b003      	add	sp, #12
    cd8c:	f85d fb04 	ldr.w	pc, [sp], #4
	  _M_realloc_insert(end(), __x);
    cd90:	aa01      	add	r2, sp, #4
    cd92:	4619      	mov	r1, r3
    cd94:	f500 7092 	add.w	r0, r0, #292	; 0x124
    cd98:	f7ff ff26 	bl	cbe8 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)>
    cd9c:	b003      	add	sp, #12
    cd9e:	f85d fb04 	ldr.w	pc, [sp], #4
    cda2:	bf00      	nop

0000cda4 <_GLOBAL__sub_I_usb>:
}
    cda4:	b510      	push	{r4, lr}
    cda6:	4c19      	ldr	r4, [pc, #100]	; (ce0c <_GLOBAL__sub_I_usb+0x68>)
    cda8:	4620      	mov	r0, r4
    cdaa:	f7ff f9c5 	bl	c138 <USubss::USubss()>
    cdae:	2300      	movs	r3, #0
    cdb0:	4917      	ldr	r1, [pc, #92]	; (ce10 <_GLOBAL__sub_I_usb+0x6c>)
    cdb2:	2201      	movs	r2, #1
    cdb4:	f44f 7080 	mov.w	r0, #256	; 0x100
    cdb8:	61a3      	str	r3, [r4, #24]
    cdba:	6021      	str	r1, [r4, #0]
    cdbc:	7522      	strb	r2, [r4, #20]
    cdbe:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
UUSB usb;
    cdc2:	4620      	mov	r0, r4
    cdc4:	83a3      	strh	r3, [r4, #28]
    cdc6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    cdca:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    cdce:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
    cdd2:	4a10      	ldr	r2, [pc, #64]	; (ce14 <_GLOBAL__sub_I_usb+0x70>)
    cdd4:	4910      	ldr	r1, [pc, #64]	; (ce18 <_GLOBAL__sub_I_usb+0x74>)
    cdd6:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
    cdda:	e9c4 333e 	strd	r3, r3, [r4, #248]	; 0xf8
    cdde:	e9c4 3340 	strd	r3, r3, [r4, #256]	; 0x100
    cde2:	e9c4 3342 	strd	r3, r3, [r4, #264]	; 0x108
    cde6:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
    cdea:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	: _M_start(), _M_finish(), _M_end_of_storage()
    cdee:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
    cdf2:	e9c4 334b 	strd	r3, r3, [r4, #300]	; 0x12c
    cdf6:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
    cdfa:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
    cdfe:	e9c4 3351 	strd	r3, r3, [r4, #324]	; 0x144
}
    ce02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UUSB usb;
    ce06:	f00c b877 	b.w	18ef8 <__aeabi_atexit>
    ce0a:	bf00      	nop
    ce0c:	2000eab8 	.word	0x2000eab8
    ce10:	20007f98 	.word	0x20007f98
    ce14:	20008f08 	.word	0x20008f08
    ce18:	0000c3bd 	.word	0x0000c3bd

0000ce1c <UUsbHost::sendHelp()>:
  }
}


void UUsbHost::sendHelp()
{
    ce1c:	b510      	push	{r4, lr}
#if defined REGBOT_HW41 && defined useUSBhost
  usb.send("# USB host -------\r\n");
    ce1e:	4c09      	ldr	r4, [pc, #36]	; (ce44 <UUsbHost::sendHelp()+0x28>)
    ce20:	4909      	ldr	r1, [pc, #36]	; (ce48 <UUsbHost::sendHelp()+0x2c>)
    ce22:	4620      	mov	r0, r4
    ce24:	f7ff fb7a 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tusbhost A \tSet USB host as active or not A=1 is active\r\n");
    ce28:	4908      	ldr	r1, [pc, #32]	; (ce4c <UUsbHost::sendHelp()+0x30>)
    ce2a:	4620      	mov	r0, r4
    ce2c:	f7ff fb76 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tjoyn A \tNotify on updates\r\n");
    ce30:	4907      	ldr	r1, [pc, #28]	; (ce50 <UUsbHost::sendHelp()+0x34>)
    ce32:	4620      	mov	r0, r4
    ce34:	f7ff fb72 	bl	c51c <UUSB::send(char const*)>
  usb.send("# -- \tjoyc A \tChanges only\r\n");
    ce38:	4620      	mov	r0, r4
    ce3a:	4906      	ldr	r1, [pc, #24]	; (ce54 <UUsbHost::sendHelp()+0x38>)
#endif
}
    ce3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tjoyc A \tChanges only\r\n");
    ce40:	f7ff bb6c 	b.w	c51c <UUSB::send(char const*)>
    ce44:	2000eab8 	.word	0x2000eab8
    ce48:	20007c80 	.word	0x20007c80
    ce4c:	20007c98 	.word	0x20007c98
    ce50:	20007cd8 	.word	0x20007cd8
    ce54:	20007cfc 	.word	0x20007cfc

0000ce58 <UUsbHost::~UUsbHost()>:
#endif
#include "usubss.h"



class UUsbHost : public USubss
    ce58:	b510      	push	{r4, lr}
    ce5a:	4b05      	ldr	r3, [pc, #20]	; (ce70 <UUsbHost::~UUsbHost()+0x18>)
    ce5c:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    ce5e:	6840      	ldr	r0, [r0, #4]
    ce60:	6023      	str	r3, [r4, #0]
	if (__p)
    ce62:	b118      	cbz	r0, ce6c <UUsbHost::~UUsbHost()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    ce64:	68e1      	ldr	r1, [r4, #12]
	::operator delete(__p
    ce66:	1a09      	subs	r1, r1, r0
    ce68:	f009 fc28 	bl	166bc <operator delete(void*, unsigned int)>
    ce6c:	4620      	mov	r0, r4
    ce6e:	bd10      	pop	{r4, pc}
    ce70:	2000802c 	.word	0x2000802c
    ce74:	00000000 	.word	0x00000000

0000ce78 <UUsbHost::UUsbHost()>:
    ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce7c:	4681      	mov	r9, r0
    ce7e:	2600      	movs	r6, #0

//--------------------------------------------------------------------------

class JoystickController : public USBDriver, public USBHIDInput, public BTHIDInput {
public:
    JoystickController(USBHost &host) { init(); }
    ce80:	4ded      	ldr	r5, [pc, #948]	; (d238 <UUsbHost::UUsbHost()+0x3c0>)
    ce82:	f44f 7880 	mov.w	r8, #256	; 0x100
    ce86:	f04f 0401 	mov.w	r4, #1
    ce8a:	f509 6b32 	add.w	fp, r9, #2848	; 0xb20
    ce8e:	f509 5ad7 	add.w	sl, r9, #6880	; 0x1ae0
    ce92:	f509 57ad 	add.w	r7, r9, #5536	; 0x15a0
    ce96:	ed2d 8b04 	vpush	{d8-d9}
    ce9a:	b085      	sub	sp, #20
    ce9c:	f7ff f94c 	bl	c138 <USubss::USubss()>
    cea0:	f109 0320 	add.w	r3, r9, #32
    cea4:	49e5      	ldr	r1, [pc, #916]	; (d23c <UUsbHost::UUsbHost()+0x3c4>)
    USBHub(USBHost &host) : debouncetimer(this), resettimer(this) { init(); }
    cea6:	4ae6      	ldr	r2, [pc, #920]	; (d240 <UUsbHost::UUsbHost()+0x3c8>)
    cea8:	4618      	mov	r0, r3
    ceaa:	f8c9 1000 	str.w	r1, [r9]
    ceae:	f8c9 2020 	str.w	r2, [r9, #32]
    USBDriverTimer(USBDriver *d) : driver(d) { }
    ceb2:	f8c9 3344 	str.w	r3, [r9, #836]	; 0x344
    ceb6:	f8c9 3360 	str.w	r3, [r9, #864]	; 0x360
    ceba:	f889 6014 	strb.w	r6, [r9, #20]
    USBDriver() : next(NULL), device(NULL) {}
    cebe:	f8c9 6024 	str.w	r6, [r9, #36]	; 0x24
    cec2:	f8c9 6028 	str.w	r6, [r9, #40]	; 0x28
    USBDriverTimer(USBDriver *d) : driver(d) { }
    cec6:	9303      	str	r3, [sp, #12]
    USBHub(USBHost &host) : debouncetimer(this), resettimer(this) { init(); }
    cec8:	f005 f954 	bl	12174 <USBHub::init()>
    USBHIDParser(USBHost &host) : hidTimer(this) { init(); }
    cecc:	4add      	ldr	r2, [pc, #884]	; (d244 <UUsbHost::UUsbHost()+0x3cc>)
    cece:	f509 7378 	add.w	r3, r9, #992	; 0x3e0
    ced2:	f8c9 6738 	str.w	r6, [r9, #1848]	; 0x738
    ced6:	f8c9 23e0 	str.w	r2, [r9, #992]	; 0x3e0
    ceda:	f44f 7240 	mov.w	r2, #768	; 0x300
    cede:	4618      	mov	r0, r3
    USBDriverTimer(USBDriver *d) : driver(d) { }
    cee0:	f8c9 3768 	str.w	r3, [r9, #1896]	; 0x768
    USBHIDParser(USBHost &host) : hidTimer(this) { init(); }
    cee4:	f8a9 2758 	strh.w	r2, [r9, #1880]	; 0x758
    cee8:	f609 3218 	addw	r2, r9, #2840	; 0xb18
    ceec:	f8c9 673c 	str.w	r6, [r9, #1852]	; 0x73c
    cef0:	f8c9 2b18 	str.w	r2, [r9, #2840]	; 0xb18
    cef4:	f44f 7268 	mov.w	r2, #928	; 0x3a0
    cef8:	f8c9 6740 	str.w	r6, [r9, #1856]	; 0x740
    cefc:	f8a9 2b1c 	strh.w	r2, [r9, #2844]	; 0xb1c
    cf00:	f8c9 6744 	str.w	r6, [r9, #1860]	; 0x744
    cf04:	f8c9 6748 	str.w	r6, [r9, #1864]	; 0x748
    cf08:	f8c9 674c 	str.w	r6, [r9, #1868]	; 0x74c
    cf0c:	f8c9 6750 	str.w	r6, [r9, #1872]	; 0x750
    cf10:	f8c9 6754 	str.w	r6, [r9, #1876]	; 0x754
    cf14:	f889 675a 	strb.w	r6, [r9, #1882]	; 0x75a
    cf18:	f889 6b1e 	strb.w	r6, [r9, #2846]	; 0xb1e
    cf1c:	9301      	str	r3, [sp, #4]
    USBDriver() : next(NULL), device(NULL) {}
    cf1e:	e9c9 66f9 	strd	r6, r6, [r9, #996]	; 0x3e4
    USBHIDParser(USBHost &host) : hidTimer(this) { init(); }
    cf22:	f004 fad7 	bl	114d4 <USBHIDParser::init()>
    JoystickController(USBHost &host) { init(); }
    cf26:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    cf2a:	f105 0298 	add.w	r2, r5, #152	; 0x98
    cf2e:	f240 1101 	movw	r1, #257	; 0x101
    cf32:	f8c9 3b2c 	str.w	r3, [r9, #2860]	; 0xb2c
    cf36:	f609 3068 	addw	r0, r9, #2920	; 0xb68
    cf3a:	f8c9 5b20 	str.w	r5, [r9, #2848]	; 0xb20
    cf3e:	f8c9 2b38 	str.w	r2, [r9, #2872]	; 0xb38
    cf42:	4642      	mov	r2, r8
    cf44:	f8a9 1b58 	strh.w	r1, [r9, #2904]	; 0xb58
    cf48:	4631      	mov	r1, r6
    cf4a:	f889 4b5a 	strb.w	r4, [r9, #2906]	; 0xb5a
    USBDriver() : next(NULL), device(NULL) {}
    cf4e:	f509 5480 	add.w	r4, r9, #4096	; 0x1000
    cf52:	f8c9 6b24 	str.w	r6, [r9, #2852]	; 0xb24
    cf56:	f8c9 6b28 	str.w	r6, [r9, #2856]	; 0xb28
class USBHIDInput {
    cf5a:	f8c9 6b30 	str.w	r6, [r9, #2864]	; 0xb30
    cf5e:	f8c9 6b34 	str.w	r6, [r9, #2868]	; 0xb34
class BTHIDInput {
    cf62:	f8c9 6b3c 	str.w	r6, [r9, #2876]	; 0xb3c
    cf66:	f889 6b40 	strb.w	r6, [r9, #2880]	; 0xb40
    cf6a:	f8c9 6b44 	str.w	r6, [r9, #2884]	; 0xb44
    cf6e:	f8c9 6b48 	str.w	r6, [r9, #2888]	; 0xb48
    JoystickController(USBHost &host) { init(); }
    cf72:	f889 6b4c 	strb.w	r6, [r9, #2892]	; 0xb4c
    cf76:	f8c9 6b50 	str.w	r6, [r9, #2896]	; 0xb50
    cf7a:	f8c9 6b54 	str.w	r6, [r9, #2900]	; 0xb54
    cf7e:	f8c9 6b5c 	str.w	r6, [r9, #2908]	; 0xb5c
    cf82:	f8a9 6b60 	strh.w	r6, [r9, #2912]	; 0xb60
    cf86:	f889 6b62 	strb.w	r6, [r9, #2914]	; 0xb62
    cf8a:	f8c9 6b64 	str.w	r6, [r9, #2916]	; 0xb64
    cf8e:	f00e fd53 	bl	1ba38 <memset>
    cf92:	f509 5183 	add.w	r1, r9, #4192	; 0x1060
    cf96:	f8cd a008 	str.w	sl, [sp, #8]
    cf9a:	f509 5a00 	add.w	sl, r9, #8192	; 0x2000
    cf9e:	9100      	str	r1, [sp, #0]
    cfa0:	ed9f 8ba1 	vldr	d8, [pc, #644]	; d228 <UUsbHost::UUsbHost()+0x3b0>
    cfa4:	ed9f 9ba2 	vldr	d9, [pc, #648]	; d230 <UUsbHost::UUsbHost()+0x3b8>
    cfa8:	ed8b 8b52 	vstr	d8, [fp, #328]	; 0x148
    cfac:	ed8b 8b54 	vstr	d8, [fp, #336]	; 0x150
    cfb0:	ed8b 9b56 	vstr	d9, [fp, #344]	; 0x158
    cfb4:	f8c9 6c80 	str.w	r6, [r9, #3200]	; 0xc80
    cfb8:	f8c9 6c84 	str.w	r6, [r9, #3204]	; 0xc84
    cfbc:	f8c9 6c88 	str.w	r6, [r9, #3208]	; 0xc88
    cfc0:	f8c9 6c8c 	str.w	r6, [r9, #3212]	; 0xc8c
class elapsedMicros
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
    cfc4:	f008 ff60 	bl	15e88 <micros>
    cfc8:	f889 6c94 	strb.w	r6, [r9, #3220]	; 0xc94
    cfcc:	f8c9 0c90 	str.w	r0, [r9, #3216]	; 0xc90
    cfd0:	4658      	mov	r0, fp
    cfd2:	f889 6fb5 	strb.w	r6, [r9, #4021]	; 0xfb5
    cfd6:	f8a9 6fb6 	strh.w	r6, [r9, #4022]	; 0xfb6
    cfda:	f8a9 6fb8 	strh.w	r6, [r9, #4024]	; 0xfb8
    cfde:	f005 ff7b 	bl	12ed8 <JoystickController::init()>
    cfe2:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    cfe6:	f240 1c01 	movw	ip, #257	; 0x101
    cfea:	f04f 0e01 	mov.w	lr, #1
    cfee:	f105 0298 	add.w	r2, r5, #152	; 0x98
    cff2:	4631      	mov	r1, r6
    cff4:	66e3      	str	r3, [r4, #108]	; 0x6c
    cff6:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    cffa:	f8a4 c098 	strh.w	ip, [r4, #152]	; 0x98
    cffe:	f884 e09a 	strb.w	lr, [r4, #154]	; 0x9a
class BTHIDInput {
    d002:	67e6      	str	r6, [r4, #124]	; 0x7c
    d004:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    JoystickController(USBHost &host) { init(); }
    d008:	6625      	str	r5, [r4, #96]	; 0x60
    d00a:	67a2      	str	r2, [r4, #120]	; 0x78
    d00c:	4642      	mov	r2, r8
    d00e:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
    d012:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
    d016:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0
    d01a:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    d01e:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    USBDriver() : next(NULL), device(NULL) {}
    d022:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
class USBHIDInput {
    d026:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
class BTHIDInput {
    d02a:	e9c4 6621 	strd	r6, r6, [r4, #132]	; 0x84
    JoystickController(USBHost &host) { init(); }
    d02e:	e9c4 6624 	strd	r6, r6, [r4, #144]	; 0x90
    d032:	f00e fd01 	bl	1ba38 <memset>
    d036:	ed84 8b6a 	vstr	d8, [r4, #424]	; 0x1a8
    d03a:	ed84 8b6c 	vstr	d8, [r4, #432]	; 0x1b0
    d03e:	ed84 9b6e 	vstr	d9, [r4, #440]	; 0x1b8
    d042:	e9c4 6670 	strd	r6, r6, [r4, #448]	; 0x1c0
    d046:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
    d04a:	f008 ff1d 	bl	15e88 <micros>
    d04e:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
    d052:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
    d056:	f884 64f5 	strb.w	r6, [r4, #1269]	; 0x4f5
    d05a:	9800      	ldr	r0, [sp, #0]
    d05c:	f8a4 64f6 	strh.w	r6, [r4, #1270]	; 0x4f6
    d060:	f8a4 64f8 	strh.w	r6, [r4, #1272]	; 0x4f8
    d064:	f005 ff38 	bl	12ed8 <JoystickController::init()>
    d068:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    d06c:	f240 1c01 	movw	ip, #257	; 0x101
    d070:	f04f 0e01 	mov.w	lr, #1
    d074:	f105 0298 	add.w	r2, r5, #152	; 0x98
    d078:	4631      	mov	r1, r6
    d07a:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
    d07e:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
    d082:	f8a4 c5d8 	strh.w	ip, [r4, #1496]	; 0x5d8
    d086:	f884 e5da 	strb.w	lr, [r4, #1498]	; 0x5da
    USBDriver() : next(NULL), device(NULL) {}
    d08a:	f8c4 65a4 	str.w	r6, [r4, #1444]	; 0x5a4
    d08e:	f8c4 65a8 	str.w	r6, [r4, #1448]	; 0x5a8
class USBHIDInput {
    d092:	f8c4 65b0 	str.w	r6, [r4, #1456]	; 0x5b0
    d096:	f8c4 65b4 	str.w	r6, [r4, #1460]	; 0x5b4
class BTHIDInput {
    d09a:	f8c4 65bc 	str.w	r6, [r4, #1468]	; 0x5bc
    d09e:	f884 65c0 	strb.w	r6, [r4, #1472]	; 0x5c0
    d0a2:	f8c4 65c4 	str.w	r6, [r4, #1476]	; 0x5c4
    d0a6:	f8c4 65c8 	str.w	r6, [r4, #1480]	; 0x5c8
    JoystickController(USBHost &host) { init(); }
    d0aa:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
    d0ae:	f8c4 25b8 	str.w	r2, [r4, #1464]	; 0x5b8
    d0b2:	4642      	mov	r2, r8
    d0b4:	f884 65cc 	strb.w	r6, [r4, #1484]	; 0x5cc
    d0b8:	f8c4 65d0 	str.w	r6, [r4, #1488]	; 0x5d0
    d0bc:	f8c4 65d4 	str.w	r6, [r4, #1492]	; 0x5d4
    d0c0:	f8c4 65dc 	str.w	r6, [r4, #1500]	; 0x5dc
    d0c4:	f8a4 65e0 	strh.w	r6, [r4, #1504]	; 0x5e0
    d0c8:	f884 65e2 	strb.w	r6, [r4, #1506]	; 0x5e2
    d0cc:	f8c4 65e4 	str.w	r6, [r4, #1508]	; 0x5e4
    d0d0:	f00e fcb2 	bl	1ba38 <memset>
    d0d4:	ed87 8b52 	vstr	d8, [r7, #328]	; 0x148
    d0d8:	ed87 8b54 	vstr	d8, [r7, #336]	; 0x150
    d0dc:	ed87 9b56 	vstr	d9, [r7, #344]	; 0x158
    d0e0:	f8c4 6700 	str.w	r6, [r4, #1792]	; 0x700
    d0e4:	f8c4 6704 	str.w	r6, [r4, #1796]	; 0x704
    d0e8:	f8c4 6708 	str.w	r6, [r4, #1800]	; 0x708
    d0ec:	f8c4 670c 	str.w	r6, [r4, #1804]	; 0x70c
    d0f0:	f008 feca 	bl	15e88 <micros>
    d0f4:	f884 6714 	strb.w	r6, [r4, #1812]	; 0x714
    d0f8:	f8c4 0710 	str.w	r0, [r4, #1808]	; 0x710
    d0fc:	4638      	mov	r0, r7
    d0fe:	f884 6a35 	strb.w	r6, [r4, #2613]	; 0xa35
    d102:	f8a4 6a36 	strh.w	r6, [r4, #2614]	; 0xa36
    d106:	f8a4 6a38 	strh.w	r6, [r4, #2616]	; 0xa38
    d10a:	f005 fee5 	bl	12ed8 <JoystickController::init()>
    d10e:	f04f 0e01 	mov.w	lr, #1
    d112:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    d116:	f240 1c01 	movw	ip, #257	; 0x101
    d11a:	f105 0298 	add.w	r2, r5, #152	; 0x98
    d11e:	f884 eb1a 	strb.w	lr, [r4, #2842]	; 0xb1a
    d122:	4631      	mov	r1, r6
    d124:	f8c4 3aec 	str.w	r3, [r4, #2796]	; 0xaec
    d128:	f8a4 cb18 	strh.w	ip, [r4, #2840]	; 0xb18
    d12c:	f604 3028 	addw	r0, r4, #2856	; 0xb28
    d130:	f8c4 5ae0 	str.w	r5, [r4, #2784]	; 0xae0
    d134:	f8c4 2af8 	str.w	r2, [r4, #2808]	; 0xaf8
    d138:	4642      	mov	r2, r8
    USBDriver() : next(NULL), device(NULL) {}
    d13a:	f8c4 6ae4 	str.w	r6, [r4, #2788]	; 0xae4
    d13e:	f8c4 6ae8 	str.w	r6, [r4, #2792]	; 0xae8
class USBHIDInput {
    d142:	f8c4 6af0 	str.w	r6, [r4, #2800]	; 0xaf0
    d146:	f8c4 6af4 	str.w	r6, [r4, #2804]	; 0xaf4
class BTHIDInput {
    d14a:	f8c4 6afc 	str.w	r6, [r4, #2812]	; 0xafc
    d14e:	f884 6b00 	strb.w	r6, [r4, #2816]	; 0xb00
    d152:	f8c4 6b04 	str.w	r6, [r4, #2820]	; 0xb04
    d156:	f8c4 6b08 	str.w	r6, [r4, #2824]	; 0xb08
    JoystickController(USBHost &host) { init(); }
    d15a:	f884 6b0c 	strb.w	r6, [r4, #2828]	; 0xb0c
    d15e:	f8c4 6b10 	str.w	r6, [r4, #2832]	; 0xb10
    d162:	f8c4 6b14 	str.w	r6, [r4, #2836]	; 0xb14
    d166:	f8c4 6b1c 	str.w	r6, [r4, #2844]	; 0xb1c
    d16a:	f8a4 6b20 	strh.w	r6, [r4, #2848]	; 0xb20
    d16e:	f884 6b22 	strb.w	r6, [r4, #2850]	; 0xb22
    d172:	f8c4 6b24 	str.w	r6, [r4, #2852]	; 0xb24
    d176:	f00e fc5f 	bl	1ba38 <memset>
    d17a:	9d02      	ldr	r5, [sp, #8]
    d17c:	ed85 9b56 	vstr	d9, [r5, #344]	; 0x158
    d180:	ed85 8b52 	vstr	d8, [r5, #328]	; 0x148
    d184:	ed85 8b54 	vstr	d8, [r5, #336]	; 0x150
    d188:	f8c4 6c40 	str.w	r6, [r4, #3136]	; 0xc40
    d18c:	f8c4 6c44 	str.w	r6, [r4, #3140]	; 0xc44
    d190:	f8c4 6c48 	str.w	r6, [r4, #3144]	; 0xc48
    d194:	f8c4 6c4c 	str.w	r6, [r4, #3148]	; 0xc4c
    d198:	f008 fe76 	bl	15e88 <micros>
    d19c:	f884 6c54 	strb.w	r6, [r4, #3156]	; 0xc54
    d1a0:	f8c4 0c50 	str.w	r0, [r4, #3152]	; 0xc50
    d1a4:	4628      	mov	r0, r5
    d1a6:	f884 6f75 	strb.w	r6, [r4, #3957]	; 0xf75
    d1aa:	f8a4 6f76 	strh.w	r6, [r4, #3958]	; 0xf76
    d1ae:	f8a4 6f78 	strh.w	r6, [r4, #3960]	; 0xf78
    d1b2:	f005 fe91 	bl	12ed8 <JoystickController::init()>
    d1b6:	9b03      	ldr	r3, [sp, #12]
    d1b8:	9900      	ldr	r1, [sp, #0]
    d1ba:	f609 302c 	addw	r0, r9, #2860	; 0xb2c
    d1be:	4c22      	ldr	r4, [pc, #136]	; (d248 <UUsbHost::UUsbHost()+0x3d0>)
    d1c0:	f50a 7c9c 	add.w	ip, sl, #312	; 0x138
    d1c4:	f8ca 5130 	str.w	r5, [sl, #304]	; 0x130
    d1c8:	f242 1590 	movw	r5, #8592	; 0x2190
    d1cc:	e9ca 3b48 	strd	r3, fp, [sl, #288]	; 0x120
    d1d0:	9b01      	ldr	r3, [sp, #4]
    d1d2:	f641 2bec 	movw	fp, #6892	; 0x1aec
    d1d6:	9001      	str	r0, [sp, #4]
    d1d8:	444d      	add	r5, r9
    d1da:	f8ca 3134 	str.w	r3, [sl, #308]	; 0x134
    d1de:	f241 036c 	movw	r3, #4204	; 0x106c
    d1e2:	44cb      	add	fp, r9
    d1e4:	444b      	add	r3, r9
    d1e6:	e9ca 174a 	strd	r1, r7, [sl, #296]	; 0x128
    d1ea:	9302      	str	r3, [sp, #8]
    d1ec:	f50a 71a8 	add.w	r1, sl, #336	; 0x150
    d1f0:	f509 5306 	add.w	r3, r9, #8576	; 0x2180
    d1f4:	f241 57ac 	movw	r7, #5548	; 0x15ac
    d1f8:	9100      	str	r1, [sp, #0]
    d1fa:	9303      	str	r3, [sp, #12]
    d1fc:	444f      	add	r7, r9
    d1fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    d200:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    d204:	e894 0003 	ldmia.w	r4, {r0, r1}
    d208:	9a02      	ldr	r2, [sp, #8]
    d20a:	e88c 0003 	stmia.w	ip, {r0, r1}
    d20e:	9900      	ldr	r1, [sp, #0]
    d210:	9801      	ldr	r0, [sp, #4]
    d212:	f8ca 6150 	str.w	r6, [sl, #336]	; 0x150
    d216:	808e      	strh	r6, [r1, #4]
    d218:	4631      	mov	r1, r6
    d21a:	f8ca 0158 	str.w	r0, [sl, #344]	; 0x158
    d21e:	f50a 70d2 	add.w	r0, sl, #420	; 0x1a4
    d222:	e9ca 2757 	strd	r2, r7, [sl, #348]	; 0x15c
    d226:	e011      	b.n	d24c <UUsbHost::UUsbHost()+0x3d4>
	...
    d230:	000003ff 	.word	0x000003ff
    d234:	00000000 	.word	0x00000000
    d238:	20007e9c 	.word	0x20007e9c
    d23c:	200080f0 	.word	0x200080f0
    d240:	20007ffc 	.word	0x20007ffc
    d244:	20007e00 	.word	0x20007e00
    d248:	2000210c 	.word	0x2000210c
    d24c:	4a1e      	ldr	r2, [pc, #120]	; (d2c8 <UUsbHost::UUsbHost()+0x450>)
    d24e:	9b03      	ldr	r3, [sp, #12]
    d250:	f8ca 2168 	str.w	r2, [sl, #360]	; 0x168
    d254:	4a1d      	ldr	r2, [pc, #116]	; (d2cc <UUsbHost::UUsbHost()+0x454>)
    d256:	f8ca b164 	str.w	fp, [sl, #356]	; 0x164
    d25a:	f8ca 216c 	str.w	r2, [sl, #364]	; 0x16c
    d25e:	4a1c      	ldr	r2, [pc, #112]	; (d2d0 <UUsbHost::UUsbHost()+0x458>)
    d260:	ed9f 7b17 	vldr	d7, [pc, #92]	; d2c0 <UUsbHost::UUsbHost()+0x448>
    d264:	f8ca 2170 	str.w	r2, [sl, #368]	; 0x170
    d268:	4a1a      	ldr	r2, [pc, #104]	; (d2d4 <UUsbHost::UUsbHost()+0x45c>)
    d26a:	e9ca 665e 	strd	r6, r6, [sl, #376]	; 0x178
    d26e:	f8ca 2174 	str.w	r2, [sl, #372]	; 0x174
    d272:	4642      	mov	r2, r8
    d274:	601e      	str	r6, [r3, #0]
    d276:	809e      	strh	r6, [r3, #4]
    d278:	f88a 6186 	strb.w	r6, [sl, #390]	; 0x186
    d27c:	f8ca 6187 	str.w	r6, [sl, #391]	; 0x187
    d280:	f8ca 618b 	str.w	r6, [sl, #395]	; 0x18b
    d284:	ed85 7b00 	vstr	d7, [r5]
    d288:	e9ca 6666 	strd	r6, r6, [sl, #408]	; 0x198
    d28c:	f8ca 61a0 	str.w	r6, [sl, #416]	; 0x1a0
    d290:	f00e fbd2 	bl	1ba38 <memset>
    d294:	4642      	mov	r2, r8
    d296:	4631      	mov	r1, r6
    d298:	f50a 7029 	add.w	r0, sl, #676	; 0x2a4
    d29c:	f00e fbcc 	bl	1ba38 <memset>
    d2a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    d2a4:	230b      	movs	r3, #11
    d2a6:	4648      	mov	r0, r9
    d2a8:	f8ca 63ac 	str.w	r6, [sl, #940]	; 0x3ac
    d2ac:	f8ca 23a4 	str.w	r2, [sl, #932]	; 0x3a4
    d2b0:	f8ca 33a8 	str.w	r3, [sl, #936]	; 0x3a8
    d2b4:	b005      	add	sp, #20
    d2b6:	ecbd 8b04 	vpop	{d8-d9}
    d2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2be:	bf00      	nop
    d2c0:	ffffffff 	.word	0xffffffff
    d2c4:	ffffffff 	.word	0xffffffff
    d2c8:	20007d1c 	.word	0x20007d1c
    d2cc:	20007d2c 	.word	0x20007d2c
    d2d0:	20007d3c 	.word	0x20007d3c
    d2d4:	20007d4c 	.word	0x20007d4c

0000d2d8 <UUsbHost::setup()>:
{
    d2d8:	b570      	push	{r4, r5, r6, lr}
  active = true;
    d2da:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    d2de:	2601      	movs	r6, #1
{
    d2e0:	4604      	mov	r4, r0
  active = true;
    d2e2:	f885 63a4 	strb.w	r6, [r5, #932]	; 0x3a4
  myusb.begin();
    d2e6:	f002 fce1 	bl	fcac <USBHost::begin()>
  addPublistItem("joyaxis", "Get current joystick axis values");
    d2ea:	4a0b      	ldr	r2, [pc, #44]	; (d318 <UUsbHost::setup()+0x40>)
    d2ec:	490b      	ldr	r1, [pc, #44]	; (d31c <UUsbHost::setup()+0x44>)
    d2ee:	4620      	mov	r0, r4
    d2f0:	f7ff f846 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("joybut",  "Get current joystick button values");
    d2f4:	4a0a      	ldr	r2, [pc, #40]	; (d320 <UUsbHost::setup()+0x48>)
    d2f6:	490b      	ldr	r1, [pc, #44]	; (d324 <UUsbHost::setup()+0x4c>)
    d2f8:	4620      	mov	r0, r4
    d2fa:	f7ff f841 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("joy",     "Get joystick message");
    d2fe:	4a0a      	ldr	r2, [pc, #40]	; (d328 <UUsbHost::setup()+0x50>)
    d300:	490a      	ldr	r1, [pc, #40]	; (d32c <UUsbHost::setup()+0x54>)
    d302:	4620      	mov	r0, r4
    d304:	f7ff f83c 	bl	c380 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    d308:	4621      	mov	r1, r4
    d30a:	4809      	ldr	r0, [pc, #36]	; (d330 <UUsbHost::setup()+0x58>)
    d30c:	f7ff fd32 	bl	cd74 <UUSB::addSubscriptionService(USubss*)>
  initialized = true;
    d310:	f885 63a5 	strb.w	r6, [r5, #933]	; 0x3a5
}
    d314:	bd70      	pop	{r4, r5, r6, pc}
    d316:	bf00      	nop
    d318:	20007b90 	.word	0x20007b90
    d31c:	20007bb4 	.word	0x20007bb4
    d320:	20007bbc 	.word	0x20007bbc
    d324:	20007be0 	.word	0x20007be0
    d328:	20007be8 	.word	0x20007be8
    d32c:	20007c00 	.word	0x20007c00
    d330:	2000eab8 	.word	0x2000eab8
    d334:	00000000 	.word	0x00000000

0000d338 <UUsbHost::tick()>:
{
    d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tickCnt++;
    d33c:	6983      	ldr	r3, [r0, #24]
  if (active and tickCnt % 10 == 0)
    d33e:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
{
    d342:	b0a3      	sub	sp, #140	; 0x8c
  tickCnt++;
    d344:	3301      	adds	r3, #1
  if (active and tickCnt % 10 == 0)
    d346:	f897 23a4 	ldrb.w	r2, [r7, #932]	; 0x3a4
  tickCnt++;
    d34a:	6183      	str	r3, [r0, #24]
  if (active and tickCnt % 10 == 0)
    d34c:	2a00      	cmp	r2, #0
    d34e:	f000 80ea 	beq.w	d526 <UUsbHost::tick()+0x1ee>
    d352:	4ac9      	ldr	r2, [pc, #804]	; (d678 <UUsbHost::tick()+0x340>)
    d354:	17de      	asrs	r6, r3, #31
    d356:	fb82 1203 	smull	r1, r2, r2, r3
    d35a:	ebc6 06a2 	rsb	r6, r6, r2, asr #2
    d35e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    d362:	ebb3 0646 	subs.w	r6, r3, r6, lsl #1
    d366:	f040 80de 	bne.w	d526 <UUsbHost::tick()+0x1ee>
    if (not initialized)
    d36a:	f897 33a5 	ldrb.w	r3, [r7, #933]	; 0x3a5
    d36e:	2b00      	cmp	r3, #0
    d370:	f000 80dc 	beq.w	d52c <UUsbHost::tick()+0x1f4>
    myusb.Task();
    d374:	4605      	mov	r5, r0
    d376:	f242 1a87 	movw	sl, #8583	; 0x2187
    d37a:	f500 6932 	add.w	r9, r0, #2848	; 0xb20
    for (int joystick_index = 0; joystick_index < COUNT_JOYSTICKS; joystick_index++) {
    d37e:	46b0      	mov	r8, r6
    myusb.Task();
    d380:	f003 fc7a 	bl	10c78 <USBHost::Task()>
    for (int joystick_index = 0; joystick_index < COUNT_JOYSTICKS; joystick_index++) {
    d384:	44aa      	add	sl, r5
    int isOK = -1;
    d386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d38a:	f605 4464 	addw	r4, r5, #3172	; 0xc64
    const uint8_t *manufacturer();
    const uint8_t *product();
    const uint8_t *serialNumber();
    operator bool() { return (((device != nullptr) || (mydevice != nullptr || (btdevice != nullptr))) && connected_); } // override as in both USBDriver and in USBHIDInput

    bool    available() { return joystickEvent; }
    d38e:	f44f 6ba8 	mov.w	fp, #1344	; 0x540
    d392:	9307      	str	r3, [sp, #28]
    d394:	fb0b 5308 	mla	r3, fp, r8, r5
    d398:	f893 3b62 	ldrb.w	r3, [r3, #2914]	; 0xb62
      if (joysticks[joystick_index].available()) 
    d39c:	2b00      	cmp	r3, #0
    d39e:	f040 80e7 	bne.w	d570 <UUsbHost::tick()+0x238>
    for (int joystick_index = 0; joystick_index < COUNT_JOYSTICKS; joystick_index++) {
    d3a2:	f108 0801 	add.w	r8, r8, #1
    d3a6:	f509 69a8 	add.w	r9, r9, #1344	; 0x540
    d3aa:	f10a 0a01 	add.w	sl, sl, #1
    d3ae:	f504 64a8 	add.w	r4, r4, #1344	; 0x540
    d3b2:	f1b8 0f04 	cmp.w	r8, #4
    d3b6:	d1ed      	bne.n	d394 <UUsbHost::tick()+0x5c>
    if (isOK)
    d3b8:	9b07      	ldr	r3, [sp, #28]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	f000 808a 	beq.w	d4d4 <UUsbHost::tick()+0x19c>
      if (buttons & (1 << 8) and not manOverride)
    d3c0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    d3c4:	05d9      	lsls	r1, r3, #23
    d3c6:	f140 80c6 	bpl.w	d556 <UUsbHost::tick()+0x21e>
    d3ca:	7d2a      	ldrb	r2, [r5, #20]
    d3cc:	2a00      	cmp	r2, #0
    d3ce:	f000 80b2 	beq.w	d536 <UUsbHost::tick()+0x1fe>
      if (buttons & (1 << 9) and manOverride)
    d3d2:	059a      	lsls	r2, r3, #22
    d3d4:	f140 8192 	bpl.w	d6fc <UUsbHost::tick()+0x3c4>
        manOverride = false;
    d3d8:	2400      	movs	r4, #0
        usb.send("# gamepad back to auto\n");
    d3da:	49a8      	ldr	r1, [pc, #672]	; (d67c <UUsbHost::tick()+0x344>)
    d3dc:	48a8      	ldr	r0, [pc, #672]	; (d680 <UUsbHost::tick()+0x348>)
    d3de:	f7ff f89d 	bl	c51c <UUSB::send(char const*)>
        motor.motorSetEnable(autoMotorEnabled, autoMotorEnabled);
    d3e2:	f8df 82a4 	ldr.w	r8, [pc, #676]	; d688 <UUsbHost::tick()+0x350>
        manOverride = false;
    d3e6:	752c      	strb	r4, [r5, #20]
        motor.motorSetEnable(autoMotorEnabled, autoMotorEnabled);
    d3e8:	f897 23ab 	ldrb.w	r2, [r7, #939]	; 0x3ab
    d3ec:	4640      	mov	r0, r8
    d3ee:	4611      	mov	r1, r2
    d3f0:	f7fb f974 	bl	86dc <UMotor::motorSetEnable(bool, bool)>
        motor.motorVoltage[0] = 0;
    d3f4:	2300      	movs	r3, #0
        servo.setServo(1, 0, 0, 0);
    d3f6:	9400      	str	r4, [sp, #0]
    d3f8:	4622      	mov	r2, r4
        motor.motorVoltage[0] = 0;
    d3fa:	f8c8 3018 	str.w	r3, [r8, #24]
        servo.setServo(1, 0, 0, 0);
    d3fe:	2101      	movs	r1, #1
        motor.motorVoltage[1] = 0;
    d400:	f8c8 301c 	str.w	r3, [r8, #28]
        servo.setServo(1, 0, 0, 0);
    d404:	4623      	mov	r3, r4
    d406:	489f      	ldr	r0, [pc, #636]	; (d684 <UUsbHost::tick()+0x34c>)
    d408:	f7fe fb88 	bl	bb1c <UServo::setServo(signed char, short, bool, signed char)>
      if (buttons & (1 << 5)) // RB
    d40c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
      if (manOverride)
    d410:	7d2c      	ldrb	r4, [r5, #20]
      if (buttons & (1 << 5)) // RB
    d412:	0698      	lsls	r0, r3, #26
    d414:	f100 8166 	bmi.w	d6e4 <UUsbHost::tick()+0x3ac>
      if (manOverride)
    d418:	2c00      	cmp	r4, #0
    d41a:	f000 80a5 	beq.w	d568 <UUsbHost::tick()+0x230>
          lv =  (psAxis[5] - 127) * -0.01;
    d41e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
          hv = (psAxis[2] - 127) * -0.006;
    d422:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
          lv =  (psAxis[5] - 127) * -0.01;
    d426:	ed9f 4b90 	vldr	d4, [pc, #576]	; d668 <UUsbHost::tick()+0x330>
          hv = (psAxis[2] - 127) * -0.006;
    d42a:	ed9f 5b91 	vldr	d5, [pc, #580]	; d670 <UUsbHost::tick()+0x338>
          lv =  (psAxis[5] - 127) * -0.01;
    d42e:	3b7f      	subs	r3, #127	; 0x7f
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d430:	2164      	movs	r1, #100	; 0x64
    d432:	a809      	add	r0, sp, #36	; 0x24
          lv =  (psAxis[5] - 127) * -0.01;
    d434:	ee07 3a10 	vmov	s14, r3
          hv = (psAxis[2] - 127) * -0.006;
    d438:	f1a2 037f 	sub.w	r3, r2, #127	; 0x7f
        motor.motorVoltage[0] = lv - hv;
    d43c:	4a92      	ldr	r2, [pc, #584]	; (d688 <UUsbHost::tick()+0x350>)
          hv = (psAxis[2] - 127) * -0.006;
    d43e:	ee06 3a10 	vmov	s12, r3
          lv =  (psAxis[5] - 127) * -0.01;
    d442:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    d446:	4b91      	ldr	r3, [pc, #580]	; (d68c <UUsbHost::tick()+0x354>)
          hv = (psAxis[2] - 127) * -0.006;
    d448:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
          lv =  (psAxis[5] - 127) * -0.01;
    d44c:	ee27 7b04 	vmul.f64	d7, d7, d4
    d450:	681b      	ldr	r3, [r3, #0]
          hv = (psAxis[2] - 127) * -0.006;
    d452:	ee26 6b05 	vmul.f64	d6, d6, d5
          lv =  (psAxis[5] - 127) * -0.01;
    d456:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
          hv = (psAxis[2] - 127) * -0.006;
    d45a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d45e:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
    d462:	eeb7 4ac6 	vcvt.f64.f32	d4, s12
        motor.motorVoltage[0] = lv - hv;
    d466:	ee77 7a46 	vsub.f32	s15, s14, s12
        motor.motorVoltage[1] = lv + hv;
    d46a:	ee37 7a06 	vadd.f32	s14, s14, s12
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d46e:	ed8d 4b02 	vstr	d4, [sp, #8]
    d472:	ed8d 5b00 	vstr	d5, [sp]
        motor.motorVoltage[0] = lv - hv;
    d476:	edc2 7a06 	vstr	s15, [r2, #24]
        motor.motorVoltage[1] = lv + hv;
    d47a:	ed82 7a07 	vstr	s14, [r2, #28]
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d47e:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
        servof = (psAxis[1] - 127);
    d482:	f8d7 61a8 	ldr.w	r6, [r7, #424]	; 0x1a8
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d486:	9204      	str	r2, [sp, #16]
    d488:	4a81      	ldr	r2, [pc, #516]	; (d690 <UUsbHost::tick()+0x358>)
        servof = (psAxis[1] - 127);
    d48a:	3e7f      	subs	r6, #127	; 0x7f
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d48c:	f00e f902 	bl	1b694 <snprintf>
          usb.send(s);
    d490:	a909      	add	r1, sp, #36	; 0x24
    d492:	487b      	ldr	r0, [pc, #492]	; (d680 <UUsbHost::tick()+0x348>)
    d494:	f7ff f842 	bl	c51c <UUSB::send(char const*)>
      if (buttons != buttons_last)
    d498:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    if (manOverride)
    d49c:	7d2c      	ldrb	r4, [r5, #20]
      if (buttons != buttons_last)
    d49e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
    d4a2:	429a      	cmp	r2, r3
    d4a4:	d002      	beq.n	d4ac <UUsbHost::tick()+0x174>
        buttonChanged = true;
    d4a6:	2201      	movs	r2, #1
    d4a8:	f887 23a9 	strb.w	r2, [r7, #937]	; 0x3a9
      buttons_last = buttons;
    d4ac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
      for (int i = 0; i < 8; i++)
    d4b0:	f242 23a0 	movw	r3, #8864	; 0x22a0
          axisChanged = true;
    d4b4:	2001      	movs	r0, #1
    d4b6:	442b      	add	r3, r5
    d4b8:	f505 550b 	add.w	r5, r5, #8896	; 0x22c0
        if (psAxis[i] != psAxisPrev[i])
    d4bc:	f853 2cfc 	ldr.w	r2, [r3, #-252]
    d4c0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    d4c4:	428a      	cmp	r2, r1
          axisChanged = true;
    d4c6:	bf18      	it	ne
    d4c8:	f887 03aa 	strbne.w	r0, [r7, #938]	; 0x3aa
      for (int i = 0; i < 8; i++)
    d4cc:	429d      	cmp	r5, r3
        psAxisPrev[i] = psAxis[i];
    d4ce:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 8; i++)
    d4d0:	d1f4      	bne.n	d4bc <UUsbHost::tick()+0x184>
    d4d2:	e001      	b.n	d4d8 <UUsbHost::tick()+0x1a0>
      if (buttons & (1 << 8) and not manOverride)
    d4d4:	7d2c      	ldrb	r4, [r5, #20]
    int servof = 0;
    d4d6:	9e07      	ldr	r6, [sp, #28]
    available = isOK;
    d4d8:	9b07      	ldr	r3, [sp, #28]
    d4da:	f1b3 0b00 	subs.w	fp, r3, #0
    d4de:	bf18      	it	ne
    d4e0:	f04f 0b01 	movne.w	fp, #1
    d4e4:	f887 b3a6 	strb.w	fp, [r7, #934]	; 0x3a6
    if (manOverride)
    d4e8:	b1ec      	cbz	r4, d526 <UUsbHost::tick()+0x1ee>
      servopos += servof * 10;
    d4ea:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    d4ee:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
      if (servopos > 85000)
    d4f2:	4968      	ldr	r1, [pc, #416]	; (d694 <UUsbHost::tick()+0x35c>)
      servopos += servof * 10;
    d4f4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
      if (servopos > 85000)
    d4f8:	428b      	cmp	r3, r1
    d4fa:	f300 80d3 	bgt.w	d6a4 <UUsbHost::tick()+0x36c>
      else if (servopos < -95000)
    d4fe:	4966      	ldr	r1, [pc, #408]	; (d698 <UUsbHost::tick()+0x360>)
    d500:	428b      	cmp	r3, r1
    d502:	f2c0 80ea 	blt.w	d6da <UUsbHost::tick()+0x3a2>
      servo.setServo(1, -servopos / 100, 1, 0);
    d506:	4965      	ldr	r1, [pc, #404]	; (d69c <UUsbHost::tick()+0x364>)
    d508:	17da      	asrs	r2, r3, #31
      servopos += servof * 10;
    d50a:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      servo.setServo(1, -servopos / 100, 1, 0);
    d50e:	fb81 1303 	smull	r1, r3, r1, r3
    d512:	eba2 1263 	sub.w	r2, r2, r3, asr #5
    d516:	b212      	sxth	r2, r2
    d518:	2400      	movs	r4, #0
    d51a:	2301      	movs	r3, #1
    d51c:	4859      	ldr	r0, [pc, #356]	; (d684 <UUsbHost::tick()+0x34c>)
    d51e:	4619      	mov	r1, r3
    d520:	9400      	str	r4, [sp, #0]
    d522:	f7fe fafb 	bl	bb1c <UServo::setServo(signed char, short, bool, signed char)>
}
    d526:	b023      	add	sp, #140	; 0x8c
    d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d52c:	b023      	add	sp, #140	; 0x8c
    d52e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      setup();
    d532:	f7ff bed1 	b.w	d2d8 <UUsbHost::setup()>
        manOverride = true;
    d536:	2201      	movs	r2, #1
        autoMotorEnabled = motor.motorEnable[0];
    d538:	4853      	ldr	r0, [pc, #332]	; (d688 <UUsbHost::tick()+0x350>)
        manOverride = true;
    d53a:	752a      	strb	r2, [r5, #20]
        motor.motorSetEnable(true, true);
    d53c:	4611      	mov	r1, r2
        autoMotorEnabled = motor.motorEnable[0];
    d53e:	f890 3020 	ldrb.w	r3, [r0, #32]
    d542:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
        motor.motorSetEnable(true, true);
    d546:	f7fb f8c9 	bl	86dc <UMotor::motorSetEnable(bool, bool)>
        usb.send("# gamepad override\n");
    d54a:	4955      	ldr	r1, [pc, #340]	; (d6a0 <UUsbHost::tick()+0x368>)
    d54c:	484c      	ldr	r0, [pc, #304]	; (d680 <UUsbHost::tick()+0x348>)
    d54e:	f7fe ffe5 	bl	c51c <UUSB::send(char const*)>
      if (buttons & (1 << 9) and manOverride)
    d552:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    d556:	059a      	lsls	r2, r3, #22
    d558:	7d2c      	ldrb	r4, [r5, #20]
    d55a:	f57f af5a 	bpl.w	d412 <UUsbHost::tick()+0xda>
    d55e:	2c00      	cmp	r4, #0
    d560:	f47f af3a 	bne.w	d3d8 <UUsbHost::tick()+0xa0>
      if (buttons & (1 << 5)) // RB
    d564:	0699      	lsls	r1, r3, #26
    d566:	d49a      	bmi.n	d49e <UUsbHost::tick()+0x166>
      if (buttons != buttons_last)
    d568:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    d56c:	2400      	movs	r4, #0
    d56e:	e796      	b.n	d49e <UUsbHost::tick()+0x166>
    void    joystickDataClear();

    // Returns the currently pressed buttons on the joystick
    uint32_t getButtons() { return buttons; }
    d570:	464b      	mov	r3, r9
    d572:	f242 12a0 	movw	r2, #8608	; 0x21a0
    d576:	f853 0f44 	ldr.w	r0, [r3, #68]!
    d57a:	18aa      	adds	r2, r5, r2
        buttons = joysticks[joystick_index].getButtons();
    d57c:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    // Returns the HID Report ID
    uint8_t getReportID() { return report_id_;}

    // Returns the specified axis value
    int     getAxis(uint32_t index) { return (index < (sizeof(axis) / sizeof(axis[0]))) ? axis[index] : 0; }
    d580:	f853 1f04 	ldr.w	r1, [r3, #4]!
        for (uint8_t i = 0; i<64; i++) {
    d584:	42a3      	cmp	r3, r4
            psAxis[i] = joysticks[joystick_index].getAxis(i);
    d586:	f842 1f04 	str.w	r1, [r2, #4]!
        for (uint8_t i = 0; i<64; i++) {
    d58a:	d1f9      	bne.n	d580 <UUsbHost::tick()+0x248>
    // setLEDs on PS4(RGB), PS3 simple LED setting (only uses lb)
    bool setLEDs(uint8_t lr, uint8_t lg, uint8_t lb);  // sets Leds,
    bool inline setLEDs(uint32_t leds) {return setLEDs((leds >> 16) & 0xff, (leds >> 8) & 0xff, leds & 0xff);}  // sets Leds - passing one arg for all leds
    enum { STANDARD_AXIS_COUNT = 10, ADDITIONAL_AXIS_COUNT = 54, TOTAL_AXIS_COUNT = (STANDARD_AXIS_COUNT + ADDITIONAL_AXIS_COUNT) };
    typedef enum { UNKNOWN = 0, PS3, PS4, XBOXONE, XBOX360, PS3_MOTION, SpaceNav, SWITCH} joytype_t;
    joytype_t joystickType() {return joystickType_;}
    d58c:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
        switch (joysticks[joystick_index].joystickType()) {
    d590:	2b02      	cmp	r3, #2
    d592:	f000 808b 	beq.w	d6ac <UUsbHost::tick()+0x374>
    d596:	d817      	bhi.n	d5c8 <UUsbHost::tick()+0x290>
    d598:	2b01      	cmp	r3, #1
    d59a:	d14a      	bne.n	d632 <UUsbHost::tick()+0x2fa>
            ltv = joysticks[joystick_index].getAxis(18);
    d59c:	f899 1090 	ldrb.w	r1, [r9, #144]	; 0x90
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d5a0:	f89a 3000 	ldrb.w	r3, [sl]
            rtv = joysticks[joystick_index].getAxis(19);
    d5a4:	f899 2094 	ldrb.w	r2, [r9, #148]	; 0x94
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d5a8:	428b      	cmp	r3, r1
    d5aa:	d118      	bne.n	d5de <UUsbHost::tick()+0x2a6>
    d5ac:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d5b0:	4293      	cmp	r3, r2
    d5b2:	d114      	bne.n	d5de <UUsbHost::tick()+0x2a6>
        if (buttons != buttons_prev) {
    d5b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    d5b8:	4298      	cmp	r0, r3
    d5ba:	d122      	bne.n	d602 <UUsbHost::tick()+0x2ca>
        joysticks[joystick_index].joystickDataClear();
    d5bc:	4648      	mov	r0, r9
    d5be:	f8cd 801c 	str.w	r8, [sp, #28]
    d5c2:	f006 f829 	bl	13618 <JoystickController::joystickDataClear()>
    d5c6:	e6ec      	b.n	d3a2 <UUsbHost::tick()+0x6a>
        switch (joysticks[joystick_index].joystickType()) {
    d5c8:	3b03      	subs	r3, #3
    d5ca:	2b01      	cmp	r3, #1
    d5cc:	d831      	bhi.n	d632 <UUsbHost::tick()+0x2fa>
            ltv = joysticks[joystick_index].getAxis(3);
    d5ce:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d5d2:	f89a 3000 	ldrb.w	r3, [sl]
            rtv = joysticks[joystick_index].getAxis(4);
    d5d6:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d5da:	428b      	cmp	r3, r1
    d5dc:	d025      	beq.n	d62a <UUsbHost::tick()+0x2f2>
              joysticks[joystick_index].setRumble(ltv, rtv,50);
    d5de:	2332      	movs	r3, #50	; 0x32
    d5e0:	4648      	mov	r0, r9
              joystick_left_trigger_value[joystick_index] = ltv;
    d5e2:	f88a 1000 	strb.w	r1, [sl]
              joystick_right_trigger_value[joystick_index] = rtv;
    d5e6:	f88a 2004 	strb.w	r2, [sl, #4]
              joysticks[joystick_index].setRumble(ltv, rtv,50);
    d5ea:	f005 fe6f 	bl	132cc <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>
        if (buttons != buttons_prev) {
    d5ee:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
    d5f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    d5f6:	4283      	cmp	r3, r0
    d5f8:	d0e0      	beq.n	d5bc <UUsbHost::tick()+0x284>
          if (joysticks[joystick_index].joystickType() == JoystickController::PS3) {
    d5fa:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
    d5fe:	2b01      	cmp	r3, #1
    d600:	d11b      	bne.n	d63a <UUsbHost::tick()+0x302>
            if (buttons & 0x2000) leds = 2;   //Cir
    d602:	0483      	lsls	r3, r0, #18
    bool inline setLEDs(uint32_t leds) {return setLEDs((leds >> 16) & 0xff, (leds >> 8) & 0xff, leds & 0xff);}  // sets Leds - passing one arg for all leds
    d604:	f04f 0200 	mov.w	r2, #0
            uint8_t leds = 0;
    d608:	bf54      	ite	pl
    d60a:	f3c0 33c0 	ubfxpl	r3, r0, #15, #1
            if (buttons & 0x2000) leds = 2;   //Cir
    d60e:	2302      	movmi	r3, #2
            if (buttons & 0x1000) leds = 4;   //Tri
    d610:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    d614:	4611      	mov	r1, r2
    d616:	bf18      	it	ne
    d618:	2304      	movne	r3, #4
            if (buttons & 0x4000) leds = 8;   //X  //Tri
    d61a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    d61e:	4648      	mov	r0, r9
    d620:	bf18      	it	ne
    d622:	2308      	movne	r3, #8
    d624:	f005 fd9a 	bl	1315c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
    d628:	e013      	b.n	d652 <UUsbHost::tick()+0x31a>
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d62a:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d62e:	4293      	cmp	r3, r2
    d630:	d1d5      	bne.n	d5de <UUsbHost::tick()+0x2a6>
        if (buttons != buttons_prev) {
    d632:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    d636:	4298      	cmp	r0, r3
    d638:	d0c0      	beq.n	d5bc <UUsbHost::tick()+0x284>
            uint8_t lb = (buttons & 4) ? 0xff : 0;
    d63a:	f340 0380 	sbfx	r3, r0, #2, #1
            uint8_t lg = (buttons & 2) ? 0xff : 0;
    d63e:	f340 0240 	sbfx	r2, r0, #1, #1
            uint8_t lr = (buttons & 1) ? 0xff : 0;
    d642:	f340 0100 	sbfx	r1, r0, #0, #1
            joysticks[joystick_index].setLEDs(lr, lg, lb);
    d646:	4648      	mov	r0, r9
    d648:	b2db      	uxtb	r3, r3
    d64a:	b2d2      	uxtb	r2, r2
    d64c:	b2c9      	uxtb	r1, r1
    d64e:	f005 fd85 	bl	1315c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
          buttons_prev = buttons;
    d652:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
        joysticks[joystick_index].joystickDataClear();
    d656:	4648      	mov	r0, r9
    d658:	f8cd 801c 	str.w	r8, [sp, #28]
          buttons_prev = buttons;
    d65c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        joysticks[joystick_index].joystickDataClear();
    d660:	f005 ffda 	bl	13618 <JoystickController::joystickDataClear()>
    d664:	e69d      	b.n	d3a2 <UUsbHost::tick()+0x6a>
    d666:	bf00      	nop
    d668:	47ae147b 	.word	0x47ae147b
    d66c:	bf847ae1 	.word	0xbf847ae1
    d670:	bc6a7efa 	.word	0xbc6a7efa
    d674:	bf789374 	.word	0xbf789374
    d678:	66666667 	.word	0x66666667
    d67c:	20007b54 	.word	0x20007b54
    d680:	2000eab8 	.word	0x2000eab8
    d684:	2000ea58 	.word	0x2000ea58
    d688:	2000e4bc 	.word	0x2000e4bc
    d68c:	2000eaac 	.word	0x2000eaac
    d690:	20007b6c 	.word	0x20007b6c
    d694:	00014c08 	.word	0x00014c08
    d698:	fffe8ce8 	.word	0xfffe8ce8
    d69c:	51eb851f 	.word	0x51eb851f
    d6a0:	20007b40 	.word	0x20007b40
        servopos = 85000;
    d6a4:	4a1c      	ldr	r2, [pc, #112]	; (d718 <UUsbHost::tick()+0x3e0>)
    d6a6:	f8c7 13ac 	str.w	r1, [r7, #940]	; 0x3ac
    d6aa:	e735      	b.n	d518 <UUsbHost::tick()+0x1e0>
            ltv = joysticks[joystick_index].getAxis(3);
    d6ac:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d6b0:	f89a 3000 	ldrb.w	r3, [sl]
            rtv = joysticks[joystick_index].getAxis(4);
    d6b4:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d6b8:	428b      	cmp	r3, r1
    d6ba:	d103      	bne.n	d6c4 <UUsbHost::tick()+0x38c>
    d6bc:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d6c0:	4293      	cmp	r3, r2
    d6c2:	d0b6      	beq.n	d632 <UUsbHost::tick()+0x2fa>
              joysticks[joystick_index].setRumble(ltv, rtv);
    d6c4:	23ff      	movs	r3, #255	; 0xff
    d6c6:	4648      	mov	r0, r9
              joystick_left_trigger_value[joystick_index] = ltv;
    d6c8:	f88a 1000 	strb.w	r1, [sl]
              joystick_right_trigger_value[joystick_index] = rtv;
    d6cc:	f88a 2004 	strb.w	r2, [sl, #4]
              joysticks[joystick_index].setRumble(ltv, rtv);
    d6d0:	f005 fdfc 	bl	132cc <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>
        if (buttons != buttons_prev) {
    d6d4:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
    d6d8:	e78b      	b.n	d5f2 <UUsbHost::tick()+0x2ba>
        servopos = -95000;
    d6da:	f240 32b6 	movw	r2, #950	; 0x3b6
    d6de:	f8c7 13ac 	str.w	r1, [r7, #940]	; 0x3ac
    d6e2:	e719      	b.n	d518 <UUsbHost::tick()+0x1e0>
      if (manOverride)
    d6e4:	2c00      	cmp	r4, #0
    d6e6:	f43f aeda 	beq.w	d49e <UUsbHost::tick()+0x166>
          lv = (psAxis[5] - 127) * -0.05;
    d6ea:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
          hv = (psAxis[2] - 127) * -0.004;
    d6ee:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
          lv = (psAxis[5] - 127) * -0.05;
    d6f2:	ed9f 4b05 	vldr	d4, [pc, #20]	; d708 <UUsbHost::tick()+0x3d0>
          hv = (psAxis[2] - 127) * -0.004;
    d6f6:	ed9f 5b06 	vldr	d5, [pc, #24]	; d710 <UUsbHost::tick()+0x3d8>
    d6fa:	e698      	b.n	d42e <UUsbHost::tick()+0xf6>
      if (buttons & (1 << 5)) // RB
    d6fc:	069b      	lsls	r3, r3, #26
    d6fe:	d4f4      	bmi.n	d6ea <UUsbHost::tick()+0x3b2>
    d700:	e68d      	b.n	d41e <UUsbHost::tick()+0xe6>
    d702:	bf00      	nop
    d704:	f3af 8000 	nop.w
    d708:	9999999a 	.word	0x9999999a
    d70c:	bfa99999 	.word	0xbfa99999
    d710:	d2f1a9fc 	.word	0xd2f1a9fc
    d714:	bf70624d 	.word	0xbf70624d
    d718:	fffffcae 	.word	0xfffffcae

0000d71c <UUsbHost::sendAxis()>:

void UUsbHost::sendAxis()
{
    d71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d720:	4606      	mov	r6, r0
    d722:	b0cd      	sub	sp, #308	; 0x134
  const int MSL = 300;
  char s[MSL];
  snprintf(s, MSL, "joyaxis %d", available);
    d724:	4a1c      	ldr	r2, [pc, #112]	; (d798 <UUsbHost::sendAxis()+0x7c>)
    d726:	f44f 7196 	mov.w	r1, #300	; 0x12c
    d72a:	f506 5800 	add.w	r8, r6, #8192	; 0x2000
    d72e:	a801      	add	r0, sp, #4
    d730:	f898 33a6 	ldrb.w	r3, [r8, #934]	; 0x3a6
    d734:	f00d ffae 	bl	1b694 <snprintf>
  int n = strlen(s);
    d738:	a801      	add	r0, sp, #4
    d73a:	f00f fd21 	bl	1d180 <strlen>
  char * p1 = &s[n];
    d73e:	ab01      	add	r3, sp, #4
  int n = strlen(s);
    d740:	4604      	mov	r4, r0
  char * p1 = &s[n];
    d742:	181d      	adds	r5, r3, r0
  for (int i = 0; i < number_of_axes; i++)
    d744:	f898 33a7 	ldrb.w	r3, [r8, #935]	; 0x3a7
    d748:	b1cb      	cbz	r3, d77e <UUsbHost::sendAxis()+0x62>
    d74a:	f242 17a0 	movw	r7, #8608	; 0x21a0
  {
    snprintf(p1, MSL - n, " %d",  psAxis[i]);
    d74e:	f8df 9054 	ldr.w	r9, [pc, #84]	; d7a4 <UUsbHost::sendAxis()+0x88>
    d752:	4437      	add	r7, r6
  for (int i = 0; i < number_of_axes; i++)
    d754:	2600      	movs	r6, #0
    snprintf(p1, MSL - n, " %d",  psAxis[i]);
    d756:	f5c4 7196 	rsb	r1, r4, #300	; 0x12c
    d75a:	f857 3f04 	ldr.w	r3, [r7, #4]!
    d75e:	464a      	mov	r2, r9
    d760:	4628      	mov	r0, r5
    d762:	f00d ff97 	bl	1b694 <snprintf>
    n += strlen(p1);
    d766:	4628      	mov	r0, r5
    d768:	f00f fd0a 	bl	1d180 <strlen>
  for (int i = 0; i < number_of_axes; i++)
    d76c:	3601      	adds	r6, #1
    d76e:	f898 33a7 	ldrb.w	r3, [r8, #935]	; 0x3a7
    n += strlen(p1);
    d772:	4404      	add	r4, r0
    p1 = &s[n];
    d774:	aa01      	add	r2, sp, #4
  for (int i = 0; i < number_of_axes; i++)
    d776:	42b3      	cmp	r3, r6
    p1 = &s[n];
    d778:	eb02 0504 	add.w	r5, r2, r4
  for (int i = 0; i < number_of_axes; i++)
    d77c:	dceb      	bgt.n	d756 <UUsbHost::sendAxis()+0x3a>
  }
  snprintf(p1, MSL - n, "\r\n");
    d77e:	4a07      	ldr	r2, [pc, #28]	; (d79c <UUsbHost::sendAxis()+0x80>)
    d780:	f5c4 7196 	rsb	r1, r4, #300	; 0x12c
    d784:	4628      	mov	r0, r5
    d786:	f00d ff85 	bl	1b694 <snprintf>
  usb.send(s);
    d78a:	a901      	add	r1, sp, #4
    d78c:	4804      	ldr	r0, [pc, #16]	; (d7a0 <UUsbHost::sendAxis()+0x84>)
    d78e:	f7fe fec5 	bl	c51c <UUSB::send(char const*)>
}
    d792:	b04d      	add	sp, #308	; 0x134
    d794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d798:	20007c70 	.word	0x20007c70
    d79c:	20004cf4 	.word	0x20004cf4
    d7a0:	2000eab8 	.word	0x2000eab8
    d7a4:	20007c7c 	.word	0x20007c7c

0000d7a8 <UUsbHost::sendButtons()>:

void UUsbHost::sendButtons()
{
  const int MSL = 300;
  char s[MSL];
  snprintf(s, MSL, "joybut %d %lx\n", available, buttons);
    d7a8:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    d7ac:	4a09      	ldr	r2, [pc, #36]	; (d7d4 <UUsbHost::sendButtons()+0x2c>)
    d7ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
{
    d7b2:	b510      	push	{r4, lr}
  snprintf(s, MSL, "joybut %d %lx\n", available, buttons);
    d7b4:	f8d3 4198 	ldr.w	r4, [r3, #408]	; 0x198
{
    d7b8:	b0ce      	sub	sp, #312	; 0x138
  snprintf(s, MSL, "joybut %d %lx\n", available, buttons);
    d7ba:	9400      	str	r4, [sp, #0]
    d7bc:	a803      	add	r0, sp, #12
    d7be:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
    d7c2:	f00d ff67 	bl	1b694 <snprintf>
  usb.send(s);
    d7c6:	a903      	add	r1, sp, #12
    d7c8:	4803      	ldr	r0, [pc, #12]	; (d7d8 <UUsbHost::sendButtons()+0x30>)
    d7ca:	f7fe fea7 	bl	c51c <UUSB::send(char const*)>
}
    d7ce:	b04e      	add	sp, #312	; 0x138
    d7d0:	bd10      	pop	{r4, pc}
    d7d2:	bf00      	nop
    d7d4:	20007aa0 	.word	0x20007aa0
    d7d8:	2000eab8 	.word	0x2000eab8

0000d7dc <UUsbHost::sendJoy()>:

void UUsbHost::sendJoy()
{
    d7dc:	b510      	push	{r4, lr}
    d7de:	4686      	mov	lr, r0
    d7e0:	b0e2      	sub	sp, #392	; 0x188
  const int MSL = 300;
  char s[MSL];
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d7e2:	4a33      	ldr	r2, [pc, #204]	; (d8b0 <UUsbHost::sendJoy()+0xd4>)
    d7e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
          (psAxis[2] - 127) << 7, 
          -(psAxis[5] - 127) << 7, 
          (psAxis[4] - 127) << 7, 
          (psAxis[6] - 127) << 7, 
          (psAxis[7] - 127) << 7,
          (buttons & (1 << 2)) > 0,
    d7e8:	f50e 5c00 	add.w	ip, lr, #8192	; 0x2000
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d7ec:	a817      	add	r0, sp, #92	; 0x5c
          (psAxis[7] - 127) << 7,
    d7ee:	f8dc 31c0 	ldr.w	r3, [ip, #448]	; 0x1c0
    d7f2:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d7f4:	01db      	lsls	r3, r3, #7
    d7f6:	930a      	str	r3, [sp, #40]	; 0x28
          (psAxis[6] - 127) << 7, 
    d7f8:	f8dc 31bc 	ldr.w	r3, [ip, #444]	; 0x1bc
    d7fc:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d7fe:	01db      	lsls	r3, r3, #7
    d800:	9309      	str	r3, [sp, #36]	; 0x24
          (psAxis[4] - 127) << 7, 
    d802:	f8dc 31b4 	ldr.w	r3, [ip, #436]	; 0x1b4
    d806:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d808:	01db      	lsls	r3, r3, #7
    d80a:	9308      	str	r3, [sp, #32]
          -(psAxis[5] - 127) << 7, 
    d80c:	f8dc 31b8 	ldr.w	r3, [ip, #440]	; 0x1b8
    d810:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d814:	01db      	lsls	r3, r3, #7
    d816:	9307      	str	r3, [sp, #28]
          (psAxis[2] - 127) << 7, 
    d818:	f8dc 31ac 	ldr.w	r3, [ip, #428]	; 0x1ac
    d81c:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d81e:	01db      	lsls	r3, r3, #7
    d820:	9306      	str	r3, [sp, #24]
          (psAxis[3] - 127) << 7, 
    d822:	f8dc 31b0 	ldr.w	r3, [ip, #432]	; 0x1b0
    d826:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d828:	01db      	lsls	r3, r3, #7
    d82a:	9305      	str	r3, [sp, #20]
          -(psAxis[1] - 127) << 7, 
    d82c:	f8dc 31a8 	ldr.w	r3, [ip, #424]	; 0x1a8
    d830:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d834:	01db      	lsls	r3, r3, #7
    d836:	9304      	str	r3, [sp, #16]
          (psAxis[0] - 127) << 7, 
    d838:	f8dc 31a4 	ldr.w	r3, [ip, #420]	; 0x1a4
    d83c:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d83e:	01db      	lsls	r3, r3, #7
    d840:	9303      	str	r3, [sp, #12]
    d842:	f89c 43a8 	ldrb.w	r4, [ip, #936]	; 0x3a8
          (buttons & (1 << 2)) > 0,
    d846:	f8dc 3198 	ldr.w	r3, [ip, #408]	; 0x198
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d84a:	9402      	str	r4, [sp, #8]
    d84c:	f89c 43a7 	ldrb.w	r4, [ip, #935]	; 0x3a7
    d850:	9401      	str	r4, [sp, #4]
    d852:	f3c3 14c0 	ubfx	r4, r3, #7, #1
    d856:	9415      	str	r4, [sp, #84]	; 0x54
    d858:	f3c3 2480 	ubfx	r4, r3, #10, #1
    d85c:	9414      	str	r4, [sp, #80]	; 0x50
    d85e:	f3c3 2400 	ubfx	r4, r3, #8, #1
    d862:	9413      	str	r4, [sp, #76]	; 0x4c
    d864:	f3c3 2440 	ubfx	r4, r3, #9, #1
    d868:	9412      	str	r4, [sp, #72]	; 0x48
    d86a:	f3c3 1480 	ubfx	r4, r3, #6, #1
    d86e:	9411      	str	r4, [sp, #68]	; 0x44
    d870:	f3c3 1440 	ubfx	r4, r3, #5, #1
    d874:	9410      	str	r4, [sp, #64]	; 0x40
    d876:	f3c3 1400 	ubfx	r4, r3, #4, #1
    d87a:	940f      	str	r4, [sp, #60]	; 0x3c
    d87c:	f003 0401 	and.w	r4, r3, #1
    d880:	940e      	str	r4, [sp, #56]	; 0x38
    d882:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    d886:	940d      	str	r4, [sp, #52]	; 0x34
    d888:	f3c3 0440 	ubfx	r4, r3, #1, #1
    d88c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d890:	940c      	str	r4, [sp, #48]	; 0x30
    d892:	930b      	str	r3, [sp, #44]	; 0x2c
    d894:	f89e 3014 	ldrb.w	r3, [lr, #20]
    d898:	9300      	str	r3, [sp, #0]
    d89a:	f89c 33a6 	ldrb.w	r3, [ip, #934]	; 0x3a6
    d89e:	f00d fef9 	bl	1b694 <snprintf>
          (buttons & (1 << 9)) > 0,
          (buttons & (1 << 8)) > 0,
          (buttons & (1 << 10)) > 0,
          (buttons & (1 << 7)) > 0
  );
  usb.send(s);
    d8a2:	a917      	add	r1, sp, #92	; 0x5c
    d8a4:	4803      	ldr	r0, [pc, #12]	; (d8b4 <UUsbHost::sendJoy()+0xd8>)
    d8a6:	f7fe fe39 	bl	c51c <UUSB::send(char const*)>
}
    d8aa:	b062      	add	sp, #392	; 0x188
    d8ac:	bd10      	pop	{r4, pc}
    d8ae:	bf00      	nop
    d8b0:	20007c20 	.word	0x20007c20
    d8b4:	2000eab8 	.word	0x2000eab8

0000d8b8 <UUsbHost::sendData(int)>:
{
    d8b8:	4603      	mov	r3, r0
  if (item == 0)
    d8ba:	b1b1      	cbz	r1, d8ea <UUsbHost::sendData(int)+0x32>
  if (item == 1)
    d8bc:	2901      	cmp	r1, #1
    d8be:	d011      	beq.n	d8e4 <UUsbHost::sendData(int)+0x2c>
  if (item == 2 and (axisChanged or buttonChanged))
    d8c0:	2902      	cmp	r1, #2
    d8c2:	d114      	bne.n	d8ee <UUsbHost::sendData(int)+0x36>
    d8c4:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
    d8c8:	f892 13aa 	ldrb.w	r1, [r2, #938]	; 0x3aa
    d8cc:	b911      	cbnz	r1, d8d4 <UUsbHost::sendData(int)+0x1c>
    d8ce:	f892 13a9 	ldrb.w	r1, [r2, #937]	; 0x3a9
    d8d2:	b149      	cbz	r1, d8e8 <UUsbHost::sendData(int)+0x30>
    buttonChanged = false;
    d8d4:	2100      	movs	r1, #0
    sendJoy();
    d8d6:	4618      	mov	r0, r3
    buttonChanged = false;
    d8d8:	f882 13a9 	strb.w	r1, [r2, #937]	; 0x3a9
    axisChanged = false;
    d8dc:	f882 13aa 	strb.w	r1, [r2, #938]	; 0x3aa
    sendJoy();
    d8e0:	f7ff bf7c 	b.w	d7dc <UUsbHost::sendJoy()>
    sendButtons();
    d8e4:	f7ff bf60 	b.w	d7a8 <UUsbHost::sendButtons()>
}
    d8e8:	4770      	bx	lr
    sendAxis();
    d8ea:	f7ff bf17 	b.w	d71c <UUsbHost::sendAxis()>
    d8ee:	4770      	bx	lr

0000d8f0 <UUsbHost::PrintDeviceListChanges()>:
#if defined REGBOT_HW41 && defined useUSBhost
//=============================================================================
// Show when devices are added or removed
//=============================================================================
void UUsbHost::PrintDeviceListChanges() 
{
    d8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d8f4:	f242 1454 	movw	r4, #8532	; 0x2154
    d8f8:	2600      	movs	r6, #0
    d8fa:	b09f      	sub	sp, #124	; 0x7c
//         hid_driver_active[i] = false;
      } 
      else 
      {
        anyAvailable = true;
        snprintf(s, MSL, "# *** HID Device %d type=%d, %s %x:%x - connected ***\n", i, joysticks[i].joystickType(), hid_driver_names[i], hiddrivers[i]->idVendor(), hiddrivers[i]->idProduct());
    d8fc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; d9f8 <UUsbHost::PrintDeviceListChanges()+0x108>
        usb.send(s);
    d900:	4f39      	ldr	r7, [pc, #228]	; (d9e8 <UUsbHost::PrintDeviceListChanges()+0xf8>)
  bool anyAvailable = false;
    d902:	4631      	mov	r1, r6
    d904:	4404      	add	r4, r0
    d906:	4605      	mov	r5, r0
          usb.send(s);
        }
        psz = hiddrivers[i]->serialNumber();
        if (psz && *psz) 
        {
          snprintf(s, MSL, "#  Serial: %s\n", psz);
    d908:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d9fc <UUsbHost::PrintDeviceListChanges()+0x10c>
    operator bool() { return (mydevice != nullptr); }
    d90c:	f854 3f04 	ldr.w	r3, [r4, #4]!
    d910:	689a      	ldr	r2, [r3, #8]
      if (not *hiddrivers[i]) 
    d912:	b342      	cbz	r2, d966 <UUsbHost::PrintDeviceListChanges()+0x76>
        snprintf(s, MSL, "# *** HID Device %d type=%d, %s %x:%x - connected ***\n", i, joysticks[i].joystickType(), hid_driver_names[i], hiddrivers[i]->idVendor(), hiddrivers[i]->idProduct());
    d914:	8c11      	ldrh	r1, [r2, #32]
    d916:	4633      	mov	r3, r6
    d918:	a805      	add	r0, sp, #20
    d91a:	9103      	str	r1, [sp, #12]
    d91c:	2164      	movs	r1, #100	; 0x64
    d91e:	8bd2      	ldrh	r2, [r2, #30]
    d920:	9202      	str	r2, [sp, #8]
    d922:	6922      	ldr	r2, [r4, #16]
    d924:	9201      	str	r2, [sp, #4]
    d926:	f895 2b4c 	ldrb.w	r2, [r5, #2892]	; 0xb4c
    d92a:	9200      	str	r2, [sp, #0]
    d92c:	4642      	mov	r2, r8
    d92e:	f00d feb1 	bl	1b694 <snprintf>
        usb.send(s);
    d932:	a905      	add	r1, sp, #20
    d934:	4638      	mov	r0, r7
    d936:	f7fe fdf1 	bl	c51c <UUSB::send(char const*)>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_MAN]]; }
    d93a:	6821      	ldr	r1, [r4, #0]
    d93c:	688b      	ldr	r3, [r1, #8]
    d93e:	b18b      	cbz	r3, d964 <UUsbHost::PrintDeviceListChanges()+0x74>
    d940:	691a      	ldr	r2, [r3, #16]
    d942:	b142      	cbz	r2, d956 <UUsbHost::PrintDeviceListChanges()+0x66>
    d944:	7813      	ldrb	r3, [r2, #0]
        if (psz && *psz) 
    d946:	18d0      	adds	r0, r2, r3
    d948:	78c0      	ldrb	r0, [r0, #3]
    d94a:	2800      	cmp	r0, #0
    d94c:	d131      	bne.n	d9b2 <UUsbHost::PrintDeviceListChanges()+0xc2>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_PROD]]; }
    d94e:	7853      	ldrb	r3, [r2, #1]
        if (psz && *psz) 
    d950:	18d0      	adds	r0, r2, r3
    d952:	78c0      	ldrb	r0, [r0, #3]
    d954:	b9e8      	cbnz	r0, d992 <UUsbHost::PrintDeviceListChanges()+0xa2>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_SERIAL]]; }
    d956:	688b      	ldr	r3, [r1, #8]
    d958:	691a      	ldr	r2, [r3, #16]
    d95a:	b11a      	cbz	r2, d964 <UUsbHost::PrintDeviceListChanges()+0x74>
    d95c:	7893      	ldrb	r3, [r2, #2]
        if (psz && *psz) 
    d95e:	18d1      	adds	r1, r2, r3
    d960:	78c9      	ldrb	r1, [r1, #3]
    d962:	b951      	cbnz	r1, d97a <UUsbHost::PrintDeviceListChanges()+0x8a>
        anyAvailable = true;
    d964:	2101      	movs	r1, #1
  for (uint8_t i = 0; i < CNT_HIDDEVICES; i++) 
    d966:	3601      	adds	r6, #1
    d968:	f505 65a8 	add.w	r5, r5, #1344	; 0x540
    d96c:	2e04      	cmp	r6, #4
    d96e:	d1cd      	bne.n	d90c <UUsbHost::PrintDeviceListChanges()+0x1c>
          usb.send(s);
        }
      }
    }
  }
  if (not anyAvailable)
    d970:	2900      	cmp	r1, #0
    d972:	d031      	beq.n	d9d8 <UUsbHost::PrintDeviceListChanges()+0xe8>
    usb.send("# No HID devices available\r\n");
}
    d974:	b01f      	add	sp, #124	; 0x7c
    d976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d97a:	3303      	adds	r3, #3
          snprintf(s, MSL, "#  Serial: %s\n", psz);
    d97c:	2164      	movs	r1, #100	; 0x64
    d97e:	a805      	add	r0, sp, #20
    d980:	4413      	add	r3, r2
    d982:	464a      	mov	r2, r9
    d984:	f00d fe86 	bl	1b694 <snprintf>
          usb.send(s);
    d988:	a905      	add	r1, sp, #20
    d98a:	4638      	mov	r0, r7
    d98c:	f7fe fdc6 	bl	c51c <UUSB::send(char const*)>
    d990:	e7e8      	b.n	d964 <UUsbHost::PrintDeviceListChanges()+0x74>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_PROD]]; }
    d992:	3303      	adds	r3, #3
          snprintf(s, MSL, "#  product: %s\n", psz);
    d994:	2164      	movs	r1, #100	; 0x64
    d996:	a805      	add	r0, sp, #20
    d998:	4413      	add	r3, r2
    d99a:	4a14      	ldr	r2, [pc, #80]	; (d9ec <UUsbHost::PrintDeviceListChanges()+0xfc>)
    d99c:	f00d fe7a 	bl	1b694 <snprintf>
          usb.send(s);
    d9a0:	a905      	add	r1, sp, #20
    d9a2:	4638      	mov	r0, r7
    d9a4:	f7fe fdba 	bl	c51c <UUSB::send(char const*)>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_SERIAL]]; }
    d9a8:	6823      	ldr	r3, [r4, #0]
    d9aa:	689b      	ldr	r3, [r3, #8]
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d1d3      	bne.n	d958 <UUsbHost::PrintDeviceListChanges()+0x68>
    d9b0:	e7d8      	b.n	d964 <UUsbHost::PrintDeviceListChanges()+0x74>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_MAN]]; }
    d9b2:	3303      	adds	r3, #3
          snprintf(s, MSL, "#  manufacturer: %s\n", psz);
    d9b4:	2164      	movs	r1, #100	; 0x64
    d9b6:	a805      	add	r0, sp, #20
    d9b8:	4413      	add	r3, r2
    d9ba:	4a0d      	ldr	r2, [pc, #52]	; (d9f0 <UUsbHost::PrintDeviceListChanges()+0x100>)
    d9bc:	f00d fe6a 	bl	1b694 <snprintf>
          usb.send(s);
    d9c0:	a905      	add	r1, sp, #20
    d9c2:	4638      	mov	r0, r7
    d9c4:	f7fe fdaa 	bl	c51c <UUSB::send(char const*)>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_PROD]]; }
    d9c8:	6821      	ldr	r1, [r4, #0]
    d9ca:	688b      	ldr	r3, [r1, #8]
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	d0c9      	beq.n	d964 <UUsbHost::PrintDeviceListChanges()+0x74>
    d9d0:	691a      	ldr	r2, [r3, #16]
    d9d2:	2a00      	cmp	r2, #0
    d9d4:	d1bb      	bne.n	d94e <UUsbHost::PrintDeviceListChanges()+0x5e>
    d9d6:	e7be      	b.n	d956 <UUsbHost::PrintDeviceListChanges()+0x66>
    usb.send("# No HID devices available\r\n");
    d9d8:	4906      	ldr	r1, [pc, #24]	; (d9f4 <UUsbHost::PrintDeviceListChanges()+0x104>)
    d9da:	4803      	ldr	r0, [pc, #12]	; (d9e8 <UUsbHost::PrintDeviceListChanges()+0xf8>)
    d9dc:	f7fe fd9e 	bl	c51c <UUSB::send(char const*)>
}
    d9e0:	b01f      	add	sp, #124	; 0x7c
    d9e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d9e6:	bf00      	nop
    d9e8:	2000eab8 	.word	0x2000eab8
    d9ec:	20007b00 	.word	0x20007b00
    d9f0:	20007ae8 	.word	0x20007ae8
    d9f4:	20007b20 	.word	0x20007b20
    d9f8:	20007ab0 	.word	0x20007ab0
    d9fc:	20007b10 	.word	0x20007b10

0000da00 <UUsbHost::decode(char const*)>:
{
    da00:	b538      	push	{r3, r4, r5, lr}
    da02:	460d      	mov	r5, r1
    da04:	4604      	mov	r4, r0
  if (strncmp(buf, "usbhost ", 8) == 0)
    da06:	2208      	movs	r2, #8
    da08:	4927      	ldr	r1, [pc, #156]	; (daa8 <UUsbHost::decode(char const*)+0xa8>)
    da0a:	4628      	mov	r0, r5
    da0c:	f00e f8fa 	bl	1bc04 <strncmp>
    da10:	b3a8      	cbz	r0, da7e <UUsbHost::decode(char const*)+0x7e>
  else if (strncmp(buf, "joyn", 4) == 0)
    da12:	2204      	movs	r2, #4
    da14:	4925      	ldr	r1, [pc, #148]	; (daac <UUsbHost::decode(char const*)+0xac>)
    da16:	4628      	mov	r0, r5
    da18:	f00e f8f4 	bl	1bc04 <strncmp>
    da1c:	b9c8      	cbnz	r0, da52 <UUsbHost::decode(char const*)+0x52>
      joysticks[joystick_index].axisChangeNotifyMask(joystick_full_notify_mask);
    da1e:	f242 1390 	movw	r3, #8592	; 0x2190
    void     axisChangeNotifyMask(uint64_t notify_mask) {axis_change_notify_mask_ = notify_mask;}
    da22:	f504 518e 	add.w	r1, r4, #4544	; 0x11c0
    da26:	f504 6548 	add.w	r5, r4, #3200	; 0xc80
    da2a:	f504 50b8 	add.w	r0, r4, #5888	; 0x1700
    da2e:	4423      	add	r3, r4
    da30:	e9d3 2300 	ldrd	r2, r3, [r3]
    da34:	e945 2302 	strd	r2, r3, [r5, #-8]
    da38:	e941 2302 	strd	r2, r3, [r1, #-8]
    da3c:	f504 51e2 	add.w	r1, r4, #7232	; 0x1c40
    da40:	e940 2302 	strd	r2, r3, [r0, #-8]
    PrintDeviceListChanges();
    da44:	4620      	mov	r0, r4
    da46:	e941 2302 	strd	r2, r3, [r1, #-8]
    da4a:	f7ff ff51 	bl	d8f0 <UUsbHost::PrintDeviceListChanges()>
}
    da4e:	2001      	movs	r0, #1
    da50:	bd38      	pop	{r3, r4, r5, pc}
  else if (strncmp(buf, "joyc ", 4) == 0)
    da52:	2204      	movs	r2, #4
    da54:	4916      	ldr	r1, [pc, #88]	; (dab0 <UUsbHost::decode(char const*)+0xb0>)
    da56:	4628      	mov	r0, r5
    da58:	f00e f8d4 	bl	1bc04 <strncmp>
    da5c:	b9f0      	cbnz	r0, da9c <UUsbHost::decode(char const*)+0x9c>
    int v = strtol(p1, nullptr, 10);
    da5e:	4601      	mov	r1, r0
    da60:	220a      	movs	r2, #10
    da62:	1d68      	adds	r0, r5, #5
    show_changed_only = v == 1;
    da64:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    int v = strtol(p1, nullptr, 10);
    da68:	f00d fc24 	bl	1b2b4 <strtol>
    show_changed_only = v == 1;
    da6c:	f1a0 0001 	sub.w	r0, r0, #1
    da70:	fab0 f080 	clz	r0, r0
    da74:	0940      	lsrs	r0, r0, #5
    da76:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
}
    da7a:	2001      	movs	r0, #1
    da7c:	bd38      	pop	{r3, r4, r5, pc}
    const char * p1 = &buf[8];
    da7e:	f105 0108 	add.w	r1, r5, #8
    int v = strtol(p1, (char **)p1, 10);
    da82:	220a      	movs	r2, #10
    active = v;
    da84:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    int v = strtol(p1, (char **)p1, 10);
    da88:	4608      	mov	r0, r1
    da8a:	f00d fc13 	bl	1b2b4 <strtol>
    active = v;
    da8e:	3800      	subs	r0, #0
    da90:	bf18      	it	ne
    da92:	2001      	movne	r0, #1
    da94:	f884 03a4 	strb.w	r0, [r4, #932]	; 0x3a4
}
    da98:	2001      	movs	r0, #1
    da9a:	bd38      	pop	{r3, r4, r5, pc}
  else if (subscribeDecode(buf)) {}
    da9c:	4629      	mov	r1, r5
    da9e:	4620      	mov	r0, r4
}
    daa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  else if (subscribeDecode(buf)) {}
    daa4:	f7fe bb52 	b.w	c14c <USubss::subscribeDecode(char const*)>
    daa8:	20007c04 	.word	0x20007c04
    daac:	20007c10 	.word	0x20007c10
    dab0:	20007c18 	.word	0x20007c18

0000dab4 <_GLOBAL__sub_I_usbhost>:
}
    dab4:	b510      	push	{r4, lr}
UUsbHost usbhost;
    dab6:	4c05      	ldr	r4, [pc, #20]	; (dacc <_GLOBAL__sub_I_usbhost+0x18>)
    dab8:	4620      	mov	r0, r4
    daba:	f7ff f9dd 	bl	ce78 <UUsbHost::UUsbHost()>
    dabe:	4620      	mov	r0, r4
    dac0:	4a03      	ldr	r2, [pc, #12]	; (dad0 <_GLOBAL__sub_I_usbhost+0x1c>)
    dac2:	4904      	ldr	r1, [pc, #16]	; (dad4 <_GLOBAL__sub_I_usbhost+0x20>)
}
    dac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UUsbHost usbhost;
    dac8:	f00b ba16 	b.w	18ef8 <__aeabi_atexit>
    dacc:	2000a400 	.word	0x2000a400
    dad0:	20008f08 	.word	0x20008f08
    dad4:	0000ce59 	.word	0x0000ce59

0000dad8 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    dad8:	b538      	push	{r3, r4, r5, lr}
    dada:	4604      	mov	r4, r0
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
#endif
#else
             adc0_obj(0, channel2sc1aADC0, ADC0_START)
    dadc:	4b0a      	ldr	r3, [pc, #40]	; (db08 <ADC::ADC()+0x30>)
    dade:	4a0b      	ldr	r2, [pc, #44]	; (db0c <ADC::ADC()+0x34>)
    dae0:	2100      	movs	r1, #0
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
    dae2:	f104 0534 	add.w	r5, r4, #52	; 0x34
             adc0_obj(0, channel2sc1aADC0, ADC0_START)
    dae6:	f000 fb59 	bl	e19c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
    daea:	4b09      	ldr	r3, [pc, #36]	; (db10 <ADC::ADC()+0x38>)
    daec:	2101      	movs	r1, #1
    daee:	4a09      	ldr	r2, [pc, #36]	; (db14 <ADC::ADC()+0x3c>)
    daf0:	4628      	mov	r0, r5
    daf2:	f000 fb53 	bl	e19c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>
    daf6:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    daf8:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
    dafa:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    dafe:	e9c4 451b 	strd	r4, r5, [r4, #108]	; 0x6c
    db02:	e9c4 451d 	strd	r4, r5, [r4, #116]	; 0x74
}
    db06:	bd38      	pop	{r3, r4, r5, pc}
    db08:	400c4000 	.word	0x400c4000
    db0c:	20003c4c 	.word	0x20003c4c
    db10:	400c8000 	.word	0x400c8000
    db14:	20003c78 	.word	0x20003c78

0000db18 <ADC::analogRead(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->analogRead(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    db18:	1c53      	adds	r3, r2, #1
{
    db1a:	b570      	push	{r4, r5, r6, lr}
    db1c:	4604      	mov	r4, r0
    if (adc_num == -1)
    db1e:	d00c      	beq.n	db3a <ADC::analogRead(unsigned char, signed char)+0x22>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return ADC_ERROR_VALUE; // all others are invalid
        }
    }
    else if (adc_num == 0)
    db20:	b132      	cbz	r2, db30 <ADC::analogRead(unsigned char, signed char)+0x18>
    { // user wants ADC0
        return adc0->analogRead(pin);
    }
    else if (adc_num == 1)
    db22:	2a01      	cmp	r2, #1
    db24:	d12d      	bne.n	db82 <ADC::analogRead(unsigned char, signed char)+0x6a>
    { // user wants ADC 1
        return adc1->analogRead(pin);
    db26:	6f00      	ldr	r0, [r0, #112]	; 0x70
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    return ADC_ERROR_VALUE;
#endif
}
    db28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->analogRead(pin);
    db2c:	f000 bb94 	b.w	e258 <ADC_Module::analogRead(unsigned char)>
        return adc0->analogRead(pin);
    db30:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
}
    db32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->analogRead(pin);
    db36:	f000 bb8f 	b.w	e258 <ADC_Module::analogRead(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    db3a:	460d      	mov	r5, r1
    db3c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    db3e:	f000 fb7f 	bl	e240 <ADC_Module::checkPin(unsigned char)>
    db42:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    db44:	4629      	mov	r1, r5
    db46:	6f20      	ldr	r0, [r4, #112]	; 0x70
    db48:	f000 fb7a 	bl	e240 <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    db4c:	b166      	cbz	r6, db68 <ADC::analogRead(unsigned char, signed char)+0x50>
    db4e:	b190      	cbz	r0, db76 <ADC::analogRead(unsigned char, signed char)+0x5e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    db50:	e9d4 301b 	ldrd	r3, r0, [r4, #108]	; 0x6c
    db54:	7c59      	ldrb	r1, [r3, #17]
    db56:	7c42      	ldrb	r2, [r0, #17]
    db58:	4291      	cmp	r1, r2
                return adc1->analogRead(pin);
    db5a:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    db5c:	d8e4      	bhi.n	db28 <ADC::analogRead(unsigned char, signed char)+0x10>
                return adc0->analogRead(pin);
    db5e:	4618      	mov	r0, r3
}
    db60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->analogRead(pin);
    db64:	f000 bb78 	b.w	e258 <ADC_Module::analogRead(unsigned char)>
        else if (adc1Pin)
    db68:	b198      	cbz	r0, db92 <ADC::analogRead(unsigned char, signed char)+0x7a>
            return adc1->analogRead(pin);
    db6a:	4629      	mov	r1, r5
    db6c:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    db6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->analogRead(pin);
    db72:	f000 bb71 	b.w	e258 <ADC_Module::analogRead(unsigned char)>
            return adc0->analogRead(pin);
    db76:	4629      	mov	r1, r5
    db78:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    db7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->analogRead(pin);
    db7e:	f000 bb6b 	b.w	e258 <ADC_Module::analogRead(unsigned char)>
    adc0->fail_flag |= ADC_ERROR::OTHER;
    db82:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    return ADC_ERROR_VALUE;
    db84:	480a      	ldr	r0, [pc, #40]	; (dbb0 <ADC::analogRead(unsigned char, signed char)+0x98>)
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    db86:	8a53      	ldrh	r3, [r2, #18]
    db88:	b29b      	uxth	r3, r3
    db8a:	f043 0301 	orr.w	r3, r3, #1
    db8e:	8253      	strh	r3, [r2, #18]
}
    db90:	bd70      	pop	{r4, r5, r6, pc}
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    db92:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	; 0x6c
            return ADC_ERROR_VALUE; // all others are invalid
    db96:	4806      	ldr	r0, [pc, #24]	; (dbb0 <ADC::analogRead(unsigned char, signed char)+0x98>)
    db98:	8a4b      	ldrh	r3, [r1, #18]
    db9a:	b29b      	uxth	r3, r3
    db9c:	f043 0304 	orr.w	r3, r3, #4
    dba0:	824b      	strh	r3, [r1, #18]
    dba2:	8a53      	ldrh	r3, [r2, #18]
    dba4:	b29b      	uxth	r3, r3
    dba6:	f043 0304 	orr.w	r3, r3, #4
    dbaa:	8253      	strh	r3, [r2, #18]
}
    dbac:	bd70      	pop	{r4, r5, r6, pc}
    dbae:	bf00      	nop
    dbb0:	fffeee90 	.word	0xfffeee90

0000dbb4 <ADC::startSingleRead(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startSingleRead(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    dbb4:	1c53      	adds	r3, r2, #1
{
    dbb6:	b570      	push	{r4, r5, r6, lr}
    dbb8:	4604      	mov	r4, r0
    if (adc_num == -1)
    dbba:	d00f      	beq.n	dbdc <ADC::startSingleRead(unsigned char, signed char)+0x28>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    dbbc:	b14a      	cbz	r2, dbd2 <ADC::startSingleRead(unsigned char, signed char)+0x1e>
    { // user wants ADC0
        return adc0->startSingleRead(pin);
    }
    else if (adc_num == 1)
    dbbe:	2a01      	cmp	r2, #1
    dbc0:	d023      	beq.n	dc0a <ADC::startSingleRead(unsigned char, signed char)+0x56>
    { // user wants ADC 1
        return adc1->startSingleRead(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    dbc2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    return false;
    dbc4:	2000      	movs	r0, #0
    dbc6:	8a53      	ldrh	r3, [r2, #18]
    dbc8:	b29b      	uxth	r3, r3
    dbca:	f043 0301 	orr.w	r3, r3, #1
    dbce:	8253      	strh	r3, [r2, #18]
#endif
}
    dbd0:	bd70      	pop	{r4, r5, r6, pc}
        return adc0->startSingleRead(pin);
    dbd2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
}
    dbd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startSingleRead(pin);
    dbd8:	f000 bbb2 	b.w	e340 <ADC_Module::startSingleRead(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    dbdc:	460d      	mov	r5, r1
    dbde:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    dbe0:	f000 fb2e 	bl	e240 <ADC_Module::checkPin(unsigned char)>
    dbe4:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    dbe6:	4629      	mov	r1, r5
    dbe8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    dbea:	f000 fb29 	bl	e240 <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    dbee:	b18e      	cbz	r6, dc14 <ADC::startSingleRead(unsigned char, signed char)+0x60>
    dbf0:	b1f0      	cbz	r0, dc30 <ADC::startSingleRead(unsigned char, signed char)+0x7c>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    dbf2:	e9d4 301b 	ldrd	r3, r0, [r4, #108]	; 0x6c
    dbf6:	7c59      	ldrb	r1, [r3, #17]
    dbf8:	7c42      	ldrb	r2, [r0, #17]
    dbfa:	4291      	cmp	r1, r2
                return adc1->startSingleRead(pin);
    dbfc:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    dbfe:	d805      	bhi.n	dc0c <ADC::startSingleRead(unsigned char, signed char)+0x58>
                return adc0->startSingleRead(pin);
    dc00:	4618      	mov	r0, r3
}
    dc02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startSingleRead(pin);
    dc06:	f000 bb9b 	b.w	e340 <ADC_Module::startSingleRead(unsigned char)>
        return adc1->startSingleRead(pin);
    dc0a:	6f00      	ldr	r0, [r0, #112]	; 0x70
}
    dc0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startSingleRead(pin);
    dc10:	f000 bb96 	b.w	e340 <ADC_Module::startSingleRead(unsigned char)>
        else if (adc1Pin)
    dc14:	b990      	cbnz	r0, dc3c <ADC::startSingleRead(unsigned char, signed char)+0x88>
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    dc16:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	; 0x6c
    dc1a:	8a4b      	ldrh	r3, [r1, #18]
    dc1c:	b29b      	uxth	r3, r3
    dc1e:	f043 0304 	orr.w	r3, r3, #4
    dc22:	824b      	strh	r3, [r1, #18]
    dc24:	8a53      	ldrh	r3, [r2, #18]
    dc26:	b29b      	uxth	r3, r3
    dc28:	f043 0304 	orr.w	r3, r3, #4
    dc2c:	8253      	strh	r3, [r2, #18]
}
    dc2e:	bd70      	pop	{r4, r5, r6, pc}
            return adc0->startSingleRead(pin);
    dc30:	4629      	mov	r1, r5
    dc32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    dc34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startSingleRead(pin);
    dc38:	f000 bb82 	b.w	e340 <ADC_Module::startSingleRead(unsigned char)>
            return adc1->startSingleRead(pin);
    dc3c:	4629      	mov	r1, r5
    dc3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    dc40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startSingleRead(pin);
    dc44:	f000 bb7c 	b.w	e340 <ADC_Module::startSingleRead(unsigned char)>

0000dc48 <ADC::readSingle(signed char)>:
int ADC::readSingle(int8_t adc_num)
{
#ifdef ADC_SINGLE_ADC
    return adc0->readSingle();
#else
    if (adc_num == 1)
    dc48:	2901      	cmp	r1, #1
    *   otherwise values larger than 3.3/2 V are interpreted as negative!
    */
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
    dc4a:	bf0c      	ite	eq
    dc4c:	6f03      	ldreq	r3, [r0, #112]	; 0x70
    dc4e:	6ec3      	ldrne	r3, [r0, #108]	; 0x6c
    dc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc52:	6a58      	ldr	r0, [r3, #36]	; 0x24
    dc54:	b200      	sxth	r0, r0
    { // user wants ADC 1, do nothing if it's a Teensy 3.0
        return adc1->readSingle();
    }
    return adc0->readSingle();
#endif
}
    dc56:	4770      	bx	lr

0000dc58 <ADC_Module::calibrate()>:
    __disable_irq();
    dc58:	b672      	cpsid	i
    calibrating = 1;
    dc5a:	2301      	movs	r3, #1
    atomic::clearBitFlag(adc_regs.GC, ADC_GC_CAL);
    dc5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    calibrating = 1;
    dc5e:	7543      	strb	r3, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    dc60:	b672      	cpsid	i
        reg &= ~flag;
    dc62:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dc64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dc68:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dc6a:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GS, ADC_GS_CALF);
    dc6c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dc6e:	b672      	cpsid	i
        reg |= flag;
    dc70:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    dc72:	f043 0302 	orr.w	r3, r3, #2
    dc76:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
    dc78:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
    dc7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dc7c:	b672      	cpsid	i
        reg |= flag;
    dc7e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dc84:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dc86:	b662      	cpsie	i
    __enable_irq();
    dc88:	b662      	cpsie	i
}
    dc8a:	4770      	bx	lr

0000dc8c <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)>:
    if (analog_reference_internal == ref_type)
    dc8c:	7f43      	ldrb	r3, [r0, #29]
    dc8e:	428b      	cmp	r3, r1
    dc90:	d01b      	beq.n	dcca <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0x3e>
    if (ref_type == ADC_REF_SOURCE::REF_ALT)
    dc92:	2901      	cmp	r1, #1
    dc94:	d023      	beq.n	dcde <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0x52>
    else if (ref_type == ADC_REF_SOURCE::REF_DEFAULT)
    dc96:	b1c9      	cbz	r1, dccc <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0x40>
    __disable_irq();
    dc98:	b672      	cpsid	i
    calibrating = 1;
    dc9a:	2301      	movs	r3, #1
    atomic::clearBitFlag(adc_regs.GC, ADC_GC_CAL);
    dc9c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    calibrating = 1;
    dc9e:	7543      	strb	r3, [r0, #21]
        __disable_irq();
    dca0:	b672      	cpsid	i
        reg &= ~flag;
    dca2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dca8:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dcaa:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GS, ADC_GS_CALF);
    dcac:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dcae:	b672      	cpsid	i
        reg |= flag;
    dcb0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    dcb2:	f043 0302 	orr.w	r3, r3, #2
    dcb6:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
    dcb8:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
    dcba:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dcbc:	b672      	cpsid	i
        reg |= flag;
    dcbe:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dcc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dcc4:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dcc6:	b662      	cpsie	i
    __enable_irq();
    dcc8:	b662      	cpsie	i
}
    dcca:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
    dccc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    dcce:	7741      	strb	r1, [r0, #29]
        __disable_irq();
    dcd0:	b672      	cpsid	i
        reg &= ~flag;
    dcd2:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dcd4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    dcd8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dcda:	b662      	cpsie	i
    }
    dcdc:	e7dc      	b.n	dc98 <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0xc>
        analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
    dcde:	7741      	strb	r1, [r0, #29]
    dce0:	e7da      	b.n	dc98 <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0xc>
    dce2:	bf00      	nop

0000dce4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
    if (speed == conversion_speed)
    dce4:	7f83      	ldrb	r3, [r0, #30]
    dce6:	428b      	cmp	r3, r1
    dce8:	f000 80e0 	beq.w	deac <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1c8>
{
    dcec:	b470      	push	{r4, r5, r6}
    switch (speed)
    dcee:	2904      	cmp	r1, #4
    dcf0:	f200 810c 	bhi.w	df0c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>
    dcf4:	e8df f011 	tbh	[pc, r1, lsl #1]
    dcf8:	00730025 	.word	0x00730025
    dcfc:	00b50090 	.word	0x00b50090
    dd00:	0005      	.short	0x0005
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    dd02:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd04:	b672      	cpsid	i
        reg |= flag;
    dd06:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dd08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    dd0c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dd0e:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);     // enable ADACK (takes max 5us to be ready)
    dd10:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd12:	b672      	cpsid	i
        reg |= flag;
    dd14:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dd16:	f043 0301 	orr.w	r3, r3, #1
    dd1a:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dd1c:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3)); // select ADACK as clock source
    dd1e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd20:	b672      	cpsid	i
        reg |= flag;
    dd22:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dd24:	f043 0303 	orr.w	r3, r3, #3
    dd28:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dd2a:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3)); // select no dividers
    dd2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd2e:	b672      	cpsid	i
        reg &= ~flag;
    dd30:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dd32:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    dd36:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dd38:	b662      	cpsie	i
}
    dd3a:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
    dd3c:	7781      	strb	r1, [r0, #30]
    calibrate();
    dd3e:	f7ff bf8b 	b.w	dc58 <ADC_Module::calibrate()>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    dd42:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd44:	b672      	cpsid	i
        reg &= ~flag;
    dd46:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dd48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    dd4c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dd4e:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    dd50:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd52:	b672      	cpsid	i
        reg |= flag;
    dd54:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dd56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dd5a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dd5c:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
    dd5e:	4a6f      	ldr	r2, [pc, #444]	; (df1c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
    dd60:	4b6f      	ldr	r3, [pc, #444]	; (df20 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    dd62:	6814      	ldr	r4, [r2, #0]
    dd64:	429c      	cmp	r4, r3
    dd66:	f080 8084 	bcs.w	de72 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x18e>
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
    dd6a:	4b6e      	ldr	r3, [pc, #440]	; (df24 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    dd6c:	429c      	cmp	r4, r3
    dd6e:	d274      	bcs.n	de5a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x176>
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
    dd70:	4b6d      	ldr	r3, [pc, #436]	; (df28 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
    dd72:	429c      	cmp	r4, r3
    dd74:	f080 809b 	bcs.w	deae <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>
        else if (f_adc_clock / 2 >= ADC_MIN_FREQ_16BITS)
    dd78:	4b6c      	ldr	r3, [pc, #432]	; (df2c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x248>)
    dd7a:	2200      	movs	r2, #0
    dd7c:	429c      	cmp	r4, r3
    dd7e:	4616      	mov	r6, r2
    dd80:	bf34      	ite	cc
    dd82:	2400      	movcc	r4, #0
    dd84:	2401      	movcs	r4, #1
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
    dd86:	6a85      	ldr	r5, [r0, #40]	; 0x28
        __disable_irq();
    dd88:	b672      	cpsid	i
        reg &= ~flag;
    dd8a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    dd8c:	f023 0301 	bic.w	r3, r3, #1
    dd90:	64ab      	str	r3, [r5, #72]	; 0x48
        __enable_irq();
    dd92:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
    dd94:	6a83      	ldr	r3, [r0, #40]	; 0x28
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    dd96:	2a00      	cmp	r2, #0
    dd98:	f000 8081 	beq.w	de9e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ba>
        __disable_irq();
    dd9c:	b672      	cpsid	i
        reg |= flag;
    dd9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dda0:	f042 0201 	orr.w	r2, r2, #1
    dda4:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dda6:	b662      	cpsie	i
        __disable_irq();
    dda8:	b672      	cpsid	i
        reg &= ~flag;
    ddaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ddac:	f022 0202 	bic.w	r2, r2, #2
    ddb0:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    ddb2:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
    ddb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    ddb6:	2c00      	cmp	r4, #0
    ddb8:	d05f      	beq.n	de7a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x196>
        __disable_irq();
    ddba:	b672      	cpsid	i
        reg |= flag;
    ddbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ddbe:	f042 0220 	orr.w	r2, r2, #32
    ddc2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    ddc4:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
    ddc6:	2e00      	cmp	r6, #0
    ddc8:	d05f      	beq.n	de8a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1a6>
        __disable_irq();
    ddca:	b672      	cpsid	i
        reg |= flag;
    ddcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ddce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ddd2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    ddd4:	b662      	cpsie	i
}
    ddd6:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
    ddd8:	7781      	strb	r1, [r0, #30]
    calibrate();
    ddda:	f7ff bf3d 	b.w	dc58 <ADC_Module::calibrate()>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    ddde:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dde0:	b672      	cpsid	i
        reg &= ~flag;
    dde2:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dde4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    dde8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    ddea:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    ddec:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    ddee:	b672      	cpsid	i
        reg &= ~flag;
    ddf0:	6c53      	ldr	r3, [r2, #68]	; 0x44
    ddf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ddf6:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    ddf8:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_MEDIUM_SPEED(ADC_F_BUS);
    ddfa:	4a48      	ldr	r2, [pc, #288]	; (df1c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
    ddfc:	4b48      	ldr	r3, [pc, #288]	; (df20 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    ddfe:	6812      	ldr	r2, [r2, #0]
    de00:	429a      	cmp	r2, r3
    de02:	d258      	bcs.n	deb6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1d2>
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
    de04:	4b47      	ldr	r3, [pc, #284]	; (df24 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    de06:	429a      	cmp	r2, r3
    de08:	d268      	bcs.n	dedc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1f8>
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
    de0a:	4b47      	ldr	r3, [pc, #284]	; (df28 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
    de0c:	429a      	cmp	r2, r3
    de0e:	d273      	bcs.n	def8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x214>
    de10:	2200      	movs	r2, #0
    de12:	4616      	mov	r6, r2
    de14:	4614      	mov	r4, r2
    de16:	e7b6      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    de18:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de1a:	b672      	cpsid	i
        reg |= flag;
    de1c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    de22:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de24:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    de26:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de28:	b672      	cpsid	i
        reg &= ~flag;
    de2a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    de30:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de32:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_HIGH_SPEED(ADC_F_BUS);
    de34:	4b39      	ldr	r3, [pc, #228]	; (df1c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock <= ADC_MAX_FREQ)
    de36:	4a3e      	ldr	r2, [pc, #248]	; (df30 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24c>)
    de38:	681b      	ldr	r3, [r3, #0]
    de3a:	4293      	cmp	r3, r2
    de3c:	d9e8      	bls.n	de10 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x12c>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ)
    de3e:	4a3d      	ldr	r2, [pc, #244]	; (df34 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x250>)
    de40:	4293      	cmp	r3, r2
    de42:	d955      	bls.n	def0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x20c>
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
    de44:	4a3c      	ldr	r2, [pc, #240]	; (df38 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x254>)
    de46:	4293      	cmp	r3, r2
    de48:	d931      	bls.n	deae <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
    de4a:	f102 6218 	add.w	r2, r2, #159383552	; 0x9800000
    de4e:	f502 2216 	add.w	r2, r2, #614400	; 0x96000
    de52:	f602 0204 	addw	r2, r2, #2052	; 0x804
    de56:	4293      	cmp	r3, r2
    de58:	d80b      	bhi.n	de72 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x18e>
    de5a:	2601      	movs	r6, #1
    de5c:	2200      	movs	r2, #0
    de5e:	4634      	mov	r4, r6
    de60:	e791      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    de62:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de64:	b672      	cpsid	i
        reg &= ~flag;
    de66:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    de6c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de6e:	b662      	cpsie	i
    if (is_adack)
    de70:	e74e      	b.n	dd10 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x2c>
    de72:	2201      	movs	r2, #1
    de74:	4616      	mov	r6, r2
    de76:	4614      	mov	r4, r2
    de78:	e785      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        __disable_irq();
    de7a:	b672      	cpsid	i
        reg &= ~flag;
    de7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    de7e:	f022 0220 	bic.w	r2, r2, #32
    de82:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    de84:	b662      	cpsie	i
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
    de86:	2e00      	cmp	r6, #0
    de88:	d19f      	bne.n	ddca <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xe6>
        __disable_irq();
    de8a:	b672      	cpsid	i
        reg &= ~flag;
    de8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    de8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    de92:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    de94:	b662      	cpsie	i
}
    de96:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
    de98:	7781      	strb	r1, [r0, #30]
    calibrate();
    de9a:	f7ff bedd 	b.w	dc58 <ADC_Module::calibrate()>
        __disable_irq();
    de9e:	b672      	cpsid	i
        reg &= ~flag;
    dea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dea2:	f022 0201 	bic.w	r2, r2, #1
    dea6:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dea8:	b662      	cpsie	i
    }
    deaa:	e77d      	b.n	dda8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xc4>
    deac:	4770      	bx	lr
    deae:	2200      	movs	r2, #0
    deb0:	2601      	movs	r6, #1
    deb2:	4614      	mov	r4, r2
    deb4:	e767      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    deb6:	4b1f      	ldr	r3, [pc, #124]	; (df34 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x250>)
    deb8:	429a      	cmp	r2, r3
    deba:	d923      	bls.n	df04 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x220>
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
    debc:	4b1e      	ldr	r3, [pc, #120]	; (df38 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x254>)
    debe:	429a      	cmp	r2, r3
    dec0:	d91e      	bls.n	df00 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
    dec2:	f103 6318 	add.w	r3, r3, #159383552	; 0x9800000
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    dec6:	2601      	movs	r6, #1
    dec8:	f503 2316 	add.w	r3, r3, #614400	; 0x96000
    decc:	4634      	mov	r4, r6
    dece:	f603 0304 	addw	r3, r3, #2052	; 0x804
    ded2:	429a      	cmp	r2, r3
    ded4:	bf94      	ite	ls
    ded6:	2200      	movls	r2, #0
    ded8:	2201      	movhi	r2, #1
    deda:	e754      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
    dedc:	4b14      	ldr	r3, [pc, #80]	; (df30 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24c>)
    dede:	429a      	cmp	r2, r3
    dee0:	d90a      	bls.n	def8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x214>
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
    dee2:	2420      	movs	r4, #32
            return ADC_CFG1_HI_SPEED_16_BITS + 0x20;
    dee4:	3420      	adds	r4, #32
    dee6:	2200      	movs	r2, #0
    dee8:	2601      	movs	r6, #1
    deea:	f3c4 1440 	ubfx	r4, r4, #5, #1
    deee:	e74a      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
    def0:	2200      	movs	r2, #0
    def2:	2401      	movs	r4, #1
    def4:	4616      	mov	r6, r2
    def6:	e746      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
    def8:	2600      	movs	r6, #0
    defa:	2401      	movs	r4, #1
    defc:	4632      	mov	r2, r6
    defe:	e742      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
    df00:	2440      	movs	r4, #64	; 0x40
    df02:	e7ef      	b.n	dee4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x200>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    df04:	2400      	movs	r4, #0
    df06:	2601      	movs	r6, #1
    df08:	4622      	mov	r2, r4
            return ADC_CFG1_HI_SPEED_16_BITS + 0x20;
    df0a:	e73c      	b.n	dd86 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    df0c:	8a43      	ldrh	r3, [r0, #18]
    df0e:	b29b      	uxth	r3, r3
    df10:	f043 0301 	orr.w	r3, r3, #1
}
    df14:	bc70      	pop	{r4, r5, r6}
    df16:	8243      	strh	r3, [r0, #18]
    df18:	4770      	bx	lr
    df1a:	bf00      	nop
    df1c:	200094bc 	.word	0x200094bc
    df20:	03d09000 	.word	0x03d09000
    df24:	01e84800 	.word	0x01e84800
    df28:	00f42400 	.word	0x00f42400
    df2c:	007a1200 	.word	0x007a1200
    df30:	02625a00 	.word	0x02625a00
    df34:	04c4b401 	.word	0x04c4b401
    df38:	09896803 	.word	0x09896803

0000df3c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    df3c:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    df3e:	7d43      	ldrb	r3, [r0, #21]
{
    df40:	4604      	mov	r4, r0
    df42:	460d      	mov	r5, r1
    if (calibrating)
    df44:	b9eb      	cbnz	r3, df82 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x46>
    switch (speed)
    df46:	2d07      	cmp	r5, #7
    df48:	d819      	bhi.n	df7e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x42>
    df4a:	e8df f005 	tbb	[pc, r5]
    df4e:	331d      	.short	0x331d
    df50:	59534d40 	.word	0x59534d40
    df54:	045f      	.short	0x045f
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    df56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    df58:	b672      	cpsid	i
        reg &= ~flag;
    df5a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    df5c:	f023 0310 	bic.w	r3, r3, #16
    df60:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    df62:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
    df64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    df66:	b672      	cpsid	i
        reg &= ~flag;
    df68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    df6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    df6e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    df70:	b662      	cpsie	i
        __disable_irq();
    df72:	b672      	cpsid	i
        reg &= ~flag;
    df74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    df76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    df7a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    df7c:	b662      	cpsie	i
    sampling_speed = speed;
    df7e:	77e5      	strb	r5, [r4, #31]
}
    df80:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    df82:	f000 f849 	bl	e018 <ADC_Module::wait_for_cal()>
    df86:	e7de      	b.n	df46 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    df88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    df8a:	b672      	cpsid	i
        reg |= flag;
    df8c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    df8e:	f043 0310 	orr.w	r3, r3, #16
        reg &= ~flag;
    df92:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    df94:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
    df96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    df98:	b672      	cpsid	i
        reg |= flag;
    df9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    df9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        reg &= ~flag;
    dfa0:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dfa2:	b662      	cpsie	i
        __disable_irq();
    dfa4:	b672      	cpsid	i
        reg |= flag;
    dfa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dfa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    dfac:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dfae:	b662      	cpsie	i
    sampling_speed = speed;
    dfb0:	77e5      	strb	r5, [r4, #31]
}
    dfb2:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    dfb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    dfb6:	b672      	cpsid	i
        reg |= flag;
    dfb8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dfba:	f043 0310 	orr.w	r3, r3, #16
    dfbe:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dfc0:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
    dfc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    dfc4:	b672      	cpsid	i
        reg &= ~flag;
    dfc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dfc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    dfcc:	e7e8      	b.n	dfa0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x64>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    dfce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    dfd0:	b672      	cpsid	i
        reg |= flag;
    dfd2:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dfd4:	f043 0310 	orr.w	r3, r3, #16
        reg &= ~flag;
    dfd8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    dfda:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
    dfdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    dfde:	b672      	cpsid	i
        reg |= flag;
    dfe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dfe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    dfe6:	e7c2      	b.n	df6e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x32>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    dfe8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    dfea:	b672      	cpsid	i
        reg |= flag;
    dfec:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dfee:	f043 0310 	orr.w	r3, r3, #16
    dff2:	e7b5      	b.n	df60 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x24>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    dff4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    dff6:	b672      	cpsid	i
        reg &= ~flag;
    dff8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dffa:	f023 0310 	bic.w	r3, r3, #16
    dffe:	e7c8      	b.n	df92 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x56>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    e000:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e002:	b672      	cpsid	i
        reg &= ~flag;
    e004:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e006:	f023 0310 	bic.w	r3, r3, #16
    e00a:	e7d8      	b.n	dfbe <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x82>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    e00c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e00e:	b672      	cpsid	i
        reg &= ~flag;
    e010:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e012:	f023 0310 	bic.w	r3, r3, #16
    e016:	e7df      	b.n	dfd8 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x9c>

0000e018 <ADC_Module::wait_for_cal()>:
{
    e018:	b538      	push	{r3, r4, r5, lr}
    e01a:	2100      	movs	r1, #0
    while (atomic::getBitFlag(adc_regs.GC, ADC_GC_CAL))
    e01c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if (init_calib)
    e01e:	7d82      	ldrb	r2, [r0, #22]
    }

    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
    e020:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    e022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    calibrating = 0;
    e024:	7541      	strb	r1, [r0, #21]
    if (init_calib)
    e026:	b902      	cbnz	r2, e02a <ADC_Module::wait_for_cal()+0x12>
}
    e028:	bd38      	pop	{r3, r4, r5, pc}
    e02a:	4604      	mov	r4, r0
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    e02c:	2101      	movs	r1, #1
    e02e:	f7ff fe59 	bl	dce4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
        setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    e032:	2103      	movs	r1, #3
    e034:	f7ff ff82 	bl	df3c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    if (calibrating)
    e038:	7d63      	ldrb	r3, [r4, #21]
    e03a:	b993      	cbnz	r3, e062 <ADC_Module::wait_for_cal()+0x4a>
        atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);
    e03c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e03e:	b672      	cpsid	i
        reg |= flag;
    e040:	6c93      	ldr	r3, [r2, #72]	; 0x48
    e042:	f043 0320 	orr.w	r3, r3, #32
    e046:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    e048:	b662      	cpsie	i
            atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    e04a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e04c:	b672      	cpsid	i
        reg &= ~flag;
    e04e:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    e054:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e056:	b662      	cpsie	i
    analog_num_average = num;
    e058:	2204      	movs	r2, #4
        init_calib = 0; // clear
    e05a:	2300      	movs	r3, #0
    analog_num_average = num;
    e05c:	7722      	strb	r2, [r4, #28]
        init_calib = 0; // clear
    e05e:	75a3      	strb	r3, [r4, #22]
}
    e060:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    e062:	4620      	mov	r0, r4
    e064:	f7ff ffd8 	bl	e018 <ADC_Module::wait_for_cal()>
    e068:	e7e8      	b.n	e03c <ADC_Module::wait_for_cal()+0x24>
    e06a:	bf00      	nop

0000e06c <ADC_Module::setResolution(unsigned char)>:
{
    e06c:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    e06e:	7dc3      	ldrb	r3, [r0, #23]
    e070:	428b      	cmp	r3, r1
    e072:	d019      	beq.n	e0a8 <ADC_Module::setResolution(unsigned char)+0x3c>
    if (calibrating)
    e074:	7d43      	ldrb	r3, [r0, #21]
    e076:	4604      	mov	r4, r0
    e078:	460d      	mov	r5, r1
    e07a:	bb03      	cbnz	r3, e0be <ADC_Module::setResolution(unsigned char)+0x52>
    if (bits <= 9)
    e07c:	2d09      	cmp	r5, #9
    e07e:	d914      	bls.n	e0aa <ADC_Module::setResolution(unsigned char)+0x3e>
    else if (bits <= 11)
    e080:	2d0b      	cmp	r5, #11
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
    e082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    else if (bits <= 11)
    e084:	d81e      	bhi.n	e0c4 <ADC_Module::setResolution(unsigned char)+0x58>
        __disable_irq();
    e086:	b672      	cpsid	i
        reg |= flag;
    e088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e08a:	f042 0204 	orr.w	r2, r2, #4
    e08e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e090:	b662      	cpsie	i
        __disable_irq();
    e092:	b672      	cpsid	i
        reg &= ~flag;
    e094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e096:	f022 0208 	bic.w	r2, r2, #8
    e09a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e09c:	b662      	cpsie	i
        analog_max_val = 1023;
    e09e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e0a2:	230a      	movs	r3, #10
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    e0a4:	61a2      	str	r2, [r4, #24]
    analog_res_bits = config;
    e0a6:	75e3      	strb	r3, [r4, #23]
}
    e0a8:	bd38      	pop	{r3, r4, r5, pc}
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
    e0aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e0ac:	b672      	cpsid	i
        reg &= ~flag;
    e0ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e0b0:	f023 030c 	bic.w	r3, r3, #12
    e0b4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e0b6:	b662      	cpsie	i
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    e0b8:	22ff      	movs	r2, #255	; 0xff
    e0ba:	2308      	movs	r3, #8
    e0bc:	e7f2      	b.n	e0a4 <ADC_Module::setResolution(unsigned char)+0x38>
        wait_for_cal();
    e0be:	f7ff ffab 	bl	e018 <ADC_Module::wait_for_cal()>
    e0c2:	e7db      	b.n	e07c <ADC_Module::setResolution(unsigned char)+0x10>
        __disable_irq();
    e0c4:	b672      	cpsid	i
        reg &= ~flag;
    e0c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e0c8:	f022 0204 	bic.w	r2, r2, #4
    e0cc:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e0ce:	b662      	cpsie	i
        __disable_irq();
    e0d0:	b672      	cpsid	i
        reg |= flag;
    e0d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e0d4:	f042 0208 	orr.w	r2, r2, #8
    e0d8:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e0da:	b662      	cpsie	i
        analog_max_val = 4095;
    e0dc:	f640 72ff 	movw	r2, #4095	; 0xfff
    e0e0:	230c      	movs	r3, #12
    e0e2:	e7df      	b.n	e0a4 <ADC_Module::setResolution(unsigned char)+0x38>

0000e0e4 <ADC_Module::analog_init()>:
{
    e0e4:	b510      	push	{r4, lr}

    //! Switch on clock to ADC
    void startClock()
    {
#if defined(ADC_TEENSY_4)
        if (ADC_num == 0)
    e0e6:	7d03      	ldrb	r3, [r0, #20]
    e0e8:	4604      	mov	r4, r0
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
    e0ea:	4a2b      	ldr	r2, [pc, #172]	; (e198 <ADC_Module::analog_init()+0xb4>)
        if (ADC_num == 0)
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	d149      	bne.n	e184 <ADC_Module::analog_init()+0xa0>
            CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
    e0f0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    e0f2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    e0f6:	66d3      	str	r3, [r2, #108]	; 0x6c
    analog_res_bits = 0;
    e0f8:	2300      	movs	r3, #0
    analog_num_average = 0;
    e0fa:	f44f 7200 	mov.w	r2, #512	; 0x200
    atomic::setBitFlag(adc_regs.CFG, ADC_CFG_OVWREN);
    e0fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    analog_res_bits = 0;
    e100:	75e3      	strb	r3, [r4, #23]
    analog_max_val = 0;
    e102:	61a3      	str	r3, [r4, #24]
    analog_num_average = 0;
    e104:	83a2      	strh	r2, [r4, #28]
    interrupts_enabled = false;
    e106:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        __disable_irq();
    e10a:	b672      	cpsid	i
        reg |= flag;
    e10c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    e10e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    e112:	644a      	str	r2, [r1, #68]	; 0x44
        __enable_irq();
    e114:	b662      	cpsie	i
    conversion_speed = ADC_CONVERSION_SPEED::HIGH_SPEED; // set to something different from line 139 so it gets changed there
    e116:	f240 7102 	movw	r1, #1794	; 0x702
    if (analog_reference_internal == ref_type)
    e11a:	7f62      	ldrb	r2, [r4, #29]
    calibrating = 0;
    e11c:	7563      	strb	r3, [r4, #21]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    e11e:	8263      	strh	r3, [r4, #18]
    conversion_speed = ADC_CONVERSION_SPEED::HIGH_SPEED; // set to something different from line 139 so it gets changed there
    e120:	83e1      	strh	r1, [r4, #30]
    num_measurements = 0;
    e122:	7463      	strb	r3, [r4, #17]
    if (analog_reference_internal == ref_type)
    e124:	b152      	cbz	r2, e13c <ADC_Module::analog_init()+0x58>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
    e126:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    e128:	7763      	strb	r3, [r4, #29]
        __disable_irq();
    e12a:	b672      	cpsid	i
        reg &= ~flag;
    e12c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e12e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    e132:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e134:	b662      	cpsie	i
    calibrate();
    e136:	4620      	mov	r0, r4
    e138:	f7ff fd8e 	bl	dc58 <ADC_Module::calibrate()>
    setResolution(10);
    e13c:	210a      	movs	r1, #10
    e13e:	4620      	mov	r0, r4
    e140:	f7ff ff94 	bl	e06c <ADC_Module::setResolution(unsigned char)>
    init_calib = 1;
    e144:	2201      	movs	r2, #1
    if (calibrating)
    e146:	7d63      	ldrb	r3, [r4, #21]
    init_calib = 1;
    e148:	75a2      	strb	r2, [r4, #22]
    if (calibrating)
    e14a:	bb03      	cbnz	r3, e18e <ADC_Module::analog_init()+0xaa>
        atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);
    e14c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e14e:	b672      	cpsid	i
        reg |= flag;
    e150:	6c93      	ldr	r3, [r2, #72]	; 0x48
    e152:	f043 0320 	orr.w	r3, r3, #32
    e156:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    e158:	b662      	cpsie	i
            atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    e15a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e15c:	b672      	cpsid	i
        reg |= flag;
    e15e:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    e164:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e166:	b662      	cpsie	i
    analog_num_average = num;
    e168:	2320      	movs	r3, #32
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    e16a:	4620      	mov	r0, r4
    e16c:	2100      	movs	r1, #0
    analog_num_average = num;
    e16e:	7723      	strb	r3, [r4, #28]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    e170:	f7ff fdb8 	bl	dce4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    setSamplingSpeed(ADC_SAMPLING_SPEED::LOW_SPEED);
    e174:	2101      	movs	r1, #1
    e176:	f7ff fee1 	bl	df3c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    calibrate();
    e17a:	4620      	mov	r0, r4
}
    e17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calibrate();
    e180:	f7ff bd6a 	b.w	dc58 <ADC_Module::calibrate()>
        }
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
    e184:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    e186:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e18a:	66d3      	str	r3, [r2, #108]	; 0x6c
    e18c:	e7b4      	b.n	e0f8 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    e18e:	4620      	mov	r0, r4
    e190:	f7ff ff42 	bl	e018 <ADC_Module::wait_for_cal()>
    e194:	e7da      	b.n	e14c <ADC_Module::analog_init()+0x68>
    e196:	bf00      	nop
    e198:	400fc000 	.word	0x400fc000

0000e19c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>:
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e19c:	2900      	cmp	r1, #0
ADC_Module::ADC_Module(uint8_t ADC_number,
    e19e:	b510      	push	{r4, lr}
                                                 adc_regs(a_adc_regs)
    e1a0:	6283      	str	r3, [r0, #40]	; 0x28
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e1a2:	bf0c      	ite	eq
    e1a4:	460b      	moveq	r3, r1
    e1a6:	2303      	movne	r3, #3
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    e1a8:	6202      	str	r2, [r0, #32]
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e1aa:	bf14      	ite	ne
    e1ac:	226b      	movne	r2, #107	; 0x6b
    e1ae:	2267      	moveq	r2, #103	; 0x67
    e1b0:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    e1b4:	bf0c      	ite	eq
    e1b6:	460b      	moveq	r3, r1
    e1b8:	2304      	movne	r3, #4
ADC_Module::ADC_Module(uint8_t ADC_number,
    e1ba:	4604      	mov	r4, r0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    e1bc:	7501      	strb	r1, [r0, #20]
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e1be:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    e1c2:	bf14      	ite	ne
    e1c4:	2327      	movne	r3, #39	; 0x27
    e1c6:	2324      	moveq	r3, #36	; 0x24
    e1c8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    e1cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    e1d0:	bf14      	ite	ne
    e1d2:	2344      	movne	r3, #68	; 0x44
    e1d4:	2343      	moveq	r3, #67	; 0x43
    e1d6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    analog_init();
    e1da:	f7ff ff83 	bl	e0e4 <ADC_Module::analog_init()>
}
    e1de:	4620      	mov	r0, r4
    e1e0:	bd10      	pop	{r4, pc}
    e1e2:	bf00      	nop

0000e1e4 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>:
{
    e1e4:	b570      	push	{r4, r5, r6, lr}
    if (calibrating)
    e1e6:	7d43      	ldrb	r3, [r0, #21]
{
    e1e8:	4604      	mov	r4, r0
    e1ea:	460e      	mov	r6, r1
    e1ec:	4615      	mov	r5, r2
    if (calibrating)
    e1ee:	b9f3      	cbnz	r3, e22e <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x4a>
    atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
    e1f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e1f2:	b672      	cpsid	i
        reg |= flag;
    e1f4:	6813      	ldr	r3, [r2, #0]
    e1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e1fa:	6013      	str	r3, [r2, #0]
        __enable_irq();
    e1fc:	b662      	cpsie	i
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    e1fe:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    interrupts_enabled = true;
    e202:	2001      	movs	r0, #1
    e204:	4a0b      	ldr	r2, [pc, #44]	; (e234 <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x50>)
    e206:	3310      	adds	r3, #16
    e208:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    e20c:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    NVIC_SET_PRIORITY(IRQ_ADC, priority);
    e210:	4b09      	ldr	r3, [pc, #36]	; (e238 <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x54>)
    e212:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    e216:	54d5      	strb	r5, [r2, r3]
    NVIC_ENABLE_IRQ(IRQ_ADC);
    e218:	4b08      	ldr	r3, [pc, #32]	; (e23c <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x58>)
    e21a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    e21e:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    e222:	f002 021f 	and.w	r2, r2, #31
    e226:	009b      	lsls	r3, r3, #2
    e228:	4090      	lsls	r0, r2
    e22a:	6018      	str	r0, [r3, #0]
}
    e22c:	bd70      	pop	{r4, r5, r6, pc}
        wait_for_cal();
    e22e:	f7ff fef3 	bl	e018 <ADC_Module::wait_for_cal()>
    e232:	e7dd      	b.n	e1f0 <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0xc>
    e234:	20009c00 	.word	0x20009c00
    e238:	e000e400 	.word	0xe000e400
    e23c:	38003840 	.word	0x38003840

0000e240 <ADC_Module::checkPin(unsigned char)>:
    if (pin > ADC_MAX_PIN)
    e240:	2929      	cmp	r1, #41	; 0x29
    e242:	d807      	bhi.n	e254 <ADC_Module::checkPin(unsigned char)+0x14>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e244:	6a03      	ldr	r3, [r0, #32]
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    e246:	5c58      	ldrb	r0, [r3, r1]
    e248:	f000 001f 	and.w	r0, r0, #31
    e24c:	381f      	subs	r0, #31
    e24e:	bf18      	it	ne
    e250:	2001      	movne	r0, #1
    e252:	4770      	bx	lr
        return false; // all others are invalid
    e254:	2000      	movs	r0, #0
}
    e256:	4770      	bx	lr

0000e258 <ADC_Module::analogRead(unsigned char)>:
    if (pin > ADC_MAX_PIN)
    e258:	2929      	cmp	r1, #41	; 0x29
{
    e25a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e25e:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    e260:	d85c      	bhi.n	e31c <ADC_Module::analogRead(unsigned char)+0xc4>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e262:	6a03      	ldr	r3, [r0, #32]
    e264:	468a      	mov	sl, r1
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    e266:	5c5b      	ldrb	r3, [r3, r1]
    e268:	f003 031f 	and.w	r3, r3, #31
    e26c:	2b1f      	cmp	r3, #31
    e26e:	d055      	beq.n	e31c <ADC_Module::analogRead(unsigned char)+0xc4>
    num_measurements++;
    e270:	7c43      	ldrb	r3, [r0, #17]
    if (calibrating)
    e272:	7d42      	ldrb	r2, [r0, #21]
    num_measurements++;
    e274:	3301      	adds	r3, #1
    e276:	7443      	strb	r3, [r0, #17]
    if (calibrating)
    e278:	2a00      	cmp	r2, #0
    e27a:	d147      	bne.n	e30c <ADC_Module::analogRead(unsigned char)+0xb4>
        return atomic::getBitFlag(adc_regs.GS, ADC_GS_ADACT);
    e27c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
    e27e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    if (wasADCInUse)
    e280:	f015 0501 	ands.w	r5, r5, #1
    e284:	d137      	bne.n	e2f6 <ADC_Module::analogRead(unsigned char)+0x9e>
    ADC_Config old_config = {};
    e286:	462e      	mov	r6, r5
    e288:	462f      	mov	r7, r5
    e28a:	46a8      	mov	r8, r5
    e28c:	46a9      	mov	r9, r5
        __disable_irq();
    e28e:	b672      	cpsid	i
        reg &= ~flag;
    e290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e296:	649a      	str	r2, [r3, #72]	; 0x48
        __enable_irq();
    e298:	b662      	cpsie	i
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e29a:	6a23      	ldr	r3, [r4, #32]
    e29c:	f813 300a 	ldrb.w	r3, [r3, sl]
    __disable_irq();
    e2a0:	b672      	cpsid	i
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
    e2a2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    e2a6:	f003 031f 	and.w	r3, r3, #31
    e2aa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    e2ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e2b0:	6013      	str	r3, [r2, #0]
    __enable_irq();
    e2b2:	b662      	cpsie	i
    e2b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
    e2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    while (isConverting())
    e2b8:	07d9      	lsls	r1, r3, #31
    e2ba:	d505      	bpl.n	e2c8 <ADC_Module::analogRead(unsigned char)+0x70>
        yield();
    e2bc:	f009 fe2c 	bl	17f18 <yield>
    e2c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e2c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    while (isConverting())
    e2c4:	07db      	lsls	r3, r3, #31
    e2c6:	d4f9      	bmi.n	e2bc <ADC_Module::analogRead(unsigned char)+0x64>
    __disable_irq(); // make sure nothing interrupts this part
    e2c8:	b672      	cpsid	i
        return atomic::getBitFlag(adc_regs.HS, ADC_HS_COCO0);
    e2ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e2cc:	6a1a      	ldr	r2, [r3, #32]
    if (isComplete())
    e2ce:	07d2      	lsls	r2, r2, #31
    e2d0:	d52c      	bpl.n	e32c <ADC_Module::analogRead(unsigned char)+0xd4>
        return (int16_t)(int32_t)adc_regs.R0;
    e2d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
        result = (uint16_t)readSingle();
    e2d4:	b280      	uxth	r0, r0
    __enable_irq();
    e2d6:	b662      	cpsie	i
    if (wasADCInUse)
    e2d8:	b145      	cbz	r5, e2ec <ADC_Module::analogRead(unsigned char)+0x94>
        __disable_irq();
    e2da:	b672      	cpsid	i
        adc_regs.HC0 = config->savedHC0;
    e2dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e2de:	f8c3 9000 	str.w	r9, [r3]
        adc_regs.CFG = config->savedCFG;
    e2e2:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
        adc_regs.GC = config->savedGC;
    e2e6:	649f      	str	r7, [r3, #72]	; 0x48
        adc_regs.GS = config->savedGS;
    e2e8:	64de      	str	r6, [r3, #76]	; 0x4c
        __enable_irq();
    e2ea:	b662      	cpsie	i
    num_measurements--;
    e2ec:	7c63      	ldrb	r3, [r4, #17]
    e2ee:	3b01      	subs	r3, #1
    e2f0:	7463      	strb	r3, [r4, #17]
} // analogRead
    e2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __disable_irq();
    e2f6:	b672      	cpsid	i
        config->savedHC0 = adc_regs.HC0;
    e2f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e2fa:	f8d3 9000 	ldr.w	r9, [r3]
        config->savedCFG = adc_regs.CFG;
    e2fe:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
        config->savedGC = adc_regs.GC;
    e302:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        config->savedGS = adc_regs.GS;
    e304:	6cde      	ldr	r6, [r3, #76]	; 0x4c
        __enable_irq();
    e306:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADCO);
    e308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e30a:	e7c0      	b.n	e28e <ADC_Module::analogRead(unsigned char)+0x36>
        wait_for_cal();
    e30c:	f7ff fe84 	bl	e018 <ADC_Module::wait_for_cal()>
        return atomic::getBitFlag(adc_regs.GS, ADC_GS_ADACT);
    e310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e312:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    if (wasADCInUse)
    e314:	f015 0501 	ands.w	r5, r5, #1
    e318:	d0b5      	beq.n	e286 <ADC_Module::analogRead(unsigned char)+0x2e>
    e31a:	e7ec      	b.n	e2f6 <ADC_Module::analogRead(unsigned char)+0x9e>
    e31c:	8a63      	ldrh	r3, [r4, #18]
        return ADC_ERROR_VALUE;
    e31e:	4807      	ldr	r0, [pc, #28]	; (e33c <ADC_Module::analogRead(unsigned char)+0xe4>)
    e320:	b29b      	uxth	r3, r3
    e322:	f043 0304 	orr.w	r3, r3, #4
    e326:	8263      	strh	r3, [r4, #18]
} // analogRead
    e328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e32c:	8a63      	ldrh	r3, [r4, #18]
        result = ADC_ERROR_VALUE;
    e32e:	4803      	ldr	r0, [pc, #12]	; (e33c <ADC_Module::analogRead(unsigned char)+0xe4>)
    e330:	b29b      	uxth	r3, r3
    e332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e336:	8263      	strh	r3, [r4, #18]
    e338:	e7cd      	b.n	e2d6 <ADC_Module::analogRead(unsigned char)+0x7e>
    e33a:	bf00      	nop
    e33c:	fffeee90 	.word	0xfffeee90

0000e340 <ADC_Module::startSingleRead(unsigned char)>:
    if (pin > ADC_MAX_PIN)
    e340:	2929      	cmp	r1, #41	; 0x29
{
    e342:	b538      	push	{r3, r4, r5, lr}
    e344:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    e346:	d82f      	bhi.n	e3a8 <ADC_Module::startSingleRead(unsigned char)+0x68>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e348:	6a03      	ldr	r3, [r0, #32]
    e34a:	460d      	mov	r5, r1
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    e34c:	5c5b      	ldrb	r3, [r3, r1]
    e34e:	f003 031f 	and.w	r3, r3, #31
    e352:	2b1f      	cmp	r3, #31
    e354:	d028      	beq.n	e3a8 <ADC_Module::startSingleRead(unsigned char)+0x68>
    if (calibrating)
    e356:	7d43      	ldrb	r3, [r0, #21]
    e358:	2b00      	cmp	r3, #0
    e35a:	d12c      	bne.n	e3b6 <ADC_Module::startSingleRead(unsigned char)+0x76>
    e35c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e35e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    e360:	f003 0301 	and.w	r3, r3, #1
    adcWasInUse = isConverting(); // is the ADC running now?
    e364:	7423      	strb	r3, [r4, #16]
    if (adcWasInUse)
    e366:	b15b      	cbz	r3, e380 <ADC_Module::startSingleRead(unsigned char)+0x40>
        __disable_irq();
    e368:	b672      	cpsid	i
        config->savedHC0 = adc_regs.HC0;
    e36a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e36c:	6818      	ldr	r0, [r3, #0]
        config->savedCFG = adc_regs.CFG;
    e36e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e370:	e9c4 0200 	strd	r0, r2, [r4]
        config->savedGC = adc_regs.GC;
    e374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        config->savedGS = adc_regs.GS;
    e376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e378:	e9c4 2302 	strd	r2, r3, [r4, #8]
        __enable_irq();
    e37c:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADCO);
    e37e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e380:	b672      	cpsid	i
        reg &= ~flag;
    e382:	6c93      	ldr	r3, [r2, #72]	; 0x48
    e384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e388:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    e38a:	b662      	cpsie	i
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e38c:	6a23      	ldr	r3, [r4, #32]
    e38e:	5d5b      	ldrb	r3, [r3, r5]
    __disable_irq();
    e390:	b672      	cpsid	i
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
    e392:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    e396:	f003 031f 	and.w	r3, r3, #31
    e39a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e39c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    e3a0:	6013      	str	r3, [r2, #0]
    __enable_irq();
    e3a2:	b662      	cpsie	i
    return true;
    e3a4:	2001      	movs	r0, #1
}
    e3a6:	bd38      	pop	{r3, r4, r5, pc}
    e3a8:	8a63      	ldrh	r3, [r4, #18]
        return false;
    e3aa:	2000      	movs	r0, #0
    e3ac:	b29b      	uxth	r3, r3
    e3ae:	f043 0304 	orr.w	r3, r3, #4
    e3b2:	8263      	strh	r3, [r4, #18]
}
    e3b4:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    e3b6:	f7ff fe2f 	bl	e018 <ADC_Module::wait_for_cal()>
    e3ba:	e7cf      	b.n	e35c <ADC_Module::startSingleRead(unsigned char)+0x1c>

0000e3bc <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    e3bc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    e3c0:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    e3c4:	1a10      	subs	r0, r2, r0
    e3c6:	4770      	bx	lr

0000e3c8 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e3c8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    e3cc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    e3d0:	429a      	cmp	r2, r3
    e3d2:	d905      	bls.n	e3e0 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    e3d4:	1c5a      	adds	r2, r3, #1
    e3d6:	4403      	add	r3, r0
    e3d8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    e3dc:	7e98      	ldrb	r0, [r3, #26]
    e3de:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    e3e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    e3e4:	4770      	bx	lr
    e3e6:	bf00      	nop

0000e3e8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>:
#define MPU9250_ADDR_ACCEL_XOUT_H 0x3B
#define MPU9250_ADDR_GYRO_XOUT_H  0x43
#define MPU9250_ADDR_PWR_MGMT_1   0x6B
#define MPU9250_ADDR_WHOAMI       0x75

uint8_t MPU9250_asukiaaa::i2cRead(uint8_t Address, uint8_t Register, uint8_t Nbytes, uint8_t* Data) {
    e3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		transmitting = 1;
    e3ec:	f04f 0801 	mov.w	r8, #1
    e3f0:	460f      	mov	r7, r1
    e3f2:	461d      	mov	r5, r3
  myWire->beginTransmission(Address);
  myWire->write(Register);
    e3f4:	4611      	mov	r1, r2
  myWire->beginTransmission(Address);
    e3f6:	69c3      	ldr	r3, [r0, #28]
		txBuffer[0] = (address << 1);
    e3f8:	fa07 f208 	lsl.w	r2, r7, r8
uint8_t MPU9250_asukiaaa::i2cRead(uint8_t Address, uint8_t Register, uint8_t Nbytes, uint8_t* Data) {
    e3fc:	4604      	mov	r4, r0
    e3fe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    e402:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    e406:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
  myWire->write(Register);
    e40a:	69c0      	ldr	r0, [r0, #28]
    e40c:	6803      	ldr	r3, [r0, #0]
    e40e:	681b      	ldr	r3, [r3, #0]
    e410:	4798      	blx	r3
		return endTransmission(1);
    e412:	4641      	mov	r1, r8
    e414:	69e0      	ldr	r0, [r4, #28]
    e416:	f000 fad5 	bl	e9c4 <TwoWire::endTransmission(unsigned char)>
  uint8_t result = myWire->endTransmission();
  if (result != 0) {
    e41a:	4606      	mov	r6, r0
    e41c:	b110      	cbz	r0, e424 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x3c>
    if (index < Nbytes) {
      Data[index++] = d;
    }
  }
  return 0;
}
    e41e:	4630      	mov	r0, r6
    e420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return requestFrom(address, quantity, (uint8_t)1);
    e424:	4639      	mov	r1, r7
    e426:	f8df 9070 	ldr.w	r9, [pc, #112]	; e498 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xb0>
  while (myWire->available()) {
    e42a:	4637      	mov	r7, r6
    e42c:	f8df a06c 	ldr.w	sl, [pc, #108]	; e49c <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xb4>
    e430:	4643      	mov	r3, r8
    e432:	462a      	mov	r2, r5
    e434:	69e0      	ldr	r0, [r4, #28]
    e436:	f000 fb45 	bl	eac4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
    e43a:	fa5f f887 	uxtb.w	r8, r7
    e43e:	69e0      	ldr	r0, [r4, #28]
    e440:	6803      	ldr	r3, [r0, #0]
    e442:	691b      	ldr	r3, [r3, #16]
    e444:	454b      	cmp	r3, r9
    e446:	d11f      	bne.n	e488 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xa0>
		return rxBufferLength - rxBufferIndex;
    e448:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
    e44c:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
    e450:	1a98      	subs	r0, r3, r2
    e452:	2800      	cmp	r0, #0
    e454:	d0e3      	beq.n	e41e <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x36>
    uint8_t d = myWire->read();
    e456:	69e0      	ldr	r0, [r4, #28]
    e458:	6803      	ldr	r3, [r0, #0]
    e45a:	695b      	ldr	r3, [r3, #20]
    e45c:	4553      	cmp	r3, sl
    e45e:	d115      	bne.n	e48c <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xa4>
		if (rxBufferIndex >= rxBufferLength) return -1;
    e460:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    e464:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
    e468:	4563      	cmp	r3, ip
		return rxBuffer[rxBufferIndex++];
    e46a:	f10c 0301 	add.w	r3, ip, #1
    e46e:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    e470:	d90f      	bls.n	e492 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xaa>
		return rxBuffer[rxBufferIndex++];
    e472:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
    e476:	f89c 001a 	ldrb.w	r0, [ip, #26]
    if (index < Nbytes) {
    e47a:	4545      	cmp	r5, r8
    e47c:	d9df      	bls.n	e43e <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x56>
      Data[index++] = d;
    e47e:	9b08      	ldr	r3, [sp, #32]
    e480:	3701      	adds	r7, #1
    e482:	f803 0008 	strb.w	r0, [r3, r8]
    e486:	e7d8      	b.n	e43a <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x52>
  while (myWire->available()) {
    e488:	4798      	blx	r3
    e48a:	e7e2      	b.n	e452 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x6a>
    uint8_t d = myWire->read();
    e48c:	4798      	blx	r3
    e48e:	b2c0      	uxtb	r0, r0
    e490:	e7f3      	b.n	e47a <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x92>
    e492:	20ff      	movs	r0, #255	; 0xff
    e494:	e7f1      	b.n	e47a <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x92>
    e496:	bf00      	nop
    e498:	0000e3bd 	.word	0x0000e3bd
    e49c:	0000e3c9 	.word	0x0000e3c9

0000e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>:

uint8_t MPU9250_asukiaaa::i2cWriteByte(uint8_t Address, uint8_t Register, uint8_t Data) {
    e4a0:	b570      	push	{r4, r5, r6, lr}
    e4a2:	4604      	mov	r4, r0
		transmitting = 1;
    e4a4:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
    e4a6:	0048      	lsls	r0, r1, #1
    e4a8:	461e      	mov	r6, r3
  myWire->beginTransmission(Address);
    e4aa:	69e3      	ldr	r3, [r4, #28]
  myWire->write(Register);
    e4ac:	4611      	mov	r1, r2
		transmitting = 1;
    e4ae:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    e4b2:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    e4b6:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
    e4ba:	69e0      	ldr	r0, [r4, #28]
    e4bc:	6803      	ldr	r3, [r0, #0]
    e4be:	681b      	ldr	r3, [r3, #0]
    e4c0:	4798      	blx	r3
  myWire->write(Data);
    e4c2:	69e0      	ldr	r0, [r4, #28]
    e4c4:	4631      	mov	r1, r6
    e4c6:	6803      	ldr	r3, [r0, #0]
    e4c8:	681b      	ldr	r3, [r3, #0]
    e4ca:	4798      	blx	r3
		return endTransmission(1);
    e4cc:	4629      	mov	r1, r5
    e4ce:	69e0      	ldr	r0, [r4, #28]
  return myWire->endTransmission();
}
    e4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e4d4:	f000 ba76 	b.w	e9c4 <TwoWire::endTransmission(unsigned char)>

0000e4d8 <MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)>:

MPU9250_asukiaaa::MPU9250_asukiaaa(uint8_t address):
  address(address) {
  accelRange = 0;
  gyroRange  = 0;
  magXOffset = 0;
    e4d8:	2200      	movs	r2, #0
  accelRange = 0;
    e4da:	f04f 0c00 	mov.w	ip, #0
  address(address) {
    e4de:	7001      	strb	r1, [r0, #0]
  accelRange = 0;
    e4e0:	f8c0 c020 	str.w	ip, [r0, #32]
  gyroRange  = 0;
    e4e4:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  magXOffset = 0;
    e4e8:	8042      	strh	r2, [r0, #2]
  magYOffset = 0;
    e4ea:	6042      	str	r2, [r0, #4]
  magZOffset = 0;
  myWire = NULL;
    e4ec:	61c2      	str	r2, [r0, #28]
}
    e4ee:	4770      	bx	lr

0000e4f0 <MPU9250_asukiaaa::setWire(TwoWire*)>:

void MPU9250_asukiaaa::setWire(TwoWire* wire) {
  myWire = wire;
    e4f0:	61c1      	str	r1, [r0, #28]
}
    e4f2:	4770      	bx	lr

0000e4f4 <MPU9250_asukiaaa::readId(unsigned char*)>:
  beginWireIfNull();
  return i2cRead(address, MPU9250_ADDR_WHOAMI, 1, id);
}

void MPU9250_asukiaaa::beginWireIfNull() {
  if (myWire == NULL) {
    e4f4:	69c3      	ldr	r3, [r0, #28]
uint8_t MPU9250_asukiaaa::readId(uint8_t *id) {
    e4f6:	b530      	push	{r4, r5, lr}
    e4f8:	4604      	mov	r4, r0
    e4fa:	b083      	sub	sp, #12
    e4fc:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e4fe:	b143      	cbz	r3, e512 <MPU9250_asukiaaa::readId(unsigned char*)+0x1e>
  return i2cRead(address, MPU9250_ADDR_WHOAMI, 1, id);
    e500:	7821      	ldrb	r1, [r4, #0]
    e502:	2301      	movs	r3, #1
    e504:	2275      	movs	r2, #117	; 0x75
    e506:	4620      	mov	r0, r4
    e508:	9500      	str	r5, [sp, #0]
    e50a:	f7ff ff6d 	bl	e3e8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    e50e:	b003      	add	sp, #12
    e510:	bd30      	pop	{r4, r5, pc}
    myWire = &Wire;
    e512:	4802      	ldr	r0, [pc, #8]	; (e51c <MPU9250_asukiaaa::readId(unsigned char*)+0x28>)
    e514:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e516:	f016 f90f 	bl	24738 <___ZN7TwoWire5beginEv_veneer>
    e51a:	e7f1      	b.n	e500 <MPU9250_asukiaaa::readId(unsigned char*)+0xc>
    e51c:	20009524 	.word	0x20009524

0000e520 <MPU9250_asukiaaa::beginAccel(unsigned char)>:
  }
}

void MPU9250_asukiaaa::beginAccel(uint8_t mode) {
    e520:	b538      	push	{r3, r4, r5, lr}
  if (myWire == NULL) {
    e522:	69c3      	ldr	r3, [r0, #28]
void MPU9250_asukiaaa::beginAccel(uint8_t mode) {
    e524:	4604      	mov	r4, r0
    e526:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e528:	b32b      	cbz	r3, e576 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x56>
  beginWireIfNull();
  switch(mode) {
    e52a:	2d18      	cmp	r5, #24
    e52c:	d80e      	bhi.n	e54c <MPU9250_asukiaaa::beginAccel(unsigned char)+0x2c>
    e52e:	e8df f005 	tbb	[pc, r5]
    e532:	0d1f      	.short	0x0d1f
    e534:	0d0d0d0d 	.word	0x0d0d0d0d
    e538:	0d270d0d 	.word	0x0d270d0d
    e53c:	0d0d0d0d 	.word	0x0d0d0d0d
    e540:	0d1c0d0d 	.word	0x0d1c0d0d
    e544:	0d0d0d0d 	.word	0x0d0d0d0d
    e548:	0d0d      	.short	0x0d0d
    e54a:	0e          	.byte	0x0e
    e54b:	00          	.byte	0x00
  default:
    return; // Return without writing invalid mode
  }
  i2cWriteByte(address, MPU9250_ADDR_ACCELCONFIG, mode);
  delay(10);
}
    e54c:	bd38      	pop	{r3, r4, r5, pc}
    break;
    e54e:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
    accelRange = 2.0;
    e552:	6220      	str	r0, [r4, #32]
  i2cWriteByte(address, MPU9250_ADDR_ACCELCONFIG, mode);
    e554:	462b      	mov	r3, r5
    e556:	7821      	ldrb	r1, [r4, #0]
    e558:	4620      	mov	r0, r4
    e55a:	221c      	movs	r2, #28
    e55c:	f7ff ffa0 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e560:	200a      	movs	r0, #10
}
    e562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
    e566:	f007 bc3b 	b.w	15de0 <delay>
    break;
    e56a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e56e:	e7f0      	b.n	e552 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x32>
  switch(mode) {
    e570:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    e574:	e7ed      	b.n	e552 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x32>
    myWire = &Wire;
    e576:	4804      	ldr	r0, [pc, #16]	; (e588 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x68>)
    e578:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e57a:	f016 f8dd 	bl	24738 <___ZN7TwoWire5beginEv_veneer>
    e57e:	e7d4      	b.n	e52a <MPU9250_asukiaaa::beginAccel(unsigned char)+0xa>
  switch(mode) {
    e580:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
    e584:	e7e5      	b.n	e552 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x32>
    e586:	bf00      	nop
    e588:	20009524 	.word	0x20009524

0000e58c <MPU9250_asukiaaa::magReadAdjustValues()>:

void MPU9250_asukiaaa::magReadAdjustValues() {
    e58c:	b510      	push	{r4, lr}
  magSetMode(mode);
  delay(10);
}

void MPU9250_asukiaaa::magSetMode(uint8_t mode) {
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e58e:	2300      	movs	r3, #0
void MPU9250_asukiaaa::magReadAdjustValues() {
    e590:	b084      	sub	sp, #16
    e592:	4604      	mov	r4, r0
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e594:	220a      	movs	r2, #10
    e596:	210c      	movs	r1, #12
    e598:	f7ff ff82 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e59c:	200a      	movs	r0, #10
    e59e:	f007 fc1f 	bl	15de0 <delay>
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e5a2:	230f      	movs	r3, #15
    e5a4:	220a      	movs	r2, #10
    e5a6:	210c      	movs	r1, #12
    e5a8:	4620      	mov	r0, r4
    e5aa:	f7ff ff79 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e5ae:	200a      	movs	r0, #10
    e5b0:	f007 fc16 	bl	15de0 <delay>
  i2cRead(AK8963_ADDRESS, AK8963_RA_ASAX, 3, buff);
    e5b4:	a803      	add	r0, sp, #12
    e5b6:	2303      	movs	r3, #3
    e5b8:	2210      	movs	r2, #16
    e5ba:	9000      	str	r0, [sp, #0]
    e5bc:	210c      	movs	r1, #12
    e5be:	4620      	mov	r0, r4
    e5c0:	f7ff ff12 	bl	e3e8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
  magZAdjust = buff[2];
    e5c4:	f89d 200e 	ldrb.w	r2, [sp, #14]
  magXAdjust = buff[0];
    e5c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  magZAdjust = buff[2];
    e5cc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  magXAdjust = buff[0];
    e5d0:	8523      	strh	r3, [r4, #40]	; 0x28
}
    e5d2:	b004      	add	sp, #16
    e5d4:	bd10      	pop	{r4, pc}
    e5d6:	bf00      	nop

0000e5d8 <MPU9250_asukiaaa::beginMag(unsigned char)>:
  if (myWire == NULL) {
    e5d8:	69c3      	ldr	r3, [r0, #28]
void MPU9250_asukiaaa::beginMag(uint8_t mode) {
    e5da:	b570      	push	{r4, r5, r6, lr}
    e5dc:	4604      	mov	r4, r0
    e5de:	b084      	sub	sp, #16
    e5e0:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e5e2:	2b00      	cmp	r3, #0
    e5e4:	d042      	beq.n	e66c <MPU9250_asukiaaa::beginMag(unsigned char)+0x94>
}

void MPU9250_asukiaaa::magWakeup() {
  unsigned char bits;
  i2cRead(address, MPU9250_ADDR_PWR_MGMT_1, 1, &bits);
    e5e6:	f10d 060f 	add.w	r6, sp, #15
    e5ea:	2301      	movs	r3, #1
    e5ec:	226b      	movs	r2, #107	; 0x6b
    e5ee:	4620      	mov	r0, r4
    e5f0:	9600      	str	r6, [sp, #0]
    e5f2:	7821      	ldrb	r1, [r4, #0]
    e5f4:	f7ff fef8 	bl	e3e8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
  bits &= ~B01110000; // Turn off SLEEP, STANDBY, CYCLE
    e5f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
  i2cWriteByte(address, MPU9250_ADDR_PWR_MGMT_1, bits);
    e5fc:	7821      	ldrb	r1, [r4, #0]
    e5fe:	226b      	movs	r2, #107	; 0x6b
    e600:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    e604:	4620      	mov	r0, r4
    e606:	f7ff ff4b 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e60a:	200a      	movs	r0, #10
    e60c:	f007 fbe8 	bl	15de0 <delay>
}

void MPU9250_asukiaaa::magEnableSlaveMode() {
  unsigned char bits;
  i2cRead(address, MPU9250_ADDR_INT_PIN_CFG, 1, &bits);
    e610:	9600      	str	r6, [sp, #0]
    e612:	2301      	movs	r3, #1
    e614:	7821      	ldrb	r1, [r4, #0]
    e616:	2237      	movs	r2, #55	; 0x37
    e618:	4620      	mov	r0, r4
    e61a:	f7ff fee5 	bl	e3e8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
  bits |= B00000010; // Activate BYPASS_EN
    e61e:	f89d 300f 	ldrb.w	r3, [sp, #15]
  i2cWriteByte(address, MPU9250_ADDR_INT_PIN_CFG, bits);
    e622:	7821      	ldrb	r1, [r4, #0]
    e624:	2237      	movs	r2, #55	; 0x37
    e626:	f043 0302 	orr.w	r3, r3, #2
    e62a:	4620      	mov	r0, r4
    e62c:	f7ff ff38 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e630:	200a      	movs	r0, #10
    e632:	f007 fbd5 	bl	15de0 <delay>
  magReadAdjustValues();
    e636:	4620      	mov	r0, r4
    e638:	f7ff ffa8 	bl	e58c <MPU9250_asukiaaa::magReadAdjustValues()>
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e63c:	220a      	movs	r2, #10
    e63e:	210c      	movs	r1, #12
    e640:	2300      	movs	r3, #0
    e642:	4620      	mov	r0, r4
    e644:	f7ff ff2c 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e648:	200a      	movs	r0, #10
    e64a:	f007 fbc9 	bl	15de0 <delay>
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e64e:	462b      	mov	r3, r5
    e650:	220a      	movs	r2, #10
    e652:	210c      	movs	r1, #12
    e654:	4620      	mov	r0, r4
    e656:	f7ff ff23 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e65a:	200a      	movs	r0, #10
    e65c:	f007 fbc0 	bl	15de0 <delay>
  delay(10);
    e660:	200a      	movs	r0, #10
}
    e662:	b004      	add	sp, #16
    e664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(10);
    e668:	f007 bbba 	b.w	15de0 <delay>
    myWire = &Wire;
    e66c:	4802      	ldr	r0, [pc, #8]	; (e678 <MPU9250_asukiaaa::beginMag(unsigned char)+0xa0>)
    e66e:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e670:	f016 f862 	bl	24738 <___ZN7TwoWire5beginEv_veneer>
    e674:	e7b7      	b.n	e5e6 <MPU9250_asukiaaa::beginMag(unsigned char)+0xe>
    e676:	bf00      	nop
    e678:	20009524 	.word	0x20009524

0000e67c <MPU9250_asukiaaa::accelUpdate()>:

float MPU9250_asukiaaa::magZ() {
  return adjustMagValue(magGet(5, 4), magZAdjust) + magZOffset;
}

uint8_t MPU9250_asukiaaa::accelUpdate() {
    e67c:	b510      	push	{r4, lr}
  return i2cRead(address, MPU9250_ADDR_ACCEL_XOUT_H, 6, accelBuff);
    e67e:	4604      	mov	r4, r0
uint8_t MPU9250_asukiaaa::accelUpdate() {
    e680:	b082      	sub	sp, #8
  return i2cRead(address, MPU9250_ADDR_ACCEL_XOUT_H, 6, accelBuff);
    e682:	2306      	movs	r3, #6
    e684:	223b      	movs	r2, #59	; 0x3b
    e686:	f814 1b08 	ldrb.w	r1, [r4], #8
    e68a:	9400      	str	r4, [sp, #0]
    e68c:	f7ff feac 	bl	e3e8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    e690:	b002      	add	sp, #8
    e692:	bd10      	pop	{r4, pc}

0000e694 <MPU9250_asukiaaa::accelX()>:

float MPU9250_asukiaaa::accelGet(uint8_t highIndex, uint8_t lowIndex) {
  int16_t v = ((int16_t) accelBuff[highIndex]) << 8 | accelBuff[lowIndex];
  return ((float) -v) * accelRange / (float) 0x8000; // (float) 0x8000 == 32768.0
    e694:	8903      	ldrh	r3, [r0, #8]
    e696:	ed90 7a08 	vldr	s14, [r0, #32]
    e69a:	badb      	revsh	r3, r3
    e69c:	ed9f 0a05 	vldr	s0, [pc, #20]	; e6b4 <MPU9250_asukiaaa::accelX()+0x20>
    e6a0:	425b      	negs	r3, r3
    e6a2:	ee07 3a90 	vmov	s15, r3
    e6a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e6aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}

float MPU9250_asukiaaa::accelX() {
  return accelGet(0, 1);
}
    e6ae:	ee27 0a80 	vmul.f32	s0, s15, s0
    e6b2:	4770      	bx	lr
    e6b4:	38000000 	.word	0x38000000

0000e6b8 <MPU9250_asukiaaa::accelY()>:
  return ((float) -v) * accelRange / (float) 0x8000; // (float) 0x8000 == 32768.0
    e6b8:	8943      	ldrh	r3, [r0, #10]
    e6ba:	ed90 7a08 	vldr	s14, [r0, #32]
    e6be:	badb      	revsh	r3, r3
    e6c0:	ed9f 0a05 	vldr	s0, [pc, #20]	; e6d8 <MPU9250_asukiaaa::accelY()+0x20>
    e6c4:	425b      	negs	r3, r3
    e6c6:	ee07 3a90 	vmov	s15, r3
    e6ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e6ce:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::accelY() {
  return accelGet(2, 3);
}
    e6d2:	ee27 0a80 	vmul.f32	s0, s15, s0
    e6d6:	4770      	bx	lr
    e6d8:	38000000 	.word	0x38000000

0000e6dc <MPU9250_asukiaaa::accelZ()>:
  return ((float) -v) * accelRange / (float) 0x8000; // (float) 0x8000 == 32768.0
    e6dc:	8983      	ldrh	r3, [r0, #12]
    e6de:	ed90 7a08 	vldr	s14, [r0, #32]
    e6e2:	badb      	revsh	r3, r3
    e6e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; e6fc <MPU9250_asukiaaa::accelZ()+0x20>
    e6e8:	425b      	negs	r3, r3
    e6ea:	ee07 3a90 	vmov	s15, r3
    e6ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e6f2:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::accelZ() {
  return accelGet(4, 5);
}
    e6f6:	ee27 0a80 	vmul.f32	s0, s15, s0
    e6fa:	4770      	bx	lr
    e6fc:	38000000 	.word	0x38000000

0000e700 <MPU9250_asukiaaa::beginGyro(unsigned char)>:
  return sqrt(pow(accelGet(0, 1), 2) +
              pow(accelGet(2, 3), 2) +
              pow(accelGet(4, 5), 2));
}

void MPU9250_asukiaaa::beginGyro(uint8_t mode) {
    e700:	b538      	push	{r3, r4, r5, lr}
  if (myWire == NULL) {
    e702:	69c3      	ldr	r3, [r0, #28]
void MPU9250_asukiaaa::beginGyro(uint8_t mode) {
    e704:	4604      	mov	r4, r0
    e706:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e708:	b313      	cbz	r3, e750 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x50>
  beginWireIfNull();
  switch (mode) {
    e70a:	2d18      	cmp	r5, #24
    e70c:	d80e      	bhi.n	e72c <MPU9250_asukiaaa::beginGyro(unsigned char)+0x2c>
    e70e:	e8df f005 	tbb	[pc, r5]
    e712:	0d1d      	.short	0x0d1d
    e714:	0d0d0d0d 	.word	0x0d0d0d0d
    e718:	0d240d0d 	.word	0x0d240d0d
    e71c:	0d0d0d0d 	.word	0x0d0d0d0d
    e720:	0d1b0d0d 	.word	0x0d1b0d0d
    e724:	0d0d0d0d 	.word	0x0d0d0d0d
    e728:	0d0d      	.short	0x0d0d
    e72a:	0e          	.byte	0x0e
    e72b:	00          	.byte	0x00
  default:
    return; // Return without writing invalid mode
  }
  i2cWriteByte(address, 27, mode);
  delay(10);
}
    e72c:	bd38      	pop	{r3, r4, r5, pc}
    break;
    e72e:	480c      	ldr	r0, [pc, #48]	; (e760 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x60>)
    gyroRange = 250.0;
    e730:	6260      	str	r0, [r4, #36]	; 0x24
  i2cWriteByte(address, 27, mode);
    e732:	462b      	mov	r3, r5
    e734:	7821      	ldrb	r1, [r4, #0]
    e736:	4620      	mov	r0, r4
    e738:	221b      	movs	r2, #27
    e73a:	f7ff feb1 	bl	e4a0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e73e:	200a      	movs	r0, #10
}
    e740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
    e744:	f007 bb4c 	b.w	15de0 <delay>
    break;
    e748:	4806      	ldr	r0, [pc, #24]	; (e764 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x64>)
    e74a:	e7f1      	b.n	e730 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x30>
  switch (mode) {
    e74c:	4806      	ldr	r0, [pc, #24]	; (e768 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x68>)
    e74e:	e7ef      	b.n	e730 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x30>
    myWire = &Wire;
    e750:	4806      	ldr	r0, [pc, #24]	; (e76c <MPU9250_asukiaaa::beginGyro(unsigned char)+0x6c>)
    e752:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e754:	f015 fff0 	bl	24738 <___ZN7TwoWire5beginEv_veneer>
    e758:	e7d7      	b.n	e70a <MPU9250_asukiaaa::beginGyro(unsigned char)+0xa>
  switch (mode) {
    e75a:	4805      	ldr	r0, [pc, #20]	; (e770 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x70>)
    e75c:	e7e8      	b.n	e730 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x30>
    e75e:	bf00      	nop
    e760:	44fa0000 	.word	0x44fa0000
    e764:	447a0000 	.word	0x447a0000
    e768:	437a0000 	.word	0x437a0000
    e76c:	20009524 	.word	0x20009524
    e770:	43fa0000 	.word	0x43fa0000

0000e774 <MPU9250_asukiaaa::gyroUpdate()>:

uint8_t MPU9250_asukiaaa::gyroUpdate() {
    e774:	b510      	push	{r4, lr}
  return i2cRead(address, MPU9250_ADDR_GYRO_XOUT_H, 6, gyroBuff);
    e776:	4604      	mov	r4, r0
uint8_t MPU9250_asukiaaa::gyroUpdate() {
    e778:	b082      	sub	sp, #8
  return i2cRead(address, MPU9250_ADDR_GYRO_XOUT_H, 6, gyroBuff);
    e77a:	2306      	movs	r3, #6
    e77c:	2243      	movs	r2, #67	; 0x43
    e77e:	f814 1b0e 	ldrb.w	r1, [r4], #14
    e782:	9400      	str	r4, [sp, #0]
    e784:	f7ff fe30 	bl	e3e8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    e788:	b002      	add	sp, #8
    e78a:	bd10      	pop	{r4, pc}

0000e78c <MPU9250_asukiaaa::gyroX()>:

float MPU9250_asukiaaa::gyroGet(uint8_t highIndex, uint8_t lowIndex) {
  int16_t v = ((int16_t) gyroBuff[highIndex]) << 8 | gyroBuff[lowIndex];
  return ((float) -v) * gyroRange / (float) 0x8000;
    e78c:	89c3      	ldrh	r3, [r0, #14]
    e78e:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    e792:	badb      	revsh	r3, r3
    e794:	ed9f 0a05 	vldr	s0, [pc, #20]	; e7ac <MPU9250_asukiaaa::gyroX()+0x20>
    e798:	425b      	negs	r3, r3
    e79a:	ee07 3a90 	vmov	s15, r3
    e79e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e7a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}

float MPU9250_asukiaaa::gyroX() {
  return gyroGet(0, 1);
}
    e7a6:	ee27 0a80 	vmul.f32	s0, s15, s0
    e7aa:	4770      	bx	lr
    e7ac:	38000000 	.word	0x38000000

0000e7b0 <MPU9250_asukiaaa::gyroY()>:
  return ((float) -v) * gyroRange / (float) 0x8000;
    e7b0:	8a03      	ldrh	r3, [r0, #16]
    e7b2:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    e7b6:	badb      	revsh	r3, r3
    e7b8:	ed9f 0a05 	vldr	s0, [pc, #20]	; e7d0 <MPU9250_asukiaaa::gyroY()+0x20>
    e7bc:	425b      	negs	r3, r3
    e7be:	ee07 3a90 	vmov	s15, r3
    e7c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e7c6:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::gyroY() {
  return gyroGet(2, 3);
}
    e7ca:	ee27 0a80 	vmul.f32	s0, s15, s0
    e7ce:	4770      	bx	lr
    e7d0:	38000000 	.word	0x38000000

0000e7d4 <MPU9250_asukiaaa::gyroZ()>:
  return ((float) -v) * gyroRange / (float) 0x8000;
    e7d4:	8a43      	ldrh	r3, [r0, #18]
    e7d6:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    e7da:	badb      	revsh	r3, r3
    e7dc:	ed9f 0a05 	vldr	s0, [pc, #20]	; e7f4 <MPU9250_asukiaaa::gyroZ()+0x20>
    e7e0:	425b      	negs	r3, r3
    e7e2:	ee07 3a90 	vmov	s15, r3
    e7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e7ea:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::gyroZ() {
  return gyroGet(4, 5);
}
    e7ee:	ee27 0a80 	vmul.f32	s0, s15, s0
    e7f2:	4770      	bx	lr
    e7f4:	38000000 	.word	0x38000000

0000e7f8 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e7f8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    e7fc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    e800:	429a      	cmp	r2, r3
    e802:	d902      	bls.n	e80a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    e804:	4418      	add	r0, r3
    e806:	7e80      	ldrb	r0, [r0, #26]
    e808:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    e80a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    e80e:	4770      	bx	lr

0000e810 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    e810:	4770      	bx	lr
    e812:	bf00      	nop

0000e814 <TwoWire::write(unsigned char)>:
{
    e814:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    e816:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    e81a:	b178      	cbz	r0, e83c <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    e81c:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    e820:	2a88      	cmp	r2, #136	; 0x88
    e822:	d903      	bls.n	e82c <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    e824:	2201      	movs	r2, #1
			return 0;
    e826:	2000      	movs	r0, #0
    e828:	605a      	str	r2, [r3, #4]
    e82a:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    e82c:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    e830:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    e832:	441a      	add	r2, r3
    e834:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    e838:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    e83c:	4770      	bx	lr
    e83e:	bf00      	nop

0000e840 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    e840:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    e842:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    e846:	b90c      	cbnz	r4, e84c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    e848:	4620      	mov	r0, r4
    e84a:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    e84c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    e850:	4605      	mov	r5, r0
    e852:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    e856:	42a2      	cmp	r2, r4
    e858:	d80d      	bhi.n	e876 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    e85a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    e85c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    e860:	4622      	mov	r2, r4
    e862:	4418      	add	r0, r3
    e864:	f007 fe8e 	bl	16584 <memcpy>
		txBufferLength += quantity;
    e868:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    e86c:	4620      	mov	r0, r4
		txBufferLength += quantity;
    e86e:	4423      	add	r3, r4
    e870:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    e874:	bd38      	pop	{r3, r4, r5, pc}
    e876:	2201      	movs	r2, #1
    e878:	6042      	str	r2, [r0, #4]
    e87a:	e7ef      	b.n	e85c <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000e87c <TwoWire::force_clock()>:
{
    e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e880:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e884:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e886:	7e01      	ldrb	r1, [r0, #24]
{
    e888:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e88a:	7e43      	ldrb	r3, [r0, #25]
{
    e88c:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e88e:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e892:	4a38      	ldr	r2, [pc, #224]	; (e974 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e894:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e898:	4f37      	ldr	r7, [pc, #220]	; (e978 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e89a:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e8a0:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    e8a4:	0109      	lsls	r1, r1, #4
    e8a6:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    e8a8:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    e8ac:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e8b0:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    e8b4:	011b      	lsls	r3, r3, #4
    e8b6:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    e8b8:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e8ba:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    e8be:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    e8c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e8c6:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    e8c8:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    e8ca:	492c      	ldr	r1, [pc, #176]	; (e97c <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e8cc:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    e8ce:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e8d2:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    e8d4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    e8d8:	686b      	ldr	r3, [r5, #4]
    e8da:	4333      	orrs	r3, r6
    e8dc:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e8de:	4b28      	ldr	r3, [pc, #160]	; (e980 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    e8e0:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e8e2:	683a      	ldr	r2, [r7, #0]
    e8e4:	fba3 3202 	umull	r3, r2, r3, r2
    e8e8:	0c92      	lsrs	r2, r2, #18
    e8ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    e8ee:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e8f0:	684b      	ldr	r3, [r1, #4]
    e8f2:	1b1b      	subs	r3, r3, r4
    e8f4:	429a      	cmp	r2, r3
    e8f6:	d8fb      	bhi.n	e8f0 <TwoWire::force_clock()+0x74>
    e8f8:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    e8fc:	4a1f      	ldr	r2, [pc, #124]	; (e97c <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e8fe:	f8df e080 	ldr.w	lr, [pc, #128]	; e980 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    e902:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    e906:	4203      	tst	r3, r0
    e908:	d002      	beq.n	e910 <TwoWire::force_clock()+0x94>
    e90a:	68ab      	ldr	r3, [r5, #8]
    e90c:	4233      	tst	r3, r6
    e90e:	d12f      	bne.n	e970 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    e910:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    e914:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e916:	6839      	ldr	r1, [r7, #0]
    e918:	fbae 3101 	umull	r3, r1, lr, r1
    e91c:	0c89      	lsrs	r1, r1, #18
    e91e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e922:	6853      	ldr	r3, [r2, #4]
    e924:	1b1b      	subs	r3, r3, r4
    e926:	4299      	cmp	r1, r3
    e928:	d8fb      	bhi.n	e922 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    e92a:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    e92e:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e930:	6839      	ldr	r1, [r7, #0]
    e932:	fbae 3101 	umull	r3, r1, lr, r1
    e936:	0c89      	lsrs	r1, r1, #18
    e938:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e93c:	6853      	ldr	r3, [r2, #4]
    e93e:	1b1b      	subs	r3, r3, r4
    e940:	4299      	cmp	r1, r3
    e942:	d8fb      	bhi.n	e93c <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    e944:	f1bc 0c01 	subs.w	ip, ip, #1
    e948:	d1db      	bne.n	e902 <TwoWire::force_clock()+0x86>
	bool ret = false;
    e94a:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    e94c:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    e950:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    e952:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    e956:	68db      	ldr	r3, [r3, #12]
    e958:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    e95c:	f899 3019 	ldrb.w	r3, [r9, #25]
    e960:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    e964:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    e968:	6013      	str	r3, [r2, #0]
}
    e96a:	b003      	add	sp, #12
    e96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    e970:	2001      	movs	r0, #1
    e972:	e7eb      	b.n	e94c <TwoWire::force_clock()+0xd0>
    e974:	20008148 	.word	0x20008148
    e978:	200094c0 	.word	0x200094c0
    e97c:	e0001000 	.word	0xe0001000
    e980:	431bde83 	.word	0x431bde83

0000e984 <TwoWire::wait_idle()>:
	return systick_millis_count;
    e984:	4a0e      	ldr	r2, [pc, #56]	; (e9c0 <TwoWire::wait_idle()+0x3c>)
{
    e986:	b510      	push	{r4, lr}
    e988:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    e98a:	6904      	ldr	r4, [r0, #16]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    e98c:	e005      	b.n	e99a <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    e98e:	01db      	lsls	r3, r3, #7
    e990:	d407      	bmi.n	e9a2 <TwoWire::wait_idle()+0x1e>
    e992:	6813      	ldr	r3, [r2, #0]
	operator unsigned long () const { return millis() - ms; }
    e994:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    e996:	2b10      	cmp	r3, #16
    e998:	d808      	bhi.n	e9ac <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    e99a:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    e99c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    e9a0:	d1f5      	bne.n	e98e <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    e9a2:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    e9a6:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    e9a8:	6163      	str	r3, [r4, #20]
}
    e9aa:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    e9ac:	f7ff ff66 	bl	e87c <TwoWire::force_clock()>
    e9b0:	2800      	cmp	r0, #0
    e9b2:	d0fa      	beq.n	e9aa <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    e9b4:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    e9b8:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    e9ba:	6163      	str	r3, [r4, #20]
	return true;
    e9bc:	e7f5      	b.n	e9aa <TwoWire::wait_idle()+0x26>
    e9be:	bf00      	nop
    e9c0:	2000eaac 	.word	0x2000eaac

0000e9c4 <TwoWire::endTransmission(unsigned char)>:
{
    e9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    e9c8:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    e9cc:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    e9ce:	f1ba 0f00 	cmp.w	sl, #0
    e9d2:	d04f      	beq.n	ea74 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    e9d4:	4681      	mov	r9, r0
    e9d6:	4688      	mov	r8, r1
    e9d8:	f7ff ffd4 	bl	e984 <TwoWire::wait_idle()>
    e9dc:	2800      	cmp	r0, #0
    e9de:	d049      	beq.n	ea74 <TwoWire::endTransmission(unsigned char)+0xb0>
    e9e0:	4e37      	ldr	r6, [pc, #220]	; (eac0 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    e9e2:	2400      	movs	r4, #0
    e9e4:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    e9e6:	e018      	b.n	ea1a <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    e9e8:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    e9ea:	0519      	lsls	r1, r3, #20
    e9ec:	d451      	bmi.n	ea92 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    e9ee:	04da      	lsls	r2, r3, #19
    e9f0:	d455      	bmi.n	ea9e <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    e9f2:	0558      	lsls	r0, r3, #21
    e9f4:	d459      	bmi.n	eaaa <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    e9f6:	0499      	lsls	r1, r3, #18
    e9f8:	d441      	bmi.n	ea7e <TwoWire::endTransmission(unsigned char)+0xba>
    e9fa:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    e9fc:	1bd2      	subs	r2, r2, r7
    e9fe:	2a32      	cmp	r2, #50	; 0x32
    ea00:	d83d      	bhi.n	ea7e <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    ea02:	4554      	cmp	r4, sl
    ea04:	d907      	bls.n	ea16 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    ea06:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    ea08:	0752      	lsls	r2, r2, #29
    ea0a:	d104      	bne.n	ea16 <TwoWire::endTransmission(unsigned char)+0x52>
    ea0c:	059b      	lsls	r3, r3, #22
    ea0e:	d455      	bmi.n	eabc <TwoWire::endTransmission(unsigned char)+0xf8>
    ea10:	f1b8 0f00 	cmp.w	r8, #0
    ea14:	d052      	beq.n	eabc <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    ea16:	f009 fa7f 	bl	17f18 <yield>
		if (tx_index <= tx_len) {
    ea1a:	4554      	cmp	r4, sl
    ea1c:	d8e4      	bhi.n	e9e8 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    ea1e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    ea20:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    ea22:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    ea26:	d4df      	bmi.n	e9e8 <TwoWire::endTransmission(unsigned char)+0x24>
    ea28:	e013      	b.n	ea52 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    ea2a:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    ea2e:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    ea30:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    ea32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    ea36:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    ea38:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    ea3a:	d01e      	beq.n	ea7a <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    ea3c:	458a      	cmp	sl, r1
				fifo_used++;
    ea3e:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ea42:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    ea46:	d90e      	bls.n	ea66 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ea48:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    ea4c:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ea4e:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    ea50:	d0ca      	beq.n	e9e8 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    ea52:	2101      	movs	r1, #1
				if (tx_index == 0) {
    ea54:	2c00      	cmp	r4, #0
    ea56:	d0e8      	beq.n	ea2a <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ea58:	4621      	mov	r1, r4
				fifo_used++;
    ea5a:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ea5c:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    ea5e:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ea60:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    ea64:	d8f0      	bhi.n	ea48 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    ea66:	f1b8 0f00 	cmp.w	r8, #0
    ea6a:	d0bd      	beq.n	e9e8 <TwoWire::endTransmission(unsigned char)+0x24>
    ea6c:	f44f 7300 	mov.w	r3, #512	; 0x200
    ea70:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    ea72:	e7b9      	b.n	e9e8 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    ea74:	2004      	movs	r0, #4
}
    ea76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    ea7a:	2401      	movs	r4, #1
    ea7c:	e7b4      	b.n	e9e8 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ea7e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ea80:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    ea84:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ea86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ea8a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ea8c:	662a      	str	r2, [r5, #96]	; 0x60
}
    ea8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ea92:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    ea94:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ea96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ea9a:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    ea9c:	e7eb      	b.n	ea76 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ea9e:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    eaa0:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    eaa2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    eaa6:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    eaa8:	e7e5      	b.n	ea76 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    eaaa:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    eaac:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    eab0:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    eab2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    eab6:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    eab8:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    eaba:	e7dc      	b.n	ea76 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    eabc:	2000      	movs	r0, #0
    eabe:	e7da      	b.n	ea76 <TwoWire::endTransmission(unsigned char)+0xb2>
    eac0:	2000eaac 	.word	0x2000eaac

0000eac4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    eac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eac8:	4683      	mov	fp, r0
    eaca:	460c      	mov	r4, r1
    eacc:	4615      	mov	r5, r2
    eace:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    ead0:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    ead4:	f7ff ff56 	bl	e984 <TwoWire::wait_idle()>
    ead8:	2800      	cmp	r0, #0
    eada:	f000 809e 	beq.w	ec1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    eade:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    eae0:	2d01      	cmp	r5, #1
    eae2:	f8df 813c 	ldr.w	r8, [pc, #316]	; ec20 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    eae6:	f240 4601 	movw	r6, #1025	; 0x401
    eaea:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    eaec:	f04f 0100 	mov.w	r1, #0
    eaf0:	bf38      	it	cc
    eaf2:	2501      	movcc	r5, #1
    eaf4:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    eaf8:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    eafa:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    eafc:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    eb00:	e020      	b.n	eb44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    eb02:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    eb06:	2b87      	cmp	r3, #135	; 0x87
    eb08:	d93f      	bls.n	eb8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    eb0a:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    eb0e:	0510      	lsls	r0, r2, #20
    eb10:	d45a      	bmi.n	ebc8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    eb12:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    eb16:	d170      	bne.n	ebfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    eb18:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    eb1c:	eba3 0309 	sub.w	r3, r3, r9
    eb20:	2b32      	cmp	r3, #50	; 0x32
    eb22:	d86a      	bhi.n	ebfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    eb24:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    eb28:	42ab      	cmp	r3, r5
    eb2a:	d309      	bcc.n	eb40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    eb2c:	2c02      	cmp	r4, #2
    eb2e:	d907      	bls.n	eb40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    eb30:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    eb34:	0759      	lsls	r1, r3, #29
    eb36:	d103      	bne.n	eb40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    eb38:	0593      	lsls	r3, r2, #22
    eb3a:	d44b      	bmi.n	ebd4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    eb3c:	2f00      	cmp	r7, #0
    eb3e:	d049      	beq.n	ebd4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    eb40:	f009 f9ea 	bl	17f18 <yield>
		if (tx_state < 3) {
    eb44:	2c02      	cmp	r4, #2
    eb46:	d8dc      	bhi.n	eb02 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    eb48:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    eb4c:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    eb50:	075b      	lsls	r3, r3, #29
    eb52:	d4d6      	bmi.n	eb02 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    eb54:	1e68      	subs	r0, r5, #1
    eb56:	4422      	add	r2, r4
    eb58:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    eb5c:	b94c      	cbnz	r4, eb72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    eb5e:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    eb62:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    eb64:	1b13      	subs	r3, r2, r4
    eb66:	2b03      	cmp	r3, #3
    eb68:	d8cb      	bhi.n	eb02 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    eb6a:	2c02      	cmp	r4, #2
    eb6c:	d8c9      	bhi.n	eb02 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    eb6e:	2c00      	cmp	r4, #0
    eb70:	d0f5      	beq.n	eb5e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    eb72:	2c01      	cmp	r4, #1
    eb74:	d037      	beq.n	ebe6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    eb76:	b11f      	cbz	r7, eb80 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    eb78:	f44f 7300 	mov.w	r3, #512	; 0x200
    eb7c:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    eb80:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    eb84:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    eb86:	2b87      	cmp	r3, #135	; 0x87
    eb88:	d8bf      	bhi.n	eb0a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    eb8a:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    eb8e:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    eb92:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    eb96:	d0b8      	beq.n	eb0a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    eb98:	1c59      	adds	r1, r3, #1
    eb9a:	449c      	add	ip, r3
    eb9c:	3319      	adds	r3, #25
    eb9e:	b2c9      	uxtb	r1, r1
    eba0:	fa5f fc8c 	uxtb.w	ip, ip
    eba4:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    eba8:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    ebac:	1c4a      	adds	r2, r1, #1
    ebae:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    ebb0:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    ebb4:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    ebb6:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    ebba:	d0a6      	beq.n	eb0a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    ebbc:	2989      	cmp	r1, #137	; 0x89
    ebbe:	d1f3      	bne.n	eba8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    ebc0:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    ebc4:	0510      	lsls	r0, r2, #20
    ebc6:	d5a4      	bpl.n	eb12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebc8:	f8da 3010 	ldr.w	r3, [sl, #16]
    ebcc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ebd0:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    ebd4:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    ebd8:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    ebdc:	d106      	bne.n	ebec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    ebde:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    ebe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    ebe6:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    ebea:	e7ba      	b.n	eb62 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    ebec:	f8da 3010 	ldr.w	r3, [sl, #16]
    ebf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ebf4:	f8ca 3010 	str.w	r3, [sl, #16]
    ebf8:	e7f1      	b.n	ebde <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebfa:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ebfe:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ec02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ec06:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ec0a:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    ec0e:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    ec12:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    ec16:	d0e2      	beq.n	ebde <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    ec18:	e7e8      	b.n	ebec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    ec1a:	2004      	movs	r0, #4
}
    ec1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec20:	2000eaac 	.word	0x2000eaac

0000ec24 <TwoWire::isr()>:
{
    ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    ec26:	6906      	ldr	r6, [r0, #16]
{
    ec28:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    ec2a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    ec2e:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    ec32:	d001      	beq.n	ec38 <TwoWire::isr()+0x14>
    ec34:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    ec38:	07a8      	lsls	r0, r5, #30
    ec3a:	d50b      	bpl.n	ec54 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    ec3c:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    ec40:	0411      	lsls	r1, r2, #16
    ec42:	d53d      	bpl.n	ecc0 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    ec44:	2300      	movs	r3, #0
    ec46:	2101      	movs	r1, #1
    ec48:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    ec4c:	4423      	add	r3, r4
    ec4e:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    ec52:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    ec54:	07ea      	lsls	r2, r5, #31
    ec56:	d510      	bpl.n	ec7a <TwoWire::isr()+0x56>
		if (!transmitting) {
    ec58:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    ec5c:	b1f7      	cbz	r7, ec9c <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    ec5e:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    ec62:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    ec66:	42bb      	cmp	r3, r7
    ec68:	d926      	bls.n	ecb8 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    ec6a:	1c7b      	adds	r3, r7, #1
    ec6c:	4427      	add	r7, r4
    ec6e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    ec72:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    ec76:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    ec7a:	05ab      	lsls	r3, r5, #22
    ec7c:	d50d      	bpl.n	ec9a <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    ec7e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    ec82:	b118      	cbz	r0, ec8c <TwoWire::isr()+0x68>
    ec84:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    ec88:	b103      	cbz	r3, ec8c <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    ec8a:	4798      	blx	r3
		rxBufferIndex = 0;
    ec8c:	2300      	movs	r3, #0
    ec8e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    ec92:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    ec96:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    ec9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    ec9c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    eca0:	b103      	cbz	r3, eca4 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    eca2:	4798      	blx	r3
			txBufferIndex = 0;
    eca4:	2300      	movs	r3, #0
    eca6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    ecaa:	2301      	movs	r3, #1
    ecac:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    ecb0:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    ecb4:	42bb      	cmp	r3, r7
    ecb6:	d8d8      	bhi.n	ec6a <TwoWire::isr()+0x46>
			port->STDR = 0;
    ecb8:	2300      	movs	r3, #0
    ecba:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    ecbe:	e7dc      	b.n	ec7a <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    ecc0:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    ecc4:	2b87      	cmp	r3, #135	; 0x87
    ecc6:	d8c5      	bhi.n	ec54 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    ecc8:	1c59      	adds	r1, r3, #1
    ecca:	b2c9      	uxtb	r1, r1
    eccc:	e7be      	b.n	ec4c <TwoWire::isr()+0x28>
    ecce:	bf00      	nop

0000ecd0 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    ecd0:	4801      	ldr	r0, [pc, #4]	; (ecd8 <lpi2c1_isr()+0x8>)
    ecd2:	f7ff bfa7 	b.w	ec24 <TwoWire::isr()>
    ecd6:	bf00      	nop
    ecd8:	20009524 	.word	0x20009524

0000ecdc <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    ecdc:	4801      	ldr	r0, [pc, #4]	; (ece4 <lpi2c3_isr()+0x8>)
    ecde:	f7ff bfa1 	b.w	ec24 <TwoWire::isr()>
    ece2:	bf00      	nop
    ece4:	20009664 	.word	0x20009664

0000ece8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    ece8:	4801      	ldr	r0, [pc, #4]	; (ecf0 <lpi2c4_isr()+0x8>)
    ecea:	f7ff bf9b 	b.w	ec24 <TwoWire::isr()>
    ecee:	bf00      	nop
    ecf0:	200097a4 	.word	0x200097a4

0000ecf4 <TwoWire::setClock(unsigned long)>:
{
    ecf4:	b410      	push	{r4}
	if (frequency < 400000) {
    ecf6:	4c14      	ldr	r4, [pc, #80]	; (ed48 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    ecf8:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    ecfa:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    ecfc:	42a1      	cmp	r1, r4
	port->MCR = 0;
    ecfe:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    ed00:	d814      	bhi.n	ed2c <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    ed02:	4c12      	ldr	r4, [pc, #72]	; (ed4c <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    ed04:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    ed06:	4912      	ldr	r1, [pc, #72]	; (ed50 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    ed08:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    ed0c:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    ed0e:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    ed10:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    ed12:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    ed14:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    ed16:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    ed18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    ed1c:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    ed1e:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    ed20:	6218      	str	r0, [r3, #32]
}
    ed22:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    ed26:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    ed28:	611a      	str	r2, [r3, #16]
}
    ed2a:	4770      	bx	lr
	} else if (frequency < 1000000) {
    ed2c:	4809      	ldr	r0, [pc, #36]	; (ed54 <TwoWire::setClock(unsigned long)+0x60>)
    ed2e:	4281      	cmp	r1, r0
    ed30:	d907      	bls.n	ed42 <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    ed32:	4c09      	ldr	r4, [pc, #36]	; (ed58 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    ed34:	4809      	ldr	r0, [pc, #36]	; (ed5c <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    ed36:	490a      	ldr	r1, [pc, #40]	; (ed60 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    ed38:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    ed3a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    ed3c:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    ed3e:	62d9      	str	r1, [r3, #44]	; 0x2c
    ed40:	e7e8      	b.n	ed14 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    ed42:	4c08      	ldr	r4, [pc, #32]	; (ed64 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    ed44:	4808      	ldr	r0, [pc, #32]	; (ed68 <TwoWire::setClock(unsigned long)+0x74>)
    ed46:	e7f6      	b.n	ed36 <TwoWire::setClock(unsigned long)+0x42>
    ed48:	00061a7f 	.word	0x00061a7f
    ed4c:	1928373b 	.word	0x1928373b
    ed50:	05050bb8 	.word	0x05050bb8
    ed54:	000f423f 	.word	0x000f423f
    ed58:	0407090a 	.word	0x0407090a
    ed5c:	01010960 	.word	0x01010960
    ed60:	00057f00 	.word	0x00057f00
    ed64:	0c121a1c 	.word	0x0c121a1c
    ed68:	02020e10 	.word	0x02020e10

0000ed6c <Adafruit_GFX::startWrite()>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
    ed6c:	4770      	bx	lr
    ed6e:	bf00      	nop

0000ed70 <Adafruit_GFX::writePixel(short, short, unsigned short)>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
    ed70:	b410      	push	{r4}
  drawPixel(x, y, color);
    ed72:	6804      	ldr	r4, [r0, #0]
    ed74:	6924      	ldr	r4, [r4, #16]
    ed76:	46a4      	mov	ip, r4
}
    ed78:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
    ed7c:	4760      	bx	ip
    ed7e:	bf00      	nop

0000ed80 <Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
    ed80:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
    ed82:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    ed84:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
    ed88:	9502      	str	r5, [sp, #8]
    ed8a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    ed8c:	46a4      	mov	ip, r4
}
    ed8e:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
    ed90:	4760      	bx	ip
    ed92:	bf00      	nop

0000ed94 <Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
    ed94:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
    ed96:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    ed98:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
    ed9c:	9502      	str	r5, [sp, #8]
    ed9e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    eda0:	46a4      	mov	ip, r4
}
    eda2:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
    eda4:	4760      	bx	ip
    eda6:	bf00      	nop

0000eda8 <Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
    eda8:	b430      	push	{r4, r5}
    edaa:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
    edae:	6804      	ldr	r4, [r0, #0]
    edb0:	9502      	str	r5, [sp, #8]
                                 uint16_t color) {
    edb2:	f8bd 500c 	ldrh.w	r5, [sp, #12]
  fillRect(x, y, w, h, color);
    edb6:	9503      	str	r5, [sp, #12]
    edb8:	6c24      	ldr	r4, [r4, #64]	; 0x40
    edba:	46a4      	mov	ip, r4
}
    edbc:	bc30      	pop	{r4, r5}
  fillRect(x, y, w, h, color);
    edbe:	4760      	bx	ip

0000edc0 <Adafruit_GFX::fillScreen(unsigned short)>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
    edc0:	b530      	push	{r4, r5, lr}
  fillRect(0, 0, _width, _height, color);
    edc2:	2200      	movs	r2, #0
void Adafruit_GFX::fillScreen(uint16_t color) {
    edc4:	b083      	sub	sp, #12
  fillRect(0, 0, _width, _height, color);
    edc6:	6804      	ldr	r4, [r0, #0]
    edc8:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    edcc:	9101      	str	r1, [sp, #4]
    edce:	4611      	mov	r1, r2
    edd0:	9500      	str	r5, [sp, #0]
    edd2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    edd6:	6c24      	ldr	r4, [r4, #64]	; 0x40
    edd8:	47a0      	blx	r4
}
    edda:	b003      	add	sp, #12
    eddc:	bd30      	pop	{r4, r5, pc}
    edde:	bf00      	nop

0000ede0 <Adafruit_GFX::invertDisplay(bool)>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    ede0:	4770      	bx	lr
    ede2:	bf00      	nop

0000ede4 <Adafruit_GFX::setRotation(unsigned char)>:
  rotation = (x & 3);
    ede4:	f001 0303 	and.w	r3, r1, #3
    ede8:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
    edea:	07cb      	lsls	r3, r1, #31
    edec:	d405      	bmi.n	edfa <Adafruit_GFX::setRotation(unsigned char)+0x16>
    _width = WIDTH;
    edee:	8902      	ldrh	r2, [r0, #8]
    _height = HEIGHT;
    edf0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    _width = WIDTH;
    edf4:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
    edf6:	81c3      	strh	r3, [r0, #14]
}
    edf8:	4770      	bx	lr
    _width = HEIGHT;
    edfa:	8942      	ldrh	r2, [r0, #10]
    _height = WIDTH;
    edfc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    _width = HEIGHT;
    ee00:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
    ee02:	81c3      	strh	r3, [r0, #14]
}
    ee04:	4770      	bx	lr
    ee06:	bf00      	nop

0000ee08 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    ee08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee0c:	461c      	mov	r4, r3
    ee0e:	460b      	mov	r3, r1
  startWrite();
    ee10:	6801      	ldr	r1, [r0, #0]
                                 uint16_t color) {
    ee12:	b084      	sub	sp, #16
    ee14:	4e11      	ldr	r6, [pc, #68]	; (ee5c <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x54>)
    ee16:	4605      	mov	r5, r0
  startWrite();
    ee18:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
    ee1a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    ee1e:	42b7      	cmp	r7, r6
    ee20:	d110      	bne.n	ee44 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x3c>
  writeLine(x, y, x, y + h - 1, color);
    ee22:	3c01      	subs	r4, #1
    ee24:	f8cd 8004 	str.w	r8, [sp, #4]
    ee28:	4628      	mov	r0, r5
    ee2a:	4414      	add	r4, r2
    ee2c:	b224      	sxth	r4, r4
    ee2e:	9400      	str	r4, [sp, #0]
    ee30:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    ee32:	4619      	mov	r1, r3
    ee34:	47a0      	blx	r4
  endWrite();
    ee36:	682b      	ldr	r3, [r5, #0]
    ee38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ee3a:	42b3      	cmp	r3, r6
    ee3c:	d109      	bne.n	ee52 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x4a>
}
    ee3e:	b004      	add	sp, #16
    ee40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee44:	e9cd 3202 	strd	r3, r2, [sp, #8]
  startWrite();
    ee48:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
    ee4a:	6829      	ldr	r1, [r5, #0]
    ee4c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    ee50:	e7e7      	b.n	ee22 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x1a>
  endWrite();
    ee52:	4628      	mov	r0, r5
}
    ee54:	b004      	add	sp, #16
    ee56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
    ee5a:	4718      	bx	r3
    ee5c:	0000ed6d 	.word	0x0000ed6d

0000ee60 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    ee60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  startWrite();
    ee64:	6805      	ldr	r5, [r0, #0]
                                 uint16_t color) {
    ee66:	b085      	sub	sp, #20
    ee68:	4e12      	ldr	r6, [pc, #72]	; (eeb4 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x54>)
    ee6a:	4604      	mov	r4, r0
  startWrite();
    ee6c:	696f      	ldr	r7, [r5, #20]
                                 uint16_t color) {
    ee6e:	4699      	mov	r9, r3
    ee70:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    ee74:	42b7      	cmp	r7, r6
    ee76:	d110      	bne.n	ee9a <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x3a>
  writeLine(x, y, x + w - 1, y, color);
    ee78:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    ee7c:	f8cd 8004 	str.w	r8, [sp, #4]
    ee80:	9200      	str	r2, [sp, #0]
    ee82:	4620      	mov	r0, r4
    ee84:	440b      	add	r3, r1
    ee86:	6aad      	ldr	r5, [r5, #40]	; 0x28
    ee88:	b21b      	sxth	r3, r3
    ee8a:	47a8      	blx	r5
  endWrite();
    ee8c:	6823      	ldr	r3, [r4, #0]
    ee8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ee90:	42b3      	cmp	r3, r6
    ee92:	d109      	bne.n	eea8 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x48>
}
    ee94:	b005      	add	sp, #20
    ee96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ee9a:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
    ee9e:	47b8      	blx	r7
  writeLine(x, y, x + w - 1, y, color);
    eea0:	6825      	ldr	r5, [r4, #0]
    eea2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    eea6:	e7e7      	b.n	ee78 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x18>
  endWrite();
    eea8:	4620      	mov	r0, r4
}
    eeaa:	b005      	add	sp, #20
    eeac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  endWrite();
    eeb0:	4718      	bx	r3
    eeb2:	bf00      	nop
    eeb4:	0000ed6d 	.word	0x0000ed6d

0000eeb8 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    eeb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
    eebc:	4299      	cmp	r1, r3
                            uint16_t color) {
    eebe:	b087      	sub	sp, #28
    eec0:	4605      	mov	r5, r0
    eec2:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
    eec6:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
  if (x0 == x1) {
    eeca:	d022      	beq.n	ef12 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x5a>
  } else if (y0 == y1) {
    eecc:	42a2      	cmp	r2, r4
    eece:	d012      	beq.n	eef6 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x3e>
    startWrite();
    eed0:	6807      	ldr	r7, [r0, #0]
    eed2:	f8df 8084 	ldr.w	r8, [pc, #132]	; ef58 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0xa0>
    eed6:	f8d7 9014 	ldr.w	r9, [r7, #20]
    eeda:	45c1      	cmp	r9, r8
    eedc:	d133      	bne.n	ef46 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x8e>
    writeLine(x0, y0, x1, y1, color);
    eede:	4628      	mov	r0, r5
    eee0:	e9cd 4600 	strd	r4, r6, [sp]
    eee4:	6abc      	ldr	r4, [r7, #40]	; 0x28
    eee6:	47a0      	blx	r4
    endWrite();
    eee8:	682b      	ldr	r3, [r5, #0]
    eeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    eeec:	4543      	cmp	r3, r8
    eeee:	d125      	bne.n	ef3c <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x84>
}
    eef0:	b007      	add	sp, #28
    eef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (x0 > x1)
    eef6:	4299      	cmp	r1, r3
    eef8:	dc1c      	bgt.n	ef34 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x7c>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    eefa:	960e      	str	r6, [sp, #56]	; 0x38
    eefc:	3301      	adds	r3, #1
    eefe:	682c      	ldr	r4, [r5, #0]
    ef00:	4628      	mov	r0, r5
    ef02:	1a5b      	subs	r3, r3, r1
    ef04:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    ef06:	b21b      	sxth	r3, r3
    ef08:	46a4      	mov	ip, r4
}
    ef0a:	b007      	add	sp, #28
    ef0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    ef10:	4760      	bx	ip
    if (y0 > y1)
    ef12:	42a2      	cmp	r2, r4
    ef14:	dd02      	ble.n	ef1c <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x64>
    ef16:	4613      	mov	r3, r2
    ef18:	4622      	mov	r2, r4
    ef1a:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
    ef1c:	960e      	str	r6, [sp, #56]	; 0x38
    ef1e:	1c63      	adds	r3, r4, #1
    ef20:	682c      	ldr	r4, [r5, #0]
    ef22:	4628      	mov	r0, r5
    ef24:	1a9b      	subs	r3, r3, r2
    ef26:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    ef28:	b21b      	sxth	r3, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    ef2a:	46a4      	mov	ip, r4
}
    ef2c:	b007      	add	sp, #28
    ef2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    ef32:	4760      	bx	ip
    if (x0 > x1)
    ef34:	4608      	mov	r0, r1
    ef36:	4619      	mov	r1, r3
    ef38:	4603      	mov	r3, r0
    ef3a:	e7de      	b.n	eefa <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x42>
    endWrite();
    ef3c:	4628      	mov	r0, r5
}
    ef3e:	b007      	add	sp, #28
    ef40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
    ef44:	4718      	bx	r3
    ef46:	e9cd 2304 	strd	r2, r3, [sp, #16]
    ef4a:	9103      	str	r1, [sp, #12]
    startWrite();
    ef4c:	47c8      	blx	r9
    writeLine(x0, y0, x1, y1, color);
    ef4e:	682f      	ldr	r7, [r5, #0]
    ef50:	9903      	ldr	r1, [sp, #12]
    ef52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ef56:	e7c2      	b.n	eede <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x26>
    ef58:	0000ed6d 	.word	0x0000ed6d

0000ef5c <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>:
  startWrite();
    ef5c:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
    ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef64:	4690      	mov	r8, r2
    ef66:	461f      	mov	r7, r3
    ef68:	4a1f      	ldr	r2, [pc, #124]	; (efe8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
    ef6a:	b083      	sub	sp, #12
  startWrite();
    ef6c:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
    ef70:	4605      	mov	r5, r0
    ef72:	460c      	mov	r4, r1
    ef74:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
    ef78:	4293      	cmp	r3, r2
    ef7a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
    ef7e:	d129      	bne.n	efd4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x78>
  for (int16_t i = x; i < x + w; i++) {
    ef80:	4427      	add	r7, r4
    ef82:	42a7      	cmp	r7, r4
    ef84:	dd1e      	ble.n	efc4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    ef86:	f8df b064 	ldr.w	fp, [pc, #100]	; efec <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x90>
    ef8a:	e00a      	b.n	efa2 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
    ef8c:	3401      	adds	r4, #1
  drawFastVLine(x, y, h, color);
    ef8e:	f8cd a000 	str.w	sl, [sp]
    ef92:	f8dc 6038 	ldr.w	r6, [ip, #56]	; 0x38
    ef96:	b224      	sxth	r4, r4
    ef98:	47b0      	blx	r6
  endWrite();
    ef9a:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
    ef9e:	42bc      	cmp	r4, r7
    efa0:	da10      	bge.n	efc4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    writeFastVLine(i, y, h, color);
    efa2:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
    efa6:	464b      	mov	r3, r9
    efa8:	4642      	mov	r2, r8
    efaa:	4621      	mov	r1, r4
    efac:	455e      	cmp	r6, fp
    efae:	4628      	mov	r0, r5
    efb0:	d0ec      	beq.n	ef8c <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x30>
    efb2:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
    efb4:	f8cd a000 	str.w	sl, [sp]
    efb8:	47b0      	blx	r6
  endWrite();
    efba:	f8d5 c000 	ldr.w	ip, [r5]
    efbe:	b224      	sxth	r4, r4
  for (int16_t i = x; i < x + w; i++) {
    efc0:	42bc      	cmp	r4, r7
    efc2:	dbee      	blt.n	efa2 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
  endWrite();
    efc4:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    efc8:	4a07      	ldr	r2, [pc, #28]	; (efe8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
    efca:	4293      	cmp	r3, r2
    efcc:	d106      	bne.n	efdc <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x80>
}
    efce:	b003      	add	sp, #12
    efd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
    efd4:	4798      	blx	r3
  endWrite();
    efd6:	f8d5 c000 	ldr.w	ip, [r5]
    efda:	e7d1      	b.n	ef80 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x24>
    efdc:	4628      	mov	r0, r5
}
    efde:	b003      	add	sp, #12
    efe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    efe4:	4718      	bx	r3
    efe6:	bf00      	nop
    efe8:	0000ed6d 	.word	0x0000ed6d
    efec:	0000ed81 	.word	0x0000ed81

0000eff0 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eff4:	461d      	mov	r5, r3
  startWrite();
    eff6:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
    eff8:	4616      	mov	r6, r2
    effa:	f8df 90bc 	ldr.w	r9, [pc, #188]	; f0b8 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xc8>
  startWrite();
    effe:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
    f000:	b085      	sub	sp, #20
    f002:	4604      	mov	r4, r0
    f004:	454a      	cmp	r2, r9
    f006:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
    f00a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
    f00e:	d143      	bne.n	f098 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xa8>
  writeFastHLine(x, y, w, color);
    f010:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    f014:	4632      	mov	r2, r6
    f016:	f8df a0a4 	ldr.w	sl, [pc, #164]	; f0bc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xcc>
    f01a:	4620      	mov	r0, r4
  drawFastHLine(x, y, w, color);
    f01c:	9700      	str	r7, [sp, #0]
    f01e:	45d3      	cmp	fp, sl
  writeFastHLine(x, y, w, color);
    f020:	9103      	str	r1, [sp, #12]
  drawFastHLine(x, y, w, color);
    f022:	bf08      	it	eq
    f024:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	; 0x3c
  writeFastHLine(x, y, w, color);
    f028:	462b      	mov	r3, r5
    f02a:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
    f02c:	6823      	ldr	r3, [r4, #0]
    f02e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
  writeFastHLine(x, y, w, color);
    f032:	9903      	ldr	r1, [sp, #12]
  writeFastHLine(x, y + h - 1, w, color);
    f034:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    f038:	4432      	add	r2, r6
  drawFastHLine(x, y, w, color);
    f03a:	9700      	str	r7, [sp, #0]
    f03c:	45d3      	cmp	fp, sl
  writeFastHLine(x, y + h - 1, w, color);
    f03e:	b212      	sxth	r2, r2
    f040:	d134      	bne.n	f0ac <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xbc>
  drawFastHLine(x, y, w, color);
    f042:	f8d3 a03c 	ldr.w	sl, [r3, #60]	; 0x3c
    f046:	4620      	mov	r0, r4
    f048:	9103      	str	r1, [sp, #12]
    f04a:	462b      	mov	r3, r5
    f04c:	47d0      	blx	sl
}
    f04e:	9903      	ldr	r1, [sp, #12]
  writeFastVLine(x, y, h, color);
    f050:	6823      	ldr	r3, [r4, #0]
    f052:	4632      	mov	r2, r6
    f054:	f8df a068 	ldr.w	sl, [pc, #104]	; f0c0 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xd0>
    f058:	4620      	mov	r0, r4
    f05a:	f8d3 b020 	ldr.w	fp, [r3, #32]
  writeFastVLine(x + w - 1, y, h, color);
    f05e:	3d01      	subs	r5, #1
  drawFastVLine(x, y, h, color);
    f060:	9700      	str	r7, [sp, #0]
    f062:	45d3      	cmp	fp, sl
  writeFastVLine(x, y, h, color);
    f064:	9103      	str	r1, [sp, #12]
  drawFastVLine(x, y, h, color);
    f066:	bf08      	it	eq
    f068:	f8d3 b038 	ldreq.w	fp, [r3, #56]	; 0x38
  writeFastVLine(x, y, h, color);
    f06c:	4643      	mov	r3, r8
    f06e:	47d8      	blx	fp
    f070:	9903      	ldr	r1, [sp, #12]
  writeFastVLine(x + w - 1, y, h, color);
    f072:	6822      	ldr	r2, [r4, #0]
  drawFastVLine(x, y, h, color);
    f074:	4643      	mov	r3, r8
  writeFastVLine(x + w - 1, y, h, color);
    f076:	440d      	add	r5, r1
    f078:	4620      	mov	r0, r4
    f07a:	b229      	sxth	r1, r5
    f07c:	6a15      	ldr	r5, [r2, #32]
  drawFastVLine(x, y, h, color);
    f07e:	9700      	str	r7, [sp, #0]
    f080:	4555      	cmp	r5, sl
    f082:	bf08      	it	eq
    f084:	6b95      	ldreq	r5, [r2, #56]	; 0x38
  writeFastVLine(x + w - 1, y, h, color);
    f086:	4632      	mov	r2, r6
    f088:	47a8      	blx	r5
  endWrite();
    f08a:	6823      	ldr	r3, [r4, #0]
    f08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f08e:	454b      	cmp	r3, r9
    f090:	d107      	bne.n	f0a2 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xb2>
}
    f092:	b005      	add	sp, #20
    f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f098:	9103      	str	r1, [sp, #12]
  startWrite();
    f09a:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
    f09c:	6823      	ldr	r3, [r4, #0]
    f09e:	9903      	ldr	r1, [sp, #12]
    f0a0:	e7b6      	b.n	f010 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x20>
  endWrite();
    f0a2:	4620      	mov	r0, r4
}
    f0a4:	b005      	add	sp, #20
    f0a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    f0aa:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
    f0ac:	9103      	str	r1, [sp, #12]
    f0ae:	462b      	mov	r3, r5
    f0b0:	4620      	mov	r0, r4
    f0b2:	47d8      	blx	fp
    f0b4:	9903      	ldr	r1, [sp, #12]
    f0b6:	e7cb      	b.n	f050 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x60>
    f0b8:	0000ed6d 	.word	0x0000ed6d
    f0bc:	0000ed95 	.word	0x0000ed95
    f0c0:	0000ed81 	.word	0x0000ed81

0000f0c4 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)>:
                             uint16_t color) {
    f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0c8:	ed2d 8b02 	vpush	{d8}
    f0cc:	b085      	sub	sp, #20
    f0ce:	4698      	mov	r8, r3
    f0d0:	460c      	mov	r4, r1
    f0d2:	4616      	mov	r6, r2
    f0d4:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f0d8:	eba8 0a01 	sub.w	sl, r8, r1
                             uint16_t color) {
    f0dc:	4607      	mov	r7, r0
    f0de:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f0e2:	ebac 0302 	sub.w	r3, ip, r2
    f0e6:	f1ba 0f00 	cmp.w	sl, #0
    f0ea:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
    f0ee:	bfb8      	it	lt
    f0f0:	f1ca 0a00 	rsblt	sl, sl, #0
    f0f4:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
  if (steep) {
    f0f8:	4555      	cmp	r5, sl
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f0fa:	9500      	str	r5, [sp, #0]
  if (steep) {
    f0fc:	dd66      	ble.n	f1cc <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x108>
    f0fe:	4641      	mov	r1, r8
    f100:	4620      	mov	r0, r4
    f102:	4622      	mov	r2, r4
    f104:	4643      	mov	r3, r8
    _swap_int16_t(x0, y0);
    f106:	4634      	mov	r4, r6
    _swap_int16_t(x1, y1);
    f108:	46e0      	mov	r8, ip
    _swap_int16_t(x0, y0);
    f10a:	4606      	mov	r6, r0
    _swap_int16_t(x1, y1);
    f10c:	468c      	mov	ip, r1
  if (x0 > x1) {
    f10e:	4544      	cmp	r4, r8
    f110:	dd08      	ble.n	f124 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x60>
    f112:	4615      	mov	r5, r2
    f114:	4630      	mov	r0, r6
    f116:	4621      	mov	r1, r4
    f118:	461a      	mov	r2, r3
    _swap_int16_t(y0, y1);
    f11a:	4666      	mov	r6, ip
  if (x0 > x1) {
    f11c:	4644      	mov	r4, r8
    f11e:	462b      	mov	r3, r5
    _swap_int16_t(y0, y1);
    f120:	4684      	mov	ip, r0
  if (x0 > x1) {
    f122:	4688      	mov	r8, r1
  dy = abs(y1 - y0);
    f124:	1a9b      	subs	r3, r3, r2
  dx = x1 - x0;
    f126:	eba8 0204 	sub.w	r2, r8, r4
  dy = abs(y1 - y0);
    f12a:	2b00      	cmp	r3, #0
  int16_t err = dx / 2;
    f12c:	b215      	sxth	r5, r2
  dx = x1 - x0;
    f12e:	b292      	uxth	r2, r2
  dy = abs(y1 - y0);
    f130:	bfb8      	it	lt
    f132:	425b      	neglt	r3, r3
  int16_t err = dx / 2;
    f134:	2d00      	cmp	r5, #0
  dx = x1 - x0;
    f136:	9201      	str	r2, [sp, #4]
  int16_t err = dx / 2;
    f138:	bfb8      	it	lt
    f13a:	3501      	addlt	r5, #1
  if (y0 < y1) {
    f13c:	45b4      	cmp	ip, r6
  int16_t err = dx / 2;
    f13e:	ea4f 0565 	mov.w	r5, r5, asr #1
  if (y0 < y1) {
    f142:	dd3a      	ble.n	f1ba <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xf6>
    ystep = 1;
    f144:	2201      	movs	r2, #1
    f146:	9202      	str	r2, [sp, #8]
    err -= dy;
    f148:	b29b      	uxth	r3, r3
    f14a:	ee08 7a10 	vmov	s16, r7
    f14e:	9303      	str	r3, [sp, #12]
    f150:	e01e      	b.n	f190 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xcc>
      writePixel(y0, x0, color);
    f152:	ee18 1a10 	vmov	r1, s16
    f156:	4f20      	ldr	r7, [pc, #128]	; (f1d8 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x114>)
  drawPixel(x, y, color);
    f158:	ee18 0a10 	vmov	r0, s16
      writePixel(y0, x0, color);
    f15c:	f8d1 c000 	ldr.w	ip, [r1]
  drawPixel(x, y, color);
    f160:	4631      	mov	r1, r6
      writePixel(y0, x0, color);
    f162:	f8dc b018 	ldr.w	fp, [ip, #24]
    f166:	45bb      	cmp	fp, r7
    f168:	d12e      	bne.n	f1c8 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x104>
  drawPixel(x, y, color);
    f16a:	f8dc b010 	ldr.w	fp, [ip, #16]
    f16e:	47d8      	blx	fp
    err -= dy;
    f170:	9b03      	ldr	r3, [sp, #12]
    f172:	3401      	adds	r4, #1
      y0 += ystep;
    f174:	9a02      	ldr	r2, [sp, #8]
    err -= dy;
    f176:	1aeb      	subs	r3, r5, r3
      err += dx;
    f178:	9901      	ldr	r1, [sp, #4]
      y0 += ystep;
    f17a:	18b2      	adds	r2, r6, r2
    f17c:	b224      	sxth	r4, r4
    err -= dy;
    f17e:	b21d      	sxth	r5, r3
    f180:	b29b      	uxth	r3, r3
    if (err < 0) {
    f182:	2d00      	cmp	r5, #0
      err += dx;
    f184:	440b      	add	r3, r1
    if (err < 0) {
    f186:	da01      	bge.n	f18c <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xc8>
      y0 += ystep;
    f188:	b216      	sxth	r6, r2
      err += dx;
    f18a:	b21d      	sxth	r5, r3
  for (; x0 <= x1; x0++) {
    f18c:	45a0      	cmp	r8, r4
    f18e:	db16      	blt.n	f1be <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xfa>
    if (steep) {
    f190:	9b00      	ldr	r3, [sp, #0]
  drawPixel(x, y, color);
    f192:	4622      	mov	r2, r4
    f194:	4621      	mov	r1, r4
    if (steep) {
    f196:	4553      	cmp	r3, sl
  drawPixel(x, y, color);
    f198:	464b      	mov	r3, r9
    if (steep) {
    f19a:	dcda      	bgt.n	f152 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x8e>
      writePixel(x0, y0, color);
    f19c:	ee18 3a10 	vmov	r3, s16
    f1a0:	4f0d      	ldr	r7, [pc, #52]	; (f1d8 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x114>)
  drawPixel(x, y, color);
    f1a2:	4632      	mov	r2, r6
    f1a4:	ee18 0a10 	vmov	r0, s16
      writePixel(x0, y0, color);
    f1a8:	f8d3 c000 	ldr.w	ip, [r3]
  drawPixel(x, y, color);
    f1ac:	464b      	mov	r3, r9
      writePixel(x0, y0, color);
    f1ae:	f8dc b018 	ldr.w	fp, [ip, #24]
    f1b2:	45bb      	cmp	fp, r7
    f1b4:	d0d9      	beq.n	f16a <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xa6>
    f1b6:	47d8      	blx	fp
    f1b8:	e7da      	b.n	f170 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xac>
  for (; x0 <= x1; x0++) {
    f1ba:	4544      	cmp	r4, r8
    f1bc:	dd08      	ble.n	f1d0 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x10c>
}
    f1be:	b005      	add	sp, #20
    f1c0:	ecbd 8b02 	vpop	{d8}
    f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      writePixel(y0, x0, color);
    f1c8:	47d8      	blx	fp
    f1ca:	e7d1      	b.n	f170 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xac>
    f1cc:	4663      	mov	r3, ip
    f1ce:	e79e      	b.n	f10e <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x4a>
    ystep = -1;
    f1d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f1d4:	9202      	str	r2, [sp, #8]
    f1d6:	e7b7      	b.n	f148 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x84>
    f1d8:	0000ed71 	.word	0x0000ed71

0000f1dc <Adafruit_GFX::Adafruit_GFX(short, short)>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    f1dc:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
    f1de:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
    f1e0:	4a08      	ldr	r2, [pc, #32]	; (f204 <Adafruit_GFX::Adafruit_GFX(short, short)+0x28>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    f1e2:	8101      	strh	r1, [r0, #8]
  _width = WIDTH;
    f1e4:	8181      	strh	r1, [r0, #12]
  textcolor = textbgcolor = 0xFFFF;
    f1e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  textsize_x = textsize_y = 1;
    f1ea:	6182      	str	r2, [r0, #24]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    f1ec:	4a06      	ldr	r2, [pc, #24]	; (f208 <Adafruit_GFX::Adafruit_GFX(short, short)+0x2c>)
    f1ee:	b410      	push	{r4}
	constexpr Print() : write_error(0) {}
    f1f0:	2400      	movs	r4, #0
    f1f2:	6002      	str	r2, [r0, #0]
    f1f4:	6044      	str	r4, [r0, #4]
  _cp437 = false;
    f1f6:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
    f1f8:	6204      	str	r4, [r0, #32]
  textcolor = textbgcolor = 0xFFFF;
    f1fa:	e9c0 4104 	strd	r4, r1, [r0, #16]
}
    f1fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    f202:	4770      	bx	lr
    f204:	01000101 	.word	0x01000101
    f208:	20007da8 	.word	0x20007da8

0000f20c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>:
                              int16_t w, int16_t h, uint16_t color) {
    f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f210:	b087      	sub	sp, #28
    f212:	4682      	mov	sl, r0
  startWrite();
    f214:	6800      	ldr	r0, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
    f216:	4617      	mov	r7, r2
    f218:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    f21c:	4688      	mov	r8, r1
    f21e:	9305      	str	r3, [sp, #20]
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    f220:	1df3      	adds	r3, r6, #7
    f222:	4a35      	ldr	r2, [pc, #212]	; (f2f8 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xec>)
                              int16_t w, int16_t h, uint16_t color) {
    f224:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    f228:	bf48      	it	mi
    f22a:	f106 030e 	addmi.w	r3, r6, #14
                              int16_t w, int16_t h, uint16_t color) {
    f22e:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    f232:	10db      	asrs	r3, r3, #3
    f234:	9303      	str	r3, [sp, #12]
  startWrite();
    f236:	6943      	ldr	r3, [r0, #20]
    f238:	4293      	cmp	r3, r2
    f23a:	d153      	bne.n	f2e4 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xd8>
  for (int16_t j = 0; j < h; j++, y++) {
    f23c:	2c00      	cmp	r4, #0
    f23e:	dd45      	ble.n	f2cc <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xc0>
    f240:	443c      	add	r4, r7
    f242:	4684      	mov	ip, r0
    f244:	b2a3      	uxth	r3, r4
    f246:	9304      	str	r3, [sp, #16]
    f248:	2300      	movs	r3, #0
    f24a:	461d      	mov	r5, r3
    f24c:	9302      	str	r3, [sp, #8]
    for (int16_t i = 0; i < w; i++) {
    f24e:	2e00      	cmp	r6, #0
    f250:	dd31      	ble.n	f2b6 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xaa>
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f252:	9a05      	ldr	r2, [sp, #20]
    for (int16_t i = 0; i < w; i++) {
    f254:	2300      	movs	r3, #0
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f256:	9902      	ldr	r1, [sp, #8]
    f258:	440a      	add	r2, r1
    f25a:	9201      	str	r2, [sp, #4]
    f25c:	e00a      	b.n	f274 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x68>
        b <<= 1;
    f25e:	b2ed      	uxtb	r5, r5
        writePixel(x + i, y, color);
    f260:	eb04 0108 	add.w	r1, r4, r8
      if (b & 0x80)
    f264:	f015 0f80 	tst.w	r5, #128	; 0x80
    f268:	b209      	sxth	r1, r1
    f26a:	d113      	bne.n	f294 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x88>
    for (int16_t i = 0; i < w; i++) {
    f26c:	3401      	adds	r4, #1
    f26e:	b223      	sxth	r3, r4
    f270:	42b3      	cmp	r3, r6
    f272:	d020      	beq.n	f2b6 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xaa>
      if (i & 7)
    f274:	f013 0f07 	tst.w	r3, #7
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f278:	ea4f 02e3 	mov.w	r2, r3, asr #3
    f27c:	b29c      	uxth	r4, r3
        b <<= 1;
    f27e:	ea4f 0545 	mov.w	r5, r5, lsl #1
      if (i & 7)
    f282:	d1ec      	bne.n	f25e <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x52>
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f284:	9b01      	ldr	r3, [sp, #4]
    f286:	eb04 0108 	add.w	r1, r4, r8
    f28a:	5c9d      	ldrb	r5, [r3, r2]
        writePixel(x + i, y, color);
    f28c:	b209      	sxth	r1, r1
      if (b & 0x80)
    f28e:	f015 0f80 	tst.w	r5, #128	; 0x80
    f292:	d0eb      	beq.n	f26c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x60>
        writePixel(x + i, y, color);
    f294:	f8dc 9018 	ldr.w	r9, [ip, #24]
  drawPixel(x, y, color);
    f298:	465b      	mov	r3, fp
    f29a:	4818      	ldr	r0, [pc, #96]	; (f2fc <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xf0>)
    f29c:	463a      	mov	r2, r7
    f29e:	4581      	cmp	r9, r0
    f2a0:	d11b      	bne.n	f2da <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xce>
    f2a2:	3401      	adds	r4, #1
    f2a4:	f8dc 9010 	ldr.w	r9, [ip, #16]
    f2a8:	4650      	mov	r0, sl
    f2aa:	47c8      	blx	r9
  endWrite();
    f2ac:	f8da c000 	ldr.w	ip, [sl]
    for (int16_t i = 0; i < w; i++) {
    f2b0:	b223      	sxth	r3, r4
    f2b2:	42b3      	cmp	r3, r6
    f2b4:	d1de      	bne.n	f274 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x68>
  for (int16_t j = 0; j < h; j++, y++) {
    f2b6:	3701      	adds	r7, #1
    f2b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    f2bc:	4413      	add	r3, r2
    f2be:	9a04      	ldr	r2, [sp, #16]
    f2c0:	9302      	str	r3, [sp, #8]
    f2c2:	b2bb      	uxth	r3, r7
    f2c4:	b23f      	sxth	r7, r7
    f2c6:	429a      	cmp	r2, r3
    f2c8:	d1c1      	bne.n	f24e <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x42>
    f2ca:	4660      	mov	r0, ip
  endWrite();
    f2cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    f2ce:	4a0a      	ldr	r2, [pc, #40]	; (f2f8 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xec>)
    f2d0:	4293      	cmp	r3, r2
    f2d2:	d10c      	bne.n	f2ee <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xe2>
}
    f2d4:	b007      	add	sp, #28
    f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        writePixel(x + i, y, color);
    f2da:	4650      	mov	r0, sl
    f2dc:	47c8      	blx	r9
  endWrite();
    f2de:	f8da c000 	ldr.w	ip, [sl]
    f2e2:	e7c3      	b.n	f26c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x60>
  startWrite();
    f2e4:	4650      	mov	r0, sl
    f2e6:	4798      	blx	r3
  endWrite();
    f2e8:	f8da 0000 	ldr.w	r0, [sl]
    f2ec:	e7a6      	b.n	f23c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x30>
    f2ee:	4650      	mov	r0, sl
}
    f2f0:	b007      	add	sp, #28
    f2f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    f2f6:	4718      	bx	r3
    f2f8:	0000ed6d 	.word	0x0000ed6d
    f2fc:	0000ed71 	.word	0x0000ed71

0000f300 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>:
                            uint8_t size_y) {
    f300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f304:	ed2d 8b02 	vpush	{d8}
    f308:	b091      	sub	sp, #68	; 0x44
    f30a:	4691      	mov	r9, r2
    f30c:	4682      	mov	sl, r0
    f30e:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    f312:	9104      	str	r1, [sp, #16]
    f314:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
    f318:	9205      	str	r2, [sp, #20]
    f31a:	910e      	str	r1, [sp, #56]	; 0x38
  if (!gfxFont) { // 'Classic' built-in font
    f31c:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
    f31e:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
    f322:	f8bd b074 	ldrh.w	fp, [sp, #116]	; 0x74
    f326:	9102      	str	r1, [sp, #8]
  if (!gfxFont) { // 'Classic' built-in font
    f328:	2a00      	cmp	r2, #0
    f32a:	f000 80b3 	beq.w	f494 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x194>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    f32e:	7a11      	ldrb	r1, [r2, #8]
  return gfxFont->bitmap;
    f330:	e9d2 2400 	ldrd	r2, r4, [r2]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    f334:	1a5b      	subs	r3, r3, r1
    if (size_x > 1 || size_y > 1) {
    f336:	9902      	ldr	r1, [sp, #8]
  return gfxFont->bitmap;
    f338:	9203      	str	r2, [sp, #12]
  return gfxFont->glyph + c;
    f33a:	b2db      	uxtb	r3, r3
    if (size_x > 1 || size_y > 1) {
    f33c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f33e:	4311      	orrs	r1, r2
  return gfxFont->glyph + c;
    f340:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    f344:	f834 7033 	ldrh.w	r7, [r4, r3, lsl #3]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    f348:	f992 0005 	ldrsb.w	r0, [r2, #5]
    if (size_x > 1 || size_y > 1) {
    f34c:	2901      	cmp	r1, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    f34e:	78d3      	ldrb	r3, [r2, #3]
    f350:	f892 8002 	ldrb.w	r8, [r2, #2]
           yo = pgm_read_byte(&glyph->yOffset);
    f354:	f992 4006 	ldrsb.w	r4, [r2, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    f358:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    f35a:	9008      	str	r0, [sp, #32]
    if (size_x > 1 || size_y > 1) {
    f35c:	d85a      	bhi.n	f414 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x114>
    int16_t xo16 = 0, yo16 = 0;
    f35e:	2300      	movs	r3, #0
    f360:	930b      	str	r3, [sp, #44]	; 0x2c
    f362:	9309      	str	r3, [sp, #36]	; 0x24
    startWrite();
    f364:	4ba3      	ldr	r3, [pc, #652]	; (f5f4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f4>)
    f366:	f8da 2000 	ldr.w	r2, [sl]
    f36a:	4619      	mov	r1, r3
    f36c:	930f      	str	r3, [sp, #60]	; 0x3c
    f36e:	6953      	ldr	r3, [r2, #20]
    f370:	428b      	cmp	r3, r1
    f372:	f040 817d 	bne.w	f670 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x370>
    for (yy = 0; yy < h; yy++) {
    f376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f378:	2b00      	cmp	r3, #0
    f37a:	d078      	beq.n	f46e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x16e>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f37c:	fa1f f389 	uxth.w	r3, r9
    for (yy = 0; yy < h; yy++) {
    f380:	46d3      	mov	fp, sl
    f382:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f386:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + xo + xx, y + yo + yy, color);
    f388:	4423      	add	r3, r4
    f38a:	930d      	str	r3, [sp, #52]	; 0x34
    for (yy = 0; yy < h; yy++) {
    f38c:	2300      	movs	r3, #0
    f38e:	461d      	mov	r5, r3
    f390:	9307      	str	r3, [sp, #28]
    f392:	9306      	str	r3, [sp, #24]
      for (xx = 0; xx < w; xx++) {
    f394:	f1b8 0f00 	cmp.w	r8, #0
    f398:	d061      	beq.n	f45e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x15e>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f39a:	9906      	ldr	r1, [sp, #24]
    f39c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f39e:	9c02      	ldr	r4, [sp, #8]
    f3a0:	18cb      	adds	r3, r1, r3
    f3a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    f3a4:	9e07      	ldr	r6, [sp, #28]
    f3a6:	fb03 0304 	mla	r3, r3, r4, r0
      for (xx = 0; xx < w; xx++) {
    f3aa:	2400      	movs	r4, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f3ac:	b21b      	sxth	r3, r3
    f3ae:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
    f3b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f3b4:	440b      	add	r3, r1
    f3b6:	b21b      	sxth	r3, r3
    f3b8:	ee08 3a90 	vmov	s17, r3
    f3bc:	e005      	b.n	f3ca <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xca>
      for (xx = 0; xx < w; xx++) {
    f3be:	3401      	adds	r4, #1
        bits <<= 1;
    f3c0:	006d      	lsls	r5, r5, #1
      for (xx = 0; xx < w; xx++) {
    f3c2:	b2e4      	uxtb	r4, r4
        bits <<= 1;
    f3c4:	b2ed      	uxtb	r5, r5
      for (xx = 0; xx < w; xx++) {
    f3c6:	45a0      	cmp	r8, r4
    f3c8:	d945      	bls.n	f456 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x156>
        if (!(bit++ & 7)) {
    f3ca:	4633      	mov	r3, r6
    f3cc:	3601      	adds	r6, #1
    f3ce:	0759      	lsls	r1, r3, #29
    f3d0:	b2f6      	uxtb	r6, r6
    f3d2:	d103      	bne.n	f3dc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xdc>
          bits = pgm_read_byte(&bitmap[bo++]);
    f3d4:	1c7b      	adds	r3, r7, #1
    f3d6:	9903      	ldr	r1, [sp, #12]
    f3d8:	5dcd      	ldrb	r5, [r1, r7]
    f3da:	b29f      	uxth	r7, r3
        if (bits & 0x80) {
    f3dc:	062b      	lsls	r3, r5, #24
    f3de:	d5ee      	bpl.n	f3be <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
          if (size_x == 1 && size_y == 1) {
    f3e0:	f1b9 0f01 	cmp.w	r9, #1
    f3e4:	d11b      	bne.n	f41e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x11e>
    f3e6:	9b02      	ldr	r3, [sp, #8]
    f3e8:	2b01      	cmp	r3, #1
    f3ea:	d118      	bne.n	f41e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x11e>
            writePixel(x + xo + xx, y + yo + yy, color);
    f3ec:	9b08      	ldr	r3, [sp, #32]
    f3ee:	4658      	mov	r0, fp
    f3f0:	9904      	ldr	r1, [sp, #16]
    f3f2:	f8d2 a018 	ldr.w	sl, [r2, #24]
    f3f6:	1859      	adds	r1, r3, r1
    f3f8:	4b7f      	ldr	r3, [pc, #508]	; (f5f8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    f3fa:	4421      	add	r1, r4
    f3fc:	459a      	cmp	sl, r3
    f3fe:	9b05      	ldr	r3, [sp, #20]
  drawPixel(x, y, color);
    f400:	bf08      	it	eq
    f402:	f8d2 a010 	ldreq.w	sl, [r2, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
    f406:	b209      	sxth	r1, r1
    f408:	ee18 2a90 	vmov	r2, s17
    f40c:	47d0      	blx	sl
    endWrite();
    f40e:	f8db 2000 	ldr.w	r2, [fp]
    f412:	e7d4      	b.n	f3be <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
      xo16 = xo;
    f414:	b203      	sxth	r3, r0
    f416:	9309      	str	r3, [sp, #36]	; 0x24
      yo16 = yo;
    f418:	b223      	sxth	r3, r4
    f41a:	930b      	str	r3, [sp, #44]	; 0x2c
    f41c:	e7a2      	b.n	f364 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x64>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f420:	f8d2 a01c 	ldr.w	sl, [r2, #28]
    f424:	1919      	adds	r1, r3, r4
    f426:	f8df e1d8 	ldr.w	lr, [pc, #472]	; f600 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>
    f42a:	9b04      	ldr	r3, [sp, #16]
    f42c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
    f430:	45f2      	cmp	sl, lr
    f432:	fb01 3109 	mla	r1, r1, r9, r3
    f436:	fa0f f389 	sxth.w	r3, r9
  fillRect(x, y, w, h, color);
    f43a:	9000      	str	r0, [sp, #0]
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f43c:	b209      	sxth	r1, r1
    f43e:	d120      	bne.n	f482 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x182>
  fillRect(x, y, w, h, color);
    f440:	9805      	ldr	r0, [sp, #20]
    f442:	9001      	str	r0, [sp, #4]
    f444:	4658      	mov	r0, fp
    f446:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
    f44a:	ee18 2a10 	vmov	r2, s16
    f44e:	47d0      	blx	sl
    endWrite();
    f450:	f8db 2000 	ldr.w	r2, [fp]
}
    f454:	e7b3      	b.n	f3be <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
        if (!(bit++ & 7)) {
    f456:	9b07      	ldr	r3, [sp, #28]
    f458:	4443      	add	r3, r8
    f45a:	b2db      	uxtb	r3, r3
    f45c:	9307      	str	r3, [sp, #28]
    for (yy = 0; yy < h; yy++) {
    f45e:	9b06      	ldr	r3, [sp, #24]
    f460:	990a      	ldr	r1, [sp, #40]	; 0x28
    f462:	3301      	adds	r3, #1
    f464:	b2db      	uxtb	r3, r3
    f466:	4299      	cmp	r1, r3
    f468:	9306      	str	r3, [sp, #24]
    f46a:	d893      	bhi.n	f394 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x94>
    f46c:	46da      	mov	sl, fp
    endWrite();
    f46e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    f470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f472:	4293      	cmp	r3, r2
    f474:	f040 80f5 	bne.w	f662 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x362>
}
    f478:	b011      	add	sp, #68	; 0x44
    f47a:	ecbd 8b02 	vpop	{d8}
    f47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f482:	9a05      	ldr	r2, [sp, #20]
    f484:	4658      	mov	r0, fp
    f486:	9201      	str	r2, [sp, #4]
    f488:	ee18 2a10 	vmov	r2, s16
    f48c:	47d0      	blx	sl
    endWrite();
    f48e:	f8db 2000 	ldr.w	r2, [fp]
    f492:	e794      	b.n	f3be <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
    if ((x >= _width) ||              // Clip right
    f494:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    f498:	9904      	ldr	r1, [sp, #16]
    f49a:	428a      	cmp	r2, r1
    f49c:	ddec      	ble.n	f478 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    f49e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    f4a2:	454a      	cmp	r2, r9
    f4a4:	dde8      	ble.n	f478 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
        ((x + 6 * size_x - 1) < 0) || // Clip left
    f4a6:	2206      	movs	r2, #6
    f4a8:	980e      	ldr	r0, [sp, #56]	; 0x38
    f4aa:	fb12 1200 	smlabb	r2, r2, r0, r1
        (y >= _height) ||             // Clip bottom
    f4ae:	2a00      	cmp	r2, #0
    f4b0:	dde2      	ble.n	f478 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
        ((y + 8 * size_y - 1) < 0))   // Clip top
    f4b2:	9a02      	ldr	r2, [sp, #8]
    f4b4:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
    f4b8:	2a00      	cmp	r2, #0
    f4ba:	dddd      	ble.n	f478 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    if (!_cp437 && (c >= 176))
    f4bc:	f89a 201c 	ldrb.w	r2, [sl, #28]
    f4c0:	2a01      	cmp	r2, #1
    f4c2:	d003      	beq.n	f4cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1cc>
    f4c4:	2baf      	cmp	r3, #175	; 0xaf
    f4c6:	d901      	bls.n	f4cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1cc>
      c++; // Handle 'classic' charset behavior
    f4c8:	3301      	adds	r3, #1
    f4ca:	b2db      	uxtb	r3, r3
    startWrite();
    f4cc:	4a49      	ldr	r2, [pc, #292]	; (f5f4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f4>)
    f4ce:	f8da 0000 	ldr.w	r0, [sl]
    f4d2:	4611      	mov	r1, r2
    f4d4:	920f      	str	r2, [sp, #60]	; 0x3c
    f4d6:	6942      	ldr	r2, [r0, #20]
    f4d8:	428a      	cmp	r2, r1
    f4da:	f040 80f0 	bne.w	f6be <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3be>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f4de:	f8bd 2010 	ldrh.w	r2, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    f4e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f4e6:	f8cd 900c 	str.w	r9, [sp, #12]
    f4ea:	46d1      	mov	r9, sl
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f4ec:	4611      	mov	r1, r2
    f4ee:	920b      	str	r2, [sp, #44]	; 0x2c
    f4f0:	4a42      	ldr	r2, [pc, #264]	; (f5fc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2fc>)
    f4f2:	f8cd b010 	str.w	fp, [sp, #16]
    f4f6:	18d3      	adds	r3, r2, r3
    f4f8:	460a      	mov	r2, r1
    f4fa:	f8dd 8014 	ldr.w	r8, [sp, #20]
    f4fe:	9308      	str	r3, [sp, #32]
    f500:	1d4b      	adds	r3, r1, #5
    f502:	990e      	ldr	r1, [sp, #56]	; 0x38
    f504:	b29b      	uxth	r3, r3
    f506:	9f02      	ldr	r7, [sp, #8]
    f508:	468b      	mov	fp, r1
    f50a:	9309      	str	r3, [sp, #36]	; 0x24
    f50c:	b28b      	uxth	r3, r1
    f50e:	930a      	str	r3, [sp, #40]	; 0x28
    f510:	4603      	mov	r3, r0
    f512:	e9cd 2206 	strd	r2, r2, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    f516:	9a08      	ldr	r2, [sp, #32]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f518:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    f51a:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f51c:	46ca      	mov	sl, r9
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    f51e:	f812 6b01 	ldrb.w	r6, [r2], #1
    f522:	9208      	str	r2, [sp, #32]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f524:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
    f528:	ee08 2a10 	vmov	s16, r2
    f52c:	fa0f f28b 	sxth.w	r2, fp
    f530:	ee08 2a90 	vmov	s17, r2
    f534:	e01c      	b.n	f570 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x270>
          if (size_x == 1 && size_y == 1)
    f536:	f1bb 0f01 	cmp.w	fp, #1
            writePixel(x + i, y + j, color);
    f53a:	9a03      	ldr	r2, [sp, #12]
          if (size_x == 1 && size_y == 1)
    f53c:	d136      	bne.n	f5ac <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>
    f53e:	2f01      	cmp	r7, #1
    f540:	d134      	bne.n	f5ac <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>
            writePixel(x + i, y + j, color);
    f542:	f8d3 9018 	ldr.w	r9, [r3, #24]
    f546:	18aa      	adds	r2, r5, r2
    f548:	482b      	ldr	r0, [pc, #172]	; (f5f8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    f54a:	b212      	sxth	r2, r2
    f54c:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
    f550:	4581      	cmp	r9, r0
    f552:	4650      	mov	r0, sl
  drawPixel(x, y, color);
    f554:	bf08      	it	eq
    f556:	f8d3 9010 	ldreq.w	r9, [r3, #16]
            writePixel(x + i, y + j, color);
    f55a:	4643      	mov	r3, r8
    f55c:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f55e:	f8da 3000 	ldr.w	r3, [sl]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    f562:	3c01      	subs	r4, #1
    f564:	3501      	adds	r5, #1
    f566:	0876      	lsrs	r6, r6, #1
    f568:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f56c:	b26d      	sxtb	r5, r5
    f56e:	d049      	beq.n	f604 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x304>
        if (line & 1) {
    f570:	07f0      	lsls	r0, r6, #31
    f572:	d4e0      	bmi.n	f536 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x236>
        } else if (bg != color) {
    f574:	9804      	ldr	r0, [sp, #16]
    f576:	4580      	cmp	r8, r0
    f578:	d0f3      	beq.n	f562 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
          if (size_x == 1 && size_y == 1)
    f57a:	f1bb 0f01 	cmp.w	fp, #1
            writePixel(x + i, y + j, bg);
    f57e:	9a03      	ldr	r2, [sp, #12]
          if (size_x == 1 && size_y == 1)
    f580:	d12a      	bne.n	f5d8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2d8>
    f582:	2f01      	cmp	r7, #1
    f584:	d128      	bne.n	f5d8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2d8>
            writePixel(x + i, y + j, bg);
    f586:	18aa      	adds	r2, r5, r2
    f588:	f8d3 9018 	ldr.w	r9, [r3, #24]
    f58c:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
    f590:	fa0f fc82 	sxth.w	ip, r2
    f594:	4a18      	ldr	r2, [pc, #96]	; (f5f8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    f596:	4591      	cmp	r9, r2
    f598:	d16f      	bne.n	f67a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x37a>
  drawPixel(x, y, color);
    f59a:	f8d3 9010 	ldr.w	r9, [r3, #16]
    f59e:	4662      	mov	r2, ip
    f5a0:	4603      	mov	r3, r0
    f5a2:	4650      	mov	r0, sl
    f5a4:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f5a6:	f8da 3000 	ldr.w	r3, [sl]
}
    f5aa:	e7da      	b.n	f562 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    f5ac:	f8d3 901c 	ldr.w	r9, [r3, #28]
    f5b0:	fb05 2207 	mla	r2, r5, r7, r2
    f5b4:	4812      	ldr	r0, [pc, #72]	; (f600 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>)
    f5b6:	b239      	sxth	r1, r7
    f5b8:	b212      	sxth	r2, r2
    f5ba:	4581      	cmp	r9, r0
  fillRect(x, y, w, h, color);
    f5bc:	e9cd 1800 	strd	r1, r8, [sp]
    f5c0:	d101      	bne.n	f5c6 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c6>
    f5c2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f5c6:	ee18 3a90 	vmov	r3, s17
    f5ca:	ee18 1a10 	vmov	r1, s16
    f5ce:	4650      	mov	r0, sl
    f5d0:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f5d2:	f8da 3000 	ldr.w	r3, [sl]
    f5d6:	e7c4      	b.n	f562 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f5d8:	f8d3 901c 	ldr.w	r9, [r3, #28]
    f5dc:	fb05 2207 	mla	r2, r5, r7, r2
    f5e0:	4807      	ldr	r0, [pc, #28]	; (f600 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>)
    f5e2:	b239      	sxth	r1, r7
    f5e4:	b212      	sxth	r2, r2
    f5e6:	4581      	cmp	r9, r0
  fillRect(x, y, w, h, color);
    f5e8:	9100      	str	r1, [sp, #0]
    f5ea:	d14d      	bne.n	f688 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x388>
    f5ec:	9904      	ldr	r1, [sp, #16]
    f5ee:	9101      	str	r1, [sp, #4]
    f5f0:	e7e7      	b.n	f5c2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c2>
    f5f2:	bf00      	nop
    f5f4:	0000ed6d 	.word	0x0000ed6d
    f5f8:	0000ed71 	.word	0x0000ed71
    f5fc:	200026c8 	.word	0x200026c8
    f600:	0000eda9 	.word	0x0000eda9
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
    f604:	9a07      	ldr	r2, [sp, #28]
    f606:	46d1      	mov	r9, sl
    f608:	980a      	ldr	r0, [sp, #40]	; 0x28
    f60a:	9906      	ldr	r1, [sp, #24]
    f60c:	4402      	add	r2, r0
    f60e:	3101      	adds	r1, #1
    f610:	b292      	uxth	r2, r2
    f612:	b289      	uxth	r1, r1
    f614:	9207      	str	r2, [sp, #28]
    f616:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f618:	9106      	str	r1, [sp, #24]
    f61a:	428a      	cmp	r2, r1
    f61c:	f47f af7b 	bne.w	f516 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x216>
    if (bg != color) { // If opaque, draw vertical line for last column
    f620:	4618      	mov	r0, r3
    f622:	9b05      	ldr	r3, [sp, #20]
    f624:	e9dd 9b03 	ldrd	r9, fp, [sp, #12]
    f628:	455b      	cmp	r3, fp
    f62a:	d015      	beq.n	f658 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x358>
      if (size_x == 1 && size_y == 1)
    f62c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f62e:	2b01      	cmp	r3, #1
    f630:	d12d      	bne.n	f68e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x38e>
    f632:	9b02      	ldr	r3, [sp, #8]
    f634:	2b01      	cmp	r3, #1
    f636:	d12a      	bne.n	f68e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x38e>
        writeFastVLine(x + 5, y, 8, bg);
    f638:	6a04      	ldr	r4, [r0, #32]
  drawFastVLine(x, y, h, color);
    f63a:	464a      	mov	r2, r9
    f63c:	4b23      	ldr	r3, [pc, #140]	; (f6cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3cc>)
    f63e:	f8cd b000 	str.w	fp, [sp]
    f642:	429c      	cmp	r4, r3
        writeFastVLine(x + 5, y, 8, bg);
    f644:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    f648:	f04f 0308 	mov.w	r3, #8
  drawFastVLine(x, y, h, color);
    f64c:	bf08      	it	eq
    f64e:	6b84      	ldreq	r4, [r0, #56]	; 0x38
        writeFastVLine(x + 5, y, 8, bg);
    f650:	4650      	mov	r0, sl
    f652:	47a0      	blx	r4
    endWrite();
    f654:	f8da 0000 	ldr.w	r0, [sl]
    f658:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    f65a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f65c:	4293      	cmp	r3, r2
    f65e:	f43f af0b 	beq.w	f478 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    endWrite();
    f662:	4650      	mov	r0, sl
}
    f664:	b011      	add	sp, #68	; 0x44
    f666:	ecbd 8b02 	vpop	{d8}
    f66a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
    f66e:	4718      	bx	r3
    startWrite();
    f670:	4650      	mov	r0, sl
    f672:	4798      	blx	r3
    endWrite();
    f674:	f8da 2000 	ldr.w	r2, [sl]
    f678:	e67d      	b.n	f376 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x76>
            writePixel(x + i, y + j, bg);
    f67a:	9b04      	ldr	r3, [sp, #16]
    f67c:	4662      	mov	r2, ip
    f67e:	4650      	mov	r0, sl
    f680:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f682:	f8da 3000 	ldr.w	r3, [sl]
    f686:	e76c      	b.n	f562 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f688:	9b04      	ldr	r3, [sp, #16]
    f68a:	9301      	str	r3, [sp, #4]
    f68c:	e79b      	b.n	f5c6 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c6>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    f68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f690:	69c4      	ldr	r4, [r0, #28]
    f692:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    f696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f698:	9a02      	ldr	r2, [sp, #8]
    f69a:	440b      	add	r3, r1
    f69c:	4d0c      	ldr	r5, [pc, #48]	; (f6d0 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3d0>)
    f69e:	00d2      	lsls	r2, r2, #3
    f6a0:	4619      	mov	r1, r3
    f6a2:	42ac      	cmp	r4, r5
    f6a4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    f6a8:	b209      	sxth	r1, r1
  fillRect(x, y, w, h, color);
    f6aa:	e9cd 2b00 	strd	r2, fp, [sp]
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    f6ae:	464a      	mov	r2, r9
  fillRect(x, y, w, h, color);
    f6b0:	bf08      	it	eq
    f6b2:	6c04      	ldreq	r4, [r0, #64]	; 0x40
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    f6b4:	4650      	mov	r0, sl
    f6b6:	47a0      	blx	r4
    endWrite();
    f6b8:	f8da 0000 	ldr.w	r0, [sl]
    f6bc:	e7cc      	b.n	f658 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x358>
    startWrite();
    f6be:	4650      	mov	r0, sl
    f6c0:	9303      	str	r3, [sp, #12]
    f6c2:	4790      	blx	r2
            writePixel(x + i, y + j, color);
    f6c4:	f8da 0000 	ldr.w	r0, [sl]
    f6c8:	9b03      	ldr	r3, [sp, #12]
    f6ca:	e708      	b.n	f4de <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1de>
    f6cc:	0000ed81 	.word	0x0000ed81
    f6d0:	0000eda9 	.word	0x0000eda9

0000f6d4 <Adafruit_GFX::write(unsigned char)>:
  if (!gfxFont) { // 'Classic' built-in font
    f6d4:	6a03      	ldr	r3, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
    f6d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6d8:	4607      	mov	r7, r0
    f6da:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
    f6dc:	2b00      	cmp	r3, #0
    f6de:	d03a      	beq.n	f756 <Adafruit_GFX::write(unsigned char)+0x82>
    if (c == '\n') {
    f6e0:	290a      	cmp	r1, #10
    f6e2:	d02b      	beq.n	f73c <Adafruit_GFX::write(unsigned char)+0x68>
    } else if (c != '\r') {
    f6e4:	290d      	cmp	r1, #13
    f6e6:	d033      	beq.n	f750 <Adafruit_GFX::write(unsigned char)+0x7c>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    f6e8:	7a1a      	ldrb	r2, [r3, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    f6ea:	4291      	cmp	r1, r2
    f6ec:	d330      	bcc.n	f750 <Adafruit_GFX::write(unsigned char)+0x7c>
    f6ee:	7a9c      	ldrb	r4, [r3, #10]
    f6f0:	428c      	cmp	r4, r1
    f6f2:	d32d      	bcc.n	f750 <Adafruit_GFX::write(unsigned char)+0x7c>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    f6f4:	1a8a      	subs	r2, r1, r2
  return gfxFont->glyph + c;
    f6f6:	685c      	ldr	r4, [r3, #4]
    f6f8:	b2d2      	uxtb	r2, r2
    f6fa:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    f6fe:	78e5      	ldrb	r5, [r4, #3]
        uint8_t w = pgm_read_byte(&glyph->width),
    f700:	78a2      	ldrb	r2, [r4, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    f702:	b1a5      	cbz	r5, f72e <Adafruit_GFX::write(unsigned char)+0x5a>
    f704:	b19a      	cbz	r2, f72e <Adafruit_GFX::write(unsigned char)+0x5a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    f706:	7ec5      	ldrb	r5, [r0, #27]
    f708:	2d00      	cmp	r5, #0
    f70a:	d163      	bne.n	f7d4 <Adafruit_GFX::write(unsigned char)+0x100>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f70c:	7e06      	ldrb	r6, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
    f70e:	7e43      	ldrb	r3, [r0, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f710:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    f714:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    f718:	4638      	mov	r0, r7
    f71a:	e9cd 6302 	strd	r6, r3, [sp, #8]
    f71e:	460b      	mov	r3, r1
    f720:	4629      	mov	r1, r5
    f722:	8afd      	ldrh	r5, [r7, #22]
    f724:	9501      	str	r5, [sp, #4]
    f726:	8abd      	ldrh	r5, [r7, #20]
    f728:	9500      	str	r5, [sp, #0]
    f72a:	f7ff fde9 	bl	f300 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    f72e:	7921      	ldrb	r1, [r4, #4]
        cursor_x +=
    f730:	8a3b      	ldrh	r3, [r7, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    f732:	7e3a      	ldrb	r2, [r7, #24]
        cursor_x +=
    f734:	fb01 3302 	mla	r3, r1, r2, r3
    f738:	823b      	strh	r3, [r7, #16]
    f73a:	e009      	b.n	f750 <Adafruit_GFX::write(unsigned char)+0x7c>
      cursor_x = 0;
    f73c:	f04f 0c00 	mov.w	ip, #0
      cursor_y +=
    f740:	8a42      	ldrh	r2, [r0, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    f742:	7e41      	ldrb	r1, [r0, #25]
      cursor_x = 0;
    f744:	f8a0 c010 	strh.w	ip, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    f748:	7b1b      	ldrb	r3, [r3, #12]
      cursor_y +=
    f74a:	fb01 2303 	mla	r3, r1, r3, r2
    f74e:	8243      	strh	r3, [r0, #18]
}
    f750:	2001      	movs	r0, #1
    f752:	b005      	add	sp, #20
    f754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '\n') {              // Newline?
    f756:	290a      	cmp	r1, #10
    f758:	d01e      	beq.n	f798 <Adafruit_GFX::write(unsigned char)+0xc4>
    } else if (c != '\r') {       // Ignore carriage returns
    f75a:	290d      	cmp	r1, #13
    f75c:	d0f8      	beq.n	f750 <Adafruit_GFX::write(unsigned char)+0x7c>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f75e:	7ec2      	ldrb	r2, [r0, #27]
    f760:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
    f764:	bb0a      	cbnz	r2, f7aa <Adafruit_GFX::write(unsigned char)+0xd6>
      cursor_y += textsize_y * 8; // advance y one line
    f766:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f76a:	7e06      	ldrb	r6, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
    f76c:	7e45      	ldrb	r5, [r0, #25]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    f76e:	9503      	str	r5, [sp, #12]
    f770:	460b      	mov	r3, r1
    f772:	9602      	str	r6, [sp, #8]
    f774:	4621      	mov	r1, r4
    f776:	8afc      	ldrh	r4, [r7, #22]
    f778:	4638      	mov	r0, r7
    f77a:	9401      	str	r4, [sp, #4]
    f77c:	8abc      	ldrh	r4, [r7, #20]
    f77e:	9400      	str	r4, [sp, #0]
    f780:	f7ff fdbe 	bl	f300 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
      cursor_x += textsize_x * 6; // Advance x one char
    f784:	7e3b      	ldrb	r3, [r7, #24]
    f786:	8a3a      	ldrh	r2, [r7, #16]
}
    f788:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
    f78a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f78e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    f792:	823b      	strh	r3, [r7, #16]
}
    f794:	b005      	add	sp, #20
    f796:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cursor_y += textsize_y * 8; // advance y one line
    f798:	8a42      	ldrh	r2, [r0, #18]
    f79a:	7e41      	ldrb	r1, [r0, #25]
      cursor_x = 0;               // Reset x to zero,
    f79c:	8203      	strh	r3, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    f79e:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    f7a2:	8243      	strh	r3, [r0, #18]
}
    f7a4:	2001      	movs	r0, #1
    f7a6:	b005      	add	sp, #20
    f7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f7aa:	7e06      	ldrb	r6, [r0, #24]
    f7ac:	2206      	movs	r2, #6
    f7ae:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
    f7b2:	fb12 4206 	smlabb	r2, r2, r6, r4
    f7b6:	42aa      	cmp	r2, r5
    f7b8:	dd08      	ble.n	f7cc <Adafruit_GFX::write(unsigned char)+0xf8>
        cursor_y += textsize_y * 8; // advance y one line
    f7ba:	8a42      	ldrh	r2, [r0, #18]
    f7bc:	461c      	mov	r4, r3
    f7be:	7e45      	ldrb	r5, [r0, #25]
        cursor_x = 0;                                       // Reset x to zero,
    f7c0:	8203      	strh	r3, [r0, #16]
        cursor_y += textsize_y * 8; // advance y one line
    f7c2:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    f7c6:	b212      	sxth	r2, r2
    f7c8:	8242      	strh	r2, [r0, #18]
    f7ca:	e7d0      	b.n	f76e <Adafruit_GFX::write(unsigned char)+0x9a>
      cursor_y += textsize_y * 8; // advance y one line
    f7cc:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    f7d0:	7e45      	ldrb	r5, [r0, #25]
    f7d2:	e7cc      	b.n	f76e <Adafruit_GFX::write(unsigned char)+0x9a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    f7d4:	f994 5005 	ldrsb.w	r5, [r4, #5]
    f7d8:	7e06      	ldrb	r6, [r0, #24]
    f7da:	442a      	add	r2, r5
    f7dc:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
    f7e0:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
    f7e4:	fb06 5202 	mla	r2, r6, r2, r5
    f7e8:	4562      	cmp	r2, ip
    f7ea:	dc03      	bgt.n	f7f4 <Adafruit_GFX::write(unsigned char)+0x120>
      cursor_y += textsize_y * 8; // advance y one line
    f7ec:	7e43      	ldrb	r3, [r0, #25]
    f7ee:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    f7f2:	e791      	b.n	f718 <Adafruit_GFX::write(unsigned char)+0x44>
            cursor_x = 0;
    f7f4:	2500      	movs	r5, #0
            cursor_y += (int16_t)textsize_y *
    f7f6:	8a42      	ldrh	r2, [r0, #18]
            cursor_x = 0;
    f7f8:	8205      	strh	r5, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    f7fa:	f893 c00c 	ldrb.w	ip, [r3, #12]
            cursor_y += (int16_t)textsize_y *
    f7fe:	7e43      	ldrb	r3, [r0, #25]
    f800:	fb0c 2203 	mla	r2, ip, r3, r2
    f804:	b212      	sxth	r2, r2
    f806:	8242      	strh	r2, [r0, #18]
    f808:	e786      	b.n	f718 <Adafruit_GFX::write(unsigned char)+0x44>
    f80a:	bf00      	nop

0000f80c <Adafruit_GFX::setTextSize(unsigned char)>:
  textsize_x = (s_x > 0) ? s_x : 1;
    f80c:	2901      	cmp	r1, #1
    f80e:	bf38      	it	cc
    f810:	2101      	movcc	r1, #1
    f812:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
    f814:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    f816:	4770      	bx	lr

0000f818 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    f818:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    f81c:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    f81e:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    f822:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    f824:	d101      	bne.n	f82a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    f826:	6883      	ldr	r3, [r0, #8]
    f828:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    f82a:	f005 bf6b 	b.w	15704 <EventResponder::triggerEventNotImmediate()>
    f82e:	bf00      	nop

0000f830 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    f830:	4b32      	ldr	r3, [pc, #200]	; (f8fc <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    f832:	4933      	ldr	r1, [pc, #204]	; (f900 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f834:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    f836:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    f83a:	7920      	ldrb	r0, [r4, #4]
    f83c:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    f83e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    f840:	f895 c004 	ldrb.w	ip, [r5, #4]
    f844:	f881 c01c 	strb.w	ip, [r1, #28]
    f848:	7708      	strb	r0, [r1, #28]
    f84a:	b152      	cbz	r2, f862 <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    f84c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    f850:	d323      	bcc.n	f89a <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    f852:	492c      	ldr	r1, [pc, #176]	; (f904 <_spi_dma_rxISR0()+0xd4>)
    f854:	4411      	add	r1, r2
		DMA_SERQ = channel;
    f856:	4a2a      	ldr	r2, [pc, #168]	; (f900 <_spi_dma_rxISR0()+0xd0>)
    f858:	6419      	str	r1, [r3, #64]	; 0x40
    f85a:	76d0      	strb	r0, [r2, #27]
    f85c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f860:	bd30      	pop	{r4, r5, pc}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    f862:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    f864:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    f866:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    f868:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    f86a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    f86e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    f870:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    f872:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    f876:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    f878:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    f87a:	6804      	ldr	r4, [r0, #0]
    f87c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    f87e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    f882:	4b21      	ldr	r3, [pc, #132]	; (f908 <_spi_dma_rxISR0()+0xd8>)
    f884:	429c      	cmp	r4, r3
    f886:	d126      	bne.n	f8d6 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    f888:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    f88a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    f88c:	2b02      	cmp	r3, #2
		_data = data;
    f88e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    f890:	d126      	bne.n	f8e0 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    f892:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f898:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    f89a:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    f89c:	8be9      	ldrh	r1, [r5, #30]
    f89e:	0409      	lsls	r1, r1, #16
    f8a0:	d422      	bmi.n	f8e8 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    f8a2:	b292      	uxth	r2, r2
    f8a4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    f8a6:	6821      	ldr	r1, [r4, #0]
    f8a8:	8bec      	ldrh	r4, [r5, #30]
    f8aa:	b2a4      	uxth	r4, r4
    f8ac:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    f8ae:	8bcc      	ldrh	r4, [r1, #30]
    f8b0:	0424      	lsls	r4, r4, #16
    f8b2:	d505      	bpl.n	f8c0 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    f8b4:	8bcc      	ldrh	r4, [r1, #30]
    f8b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    f8ba:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    f8be:	4322      	orrs	r2, r4
    f8c0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    f8c2:	8bca      	ldrh	r2, [r1, #30]
    f8c4:	b292      	uxth	r2, r2
    f8c6:	82ca      	strh	r2, [r1, #22]
    f8c8:	2100      	movs	r1, #0
    f8ca:	4a0d      	ldr	r2, [pc, #52]	; (f900 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    f8cc:	6419      	str	r1, [r3, #64]	; 0x40
    f8ce:	76d0      	strb	r0, [r2, #27]
    f8d0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f8d4:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    f8d6:	4623      	mov	r3, r4
    f8d8:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f8da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    f8de:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f8e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    f8e4:	f005 bf0e 	b.w	15704 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    f8e8:	8be9      	ldrh	r1, [r5, #30]
    f8ea:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    f8ee:	b292      	uxth	r2, r2
    f8f0:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    f8f4:	ea41 010e 	orr.w	r1, r1, lr
    f8f8:	83e9      	strh	r1, [r5, #30]
    f8fa:	e7d4      	b.n	f8a6 <_spi_dma_rxISR0()+0x76>
    f8fc:	200094c4 	.word	0x200094c4
    f900:	400e8000 	.word	0x400e8000
    f904:	ffff8001 	.word	0xffff8001
    f908:	0000f819 	.word	0x0000f819

0000f90c <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    f90c:	6843      	ldr	r3, [r0, #4]
{
    f90e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    f912:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    f916:	4d81      	ldr	r5, [pc, #516]	; (fb1c <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    f918:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    f91c:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    f91e:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    f922:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    f926:	497e      	ldr	r1, [pc, #504]	; (fb20 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    f928:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    f92a:	69aa      	ldr	r2, [r5, #24]
    f92c:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    f92e:	4a7d      	ldr	r2, [pc, #500]	; (fb24 <SPIClass::begin()+0x218>)
    f930:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    f932:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    f934:	f890 e010 	ldrb.w	lr, [r0, #16]
    f938:	4a7b      	ldr	r2, [pc, #492]	; (fb28 <SPIClass::begin()+0x21c>)
    f93a:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    f93e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    f942:	7c31      	ldrb	r1, [r6, #16]
    f944:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    f948:	6889      	ldr	r1, [r1, #8]
    f94a:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    f94e:	f890 c011 	ldrb.w	ip, [r0, #17]
    f952:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    f956:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    f95a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    f95e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    f962:	6889      	ldr	r1, [r1, #8]
    f964:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    f968:	7c81      	ldrb	r1, [r0, #18]
    f96a:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    f96e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    f972:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    f976:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    f97a:	f8db b008 	ldr.w	fp, [fp, #8]
    f97e:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    f982:	f8d4 a000 	ldr.w	sl, [r4]
    f986:	685f      	ldr	r7, [r3, #4]
    f988:	ea4a 0a07 	orr.w	sl, sl, r7
    f98c:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    f990:	7c34      	ldrb	r4, [r6, #16]
    f992:	f8de e014 	ldr.w	lr, [lr, #20]
    f996:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    f99a:	6864      	ldr	r4, [r4, #4]
    f99c:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    f9a0:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    f9a4:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    f9a8:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    f9ac:	6864      	ldr	r4, [r4, #4]
    f9ae:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    f9b2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    f9b4:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    f9b8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    f9bc:	6852      	ldr	r2, [r2, #4]
    f9be:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    f9c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    f9c2:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    f9c6:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    f9c8:	6a1a      	ldr	r2, [r3, #32]
    f9ca:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    f9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    f9ce:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    f9d0:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    f9d4:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    f9d6:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    f9d8:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    f9da:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    f9de:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    f9e0:	7cc2      	ldrb	r2, [r0, #19]
    f9e2:	2a00      	cmp	r2, #0
    f9e4:	d031      	beq.n	fa4a <SPIClass::begin()+0x13e>
			__disable_irq();
    f9e6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    f9e8:	7cc3      	ldrb	r3, [r0, #19]
    f9ea:	07dc      	lsls	r4, r3, #31
    f9ec:	d508      	bpl.n	fa00 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    f9ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f9f2:	6944      	ldr	r4, [r0, #20]
    f9f4:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    f9f8:	4022      	ands	r2, r4
    f9fa:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    f9fc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    fa00:	0799      	lsls	r1, r3, #30
    fa02:	d508      	bpl.n	fa16 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    fa04:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fa08:	6984      	ldr	r4, [r0, #24]
    fa0a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    fa0e:	4022      	ands	r2, r4
    fa10:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    fa12:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    fa16:	075a      	lsls	r2, r3, #29
    fa18:	d508      	bpl.n	fa2c <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    fa1a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fa1e:	69c4      	ldr	r4, [r0, #28]
    fa20:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    fa24:	4022      	ands	r2, r4
    fa26:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    fa28:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    fa2c:	071f      	lsls	r7, r3, #28
    fa2e:	d508      	bpl.n	fa42 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    fa30:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fa34:	6a04      	ldr	r4, [r0, #32]
    fa36:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    fa3a:	4022      	ands	r2, r4
    fa3c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    fa3e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    fa42:	06de      	lsls	r6, r3, #27
    fa44:	d455      	bmi.n	faf2 <SPIClass::begin()+0x1e6>
			__enable_irq();
    fa46:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    fa48:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    fa4a:	4c38      	ldr	r4, [pc, #224]	; (fb2c <SPIClass::begin()+0x220>)
    fa4c:	6882      	ldr	r2, [r0, #8]
    fa4e:	42a2      	cmp	r2, r4
    fa50:	d059      	beq.n	fb06 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    fa52:	4a32      	ldr	r2, [pc, #200]	; (fb1c <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    fa54:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    fa56:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    fa58:	4935      	ldr	r1, [pc, #212]	; (fb30 <SPIClass::begin()+0x224>)
    fa5a:	f3c2 1601 	ubfx	r6, r2, #4, #2
    fa5e:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    fa62:	4d34      	ldr	r5, [pc, #208]	; (fb34 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    fa64:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    fa68:	3201      	adds	r2, #1
    fa6a:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    fa6e:	42aa      	cmp	r2, r5
    fa70:	d831      	bhi.n	fad6 <SPIClass::begin()+0x1ca>
    fa72:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    fa74:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    fa76:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    fa78:	2103      	movs	r1, #3
		port().CR = 0;
    fa7a:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    fa7c:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    fa7e:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    fa80:	2101      	movs	r1, #1
		port().CCR = _ccr;
    fa82:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    fa84:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    fa86:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    fa88:	7cc3      	ldrb	r3, [r0, #19]
    fa8a:	b313      	cbz	r3, fad2 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    fa8c:	07dd      	lsls	r5, r3, #31
    fa8e:	d504      	bpl.n	fa9a <SPIClass::begin()+0x18e>
    fa90:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fa92:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fa96:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    fa9a:	079c      	lsls	r4, r3, #30
    fa9c:	d504      	bpl.n	faa8 <SPIClass::begin()+0x19c>
    fa9e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    faa0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    faa4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    faa8:	0759      	lsls	r1, r3, #29
    faaa:	d504      	bpl.n	fab6 <SPIClass::begin()+0x1aa>
    faac:	6b01      	ldr	r1, [r0, #48]	; 0x30
    faae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fab2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    fab6:	071a      	lsls	r2, r3, #28
    fab8:	d504      	bpl.n	fac4 <SPIClass::begin()+0x1b8>
    faba:	6b41      	ldr	r1, [r0, #52]	; 0x34
    fabc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fac0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    fac4:	06db      	lsls	r3, r3, #27
    fac6:	d504      	bpl.n	fad2 <SPIClass::begin()+0x1c6>
    fac8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    faca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    face:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    fad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    fad6:	4918      	ldr	r1, [pc, #96]	; (fb38 <SPIClass::begin()+0x22c>)
    fad8:	fba1 5102 	umull	r5, r1, r1, r2
    fadc:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    fade:	fbb2 f2f1 	udiv	r2, r2, r1
    fae2:	42a2      	cmp	r2, r4
    fae4:	bf88      	it	hi
    fae6:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    fae8:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    faec:	d30d      	bcc.n	fb0a <SPIClass::begin()+0x1fe>
    faee:	4a13      	ldr	r2, [pc, #76]	; (fb3c <SPIClass::begin()+0x230>)
				div = d-2;
    faf0:	e7c0      	b.n	fa74 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    faf2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    faf6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    faf8:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    fafc:	400b      	ands	r3, r1
    fafe:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    fb00:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    fb04:	e79f      	b.n	fa46 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    fb06:	68c2      	ldr	r2, [r0, #12]
    fb08:	e7b5      	b.n	fa76 <SPIClass::begin()+0x16a>
			if (d > 2) {
    fb0a:	2902      	cmp	r1, #2
    fb0c:	d9b1      	bls.n	fa72 <SPIClass::begin()+0x166>
				div = d-2;
    fb0e:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    fb10:	084c      	lsrs	r4, r1, #1
    fb12:	0222      	lsls	r2, r4, #8
    fb14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    fb18:	430a      	orrs	r2, r1
    fb1a:	e7ab      	b.n	fa74 <SPIClass::begin()+0x168>
    fb1c:	400fc000 	.word	0x400fc000
    fb20:	e3ffffcf 	.word	0xe3ffffcf
    fb24:	08000010 	.word	0x08000010
    fb28:	20008148 	.word	0x20008148
    fb2c:	003d0900 	.word	0x003d0900
    fb30:	20008138 	.word	0x20008138
    fb34:	003d08ff 	.word	0x003d08ff
    fb38:	431bde83 	.word	0x431bde83
    fb3c:	007f7fff 	.word	0x007f7fff

0000fb40 <BTHIDInput::sdp_command_completed(bool)>:
    virtual void sdp_command_completed (bool success) {};
    fb40:	4770      	bx	lr
    fb42:	bf00      	nop

0000fb44 <USBDriver::timer_event(USBDriverTimer*)>:
    virtual void timer_event(USBDriverTimer *whichTimer) { }
    fb44:	4770      	bx	lr
    fb46:	bf00      	nop

0000fb48 <USBHIDInput::hid_process_control(Transfer_struct const*)>:
    virtual bool hid_process_control(const Transfer_t *transfer) {return false;}
    fb48:	2000      	movs	r0, #0
    fb4a:	4770      	bx	lr

0000fb4c <USBDriver::Task()>:
    virtual void Task() { }
    fb4c:	4770      	bx	lr
    fb4e:	bf00      	nop

0000fb50 <USBDriver::control(Transfer_struct const*)>:
    virtual void control(const Transfer_t *transfer) { }
    fb50:	4770      	bx	lr
    fb52:	bf00      	nop

0000fb54 <BTHIDInput::claim_bluetooth(BluetoothController*, unsigned long, unsigned char*)>:
    virtual bool claim_bluetooth(BluetoothController *driver, uint32_t bluetooth_class, uint8_t *remoteName) {return false;}
    fb54:	2000      	movs	r0, #0
    fb56:	4770      	bx	lr

0000fb58 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)>:


void BluetoothController::driver_ready_for_bluetooth(BTHIDInput *driver)
{
    driver->next = NULL;
    if (available_bthid_drivers_list == NULL) {
    fb58:	4a06      	ldr	r2, [pc, #24]	; (fb74 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)+0x1c>)
    driver->next = NULL;
    fb5a:	2100      	movs	r1, #0
    if (available_bthid_drivers_list == NULL) {
    fb5c:	6813      	ldr	r3, [r2, #0]
    driver->next = NULL;
    fb5e:	6041      	str	r1, [r0, #4]
    if (available_bthid_drivers_list == NULL) {
    fb60:	b12b      	cbz	r3, fb6e <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)+0x16>
        available_bthid_drivers_list = driver;
    } else {
        BTHIDInput *last = available_bthid_drivers_list;
        while (last->next) last = last->next;
    fb62:	461a      	mov	r2, r3
    fb64:	685b      	ldr	r3, [r3, #4]
    fb66:	2b00      	cmp	r3, #0
    fb68:	d1fb      	bne.n	fb62 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)+0xa>
        last->next = driver;
    fb6a:	6050      	str	r0, [r2, #4]
    }
}
    fb6c:	4770      	bx	lr
        available_bthid_drivers_list = driver;
    fb6e:	6010      	str	r0, [r2, #0]
    fb70:	4770      	bx	lr
    fb72:	bf00      	nop
    fb74:	2000d878 	.word	0x2000d878

0000fb78 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)>:

bool BluetoothController::queue_Data_Transfer_Debug(Pipe_t *pipe, void *buffer, 
    uint32_t len, USBDriver *driver, uint32_t line) 
{
    fb78:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb7a:	b083      	sub	sp, #12
    fb7c:	460f      	mov	r7, r1
    fb7e:	4616      	mov	r6, r2
    fb80:	461d      	mov	r5, r3
    fb82:	9908      	ldr	r1, [sp, #32]
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
    fb84:	4604      	mov	r4, r0
    fb86:	b110      	cbz	r0, fb8e <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x16>
    fb88:	b10b      	cbz	r3, fb8e <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x16>
    fb8a:	b182      	cbz	r2, fbae <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x36>
    fb8c:	b97f      	cbnz	r7, fbae <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x36>
        // something wrong:
        USBHDBGSerial.printf("\n !!!!!!!!!!! BluetoothController::queue_Data_Transfer called with bad data line: %u\n", line);
    fb8e:	460a      	mov	r2, r1
    fb90:	480b      	ldr	r0, [pc, #44]	; (fbc0 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x48>)
    fb92:	490c      	ldr	r1, [pc, #48]	; (fbc4 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x4c>)
    fb94:	f005 ff9e 	bl	15ad4 <Print::printf(char const*, ...)>
        USBHDBGSerial.printf("\t pipe:%p buffer:%p len:%u driver:%p\n", pipe, buffer, len, driver);
    fb98:	463b      	mov	r3, r7
    fb9a:	4622      	mov	r2, r4
    fb9c:	490a      	ldr	r1, [pc, #40]	; (fbc8 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x50>)
    fb9e:	4808      	ldr	r0, [pc, #32]	; (fbc0 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x48>)
    fba0:	e9cd 6500 	strd	r6, r5, [sp]
    fba4:	f005 ff96 	bl	15ad4 <Print::printf(char const*, ...)>
        return false;
    }
    return queue_Data_Transfer(pipe, buffer, len, driver);
}
    fba8:	2000      	movs	r0, #0
    fbaa:	b003      	add	sp, #12
    fbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return queue_Data_Transfer(pipe, buffer, len, driver);
    fbae:	462b      	mov	r3, r5
    fbb0:	4632      	mov	r2, r6
    fbb2:	4639      	mov	r1, r7
    fbb4:	4620      	mov	r0, r4
}
    fbb6:	b003      	add	sp, #12
    fbb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return queue_Data_Transfer(pipe, buffer, len, driver);
    fbbc:	f000 bad6 	b.w	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
    fbc0:	20009514 	.word	0x20009514
    fbc4:	20003bcc 	.word	0x20003bcc
    fbc8:	20003c24 	.word	0x20003c24

0000fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>:

/************************************************************/
/*                    L2CAP Commands                        */

// Public wrrapper function
void BluetoothController::sendL2CapCommand(uint8_t* data, uint8_t nbytes, int channel) {
    fbcc:	b530      	push	{r4, r5, lr}
    fbce:	4615      	mov	r5, r2
    uint16_t channel_out;
    switch (channel) {
    fbd0:	1c9a      	adds	r2, r3, #2
void BluetoothController::sendL2CapCommand(uint8_t* data, uint8_t nbytes, int channel) {
    fbd2:	b083      	sub	sp, #12
    fbd4:	4604      	mov	r4, r0
    switch (channel) {
    fbd6:	d042      	beq.n	fc5e <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x92>
    fbd8:	1c58      	adds	r0, r3, #1
    fbda:	d03c      	beq.n	fc56 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x8a>
    fbdc:	1cda      	adds	r2, r3, #3
    fbde:	d036      	beq.n	fc4e <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x82>
    case SDP_SCID:
        channel_out = current_connection_->sdp_scid_;
        DBGPrintf("@@@@@@ SDP SCID:%x DCID:%x\n", current_connection_->sdp_scid_, current_connection_->sdp_dcid_);
        break;
    default:
        channel_out = (uint16_t)channel;
    fbe0:	b29b      	uxth	r3, r3
        channel_out = current_connection_->control_scid_;
    fbe2:	f8d4 27c4 	ldr.w	r2, [r4, #1988]	; 0x7c4
    }
    DBGPrintf("sendL2CapCommand: %x %d %x\n", (uint32_t)data, nbytes, channel, channel_out);
    sendL2CapCommand (current_connection_->device_connection_handle_, data, nbytes, channel_out & 0xff, (channel_out >> 8) & 0xff);
    fbe6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    fbe8:	f884 3ca7 	strb.w	r3, [r4, #3239]	; 0xca7
    fbec:	0a1b      	lsrs	r3, r3, #8
}


void BluetoothController::sendL2CapCommand(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh)
{
    txbuf_[0] = handle & 0xff; // HCI handle with PB,BC flag
    fbee:	f884 2ca1 	strb.w	r2, [r4, #3233]	; 0xca1
    txbuf_[1] = (((handle >> 8) & 0x0f) | 0x20);
    fbf2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    sendL2CapCommand (current_connection_->device_connection_handle_, data, nbytes, channel_out & 0xff, (channel_out >> 8) & 0xff);
    fbf6:	f884 3ca8 	strb.w	r3, [r4, #3240]	; 0xca8
    txbuf_[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
    fbfa:	1d2b      	adds	r3, r5, #4
    txbuf_[1] = (((handle >> 8) & 0x0f) | 0x20);
    fbfc:	f042 0220 	orr.w	r2, r2, #32
    txbuf_[3] = (uint8_t)((4 + nbytes) >> 8);
    txbuf_[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
    fc00:	f884 5ca5 	strb.w	r5, [r4, #3237]	; 0xca5
    txbuf_[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
    fc04:	f884 3ca3 	strb.w	r3, [r4, #3235]	; 0xca3
    txbuf_[1] = (((handle >> 8) & 0x0f) | 0x20);
    fc08:	f884 2ca2 	strb.w	r2, [r4, #3234]	; 0xca2
    txbuf_[3] = (uint8_t)((4 + nbytes) >> 8);
    fc0c:	121a      	asrs	r2, r3, #8
    txbuf_[5] = (uint8_t)(nbytes >> 8);
    fc0e:	2300      	movs	r3, #0
    txbuf_[3] = (uint8_t)((4 + nbytes) >> 8);
    fc10:	f884 2ca4 	strb.w	r2, [r4, #3236]	; 0xca4
    txbuf_[5] = (uint8_t)(nbytes >> 8);
    fc14:	f884 3ca6 	strb.w	r3, [r4, #3238]	; 0xca6
    txbuf_[6] = channelLow;
    txbuf_[7] = channelHigh;
    if (nbytes) {
    fc18:	b99d      	cbnz	r5, fc42 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x76>
    fc1a:	4b13      	ldr	r3, [pc, #76]	; (fc68 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x9c>)
        memcpy(&txbuf_[8], data, nbytes);   // copy in the commands parameters.
    }
    nbytes = nbytes + 8;
    fc1c:	f105 0208 	add.w	r2, r5, #8
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    fc20:	4912      	ldr	r1, [pc, #72]	; (fc6c <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0xa0>)
    DBGPrintf(">>(02 %u):", (uint32_t)em_rx_tx2);
    em_rx_tx2 = 0;
    for (uint8_t i = 0; i < nbytes; i++) DBGPrintf("%02X ", txbuf_[i]);
    DBGPrintf("\n");

    if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, nbytes, this, __LINE__)) {
    fc22:	f640 15b2 	movw	r5, #2482	; 0x9b2
    fc26:	6818      	ldr	r0, [r3, #0]
    fc28:	b2d2      	uxtb	r2, r2
    fc2a:	6818      	ldr	r0, [r3, #0]
    fc2c:	4623      	mov	r3, r4
    fc2e:	9500      	str	r5, [sp, #0]
    fc30:	6008      	str	r0, [r1, #0]
    fc32:	f604 41a1 	addw	r1, r4, #3233	; 0xca1
    fc36:	f8d4 0b9c 	ldr.w	r0, [r4, #2972]	; 0xb9c
    fc3a:	f7ff ff9d 	bl	fb78 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)>
}
    fc3e:	b003      	add	sp, #12
    fc40:	bd30      	pop	{r4, r5, pc}
        memcpy(&txbuf_[8], data, nbytes);   // copy in the commands parameters.
    fc42:	462a      	mov	r2, r5
    fc44:	f604 40a9 	addw	r0, r4, #3241	; 0xca9
    fc48:	f006 fc9c 	bl	16584 <memcpy>
    fc4c:	e7e5      	b.n	fc1a <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x4e>
        channel_out = current_connection_->sdp_scid_;
    fc4e:	f8d4 27c4 	ldr.w	r2, [r4, #1988]	; 0x7c4
    fc52:	8b93      	ldrh	r3, [r2, #28]
void inline DBGPrintf(...) {};
    fc54:	e7c7      	b.n	fbe6 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x1a>
        channel_out = current_connection_->control_scid_;
    fc56:	f8d4 27c4 	ldr.w	r2, [r4, #1988]	; 0x7c4
    fc5a:	8b53      	ldrh	r3, [r2, #26]
        break;
    fc5c:	e7c3      	b.n	fbe6 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x1a>
        channel_out = current_connection_->interrupt_scid_;
    fc5e:	f8d0 27c4 	ldr.w	r2, [r0, #1988]	; 0x7c4
    fc62:	8b13      	ldrh	r3, [r2, #24]
        break;
    fc64:	e7bf      	b.n	fbe6 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x1a>
    fc66:	bf00      	nop
    fc68:	2000eaac 	.word	0x2000eaac
    fc6c:	2000dc30 	.word	0x2000dc30

0000fc70 <BluetoothController::useHIDProtocol(bool)>:
}


void BluetoothController::useHIDProtocol(bool useHID) {
    // BUGBUG hopefully set at right time.
    current_connection_->use_hid_protocol_ = useHID;
    fc70:	f8d0 37c4 	ldr.w	r3, [r0, #1988]	; 0x7c4
    fc74:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
}
    fc78:	4770      	bx	lr
    fc7a:	bf00      	nop

0000fc7c <_GLOBAL__sub_I_em_rx_tx2>:
        break;
    case EV_LE_LONG_TERM_KEY_REQUEST:
        break;
    //default:    
    }
}
    fc7c:	b508      	push	{r3, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    fc7e:	f006 f9cf 	bl	16020 <eeprom_initialize>
    fc82:	4b04      	ldr	r3, [pc, #16]	; (fc94 <_GLOBAL__sub_I_em_rx_tx2+0x18>)
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    fc84:	4904      	ldr	r1, [pc, #16]	; (fc98 <_GLOBAL__sub_I_em_rx_tx2+0x1c>)
    fc86:	6818      	ldr	r0, [r3, #0]
    fc88:	4a04      	ldr	r2, [pc, #16]	; (fc9c <_GLOBAL__sub_I_em_rx_tx2+0x20>)
    fc8a:	681b      	ldr	r3, [r3, #0]
    fc8c:	6008      	str	r0, [r1, #0]
    fc8e:	6013      	str	r3, [r2, #0]
    fc90:	bd08      	pop	{r3, pc}
    fc92:	bf00      	nop
    fc94:	2000eaac 	.word	0x2000eaac
    fc98:	2000dc30 	.word	0x2000dc30
    fc9c:	2000dc2c 	.word	0x2000dc2c

0000fca0 <USBHIDInput::hid_process_in_data(Transfer_struct const*)>:
    virtual bool hid_process_in_data(const Transfer_t *transfer) {return false;}
    fca0:	2000      	movs	r0, #0
    fca2:	4770      	bx	lr

0000fca4 <USBHIDInput::hid_process_out_data(Transfer_struct const*)>:
    virtual bool hid_process_out_data(const Transfer_t *transfer) {return false;}
    fca4:	2000      	movs	r0, #0
    fca6:	4770      	bx	lr

0000fca8 <USBHIDInput::hid_timer_event(USBDriverTimer*)>:
    virtual void hid_timer_event(USBDriverTimer *whichTimer) { }
    fca8:	4770      	bx	lr
    fcaa:	bf00      	nop

0000fcac <USBHost::begin()>:
{
    fcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB2;
    fcae:	4a50      	ldr	r2, [pc, #320]	; (fdf0 <USBHost::begin()+0x144>)
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_EN_USB_CLKS; // enable
    fcb0:	f04f 0c40 	mov.w	ip, #64	; 0x40
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_BYPASS; // turn off bypass
    fcb4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_POWER; // power up
    fcb8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_ENABLE; // enable
    fcbc:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB2_CLR = 0xC000; // get out of 528 MHz mode
    fcc0:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_POWER |
    fcc4:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB2;
    fcc8:	6a13      	ldr	r3, [r2, #32]
		if (n & CCM_ANALOG_PLL_USB2_DIV_SELECT) {
    fcca:	079e      	lsls	r6, r3, #30
    fccc:	f100 8082 	bmi.w	fdd4 <USBHost::begin()+0x128>
		if (!(n & CCM_ANALOG_PLL_USB2_ENABLE)) {
    fcd0:	049e      	lsls	r6, r3, #18
    fcd2:	f140 8083 	bpl.w	fddc <USBHost::begin()+0x130>
		if (!(n & CCM_ANALOG_PLL_USB2_POWER)) {
    fcd6:	04de      	lsls	r6, r3, #19
    fcd8:	f140 8082 	bpl.w	fde0 <USBHost::begin()+0x134>
		if (!(n & CCM_ANALOG_PLL_USB2_LOCK)) {
    fcdc:	2b00      	cmp	r3, #0
    fcde:	daf3      	bge.n	fcc8 <USBHost::begin()+0x1c>
		if (n & CCM_ANALOG_PLL_USB2_BYPASS) {
    fce0:	f413 3680 	ands.w	r6, r3, #65536	; 0x10000
    fce4:	d17e      	bne.n	fde4 <USBHost::begin()+0x138>
		if (!(n & CCM_ANALOG_PLL_USB2_EN_USB_CLKS)) {
    fce6:	065b      	lsls	r3, r3, #25
    fce8:	d57e      	bpl.n	fde8 <USBHost::begin()+0x13c>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fcea:	4c42      	ldr	r4, [pc, #264]	; (fdf4 <USBHost::begin()+0x148>)
	USBPHY2_CTRL_CLR = USBPHY_CTRL_SFTRST | USBPHY_CTRL_CLKGATE;
    fcec:	4a42      	ldr	r2, [pc, #264]	; (fdf8 <USBHost::begin()+0x14c>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fcee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
	GPIO8_GDIR |= 1<<26;
    fcf2:	4b42      	ldr	r3, [pc, #264]	; (fdfc <USBHost::begin()+0x150>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fcf4:	f041 0103 	orr.w	r1, r1, #3
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    fcf8:	4841      	ldr	r0, [pc, #260]	; (fe00 <USBHost::begin()+0x154>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fcfa:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	USBPHY2_CTRL_CLR = USBPHY_CTRL_SFTRST | USBPHY_CTRL_CLKGATE;
    fcfe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    fd02:	6391      	str	r1, [r2, #56]	; 0x38
	USBPHY2_CTRL_SET = USBPHY_CTRL_ENUTMILEVEL2 | USBPHY_CTRL_ENUTMILEVEL3;
    fd04:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    fd08:	6351      	str	r1, [r2, #52]	; 0x34
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    fd0a:	2105      	movs	r1, #5
	USBPHY2_PWD = 0;
    fd0c:	6016      	str	r6, [r2, #0]
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    fd0e:	2208      	movs	r2, #8
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    fd10:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	GPIO8_DR_SET = 1<<26;
    fd14:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    fd18:	f8c0 22a4 	str.w	r2, [r0, #676]	; 0x2a4
	delay(10);
    fd1c:	200a      	movs	r0, #10
	GPIO8_GDIR |= 1<<26;
    fd1e:	685a      	ldr	r2, [r3, #4]
    fd20:	430a      	orrs	r2, r1
    fd22:	605a      	str	r2, [r3, #4]
	GPIO8_DR_SET = 1<<26;
    fd24:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	delay(10);
    fd28:	f006 f85a 	bl	15de0 <delay>
	USBHS_USBCMD |= USBHS_USBCMD_RST;
    fd2c:	4a35      	ldr	r2, [pc, #212]	; (fe04 <USBHost::begin()+0x158>)
    fd2e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    fd32:	f043 0302 	orr.w	r3, r3, #2
    fd36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
	while (USBHS_USBCMD & USBHS_USBCMD_RST) {
    fd3a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    fd3e:	079b      	lsls	r3, r3, #30
    fd40:	d4fb      	bmi.n	fd3a <USBHost::begin()+0x8e>
	init_Device_Pipe_Transfer_memory();
    fd42:	4d31      	ldr	r5, [pc, #196]	; (fe08 <USBHost::begin()+0x15c>)
    fd44:	f005 f88a 	bl	14e5c <USBHost::init_Device_Pipe_Transfer_memory()>
		periodictable[i] = 1;
    fd48:	2401      	movs	r4, #1
    fd4a:	1f2b      	subs	r3, r5, #4
    fd4c:	f105 027c 	add.w	r2, r5, #124	; 0x7c
    fd50:	f843 4f04 	str.w	r4, [r3, #4]!
	for (int i=0; i < PERIODIC_LIST_SIZE; i++) {
    fd54:	429a      	cmp	r2, r3
    fd56:	d1fb      	bne.n	fd50 <USBHost::begin()+0xa4>
	memset(uframe_bandwidth, 0, sizeof(uframe_bandwidth));
    fd58:	f44f 7280 	mov.w	r2, #256	; 0x100
    fd5c:	2100      	movs	r1, #0
    fd5e:	482b      	ldr	r0, [pc, #172]	; (fe0c <USBHost::begin()+0x160>)
    fd60:	f00b fe6a 	bl	1ba38 <memset>
	port_state = PORT_STATE_DISCONNECTED;
    fd64:	2200      	movs	r2, #0
    fd66:	492a      	ldr	r1, [pc, #168]	; (fe10 <USBHost::begin()+0x164>)
	USBHS_USB_SBUSCFG = 1; //  System Bus Interface Configuration
    fd68:	4b26      	ldr	r3, [pc, #152]	; (fe04 <USBHost::begin()+0x158>)
	port_state = PORT_STATE_DISCONNECTED;
    fd6a:	700a      	strb	r2, [r1, #0]
	USBHS_USBMODE = USBHS_USBMODE_CM(3); // host mode
    fd6c:	2103      	movs	r1, #3
	USBHS_USB_SBUSCFG = 1; //  System Bus Interface Configuration
    fd6e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	USBHS_USBMODE = USBHS_USBMODE_CM(3); // host mode
    fd72:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	USBHS_USBCMD = USBHS_USBCMD_ITC(1) | USBHS_USBCMD_RS |
    fd76:	4927      	ldr	r1, [pc, #156]	; (fe14 <USBHost::begin()+0x168>)
	USBHS_USBINTR = 0;
    fd78:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	USBHS_PERIODICLISTBASE = (uint32_t)periodictable;
    fd7c:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
	USBHS_FRINDEX = 0;
    fd80:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	USBHS_ASYNCLISTADDR = 0;
    fd84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	USBHS_USBCMD = USBHS_USBCMD_ITC(1) | USBHS_USBCMD_RS |
    fd88:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
	USBHS_PORTSC1 |= USBHS_PORTSC_PP;
    fd8c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
    fd90:	4921      	ldr	r1, [pc, #132]	; (fe18 <USBHost::begin()+0x16c>)
    fd92:	4822      	ldr	r0, [pc, #136]	; (fe1c <USBHost::begin()+0x170>)
    fd94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    fd98:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	println("USBHS_ASYNCLISTADDR = ", USBHS_ASYNCLISTADDR, HEX);
    fd9c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	println("USBHS_PERIODICLISTBASE = ", USBHS_PERIODICLISTBASE, HEX);
    fda0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
    fda4:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
	USBHS_USBINTR = USBHS_USBINTR_PCE | USBHS_USBINTR_TIE0 | USBHS_USBINTR_TIE1;
    fda8:	4a1d      	ldr	r2, [pc, #116]	; (fe20 <USBHost::begin()+0x174>)
	NVIC_ENABLE_IRQ(IRQ_USBHS);
    fdaa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fdae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    fdb2:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
	USBHS_USBINTR = USBHS_USBINTR_PCE | USBHS_USBINTR_TIE0 | USBHS_USBINTR_TIE1;
    fdb6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	USBHS_USBINTR |= USBHS_USBINTR_UEE | USBHS_USBINTR_SEE;
    fdba:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    fdbe:	f042 0212 	orr.w	r2, r2, #18
    fdc2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	USBHS_USBINTR |= USBHS_USBINTR_UPIE | USBHS_USBINTR_UAIE;
    fdc6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    fdca:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
    fdce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    fdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CCM_ANALOG_PLL_USB2_CLR = 0xC000; // get out of 528 MHz mode
    fdd4:	6294      	str	r4, [r2, #40]	; 0x28
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_BYPASS;
    fdd6:	6251      	str	r1, [r2, #36]	; 0x24
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_POWER |
    fdd8:	6290      	str	r0, [r2, #40]	; 0x28
			continue;
    fdda:	e775      	b.n	fcc8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_ENABLE; // enable
    fddc:	6255      	str	r5, [r2, #36]	; 0x24
			continue;
    fdde:	e773      	b.n	fcc8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_POWER; // power up
    fde0:	6257      	str	r7, [r2, #36]	; 0x24
			continue;
    fde2:	e771      	b.n	fcc8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_BYPASS; // turn off bypass
    fde4:	6291      	str	r1, [r2, #40]	; 0x28
			continue;
    fde6:	e76f      	b.n	fcc8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_EN_USB_CLKS; // enable
    fde8:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
			continue;
    fdec:	e76c      	b.n	fcc8 <USBHost::begin()+0x1c>
    fdee:	bf00      	nop
    fdf0:	400d8000 	.word	0x400d8000
    fdf4:	400fc000 	.word	0x400fc000
    fdf8:	400da000 	.word	0x400da000
    fdfc:	42008000 	.word	0x42008000
    fe00:	401f8000 	.word	0x401f8000
    fe04:	402e0200 	.word	0x402e0200
    fe08:	2000a000 	.word	0x2000a000
    fe0c:	2000d744 	.word	0x2000d744
    fe10:	2000ec26 	.word	0x2000ec26
    fe14:	00018b15 	.word	0x00018b15
    fe18:	20009c00 	.word	0x20009c00
    fe1c:	00010405 	.word	0x00010405
    fe20:	03000004 	.word	0x03000004

0000fe24 <USBDriverTimer::start(unsigned long)>:
	if (!driver) return;
    fe24:	68c3      	ldr	r3, [r0, #12]
	if (microseconds < 100) return; // minimum timer duration
    fe26:	b353      	cbz	r3, fe7e <USBDriverTimer::start(unsigned long)+0x5a>
    fe28:	2963      	cmp	r1, #99	; 0x63
{
    fe2a:	b570      	push	{r4, r5, r6, lr}
	if (microseconds < 100) return; // minimum timer duration
    fe2c:	bf8c      	ite	hi
    fe2e:	2600      	movhi	r6, #0
    fe30:	2601      	movls	r6, #1
    fe32:	460c      	mov	r4, r1
    fe34:	bb16      	cbnz	r6, fe7c <USBDriverTimer::start(unsigned long)+0x58>
	started_micros = micros();
    fe36:	4605      	mov	r5, r0
    fe38:	f006 f826 	bl	15e88 <micros>
	if (active_timers == NULL) {
    fe3c:	4926      	ldr	r1, [pc, #152]	; (fed8 <USBDriverTimer::start(unsigned long)+0xb4>)
	started_micros = micros();
    fe3e:	60a8      	str	r0, [r5, #8]
	if (active_timers == NULL) {
    fe40:	6808      	ldr	r0, [r1, #0]
		USBHS_GPTIMER1LD = microseconds - 1;
    fe42:	4b26      	ldr	r3, [pc, #152]	; (fedc <USBDriverTimer::start(unsigned long)+0xb8>)
	if (active_timers == NULL) {
    fe44:	2800      	cmp	r0, #0
    fe46:	d03a      	beq.n	febe <USBDriverTimer::start(unsigned long)+0x9a>
	uint32_t remain = USBHS_GPTIMER1CTL & 0xFFFFFF;
    fe48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    fe4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (microseconds < remain) {
    fe50:	4294      	cmp	r4, r2
    fe52:	d315      	bcc.n	fe80 <USBDriverTimer::start(unsigned long)+0x5c>
	while (list->next) {
    fe54:	6943      	ldr	r3, [r0, #20]
	microseconds -= remain;
    fe56:	1aa1      	subs	r1, r4, r2
	while (list->next) {
    fe58:	b923      	cbnz	r3, fe64 <USBDriverTimer::start(unsigned long)+0x40>
    fe5a:	e029      	b.n	feb0 <USBDriverTimer::start(unsigned long)+0x8c>
    fe5c:	695c      	ldr	r4, [r3, #20]
		microseconds -= list->usec;
    fe5e:	1a89      	subs	r1, r1, r2
	while (list->next) {
    fe60:	b33c      	cbz	r4, feb2 <USBDriverTimer::start(unsigned long)+0x8e>
    fe62:	4623      	mov	r3, r4
		if (microseconds < list->usec) {
    fe64:	691a      	ldr	r2, [r3, #16]
    fe66:	428a      	cmp	r2, r1
    fe68:	d9f8      	bls.n	fe5c <USBDriverTimer::start(unsigned long)+0x38>
			prev = list->prev;
    fe6a:	6998      	ldr	r0, [r3, #24]
			list->usec -= microseconds;
    fe6c:	1a52      	subs	r2, r2, r1
    fe6e:	611a      	str	r2, [r3, #16]
			prev = list->prev;
    fe70:	61a8      	str	r0, [r5, #24]
			next = list;
    fe72:	e9c5 1304 	strd	r1, r3, [r5, #16]
			list->prev = this;
    fe76:	619d      	str	r5, [r3, #24]
			prev->next = this;
    fe78:	69ab      	ldr	r3, [r5, #24]
    fe7a:	615d      	str	r5, [r3, #20]
}
    fe7c:	bd70      	pop	{r4, r5, r6, pc}
    fe7e:	4770      	bx	lr
		__disable_irq();
    fe80:	b672      	cpsid	i
		USBHS_USBSTS = USBHS_USBSTS_TI1; // TODO: UPI & UAI safety?!
    fe82:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
		USBHS_GPTIMER1CTL = 0;
    fe86:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
		active_timers->usec = remain - microseconds;
    fe8a:	1b12      	subs	r2, r2, r4
		USBHS_USBSTS = USBHS_USBSTS_TI1; // TODO: UPI & UAI safety?!
    fe8c:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
		next = active_timers;
    fe90:	6808      	ldr	r0, [r1, #0]
		usec = microseconds;
    fe92:	612c      	str	r4, [r5, #16]
		USBHS_GPTIMER1LD = microseconds - 1;
    fe94:	3c01      	subs	r4, #1
		prev = NULL;
    fe96:	61ae      	str	r6, [r5, #24]
		next = active_timers;
    fe98:	6168      	str	r0, [r5, #20]
		active_timers->usec = remain - microseconds;
    fe9a:	6102      	str	r2, [r0, #16]
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    fe9c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
		active_timers = this;
    fea0:	600d      	str	r5, [r1, #0]
		active_timers->prev = this;
    fea2:	6185      	str	r5, [r0, #24]
		USBHS_GPTIMER1LD = microseconds - 1;
    fea4:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    fea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		__enable_irq();
    feac:	b662      	cpsie	i
}
    feae:	bd70      	pop	{r4, r5, r6, pc}
	while (list->next) {
    feb0:	4603      	mov	r3, r0
	next = NULL;
    feb2:	2200      	movs	r2, #0
	usec = microseconds;
    feb4:	6129      	str	r1, [r5, #16]
	next = NULL;
    feb6:	e9c5 2305 	strd	r2, r3, [r5, #20]
	list->next = this;
    feba:	615d      	str	r5, [r3, #20]
}
    febc:	bd70      	pop	{r4, r5, r6, pc}
		USBHS_GPTIMER1LD = microseconds - 1;
    febe:	1e66      	subs	r6, r4, #1
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    fec0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
		prev = NULL;
    fec4:	61a8      	str	r0, [r5, #24]
		active_timers = this;
    fec6:	600d      	str	r5, [r1, #0]
		next = NULL;
    fec8:	e9c5 4004 	strd	r4, r0, [r5, #16]
		USBHS_GPTIMER1LD = microseconds - 1;
    fecc:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    fed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    fed4:	bd70      	pop	{r4, r5, r6, pc}
    fed6:	bf00      	nop
    fed8:	2000d710 	.word	0x2000d710
    fedc:	402e0200 	.word	0x402e0200

0000fee0 <USBDriverTimer::stop()>:
	__disable_irq();
    fee0:	b672      	cpsid	i
	if (active_timers) {
    fee2:	4a19      	ldr	r2, [pc, #100]	; (ff48 <USBDriverTimer::stop()+0x68>)
    fee4:	6813      	ldr	r3, [r2, #0]
    fee6:	b1fb      	cbz	r3, ff28 <USBDriverTimer::stop()+0x48>
		if (active_timers == this) {
    fee8:	4283      	cmp	r3, r0
    feea:	d11a      	bne.n	ff22 <USBDriverTimer::stop()+0x42>
			USBHS_GPTIMER1CTL = 0;
    feec:	4817      	ldr	r0, [pc, #92]	; (ff4c <USBDriverTimer::stop()+0x6c>)
			if (next) {
    feee:	695b      	ldr	r3, [r3, #20]
{
    fef0:	b430      	push	{r4, r5}
			USBHS_GPTIMER1CTL = 0;
    fef2:	2400      	movs	r4, #0
    fef4:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
			if (next) {
    fef8:	b323      	cbz	r3, ff44 <USBDriverTimer::stop()+0x64>
				uint32_t usec_til_next = USBHS_GPTIMER1CTL & 0xFFFFFF;
    fefa:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
				usec_til_next += next->usec;
    fefe:	691d      	ldr	r5, [r3, #16]
				uint32_t usec_til_next = USBHS_GPTIMER1CTL & 0xFFFFFF;
    ff00:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
				usec_til_next += next->usec;
    ff04:	4429      	add	r1, r5
				next->usec = usec_til_next;
    ff06:	6119      	str	r1, [r3, #16]
				USBHS_GPTIMER1LD = usec_til_next;
    ff08:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
				USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    ff0c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    ff10:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
				next->prev = NULL;
    ff14:	619c      	str	r4, [r3, #24]
				active_timers = next;
    ff16:	6013      	str	r3, [r2, #0]
	__enable_irq();
    ff18:	b662      	cpsie	i
}
    ff1a:	bc30      	pop	{r4, r5}
    ff1c:	4770      	bx	lr
				if (t == this) {
    ff1e:	4298      	cmp	r0, r3
    ff20:	d004      	beq.n	ff2c <USBDriverTimer::stop()+0x4c>
			for (USBDriverTimer *t = active_timers->next; t; t = t->next) {
    ff22:	695b      	ldr	r3, [r3, #20]
    ff24:	2b00      	cmp	r3, #0
    ff26:	d1fa      	bne.n	ff1e <USBDriverTimer::stop()+0x3e>
	__enable_irq();
    ff28:	b662      	cpsie	i
    ff2a:	4770      	bx	lr
					t->prev->next = t->next;
    ff2c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    ff30:	614a      	str	r2, [r1, #20]
					if (t->next) {
    ff32:	2a00      	cmp	r2, #0
    ff34:	d0f8      	beq.n	ff28 <USBDriverTimer::stop()+0x48>
						t->next->usec += t->usec;
    ff36:	6918      	ldr	r0, [r3, #16]
    ff38:	6913      	ldr	r3, [r2, #16]
						t->next->prev = t->prev;
    ff3a:	6191      	str	r1, [r2, #24]
						t->next->usec += t->usec;
    ff3c:	4403      	add	r3, r0
    ff3e:	6113      	str	r3, [r2, #16]
	__enable_irq();
    ff40:	b662      	cpsie	i
    ff42:	4770      	bx	lr
				active_timers = NULL;
    ff44:	6013      	str	r3, [r2, #0]
    ff46:	e7e7      	b.n	ff18 <USBDriverTimer::stop()+0x38>
    ff48:	2000d710 	.word	0x2000d710
    ff4c:	402e0200 	.word	0x402e0200

0000ff50 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)>:
	Transfer_t *halt = (Transfer_t *)(pipe->qh.next);
    ff50:	6903      	ldr	r3, [r0, #16]
{
    ff52:	4684      	mov	ip, r0
	while (!(halt->qtd.token & 0x40)) halt = (Transfer_t *)(halt->qtd.next);
    ff54:	689a      	ldr	r2, [r3, #8]
{
    ff56:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff58:	460d      	mov	r5, r1
	while (!(halt->qtd.token & 0x40)) halt = (Transfer_t *)(halt->qtd.next);
    ff5a:	0651      	lsls	r1, r2, #25
    ff5c:	d403      	bmi.n	ff66 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x16>
    ff5e:	681b      	ldr	r3, [r3, #0]
    ff60:	689a      	ldr	r2, [r3, #8]
    ff62:	0652      	lsls	r2, r2, #25
    ff64:	d5fb      	bpl.n	ff5e <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xe>
	transfer->qtd.token = 0x40;
    ff66:	2240      	movs	r2, #64	; 0x40
	uint32_t token = transfer->qtd.token;
    ff68:	f8d5 e008 	ldr.w	lr, [r5, #8]
	halt->setup = transfer->setup;
    ff6c:	f105 0134 	add.w	r1, r5, #52	; 0x34
	halt->driver = transfer->driver;
    ff70:	6bee      	ldr	r6, [r5, #60]	; 0x3c
	transfer->qtd.token = 0x40;
    ff72:	60aa      	str	r2, [r5, #8]
	halt->qtd.next = transfer->qtd.next;
    ff74:	682a      	ldr	r2, [r5, #0]
    ff76:	601a      	str	r2, [r3, #0]
	halt->qtd.alt_next = transfer->qtd.alt_next;
    ff78:	686a      	ldr	r2, [r5, #4]
    ff7a:	605a      	str	r2, [r3, #4]
	halt->qtd.buffer[0] = transfer->qtd.buffer[0]; // TODO: optimize memcpy, all
    ff7c:	68ea      	ldr	r2, [r5, #12]
    ff7e:	60da      	str	r2, [r3, #12]
	halt->qtd.buffer[1] = transfer->qtd.buffer[1]; //       fields except token
    ff80:	692a      	ldr	r2, [r5, #16]
    ff82:	611a      	str	r2, [r3, #16]
	halt->qtd.buffer[2] = transfer->qtd.buffer[2];
    ff84:	696a      	ldr	r2, [r5, #20]
    ff86:	615a      	str	r2, [r3, #20]
	halt->qtd.buffer[3] = transfer->qtd.buffer[3];
    ff88:	69aa      	ldr	r2, [r5, #24]
    ff8a:	619a      	str	r2, [r3, #24]
	halt->qtd.buffer[4] = transfer->qtd.buffer[4];
    ff8c:	69ea      	ldr	r2, [r5, #28]
	halt->pipe = pipe;
    ff8e:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
	halt->qtd.buffer[4] = transfer->qtd.buffer[4];
    ff92:	61da      	str	r2, [r3, #28]
	halt->buffer = transfer->buffer;
    ff94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
    ff96:	681c      	ldr	r4, [r3, #0]
	halt->buffer = transfer->buffer;
    ff98:	62da      	str	r2, [r3, #44]	; 0x2c
	halt->length = transfer->length;
    ff9a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
    ff9c:	2c01      	cmp	r4, #1
	halt->setup = transfer->setup;
    ff9e:	c903      	ldmia	r1, {r0, r1}
	halt->length = transfer->length;
    ffa0:	631a      	str	r2, [r3, #48]	; 0x30
	halt->setup = transfer->setup;
    ffa2:	f103 0234 	add.w	r2, r3, #52	; 0x34
    ffa6:	e882 0003 	stmia.w	r2, {r0, r1}
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
    ffaa:	461a      	mov	r2, r3
	halt->driver = transfer->driver;
    ffac:	63de      	str	r6, [r3, #60]	; 0x3c
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
    ffae:	d003      	beq.n	ffb8 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x68>
    ffb0:	6812      	ldr	r2, [r2, #0]
    ffb2:	6811      	ldr	r1, [r2, #0]
    ffb4:	2901      	cmp	r1, #1
    ffb6:	d1fb      	bne.n	ffb0 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x60>
	last->qtd.next = (uint32_t)transfer;
    ffb8:	6015      	str	r5, [r2, #0]
	transfer->qtd.next = 1;
    ffba:	2201      	movs	r2, #1
    ffbc:	602a      	str	r2, [r5, #0]
	while (p->qtd.next != (uint32_t)transfer) {
    ffbe:	681a      	ldr	r2, [r3, #0]
    ffc0:	4295      	cmp	r5, r2
    ffc2:	461a      	mov	r2, r3
    ffc4:	d02e      	beq.n	10024 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xd4>
	Transfer_t *prev = NULL;
    ffc6:	2600      	movs	r6, #0
		Transfer_t *next = (Transfer_t *)p->qtd.next;
    ffc8:	6811      	ldr	r1, [r2, #0]
    ffca:	4614      	mov	r4, r2
	while (p->qtd.next != (uint32_t)transfer) {
    ffcc:	680f      	ldr	r7, [r1, #0]
		Transfer_t *next = (Transfer_t *)p->qtd.next;
    ffce:	460a      	mov	r2, r1
		p->prev_followup = prev;
    ffd0:	6266      	str	r6, [r4, #36]	; 0x24
		p->next_followup = next;
    ffd2:	4626      	mov	r6, r4
	while (p->qtd.next != (uint32_t)transfer) {
    ffd4:	42bd      	cmp	r5, r7
		p->next_followup = next;
    ffd6:	6221      	str	r1, [r4, #32]
	while (p->qtd.next != (uint32_t)transfer) {
    ffd8:	d1f6      	bne.n	ffc8 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x78>
	p->next_followup = NULL;
    ffda:	2100      	movs	r1, #0
	p->prev_followup = prev;
    ffdc:	6254      	str	r4, [r2, #36]	; 0x24
	p->next_followup = NULL;
    ffde:	6211      	str	r1, [r2, #32]
	if (pipe->type == 0 || pipe->type == 2) {
    ffe0:	f89c 1034 	ldrb.w	r1, [ip, #52]	; 0x34
    ffe4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    ffe8:	d109      	bne.n	fffe <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xae>
}

static void add_to_async_followup_list(Transfer_t *first, Transfer_t *last)
{
	last->next_followup = NULL; // always add to end of list
	if (async_followup_last == NULL) {
    ffea:	480f      	ldr	r0, [pc, #60]	; (10028 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xd8>)
    ffec:	6801      	ldr	r1, [r0, #0]
		first->prev_followup = NULL;
    ffee:	6259      	str	r1, [r3, #36]	; 0x24
	if (async_followup_last == NULL) {
    fff0:	b189      	cbz	r1, 10016 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xc6>
	if (periodic_followup_last == NULL) {
		first->prev_followup = NULL;
		periodic_followup_first = first;
	} else {
		first->prev_followup = periodic_followup_last;
		periodic_followup_last->next_followup = first;
    fff2:	620b      	str	r3, [r1, #32]
	}
	periodic_followup_last = last;
    fff4:	6002      	str	r2, [r0, #0]
}
    fff6:	2001      	movs	r0, #1
	halt->qtd.token = token;
    fff8:	f8c3 e008 	str.w	lr, [r3, #8]
}
    fffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (periodic_followup_last == NULL) {
    fffe:	480b      	ldr	r0, [pc, #44]	; (1002c <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xdc>)
   10000:	6801      	ldr	r1, [r0, #0]
		first->prev_followup = NULL;
   10002:	6259      	str	r1, [r3, #36]	; 0x24
	if (periodic_followup_last == NULL) {
   10004:	2900      	cmp	r1, #0
   10006:	d1f4      	bne.n	fff2 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xa2>
		periodic_followup_first = first;
   10008:	4909      	ldr	r1, [pc, #36]	; (10030 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xe0>)
   1000a:	600b      	str	r3, [r1, #0]
	periodic_followup_last = last;
   1000c:	6002      	str	r2, [r0, #0]
}
   1000e:	2001      	movs	r0, #1
	halt->qtd.token = token;
   10010:	f8c3 e008 	str.w	lr, [r3, #8]
}
   10014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		async_followup_first = first;
   10016:	4907      	ldr	r1, [pc, #28]	; (10034 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xe4>)
   10018:	600b      	str	r3, [r1, #0]
	periodic_followup_last = last;
   1001a:	6002      	str	r2, [r0, #0]
}
   1001c:	2001      	movs	r0, #1
	halt->qtd.token = token;
   1001e:	f8c3 e008 	str.w	lr, [r3, #8]
}
   10022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Transfer_t *prev = NULL;
   10024:	2400      	movs	r4, #0
   10026:	e7d8      	b.n	ffda <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x8a>
   10028:	2000d84c 	.word	0x2000d84c
   1002c:	2000d854 	.word	0x2000d854
   10030:	2000d858 	.word	0x2000d858
   10034:	2000d850 	.word	0x2000d850

00010038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>:
{
   10038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1003c:	4698      	mov	r8, r3
	if (setup->wLength > 16384) return false; // max 16K data for control
   1003e:	88cb      	ldrh	r3, [r1, #6]
   10040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   10044:	d902      	bls.n	1004c <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x14>
}
   10046:	2000      	movs	r0, #0
   10048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	transfer = allocate_Transfer();
   1004c:	460d      	mov	r5, r1
   1004e:	4681      	mov	r9, r0
   10050:	4617      	mov	r7, r2
   10052:	f004 ff4b 	bl	14eec <USBHost::allocate_Transfer()>
	if (!transfer) {
   10056:	4606      	mov	r6, r0
   10058:	2800      	cmp	r0, #0
   1005a:	d0f4      	beq.n	10046 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xe>
	status = allocate_Transfer();
   1005c:	f004 ff46 	bl	14eec <USBHost::allocate_Transfer()>
	if (!status) {
   10060:	4604      	mov	r4, r0
   10062:	2800      	cmp	r0, #0
   10064:	d06c      	beq.n	10140 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x108>
	if (setup->wLength > 0) {
   10066:	88e9      	ldrh	r1, [r5, #6]
   10068:	2900      	cmp	r1, #0
   1006a:	d13b      	bne.n	100e4 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xac>
		transfer->qtd.next = (uint32_t)status;
   1006c:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 10160 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x128>
   10070:	6030      	str	r0, [r6, #0]
	addr &= 0xFFFFF000;
   10072:	4b39      	ldr	r3, [pc, #228]	; (10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x120>)
	t->qtd.alt_next = 1; // 1=terminate
   10074:	2201      	movs	r2, #1
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10076:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 10164 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x12c>
	addr &= 0xFFFFF000;
   1007a:	402b      	ands	r3, r5
	status->pipe = dev->control_pipe;
   1007c:	f8d9 0000 	ldr.w	r0, [r9]
	status->setup.word2 = setup->word2;
   10080:	f8d5 e004 	ldr.w	lr, [r5, #4]
	status->setup.word1 = setup->word1;
   10084:	f8d5 9000 	ldr.w	r9, [r5]
	t->qtd.alt_next = 1; // 1=terminate
   10088:	6072      	str	r2, [r6, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   1008a:	f8c6 a008 	str.w	sl, [r6, #8]
	t->qtd.buffer[0] = addr;
   1008e:	60f5      	str	r5, [r6, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   10090:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
   10094:	6135      	str	r5, [r6, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   10096:	f503 5500 	add.w	r5, r3, #8192	; 0x2000
   1009a:	6175      	str	r5, [r6, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   1009c:	f503 5540 	add.w	r5, r3, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   100a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   100a4:	61b5      	str	r5, [r6, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   100a6:	61f3      	str	r3, [r6, #28]
	t->qtd.buffer[0] = addr;
   100a8:	2300      	movs	r3, #0
	t->qtd.alt_next = 1; // 1=terminate
   100aa:	6062      	str	r2, [r4, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   100ac:	f8c4 c008 	str.w	ip, [r4, #8]
	t->qtd.buffer[0] = addr;
   100b0:	60e3      	str	r3, [r4, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   100b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	status->driver = driver;
   100b6:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	t->qtd.buffer[1] = addr + 0x1000;
   100ba:	6123      	str	r3, [r4, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   100bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	status->pipe = dev->control_pipe;
   100c0:	62a0      	str	r0, [r4, #40]	; 0x28
	t->qtd.buffer[2] = addr + 0x2000;
   100c2:	6163      	str	r3, [r4, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   100c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
   100c8:	61a3      	str	r3, [r4, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   100ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	status->length = setup->wLength;
   100ce:	e9c4 710b 	strd	r7, r1, [r4, #44]	; 0x2c
	t->qtd.buffer[4] = addr + 0x4000;
   100d2:	61e3      	str	r3, [r4, #28]
	return queue_Transfer(dev->control_pipe, transfer);
   100d4:	4631      	mov	r1, r6
	status->qtd.next = 1;
   100d6:	6022      	str	r2, [r4, #0]
	status->setup.word2 = setup->word2;
   100d8:	e9c4 9e0d 	strd	r9, lr, [r4, #52]	; 0x34
}
   100dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return queue_Transfer(dev->control_pipe, transfer);
   100e0:	f7ff bf36 	b.w	ff50 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)>
		data = allocate_Transfer();
   100e4:	f004 ff02 	bl	14eec <USBHost::allocate_Transfer()>
		if (!data) {
   100e8:	b370      	cbz	r0, 10148 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x110>
		uint32_t pid = (setup->bmRequestType & 0x80) ? 1 : 0;
   100ea:	782a      	ldrb	r2, [r5, #0]
		init_qTD(data, buf, setup->wLength, pid, 1, false);
   100ec:	88e9      	ldrh	r1, [r5, #6]
   100ee:	09d2      	lsrs	r2, r2, #7
	addr &= 0xFFFFF000;
   100f0:	4b19      	ldr	r3, [pc, #100]	; (10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x120>)
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   100f2:	f8df c074 	ldr.w	ip, [pc, #116]	; 10168 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x130>
   100f6:	ea4f 2e02 	mov.w	lr, r2, lsl #8
	addr &= 0xFFFFF000;
   100fa:	403b      	ands	r3, r7
		status_direction = pid ^ 1;
   100fc:	f082 0201 	eor.w	r2, r2, #1
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10100:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10104:	ea4e 0c0c 	orr.w	ip, lr, ip
	t->qtd.alt_next = 1; // 1=terminate
   10108:	f04f 0e01 	mov.w	lr, #1
   1010c:	f8c0 e004 	str.w	lr, [r0, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10110:	f8c0 c008 	str.w	ip, [r0, #8]
	t->qtd.buffer[1] = addr + 0x1000;
   10114:	f503 5c80 	add.w	ip, r3, #4096	; 0x1000
	t->qtd.buffer[0] = addr;
   10118:	60c7      	str	r7, [r0, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   1011a:	f8c0 c010 	str.w	ip, [r0, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   1011e:	f503 5c00 	add.w	ip, r3, #8192	; 0x2000
   10122:	f8c0 c014 	str.w	ip, [r0, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   10126:	f503 5c40 	add.w	ip, r3, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   1012a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   1012e:	f8c0 c018 	str.w	ip, [r0, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   10132:	61c3      	str	r3, [r0, #28]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10134:	4b09      	ldr	r3, [pc, #36]	; (1015c <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x124>)
		transfer->qtd.next = (uint32_t)data;
   10136:	6030      	str	r0, [r6, #0]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10138:	ea43 2c02 	orr.w	ip, r3, r2, lsl #8
		data->qtd.next = (uint32_t)status;
   1013c:	6004      	str	r4, [r0, #0]
		status_direction = pid ^ 1;
   1013e:	e798      	b.n	10072 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x3a>
		free_Transfer(transfer);
   10140:	4630      	mov	r0, r6
   10142:	f004 fedb 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
		return false;
   10146:	e77e      	b.n	10046 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xe>
			free_Transfer(transfer);
   10148:	4630      	mov	r0, r6
   1014a:	f004 fed7 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
			free_Transfer(status);
   1014e:	4620      	mov	r0, r4
   10150:	f004 fed4 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
			return false;
   10154:	e777      	b.n	10046 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xe>
   10156:	bf00      	nop
   10158:	fffff000 	.word	0xfffff000
   1015c:	80008080 	.word	0x80008080
   10160:	80008180 	.word	0x80008180
   10164:	00080280 	.word	0x00080280
   10168:	80000080 	.word	0x80000080

0001016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>:
{
   1016c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool irq_was_enabled = NVIC_IS_ENABLED(IRQ_USBHS);
   10170:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	NVIC_DISABLE_IRQ(IRQ_USBHS);
   10174:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
{
   10178:	4699      	mov	r9, r3
   1017a:	4607      	mov	r7, r0
	bool irq_was_enabled = NVIC_IS_ENABLED(IRQ_USBHS);
   1017c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
{
   10180:	468b      	mov	fp, r1
	NVIC_DISABLE_IRQ(IRQ_USBHS);
   10182:	f8c4 a18c 	str.w	sl, [r4, #396]	; 0x18c
{
   10186:	4616      	mov	r6, r2
	bool irq_was_enabled = NVIC_IS_ENABLED(IRQ_USBHS);
   10188:	ea03 080a 	and.w	r8, r3, sl
	transfer = allocate_Transfer();
   1018c:	f004 feae 	bl	14eec <USBHost::allocate_Transfer()>
	if (!transfer) {
   10190:	4605      	mov	r5, r0
   10192:	2800      	cmp	r0, #0
   10194:	d07d      	beq.n	10292 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x126>
	for (count=((len-1) >> 14); count; count--) {
   10196:	1e73      	subs	r3, r6, #1
   10198:	0b9c      	lsrs	r4, r3, #14
   1019a:	d008      	beq.n	101ae <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x42>
		next = allocate_Transfer();
   1019c:	4682      	mov	sl, r0
   1019e:	f004 fea5 	bl	14eec <USBHost::allocate_Transfer()>
		if (!next) {
   101a2:	2800      	cmp	r0, #0
   101a4:	d060      	beq.n	10268 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xfc>
	for (count=((len-1) >> 14); count; count--) {
   101a6:	3c01      	subs	r4, #1
		data->qtd.next = (uint32_t)next;
   101a8:	f8ca 0000 	str.w	r0, [sl]
	for (count=((len-1) >> 14); count; count--) {
   101ac:	d1f6      	bne.n	1019c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x30>
	data->setup.word1 = 0;
   101ae:	2300      	movs	r3, #0
	data->qtd.next = 1;
   101b0:	2101      	movs	r1, #1
		if (count > 16384) {
   101b2:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
	data->driver = driver;
   101b6:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
	data->length = len;
   101ba:	6306      	str	r6, [r0, #48]	; 0x30
	data->driver = driver;
   101bc:	462a      	mov	r2, r5
	data->qtd.next = 1;
   101be:	6001      	str	r1, [r0, #0]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   101c0:	4c37      	ldr	r4, [pc, #220]	; (102a0 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x134>)
	data->buffer = buffer;
   101c2:	e9c0 7b0a 	strd	r7, fp, [r0, #40]	; 0x28
	data->setup.word2 = 0;
   101c6:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
	addr &= 0xFFFFF000;
   101ca:	4836      	ldr	r0, [pc, #216]	; (102a4 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x138>)
		if (count > 16384) {
   101cc:	d920      	bls.n	10210 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xa4>
		init_qTD(data, p, count, pipe->direction, 0, last);
   101ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
		len -= count;
   101d2:	f5a6 4680 	sub.w	r6, r6, #16384	; 0x4000
	t->qtd.alt_next = 1; // 1=terminate
   101d6:	6051      	str	r1, [r2, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   101d8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		if (count > 16384) {
   101dc:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   101e0:	6093      	str	r3, [r2, #8]
	addr &= 0xFFFFF000;
   101e2:	ea0b 0300 	and.w	r3, fp, r0
	t->qtd.buffer[0] = addr;
   101e6:	f8c2 b00c 	str.w	fp, [r2, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   101ea:	f50b 4b80 	add.w	fp, fp, #16384	; 0x4000
   101ee:	f503 5c80 	add.w	ip, r3, #4096	; 0x1000
   101f2:	f8c2 c010 	str.w	ip, [r2, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   101f6:	f503 5c00 	add.w	ip, r3, #8192	; 0x2000
   101fa:	f8c2 c014 	str.w	ip, [r2, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   101fe:	f503 5c40 	add.w	ip, r3, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   10202:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   10206:	f8c2 c018 	str.w	ip, [r2, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   1020a:	61d3      	str	r3, [r2, #28]
		data = (Transfer_t *)(data->qtd.next);
   1020c:	6812      	ldr	r2, [r2, #0]
		if (count > 16384) {
   1020e:	d8de      	bhi.n	101ce <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x62>
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10210:	0436      	lsls	r6, r6, #16
		init_qTD(data, p, count, pipe->direction, 0, last);
   10212:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
	addr &= 0xFFFFF000;
   10216:	4c23      	ldr	r4, [pc, #140]	; (102a4 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x138>)
	bool return_value = queue_Transfer(pipe, transfer);
   10218:	4629      	mov	r1, r5
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   1021a:	f446 4300 	orr.w	r3, r6, #32768	; 0x8000
	t->qtd.alt_next = 1; // 1=terminate
   1021e:	2501      	movs	r5, #1
	addr &= 0xFFFFF000;
   10220:	ea0b 0404 	and.w	r4, fp, r4
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10224:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	t->qtd.alt_next = 1; // 1=terminate
   10228:	6055      	str	r5, [r2, #4]
	bool return_value = queue_Transfer(pipe, transfer);
   1022a:	4638      	mov	r0, r7
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   1022c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10230:	6093      	str	r3, [r2, #8]
	t->qtd.buffer[1] = addr + 0x1000;
   10232:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
	t->qtd.buffer[0] = addr;
   10236:	f8c2 b00c 	str.w	fp, [r2, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   1023a:	6113      	str	r3, [r2, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   1023c:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   10240:	6153      	str	r3, [r2, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   10242:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   10246:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   1024a:	6193      	str	r3, [r2, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   1024c:	61d4      	str	r4, [r2, #28]
	bool return_value = queue_Transfer(pipe, transfer);
   1024e:	f7ff fe7f 	bl	ff50 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)>
	if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   10252:	f1b8 0f00 	cmp.w	r8, #0
   10256:	d005      	beq.n	10264 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xf8>
   10258:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1025c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10260:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   10264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				next = (Transfer_t *)transfer->qtd.next;
   10268:	462c      	mov	r4, r5
   1026a:	682d      	ldr	r5, [r5, #0]
				free_Transfer(transfer);
   1026c:	4620      	mov	r0, r4
   1026e:	f004 fe45 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
				if (transfer == data) break;
   10272:	4554      	cmp	r4, sl
   10274:	d1f8      	bne.n	10268 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xfc>
			if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   10276:	f1b8 0f00 	cmp.w	r8, #0
   1027a:	d007      	beq.n	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x120>
   1027c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   10280:	f44f 3280 	mov.w	r2, #65536	; 0x10000
            return false;
   10284:	2000      	movs	r0, #0
			if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   10286:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   1028a:	e7eb      	b.n	10264 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xf8>
		return false;
   1028c:	2000      	movs	r0, #0
}
   1028e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   10292:	f1b8 0f00 	cmp.w	r8, #0
   10296:	d0f9      	beq.n	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x120>
   10298:	f8c4 a10c 	str.w	sl, [r4, #268]	; 0x10c
   1029c:	e7e2      	b.n	10264 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xf8>
   1029e:	bf00      	nop
   102a0:	40000080 	.word	0x40000080
   102a4:	fffff000 	.word	0xfffff000

000102a8 <USBHost::followup_Error()>:
{
   102a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Transfer_t *p = async_followup_first;
   102ac:	4d53      	ldr	r5, [pc, #332]	; (103fc <USBHost::followup_Error()+0x154>)
{
   102ae:	b083      	sub	sp, #12
	Transfer_t *p = async_followup_first;
   102b0:	682f      	ldr	r7, [r5, #0]
	while (p) {
   102b2:	b137      	cbz	r7, 102c2 <USBHost::followup_Error()+0x1a>
					haltedpipe->qh.current = 0;
   102b4:	2600      	movs	r6, #0
	if (!(transfer->qtd.token & 0x80)) {
   102b6:	68bb      	ldr	r3, [r7, #8]
   102b8:	061a      	lsls	r2, r3, #24
   102ba:	d505      	bpl.n	102c8 <USBHost::followup_Error()+0x20>
			p = p->next_followup;
   102bc:	6a3f      	ldr	r7, [r7, #32]
	while (p) {
   102be:	2f00      	cmp	r7, #0
   102c0:	d1f9      	bne.n	102b6 <USBHost::followup_Error()+0xe>
}
   102c2:	b003      	add	sp, #12
   102c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (transfer->qtd.token & 0x8000) {
   102c8:	68bb      	ldr	r3, [r7, #8]
   102ca:	041b      	lsls	r3, r3, #16
   102cc:	d504      	bpl.n	102d8 <USBHost::followup_Error()+0x30>
			if (transfer->pipe->callback_function) {
   102ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   102d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   102d2:	b10b      	cbz	r3, 102d8 <USBHost::followup_Error()+0x30>
				(*(transfer->pipe->callback_function))(transfer);
   102d4:	4638      	mov	r0, r7
   102d6:	4798      	blx	r3
			Transfer_t *next = p->next_followup;
   102d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
	if (prev) {
   102dc:	b163      	cbz	r3, 102f8 <USBHost::followup_Error()+0x50>
		prev->next_followup = next;
   102de:	621a      	str	r2, [r3, #32]
	if (next) {
   102e0:	b16a      	cbz	r2, 102fe <USBHost::followup_Error()+0x56>
			if (p->qtd.token & 0x40) {
   102e2:	68b9      	ldr	r1, [r7, #8]
		next->prev_followup = prev;
   102e4:	6253      	str	r3, [r2, #36]	; 0x24
			if (p->qtd.token & 0x40) {
   102e6:	064c      	lsls	r4, r1, #25
   102e8:	d445      	bmi.n	10376 <USBHost::followup_Error()+0xce>
				free_Transfer(p);
   102ea:	4638      	mov	r0, r7
			Transfer_t *next = p->next_followup;
   102ec:	4617      	mov	r7, r2
				free_Transfer(p);
   102ee:	f004 fe05 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
	while (p) {
   102f2:	2f00      	cmp	r7, #0
   102f4:	d1df      	bne.n	102b6 <USBHost::followup_Error()+0xe>
   102f6:	e7e4      	b.n	102c2 <USBHost::followup_Error()+0x1a>
		async_followup_first = next;
   102f8:	602a      	str	r2, [r5, #0]
	if (next) {
   102fa:	2a00      	cmp	r2, #0
   102fc:	d1f1      	bne.n	102e2 <USBHost::followup_Error()+0x3a>
		async_followup_last = prev;
   102fe:	4940      	ldr	r1, [pc, #256]	; (10400 <USBHost::followup_Error()+0x158>)
   10300:	600b      	str	r3, [r1, #0]
			if (p->qtd.token & 0x40) {
   10302:	68bb      	ldr	r3, [r7, #8]
   10304:	0658      	lsls	r0, r3, #25
   10306:	d5f0      	bpl.n	102ea <USBHost::followup_Error()+0x42>
				Pipe_t *haltedpipe = p->pipe;
   10308:	6abc      	ldr	r4, [r7, #40]	; 0x28
				free_Transfer(p);
   1030a:	4638      	mov	r0, r7
   1030c:	9201      	str	r2, [sp, #4]
   1030e:	f004 fdf5 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
				p = (Transfer_t *)(haltedpipe->qh.next & ~0x1F);
   10312:	6923      	ldr	r3, [r4, #16]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   10314:	9a01      	ldr	r2, [sp, #4]
   10316:	f033 031f 	bics.w	r3, r3, #31
   1031a:	d0d2      	beq.n	102c2 <USBHost::followup_Error()+0x1a>
			Transfer_t *next = p->next_followup;
   1031c:	4617      	mov	r7, r2
				Transfer_t *first = NULL;
   1031e:	4693      	mov	fp, r2
   10320:	e005      	b.n	1032e <USBHost::followup_Error()+0x86>
					print(", token=", (uint32_t)p->qtd.token, HEX);
   10322:	689a      	ldr	r2, [r3, #8]
					println(", next=", (uint32_t)p->qtd.next, HEX);
   10324:	681a      	ldr	r2, [r3, #0]
					p = (Transfer_t *)(p->qtd.next & ~0x1F);
   10326:	681b      	ldr	r3, [r3, #0]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   10328:	f033 031f 	bics.w	r3, r3, #31
   1032c:	d005      	beq.n	1033a <USBHost::followup_Error()+0x92>
   1032e:	689a      	ldr	r2, [r3, #8]
   10330:	0651      	lsls	r1, r2, #25
   10332:	d5f6      	bpl.n	10322 <USBHost::followup_Error()+0x7a>
					haltedpipe->qh.next = (uint32_t)p;
   10334:	6123      	str	r3, [r4, #16]
					haltedpipe->qh.current = 0;
   10336:	60e6      	str	r6, [r4, #12]
					haltedpipe->qh.token = 0;
   10338:	61a6      	str	r6, [r4, #24]
				while (p) {
   1033a:	f1bb 0f00 	cmp.w	fp, #0
   1033e:	d0be      	beq.n	102be <USBHost::followup_Error()+0x16>
					uint32_t token = p->qtd.token;
   10340:	f8db 3008 	ldr.w	r3, [fp, #8]
					if (token & 0x8000 && haltedpipe->callback_function) {
   10344:	041a      	lsls	r2, r3, #16
   10346:	d50a      	bpl.n	1035e <USBHost::followup_Error()+0xb6>
   10348:	6be2      	ldr	r2, [r4, #60]	; 0x3c
						p->qtd.token = token | 0x40;
   1034a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
						(*(p->pipe->callback_function))(p);
   1034e:	4658      	mov	r0, fp
					if (token & 0x8000 && haltedpipe->callback_function) {
   10350:	b12a      	cbz	r2, 1035e <USBHost::followup_Error()+0xb6>
						(*(p->pipe->callback_function))(p);
   10352:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						p->qtd.token = token | 0x40;
   10356:	f8cb 3008 	str.w	r3, [fp, #8]
						(*(p->pipe->callback_function))(p);
   1035a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1035c:	4798      	blx	r3
					Transfer_t *next2 = p->next_followup;
   1035e:	f8db a020 	ldr.w	sl, [fp, #32]
					free_Transfer(p);
   10362:	4658      	mov	r0, fp
   10364:	f004 fdca 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
				while (p) {
   10368:	46d3      	mov	fp, sl
   1036a:	f1ba 0f00 	cmp.w	sl, #0
   1036e:	d1e7      	bne.n	10340 <USBHost::followup_Error()+0x98>
	while (p) {
   10370:	2f00      	cmp	r7, #0
   10372:	d1a0      	bne.n	102b6 <USBHost::followup_Error()+0xe>
   10374:	e7a5      	b.n	102c2 <USBHost::followup_Error()+0x1a>
				free_Transfer(p);
   10376:	4638      	mov	r0, r7
				Pipe_t *haltedpipe = p->pipe;
   10378:	6abc      	ldr	r4, [r7, #40]	; 0x28
   1037a:	9201      	str	r2, [sp, #4]
				free_Transfer(p);
   1037c:	f004 fdbe 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
   10380:	2000      	movs	r0, #0
   10382:	9a01      	ldr	r2, [sp, #4]
   10384:	4684      	mov	ip, r0
   10386:	4617      	mov	r7, r2
   10388:	4683      	mov	fp, r0
					Transfer_t *next2 = p->next_followup;
   1038a:	4611      	mov	r1, r2
   1038c:	6a12      	ldr	r2, [r2, #32]
					if (p->pipe == haltedpipe) {
   1038e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   10390:	42a3      	cmp	r3, r4
   10392:	d00a      	beq.n	103aa <USBHost::followup_Error()+0x102>
				while (p) {
   10394:	2a00      	cmp	r2, #0
   10396:	d1f8      	bne.n	1038a <USBHost::followup_Error()+0xe2>
   10398:	b9c0      	cbnz	r0, 103cc <USBHost::followup_Error()+0x124>
   1039a:	f1bc 0f00 	cmp.w	ip, #0
   1039e:	d125      	bne.n	103ec <USBHost::followup_Error()+0x144>
				p = (Transfer_t *)(haltedpipe->qh.next & ~0x1F);
   103a0:	6923      	ldr	r3, [r4, #16]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   103a2:	f033 031f 	bics.w	r3, r3, #31
   103a6:	d1c2      	bne.n	1032e <USBHost::followup_Error()+0x86>
   103a8:	e7c7      	b.n	1033a <USBHost::followup_Error()+0x92>
	Transfer_t *prev = transfer->prev_followup;
   103aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	if (prev) {
   103ac:	b1d3      	cbz	r3, 103e4 <USBHost::followup_Error()+0x13c>
		prev->next_followup = next;
   103ae:	621a      	str	r2, [r3, #32]
	if (next) {
   103b0:	b1aa      	cbz	r2, 103de <USBHost::followup_Error()+0x136>
		next->prev_followup = prev;
   103b2:	6253      	str	r3, [r2, #36]	; 0x24
						if (first == NULL) {
   103b4:	f1bb 0f00 	cmp.w	fp, #0
   103b8:	d00f      	beq.n	103da <USBHost::followup_Error()+0x132>
							last->next_followup = p;
   103ba:	f8cb 1020 	str.w	r1, [fp, #32]
					Transfer_t *next2 = p->next_followup;
   103be:	428f      	cmp	r7, r1
   103c0:	bf08      	it	eq
   103c2:	4617      	moveq	r7, r2
						p->next_followup = NULL;
   103c4:	620e      	str	r6, [r1, #32]
				while (p) {
   103c6:	2a00      	cmp	r2, #0
   103c8:	d1df      	bne.n	1038a <USBHost::followup_Error()+0xe2>
   103ca:	e7e5      	b.n	10398 <USBHost::followup_Error()+0xf0>
   103cc:	4b0c      	ldr	r3, [pc, #48]	; (10400 <USBHost::followup_Error()+0x158>)
   103ce:	f8c3 8000 	str.w	r8, [r3]
   103d2:	f1bc 0f00 	cmp.w	ip, #0
   103d6:	d0e3      	beq.n	103a0 <USBHost::followup_Error()+0xf8>
   103d8:	e008      	b.n	103ec <USBHost::followup_Error()+0x144>
   103da:	468b      	mov	fp, r1
   103dc:	e7ef      	b.n	103be <USBHost::followup_Error()+0x116>
	Transfer_t *prev = transfer->prev_followup;
   103de:	4698      	mov	r8, r3
   103e0:	2001      	movs	r0, #1
   103e2:	e7e7      	b.n	103b4 <USBHost::followup_Error()+0x10c>
					Transfer_t *next2 = p->next_followup;
   103e4:	4691      	mov	r9, r2
   103e6:	f04f 0c01 	mov.w	ip, #1
   103ea:	e7e1      	b.n	103b0 <USBHost::followup_Error()+0x108>
				p = (Transfer_t *)(haltedpipe->qh.next & ~0x1F);
   103ec:	6923      	ldr	r3, [r4, #16]
   103ee:	f8c5 9000 	str.w	r9, [r5]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   103f2:	f033 031f 	bics.w	r3, r3, #31
   103f6:	d19a      	bne.n	1032e <USBHost::followup_Error()+0x86>
   103f8:	e79f      	b.n	1033a <USBHost::followup_Error()+0x92>
   103fa:	bf00      	nop
   103fc:	2000d850 	.word	0x2000d850
   10400:	2000d84c 	.word	0x2000d84c

00010404 <USBHost::isr()>:
	uint32_t stat = USBHS_USBSTS;
   10404:	4b88      	ldr	r3, [pc, #544]	; (10628 <USBHost::isr()+0x224>)
{
   10406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t stat = USBHS_USBSTS;
   1040a:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
	if (stat & USBHS_USBSTS_UAI) { // completed qTD(s) from the async schedule
   1040e:	0377      	lsls	r7, r6, #13
	USBHS_USBSTS = stat; // clear pending interrupts
   10410:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
	if (stat & USBHS_USBSTS_UAI) { // completed qTD(s) from the async schedule
   10414:	d50a      	bpl.n	1042c <USBHost::isr()+0x28>
		Transfer_t *p = async_followup_first;
   10416:	4f85      	ldr	r7, [pc, #532]	; (1062c <USBHost::isr()+0x228>)
   10418:	683c      	ldr	r4, [r7, #0]
		while (p) {
   1041a:	b13c      	cbz	r4, 1042c <USBHost::isr()+0x28>
		async_followup_last = prev;
   1041c:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1064c <USBHost::isr()+0x248>
	if (!(transfer->qtd.token & 0x80)) {
   10420:	68a3      	ldr	r3, [r4, #8]
   10422:	0618      	lsls	r0, r3, #24
   10424:	d57a      	bpl.n	1051c <USBHost::isr()+0x118>
				p = p->next_followup;
   10426:	6a24      	ldr	r4, [r4, #32]
		while (p) {
   10428:	2c00      	cmp	r4, #0
   1042a:	d1f9      	bne.n	10420 <USBHost::isr()+0x1c>
	if (stat & USBHS_USBSTS_UPI) { // completed qTD(s) from the periodic schedule
   1042c:	0334      	lsls	r4, r6, #12
   1042e:	d50b      	bpl.n	10448 <USBHost::isr()+0x44>
		Transfer_t *p = periodic_followup_first;
   10430:	4f7f      	ldr	r7, [pc, #508]	; (10630 <USBHost::isr()+0x22c>)
   10432:	683c      	ldr	r4, [r7, #0]
		while (p) {
   10434:	b144      	cbz	r4, 10448 <USBHost::isr()+0x44>
		periodic_followup_first = next;
	}
	if (next) {
		next->prev_followup = prev;
	} else {
		periodic_followup_last = prev;
   10436:	f8df 8218 	ldr.w	r8, [pc, #536]	; 10650 <USBHost::isr()+0x24c>
	if (!(transfer->qtd.token & 0x80)) {
   1043a:	68a3      	ldr	r3, [r4, #8]
   1043c:	061b      	lsls	r3, r3, #24
   1043e:	f140 8083 	bpl.w	10548 <USBHost::isr()+0x144>
				p = p->next_followup;
   10442:	6a24      	ldr	r4, [r4, #32]
		while (p) {
   10444:	2c00      	cmp	r4, #0
   10446:	d1f8      	bne.n	1043a <USBHost::isr()+0x36>
	if (stat & USBHS_USBSTS_UEI) {
   10448:	07b2      	lsls	r2, r6, #30
   1044a:	f100 809e 	bmi.w	1058a <USBHost::isr()+0x186>
	if (stat & USBHS_USBSTS_PCI) { // port change detected
   1044e:	0771      	lsls	r1, r6, #29
   10450:	d50f      	bpl.n	10472 <USBHost::isr()+0x6e>
		const uint32_t portstat = USBHS_PORTSC1;
   10452:	4b75      	ldr	r3, [pc, #468]	; (10628 <USBHost::isr()+0x224>)
   10454:	f8d3 4184 	ldr.w	r4, [r3, #388]	; 0x184
		USBHS_PORTSC1 = portstat | (USBHS_PORTSC_OCC|USBHS_PORTSC_PEC|USBHS_PORTSC_CSC);
   10458:	f044 022a 	orr.w	r2, r4, #42	; 0x2a
   1045c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		if (portstat & USBHS_PORTSC_CSC) {
   10460:	07a2      	lsls	r2, r4, #30
   10462:	d444      	bmi.n	104ee <USBHost::isr()+0xea>
		if (portstat & USBHS_PORTSC_PEC) {
   10464:	0727      	lsls	r7, r4, #28
   10466:	d404      	bmi.n	10472 <USBHost::isr()+0x6e>
		} else if (port_state == PORT_STATE_RESET && portstat & USBHS_PORTSC_PE) {
   10468:	4b72      	ldr	r3, [pc, #456]	; (10634 <USBHost::isr()+0x230>)
   1046a:	781a      	ldrb	r2, [r3, #0]
   1046c:	2a02      	cmp	r2, #2
   1046e:	f000 808f 	beq.w	10590 <USBHost::isr()+0x18c>
	if (stat & USBHS_USBSTS_TI0) { // timer 0 - used for built-in port events
   10472:	f006 7380 	and.w	r3, r6, #16777216	; 0x1000000
   10476:	b13b      	cbz	r3, 10488 <USBHost::isr()+0x84>
		if (port_state == PORT_STATE_DEBOUNCE) {
   10478:	4b6e      	ldr	r3, [pc, #440]	; (10634 <USBHost::isr()+0x230>)
   1047a:	781a      	ldrb	r2, [r3, #0]
   1047c:	2a01      	cmp	r2, #1
   1047e:	f000 80b9 	beq.w	105f4 <USBHost::isr()+0x1f0>
		} else if (port_state == PORT_STATE_RECOVERY) {
   10482:	2a03      	cmp	r2, #3
   10484:	f000 809b 	beq.w	105be <USBHost::isr()+0x1ba>
	if (stat & USBHS_USBSTS_TI1) { // timer 1 - used for USBDriverTimer
   10488:	01b1      	lsls	r1, r6, #6
   1048a:	d52e      	bpl.n	104ea <USBHost::isr()+0xe6>
		USBDriverTimer *timer = active_timers;
   1048c:	4f6a      	ldr	r7, [pc, #424]	; (10638 <USBHost::isr()+0x234>)
   1048e:	683c      	ldr	r4, [r7, #0]
		while (timer) {
   10490:	2c00      	cmp	r4, #0
   10492:	d02a      	beq.n	104ea <USBHost::isr()+0xe6>
			USBDriverTimer *next = timer->next;
   10494:	6963      	ldr	r3, [r4, #20]
			active_timers = next;
   10496:	2600      	movs	r6, #0
   10498:	4621      	mov	r1, r4
			timer->next = NULL;
   1049a:	4630      	mov	r0, r6
			active_timers = next;
   1049c:	603b      	str	r3, [r7, #0]
			if (list == NULL) {
   1049e:	e006      	b.n	104ae <USBHost::isr()+0xaa>
					next->next->usec += next->usec;
   104a0:	692e      	ldr	r6, [r5, #16]
   104a2:	4416      	add	r6, r2
   104a4:	612e      	str	r6, [r5, #16]
				last->next = timer;
   104a6:	614b      	str	r3, [r1, #20]
   104a8:	2601      	movs	r6, #1
   104aa:	4619      	mov	r1, r3
   104ac:	462b      	mov	r3, r5
			timer->next = NULL;
   104ae:	6148      	str	r0, [r1, #20]
			if (!next) break;
   104b0:	2b00      	cmp	r3, #0
   104b2:	f000 80b4 	beq.w	1061e <USBHost::isr()+0x21a>
			if (next->usec >= 5) { // TODO: is 5us a safe minimum?
   104b6:	691a      	ldr	r2, [r3, #16]
			next->prev = NULL;
   104b8:	6198      	str	r0, [r3, #24]
			if (next->usec >= 5) { // TODO: is 5us a safe minimum?
   104ba:	2a04      	cmp	r2, #4
   104bc:	f200 80a4 	bhi.w	10608 <USBHost::isr()+0x204>
				if (next->usec > 0 && next->next != NULL) {
   104c0:	695d      	ldr	r5, [r3, #20]
   104c2:	2a00      	cmp	r2, #0
   104c4:	d0ef      	beq.n	104a6 <USBHost::isr()+0xa2>
   104c6:	2d00      	cmp	r5, #0
   104c8:	d1ea      	bne.n	104a0 <USBHost::isr()+0x9c>
				last->next = timer;
   104ca:	614b      	str	r3, [r1, #20]
			timer->next = NULL;
   104cc:	615d      	str	r5, [r3, #20]
			if (!next) break;
   104ce:	603d      	str	r5, [r7, #0]
		while (list) {
   104d0:	4e5a      	ldr	r6, [pc, #360]	; (1063c <USBHost::isr()+0x238>)
			list->prev = NULL;
   104d2:	2500      	movs	r5, #0
			USBDriverTimer *next = list->next;
   104d4:	4621      	mov	r1, r4
   104d6:	6964      	ldr	r4, [r4, #20]
			list->driver->timer_event(list);
   104d8:	68c8      	ldr	r0, [r1, #12]
   104da:	6803      	ldr	r3, [r0, #0]
   104dc:	689b      	ldr	r3, [r3, #8]
   104de:	42b3      	cmp	r3, r6
			list->next = NULL;
   104e0:	e9c1 5505 	strd	r5, r5, [r1, #20]
			list->driver->timer_event(list);
   104e4:	d116      	bne.n	10514 <USBHost::isr()+0x110>
		while (list) {
   104e6:	2c00      	cmp	r4, #0
   104e8:	d1f4      	bne.n	104d4 <USBHost::isr()+0xd0>
}
   104ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (portstat & USBHS_PORTSC_CCS) {
   104ee:	f014 0701 	ands.w	r7, r4, #1
				  || port_state == PORT_STATE_DEBOUNCE) {
   104f2:	4a50      	ldr	r2, [pc, #320]	; (10634 <USBHost::isr()+0x230>)
			if (portstat & USBHS_PORTSC_CCS) {
   104f4:	d071      	beq.n	105da <USBHost::isr()+0x1d6>
				if (port_state == PORT_STATE_DISCONNECTED
   104f6:	7811      	ldrb	r1, [r2, #0]
   104f8:	2901      	cmp	r1, #1
   104fa:	d8b3      	bhi.n	10464 <USBHost::isr()+0x60>
					port_state = PORT_STATE_DEBOUNCE;
   104fc:	2001      	movs	r0, #1
					USBHS_GPTIMER0LD = 100000; // microseconds
   104fe:	4950      	ldr	r1, [pc, #320]	; (10640 <USBHost::isr()+0x23c>)
					stat &= ~USBHS_USBSTS_TI0;
   10500:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
					port_state = PORT_STATE_DEBOUNCE;
   10504:	7010      	strb	r0, [r2, #0]
					USBHS_GPTIMER0CTL =
   10506:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
					USBHS_GPTIMER0LD = 100000; // microseconds
   1050a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
					USBHS_GPTIMER0CTL =
   1050e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (portstat & USBHS_PORTSC_PEC) {
   10512:	e7b9      	b.n	10488 <USBHost::isr()+0x84>
			list->driver->timer_event(list);
   10514:	4798      	blx	r3
		while (list) {
   10516:	2c00      	cmp	r4, #0
   10518:	d1dc      	bne.n	104d4 <USBHost::isr()+0xd0>
   1051a:	e7e6      	b.n	104ea <USBHost::isr()+0xe6>
		if (transfer->qtd.token & 0x8000) {
   1051c:	68a3      	ldr	r3, [r4, #8]
   1051e:	0419      	lsls	r1, r3, #16
   10520:	d504      	bpl.n	1052c <USBHost::isr()+0x128>
			if (transfer->pipe->callback_function) {
   10522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10526:	b10b      	cbz	r3, 1052c <USBHost::isr()+0x128>
				(*(transfer->pipe->callback_function))(transfer);
   10528:	4620      	mov	r0, r4
   1052a:	4798      	blx	r3
				Transfer_t *next = p->next_followup;
   1052c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
	if (prev) {
   10530:	b34a      	cbz	r2, 10586 <USBHost::isr()+0x182>
		prev->next_followup = next;
   10532:	6213      	str	r3, [r2, #32]
	if (next) {
   10534:	b323      	cbz	r3, 10580 <USBHost::isr()+0x17c>
		next->prev_followup = prev;
   10536:	625a      	str	r2, [r3, #36]	; 0x24
				free_Transfer(p);
   10538:	4620      	mov	r0, r4
				Transfer_t *next = p->next_followup;
   1053a:	461c      	mov	r4, r3
				free_Transfer(p);
   1053c:	f004 fcde 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
		while (p) {
   10540:	2c00      	cmp	r4, #0
   10542:	f47f af6d 	bne.w	10420 <USBHost::isr()+0x1c>
   10546:	e771      	b.n	1042c <USBHost::isr()+0x28>
		if (transfer->qtd.token & 0x8000) {
   10548:	68a3      	ldr	r3, [r4, #8]
   1054a:	0418      	lsls	r0, r3, #16
   1054c:	d504      	bpl.n	10558 <USBHost::isr()+0x154>
			if (transfer->pipe->callback_function) {
   1054e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10552:	b10b      	cbz	r3, 10558 <USBHost::isr()+0x154>
				(*(transfer->pipe->callback_function))(transfer);
   10554:	4620      	mov	r0, r4
   10556:	4798      	blx	r3
				Transfer_t *next = p->next_followup;
   10558:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
	if (prev) {
   1055c:	b152      	cbz	r2, 10574 <USBHost::isr()+0x170>
		prev->next_followup = next;
   1055e:	6213      	str	r3, [r2, #32]
	if (next) {
   10560:	b15b      	cbz	r3, 1057a <USBHost::isr()+0x176>
		next->prev_followup = prev;
   10562:	625a      	str	r2, [r3, #36]	; 0x24
				free_Transfer(p);
   10564:	4620      	mov	r0, r4
				Transfer_t *next = p->next_followup;
   10566:	461c      	mov	r4, r3
				free_Transfer(p);
   10568:	f004 fcc8 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
		while (p) {
   1056c:	2c00      	cmp	r4, #0
   1056e:	f47f af64 	bne.w	1043a <USBHost::isr()+0x36>
   10572:	e769      	b.n	10448 <USBHost::isr()+0x44>
		periodic_followup_first = next;
   10574:	603b      	str	r3, [r7, #0]
	if (next) {
   10576:	2b00      	cmp	r3, #0
   10578:	d1f3      	bne.n	10562 <USBHost::isr()+0x15e>
		periodic_followup_last = prev;
   1057a:	f8c8 2000 	str.w	r2, [r8]
   1057e:	e7f1      	b.n	10564 <USBHost::isr()+0x160>
		async_followup_last = prev;
   10580:	f8c8 2000 	str.w	r2, [r8]
   10584:	e7d8      	b.n	10538 <USBHost::isr()+0x134>
		async_followup_first = next;
   10586:	603b      	str	r3, [r7, #0]
   10588:	e7d4      	b.n	10534 <USBHost::isr()+0x130>
		followup_Error();
   1058a:	f7ff fe8d 	bl	102a8 <USBHost::followup_Error()>
   1058e:	e75e      	b.n	1044e <USBHost::isr()+0x4a>
		} else if (port_state == PORT_STATE_RESET && portstat & USBHS_PORTSC_PE) {
   10590:	0764      	lsls	r4, r4, #29
   10592:	f57f af79 	bpl.w	10488 <USBHost::isr()+0x84>
			port_state = PORT_STATE_RECOVERY;
   10596:	2003      	movs	r0, #3
			USBHS_GPTIMER0LD = 10000; // microseconds
   10598:	4923      	ldr	r1, [pc, #140]	; (10628 <USBHost::isr()+0x224>)
			port_state = PORT_STATE_RECOVERY;
   1059a:	7018      	strb	r0, [r3, #0]
			USBHS_GPTIMER0LD = 10000; // microseconds
   1059c:	f242 7010 	movw	r0, #10000	; 0x2710
   105a0:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
			USBHS_GPTIMER0CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
   105a4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
   105a8:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
			if (USBHS_PORTSC1 & USBHS_PORTSC_HSP) {
   105ac:	f8d1 1184 	ldr.w	r1, [r1, #388]	; 0x184
   105b0:	0588      	lsls	r0, r1, #22
   105b2:	d501      	bpl.n	105b8 <USBHost::isr()+0x1b4>
				USBPHY_CTRL_SET = USBPHY_CTRL_ENHOSTDISCONDETECT;
   105b4:	4923      	ldr	r1, [pc, #140]	; (10644 <USBHost::isr()+0x240>)
   105b6:	634a      	str	r2, [r1, #52]	; 0x34
	if (stat & USBHS_USBSTS_TI0) { // timer 0 - used for built-in port events
   105b8:	01f2      	lsls	r2, r6, #7
   105ba:	f57f af65 	bpl.w	10488 <USBHost::isr()+0x84>
			port_state = PORT_STATE_ACTIVE;
   105be:	2004      	movs	r0, #4
			uint32_t speed = (USBHS_PORTSC1 >> 26) & 3;
   105c0:	4919      	ldr	r1, [pc, #100]	; (10628 <USBHost::isr()+0x224>)
			rootdev = new_Device(speed, 0, 0);
   105c2:	2200      	movs	r2, #0
			port_state = PORT_STATE_ACTIVE;
   105c4:	7018      	strb	r0, [r3, #0]
			uint32_t speed = (USBHS_PORTSC1 >> 26) & 3;
   105c6:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
			rootdev = new_Device(speed, 0, 0);
   105ca:	4611      	mov	r1, r2
   105cc:	f3c0 6081 	ubfx	r0, r0, #26, #2
   105d0:	f000 fb7e 	bl	10cd0 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)>
   105d4:	4b1c      	ldr	r3, [pc, #112]	; (10648 <USBHost::isr()+0x244>)
   105d6:	6018      	str	r0, [r3, #0]
   105d8:	e756      	b.n	10488 <USBHost::isr()+0x84>
				port_state = PORT_STATE_DISCONNECTED;
   105da:	7017      	strb	r7, [r2, #0]
				USBPHY_CTRL_CLR = USBPHY_CTRL_ENHOSTDISCONDETECT;
   105dc:	2202      	movs	r2, #2
   105de:	4b19      	ldr	r3, [pc, #100]	; (10644 <USBHost::isr()+0x240>)
				disconnect_Device(rootdev);
   105e0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 10648 <USBHost::isr()+0x244>
				USBPHY_CTRL_CLR = USBPHY_CTRL_ENHOSTDISCONDETECT;
   105e4:	639a      	str	r2, [r3, #56]	; 0x38
				disconnect_Device(rootdev);
   105e6:	f8d8 0000 	ldr.w	r0, [r8]
   105ea:	f000 fddb 	bl	111a4 <USBHost::disconnect_Device(Device_struct*)>
				rootdev = NULL;
   105ee:	f8c8 7000 	str.w	r7, [r8]
   105f2:	e737      	b.n	10464 <USBHost::isr()+0x60>
			USBHS_PORTSC1 |= USBHS_PORTSC_PR; // begin reset sequence
   105f4:	4a0c      	ldr	r2, [pc, #48]	; (10628 <USBHost::isr()+0x224>)
			port_state = PORT_STATE_RESET;
   105f6:	2102      	movs	r1, #2
   105f8:	7019      	strb	r1, [r3, #0]
			USBHS_PORTSC1 |= USBHS_PORTSC_PR; // begin reset sequence
   105fa:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
   105fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10602:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
    static void println_(const char *s) {}
   10606:	e73f      	b.n	10488 <USBHost::isr()+0x84>
   10608:	b106      	cbz	r6, 1060c <USBHost::isr()+0x208>
   1060a:	603d      	str	r5, [r7, #0]
				USBHS_GPTIMER1LD = next->usec - 1;
   1060c:	4b06      	ldr	r3, [pc, #24]	; (10628 <USBHost::isr()+0x224>)
   1060e:	3a01      	subs	r2, #1
				USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
   10610:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
				USBHS_GPTIMER1LD = next->usec - 1;
   10614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
   10618:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
				break;
   1061c:	e758      	b.n	104d0 <USBHost::isr()+0xcc>
   1061e:	2e00      	cmp	r6, #0
   10620:	f43f af56 	beq.w	104d0 <USBHost::isr()+0xcc>
   10624:	e753      	b.n	104ce <USBHost::isr()+0xca>
   10626:	bf00      	nop
   10628:	402e0200 	.word	0x402e0200
   1062c:	2000d850 	.word	0x2000d850
   10630:	2000d858 	.word	0x2000d858
   10634:	2000ec26 	.word	0x2000ec26
   10638:	2000d710 	.word	0x2000d710
   1063c:	0000fb45 	.word	0x0000fb45
   10640:	000186a0 	.word	0x000186a0
   10644:	400da000 	.word	0x400da000
   10648:	2000d860 	.word	0x2000d860
   1064c:	2000d84c 	.word	0x2000d84c
   10650:	2000d854 	.word	0x2000d854

00010654 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)>:
//
bool USBHost::allocate_interrupt_pipe_bandwidth(Pipe_t *pipe, uint32_t maxlen, uint32_t interval)
{
	println("allocate_interrupt_pipe_bandwidth");
	if (interval == 0) interval = 1;
	maxlen = (maxlen * 76459) >> 16; // worst case bit stuffing
   10654:	4b8d      	ldr	r3, [pc, #564]	; (1088c <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x238>)
   10656:	2a01      	cmp	r2, #1
   10658:	fb03 f101 	mul.w	r1, r3, r1
	if (pipe->device->speed == 2) {
   1065c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
   1065e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10662:	b085      	sub	sp, #20
	if (pipe->device->speed == 2) {
   10664:	7d1b      	ldrb	r3, [r3, #20]
	maxlen = (maxlen * 76459) >> 16; // worst case bit stuffing
   10666:	ea4f 4111 	mov.w	r1, r1, lsr #16
{
   1066a:	9002      	str	r0, [sp, #8]
   1066c:	4610      	mov	r0, r2
   1066e:	bf38      	it	cc
   10670:	2001      	movcc	r0, #1
	if (pipe->device->speed == 2) {
   10672:	2b02      	cmp	r3, #2
   10674:	f000 8094 	beq.w	107a0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x14c>
   10678:	2305      	movs	r3, #5
	for (uint32_t pow2num=1; pow2num < maxnum; pow2num <<= 1) {
   1067a:	f04f 0a01 	mov.w	sl, #1
		if (n <= (pow2num | (pow2num >> 1))) return pow2num;
   1067e:	ea4a 025a 	orr.w	r2, sl, sl, lsr #1
   10682:	4282      	cmp	r2, r0
   10684:	f080 80e4 	bcs.w	10850 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1fc>
	for (uint32_t pow2num=1; pow2num < maxnum; pow2num <<= 1) {
   10688:	3b01      	subs	r3, #1
   1068a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   1068e:	d1f6      	bne.n	1067e <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x2a>
   10690:	f04f 0a20 	mov.w	sl, #32
	return maxnum;
   10694:	f8cd a00c 	str.w	sl, [sp, #12]
	} else {
		// full speed 12 Mbit/sec or low speed 1.5 Mbit/sec
		interval = round_to_power_of_two(interval, PERIODIC_LIST_SIZE);
		pipe->periodic_interval = interval;
		uint32_t stime, ctime;
		if (pipe->direction == 0) {
   10698:	9a02      	ldr	r2, [sp, #8]
		pipe->periodic_interval = interval;
   1069a:	9803      	ldr	r0, [sp, #12]
		if (pipe->direction == 0) {
   1069c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
		pipe->periodic_interval = interval;
   106a0:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
		if (pipe->direction == 0) {
   106a4:	2b00      	cmp	r3, #0
   106a6:	f040 80cf 	bne.w	10848 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1f4>
			// for OUT direction, SSPLIT will carry the data payload
			// TODO: how much time to SSPLIT & CSPLIT actually take?
			// they're not documented in 5.7 or 5.11.3.
			stime = (100 + 32 + maxlen) >> 5;
   106aa:	3184      	adds	r1, #132	; 0x84
			ctime = (55 + 32) >> 5;
   106ac:	2402      	movs	r4, #2
			stime = (100 + 32 + maxlen) >> 5;
   106ae:	094f      	lsrs	r7, r1, #5
		// TODO: even if Multi-TT, do we need to worry about packing
		// too many into the same uframe?
		uint32_t best_shift = 0;
		uint32_t best_offset = 0xFFFFFFFF;
		uint32_t best_bandwidth = 0xFFFFFFFF;
		for (uint32_t offset=0; offset < interval; offset++) {
   106b0:	2300      	movs	r3, #0
		uint32_t best_bandwidth = 0xFFFFFFFF;
   106b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   106b6:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 10890 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x23c>
		uint32_t best_offset = 0xFFFFFFFF;
   106ba:	46b0      	mov	r8, r6
		uint32_t best_shift = 0;
   106bc:	4699      	mov	r9, r3
		for (uint32_t offset=0; offset < interval; offset++) {
   106be:	9301      	str	r3, [sp, #4]
					uint32_t bw2 = uframe_bandwidth[n+2] + ctime;
					uint32_t bw3 = uframe_bandwidth[n+3] + ctime;
					uint32_t bw4 = uframe_bandwidth[n+4] + ctime;
					max_bandwidth = max4(bw1, bw2, bw3, bw4);
					// remember the best usage found
					if (max_bandwidth < best_bandwidth) {
   106c0:	f8dd e004 	ldr.w	lr, [sp, #4]
				for (uint32_t j=0; j <= 3; j++) { // max 3 without FSTN
   106c4:	eb0b 02ce 	add.w	r2, fp, lr, lsl #3
   106c8:	2500      	movs	r5, #0
					uint32_t bw1 = uframe_bandwidth[n+0] + stime;
   106ca:	f812 0b01 	ldrb.w	r0, [r2], #1
					uint32_t bw2 = uframe_bandwidth[n+2] + ctime;
   106ce:	7851      	ldrb	r1, [r2, #1]
					uint32_t bw1 = uframe_bandwidth[n+0] + stime;
   106d0:	4438      	add	r0, r7
					uint32_t bw3 = uframe_bandwidth[n+3] + ctime;
   106d2:	f892 c002 	ldrb.w	ip, [r2, #2]
					uint32_t bw2 = uframe_bandwidth[n+2] + ctime;
   106d6:	4421      	add	r1, r4
					uint32_t bw4 = uframe_bandwidth[n+4] + ctime;
   106d8:	78d3      	ldrb	r3, [r2, #3]
					uint32_t bw3 = uframe_bandwidth[n+3] + ctime;
   106da:	44a4      	add	ip, r4
	if (n1 > n2) {
   106dc:	4288      	cmp	r0, r1
					uint32_t bw4 = uframe_bandwidth[n+4] + ctime;
   106de:	4423      	add	r3, r4
	if (n1 > n2) {
   106e0:	d954      	bls.n	1078c <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x138>
		if (n1 > n3) {
   106e2:	4560      	cmp	r0, ip
   106e4:	d94e      	bls.n	10784 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x130>
   106e6:	4283      	cmp	r3, r0
   106e8:	bf38      	it	cc
   106ea:	4603      	movcc	r3, r0
					if (max_bandwidth < best_bandwidth) {
   106ec:	42b3      	cmp	r3, r6
   106ee:	d202      	bcs.n	106f6 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0xa2>
   106f0:	46a9      	mov	r9, r5
   106f2:	46f0      	mov	r8, lr
   106f4:	461e      	mov	r6, r3
				for (uint32_t j=0; j <= 3; j++) { // max 3 without FSTN
   106f6:	3501      	adds	r5, #1
   106f8:	2d04      	cmp	r5, #4
   106fa:	d1e6      	bne.n	106ca <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x76>
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   106fc:	44d6      	add	lr, sl
   106fe:	f1be 0f1f 	cmp.w	lr, #31
   10702:	d9df      	bls.n	106c4 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x70>
		for (uint32_t offset=0; offset < interval; offset++) {
   10704:	9b01      	ldr	r3, [sp, #4]
   10706:	3301      	adds	r3, #1
   10708:	459a      	cmp	sl, r3
   1070a:	9301      	str	r3, [sp, #4]
   1070c:	d1d8      	bne.n	106c0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x6c>
		//print(best_offset);
		println(", shift= ", best_shift);
		//println(best_shift);
		// a 125 us micro frame can fit 7500 bytes, or 234 of our 32-byte units
		// fail if the best found needs more than 80% (234 * 0.8) in any uframe
		if (best_bandwidth > 187) return false;
   1070e:	2ebb      	cmp	r6, #187	; 0xbb
   10710:	d842      	bhi.n	10798 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x144>
		// save essential bandwidth specs, for cleanup in delete_Pipe
		pipe->bandwidth_interval = interval;
		pipe->bandwidth_offset = best_offset;
		pipe->bandwidth_shift = best_shift;
		pipe->bandwidth_stime = stime;
   10712:	b2ff      	uxtb	r7, r7
		pipe->bandwidth_ctime = ctime;
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10714:	f1b8 0f1f 	cmp.w	r8, #31
		pipe->bandwidth_ctime = ctime;
   10718:	b2e4      	uxtb	r4, r4
		pipe->bandwidth_offset = best_offset;
   1071a:	fa1f f588 	uxth.w	r5, r8
		pipe->bandwidth_interval = interval;
   1071e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   10722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pipe->bandwidth_shift = best_shift;
   10726:	f8a3 9048 	strh.w	r9, [r3, #72]	; 0x48
		pipe->bandwidth_stime = stime;
   1072a:	f883 704a 	strb.w	r7, [r3, #74]	; 0x4a
		pipe->bandwidth_ctime = ctime;
   1072e:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
		pipe->bandwidth_offset = best_offset;
   10732:	f8a3 5046 	strh.w	r5, [r3, #70]	; 0x46
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10736:	d815      	bhi.n	10764 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x110>
   10738:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
   1073c:	9e01      	ldr	r6, [sp, #4]
   1073e:	445b      	add	r3, fp
   10740:	00f0      	lsls	r0, r6, #3
			uint32_t n = (i << 3) + best_shift;
			uframe_bandwidth[n+0] += stime;
   10742:	7819      	ldrb	r1, [r3, #0]
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10744:	44b0      	add	r8, r6
			uframe_bandwidth[n+2] += ctime;
   10746:	789a      	ldrb	r2, [r3, #2]
			uframe_bandwidth[n+0] += stime;
   10748:	4439      	add	r1, r7
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   1074a:	f1b8 0f1f 	cmp.w	r8, #31
			uframe_bandwidth[n+2] += ctime;
   1074e:	4422      	add	r2, r4
			uframe_bandwidth[n+0] += stime;
   10750:	7019      	strb	r1, [r3, #0]
			uframe_bandwidth[n+2] += ctime;
   10752:	709a      	strb	r2, [r3, #2]
			uframe_bandwidth[n+3] += ctime;
   10754:	78d9      	ldrb	r1, [r3, #3]
			uframe_bandwidth[n+4] += ctime;
   10756:	791a      	ldrb	r2, [r3, #4]
			uframe_bandwidth[n+3] += ctime;
   10758:	4421      	add	r1, r4
			uframe_bandwidth[n+4] += ctime;
   1075a:	4422      	add	r2, r4
			uframe_bandwidth[n+3] += ctime;
   1075c:	70d9      	strb	r1, [r3, #3]
			uframe_bandwidth[n+4] += ctime;
   1075e:	711a      	strb	r2, [r3, #4]
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10760:	4403      	add	r3, r0
   10762:	d9ee      	bls.n	10742 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0xee>
		}
		pipe->start_mask = 0x01 << best_shift;
   10764:	2001      	movs	r0, #1
		pipe->complete_mask = 0x1C << best_shift;
   10766:	231c      	movs	r3, #28
		pipe->periodic_offset = best_offset;
   10768:	9902      	ldr	r1, [sp, #8]
		pipe->start_mask = 0x01 << best_shift;
   1076a:	fa00 f209 	lsl.w	r2, r0, r9
		pipe->complete_mask = 0x1C << best_shift;
   1076e:	fa03 f309 	lsl.w	r3, r3, r9
		pipe->periodic_offset = best_offset;
   10772:	f8a1 5042 	strh.w	r5, [r1, #66]	; 0x42
		pipe->start_mask = 0x01 << best_shift;
   10776:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
		pipe->complete_mask = 0x1C << best_shift;
   1077a:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
	}
	return true;
}
   1077e:	b005      	add	sp, #20
   10780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10784:	4563      	cmp	r3, ip
   10786:	bf38      	it	cc
   10788:	4663      	movcc	r3, ip
   1078a:	e7af      	b.n	106ec <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x98>
		if (n2 > n3) {
   1078c:	4561      	cmp	r1, ip
   1078e:	d9f9      	bls.n	10784 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x130>
   10790:	428b      	cmp	r3, r1
   10792:	bf38      	it	cc
   10794:	460b      	movcc	r3, r1
   10796:	e7a9      	b.n	106ec <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x98>
		if (best_bandwidth > 187) return false;
   10798:	2000      	movs	r0, #0
}
   1079a:	b005      	add	sp, #20
   1079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		interval = 1 << (interval - 1);
   107a0:	280f      	cmp	r0, #15
   107a2:	4603      	mov	r3, r0
   107a4:	f04f 0c01 	mov.w	ip, #1
		uint32_t stime = (55 + 32 + maxlen) >> 5; // time units: 32 bytes or 533 ns
   107a8:	f101 0157 	add.w	r1, r1, #87	; 0x57
		interval = 1 << (interval - 1);
   107ac:	bf28      	it	cs
   107ae:	230f      	movcs	r3, #15
		uint32_t best_bandwidth = 0xFFFFFFFF;
   107b0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
		uint32_t stime = (55 + 32 + maxlen) >> 5; // time units: 32 bytes or 533 ns
   107b4:	094c      	lsrs	r4, r1, #5
		for (uint32_t offset=0; offset < interval; offset++) {
   107b6:	2600      	movs	r6, #0
		interval = 1 << (interval - 1);
   107b8:	3b01      	subs	r3, #1
		pipe->periodic_interval = (pinterval > 0) ? pinterval : 1;
   107ba:	9902      	ldr	r1, [sp, #8]
   107bc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 10890 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x23c>
		uint32_t best_offset = 0xFFFFFFFF;
   107c0:	4677      	mov	r7, lr
		interval = 1 << (interval - 1);
   107c2:	fa0c fc03 	lsl.w	ip, ip, r3
		if (interval > PERIODIC_LIST_SIZE*8) interval = PERIODIC_LIST_SIZE*8;
   107c6:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
   107ca:	4665      	mov	r5, ip
   107cc:	bf28      	it	cs
   107ce:	f44f 7580 	movcs.w	r5, #256	; 0x100
		uint32_t pinterval = interval >> 3;
   107d2:	08eb      	lsrs	r3, r5, #3
		pipe->periodic_interval = (pinterval > 0) ? pinterval : 1;
   107d4:	2b01      	cmp	r3, #1
   107d6:	bf38      	it	cc
   107d8:	2301      	movcc	r3, #1
   107da:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
{
   107de:	4633      	mov	r3, r6
			uint32_t max_bandwidth = 0;
   107e0:	2000      	movs	r0, #0
				uint32_t bandwidth = uframe_bandwidth[i] + stime;
   107e2:	f81b 1003 	ldrb.w	r1, [fp, r3]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   107e6:	442b      	add	r3, r5
				uint32_t bandwidth = uframe_bandwidth[i] + stime;
   107e8:	4421      	add	r1, r4
   107ea:	4288      	cmp	r0, r1
   107ec:	bf38      	it	cc
   107ee:	4608      	movcc	r0, r1
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   107f0:	2bff      	cmp	r3, #255	; 0xff
   107f2:	d9f6      	bls.n	107e2 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x18e>
			if (max_bandwidth < best_bandwidth) {
   107f4:	4570      	cmp	r0, lr
   107f6:	d201      	bcs.n	107fc <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1a8>
   107f8:	4686      	mov	lr, r0
   107fa:	4637      	mov	r7, r6
		for (uint32_t offset=0; offset < interval; offset++) {
   107fc:	3601      	adds	r6, #1
   107fe:	42b5      	cmp	r5, r6
   10800:	d1ed      	bne.n	107de <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x18a>
		if (best_bandwidth > 187) return false;
   10802:	f1be 0fbb 	cmp.w	lr, #187	; 0xbb
   10806:	d8c7      	bhi.n	10798 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x144>
		pipe->bandwidth_interval = interval;
   10808:	9b02      	ldr	r3, [sp, #8]
		pipe->bandwidth_stime = stime;
   1080a:	b2e4      	uxtb	r4, r4
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   1080c:	2fff      	cmp	r7, #255	; 0xff
		pipe->bandwidth_interval = interval;
   1080e:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
		pipe->bandwidth_offset = best_offset;
   10812:	f8a3 7046 	strh.w	r7, [r3, #70]	; 0x46
		pipe->bandwidth_stime = stime;
   10816:	f883 404a 	strb.w	r4, [r3, #74]	; 0x4a
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   1081a:	d808      	bhi.n	1082e <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1da>
   1081c:	463b      	mov	r3, r7
			uframe_bandwidth[i] += stime;
   1081e:	f81b 1003 	ldrb.w	r1, [fp, r3]
   10822:	4421      	add	r1, r4
   10824:	f80b 1003 	strb.w	r1, [fp, r3]
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10828:	442b      	add	r3, r5
   1082a:	2bff      	cmp	r3, #255	; 0xff
   1082c:	d9f7      	bls.n	1081e <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1ca>
		if (interval == 1) {
   1082e:	2a01      	cmp	r2, #1
   10830:	d912      	bls.n	10858 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x204>
		} else if (interval == 2) {
   10832:	2a02      	cmp	r2, #2
   10834:	d01e      	beq.n	10874 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x220>
		} else if (interval <= 4) {
   10836:	f1bc 0f04 	cmp.w	ip, #4
   1083a:	dc21      	bgt.n	10880 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x22c>
			pipe->start_mask = 0x11 << (best_offset & 3);
   1083c:	f007 0203 	and.w	r2, r7, #3
   10840:	2311      	movs	r3, #17
   10842:	4093      	lsls	r3, r2
   10844:	b2db      	uxtb	r3, r3
   10846:	e008      	b.n	1085a <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x206>
			ctime = (70 + 32 + maxlen) >> 5;
   10848:	3166      	adds	r1, #102	; 0x66
			stime = (40 + 32) >> 5;
   1084a:	2702      	movs	r7, #2
			ctime = (70 + 32 + maxlen) >> 5;
   1084c:	094c      	lsrs	r4, r1, #5
   1084e:	e72f      	b.n	106b0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x5c>
		pipe->periodic_interval = interval;
   10850:	fa1f f38a 	uxth.w	r3, sl
   10854:	9303      	str	r3, [sp, #12]
   10856:	e71f      	b.n	10698 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x44>
   10858:	23ff      	movs	r3, #255	; 0xff
			pipe->start_mask = 0xFF;
   1085a:	9902      	ldr	r1, [sp, #8]
		pipe->periodic_offset = best_offset >> 3;
   1085c:	08ff      	lsrs	r7, r7, #3
		pipe->complete_mask = 0;
   1085e:	2200      	movs	r2, #0
	return true;
   10860:	2001      	movs	r0, #1
			pipe->start_mask = 0xFF;
   10862:	f881 3036 	strb.w	r3, [r1, #54]	; 0x36
		pipe->periodic_offset = best_offset >> 3;
   10866:	f8a1 7042 	strh.w	r7, [r1, #66]	; 0x42
		pipe->complete_mask = 0;
   1086a:	f881 2037 	strb.w	r2, [r1, #55]	; 0x37
}
   1086e:	b005      	add	sp, #20
   10870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pipe->start_mask = 0x55 << (best_offset & 1);
   10874:	f007 0201 	and.w	r2, r7, #1
   10878:	2355      	movs	r3, #85	; 0x55
   1087a:	4093      	lsls	r3, r2
   1087c:	b2db      	uxtb	r3, r3
   1087e:	e7ec      	b.n	1085a <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x206>
			pipe->start_mask = 0x01 << (best_offset & 7);
   10880:	f007 0207 	and.w	r2, r7, #7
   10884:	2301      	movs	r3, #1
   10886:	4093      	lsls	r3, r2
   10888:	b2db      	uxtb	r3, r3
   1088a:	e7e6      	b.n	1085a <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x206>
   1088c:	00012aab 	.word	0x00012aab
   10890:	2000d744 	.word	0x2000d744

00010894 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)>:
	pipe->qh.horizontal_link = periodictable[0];
	periodictable[0] = (uint32_t)&(pipe->qh) | 2; // 2=QH
	println("init periodictable with ", periodictable[0], HEX);
#else
	uint32_t interval = pipe->periodic_interval;
	uint32_t offset = pipe->periodic_offset;
   10894:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
	uint32_t interval = pipe->periodic_interval;
   10898:	f8b0 c040 	ldrh.w	ip, [r0, #64]	; 0x40
	//println("  interval = ", interval);
	//println("  offset =   ", offset);

	// By an interative miracle, hopefully make an inverted tree of EHCI figure 4-18, page 93
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   1089c:	291f      	cmp	r1, #31
   1089e:	d834      	bhi.n	1090a <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x76>
{
   108a0:	b530      	push	{r4, r5, lr}
   108a2:	4c1a      	ldr	r4, [pc, #104]	; (1090c <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x78>)
		uint32_t num = periodictable[i];
		Pipe_t *node = (Pipe_t *)(num & 0xFFFFFFE0);
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
			//println("  add to slot ", i);
			pipe->qh.horizontal_link = num;
			periodictable[i] = (uint32_t)&(pipe->qh) | 2; // 2=QH
   108a4:	f040 0502 	orr.w	r5, r0, #2
   108a8:	e009      	b.n	108be <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x2a>
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
   108aa:	f8b3 e040 	ldrh.w	lr, [r3, #64]	; 0x40
   108ae:	45e6      	cmp	lr, ip
   108b0:	d211      	bcs.n	108d6 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x42>
			pipe->qh.horizontal_link = num;
   108b2:	6002      	str	r2, [r0, #0]
			periodictable[i] = (uint32_t)&(pipe->qh) | 2; // 2=QH
   108b4:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   108b8:	4461      	add	r1, ip
   108ba:	291f      	cmp	r1, #31
   108bc:	d824      	bhi.n	10908 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x74>
		uint32_t num = periodictable[i];
   108be:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
   108c2:	07d3      	lsls	r3, r2, #31
   108c4:	d4f5      	bmi.n	108b2 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x1e>
   108c6:	f002 0e06 	and.w	lr, r2, #6
		Pipe_t *node = (Pipe_t *)(num & 0xFFFFFFE0);
   108ca:	f022 031f 	bic.w	r3, r2, #31
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
   108ce:	f1be 0f02 	cmp.w	lr, #2
   108d2:	d0ea      	beq.n	108aa <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x16>
   108d4:	e007      	b.n	108e6 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x52>
		} else {
			//println("  traverse list ", i);
			// TODO: skip past iTD, siTD when/if we support isochronous
			while (node->periodic_interval >= interval) {
				if (node == pipe) goto nextslot;
   108d6:	4298      	cmp	r0, r3
   108d8:	d0ee      	beq.n	108b8 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x24>
				//print("  num ", num, HEX);
				//print("  node ", (uint32_t)node, HEX);
				//println("->", node->qh.horizontal_link, HEX);
				if (node->qh.horizontal_link & 1) break;
   108da:	681a      	ldr	r2, [r3, #0]
   108dc:	07d2      	lsls	r2, r2, #31
   108de:	d406      	bmi.n	108ee <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x5a>
				num = node->qh.horizontal_link;
   108e0:	681b      	ldr	r3, [r3, #0]
				node = (Pipe_t *)(num & 0xFFFFFFE0);
   108e2:	f023 031f 	bic.w	r3, r3, #31
			while (node->periodic_interval >= interval) {
   108e6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   108ea:	4562      	cmp	r2, ip
   108ec:	d2f3      	bcs.n	108d6 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x42>
{
   108ee:	461a      	mov	r2, r3
			}
			Pipe_t *n = node;
			do {
				if (n == pipe) goto nextslot;
   108f0:	4282      	cmp	r2, r0
   108f2:	d0e1      	beq.n	108b8 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x24>
				n = (Pipe_t *)(n->qh.horizontal_link & 0xFFFFFFE0);
   108f4:	6812      	ldr	r2, [r2, #0]
			} while (n != NULL);
   108f6:	f032 021f 	bics.w	r2, r2, #31
   108fa:	d1f9      	bne.n	108f0 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x5c>
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   108fc:	4461      	add	r1, ip
			//print("  adding at node ", (uint32_t)node, HEX);
			//print(", num=", num, HEX);
			//println(", node->qh.horizontal_link=", node->qh.horizontal_link, HEX);
			pipe->qh.horizontal_link = node->qh.horizontal_link;
   108fe:	681a      	ldr	r2, [r3, #0]
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10900:	291f      	cmp	r1, #31
			pipe->qh.horizontal_link = node->qh.horizontal_link;
   10902:	6002      	str	r2, [r0, #0]
			node->qh.horizontal_link = (uint32_t)pipe | 2; // 2=QH
   10904:	601d      	str	r5, [r3, #0]
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10906:	d9da      	bls.n	108be <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x2a>
		print(i);
		print(": ");
		print_qh_list((Pipe_t *)(periodictable[i] & 0xFFFFFFE0));
	}
#endif
}
   10908:	bd30      	pop	{r4, r5, pc}
   1090a:	4770      	bx	lr
   1090c:	2000a000 	.word	0x2000a000

00010910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>:
{
   10910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10914:	4605      	mov	r5, r0
   10916:	460e      	mov	r6, r1
   10918:	4614      	mov	r4, r2
   1091a:	4699      	mov	r9, r3
	pipe = allocate_Pipe();
   1091c:	f004 fad6 	bl	14ecc <USBHost::allocate_Pipe()>
	if (!pipe) return NULL;
   10920:	4607      	mov	r7, r0
   10922:	2800      	cmp	r0, #0
   10924:	d065      	beq.n	109f2 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
	halt = allocate_Transfer();
   10926:	f004 fae1 	bl	14eec <USBHost::allocate_Transfer()>
	if (!halt) {
   1092a:	4680      	mov	r8, r0
   1092c:	2800      	cmp	r0, #0
   1092e:	f000 8086 	beq.w	10a3e <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x12e>
	memset(pipe, 0, sizeof(Pipe_t));
   10932:	2260      	movs	r2, #96	; 0x60
   10934:	2100      	movs	r1, #0
   10936:	4638      	mov	r0, r7
   10938:	f00b f87e 	bl	1ba38 <memset>
	memset(halt, 0, sizeof(Transfer_t));
   1093c:	223c      	movs	r2, #60	; 0x3c
   1093e:	2100      	movs	r1, #0
   10940:	f108 0004 	add.w	r0, r8, #4
   10944:	f00b f878 	bl	1ba38 <memset>
	halt->qtd.next = 1;
   10948:	2201      	movs	r2, #1
	halt->qtd.token = 0x40;
   1094a:	2340      	movs	r3, #64	; 0x40
	if (type == 3) {
   1094c:	2e03      	cmp	r6, #3
	halt->qtd.next = 1;
   1094e:	f8c8 2000 	str.w	r2, [r8]
	halt->qtd.token = 0x40;
   10952:	f8c8 3008 	str.w	r3, [r8, #8]
	pipe->qh.next = (uint32_t)halt;
   10956:	f8c7 8010 	str.w	r8, [r7, #16]
	pipe->direction = direction;
   1095a:	f887 9035 	strb.w	r9, [r7, #53]	; 0x35
	pipe->qh.alt_next = 1;
   1095e:	617a      	str	r2, [r7, #20]
	pipe->device = dev;
   10960:	633d      	str	r5, [r7, #48]	; 0x30
	pipe->type = type;
   10962:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
	if (type == 3) {
   10966:	d058      	beq.n	10a1a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x10a>
	if (endpoint > 0) {
   10968:	b13c      	cbz	r4, 1097a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x6a>
		Pipe_t *p = dev->data_pipes;
   1096a:	686b      	ldr	r3, [r5, #4]
		if (p == NULL) {
   1096c:	2b00      	cmp	r3, #0
   1096e:	d061      	beq.n	10a34 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x124>
			while (p->next) p = p->next;
   10970:	461a      	mov	r2, r3
   10972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10974:	2b00      	cmp	r3, #0
   10976:	d1fb      	bne.n	10970 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x60>
			p->next = pipe;
   10978:	6397      	str	r7, [r2, #56]	; 0x38
		if (dev->speed < 2) c = 1;
   1097a:	7d29      	ldrb	r1, [r5, #20]
	if (type == 0) {
   1097c:	2e00      	cmp	r6, #0
   1097e:	d13b      	bne.n	109f8 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe8>
		if (dev->speed < 2) c = 1;
   10980:	2901      	cmp	r1, #1
   10982:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   10986:	bf8c      	ite	hi
   10988:	2200      	movhi	r2, #0
   1098a:	2201      	movls	r2, #1
	return ( (nak_count_reload << 28) | (control_endpoint_flag << 27) |
   1098c:	06d2      	lsls	r2, r2, #27
		(data_toggle_control << 14) | (speed << 12) | (endpoint_number << 8) |
   1098e:	0223      	lsls	r3, r4, #8
		(inactivate << 7) | (address << 0) );
   10990:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   10994:	9908      	ldr	r1, [sp, #32]
   10996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	pipe->qh.capabilities[0] = QH_capabilities1(15, c, maxlen, 0,
   1099a:	7d69      	ldrb	r1, [r5, #21]
		(inactivate << 7) | (address << 0) );
   1099c:	430b      	orrs	r3, r1
   1099e:	4313      	orrs	r3, r2
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   109a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
		(inactivate << 7) | (address << 0) );
   109a4:	4303      	orrs	r3, r0
   109a6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
	pipe->qh.capabilities[0] = QH_capabilities1(15, c, maxlen, 0,
   109aa:	607b      	str	r3, [r7, #4]
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   109ac:	7dab      	ldrb	r3, [r5, #22]
   109ae:	7de9      	ldrb	r1, [r5, #23]
        return ( (high_bw_mult << 30) | (hub_port_number << 23) | (hub_address << 16) |
   109b0:	041b      	lsls	r3, r3, #16
		(split_completion_mask << 8) | (interrupt_schedule_mask << 0) );
   109b2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   109b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   109ba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
		(split_completion_mask << 8) | (interrupt_schedule_mask << 0) );
   109be:	4313      	orrs	r3, r2
   109c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   109c4:	60bb      	str	r3, [r7, #8]
	if (type == 0 || type == 2) {
   109c6:	f036 0302 	bics.w	r3, r6, #2
   109ca:	d118      	bne.n	109fe <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xee>
		Pipe_t *list = (Pipe_t *)USBHS_ASYNCLISTADDR;
   109cc:	4b22      	ldr	r3, [pc, #136]	; (10a58 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x148>)
   109ce:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (list == NULL) {
   109d2:	b9d2      	cbnz	r2, 10a0a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xfa>
			pipe->qh.capabilities[0] |= 0x8000; // H bit
   109d4:	6879      	ldr	r1, [r7, #4]
			pipe->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2; // 2=QH
   109d6:	f047 0202 	orr.w	r2, r7, #2
			pipe->qh.capabilities[0] |= 0x8000; // H bit
   109da:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   109de:	6079      	str	r1, [r7, #4]
			pipe->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2; // 2=QH
   109e0:	603a      	str	r2, [r7, #0]
			USBHS_ASYNCLISTADDR = (uint32_t)&(pipe->qh);
   109e2:	f8c3 7158 	str.w	r7, [r3, #344]	; 0x158
			USBHS_USBCMD |= USBHS_USBCMD_ASE; // enable async schedule
   109e6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   109ea:	f042 0220 	orr.w	r2, r2, #32
   109ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   109f2:	4638      	mov	r0, r7
   109f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (dev->speed < 2) c = 1;
   109f8:	2000      	movs	r0, #0
   109fa:	4602      	mov	r2, r0
   109fc:	e7c7      	b.n	1098e <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x7e>
	} else if (type == 3) {
   109fe:	2e03      	cmp	r6, #3
   10a00:	d1f7      	bne.n	109f2 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
		add_qh_to_periodic_schedule(pipe);
   10a02:	4638      	mov	r0, r7
   10a04:	f7ff ff46 	bl	10894 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)>
   10a08:	e7f3      	b.n	109f2 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
			pipe->qh.horizontal_link = list->qh.horizontal_link;
   10a0a:	6811      	ldr	r1, [r2, #0]
			list->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2;
   10a0c:	f047 0302 	orr.w	r3, r7, #2
}
   10a10:	4638      	mov	r0, r7
			pipe->qh.horizontal_link = list->qh.horizontal_link;
   10a12:	6039      	str	r1, [r7, #0]
			list->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2;
   10a14:	6013      	str	r3, [r2, #0]
}
   10a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!allocate_interrupt_pipe_bandwidth(pipe, maxlen, interval)) {
   10a1a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10a1e:	4638      	mov	r0, r7
   10a20:	f7ff fe18 	bl	10654 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)>
   10a24:	4681      	mov	r9, r0
   10a26:	b178      	cbz	r0, 10a48 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x138>
	if (endpoint > 0) {
   10a28:	2c00      	cmp	r4, #0
   10a2a:	d19e      	bne.n	1096a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x5a>
		dtc, dev->speed, endpoint, 0, dev->address);
   10a2c:	7d29      	ldrb	r1, [r5, #20]
   10a2e:	4620      	mov	r0, r4
   10a30:	4622      	mov	r2, r4
   10a32:	e7ac      	b.n	1098e <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x7e>
		if (dev->speed < 2) c = 1;
   10a34:	7d29      	ldrb	r1, [r5, #20]
			dev->data_pipes = pipe;
   10a36:	606f      	str	r7, [r5, #4]
	if (type == 0) {
   10a38:	2e00      	cmp	r6, #0
   10a3a:	d0a1      	beq.n	10980 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x70>
   10a3c:	e7dc      	b.n	109f8 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe8>
		free_Pipe(pipe);
   10a3e:	4638      	mov	r0, r7
		return NULL;
   10a40:	4647      	mov	r7, r8
		free_Pipe(pipe);
   10a42:	f004 fa4b 	bl	14edc <USBHost::free_Pipe(Pipe_struct*)>
		return NULL;
   10a46:	e7d4      	b.n	109f2 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
			free_Transfer(halt);
   10a48:	4640      	mov	r0, r8
   10a4a:	f004 fa57 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
			free_Pipe(pipe);
   10a4e:	4638      	mov	r0, r7
   10a50:	f004 fa44 	bl	14edc <USBHost::free_Pipe(Pipe_struct*)>
			return NULL;
   10a54:	464f      	mov	r7, r9
   10a56:	e7cc      	b.n	109f2 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
   10a58:	402e0200 	.word	0x402e0200

00010a5c <USBHost::delete_Pipe(Pipe_struct*)>:


void USBHost::delete_Pipe(Pipe_t *pipe)
{
   10a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// _never_ become inactive (if the endpoint NAKs indefinitely).  For
	// another, the procedure given in the spec (deactivate the qTDs on the
	// queue) is racy, since the controller can perform a new overlay or
	// writeback at any time.

	bool isasync = (pipe->type == 0 || pipe->type == 2);
   10a5e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
   10a62:	4604      	mov	r4, r0
	if (isasync) {
   10a64:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   10a68:	d13b      	bne.n	10ae2 <USBHost::delete_Pipe(Pipe_struct*)+0x86>
		// find the next QH in the async schedule loop
		Pipe_t *next = (Pipe_t *)(pipe->qh.horizontal_link & 0xFFFFFFE0);
   10a6a:	6803      	ldr	r3, [r0, #0]
   10a6c:	f023 031f 	bic.w	r3, r3, #31
		if (next == pipe) {
   10a70:	4298      	cmp	r0, r3
   10a72:	f000 80cb 	beq.w	10c0c <USBHost::delete_Pipe(Pipe_struct*)+0x1b0>
		} else {
			// find the previous QH in the async schedule loop
			println("  remove QH from async schedule");
			Pipe_t *prev = next;
			while (1) {
				Pipe_t *n = (Pipe_t *)(prev->qh.horizontal_link & 0xFFFFFFE0);
   10a76:	681a      	ldr	r2, [r3, #0]
   10a78:	4619      	mov	r1, r3
   10a7a:	f022 031f 	bic.w	r3, r2, #31
				if (n == pipe) break;
   10a7e:	429c      	cmp	r4, r3
   10a80:	d1f9      	bne.n	10a76 <USBHost::delete_Pipe(Pipe_struct*)+0x1a>
				prev = n;
			}
			// if removing the one with H bit, set another
			if (pipe->qh.capabilities[0] & 0x8000) {
   10a82:	6863      	ldr	r3, [r4, #4]
   10a84:	041d      	lsls	r5, r3, #16
   10a86:	f100 80ac 	bmi.w	10be2 <USBHost::delete_Pipe(Pipe_struct*)+0x186>
				prev->qh.capabilities[0] |= 0x8000; // set H bit
			}
			// link the previous QH, we're no longer in the loop
			prev->qh.horizontal_link = pipe->qh.horizontal_link;
   10a8a:	6823      	ldr	r3, [r4, #0]
			// do the Async Advance Doorbell handshake to wait to be
			// sure the EHCI no longer references the removed QH
			USBHS_USBCMD |= USBHS_USBCMD_IAA;
   10a8c:	4a73      	ldr	r2, [pc, #460]	; (10c5c <USBHost::delete_Pipe(Pipe_struct*)+0x200>)
			prev->qh.horizontal_link = pipe->qh.horizontal_link;
   10a8e:	600b      	str	r3, [r1, #0]
			USBHS_USBCMD |= USBHS_USBCMD_IAA;
   10a90:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   10a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
			while (!(USBHS_USBSTS & USBHS_USBSTS_AAI)) ; // busy loop wait
   10a9c:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   10aa0:	0698      	lsls	r0, r3, #26
   10aa2:	d5fb      	bpl.n	10a9c <USBHost::delete_Pipe(Pipe_struct*)+0x40>
			USBHS_USBSTS = USBHS_USBSTS_AAI;
   10aa4:	2320      	movs	r3, #32
   10aa6:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
			// TODO: does this write interfere UPI & UAI (bits 18 & 19) ??
		}
		// find & free all the transfers which completed
		println("  Free transfers");
		Transfer_t *t = async_followup_first;
   10aaa:	4e6d      	ldr	r6, [pc, #436]	; (10c60 <USBHost::delete_Pipe(Pipe_struct*)+0x204>)
   10aac:	6835      	ldr	r5, [r6, #0]
		while (t) {
   10aae:	b13d      	cbz	r5, 10ac0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
		async_followup_last = prev;
   10ab0:	4f6c      	ldr	r7, [pc, #432]	; (10c64 <USBHost::delete_Pipe(Pipe_struct*)+0x208>)
			print("    * ", (uint32_t)t);
			Transfer_t *next = t->next_followup;
   10ab2:	4628      	mov	r0, r5
   10ab4:	6a2d      	ldr	r5, [r5, #32]
			if (t->pipe == pipe) {
   10ab6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10ab8:	42a3      	cmp	r3, r4
   10aba:	d07f      	beq.n	10bbc <USBHost::delete_Pipe(Pipe_struct*)+0x160>
		while (t) {
   10abc:	2d00      	cmp	r5, #0
   10abe:	d1f8      	bne.n	10ab2 <USBHost::delete_Pipe(Pipe_struct*)+0x56>
	//
	// TODO: do we need to look at pipe->qh.current ??
	//
	// free all the transfers still attached to the QH
	println("  Free transfers attached to QH");
	Transfer_t *tr = (Transfer_t *)(pipe->qh.next);
   10ac0:	6925      	ldr	r5, [r4, #16]
	while ((uint32_t)tr & 0xFFFFFFE0) {
   10ac2:	f035 031f 	bics.w	r3, r5, #31
   10ac6:	d007      	beq.n	10ad8 <USBHost::delete_Pipe(Pipe_struct*)+0x7c>
		println("    * ", (uint32_t)tr);
		Transfer_t *next = (Transfer_t *)(tr->qtd.next);
   10ac8:	682b      	ldr	r3, [r5, #0]
   10aca:	4628      	mov	r0, r5
   10acc:	461d      	mov	r5, r3
		free_Transfer(tr);
   10ace:	f004 fa15 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
	while ((uint32_t)tr & 0xFFFFFFE0) {
   10ad2:	f035 031f 	bics.w	r3, r5, #31
   10ad6:	d1f7      	bne.n	10ac8 <USBHost::delete_Pipe(Pipe_struct*)+0x6c>
		tr = next;
	}
	// hopefully we found everything...
	free_Pipe(pipe);
   10ad8:	4620      	mov	r0, r4
	println("* Delete Pipe completed");
}
   10ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_Pipe(pipe);
   10ade:	f004 b9fd 	b.w	14edc <USBHost::free_Pipe(Pipe_struct*)>
   10ae2:	4861      	ldr	r0, [pc, #388]	; (10c68 <USBHost::delete_Pipe(Pipe_struct*)+0x20c>)
   10ae4:	f100 0580 	add.w	r5, r0, #128	; 0x80
			uint32_t num = periodictable[i];
   10ae8:	f850 2f04 	ldr.w	r2, [r0, #4]!
			if (num & 1) continue;
   10aec:	07d1      	lsls	r1, r2, #31
   10aee:	d40c      	bmi.n	10b0a <USBHost::delete_Pipe(Pipe_struct*)+0xae>
			Pipe_t *node = (Pipe_t *)(num & 0xFFFFFFE0);
   10af0:	f022 021f 	bic.w	r2, r2, #31
			if (node == pipe) {
   10af4:	4294      	cmp	r4, r2
   10af6:	d103      	bne.n	10b00 <USBHost::delete_Pipe(Pipe_struct*)+0xa4>
   10af8:	e056      	b.n	10ba8 <USBHost::delete_Pipe(Pipe_struct*)+0x14c>
				if (node == pipe) {
   10afa:	428c      	cmp	r4, r1
   10afc:	d059      	beq.n	10bb2 <USBHost::delete_Pipe(Pipe_struct*)+0x156>
   10afe:	460a      	mov	r2, r1
				num = node->qh.horizontal_link;
   10b00:	6813      	ldr	r3, [r2, #0]
				node = (Pipe_t *)(num & 0xFFFFFFE0);
   10b02:	f023 011f 	bic.w	r1, r3, #31
				if (num & 1) break;
   10b06:	07db      	lsls	r3, r3, #31
   10b08:	d5f7      	bpl.n	10afa <USBHost::delete_Pipe(Pipe_struct*)+0x9e>
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10b0a:	42a8      	cmp	r0, r5
   10b0c:	d1ec      	bne.n	10ae8 <USBHost::delete_Pipe(Pipe_struct*)+0x8c>
		if (pipe->device->speed == 2) {
   10b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10b10:	7d1b      	ldrb	r3, [r3, #20]
   10b12:	2b02      	cmp	r3, #2
   10b14:	d06a      	beq.n	10bec <USBHost::delete_Pipe(Pipe_struct*)+0x190>
			uint32_t offset = pipe->bandwidth_offset;
   10b16:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
			uint32_t interval = pipe->bandwidth_interval;
   10b1a:	f8b4 e044 	ldrh.w	lr, [r4, #68]	; 0x44
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10b1e:	2d1f      	cmp	r5, #31
			uint32_t shift = pipe->bandwidth_shift;
   10b20:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
			uint32_t stime = pipe->bandwidth_stime;
   10b24:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
			uint32_t ctime = pipe->bandwidth_ctime;
   10b28:	f894 c04b 	ldrb.w	ip, [r4, #75]	; 0x4b
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10b2c:	d818      	bhi.n	10b60 <USBHost::delete_Pipe(Pipe_struct*)+0x104>
   10b2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   10b32:	4a4e      	ldr	r2, [pc, #312]	; (10c6c <USBHost::delete_Pipe(Pipe_struct*)+0x210>)
   10b34:	ea4f 07ce 	mov.w	r7, lr, lsl #3
   10b38:	4413      	add	r3, r2
				uframe_bandwidth[n+2] -= ctime;
   10b3a:	789a      	ldrb	r2, [r3, #2]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10b3c:	4475      	add	r5, lr
				uframe_bandwidth[n+0] -= stime;
   10b3e:	7818      	ldrb	r0, [r3, #0]
				uframe_bandwidth[n+2] -= ctime;
   10b40:	eba2 020c 	sub.w	r2, r2, ip
				uframe_bandwidth[n+3] -= ctime;
   10b44:	78d9      	ldrb	r1, [r3, #3]
				uframe_bandwidth[n+0] -= stime;
   10b46:	1b80      	subs	r0, r0, r6
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10b48:	2d1f      	cmp	r5, #31
				uframe_bandwidth[n+2] -= ctime;
   10b4a:	709a      	strb	r2, [r3, #2]
				uframe_bandwidth[n+3] -= ctime;
   10b4c:	eba1 010c 	sub.w	r1, r1, ip
				uframe_bandwidth[n+4] -= ctime;
   10b50:	791a      	ldrb	r2, [r3, #4]
				uframe_bandwidth[n+0] -= stime;
   10b52:	7018      	strb	r0, [r3, #0]
				uframe_bandwidth[n+4] -= ctime;
   10b54:	eba2 020c 	sub.w	r2, r2, ip
				uframe_bandwidth[n+3] -= ctime;
   10b58:	70d9      	strb	r1, [r3, #3]
				uframe_bandwidth[n+4] -= ctime;
   10b5a:	711a      	strb	r2, [r3, #4]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10b5c:	443b      	add	r3, r7
   10b5e:	d9ec      	bls.n	10b3a <USBHost::delete_Pipe(Pipe_struct*)+0xde>
		Transfer_t *t = periodic_followup_first;
   10b60:	4e43      	ldr	r6, [pc, #268]	; (10c70 <USBHost::delete_Pipe(Pipe_struct*)+0x214>)
   10b62:	6835      	ldr	r5, [r6, #0]
		while (t) {
   10b64:	2d00      	cmp	r5, #0
   10b66:	d0ab      	beq.n	10ac0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
   10b68:	4628      	mov	r0, r5
		periodic_followup_last = prev;
   10b6a:	4f42      	ldr	r7, [pc, #264]	; (10c74 <USBHost::delete_Pipe(Pipe_struct*)+0x218>)
			Transfer_t *next = t->next_followup;
   10b6c:	6a2d      	ldr	r5, [r5, #32]
			if (t->pipe == pipe) {
   10b6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10b70:	42a3      	cmp	r3, r4
   10b72:	d006      	beq.n	10b82 <USBHost::delete_Pipe(Pipe_struct*)+0x126>
		while (t) {
   10b74:	2d00      	cmp	r5, #0
   10b76:	d0a3      	beq.n	10ac0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
			Transfer_t *next = t->next_followup;
   10b78:	4628      	mov	r0, r5
   10b7a:	6a2d      	ldr	r5, [r5, #32]
			if (t->pipe == pipe) {
   10b7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10b7e:	42a3      	cmp	r3, r4
   10b80:	d1f8      	bne.n	10b74 <USBHost::delete_Pipe(Pipe_struct*)+0x118>
	Transfer_t *prev = transfer->prev_followup;
   10b82:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (prev) {
   10b84:	2b00      	cmp	r3, #0
   10b86:	d066      	beq.n	10c56 <USBHost::delete_Pipe(Pipe_struct*)+0x1fa>
		prev->next_followup = next;
   10b88:	621d      	str	r5, [r3, #32]
	if (next) {
   10b8a:	2d00      	cmp	r5, #0
   10b8c:	d061      	beq.n	10c52 <USBHost::delete_Pipe(Pipe_struct*)+0x1f6>
		next->prev_followup = prev;
   10b8e:	626b      	str	r3, [r5, #36]	; 0x24
				Transfer_t *tr = (Transfer_t *)(pipe->qh.next);
   10b90:	6923      	ldr	r3, [r4, #16]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10b92:	f033 021f 	bics.w	r2, r3, #31
   10b96:	d104      	bne.n	10ba2 <USBHost::delete_Pipe(Pipe_struct*)+0x146>
   10b98:	e050      	b.n	10c3c <USBHost::delete_Pipe(Pipe_struct*)+0x1e0>
					tr  = (Transfer_t *)(tr->qtd.next);
   10b9a:	681b      	ldr	r3, [r3, #0]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10b9c:	f033 021f 	bics.w	r2, r3, #31
   10ba0:	d04c      	beq.n	10c3c <USBHost::delete_Pipe(Pipe_struct*)+0x1e0>
   10ba2:	4283      	cmp	r3, r0
   10ba4:	d1f9      	bne.n	10b9a <USBHost::delete_Pipe(Pipe_struct*)+0x13e>
   10ba6:	e7e5      	b.n	10b74 <USBHost::delete_Pipe(Pipe_struct*)+0x118>
				periodictable[i] = pipe->qh.horizontal_link;
   10ba8:	6823      	ldr	r3, [r4, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10baa:	42a8      	cmp	r0, r5
				periodictable[i] = pipe->qh.horizontal_link;
   10bac:	6003      	str	r3, [r0, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10bae:	d19b      	bne.n	10ae8 <USBHost::delete_Pipe(Pipe_struct*)+0x8c>
   10bb0:	e7ad      	b.n	10b0e <USBHost::delete_Pipe(Pipe_struct*)+0xb2>
					prev->qh.horizontal_link = node->qh.horizontal_link;
   10bb2:	6823      	ldr	r3, [r4, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10bb4:	42a8      	cmp	r0, r5
					prev->qh.horizontal_link = node->qh.horizontal_link;
   10bb6:	6013      	str	r3, [r2, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10bb8:	d196      	bne.n	10ae8 <USBHost::delete_Pipe(Pipe_struct*)+0x8c>
   10bba:	e7a8      	b.n	10b0e <USBHost::delete_Pipe(Pipe_struct*)+0xb2>
	Transfer_t *prev = transfer->prev_followup;
   10bbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (prev) {
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	d045      	beq.n	10c4e <USBHost::delete_Pipe(Pipe_struct*)+0x1f2>
		prev->next_followup = next;
   10bc2:	621d      	str	r5, [r3, #32]
	if (next) {
   10bc4:	2d00      	cmp	r5, #0
   10bc6:	d040      	beq.n	10c4a <USBHost::delete_Pipe(Pipe_struct*)+0x1ee>
		next->prev_followup = prev;
   10bc8:	626b      	str	r3, [r5, #36]	; 0x24
				Transfer_t *tr = (Transfer_t *)(pipe->qh.next);
   10bca:	6923      	ldr	r3, [r4, #16]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10bcc:	f033 021f 	bics.w	r2, r3, #31
   10bd0:	d104      	bne.n	10bdc <USBHost::delete_Pipe(Pipe_struct*)+0x180>
   10bd2:	e02a      	b.n	10c2a <USBHost::delete_Pipe(Pipe_struct*)+0x1ce>
					tr  = (Transfer_t *)(tr->qtd.next);
   10bd4:	681b      	ldr	r3, [r3, #0]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10bd6:	f033 021f 	bics.w	r2, r3, #31
   10bda:	d026      	beq.n	10c2a <USBHost::delete_Pipe(Pipe_struct*)+0x1ce>
   10bdc:	4283      	cmp	r3, r0
   10bde:	d1f9      	bne.n	10bd4 <USBHost::delete_Pipe(Pipe_struct*)+0x178>
   10be0:	e76c      	b.n	10abc <USBHost::delete_Pipe(Pipe_struct*)+0x60>
				prev->qh.capabilities[0] |= 0x8000; // set H bit
   10be2:	684b      	ldr	r3, [r1, #4]
   10be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   10be8:	604b      	str	r3, [r1, #4]
   10bea:	e74e      	b.n	10a8a <USBHost::delete_Pipe(Pipe_struct*)+0x2e>
			uint32_t offset = pipe->bandwidth_offset;
   10bec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
			uint32_t interval = pipe->bandwidth_interval;
   10bf0:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10bf4:	2bff      	cmp	r3, #255	; 0xff
			uint32_t stime = pipe->bandwidth_stime;
   10bf6:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10bfa:	d8b1      	bhi.n	10b60 <USBHost::delete_Pipe(Pipe_struct*)+0x104>
   10bfc:	491b      	ldr	r1, [pc, #108]	; (10c6c <USBHost::delete_Pipe(Pipe_struct*)+0x210>)
				uframe_bandwidth[i] -= stime;
   10bfe:	5cca      	ldrb	r2, [r1, r3]
   10c00:	1a12      	subs	r2, r2, r0
   10c02:	54ca      	strb	r2, [r1, r3]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10c04:	442b      	add	r3, r5
   10c06:	2bff      	cmp	r3, #255	; 0xff
   10c08:	d9f9      	bls.n	10bfe <USBHost::delete_Pipe(Pipe_struct*)+0x1a2>
   10c0a:	e7a9      	b.n	10b60 <USBHost::delete_Pipe(Pipe_struct*)+0x104>
			USBHS_USBCMD &= ~USBHS_USBCMD_ASE; // disable async schedule
   10c0c:	4a13      	ldr	r2, [pc, #76]	; (10c5c <USBHost::delete_Pipe(Pipe_struct*)+0x200>)
   10c0e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   10c12:	f023 0320 	bic.w	r3, r3, #32
   10c16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
			while (USBHS_USBSTS & USBHS_USBSTS_AS) ; // busy loop wait
   10c1a:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   10c1e:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
   10c22:	d1fa      	bne.n	10c1a <USBHost::delete_Pipe(Pipe_struct*)+0x1be>
			USBHS_ASYNCLISTADDR = 0;
   10c24:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
   10c28:	e73f      	b.n	10aaa <USBHost::delete_Pipe(Pipe_struct*)+0x4e>
				if (tr == t) {
   10c2a:	4283      	cmp	r3, r0
   10c2c:	f43f af46 	beq.w	10abc <USBHost::delete_Pipe(Pipe_struct*)+0x60>
					free_Transfer(t);  // The later code should actually free it...
   10c30:	f004 f964 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
		while (t) {
   10c34:	2d00      	cmp	r5, #0
   10c36:	f47f af3c 	bne.w	10ab2 <USBHost::delete_Pipe(Pipe_struct*)+0x56>
   10c3a:	e741      	b.n	10ac0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
				if (tr == t) {
   10c3c:	4283      	cmp	r3, r0
   10c3e:	d099      	beq.n	10b74 <USBHost::delete_Pipe(Pipe_struct*)+0x118>
					free_Transfer(t);  // The later code should actually free it...
   10c40:	f004 f95c 	bl	14efc <USBHost::free_Transfer(Transfer_struct*)>
		while (t) {
   10c44:	2d00      	cmp	r5, #0
   10c46:	d197      	bne.n	10b78 <USBHost::delete_Pipe(Pipe_struct*)+0x11c>
   10c48:	e73a      	b.n	10ac0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
		async_followup_last = prev;
   10c4a:	603b      	str	r3, [r7, #0]
   10c4c:	e7bd      	b.n	10bca <USBHost::delete_Pipe(Pipe_struct*)+0x16e>
		async_followup_first = next;
   10c4e:	6035      	str	r5, [r6, #0]
   10c50:	e7b8      	b.n	10bc4 <USBHost::delete_Pipe(Pipe_struct*)+0x168>
		periodic_followup_last = prev;
   10c52:	603b      	str	r3, [r7, #0]
   10c54:	e79c      	b.n	10b90 <USBHost::delete_Pipe(Pipe_struct*)+0x134>
		periodic_followup_first = next;
   10c56:	6035      	str	r5, [r6, #0]
   10c58:	e797      	b.n	10b8a <USBHost::delete_Pipe(Pipe_struct*)+0x12e>
   10c5a:	bf00      	nop
   10c5c:	402e0200 	.word	0x402e0200
   10c60:	2000d850 	.word	0x2000d850
   10c64:	2000d84c 	.word	0x2000d84c
   10c68:	20009ffc 	.word	0x20009ffc
   10c6c:	2000d744 	.word	0x2000d744
   10c70:	2000d858 	.word	0x2000d858
   10c74:	2000d854 	.word	0x2000d854

00010c78 <USBHost::Task()>:
// The main user function to cause internal state to update.  Since we do
// almost everything with DMA and interrupts, the only work to do here is
// call all the active driver Task() functions.
void USBHost::Task()
{
	for (Device_t *dev = devlist; dev; dev = dev->next) {
   10c78:	4b0b      	ldr	r3, [pc, #44]	; (10ca8 <USBHost::Task()+0x30>)
{
   10c7a:	b570      	push	{r4, r5, r6, lr}
	for (Device_t *dev = devlist; dev; dev = dev->next) {
   10c7c:	681e      	ldr	r6, [r3, #0]
   10c7e:	b18e      	cbz	r6, 10ca4 <USBHost::Task()+0x2c>
   10c80:	4d0a      	ldr	r5, [pc, #40]	; (10cac <USBHost::Task()+0x34>)
		for (USBDriver *driver = dev->drivers; driver; driver = driver->next) {
   10c82:	68f4      	ldr	r4, [r6, #12]
   10c84:	b914      	cbnz	r4, 10c8c <USBHost::Task()+0x14>
   10c86:	e00a      	b.n	10c9e <USBHost::Task()+0x26>
   10c88:	6864      	ldr	r4, [r4, #4]
   10c8a:	b144      	cbz	r4, 10c9e <USBHost::Task()+0x26>
			(driver->Task)();
   10c8c:	6823      	ldr	r3, [r4, #0]
   10c8e:	68db      	ldr	r3, [r3, #12]
   10c90:	42ab      	cmp	r3, r5
   10c92:	d0f9      	beq.n	10c88 <USBHost::Task()+0x10>
   10c94:	4620      	mov	r0, r4
   10c96:	4798      	blx	r3
		for (USBDriver *driver = dev->drivers; driver; driver = driver->next) {
   10c98:	6864      	ldr	r4, [r4, #4]
   10c9a:	2c00      	cmp	r4, #0
   10c9c:	d1f6      	bne.n	10c8c <USBHost::Task()+0x14>
	for (Device_t *dev = devlist; dev; dev = dev->next) {
   10c9e:	68b6      	ldr	r6, [r6, #8]
   10ca0:	2e00      	cmp	r6, #0
   10ca2:	d1ee      	bne.n	10c82 <USBHost::Task()+0xa>
		}
	}
}
   10ca4:	bd70      	pop	{r4, r5, r6, pc}
   10ca6:	bf00      	nop
   10ca8:	2000d85c 	.word	0x2000d85c
   10cac:	0000fb4d 	.word	0x0000fb4d

00010cb0 <USBHost::driver_ready_for_device(USBDriver*)>:
//
void USBHost::driver_ready_for_device(USBDriver *driver)
{
	driver->device = NULL;
	driver->next = NULL;
	if (available_drivers == NULL) {
   10cb0:	4906      	ldr	r1, [pc, #24]	; (10ccc <USBHost::driver_ready_for_device(USBDriver*)+0x1c>)
	driver->device = NULL;
   10cb2:	2200      	movs	r2, #0
	if (available_drivers == NULL) {
   10cb4:	680b      	ldr	r3, [r1, #0]
	driver->next = NULL;
   10cb6:	e9c0 2201 	strd	r2, r2, [r0, #4]
	if (available_drivers == NULL) {
   10cba:	b12b      	cbz	r3, 10cc8 <USBHost::driver_ready_for_device(USBDriver*)+0x18>
		available_drivers = driver;
	} else {
		// append to end of list
		USBDriver *last = available_drivers;
		while (last->next) last = last->next;
   10cbc:	461a      	mov	r2, r3
   10cbe:	685b      	ldr	r3, [r3, #4]
   10cc0:	2b00      	cmp	r3, #0
   10cc2:	d1fb      	bne.n	10cbc <USBHost::driver_ready_for_device(USBDriver*)+0xc>
		last->next = driver;
   10cc4:	6050      	str	r0, [r2, #4]
	}
}
   10cc6:	4770      	bx	lr
		available_drivers = driver;
   10cc8:	6008      	str	r0, [r1, #0]
   10cca:	4770      	bx	lr
   10ccc:	2000d844 	.word	0x2000d844

00010cd0 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)>:

// Create a new device and begin the enumeration process
//
Device_t * USBHost::new_Device(uint32_t speed, uint32_t hub_addr, uint32_t hub_port)
{
   10cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cd2:	b083      	sub	sp, #12
   10cd4:	4607      	mov	r7, r0
   10cd6:	460e      	mov	r6, r1
   10cd8:	4615      	mov	r5, r2
	  case 1: print("1.5"); break;
	  case 2: print("480"); break;
	  default: print("??");
	}
	println(" Mbit/sec");
	dev = allocate_Device();
   10cda:	f004 f8e7 	bl	14eac <USBHost::allocate_Device()>
	if (!dev) return NULL;
   10cde:	4604      	mov	r4, r0
   10ce0:	b380      	cbz	r0, 10d44 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x74>
	memset(dev, 0, sizeof(Device_t));
   10ce2:	2224      	movs	r2, #36	; 0x24
   10ce4:	2100      	movs	r1, #0
   10ce6:	f00a fea7 	bl	1ba38 <memset>
	dev->speed = speed;
	dev->address = 0;
	dev->hub_address = hub_addr;
	dev->hub_port = hub_port;
	dev->control_pipe = new_Pipe(dev, 0, 0, 0, 8);
   10cea:	2300      	movs	r3, #0
   10cec:	2108      	movs	r1, #8
	dev->speed = speed;
   10cee:	7527      	strb	r7, [r4, #20]
	dev->control_pipe = new_Pipe(dev, 0, 0, 0, 8);
   10cf0:	461a      	mov	r2, r3
	dev->hub_address = hub_addr;
   10cf2:	75a6      	strb	r6, [r4, #22]
	dev->hub_port = hub_port;
   10cf4:	75e5      	strb	r5, [r4, #23]
	dev->control_pipe = new_Pipe(dev, 0, 0, 0, 8);
   10cf6:	4620      	mov	r0, r4
   10cf8:	e9cd 1300 	strd	r1, r3, [sp]
   10cfc:	4619      	mov	r1, r3
   10cfe:	f7ff fe07 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
   10d02:	4602      	mov	r2, r0
   10d04:	6020      	str	r0, [r4, #0]
	if (!dev->control_pipe) {
   10d06:	b320      	cbz	r0, 10d52 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x82>
		free_Device(dev);
		return NULL;
	}
	dev->strbuf = allocate_string_buffer();  // try to allocate a string buffer; 
   10d08:	f004 f900 	bl	14f0c <USBHost::allocate_string_buffer()>
	dev->control_pipe->callback_function = &enumeration;
   10d0c:	6821      	ldr	r1, [r4, #0]
   10d0e:	4a13      	ldr	r2, [pc, #76]	; (10d5c <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x8c>)
	dev->control_pipe->direction = 1; // 1=IN
	// Here is where the enumeration process officially begins.
	// Only a single device can enumerate at a time.
	USBHost::enumeration_busy = true;
	mk_setup(enumsetup, 0x80, 6, 0x0100, 0, 8); // 6=GET_DESCRIPTOR
	queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   10d10:	2300      	movs	r3, #0
	dev->strbuf = allocate_string_buffer();  // try to allocate a string buffer; 
   10d12:	6120      	str	r0, [r4, #16]
	dev->control_pipe->callback_function = &enumeration;
   10d14:	63ca      	str	r2, [r1, #60]	; 0x3c
	dev->control_pipe->direction = 1; // 1=IN
   10d16:	2201      	movs	r2, #1
	USBHost::enumeration_busy = true;
   10d18:	4811      	ldr	r0, [pc, #68]	; (10d60 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x90>)
	dev->control_pipe->direction = 1; // 1=IN
   10d1a:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
	USBHost::enumeration_busy = true;
   10d1e:	7002      	strb	r2, [r0, #0]
        s.word2 = wIndex | (wLength << 16);
   10d20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   10d24:	490f      	ldr	r1, [pc, #60]	; (10d64 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x94>)
        s.word2 = wIndex | (wLength << 16);
   10d26:	4810      	ldr	r0, [pc, #64]	; (10d68 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x98>)
   10d28:	e9c1 0200 	strd	r0, r2, [r1]
	queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   10d2c:	4a0f      	ldr	r2, [pc, #60]	; (10d6c <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x9c>)
   10d2e:	4620      	mov	r0, r4
   10d30:	f7ff f982 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	if (devlist == NULL) {
   10d34:	4a0e      	ldr	r2, [pc, #56]	; (10d70 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0xa0>)
   10d36:	6813      	ldr	r3, [r2, #0]
   10d38:	b13b      	cbz	r3, 10d4a <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x7a>
		devlist = dev;
	} else {
		Device_t *p;
		for (p = devlist; p->next; p = p->next) ; // walk devlist
   10d3a:	461a      	mov	r2, r3
   10d3c:	689b      	ldr	r3, [r3, #8]
   10d3e:	2b00      	cmp	r3, #0
   10d40:	d1fb      	bne.n	10d3a <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x6a>
		p->next = dev;
   10d42:	6094      	str	r4, [r2, #8]
	}
	return dev;
}
   10d44:	4620      	mov	r0, r4
   10d46:	b003      	add	sp, #12
   10d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d4a:	4620      	mov	r0, r4
		devlist = dev;
   10d4c:	6014      	str	r4, [r2, #0]
}
   10d4e:	b003      	add	sp, #12
   10d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		free_Device(dev);
   10d52:	4620      	mov	r0, r4
		return NULL;
   10d54:	4614      	mov	r4, r2
		free_Device(dev);
   10d56:	f004 f8b1 	bl	14ebc <USBHost::free_Device(Device_struct*)>
		return NULL;
   10d5a:	e7f3      	b.n	10d44 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x74>
   10d5c:	00010f05 	.word	0x00010f05
   10d60:	2000ec2c 	.word	0x2000ec2c
   10d64:	2000cfc0 	.word	0x2000cfc0
   10d68:	01000680 	.word	0x01000680
   10d6c:	2000c7c0 	.word	0x2000c7c0
   10d70:	2000d85c 	.word	0x2000d85c

00010d74 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>:
			return;
		}
	}
}

void  USBHost::convertStringDescriptorToASCIIString(uint8_t string_index, Device_t *dev, const Transfer_t *transfer) {
   10d74:	b570      	push	{r4, r5, r6, lr}
	strbuf_t *strbuf = dev->strbuf; 
   10d76:	690d      	ldr	r5, [r1, #16]
	if (!strbuf) return;	// don't have a buffer
   10d78:	b39d      	cbz	r5, 10de2 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>

	uint8_t *buffer = (uint8_t*)transfer->buffer;
   10d7a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	uint8_t buf_index = string_index? strbuf->iStrings[string_index]+1 : 0;
   10d7c:	b390      	cbz	r0, 10de4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x70>
   10d7e:	5c29      	ldrb	r1, [r5, r0]
   10d80:	3101      	adds	r1, #1
   10d82:	b2c9      	uxtb	r1, r1

	// Try to verify - The first byte should be length and the 2nd byte should be 0x3
	if (!buffer || (buffer[1] != 0x3)) {
   10d84:	b36e      	cbz	r6, 10de2 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>
   10d86:	7873      	ldrb	r3, [r6, #1]
   10d88:	2b03      	cmp	r3, #3
   10d8a:	d12a      	bne.n	10de2 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>
		return;	// No string so can simply return
	}

	strbuf->iStrings[string_index] = buf_index;	// remember our starting positio
   10d8c:	5429      	strb	r1, [r5, r0]
	uint8_t count_bytes_returned = buffer[0];
   10d8e:	7834      	ldrb	r4, [r6, #0]
	if ((buf_index + count_bytes_returned/2) >= DEVICE_STRUCT_STRING_BUF_SIZE)
   10d90:	eb01 0354 	add.w	r3, r1, r4, lsr #1
   10d94:	2b31      	cmp	r3, #49	; 0x31
   10d96:	dc27      	bgt.n	10de8 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x74>
		count_bytes_returned = (DEVICE_STRUCT_STRING_BUF_SIZE - buf_index) * 2;

	// Now copy into our storage buffer. 
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10d98:	2c02      	cmp	r4, #2
   10d9a:	d913      	bls.n	10dc4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x50>
   10d9c:	2930      	cmp	r1, #48	; 0x30
   10d9e:	d811      	bhi.n	10dc4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x50>
   10da0:	f04f 0c02 	mov.w	ip, #2
   10da4:	f10c 0202 	add.w	r2, ip, #2
   10da8:	460b      	mov	r3, r1
		strbuf->buffer[buf_index++] = buffer[i];
   10daa:	f816 e00c 	ldrb.w	lr, [r6, ip]
   10dae:	3101      	adds	r1, #1
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10db0:	fa5f fc82 	uxtb.w	ip, r2
		strbuf->buffer[buf_index++] = buffer[i];
   10db4:	442b      	add	r3, r5
   10db6:	b2c9      	uxtb	r1, r1
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10db8:	4564      	cmp	r4, ip
		strbuf->buffer[buf_index++] = buffer[i];
   10dba:	f883 e003 	strb.w	lr, [r3, #3]
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10dbe:	d901      	bls.n	10dc4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x50>
   10dc0:	2930      	cmp	r1, #48	; 0x30
   10dc2:	d9ef      	bls.n	10da4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x30>
	} 
	strbuf->buffer[buf_index] = 0;	// null terminate. 
   10dc4:	186b      	adds	r3, r5, r1
   10dc6:	2200      	movs	r2, #0
   10dc8:	70da      	strb	r2, [r3, #3]

	// Update other indexes to point to null character
	while (++string_index < 3) {
   10dca:	1c43      	adds	r3, r0, #1
   10dcc:	b2db      	uxtb	r3, r3
   10dce:	2b02      	cmp	r3, #2
   10dd0:	d807      	bhi.n	10de2 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>
		strbuf->iStrings[string_index] = buf_index;	// point to trailing NULL character
   10dd2:	f1c0 0202 	rsb	r2, r0, #2
   10dd6:	18e8      	adds	r0, r5, r3
   10dd8:	b2d2      	uxtb	r2, r2
	}
}
   10dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		strbuf->iStrings[string_index] = buf_index;	// point to trailing NULL character
   10dde:	f00a be2b 	b.w	1ba38 <memset>
}
   10de2:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t buf_index = string_index? strbuf->iStrings[string_index]+1 : 0;
   10de4:	4601      	mov	r1, r0
   10de6:	e7cd      	b.n	10d84 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x10>
		count_bytes_returned = (DEVICE_STRUCT_STRING_BUF_SIZE - buf_index) * 2;
   10de8:	f1c1 0432 	rsb	r4, r1, #50	; 0x32
   10dec:	0064      	lsls	r4, r4, #1
   10dee:	b2e4      	uxtb	r4, r4
   10df0:	e7d2      	b.n	10d98 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x24>
   10df2:	bf00      	nop

00010df4 <USBHost::claim_drivers(Device_struct*)>:
void USBHost::claim_drivers(Device_t *dev)
{
	USBDriver *driver, *prev=NULL;

	// first check if any driver wishes to claim the entire device
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10df4:	4b3f      	ldr	r3, [pc, #252]	; (10ef4 <USBHost::claim_drivers(Device_struct*)+0x100>)
{
   10df6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10dfa:	681c      	ldr	r4, [r3, #0]
{
   10dfc:	b083      	sub	sp, #12
   10dfe:	4606      	mov	r6, r0
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10e00:	2c00      	cmp	r4, #0
   10e02:	d073      	beq.n	10eec <USBHost::claim_drivers(Device_struct*)+0xf8>
	USBDriver *driver, *prev=NULL;
   10e04:	f04f 0900 	mov.w	r9, #0
   10e08:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10f00 <USBHost::claim_drivers(Device_struct*)+0x10c>
		if (driver->device != NULL) continue;
		if (driver->claim(dev, 0, enumbuf + 9, enumlen - 9)) {
   10e0c:	4f3a      	ldr	r7, [pc, #232]	; (10ef8 <USBHost::claim_drivers(Device_struct*)+0x104>)
   10e0e:	e001      	b.n	10e14 <USBHost::claim_drivers(Device_struct*)+0x20>
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10e10:	6864      	ldr	r4, [r4, #4]
   10e12:	b1a4      	cbz	r4, 10e3e <USBHost::claim_drivers(Device_struct*)+0x4a>
		if (driver->device != NULL) continue;
   10e14:	68a2      	ldr	r2, [r4, #8]
		if (driver->claim(dev, 0, enumbuf + 9, enumlen - 9)) {
   10e16:	4620      	mov	r0, r4
   10e18:	463b      	mov	r3, r7
   10e1a:	4631      	mov	r1, r6
		if (driver->device != NULL) continue;
   10e1c:	2a00      	cmp	r2, #0
   10e1e:	d1f7      	bne.n	10e10 <USBHost::claim_drivers(Device_struct*)+0x1c>
		if (driver->claim(dev, 0, enumbuf + 9, enumlen - 9)) {
   10e20:	f8b8 5000 	ldrh.w	r5, [r8]
   10e24:	f8d4 c000 	ldr.w	ip, [r4]
   10e28:	3d09      	subs	r5, #9
   10e2a:	9500      	str	r5, [sp, #0]
   10e2c:	f8dc 5000 	ldr.w	r5, [ip]
   10e30:	47a8      	blx	r5
   10e32:	2800      	cmp	r0, #0
   10e34:	d147      	bne.n	10ec6 <USBHost::claim_drivers(Device_struct*)+0xd2>
   10e36:	46a1      	mov	r9, r4
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10e38:	6864      	ldr	r4, [r4, #4]
   10e3a:	2c00      	cmp	r4, #0
   10e3c:	d1ea      	bne.n	10e14 <USBHost::claim_drivers(Device_struct*)+0x20>
		}
		prev = driver;
	}
	// parse interfaces from config descriptor
	const uint8_t *p = enumbuf + 9;
	const uint8_t *end = enumbuf + enumlen;
   10e3e:	4b2f      	ldr	r3, [pc, #188]	; (10efc <USBHost::claim_drivers(Device_struct*)+0x108>)
   10e40:	f8b8 2000 	ldrh.w	r2, [r8]
	while (p < end) {
   10e44:	f103 0509 	add.w	r5, r3, #9
	const uint8_t *end = enumbuf + enumlen;
   10e48:	eb03 0902 	add.w	r9, r3, r2
	while (p < end) {
   10e4c:	45a9      	cmp	r9, r5
   10e4e:	d803      	bhi.n	10e58 <USBHost::claim_drivers(Device_struct*)+0x64>
   10e50:	e043      	b.n	10eda <USBHost::claim_drivers(Device_struct*)+0xe6>
					// not done, may be more interface for more drivers
				}
				prev = driver;
			}
		}
		p += desclen;
   10e52:	4445      	add	r5, r8
	while (p < end) {
   10e54:	45a9      	cmp	r9, r5
   10e56:	d940      	bls.n	10eda <USBHost::claim_drivers(Device_struct*)+0xe6>
		if (desctype == 4 && desclen == 9) {
   10e58:	786b      	ldrb	r3, [r5, #1]
		uint8_t desclen = *p;
   10e5a:	f895 8000 	ldrb.w	r8, [r5]
		if (desctype == 4 && desclen == 9) {
   10e5e:	2b04      	cmp	r3, #4
   10e60:	d1f7      	bne.n	10e52 <USBHost::claim_drivers(Device_struct*)+0x5e>
   10e62:	f1b8 0f09 	cmp.w	r8, #9
   10e66:	d1f4      	bne.n	10e52 <USBHost::claim_drivers(Device_struct*)+0x5e>
			for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10e68:	4b22      	ldr	r3, [pc, #136]	; (10ef4 <USBHost::claim_drivers(Device_struct*)+0x100>)
   10e6a:	681c      	ldr	r4, [r3, #0]
   10e6c:	2c00      	cmp	r4, #0
   10e6e:	d0f0      	beq.n	10e52 <USBHost::claim_drivers(Device_struct*)+0x5e>
				if (driver->device != NULL) continue;
   10e70:	68a7      	ldr	r7, [r4, #8]
			prev = NULL;
   10e72:	f04f 0a00 	mov.w	sl, #0
				if (driver->claim(dev, 1, p, end - p)) {
   10e76:	eba9 0b05 	sub.w	fp, r9, r5
   10e7a:	4620      	mov	r0, r4
   10e7c:	462b      	mov	r3, r5
   10e7e:	2201      	movs	r2, #1
   10e80:	4631      	mov	r1, r6
				if (driver->device != NULL) continue;
   10e82:	b14f      	cbz	r7, 10e98 <USBHost::claim_drivers(Device_struct*)+0xa4>
						prev->next = driver->next;
   10e84:	6864      	ldr	r4, [r4, #4]
			for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10e86:	2c00      	cmp	r4, #0
   10e88:	d0e3      	beq.n	10e52 <USBHost::claim_drivers(Device_struct*)+0x5e>
				if (driver->device != NULL) continue;
   10e8a:	68a7      	ldr	r7, [r4, #8]
				if (driver->claim(dev, 1, p, end - p)) {
   10e8c:	4620      	mov	r0, r4
   10e8e:	462b      	mov	r3, r5
   10e90:	2201      	movs	r2, #1
   10e92:	4631      	mov	r1, r6
				if (driver->device != NULL) continue;
   10e94:	2f00      	cmp	r7, #0
   10e96:	d1f5      	bne.n	10e84 <USBHost::claim_drivers(Device_struct*)+0x90>
				if (driver->claim(dev, 1, p, end - p)) {
   10e98:	6827      	ldr	r7, [r4, #0]
   10e9a:	f8cd b000 	str.w	fp, [sp]
   10e9e:	683f      	ldr	r7, [r7, #0]
   10ea0:	47b8      	blx	r7
   10ea2:	b908      	cbnz	r0, 10ea8 <USBHost::claim_drivers(Device_struct*)+0xb4>
						prev->next = driver->next;
   10ea4:	46a2      	mov	sl, r4
   10ea6:	e7ed      	b.n	10e84 <USBHost::claim_drivers(Device_struct*)+0x90>
   10ea8:	6863      	ldr	r3, [r4, #4]
					if (prev) {
   10eaa:	f1ba 0f00 	cmp.w	sl, #0
   10eae:	d017      	beq.n	10ee0 <USBHost::claim_drivers(Device_struct*)+0xec>
						prev->next = driver->next;
   10eb0:	f8ca 3004 	str.w	r3, [sl, #4]
					driver->next = dev->drivers;
   10eb4:	68f3      	ldr	r3, [r6, #12]
   10eb6:	46a2      	mov	sl, r4
   10eb8:	6063      	str	r3, [r4, #4]
					dev->drivers = driver;
   10eba:	60f4      	str	r4, [r6, #12]
					driver->device = dev;
   10ebc:	60a6      	str	r6, [r4, #8]
   10ebe:	461c      	mov	r4, r3
			for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10ec0:	2c00      	cmp	r4, #0
   10ec2:	d1e2      	bne.n	10e8a <USBHost::claim_drivers(Device_struct*)+0x96>
   10ec4:	e7c5      	b.n	10e52 <USBHost::claim_drivers(Device_struct*)+0x5e>
				prev->next = driver->next;
   10ec6:	6863      	ldr	r3, [r4, #4]
			if (prev) {
   10ec8:	f1b9 0f00 	cmp.w	r9, #0
   10ecc:	d00b      	beq.n	10ee6 <USBHost::claim_drivers(Device_struct*)+0xf2>
				prev->next = driver->next;
   10ece:	f8c9 3004 	str.w	r3, [r9, #4]
			driver->next = NULL;
   10ed2:	2300      	movs	r3, #0
   10ed4:	e9c4 3601 	strd	r3, r6, [r4, #4]
			dev->drivers = driver;
   10ed8:	60f4      	str	r4, [r6, #12]
	}
}
   10eda:	b003      	add	sp, #12
   10edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						available_drivers = driver->next;
   10ee0:	4a04      	ldr	r2, [pc, #16]	; (10ef4 <USBHost::claim_drivers(Device_struct*)+0x100>)
   10ee2:	6013      	str	r3, [r2, #0]
   10ee4:	e7e6      	b.n	10eb4 <USBHost::claim_drivers(Device_struct*)+0xc0>
				available_drivers = driver->next;
   10ee6:	4a03      	ldr	r2, [pc, #12]	; (10ef4 <USBHost::claim_drivers(Device_struct*)+0x100>)
   10ee8:	6013      	str	r3, [r2, #0]
   10eea:	e7f2      	b.n	10ed2 <USBHost::claim_drivers(Device_struct*)+0xde>
   10eec:	f8df 8010 	ldr.w	r8, [pc, #16]	; 10f00 <USBHost::claim_drivers(Device_struct*)+0x10c>
   10ef0:	e7a5      	b.n	10e3e <USBHost::claim_drivers(Device_struct*)+0x4a>
   10ef2:	bf00      	nop
   10ef4:	2000d844 	.word	0x2000d844
   10ef8:	2000c7c9 	.word	0x2000c7c9
   10efc:	2000c7c0 	.word	0x2000c7c0
   10f00:	2000ec1c 	.word	0x2000ec1c

00010f04 <USBHost::enumeration(Transfer_struct const*)>:
{
   10f04:	b570      	push	{r4, r5, r6, lr}
   10f06:	4604      	mov	r4, r0
	if (transfer->driver) {
   10f08:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   10f0a:	b128      	cbz	r0, 10f18 <USBHost::enumeration(Transfer_struct const*)+0x14>
		transfer->driver->control(transfer);
   10f0c:	6803      	ldr	r3, [r0, #0]
   10f0e:	4a98      	ldr	r2, [pc, #608]	; (11170 <USBHost::enumeration(Transfer_struct const*)+0x26c>)
   10f10:	685b      	ldr	r3, [r3, #4]
   10f12:	4293      	cmp	r3, r2
   10f14:	d117      	bne.n	10f46 <USBHost::enumeration(Transfer_struct const*)+0x42>
}
   10f16:	bd70      	pop	{r4, r5, r6, pc}
	dev = transfer->pipe->device;
   10f18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (enumbuf[2]) dev->enum_state = 9;
   10f1a:	4e96      	ldr	r6, [pc, #600]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
	dev = transfer->pipe->device;
   10f1c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
		switch (dev->enum_state) {
   10f1e:	7e2b      	ldrb	r3, [r5, #24]
   10f20:	2b0e      	cmp	r3, #14
   10f22:	d8f8      	bhi.n	10f16 <USBHost::enumeration(Transfer_struct const*)+0x12>
   10f24:	e8df f013 	tbh	[pc, r3, lsl #1]
   10f28:	0044001c 	.word	0x0044001c
   10f2c:	0071005a 	.word	0x0071005a
   10f30:	0088007e 	.word	0x0088007e
   10f34:	00a6009b 	.word	0x00a6009b
   10f38:	010100f5 	.word	0x010100f5
   10f3c:	00bf00b9 	.word	0x00bf00b9
   10f40:	00e100cd 	.word	0x00e100cd
   10f44:	0013      	.short	0x0013
		transfer->driver->control(transfer);
   10f46:	4621      	mov	r1, r4
}
   10f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		transfer->driver->control(transfer);
   10f4c:	4718      	bx	r3
			claim_drivers(dev);
   10f4e:	4628      	mov	r0, r5
   10f50:	f7ff ff50 	bl	10df4 <USBHost::claim_drivers(Device_struct*)>
			dev->enum_state = 15;
   10f54:	210f      	movs	r1, #15
			USBHost::enumeration_busy = false;
   10f56:	4b88      	ldr	r3, [pc, #544]	; (11178 <USBHost::enumeration(Transfer_struct const*)+0x274>)
   10f58:	2200      	movs	r2, #0
			dev->enum_state = 15;
   10f5a:	7629      	strb	r1, [r5, #24]
			USBHost::enumeration_busy = false;
   10f5c:	701a      	strb	r2, [r3, #0]
}
   10f5e:	bd70      	pop	{r4, r5, r6, pc}
			pipe_set_maxlen(dev->control_pipe, enumbuf[7]);
   10f60:	682a      	ldr	r2, [r5, #0]
   10f62:	4984      	ldr	r1, [pc, #528]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
	}
}

static void pipe_set_maxlen(Pipe_t *pipe, uint32_t maxlen)
{
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   10f64:	6850      	ldr	r0, [r2, #4]
   10f66:	4b85      	ldr	r3, [pc, #532]	; (1117c <USBHost::enumeration(Transfer_struct const*)+0x278>)
			pipe_set_maxlen(dev->control_pipe, enumbuf[7]);
   10f68:	79c9      	ldrb	r1, [r1, #7]
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   10f6a:	4003      	ands	r3, r0
	uint32_t addr = last_assigned_address;
   10f6c:	4c84      	ldr	r4, [pc, #528]	; (11180 <USBHost::enumeration(Transfer_struct const*)+0x27c>)
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   10f6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	for (Device_t *p = devlist; p; p = p->next) {
   10f72:	4984      	ldr	r1, [pc, #528]	; (11184 <USBHost::enumeration(Transfer_struct const*)+0x280>)
	uint32_t addr = last_assigned_address;
   10f74:	7820      	ldrb	r0, [r4, #0]
	for (Device_t *p = devlist; p; p = p->next) {
   10f76:	6809      	ldr	r1, [r1, #0]
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   10f78:	6053      	str	r3, [r2, #4]
		if (++addr > 127) addr = 1;
   10f7a:	3001      	adds	r0, #1
   10f7c:	2880      	cmp	r0, #128	; 0x80
   10f7e:	bf28      	it	cs
   10f80:	2001      	movcs	r0, #1
	for (Device_t *p = devlist; p; p = p->next) {
   10f82:	b131      	cbz	r1, 10f92 <USBHost::enumeration(Transfer_struct const*)+0x8e>
   10f84:	460b      	mov	r3, r1
		if (p->address == addr) return true;
   10f86:	7d5a      	ldrb	r2, [r3, #21]
   10f88:	4282      	cmp	r2, r0
   10f8a:	d0f6      	beq.n	10f7a <USBHost::enumeration(Transfer_struct const*)+0x76>
	for (Device_t *p = devlist; p; p = p->next) {
   10f8c:	689b      	ldr	r3, [r3, #8]
   10f8e:	2b00      	cmp	r3, #0
   10f90:	d1f9      	bne.n	10f86 <USBHost::enumeration(Transfer_struct const*)+0x82>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   10f92:	0403      	lsls	r3, r0, #16
   10f94:	497c      	ldr	r1, [pc, #496]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			last_assigned_address = addr;
   10f96:	7020      	strb	r0, [r4, #0]
			queue_Control_Transfer(dev, &enumsetup, NULL, NULL);
   10f98:	4628      	mov	r0, r5
   10f9a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
   10f9e:	600b      	str	r3, [r1, #0]
        s.word2 = wIndex | (wLength << 16);
   10fa0:	2300      	movs	r3, #0
   10fa2:	461a      	mov	r2, r3
   10fa4:	604b      	str	r3, [r1, #4]
   10fa6:	f7ff f847 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 1;
   10faa:	2301      	movs	r3, #1
   10fac:	762b      	strb	r3, [r5, #24]
}
   10fae:	bd70      	pop	{r4, r5, r6, pc}
			dev->address = enumsetup.wValue;
   10fb0:	4975      	ldr	r1, [pc, #468]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
   10fb2:	f44f 1490 	mov.w	r4, #1179648	; 0x120000
			pipe_set_addr(dev->control_pipe, enumsetup.wValue);
   10fb6:	682a      	ldr	r2, [r5, #0]
			dev->address = enumsetup.wValue;
   10fb8:	8848      	ldrh	r0, [r1, #2]
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   10fba:	4b74      	ldr	r3, [pc, #464]	; (1118c <USBHost::enumeration(Transfer_struct const*)+0x288>)
   10fbc:	7568      	strb	r0, [r5, #21]
   10fbe:	600b      	str	r3, [r1, #0]
}

static void pipe_set_addr(Pipe_t *pipe, uint32_t addr)
{
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xFFFFFF80) | addr;
   10fc0:	6853      	ldr	r3, [r2, #4]
   10fc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   10fc6:	4303      	orrs	r3, r0
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   10fc8:	4628      	mov	r0, r5
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xFFFFFF80) | addr;
   10fca:	6053      	str	r3, [r2, #4]
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   10fcc:	2300      	movs	r3, #0
   10fce:	4a69      	ldr	r2, [pc, #420]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
        s.word2 = wIndex | (wLength << 16);
   10fd0:	604c      	str	r4, [r1, #4]
   10fd2:	f7ff f831 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 2;
   10fd6:	2302      	movs	r3, #2
   10fd8:	762b      	strb	r3, [r5, #24]
}
   10fda:	bd70      	pop	{r4, r5, r6, pc}
			enumbuf[1] = enumbuf[15];
   10fdc:	7bf2      	ldrb	r2, [r6, #15]
			enumbuf[0] = enumbuf[14];
   10fde:	7bb3      	ldrb	r3, [r6, #14]
			enumbuf[1] = enumbuf[15];
   10fe0:	7072      	strb	r2, [r6, #1]
			enumbuf[0] = enumbuf[14];
   10fe2:	7033      	strb	r3, [r6, #0]
			if ((enumbuf[0] | enumbuf[1] | enumbuf[2]) > 0) {
   10fe4:	4313      	orrs	r3, r2
			enumbuf[2] = enumbuf[16];
   10fe6:	7c32      	ldrb	r2, [r6, #16]
			dev->bDeviceClass = enumbuf[4];
   10fe8:	7931      	ldrb	r1, [r6, #4]
   10fea:	4313      	orrs	r3, r2
			enumbuf[2] = enumbuf[16];
   10fec:	70b2      	strb	r2, [r6, #2]
			dev->bDeviceSubClass = enumbuf[5];
   10fee:	7972      	ldrb	r2, [r6, #5]
   10ff0:	bf14      	ite	ne
   10ff2:	2303      	movne	r3, #3
   10ff4:	230b      	moveq	r3, #11
   10ff6:	76aa      	strb	r2, [r5, #26]
			dev->bDeviceProtocol = enumbuf[6];
   10ff8:	79b2      	ldrb	r2, [r6, #6]
			dev->bDeviceClass = enumbuf[4];
   10ffa:	7669      	strb	r1, [r5, #25]
			dev->bDeviceProtocol = enumbuf[6];
   10ffc:	76ea      	strb	r2, [r5, #27]
			dev->idVendor = enumbuf[8] | (enumbuf[9] << 8);
   10ffe:	8932      	ldrh	r2, [r6, #8]
				dev->enum_state = 11;
   11000:	762b      	strb	r3, [r5, #24]
			dev->idVendor = enumbuf[8] | (enumbuf[9] << 8);
   11002:	83ea      	strh	r2, [r5, #30]
			dev->idProduct = enumbuf[10] | (enumbuf[11] << 8);
   11004:	8972      	ldrh	r2, [r6, #10]
   11006:	842a      	strh	r2, [r5, #32]
			if ((enumbuf[0] | enumbuf[1] | enumbuf[2]) > 0) {
   11008:	e789      	b.n	10f1e <USBHost::enumeration(Transfer_struct const*)+0x1a>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1100a:	495f      	ldr	r1, [pc, #380]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   1100c:	2300      	movs	r3, #0
   1100e:	4860      	ldr	r0, [pc, #384]	; (11190 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
        s.word2 = wIndex | (wLength << 16);
   11010:	4a60      	ldr	r2, [pc, #384]	; (11194 <USBHost::enumeration(Transfer_struct const*)+0x290>)
   11012:	e9c1 0200 	strd	r0, r2, [r1]
   11016:	4a60      	ldr	r2, [pc, #384]	; (11198 <USBHost::enumeration(Transfer_struct const*)+0x294>)
   11018:	4628      	mov	r0, r5
   1101a:	f7ff f80d 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 4;
   1101e:	2304      	movs	r3, #4
   11020:	762b      	strb	r3, [r5, #24]
}
   11022:	bd70      	pop	{r4, r5, r6, pc}
			if (enumbuf[4] < 4 || enumbuf[5] != 3) {
   11024:	7933      	ldrb	r3, [r6, #4]
   11026:	2b03      	cmp	r3, #3
   11028:	d903      	bls.n	11032 <USBHost::enumeration(Transfer_struct const*)+0x12e>
   1102a:	7973      	ldrb	r3, [r6, #5]
   1102c:	2b03      	cmp	r3, #3
   1102e:	f000 8096 	beq.w	1115e <USBHost::enumeration(Transfer_struct const*)+0x25a>
			break;
   11032:	230b      	movs	r3, #11
				dev->enum_state = 11;
   11034:	762b      	strb	r3, [r5, #24]
   11036:	e772      	b.n	10f1e <USBHost::enumeration(Transfer_struct const*)+0x1a>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11038:	4a4e      	ldr	r2, [pc, #312]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   1103a:	4b55      	ldr	r3, [pc, #340]	; (11190 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
   1103c:	f812 0b04 	ldrb.w	r0, [r2], #4
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[0], dev->LanguageID, len);
   11040:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   11042:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
        s.word2 = wIndex | (wLength << 16);
   11046:	4853      	ldr	r0, [pc, #332]	; (11194 <USBHost::enumeration(Transfer_struct const*)+0x290>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11048:	494f      	ldr	r1, [pc, #316]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   1104a:	4320      	orrs	r0, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1104c:	600b      	str	r3, [r1, #0]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   1104e:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   11050:	6048      	str	r0, [r1, #4]
   11052:	4628      	mov	r0, r5
   11054:	f7fe fff0 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 6;
   11058:	2306      	movs	r3, #6
   1105a:	762b      	strb	r3, [r5, #24]
}
   1105c:	bd70      	pop	{r4, r5, r6, pc}
			convertStringDescriptorToASCIIString(0, dev, transfer);
   1105e:	4622      	mov	r2, r4
   11060:	4629      	mov	r1, r5
   11062:	2000      	movs	r0, #0
   11064:	f7ff fe86 	bl	10d74 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>
			if (enumbuf[1]) dev->enum_state = 7;
   11068:	7873      	ldrb	r3, [r6, #1]
   1106a:	2b00      	cmp	r3, #0
   1106c:	d056      	beq.n	1111c <USBHost::enumeration(Transfer_struct const*)+0x218>
   1106e:	2307      	movs	r3, #7
				dev->enum_state = 11;
   11070:	762b      	strb	r3, [r5, #24]
   11072:	e754      	b.n	10f1e <USBHost::enumeration(Transfer_struct const*)+0x1a>
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[1], dev->LanguageID, len);
   11074:	4a3f      	ldr	r2, [pc, #252]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11076:	4b46      	ldr	r3, [pc, #280]	; (11190 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
   11078:	7850      	ldrb	r0, [r2, #1]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   1107a:	3204      	adds	r2, #4
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[1], dev->LanguageID, len);
   1107c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1107e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
        s.word2 = wIndex | (wLength << 16);
   11082:	4844      	ldr	r0, [pc, #272]	; (11194 <USBHost::enumeration(Transfer_struct const*)+0x290>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11084:	4940      	ldr	r1, [pc, #256]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   11086:	4320      	orrs	r0, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11088:	600b      	str	r3, [r1, #0]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   1108a:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   1108c:	6048      	str	r0, [r1, #4]
   1108e:	4628      	mov	r0, r5
   11090:	f7fe ffd2 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 8;
   11094:	2308      	movs	r3, #8
   11096:	762b      	strb	r3, [r5, #24]
}
   11098:	bd70      	pop	{r4, r5, r6, pc}
			convertStringDescriptorToASCIIString(2, dev, transfer);
   1109a:	4622      	mov	r2, r4
   1109c:	4629      	mov	r1, r5
   1109e:	2002      	movs	r0, #2
   110a0:	f7ff fe68 	bl	10d74 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>
   110a4:	e7c5      	b.n	11032 <USBHost::enumeration(Transfer_struct const*)+0x12e>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   110a6:	4938      	ldr	r1, [pc, #224]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   110a8:	f44f 2210 	mov.w	r2, #589824	; 0x90000
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   110ac:	483b      	ldr	r0, [pc, #236]	; (1119c <USBHost::enumeration(Transfer_struct const*)+0x298>)
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   110ae:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   110b0:	e9c1 0200 	strd	r0, r2, [r1]
   110b4:	4a2f      	ldr	r2, [pc, #188]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   110b6:	4628      	mov	r0, r5
   110b8:	f7fe ffbe 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 12;
   110bc:	230c      	movs	r3, #12
   110be:	762b      	strb	r3, [r5, #24]
}
   110c0:	bd70      	pop	{r4, r5, r6, pc}
			enumlen = enumbuf[2] | (enumbuf[3] << 8);
   110c2:	4b2c      	ldr	r3, [pc, #176]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   110c4:	885b      	ldrh	r3, [r3, #2]
			if (enumlen > sizeof(enumbuf)) {
   110c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   110ca:	d841      	bhi.n	11150 <USBHost::enumeration(Transfer_struct const*)+0x24c>
			enumlen = enumbuf[2] | (enumbuf[3] << 8);
   110cc:	4a34      	ldr	r2, [pc, #208]	; (111a0 <USBHost::enumeration(Transfer_struct const*)+0x29c>)
   110ce:	0418      	lsls	r0, r3, #16
   110d0:	8013      	strh	r3, [r2, #0]
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   110d2:	492d      	ldr	r1, [pc, #180]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   110d4:	2300      	movs	r3, #0
   110d6:	4a31      	ldr	r2, [pc, #196]	; (1119c <USBHost::enumeration(Transfer_struct const*)+0x298>)
        s.word2 = wIndex | (wLength << 16);
   110d8:	e9c1 2000 	strd	r2, r0, [r1]
   110dc:	4a25      	ldr	r2, [pc, #148]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   110de:	4628      	mov	r0, r5
   110e0:	f7fe ffaa 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 13;
   110e4:	230d      	movs	r3, #13
   110e6:	762b      	strb	r3, [r5, #24]
}
   110e8:	bd70      	pop	{r4, r5, r6, pc}
			dev->bmAttributes = enumbuf[7];
   110ea:	4822      	ldr	r0, [pc, #136]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   110ec:	2300      	movs	r3, #0
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   110ee:	4926      	ldr	r1, [pc, #152]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			mk_setup(enumsetup, 0, 9, enumbuf[5], 0, 0); // 9=SET_CONFIGURATION
   110f0:	7942      	ldrb	r2, [r0, #5]
			dev->bmAttributes = enumbuf[7];
   110f2:	79c4      	ldrb	r4, [r0, #7]
   110f4:	0412      	lsls	r2, r2, #16
			dev->bMaxPower = enumbuf[8];
   110f6:	7a00      	ldrb	r0, [r0, #8]
			dev->bmAttributes = enumbuf[7];
   110f8:	772c      	strb	r4, [r5, #28]
   110fa:	f442 6210 	orr.w	r2, r2, #2304	; 0x900
			dev->bMaxPower = enumbuf[8];
   110fe:	7768      	strb	r0, [r5, #29]
			queue_Control_Transfer(dev, &enumsetup, NULL, NULL);
   11100:	4628      	mov	r0, r5
        s.word2 = wIndex | (wLength << 16);
   11102:	604b      	str	r3, [r1, #4]
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11104:	600a      	str	r2, [r1, #0]
   11106:	461a      	mov	r2, r3
   11108:	f7fe ff96 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 14;
   1110c:	230e      	movs	r3, #14
   1110e:	762b      	strb	r3, [r5, #24]
}
   11110:	bd70      	pop	{r4, r5, r6, pc}
			convertStringDescriptorToASCIIString(1, dev, transfer);
   11112:	4622      	mov	r2, r4
   11114:	4629      	mov	r1, r5
   11116:	2001      	movs	r0, #1
   11118:	f7ff fe2c 	bl	10d74 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>
			if (enumbuf[2]) dev->enum_state = 9;
   1111c:	78b3      	ldrb	r3, [r6, #2]
   1111e:	2b00      	cmp	r3, #0
   11120:	bf0c      	ite	eq
   11122:	230b      	moveq	r3, #11
   11124:	2309      	movne	r3, #9
				dev->enum_state = 11;
   11126:	762b      	strb	r3, [r5, #24]
   11128:	e6f9      	b.n	10f1e <USBHost::enumeration(Transfer_struct const*)+0x1a>
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[2], dev->LanguageID, len);
   1112a:	4a12      	ldr	r2, [pc, #72]	; (11174 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   1112c:	4b18      	ldr	r3, [pc, #96]	; (11190 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
   1112e:	7890      	ldrb	r0, [r2, #2]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   11130:	3204      	adds	r2, #4
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[2], dev->LanguageID, len);
   11132:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   11134:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
        s.word2 = wIndex | (wLength << 16);
   11138:	4816      	ldr	r0, [pc, #88]	; (11194 <USBHost::enumeration(Transfer_struct const*)+0x290>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1113a:	4913      	ldr	r1, [pc, #76]	; (11188 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   1113c:	4320      	orrs	r0, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1113e:	600b      	str	r3, [r1, #0]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   11140:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   11142:	6048      	str	r0, [r1, #4]
   11144:	4628      	mov	r0, r5
   11146:	f7fe ff77 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 10;
   1114a:	230a      	movs	r3, #10
   1114c:	762b      	strb	r3, [r5, #24]
}
   1114e:	bd70      	pop	{r4, r5, r6, pc}
				enumlen = sizeof(enumbuf);
   11150:	4b13      	ldr	r3, [pc, #76]	; (111a0 <USBHost::enumeration(Transfer_struct const*)+0x29c>)
   11152:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11156:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1115a:	801a      	strh	r2, [r3, #0]
   1115c:	e7b9      	b.n	110d2 <USBHost::enumeration(Transfer_struct const*)+0x1ce>
				dev->LanguageID = enumbuf[6] | (enumbuf[7] << 8);
   1115e:	88f2      	ldrh	r2, [r6, #6]
				if (enumbuf[0]) dev->enum_state = 5;
   11160:	7833      	ldrb	r3, [r6, #0]
				dev->LanguageID = enumbuf[6] | (enumbuf[7] << 8);
   11162:	846a      	strh	r2, [r5, #34]	; 0x22
				if (enumbuf[0]) dev->enum_state = 5;
   11164:	2b00      	cmp	r3, #0
   11166:	f43f af7f 	beq.w	11068 <USBHost::enumeration(Transfer_struct const*)+0x164>
   1116a:	2305      	movs	r3, #5
				dev->enum_state = 11;
   1116c:	762b      	strb	r3, [r5, #24]
   1116e:	e6d6      	b.n	10f1e <USBHost::enumeration(Transfer_struct const*)+0x1a>
   11170:	0000fb51 	.word	0x0000fb51
   11174:	2000c7c0 	.word	0x2000c7c0
   11178:	2000ec2c 	.word	0x2000ec2c
   1117c:	f800ffff 	.word	0xf800ffff
   11180:	2000ec2e 	.word	0x2000ec2e
   11184:	2000d85c 	.word	0x2000d85c
   11188:	2000cfc0 	.word	0x2000cfc0
   1118c:	01000680 	.word	0x01000680
   11190:	03000680 	.word	0x03000680
   11194:	07fc0000 	.word	0x07fc0000
   11198:	2000c7c4 	.word	0x2000c7c4
   1119c:	02000680 	.word	0x02000680
   111a0:	2000ec1c 	.word	0x2000ec1c

000111a4 <USBHost::disconnect_Device(Device_struct*)>:
}


void USBHost::disconnect_Device(Device_t *dev)
{
	if (!dev) return;
   111a4:	2800      	cmp	r0, #0
   111a6:	d037      	beq.n	11218 <USBHost::disconnect_Device(Device_struct*)+0x74>
{
   111a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Disconnect all drivers using this device.  If this device is
	// a hub, the hub driver is responsible for recursively calling
	// this function to disconnect its downstream devices.
	print_driverlist("available_drivers", available_drivers);
	print_driverlist("dev->drivers", dev->drivers);
   111aa:	68c4      	ldr	r4, [r0, #12]
	for (USBDriver *p = dev->drivers; p; ) {
   111ac:	4606      	mov	r6, r0
   111ae:	b16c      	cbz	r4, 111cc <USBHost::disconnect_Device(Device_struct*)+0x28>
   111b0:	4d1a      	ldr	r5, [pc, #104]	; (1121c <USBHost::disconnect_Device(Device_struct*)+0x78>)
		println("disconnect driver ", (uint32_t)p, HEX);
		p->disconnect();
		p->device = NULL;
   111b2:	2700      	movs	r7, #0
		p->disconnect();
   111b4:	6823      	ldr	r3, [r4, #0]
   111b6:	4620      	mov	r0, r4
   111b8:	691b      	ldr	r3, [r3, #16]
   111ba:	4798      	blx	r3
		p->device = NULL;
   111bc:	4623      	mov	r3, r4
		USBDriver *next = p->next;
		p->next = available_drivers;
   111be:	682a      	ldr	r2, [r5, #0]
		p->device = NULL;
   111c0:	60a7      	str	r7, [r4, #8]
		USBDriver *next = p->next;
   111c2:	6864      	ldr	r4, [r4, #4]
		available_drivers = p;
   111c4:	602b      	str	r3, [r5, #0]
		p->next = available_drivers;
   111c6:	605a      	str	r2, [r3, #4]
	for (USBDriver *p = dev->drivers; p; ) {
   111c8:	2c00      	cmp	r4, #0
   111ca:	d1f3      	bne.n	111b4 <USBHost::disconnect_Device(Device_struct*)+0x10>
		p = next;
	}
	print_driverlist("available_drivers", available_drivers);

	// delete all the pipes
	for (Pipe_t *p = dev->data_pipes; p; ) {
   111cc:	6874      	ldr	r4, [r6, #4]
   111ce:	b12c      	cbz	r4, 111dc <USBHost::disconnect_Device(Device_struct*)+0x38>
		Pipe_t *next = p->next;
   111d0:	4620      	mov	r0, r4
   111d2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		delete_Pipe(p);
   111d4:	f7ff fc42 	bl	10a5c <USBHost::delete_Pipe(Pipe_struct*)>
	for (Pipe_t *p = dev->data_pipes; p; ) {
   111d8:	2c00      	cmp	r4, #0
   111da:	d1f9      	bne.n	111d0 <USBHost::disconnect_Device(Device_struct*)+0x2c>
		p = next;
	}
	delete_Pipe(dev->control_pipe);
   111dc:	6830      	ldr	r0, [r6, #0]
   111de:	f7ff fc3d 	bl	10a5c <USBHost::delete_Pipe(Pipe_struct*)>

	// remove device from devlist and free its Device_t
	Device_t *prev_dev = NULL;
	for (Device_t *p = devlist; p; p = p->next) {
   111e2:	4b0f      	ldr	r3, [pc, #60]	; (11220 <USBHost::disconnect_Device(Device_struct*)+0x7c>)
   111e4:	681c      	ldr	r4, [r3, #0]
   111e6:	b144      	cbz	r4, 111fa <USBHost::disconnect_Device(Device_struct*)+0x56>
		if (p == dev) {
   111e8:	42a6      	cmp	r6, r4
   111ea:	d102      	bne.n	111f2 <USBHost::disconnect_Device(Device_struct*)+0x4e>
   111ec:	e011      	b.n	11212 <USBHost::disconnect_Device(Device_struct*)+0x6e>
   111ee:	42a6      	cmp	r6, r4
   111f0:	d004      	beq.n	111fc <USBHost::disconnect_Device(Device_struct*)+0x58>
	for (Device_t *p = devlist; p; p = p->next) {
   111f2:	4623      	mov	r3, r4
   111f4:	68a4      	ldr	r4, [r4, #8]
   111f6:	2c00      	cmp	r4, #0
   111f8:	d1f9      	bne.n	111ee <USBHost::disconnect_Device(Device_struct*)+0x4a>
			free_Device(p);
			break;
		}
		prev_dev = p;
	}
}
   111fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prev_dev->next = p->next;
   111fc:	68a2      	ldr	r2, [r4, #8]
   111fe:	609a      	str	r2, [r3, #8]
			if (p->strbuf != nullptr ) {
   11200:	6920      	ldr	r0, [r4, #16]
   11202:	b108      	cbz	r0, 11208 <USBHost::disconnect_Device(Device_struct*)+0x64>
				free_string_buffer(p->strbuf);
   11204:	f003 fe90 	bl	14f28 <USBHost::free_string_buffer(strbuf_t*)>
			free_Device(p);
   11208:	4620      	mov	r0, r4
}
   1120a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			free_Device(p);
   1120e:	f003 be55 	b.w	14ebc <USBHost::free_Device(Device_struct*)>
				devlist = p->next;
   11212:	68a2      	ldr	r2, [r4, #8]
   11214:	601a      	str	r2, [r3, #0]
   11216:	e7f3      	b.n	11200 <USBHost::disconnect_Device(Device_struct*)+0x5c>
   11218:	4770      	bx	lr
   1121a:	bf00      	nop
   1121c:	2000d844 	.word	0x2000d844
   11220:	2000d85c 	.word	0x2000d85c

00011224 <USBHIDParser::disconnect()>:
}

// When the device goes away, we need to call disconnect_collection()
// for all drivers which claimed a top level collection
void USBHIDParser::disconnect()
{
   11224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uint32_t i=0; i < TOPUSAGE_LIST_LEN; i++) {
		USBHIDInput *driver = topusage_drivers[i];
		if (driver) {
			driver->disconnect_collection(device);
			topusage_drivers[i] = NULL;
   11226:	2700      	movs	r7, #0
{
   11228:	4605      	mov	r5, r0
   1122a:	f100 0410 	add.w	r4, r0, #16
   1122e:	f100 0628 	add.w	r6, r0, #40	; 0x28
		USBHIDInput *driver = topusage_drivers[i];
   11232:	f854 3f04 	ldr.w	r3, [r4, #4]!
			driver->disconnect_collection(device);
   11236:	4618      	mov	r0, r3
		if (driver) {
   11238:	b123      	cbz	r3, 11244 <USBHIDParser::disconnect()+0x20>
			driver->disconnect_collection(device);
   1123a:	681b      	ldr	r3, [r3, #0]
   1123c:	68a9      	ldr	r1, [r5, #8]
   1123e:	69db      	ldr	r3, [r3, #28]
   11240:	4798      	blx	r3
			topusage_drivers[i] = NULL;
   11242:	6027      	str	r7, [r4, #0]
	for (uint32_t i=0; i < TOPUSAGE_LIST_LEN; i++) {
   11244:	42b4      	cmp	r4, r6
   11246:	d1f4      	bne.n	11232 <USBHIDParser::disconnect()+0xe>
		}
	}
}
   11248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1124a:	bf00      	nop

0001124c <bitfield(unsigned char const*, unsigned long, unsigned long)>:
// Extract 1 to 32 bits from the data array, starting at bitindex.
static uint32_t bitfield(const uint8_t *data, uint32_t bitindex, uint32_t numbits)
{
	uint32_t output = 0;
	uint32_t bitcount = 0;
	data += (bitindex >> 3);
   1124c:	08cb      	lsrs	r3, r1, #3
   1124e:	eb00 0cd1 	add.w	ip, r0, r1, lsr #3
	uint32_t offset = bitindex & 7;
	if (offset) {
   11252:	f011 0107 	ands.w	r1, r1, #7
   11256:	d018      	beq.n	1128a <bitfield(unsigned char const*, unsigned long, unsigned long)+0x3e>
		output = (*data++) >> offset;
   11258:	5cc0      	ldrb	r0, [r0, r3]
   1125a:	f10c 0c01 	add.w	ip, ip, #1
   1125e:	4108      	asrs	r0, r1
		bitcount = 8 - offset;
   11260:	f1c1 0108 	rsb	r1, r1, #8
	}
	while (bitcount < numbits) {
   11264:	4291      	cmp	r1, r2
   11266:	d207      	bcs.n	11278 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x2c>
		output |= (uint32_t)(*data++) << bitcount;
   11268:	f81c 3b01 	ldrb.w	r3, [ip], #1
   1126c:	408b      	lsls	r3, r1
		bitcount += 8;
   1126e:	3108      	adds	r1, #8
	while (bitcount < numbits) {
   11270:	428a      	cmp	r2, r1
		output |= (uint32_t)(*data++) << bitcount;
   11272:	ea40 0003 	orr.w	r0, r0, r3
	while (bitcount < numbits) {
   11276:	d8f7      	bhi.n	11268 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x1c>
	}
	if (bitcount > numbits && numbits < 32) {
   11278:	428a      	cmp	r2, r1
   1127a:	d208      	bcs.n	1128e <bitfield(unsigned char const*, unsigned long, unsigned long)+0x42>
   1127c:	2a1f      	cmp	r2, #31
   1127e:	d806      	bhi.n	1128e <bitfield(unsigned char const*, unsigned long, unsigned long)+0x42>
		output &= ((1 << numbits) - 1);
   11280:	2301      	movs	r3, #1
   11282:	4093      	lsls	r3, r2
   11284:	3b01      	subs	r3, #1
   11286:	4018      	ands	r0, r3
	}
	return output;
   11288:	4770      	bx	lr
	while (bitcount < numbits) {
   1128a:	b90a      	cbnz	r2, 11290 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x44>
	uint32_t output = 0;
   1128c:	4610      	mov	r0, r2
}
   1128e:	4770      	bx	lr
	uint32_t output = 0;
   11290:	4608      	mov	r0, r1
   11292:	e7e9      	b.n	11268 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x1c>

00011294 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)>:
{
   11294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11298:	b085      	sub	sp, #20
   1129a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (len < 9+9+7) return false;
   1129c:	2f18      	cmp	r7, #24
   1129e:	d903      	bls.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   112a0:	3a01      	subs	r2, #1
   112a2:	bf18      	it	ne
   112a4:	2201      	movne	r2, #1
   112a6:	b11a      	cbz	r2, 112b0 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1c>
   112a8:	2000      	movs	r0, #0
}
   112aa:	b005      	add	sp, #20
   112ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112b0:	461c      	mov	r4, r3
	uint32_t numendpoint = descriptors[4];
   112b2:	791b      	ldrb	r3, [r3, #4]
   112b4:	460e      	mov	r6, r1
	if (numendpoint < 1 || numendpoint > 2) return false;
   112b6:	1e59      	subs	r1, r3, #1
   112b8:	2901      	cmp	r1, #1
   112ba:	d8f5      	bhi.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (descriptors[5] != 3) return false; // bInterfaceClass, 3 = HID
   112bc:	7961      	ldrb	r1, [r4, #5]
   112be:	2903      	cmp	r1, #3
   112c0:	d1f2      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   112c2:	4605      	mov	r5, r0
	uint32_t hidlen = descriptors[9];
   112c4:	7a60      	ldrb	r0, [r4, #9]
	if (hidlen < 9) return false;
   112c6:	2808      	cmp	r0, #8
   112c8:	d9ee      	bls.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (descriptors[10] != 33) return false; // descriptor type, 33=HID
   112ca:	f894 c00a 	ldrb.w	ip, [r4, #10]
   112ce:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
   112d2:	d1e9      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (descriptors[14] < 1) return false;  // must be at least 1 extra descriptor
   112d4:	f894 c00e 	ldrb.w	ip, [r4, #14]
   112d8:	f1bc 0f00 	cmp.w	ip, #0
   112dc:	d0e4      	beq.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (hidlen != (uint32_t)(6 + descriptors[14] * 3)) return false; // must be correct size
   112de:	f04f 0e06 	mov.w	lr, #6
   112e2:	fb11 e10c 	smlabb	r1, r1, ip, lr
   112e6:	4281      	cmp	r1, r0
   112e8:	d1de      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (9 + hidlen > len) return false;
   112ea:	f100 0809 	add.w	r8, r0, #9
   112ee:	4547      	cmp	r7, r8
   112f0:	d3da      	bcc.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   112f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   112f6:	f104 0e0f 	add.w	lr, r4, #15
   112fa:	e002      	b.n	11302 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x6e>
		if (i >= descriptors[14]) return false;
   112fc:	3203      	adds	r2, #3
   112fe:	4594      	cmp	ip, r2
   11300:	d0d2      	beq.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[15 + i * 3] == 34) { // found HID report descriptor
   11302:	f81e 1002 	ldrb.w	r1, [lr, r2]
   11306:	2922      	cmp	r1, #34	; 0x22
   11308:	d1f8      	bne.n	112fc <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x68>
			descsize = descriptors[16 + i * 3] | (descriptors[17 + i * 3] << 8);
   1130a:	4422      	add	r2, r4
	if (descsize > _big_buffer_size) return false; // can't fit the report descriptor
   1130c:	f8b5 173c 	ldrh.w	r1, [r5, #1852]	; 0x73c
			descsize = descriptors[16 + i * 3] | (descriptors[17 + i * 3] << 8);
   11310:	f892 c011 	ldrb.w	ip, [r2, #17]
   11314:	7c12      	ldrb	r2, [r2, #16]
   11316:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
	if (descsize > _big_buffer_size) return false; // can't fit the report descriptor
   1131a:	4291      	cmp	r1, r2
			descsize = descriptors[16 + i * 3] | (descriptors[17 + i * 3] << 8);
   1131c:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	if (descsize > _big_buffer_size) return false; // can't fit the report descriptor
   11320:	d3c2      	bcc.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (len < offset + numendpoint * 7) return false; // not enough data
   11322:	2207      	movs	r2, #7
   11324:	fb12 8203 	smlabb	r2, r2, r3, r8
   11328:	4297      	cmp	r7, r2
   1132a:	d3bd      	bcc.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (numendpoint == 1) {
   1132c:	2b01      	cmp	r3, #1
   1132e:	d07a      	beq.n	11426 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x192>
		if (descriptors[offset] != 7) return false;
   11330:	f814 3008 	ldrb.w	r3, [r4, r8]
   11334:	2b07      	cmp	r3, #7
   11336:	d1b7      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+1] != 5) return false; // endpoint descriptor
   11338:	4420      	add	r0, r4
   1133a:	7a83      	ldrb	r3, [r0, #10]
   1133c:	2b05      	cmp	r3, #5
   1133e:	d1b3      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+3] != 3) return false; // must be interrupt type
   11340:	7b03      	ldrb	r3, [r0, #12]
   11342:	2b03      	cmp	r3, #3
   11344:	d1b0      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t endpoint1 = descriptors[offset+2];
   11346:	f890 a00b 	ldrb.w	sl, [r0, #11]
		uint32_t interval1 = descriptors[offset+6];
   1134a:	7bc3      	ldrb	r3, [r0, #15]
		if ((endpoint1 & 0x0F) == 0) return false;
   1134c:	f01a 020f 	ands.w	r2, sl, #15
		uint32_t size1 = descriptors[offset+4] | (descriptors[offset+5] << 8);
   11350:	7b47      	ldrb	r7, [r0, #13]
   11352:	f890 e00e 	ldrb.w	lr, [r0, #14]
		uint32_t interval1 = descriptors[offset+6];
   11356:	9302      	str	r3, [sp, #8]
		if ((endpoint1 & 0x0F) == 0) return false;
   11358:	d0a6      	beq.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+7] != 7) return false;
   1135a:	7c03      	ldrb	r3, [r0, #16]
   1135c:	2b07      	cmp	r3, #7
   1135e:	d1a3      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+8] != 5) return false; // endpoint descriptor
   11360:	7c43      	ldrb	r3, [r0, #17]
   11362:	2b05      	cmp	r3, #5
   11364:	d1a0      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+10] != 3) return false; // must be interrupt type
   11366:	7cc1      	ldrb	r1, [r0, #19]
   11368:	2903      	cmp	r1, #3
   1136a:	d19d      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t interval2 = descriptors[offset+13];
   1136c:	7d83      	ldrb	r3, [r0, #22]
		uint32_t endpoint2 = descriptors[offset+9];
   1136e:	f890 8012 	ldrb.w	r8, [r0, #18]
		uint32_t interval2 = descriptors[offset+13];
   11372:	9303      	str	r3, [sp, #12]
		if ((endpoint2 & 0x0F) == 0) return false;
   11374:	f018 030f 	ands.w	r3, r8, #15
		uint32_t size2 = descriptors[offset+11] | (descriptors[offset+12] << 8);
   11378:	f890 9014 	ldrb.w	r9, [r0, #20]
   1137c:	f890 c015 	ldrb.w	ip, [r0, #21]
		if ((endpoint2 & 0x0F) == 0) return false;
   11380:	d092      	beq.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   11382:	f00a 0bf0 	and.w	fp, sl, #240	; 0xf0
		uint32_t size1 = descriptors[offset+4] | (descriptors[offset+5] << 8);
   11386:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
		uint32_t size2 = descriptors[offset+11] | (descriptors[offset+12] << 8);
   1138a:	ea49 290c 	orr.w	r9, r9, ip, lsl #8
		if (((endpoint1 & 0xF0) == 0x80) && ((endpoint2 & 0xF0) == 0)) {
   1138e:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   11392:	d071      	beq.n	11478 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e4>
		} else if (((endpoint1 & 0xF0) == 0) && ((endpoint2 & 0xF0) == 0x80)) {
   11394:	f1bb 0f00 	cmp.w	fp, #0
   11398:	d186      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   1139a:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
   1139e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
   113a2:	d181      	bne.n	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
			in_pipe = new_Pipe(dev, 3, endpoint2 & 0x0F, 1, size2, interval2);
   113a4:	9a03      	ldr	r2, [sp, #12]
   113a6:	4630      	mov	r0, r6
   113a8:	f8cd 9000 	str.w	r9, [sp]
   113ac:	9201      	str	r2, [sp, #4]
   113ae:	461a      	mov	r2, r3
   113b0:	2301      	movs	r3, #1
   113b2:	9103      	str	r1, [sp, #12]
   113b4:	f7ff faac 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			out_pipe = new_Pipe(dev, 3, endpoint1, 0, size1, interval1);
   113b8:	9b02      	ldr	r3, [sp, #8]
   113ba:	4652      	mov	r2, sl
   113bc:	9903      	ldr	r1, [sp, #12]
   113be:	9301      	str	r3, [sp, #4]
   113c0:	465b      	mov	r3, fp
			in_pipe = new_Pipe(dev, 3, endpoint2 & 0x0F, 1, size2, interval2);
   113c2:	60e8      	str	r0, [r5, #12]
			out_pipe = new_Pipe(dev, 3, endpoint1, 0, size1, interval1);
   113c4:	4630      	mov	r0, r6
   113c6:	9700      	str	r7, [sp, #0]
			out_size = size1;
   113c8:	b2bf      	uxth	r7, r7
			out_pipe = new_Pipe(dev, 3, endpoint1, 0, size1, interval1);
   113ca:	f7ff faa1 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			in_size = size2;
   113ce:	fa1f f389 	uxth.w	r3, r9
			in_size = size1;
   113d2:	85ab      	strh	r3, [r5, #44]	; 0x2c
		out_pipe->callback_function = out_callback;
   113d4:	4b36      	ldr	r3, [pc, #216]	; (114b0 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x21c>)
			out_pipe = new_Pipe(dev, 3, endpoint2, 0, size2, interval2);
   113d6:	6128      	str	r0, [r5, #16]
			out_size = size2;
   113d8:	85ef      	strh	r7, [r5, #46]	; 0x2e
		out_pipe->callback_function = out_callback;
   113da:	63c3      	str	r3, [r0, #60]	; 0x3c
	in_pipe->callback_function = in_callback;
   113dc:	68eb      	ldr	r3, [r5, #12]
	queue_Control_Transfer(dev, &setup, _bigBuffer, this);
   113de:	4630      	mov	r0, r6
	in_pipe->callback_function = in_callback;
   113e0:	4a34      	ldr	r2, [pc, #208]	; (114b4 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x220>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   113e2:	4935      	ldr	r1, [pc, #212]	; (114b8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x224>)
   113e4:	63da      	str	r2, [r3, #60]	; 0x3c
		topusage_drivers[i] = NULL;
   113e6:	2300      	movs	r3, #0
   113e8:	e9c5 3305 	strd	r3, r3, [r5, #20]
   113ec:	e9c5 3307 	strd	r3, r3, [r5, #28]
   113f0:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
	bInterfaceNumber = descriptors[2];	// save away the interface number; 
   113f4:	78a2      	ldrb	r2, [r4, #2]
	mk_setup(setup, 0x81, 6, 0x2200, descriptors[2], descsize); // get report desc
   113f6:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
	bInterfaceNumber = descriptors[2];	// save away the interface number; 
   113fa:	f885 273e 	strb.w	r2, [r5, #1854]	; 0x73e
	bInterfaceSubClass = descriptors[6]; // likewise sub type and protocol.
   113fe:	79a2      	ldrb	r2, [r4, #6]
   11400:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
	bInterfaceProtocol = descriptors[7];
   11404:	79e2      	ldrb	r2, [r4, #7]
   11406:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
	mk_setup(setup, 0x81, 6, 0x2200, descriptors[2], descsize); // get report desc
   1140a:	78a2      	ldrb	r2, [r4, #2]
        s.word2 = wIndex | (wLength << 16);
   1140c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
	queue_Control_Transfer(dev, &setup, _bigBuffer, this);
   11410:	462b      	mov	r3, r5
   11412:	e9c5 120d 	strd	r1, r2, [r5, #52]	; 0x34
   11416:	f505 7266 	add.w	r2, r5, #920	; 0x398
   1141a:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1141e:	f7fe fe0b 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	return true;
   11422:	2001      	movs	r0, #1
   11424:	e741      	b.n	112aa <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x16>
		if (descriptors[offset] != 7) return false;
   11426:	f814 2008 	ldrb.w	r2, [r4, r8]
   1142a:	2a07      	cmp	r2, #7
   1142c:	f47f af3c 	bne.w	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+1] != 5) return false; // endpoint descriptor
   11430:	4420      	add	r0, r4
   11432:	7a82      	ldrb	r2, [r0, #10]
   11434:	2a05      	cmp	r2, #5
   11436:	f47f af37 	bne.w	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+3] != 3) return false; // must be interrupt type
   1143a:	7b01      	ldrb	r1, [r0, #12]
   1143c:	2903      	cmp	r1, #3
   1143e:	f47f af33 	bne.w	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t endpoint = descriptors[offset+2];
   11442:	7ac7      	ldrb	r7, [r0, #11]
		uint32_t size = descriptors[offset+4] | (descriptors[offset+5] << 8);
   11444:	f890 c00d 	ldrb.w	ip, [r0, #13]
		if ((endpoint & 0x0F) == 0) return false;
   11448:	f017 020f 	ands.w	r2, r7, #15
		uint32_t size = descriptors[offset+4] | (descriptors[offset+5] << 8);
   1144c:	f890 e00e 	ldrb.w	lr, [r0, #14]
		uint32_t interval = descriptors[offset+6];
   11450:	7bc0      	ldrb	r0, [r0, #15]
		if ((endpoint & 0x0F) == 0) return false;
   11452:	f43f af29 	beq.w	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if ((endpoint & 0xF0) != 0x80) return false; // must be IN direction
   11456:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
   1145a:	2f80      	cmp	r7, #128	; 0x80
   1145c:	f47f af24 	bne.w	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t size = descriptors[offset+4] | (descriptors[offset+5] << 8);
   11460:	ea4c 270e 	orr.w	r7, ip, lr, lsl #8
		in_pipe = new_Pipe(dev, 3, endpoint & 0x0F, 1, size, interval);
   11464:	e9cd 7000 	strd	r7, r0, [sp]
   11468:	4630      	mov	r0, r6
   1146a:	f7ff fa51 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
		out_pipe = NULL;
   1146e:	2300      	movs	r3, #0
		in_size = size;
   11470:	85af      	strh	r7, [r5, #44]	; 0x2c
		in_pipe = new_Pipe(dev, 3, endpoint & 0x0F, 1, size, interval);
   11472:	60e8      	str	r0, [r5, #12]
		out_pipe = NULL;
   11474:	612b      	str	r3, [r5, #16]
		in_size = size;
   11476:	e7b1      	b.n	113dc <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x148>
		if (((endpoint1 & 0xF0) == 0x80) && ((endpoint2 & 0xF0) == 0)) {
   11478:	f018 0af0 	ands.w	sl, r8, #240	; 0xf0
   1147c:	f47f af14 	bne.w	112a8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
			in_pipe = new_Pipe(dev, 3, endpoint1 & 0x0F, 1, size1, interval1);
   11480:	9b02      	ldr	r3, [sp, #8]
   11482:	4630      	mov	r0, r6
   11484:	9102      	str	r1, [sp, #8]
   11486:	e9cd 7300 	strd	r7, r3, [sp]
   1148a:	2301      	movs	r3, #1
   1148c:	f7ff fa40 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			out_pipe = new_Pipe(dev, 3, endpoint2, 0, size2, interval2);
   11490:	9b03      	ldr	r3, [sp, #12]
   11492:	4642      	mov	r2, r8
   11494:	9902      	ldr	r1, [sp, #8]
   11496:	9301      	str	r3, [sp, #4]
   11498:	4653      	mov	r3, sl
			in_pipe = new_Pipe(dev, 3, endpoint1 & 0x0F, 1, size1, interval1);
   1149a:	60e8      	str	r0, [r5, #12]
			out_pipe = new_Pipe(dev, 3, endpoint2, 0, size2, interval2);
   1149c:	4630      	mov	r0, r6
   1149e:	f8cd 9000 	str.w	r9, [sp]
   114a2:	f7ff fa35 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			in_size = size1;
   114a6:	b2bb      	uxth	r3, r7
			out_size = size2;
   114a8:	fa1f f789 	uxth.w	r7, r9
   114ac:	e791      	b.n	113d2 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x13e>
   114ae:	bf00      	nop
   114b0:	0001154d 	.word	0x0001154d
   114b4:	00011f89 	.word	0x00011f89
   114b8:	22000681 	.word	0x22000681

000114bc <USBHIDParser::timer_event(USBDriverTimer*)>:
	if (topusage_drivers[0]) {
   114bc:	6940      	ldr	r0, [r0, #20]
   114be:	b120      	cbz	r0, 114ca <USBHIDParser::timer_event(USBDriverTimer*)+0xe>
		topusage_drivers[0]->hid_timer_event(whichTimer);
   114c0:	6803      	ldr	r3, [r0, #0]
   114c2:	4a03      	ldr	r2, [pc, #12]	; (114d0 <USBHIDParser::timer_event(USBDriverTimer*)+0x14>)
   114c4:	6a1b      	ldr	r3, [r3, #32]
   114c6:	4293      	cmp	r3, r2
   114c8:	d100      	bne.n	114cc <USBHIDParser::timer_event(USBDriverTimer*)+0x10>
}
   114ca:	4770      	bx	lr
		topusage_drivers[0]->hid_timer_event(whichTimer);
   114cc:	4718      	bx	r3
   114ce:	bf00      	nop
   114d0:	0000fca9 	.word	0x0000fca9

000114d4 <USBHIDParser::init()>:
{
   114d4:	b510      	push	{r4, lr}
   114d6:	4604      	mov	r4, r0
	contribute_Pipes(mypipes, sizeof(mypipes)/sizeof(Pipe_t));
   114d8:	2103      	movs	r1, #3
   114da:	30c0      	adds	r0, #192	; 0xc0
   114dc:	f003 fd44 	bl	14f68 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>
	contribute_Transfers(mytransfers, sizeof(mytransfers)/sizeof(Transfer_t));
   114e0:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   114e4:	2105      	movs	r1, #5
   114e6:	f003 fd57 	bl	14f98 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>
	contribute_String_Buffers(mystring_bufs, sizeof(mystring_bufs)/sizeof(strbuf_t));
   114ea:	f504 7048 	add.w	r0, r4, #800	; 0x320
   114ee:	2101      	movs	r1, #1
   114f0:	f003 fd6c 	bl	14fcc <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>
	driver_ready_for_device(this);
   114f4:	4620      	mov	r0, r4
}
   114f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	driver_ready_for_device(this);
   114fa:	f7ff bbd9 	b.w	10cb0 <USBHost::driver_ready_for_device(USBDriver*)>
   114fe:	bf00      	nop

00011500 <USBHIDParser::out_data(Transfer_struct const*)>:
{
   11500:	b530      	push	{r4, r5, lr}
   11502:	f500 7359 	add.w	r3, r0, #868	; 0x364
	const uint8_t *buffer = (const uint8_t *)transfer->buffer;
   11506:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	for(uint8_t i = 0; i < 4; i++) {
   11508:	f500 7e5d 	add.w	lr, r0, #884	; 0x374
	uint8_t mask = 1;
   1150c:	2201      	movs	r2, #1
		if (buffer == _tx[i]) {
   1150e:	f853 4f04 	ldr.w	r4, [r3, #4]!
		mask <<= 1;
   11512:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (buffer == _tx[i]) {
   11516:	42ac      	cmp	r4, r5
   11518:	d00e      	beq.n	11538 <USBHIDParser::out_data(Transfer_struct const*)+0x38>
	for(uint8_t i = 0; i < 4; i++) {
   1151a:	4573      	cmp	r3, lr
		mask <<= 1;
   1151c:	fa5f f28c 	uxtb.w	r2, ip
	for(uint8_t i = 0; i < 4; i++) {
   11520:	d1f5      	bne.n	1150e <USBHIDParser::out_data(Transfer_struct const*)+0xe>
	if (topusage_drivers[0]) {
   11522:	6940      	ldr	r0, [r0, #20]
   11524:	b120      	cbz	r0, 11530 <USBHIDParser::out_data(Transfer_struct const*)+0x30>
		topusage_drivers[0]->hid_process_out_data(transfer);
   11526:	6803      	ldr	r3, [r0, #0]
   11528:	4a07      	ldr	r2, [pc, #28]	; (11548 <USBHIDParser::out_data(Transfer_struct const*)+0x48>)
   1152a:	689b      	ldr	r3, [r3, #8]
   1152c:	4293      	cmp	r3, r2
   1152e:	d100      	bne.n	11532 <USBHIDParser::out_data(Transfer_struct const*)+0x32>
}
   11530:	bd30      	pop	{r4, r5, pc}
   11532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		topusage_drivers[0]->hid_process_out_data(transfer);
   11536:	4718      	bx	r3
			_tx_state &= ~mask;
   11538:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
   1153c:	ea23 0302 	bic.w	r3, r3, r2
   11540:	f880 3378 	strb.w	r3, [r0, #888]	; 0x378
			break;
   11544:	e7ed      	b.n	11522 <USBHIDParser::out_data(Transfer_struct const*)+0x22>
   11546:	bf00      	nop
   11548:	0000fca5 	.word	0x0000fca5

0001154c <USBHIDParser::out_callback(Transfer_struct const*)>:
{
   1154c:	4601      	mov	r1, r0
	if (transfer->driver) {
   1154e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   11550:	b108      	cbz	r0, 11556 <USBHIDParser::out_callback(Transfer_struct const*)+0xa>
		((USBHIDParser*)(transfer->driver))->out_data(transfer);
   11552:	f7ff bfd5 	b.w	11500 <USBHIDParser::out_data(Transfer_struct const*)>
}
   11556:	4770      	bx	lr

00011558 <USBHIDParser::sendPacket(unsigned char const*, int)>:
	if (!out_size || !out_pipe) return false;	
   11558:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1155a:	2b00      	cmp	r3, #0
   1155c:	d049      	beq.n	115f2 <USBHIDParser::sendPacket(unsigned char const*, int)+0x9a>
bool USBHIDParser::sendPacket(const uint8_t *buffer, int cb) {
   1155e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11562:	4615      	mov	r5, r2
	if (!out_size || !out_pipe) return false;	
   11564:	6902      	ldr	r2, [r0, #16]
   11566:	4604      	mov	r4, r0
   11568:	2a00      	cmp	r2, #0
   1156a:	d03f      	beq.n	115ec <USBHIDParser::sendPacket(unsigned char const*, int)+0x94>
	if (!_tx[0]) {
   1156c:	f8d0 2368 	ldr.w	r2, [r0, #872]	; 0x368
   11570:	2a00      	cmp	r2, #0
   11572:	d040      	beq.n	115f6 <USBHIDParser::sendPacket(unsigned char const*, int)+0x9e>
	if ((_tx_state & _tx_mask) == _tx_mask) return false; 	// both transmit buffers are full
   11574:	f890 0379 	ldrb.w	r0, [r0, #889]	; 0x379
   11578:	f894 7378 	ldrb.w	r7, [r4, #888]	; 0x378
   1157c:	ea30 0207 	bics.w	r2, r0, r7
   11580:	d034      	beq.n	115ec <USBHIDParser::sendPacket(unsigned char const*, int)+0x94>
		cb = out_size;
   11582:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   11586:	bf08      	it	eq
   11588:	461d      	moveq	r5, r3
	uint8_t *p = _tx[0];
   1158a:	f8d4 6368 	ldr.w	r6, [r4, #872]	; 0x368
	for (uint8_t i = 0; i < 4; i++ ) {
   1158e:	2200      	movs	r2, #0
	uint8_t mask = 0x1;
   11590:	2301      	movs	r3, #1
		if ((mask & _tx_mask ) == 0) return false; // none found
   11592:	4218      	tst	r0, r3
	for (uint8_t i = 0; i < 4; i++ ) {
   11594:	f102 0e01 	add.w	lr, r2, #1
		mask <<=1;
   11598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
		if ((mask & _tx_mask ) == 0) return false; // none found
   1159c:	d026      	beq.n	115ec <USBHIDParser::sendPacket(unsigned char const*, int)+0x94>
		if ((mask & _tx_state) == 0) {
   1159e:	421f      	tst	r7, r3
   115a0:	d037      	beq.n	11612 <USBHIDParser::sendPacket(unsigned char const*, int)+0xba>
	for (uint8_t i = 0; i < 4; i++ ) {
   115a2:	fa5f f28e 	uxtb.w	r2, lr
		mask <<=1;
   115a6:	fa5f f38c 	uxtb.w	r3, ip
	for (uint8_t i = 0; i < 4; i++ ) {
   115aa:	2a04      	cmp	r2, #4
   115ac:	d1f1      	bne.n	11592 <USBHIDParser::sendPacket(unsigned char const*, int)+0x3a>
	memcpy(p, buffer, cb);	
   115ae:	462a      	mov	r2, r5
   115b0:	4630      	mov	r0, r6
   115b2:	f004 ffe7 	bl	16584 <memcpy>
    if ((uint32_t)p >= 0x20200000u) arm_dcache_flush_delete(p, cb);
   115b6:	4b1a      	ldr	r3, [pc, #104]	; (11620 <USBHIDParser::sendPacket(unsigned char const*, int)+0xc8>)
   115b8:	429e      	cmp	r6, r3
   115ba:	d90f      	bls.n	115dc <USBHIDParser::sendPacket(unsigned char const*, int)+0x84>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   115bc:	f026 031f 	bic.w	r3, r6, #31
	uint32_t end_addr = (uint32_t)addr + size;
   115c0:	1971      	adds	r1, r6, r5
	asm volatile("": : :"memory");
	asm("dsb");
   115c2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   115c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   115ca:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
   115ce:	3320      	adds	r3, #32
	} while (location < end_addr);
   115d0:	4299      	cmp	r1, r3
   115d2:	d8fa      	bhi.n	115ca <USBHIDParser::sendPacket(unsigned char const*, int)+0x72>
	asm("dsb");
   115d4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   115d8:	f3bf 8f6f 	isb	sy
	bool fReturn = queue_Data_Transfer(out_pipe, p, cb, this);
   115dc:	4623      	mov	r3, r4
   115de:	462a      	mov	r2, r5
   115e0:	4631      	mov	r1, r6
   115e2:	6920      	ldr	r0, [r4, #16]
}
   115e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bool fReturn = queue_Data_Transfer(out_pipe, p, cb, this);
   115e8:	f7fe bdc0 	b.w	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
}
   115ec:	2000      	movs	r0, #0
   115ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115f2:	2000      	movs	r0, #0
   115f4:	4770      	bx	lr
		_tx[0] = _bigBufferEnd - out_size;
   115f6:	f8d0 2738 	ldr.w	r2, [r0, #1848]	; 0x738
   115fa:	1ad2      	subs	r2, r2, r3
   115fc:	f8c0 2368 	str.w	r2, [r0, #872]	; 0x368
		_tx[1] = _tx[0] - out_size;
   11600:	1ad2      	subs	r2, r2, r3
   11602:	f8c0 236c 	str.w	r2, [r0, #876]	; 0x36c
		_bigBufferEnd = _tx[1];
   11606:	f8c0 2738 	str.w	r2, [r0, #1848]	; 0x738
		_tx_mask = 3;
   1160a:	2003      	movs	r0, #3
   1160c:	f884 0379 	strb.w	r0, [r4, #889]	; 0x379
   11610:	e7b2      	b.n	11578 <USBHIDParser::sendPacket(unsigned char const*, int)+0x20>
			_tx_state |= mask;
   11612:	431f      	orrs	r7, r3
			p = _tx[i];
   11614:	32da      	adds	r2, #218	; 0xda
			_tx_state |= mask;
   11616:	f884 7378 	strb.w	r7, [r4, #888]	; 0x378
			p = _tx[i];
   1161a:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
			break;
   1161e:	e7c6      	b.n	115ae <USBHIDParser::sendPacket(unsigned char const*, int)+0x56>
   11620:	201fffff 	.word	0x201fffff

00011624 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)>:
{
   11624:	b430      	push	{r4, r5}
   11626:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
	if (buffer1) _tx[index++] = buffer1;
   1162a:	b1f9      	cbz	r1, 1166c <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x48>
   1162c:	f8c0 1368 	str.w	r1, [r0, #872]	; 0x368
   11630:	2101      	movs	r1, #1
   11632:	460b      	mov	r3, r1
	if (buffer2) _tx[index++] = buffer2;
   11634:	b12a      	cbz	r2, 11642 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x1e>
   11636:	3301      	adds	r3, #1
   11638:	31da      	adds	r1, #218	; 0xda
   1163a:	b2db      	uxtb	r3, r3
   1163c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	if (buffer3) _tx[index++] = buffer3;
   11640:	4619      	mov	r1, r3
   11642:	b12d      	cbz	r5, 11650 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x2c>
   11644:	3301      	adds	r3, #1
   11646:	31da      	adds	r1, #218	; 0xda
   11648:	b2db      	uxtb	r3, r3
   1164a:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	if (buffer4) _tx[index++] = buffer4;
   1164e:	4619      	mov	r1, r3
   11650:	b12c      	cbz	r4, 1165e <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x3a>
   11652:	3301      	adds	r3, #1
   11654:	f101 02da 	add.w	r2, r1, #218	; 0xda
	_tx_mask = (1 << index) - 1; // 2 by default 1<< 2 =4 -1 = 3...
   11658:	b2d9      	uxtb	r1, r3
	if (buffer4) _tx[index++] = buffer4;
   1165a:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	_tx_mask = (1 << index) - 1; // 2 by default 1<< 2 =4 -1 = 3...
   1165e:	2301      	movs	r3, #1
   11660:	408b      	lsls	r3, r1
   11662:	3b01      	subs	r3, #1
}
   11664:	bc30      	pop	{r4, r5}
	_tx_mask = (1 << index) - 1; // 2 by default 1<< 2 =4 -1 = 3...
   11666:	f880 3379 	strb.w	r3, [r0, #889]	; 0x379
}
   1166a:	4770      	bx	lr
	uint8_t index = 0;
   1166c:	460b      	mov	r3, r1
   1166e:	e7e1      	b.n	11634 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x10>

00011670 <USBHIDParser::sendControlPacket(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void*)>:
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11670:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
{
   11674:	b410      	push	{r4}
   11676:	ea42 4103 	orr.w	r1, r2, r3, lsl #16
   1167a:	9c02      	ldr	r4, [sp, #8]
        s.word2 = wIndex | (wLength << 16);
   1167c:	9b01      	ldr	r3, [sp, #4]
	bool fReturn =  queue_Control_Transfer(device, &setup, buf, this);
   1167e:	9a03      	ldr	r2, [sp, #12]
   11680:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   11684:	4603      	mov	r3, r0
   11686:	e9c0 140d 	strd	r1, r4, [r0, #52]	; 0x34
   1168a:	f100 0134 	add.w	r1, r0, #52	; 0x34
}
   1168e:	f85d 4b04 	ldr.w	r4, [sp], #4
	bool fReturn =  queue_Control_Transfer(device, &setup, buf, this);
   11692:	6880      	ldr	r0, [r0, #8]
   11694:	f7fe bcd0 	b.w	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>

00011698 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)>:
	if (available_hid_drivers_list == NULL) {
   11698:	4a06      	ldr	r2, [pc, #24]	; (116b4 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)+0x1c>)
	driver->next = NULL;
   1169a:	2100      	movs	r1, #0
	if (available_hid_drivers_list == NULL) {
   1169c:	6813      	ldr	r3, [r2, #0]
	driver->next = NULL;
   1169e:	6041      	str	r1, [r0, #4]
	if (available_hid_drivers_list == NULL) {
   116a0:	b12b      	cbz	r3, 116ae <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)+0x16>
		while (last->next) last = last->next;
   116a2:	461a      	mov	r2, r3
   116a4:	685b      	ldr	r3, [r3, #4]
   116a6:	2b00      	cmp	r3, #0
   116a8:	d1fb      	bne.n	116a2 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)+0xa>
		last->next = driver;
   116aa:	6050      	str	r0, [r2, #4]
}
   116ac:	4770      	bx	lr
		available_hid_drivers_list = driver;
   116ae:	6010      	str	r0, [r2, #0]
   116b0:	4770      	bx	lr
   116b2:	bf00      	nop
   116b4:	2000d864 	.word	0x2000d864

000116b8 <USBHIDParser::find_driver(unsigned long)>:
{
   116b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBHIDInput *driver = available_hid_drivers_list;
   116ba:	4b0d      	ldr	r3, [pc, #52]	; (116f0 <USBHIDParser::find_driver(unsigned long)+0x38>)
   116bc:	681c      	ldr	r4, [r3, #0]
	while (driver) {
   116be:	b1a4      	cbz	r4, 116ea <USBHIDParser::find_driver(unsigned long)+0x32>
   116c0:	4605      	mov	r5, r0
   116c2:	460f      	mov	r7, r1
   116c4:	e001      	b.n	116ca <USBHIDParser::find_driver(unsigned long)+0x12>
		driver = driver->next;
   116c6:	6864      	ldr	r4, [r4, #4]
	while (driver) {
   116c8:	b17c      	cbz	r4, 116ea <USBHIDParser::find_driver(unsigned long)+0x32>
		if ((claim_type = driver->claim_collection(this, device, topusage)) != CLAIM_NO) {
   116ca:	6826      	ldr	r6, [r4, #0]
   116cc:	4620      	mov	r0, r4
   116ce:	463b      	mov	r3, r7
   116d0:	68aa      	ldr	r2, [r5, #8]
   116d2:	6836      	ldr	r6, [r6, #0]
   116d4:	4629      	mov	r1, r5
   116d6:	47b0      	blx	r6
   116d8:	2800      	cmp	r0, #0
   116da:	d0f4      	beq.n	116c6 <USBHIDParser::find_driver(unsigned long)+0xe>
			if (claim_type == CLAIM_INTERFACE) hid_driver_claimed_control_ = true;
   116dc:	2802      	cmp	r0, #2
   116de:	d105      	bne.n	116ec <USBHIDParser::find_driver(unsigned long)+0x34>
   116e0:	2301      	movs	r3, #1
}
   116e2:	4620      	mov	r0, r4
			if (claim_type == CLAIM_INTERFACE) hid_driver_claimed_control_ = true;
   116e4:	f885 337a 	strb.w	r3, [r5, #890]	; 0x37a
}
   116e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   116ea:	2400      	movs	r4, #0
}
   116ec:	4620      	mov	r0, r4
   116ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116f0:	2000d864 	.word	0x2000d864

000116f4 <USBHIDParser::parse()>:
{
   116f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint8_t *p = _bigBuffer;
   116f8:	f500 7466 	add.w	r4, r0, #920	; 0x398
	const uint8_t *end = p + descsize;
   116fc:	f8b0 50bc 	ldrh.w	r5, [r0, #188]	; 0xbc
	use_report_id = false;
   11700:	2600      	movs	r6, #0
{
   11702:	4680      	mov	r8, r0
	const uint8_t *end = p + descsize;
   11704:	4425      	add	r5, r4
	use_report_id = false;
   11706:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
	while (p < end) {
   1170a:	42ac      	cmp	r4, r5
   1170c:	d229      	bcs.n	11762 <USBHIDParser::parse()+0x6e>
	uint8_t collection_level = 0;
   1170e:	4637      	mov	r7, r6
	uint16_t usage = 0;
   11710:	4631      	mov	r1, r6
	uint16_t usage_page = 0;
   11712:	46b1      	mov	r9, r6
			use_report_id = true;
   11714:	f04f 0a01 	mov.w	sl, #1
		uint8_t tag = *p;
   11718:	7823      	ldrb	r3, [r4, #0]
		if (tag == 0xFE) { // Long Item
   1171a:	2bfe      	cmp	r3, #254	; 0xfe
   1171c:	d046      	beq.n	117ac <USBHIDParser::parse()+0xb8>
		switch (tag & 0x03) { // Short Item data
   1171e:	f003 0203 	and.w	r2, r3, #3
   11722:	2a02      	cmp	r2, #2
   11724:	d04c      	beq.n	117c0 <USBHIDParser::parse()+0xcc>
   11726:	2a03      	cmp	r2, #3
   11728:	d046      	beq.n	117b8 <USBHIDParser::parse()+0xc4>
   1172a:	2a01      	cmp	r2, #1
   1172c:	d041      	beq.n	117b2 <USBHIDParser::parse()+0xbe>
			p++;
   1172e:	3401      	adds	r4, #1
		  case 0: val = 0;
   11730:	2200      	movs	r2, #0
		if (p > end) break;
   11732:	42ac      	cmp	r4, r5
   11734:	d813      	bhi.n	1175e <USBHIDParser::parse()+0x6a>
		switch (tag & 0xFC) {
   11736:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1173a:	2b84      	cmp	r3, #132	; 0x84
   1173c:	d046      	beq.n	117cc <USBHIDParser::parse()+0xd8>
   1173e:	d92a      	bls.n	11796 <USBHIDParser::parse()+0xa2>
   11740:	2bb0      	cmp	r3, #176	; 0xb0
   11742:	d02c      	beq.n	1179e <USBHIDParser::parse()+0xaa>
   11744:	d820      	bhi.n	11788 <USBHIDParser::parse()+0x94>
   11746:	2b90      	cmp	r3, #144	; 0x90
   11748:	d029      	beq.n	1179e <USBHIDParser::parse()+0xaa>
   1174a:	2ba0      	cmp	r3, #160	; 0xa0
   1174c:	d105      	bne.n	1175a <USBHIDParser::parse()+0x66>
			if (collection_level == 0 && topusage_count < TOPUSAGE_LIST_LEN) {
   1174e:	b90f      	cbnz	r7, 11754 <USBHIDParser::parse()+0x60>
   11750:	2e05      	cmp	r6, #5
   11752:	d942      	bls.n	117da <USBHIDParser::parse()+0xe6>
			collection_level++;
   11754:	3701      	adds	r7, #1
			usage = 0;
   11756:	2100      	movs	r1, #0
			collection_level++;
   11758:	b2ff      	uxtb	r7, r7
	while (p < end) {
   1175a:	42ac      	cmp	r4, r5
   1175c:	d3dc      	bcc.n	11718 <USBHIDParser::parse()+0x24>
	while (topusage_count < TOPUSAGE_LIST_LEN) {
   1175e:	2e05      	cmp	r6, #5
   11760:	d837      	bhi.n	117d2 <USBHIDParser::parse()+0xde>
		topusage_drivers[topusage_count] = NULL;
   11762:	1c73      	adds	r3, r6, #1
   11764:	f1c6 0206 	rsb	r2, r6, #6
   11768:	3605      	adds	r6, #5
   1176a:	2100      	movs	r1, #0
   1176c:	b2db      	uxtb	r3, r3
   1176e:	b2f6      	uxtb	r6, r6
   11770:	b2d2      	uxtb	r2, r2
   11772:	2b06      	cmp	r3, #6
   11774:	eb08 0086 	add.w	r0, r8, r6, lsl #2
   11778:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1177c:	bf88      	it	hi
   1177e:	2204      	movhi	r2, #4
}
   11780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		topusage_drivers[topusage_count] = NULL;
   11784:	f00a b958 	b.w	1ba38 <memset>
		switch (tag & 0xFC) {
   11788:	2bc0      	cmp	r3, #192	; 0xc0
   1178a:	d1e6      	bne.n	1175a <USBHIDParser::parse()+0x66>
			if (collection_level > 0) {
   1178c:	b31f      	cbz	r7, 117d6 <USBHIDParser::parse()+0xe2>
				collection_level--;
   1178e:	3f01      	subs	r7, #1
			usage = 0;
   11790:	2100      	movs	r1, #0
				collection_level--;
   11792:	b2ff      	uxtb	r7, r7
   11794:	e7e1      	b.n	1175a <USBHIDParser::parse()+0x66>
		switch (tag & 0xFC) {
   11796:	2b08      	cmp	r3, #8
   11798:	d016      	beq.n	117c8 <USBHIDParser::parse()+0xd4>
   1179a:	2b80      	cmp	r3, #128	; 0x80
   1179c:	d101      	bne.n	117a2 <USBHIDParser::parse()+0xae>
   1179e:	2100      	movs	r1, #0
   117a0:	e7db      	b.n	1175a <USBHIDParser::parse()+0x66>
   117a2:	2b04      	cmp	r3, #4
   117a4:	d1d9      	bne.n	1175a <USBHIDParser::parse()+0x66>
			usage_page = val;
   117a6:	fa1f f982 	uxth.w	r9, r2
			break;
   117aa:	e7d6      	b.n	1175a <USBHIDParser::parse()+0x66>
			p += *p + 3;
   117ac:	f204 1401 	addw	r4, r4, #257	; 0x101
			continue;
   117b0:	e7d3      	b.n	1175a <USBHIDParser::parse()+0x66>
		  case 1: val = p[1];
   117b2:	7862      	ldrb	r2, [r4, #1]
			p += 2;
   117b4:	3402      	adds	r4, #2
			break;
   117b6:	e7bc      	b.n	11732 <USBHIDParser::parse()+0x3e>
		  case 3: val = p[1] | (p[2] << 8) | (p[3] << 16) | (p[4] << 24);
   117b8:	f8d4 2001 	ldr.w	r2, [r4, #1]
			p += 5;
   117bc:	3405      	adds	r4, #5
			break;
   117be:	e7b8      	b.n	11732 <USBHIDParser::parse()+0x3e>
		  case 2: val = p[1] | (p[2] << 8);
   117c0:	f8b4 2001 	ldrh.w	r2, [r4, #1]
			p += 3;
   117c4:	3403      	adds	r4, #3
			break;
   117c6:	e7b4      	b.n	11732 <USBHIDParser::parse()+0x3e>
			usage = val;
   117c8:	b291      	uxth	r1, r2
			break;
   117ca:	e7c6      	b.n	1175a <USBHIDParser::parse()+0x66>
			use_report_id = true;
   117cc:	f888 a0be 	strb.w	sl, [r8, #190]	; 0xbe
			break;
   117d0:	e7c3      	b.n	1175a <USBHIDParser::parse()+0x66>
}
   117d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			usage = 0;
   117d6:	4639      	mov	r1, r7
   117d8:	e7bf      	b.n	1175a <USBHIDParser::parse()+0x66>
				topusage_drivers[topusage_count] = find_driver(topusage);
   117da:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
   117de:	4640      	mov	r0, r8
   117e0:	f7ff ff6a 	bl	116b8 <USBHIDParser::find_driver(unsigned long)>
				topusage_count++;
   117e4:	1c73      	adds	r3, r6, #1
				topusage_drivers[topusage_count] = find_driver(topusage);
   117e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   117ea:	6170      	str	r0, [r6, #20]
				topusage_count++;
   117ec:	b2de      	uxtb	r6, r3
   117ee:	e7b1      	b.n	11754 <USBHIDParser::parse()+0x60>

000117f0 <USBHIDParser::control(Transfer_struct const*)>:
{
   117f0:	b570      	push	{r4, r5, r6, lr}
   117f2:	4604      	mov	r4, r0
	if (topusage_drivers[0]) {
   117f4:	6940      	ldr	r0, [r0, #20]
{
   117f6:	460d      	mov	r5, r1
	if (topusage_drivers[0]) {
   117f8:	b120      	cbz	r0, 11804 <USBHIDParser::control(Transfer_struct const*)+0x14>
		if (topusage_drivers[0]->hid_process_control(transfer)) {
   117fa:	6803      	ldr	r3, [r0, #0]
   117fc:	4a2c      	ldr	r2, [pc, #176]	; (118b0 <USBHIDParser::control(Transfer_struct const*)+0xc0>)
   117fe:	68db      	ldr	r3, [r3, #12]
   11800:	4293      	cmp	r3, r2
   11802:	d148      	bne.n	11896 <USBHIDParser::control(Transfer_struct const*)+0xa6>
	if (mesg == 0x22000681 && transfer->length == descsize) { // HID report descriptor
   11804:	4b2b      	ldr	r3, [pc, #172]	; (118b4 <USBHIDParser::control(Transfer_struct const*)+0xc4>)
   11806:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   11808:	429a      	cmp	r2, r3
   1180a:	d000      	beq.n	1180e <USBHIDParser::control(Transfer_struct const*)+0x1e>
}
   1180c:	bd70      	pop	{r4, r5, r6, pc}
	if (mesg == 0x22000681 && transfer->length == descsize) { // HID report descriptor
   1180e:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   11812:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   11814:	429a      	cmp	r2, r3
   11816:	d1f9      	bne.n	1180c <USBHIDParser::control(Transfer_struct const*)+0x1c>
		parse();
   11818:	4620      	mov	r0, r4
   1181a:	f7ff ff6b 	bl	116f4 <USBHIDParser::parse()>
		if (_rx1 == nullptr) {
   1181e:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
			_rx1 = _bigBufferEnd - in_size;
   11822:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		if (_rx1 == nullptr) {
   11824:	2900      	cmp	r1, #0
   11826:	d03a      	beq.n	1189e <USBHIDParser::control(Transfer_struct const*)+0xae>
		queue_Data_Transfer(in_pipe, _rx1, in_size, this);
   11828:	4623      	mov	r3, r4
   1182a:	68e0      	ldr	r0, [r4, #12]
   1182c:	f7fe fc9e 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (_rx2) queue_Data_Transfer(in_pipe, _rx2, in_size, this);
   11830:	f8d4 135c 	ldr.w	r1, [r4, #860]	; 0x35c
   11834:	b121      	cbz	r1, 11840 <USBHIDParser::control(Transfer_struct const*)+0x50>
   11836:	4623      	mov	r3, r4
   11838:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1183a:	68e0      	ldr	r0, [r4, #12]
   1183c:	f7fe fc96 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (_rx3) queue_Data_Transfer(in_pipe, _rx3, in_size, this);
   11840:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
   11844:	b121      	cbz	r1, 11850 <USBHIDParser::control(Transfer_struct const*)+0x60>
   11846:	4623      	mov	r3, r4
   11848:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1184a:	68e0      	ldr	r0, [r4, #12]
   1184c:	f7fe fc8e 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (_rx4) queue_Data_Transfer(in_pipe, _rx4, in_size, this);
   11850:	f8d4 1364 	ldr.w	r1, [r4, #868]	; 0x364
   11854:	b121      	cbz	r1, 11860 <USBHIDParser::control(Transfer_struct const*)+0x70>
   11856:	4623      	mov	r3, r4
   11858:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1185a:	68e0      	ldr	r0, [r4, #12]
   1185c:	f7fe fc86 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (device->idVendor == 0x054C && 
   11860:	68a0      	ldr	r0, [r4, #8]
   11862:	f240 534c 	movw	r3, #1356	; 0x54c
   11866:	8bc2      	ldrh	r2, [r0, #30]
   11868:	429a      	cmp	r2, r3
   1186a:	d1cf      	bne.n	1180c <USBHIDParser::control(Transfer_struct const*)+0x1c>
				((device->idProduct == 0x0268) || (device->idProduct == 0x042F)/* || (device->idProduct == 0x03D5)*/)) {
   1186c:	8c03      	ldrh	r3, [r0, #32]
		if (device->idVendor == 0x054C && 
   1186e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
   11872:	d003      	beq.n	1187c <USBHIDParser::control(Transfer_struct const*)+0x8c>
				((device->idProduct == 0x0268) || (device->idProduct == 0x042F)/* || (device->idProduct == 0x03D5)*/)) {
   11874:	f240 422f 	movw	r2, #1071	; 0x42f
		if (device->idVendor == 0x054C && 
   11878:	4293      	cmp	r3, r2
   1187a:	d1c7      	bne.n	1180c <USBHIDParser::control(Transfer_struct const*)+0x1c>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1187c:	490e      	ldr	r1, [pc, #56]	; (118b8 <USBHIDParser::control(Transfer_struct const*)+0xc8>)
        s.word2 = wIndex | (wLength << 16);
   1187e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
			queue_Control_Transfer(device, &setup, ps3_feature_F4_report, this);
   11882:	4623      	mov	r3, r4
   11884:	e9c4 120d 	strd	r1, r2, [r4, #52]	; 0x34
   11888:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1188c:	4a0b      	ldr	r2, [pc, #44]	; (118bc <USBHIDParser::control(Transfer_struct const*)+0xcc>)
}
   1188e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			queue_Control_Transfer(device, &setup, ps3_feature_F4_report, this);
   11892:	f7fe bbd1 	b.w	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		if (topusage_drivers[0]->hid_process_control(transfer)) {
   11896:	4798      	blx	r3
   11898:	2800      	cmp	r0, #0
   1189a:	d0b3      	beq.n	11804 <USBHIDParser::control(Transfer_struct const*)+0x14>
}
   1189c:	bd70      	pop	{r4, r5, r6, pc}
			_rx1 = _bigBufferEnd - in_size;
   1189e:	f8d4 1738 	ldr.w	r1, [r4, #1848]	; 0x738
   118a2:	1a89      	subs	r1, r1, r2
			_rx2 = _rx1 - in_size;
   118a4:	1a8b      	subs	r3, r1, r2
   118a6:	e9c4 13d6 	strd	r1, r3, [r4, #856]	; 0x358
			_bigBufferEnd = _rx2;
   118aa:	f8c4 3738 	str.w	r3, [r4, #1848]	; 0x738
   118ae:	e7bb      	b.n	11828 <USBHIDParser::control(Transfer_struct const*)+0x38>
   118b0:	0000fb49 	.word	0x0000fb49
   118b4:	22000681 	.word	0x22000681
   118b8:	03f40921 	.word	0x03f40921
   118bc:	2000995c 	.word	0x2000995c

000118c0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)>:
}

// parse the report descriptor and use it to feed the fields of the report
// to the drivers which have claimed its top level collections
void USBHIDParser::parse(uint16_t type_and_report_id, const uint8_t *data, uint32_t len)
{
   118c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = _bigBuffer;
	const uint8_t *end = p + descsize;
   118c4:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
	const uint8_t *p = _bigBuffer;
   118c8:	f500 7866 	add.w	r8, r0, #920	; 0x398
{
   118cc:	b0a7      	sub	sp, #156	; 0x9c
	const uint8_t *end = p + descsize;
   118ce:	eb08 0603 	add.w	r6, r8, r3
{
   118d2:	900a      	str	r0, [sp, #40]	; 0x28
	USBHIDInput *driver = NULL;
	uint32_t topusage = 0;
	uint8_t topusage_index = 0;
	uint8_t collection_level = 0;
	uint16_t usage[USAGE_LIST_LEN] = {0, 0};
   118d4:	a81a      	add	r0, sp, #104	; 0x68
{
   118d6:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	uint16_t usage[USAGE_LIST_LEN] = {0, 0};
   118da:	2230      	movs	r2, #48	; 0x30
   118dc:	2100      	movs	r1, #0
   118de:	f00a f8ab 	bl	1ba38 <memset>
	uint32_t last_usage = 0;
	int32_t logical_min = 0;
	int32_t logical_max = 0;
	uint32_t bitindex = 0;

	while (p < end) {
   118e2:	45b0      	cmp	r8, r6
   118e4:	d27b      	bcs.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	uint32_t bitindex = 0;
   118e6:	f04f 0b00 	mov.w	fp, #0
	uint8_t usage_min_max_count = 0;
   118ea:	46d9      	mov	r9, fp
	uint8_t usage_count = 0;
   118ec:	465d      	mov	r5, fp
	USBHIDInput *driver = NULL;
   118ee:	46da      	mov	sl, fp
			break;
		}
		if (reset_local) {
			usage_count = 0;
			usage_min_max_count = 0;
			usage[0] = 0;
   118f0:	465f      	mov	r7, fp
	int32_t logical_max = 0;
   118f2:	f8cd b01c 	str.w	fp, [sp, #28]
	int32_t logical_min = 0;
   118f6:	f8cd b00c 	str.w	fp, [sp, #12]
	uint32_t last_usage = 0;
   118fa:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
	uint16_t usage_page = 0;
   118fe:	f8cd b020 	str.w	fp, [sp, #32]
	uint8_t report_id = 0;
   11902:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	uint8_t usage_min_max_mask = 0;
   11906:	f8cd b010 	str.w	fp, [sp, #16]
	uint8_t collection_level = 0;
   1190a:	f8cd b008 	str.w	fp, [sp, #8]
			usage[0] = 0;
   1190e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
	uint16_t report_size = 0;
   11912:	e9cd bb05 	strd	fp, fp, [sp, #20]
	uint32_t topusage = 0;
   11916:	e9cd bb0c 	strd	fp, fp, [sp, #48]	; 0x30
		uint8_t tag = *p;
   1191a:	f898 3000 	ldrb.w	r3, [r8]
		if (tag == 0xFE) { // Long Item (unsupported)
   1191e:	2bfe      	cmp	r3, #254	; 0xfe
   11920:	f000 80db 	beq.w	11ada <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x21a>
		switch (tag & 0x03) { // Short Item data
   11924:	f003 0203 	and.w	r2, r3, #3
   11928:	2a02      	cmp	r2, #2
   1192a:	f000 80e8 	beq.w	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x23e>
   1192e:	2a03      	cmp	r2, #3
   11930:	f000 80e0 	beq.w	11af4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x234>
   11934:	2a01      	cmp	r2, #1
   11936:	f000 80d8 	beq.w	11aea <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x22a>
			p++;
   1193a:	f108 0801 	add.w	r8, r8, #1
		  case 0: val = 0;
   1193e:	f04f 0b00 	mov.w	fp, #0
		if (p > end) break;
   11942:	45b0      	cmp	r8, r6
   11944:	d84b      	bhi.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
		switch (tag & 0xFC) {
   11946:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1194a:	2ba0      	cmp	r3, #160	; 0xa0
   1194c:	f200 80aa 	bhi.w	11aa4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x1e4>
   11950:	2b73      	cmp	r3, #115	; 0x73
   11952:	d847      	bhi.n	119e4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x124>
   11954:	3b04      	subs	r3, #4
   11956:	b2d9      	uxtb	r1, r3
   11958:	2924      	cmp	r1, #36	; 0x24
   1195a:	d83e      	bhi.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   1195c:	2b24      	cmp	r3, #36	; 0x24
   1195e:	d83c      	bhi.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11960:	e8df f013 	tbh	[pc, r3, lsl #1]
   11964:	003b011b 	.word	0x003b011b
   11968:	003b003b 	.word	0x003b003b
   1196c:	003b0108 	.word	0x003b0108
   11970:	003b003b 	.word	0x003b003b
   11974:	003b003b 	.word	0x003b003b
   11978:	003b003b 	.word	0x003b003b
   1197c:	003b003b 	.word	0x003b003b
   11980:	003b003b 	.word	0x003b003b
   11984:	003b00fc 	.word	0x003b00fc
   11988:	003b003b 	.word	0x003b003b
   1198c:	003b00ed 	.word	0x003b00ed
   11990:	003b003b 	.word	0x003b003b
   11994:	003b003b 	.word	0x003b003b
   11998:	003b003b 	.word	0x003b003b
   1199c:	003b003b 	.word	0x003b003b
   119a0:	003b003b 	.word	0x003b003b
   119a4:	003b00e1 	.word	0x003b00e1
   119a8:	003b003b 	.word	0x003b003b
   119ac:	00d2      	.short	0x00d2
			if (collection_level == 0) {
   119ae:	9b02      	ldr	r3, [sp, #8]
   119b0:	b95b      	cbnz	r3, 119ca <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x10a>
				topusage = ((uint32_t)usage_page << 16) | usage[0];
   119b2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   119b6:	9a08      	ldr	r2, [sp, #32]
   119b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   119bc:	930d      	str	r3, [sp, #52]	; 0x34
				if (topusage_index < TOPUSAGE_LIST_LEN) {
   119be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   119c0:	2b05      	cmp	r3, #5
   119c2:	f240 817f 	bls.w	11cc4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x404>
				driver = NULL;
   119c6:	f8dd a008 	ldr.w	sl, [sp, #8]
			collection_level++;
   119ca:	9b02      	ldr	r3, [sp, #8]
   119cc:	3301      	adds	r3, #1
   119ce:	b2db      	uxtb	r3, r3
   119d0:	9302      	str	r3, [sp, #8]
			usage_min_max_count = 0;
   119d2:	f04f 0900 	mov.w	r9, #0
			usage[0] = 0;
   119d6:	971a      	str	r7, [sp, #104]	; 0x68
			usage_count = 0;
   119d8:	464d      	mov	r5, r9
	while (p < end) {
   119da:	4546      	cmp	r6, r8
   119dc:	d89d      	bhi.n	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
			usage[1] = 0;
		}
	}
}
   119de:	b027      	add	sp, #156	; 0x9c
   119e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (tag & 0xFC) {
   119e4:	3b74      	subs	r3, #116	; 0x74
   119e6:	2b2c      	cmp	r3, #44	; 0x2c
   119e8:	d8f7      	bhi.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   119ea:	a201      	add	r2, pc, #4	; (adr r2, 119f0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x130>)
   119ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   119f0:	00011c93 	.word	0x00011c93
   119f4:	000119db 	.word	0x000119db
   119f8:	000119db 	.word	0x000119db
   119fc:	000119db 	.word	0x000119db
   11a00:	000119db 	.word	0x000119db
   11a04:	000119db 	.word	0x000119db
   11a08:	000119db 	.word	0x000119db
   11a0c:	000119db 	.word	0x000119db
   11a10:	000119db 	.word	0x000119db
   11a14:	000119db 	.word	0x000119db
   11a18:	000119db 	.word	0x000119db
   11a1c:	000119db 	.word	0x000119db
   11a20:	00011bb7 	.word	0x00011bb7
   11a24:	000119db 	.word	0x000119db
   11a28:	000119db 	.word	0x000119db
   11a2c:	000119db 	.word	0x000119db
   11a30:	00011ca1 	.word	0x00011ca1
   11a34:	000119db 	.word	0x000119db
   11a38:	000119db 	.word	0x000119db
   11a3c:	000119db 	.word	0x000119db
   11a40:	000119db 	.word	0x000119db
   11a44:	000119db 	.word	0x000119db
   11a48:	000119db 	.word	0x000119db
   11a4c:	000119db 	.word	0x000119db
   11a50:	000119db 	.word	0x000119db
   11a54:	000119db 	.word	0x000119db
   11a58:	000119db 	.word	0x000119db
   11a5c:	000119db 	.word	0x000119db
   11a60:	000119d3 	.word	0x000119d3
   11a64:	000119db 	.word	0x000119db
   11a68:	000119db 	.word	0x000119db
   11a6c:	000119db 	.word	0x000119db
   11a70:	00011ba9 	.word	0x00011ba9
   11a74:	000119db 	.word	0x000119db
   11a78:	000119db 	.word	0x000119db
   11a7c:	000119db 	.word	0x000119db
   11a80:	000119db 	.word	0x000119db
   11a84:	000119db 	.word	0x000119db
   11a88:	000119db 	.word	0x000119db
   11a8c:	000119db 	.word	0x000119db
   11a90:	000119db 	.word	0x000119db
   11a94:	000119db 	.word	0x000119db
   11a98:	000119db 	.word	0x000119db
   11a9c:	000119db 	.word	0x000119db
   11aa0:	000119af 	.word	0x000119af
   11aa4:	2bb0      	cmp	r3, #176	; 0xb0
   11aa6:	d094      	beq.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
   11aa8:	2bc0      	cmp	r3, #192	; 0xc0
   11aaa:	d196      	bne.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
			if (collection_level > 0) {
   11aac:	9b02      	ldr	r3, [sp, #8]
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d08f      	beq.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
				collection_level--;
   11ab2:	3b01      	subs	r3, #1
				if (collection_level == 0 && driver != NULL) {
   11ab4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   11ab8:	9302      	str	r3, [sp, #8]
   11aba:	d18a      	bne.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
   11abc:	f1ba 0f00 	cmp.w	sl, #0
   11ac0:	d087      	beq.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
					driver->hid_input_end();
   11ac2:	f8da 3000 	ldr.w	r3, [sl]
			usage_min_max_count = 0;
   11ac6:	f04f 0900 	mov.w	r9, #0
					driver->hid_input_end();
   11aca:	4650      	mov	r0, sl
					driver = NULL;
   11acc:	f04f 0a00 	mov.w	sl, #0
					driver->hid_input_end();
   11ad0:	699b      	ldr	r3, [r3, #24]
			usage_count = 0;
   11ad2:	464d      	mov	r5, r9
					driver->hid_input_end();
   11ad4:	4798      	blx	r3
			usage[0] = 0;
   11ad6:	971a      	str	r7, [sp, #104]	; 0x68
   11ad8:	e77f      	b.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
			p += p[1] + 3;
   11ada:	f898 3001 	ldrb.w	r3, [r8, #1]
   11ade:	3303      	adds	r3, #3
   11ae0:	4498      	add	r8, r3
	while (p < end) {
   11ae2:	4546      	cmp	r6, r8
   11ae4:	f63f af19 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11ae8:	e779      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
		  case 1: val = p[1];
   11aea:	f898 b001 	ldrb.w	fp, [r8, #1]
			p += 2;
   11aee:	f108 0802 	add.w	r8, r8, #2
			break;
   11af2:	e726      	b.n	11942 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x82>
		  case 3: val = p[1] | (p[2] << 8) | (p[3] << 16) | (p[4] << 24);
   11af4:	f8d8 b001 	ldr.w	fp, [r8, #1]
			p += 5;
   11af8:	f108 0805 	add.w	r8, r8, #5
			break;
   11afc:	e721      	b.n	11942 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x82>
		  case 2: val = p[1] | (p[2] << 8);
   11afe:	f8b8 b001 	ldrh.w	fp, [r8, #1]
			p += 3;
   11b02:	f108 0803 	add.w	r8, r8, #3
			break;
   11b06:	e71c      	b.n	11942 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x82>
		  	if (usage_count != 255) {
   11b08:	2dff      	cmp	r5, #255	; 0xff
   11b0a:	f000 80fe 	beq.w	11d0a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x44a>
			usage[usage_min_max_count * 2 + 1] = val;
   11b0e:	2302      	movs	r3, #2
	while (p < end) {
   11b10:	4546      	cmp	r6, r8
			  	usage_min_max_count = 0;
   11b12:	f04f 0900 	mov.w	r9, #0
			usage[usage_min_max_count * 2 + 1] = val;
   11b16:	f04f 05ff 	mov.w	r5, #255	; 0xff
   11b1a:	f8ad b06a 	strh.w	fp, [sp, #106]	; 0x6a
   11b1e:	9304      	str	r3, [sp, #16]
	while (p < end) {
   11b20:	f63f aefb 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11b24:	e75b      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 1) return (int8_t)num;
   11b26:	2a01      	cmp	r2, #1
   11b28:	f000 8106 	beq.w	11d38 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x478>
	if (tag == 2) return (int16_t)num;
   11b2c:	2a02      	cmp	r2, #2
   11b2e:	f000 810e 	beq.w	11d4e <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x48e>
	while (p < end) {
   11b32:	4546      	cmp	r6, r8
	return (int32_t)num;
   11b34:	f8cd b01c 	str.w	fp, [sp, #28]
	while (p < end) {
   11b38:	f63f aeef 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11b3c:	e74f      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
		  	if (usage_count != 255) {
   11b3e:	2dff      	cmp	r5, #255	; 0xff
   11b40:	f000 80cd 	beq.w	11cde <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x41e>
			usage_min_max_mask |= 1;
   11b44:	2301      	movs	r3, #1
	while (p < end) {
   11b46:	4546      	cmp	r6, r8
			  	usage_min_max_count = 0;
   11b48:	f04f 0900 	mov.w	r9, #0
			usage[usage_min_max_count * 2] = val;
   11b4c:	f04f 05ff 	mov.w	r5, #255	; 0xff
   11b50:	f8ad b068 	strh.w	fp, [sp, #104]	; 0x68
			usage_min_max_mask |= 1;
   11b54:	9304      	str	r3, [sp, #16]
	while (p < end) {
   11b56:	f63f aee0 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11b5a:	e740      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 1) return (int8_t)num;
   11b5c:	2a01      	cmp	r2, #1
   11b5e:	f000 80e4 	beq.w	11d2a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x46a>
	if (tag == 2) return (int16_t)num;
   11b62:	2a02      	cmp	r2, #2
   11b64:	f000 80ef 	beq.w	11d46 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x486>
	while (p < end) {
   11b68:	4546      	cmp	r6, r8
	return (int32_t)num;
   11b6a:	f8cd b00c 	str.w	fp, [sp, #12]
	while (p < end) {
   11b6e:	f63f aed4 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11b72:	e734      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
				if (val > 0x1f) {
   11b74:	2d17      	cmp	r5, #23
   11b76:	f63f af30 	bhi.w	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11b7a:	f1bb 0f1f 	cmp.w	fp, #31
   11b7e:	f67f af2c 	bls.w	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
					usage[usage_count++] = val;
   11b82:	ab26      	add	r3, sp, #152	; 0x98
	while (p < end) {
   11b84:	4546      	cmp	r6, r8
					usage[usage_count++] = val;
   11b86:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   11b8a:	f105 0501 	add.w	r5, r5, #1
   11b8e:	f823 bc30 	strh.w	fp, [r3, #-48]
   11b92:	b2ed      	uxtb	r5, r5
	while (p < end) {
   11b94:	f63f aec1 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11b98:	e721      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			usage_page = val;
   11b9a:	fa1f f38b 	uxth.w	r3, fp
	while (p < end) {
   11b9e:	4546      	cmp	r6, r8
			usage_page = val;
   11ba0:	9308      	str	r3, [sp, #32]
	while (p < end) {
   11ba2:	f63f aeba 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11ba6:	e71a      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			report_count = val;
   11ba8:	fa1f f38b 	uxth.w	r3, fp
	while (p < end) {
   11bac:	4546      	cmp	r6, r8
			report_count = val;
   11bae:	9305      	str	r3, [sp, #20]
	while (p < end) {
   11bb0:	f63f aeb3 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11bb4:	e713      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			if (use_report_id && (report_id != (type_and_report_id & 0xFF))) {
   11bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11bb8:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   11bbc:	b12b      	cbz	r3, 11bca <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x30a>
   11bbe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11bc4:	429a      	cmp	r2, r3
   11bc6:	f47f af04 	bne.w	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
			if ((val & 1) || (driver == NULL)) {
   11bca:	f1ba 0f00 	cmp.w	sl, #0
   11bce:	d06e      	beq.n	11cae <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x3ee>
   11bd0:	f01b 0f01 	tst.w	fp, #1
   11bd4:	d16b      	bne.n	11cae <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x3ee>
				driver->hid_input_begin(topusage, val, logical_min, logical_max);
   11bd6:	f8da 3000 	ldr.w	r3, [sl]
   11bda:	4650      	mov	r0, sl
   11bdc:	9a07      	ldr	r2, [sp, #28]
   11bde:	990d      	ldr	r1, [sp, #52]	; 0x34
   11be0:	9200      	str	r2, [sp, #0]
   11be2:	465a      	mov	r2, fp
   11be4:	691b      	ldr	r3, [r3, #16]
   11be6:	461c      	mov	r4, r3
   11be8:	9b03      	ldr	r3, [sp, #12]
   11bea:	47a0      	blx	r4
				if ((val & 2)) {
   11bec:	f01b 0b02 	ands.w	fp, fp, #2
   11bf0:	f040 80e9 	bne.w	11dc6 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x506>
					if (usage_min_max_count && (report_size == 1)) {
   11bf4:	f1b9 0f00 	cmp.w	r9, #0
   11bf8:	f000 80ad 	beq.w	11d56 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x496>
   11bfc:	9b06      	ldr	r3, [sp, #24]
   11bfe:	2b01      	cmp	r3, #1
   11c00:	f040 80a9 	bne.w	11d56 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x496>
						for (uint32_t i=0; i < report_count; i++) {
   11c04:	9b05      	ldr	r3, [sp, #20]
						uint32_t uindex = usage[0];
   11c06:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
						uint32_t uindex_max = usage[1];
   11c0a:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
						for (uint32_t i=0; i < report_count; i++) {
   11c0e:	2b00      	cmp	r3, #0
   11c10:	f000 816d 	beq.w	11eee <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x62e>
   11c14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
							u |= (uint32_t)usage_page << 16;
   11c16:	9808      	ldr	r0, [sp, #32]
   11c18:	4423      	add	r3, r4
						uint8_t uminmax_index = 0;
   11c1a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
							u |= (uint32_t)usage_page << 16;
   11c1e:	0400      	lsls	r0, r0, #16
   11c20:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   11c24:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   11c28:	4690      	mov	r8, r2
   11c2a:	469b      	mov	fp, r3
   11c2c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   11c30:	9006      	str	r0, [sp, #24]
   11c32:	9613      	str	r6, [sp, #76]	; 0x4c
   11c34:	e01b      	b.n	11c6e <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x3ae>
							if (uindex < uindex_max) uindex++;
   11c36:	1c4e      	adds	r6, r1, #1
							u |= (uint32_t)usage_page << 16;
   11c38:	9b06      	ldr	r3, [sp, #24]
							uint32_t n = bitfield(data, bitindex, report_size);
   11c3a:	2201      	movs	r2, #1
   11c3c:	4648      	mov	r0, r9
							u |= (uint32_t)usage_page << 16;
   11c3e:	ea43 0501 	orr.w	r5, r3, r1
							uint32_t n = bitfield(data, bitindex, report_size);
   11c42:	4621      	mov	r1, r4
   11c44:	f7ff fb02 	bl	1124c <bitfield(unsigned char const*, unsigned long, unsigned long)>
							if (logical_min >= 0) {
   11c48:	9b03      	ldr	r3, [sp, #12]
							uint32_t n = bitfield(data, bitindex, report_size);
   11c4a:	4602      	mov	r2, r0
							if (logical_min >= 0) {
   11c4c:	2b00      	cmp	r3, #0
   11c4e:	da03      	bge.n	11c58 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x398>
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11c50:	07c3      	lsls	r3, r0, #31
		num |= ~((1 << bitcount) - 1);
   11c52:	bf48      	it	mi
   11c54:	f060 0201 	ornmi	r2, r0, #1
								driver->hid_input_data(u, sn);
   11c58:	f8da 0000 	ldr.w	r0, [sl]
							bitindex += report_size;
   11c5c:	3401      	adds	r4, #1
								driver->hid_input_data(u, sn);
   11c5e:	4629      	mov	r1, r5
   11c60:	6945      	ldr	r5, [r0, #20]
   11c62:	4650      	mov	r0, sl
   11c64:	47a8      	blx	r5
						for (uint32_t i=0; i < report_count; i++) {
   11c66:	455c      	cmp	r4, fp
   11c68:	f000 80a7 	beq.w	11dba <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4fa>
   11c6c:	4631      	mov	r1, r6
							if (uindex < uindex_max) uindex++;
   11c6e:	4588      	cmp	r8, r1
   11c70:	d8e1      	bhi.n	11c36 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x376>
							else if (uminmax_index < usage_min_max_count) {
   11c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11c76:	4293      	cmp	r3, r2
   11c78:	f080 809d 	bcs.w	11db6 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4f6>
								uminmax_index++;
   11c7c:	3301      	adds	r3, #1
								uindex = usage[uminmax_index * 2];
   11c7e:	b2da      	uxtb	r2, r3
   11c80:	ab26      	add	r3, sp, #152	; 0x98
   11c82:	eb03 0082 	add.w	r0, r3, r2, lsl #2
								uminmax_index++;
   11c86:	9211      	str	r2, [sp, #68]	; 0x44
								uindex = usage[uminmax_index * 2];
   11c88:	f830 6c30 	ldrh.w	r6, [r0, #-48]
								uindex_max = usage[uminmax_index * 2 + 1];
   11c8c:	f830 8c2e 	ldrh.w	r8, [r0, #-46]
   11c90:	e7d2      	b.n	11c38 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x378>
			report_size = val;
   11c92:	fa1f f38b 	uxth.w	r3, fp
	while (p < end) {
   11c96:	4546      	cmp	r6, r8
			report_size = val;
   11c98:	9306      	str	r3, [sp, #24]
	while (p < end) {
   11c9a:	f63f ae3e 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11c9e:	e69e      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			report_id = val;
   11ca0:	fa5f f38b 	uxtb.w	r3, fp
	while (p < end) {
   11ca4:	4546      	cmp	r6, r8
			report_id = val;
   11ca6:	9309      	str	r3, [sp, #36]	; 0x24
	while (p < end) {
   11ca8:	f63f ae37 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11cac:	e697      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
				bitindex += report_count * report_size;
   11cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
			usage_min_max_count = 0;
   11cb0:	f04f 0900 	mov.w	r9, #0
			usage[0] = 0;
   11cb4:	971a      	str	r7, [sp, #104]	; 0x68
			usage_count = 0;
   11cb6:	464d      	mov	r5, r9
				bitindex += report_count * report_size;
   11cb8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   11cbc:	fb02 1303 	mla	r3, r2, r3, r1
   11cc0:	930b      	str	r3, [sp, #44]	; 0x2c
			usage[1] = 0;
   11cc2:	e68a      	b.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
					driver = topusage_drivers[topusage_index++];
   11cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11cc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   11cca:	3301      	adds	r3, #1
   11ccc:	b2db      	uxtb	r3, r3
   11cce:	f8d2 a014 	ldr.w	sl, [r2, #20]
   11cd2:	930c      	str	r3, [sp, #48]	; 0x30
			collection_level++;
   11cd4:	9b02      	ldr	r3, [sp, #8]
   11cd6:	3301      	adds	r3, #1
   11cd8:	b2db      	uxtb	r3, r3
   11cda:	9302      	str	r3, [sp, #8]
			break;
   11cdc:	e679      	b.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
			usage_min_max_mask |= 1;
   11cde:	9b04      	ldr	r3, [sp, #16]
   11ce0:	f043 0201 	orr.w	r2, r3, #1
			usage[usage_min_max_count * 2] = val;
   11ce4:	ab26      	add	r3, sp, #152	; 0x98
			if (usage_min_max_mask == 3) {
   11ce6:	2a03      	cmp	r2, #3
			usage[usage_min_max_count * 2] = val;
   11ce8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
			usage_min_max_mask |= 1;
   11cec:	9204      	str	r2, [sp, #16]
			usage[usage_min_max_count * 2] = val;
   11cee:	f823 bc30 	strh.w	fp, [r3, #-48]
			if (usage_min_max_mask == 3) {
   11cf2:	f47f ae72 	bne.w	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
		  		usage_min_max_count++;
   11cf6:	f109 0901 	add.w	r9, r9, #1
				usage_min_max_mask = 0;					
   11cfa:	2300      	movs	r3, #0
	while (p < end) {
   11cfc:	4546      	cmp	r6, r8
		  		usage_min_max_count++;
   11cfe:	fa5f f989 	uxtb.w	r9, r9
				usage_min_max_mask = 0;					
   11d02:	9304      	str	r3, [sp, #16]
	while (p < end) {
   11d04:	f63f ae09 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11d08:	e669      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			if (usage_min_max_mask == 3) {
   11d0a:	9b04      	ldr	r3, [sp, #16]
			usage[usage_min_max_count * 2 + 1] = val;
   11d0c:	2202      	movs	r2, #2
   11d0e:	a826      	add	r0, sp, #152	; 0x98
			if (usage_min_max_mask == 3) {
   11d10:	f043 0102 	orr.w	r1, r3, #2
			usage[usage_min_max_count * 2 + 1] = val;
   11d14:	2301      	movs	r3, #1
   11d16:	fb12 3309 	smlabb	r3, r2, r9, r3
			if (usage_min_max_mask == 3) {
   11d1a:	2903      	cmp	r1, #3
			usage[usage_min_max_count * 2 + 1] = val;
   11d1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   11d20:	f823 bc30 	strh.w	fp, [r3, #-48]
			if (usage_min_max_mask == 3) {
   11d24:	d0e7      	beq.n	11cf6 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x436>
   11d26:	9204      	str	r2, [sp, #16]
   11d28:	e657      	b.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
	if (tag == 1) return (int8_t)num;
   11d2a:	fa4f f38b 	sxtb.w	r3, fp
	while (p < end) {
   11d2e:	4546      	cmp	r6, r8
	if (tag == 1) return (int8_t)num;
   11d30:	9303      	str	r3, [sp, #12]
	while (p < end) {
   11d32:	f63f adf2 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11d36:	e652      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 1) return (int8_t)num;
   11d38:	fa4f f38b 	sxtb.w	r3, fp
	while (p < end) {
   11d3c:	4546      	cmp	r6, r8
	if (tag == 1) return (int8_t)num;
   11d3e:	9307      	str	r3, [sp, #28]
	while (p < end) {
   11d40:	f63f adeb 	bhi.w	1191a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11d44:	e64b      	b.n	119de <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 2) return (int16_t)num;
   11d46:	fa0f f38b 	sxth.w	r3, fp
   11d4a:	9303      	str	r3, [sp, #12]
   11d4c:	e645      	b.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11d4e:	fa0f f38b 	sxth.w	r3, fp
   11d52:	9307      	str	r3, [sp, #28]
   11d54:	e641      	b.n	119da <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
						for (uint32_t i=0; i < report_count; i++) {
   11d56:	9b05      	ldr	r3, [sp, #20]
   11d58:	2b00      	cmp	r3, #0
   11d5a:	f43f ae3a 	beq.w	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
								u |= (uint32_t)usage_page << 16;
   11d5e:	9b08      	ldr	r3, [sp, #32]
						uint32_t n = bitfield(data, bitindex, report_size);
   11d60:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   11d64:	9612      	str	r6, [sp, #72]	; 0x48
								u |= (uint32_t)usage_page << 16;
   11d66:	ea4f 4903 	mov.w	r9, r3, lsl #16
						uint32_t n = bitfield(data, bitindex, report_size);
   11d6a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11d6c:	9c06      	ldr	r4, [sp, #24]
   11d6e:	9e05      	ldr	r6, [sp, #20]
   11d70:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
							uint32_t u = bitfield(data, bitindex, report_size);
   11d74:	4629      	mov	r1, r5
   11d76:	4622      	mov	r2, r4
   11d78:	4640      	mov	r0, r8
						for (uint32_t i=0; i < report_count; i++) {
   11d7a:	f10b 0b01 	add.w	fp, fp, #1
							uint32_t u = bitfield(data, bitindex, report_size);
   11d7e:	f7ff fa65 	bl	1124c <bitfield(unsigned char const*, unsigned long, unsigned long)>
							if (n >= logical_min && n <= logical_max) {
   11d82:	9b03      	ldr	r3, [sp, #12]
							bitindex += report_size;
   11d84:	4425      	add	r5, r4
							if (n >= logical_min && n <= logical_max) {
   11d86:	4298      	cmp	r0, r3
   11d88:	db0a      	blt.n	11da0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4e0>
   11d8a:	9b07      	ldr	r3, [sp, #28]
								driver->hid_input_data(u, 1);
   11d8c:	ea49 0100 	orr.w	r1, r9, r0
							if (n >= logical_min && n <= logical_max) {
   11d90:	4298      	cmp	r0, r3
   11d92:	dc05      	bgt.n	11da0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4e0>
								driver->hid_input_data(u, 1);
   11d94:	f8da 3000 	ldr.w	r3, [sl]
   11d98:	2201      	movs	r2, #1
   11d9a:	4650      	mov	r0, sl
   11d9c:	695b      	ldr	r3, [r3, #20]
   11d9e:	4798      	blx	r3
						for (uint32_t i=0; i < report_count; i++) {
   11da0:	45b3      	cmp	fp, r6
   11da2:	d1e7      	bne.n	11d74 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4b4>
							bitindex += report_size;
   11da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11da6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   11daa:	e9dd 8611 	ldrd	r8, r6, [sp, #68]	; 0x44
   11dae:	fb02 1303 	mla	r3, r2, r3, r1
   11db2:	930b      	str	r3, [sp, #44]	; 0x2c
   11db4:	e60d      	b.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
   11db6:	460e      	mov	r6, r1
   11db8:	e73e      	b.n	11c38 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x378>
   11dba:	2301      	movs	r3, #1
   11dbc:	940b      	str	r4, [sp, #44]	; 0x2c
   11dbe:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	; 0x48
   11dc2:	9306      	str	r3, [sp, #24]
   11dc4:	e605      	b.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
					if (usage_count > USAGE_LIST_LEN) {
   11dc6:	2d18      	cmp	r5, #24
   11dc8:	d977      	bls.n	11eba <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5fa>
						uindex_max = usage[1];
   11dca:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
						uindex = usage[0];
   11dce:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
						uindex_max = usage[1];
   11dd2:	9312      	str	r3, [sp, #72]	; 0x48
						uminmax = true;
   11dd4:	2301      	movs	r3, #1
   11dd6:	9311      	str	r3, [sp, #68]	; 0x44
					for (uint32_t i=0; i < report_count; i++) {
   11dd8:	9b05      	ldr	r3, [sp, #20]
   11dda:	2b00      	cmp	r3, #0
   11ddc:	f43f adf9 	beq.w	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11de0:	9906      	ldr	r1, [sp, #24]
   11de2:	2301      	movs	r3, #1
						u |= (uint32_t)usage_page << 16;
   11de4:	9a08      	ldr	r2, [sp, #32]
		num |= ~((1 << bitcount) - 1);
   11de6:	2400      	movs	r4, #0
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11de8:	1e48      	subs	r0, r1, #1
		num |= ~((1 << bitcount) - 1);
   11dea:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
						u |= (uint32_t)usage_page << 16;
   11dee:	0412      	lsls	r2, r2, #16
		num |= ~((1 << bitcount) - 1);
   11df0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   11df4:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
						u |= (uint32_t)usage_page << 16;
   11df8:	9210      	str	r2, [sp, #64]	; 0x40
		num |= ~((1 << bitcount) - 1);
   11dfa:	fa03 f201 	lsl.w	r2, r3, r1
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11dfe:	4083      	lsls	r3, r0
   11e00:	9013      	str	r0, [sp, #76]	; 0x4c
		num |= ~((1 << bitcount) - 1);
   11e02:	9414      	str	r4, [sp, #80]	; 0x50
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11e04:	9316      	str	r3, [sp, #88]	; 0x58
		num |= ~((1 << bitcount) - 1);
   11e06:	4253      	negs	r3, r2
   11e08:	e9cd 8618 	strd	r8, r6, [sp, #96]	; 0x60
   11e0c:	9317      	str	r3, [sp, #92]	; 0x5c
   11e0e:	460e      	mov	r6, r1
   11e10:	e01a      	b.n	11e48 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x588>
							if (uindex < uindex_max) uindex++;
   11e12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e14:	429d      	cmp	r5, r3
   11e16:	d22d      	bcs.n	11e74 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5b4>
   11e18:	46a8      	mov	r8, r5
   11e1a:	3501      	adds	r5, #1
						uint32_t n = bitfield(data, bitindex, report_size);
   11e1c:	4632      	mov	r2, r6
   11e1e:	4659      	mov	r1, fp
   11e20:	4648      	mov	r0, r9
   11e22:	f7ff fa13 	bl	1124c <bitfield(unsigned char const*, unsigned long, unsigned long)>
						u |= (uint32_t)usage_page << 16;
   11e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
						uint32_t n = bitfield(data, bitindex, report_size);
   11e28:	4602      	mov	r2, r0
						u |= (uint32_t)usage_page << 16;
   11e2a:	ea43 0108 	orr.w	r1, r3, r8
						if (logical_min >= 0) {
   11e2e:	9b03      	ldr	r3, [sp, #12]
   11e30:	2b00      	cmp	r3, #0
   11e32:	db16      	blt.n	11e62 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a2>
							driver->hid_input_data(u, sn);
   11e34:	f8da 3000 	ldr.w	r3, [sl]
   11e38:	4650      	mov	r0, sl
					for (uint32_t i=0; i < report_count; i++) {
   11e3a:	3401      	adds	r4, #1
						bitindex += report_size;
   11e3c:	44b3      	add	fp, r6
							driver->hid_input_data(u, sn);
   11e3e:	695b      	ldr	r3, [r3, #20]
   11e40:	4798      	blx	r3
					for (uint32_t i=0; i < report_count; i++) {
   11e42:	9b05      	ldr	r3, [sp, #20]
   11e44:	42a3      	cmp	r3, r4
   11e46:	d928      	bls.n	11e9a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5da>
						if (uminmax) {
   11e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e4a:	2b00      	cmp	r3, #0
   11e4c:	d1e1      	bne.n	11e12 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x552>
							u = usage[uindex++];
   11e4e:	ab26      	add	r3, sp, #152	; 0x98
   11e50:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   11e54:	3501      	adds	r5, #1
   11e56:	2d17      	cmp	r5, #23
   11e58:	f833 8c30 	ldrh.w	r8, [r3, #-48]
							if (uindex >= USAGE_LIST_LEN-1) {
   11e5c:	bf28      	it	cs
   11e5e:	2517      	movcs	r5, #23
   11e60:	e7dc      	b.n	11e1c <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x55c>
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11e62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11e64:	2b1e      	cmp	r3, #30
   11e66:	d8e5      	bhi.n	11e34 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x574>
   11e68:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11e6a:	4203      	tst	r3, r0
   11e6c:	d0e2      	beq.n	11e34 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x574>
		num |= ~((1 << bitcount) - 1);
   11e6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11e70:	431a      	orrs	r2, r3
   11e72:	e7df      	b.n	11e34 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x574>
							else if (uminmax_index < usage_min_max_count) {
   11e74:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
   11e78:	429a      	cmp	r2, r3
   11e7a:	d90c      	bls.n	11e96 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5d6>
								uminmax_index++;
   11e7c:	3301      	adds	r3, #1
								uindex = usage[uminmax_index * 2];
   11e7e:	aa26      	add	r2, sp, #152	; 0x98
   11e80:	46a8      	mov	r8, r5
   11e82:	b2db      	uxtb	r3, r3
   11e84:	eb02 0283 	add.w	r2, r2, r3, lsl #2
								uminmax_index++;
   11e88:	9314      	str	r3, [sp, #80]	; 0x50
								uindex_max = usage[uminmax_index * 2 + 1];
   11e8a:	f832 3c2e 	ldrh.w	r3, [r2, #-46]
								uindex = usage[uminmax_index * 2];
   11e8e:	f832 5c30 	ldrh.w	r5, [r2, #-48]
								uindex_max = usage[uminmax_index * 2 + 1];
   11e92:	9312      	str	r3, [sp, #72]	; 0x48
   11e94:	e7c2      	b.n	11e1c <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x55c>
   11e96:	46a8      	mov	r8, r5
   11e98:	e7c0      	b.n	11e1c <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x55c>
						bitindex += report_size;
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	9906      	ldr	r1, [sp, #24]
   11e9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11ea0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11ea4:	bf08      	it	eq
   11ea6:	2300      	moveq	r3, #0
   11ea8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   11eac:	440a      	add	r2, r1
   11eae:	fb01 2303 	mla	r3, r1, r3, r2
   11eb2:	e9dd 8618 	ldrd	r8, r6, [sp, #96]	; 0x60
   11eb6:	930b      	str	r3, [sp, #44]	; 0x2c
   11eb8:	e58b      	b.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
					} else if ((report_count > 1) && (usage_count <= 1)) {
   11eba:	9b05      	ldr	r3, [sp, #20]
   11ebc:	2b01      	cmp	r3, #1
   11ebe:	bf8c      	ite	hi
   11ec0:	2301      	movhi	r3, #1
   11ec2:	2300      	movls	r3, #0
   11ec4:	2d01      	cmp	r5, #1
   11ec6:	bf88      	it	hi
   11ec8:	2300      	movhi	r3, #0
   11eca:	9311      	str	r3, [sp, #68]	; 0x44
   11ecc:	b153      	cbz	r3, 11ee4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x624>
						if (usage_count == 1) {
   11ece:	2d01      	cmp	r5, #1
   11ed0:	d010      	beq.n	11ef4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x634>
							uindex = (last_usage & 0xff00) + 0x100;
   11ed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11ed4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   11ed8:	f503 7580 	add.w	r5, r3, #256	; 0x100
					for (uint32_t i=0; i < report_count; i++) {
   11edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11ee0:	9312      	str	r3, [sp, #72]	; 0x48
   11ee2:	e77d      	b.n	11de0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x520>
					uint32_t uindex_max = 0xffff;	// assume no MAX
   11ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
					uint32_t uindex = 0;
   11ee8:	9d11      	ldr	r5, [sp, #68]	; 0x44
					uint32_t uindex_max = 0xffff;	// assume no MAX
   11eea:	9312      	str	r3, [sp, #72]	; 0x48
   11eec:	e774      	b.n	11dd8 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x518>
						for (uint32_t i=0; i < report_count; i++) {
   11eee:	2301      	movs	r3, #1
   11ef0:	9306      	str	r3, [sp, #24]
   11ef2:	e56e      	b.n	119d2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
							uindex = usage[0];
   11ef4:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
   11ef8:	e7f0      	b.n	11edc <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x61c>
   11efa:	bf00      	nop

00011efc <USBHIDParser::in_data(Transfer_struct const*)>:
{
   11efc:	b570      	push	{r4, r5, r6, lr}
   11efe:	4604      	mov	r4, r0
	if (!(topusage_drivers[0] && topusage_drivers[0]->hid_process_in_data(transfer))) {
   11f00:	6940      	ldr	r0, [r0, #20]
	uint32_t len = transfer->length;
   11f02:	e9d1 560b 	ldrd	r5, r6, [r1, #44]	; 0x2c
	if (!(topusage_drivers[0] && topusage_drivers[0]->hid_process_in_data(transfer))) {
   11f06:	b120      	cbz	r0, 11f12 <USBHIDParser::in_data(Transfer_struct const*)+0x16>
   11f08:	6803      	ldr	r3, [r0, #0]
   11f0a:	4a1d      	ldr	r2, [pc, #116]	; (11f80 <USBHIDParser::in_data(Transfer_struct const*)+0x84>)
   11f0c:	685b      	ldr	r3, [r3, #4]
   11f0e:	4293      	cmp	r3, r2
   11f10:	d132      	bne.n	11f78 <USBHIDParser::in_data(Transfer_struct const*)+0x7c>
		if (use_report_id == false) {
   11f12:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
   11f16:	b1eb      	cbz	r3, 11f54 <USBHIDParser::in_data(Transfer_struct const*)+0x58>
			if (len > 1) {
   11f18:	2e01      	cmp	r6, #1
   11f1a:	d823      	bhi.n	11f64 <USBHIDParser::in_data(Transfer_struct const*)+0x68>
    if ((uint32_t)buf >= 0x20200000u) arm_dcache_flush_delete((void*)buf, in_size);
   11f1c:	4b19      	ldr	r3, [pc, #100]	; (11f84 <USBHIDParser::in_data(Transfer_struct const*)+0x88>)
   11f1e:	429d      	cmp	r5, r3
   11f20:	d910      	bls.n	11f44 <USBHIDParser::in_data(Transfer_struct const*)+0x48>
   11f22:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   11f24:	f025 021f 	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   11f28:	442b      	add	r3, r5
	asm("dsb");
   11f2a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   11f2e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   11f32:	f8c1 2f70 	str.w	r2, [r1, #3952]	; 0xf70
		location += 32;
   11f36:	3220      	adds	r2, #32
	} while (location < end_addr);
   11f38:	4293      	cmp	r3, r2
   11f3a:	d8fa      	bhi.n	11f32 <USBHIDParser::in_data(Transfer_struct const*)+0x36>
	asm("dsb");
   11f3c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   11f40:	f3bf 8f6f 	isb	sy
	queue_Data_Transfer(in_pipe, (void*)buf, in_size, this);
   11f44:	4623      	mov	r3, r4
   11f46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   11f48:	4629      	mov	r1, r5
   11f4a:	68e0      	ldr	r0, [r4, #12]
}
   11f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	queue_Data_Transfer(in_pipe, (void*)buf, in_size, this);
   11f50:	f7fe b90c 	b.w	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
			parse(0x0100, buf, len);
   11f54:	4633      	mov	r3, r6
   11f56:	462a      	mov	r2, r5
   11f58:	f44f 7180 	mov.w	r1, #256	; 0x100
   11f5c:	4620      	mov	r0, r4
   11f5e:	f7ff fcaf 	bl	118c0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)>
   11f62:	e7db      	b.n	11f1c <USBHIDParser::in_data(Transfer_struct const*)+0x20>
				parse(0x0100 | buf[0], buf + 1, len - 1);
   11f64:	462a      	mov	r2, r5
   11f66:	1e73      	subs	r3, r6, #1
   11f68:	4620      	mov	r0, r4
   11f6a:	f812 1b01 	ldrb.w	r1, [r2], #1
   11f6e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   11f72:	f7ff fca5 	bl	118c0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)>
   11f76:	e7d1      	b.n	11f1c <USBHIDParser::in_data(Transfer_struct const*)+0x20>
	if (!(topusage_drivers[0] && topusage_drivers[0]->hid_process_in_data(transfer))) {
   11f78:	4798      	blx	r3
   11f7a:	2800      	cmp	r0, #0
   11f7c:	d1ce      	bne.n	11f1c <USBHIDParser::in_data(Transfer_struct const*)+0x20>
   11f7e:	e7c8      	b.n	11f12 <USBHIDParser::in_data(Transfer_struct const*)+0x16>
   11f80:	0000fca1 	.word	0x0000fca1
   11f84:	201fffff 	.word	0x201fffff

00011f88 <USBHIDParser::in_callback(Transfer_struct const*)>:
{
   11f88:	4601      	mov	r1, r0
	if (transfer->driver) {
   11f8a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   11f8c:	b108      	cbz	r0, 11f92 <USBHIDParser::in_callback(Transfer_struct const*)+0xa>
		((USBHIDParser*)(transfer->driver))->in_data(transfer);
   11f8e:	f7ff bfb5 	b.w	11efc <USBHIDParser::in_data(Transfer_struct const*)>
}
   11f92:	4770      	bx	lr

00011f94 <USBHub::disconnect()>:
	debounce_in_use &= ~(1 << port);
}


void USBHub::disconnect()
{
   11f94:	b570      	push	{r4, r5, r6, lr}
	// disconnect all downstream devices, which may be more hubs
	for (uint32_t i=0; i < numports; i++) {
   11f96:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
{
   11f9a:	4604      	mov	r4, r0
	for (uint32_t i=0; i < numports; i++) {
   11f9c:	b163      	cbz	r3, 11fb8 <USBHub::disconnect()+0x24>
   11f9e:	f500 7656 	add.w	r6, r0, #856	; 0x358
   11fa2:	2500      	movs	r5, #0
		if (devicelist[i]) disconnect_Device(devicelist[i]);
   11fa4:	f856 0f04 	ldr.w	r0, [r6, #4]!
	for (uint32_t i=0; i < numports; i++) {
   11fa8:	3501      	adds	r5, #1
		if (devicelist[i]) disconnect_Device(devicelist[i]);
   11faa:	b118      	cbz	r0, 11fb4 <USBHub::disconnect()+0x20>
   11fac:	f7ff f8fa 	bl	111a4 <USBHost::disconnect_Device(Device_struct*)>
   11fb0:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
	for (uint32_t i=0; i < numports; i++) {
   11fb4:	42ab      	cmp	r3, r5
   11fb6:	d8f5      	bhi.n	11fa4 <USBHub::disconnect()+0x10>
	}
	numports = 0;
   11fb8:	2300      	movs	r3, #0
	changepipe = NULL;
	changebits = 0;
	sending_control_transfer = 0;
	port_doing_reset = 0;
	memset(portstate, 0, sizeof(portstate));
   11fba:	f8c4 339c 	str.w	r3, [r4, #924]	; 0x39c
	numports = 0;
   11fbe:	f884 3396 	strb.w	r3, [r4, #918]	; 0x396
	changepipe = NULL;
   11fc2:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
	changebits = 0;
   11fc6:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
	sending_control_transfer = 0;
   11fca:	f884 3399 	strb.w	r3, [r4, #921]	; 0x399
	port_doing_reset = 0;
   11fce:	f884 339a 	strb.w	r3, [r4, #922]	; 0x39a
	memset(portstate, 0, sizeof(portstate));
   11fd2:	f8c4 339f 	str.w	r3, [r4, #927]	; 0x39f
	memset(devicelist, 0, sizeof(devicelist));
   11fd6:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   11fda:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
   11fde:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
   11fe2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   11fe6:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
   11fea:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
   11fee:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
	send_pending_poweron = 0;
   11ff2:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
	send_pending_getstatus = 0;
	send_pending_clearstatus_connect = 0;
	send_pending_clearstatus_enable = 0;
	send_pending_clearstatus_suspend = 0;
	send_pending_clearstatus_overcurrent = 0;
   11ff6:	e9c4 33e9 	strd	r3, r3, [r4, #932]	; 0x3a4
	send_pending_clearstatus_reset = 0;
	send_pending_setreset = 0;
	debounce_in_use = 0;
}
   11ffa:	bd70      	pop	{r4, r5, r6, pc}

00011ffc <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)>:
	if (type != 0) return false;
   11ffc:	2a00      	cmp	r2, #0
   11ffe:	d173      	bne.n	120e8 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xec>
{
   12000:	b570      	push	{r4, r5, r6, lr}
   12002:	4604      	mov	r4, r0
	resettimer.pointer = (void *)"Hello, I'm resettimer";
   12004:	4857      	ldr	r0, [pc, #348]	; (12164 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x168>)
	if (dev->bDeviceClass != 9 || dev->bDeviceSubClass != 0) return false;
   12006:	4d58      	ldr	r5, [pc, #352]	; (12168 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x16c>)
	resettimer.pointer = (void *)"Hello, I'm resettimer";
   12008:	f8c4 0334 	str.w	r0, [r4, #820]	; 0x334
	debouncetimer.pointer = (void *)"Debounce Timer";
   1200c:	4857      	ldr	r0, [pc, #348]	; (1216c <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x170>)
   1200e:	f8c4 0318 	str.w	r0, [r4, #792]	; 0x318
	if (dev->bDeviceClass != 9 || dev->bDeviceSubClass != 0) return false;
   12012:	6988      	ldr	r0, [r1, #24]
   12014:	4005      	ands	r5, r0
   12016:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
   1201a:	d163      	bne.n	120e4 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe8>
	if (dev->bDeviceProtocol > 2) return false;
   1201c:	7ec8      	ldrb	r0, [r1, #27]
   1201e:	2802      	cmp	r0, #2
   12020:	d860      	bhi.n	120e4 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe8>
	while (len >= 16) {
   12022:	9804      	ldr	r0, [sp, #16]
	interface_count = 0;
   12024:	f884 2390 	strb.w	r2, [r4, #912]	; 0x390
	while (len >= 16) {
   12028:	280f      	cmp	r0, #15
   1202a:	d95b      	bls.n	120e4 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe8>
   1202c:	f1a0 0510 	sub.w	r5, r0, #16
   12030:	f103 0c10 	add.w	ip, r3, #16
   12034:	3320      	adds	r3, #32
   12036:	f025 050f 	bic.w	r5, r5, #15
   1203a:	442b      	add	r3, r5
   1203c:	e003      	b.n	12046 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x4a>
   1203e:	f10c 0c10 	add.w	ip, ip, #16
   12042:	459c      	cmp	ip, r3
   12044:	d04d      	beq.n	120e2 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe6>
		if (d[0] == 9 && d[1] == 4 &&		// valid interface descriptor
   12046:	f81c ec10 	ldrb.w	lr, [ip, #-16]
   1204a:	f1be 0f09 	cmp.w	lr, #9
   1204e:	d1f6      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   12050:	f81c 5c0f 	ldrb.w	r5, [ip, #-15]
   12054:	2d04      	cmp	r5, #4
   12056:	d1f2      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   12058:	f81c 0c0c 	ldrb.w	r0, [ip, #-12]
   1205c:	2801      	cmp	r0, #1
   1205e:	d1ee      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[4] == 1 &&				// has 1 endpoint
   12060:	f81c 0c0b 	ldrb.w	r0, [ip, #-11]
   12064:	2809      	cmp	r0, #9
   12066:	d1ea      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[7] >= 0 && d[7] <= 2 &&		// bInterfaceProtocol is ok
   12068:	f81c 0c09 	ldrb.w	r0, [ip, #-9]
   1206c:	2802      	cmp	r0, #2
   1206e:	d8e6      	bhi.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   12070:	f81c 5c07 	ldrb.w	r5, [ip, #-7]
   12074:	2d07      	cmp	r5, #7
   12076:	d1e2      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[9] == 7 && d[10] == 5 &&		// valid endpoint descriptor
   12078:	f81c 5c06 	ldrb.w	r5, [ip, #-6]
   1207c:	2d05      	cmp	r5, #5
   1207e:	d1de      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   12080:	f81c 5c05 	ldrb.w	r5, [ip, #-5]
   12084:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
   12088:	2d80      	cmp	r5, #128	; 0x80
   1208a:	d1d8      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  (d[11] & 0xF0) == 0x80 &&		// endpoint direction is IN
   1208c:	f81c 5c04 	ldrb.w	r5, [ip, #-4]
   12090:	2d03      	cmp	r5, #3
   12092:	d1d4      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[12] == 3 &&				// endpoint type is interrupt
   12094:	f81c 5c03 	ldrb.w	r5, [ip, #-3]
   12098:	2d01      	cmp	r5, #1
   1209a:	d1d0      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[13] == 1 && d[14] == 0) {		// max packet size is 1 byte
   1209c:	f81c 5c02 	ldrb.w	r5, [ip, #-2]
   120a0:	2d00      	cmp	r5, #0
   120a2:	d1cc      	bne.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
			println("found possible interface, altsetting=", d[3]);
   120a4:	f81c 5c0d 	ldrb.w	r5, [ip, #-13]
			if (interface_count == 0) {
   120a8:	2a00      	cmp	r2, #0
   120aa:	d14d      	bne.n	12148 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14c>
				interface_number = d[2];
   120ac:	f81c 0c0e 	ldrb.w	r0, [ip, #-14]
   120b0:	f884 0391 	strb.w	r0, [r4, #913]	; 0x391
				altsetting = d[3];
   120b4:	f81c 0c0d 	ldrb.w	r0, [ip, #-13]
   120b8:	f884 0392 	strb.w	r0, [r4, #914]	; 0x392
					protocol = d[7];
   120bc:	f81c 0c09 	ldrb.w	r0, [ip, #-9]
   120c0:	f884 0393 	strb.w	r0, [r4, #915]	; 0x393
					endpoint = d[11] & 0x0F;
   120c4:	f81c 0c05 	ldrb.w	r0, [ip, #-5]
   120c8:	f000 000f 	and.w	r0, r0, #15
   120cc:	f884 0394 	strb.w	r0, [r4, #916]	; 0x394
					interval = d[15];
   120d0:	f81c 0c01 	ldrb.w	r0, [ip, #-1]
   120d4:	f884 0395 	strb.w	r0, [r4, #917]	; 0x395
			interface_count++;
   120d8:	3201      	adds	r2, #1
   120da:	b2d2      	uxtb	r2, r2
   120dc:	f884 2390 	strb.w	r2, [r4, #912]	; 0x390
   120e0:	e7ad      	b.n	1203e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
	if (interface_count == 0) return false; // no usable interface found
   120e2:	b91a      	cbnz	r2, 120ec <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xf0>
	if (type != 0) return false;
   120e4:	2000      	movs	r0, #0
}
   120e6:	bd70      	pop	{r4, r5, r6, pc}
	if (type != 0) return false;
   120e8:	2000      	movs	r0, #0
}
   120ea:	4770      	bx	lr
	numports = 0; // unknown until hub descriptor is read
   120ec:	2300      	movs	r3, #0
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   120ee:	4a20      	ldr	r2, [pc, #128]	; (12170 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x174>)
        s.word2 = wIndex | (wLength << 16);
   120f0:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
	queue_Control_Transfer(dev, &setup, hub_desc, this);
   120f4:	4608      	mov	r0, r1
	memset(portstate, 0, sizeof(portstate));
   120f6:	f8c4 339c 	str.w	r3, [r4, #924]	; 0x39c
	queue_Control_Transfer(dev, &setup, hub_desc, this);
   120fa:	f504 7154 	add.w	r1, r4, #848	; 0x350
	numports = 0; // unknown until hub descriptor is read
   120fe:	f884 3396 	strb.w	r3, [r4, #918]	; 0x396
	changepipe = NULL;
   12102:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
	changebits = 0;
   12106:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
	sending_control_transfer = 0;
   1210a:	f884 3399 	strb.w	r3, [r4, #921]	; 0x399
	port_doing_reset = 0;
   1210e:	f884 339a 	strb.w	r3, [r4, #922]	; 0x39a
	memset(portstate, 0, sizeof(portstate));
   12112:	f8c4 339f 	str.w	r3, [r4, #927]	; 0x39f
	memset(devicelist, 0, sizeof(devicelist));
   12116:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   1211a:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
   1211e:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
   12122:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   12126:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
   1212a:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
   1212e:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
	queue_Control_Transfer(dev, &setup, hub_desc, this);
   12132:	4623      	mov	r3, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12134:	f8c4 2350 	str.w	r2, [r4, #848]	; 0x350
   12138:	f504 7260 	add.w	r2, r4, #896	; 0x380
        s.word2 = wIndex | (wLength << 16);
   1213c:	f8c4 5354 	str.w	r5, [r4, #852]	; 0x354
   12140:	f7fd ff7a 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	return true;
   12144:	2001      	movs	r0, #1
}
   12146:	bd70      	pop	{r4, r5, r6, pc}
				if (d[2] != interface_number) break;
   12148:	f81c 6c0e 	ldrb.w	r6, [ip, #-14]
   1214c:	f894 e391 	ldrb.w	lr, [r4, #913]	; 0x391
   12150:	4576      	cmp	r6, lr
   12152:	d1cb      	bne.n	120ec <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xf0>
				if (d[7] > protocol) {
   12154:	f894 e393 	ldrb.w	lr, [r4, #915]	; 0x393
   12158:	4586      	cmp	lr, r0
   1215a:	d2bd      	bcs.n	120d8 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xdc>
					altsetting = d[3];
   1215c:	f884 5392 	strb.w	r5, [r4, #914]	; 0x392
   12160:	e7ac      	b.n	120bc <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc0>
   12162:	bf00      	nop
   12164:	20005d58 	.word	0x20005d58
   12168:	00ffff00 	.word	0x00ffff00
   1216c:	20005d70 	.word	0x20005d70
   12170:	290006a0 	.word	0x290006a0

00012174 <USBHub::init()>:
{
   12174:	b510      	push	{r4, lr}
   12176:	4604      	mov	r4, r0
	contribute_Devices(mydevices, sizeof(mydevices)/sizeof(Device_t));
   12178:	2107      	movs	r1, #7
   1217a:	300c      	adds	r0, #12
   1217c:	f002 fedc 	bl	14f38 <USBHost::contribute_Devices(Device_struct*, unsigned long)>
	contribute_Pipes(mypipes, sizeof(mypipes)/sizeof(Pipe_t));
   12180:	f504 7090 	add.w	r0, r4, #288	; 0x120
   12184:	2102      	movs	r1, #2
   12186:	f002 feef 	bl	14f68 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>
	contribute_Transfers(mytransfers, sizeof(mytransfers)/sizeof(Transfer_t));
   1218a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   1218e:	2104      	movs	r1, #4
   12190:	f002 ff02 	bl	14f98 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>
	contribute_String_Buffers(mystring_bufs, sizeof(mystring_bufs)/sizeof(strbuf_t));
   12194:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   12198:	2101      	movs	r1, #1
   1219a:	f002 ff17 	bl	14fcc <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>
	driver_ready_for_device(this);
   1219e:	4620      	mov	r0, r4
}
   121a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	driver_ready_for_device(this);
   121a4:	f7fe bd84 	b.w	10cb0 <USBHost::driver_ready_for_device(USBDriver*)>

000121a8 <USBHub::send_poweron(unsigned long)>:
	if (port == 0 || port > numports) return;
   121a8:	b1f9      	cbz	r1, 121ea <USBHub::send_poweron(unsigned long)+0x42>
{
   121aa:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   121ac:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   121b0:	4604      	mov	r4, r0
   121b2:	460d      	mov	r5, r1
   121b4:	428b      	cmp	r3, r1
   121b6:	d317      	bcc.n	121e8 <USBHub::send_poweron(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   121b8:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   121bc:	b9b2      	cbnz	r2, 121ec <USBHub::send_poweron(unsigned long)+0x44>
	sending_control_transfer = 1;
   121be:	2601      	movs	r6, #1
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   121c0:	4b0e      	ldr	r3, [pc, #56]	; (121fc <USBHub::send_poweron(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   121c2:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   121c6:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   121ca:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_poweron &= ~(1 << port);
   121ce:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   121d0:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   121d4:	4603      	mov	r3, r0
   121d6:	6880      	ldr	r0, [r0, #8]
   121d8:	f7fd ff2e 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_poweron &= ~(1 << port);
   121dc:	f894 33a3 	ldrb.w	r3, [r4, #931]	; 0x3a3
   121e0:	ea23 0306 	bic.w	r3, r3, r6
   121e4:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
}
   121e8:	bd70      	pop	{r4, r5, r6, pc}
   121ea:	4770      	bx	lr
		send_pending_poweron |= (1 << port);
   121ec:	2201      	movs	r2, #1
   121ee:	f890 33a3 	ldrb.w	r3, [r0, #931]	; 0x3a3
   121f2:	408a      	lsls	r2, r1
   121f4:	4313      	orrs	r3, r2
   121f6:	f880 33a3 	strb.w	r3, [r0, #931]	; 0x3a3
}
   121fa:	bd70      	pop	{r4, r5, r6, pc}
   121fc:	00080323 	.word	0x00080323

00012200 <USBHub::send_getstatus(unsigned long)>:
	if (port > numports) return;
   12200:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12204:	428b      	cmp	r3, r1
   12206:	d329      	bcc.n	1225c <USBHub::send_getstatus(unsigned long)+0x5c>
{
   12208:	b570      	push	{r4, r5, r6, lr}
	if (sending_control_transfer) return false;
   1220a:	f890 3399 	ldrb.w	r3, [r0, #921]	; 0x399
   1220e:	4604      	mov	r4, r0
   12210:	460d      	mov	r5, r1
   12212:	b9db      	cbnz	r3, 1224c <USBHub::send_getstatus(unsigned long)+0x4c>
		mk_setup(setup, ((port > 0) ? 0xA3 : 0xA0), 0, 0, port, 4);
   12214:	2900      	cmp	r1, #0
	sending_control_transfer = 1;
   12216:	f04f 0601 	mov.w	r6, #1
        s.word2 = wIndex | (wLength << 16);
   1221a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
		queue_Control_Transfer(device, &setup, &statusbits, this);
   1221e:	4603      	mov	r3, r0
		mk_setup(setup, ((port > 0) ? 0xA3 : 0xA0), 0, 0, port, 4);
   12220:	bf14      	ite	ne
   12222:	22a3      	movne	r2, #163	; 0xa3
   12224:	22a0      	moveq	r2, #160	; 0xa0
	sending_control_transfer = 1;
   12226:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_getstatus &= ~(1 << port);
   1222a:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1222c:	e9c0 21d4 	strd	r2, r1, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, &statusbits, this);
   12230:	f500 725f 	add.w	r2, r0, #892	; 0x37c
   12234:	f500 7154 	add.w	r1, r0, #848	; 0x350
   12238:	6880      	ldr	r0, [r0, #8]
   1223a:	f7fd fefd 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_getstatus &= ~(1 << port);
   1223e:	f894 33a4 	ldrb.w	r3, [r4, #932]	; 0x3a4
   12242:	ea23 0306 	bic.w	r3, r3, r6
   12246:	f884 33a4 	strb.w	r3, [r4, #932]	; 0x3a4
}
   1224a:	bd70      	pop	{r4, r5, r6, pc}
		send_pending_getstatus |= (1 << port);
   1224c:	2201      	movs	r2, #1
   1224e:	f890 33a4 	ldrb.w	r3, [r0, #932]	; 0x3a4
   12252:	408a      	lsls	r2, r1
   12254:	4313      	orrs	r3, r2
   12256:	f880 33a4 	strb.w	r3, [r0, #932]	; 0x3a4
}
   1225a:	bd70      	pop	{r4, r5, r6, pc}
   1225c:	4770      	bx	lr
   1225e:	bf00      	nop

00012260 <USBHub::timer_event(USBDriverTimer*)>:
{
   12260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12264:	4604      	mov	r4, r0
   12266:	460d      	mov	r5, r1
	uint32_t us = micros() - timer->started_micros;
   12268:	f003 fe0e 	bl	15e88 <micros>
	if (timer == &debouncetimer) {
   1226c:	f504 7646 	add.w	r6, r4, #792	; 0x318
   12270:	42ae      	cmp	r6, r5
   12272:	d023      	beq.n	122bc <USBHub::timer_event(USBDriverTimer*)+0x5c>
	} else if (timer == &resettimer) {
   12274:	f504 734d 	add.w	r3, r4, #820	; 0x334
   12278:	429d      	cmp	r5, r3
   1227a:	d001      	beq.n	12280 <USBHub::timer_event(USBDriverTimer*)+0x20>
}
   1227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t port = port_doing_reset;
   12280:	f894 539a 	ldrb.w	r5, [r4, #922]	; 0x39a
		if (port_doing_reset) {
   12284:	2d00      	cmp	r5, #0
   12286:	d0f9      	beq.n	1227c <USBHub::timer_event(USBDriverTimer*)+0x1c>
			uint8_t &state = portstate[port-1];
   12288:	1e6e      	subs	r6, r5, #1
			if (state == PORT_RECOVERY) {
   1228a:	4426      	add	r6, r4
   1228c:	f896 339c 	ldrb.w	r3, [r6, #924]	; 0x39c
   12290:	2b08      	cmp	r3, #8
   12292:	d1f3      	bne.n	1227c <USBHub::timer_event(USBDriverTimer*)+0x1c>
				devicelist[port-1] = new_Device(speed, device->address, port);
   12294:	68a3      	ldr	r3, [r4, #8]
				port_doing_reset = 0;
   12296:	2700      	movs	r7, #0
				devicelist[port-1] = new_Device(speed, device->address, port);
   12298:	462a      	mov	r2, r5
   1229a:	f894 039b 	ldrb.w	r0, [r4, #923]	; 0x39b
				port_doing_reset = 0;
   1229e:	f884 739a 	strb.w	r7, [r4, #922]	; 0x39a
				devicelist[port-1] = new_Device(speed, device->address, port);
   122a2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   122a6:	7d59      	ldrb	r1, [r3, #21]
   122a8:	f7fe fd12 	bl	10cd0 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)>
				USBHub::reset_busy = false;
   122ac:	4a14      	ldr	r2, [pc, #80]	; (12300 <USBHub::timer_event(USBDriverTimer*)+0xa0>)
				state = PORT_ACTIVE;
   122ae:	2309      	movs	r3, #9
				devicelist[port-1] = new_Device(speed, device->address, port);
   122b0:	f8c4 0358 	str.w	r0, [r4, #856]	; 0x358
				USBHub::reset_busy = false;
   122b4:	7017      	strb	r7, [r2, #0]
				state = PORT_ACTIVE;
   122b6:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
}
   122ba:	e7df      	b.n	1227c <USBHub::timer_event(USBDriverTimer*)+0x1c>
		uint32_t in_use = debounce_in_use;
   122bc:	f894 73ab 	ldrb.w	r7, [r4, #939]	; 0x3ab
		if (in_use) {
   122c0:	2f00      	cmp	r7, #0
   122c2:	d0db      	beq.n	1227c <USBHub::timer_event(USBDriverTimer*)+0x1c>
			for (uint32_t i=1; i <= numports; i++) {
   122c4:	f894 2396 	ldrb.w	r2, [r4, #918]	; 0x396
   122c8:	b192      	cbz	r2, 122f0 <USBHub::timer_event(USBDriverTimer*)+0x90>
   122ca:	2501      	movs	r5, #1
				if (in_use & (1 << i)) send_getstatus(i);
   122cc:	46a8      	mov	r8, r5
   122ce:	e002      	b.n	122d6 <USBHub::timer_event(USBDriverTimer*)+0x76>
			for (uint32_t i=1; i <= numports; i++) {
   122d0:	3501      	adds	r5, #1
   122d2:	42aa      	cmp	r2, r5
   122d4:	d30c      	bcc.n	122f0 <USBHub::timer_event(USBDriverTimer*)+0x90>
				if (in_use & (1 << i)) send_getstatus(i);
   122d6:	fa08 f305 	lsl.w	r3, r8, r5
   122da:	423b      	tst	r3, r7
   122dc:	d0f8      	beq.n	122d0 <USBHub::timer_event(USBDriverTimer*)+0x70>
   122de:	4629      	mov	r1, r5
   122e0:	4620      	mov	r0, r4
   122e2:	f7ff ff8d 	bl	12200 <USBHub::send_getstatus(unsigned long)>
			for (uint32_t i=1; i <= numports; i++) {
   122e6:	3501      	adds	r5, #1
   122e8:	f894 2396 	ldrb.w	r2, [r4, #918]	; 0x396
   122ec:	42aa      	cmp	r2, r5
   122ee:	d2f2      	bcs.n	122d6 <USBHub::timer_event(USBDriverTimer*)+0x76>
			debouncetimer.start(20000);
   122f0:	4630      	mov	r0, r6
   122f2:	f644 6120 	movw	r1, #20000	; 0x4e20
}
   122f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			debouncetimer.start(20000);
   122fa:	f7fd bd93 	b.w	fe24 <USBDriverTimer::start(unsigned long)>
   122fe:	bf00      	nop
   12300:	2000ec2b 	.word	0x2000ec2b

00012304 <USBHub::callback(Transfer_struct const*)>:
{
   12304:	b570      	push	{r4, r5, r6, lr}
	if (transfer->driver) ((USBHub *)(transfer->driver))->status_change(transfer);
   12306:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
   12308:	b305      	cbz	r5, 1234c <USBHub::callback(Transfer_struct const*)+0x48>
	for (uint32_t i=0; i <= numports; i++) {
   1230a:	2400      	movs	r4, #0
		if (changebits & (1 << i)) {
   1230c:	2601      	movs	r6, #1
   1230e:	e004      	b.n	1231a <USBHub::callback(Transfer_struct const*)+0x16>
	for (uint32_t i=0; i <= numports; i++) {
   12310:	3401      	adds	r4, #1
   12312:	f895 3396 	ldrb.w	r3, [r5, #918]	; 0x396
   12316:	429c      	cmp	r4, r3
   12318:	d80e      	bhi.n	12338 <USBHub::callback(Transfer_struct const*)+0x34>
		if (changebits & (1 << i)) {
   1231a:	fa06 f204 	lsl.w	r2, r6, r4
   1231e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
   12322:	421a      	tst	r2, r3
   12324:	d0f4      	beq.n	12310 <USBHub::callback(Transfer_struct const*)+0xc>
			send_getstatus(i);
   12326:	4621      	mov	r1, r4
   12328:	4628      	mov	r0, r5
   1232a:	f7ff ff69 	bl	12200 <USBHub::send_getstatus(unsigned long)>
	for (uint32_t i=0; i <= numports; i++) {
   1232e:	3401      	adds	r4, #1
   12330:	f895 3396 	ldrb.w	r3, [r5, #918]	; 0x396
   12334:	429c      	cmp	r4, r3
   12336:	d9f0      	bls.n	1231a <USBHub::callback(Transfer_struct const*)+0x16>
	queue_Data_Transfer(changepipe, &changebits, 1, this);
   12338:	462b      	mov	r3, r5
   1233a:	f505 715e 	add.w	r1, r5, #888	; 0x378
   1233e:	f8d5 0358 	ldr.w	r0, [r5, #856]	; 0x358
   12342:	2201      	movs	r2, #1
}
   12344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	queue_Data_Transfer(changepipe, &changebits, 1, this);
   12348:	f7fd bf10 	b.w	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
}
   1234c:	bd70      	pop	{r4, r5, r6, pc}
   1234e:	bf00      	nop

00012350 <USBHub::send_clearstatus_connect(unsigned long)>:
	if (port == 0 || port > numports) return;
   12350:	b1f9      	cbz	r1, 12392 <USBHub::send_clearstatus_connect(unsigned long)+0x42>
{
   12352:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   12354:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12358:	4604      	mov	r4, r0
   1235a:	460d      	mov	r5, r1
   1235c:	428b      	cmp	r3, r1
   1235e:	d317      	bcc.n	12390 <USBHub::send_clearstatus_connect(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12360:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   12364:	b9b2      	cbnz	r2, 12394 <USBHub::send_clearstatus_connect(unsigned long)+0x44>
	sending_control_transfer = 1;
   12366:	2601      	movs	r6, #1
   12368:	4b0e      	ldr	r3, [pc, #56]	; (123a4 <USBHub::send_clearstatus_connect(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   1236a:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   1236e:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   12372:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_connect &= ~(1 << port);
   12376:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12378:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   1237c:	4603      	mov	r3, r0
   1237e:	6880      	ldr	r0, [r0, #8]
   12380:	f7fd fe5a 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_connect &= ~(1 << port);
   12384:	f894 33a5 	ldrb.w	r3, [r4, #933]	; 0x3a5
   12388:	ea23 0306 	bic.w	r3, r3, r6
   1238c:	f884 33a5 	strb.w	r3, [r4, #933]	; 0x3a5
}
   12390:	bd70      	pop	{r4, r5, r6, pc}
   12392:	4770      	bx	lr
		send_pending_clearstatus_connect |= (1 << port);
   12394:	2201      	movs	r2, #1
   12396:	f890 33a5 	ldrb.w	r3, [r0, #933]	; 0x3a5
   1239a:	408a      	lsls	r2, r1
   1239c:	4313      	orrs	r3, r2
   1239e:	f880 33a5 	strb.w	r3, [r0, #933]	; 0x3a5
}
   123a2:	bd70      	pop	{r4, r5, r6, pc}
   123a4:	00100123 	.word	0x00100123

000123a8 <USBHub::send_clearstatus_enable(unsigned long)>:
	if (port == 0 || port > numports) return;
   123a8:	b1f9      	cbz	r1, 123ea <USBHub::send_clearstatus_enable(unsigned long)+0x42>
{
   123aa:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   123ac:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   123b0:	4604      	mov	r4, r0
   123b2:	460d      	mov	r5, r1
   123b4:	428b      	cmp	r3, r1
   123b6:	d317      	bcc.n	123e8 <USBHub::send_clearstatus_enable(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   123b8:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   123bc:	b9b2      	cbnz	r2, 123ec <USBHub::send_clearstatus_enable(unsigned long)+0x44>
	sending_control_transfer = 1;
   123be:	2601      	movs	r6, #1
   123c0:	4b0e      	ldr	r3, [pc, #56]	; (123fc <USBHub::send_clearstatus_enable(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   123c2:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   123c6:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   123ca:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_enable &= ~(1 << port);
   123ce:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   123d0:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   123d4:	4603      	mov	r3, r0
   123d6:	6880      	ldr	r0, [r0, #8]
   123d8:	f7fd fe2e 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_enable &= ~(1 << port);
   123dc:	f894 33a6 	ldrb.w	r3, [r4, #934]	; 0x3a6
   123e0:	ea23 0306 	bic.w	r3, r3, r6
   123e4:	f884 33a6 	strb.w	r3, [r4, #934]	; 0x3a6
}
   123e8:	bd70      	pop	{r4, r5, r6, pc}
   123ea:	4770      	bx	lr
		send_pending_clearstatus_enable |= (1 << port);
   123ec:	2201      	movs	r2, #1
   123ee:	f890 33a6 	ldrb.w	r3, [r0, #934]	; 0x3a6
   123f2:	408a      	lsls	r2, r1
   123f4:	4313      	orrs	r3, r2
   123f6:	f880 33a6 	strb.w	r3, [r0, #934]	; 0x3a6
}
   123fa:	bd70      	pop	{r4, r5, r6, pc}
   123fc:	00110123 	.word	0x00110123

00012400 <USBHub::send_clearstatus_suspend(unsigned long)>:
	if (port == 0 || port > numports) return;
   12400:	b1f9      	cbz	r1, 12442 <USBHub::send_clearstatus_suspend(unsigned long)+0x42>
{
   12402:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   12404:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12408:	4604      	mov	r4, r0
   1240a:	460d      	mov	r5, r1
   1240c:	428b      	cmp	r3, r1
   1240e:	d317      	bcc.n	12440 <USBHub::send_clearstatus_suspend(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12410:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   12414:	b9b2      	cbnz	r2, 12444 <USBHub::send_clearstatus_suspend(unsigned long)+0x44>
	sending_control_transfer = 1;
   12416:	2601      	movs	r6, #1
   12418:	4b0e      	ldr	r3, [pc, #56]	; (12454 <USBHub::send_clearstatus_suspend(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   1241a:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   1241e:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   12422:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_suspend &= ~(1 << port);
   12426:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12428:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   1242c:	4603      	mov	r3, r0
   1242e:	6880      	ldr	r0, [r0, #8]
   12430:	f7fd fe02 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_suspend &= ~(1 << port);
   12434:	f894 33a7 	ldrb.w	r3, [r4, #935]	; 0x3a7
   12438:	ea23 0306 	bic.w	r3, r3, r6
   1243c:	f884 33a7 	strb.w	r3, [r4, #935]	; 0x3a7
}
   12440:	bd70      	pop	{r4, r5, r6, pc}
   12442:	4770      	bx	lr
		send_pending_clearstatus_suspend |= (1 << port);
   12444:	2201      	movs	r2, #1
   12446:	f890 33a7 	ldrb.w	r3, [r0, #935]	; 0x3a7
   1244a:	408a      	lsls	r2, r1
   1244c:	4313      	orrs	r3, r2
   1244e:	f880 33a7 	strb.w	r3, [r0, #935]	; 0x3a7
}
   12452:	bd70      	pop	{r4, r5, r6, pc}
   12454:	00120123 	.word	0x00120123

00012458 <USBHub::send_clearstatus_overcurrent(unsigned long)>:
	if (port == 0 || port > numports) return;
   12458:	b1f9      	cbz	r1, 1249a <USBHub::send_clearstatus_overcurrent(unsigned long)+0x42>
{
   1245a:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   1245c:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12460:	4604      	mov	r4, r0
   12462:	460d      	mov	r5, r1
   12464:	428b      	cmp	r3, r1
   12466:	d317      	bcc.n	12498 <USBHub::send_clearstatus_overcurrent(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12468:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   1246c:	b9b2      	cbnz	r2, 1249c <USBHub::send_clearstatus_overcurrent(unsigned long)+0x44>
	sending_control_transfer = 1;
   1246e:	2601      	movs	r6, #1
   12470:	4b0e      	ldr	r3, [pc, #56]	; (124ac <USBHub::send_clearstatus_overcurrent(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   12472:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   12476:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   1247a:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_overcurrent &= ~(1 << port);
   1247e:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12480:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   12484:	4603      	mov	r3, r0
   12486:	6880      	ldr	r0, [r0, #8]
   12488:	f7fd fdd6 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_overcurrent &= ~(1 << port);
   1248c:	f894 33a8 	ldrb.w	r3, [r4, #936]	; 0x3a8
   12490:	ea23 0306 	bic.w	r3, r3, r6
   12494:	f884 33a8 	strb.w	r3, [r4, #936]	; 0x3a8
}
   12498:	bd70      	pop	{r4, r5, r6, pc}
   1249a:	4770      	bx	lr
		send_pending_clearstatus_overcurrent |= (1 << port);
   1249c:	2201      	movs	r2, #1
   1249e:	f890 33a8 	ldrb.w	r3, [r0, #936]	; 0x3a8
   124a2:	408a      	lsls	r2, r1
   124a4:	4313      	orrs	r3, r2
   124a6:	f880 33a8 	strb.w	r3, [r0, #936]	; 0x3a8
}
   124aa:	bd70      	pop	{r4, r5, r6, pc}
   124ac:	00130123 	.word	0x00130123

000124b0 <USBHub::send_clearstatus_reset(unsigned long)>:
	if (port == 0 || port > numports) return;
   124b0:	b1f9      	cbz	r1, 124f2 <USBHub::send_clearstatus_reset(unsigned long)+0x42>
{
   124b2:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   124b4:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   124b8:	4604      	mov	r4, r0
   124ba:	460d      	mov	r5, r1
   124bc:	428b      	cmp	r3, r1
   124be:	d317      	bcc.n	124f0 <USBHub::send_clearstatus_reset(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   124c0:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   124c4:	b9b2      	cbnz	r2, 124f4 <USBHub::send_clearstatus_reset(unsigned long)+0x44>
	sending_control_transfer = 1;
   124c6:	2601      	movs	r6, #1
   124c8:	4b0e      	ldr	r3, [pc, #56]	; (12504 <USBHub::send_clearstatus_reset(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   124ca:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   124ce:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   124d2:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_reset &= ~(1 << port);
   124d6:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   124d8:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   124dc:	4603      	mov	r3, r0
   124de:	6880      	ldr	r0, [r0, #8]
   124e0:	f7fd fdaa 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_reset &= ~(1 << port);
   124e4:	f894 33a9 	ldrb.w	r3, [r4, #937]	; 0x3a9
   124e8:	ea23 0306 	bic.w	r3, r3, r6
   124ec:	f884 33a9 	strb.w	r3, [r4, #937]	; 0x3a9
}
   124f0:	bd70      	pop	{r4, r5, r6, pc}
   124f2:	4770      	bx	lr
		send_pending_clearstatus_reset |= (1 << port);
   124f4:	2201      	movs	r2, #1
   124f6:	f890 33a9 	ldrb.w	r3, [r0, #937]	; 0x3a9
   124fa:	408a      	lsls	r2, r1
   124fc:	4313      	orrs	r3, r2
   124fe:	f880 33a9 	strb.w	r3, [r0, #937]	; 0x3a9
}
   12502:	bd70      	pop	{r4, r5, r6, pc}
   12504:	00140123 	.word	0x00140123

00012508 <USBHub::send_setreset(unsigned long)>:
	if (port == 0 || port > numports) return;
   12508:	b1f9      	cbz	r1, 1254a <USBHub::send_setreset(unsigned long)+0x42>
{
   1250a:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   1250c:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12510:	4604      	mov	r4, r0
   12512:	460d      	mov	r5, r1
   12514:	428b      	cmp	r3, r1
   12516:	d317      	bcc.n	12548 <USBHub::send_setreset(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12518:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   1251c:	b9b2      	cbnz	r2, 1254c <USBHub::send_setreset(unsigned long)+0x44>
	sending_control_transfer = 1;
   1251e:	2601      	movs	r6, #1
   12520:	4b0e      	ldr	r3, [pc, #56]	; (1255c <USBHub::send_setreset(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   12522:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   12526:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   1252a:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_setreset &= ~(1 << port);
   1252e:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12530:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   12534:	4603      	mov	r3, r0
   12536:	6880      	ldr	r0, [r0, #8]
   12538:	f7fd fd7e 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_setreset &= ~(1 << port);
   1253c:	f894 33aa 	ldrb.w	r3, [r4, #938]	; 0x3aa
   12540:	ea23 0306 	bic.w	r3, r3, r6
   12544:	f884 33aa 	strb.w	r3, [r4, #938]	; 0x3aa
}
   12548:	bd70      	pop	{r4, r5, r6, pc}
   1254a:	4770      	bx	lr
		send_pending_setreset |= (1 << port);
   1254c:	2201      	movs	r2, #1
   1254e:	f890 33aa 	ldrb.w	r3, [r0, #938]	; 0x3aa
   12552:	408a      	lsls	r2, r1
   12554:	4313      	orrs	r3, r2
   12556:	f880 33aa 	strb.w	r3, [r0, #938]	; 0x3aa
}
   1255a:	bd70      	pop	{r4, r5, r6, pc}
   1255c:	00040323 	.word	0x00040323

00012560 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]>:
void USBHub::new_port_status(uint32_t port, uint32_t status)
   12560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	println("  state=", portstate[port-1]);
   12564:	1e4e      	subs	r6, r1, #1
void USBHub::new_port_status(uint32_t port, uint32_t status)
   12566:	b082      	sub	sp, #8
   12568:	460d      	mov	r5, r1
   1256a:	4604      	mov	r4, r0
	println("  state=", portstate[port-1]);
   1256c:	4406      	add	r6, r0
	if (status & 0x0001) println("  Device is present: ");
   1256e:	f002 0701 	and.w	r7, r2, #1
	println("  state=", portstate[port-1]);
   12572:	f896 339c 	ldrb.w	r3, [r6, #924]	; 0x39c
	switch (state) {
   12576:	2b09      	cmp	r3, #9
   12578:	d808      	bhi.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
   1257a:	e8df f003 	tbb	[pc, r3]
   1257e:	1d1d      	.short	0x1d1d
   12580:	0a0a0a0a 	.word	0x0a0a0a0a
   12584:	4a05320a 	.word	0x4a05320a
		if (!(status & 0x0001)) {
   12588:	2f00      	cmp	r7, #0
   1258a:	d054      	beq.n	12636 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0xd6>
}
   1258c:	b002      	add	sp, #8
   1258e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (status & 0x0001) {
   12592:	2f00      	cmp	r7, #0
   12594:	d059      	beq.n	1264a <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0xea>
			if (++state > PORT_DEBOUNCE5) {
   12596:	3301      	adds	r3, #1
   12598:	b2db      	uxtb	r3, r3
   1259a:	2b07      	cmp	r3, #7
   1259c:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
   125a0:	d1f4      	bne.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
				if (USBHub::reset_busy || USBHost::enumeration_busy) {
   125a2:	4a3f      	ldr	r2, [pc, #252]	; (126a0 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x140>)
   125a4:	7811      	ldrb	r1, [r2, #0]
   125a6:	b919      	cbnz	r1, 125b0 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x50>
   125a8:	493e      	ldr	r1, [pc, #248]	; (126a4 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x144>)
   125aa:	7809      	ldrb	r1, [r1, #0]
   125ac:	2900      	cmp	r1, #0
   125ae:	d065      	beq.n	1267c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x11c>
					state = PORT_DEBOUNCE5;
   125b0:	2306      	movs	r3, #6
   125b2:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
					break;
   125b6:	e7e9      	b.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
		if (status & 0x0001) { // connected
   125b8:	2f00      	cmp	r7, #0
   125ba:	d0e7      	beq.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			state = PORT_DEBOUNCE1;
   125bc:	2302      	movs	r3, #2
   125be:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
	if (debounce_in_use == 0) debouncetimer.start(20000);
   125c2:	f890 33ab 	ldrb.w	r3, [r0, #939]	; 0x3ab
   125c6:	2b00      	cmp	r3, #0
   125c8:	d04f      	beq.n	1266a <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x10a>
	debounce_in_use |= (1 << port);
   125ca:	2201      	movs	r2, #1
			send_clearstatus_connect(port);
   125cc:	4629      	mov	r1, r5
   125ce:	4620      	mov	r0, r4
	debounce_in_use |= (1 << port);
   125d0:	40aa      	lsls	r2, r5
   125d2:	4313      	orrs	r3, r2
   125d4:	f884 33ab 	strb.w	r3, [r4, #939]	; 0x3ab
}
   125d8:	b002      	add	sp, #8
   125da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			send_clearstatus_connect(port);
   125de:	f7ff beb7 	b.w	12350 <USBHub::send_clearstatus_connect(unsigned long)>
		if (status & 0x0002) {
   125e2:	0791      	lsls	r1, r2, #30
   125e4:	d5d0      	bpl.n	12588 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x28>
			send_clearstatus_reset(port);
   125e6:	4629      	mov	r1, r5
   125e8:	9201      	str	r2, [sp, #4]
   125ea:	f7ff ff61 	bl	124b0 <USBHub::send_clearstatus_reset(unsigned long)>
			state = PORT_RECOVERY;
   125ee:	2308      	movs	r3, #8
			if (status & 0x0200) speed = 1;
   125f0:	9a01      	ldr	r2, [sp, #4]
			state = PORT_RECOVERY;
   125f2:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
			if (status & 0x0200) speed = 1;
   125f6:	0593      	lsls	r3, r2, #22
   125f8:	d533      	bpl.n	12662 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x102>
   125fa:	2201      	movs	r2, #1
			resettimer.start(25000);
   125fc:	f246 11a8 	movw	r1, #25000	; 0x61a8
   12600:	f504 704d 	add.w	r0, r4, #820	; 0x334
			port_doing_reset_speed = speed;
   12604:	f884 239b 	strb.w	r2, [r4, #923]	; 0x39b
}
   12608:	b002      	add	sp, #8
   1260a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			resettimer.start(25000);
   1260e:	f7fd bc09 	b.w	fe24 <USBDriverTimer::start(unsigned long)>
		if (!(status & 0x0001)) {
   12612:	2f00      	cmp	r7, #0
   12614:	d1ba      	bne.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			disconnect_Device(devicelist[port-1]);
   12616:	eb00 0885 	add.w	r8, r0, r5, lsl #2
   1261a:	f8d8 0358 	ldr.w	r0, [r8, #856]	; 0x358
   1261e:	f7fe fdc1 	bl	111a4 <USBHost::disconnect_Device(Device_struct*)>
			send_clearstatus_connect(port);
   12622:	4629      	mov	r1, r5
   12624:	4620      	mov	r0, r4
			devicelist[port-1] = NULL;
   12626:	f8c8 7358 	str.w	r7, [r8, #856]	; 0x358
			send_clearstatus_connect(port);
   1262a:	f7ff fe91 	bl	12350 <USBHub::send_clearstatus_connect(unsigned long)>
			state = PORT_DISCONNECT;
   1262e:	2301      	movs	r3, #1
   12630:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
   12634:	e7aa      	b.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			send_clearstatus_connect(port);
   12636:	4629      	mov	r1, r5
   12638:	4620      	mov	r0, r4
   1263a:	f7ff fe89 	bl	12350 <USBHub::send_clearstatus_connect(unsigned long)>
			USBHub::reset_busy = false;
   1263e:	4a18      	ldr	r2, [pc, #96]	; (126a0 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x140>)
			state = PORT_DISCONNECT;
   12640:	2301      	movs	r3, #1
			USBHub::reset_busy = false;
   12642:	7017      	strb	r7, [r2, #0]
			state = PORT_DISCONNECT;
   12644:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
   12648:	e7a0      	b.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
	debounce_in_use &= ~(1 << port);
   1264a:	2201      	movs	r2, #1
   1264c:	f890 33ab 	ldrb.w	r3, [r0, #939]	; 0x3ab
   12650:	fa02 f505 	lsl.w	r5, r2, r5
   12654:	ea23 0305 	bic.w	r3, r3, r5
   12658:	f880 33ab 	strb.w	r3, [r0, #939]	; 0x3ab
			state = PORT_DISCONNECT;
   1265c:	f886 239c 	strb.w	r2, [r6, #924]	; 0x39c
   12660:	e794      	b.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			else if (status & 0x0400) speed = 2;
   12662:	f3c2 2280 	ubfx	r2, r2, #10, #1
   12666:	0052      	lsls	r2, r2, #1
   12668:	e7c8      	b.n	125fc <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x9c>
	if (debounce_in_use == 0) debouncetimer.start(20000);
   1266a:	f644 6120 	movw	r1, #20000	; 0x4e20
   1266e:	f500 7046 	add.w	r0, r0, #792	; 0x318
   12672:	f7fd fbd7 	bl	fe24 <USBDriverTimer::start(unsigned long)>
	debounce_in_use |= (1 << port);
   12676:	f894 33ab 	ldrb.w	r3, [r4, #939]	; 0x3ab
   1267a:	e7a6      	b.n	125ca <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x6a>
				USBHub::reset_busy = true;
   1267c:	2101      	movs	r1, #1
   1267e:	7011      	strb	r1, [r2, #0]
	debounce_in_use &= ~(1 << port);
   12680:	40a9      	lsls	r1, r5
   12682:	f890 23ab 	ldrb.w	r2, [r0, #939]	; 0x3ab
   12686:	ea22 0201 	bic.w	r2, r2, r1
				send_setreset(port);
   1268a:	4629      	mov	r1, r5
	debounce_in_use &= ~(1 << port);
   1268c:	f880 23ab 	strb.w	r2, [r0, #939]	; 0x3ab
				state = PORT_RESET;
   12690:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
				send_setreset(port);
   12694:	f7ff ff38 	bl	12508 <USBHub::send_setreset(unsigned long)>
				port_doing_reset = port;
   12698:	f884 539a 	strb.w	r5, [r4, #922]	; 0x39a
   1269c:	e776      	b.n	1258c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
   1269e:	bf00      	nop
   126a0:	2000ec2b 	.word	0x2000ec2b
   126a4:	2000ec2c 	.word	0x2000ec2c

000126a8 <USBHub::control(Transfer_struct const*)>:
	sending_control_transfer = 0;
   126a8:	2200      	movs	r2, #0
{
   126aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	sending_control_transfer = 0;
   126ae:	f880 2399 	strb.w	r2, [r0, #921]	; 0x399
{
   126b2:	b082      	sub	sp, #8
	uint32_t mesg = transfer->setup.word1;
   126b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
{
   126b6:	4604      	mov	r4, r0
	switch (mesg) {
   126b8:	4d85      	ldr	r5, [pc, #532]	; (128d0 <USBHub::control(Transfer_struct const*)+0x228>)
	uint32_t port = transfer->setup.wIndex;
   126ba:	8f0e      	ldrh	r6, [r1, #56]	; 0x38
	switch (mesg) {
   126bc:	42ab      	cmp	r3, r5
   126be:	f000 808c 	beq.w	127da <USBHub::control(Transfer_struct const*)+0x132>
   126c2:	4d84      	ldr	r5, [pc, #528]	; (128d4 <USBHub::control(Transfer_struct const*)+0x22c>)
   126c4:	42ab      	cmp	r3, r5
   126c6:	d04e      	beq.n	12766 <USBHub::control(Transfer_struct const*)+0xbe>
   126c8:	2ba3      	cmp	r3, #163	; 0xa3
   126ca:	d037      	beq.n	1273c <USBHub::control(Transfer_struct const*)+0x94>
	if (send_pending_poweron) {
   126cc:	f894 13a3 	ldrb.w	r1, [r4, #931]	; 0x3a3
   126d0:	bb51      	cbnz	r1, 12728 <USBHub::control(Transfer_struct const*)+0x80>
	} else if (send_pending_clearstatus_connect) {
   126d2:	f894 13a5 	ldrb.w	r1, [r4, #933]	; 0x3a5
   126d6:	2900      	cmp	r1, #0
   126d8:	f040 80c8 	bne.w	1286c <USBHub::control(Transfer_struct const*)+0x1c4>
	} else if (send_pending_clearstatus_enable) {
   126dc:	f894 13a6 	ldrb.w	r1, [r4, #934]	; 0x3a6
   126e0:	2900      	cmp	r1, #0
   126e2:	f040 80b9 	bne.w	12858 <USBHub::control(Transfer_struct const*)+0x1b0>
	} else if (send_pending_clearstatus_suspend) {
   126e6:	f894 13a7 	ldrb.w	r1, [r4, #935]	; 0x3a7
   126ea:	2900      	cmp	r1, #0
   126ec:	f040 80c8 	bne.w	12880 <USBHub::control(Transfer_struct const*)+0x1d8>
	} else if (send_pending_clearstatus_overcurrent) {
   126f0:	f894 13a8 	ldrb.w	r1, [r4, #936]	; 0x3a8
   126f4:	2900      	cmp	r1, #0
   126f6:	f040 80d7 	bne.w	128a8 <USBHub::control(Transfer_struct const*)+0x200>
	} else if (send_pending_clearstatus_reset) {
   126fa:	f894 13a9 	ldrb.w	r1, [r4, #937]	; 0x3a9
   126fe:	2900      	cmp	r1, #0
   12700:	f040 80dc 	bne.w	128bc <USBHub::control(Transfer_struct const*)+0x214>
	} else if (send_pending_getstatus) {
   12704:	f894 13a4 	ldrb.w	r1, [r4, #932]	; 0x3a4
   12708:	2900      	cmp	r1, #0
   1270a:	f040 80c3 	bne.w	12894 <USBHub::control(Transfer_struct const*)+0x1ec>
	} else if (send_pending_setreset) {
   1270e:	f894 13aa 	ldrb.w	r1, [r4, #938]	; 0x3aa
   12712:	b329      	cbz	r1, 12760 <USBHub::control(Transfer_struct const*)+0xb8>
		send_setreset(lowestbit(send_pending_setreset));
   12714:	fa91 f1a1 	rbit	r1, r1
   12718:	4620      	mov	r0, r4
   1271a:	fab1 f181 	clz	r1, r1
}
   1271e:	b002      	add	sp, #8
   12720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_setreset(lowestbit(send_pending_setreset));
   12724:	f7ff bef0 	b.w	12508 <USBHub::send_setreset(unsigned long)>
		send_poweron(lowestbit(send_pending_poweron));
   12728:	fa91 f1a1 	rbit	r1, r1
   1272c:	4620      	mov	r0, r4
   1272e:	fab1 f181 	clz	r1, r1
}
   12732:	b002      	add	sp, #8
   12734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_poweron(lowestbit(send_pending_poweron));
   12738:	f7ff bd36 	b.w	121a8 <USBHub::send_poweron(unsigned long)>
		if (transfer->length == 4) {
   1273c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1273e:	2b04      	cmp	r3, #4
   12740:	d1c4      	bne.n	126cc <USBHub::control(Transfer_struct const*)+0x24>
			uint32_t status = *(uint32_t *)(transfer->buffer);
   12742:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   12744:	681a      	ldr	r2, [r3, #0]
	if (port == 0 || port > numports) return;
   12746:	2e00      	cmp	r6, #0
   12748:	d0c0      	beq.n	126cc <USBHub::control(Transfer_struct const*)+0x24>
   1274a:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   1274e:	429e      	cmp	r6, r3
   12750:	d8bc      	bhi.n	126cc <USBHub::control(Transfer_struct const*)+0x24>
   12752:	4631      	mov	r1, r6
   12754:	f7ff ff04 	bl	12560 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]>
	if (sending_control_transfer) return;
   12758:	f894 2399 	ldrb.w	r2, [r4, #921]	; 0x399
   1275c:	2a00      	cmp	r2, #0
   1275e:	d0b5      	beq.n	126cc <USBHub::control(Transfer_struct const*)+0x24>
}
   12760:	b002      	add	sp, #8
   12762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (interface_count > 1) {
   12766:	f894 3390 	ldrb.w	r3, [r4, #912]	; 0x390
		numports = hub_desc[2];
   1276a:	f8b0 0382 	ldrh.w	r0, [r0, #898]	; 0x382
		powertime = hub_desc[5];
   1276e:	f894 1385 	ldrb.w	r1, [r4, #901]	; 0x385
		if (interface_count > 1) {
   12772:	2b01      	cmp	r3, #1
		numports = hub_desc[2];
   12774:	f894 5382 	ldrb.w	r5, [r4, #898]	; 0x382
   12778:	f8a4 0396 	strh.w	r0, [r4, #918]	; 0x396
		powertime = hub_desc[5];
   1277c:	f884 1398 	strb.w	r1, [r4, #920]	; 0x398
		if (interface_count > 1) {
   12780:	d852      	bhi.n	12828 <USBHub::control(Transfer_struct const*)+0x180>
		for (uint32_t i=1; i <= numports; i++) {
   12782:	2d00      	cmp	r5, #0
   12784:	d0a2      	beq.n	126cc <USBHub::control(Transfer_struct const*)+0x24>
   12786:	2501      	movs	r5, #1
   12788:	4f51      	ldr	r7, [pc, #324]	; (128d0 <USBHub::control(Transfer_struct const*)+0x228>)
		mk_setup(setup, 0x23, 3, 8, port, 0);
   1278a:	f504 7854 	add.w	r8, r4, #848	; 0x350
	sending_control_transfer = 1;
   1278e:	462e      	mov	r6, r5
	if (sending_control_transfer) return false;
   12790:	b9da      	cbnz	r2, 127ca <USBHub::control(Transfer_struct const*)+0x122>
		queue_Control_Transfer(device, &setup, NULL, this);
   12792:	4623      	mov	r3, r4
   12794:	4641      	mov	r1, r8
   12796:	68a0      	ldr	r0, [r4, #8]
        s.word2 = wIndex | (wLength << 16);
   12798:	f8c4 5354 	str.w	r5, [r4, #852]	; 0x354
	sending_control_transfer = 1;
   1279c:	f884 6399 	strb.w	r6, [r4, #921]	; 0x399
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   127a0:	f8c4 7350 	str.w	r7, [r4, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   127a4:	f7fd fc48 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_poweron &= ~(1 << port);
   127a8:	fa06 f205 	lsl.w	r2, r6, r5
   127ac:	f894 33a3 	ldrb.w	r3, [r4, #931]	; 0x3a3
   127b0:	ea23 0302 	bic.w	r3, r3, r2
	if (sending_control_transfer) return;
   127b4:	f894 2399 	ldrb.w	r2, [r4, #921]	; 0x399
		send_pending_poweron &= ~(1 << port);
   127b8:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
		for (uint32_t i=1; i <= numports; i++) {
   127bc:	3501      	adds	r5, #1
   127be:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
   127c2:	42ab      	cmp	r3, r5
   127c4:	d3ca      	bcc.n	1275c <USBHub::control(Transfer_struct const*)+0xb4>
	if (sending_control_transfer) return false;
   127c6:	2a00      	cmp	r2, #0
   127c8:	d0e3      	beq.n	12792 <USBHub::control(Transfer_struct const*)+0xea>
		send_pending_poweron |= (1 << port);
   127ca:	f894 33a3 	ldrb.w	r3, [r4, #931]	; 0x3a3
   127ce:	fa06 f105 	lsl.w	r1, r6, r5
   127d2:	430b      	orrs	r3, r1
   127d4:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
   127d8:	e7f0      	b.n	127bc <USBHub::control(Transfer_struct const*)+0x114>
		if (port == numports && changepipe == NULL) {
   127da:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   127de:	42b3      	cmp	r3, r6
   127e0:	f47f af74 	bne.w	126cc <USBHub::control(Transfer_struct const*)+0x24>
   127e4:	f8d0 3358 	ldr.w	r3, [r0, #856]	; 0x358
   127e8:	2b00      	cmp	r3, #0
   127ea:	f47f af6f 	bne.w	126cc <USBHub::control(Transfer_struct const*)+0x24>
			changepipe = new_Pipe(device, 3, endpoint, 1, 1, interval);
   127ee:	2501      	movs	r5, #1
   127f0:	f890 0395 	ldrb.w	r0, [r0, #917]	; 0x395
   127f4:	f894 2394 	ldrb.w	r2, [r4, #916]	; 0x394
   127f8:	2103      	movs	r1, #3
   127fa:	462b      	mov	r3, r5
   127fc:	e9cd 5000 	strd	r5, r0, [sp]
   12800:	68a0      	ldr	r0, [r4, #8]
   12802:	f7fe f885 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			changepipe->callback_function = callback;
   12806:	4b34      	ldr	r3, [pc, #208]	; (128d8 <USBHub::control(Transfer_struct const*)+0x230>)
			changepipe = new_Pipe(device, 3, endpoint, 1, 1, interval);
   12808:	4601      	mov	r1, r0
			queue_Data_Transfer(changepipe, &changebits, 1, this);
   1280a:	462a      	mov	r2, r5
			changepipe = new_Pipe(device, 3, endpoint, 1, 1, interval);
   1280c:	f8c4 0358 	str.w	r0, [r4, #856]	; 0x358
			println("pipe cap1 = ", changepipe->qh.capabilities[0], HEX);
   12810:	6849      	ldr	r1, [r1, #4]
			queue_Data_Transfer(changepipe, &changebits, 1, this);
   12812:	f504 715e 	add.w	r1, r4, #888	; 0x378
			changepipe->callback_function = callback;
   12816:	63c3      	str	r3, [r0, #60]	; 0x3c
			queue_Data_Transfer(changepipe, &changebits, 1, this);
   12818:	4623      	mov	r3, r4
   1281a:	f7fd fca7 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
	if (sending_control_transfer) return;
   1281e:	f894 2399 	ldrb.w	r2, [r4, #921]	; 0x399
   12822:	2a00      	cmp	r2, #0
   12824:	d19c      	bne.n	12760 <USBHub::control(Transfer_struct const*)+0xb8>
   12826:	e751      	b.n	126cc <USBHub::control(Transfer_struct const*)+0x24>
	mk_setup(setup, 1, 11, altsetting, interface_number, 0);
   12828:	f894 3392 	ldrb.w	r3, [r4, #914]	; 0x392
   1282c:	f640 3101 	movw	r1, #2817	; 0xb01
   12830:	f894 0391 	ldrb.w	r0, [r4, #913]	; 0x391
   12834:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	queue_Control_Transfer(device, &setup, NULL, this);
   12838:	4623      	mov	r3, r4
   1283a:	e9c4 10d4 	strd	r1, r0, [r4, #848]	; 0x350
   1283e:	f504 7154 	add.w	r1, r4, #848	; 0x350
   12842:	68a0      	ldr	r0, [r4, #8]
   12844:	f7fd fbf8 	bl	10038 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	sending_control_transfer = 1;
   12848:	2201      	movs	r2, #1
		for (uint32_t i=1; i <= numports; i++) {
   1284a:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
	sending_control_transfer = 1;
   1284e:	f884 2399 	strb.w	r2, [r4, #921]	; 0x399
		for (uint32_t i=1; i <= numports; i++) {
   12852:	2b00      	cmp	r3, #0
   12854:	d197      	bne.n	12786 <USBHub::control(Transfer_struct const*)+0xde>
   12856:	e783      	b.n	12760 <USBHub::control(Transfer_struct const*)+0xb8>
		send_clearstatus_enable(lowestbit(send_pending_clearstatus_enable));
   12858:	fa91 f1a1 	rbit	r1, r1
   1285c:	4620      	mov	r0, r4
   1285e:	fab1 f181 	clz	r1, r1
}
   12862:	b002      	add	sp, #8
   12864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_enable(lowestbit(send_pending_clearstatus_enable));
   12868:	f7ff bd9e 	b.w	123a8 <USBHub::send_clearstatus_enable(unsigned long)>
		send_clearstatus_connect(lowestbit(send_pending_clearstatus_connect));
   1286c:	fa91 f1a1 	rbit	r1, r1
   12870:	4620      	mov	r0, r4
   12872:	fab1 f181 	clz	r1, r1
}
   12876:	b002      	add	sp, #8
   12878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_connect(lowestbit(send_pending_clearstatus_connect));
   1287c:	f7ff bd68 	b.w	12350 <USBHub::send_clearstatus_connect(unsigned long)>
		send_clearstatus_suspend(lowestbit(send_pending_clearstatus_suspend));
   12880:	fa91 f1a1 	rbit	r1, r1
   12884:	4620      	mov	r0, r4
   12886:	fab1 f181 	clz	r1, r1
}
   1288a:	b002      	add	sp, #8
   1288c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_suspend(lowestbit(send_pending_clearstatus_suspend));
   12890:	f7ff bdb6 	b.w	12400 <USBHub::send_clearstatus_suspend(unsigned long)>
		send_getstatus(lowestbit(send_pending_getstatus));
   12894:	fa91 f1a1 	rbit	r1, r1
   12898:	4620      	mov	r0, r4
   1289a:	fab1 f181 	clz	r1, r1
}
   1289e:	b002      	add	sp, #8
   128a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_getstatus(lowestbit(send_pending_getstatus));
   128a4:	f7ff bcac 	b.w	12200 <USBHub::send_getstatus(unsigned long)>
		send_clearstatus_overcurrent(lowestbit(send_pending_clearstatus_overcurrent));
   128a8:	fa91 f1a1 	rbit	r1, r1
   128ac:	4620      	mov	r0, r4
   128ae:	fab1 f181 	clz	r1, r1
}
   128b2:	b002      	add	sp, #8
   128b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_overcurrent(lowestbit(send_pending_clearstatus_overcurrent));
   128b8:	f7ff bdce 	b.w	12458 <USBHub::send_clearstatus_overcurrent(unsigned long)>
		send_clearstatus_reset(lowestbit(send_pending_clearstatus_reset));
   128bc:	fa91 f1a1 	rbit	r1, r1
   128c0:	4620      	mov	r0, r4
   128c2:	fab1 f181 	clz	r1, r1
}
   128c6:	b002      	add	sp, #8
   128c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_reset(lowestbit(send_pending_clearstatus_reset));
   128cc:	f7ff bdf0 	b.w	124b0 <USBHub::send_clearstatus_reset(unsigned long)>
   128d0:	00080323 	.word	0x00080323
   128d4:	290006a0 	.word	0x290006a0
   128d8:	00012305 	.word	0x00012305

000128dc <JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)>:
}
   128dc:	4770      	bx	lr
   128de:	bf00      	nop

000128e0 <JoystickController::hid_input_data(unsigned long, long)>:
    uint32_t usage_page = usage >> 16;
   128e0:	ea4f 4c11 	mov.w	ip, r1, lsr #16
    usage &= 0xFFFF;
   128e4:	b28b      	uxth	r3, r1
    if (usage_page == 9 && usage >= 1 && usage <= 32) {
   128e6:	f1bc 0f09 	cmp.w	ip, #9
{
   128ea:	b530      	push	{r4, r5, lr}
    if (usage_page == 9 && usage >= 1 && usage <= 32) {
   128ec:	d111      	bne.n	12912 <JoystickController::hid_input_data(unsigned long, long)+0x32>
   128ee:	b183      	cbz	r3, 12912 <JoystickController::hid_input_data(unsigned long, long)+0x32>
   128f0:	2b20      	cmp	r3, #32
   128f2:	d844      	bhi.n	1297e <JoystickController::hid_input_data(unsigned long, long)+0x9e>
        uint32_t bit = 1 << (usage - 1);
   128f4:	3b01      	subs	r3, #1
   128f6:	2101      	movs	r1, #1
   128f8:	fa01 f303 	lsl.w	r3, r1, r3
        if (value == 0) {
   128fc:	2a00      	cmp	r2, #0
   128fe:	d17f      	bne.n	12a00 <JoystickController::hid_input_data(unsigned long, long)+0x120>
            if (buttons & bit) {
   12900:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12902:	421a      	tst	r2, r3
   12904:	d004      	beq.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                buttons &= ~bit;
   12906:	ea22 0203 	bic.w	r2, r2, r3
                anychange = true;
   1290a:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
                buttons &= ~bit;
   1290e:	6442      	str	r2, [r0, #68]	; 0x44
}
   12910:	bd30      	pop	{r4, r5, pc}
    } else if (usage_page == 1 && usage >= 0x30 && usage <= 0x39) {
   12912:	f1bc 0f01 	cmp.w	ip, #1
   12916:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   1291a:	d130      	bne.n	1297e <JoystickController::hid_input_data(unsigned long, long)+0x9e>
   1291c:	f1be 0f09 	cmp.w	lr, #9
   12920:	d82d      	bhi.n	1297e <JoystickController::hid_input_data(unsigned long, long)+0x9e>
        axis_mask_ |= (1 << i);     // Keep record of which axis we have data on.
   12922:	fa0c fe0e 	lsl.w	lr, ip, lr
   12926:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
   1292a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1292e:	ea41 010e 	orr.w	r1, r1, lr
   12932:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
   12936:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
   1293a:	ea41 71ee 	orr.w	r1, r1, lr, asr #31
   1293e:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   12942:	ea4f 71ee 	mov.w	r1, lr, asr #31
        if (axis[i] != value) {
   12946:	f853 4c78 	ldr.w	r4, [r3, #-120]
   1294a:	4294      	cmp	r4, r2
   1294c:	d0e0      	beq.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
            axis[i] = value;
   1294e:	f843 2c78 	str.w	r2, [r3, #-120]
            axis_changed_mask_ |= (1 << i);
   12952:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
            if (axis_changed_mask_ & axis_change_notify_mask_)
   12956:	f8d0 2158 	ldr.w	r2, [r0, #344]	; 0x158
            axis_changed_mask_ |= (1 << i);
   1295a:	ea4e 0303 	orr.w	r3, lr, r3
            if (axis_changed_mask_ & axis_change_notify_mask_)
   1295e:	401a      	ands	r2, r3
            axis_changed_mask_ |= (1 << i);
   12960:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
   12964:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
   12968:	430b      	orrs	r3, r1
            if (axis_changed_mask_ & axis_change_notify_mask_)
   1296a:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
            axis_changed_mask_ |= (1 << i);
   1296e:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
            if (axis_changed_mask_ & axis_change_notify_mask_)
   12972:	400b      	ands	r3, r1
   12974:	431a      	orrs	r2, r3
   12976:	d0cb      	beq.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                anychange = true;
   12978:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
}
   1297c:	bd30      	pop	{r4, r5, pc}
    } else if (usage_page == additional_axis_usage_page_) {
   1297e:	f8b0 e160 	ldrh.w	lr, [r0, #352]	; 0x160
   12982:	45e6      	cmp	lr, ip
   12984:	d1c4      	bne.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
        if ((usage >= additional_axis_usage_start_) && (usage < (additional_axis_usage_start_ + additional_axis_usage_count_))) {
   12986:	f8b0 c162 	ldrh.w	ip, [r0, #354]	; 0x162
   1298a:	459c      	cmp	ip, r3
   1298c:	d8c0      	bhi.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
   1298e:	f8b0 e164 	ldrh.w	lr, [r0, #356]	; 0x164
   12992:	44e6      	add	lr, ip
   12994:	459e      	cmp	lr, r3
   12996:	d9bb      	bls.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
            uint16_t usage_index = usage - additional_axis_usage_start_ + STANDARD_AXIS_COUNT;
   12998:	f1cc 030a 	rsb	r3, ip, #10
   1299c:	440b      	add	r3, r1
   1299e:	b29b      	uxth	r3, r3
            if (usage_index < (sizeof(axis) / sizeof(axis[0]))) {
   129a0:	2b3f      	cmp	r3, #63	; 0x3f
   129a2:	d8b5      	bhi.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                if (axis[usage_index] != value) {
   129a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   129a8:	6c8c      	ldr	r4, [r1, #72]	; 0x48
   129aa:	4294      	cmp	r4, r2
   129ac:	d030      	beq.n	12a10 <JoystickController::hid_input_data(unsigned long, long)+0x130>
                    axis[usage_index] = value;
   129ae:	648a      	str	r2, [r1, #72]	; 0x48
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   129b0:	f04f 0c01 	mov.w	ip, #1
   129b4:	f1a3 0220 	sub.w	r2, r3, #32
   129b8:	f1c3 0120 	rsb	r1, r3, #32
   129bc:	fa0c f303 	lsl.w	r3, ip, r3
   129c0:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   129c4:	fa2c f101 	lsr.w	r1, ip, r1
   129c8:	fa0c f202 	lsl.w	r2, ip, r2
                    if (axis_changed_mask_ & axis_change_notify_mask_)
   129cc:	f8d0 5158 	ldr.w	r5, [r0, #344]	; 0x158
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   129d0:	430a      	orrs	r2, r1
   129d2:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
   129d6:	4319      	orrs	r1, r3
   129d8:	4314      	orrs	r4, r2
   129da:	f8c0 1150 	str.w	r1, [r0, #336]	; 0x150
                    if (axis_changed_mask_ & axis_change_notify_mask_)
   129de:	4029      	ands	r1, r5
   129e0:	f8d0 515c 	ldr.w	r5, [r0, #348]	; 0x15c
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   129e4:	f8c0 4154 	str.w	r4, [r0, #340]	; 0x154
                    if (axis_changed_mask_ & axis_change_notify_mask_)
   129e8:	402c      	ands	r4, r5
   129ea:	4321      	orrs	r1, r4
                        anychange = true;   // We have changes...
   129ec:	bf18      	it	ne
   129ee:	f880 c041 	strbne.w	ip, [r0, #65]	; 0x41
                axis_mask_ |= ((uint64_t)1 << usage_index);     // Keep record of which axis we have data on.
   129f2:	e9d0 4152 	ldrd	r4, r1, [r0, #328]	; 0x148
   129f6:	431c      	orrs	r4, r3
   129f8:	4311      	orrs	r1, r2
   129fa:	e9c0 4152 	strd	r4, r1, [r0, #328]	; 0x148
}
   129fe:	bd30      	pop	{r4, r5, pc}
            if (!(buttons & bit)) {
   12a00:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12a02:	421a      	tst	r2, r3
   12a04:	d184      	bne.n	12910 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                buttons |= bit;
   12a06:	431a      	orrs	r2, r3
                anychange = true;
   12a08:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
                buttons |= bit;
   12a0c:	6442      	str	r2, [r0, #68]	; 0x44
}
   12a0e:	bd30      	pop	{r4, r5, pc}
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   12a10:	2401      	movs	r4, #1
   12a12:	f1a3 0220 	sub.w	r2, r3, #32
   12a16:	f1c3 0120 	rsb	r1, r3, #32
   12a1a:	fa04 f202 	lsl.w	r2, r4, r2
   12a1e:	fa04 f303 	lsl.w	r3, r4, r3
   12a22:	fa24 f101 	lsr.w	r1, r4, r1
   12a26:	430a      	orrs	r2, r1
   12a28:	e7e3      	b.n	129f2 <JoystickController::hid_input_data(unsigned long, long)+0x112>
   12a2a:	bf00      	nop

00012a2c <non-virtual thunk to JoystickController::hid_input_data(unsigned long, long)>:
    virtual void disconnect();

    // From USBHIDInput
    virtual hidclaim_t claim_collection(USBHIDParser *driver, Device_t *dev, uint32_t topusage);
    virtual void hid_input_begin(uint32_t topusage, uint32_t type, int lgmin, int lgmax);
    virtual void hid_input_data(uint32_t usage, int32_t value);
   12a2c:	f1a0 000c 	sub.w	r0, r0, #12
   12a30:	f7ff bf56 	b.w	128e0 <JoystickController::hid_input_data(unsigned long, long)>

00012a34 <JoystickController::hid_input_end()>:
    if (anychange) {
   12a34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   12a38:	b113      	cbz	r3, 12a40 <JoystickController::hid_input_end()+0xc>
        joystickEvent = true;
   12a3a:	2301      	movs	r3, #1
   12a3c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
   12a40:	4770      	bx	lr
   12a42:	bf00      	nop

00012a44 <JoystickController::hid_process_out_data(Transfer_struct const*)>:
}
   12a44:	2001      	movs	r0, #1
   12a46:	4770      	bx	lr

00012a48 <JoystickController::control(Transfer_struct const*)>:
}
   12a48:	4770      	bx	lr
   12a4a:	bf00      	nop

00012a4c <JoystickController::tx_callback(Transfer_struct const*)>:
}
   12a4c:	4770      	bx	lr
   12a4e:	bf00      	nop

00012a50 <JoystickController::disconnect()>:
    axis_mask_ = 0;
   12a50:	2200      	movs	r2, #0
   12a52:	2300      	movs	r3, #0
   12a54:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
    axis_changed_mask_ = 0;
   12a58:	e9c0 2354 	strd	r2, r3, [r0, #336]	; 0x150
}
   12a5c:	4770      	bx	lr
   12a5e:	bf00      	nop

00012a60 <JoystickController::bt_hid_input_data(unsigned long, long)>:
    hid_input_data(usage, value);
   12a60:	6803      	ldr	r3, [r0, #0]
   12a62:	69db      	ldr	r3, [r3, #28]
   12a64:	4718      	bx	r3
   12a66:	bf00      	nop

00012a68 <JoystickController::release_bluetooth()>:
    btdevice = nullptr; // remember this way
   12a68:	2300      	movs	r3, #0
   12a6a:	6243      	str	r3, [r0, #36]	; 0x24
    btdriver_ = nullptr;
   12a6c:	6343      	str	r3, [r0, #52]	; 0x34
    connected_ = false;
   12a6e:	f880 316c 	strb.w	r3, [r0, #364]	; 0x16c
    special_process_required = false;
   12a72:	f880 3020 	strb.w	r3, [r0, #32]
}
   12a76:	4770      	bx	lr

00012a78 <JoystickController::hid_process_control(Transfer_struct const*)>:
bool JoystickController::hid_process_control(const Transfer_t *transfer) {
   12a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a7c:	460d      	mov	r5, r1
   12a7e:	b082      	sub	sp, #8
   12a80:	4606      	mov	r6, r0
    Serial.printf("USBHIDParser::control msg: %x %x : %x %u :", transfer->setup.word1, transfer->setup.word2, transfer->buffer, transfer->length);
   12a82:	4915      	ldr	r1, [pc, #84]	; (12ad8 <JoystickController::hid_process_control(Transfer_struct const*)+0x60>)
   12a84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   12a86:	4815      	ldr	r0, [pc, #84]	; (12adc <JoystickController::hid_process_control(Transfer_struct const*)+0x64>)
   12a88:	9301      	str	r3, [sp, #4]
   12a8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   12a8c:	9300      	str	r3, [sp, #0]
   12a8e:	e9d5 230d 	ldrd	r2, r3, [r5, #52]	; 0x34
   12a92:	f003 f81f 	bl	15ad4 <Print::printf(char const*, ...)>
    if (transfer->buffer) {
   12a96:	6aec      	ldr	r4, [r5, #44]	; 0x2c
   12a98:	b1a4      	cbz	r4, 12ac4 <JoystickController::hid_process_control(Transfer_struct const*)+0x4c>
        uint16_t cnt = transfer->length;
   12a9a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        if (cnt > 16) cnt = 16;
   12a9c:	2b10      	cmp	r3, #16
   12a9e:	461d      	mov	r5, r3
   12aa0:	bf28      	it	cs
   12aa2:	2510      	movcs	r5, #16
        while (cnt--) Serial.printf(" %02x", *pb++);
   12aa4:	3d01      	subs	r5, #1
   12aa6:	b2ad      	uxth	r5, r5
   12aa8:	b163      	cbz	r3, 12ac4 <JoystickController::hid_process_control(Transfer_struct const*)+0x4c>
   12aaa:	3501      	adds	r5, #1
   12aac:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12ae4 <JoystickController::hid_process_control(Transfer_struct const*)+0x6c>
   12ab0:	4f0a      	ldr	r7, [pc, #40]	; (12adc <JoystickController::hid_process_control(Transfer_struct const*)+0x64>)
   12ab2:	4425      	add	r5, r4
   12ab4:	f814 2b01 	ldrb.w	r2, [r4], #1
   12ab8:	4641      	mov	r1, r8
   12aba:	4638      	mov	r0, r7
   12abc:	f003 f80a 	bl	15ad4 <Print::printf(char const*, ...)>
   12ac0:	42ac      	cmp	r4, r5
   12ac2:	d1f7      	bne.n	12ab4 <JoystickController::hid_process_control(Transfer_struct const*)+0x3c>
    Serial.printf("\n");
   12ac4:	4906      	ldr	r1, [pc, #24]	; (12ae0 <JoystickController::hid_process_control(Transfer_struct const*)+0x68>)
   12ac6:	4805      	ldr	r0, [pc, #20]	; (12adc <JoystickController::hid_process_control(Transfer_struct const*)+0x64>)
   12ac8:	f003 f804 	bl	15ad4 <Print::printf(char const*, ...)>
    send_Control_packet_active_ = false;
   12acc:	2000      	movs	r0, #0
   12ace:	f886 0524 	strb.w	r0, [r6, #1316]	; 0x524
}
   12ad2:	b002      	add	sp, #8
   12ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ad8:	20003ac4 	.word	0x20003ac4
   12adc:	20009514 	.word	0x20009514
   12ae0:	20004ee4 	.word	0x20004ee4
   12ae4:	200063a4 	.word	0x200063a4

00012ae8 <non-virtual thunk to JoystickController::hid_process_control(Transfer_struct const*)>:
    virtual bool hid_process_control(const Transfer_t *transfer);
   12ae8:	f1a0 000c 	sub.w	r0, r0, #12
   12aec:	f7ff bfc4 	b.w	12a78 <JoystickController::hid_process_control(Transfer_struct const*)>

00012af0 <JoystickController::disconnect_collection(Device_struct*)>:
    if (--collections_claimed == 0) {
   12af0:	f890 3174 	ldrb.w	r3, [r0, #372]	; 0x174
   12af4:	3b01      	subs	r3, #1
   12af6:	b2db      	uxtb	r3, r3
   12af8:	f880 3174 	strb.w	r3, [r0, #372]	; 0x174
   12afc:	b93b      	cbnz	r3, 12b0e <JoystickController::disconnect_collection(Device_struct*)+0x1e>
        mydevice = NULL;
   12afe:	6143      	str	r3, [r0, #20]
        driver_ = nullptr;
   12b00:	6303      	str	r3, [r0, #48]	; 0x30
        axis_mask_ = 0;
   12b02:	ed9f 7b03 	vldr	d7, [pc, #12]	; 12b10 <JoystickController::disconnect_collection(Device_struct*)+0x20>
   12b06:	ed80 7b52 	vstr	d7, [r0, #328]	; 0x148
        axis_changed_mask_ = 0;
   12b0a:	ed80 7b54 	vstr	d7, [r0, #336]	; 0x150
}
   12b0e:	4770      	bx	lr
	...

00012b18 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)>:
{
   12b18:	b570      	push	{r4, r5, r6, lr}
   12b1a:	461e      	mov	r6, r3
   12b1c:	b082      	sub	sp, #8
   12b1e:	4604      	mov	r4, r0
    USBHDBGSerial.printf("JoystickController::bt_claim_collection(%p) Connection:%p class:%x Top:%x\n", this, btconnection, bluetooth_class, topusage);
   12b20:	460b      	mov	r3, r1
   12b22:	9200      	str	r2, [sp, #0]
{
   12b24:	460d      	mov	r5, r1
    USBHDBGSerial.printf("JoystickController::bt_claim_collection(%p) Connection:%p class:%x Top:%x\n", this, btconnection, bluetooth_class, topusage);
   12b26:	4602      	mov	r2, r0
   12b28:	4911      	ldr	r1, [pc, #68]	; (12b70 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x58>)
   12b2a:	4812      	ldr	r0, [pc, #72]	; (12b74 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x5c>)
   12b2c:	9601      	str	r6, [sp, #4]
   12b2e:	f002 ffd1 	bl	15ad4 <Print::printf(char const*, ...)>
    if (mydevice != NULL) return CLAIM_NO;  // claimed by some other... 
   12b32:	6960      	ldr	r0, [r4, #20]
   12b34:	b110      	cbz	r0, 12b3c <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x24>
   12b36:	2000      	movs	r0, #0
}
   12b38:	b002      	add	sp, #8
   12b3a:	bd70      	pop	{r4, r5, r6, pc}
    if (btconnect && (btconnect != btconnection)) return CLAIM_NO;
   12b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b3e:	b10b      	cbz	r3, 12b44 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x2c>
   12b40:	42ab      	cmp	r3, r5
   12b42:	d1f9      	bne.n	12b38 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x20>
    if (topusage != 0x10004 && topusage != 0x10005 && topusage != 0x10008) return CLAIM_NO;
   12b44:	4b0c      	ldr	r3, [pc, #48]	; (12b78 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x60>)
   12b46:	4433      	add	r3, r6
   12b48:	2b01      	cmp	r3, #1
   12b4a:	d902      	bls.n	12b52 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x3a>
   12b4c:	4b0b      	ldr	r3, [pc, #44]	; (12b7c <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x64>)
   12b4e:	429e      	cmp	r6, r3
   12b50:	d1f1      	bne.n	12b36 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x1e>
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   12b52:	490b      	ldr	r1, [pc, #44]	; (12b80 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x68>)
   12b54:	4807      	ldr	r0, [pc, #28]	; (12b74 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x5c>)
   12b56:	f002 ffbd 	bl	15ad4 <Print::printf(char const*, ...)>
    btdevice = (Device_t*)btconnect->btController_; // remember this way 
   12b5a:	68aa      	ldr	r2, [r5, #8]
    connectionComplete();
   12b5c:	6823      	ldr	r3, [r4, #0]
   12b5e:	4620      	mov	r0, r4
   12b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    btdevice = (Device_t*)btconnect->btController_; // remember this way 
   12b62:	e9c4 2509 	strd	r2, r5, [r4, #36]	; 0x24
    connectionComplete();
   12b66:	4798      	blx	r3
    return CLAIM_REPORT;
   12b68:	2001      	movs	r0, #1
}
   12b6a:	b002      	add	sp, #8
   12b6c:	bd70      	pop	{r4, r5, r6, pc}
   12b6e:	bf00      	nop
   12b70:	20003a50 	.word	0x20003a50
   12b74:	20009514 	.word	0x20009514
   12b78:	fffefffc 	.word	0xfffefffc
   12b7c:	00010008 	.word	0x00010008
   12b80:	20003a9c 	.word	0x20003a9c

00012b84 <non-virtual thunk to JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)>:
    virtual bool process_bluetooth_HID_data(const uint8_t *data, uint16_t length);
    virtual void release_bluetooth();
    virtual bool remoteNameComplete(const uint8_t *remoteName);
    virtual void connectionComplete(void);

    virtual hidclaim_t bt_claim_collection(BluetoothConnection *btconnection, uint32_t bluetooth_class, uint32_t topusage);
   12b84:	f1a0 0018 	sub.w	r0, r0, #24
   12b88:	f7ff bfc6 	b.w	12b18 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)>

00012b8c <JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)>:
{
   12b8c:	b470      	push	{r4, r5, r6}
    hid_input_begin(topusage, type, lgmin, lgmax);  
   12b8e:	6804      	ldr	r4, [r0, #0]
   12b90:	4d04      	ldr	r5, [pc, #16]	; (12ba4 <JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x18>)
   12b92:	69a4      	ldr	r4, [r4, #24]
   12b94:	42ac      	cmp	r4, r5
   12b96:	d101      	bne.n	12b9c <JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x10>
}
   12b98:	bc70      	pop	{r4, r5, r6}
   12b9a:	4770      	bx	lr
    hid_input_begin(topusage, type, lgmin, lgmax);  
   12b9c:	46a4      	mov	ip, r4
}
   12b9e:	bc70      	pop	{r4, r5, r6}
    hid_input_begin(topusage, type, lgmin, lgmax);  
   12ba0:	4760      	bx	ip
   12ba2:	bf00      	nop
   12ba4:	000128dd 	.word	0x000128dd

00012ba8 <non-virtual thunk to JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)>:
   12ba8:	4770      	bx	lr
   12baa:	bf00      	nop

00012bac <non-virtual thunk to JoystickController::hid_process_out_data(Transfer_struct const*)>:
   12bac:	2001      	movs	r0, #1
   12bae:	4770      	bx	lr

00012bb0 <non-virtual thunk to JoystickController::release_bluetooth()>:
   12bb0:	2300      	movs	r3, #0
   12bb2:	60c3      	str	r3, [r0, #12]
   12bb4:	61c3      	str	r3, [r0, #28]
   12bb6:	f880 3154 	strb.w	r3, [r0, #340]	; 0x154
   12bba:	7203      	strb	r3, [r0, #8]
   12bbc:	4770      	bx	lr
   12bbe:	bf00      	nop

00012bc0 <JoystickController::bt_hid_input_end()>:
    hid_input_end();
   12bc0:	6802      	ldr	r2, [r0, #0]
   12bc2:	4906      	ldr	r1, [pc, #24]	; (12bdc <JoystickController::bt_hid_input_end()+0x1c>)
   12bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
   12bc6:	428a      	cmp	r2, r1
   12bc8:	d107      	bne.n	12bda <JoystickController::bt_hid_input_end()+0x1a>
    if (anychange) {
   12bca:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
   12bce:	b11a      	cbz	r2, 12bd8 <JoystickController::bt_hid_input_end()+0x18>
        joystickEvent = true;
   12bd0:	2201      	movs	r2, #1
   12bd2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
   12bd6:	4770      	bx	lr
}
   12bd8:	4770      	bx	lr
    hid_input_end();
   12bda:	4710      	bx	r2
   12bdc:	00012a35 	.word	0x00012a35

00012be0 <non-virtual thunk to JoystickController::hid_input_end()>:
   12be0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   12be4:	b113      	cbz	r3, 12bec <non-virtual thunk to JoystickController::hid_input_end()+0xc>
   12be6:	2301      	movs	r3, #1
   12be8:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
   12bec:	4770      	bx	lr
   12bee:	bf00      	nop

00012bf0 <non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)>:
   12bf0:	f890 3168 	ldrb.w	r3, [r0, #360]	; 0x168
   12bf4:	3b01      	subs	r3, #1
   12bf6:	b2db      	uxtb	r3, r3
   12bf8:	f880 3168 	strb.w	r3, [r0, #360]	; 0x168
   12bfc:	b93b      	cbnz	r3, 12c0e <non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)+0x1e>
   12bfe:	6083      	str	r3, [r0, #8]
   12c00:	6243      	str	r3, [r0, #36]	; 0x24
   12c02:	ed9f 7b03 	vldr	d7, [pc, #12]	; 12c10 <non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)+0x20>
   12c06:	ed80 7b4f 	vstr	d7, [r0, #316]	; 0x13c
   12c0a:	ed80 7b51 	vstr	d7, [r0, #324]	; 0x144
   12c0e:	4770      	bx	lr
	...

00012c18 <JoystickController::bt_disconnect_collection(Device_struct*)>:
    disconnect_collection(dev);
   12c18:	6802      	ldr	r2, [r0, #0]
{
   12c1a:	b410      	push	{r4}
    disconnect_collection(dev);
   12c1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12c1e:	4c0c      	ldr	r4, [pc, #48]	; (12c50 <JoystickController::bt_disconnect_collection(Device_struct*)+0x38>)
   12c20:	42a2      	cmp	r2, r4
   12c22:	d112      	bne.n	12c4a <JoystickController::bt_disconnect_collection(Device_struct*)+0x32>
    if (--collections_claimed == 0) {
   12c24:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   12c28:	4603      	mov	r3, r0
   12c2a:	3a01      	subs	r2, #1
   12c2c:	b2d2      	uxtb	r2, r2
   12c2e:	f880 2174 	strb.w	r2, [r0, #372]	; 0x174
   12c32:	b93a      	cbnz	r2, 12c44 <JoystickController::bt_disconnect_collection(Device_struct*)+0x2c>
        axis_mask_ = 0;
   12c34:	2000      	movs	r0, #0
   12c36:	2100      	movs	r1, #0
        mydevice = NULL;
   12c38:	615a      	str	r2, [r3, #20]
        driver_ = nullptr;
   12c3a:	631a      	str	r2, [r3, #48]	; 0x30
        axis_mask_ = 0;
   12c3c:	e9c3 0152 	strd	r0, r1, [r3, #328]	; 0x148
        axis_changed_mask_ = 0;
   12c40:	e9c3 0154 	strd	r0, r1, [r3, #336]	; 0x150
}
   12c44:	f85d 4b04 	ldr.w	r4, [sp], #4
   12c48:	4770      	bx	lr
   12c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    disconnect_collection(dev);
   12c4e:	4710      	bx	r2
   12c50:	00012af1 	.word	0x00012af1

00012c54 <non-virtual thunk to JoystickController::bt_hid_input_end()>:
   12c54:	f850 3c18 	ldr.w	r3, [r0, #-24]
   12c58:	f1a0 0118 	sub.w	r1, r0, #24
   12c5c:	4a06      	ldr	r2, [pc, #24]	; (12c78 <non-virtual thunk to JoystickController::bt_hid_input_end()+0x24>)
   12c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12c60:	4293      	cmp	r3, r2
   12c62:	d106      	bne.n	12c72 <non-virtual thunk to JoystickController::bt_hid_input_end()+0x1e>
   12c64:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   12c68:	b12b      	cbz	r3, 12c76 <non-virtual thunk to JoystickController::bt_hid_input_end()+0x22>
   12c6a:	2301      	movs	r3, #1
   12c6c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   12c70:	4770      	bx	lr
   12c72:	4608      	mov	r0, r1
   12c74:	4718      	bx	r3
   12c76:	4770      	bx	lr
   12c78:	00012a35 	.word	0x00012a35

00012c7c <non-virtual thunk to JoystickController::bt_hid_input_data(unsigned long, long)>:
   12c7c:	f850 3c18 	ldr.w	r3, [r0, #-24]
   12c80:	3818      	subs	r0, #24
   12c82:	69db      	ldr	r3, [r3, #28]
   12c84:	4718      	bx	r3
   12c86:	bf00      	nop

00012c88 <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)>:
   12c88:	f850 3c18 	ldr.w	r3, [r0, #-24]
   12c8c:	f1a0 0c18 	sub.w	ip, r0, #24
   12c90:	4a0d      	ldr	r2, [pc, #52]	; (12cc8 <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x40>)
   12c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c94:	4293      	cmp	r3, r2
   12c96:	d110      	bne.n	12cba <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x32>
   12c98:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
   12c9c:	3b01      	subs	r3, #1
   12c9e:	b2db      	uxtb	r3, r3
   12ca0:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
   12ca4:	b95b      	cbnz	r3, 12cbe <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x36>
   12ca6:	f840 3c04 	str.w	r3, [r0, #-4]
   12caa:	6183      	str	r3, [r0, #24]
   12cac:	ed9f 7b04 	vldr	d7, [pc, #16]	; 12cc0 <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x38>
   12cb0:	ed80 7b4c 	vstr	d7, [r0, #304]	; 0x130
   12cb4:	ed80 7b4e 	vstr	d7, [r0, #312]	; 0x138
   12cb8:	4770      	bx	lr
   12cba:	4660      	mov	r0, ip
   12cbc:	4718      	bx	r3
   12cbe:	4770      	bx	lr
	...
   12cc8:	00012af1 	.word	0x00012af1

00012ccc <non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)>:
   12ccc:	b470      	push	{r4, r5, r6}
   12cce:	f850 4c18 	ldr.w	r4, [r0, #-24]
   12cd2:	4d05      	ldr	r5, [pc, #20]	; (12ce8 <non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x1c>)
   12cd4:	69a4      	ldr	r4, [r4, #24]
   12cd6:	42ac      	cmp	r4, r5
   12cd8:	d003      	beq.n	12ce2 <non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x16>
   12cda:	46a4      	mov	ip, r4
   12cdc:	3818      	subs	r0, #24
   12cde:	bc70      	pop	{r4, r5, r6}
   12ce0:	4760      	bx	ip
   12ce2:	bc70      	pop	{r4, r5, r6}
   12ce4:	4770      	bx	lr
   12ce6:	bf00      	nop
   12ce8:	000128dd 	.word	0x000128dd

00012cec <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)>:
{
   12cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12cf0:	460d      	mov	r5, r1
    if (mydevice != NULL) return false;
   12cf2:	6941      	ldr	r1, [r0, #20]
{
   12cf4:	b082      	sub	sp, #8
    if (mydevice != NULL) return false;
   12cf6:	b119      	cbz	r1, 12d00 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   12cf8:	2000      	movs	r0, #0
}
   12cfa:	b002      	add	sp, #8
   12cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (device != nullptr) return false;
   12d00:	6881      	ldr	r1, [r0, #8]
   12d02:	4604      	mov	r4, r0
    if (type != 1) return false;
   12d04:	2900      	cmp	r1, #0
   12d06:	d1f7      	bne.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
   12d08:	3a01      	subs	r2, #1
   12d0a:	bf18      	it	ne
   12d0c:	2201      	movne	r2, #1
   12d0e:	2a00      	cmp	r2, #0
   12d10:	d1f2      	bne.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    JoystickController::joytype_t jtype = mapVIDPIDtoJoystickType(dev->idVendor, dev->idProduct, true);
   12d12:	4e6b      	ldr	r6, [pc, #428]	; (12ec0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1d4>)
   12d14:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
   12d18:	f8b5 e020 	ldrh.w	lr, [r5, #32]
    for (uint8_t i = 0; i < (sizeof(pid_vid_mapping) / sizeof(pid_vid_mapping[0])); i++) {
   12d1c:	4630      	mov	r0, r6
   12d1e:	e003      	b.n	12d28 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x3c>
   12d20:	3201      	adds	r2, #1
   12d22:	3006      	adds	r0, #6
   12d24:	2a0f      	cmp	r2, #15
   12d26:	d0e7      	beq.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
        if ((idVendor == pid_vid_mapping[i].idVendor) && (idProduct == pid_vid_mapping[i].idProduct)) {
   12d28:	8801      	ldrh	r1, [r0, #0]
   12d2a:	4561      	cmp	r1, ip
   12d2c:	d1f8      	bne.n	12d20 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x34>
   12d2e:	8841      	ldrh	r1, [r0, #2]
   12d30:	4571      	cmp	r1, lr
   12d32:	d1f5      	bne.n	12d20 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x34>
            if (exclude_hid_devices && pid_vid_mapping[i].hidDevice) return UNKNOWN;
   12d34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   12d38:	eb06 0642 	add.w	r6, r6, r2, lsl #1
   12d3c:	7972      	ldrb	r2, [r6, #5]
   12d3e:	2a00      	cmp	r2, #0
   12d40:	d1da      	bne.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
            return pid_vid_mapping[i].joyType;
   12d42:	7937      	ldrb	r7, [r6, #4]
    if (len < 9 + 7 + 7) return false;
   12d44:	2f00      	cmp	r7, #0
   12d46:	d0d7      	beq.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
   12d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12d4a:	2a16      	cmp	r2, #22
   12d4c:	bf8c      	ite	hi
   12d4e:	2200      	movhi	r2, #0
   12d50:	2201      	movls	r2, #1
   12d52:	2a00      	cmp	r2, #0
   12d54:	d1d0      	bne.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    if (count_end_points < 2) return false;
   12d56:	7919      	ldrb	r1, [r3, #4]
   12d58:	2901      	cmp	r1, #1
   12d5a:	d9cd      	bls.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    if (descriptors[5] != 0xff) return false; // bInterfaceClass, 3 = HID
   12d5c:	7959      	ldrb	r1, [r3, #5]
   12d5e:	29ff      	cmp	r1, #255	; 0xff
   12d60:	d1ca      	bne.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    rx_ep_ = 0;
   12d62:	f884 2495 	strb.w	r2, [r4, #1173]	; 0x495
    rx_size_ = 0;
   12d66:	f8a4 2496 	strh.w	r2, [r4, #1174]	; 0x496
    tx_size_ = 0;
   12d6a:	f8a4 2498 	strh.w	r2, [r4, #1176]	; 0x498
    if (descriptors[descriptor_index + 1] == 0x22)  {
   12d6e:	7a9a      	ldrb	r2, [r3, #10]
   12d70:	2a22      	cmp	r2, #34	; 0x22
   12d72:	d038      	beq.n	12de6 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xfa>
    uint32_t descriptor_index = 9;
   12d74:	2109      	movs	r1, #9
        if (descriptor_index >= len) return false;          // we ran off the end and did not get end points
   12d76:	f04f 0800 	mov.w	r8, #0
   12d7a:	46c6      	mov	lr, r8
   12d7c:	4646      	mov	r6, r8
   12d7e:	e00b      	b.n	12d98 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xac>
        descriptor_index += descriptors[descriptor_index];  // setup to look at next one...
   12d80:	4411      	add	r1, r2
    while ((rx_ep_ == 0) || txep == 0) {
   12d82:	f894 2495 	ldrb.w	r2, [r4, #1173]	; 0x495
   12d86:	b122      	cbz	r2, 12d92 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xa6>
   12d88:	fab6 f986 	clz	r9, r6
   12d8c:	ea4f 1959 	mov.w	r9, r9, lsr #5
   12d90:	bb8e      	cbnz	r6, 12df6 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x10a>
        if (descriptor_index >= len) return false;          // we ran off the end and did not get end points
   12d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12d94:	428a      	cmp	r2, r1
   12d96:	d9af      	bls.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
        if ((descriptors[descriptor_index] == 7) && (descriptors[descriptor_index + 1] == 5)) {
   12d98:	5c5a      	ldrb	r2, [r3, r1]
   12d9a:	1858      	adds	r0, r3, r1
   12d9c:	2a07      	cmp	r2, #7
   12d9e:	d1ef      	bne.n	12d80 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
   12da0:	f890 c001 	ldrb.w	ip, [r0, #1]
   12da4:	f1bc 0f05 	cmp.w	ip, #5
   12da8:	d1ea      	bne.n	12d80 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
            if ((descriptors[descriptor_index + 3] == 3)            // Type 3...
   12daa:	f890 c003 	ldrb.w	ip, [r0, #3]
   12dae:	f1bc 0f03 	cmp.w	ip, #3
   12db2:	d1e5      	bne.n	12d80 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
                    && (descriptors[descriptor_index + 4] <= 64)
   12db4:	f101 0904 	add.w	r9, r1, #4
   12db8:	f813 c009 	ldrb.w	ip, [r3, r9]
   12dbc:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   12dc0:	d8de      	bhi.n	12d80 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
                    && (descriptors[descriptor_index + 5] == 0)) {
   12dc2:	f890 a005 	ldrb.w	sl, [r0, #5]
   12dc6:	f1ba 0f00 	cmp.w	sl, #0
   12dca:	d1d9      	bne.n	12d80 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
                if (descriptors[descriptor_index + 2] & 0x80 ) {
   12dcc:	f990 a002 	ldrsb.w	sl, [r0, #2]
   12dd0:	7882      	ldrb	r2, [r0, #2]
   12dd2:	f1ba 0f00 	cmp.w	sl, #0
   12dd6:	db4f      	blt.n	12e78 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x18c>
                    tx_size_ = descriptors[descriptor_index + 4];
   12dd8:	f8a4 c498 	strh.w	ip, [r4, #1176]	; 0x498
                    txep = descriptors[descriptor_index + 2];
   12ddc:	4616      	mov	r6, r2
                    tx_interval = descriptors[descriptor_index + 6];
   12dde:	f890 8006 	ldrb.w	r8, [r0, #6]
        descriptor_index += descriptors[descriptor_index];  // setup to look at next one...
   12de2:	7802      	ldrb	r2, [r0, #0]
   12de4:	e7cc      	b.n	12d80 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
        if (descriptors[descriptor_index] != 0x14) return false; // only support specific versions...
   12de6:	7a5a      	ldrb	r2, [r3, #9]
   12de8:	2a14      	cmp	r2, #20
   12dea:	d185      	bne.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
        if (descriptor_index >= len) return false;          // we ran off the end and did not get end points
   12dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12dee:	2a1d      	cmp	r2, #29
   12df0:	d982      	bls.n	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
   12df2:	211d      	movs	r1, #29
   12df4:	e7bf      	b.n	12d76 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x8a>
    rxpipe_ = new_Pipe(dev, 3, rx_ep_ & 15, 1, rx_size_, rx_interval);
   12df6:	f8cd e004 	str.w	lr, [sp, #4]
   12dfa:	f002 020f 	and.w	r2, r2, #15
   12dfe:	f8b4 3496 	ldrh.w	r3, [r4, #1174]	; 0x496
   12e02:	2103      	movs	r1, #3
   12e04:	4628      	mov	r0, r5
   12e06:	9300      	str	r3, [sp, #0]
   12e08:	2301      	movs	r3, #1
   12e0a:	f7fd fd81 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
   12e0e:	f8c4 049c 	str.w	r0, [r4, #1180]	; 0x49c
    if (!rxpipe_) return false;
   12e12:	2800      	cmp	r0, #0
   12e14:	f43f af70 	beq.w	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    txpipe_ = new_Pipe(dev, 3, txep, 0, tx_size_, tx_interval);
   12e18:	f8cd 8004 	str.w	r8, [sp, #4]
   12e1c:	4632      	mov	r2, r6
   12e1e:	f8b4 3498 	ldrh.w	r3, [r4, #1176]	; 0x498
   12e22:	4628      	mov	r0, r5
   12e24:	2103      	movs	r1, #3
   12e26:	9300      	str	r3, [sp, #0]
   12e28:	464b      	mov	r3, r9
   12e2a:	f7fd fd71 	bl	10910 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
   12e2e:	f8c4 04a0 	str.w	r0, [r4, #1184]	; 0x4a0
    if (!txpipe_) {
   12e32:	2800      	cmp	r0, #0
   12e34:	f43f af60 	beq.w	12cf8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    rxpipe_->callback_function = rx_callback;
   12e38:	f8d4 049c 	ldr.w	r0, [r4, #1180]	; 0x49c
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12e3c:	f204 41a4 	addw	r1, r4, #1188	; 0x4a4
    rxpipe_->callback_function = rx_callback;
   12e40:	4b20      	ldr	r3, [pc, #128]	; (12ec4 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1d8>)
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12e42:	f8b4 2496 	ldrh.w	r2, [r4, #1174]	; 0x496
    rxpipe_->callback_function = rx_callback;
   12e46:	63c3      	str	r3, [r0, #60]	; 0x3c
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12e48:	4623      	mov	r3, r4
   12e4a:	f7fd f98f 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
    txpipe_->callback_function = tx_callback;
   12e4e:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
   12e52:	4b1d      	ldr	r3, [pc, #116]	; (12ec8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1dc>)
    if (jtype == XBOXONE) {
   12e54:	2f03      	cmp	r7, #3
    txpipe_->callback_function = tx_callback;
   12e56:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (jtype == XBOXONE) {
   12e58:	d020      	beq.n	12e9c <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1b0>
    } else if (jtype == XBOX360) {
   12e5a:	2f04      	cmp	r7, #4
   12e5c:	d016      	beq.n	12e8c <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1a0>
    } else if (jtype == SWITCH) {
   12e5e:	2f07      	cmp	r7, #7
   12e60:	d025      	beq.n	12eae <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1c2>
    memset(axis, 0, sizeof(axis));  // clear out any data.
   12e62:	f44f 7280 	mov.w	r2, #256	; 0x100
   12e66:	2100      	movs	r1, #0
   12e68:	f104 0048 	add.w	r0, r4, #72	; 0x48
   12e6c:	f008 fde4 	bl	1ba38 <memset>
	return true;
   12e70:	2001      	movs	r0, #1
    joystickType_ = jtype;      // remember we are an XBox One.
   12e72:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	return true;
   12e76:	e740      	b.n	12cfa <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe>
                    rx_ep_ = descriptors[descriptor_index + 2];
   12e78:	f884 2495 	strb.w	r2, [r4, #1173]	; 0x495
                    rx_size_ = descriptors[descriptor_index + 4];
   12e7c:	f813 2009 	ldrb.w	r2, [r3, r9]
   12e80:	f8a4 2496 	strh.w	r2, [r4, #1174]	; 0x496
                    rx_interval = descriptors[descriptor_index + 6];
   12e84:	f890 e006 	ldrb.w	lr, [r0, #6]
        descriptor_index += descriptors[descriptor_index];  // setup to look at next one...
   12e88:	7802      	ldrb	r2, [r0, #0]
   12e8a:	e779      	b.n	12d80 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12e8c:	4623      	mov	r3, r4
   12e8e:	220c      	movs	r2, #12
   12e90:	490e      	ldr	r1, [pc, #56]	; (12ecc <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e0>)
   12e92:	f7fd f96b 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        connected_ = 0;     // remember that hardware is actually connected...
   12e96:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
   12e9a:	e7e2      	b.n	12e62 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x176>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12e9c:	4623      	mov	r3, r4
   12e9e:	2205      	movs	r2, #5
   12ea0:	490b      	ldr	r1, [pc, #44]	; (12ed0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e4>)
   12ea2:	f7fd f963 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        connected_ = true;      // remember that hardware is actually connected...
   12ea6:	2301      	movs	r3, #1
   12ea8:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
   12eac:	e7d9      	b.n	12e62 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x176>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12eae:	4623      	mov	r3, r4
   12eb0:	2202      	movs	r2, #2
   12eb2:	4908      	ldr	r1, [pc, #32]	; (12ed4 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e8>)
   12eb4:	f7fd f95a 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        connected_ = true;      // remember that hardware is actually connected...
   12eb8:	2301      	movs	r3, #1
   12eba:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
   12ebe:	e7d0      	b.n	12e62 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x176>
   12ec0:	20009900 	.word	0x20009900
   12ec4:	0001459d 	.word	0x0001459d
   12ec8:	00012a4d 	.word	0x00012a4d
   12ecc:	200098f0 	.word	0x200098f0
   12ed0:	200098e8 	.word	0x200098e8
   12ed4:	200098e4 	.word	0x200098e4

00012ed8 <JoystickController::init()>:
{
   12ed8:	b510      	push	{r4, lr}
   12eda:	4604      	mov	r4, r0
    contribute_Pipes(mypipes, sizeof(mypipes) / sizeof(Pipe_t));
   12edc:	2103      	movs	r1, #3
   12ede:	f500 70c0 	add.w	r0, r0, #384	; 0x180
   12ee2:	f002 f841 	bl	14f68 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>
    contribute_Transfers(mytransfers, sizeof(mytransfers) / sizeof(Transfer_t));
   12ee6:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   12eea:	2107      	movs	r1, #7
   12eec:	f002 f854 	bl	14f98 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>
    contribute_String_Buffers(mystring_bufs, sizeof(mystring_bufs) / sizeof(strbuf_t));
   12ef0:	2101      	movs	r1, #1
   12ef2:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   12ef6:	f002 f869 	bl	14fcc <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>
    driver_ready_for_device(this);
   12efa:	4620      	mov	r0, r4
   12efc:	f7fd fed8 	bl	10cb0 <USBHost::driver_ready_for_device(USBDriver*)>
    USBHIDParser::driver_ready_for_hid_collection(this);
   12f00:	f104 000c 	add.w	r0, r4, #12
   12f04:	f7fe fbc8 	bl	11698 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)>
    BluetoothController::driver_ready_for_bluetooth(this);
   12f08:	f104 0018 	add.w	r0, r4, #24
}
   12f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BluetoothController::driver_ready_for_bluetooth(this);
   12f10:	f7fc be22 	b.w	fb58 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)>

00012f14 <JoystickController::transmitPS4UserFeedbackMsg()>:
bool JoystickController::transmitPS4UserFeedbackMsg() {
   12f14:	b570      	push	{r4, r5, r6, lr}
    if (driver_)  {
   12f16:	6b06      	ldr	r6, [r0, #48]	; 0x30
bool JoystickController::transmitPS4UserFeedbackMsg() {
   12f18:	b094      	sub	sp, #80	; 0x50
   12f1a:	4604      	mov	r4, r0
    if (driver_)  {
   12f1c:	b1fe      	cbz	r6, 12f5e <JoystickController::transmitPS4UserFeedbackMsg()+0x4a>
        memset(packet, 0, sizeof(packet));
   12f1e:	2220      	movs	r2, #32
   12f20:	2100      	movs	r1, #0
   12f22:	4668      	mov	r0, sp
   12f24:	f008 fd88 	bl	1ba38 <memset>
        packet[4] = rumble_lValue_; // Small Rumble
   12f28:	f8b4 1166 	ldrh.w	r1, [r4, #358]	; 0x166
        packet[6] = leds_[0]; // RGB value
   12f2c:	f894 3169 	ldrb.w	r3, [r4, #361]	; 0x169
        packet[0] = 0x05; // Report ID
   12f30:	f64f 7205 	movw	r2, #65285	; 0xff05
        packet[7] = leds_[1];
   12f34:	f894 516a 	ldrb.w	r5, [r4, #362]	; 0x16a
        return driver_->sendPacket(packet, 32);
   12f38:	4630      	mov	r0, r6
        packet[4] = rumble_lValue_; // Small Rumble
   12f3a:	f8ad 1004 	strh.w	r1, [sp, #4]
        return driver_->sendPacket(packet, 32);
   12f3e:	4669      	mov	r1, sp
        packet[0] = 0x05; // Report ID
   12f40:	f8ad 2000 	strh.w	r2, [sp]
        return driver_->sendPacket(packet, 32);
   12f44:	2220      	movs	r2, #32
        packet[6] = leds_[0]; // RGB value
   12f46:	f88d 3006 	strb.w	r3, [sp, #6]
        packet[8] = leds_[2];
   12f4a:	f894 316b 	ldrb.w	r3, [r4, #363]	; 0x16b
        packet[7] = leds_[1];
   12f4e:	f88d 5007 	strb.w	r5, [sp, #7]
        packet[8] = leds_[2];
   12f52:	f88d 3008 	strb.w	r3, [sp, #8]
        return driver_->sendPacket(packet, 32);
   12f56:	f7fe faff 	bl	11558 <USBHIDParser::sendPacket(unsigned char const*, int)>
}
   12f5a:	b014      	add	sp, #80	; 0x50
   12f5c:	bd70      	pop	{r4, r5, r6, pc}
    } else if (btdriver_) {
   12f5e:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12f60:	b915      	cbnz	r5, 12f68 <JoystickController::transmitPS4UserFeedbackMsg()+0x54>
    return false;
   12f62:	4628      	mov	r0, r5
}
   12f64:	b014      	add	sp, #80	; 0x50
   12f66:	bd70      	pop	{r4, r5, r6, pc}
        memset(packet, 0, sizeof(packet));
   12f68:	4631      	mov	r1, r6
   12f6a:	224f      	movs	r2, #79	; 0x4f
   12f6c:	4668      	mov	r0, sp
   12f6e:	f008 fd63 	bl	1ba38 <memset>
        packet[0] = 0x52;
   12f72:	f241 1252 	movw	r2, #4434	; 0x1152
        packet[8] = rumble_rValue_; // Big rumble
   12f76:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   12f7a:	4628      	mov	r0, r5
        packet[0] = 0x52;
   12f7c:	f8ad 2000 	strh.w	r2, [sp]
        packet[2] = 0x80;
   12f80:	2280      	movs	r2, #128	; 0x80
        packet[7] = rumble_lValue_; // Small Rumble
   12f82:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
        packet[2] = 0x80;
   12f86:	f88d 2002 	strb.w	r2, [sp, #2]
        packet[4] = 0xFF;
   12f8a:	22ff      	movs	r2, #255	; 0xff
        packet[8] = rumble_rValue_; // Big rumble
   12f8c:	f88d 3008 	strb.w	r3, [sp, #8]
        packet[9] = leds_[0]; // RGB value
   12f90:	f894 3169 	ldrb.w	r3, [r4, #361]	; 0x169
        packet[10] = leds_[1];
   12f94:	f8b4 416a 	ldrh.w	r4, [r4, #362]	; 0x16a
        packet[7] = rumble_lValue_; // Small Rumble
   12f98:	f88d 1007 	strb.w	r1, [sp, #7]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   12f9c:	4669      	mov	r1, sp
        packet[4] = 0xFF;
   12f9e:	f88d 2004 	strb.w	r2, [sp, #4]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   12fa2:	224f      	movs	r2, #79	; 0x4f
        packet[9] = leds_[0]; // RGB value
   12fa4:	f88d 3009 	strb.w	r3, [sp, #9]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   12fa8:	2340      	movs	r3, #64	; 0x40
        packet[10] = leds_[1];
   12faa:	f8ad 400a 	strh.w	r4, [sp, #10]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   12fae:	f7fc fe0d 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
        return true;
   12fb2:	2001      	movs	r0, #1
}
   12fb4:	b014      	add	sp, #80	; 0x50
   12fb6:	bd70      	pop	{r4, r5, r6, pc}

00012fb8 <JoystickController::transmitPS3UserFeedbackMsg()>:
bool JoystickController::transmitPS3UserFeedbackMsg() {
   12fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (driver_) {
   12fbc:	6b06      	ldr	r6, [r0, #48]	; 0x30
bool JoystickController::transmitPS3UserFeedbackMsg() {
   12fbe:	b084      	sub	sp, #16
   12fc0:	4684      	mov	ip, r0
    if (driver_) {
   12fc2:	2e00      	cmp	r6, #0
   12fc4:	d045      	beq.n	13052 <JoystickController::transmitPS3UserFeedbackMsg()+0x9a>
        memcpy(txbuf_, PS3_USER_FEEDBACK_INIT, 48);
   12fc6:	4d45      	ldr	r5, [pc, #276]	; (130dc <JoystickController::transmitPS3UserFeedbackMsg()+0x124>)
   12fc8:	f200 47e4 	addw	r7, r0, #1252	; 0x4e4
   12fcc:	f105 0830 	add.w	r8, r5, #48	; 0x30
   12fd0:	463c      	mov	r4, r7
   12fd2:	46ae      	mov	lr, r5
   12fd4:	3410      	adds	r4, #16
   12fd6:	3510      	adds	r5, #16
   12fd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   12fdc:	45c6      	cmp	lr, r8
   12fde:	f844 0c10 	str.w	r0, [r4, #-16]
   12fe2:	f844 1c0c 	str.w	r1, [r4, #-12]
   12fe6:	f844 2c08 	str.w	r2, [r4, #-8]
   12fea:	f844 3c04 	str.w	r3, [r4, #-4]
   12fee:	d1f0      	bne.n	12fd2 <JoystickController::transmitPS3UserFeedbackMsg()+0x1a>
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   12ff0:	f89c 3166 	ldrb.w	r3, [ip, #358]	; 0x166
   12ff4:	bb0b      	cbnz	r3, 1303a <JoystickController::transmitPS3UserFeedbackMsg()+0x82>
   12ff6:	461a      	mov	r2, r3
        txbuf_[2] = rumble_lValue_; // Small Rumble
   12ff8:	f88c 34e6 	strb.w	r3, [ip, #1254]	; 0x4e6
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   12ffc:	f88c 24e5 	strb.w	r2, [ip, #1253]	; 0x4e5
        txbuf_[3] = rumble_rValue_ ? rumble_timeout_ : 0;
   13000:	f89c 2167 	ldrb.w	r2, [ip, #359]	; 0x167
   13004:	b31a      	cbz	r2, 1304e <JoystickController::transmitPS3UserFeedbackMsg()+0x96>
   13006:	f89c 3168 	ldrb.w	r3, [ip, #360]	; 0x168
   1300a:	f88c 34e7 	strb.w	r3, [ip, #1255]	; 0x4e7
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   1300e:	2400      	movs	r4, #0
        txbuf_[9] = leds_[2] << 1; // RGB value     // using third led now...
   13010:	f89c 316b 	ldrb.w	r3, [ip, #363]	; 0x16b
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   13014:	2121      	movs	r1, #33	; 0x21
        txbuf_[4] = rumble_rValue_; // Big rumble
   13016:	f88c 24e8 	strb.w	r2, [ip, #1256]	; 0x4e8
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   1301a:	2230      	movs	r2, #48	; 0x30
        txbuf_[9] = leds_[2] << 1; // RGB value     // using third led now...
   1301c:	005b      	lsls	r3, r3, #1
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   1301e:	9702      	str	r7, [sp, #8]
   13020:	9201      	str	r2, [sp, #4]
   13022:	2209      	movs	r2, #9
        txbuf_[9] = leds_[2] << 1; // RGB value     // using third led now...
   13024:	f88c 34ed 	strb.w	r3, [ip, #1261]	; 0x4ed
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   13028:	f240 2301 	movw	r3, #513	; 0x201
   1302c:	4630      	mov	r0, r6
   1302e:	9400      	str	r4, [sp, #0]
   13030:	f7fe fb1e 	bl	11670 <USBHIDParser::sendControlPacket(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void*)>
}
   13034:	b004      	add	sp, #16
   13036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   1303a:	f89c 2168 	ldrb.w	r2, [ip, #360]	; 0x168
        txbuf_[2] = rumble_lValue_; // Small Rumble
   1303e:	f88c 34e6 	strb.w	r3, [ip, #1254]	; 0x4e6
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   13042:	f88c 24e5 	strb.w	r2, [ip, #1253]	; 0x4e5
        txbuf_[3] = rumble_rValue_ ? rumble_timeout_ : 0;
   13046:	f89c 2167 	ldrb.w	r2, [ip, #359]	; 0x167
   1304a:	2a00      	cmp	r2, #0
   1304c:	d1db      	bne.n	13006 <JoystickController::transmitPS3UserFeedbackMsg()+0x4e>
   1304e:	4613      	mov	r3, r2
   13050:	e7db      	b.n	1300a <JoystickController::transmitPS3UserFeedbackMsg()+0x52>
    } else if (btdriver_) {
   13052:	6b44      	ldr	r4, [r0, #52]	; 0x34
   13054:	b3cc      	cbz	r4, 130ca <JoystickController::transmitPS3UserFeedbackMsg()+0x112>
        txbuf_[0] = 0x52;
   13056:	4e22      	ldr	r6, [pc, #136]	; (130e0 <JoystickController::transmitPS3UserFeedbackMsg()+0x128>)
   13058:	f200 47e4 	addw	r7, r0, #1252	; 0x4e4
   1305c:	f106 0830 	add.w	r8, r6, #48	; 0x30
   13060:	46be      	mov	lr, r7
   13062:	4635      	mov	r5, r6
   13064:	f10e 0e10 	add.w	lr, lr, #16
   13068:	3610      	adds	r6, #16
   1306a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1306c:	4545      	cmp	r5, r8
   1306e:	f84e 0c10 	str.w	r0, [lr, #-16]
   13072:	f84e 1c0c 	str.w	r1, [lr, #-12]
   13076:	f84e 2c08 	str.w	r2, [lr, #-8]
   1307a:	f84e 3c04 	str.w	r3, [lr, #-4]
   1307e:	d1f0      	bne.n	13062 <JoystickController::transmitPS3UserFeedbackMsg()+0xaa>
   13080:	8833      	ldrh	r3, [r6, #0]
   13082:	f8ae 3000 	strh.w	r3, [lr]
        txbuf_[3] = rumble_lValue_ ? rumble_timeout_ : 0;
   13086:	f89c 3166 	ldrb.w	r3, [ip, #358]	; 0x166
   1308a:	b323      	cbz	r3, 130d6 <JoystickController::transmitPS3UserFeedbackMsg()+0x11e>
   1308c:	f89c 2168 	ldrb.w	r2, [ip, #360]	; 0x168
   13090:	f88c 24e7 	strb.w	r2, [ip, #1255]	; 0x4e7
        txbuf_[5] = rumble_rValue_ ? rumble_timeout_ : 0;
   13094:	f89c 2167 	ldrb.w	r2, [ip, #359]	; 0x167
        txbuf_[4] = rumble_lValue_; // Small Rumble
   13098:	f88c 34e8 	strb.w	r3, [ip, #1256]	; 0x4e8
        txbuf_[5] = rumble_rValue_ ? rumble_timeout_ : 0;
   1309c:	b1ca      	cbz	r2, 130d2 <JoystickController::transmitPS3UserFeedbackMsg()+0x11a>
   1309e:	f89c 3168 	ldrb.w	r3, [ip, #360]	; 0x168
   130a2:	f88c 34e9 	strb.w	r3, [ip, #1257]	; 0x4e9
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   130a6:	4620      	mov	r0, r4
        txbuf_[11] = leds_[2] << 1; // RGB value
   130a8:	f89c 316b 	ldrb.w	r3, [ip, #363]	; 0x16b
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   130ac:	4639      	mov	r1, r7
        txbuf_[6] = rumble_rValue_; // Big rumble
   130ae:	f88c 24ea 	strb.w	r2, [ip, #1258]	; 0x4ea
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   130b2:	2232      	movs	r2, #50	; 0x32
        txbuf_[11] = leds_[2] << 1; // RGB value
   130b4:	005b      	lsls	r3, r3, #1
   130b6:	f88c 34ef 	strb.w	r3, [ip, #1263]	; 0x4ef
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   130ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130be:	f7fc fd85 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
        return true;
   130c2:	2001      	movs	r0, #1
}
   130c4:	b004      	add	sp, #16
   130c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   130ca:	4620      	mov	r0, r4
}
   130cc:	b004      	add	sp, #16
   130ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txbuf_[5] = rumble_rValue_ ? rumble_timeout_ : 0;
   130d2:	4613      	mov	r3, r2
   130d4:	e7e5      	b.n	130a2 <JoystickController::transmitPS3UserFeedbackMsg()+0xea>
        txbuf_[3] = rumble_lValue_ ? rumble_timeout_ : 0;
   130d6:	461a      	mov	r2, r3
   130d8:	e7da      	b.n	13090 <JoystickController::transmitPS3UserFeedbackMsg()+0xd8>
   130da:	bf00      	nop
   130dc:	20002124 	.word	0x20002124
   130e0:	20002154 	.word	0x20002154

000130e4 <JoystickController::transmitPS3MotionUserFeedbackMsg()>:
bool JoystickController::transmitPS3MotionUserFeedbackMsg() {
   130e4:	4684      	mov	ip, r0
    if (driver_) {
   130e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
bool JoystickController::transmitPS3MotionUserFeedbackMsg() {
   130e8:	b508      	push	{r3, lr}
    if (driver_) {
   130ea:	b1c8      	cbz	r0, 13120 <JoystickController::transmitPS3MotionUserFeedbackMsg()+0x3c>
        txbuf_[0] = 0x02; // Set report ID, this is needed for Move commands to work
   130ec:	2202      	movs	r2, #2
        txbuf_[2] = leds_[0];
   130ee:	f89c 3169 	ldrb.w	r3, [ip, #361]	; 0x169
        txbuf_[3] = leds_[1];
   130f2:	f89c 116a 	ldrb.w	r1, [ip, #362]	; 0x16a
        txbuf_[0] = 0x02; // Set report ID, this is needed for Move commands to work
   130f6:	f88c 24e4 	strb.w	r2, [ip, #1252]	; 0x4e4
        txbuf_[2] = leds_[0];
   130fa:	f88c 34e6 	strb.w	r3, [ip, #1254]	; 0x4e6
        txbuf_[4] = leds_[2];
   130fe:	f89c 216b 	ldrb.w	r2, [ip, #363]	; 0x16b
        txbuf_[6] = rumble_lValue_; // Set the rumble value into the write buffer
   13102:	f89c 3166 	ldrb.w	r3, [ip, #358]	; 0x166
        txbuf_[3] = leds_[1];
   13106:	f88c 14e7 	strb.w	r1, [ip, #1255]	; 0x4e7
        return driver_->sendPacket(txbuf_, MOVE_REPORT_BUFFER_SIZE);
   1310a:	f20c 41e4 	addw	r1, ip, #1252	; 0x4e4
        txbuf_[4] = leds_[2];
   1310e:	f88c 24e8 	strb.w	r2, [ip, #1256]	; 0x4e8
        return driver_->sendPacket(txbuf_, MOVE_REPORT_BUFFER_SIZE);
   13112:	2207      	movs	r2, #7
        txbuf_[6] = rumble_lValue_; // Set the rumble value into the write buffer
   13114:	f88c 34ea 	strb.w	r3, [ip, #1258]	; 0x4ea
}
   13118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return driver_->sendPacket(txbuf_, MOVE_REPORT_BUFFER_SIZE);
   1311c:	f7fe ba1c 	b.w	11558 <USBHIDParser::sendPacket(unsigned char const*, int)>
    } else if (btdriver_) {
   13120:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
   13124:	b900      	cbnz	r0, 13128 <JoystickController::transmitPS3MotionUserFeedbackMsg()+0x44>
}
   13126:	bd08      	pop	{r3, pc}
        txbuf_[4] = leds_[1];
   13128:	f8bc 316a 	ldrh.w	r3, [ip, #362]	; 0x16a
        txbuf_[0] = 0xA2; // HID BT DATA_request (0xA0) | Report Type (Output 0x02)
   1312c:	f240 22a2 	movw	r2, #674	; 0x2a2
        txbuf_[7] = rumble_lValue_;
   13130:	f89c 1166 	ldrb.w	r1, [ip, #358]	; 0x166
        txbuf_[3] = leds_[0];
   13134:	f89c e169 	ldrb.w	lr, [ip, #361]	; 0x169
        txbuf_[0] = 0xA2; // HID BT DATA_request (0xA0) | Report Type (Output 0x02)
   13138:	f8ac 24e4 	strh.w	r2, [ip, #1252]	; 0x4e4
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   1313c:	2232      	movs	r2, #50	; 0x32
        txbuf_[4] = leds_[1];
   1313e:	f8ac 34e8 	strh.w	r3, [ip, #1256]	; 0x4e8
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   13142:	f06f 0301 	mvn.w	r3, #1
        txbuf_[7] = rumble_lValue_;
   13146:	f88c 14eb 	strb.w	r1, [ip, #1259]	; 0x4eb
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   1314a:	f20c 41e4 	addw	r1, ip, #1252	; 0x4e4
        txbuf_[3] = leds_[0];
   1314e:	f88c e4e7 	strb.w	lr, [ip, #1255]	; 0x4e7
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   13152:	f7fc fd3b 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
        return true;
   13156:	2001      	movs	r0, #1
}
   13158:	bd08      	pop	{r3, pc}
   1315a:	bf00      	nop

0001315c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>:
{
   1315c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13160:	460d      	mov	r5, r1
    if ((leds_[0] != lr) || (leds_[1] != lg) || (leds_[2] != lb)) {
   13162:	f890 1169 	ldrb.w	r1, [r0, #361]	; 0x169
{
   13166:	4604      	mov	r4, r0
    if ((leds_[0] != lr) || (leds_[1] != lg) || (leds_[2] != lb)) {
   13168:	42a9      	cmp	r1, r5
   1316a:	d010      	beq.n	1318e <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x32>
        switch (joystickType_) {
   1316c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
        leds_[2] = lb;
   13170:	f884 316b 	strb.w	r3, [r4, #363]	; 0x16b
        switch (joystickType_) {
   13174:	1e4b      	subs	r3, r1, #1
        leds_[0] = lr;
   13176:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
        leds_[1] = lg;
   1317a:	f884 216a 	strb.w	r2, [r4, #362]	; 0x16a
        switch (joystickType_) {
   1317e:	2b06      	cmp	r3, #6
   13180:	d80d      	bhi.n	1319e <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x42>
   13182:	e8df f003 	tbb	[pc, r3]
   13186:	3d38      	.short	0x3d38
   13188:	0c5a420c 	.word	0x0c5a420c
   1318c:	10          	.byte	0x10
   1318d:	00          	.byte	0x00
    if ((leds_[0] != lr) || (leds_[1] != lg) || (leds_[2] != lb)) {
   1318e:	f890 116a 	ldrb.w	r1, [r0, #362]	; 0x16a
   13192:	4291      	cmp	r1, r2
   13194:	d1ea      	bne.n	1316c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x10>
   13196:	f890 116b 	ldrb.w	r1, [r0, #363]	; 0x16b
   1319a:	4299      	cmp	r1, r3
   1319c:	d1e6      	bne.n	1316c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x10>
        switch (joystickType_) {
   1319e:	2700      	movs	r7, #0
}
   131a0:	4638      	mov	r0, r7
   131a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (btdriver_) {
   131a6:	6b67      	ldr	r7, [r4, #52]	; 0x34
   131a8:	2f00      	cmp	r7, #0
   131aa:	d04d      	beq.n	13248 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0xec>
                struct SWProBTSendConfigData *packet =  (struct SWProBTSendConfigData *)txbuf_ ;
   131ac:	f204 48e4 	addw	r8, r4, #1252	; 0x4e4
                packet->id = 1; 
   131b0:	2601      	movs	r6, #1
                memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   131b2:	2232      	movs	r2, #50	; 0x32
   131b4:	2100      	movs	r1, #0
   131b6:	4640      	mov	r0, r8
   131b8:	f008 fc3e 	bl	1ba38 <memset>
                btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   131bc:	4638      	mov	r0, r7
                packet->id = 1; 
   131be:	f884 64e5 	strb.w	r6, [r4, #1253]	; 0x4e5
                return true;
   131c2:	4637      	mov	r7, r6
                packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   131c4:	22a2      	movs	r2, #162	; 0xa2
                packet->gpnum = switch_packet_num;
   131c6:	4e3d      	ldr	r6, [pc, #244]	; (132bc <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x160>)
                btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   131c8:	f06f 0301 	mvn.w	r3, #1
   131cc:	4641      	mov	r1, r8
                packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   131ce:	f884 24e4 	strb.w	r2, [r4, #1252]	; 0x4e4
                packet->gpnum = switch_packet_num;
   131d2:	7832      	ldrb	r2, [r6, #0]
                packet->subCommandData[0] = lr; // try full 0x30?; // Report ID
   131d4:	f884 54f0 	strb.w	r5, [r4, #1264]	; 0x4f0
                packet->gpnum = switch_packet_num;
   131d8:	f884 24e6 	strb.w	r2, [r4, #1254]	; 0x4e6
                switch_packet_num = (switch_packet_num + 1) & 0x0f;
   131dc:	443a      	add	r2, r7
   131de:	f002 020f 	and.w	r2, r2, #15
   131e2:	7032      	strb	r2, [r6, #0]
                packet->subCommand = 0x30; // Report ID 
   131e4:	2230      	movs	r2, #48	; 0x30
   131e6:	f884 24ef 	strb.w	r2, [r4, #1263]	; 0x4ef
                btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   131ea:	2232      	movs	r2, #50	; 0x32
   131ec:	f7fc fcee 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
}
   131f0:	4638      	mov	r0, r7
   131f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return transmitPS3UserFeedbackMsg();
   131f6:	4620      	mov	r0, r4
}
   131f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return transmitPS3UserFeedbackMsg();
   131fc:	f7ff bedc 	b.w	12fb8 <JoystickController::transmitPS3UserFeedbackMsg()>
            return transmitPS4UserFeedbackMsg();
   13200:	4620      	mov	r0, r4
}
   13202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return transmitPS4UserFeedbackMsg();
   13206:	f7ff be85 	b.w	12f14 <JoystickController::transmitPS4UserFeedbackMsg()>
            txbuf_[1] = 0x00;
   1320a:	2300      	movs	r3, #0
            txbuf_[2] = 0x08;
   1320c:	2208      	movs	r2, #8
            txbuf_[3] = 0x40 + lr;
   1320e:	3540      	adds	r5, #64	; 0x40
            if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 12, this, __LINE__)) {
   13210:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
            txbuf_[1] = 0x00;
   13214:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
            txbuf_[2] = 0x08;
   13218:	f884 24e6 	strb.w	r2, [r4, #1254]	; 0x4e6
            txbuf_[3] = 0x40 + lr;
   1321c:	f884 54e7 	strb.w	r5, [r4, #1255]	; 0x4e7
            txbuf_[4] = 0x00;
   13220:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            txbuf_[8] = 0x00;
   13224:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   13228:	b160      	cbz	r0, 13244 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0xe8>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   1322a:	4623      	mov	r3, r4
   1322c:	220c      	movs	r2, #12
   1322e:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
            return true;
   13232:	2701      	movs	r7, #1
    return queue_Data_Transfer(pipe, buffer, len, driver);
   13234:	f7fc ff9a 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
   13238:	e7b2      	b.n	131a0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
            return transmitPS3MotionUserFeedbackMsg();
   1323a:	4620      	mov	r0, r4
}
   1323c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return transmitPS3MotionUserFeedbackMsg();
   13240:	f7ff bf50 	b.w	130e4 <JoystickController::transmitPS3MotionUserFeedbackMsg()>
            return true;
   13244:	2701      	movs	r7, #1
   13246:	e7ab      	b.n	131a0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
            txbuf_[0] = 0x01;   // Command
   13248:	2301      	movs	r3, #1
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   1324a:	f8c4 74e4 	str.w	r7, [r4, #1252]	; 0x4e4
            txbuf_[1 + 0] = rumble_counter++; //
   1324e:	4a1c      	ldr	r2, [pc, #112]	; (132c0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x164>)
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   13250:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13254:	f8c4 74e8 	str.w	r7, [r4, #1256]	; 0x4e8
            txbuf_[0] = 0x01;   // Command
   13258:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
            txbuf_[1 + 2] = 0x01;
   1325c:	f884 34e7 	strb.w	r3, [r4, #1255]	; 0x4e7
            txbuf_[1 + 6] = 0x01;
   13260:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
            txbuf_[1 + 9] = 0x30; // LED Command
   13264:	2330      	movs	r3, #48	; 0x30
            println("Switch set leds: driver? ", (uint32_t)driver_, HEX);
   13266:	6b20      	ldr	r0, [r4, #48]	; 0x30
            txbuf_[1 + 9] = 0x30; // LED Command
   13268:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
            txbuf_[1 + 0] = rumble_counter++; //
   1326c:	7813      	ldrb	r3, [r2, #0]
            txbuf_[1 + 10] = lr;
   1326e:	f884 54ef 	strb.w	r5, [r4, #1263]	; 0x4ef
            txbuf_[1 + 0] = rumble_counter++; //
   13272:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
   13276:	3301      	adds	r3, #1
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   13278:	f8c4 74f0 	str.w	r7, [r4, #1264]	; 0x4f0
            txbuf_[1 + 0] = rumble_counter++; //
   1327c:	7013      	strb	r3, [r2, #0]
            txbuf_[1 + 3] = 0x40;
   1327e:	f244 0340 	movw	r3, #16448	; 0x4040
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   13282:	f8c4 74f4 	str.w	r7, [r4, #1268]	; 0x4f4
            txbuf_[1 + 3] = 0x40;
   13286:	f8a4 34e8 	strh.w	r3, [r4, #1256]	; 0x4e8
            txbuf_[1 + 7] = 0x40;
   1328a:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
			if(driver_) {
   1328e:	b118      	cbz	r0, 13298 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x13c>
				driver_->sendPacket(txbuf_, 20);
   13290:	2214      	movs	r2, #20
   13292:	f7fe f961 	bl	11558 <USBHIDParser::sendPacket(unsigned char const*, int)>
   13296:	e783      	b.n	131a0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
			} else if (txpipe_) {
   13298:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
   1329c:	2800      	cmp	r0, #0
   1329e:	f43f af7e 	beq.w	1319e <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x42>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   132a2:	4623      	mov	r3, r4
   132a4:	2214      	movs	r2, #20
   132a6:	f7fc ff61 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
				if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 20, this, __LINE__)) {
   132aa:	4607      	mov	r7, r0
   132ac:	2800      	cmp	r0, #0
   132ae:	f47f af76 	bne.w	1319e <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x42>
					Serial.printf("Switch transfer fail\n");
   132b2:	4904      	ldr	r1, [pc, #16]	; (132c4 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x168>)
   132b4:	4804      	ldr	r0, [pc, #16]	; (132c8 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x16c>)
   132b6:	f002 fc0d 	bl	15ad4 <Print::printf(char const*, ...)>
   132ba:	e771      	b.n	131a0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
   132bc:	2000ec28 	.word	0x2000ec28
   132c0:	2000ec27 	.word	0x2000ec27
   132c4:	20003b78 	.word	0x20003b78
   132c8:	20009514 	.word	0x20009514

000132cc <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>:
{
   132cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132ce:	4604      	mov	r4, r0
    switch (joystickType_) {
   132d0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
   132d4:	460d      	mov	r5, r1
   132d6:	4616      	mov	r6, r2
    switch (joystickType_) {
   132d8:	3801      	subs	r0, #1
    rumble_lValue_ = lValue;
   132da:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
    rumble_rValue_ = rValue;
   132de:	f884 2167 	strb.w	r2, [r4, #359]	; 0x167
    rumble_timeout_ = timeout;
   132e2:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
    switch (joystickType_) {
   132e6:	2806      	cmp	r0, #6
   132e8:	f200 80b4 	bhi.w	13454 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x188>
   132ec:	e8df f000 	tbb	[pc, r0]
   132f0:	94615c57 	.word	0x94615c57
   132f4:	b2ad      	.short	0xb2ad
   132f6:	04          	.byte	0x04
   132f7:	00          	.byte	0x00
        if (btdriver_) {
   132f8:	6b67      	ldr	r7, [r4, #52]	; 0x34
   132fa:	2f00      	cmp	r7, #0
   132fc:	f000 80c2 	beq.w	13484 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b8>
            struct SWProBTSendConfigData *packet =  (struct SWProBTSendConfigData *)txbuf_ ;
   13300:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
            memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   13304:	2232      	movs	r2, #50	; 0x32
   13306:	2100      	movs	r1, #0
   13308:	4638      	mov	r0, r7
   1330a:	f008 fb95 	bl	1ba38 <memset>
            packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   1330e:	23a2      	movs	r3, #162	; 0xa2
   13310:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
            packet->id = 0x10; 
   13314:	2310      	movs	r3, #16
   13316:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
			if(switch_packet_num > 0x10) switch_packet_num = 0;
   1331a:	4bb5      	ldr	r3, [pc, #724]	; (135f0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x324>)
   1331c:	781a      	ldrb	r2, [r3, #0]
   1331e:	2a10      	cmp	r2, #16
   13320:	f200 80f3 	bhi.w	1350a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x23e>
            switch_packet_num = (switch_packet_num + 1) & 0x0f;
   13324:	1c51      	adds	r1, r2, #1
   13326:	f001 010f 	and.w	r1, r1, #15
   1332a:	7019      	strb	r1, [r3, #0]
            Serial.printf("Set Rumble data: %d, %d\n", lValue, rValue);
   1332c:	4633      	mov	r3, r6
            packet->gpnum = switch_packet_num;
   1332e:	f884 24e6 	strb.w	r2, [r4, #1254]	; 0x4e6
            Serial.printf("Set Rumble data: %d, %d\n", lValue, rValue);
   13332:	462a      	mov	r2, r5
   13334:	49af      	ldr	r1, [pc, #700]	; (135f4 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x328>)
   13336:	48b0      	ldr	r0, [pc, #704]	; (135f8 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x32c>)
   13338:	f002 fbcc 	bl	15ad4 <Print::printf(char const*, ...)>
			if ((lValue != 0x0) || (rValue != 0x0)) {
   1333c:	ea55 0306 	orrs.w	r3, r5, r6
   13340:	d01f      	beq.n	13382 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
   13342:	1e2b      	subs	r3, r5, #0
   13344:	bf18      	it	ne
   13346:	2301      	movne	r3, #1
                if (lValue != 0 && rValue == 0) {
   13348:	2e00      	cmp	r6, #0
   1334a:	f040 80f4 	bne.w	13536 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x26a>
   1334e:	2b00      	cmp	r3, #0
   13350:	f000 80f1 	beq.w	13536 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x26a>
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_off[i];
   13354:	2201      	movs	r2, #1
   13356:	2340      	movs	r3, #64	; 0x40
   13358:	2100      	movs	r1, #0
   1335a:	f884 24ec 	strb.w	r2, [r4, #1260]	; 0x4ec
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   1335e:	2228      	movs	r2, #40	; 0x28
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_off[i];
   13360:	f884 14eb 	strb.w	r1, [r4, #1259]	; 0x4eb
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   13364:	2188      	movs	r1, #136	; 0x88
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_off[i];
   13366:	f884 34ed 	strb.w	r3, [r4, #1261]	; 0x4ed
   1336a:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   1336e:	2361      	movs	r3, #97	; 0x61
   13370:	f884 24e7 	strb.w	r2, [r4, #1255]	; 0x4e7
   13374:	2260      	movs	r2, #96	; 0x60
   13376:	f884 14e8 	strb.w	r1, [r4, #1256]	; 0x4e8
   1337a:	f884 24e9 	strb.w	r2, [r4, #1257]	; 0x4e9
   1337e:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
            packet->subCommand = 0x0;
   13382:	2000      	movs	r0, #0
            btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   13384:	f06f 0301 	mvn.w	r3, #1
   13388:	2232      	movs	r2, #50	; 0x32
   1338a:	4639      	mov	r1, r7
            packet->subCommand = 0x0;
   1338c:	f884 04ef 	strb.w	r0, [r4, #1263]	; 0x4ef
            packet->subCommandData[0] = 0; 
   13390:	f884 04f0 	strb.w	r0, [r4, #1264]	; 0x4f0
            btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   13394:	6b60      	ldr	r0, [r4, #52]	; 0x34
   13396:	f7fc fc19 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
            return true;
   1339a:	2001      	movs	r0, #1
}
   1339c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return transmitPS3UserFeedbackMsg();
   1339e:	4620      	mov	r0, r4
}
   133a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return transmitPS3UserFeedbackMsg();
   133a4:	f7ff be08 	b.w	12fb8 <JoystickController::transmitPS3UserFeedbackMsg()>
        return transmitPS4UserFeedbackMsg();
   133a8:	4620      	mov	r0, r4
}
   133aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return transmitPS4UserFeedbackMsg();
   133ae:	f7ff bdb1 	b.w	12f14 <JoystickController::transmitPS4UserFeedbackMsg()>
		if (btdriver_) {
   133b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   133b4:	2800      	cmp	r0, #0
   133b6:	d04f      	beq.n	13458 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x18c>
			txbuf_[0] = 0xA2;                  // HID BT DATA (0xA0) | Report Type (Output 0x02)
   133b8:	f240 33a2 	movw	r3, #930	; 0x3a2
	if (in_range == 0) return out_min + out_range / 2;
	// compute the numerator
	long num = (x - in_min) * out_range;
	// before dividing, add extra for proper round off (towards zero)
	if (out_range >= 0) {
		num += in_range / 2;
   133bc:	f240 12ff 	movw	r2, #511	; 0x1ff
   133c0:	f8a4 34e4 	strh.w	r3, [r4, #1252]	; 0x4e4
			txbuf_[2] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
   133c4:	230f      	movs	r3, #15
   133c6:	f884 34e6 	strb.w	r3, [r4, #1254]	; 0x4e6
   133ca:	2364      	movs	r3, #100	; 0x64
   133cc:	fb13 2501 	smlabb	r5, r3, r1, r2
   133d0:	fb13 2106 	smlabb	r1, r3, r6, r2
	} else {
		num -= in_range / 2;
	}
	// divide by input range and add output offset to complete map() compute
	long result = num / in_range + out_min;
   133d4:	4a89      	ldr	r2, [pc, #548]	; (135fc <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x330>)
			txbuf_[7] = 0xff; // Length of pulse
   133d6:	23ff      	movs	r3, #255	; 0xff
   133d8:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
   133dc:	fb82 6305 	smull	r6, r3, r2, r5
   133e0:	442b      	add	r3, r5
   133e2:	fb82 5201 	smull	r5, r2, r2, r1
   133e6:	440a      	add	r2, r1
			txbuf_[3] = map(lValue, 0, 1023, 0, 100); // lT force
   133e8:	f3c3 2347 	ubfx	r3, r3, #9, #8
			txbuf_[8] = 0x00; // Period between pulses
   133ec:	2100      	movs	r1, #0
			txbuf_[4] = map(rValue, 0, 1023, 0, 100); // rT force
   133ee:	f3c2 2247 	ubfx	r2, r2, #9, #8
			txbuf_[3] = map(lValue, 0, 1023, 0, 100); // lT force
   133f2:	f884 34e7 	strb.w	r3, [r4, #1255]	; 0x4e7
			txbuf_[5] = map(lValue, 0, 1023, 0, 100); // L force
   133f6:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
			btdriver_->sendL2CapCommand(txbuf_, 10, BluetoothController::INTERRUPT_SCID);
   133fa:	f06f 0301 	mvn.w	r3, #1
			txbuf_[4] = map(rValue, 0, 1023, 0, 100); // rT force
   133fe:	f884 24e8 	strb.w	r2, [r4, #1256]	; 0x4e8
			txbuf_[6] = map(rValue, 0, 1023, 0, 100); // R force
   13402:	f884 24ea 	strb.w	r2, [r4, #1258]	; 0x4ea
			btdriver_->sendL2CapCommand(txbuf_, 10, BluetoothController::INTERRUPT_SCID);
   13406:	220a      	movs	r2, #10
			txbuf_[8] = 0x00; // Period between pulses
   13408:	f8a4 14ec 	strh.w	r1, [r4, #1260]	; 0x4ec
			btdriver_->sendL2CapCommand(txbuf_, 10, BluetoothController::INTERRUPT_SCID);
   1340c:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13410:	f7fc fbdc 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
			return true;
   13414:	2001      	movs	r0, #1
}
   13416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        txbuf_[4] = 0x00;
   13418:	2300      	movs	r3, #0
        txbuf_[0] = 0x00;
   1341a:	4a79      	ldr	r2, [pc, #484]	; (13600 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x334>)
        if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 12, this, __LINE__)) {
   1341c:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
        txbuf_[5] = lValue;
   13420:	f884 14e9 	strb.w	r1, [r4, #1257]	; 0x4e9
        txbuf_[0] = 0x00;
   13424:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        txbuf_[4] = 0x00;
   13428:	f884 34e8 	strb.w	r3, [r4, #1256]	; 0x4e8
        txbuf_[6] = rValue;
   1342c:	f884 64ea 	strb.w	r6, [r4, #1258]	; 0x4ea
        txbuf_[7] = 0x00;
   13430:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
        txbuf_[8] = 0x00;
   13434:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   13438:	b310      	cbz	r0, 13480 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b4>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   1343a:	4623      	mov	r3, r4
   1343c:	220c      	movs	r2, #12
   1343e:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13442:	f7fc fe93 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        return true;
   13446:	2001      	movs	r0, #1
}
   13448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return transmitPS3MotionUserFeedbackMsg();
   1344a:	4620      	mov	r0, r4
}
   1344c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return transmitPS3MotionUserFeedbackMsg();
   13450:	f7ff be48 	b.w	130e4 <JoystickController::transmitPS3MotionUserFeedbackMsg()>
    switch (joystickType_) {
   13454:	2000      	movs	r0, #0
}
   13456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        txbuf_[0] = 0x9;
   13458:	4b6a      	ldr	r3, [pc, #424]	; (13604 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x338>)
        txbuf_[10] = 0xff; // Length of pulse
   1345a:	22ff      	movs	r2, #255	; 0xff
        if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 13, this, __LINE__)) {
   1345c:	f8d4 54a0 	ldr.w	r5, [r4, #1184]	; 0x4a0
        txbuf_[0] = 0x9;
   13460:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        txbuf_[4] = 0x00; // Mode
   13464:	f44f 6370 	mov.w	r3, #3840	; 0xf00
        txbuf_[8] = lValue; // L force
   13468:	f884 14ec 	strb.w	r1, [r4, #1260]	; 0x4ec
        txbuf_[9] = rValue; // R force
   1346c:	f884 64ed 	strb.w	r6, [r4, #1261]	; 0x4ed
        txbuf_[10] = 0xff; // Length of pulse
   13470:	f8a4 24ee 	strh.w	r2, [r4, #1262]	; 0x4ee
        txbuf_[4] = 0x00; // Mode
   13474:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        txbuf_[12] = 0x00; // Repeat
   13478:	f884 04f0 	strb.w	r0, [r4, #1264]	; 0x4f0
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   1347c:	2d00      	cmp	r5, #0
   1347e:	d13b      	bne.n	134f8 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x22c>
        return true;    //
   13480:	2001      	movs	r0, #1
}
   13482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Serial.printf("Set Rumble data (USB): %d, %d\n", lValue, rValue);
   13484:	4613      	mov	r3, r2
   13486:	485c      	ldr	r0, [pc, #368]	; (135f8 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x32c>)
   13488:	460a      	mov	r2, r1
   1348a:	495f      	ldr	r1, [pc, #380]	; (13608 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x33c>)
   1348c:	f002 fb22 	bl	15ad4 <Print::printf(char const*, ...)>
        txbuf_[0] = 0x10;   // Command
   13490:	2210      	movs	r2, #16
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   13492:	4b57      	ldr	r3, [pc, #348]	; (135f0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x324>)
        memset(txbuf_, 0, 18);  // make sure it is cleared out
   13494:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13498:	f8c4 74e4 	str.w	r7, [r4, #1252]	; 0x4e4
        txbuf_[0] = 0x10;   // Command
   1349c:	f884 24e4 	strb.w	r2, [r4, #1252]	; 0x4e4
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   134a0:	781a      	ldrb	r2, [r3, #0]
        memset(txbuf_, 0, 18);  // make sure it is cleared out
   134a2:	f8c4 74e8 	str.w	r7, [r4, #1256]	; 0x4e8
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   134a6:	2a10      	cmp	r2, #16
        memset(txbuf_, 0, 18);  // make sure it is cleared out
   134a8:	f8c4 74ec 	str.w	r7, [r4, #1260]	; 0x4ec
   134ac:	f8c4 74f0 	str.w	r7, [r4, #1264]	; 0x4f0
   134b0:	f8a4 74f4 	strh.w	r7, [r4, #1268]	; 0x4f4
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   134b4:	d82c      	bhi.n	13510 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x244>
        switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   134b6:	1c50      	adds	r0, r2, #1
   134b8:	f000 000f 	and.w	r0, r0, #15
   134bc:	7018      	strb	r0, [r3, #0]
		if ((lValue != 0x0) || (rValue != 0x0)) {
   134be:	ea55 0306 	orrs.w	r3, r5, r6
        txbuf_[1 + 0] = switch_packet_num;
   134c2:	f884 24e5 	strb.w	r2, [r4, #1253]	; 0x4e5
		if ((lValue != 0x0) || (rValue != 0x0)) {
   134c6:	d010      	beq.n	134ea <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
   134c8:	1e2b      	subs	r3, r5, #0
   134ca:	bf18      	it	ne
   134cc:	2301      	movne	r3, #1
			if (lValue != 0 && rValue == 0x00) {
   134ce:	2e00      	cmp	r6, #0
   134d0:	d14e      	bne.n	13570 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2a4>
   134d2:	2b00      	cmp	r3, #0
   134d4:	d04c      	beq.n	13570 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2a4>
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_off[i];
   134d6:	2001      	movs	r0, #1
   134d8:	4a4c      	ldr	r2, [pc, #304]	; (1360c <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x340>)
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   134da:	f246 1360 	movw	r3, #24928	; 0x6160
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_off[i];
   134de:	f884 04e7 	strb.w	r0, [r4, #1255]	; 0x4e7
   134e2:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   134e6:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
		if(driver_) {
   134ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
   134ec:	b198      	cbz	r0, 13516 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x24a>
			driver_->sendPacket(txbuf_, 18);
   134ee:	2212      	movs	r2, #18
   134f0:	f7fe f832 	bl	11558 <USBHIDParser::sendPacket(unsigned char const*, int)>
        return true;
   134f4:	2001      	movs	r0, #1
}
   134f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return queue_Data_Transfer(pipe, buffer, len, driver);
   134f8:	4623      	mov	r3, r4
   134fa:	220d      	movs	r2, #13
   134fc:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13500:	4628      	mov	r0, r5
   13502:	f7fc fe33 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        return true;    //
   13506:	2001      	movs	r0, #1
}
   13508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1350a:	2101      	movs	r1, #1
   1350c:	2200      	movs	r2, #0
   1350e:	e70c      	b.n	1332a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x5e>
   13510:	463a      	mov	r2, r7
   13512:	2001      	movs	r0, #1
   13514:	e7d2      	b.n	134bc <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1f0>
		} else if (txpipe_) {
   13516:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
   1351a:	2800      	cmp	r0, #0
   1351c:	d0b0      	beq.n	13480 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b4>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   1351e:	4623      	mov	r3, r4
   13520:	220c      	movs	r2, #12
   13522:	f7fc fe23 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
			if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 12, this, __LINE__)) {
   13526:	2800      	cmp	r0, #0
   13528:	d1aa      	bne.n	13480 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b4>
				Serial.printf("Switch transfer fail\n");
   1352a:	4939      	ldr	r1, [pc, #228]	; (13610 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x344>)
   1352c:	4832      	ldr	r0, [pc, #200]	; (135f8 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x32c>)
   1352e:	f002 fad1 	bl	15ad4 <Print::printf(char const*, ...)>
        return true;
   13532:	2001      	movs	r0, #1
}
   13534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((lValue != 0x0) || (rValue != 0x0)) {
   13536:	3e00      	subs	r6, #0
   13538:	bf18      	it	ne
   1353a:	2601      	movne	r6, #1
                } else if (rValue != 0 && lValue == 0) {
   1353c:	bb6d      	cbnz	r5, 1359a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2ce>
   1353e:	b366      	cbz	r6, 1359a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2ce>
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   13540:	2288      	movs	r2, #136	; 0x88
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13542:	2340      	movs	r3, #64	; 0x40
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   13544:	2128      	movs	r1, #40	; 0x28
   13546:	f884 24ec 	strb.w	r2, [r4, #1260]	; 0x4ec
   1354a:	2260      	movs	r2, #96	; 0x60
   1354c:	f884 14eb 	strb.w	r1, [r4, #1259]	; 0x4eb
   13550:	2161      	movs	r1, #97	; 0x61
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13552:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
   13556:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
   1355a:	2301      	movs	r3, #1
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   1355c:	f884 24ed 	strb.w	r2, [r4, #1261]	; 0x4ed
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13560:	2200      	movs	r2, #0
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   13562:	f884 14ee 	strb.w	r1, [r4, #1262]	; 0x4ee
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13566:	f884 24e7 	strb.w	r2, [r4, #1255]	; 0x4e7
   1356a:	f884 34e8 	strb.w	r3, [r4, #1256]	; 0x4e8
   1356e:	e708      	b.n	13382 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
		if ((lValue != 0x0) || (rValue != 0x0)) {
   13570:	3e00      	subs	r6, #0
   13572:	bf18      	it	ne
   13574:	2601      	movne	r6, #1
			} else if (rValue != 0 && lValue == 0x00) {
   13576:	bb5d      	cbnz	r5, 135d0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x304>
   13578:	b356      	cbz	r6, 135d0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x304>
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   1357a:	f246 1360 	movw	r3, #24928	; 0x6160
   1357e:	f648 0028 	movw	r0, #34856	; 0x8828
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_off[i];
   13582:	2201      	movs	r2, #1
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   13584:	f8a4 34e8 	strh.w	r3, [r4, #1256]	; 0x4e8
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_off[i];
   13588:	f244 0340 	movw	r3, #16448	; 0x4040
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   1358c:	f8a4 04e6 	strh.w	r0, [r4, #1254]	; 0x4e6
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_off[i];
   13590:	f884 24eb 	strb.w	r2, [r4, #1259]	; 0x4eb
   13594:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
   13598:	e7a7      	b.n	134ea <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
                } else if (rValue != 0 && lValue != 0) {
   1359a:	2b00      	cmp	r3, #0
   1359c:	f43f aef1 	beq.w	13382 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
   135a0:	2e00      	cmp	r6, #0
   135a2:	f43f aeee 	beq.w	13382 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   135a6:	2360      	movs	r3, #96	; 0x60
   135a8:	2128      	movs	r1, #40	; 0x28
   135aa:	2288      	movs	r2, #136	; 0x88
   135ac:	f884 34ed 	strb.w	r3, [r4, #1261]	; 0x4ed
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   135b0:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   135b4:	2361      	movs	r3, #97	; 0x61
   135b6:	f884 14eb 	strb.w	r1, [r4, #1259]	; 0x4eb
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   135ba:	f884 14e7 	strb.w	r1, [r4, #1255]	; 0x4e7
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   135be:	f884 24ec 	strb.w	r2, [r4, #1260]	; 0x4ec
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   135c2:	f884 24e8 	strb.w	r2, [r4, #1256]	; 0x4e8
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   135c6:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   135ca:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
   135ce:	e6d8      	b.n	13382 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
			} else if (rValue != 0 && lValue != 0) {
   135d0:	2b00      	cmp	r3, #0
   135d2:	d08a      	beq.n	134ea <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
   135d4:	2e00      	cmp	r6, #0
   135d6:	d088      	beq.n	134ea <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   135d8:	f648 0028 	movw	r0, #34856	; 0x8828
   135dc:	4a0d      	ldr	r2, [pc, #52]	; (13614 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x348>)
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   135de:	f246 1360 	movw	r3, #24928	; 0x6160
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   135e2:	f8a4 04e6 	strh.w	r0, [r4, #1254]	; 0x4e6
   135e6:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   135ea:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
   135ee:	e77c      	b.n	134ea <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
   135f0:	2000ec28 	.word	0x2000ec28
   135f4:	20003b90 	.word	0x20003b90
   135f8:	20009514 	.word	0x20009514
   135fc:	80200803 	.word	0x80200803
   13600:	c00f0100 	.word	0xc00f0100
   13604:	09000009 	.word	0x09000009
   13608:	20003bac 	.word	0x20003bac
   1360c:	88284040 	.word	0x88284040
   13610:	20003b78 	.word	0x20003b78
   13614:	88286160 	.word	0x88286160

00013618 <JoystickController::joystickDataClear()>:
    joystickEvent = false;
   13618:	2100      	movs	r1, #0
    axis_changed_mask_ = 0;
   1361a:	2200      	movs	r2, #0
   1361c:	2300      	movs	r3, #0
    joystickEvent = false;
   1361e:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    anychange = false;
   13622:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    axis_changed_mask_ = 0;
   13626:	e9c0 2354 	strd	r2, r3, [r0, #336]	; 0x150
    axis_mask_ = 0;
   1362a:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
}
   1362e:	4770      	bx	lr

00013630 <JoystickController::mapNameToJoystickType(unsigned char const*)>:
{
   13630:	b538      	push	{r3, r4, r5, lr}
   13632:	460c      	mov	r4, r1
   13634:	4605      	mov	r5, r0
    if (strncmp((const char *)remoteName, "Wireless Controller", 19) == 0) {
   13636:	2213      	movs	r2, #19
   13638:	4923      	ldr	r1, [pc, #140]	; (136c8 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x98>)
   1363a:	4620      	mov	r0, r4
   1363c:	f008 fae2 	bl	1bc04 <strncmp>
   13640:	b920      	cbnz	r0, 1364c <JoystickController::mapNameToJoystickType(unsigned char const*)+0x1c>
        joystickType_ = PS4;
   13642:	2302      	movs	r3, #2
   13644:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
   13648:	2001      	movs	r0, #1
   1364a:	bd38      	pop	{r3, r4, r5, pc}
    } else if (strncmp((const char *)remoteName, "PLAYSTATION(R)3", 15) == 0) {
   1364c:	220f      	movs	r2, #15
   1364e:	491f      	ldr	r1, [pc, #124]	; (136cc <JoystickController::mapNameToJoystickType(unsigned char const*)+0x9c>)
   13650:	4620      	mov	r0, r4
   13652:	f008 fad7 	bl	1bc04 <strncmp>
   13656:	b920      	cbnz	r0, 13662 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x32>
        joystickType_ = PS3;
   13658:	2301      	movs	r3, #1
}
   1365a:	2001      	movs	r0, #1
        joystickType_ = PS3;
   1365c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
   13660:	bd38      	pop	{r3, r4, r5, pc}
    } else if (strncmp((const char *)remoteName, "Navigation Controller", 21) == 0) {
   13662:	2215      	movs	r2, #21
   13664:	491a      	ldr	r1, [pc, #104]	; (136d0 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xa0>)
   13666:	4620      	mov	r0, r4
   13668:	f008 facc 	bl	1bc04 <strncmp>
   1366c:	2800      	cmp	r0, #0
   1366e:	d0f3      	beq.n	13658 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x28>
    } else if (strncmp((const char *)remoteName, "Motion Controller", 17) == 0) {
   13670:	2211      	movs	r2, #17
   13672:	4918      	ldr	r1, [pc, #96]	; (136d4 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xa4>)
   13674:	4620      	mov	r0, r4
   13676:	f008 fac5 	bl	1bc04 <strncmp>
   1367a:	b918      	cbnz	r0, 13684 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x54>
        joystickType_ = PS3_MOTION;
   1367c:	2305      	movs	r3, #5
   1367e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   13682:	e7e1      	b.n	13648 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
    } else if (strncmp((const char *)remoteName, "Xbox Wireless", 13) == 0) {
   13684:	220d      	movs	r2, #13
   13686:	4914      	ldr	r1, [pc, #80]	; (136d8 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xa8>)
   13688:	4620      	mov	r0, r4
   1368a:	f008 fabb 	bl	1bc04 <strncmp>
   1368e:	b1b0      	cbz	r0, 136be <JoystickController::mapNameToJoystickType(unsigned char const*)+0x8e>
    } else if (strncmp((const char *)remoteName, "Pro Controller", 13) == 0) {
   13690:	220d      	movs	r2, #13
   13692:	4912      	ldr	r1, [pc, #72]	; (136dc <JoystickController::mapNameToJoystickType(unsigned char const*)+0xac>)
   13694:	4620      	mov	r0, r4
   13696:	f008 fab5 	bl	1bc04 <strncmp>
   1369a:	b160      	cbz	r0, 136b6 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x86>
    } else if(strncmp((const char *)remoteName, "Joy-Con (R)", 11) == 0) {
   1369c:	220b      	movs	r2, #11
   1369e:	4910      	ldr	r1, [pc, #64]	; (136e0 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xb0>)
   136a0:	4620      	mov	r0, r4
   136a2:	f008 faaf 	bl	1bc04 <strncmp>
   136a6:	b130      	cbz	r0, 136b6 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x86>
    } else if(strncmp((const char *)remoteName, "Joy-Con (L)", 11) == 0) {
   136a8:	220b      	movs	r2, #11
   136aa:	490e      	ldr	r1, [pc, #56]	; (136e4 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xb4>)
   136ac:	4620      	mov	r0, r4
   136ae:	f008 faa9 	bl	1bc04 <strncmp>
   136b2:	2800      	cmp	r0, #0
   136b4:	d1c8      	bne.n	13648 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
        joystickType_ = SWITCH;
   136b6:	2307      	movs	r3, #7
   136b8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   136bc:	e7c4      	b.n	13648 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
        joystickType_ = XBOXONE;
   136be:	2303      	movs	r3, #3
   136c0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   136c4:	e7c0      	b.n	13648 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
   136c6:	bf00      	nop
   136c8:	20003af0 	.word	0x20003af0
   136cc:	20003b04 	.word	0x20003b04
   136d0:	20003b14 	.word	0x20003b14
   136d4:	20003b2c 	.word	0x20003b2c
   136d8:	20003b40 	.word	0x20003b40
   136dc:	20003b50 	.word	0x20003b50
   136e0:	20003b60 	.word	0x20003b60
   136e4:	20003b6c 	.word	0x20003b6c

000136e8 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)>:
{
   136e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136ea:	4604      	mov	r4, r0
   136ec:	460d      	mov	r5, r1
    USBHDBGSerial.printf("JoystickController::claim_bluetooth - Class %x %s\n", bluetooth_class, remoteName);
   136ee:	4828      	ldr	r0, [pc, #160]	; (13790 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xa8>)
{
   136f0:	461e      	mov	r6, r3
    USBHDBGSerial.printf("JoystickController::claim_bluetooth - Class %x %s\n", bluetooth_class, remoteName);
   136f2:	4928      	ldr	r1, [pc, #160]	; (13794 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xac>)
{
   136f4:	4617      	mov	r7, r2
    USBHDBGSerial.printf("JoystickController::claim_bluetooth - Class %x %s\n", bluetooth_class, remoteName);
   136f6:	f002 f9ed 	bl	15ad4 <Print::printf(char const*, ...)>
    if (btconnect && (btconnection != btconnect)) return CLAIM_NO;
   136fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   136fc:	42ab      	cmp	r3, r5
   136fe:	d002      	beq.n	13706 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1e>
   13700:	b10b      	cbz	r3, 13706 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1e>
   13702:	2000      	movs	r0, #0
}
   13704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (mydevice != NULL) return CLAIM_NO;
   13706:	6960      	ldr	r0, [r4, #20]
   13708:	2800      	cmp	r0, #0
   1370a:	d1fa      	bne.n	13702 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1a>
    if ((bluetooth_class & 0x0f00) == 0x500) {
   1370c:	f407 6370 	and.w	r3, r7, #3840	; 0xf00
   13710:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   13714:	d1f6      	bne.n	13704 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1c>
        bool name_maps_to_joystick_type = (remoteName && mapNameToJoystickType(remoteName));
   13716:	b32e      	cbz	r6, 13764 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x7c>
   13718:	4631      	mov	r1, r6
   1371a:	4620      	mov	r0, r4
   1371c:	f7ff ff88 	bl	13630 <JoystickController::mapNameToJoystickType(unsigned char const*)>
        if ((bluetooth_class & 0x3C) == 0x08) {
   13720:	f007 023c 	and.w	r2, r7, #60	; 0x3c
        bool name_maps_to_joystick_type = (remoteName && mapNameToJoystickType(remoteName));
   13724:	b930      	cbnz	r0, 13734 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x4c>
        if ((bluetooth_class & 0x3C) == 0x08) {
   13726:	2a08      	cmp	r2, #8
   13728:	d102      	bne.n	13730 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x48>
            if (claim_interface) {
   1372a:	9b06      	ldr	r3, [sp, #24]
   1372c:	2b01      	cmp	r3, #1
   1372e:	d01d      	beq.n	1376c <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x84>
        return CLAIM_REPORT; // let them know we may be interested if there is a HID REport Descriptor
   13730:	2001      	movs	r0, #1
}
   13732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((bluetooth_class & 0x3C) == 0x08) {
   13734:	2a08      	cmp	r2, #8
   13736:	d1fb      	bne.n	13730 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x48>
                switch (joystickType_) {
   13738:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1373c:	3b01      	subs	r3, #1
   1373e:	2b06      	cmp	r3, #6
   13740:	d8f3      	bhi.n	1372a <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x42>
   13742:	a201      	add	r2, pc, #4	; (adr r2, 13748 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x60>)
   13744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13748:	00013787 	.word	0x00013787
   1374c:	0001376d 	.word	0x0001376d
   13750:	0001376d 	.word	0x0001376d
   13754:	0001372b 	.word	0x0001372b
   13758:	00013787 	.word	0x00013787
   1375c:	0001372b 	.word	0x0001372b
   13760:	0001376d 	.word	0x0001376d
        if ((bluetooth_class & 0x3C) == 0x08) {
   13764:	f007 023c 	and.w	r2, r7, #60	; 0x3c
   13768:	2a08      	cmp	r2, #8
   1376a:	d1e1      	bne.n	13730 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x48>
                USBHDBGSerial.printf("JoystickController::claim_bluetooth Interface\n");
   1376c:	490a      	ldr	r1, [pc, #40]	; (13798 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xb0>)
   1376e:	4808      	ldr	r0, [pc, #32]	; (13790 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xa8>)
   13770:	f002 f9b0 	bl	15ad4 <Print::printf(char const*, ...)>
                btdevice = (Device_t*)btconnect->btController_; // remember this way
   13774:	68a8      	ldr	r0, [r5, #8]
                btdriver_->useHIDProtocol(true);
   13776:	2101      	movs	r1, #1
                btdriver_ = btconnect->btController_;
   13778:	6360      	str	r0, [r4, #52]	; 0x34
                btdevice = (Device_t*)btconnect->btController_; // remember this way
   1377a:	e9c4 0509 	strd	r0, r5, [r4, #36]	; 0x24
                btdriver_->useHIDProtocol(true);
   1377e:	f7fc fa77 	bl	fc70 <BluetoothController::useHIDProtocol(bool)>
                return CLAIM_INTERFACE;
   13782:	2002      	movs	r0, #2
}
   13784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        special_process_required = SP_PS3_IDS;      // PS3 maybe needs different IDS.
   13786:	2304      	movs	r3, #4
   13788:	f884 3020 	strb.w	r3, [r4, #32]
   1378c:	e7ee      	b.n	1376c <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x84>
   1378e:	bf00      	nop
   13790:	20009514 	.word	0x20009514
   13794:	200039ec 	.word	0x200039ec
   13798:	20003a20 	.word	0x20003a20

0001379c <non-virtual thunk to JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)>:
    virtual hidclaim_t claim_bluetooth(BluetoothConnection *btconnection, uint32_t bluetooth_class, uint8_t *remoteName, int type);
   1379c:	f1a0 0018 	sub.w	r0, r0, #24
   137a0:	f7ff bfa2 	b.w	136e8 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)>

000137a4 <JoystickController::remoteNameComplete(unsigned char const*)>:
{
   137a4:	b510      	push	{r4, lr}
   137a6:	4604      	mov	r4, r0
    if (mapNameToJoystickType(remoteName)) {
   137a8:	f7ff ff42 	bl	13630 <JoystickController::mapNameToJoystickType(unsigned char const*)>
   137ac:	b138      	cbz	r0, 137be <JoystickController::remoteNameComplete(unsigned char const*)+0x1a>
        switch (joystickType_) {
   137ae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   137b2:	2b02      	cmp	r3, #2
   137b4:	d00a      	beq.n	137cc <JoystickController::remoteNameComplete(unsigned char const*)+0x28>
   137b6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   137ba:	2b01      	cmp	r3, #1
   137bc:	d001      	beq.n	137c2 <JoystickController::remoteNameComplete(unsigned char const*)+0x1e>
}
   137be:	2001      	movs	r0, #1
   137c0:	bd10      	pop	{r4, pc}
        case PS3: special_process_required = SP_PS3_IDS; break;
   137c2:	2304      	movs	r3, #4
}
   137c4:	2001      	movs	r0, #1
        case PS3: special_process_required = SP_PS3_IDS; break;
   137c6:	f884 3020 	strb.w	r3, [r4, #32]
}
   137ca:	bd10      	pop	{r4, pc}
        case PS4: special_process_required = SP_NEED_CONNECT; break;
   137cc:	2301      	movs	r3, #1
}
   137ce:	2001      	movs	r0, #1
        case PS4: special_process_required = SP_NEED_CONNECT; break;
   137d0:	f884 3020 	strb.w	r3, [r4, #32]
}
   137d4:	bd10      	pop	{r4, pc}
   137d6:	bf00      	nop

000137d8 <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)>:
   137d8:	b510      	push	{r4, lr}
   137da:	4604      	mov	r4, r0
   137dc:	3818      	subs	r0, #24
   137de:	f7ff ff27 	bl	13630 <JoystickController::mapNameToJoystickType(unsigned char const*)>
   137e2:	b130      	cbz	r0, 137f2 <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)+0x1a>
   137e4:	7d23      	ldrb	r3, [r4, #20]
   137e6:	2b02      	cmp	r3, #2
   137e8:	d009      	beq.n	137fe <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)+0x26>
   137ea:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   137ee:	2b01      	cmp	r3, #1
   137f0:	d001      	beq.n	137f6 <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)+0x1e>
   137f2:	2001      	movs	r0, #1
   137f4:	bd10      	pop	{r4, pc}
   137f6:	2304      	movs	r3, #4
   137f8:	2001      	movs	r0, #1
   137fa:	7223      	strb	r3, [r4, #8]
   137fc:	bd10      	pop	{r4, pc}
   137fe:	2301      	movs	r3, #1
   13800:	2001      	movs	r0, #1
   13802:	7223      	strb	r3, [r4, #8]
   13804:	bd10      	pop	{r4, pc}
   13806:	bf00      	nop

00013808 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>:
    send_Control_packet_active_ = true;
    return driver_->sendControlPacket(0x21, 0x09, 0x0313, 0, sizeof(ps4_pair_msg), txbuf_);
}

//Nintendo Switch functions
void JoystickController::sw_sendCmd(uint8_t cmd, uint8_t *data, uint16_t size, uint32_t timeout) {
   13808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct SWProBTSendConfigData *packet =  (struct SWProBTSendConfigData *)txbuf_ ;
   1380c:	f200 48e4 	addw	r8, r0, #1252	; 0x4e4
void JoystickController::sw_sendCmd(uint8_t cmd, uint8_t *data, uint16_t size, uint32_t timeout) {
   13810:	b083      	sub	sp, #12
   13812:	4604      	mov	r4, r0
   13814:	460f      	mov	r7, r1
   13816:	4691      	mov	r9, r2
	memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   13818:	2100      	movs	r1, #0
   1381a:	2232      	movs	r2, #50	; 0x32
   1381c:	4640      	mov	r0, r8
void JoystickController::sw_sendCmd(uint8_t cmd, uint8_t *data, uint16_t size, uint32_t timeout) {
   1381e:	461e      	mov	r6, r3
   13820:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   13822:	f008 f909 	bl	1ba38 <memset>
	packet->gpnum = switch_packet_num;
	switch_packet_num = (switch_packet_num + 1) & 0x0f;
	// 2-9 rumble data;
	packet->rumbleDataL[0] = 0x00;
	packet->rumbleDataL[1] = 0x01;
	packet->rumbleDataL[2] = 0x40;
   13826:	2340      	movs	r3, #64	; 0x40
	packet->gpnum = switch_packet_num;
   13828:	4a2a      	ldr	r2, [pc, #168]	; (138d4 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xcc>)
	packet->rumbleDataL[2] = 0x40;
   1382a:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
	packet->rumbleDataL[3] = 0x40;
   1382e:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
	packet->rumbleDataR[0] = 0x00;
	packet->rumbleDataR[1] = 0x01;
	packet->rumbleDataR[2] = 0x40;
   13832:	f884 34ed 	strb.w	r3, [r4, #1261]	; 0x4ed
	packet->rumbleDataR[3] = 0x40;
   13836:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
	packet->gpnum = switch_packet_num;
   1383a:	7813      	ldrb	r3, [r2, #0]

	packet->subCommand = cmd; // Report ID
   1383c:	f884 74ef 	strb.w	r7, [r4, #1263]	; 0x4ef
	packet->gpnum = switch_packet_num;
   13840:	f884 34e6 	strb.w	r3, [r4, #1254]	; 0x4e6
	switch_packet_num = (switch_packet_num + 1) & 0x0f;
   13844:	3301      	adds	r3, #1
   13846:	f003 030f 	and.w	r3, r3, #15
   1384a:	7013      	strb	r3, [r2, #0]
	packet->id = 1; 
   1384c:	2301      	movs	r3, #1
   1384e:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
	packet->rumbleDataL[1] = 0x01;
   13852:	f884 34e8 	strb.w	r3, [r4, #1256]	; 0x4e8
	packet->rumbleDataR[1] = 0x01;
   13856:	f884 34ec 	strb.w	r3, [r4, #1260]	; 0x4ec
	packet->rumbleDataL[0] = 0x00;
   1385a:	2300      	movs	r3, #0
   1385c:	f884 34e7 	strb.w	r3, [r4, #1255]	; 0x4e7
	packet->rumbleDataR[0] = 0x00;
   13860:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
	packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   13864:	23a2      	movs	r3, #162	; 0xa2
   13866:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
	for(uint16_t i = 0; i < size; i++) {
   1386a:	b166      	cbz	r6, 13886 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x7e>
   1386c:	1e73      	subs	r3, r6, #1
   1386e:	f109 3cff 	add.w	ip, r9, #4294967295	; 0xffffffff
   13872:	f204 40ef 	addw	r0, r4, #1263	; 0x4ef
   13876:	fa19 f383 	uxtah	r3, r9, r3
		packet->subCommandData[i] = data[i];
   1387a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
	for(uint16_t i = 0; i < size; i++) {
   1387e:	459c      	cmp	ip, r3
		packet->subCommandData[i] = data[i];
   13880:	f800 ef01 	strb.w	lr, [r0, #1]!
	for(uint16_t i = 0; i < size; i++) {
   13884:	d1f9      	bne.n	1387a <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x72>
	}
	if (btdriver_) {
   13886:	6b60      	ldr	r0, [r4, #52]	; 0x34
   13888:	b1a8      	cbz	r0, 138b6 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xae>
        if (timeout != 0) {
   1388a:	b965      	cbnz	r5, 138a6 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x9e>
            btconnect->startTimer(timeout);
        }
        btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   1388c:	f06f 0301 	mvn.w	r3, #1
   13890:	2232      	movs	r2, #50	; 0x32
   13892:	4641      	mov	r1, r8
   13894:	f7fc f99a 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
   13898:	f002 faf6 	bl	15e88 <micros>
   1389c:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    }
    else Serial.printf("\n####### sw_sendCMD(%x %p %u) called with btdriver_ == 0 ", cmd, data, size);
    em_sw_ = 0;
}
   138a0:	b003      	add	sp, #12
   138a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    void parse(void);
    void parse(uint16_t type_and_report_id, const uint8_t *data, uint32_t len);
    BTHIDInput * find_driver(uint32_t topusage);
    BTHIDInput * find_driver(const uint8_t *remoteName, int type);

    void startTimer(uint32_t microseconds) {bt_connection_timer_.start(microseconds);}
   138a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   138a8:	4629      	mov	r1, r5
   138aa:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   138ae:	f7fc fab9 	bl	fe24 <USBDriverTimer::start(unsigned long)>
        btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   138b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   138b4:	e7ea      	b.n	1388c <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x84>
    else Serial.printf("\n####### sw_sendCMD(%x %p %u) called with btdriver_ == 0 ", cmd, data, size);
   138b6:	464b      	mov	r3, r9
   138b8:	463a      	mov	r2, r7
   138ba:	4907      	ldr	r1, [pc, #28]	; (138d8 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xd0>)
   138bc:	9600      	str	r6, [sp, #0]
   138be:	4807      	ldr	r0, [pc, #28]	; (138dc <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xd4>)
   138c0:	f002 f908 	bl	15ad4 <Print::printf(char const*, ...)>
   138c4:	f002 fae0 	bl	15e88 <micros>
   138c8:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
}
   138cc:	b003      	add	sp, #12
   138ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   138d2:	bf00      	nop
   138d4:	2000ec28 	.word	0x2000ec28
   138d8:	200039b0 	.word	0x200039b0
   138dc:	20009514 	.word	0x20009514

000138e0 <JoystickController::connectionComplete()>:
    switch (joystickType_) {
   138e0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    connectedComplete_pending_ = 0;
   138e4:	2200      	movs	r2, #0
    switch (joystickType_) {
   138e6:	3b01      	subs	r3, #1
{
   138e8:	b530      	push	{r4, r5, lr}
   138ea:	4604      	mov	r4, r0
   138ec:	b085      	sub	sp, #20
    connectedComplete_pending_ = 0;
   138ee:	f880 216d 	strb.w	r2, [r0, #365]	; 0x16d
    switch (joystickType_) {
   138f2:	2b06      	cmp	r3, #6
   138f4:	d814      	bhi.n	13920 <JoystickController::connectionComplete()+0x40>
   138f6:	e8df f003 	tbb	[pc, r3]
   138fa:	2b04      	.short	0x2b04
   138fc:	13231313 	.word	0x13231313
   13900:	15          	.byte	0x15
   13901:	00          	.byte	0x00
        packet[0] = 0x53; // HID BT Set_report (0x50) | Report Type (Feature 0x03)
   13902:	4a1b      	ldr	r2, [pc, #108]	; (13970 <JoystickController::connectionComplete()+0x90>)
        packet[4] = 0x00;
   13904:	2300      	movs	r3, #0
        delay(1);
   13906:	2001      	movs	r0, #1
        packet[0] = 0x53; // HID BT Set_report (0x50) | Report Type (Feature 0x03)
   13908:	9202      	str	r2, [sp, #8]
        packet[4] = 0x00;
   1390a:	f8ad 300c 	strh.w	r3, [sp, #12]
        delay(1);
   1390e:	f002 fa67 	bl	15de0 <delay>
        btdriver_->sendL2CapCommand(packet, sizeof(packet), BluetoothController::CONTROL_SCID);
   13912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13916:	2206      	movs	r2, #6
   13918:	a902      	add	r1, sp, #8
   1391a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1391c:	f7fc f956 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
}
   13920:	b005      	add	sp, #20
   13922:	bd30      	pop	{r4, r5, pc}
		sw_sendCmd(0x02, packet_, 1, SW_CMD_TIMEOUT);
   13924:	4913      	ldr	r1, [pc, #76]	; (13974 <JoystickController::connectionComplete()+0x94>)
		packet_[0] = 0x00;
   13926:	2500      	movs	r5, #0
		sw_sendCmd(0x02, packet_, 1, SW_CMD_TIMEOUT);
   13928:	2301      	movs	r3, #1
   1392a:	aa02      	add	r2, sp, #8
   1392c:	9100      	str	r1, [sp, #0]
   1392e:	2102      	movs	r1, #2
		packet_[0] = 0x00;
   13930:	f88d 5008 	strb.w	r5, [sp, #8]
		sw_sendCmd(0x02, packet_, 1, SW_CMD_TIMEOUT);
   13934:	f7ff ff68 	bl	13808 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
        connectedComplete_pending_ = 0;
   13938:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
}
   1393c:	b005      	add	sp, #20
   1393e:	bd30      	pop	{r4, r5, pc}
        setLEDs(0, 0xff, 0);    // Maybe try setting to green?
   13940:	2300      	movs	r3, #0
   13942:	22ff      	movs	r2, #255	; 0xff
   13944:	4619      	mov	r1, r3
}
   13946:	b005      	add	sp, #20
   13948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        setLEDs(0, 0xff, 0);    // Maybe try setting to green?
   1394c:	f7ff bc06 	b.w	1315c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
        packet[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
   13950:	f240 2343 	movw	r3, #579	; 0x243
        delay(1);
   13954:	2001      	movs	r0, #1
        packet[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
   13956:	f8ad 3008 	strh.w	r3, [sp, #8]
        delay(1);
   1395a:	f002 fa41 	bl	15de0 <delay>
        btdriver_->sendL2CapCommand(packet, sizeof(packet), BluetoothController::CONTROL_SCID /*0x40*/);
   1395e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13962:	2202      	movs	r2, #2
   13964:	a902      	add	r1, sp, #8
   13966:	6b60      	ldr	r0, [r4, #52]	; 0x34
   13968:	f7fc f930 	bl	fbcc <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
}
   1396c:	b005      	add	sp, #20
   1396e:	bd30      	pop	{r4, r5, pc}
   13970:	0342f453 	.word	0x0342f453
   13974:	0003d090 	.word	0x0003d090

00013978 <non-virtual thunk to JoystickController::connectionComplete()>:
    virtual void connectionComplete(void);
   13978:	f1a0 0018 	sub.w	r0, r0, #24
   1397c:	f7ff bfb0 	b.w	138e0 <JoystickController::connectionComplete()>

00013980 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>:

void JoystickController::sw_sendCmdUSB(uint8_t cmd, uint32_t timeout) {
   13980:	b510      	push	{r4, lr}
    DBGPrintf("sw_sendCmdUSB: cmd:%x, timeout:%x\n",  cmd, timeout);
	//sub-command
    txbuf_[0] = 0x80;
   13982:	f04f 0c80 	mov.w	ip, #128	; 0x80
void JoystickController::sw_sendCmdUSB(uint8_t cmd, uint32_t timeout) {
   13986:	4604      	mov	r4, r0
	txbuf_[1] = cmd;
    sw_last_cmd_sent_ = cmd; // remember which command we sent
	if(driver_) {
   13988:	6b00      	ldr	r0, [r0, #48]	; 0x30
    txbuf_[0] = 0x80;
   1398a:	f884 c4e4 	strb.w	ip, [r4, #1252]	; 0x4e4
	txbuf_[1] = cmd;
   1398e:	f884 14e5 	strb.w	r1, [r4, #1253]	; 0x4e5
    sw_last_cmd_sent_ = cmd; // remember which command we sent
   13992:	f884 116e 	strb.w	r1, [r4, #366]	; 0x16e
	if(driver_) {
   13996:	b188      	cbz	r0, 139bc <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x3c>
        if (timeout != 0) {
   13998:	b94a      	cbnz	r2, 139ae <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x2e>
            driver_->startTimer(timeout);
        }
		driver_->sendPacket(txbuf_, 2);
   1399a:	2202      	movs	r2, #2
   1399c:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   139a0:	f7fd fdda 	bl	11558 <USBHIDParser::sendPacket(unsigned char const*, int)>
   139a4:	f002 fa70 	bl	15e88 <micros>
   139a8:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
	} else {
		if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 18, this, __LINE__)) {
			println("switch transfer fail");
		}
	}
}
   139ac:	bd10      	pop	{r4, pc}
    void startTimer(uint32_t microseconds) {hidTimer.start(microseconds);}
   139ae:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   139b2:	4611      	mov	r1, r2
   139b4:	f7fc fa36 	bl	fe24 <USBDriverTimer::start(unsigned long)>
		driver_->sendPacket(txbuf_, 2);
   139b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   139ba:	e7ee      	b.n	1399a <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x1a>
		if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 18, this, __LINE__)) {
   139bc:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   139c0:	2800      	cmp	r0, #0
   139c2:	d0f3      	beq.n	139ac <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x2c>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   139c4:	4623      	mov	r3, r4
   139c6:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   139ca:	2212      	movs	r2, #18
}
   139cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return queue_Data_Transfer(pipe, buffer, len, driver);
   139d0:	f7fc bbcc 	b.w	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>

000139d4 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)>:
{
   139d4:	b570      	push	{r4, r5, r6, lr}
    if (topusage != 0x10004 && topusage != 0x10005 && topusage != 0x10008) return CLAIM_NO;
   139d6:	4c40      	ldr	r4, [pc, #256]	; (13ad8 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x104>)
{
   139d8:	b082      	sub	sp, #8
   139da:	4605      	mov	r5, r0
    if (topusage != 0x10004 && topusage != 0x10005 && topusage != 0x10008) return CLAIM_NO;
   139dc:	441c      	add	r4, r3
   139de:	2c01      	cmp	r4, #1
   139e0:	d905      	bls.n	139ee <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x1a>
   139e2:	483e      	ldr	r0, [pc, #248]	; (13adc <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x108>)
   139e4:	4283      	cmp	r3, r0
   139e6:	d002      	beq.n	139ee <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x1a>
   139e8:	2000      	movs	r0, #0
}
   139ea:	b002      	add	sp, #8
   139ec:	bd70      	pop	{r4, r5, r6, pc}
    if (mydevice != NULL && dev != mydevice) return CLAIM_NO;
   139ee:	696b      	ldr	r3, [r5, #20]
   139f0:	4293      	cmp	r3, r2
   139f2:	d001      	beq.n	139f8 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x24>
   139f4:	2b00      	cmp	r3, #0
   139f6:	d1f7      	bne.n	139e8 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x14>
    if (device != nullptr) return CLAIM_NO;
   139f8:	68ac      	ldr	r4, [r5, #8]
   139fa:	2c00      	cmp	r4, #0
   139fc:	d1f4      	bne.n	139e8 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x14>
    collections_claimed++;
   139fe:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
    anychange = true; // always report values on first read
   13a02:	2601      	movs	r6, #1
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13a04:	4608      	mov	r0, r1
    mydevice = dev;
   13a06:	616a      	str	r2, [r5, #20]
    collections_claimed++;
   13a08:	3301      	adds	r3, #1
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13a0a:	4622      	mov	r2, r4
    driver_ = driver;   // remember the driver.
   13a0c:	6329      	str	r1, [r5, #48]	; 0x30
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13a0e:	f205 41e4 	addw	r1, r5, #1252	; 0x4e4
   13a12:	e9cd 4400 	strd	r4, r4, [sp]
    collections_claimed++;
   13a16:	f885 3174 	strb.w	r3, [r5, #372]	; 0x174
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13a1a:	2340      	movs	r3, #64	; 0x40
    anychange = true; // always report values on first read
   13a1c:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13a20:	f7fd fe00 	bl	11624 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)>
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13a24:	696b      	ldr	r3, [r5, #20]
    connected_ = true;      // remember that hardware is actually connected...
   13a26:	f885 616c 	strb.w	r6, [r5, #364]	; 0x16c
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13a2a:	4622      	mov	r2, r4
   13a2c:	4e2c      	ldr	r6, [pc, #176]	; (13ae0 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x10c>)
   13a2e:	8bd8      	ldrh	r0, [r3, #30]
   13a30:	8c1c      	ldrh	r4, [r3, #32]
    for (uint8_t i = 0; i < (sizeof(pid_vid_mapping) / sizeof(pid_vid_mapping[0])); i++) {
   13a32:	4633      	mov	r3, r6
   13a34:	e003      	b.n	13a3e <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x6a>
   13a36:	3201      	adds	r2, #1
   13a38:	3306      	adds	r3, #6
   13a3a:	2a0f      	cmp	r2, #15
   13a3c:	d015      	beq.n	13a6a <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x96>
        if ((idVendor == pid_vid_mapping[i].idVendor) && (idProduct == pid_vid_mapping[i].idProduct)) {
   13a3e:	8819      	ldrh	r1, [r3, #0]
   13a40:	4281      	cmp	r1, r0
   13a42:	d1f8      	bne.n	13a36 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x62>
   13a44:	8859      	ldrh	r1, [r3, #2]
   13a46:	42a1      	cmp	r1, r4
   13a48:	d1f5      	bne.n	13a36 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x62>
            return pid_vid_mapping[i].joyType;
   13a4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13a4e:	eb06 0642 	add.w	r6, r6, r2, lsl #1
   13a52:	7932      	ldrb	r2, [r6, #4]
    switch (joystickType_) {
   13a54:	1e53      	subs	r3, r2, #1
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13a56:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
    switch (joystickType_) {
   13a5a:	2b06      	cmp	r3, #6
   13a5c:	d808      	bhi.n	13a70 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x9c>
   13a5e:	e8df f003 	tbb	[pc, r3]
   13a62:	311c      	.short	0x311c
   13a64:	071c0707 	.word	0x071c0707
   13a68:	25          	.byte	0x25
   13a69:	00          	.byte	0x00
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13a6a:	2300      	movs	r3, #0
   13a6c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    default:
   13a70:	2409      	movs	r4, #9
   13a72:	2121      	movs	r1, #33	; 0x21
   13a74:	2005      	movs	r0, #5
   13a76:	f240 32ff 	movw	r2, #1023	; 0x3ff
   13a7a:	2300      	movs	r3, #0
        additional_axis_usage_start_ = 0x100;
   13a7c:	f8a5 1162 	strh.w	r1, [r5, #354]	; 0x162
        additional_axis_usage_count_ = 39;
   13a80:	f8a5 0164 	strh.w	r0, [r5, #356]	; 0x164
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   13a84:	4917      	ldr	r1, [pc, #92]	; (13ae4 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x110>)
        additional_axis_usage_page_ = 0x1;
   13a86:	f8a5 4160 	strh.w	r4, [r5, #352]	; 0x160
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   13a8a:	4817      	ldr	r0, [pc, #92]	; (13ae8 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x114>)
        axis_change_notify_mask_ = (uint64_t) - 1;  // Start off assume all bits
   13a8c:	e9c5 2356 	strd	r2, r3, [r5, #344]	; 0x158
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   13a90:	f002 f820 	bl	15ad4 <Print::printf(char const*, ...)>
   13a94:	2001      	movs	r0, #1
}
   13a96:	b002      	add	sp, #8
   13a98:	bd70      	pop	{r4, r5, r6, pc}
    switch (joystickType_) {
   13a9a:	2401      	movs	r4, #1
   13a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
   13aa0:	2027      	movs	r0, #39	; 0x27
   13aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13aaa:	e7e7      	b.n	13a7c <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0xa8>
            sw_sendCmdUSB(0x02, SW_CMD_TIMEOUT);
   13aac:	4a0f      	ldr	r2, [pc, #60]	; (13aec <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x118>)
   13aae:	2102      	movs	r1, #2
   13ab0:	4628      	mov	r0, r5
   13ab2:	f7ff ff65 	bl	13980 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
            initialPass_ = true;
   13ab6:	2201      	movs	r2, #1
            connectedComplete_pending_ = 0;
   13ab8:	2300      	movs	r3, #0
            initialPass_ = true;
   13aba:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
            connectedComplete_pending_ = 0;
   13abe:	f885 316d 	strb.w	r3, [r5, #365]	; 0x16d
   13ac2:	e7d5      	b.n	13a70 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x9c>
    switch (joystickType_) {
   13ac4:	f44f 447f 	mov.w	r4, #65280	; 0xff00
   13ac8:	2121      	movs	r1, #33	; 0x21
   13aca:	2036      	movs	r0, #54	; 0x36
   13acc:	f46f 6240 	mvn.w	r2, #3072	; 0xc00
   13ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ad4:	e7d2      	b.n	13a7c <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0xa8>
   13ad6:	bf00      	nop
   13ad8:	fffefffc 	.word	0xfffefffc
   13adc:	00010008 	.word	0x00010008
   13ae0:	20009900 	.word	0x20009900
   13ae4:	20003a9c 	.word	0x20003a9c
   13ae8:	20009514 	.word	0x20009514
   13aec:	0003d090 	.word	0x0003d090

00013af0 <non-virtual thunk to JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)>:
    virtual hidclaim_t claim_collection(USBHIDParser *driver, Device_t *dev, uint32_t topusage);
   13af0:	f1a0 000c 	sub.w	r0, r0, #12
   13af4:	f7ff bf6e 	b.w	139d4 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)>

00013af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>:

void JoystickController::sw_sendSubCmdUSB(uint8_t sub_cmd, uint8_t *data, uint8_t size, uint32_t timeout) {
   13af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        DBGPrintf("sw_sendSubCmdUSB(%x, %p, %u): ",  sub_cmd, size);
        for (uint8_t i = 0; i < size; i++) DBGPrintf(" %02x", data[i]);
        DBGPrintf("\n");
        memset(txbuf_, 0, 32);  // make sure it is cleared out
   13afc:	f200 46e4 	addw	r6, r0, #1252	; 0x4e4
void JoystickController::sw_sendSubCmdUSB(uint8_t sub_cmd, uint8_t *data, uint8_t size, uint32_t timeout) {
   13b00:	4605      	mov	r5, r0
   13b02:	4689      	mov	r9, r1
   13b04:	4614      	mov	r4, r2
        memset(txbuf_, 0, 32);  // make sure it is cleared out
   13b06:	2100      	movs	r1, #0
   13b08:	2220      	movs	r2, #32
   13b0a:	4630      	mov	r0, r6
void JoystickController::sw_sendSubCmdUSB(uint8_t sub_cmd, uint8_t *data, uint8_t size, uint32_t timeout) {
   13b0c:	4698      	mov	r8, r3
   13b0e:	9f08      	ldr	r7, [sp, #32]
        memset(txbuf_, 0, 32);  // make sure it is cleared out
   13b10:	f007 ff92 	bl	1ba38 <memset>

		txbuf_[0] = 0x01;
        // Now add in subcommand data:
        // Probably do this better soon
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13b14:	4929      	ldr	r1, [pc, #164]	; (13bbc <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0xc4>)
		txbuf_[0] = 0x01;
   13b16:	2301      	movs	r3, #1
        txbuf_[ 6] = 0x00;
        txbuf_[ 7] = 0x01;
        txbuf_[ 8] = 0x40;
        txbuf_[ 9] = 0x40;
		
		txbuf_[ 10] = sub_cmd;
   13b18:	f885 94ee 	strb.w	r9, [r5, #1262]	; 0x4ee
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13b1c:	780a      	ldrb	r2, [r1, #0]
		txbuf_[0] = 0x01;
   13b1e:	f885 34e4 	strb.w	r3, [r5, #1252]	; 0x4e4
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13b22:	441a      	add	r2, r3
        txbuf_[ 3] = 0x01;
   13b24:	f885 34e7 	strb.w	r3, [r5, #1255]	; 0x4e7
        txbuf_[ 7] = 0x01;
   13b28:	f885 34eb 	strb.w	r3, [r5, #1259]	; 0x4eb
        txbuf_[ 4] = 0x40;
   13b2c:	f244 0340 	movw	r3, #16448	; 0x4040
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13b30:	f002 020f 	and.w	r2, r2, #15
        txbuf_[ 4] = 0x40;
   13b34:	f8a5 34e8 	strh.w	r3, [r5, #1256]	; 0x4e8
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13b38:	700a      	strb	r2, [r1, #0]
   13b3a:	f885 24e5 	strb.w	r2, [r5, #1253]	; 0x4e5
        txbuf_[ 8] = 0x40;
   13b3e:	f8a5 34ec 	strh.w	r3, [r5, #1260]	; 0x4ec
		
		//sub-command
		for(uint16_t i = 0; i < size; i++) {
   13b42:	f1b8 0f00 	cmp.w	r8, #0
   13b46:	d00d      	beq.n	13b64 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x6c>
   13b48:	fa1f f288 	uxth.w	r2, r8
   13b4c:	f205 41ee 	addw	r1, r5, #1262	; 0x4ee
   13b50:	1e53      	subs	r3, r2, #1
   13b52:	1e62      	subs	r2, r4, #1
   13b54:	fa14 f383 	uxtah	r3, r4, r3
			txbuf_[i + 11] = data[i];
   13b58:	f812 4f01 	ldrb.w	r4, [r2, #1]!
		for(uint16_t i = 0; i < size; i++) {
   13b5c:	429a      	cmp	r2, r3
			txbuf_[i + 11] = data[i];
   13b5e:	f801 4f01 	strb.w	r4, [r1, #1]!
		for(uint16_t i = 0; i < size; i++) {
   13b62:	d1f9      	bne.n	13b58 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x60>
		}

		println("USB send sub cmd: driver? ", (uint32_t)driver_, HEX);
   13b64:	6b28      	ldr	r0, [r5, #48]	; 0x30
		print_hexbytes((uint8_t*)txbuf_, 32);
		
		if(driver_) {
   13b66:	b168      	cbz	r0, 13b84 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x8c>
			driver_->sendPacket(txbuf_, 32);
   13b68:	2220      	movs	r2, #32
   13b6a:	4631      	mov	r1, r6
   13b6c:	f7fd fcf4 	bl	11558 <USBHIDParser::sendPacket(unsigned char const*, int)>
            if (timeout != 0) {
   13b70:	b9c7      	cbnz	r7, 13ba4 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0xac>
   13b72:	f002 f989 	bl	15e88 <micros>
   13b76:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
			if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 32, this, __LINE__)) {
				println("switch transfer fail");
			}
		}
        em_sw_ = 0;
		if (!timeout) delay(100);
   13b7a:	2064      	movs	r0, #100	; 0x64
}
   13b7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if (!timeout) delay(100);
   13b80:	f002 b92e 	b.w	15de0 <delay>
		} else if (txpipe_) {
   13b84:	f8d5 04a0 	ldr.w	r0, [r5, #1184]	; 0x4a0
   13b88:	b120      	cbz	r0, 13b94 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x9c>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   13b8a:	462b      	mov	r3, r5
   13b8c:	4631      	mov	r1, r6
   13b8e:	2220      	movs	r2, #32
   13b90:	f7fc faec 	bl	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
   13b94:	f002 f978 	bl	15e88 <micros>
   13b98:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
		if (!timeout) delay(100);
   13b9c:	2f00      	cmp	r7, #0
   13b9e:	d0ec      	beq.n	13b7a <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x82>
}
   13ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void startTimer(uint32_t microseconds) {hidTimer.start(microseconds);}
   13ba4:	6b28      	ldr	r0, [r5, #48]	; 0x30
   13ba6:	4639      	mov	r1, r7
   13ba8:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   13bac:	f7fc f93a 	bl	fe24 <USBDriverTimer::start(unsigned long)>
   13bb0:	f002 f96a 	bl	15e88 <micros>
   13bb4:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
   13bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13bbc:	2000ec28 	.word	0x2000ec28

00013bc0 <JoystickController::sw_parseAckMsg(unsigned char const*)>:
	int16_t data[6];
	uint8_t offset = 20;
	uint8_t icount = 0;
	//uint8_t packet_[8];
	
	if((buf_[14] == 0x10 && buf_[15] == 0x20 && buf_[16] == 0x60)) {
   13bc0:	7b8b      	ldrb	r3, [r1, #14]
   13bc2:	2b10      	cmp	r3, #16
   13bc4:	d000      	beq.n	13bc8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x8>
   13bc6:	4770      	bx	lr
{
   13bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((buf_[14] == 0x10 && buf_[15] == 0x20 && buf_[16] == 0x60)) {
   13bcc:	7bcb      	ldrb	r3, [r1, #15]
   13bce:	2b20      	cmp	r3, #32
   13bd0:	f000 809a 	beq.w	13d08 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x148>
		}
		for(uint8_t i = 0; i < 3; i++) {
			DBGPrintf("\t %d, %d, %d, %d\n", SWIMUCal.acc_offset[i], SWIMUCal.acc_sensitivity[i],
				SWIMUCal.gyro_offset[i], SWIMUCal.gyro_sensitivity[i]);
		} 
	} else if((buf_[14] == 0x10 && buf_[15] == 0x80 && buf_[16] == 0x60)) {
   13bd4:	2b80      	cmp	r3, #128	; 0x80
   13bd6:	d011      	beq.n	13bfc <JoystickController::sw_parseAckMsg(unsigned char const*)+0x3c>
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[i+offset] | (buf_[i+offset+1] << 8));
		}
		for(uint8_t i = 0; i < 3; i++) {
			DBGPrintf("\t %d\n", SWIMUCal.acc_offset[i]);
		}
	} else if((buf_[14] == 0x10 && buf_[15] == 0x3D && buf_[16] == 0x60)){		//left stick
   13bd8:	2b3d      	cmp	r3, #61	; 0x3d
   13bda:	d020      	beq.n	13c1e <JoystickController::sw_parseAckMsg(unsigned char const*)+0x5e>
		
		DBGPrintf("\nRight Stick Calibrataion\n");
		DBGPrintf("center: %d, %d\n", SWStickCal.rstick_center_x, SWStickCal.rstick_center_y );
		DBGPrintf("min/max x: %d, %d\n", SWStickCal.rstick_x_min, SWStickCal.rstick_x_max);
		DBGPrintf("min/max y: %d, %d\n", SWStickCal.rstick_y_min, SWStickCal.rstick_y_max);
	}  else if((buf_[14] == 0x10 && buf_[15] == 0x86 && buf_[16] == 0x60)){			//left stick deadzone_left
   13bdc:	2b86      	cmp	r3, #134	; 0x86
   13bde:	f040 80bf 	bne.w	13d60 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1a0>
   13be2:	7c0b      	ldrb	r3, [r1, #16]
   13be4:	2b60      	cmp	r3, #96	; 0x60
   13be6:	d107      	bne.n	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
		offset = 20;
		SWStickCal.deadzone_left = (((buf_[4 + offset] << 8) & 0xF00) | buf_[3 + offset]);
   13be8:	7e0b      	ldrb	r3, [r1, #24]
   13bea:	7dca      	ldrb	r2, [r1, #23]
   13bec:	021b      	lsls	r3, r3, #8
   13bee:	495e      	ldr	r1, [pc, #376]	; (13d68 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1a8>)
   13bf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   13bf4:	4313      	orrs	r3, r2
   13bf6:	830b      	strh	r3, [r1, #24]
		DBGPrintf("deadzone: %d\n", SWStickCal.deadzone_right);
	} else if((buf_[14] == 0x10 && buf_[15] == 0x10 && buf_[16] == 0x80)){
		DBGPrintf("\nUser Calibration Rcvd!\n");
	}
	
}
   13bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if((buf_[14] == 0x10 && buf_[15] == 0x80 && buf_[16] == 0x60)) {
   13bfc:	7c0b      	ldrb	r3, [r1, #16]
   13bfe:	2b60      	cmp	r3, #96	; 0x60
   13c00:	d1fa      	bne.n	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
   13c02:	f101 0314 	add.w	r3, r1, #20
   13c06:	4859      	ldr	r0, [pc, #356]	; (13d6c <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1ac>)
   13c08:	3117      	adds	r1, #23
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[i+offset] | (buf_[i+offset+1] << 8));
   13c0a:	781a      	ldrb	r2, [r3, #0]
   13c0c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   13c10:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
		for(uint8_t i = 0; i < 3; i++) {
   13c14:	4299      	cmp	r1, r3
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[i+offset] | (buf_[i+offset+1] << 8));
   13c16:	f820 2b02 	strh.w	r2, [r0], #2
		for(uint8_t i = 0; i < 3; i++) {
   13c1a:	d1f6      	bne.n	13c0a <JoystickController::sw_parseAckMsg(unsigned char const*)+0x4a>
   13c1c:	e7ec      	b.n	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
	} else if((buf_[14] == 0x10 && buf_[15] == 0x3D && buf_[16] == 0x60)){		//left stick
   13c1e:	7c0b      	ldrb	r3, [r1, #16]
   13c20:	2b60      	cmp	r3, #96	; 0x60
   13c22:	d1e9      	bne.n	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c24:	7e0c      	ldrb	r4, [r1, #24]
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c26:	7d4b      	ldrb	r3, [r1, #21]
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c28:	ea4f 2b04 	mov.w	fp, r4, lsl #8
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13c2c:	f891 c01b 	ldrb.w	ip, [r1, #27]
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c30:	f891 9017 	ldrb.w	r9, [r1, #23]
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13c34:	ea4f 1e13 	mov.w	lr, r3, lsr #4
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c38:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13c3c:	7d88      	ldrb	r0, [r1, #22]
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13c3e:	ea4f 270c 	mov.w	r7, ip, lsl #8
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c42:	f891 8014 	ldrb.w	r8, [r1, #20]
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c46:	ea49 090b 	orr.w	r9, r9, fp
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13c4a:	0924      	lsrs	r4, r4, #4
   13c4c:	f891 b019 	ldrb.w	fp, [r1, #25]
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13c50:	ea4e 1e00 	orr.w	lr, lr, r0, lsl #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13c54:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c58:	7f88      	ldrb	r0, [r1, #30]
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13c5a:	ea44 140b 	orr.w	r4, r4, fp, lsl #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13c5e:	f891 b01a 	ldrb.w	fp, [r1, #26]
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c62:	021a      	lsls	r2, r3, #8
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c64:	0206      	lsls	r6, r0, #8
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13c66:	ea4b 0707 	orr.w	r7, fp, r7
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13c6a:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   13c6e:	f891 b01c 	ldrb.w	fp, [r1, #28]
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c72:	f402 6370 	and.w	r3, r2, #3840	; 0xf00
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c76:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c7a:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13c7e:	ea4c 1c0b 	orr.w	ip, ip, fp, lsl #4
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c82:	f891 b01d 	ldrb.w	fp, [r1, #29]
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13c86:	0900      	lsrs	r0, r0, #4
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c88:	0215      	lsls	r5, r2, #8
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c8a:	ea48 0803 	orr.w	r8, r8, r3
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13c8e:	ea4b 0606 	orr.w	r6, fp, r6
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13c92:	f891 b01f 	ldrb.w	fp, [r1, #31]
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13c96:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13c9a:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13c9e:	ea40 100b 	orr.w	r0, r0, fp, lsl #4
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13ca2:	f891 b020 	ldrb.w	fp, [r1, #32]
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13ca6:	ea4f 2a03 	mov.w	sl, r3, lsl #8
		SWStickCal.lstick_x_min = SWStickCal.lstick_center_x - data[0];
   13caa:	eba9 0808 	sub.w	r8, r9, r8
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13cae:	ea4b 0505 	orr.w	r5, fp, r5
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13cb2:	0912      	lsrs	r2, r2, #4
   13cb4:	f891 b022 	ldrb.w	fp, [r1, #34]	; 0x22
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13cb8:	091b      	lsrs	r3, r3, #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13cba:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
		SWStickCal.lstick_y_min = SWStickCal.lstick_center_y - data[1];
   13cbe:	eba4 0e0e 	sub.w	lr, r4, lr
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13cc2:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13cc6:	f891 b023 	ldrb.w	fp, [r1, #35]	; 0x23
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13cca:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
		SWStickCal.lstick_x_max = SWStickCal.lstick_center_x + data[4];
   13cce:	444f      	add	r7, r9
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13cd0:	ea4b 0a0a 	orr.w	sl, fp, sl
		SWStickCal.lstick_y_max = SWStickCal.lstick_center_y + data[5];
   13cd4:	44a4      	add	ip, r4
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13cd6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
		SWStickCal.rstick_x_min = SWStickCal.rstick_center_x - data[2];
   13cda:	1b75      	subs	r5, r6, r5
		SWStickCal.rstick_y_min = SWStickCal.rstick_center_y - data[3];
   13cdc:	1a82      	subs	r2, r0, r2
		SWStickCal.rstick_x_max = SWStickCal.rstick_center_x + data[4];
   13cde:	44b2      	add	sl, r6
		SWStickCal.rstick_y_max = SWStickCal.rstick_center_y + data[5];
   13ce0:	18c1      	adds	r1, r0, r3
		SWStickCal.lstick_center_x = data[2];
   13ce2:	4b21      	ldr	r3, [pc, #132]	; (13d68 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1a8>)
   13ce4:	f8a3 900c 	strh.w	r9, [r3, #12]
		SWStickCal.lstick_center_y = data[3];
   13ce8:	81dc      	strh	r4, [r3, #14]
		SWStickCal.lstick_x_min = SWStickCal.lstick_center_x - data[0];
   13cea:	f8a3 8010 	strh.w	r8, [r3, #16]
		SWStickCal.lstick_x_max = SWStickCal.lstick_center_x + data[4];
   13cee:	825f      	strh	r7, [r3, #18]
		SWStickCal.lstick_y_min = SWStickCal.lstick_center_y - data[1];
   13cf0:	f8a3 e014 	strh.w	lr, [r3, #20]
		SWStickCal.lstick_y_max = SWStickCal.lstick_center_y + data[5];
   13cf4:	f8a3 c016 	strh.w	ip, [r3, #22]
		SWStickCal.rstick_center_x = data[0];
   13cf8:	801e      	strh	r6, [r3, #0]
		SWStickCal.rstick_center_y = data[1];
   13cfa:	8058      	strh	r0, [r3, #2]
		SWStickCal.rstick_x_min = SWStickCal.rstick_center_x - data[2];
   13cfc:	809d      	strh	r5, [r3, #4]
		SWStickCal.rstick_x_max = SWStickCal.rstick_center_x + data[4];
   13cfe:	f8a3 a006 	strh.w	sl, [r3, #6]
		SWStickCal.rstick_y_min = SWStickCal.rstick_center_y - data[3];
   13d02:	811a      	strh	r2, [r3, #8]
		SWStickCal.rstick_y_max = SWStickCal.rstick_center_y + data[5];
   13d04:	8159      	strh	r1, [r3, #10]
   13d06:	e777      	b.n	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
	if((buf_[14] == 0x10 && buf_[15] == 0x20 && buf_[16] == 0x60)) {
   13d08:	7c0b      	ldrb	r3, [r1, #16]
   13d0a:	2b60      	cmp	r3, #96	; 0x60
   13d0c:	f47f af74 	bne.w	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
   13d10:	2000      	movs	r0, #0
   13d12:	4a16      	ldr	r2, [pc, #88]	; (13d6c <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1ac>)
	uint8_t icount = 0;
   13d14:	4603      	mov	r3, r0
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[icount+offset] | (buf_[icount+offset+1] << 8));
   13d16:	440b      	add	r3, r1
   13d18:	7d5c      	ldrb	r4, [r3, #21]
   13d1a:	f893 c014 	ldrb.w	ip, [r3, #20]
   13d1e:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
   13d22:	f822 cb02 	strh.w	ip, [r2], #2
			SWIMUCal.acc_sensitivity[i] = (int16_t)(buf_[icount+offset+6] | (buf_[icount+offset+1+6] << 8));
   13d26:	7edc      	ldrb	r4, [r3, #27]
   13d28:	f893 c01a 	ldrb.w	ip, [r3, #26]
   13d2c:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
   13d30:	f8a2 c004 	strh.w	ip, [r2, #4]
			SWIMUCal.gyro_offset[i] = (int16_t)(buf_[icount+offset+12] | (buf_[icount+offset+1+12] << 8));
   13d34:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   13d38:	f893 c020 	ldrb.w	ip, [r3, #32]
   13d3c:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
   13d40:	f8a2 c00a 	strh.w	ip, [r2, #10]
			SWIMUCal.gyro_sensitivity[i] = (int16_t)(buf_[icount+offset+18] | (buf_[icount+offset+1+18] << 8));
   13d44:	f893 4027 	ldrb.w	r4, [r3, #39]	; 0x27
   13d48:	f893 c026 	ldrb.w	ip, [r3, #38]	; 0x26
   13d4c:	4603      	mov	r3, r0
   13d4e:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
		for(uint8_t i = 0; i < 3; i++) {
   13d52:	1c84      	adds	r4, r0, #2
   13d54:	b2e0      	uxtb	r0, r4
			SWIMUCal.gyro_sensitivity[i] = (int16_t)(buf_[icount+offset+18] | (buf_[icount+offset+1+18] << 8));
   13d56:	f8a2 c010 	strh.w	ip, [r2, #16]
		for(uint8_t i = 0; i < 3; i++) {
   13d5a:	2806      	cmp	r0, #6
   13d5c:	d1db      	bne.n	13d16 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x156>
   13d5e:	e74b      	b.n	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
	}   else if((buf_[14] == 0x10 && buf_[15] == 0x98 && buf_[16] == 0x60)){			//left stick deadzone_left
   13d60:	2b98      	cmp	r3, #152	; 0x98
   13d62:	f43f af3e 	beq.w	13be2 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x22>
   13d66:	e747      	b.n	13bf8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
   13d68:	2000d6f4 	.word	0x2000d6f4
   13d6c:	2000d6dc 	.word	0x2000d6dc

00013d70 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>:
{
   13d70:	b570      	push	{r4, r5, r6, lr}
   13d72:	4604      	mov	r4, r0
   13d74:	b084      	sub	sp, #16
    if (buffer) {
   13d76:	460d      	mov	r5, r1
   13d78:	b301      	cbz	r1, 13dbc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x4c>
        if ((buffer[0] != 0x81) && (buffer[0] != 0x21))
   13d7a:	780b      	ldrb	r3, [r1, #0]
   13d7c:	2b81      	cmp	r3, #129	; 0x81
   13d7e:	d004      	beq.n	13d8a <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x1a>
   13d80:	2b21      	cmp	r3, #33	; 0x21
   13d82:	d002      	beq.n	13d8a <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x1a>
            return false; // was not an event message
   13d84:	2000      	movs	r0, #0
}
   13d86:	b004      	add	sp, #16
   13d88:	bd70      	pop	{r4, r5, r6, pc}
    void stopTimer() {hidTimer.stop();}
   13d8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   13d8c:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   13d90:	f7fc f8a6 	bl	fee0 <USBDriverTimer::stop()>
        if (ack_rpt == 0x81) {
   13d94:	782b      	ldrb	r3, [r5, #0]
   13d96:	2b81      	cmp	r3, #129	; 0x81
   13d98:	d11d      	bne.n	13dd6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x66>
            if (!initialPass_) return true; // don't need to process
   13d9a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13d9e:	2b00      	cmp	r3, #0
   13da0:	d03d      	beq.n	13e1e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
            if (sw_last_cmd_sent_ == ack_rpt) { 
   13da2:	f894 316e 	ldrb.w	r3, [r4, #366]	; 0x16e
   13da6:	2b81      	cmp	r3, #129	; 0x81
   13da8:	d01c      	beq.n	13de4 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x74>
                if (sw_last_cmd_repeat_count) {
   13daa:	f894 316f 	ldrb.w	r3, [r4, #367]	; 0x16f
   13dae:	b9cb      	cbnz	r3, 13de4 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x74>
                    sw_last_cmd_repeat_count++;
   13db0:	2201      	movs	r2, #1
                connectedComplete_pending_++;
   13db2:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
                    sw_last_cmd_repeat_count++;
   13db6:	f884 216f 	strb.w	r2, [r4, #367]	; 0x16f
   13dba:	e01c      	b.n	13df6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x86>
    } else if (timer_event) {
   13dbc:	b32b      	cbz	r3, 13e0a <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x9a>
        if (!initialPass_) return true; // don't need to process
   13dbe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   13dc2:	b363      	cbz	r3, 13e1e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
        connectedComplete_pending_++; 
   13dc4:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
        sw_last_cmd_repeat_count = 0;
   13dc8:	f884 116f 	strb.w	r1, [r4, #367]	; 0x16f
        connectedComplete_pending_++; 
   13dcc:	3301      	adds	r3, #1
   13dce:	b2db      	uxtb	r3, r3
   13dd0:	f880 316d 	strb.w	r3, [r0, #365]	; 0x16d
   13dd4:	e00f      	b.n	13df6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x86>
			sw_parseAckMsg(buffer);
   13dd6:	4629      	mov	r1, r5
   13dd8:	4620      	mov	r0, r4
   13dda:	f7ff fef1 	bl	13bc0 <JoystickController::sw_parseAckMsg(unsigned char const*)>
            if (!initialPass_) return true; // don't need to process
   13dde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13de2:	b1e3      	cbz	r3, 13e1e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
            connectedComplete_pending_++;
   13de4:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
            sw_last_cmd_repeat_count = 0;
   13de8:	2200      	movs	r2, #0
            connectedComplete_pending_++;
   13dea:	3301      	adds	r3, #1
            sw_last_cmd_repeat_count = 0;
   13dec:	f884 216f 	strb.w	r2, [r4, #367]	; 0x16f
            connectedComplete_pending_++;
   13df0:	b2db      	uxtb	r3, r3
   13df2:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
    switch(connectedComplete_pending_) {
   13df6:	2b0a      	cmp	r3, #10
   13df8:	d811      	bhi.n	13e1e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
   13dfa:	e8df f003 	tbb	[pc, r3]
   13dfe:	6067      	.short	0x6067
   13e00:	3545565b 	.word	0x3545565b
   13e04:	091b2809 	.word	0x091b2809
   13e08:	13          	.byte	0x13
   13e09:	00          	.byte	0x00
        connectedComplete_pending_++; 
   13e0a:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
   13e0e:	e7f2      	b.n	13df6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x86>
            sw_sendCmdUSB(0x04, SW_CMD_TIMEOUT);
   13e10:	4620      	mov	r0, r4
   13e12:	4a32      	ldr	r2, [pc, #200]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13e14:	2104      	movs	r1, #4
   13e16:	f7ff fdb3 	bl	13980 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
    return true;
   13e1a:	2001      	movs	r0, #1
            break;
   13e1c:	e7b3      	b.n	13d86 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
    switch(connectedComplete_pending_) {
   13e1e:	2001      	movs	r0, #1
}
   13e20:	b004      	add	sp, #16
   13e22:	bd70      	pop	{r4, r5, r6, pc}
            connectedComplete_pending_ = 99;
   13e24:	2263      	movs	r2, #99	; 0x63
            initialPass_ = false;
   13e26:	2300      	movs	r3, #0
    return true;
   13e28:	2001      	movs	r0, #1
            connectedComplete_pending_ = 99;
   13e2a:	f884 216d 	strb.w	r2, [r4, #365]	; 0x16d
            initialPass_ = false;
   13e2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   13e32:	e7a8      	b.n	13d86 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            packet_[0] = 0x30;
   13e34:	2130      	movs	r1, #48	; 0x30
            sw_sendSubCmdUSB(0x03, packet_, 1, SW_CMD_TIMEOUT);
   13e36:	4d29      	ldr	r5, [pc, #164]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13e38:	4620      	mov	r0, r4
   13e3a:	2301      	movs	r3, #1
            packet_[0] = 0x30;
   13e3c:	f88d 1008 	strb.w	r1, [sp, #8]
            sw_sendSubCmdUSB(0x03, packet_, 1, SW_CMD_TIMEOUT);
   13e40:	aa02      	add	r2, sp, #8
   13e42:	2103      	movs	r1, #3
   13e44:	9500      	str	r5, [sp, #0]
   13e46:	f7ff fe57 	bl	13af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13e4a:	2001      	movs	r0, #1
            break;
   13e4c:	e79b      	b.n	13d86 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            packet_[0] = 0x01;
   13e4e:	2501      	movs	r5, #1
            sw_sendSubCmdUSB(0x48, packet_, 1, SW_CMD_TIMEOUT);
   13e50:	4e22      	ldr	r6, [pc, #136]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13e52:	4620      	mov	r0, r4
   13e54:	aa02      	add	r2, sp, #8
   13e56:	2148      	movs	r1, #72	; 0x48
   13e58:	462b      	mov	r3, r5
   13e5a:	9600      	str	r6, [sp, #0]
            packet_[0] = 0x01;
   13e5c:	f88d 5008 	strb.w	r5, [sp, #8]
            sw_sendSubCmdUSB(0x48, packet_, 1, SW_CMD_TIMEOUT);
   13e60:	f7ff fe4a 	bl	13af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13e64:	4628      	mov	r0, r5
            break;
   13e66:	e78e      	b.n	13d86 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            packet_[0] = 0x01;
   13e68:	2501      	movs	r5, #1
            connectedComplete_pending_++;
   13e6a:	2006      	movs	r0, #6
            sw_sendSubCmdUSB(0x40, packet_, 1, SW_CMD_TIMEOUT);
   13e6c:	491b      	ldr	r1, [pc, #108]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13e6e:	aa02      	add	r2, sp, #8
            connectedComplete_pending_++;
   13e70:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
            sw_sendSubCmdUSB(0x40, packet_, 1, SW_CMD_TIMEOUT);
   13e74:	462b      	mov	r3, r5
   13e76:	4620      	mov	r0, r4
   13e78:	9100      	str	r1, [sp, #0]
   13e7a:	2140      	movs	r1, #64	; 0x40
            packet_[0] = 0x01;
   13e7c:	f88d 5008 	strb.w	r5, [sp, #8]
            sw_sendSubCmdUSB(0x40, packet_, 1, SW_CMD_TIMEOUT);
   13e80:	f7ff fe3a 	bl	13af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13e84:	4628      	mov	r0, r5
            break;
   13e86:	e77e      	b.n	13d86 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);	
   13e88:	4d14      	ldr	r5, [pc, #80]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
			packet_[0] = 0x3D;
   13e8a:	f246 013d 	movw	r1, #24637	; 0x603d
			packet_[4] = (0x6055 - 0x603D + 1); 
   13e8e:	2219      	movs	r2, #25
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13e90:	4620      	mov	r0, r4
			packet_[0] = 0x80;
   13e92:	9102      	str	r1, [sp, #8]
			packet_[4] = (0x6085 - 0x6080 + 1);
   13e94:	f88d 200c 	strb.w	r2, [sp, #12]
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13e98:	2305      	movs	r3, #5
   13e9a:	aa02      	add	r2, sp, #8
   13e9c:	2110      	movs	r1, #16
   13e9e:	9500      	str	r5, [sp, #0]
   13ea0:	f7ff fe2a 	bl	13af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13ea4:	2001      	movs	r0, #1
}
   13ea6:	b004      	add	sp, #16
   13ea8:	bd70      	pop	{r4, r5, r6, pc}
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13eaa:	4d0c      	ldr	r5, [pc, #48]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
			packet_[0] = 0x80;
   13eac:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
			packet_[4] = (0x6085 - 0x6080 + 1);
   13eb0:	2206      	movs	r2, #6
   13eb2:	e7ed      	b.n	13e90 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x120>
            sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   // doesnt work wired
   13eb4:	4d09      	ldr	r5, [pc, #36]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
            packet_[0] = 0x20;
   13eb6:	f246 0120 	movw	r1, #24608	; 0x6020
            packet_[4] = (0x6037 - 0x6020 + 1);
   13eba:	2218      	movs	r2, #24
   13ebc:	e7e8      	b.n	13e90 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x120>
            sw_sendCmdUSB(0x02, SW_CMD_TIMEOUT);
   13ebe:	4620      	mov	r0, r4
   13ec0:	4a06      	ldr	r2, [pc, #24]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13ec2:	2102      	movs	r1, #2
   13ec4:	f7ff fd5c 	bl	13980 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
    return true;
   13ec8:	2001      	movs	r0, #1
            break;
   13eca:	e75c      	b.n	13d86 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            sw_sendCmdUSB(0x03, SW_CMD_TIMEOUT);
   13ecc:	4620      	mov	r0, r4
   13ece:	4a03      	ldr	r2, [pc, #12]	; (13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13ed0:	2103      	movs	r1, #3
   13ed2:	f7ff fd55 	bl	13980 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
    return true;
   13ed6:	2001      	movs	r0, #1
            break;
   13ed8:	e755      	b.n	13d86 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
   13eda:	bf00      	nop
   13edc:	0003d090 	.word	0x0003d090

00013ee0 <JoystickController::hid_timer_event(USBDriverTimer*)>:
{
   13ee0:	b510      	push	{r4, lr}
   13ee2:	4604      	mov	r4, r0
    if (!driver_) return;
   13ee4:	6b00      	ldr	r0, [r0, #48]	; 0x30
   13ee6:	b158      	cbz	r0, 13f00 <JoystickController::hid_timer_event(USBDriverTimer*)+0x20>
   13ee8:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   13eec:	f7fb fff8 	bl	fee0 <USBDriverTimer::stop()>
    sw_handle_usb_init_of_joystick(nullptr, 0, true);
   13ef0:	2200      	movs	r2, #0
   13ef2:	4620      	mov	r0, r4
   13ef4:	2301      	movs	r3, #1
   13ef6:	4611      	mov	r1, r2
}
   13ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sw_handle_usb_init_of_joystick(nullptr, 0, true);
   13efc:	f7ff bf38 	b.w	13d70 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
}
   13f00:	bd10      	pop	{r4, pc}
   13f02:	bf00      	nop

00013f04 <non-virtual thunk to JoystickController::hid_timer_event(USBDriverTimer*)>:
   13f04:	b510      	push	{r4, lr}
   13f06:	4604      	mov	r4, r0
   13f08:	6a40      	ldr	r0, [r0, #36]	; 0x24
   13f0a:	b160      	cbz	r0, 13f26 <non-virtual thunk to JoystickController::hid_timer_event(USBDriverTimer*)+0x22>
   13f0c:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   13f10:	f7fb ffe6 	bl	fee0 <USBDriverTimer::stop()>
   13f14:	2200      	movs	r2, #0
   13f16:	f1a4 000c 	sub.w	r0, r4, #12
   13f1a:	2301      	movs	r3, #1
   13f1c:	4611      	mov	r1, r2
   13f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13f22:	f7ff bf25 	b.w	13d70 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
   13f26:	bd10      	pop	{r4, pc}

00013f28 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>:
{
   13f28:	b570      	push	{r4, r5, r6, lr}
   13f2a:	4604      	mov	r4, r0
   13f2c:	b084      	sub	sp, #16
    if (data) {
   13f2e:	b319      	cbz	r1, 13f78 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x50>
        if (data[0] != 0x21) return false;
   13f30:	780b      	ldrb	r3, [r1, #0]
   13f32:	460d      	mov	r5, r1
   13f34:	2b21      	cmp	r3, #33	; 0x21
   13f36:	d002      	beq.n	13f3e <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x16>
   13f38:	2000      	movs	r0, #0
}
   13f3a:	b004      	add	sp, #16
   13f3c:	bd70      	pop	{r4, r5, r6, pc}
    void stopTimer() {bt_connection_timer_.stop();}
   13f3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   13f40:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   13f44:	f7fb ffcc 	bl	fee0 <USBDriverTimer::stop()>
        sw_parseAckMsg(data);
   13f48:	4629      	mov	r1, r5
   13f4a:	4620      	mov	r0, r4
   13f4c:	f7ff fe38 	bl	13bc0 <JoystickController::sw_parseAckMsg(unsigned char const*)>
        if (!initialPassBT_) return true; // don't need to process
   13f50:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   13f54:	b1ab      	cbz	r3, 13f82 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x5a>
        connectedComplete_pending_++; 
   13f56:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
   13f5a:	3301      	adds	r3, #1
   13f5c:	b2db      	uxtb	r3, r3
   13f5e:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
    switch (connectedComplete_pending_) {
   13f62:	3b01      	subs	r3, #1
   13f64:	2b0a      	cmp	r3, #10
   13f66:	d80c      	bhi.n	13f82 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x5a>
   13f68:	e8df f003 	tbb	[pc, r3]
   13f6c:	1e726d11 	.word	0x1e726d11
   13f70:	4538342f 	.word	0x4538342f
   13f74:	524a      	.short	0x524a
   13f76:	5f          	.byte	0x5f
   13f77:	00          	.byte	0x00
    } else if (timer_event) {
   13f78:	b133      	cbz	r3, 13f88 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x60>
        if (!initialPassBT_) return true; // don't need to process
   13f7a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   13f7e:	2b00      	cmp	r3, #0
   13f80:	d1e9      	bne.n	13f56 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x2e>
    switch (connectedComplete_pending_) {
   13f82:	2001      	movs	r0, #1
}
   13f84:	b004      	add	sp, #16
   13f86:	bd70      	pop	{r4, r5, r6, pc}
        connectedComplete_pending_++; 
   13f88:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
   13f8c:	e7e9      	b.n	13f62 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x3a>
        packet_[0] = 0x00;
   13f8e:	2100      	movs	r1, #0
        sw_sendCmd(0x08, packet_, 1, SW_CMD_TIMEOUT );
   13f90:	4d32      	ldr	r5, [pc, #200]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   13f92:	4620      	mov	r0, r4
   13f94:	2301      	movs	r3, #1
        packet_[0] = 0x00;
   13f96:	f88d 1008 	strb.w	r1, [sp, #8]
        sw_sendCmd(0x08, packet_, 1, SW_CMD_TIMEOUT );
   13f9a:	aa02      	add	r2, sp, #8
   13f9c:	2108      	movs	r1, #8
   13f9e:	9500      	str	r5, [sp, #0]
   13fa0:	f7ff fc32 	bl	13808 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   13fa4:	2001      	movs	r0, #1
        break;
   13fa6:	e7c8      	b.n	13f3a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fa8:	4d2c      	ldr	r5, [pc, #176]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x3D;
   13faa:	f246 013d 	movw	r1, #24637	; 0x603d
        packet_[4] = (0x604E - 0x603D + 1); 
   13fae:	2212      	movs	r2, #18
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fb0:	4620      	mov	r0, r4
        packet_[0] = 0x80;
   13fb2:	9102      	str	r1, [sp, #8]
        packet_[4] = (0x6097 - 0x6080 + 1);
   13fb4:	f88d 200c 	strb.w	r2, [sp, #12]
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fb8:	2305      	movs	r3, #5
   13fba:	aa02      	add	r2, sp, #8
   13fbc:	2110      	movs	r1, #16
   13fbe:	9500      	str	r5, [sp, #0]
   13fc0:	f7ff fc22 	bl	13808 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   13fc4:	2001      	movs	r0, #1
}
   13fc6:	b004      	add	sp, #16
   13fc8:	bd70      	pop	{r4, r5, r6, pc}
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fca:	4d24      	ldr	r5, [pc, #144]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x20;
   13fcc:	f246 0120 	movw	r1, #24608	; 0x6020
        packet_[4] = (0x6097 - 0x6080 + 1);
   13fd0:	2218      	movs	r2, #24
   13fd2:	e7ed      	b.n	13fb0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x88>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fd4:	4d21      	ldr	r5, [pc, #132]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x80;
   13fd6:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
   13fda:	e7f9      	b.n	13fd0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0xa8>
        packet_[0] = 0x01;
   13fdc:	2501      	movs	r5, #1
        sw_sendCmd(0x40, packet_, 1, SW_CMD_TIMEOUT);   /* 0x40 IMU, note: 0x00 would disable */
   13fde:	4e1f      	ldr	r6, [pc, #124]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   13fe0:	aa02      	add	r2, sp, #8
   13fe2:	2140      	movs	r1, #64	; 0x40
        sw_sendCmd(0x48, packet_, 1, SW_CMD_TIMEOUT);
   13fe4:	4620      	mov	r0, r4
   13fe6:	462b      	mov	r3, r5
   13fe8:	9600      	str	r6, [sp, #0]
        packet_[0] = 0x01;
   13fea:	f88d 5008 	strb.w	r5, [sp, #8]
        sw_sendCmd(0x48, packet_, 1, SW_CMD_TIMEOUT);
   13fee:	f7ff fc0b 	bl	13808 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   13ff2:	4628      	mov	r0, r5
        break;
   13ff4:	e7a1      	b.n	13f3a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        packet_[0] = 0x01;
   13ff6:	2501      	movs	r5, #1
        sw_sendCmd(0x48, packet_, 1, SW_CMD_TIMEOUT);
   13ff8:	4e18      	ldr	r6, [pc, #96]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   13ffa:	aa02      	add	r2, sp, #8
   13ffc:	2148      	movs	r1, #72	; 0x48
   13ffe:	e7f1      	b.n	13fe4 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0xbc>
        setLEDs(0x1, 0, 0);
   14000:	2300      	movs	r3, #0
   14002:	2101      	movs	r1, #1
   14004:	4620      	mov	r0, r4
   14006:	461a      	mov	r2, r3
   14008:	f7ff f8a8 	bl	1315c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
    return true;
   1400c:	2001      	movs	r0, #1
        break;
   1400e:	e794      	b.n	13f3a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        packet_[0] = 0x30; //0x3F;
   14010:	2130      	movs	r1, #48	; 0x30
        sw_sendCmd(0x03, packet_, 1, SW_CMD_TIMEOUT);
   14012:	4d12      	ldr	r5, [pc, #72]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   14014:	4620      	mov	r0, r4
   14016:	2301      	movs	r3, #1
        packet_[0] = 0x30; //0x3F;
   14018:	f88d 1008 	strb.w	r1, [sp, #8]
        sw_sendCmd(0x03, packet_, 1, SW_CMD_TIMEOUT);
   1401c:	aa02      	add	r2, sp, #8
   1401e:	2103      	movs	r1, #3
   14020:	9500      	str	r5, [sp, #0]
   14022:	f7ff fbf1 	bl	13808 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   14026:	2001      	movs	r0, #1
        break;
   14028:	e787      	b.n	13f3a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        setRumble(0xff, 0xff, 0xff);
   1402a:	23ff      	movs	r3, #255	; 0xff
   1402c:	4620      	mov	r0, r4
   1402e:	461a      	mov	r2, r3
   14030:	4619      	mov	r1, r3
   14032:	f7ff f94b 	bl	132cc <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>
		initialPassBT_ = false;
   14036:	2200      	movs	r2, #0
        connectedComplete_pending_ = 0xff;
   14038:	23ff      	movs	r3, #255	; 0xff
    return true;
   1403a:	2001      	movs	r0, #1
		initialPassBT_ = false;
   1403c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        connectedComplete_pending_ = 0xff;
   14040:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
        break;
   14044:	e779      	b.n	13f3a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   14046:	4d05      	ldr	r5, [pc, #20]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x86;
   14048:	f246 0186 	movw	r1, #24710	; 0x6086
        packet_[4] = (0x6097 - 0x6086 + 1); 
   1404c:	2212      	movs	r2, #18
   1404e:	e7af      	b.n	13fb0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x88>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   14050:	4d02      	ldr	r5, [pc, #8]	; (1405c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x98;
   14052:	f246 0198 	movw	r1, #24728	; 0x6098
        packet_[4] = (0x60A9 - 0x6098 + 1);  
   14056:	2212      	movs	r2, #18
   14058:	e7aa      	b.n	13fb0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x88>
   1405a:	bf00      	nop
   1405c:	0003d090 	.word	0x0003d090

00014060 <JoystickController::bt_hid_timer_event(USBDriverTimer*)>:
{
   14060:	b510      	push	{r4, lr}
   14062:	4604      	mov	r4, r0
    if (!btconnect) return;
   14064:	6a80      	ldr	r0, [r0, #40]	; 0x28
   14066:	b158      	cbz	r0, 14080 <JoystickController::bt_hid_timer_event(USBDriverTimer*)+0x20>
   14068:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   1406c:	f7fb ff38 	bl	fee0 <USBDriverTimer::stop()>
    sw_handle_bt_init_of_joystick(nullptr, 0, true);
   14070:	2200      	movs	r2, #0
   14072:	4620      	mov	r0, r4
   14074:	2301      	movs	r3, #1
   14076:	4611      	mov	r1, r2
}
   14078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sw_handle_bt_init_of_joystick(nullptr, 0, true);
   1407c:	f7ff bf54 	b.w	13f28 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>
}
   14080:	bd10      	pop	{r4, pc}
   14082:	bf00      	nop

00014084 <non-virtual thunk to JoystickController::bt_hid_timer_event(USBDriverTimer*)>:
   14084:	b510      	push	{r4, lr}
   14086:	4604      	mov	r4, r0
   14088:	6900      	ldr	r0, [r0, #16]
   1408a:	b160      	cbz	r0, 140a6 <non-virtual thunk to JoystickController::bt_hid_timer_event(USBDriverTimer*)+0x22>
   1408c:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   14090:	f7fb ff26 	bl	fee0 <USBDriverTimer::stop()>
   14094:	2200      	movs	r2, #0
   14096:	f1a4 0018 	sub.w	r0, r4, #24
   1409a:	2301      	movs	r3, #1
   1409c:	4611      	mov	r1, r2
   1409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   140a2:	f7ff bf41 	b.w	13f28 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>
   140a6:	bd10      	pop	{r4, pc}

000140a8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>:
	float &pOutY,       // out: resulting stick Y value
	int16_t x,         // in: initial stick X value
	int16_t y,         // in: initial stick Y value
	bool isLeft			// are we dealing with left or right Joystick
)
{
   140a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   140aa:	ed2d 8b02 	vpush	{d8}
   140ae:	b083      	sub	sp, #12
	int16_t center_x;
	int16_t min_y;		// analog joystick calibration
	int16_t max_y;
	int16_t center_y;
	if(isLeft) {
		min_x = SWStickCal.lstick_x_min;
   140b0:	4d54      	ldr	r5, [pc, #336]	; (14204 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x15c>)
{
   140b2:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   140b6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
	if(isLeft) {
   140ba:	2c00      	cmp	r4, #0
   140bc:	d06a      	beq.n	14194 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0xec>
		min_x = SWStickCal.lstick_x_min;
   140be:	f9b5 4010 	ldrsh.w	r4, [r5, #16]
		max_x = SWStickCal.lstick_x_max;
   140c2:	f9b5 7012 	ldrsh.w	r7, [r5, #18]
		center_x = SWStickCal.lstick_center_x;
   140c6:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
		min_y = SWStickCal.lstick_y_min;
   140ca:	f9b5 c014 	ldrsh.w	ip, [r5, #20]
		max_y = SWStickCal.lstick_y_max;
   140ce:	f9b5 e016 	ldrsh.w	lr, [r5, #22]
		center_y = SWStickCal.lstick_center_y;
   140d2:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
	float deadZoneCenter = 0.15f;
	// Add a small ammount of outer deadzone to avoid edge cases or machine variety.
	float deadZoneOuter = 0.0f;

	// convert to float based on calibration and valid ranges per +/-axis
	x = clamp(x, min_x, max_x);
   140d6:	42a3      	cmp	r3, r4
   140d8:	bfb8      	it	lt
   140da:	4623      	movlt	r3, r4
   140dc:	4560      	cmp	r0, ip
   140de:	bfb8      	it	lt
   140e0:	4660      	movlt	r0, ip
   140e2:	42bb      	cmp	r3, r7
   140e4:	bfa8      	it	ge
   140e6:	463b      	movge	r3, r7
	y = clamp(y, min_y, max_y);
   140e8:	4570      	cmp	r0, lr
   140ea:	bfa8      	it	ge
   140ec:	4670      	movge	r0, lr
	if (x >= center_x) {
   140ee:	429e      	cmp	r6, r3
		x_f = (float)(x - center_x) / (float)(max_x - center_x);
   140f0:	eba3 0306 	sub.w	r3, r3, r6
	if (x >= center_x) {
   140f4:	dc6f      	bgt.n	141d6 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x12e>
		x_f = (float)(x - center_x) / (float)(max_x - center_x);
   140f6:	1bbf      	subs	r7, r7, r6
   140f8:	ee07 3a90 	vmov	s15, r3
   140fc:	ee07 7a10 	vmov	s14, r7
   14100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   14108:	ee87 8a87 	vdiv.f32	s16, s15, s14
	} else {
		x_f = -((float)(x - center_x) / (float)(min_x - center_x));
	}
	if (y >= center_y) {
   1410c:	4285      	cmp	r5, r0
		y_f = (float)(y - center_y) / (float)(max_y - center_y);
   1410e:	eba0 0005 	sub.w	r0, r0, r5
	if (y >= center_y) {
   14112:	dc51      	bgt.n	141b8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x110>
		y_f = (float)(y - center_y) / (float)(max_y - center_y);
   14114:	ebae 0e05 	sub.w	lr, lr, r5
   14118:	ee07 0a90 	vmov	s15, r0
   1411c:	ee07 ea10 	vmov	s14, lr
   14120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14124:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   14128:	eec7 8a87 	vdiv.f32	s17, s15, s14
	} else {
		y_f = -((float)(y - center_y) / (float)(min_y - center_y));
	}

	// Interpolate zone between deadzones
	float mag = sqrtf(x_f*x_f + y_f*y_f);
   1412c:	ee28 0aa8 	vmul.f32	s0, s17, s17
   14130:	eea8 0a08 	vfma.f32	s0, s16, s16
   14134:	eeb5 0a40 	vcmp.f32	s0, #0.0
   14138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1413c:	d459      	bmi.n	141f2 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x14a>
   1413e:	eeb1 7ac0 	vsqrt.f32	s14, s0
	if (mag > deadZoneCenter) {
   14142:	eddf 7a31 	vldr	s15, [pc, #196]	; 14208 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x160>
   14146:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1414e:	dd2e      	ble.n	141ae <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x106>
		// scale such that output magnitude is in the range [0.0f, 1.0f]
		float legalRange = 1.0f - deadZoneOuter - deadZoneCenter;
		float normalizedMag = min(1.0f, (mag - deadZoneCenter) / legalRange);
   14150:	ee77 7a67 	vsub.f32	s15, s14, s15
   14154:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 1420c <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x164>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
   14158:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		float scale = normalizedMag / mag;
		pOutX = (x_f * scale * sw_scale);
   1415c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 14210 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x168>
		float normalizedMag = min(1.0f, (mag - deadZoneCenter) / legalRange);
   14160:	eec7 6a85 	vdiv.f32	s13, s15, s10
   14164:	eef4 6a65 	vcmp.f32	s13, s11
   14168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1416c:	fe75 6aa6 	vselgt.f32	s13, s11, s13
		float scale = normalizedMag / mag;
   14170:	eec6 7a87 	vdiv.f32	s15, s13, s14
		pOutX = (x_f * scale * sw_scale);
   14174:	ee28 8a27 	vmul.f32	s16, s16, s15
		pOutY = (y_f * scale * sw_scale);
   14178:	ee68 8aa7 	vmul.f32	s17, s17, s15
		pOutX = (x_f * scale * sw_scale);
   1417c:	ee28 8a06 	vmul.f32	s16, s16, s12
		pOutY = (y_f * scale * sw_scale);
   14180:	ee68 8a86 	vmul.f32	s17, s17, s12
		pOutX = (x_f * scale * sw_scale);
   14184:	ed81 8a00 	vstr	s16, [r1]
		pOutY = (y_f * scale * sw_scale);
   14188:	edc2 8a00 	vstr	s17, [r2]
		pOutX = 0.0f;
		pOutY = 0.0f;
	}
	

}
   1418c:	b003      	add	sp, #12
   1418e:	ecbd 8b02 	vpop	{d8}
   14192:	bdf0      	pop	{r4, r5, r6, r7, pc}
		min_x = SWStickCal.rstick_x_min;
   14194:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
		max_x = SWStickCal.rstick_x_max;
   14198:	f9b5 7006 	ldrsh.w	r7, [r5, #6]
		center_x = SWStickCal.rstick_center_x;
   1419c:	f9b5 6000 	ldrsh.w	r6, [r5]
		min_y = SWStickCal.rstick_y_min;
   141a0:	f9b5 c008 	ldrsh.w	ip, [r5, #8]
		max_y = SWStickCal.rstick_y_max;
   141a4:	f9b5 e00a 	ldrsh.w	lr, [r5, #10]
		center_y = SWStickCal.rstick_center_y;
   141a8:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
   141ac:	e793      	b.n	140d6 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x2e>
   141ae:	ed9f 8a19 	vldr	s16, [pc, #100]	; 14214 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x16c>
   141b2:	eef0 8a48 	vmov.f32	s17, s16
   141b6:	e7e5      	b.n	14184 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0xdc>
		y_f = -((float)(y - center_y) / (float)(min_y - center_y));
   141b8:	ebac 0c05 	sub.w	ip, ip, r5
   141bc:	ee07 0a90 	vmov	s15, r0
   141c0:	ee07 ca10 	vmov	s14, ip
   141c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   141c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   141cc:	eec7 8a87 	vdiv.f32	s17, s15, s14
   141d0:	eef1 8a68 	vneg.f32	s17, s17
   141d4:	e7aa      	b.n	1412c <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x84>
		x_f = -((float)(x - center_x) / (float)(min_x - center_x));
   141d6:	1ba4      	subs	r4, r4, r6
   141d8:	ee07 3a90 	vmov	s15, r3
   141dc:	ee07 4a10 	vmov	s14, r4
   141e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   141e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   141e8:	ee87 8a87 	vdiv.f32	s16, s15, s14
   141ec:	eeb1 8a48 	vneg.f32	s16, s16
   141f0:	e78c      	b.n	1410c <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x64>
   141f2:	e9cd 1200 	strd	r1, r2, [sp]
	float mag = sqrtf(x_f*x_f + y_f*y_f);
   141f6:	f003 ff77 	bl	180e8 <sqrtf>
   141fa:	eeb0 7a40 	vmov.f32	s14, s0
   141fe:	e9dd 1200 	ldrd	r1, r2, [sp]
   14202:	e79e      	b.n	14142 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x9a>
   14204:	2000d6f4 	.word	0x2000d6f4
   14208:	3e19999a 	.word	0x3e19999a
   1420c:	3f59999a 	.word	0x3f59999a
   14210:	45000000 	.word	0x45000000
   14214:	00000000 	.word	0x00000000

00014218 <JoystickController::rx_data(Transfer_struct const*)>:
    if (joystickType_ == XBOXONE) {
   14218:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1421c:	2b03      	cmp	r3, #3
{
   1421e:	b5f0      	push	{r4, r5, r6, r7, lr}
   14220:	4604      	mov	r4, r0
   14222:	b087      	sub	sp, #28
   14224:	460d      	mov	r5, r1
    if (joystickType_ == XBOXONE) {
   14226:	d06f      	beq.n	14308 <JoystickController::rx_data(Transfer_struct const*)+0xf0>
    } else if (joystickType_ == XBOX360) {
   14228:	2b04      	cmp	r3, #4
   1422a:	d008      	beq.n	1423e <JoystickController::rx_data(Transfer_struct const*)+0x26>
    } else if (joystickType_ == SWITCH) {
   1422c:	2b07      	cmp	r3, #7
   1422e:	f000 80c6 	beq.w	143be <JoystickController::rx_data(Transfer_struct const*)+0x1a6>
    queue_Data_Transfer_Debug(rxpipe_, rxbuf_, rx_size_, this, __LINE__);
   14232:	f8d4 049c 	ldr.w	r0, [r4, #1180]	; 0x49c
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   14236:	2800      	cmp	r0, #0
   14238:	d15c      	bne.n	142f4 <JoystickController::rx_data(Transfer_struct const*)+0xdc>
}
   1423a:	b007      	add	sp, #28
   1423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xbox360data_t  *xb360d = (xbox360data_t *)transfer->buffer;
   1423e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        if (xb360d->state == 0x08) {
   14240:	781a      	ldrb	r2, [r3, #0]
   14242:	2a08      	cmp	r2, #8
   14244:	f000 80a7 	beq.w	14396 <JoystickController::rx_data(Transfer_struct const*)+0x17e>
        } else if (xb360d->id_or_type == 0x01) { // Lets only process report 1.
   14248:	785a      	ldrb	r2, [r3, #1]
   1424a:	2a01      	cmp	r2, #1
   1424c:	d1f1      	bne.n	14232 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
            if (buttons != xb360d->buttons) {
   1424e:	88d9      	ldrh	r1, [r3, #6]
   14250:	6c40      	ldr	r0, [r0, #68]	; 0x44
   14252:	4288      	cmp	r0, r1
   14254:	d002      	beq.n	1425c <JoystickController::rx_data(Transfer_struct const*)+0x44>
                buttons = xb360d->buttons;
   14256:	6461      	str	r1, [r4, #68]	; 0x44
                anychange = true;
   14258:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
            axis_mask_ = 0x3f;
   1425c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   14260:	f103 0608 	add.w	r6, r3, #8
            axis_changed_mask_ = 0; // assume none for now
   14264:	2200      	movs	r2, #0
                    axis_changed_mask_ |= (1 << i);
   14266:	f04f 0c01 	mov.w	ip, #1
            axis_mask_ = 0x3f;
   1426a:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 14570 <JoystickController::rx_data(Transfer_struct const*)+0x358>
   1426e:	ed84 7b52 	vstr	d7, [r4, #328]	; 0x148
            axis_changed_mask_ = 0; // assume none for now
   14272:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 14578 <JoystickController::rx_data(Transfer_struct const*)+0x360>
   14276:	ed84 7b54 	vstr	d7, [r4, #336]	; 0x150
                if (axis[i] != xb360d->axis[i]) {
   1427a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
   1427e:	f850 5f04 	ldr.w	r5, [r0, #4]!
   14282:	428d      	cmp	r5, r1
   14284:	d00f      	beq.n	142a6 <JoystickController::rx_data(Transfer_struct const*)+0x8e>
                    axis[i] = xb360d->axis[i];
   14286:	6001      	str	r1, [r0, #0]
                    axis_changed_mask_ |= (1 << i);
   14288:	fa0c f102 	lsl.w	r1, ip, r2
   1428c:	f8d4 5150 	ldr.w	r5, [r4, #336]	; 0x150
                    anychange = true;
   14290:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
                    axis_changed_mask_ |= (1 << i);
   14294:	430d      	orrs	r5, r1
   14296:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
   1429a:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
   1429e:	ea45 75e1 	orr.w	r5, r5, r1, asr #31
   142a2:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
            for (uint8_t i = 0; i < 4; i++) {
   142a6:	3201      	adds	r2, #1
   142a8:	2a04      	cmp	r2, #4
   142aa:	d1e6      	bne.n	1427a <JoystickController::rx_data(Transfer_struct const*)+0x62>
            if (axis[4] != xb360d->lt) {
   142ac:	7a19      	ldrb	r1, [r3, #8]
   142ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
   142b0:	428a      	cmp	r2, r1
   142b2:	f000 8169 	beq.w	14588 <JoystickController::rx_data(Transfer_struct const*)+0x370>
                axis_changed_mask_ |= (1 << 4);
   142b6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
                anychange = true;
   142ba:	2001      	movs	r0, #1
                axis[4] = xb360d->lt;
   142bc:	65a1      	str	r1, [r4, #88]	; 0x58
                axis_changed_mask_ |= (1 << 4);
   142be:	f042 0210 	orr.w	r2, r2, #16
                anychange = true;
   142c2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
            if (axis[5] != xb360d->rt) {
   142c6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                axis_changed_mask_ |= (1 << 4);
   142c8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
            if (axis[5] != xb360d->rt) {
   142cc:	7a5b      	ldrb	r3, [r3, #9]
                axis_changed_mask_ |= (1 << 4);
   142ce:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
            if (axis[5] != xb360d->rt) {
   142d2:	4283      	cmp	r3, r0
   142d4:	d007      	beq.n	142e6 <JoystickController::rx_data(Transfer_struct const*)+0xce>
                axis_changed_mask_ |= (1 << 5);
   142d6:	f042 0220 	orr.w	r2, r2, #32
                anychange = true;
   142da:	2001      	movs	r0, #1
                axis[5] = xb360d->rt;
   142dc:	65e3      	str	r3, [r4, #92]	; 0x5c
                anychange = true;
   142de:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << 5);
   142e2:	e9c4 2154 	strd	r2, r1, [r4, #336]	; 0x150
        if (anychange) joystickEvent = true;
   142e6:	2301      	movs	r3, #1
    queue_Data_Transfer_Debug(rxpipe_, rxbuf_, rx_size_, this, __LINE__);
   142e8:	f8d4 049c 	ldr.w	r0, [r4, #1180]	; 0x49c
        if (anychange) joystickEvent = true;
   142ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   142f0:	2800      	cmp	r0, #0
   142f2:	d0a2      	beq.n	1423a <JoystickController::rx_data(Transfer_struct const*)+0x22>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   142f4:	4623      	mov	r3, r4
   142f6:	f8b4 2496 	ldrh.w	r2, [r4, #1174]	; 0x496
   142fa:	f204 41a4 	addw	r1, r4, #1188	; 0x4a4
}
   142fe:	b007      	add	sp, #28
   14300:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return queue_Data_Transfer(pipe, buffer, len, driver);
   14304:	f7fb bf32 	b.w	1016c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        axis_mask_ = 0x3f;
   14308:	203f      	movs	r0, #63	; 0x3f
   1430a:	2100      	movs	r1, #0
   1430c:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
        axis_changed_mask_ = 0; // assume none for now
   14310:	2100      	movs	r1, #0
   14312:	2000      	movs	r0, #0
   14314:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
        xbox1data20_t *xb1d = (xbox1data20_t *)transfer->buffer;
   14318:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if ((xb1d->type == 0x20) && (transfer->length >= sizeof (xbox1data20_t))) {
   1431a:	780a      	ldrb	r2, [r1, #0]
   1431c:	2a20      	cmp	r2, #32
   1431e:	d188      	bne.n	14232 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
   14320:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   14322:	2a11      	cmp	r2, #17
   14324:	d985      	bls.n	14232 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
            if (xb1d->buttons != buttons) {
   14326:	888a      	ldrh	r2, [r1, #4]
   14328:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1432a:	4282      	cmp	r2, r0
   1432c:	d005      	beq.n	1433a <JoystickController::rx_data(Transfer_struct const*)+0x122>
                anychange = true;
   1432e:	2001      	movs	r0, #1
                buttons = xb1d->buttons;
   14330:	6462      	str	r2, [r4, #68]	; 0x44
                anychange = true;
   14332:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
                joystickEvent = true;
   14336:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
{
   1433a:	2201      	movs	r2, #1
   1433c:	4e90      	ldr	r6, [pc, #576]	; (14580 <JoystickController::rx_data(Transfer_struct const*)+0x368>)
   1433e:	3106      	adds	r1, #6
                    axis_changed_mask_ |= (1 << xbox_axis_order_mapping[i]);
   14340:	4694      	mov	ip, r2
   14342:	e01d      	b.n	14380 <JoystickController::rx_data(Transfer_struct const*)+0x168>
                int axis_value = (i < 2) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14344:	f9b1 5000 	ldrsh.w	r5, [r1]
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   14348:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
   1434c:	42af      	cmp	r7, r5
   1434e:	d010      	beq.n	14372 <JoystickController::rx_data(Transfer_struct const*)+0x15a>
                    axis[xbox_axis_order_mapping[i]] = axis_value;
   14350:	f844 5020 	str.w	r5, [r4, r0, lsl #2]
                    axis_changed_mask_ |= (1 << xbox_axis_order_mapping[i]);
   14354:	fa0c f303 	lsl.w	r3, ip, r3
   14358:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                    anychange = true;
   1435c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
                    axis_changed_mask_ |= (1 << xbox_axis_order_mapping[i]);
   14360:	4318      	orrs	r0, r3
   14362:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14366:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   1436a:	ea40 70e3 	orr.w	r0, r0, r3, asr #31
   1436e:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
            for (uint8_t i = 0; i < sizeof (xbox_axis_order_mapping); i++) {
   14372:	2a06      	cmp	r2, #6
   14374:	d0b7      	beq.n	142e6 <JoystickController::rx_data(Transfer_struct const*)+0xce>
   14376:	3201      	adds	r2, #1
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   14378:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   1437c:	3102      	adds	r1, #2
   1437e:	b2d2      	uxtb	r2, r2
                int axis_value = (i < 2) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14380:	1e55      	subs	r5, r2, #1
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   14382:	f103 0012 	add.w	r0, r3, #18
                int axis_value = (i < 2) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14386:	2d01      	cmp	r5, #1
   14388:	d8dc      	bhi.n	14344 <JoystickController::rx_data(Transfer_struct const*)+0x12c>
   1438a:	880d      	ldrh	r5, [r1, #0]
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   1438c:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
   14390:	42af      	cmp	r7, r5
   14392:	d1dd      	bne.n	14350 <JoystickController::rx_data(Transfer_struct const*)+0x138>
   14394:	e7ef      	b.n	14376 <JoystickController::rx_data(Transfer_struct const*)+0x15e>
            if (xb360d->id_or_type != connected_) {
   14396:	785b      	ldrb	r3, [r3, #1]
   14398:	f890 216c 	ldrb.w	r2, [r0, #364]	; 0x16c
   1439c:	429a      	cmp	r2, r3
   1439e:	f43f af48 	beq.w	14232 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
                connected_ = xb360d->id_or_type;    // remember it...
   143a2:	f880 316c 	strb.w	r3, [r0, #364]	; 0x16c
                if (connected_) {
   143a6:	2b00      	cmp	r3, #0
   143a8:	f43f af43 	beq.w	14232 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
                    setLEDs(2 + rx_ep_ / 2); // Right now hard coded to first joystick...
   143ac:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
    bool inline setLEDs(uint32_t leds) {return setLEDs((leds >> 16) & 0xff, (leds >> 8) & 0xff, leds & 0xff);}  // sets Leds - passing one arg for all leds
   143b0:	2200      	movs	r2, #0
   143b2:	085b      	lsrs	r3, r3, #1
   143b4:	4611      	mov	r1, r2
   143b6:	3302      	adds	r3, #2
   143b8:	f7fe fed0 	bl	1315c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
   143bc:	e739      	b.n	14232 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
		if(initialPass_ == true) {
   143be:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   143c2:	b1bb      	cbz	r3, 143f4 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
			switch(connectedComplete_pending_) {
   143c4:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
   143c8:	2b05      	cmp	r3, #5
   143ca:	d813      	bhi.n	143f4 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
   143cc:	e8df f003 	tbb	[pc, r3]
   143d0:	a3b0bdc5 	.word	0xa3b0bdc5
   143d4:	0d03      	.short	0x0d03
					sw_sendSubCmdUSB(0x3f, packet, 1);
   143d6:	2100      	movs	r1, #0
					packet[0] = 0x30;
   143d8:	2230      	movs	r2, #48	; 0x30
					sw_sendSubCmdUSB(0x3f, packet, 1);
   143da:	2301      	movs	r3, #1
   143dc:	9100      	str	r1, [sp, #0]
   143de:	213f      	movs	r1, #63	; 0x3f
					packet[0] = 0x30;
   143e0:	f88d 2010 	strb.w	r2, [sp, #16]
					sw_sendSubCmdUSB(0x3f, packet, 1);
   143e4:	aa04      	add	r2, sp, #16
   143e6:	f7ff fb87 	bl	13af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
					connectedComplete_pending_ = 0;
   143ea:	2300      	movs	r3, #0
   143ec:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					initialPass_ = false;
   143f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        switchdataUSB_t  *switchd = (switchdataUSB_t *)transfer->buffer;
   143f4:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if (buttons != cur_buttons) {
   143f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   143f8:	886b      	ldrh	r3, [r5, #2]
   143fa:	ba5b      	rev16	r3, r3
   143fc:	b29b      	uxth	r3, r3
   143fe:	429a      	cmp	r2, r3
   14400:	d003      	beq.n	1440a <JoystickController::rx_data(Transfer_struct const*)+0x1f2>
            anychange = true;
   14402:	2201      	movs	r2, #1
            buttons = cur_buttons;
   14404:	6463      	str	r3, [r4, #68]	; 0x44
            anychange = true;
   14406:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        axis_mask_ = 0x3f;
   1440a:	223f      	movs	r2, #63	; 0x3f
   1440c:	2300      	movs	r3, #0
   1440e:	f104 0144 	add.w	r1, r4, #68	; 0x44
   14412:	f105 0c04 	add.w	ip, r5, #4
                axis_changed_mask_ |= (1 << i);
   14416:	f04f 0e01 	mov.w	lr, #1
        axis_mask_ = 0x3f;
   1441a:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
        axis_changed_mask_ = 0; // assume none for now
   1441e:	2300      	movs	r3, #0
   14420:	2200      	movs	r2, #0
   14422:	e9c4 2354 	strd	r2, r3, [r4, #336]	; 0x150
   14426:	2300      	movs	r3, #0
            if (axis[i] != switchd->axis[i]) {
   14428:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
   1442c:	f851 0f04 	ldr.w	r0, [r1, #4]!
   14430:	4290      	cmp	r0, r2
   14432:	d00f      	beq.n	14454 <JoystickController::rx_data(Transfer_struct const*)+0x23c>
                axis[i] = switchd->axis[i];
   14434:	600a      	str	r2, [r1, #0]
                axis_changed_mask_ |= (1 << i);
   14436:	fa0e f203 	lsl.w	r2, lr, r3
   1443a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                anychange = true;
   1443e:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << i);
   14442:	4310      	orrs	r0, r2
   14444:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14448:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   1444c:	ea40 70e2 	orr.w	r0, r0, r2, asr #31
   14450:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        for (uint8_t i = 0; i < 4; i++) {
   14454:	3301      	adds	r3, #1
   14456:	2b04      	cmp	r3, #4
   14458:	d1e6      	bne.n	14428 <JoystickController::rx_data(Transfer_struct const*)+0x210>
		CalcAnalogStick(xout, yout, axis[0], axis[1], true);
   1445a:	2601      	movs	r6, #1
   1445c:	aa03      	add	r2, sp, #12
   1445e:	a902      	add	r1, sp, #8
   14460:	4620      	mov	r0, r4
   14462:	9601      	str	r6, [sp, #4]
   14464:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
   14468:	9300      	str	r3, [sp, #0]
   1446a:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
   1446e:	f7ff fe1b 	bl	140a8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   14472:	ed9d 7a02 	vldr	s14, [sp, #8]
   14476:	eddd 7a03 	vldr	s15, [sp, #12]
		CalcAnalogStick(xout, yout, axis[2], axis[3], true);
   1447a:	aa03      	add	r2, sp, #12
   1447c:	feb8 7a47 	vrinta.f32	s14, s14
		axis[0] = int(round(xout));
   14480:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   14484:	fef8 7a67 	vrinta.f32	s15, s15
		axis[1] = int(round(yout));
   14488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		CalcAnalogStick(xout, yout, axis[2], axis[3], true);
   1448c:	9601      	str	r6, [sp, #4]
   1448e:	a902      	add	r1, sp, #8
   14490:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
   14494:	4620      	mov	r0, r4
		axis[0] = int(round(xout));
   14496:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
		axis[1] = int(round(yout));
   1449a:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
		CalcAnalogStick(xout, yout, axis[2], axis[3], true);
   1449e:	9300      	str	r3, [sp, #0]
   144a0:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
   144a4:	f7ff fe00 	bl	140a8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
   144a8:	ed9d 7a02 	vldr	s14, [sp, #8]
   144ac:	eddd 7a03 	vldr	s15, [sp, #12]
   144b0:	feb8 7a47 	vrinta.f32	s14, s14
		axis[2] = int(round(xout));
   144b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   144b8:	fef8 7a67 	vrinta.f32	s15, s15
		axis[3] = int(round(yout));
   144bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if (axis[6] != switchd->lt) {
   144c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
		axis[2] = int(round(xout));
   144c2:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
		axis[3] = int(round(yout));
   144c6:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
        if (axis[6] != switchd->lt) {
   144ca:	792a      	ldrb	r2, [r5, #4]
   144cc:	4293      	cmp	r3, r2
   144ce:	d018      	beq.n	14502 <JoystickController::rx_data(Transfer_struct const*)+0x2ea>
            axis_changed_mask_ |= (1 << 4);
   144d0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        if (axis[5] != switchd->rt) {
   144d4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
            axis_changed_mask_ |= (1 << 4);
   144d6:	f043 0310 	orr.w	r3, r3, #16
            anychange = true;
   144da:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
            axis[6] = switchd->lt;
   144de:	6622      	str	r2, [r4, #96]	; 0x60
            axis_changed_mask_ |= (1 << 4);
   144e0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        if (axis[5] != switchd->rt) {
   144e4:	796a      	ldrb	r2, [r5, #5]
            axis_changed_mask_ |= (1 << 4);
   144e6:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
        if (axis[5] != switchd->rt) {
   144ea:	4290      	cmp	r0, r2
   144ec:	f43f aefb 	beq.w	142e6 <JoystickController::rx_data(Transfer_struct const*)+0xce>
            axis_changed_mask_ |= (1 << 5);
   144f0:	f043 0320 	orr.w	r3, r3, #32
            anychange = true;
   144f4:	2001      	movs	r0, #1
            axis[5] = switchd->rt;
   144f6:	65e2      	str	r2, [r4, #92]	; 0x5c
            anychange = true;
   144f8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
            axis_changed_mask_ |= (1 << 5);
   144fc:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
   14500:	e6f1      	b.n	142e6 <JoystickController::rx_data(Transfer_struct const*)+0xce>
        if (axis[5] != switchd->rt) {
   14502:	796a      	ldrb	r2, [r5, #5]
   14504:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14506:	4293      	cmp	r3, r2
   14508:	d145      	bne.n	14596 <JoystickController::rx_data(Transfer_struct const*)+0x37e>
        if (anychange) joystickEvent = true;
   1450a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1450e:	2b00      	cmp	r3, #0
   14510:	f43f ae8f 	beq.w	14232 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
   14514:	e6e7      	b.n	142e6 <JoystickController::rx_data(Transfer_struct const*)+0xce>
					sw_sendSubCmdUSB(0x48, packet, 1);
   14516:	2100      	movs	r1, #0
					packet[0] = 0x01;
   14518:	2301      	movs	r3, #1
					sw_sendSubCmdUSB(0x48, packet, 1);
   1451a:	aa04      	add	r2, sp, #16
   1451c:	9100      	str	r1, [sp, #0]
   1451e:	2148      	movs	r1, #72	; 0x48
					packet[0] = 0x01;
   14520:	f88d 3010 	strb.w	r3, [sp, #16]
					sw_sendSubCmdUSB(0x48, packet, 1);
   14524:	f7ff fae8 	bl	13af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
					connectedComplete_pending_ = 4;
   14528:	2304      	movs	r3, #4
   1452a:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   1452e:	e761      	b.n	143f4 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
					sw_sendSubCmdUSB(0x40, packet, 1);
   14530:	2100      	movs	r1, #0
					packet[0] = 0x01;
   14532:	2301      	movs	r3, #1
					sw_sendSubCmdUSB(0x40, packet, 1);
   14534:	aa04      	add	r2, sp, #16
   14536:	9100      	str	r1, [sp, #0]
   14538:	2140      	movs	r1, #64	; 0x40
					packet[0] = 0x01;
   1453a:	f88d 3010 	strb.w	r3, [sp, #16]
					sw_sendSubCmdUSB(0x40, packet, 1);
   1453e:	f7ff fadb 	bl	13af8 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
					connectedComplete_pending_ = 3;
   14542:	2303      	movs	r3, #3
   14544:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   14548:	e754      	b.n	143f4 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
                    sw_sendCmdUSB(0x04, SW_CMD_TIMEOUT);
   1454a:	4a0e      	ldr	r2, [pc, #56]	; (14584 <JoystickController::rx_data(Transfer_struct const*)+0x36c>)
   1454c:	2104      	movs	r1, #4
   1454e:	f7ff fa17 	bl	13980 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
					connectedComplete_pending_ = 2;
   14552:	2302      	movs	r3, #2
   14554:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   14558:	e74c      	b.n	143f4 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
                    sw_sendCmdUSB(0x02, SW_CMD_TIMEOUT);
   1455a:	4a0a      	ldr	r2, [pc, #40]	; (14584 <JoystickController::rx_data(Transfer_struct const*)+0x36c>)
   1455c:	2102      	movs	r1, #2
   1455e:	f7ff fa0f 	bl	13980 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
					connectedComplete_pending_ = 1;
   14562:	2301      	movs	r3, #1
   14564:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   14568:	e744      	b.n	143f4 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
   1456a:	bf00      	nop
   1456c:	f3af 8000 	nop.w
   14570:	0000003f 	.word	0x0000003f
	...
   14580:	200026c0 	.word	0x200026c0
   14584:	0003d090 	.word	0x0003d090
            if (axis[5] != xb360d->rt) {
   14588:	7a5b      	ldrb	r3, [r3, #9]
   1458a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1458c:	429a      	cmp	r2, r3
   1458e:	d0bc      	beq.n	1450a <JoystickController::rx_data(Transfer_struct const*)+0x2f2>
                axis_changed_mask_ |= (1 << 4);
   14590:	e9d4 2154 	ldrd	r2, r1, [r4, #336]	; 0x150
   14594:	e69f      	b.n	142d6 <JoystickController::rx_data(Transfer_struct const*)+0xbe>
            axis_changed_mask_ |= (1 << 4);
   14596:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
   1459a:	e7a9      	b.n	144f0 <JoystickController::rx_data(Transfer_struct const*)+0x2d8>

0001459c <JoystickController::rx_callback(Transfer_struct const*)>:
{
   1459c:	4601      	mov	r1, r0
    if (!transfer->driver) return;
   1459e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   145a0:	b108      	cbz	r0, 145a6 <JoystickController::rx_callback(Transfer_struct const*)+0xa>
    ((JoystickController *)(transfer->driver))->rx_data(transfer);
   145a2:	f7ff be39 	b.w	14218 <JoystickController::rx_data(Transfer_struct const*)>
}
   145a6:	4770      	bx	lr

000145a8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>:
{
   145a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (data[0] == 0x3f) {
   145ac:	780b      	ldrb	r3, [r1, #0]
{
   145ae:	b08d      	sub	sp, #52	; 0x34
   145b0:	4604      	mov	r4, r0
    if (data[0] == 0x3f) {
   145b2:	2b3f      	cmp	r3, #63	; 0x3f
   145b4:	f000 812e 	beq.w	14814 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x26c>
    } else if (data[0] == 0x30) {
   145b8:	2b30      	cmp	r3, #48	; 0x30
   145ba:	d003      	beq.n	145c4 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1c>
}
   145bc:	2000      	movs	r0, #0
   145be:	b00d      	add	sp, #52	; 0x34
   145c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        axis_mask_ = 0x7fff;  // have all of the fields. 
   145c4:	f647 76ff 	movw	r6, #32767	; 0x7fff
   145c8:	2700      	movs	r7, #0
        if(initialPassButton_ == true) {
   145ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
        axis_mask_ = 0x7fff;  // have all of the fields. 
   145ce:	e9c0 6752 	strd	r6, r7, [r0, #328]	; 0x148
        axis_changed_mask_ = 0; // assume none for now
   145d2:	2600      	movs	r6, #0
   145d4:	2700      	movs	r7, #0
   145d6:	e9c0 6754 	strd	r6, r7, [r0, #336]	; 0x150
        uint32_t cur_buttons = data[3] | (data[4] << 8) | (data[5] << 16);
   145da:	794a      	ldrb	r2, [r1, #5]
   145dc:	7908      	ldrb	r0, [r1, #4]
   145de:	0412      	lsls	r2, r2, #16
   145e0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   145e4:	78c8      	ldrb	r0, [r1, #3]
   145e6:	4302      	orrs	r2, r0
        if(initialPassButton_ == true) {
   145e8:	2b00      	cmp	r3, #0
   145ea:	f040 8167 	bne.w	148bc <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x314>
        cur_buttons = cur_buttons - buttonOffset_;
   145ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   145f0:	1ad2      	subs	r2, r2, r3
        if (cur_buttons != buttons) {
   145f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   145f4:	4293      	cmp	r3, r2
   145f6:	d005      	beq.n	14604 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x5c>
            anychange = true;
   145f8:	2301      	movs	r3, #1
            buttons = cur_buttons;
   145fa:	6462      	str	r2, [r4, #68]	; 0x44
            anychange = true;
   145fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
            joystickEvent = true;
   14600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14604:	79cf      	ldrb	r7, [r1, #7]
        if(buttons == 0x40) {   //R1
   14606:	2a40      	cmp	r2, #64	; 0x40
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   14608:	7a8d      	ldrb	r5, [r1, #10]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   1460a:	ea4f 2c07 	mov.w	ip, r7, lsl #8
        new_axis[1] = (data[7] >> 4) | (data[8] << 4);    //yl
   1460e:	7a08      	ldrb	r0, [r1, #8]
   14610:	ea4f 1717 	mov.w	r7, r7, lsr #4
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   14614:	7a4e      	ldrb	r6, [r1, #9]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14616:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
   1461a:	798b      	ldrb	r3, [r1, #6]
        new_axis[1] = (data[7] >> 4) | (data[8] << 4);    //yl
   1461c:	ea47 1700 	orr.w	r7, r7, r0, lsl #4
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   14620:	ea4f 2005 	mov.w	r0, r5, lsl #8
        new_axis[3] = (data[10] >> 4) | (data[11] << 4);  //yr
   14624:	ea4f 1515 	mov.w	r5, r5, lsr #4
        new_axis[1] = (data[7] >> 4) | (data[8] << 4);    //yl
   14628:	f8ad 7016 	strh.w	r7, [sp, #22]
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   1462c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   14630:	ea46 0600 	orr.w	r6, r6, r0
        new_axis[3] = (data[10] >> 4) | (data[11] << 4);  //yr
   14634:	7ac8      	ldrb	r0, [r1, #11]
   14636:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   1463a:	ea43 000c 	orr.w	r0, r3, ip
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   1463e:	f8ad 6018 	strh.w	r6, [sp, #24]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14642:	4683      	mov	fp, r0
        new_axis[3] = (data[10] >> 4) | (data[11] << 4);  //yr
   14644:	f8ad 501a 	strh.w	r5, [sp, #26]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14648:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(buttons == 0x40) {   //R1
   1464c:	f000 814a 	beq.w	148e4 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x33c>
            new_axis[5] = 0;
   14650:	f04f 0c00 	mov.w	ip, #0
        if(buttons == 0x400000) {   //L1
   14654:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
            new_axis[5] = 0;
   14658:	f8ad c01e 	strh.w	ip, [sp, #30]
        if(buttons == 0x400000) {   //L1
   1465c:	f040 8139 	bne.w	148d2 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x32a>
            new_axis[6] = 0;
   14660:	f8ad c020 	strh.w	ip, [sp, #32]
            new_axis[4] = 1;
   14664:	f04f 0c01 	mov.w	ip, #1
   14668:	f8ad c01c 	strh.w	ip, [sp, #28]
            new_axis[7] = 0;
   1466c:	f04f 0c00 	mov.w	ip, #0
        if(buttons == 0x800080) {
   14670:	f1b2 1f80 	cmp.w	r2, #8388736	; 0x800080
            new_axis[7] = 0;
   14674:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
        if(buttons == 0x800080) {
   14678:	d102      	bne.n	14680 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
            new_axis[6] = 0xff;
   1467a:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
   1467e:	9208      	str	r2, [sp, #32]
        sw_update_axis(8, (int16_t)(data[13]  | (data[14] << 8))); //ax
   14680:	f9b1 200d 	ldrsh.w	r2, [r1, #13]
    if (axis[axis_index] != new_value) {
   14684:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14686:	429a      	cmp	r2, r3
   14688:	d009      	beq.n	1469e <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xf6>
        axis_changed_mask_ |= (1 << axis_index);
   1468a:	f44f 7880 	mov.w	r8, #256	; 0x100
   1468e:	f04f 0900 	mov.w	r9, #0
        axis[axis_index] = new_value;
   14692:	66a2      	str	r2, [r4, #104]	; 0x68
        anychange = true;
   14694:	2201      	movs	r2, #1
        axis_changed_mask_ |= (1 << axis_index);
   14696:	e9c4 8954 	strd	r8, r9, [r4, #336]	; 0x150
        anychange = true;
   1469a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(9, (int16_t)(data[15]  | (data[16] << 8))); //ay
   1469e:	f9b1 200f 	ldrsh.w	r2, [r1, #15]
    if (axis[axis_index] != new_value) {
   146a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   146a4:	429a      	cmp	r2, r3
   146a6:	d009      	beq.n	146bc <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x114>
        axis[axis_index] = new_value;
   146a8:	66e2      	str	r2, [r4, #108]	; 0x6c
        axis_changed_mask_ |= (1 << axis_index);
   146aa:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   146ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   146b2:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   146b6:	2201      	movs	r2, #1
   146b8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(10,  (int16_t)(data[17] | (data[18] << 8))); //az
   146bc:	f9b1 2011 	ldrsh.w	r2, [r1, #17]
    if (axis[axis_index] != new_value) {
   146c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   146c2:	429a      	cmp	r2, r3
   146c4:	d009      	beq.n	146da <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x132>
        axis[axis_index] = new_value;
   146c6:	6722      	str	r2, [r4, #112]	; 0x70
        axis_changed_mask_ |= (1 << axis_index);
   146c8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   146cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   146d0:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   146d4:	2201      	movs	r2, #1
   146d6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(11,  (int16_t)(data[19] | (data[20] << 8)));  //gx
   146da:	f9b1 2013 	ldrsh.w	r2, [r1, #19]
    if (axis[axis_index] != new_value) {
   146de:	6f63      	ldr	r3, [r4, #116]	; 0x74
   146e0:	429a      	cmp	r2, r3
   146e2:	d009      	beq.n	146f8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x150>
        axis[axis_index] = new_value;
   146e4:	6762      	str	r2, [r4, #116]	; 0x74
        axis_changed_mask_ |= (1 << axis_index);
   146e6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   146ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   146ee:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   146f2:	2201      	movs	r2, #1
   146f4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(12,  (int16_t)(data[21] | (data[22] << 8))); //gy
   146f8:	f9b1 2015 	ldrsh.w	r2, [r1, #21]
    if (axis[axis_index] != new_value) {
   146fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   146fe:	429a      	cmp	r2, r3
   14700:	d009      	beq.n	14716 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x16e>
        axis[axis_index] = new_value;
   14702:	67a2      	str	r2, [r4, #120]	; 0x78
        axis_changed_mask_ |= (1 << axis_index);
   14704:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   14708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1470c:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   14710:	2201      	movs	r2, #1
   14712:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(13,  (int16_t)(data[23] | (data[24] << 8))); //gz  
   14716:	f9b1 2017 	ldrsh.w	r2, [r1, #23]
    if (axis[axis_index] != new_value) {
   1471a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1471c:	429a      	cmp	r2, r3
   1471e:	d009      	beq.n	14734 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x18c>
        axis[axis_index] = new_value;
   14720:	67e2      	str	r2, [r4, #124]	; 0x7c
        axis_changed_mask_ |= (1 << axis_index);
   14722:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   14726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1472a:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   1472e:	2201      	movs	r2, #1
   14730:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(14,  data[2] >> 4);  //Battery level, 8=full, 6=medium, 4=low, 2=critical, 0=empty
   14734:	788a      	ldrb	r2, [r1, #2]
    if (axis[axis_index] != new_value) {
   14736:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        sw_update_axis(14,  data[2] >> 4);  //Battery level, 8=full, 6=medium, 4=low, 2=critical, 0=empty
   1473a:	0911      	lsrs	r1, r2, #4
    if (axis[axis_index] != new_value) {
   1473c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   14740:	d00a      	beq.n	14758 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1b0>
        axis_changed_mask_ |= (1 << axis_index);
   14742:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        axis[axis_index] = new_value;
   14746:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        axis_changed_mask_ |= (1 << axis_index);
   1474a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1474e:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   14752:	2201      	movs	r2, #1
   14754:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        axis_changed_mask_ |= (1 << axis_index);
   14758:	f104 0244 	add.w	r2, r4, #68	; 0x44
   1475c:	f10d 0c14 	add.w	ip, sp, #20
   14760:	f104 0864 	add.w	r8, r4, #100	; 0x64
            axis[7] = 1;
   14764:	2100      	movs	r1, #0
                axis_changed_mask_ |= (1 << i);
   14766:	f04f 0e01 	mov.w	lr, #1
   1476a:	e001      	b.n	14770 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1c8>
            if (new_axis[i] != axis[i]) {
   1476c:	f83c 0f02 	ldrh.w	r0, [ip, #2]!
   14770:	f852 af04 	ldr.w	sl, [r2, #4]!
                axis_changed_mask_ |= (1 << i);
   14774:	fa0e f901 	lsl.w	r9, lr, r1
        for (uint8_t i = 0; i < 8; i++) {
   14778:	3101      	adds	r1, #1
            if (new_axis[i] != axis[i]) {
   1477a:	4550      	cmp	r0, sl
   1477c:	d00e      	beq.n	1479c <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1f4>
                axis[i] = new_axis[i];
   1477e:	6010      	str	r0, [r2, #0]
                axis_changed_mask_ |= (1 << i);
   14780:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                anychange = true;
   14784:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << i);
   14788:	ea40 0009 	orr.w	r0, r0, r9
   1478c:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14790:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   14794:	ea40 70e9 	orr.w	r0, r0, r9, asr #31
   14798:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        for (uint8_t i = 0; i < 8; i++) {
   1479c:	4542      	cmp	r2, r8
   1479e:	d1e5      	bne.n	1476c <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1c4>
		CalcAnalogStick(xout, yout, new_axis[0], new_axis[1], true);
   147a0:	9700      	str	r7, [sp, #0]
   147a2:	2701      	movs	r7, #1
   147a4:	465b      	mov	r3, fp
   147a6:	4620      	mov	r0, r4
   147a8:	aa04      	add	r2, sp, #16
   147aa:	a903      	add	r1, sp, #12
   147ac:	9701      	str	r7, [sp, #4]
   147ae:	f7ff fc7b 	bl	140a8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
   147b2:	ed9d 7a03 	vldr	s14, [sp, #12]
   147b6:	eddd 7a04 	vldr	s15, [sp, #16]
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   147ba:	4633      	mov	r3, r6
   147bc:	feb8 7a47 	vrinta.f32	s14, s14
		axis[0] = int(round(xout));
   147c0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   147c4:	fef8 7a67 	vrinta.f32	s15, s15
		axis[1] = int(round(yout));
   147c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   147cc:	9500      	str	r5, [sp, #0]
   147ce:	4620      	mov	r0, r4
   147d0:	9701      	str	r7, [sp, #4]
   147d2:	aa04      	add	r2, sp, #16
		axis[0] = int(round(xout));
   147d4:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   147d8:	a903      	add	r1, sp, #12
		axis[1] = int(round(yout));
   147da:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   147de:	f7ff fc63 	bl	140a8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
   147e2:	ed9d 7a03 	vldr	s14, [sp, #12]
   147e6:	eddd 7a04 	vldr	s15, [sp, #16]
        initialPass_ = false;
   147ea:	2300      	movs	r3, #0
   147ec:	feb8 7a47 	vrinta.f32	s14, s14
		axis[2] = int(round(xout));
   147f0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   147f4:	fef8 7a67 	vrinta.f32	s15, s15
		axis[3] = int(round(yout));
   147f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
}
   147fc:	2000      	movs	r0, #0
        joystickEvent = true;
   147fe:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
        initialPass_ = false;
   14802:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		axis[2] = int(round(xout));
   14806:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
		axis[3] = int(round(yout));
   1480a:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
   1480e:	b00d      	add	sp, #52	; 0x34
   14810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sw1d->buttons != buttons) {
   14814:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        axis_mask_ = 0x1ff;
   14818:	f240 16ff 	movw	r6, #511	; 0x1ff
   1481c:	2700      	movs	r7, #0
        if (sw1d->buttons != buttons) {
   1481e:	6c42      	ldr	r2, [r0, #68]	; 0x44
        axis_mask_ = 0x1ff;
   14820:	e9c0 6752 	strd	r6, r7, [r0, #328]	; 0x148
        if (sw1d->buttons != buttons) {
   14824:	4293      	cmp	r3, r2
        axis_changed_mask_ = 0; // assume none for now
   14826:	f04f 0600 	mov.w	r6, #0
   1482a:	f04f 0700 	mov.w	r7, #0
   1482e:	e9c0 6754 	strd	r6, r7, [r0, #336]	; 0x150
        if (sw1d->buttons != buttons) {
   14832:	d005      	beq.n	14840 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x298>
            anychange = true;
   14834:	2201      	movs	r2, #1
            buttons = sw1d->buttons;
   14836:	6443      	str	r3, [r0, #68]	; 0x44
            anychange = true;
   14838:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
            joystickEvent = true;
   1483c:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
        if (sw1d->hat != axis[9]) {
   14840:	78ca      	ldrb	r2, [r1, #3]
   14842:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   14844:	4282      	cmp	r2, r0
   14846:	d008      	beq.n	1485a <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x2b2>
            axis_changed_mask_ |= (1 << 9);
   14848:	f44f 7600 	mov.w	r6, #512	; 0x200
   1484c:	2700      	movs	r7, #0
            axis[9] = sw1d->hat;
   1484e:	66e2      	str	r2, [r4, #108]	; 0x6c
            anychange = true;            
   14850:	2201      	movs	r2, #1
            axis_changed_mask_ |= (1 << 9);
   14852:	e9c4 6754 	strd	r6, r7, [r4, #336]	; 0x150
            anychange = true;            
   14856:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        if(buttons == 0x8000) { //ZL
   1485a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
            axis[7] = 1;
   1485e:	2200      	movs	r2, #0
   14860:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 14918 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x370>
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   14864:	2701      	movs	r7, #1
        if(buttons == 0x8000) { //ZL
   14866:	fab3 f383 	clz	r3, r3
   1486a:	095b      	lsrs	r3, r3, #5
            axis[7] = 1;
   1486c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   14870:	4613      	mov	r3, r2
        for (uint8_t i = 0; i < sizeof (switch_bt_axis_order_mapping); i++) {
   14872:	eb04 0583 	add.w	r5, r4, r3, lsl #2
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   14876:	fa07 f303 	lsl.w	r3, r7, r3
            int axis_value = (uint16_t)sw1d->axis[i];
   1487a:	eb01 0042 	add.w	r0, r1, r2, lsl #1
   1487e:	3201      	adds	r2, #1
            if (axis_value != axis[switch_bt_axis_order_mapping[i]]) {
   14880:	6cae      	ldr	r6, [r5, #72]	; 0x48
            int axis_value = (uint16_t)sw1d->axis[i];
   14882:	8880      	ldrh	r0, [r0, #4]
            if (axis_value != axis[switch_bt_axis_order_mapping[i]]) {
   14884:	4286      	cmp	r6, r0
   14886:	d00d      	beq.n	148a4 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x2fc>
                axis[switch_bt_axis_order_mapping[i]] = axis_value;
   14888:	64a8      	str	r0, [r5, #72]	; 0x48
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   1488a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                anychange = true;
   1488e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   14892:	4318      	orrs	r0, r3
   14894:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14898:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   1489c:	ea40 70e3 	orr.w	r0, r0, r3, asr #31
   148a0:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        for (uint8_t i = 0; i < sizeof (switch_bt_axis_order_mapping); i++) {
   148a4:	2a04      	cmp	r2, #4
   148a6:	d002      	beq.n	148ae <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x306>
            if (axis_value != axis[switch_bt_axis_order_mapping[i]]) {
   148a8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   148ac:	e7e1      	b.n	14872 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x2ca>
        joystickEvent = true;
   148ae:	2301      	movs	r3, #1
}
   148b0:	2000      	movs	r0, #0
        joystickEvent = true;
   148b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
   148b6:	b00d      	add	sp, #52	; 0x34
   148b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(cur_buttons == 0x8000) {
   148bc:	f5a2 4300 	sub.w	r3, r2, #32768	; 0x8000
            initialPassButton_ = false;
   148c0:	2000      	movs	r0, #0
            if(cur_buttons == 0x8000) {
   148c2:	fab3 f383 	clz	r3, r3
            initialPassButton_ = false;
   148c6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            if(cur_buttons == 0x8000) {
   148ca:	095b      	lsrs	r3, r3, #5
   148cc:	03db      	lsls	r3, r3, #15
   148ce:	63e3      	str	r3, [r4, #60]	; 0x3c
            initialPassButton_ = false;
   148d0:	e68e      	b.n	145f0 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x48>
        if(buttons == 0x400040) {
   148d2:	f1b2 1f40 	cmp.w	r2, #4194368	; 0x400040
   148d6:	d10e      	bne.n	148f6 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x34e>
            new_axis[4] = 0xff;
   148d8:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
            new_axis[6] = 0;
   148dc:	f8cd c020 	str.w	ip, [sp, #32]
            new_axis[4] = 0xff;
   148e0:	9207      	str	r2, [sp, #28]
   148e2:	e6cd      	b.n	14680 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
            new_axis[4] = 0;
   148e4:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
   148e8:	f8cd c01c 	str.w	ip, [sp, #28]
            new_axis[6] = 0;
   148ec:	f04f 0c00 	mov.w	ip, #0
   148f0:	f8ad c020 	strh.w	ip, [sp, #32]
        if(buttons == 0x80) {       //ZR
   148f4:	e6ba      	b.n	1466c <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xc4>
        if(buttons == 0x800000) {   //ZL
   148f6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
            new_axis[4] = 0;
   148fa:	f8ad c01c 	strh.w	ip, [sp, #28]
        if(buttons == 0x800000) {   //ZL
   148fe:	d102      	bne.n	14906 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x35e>
            new_axis[6] = 0xff;
   14900:	22ff      	movs	r2, #255	; 0xff
   14902:	9208      	str	r2, [sp, #32]
        if(buttons == 0x800080) {
   14904:	e6bc      	b.n	14680 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
        if(buttons == 0x80) {       //ZR
   14906:	2a80      	cmp	r2, #128	; 0x80
            new_axis[6] = 0;
   14908:	f8ad c020 	strh.w	ip, [sp, #32]
        if(buttons == 0x80) {       //ZR
   1490c:	f47f aeae 	bne.w	1466c <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xc4>
            new_axis[7] = 0xff;
   14910:	22ff      	movs	r2, #255	; 0xff
   14912:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
        if(buttons == 0x800080) {
   14916:	e6b3      	b.n	14680 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
   14918:	200080fc 	.word	0x200080fc

0001491c <JoystickController::hid_process_in_data(Transfer_struct const*)>:
{
   1491c:	b530      	push	{r4, r5, lr}
    uint8_t *buffer = (uint8_t *)transfer->buffer;
   1491e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
{
   14920:	b083      	sub	sp, #12
   14922:	4604      	mov	r4, r0
    if (*buffer) report_id_ = *buffer;
   14924:	782b      	ldrb	r3, [r5, #0]
   14926:	b163      	cbz	r3, 14942 <JoystickController::hid_process_in_data(Transfer_struct const*)+0x26>
    if (!buffer || *buffer == 1) return false; // don't do report 1
   14928:	2b01      	cmp	r3, #1
    if (*buffer) report_id_ = *buffer;
   1492a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    uint8_t cnt = transfer->length;
   1492e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    if (!buffer || *buffer == 1) return false; // don't do report 1
   14930:	d004      	beq.n	1493c <JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>
	if (joystickType_ == SWITCH) {
   14932:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    uint8_t cnt = transfer->length;
   14936:	b2d2      	uxtb	r2, r2
	if (joystickType_ == SWITCH) {
   14938:	2b07      	cmp	r3, #7
   1493a:	d008      	beq.n	1494e <JoystickController::hid_process_in_data(Transfer_struct const*)+0x32>
    if (!buffer || *buffer == 1) return false; // don't do report 1
   1493c:	2000      	movs	r0, #0
}
   1493e:	b003      	add	sp, #12
   14940:	bd30      	pop	{r4, r5, pc}
	if (joystickType_ == SWITCH) {
   14942:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    uint8_t cnt = transfer->length;
   14946:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
	if (joystickType_ == SWITCH) {
   1494a:	2b07      	cmp	r3, #7
   1494c:	d1f6      	bne.n	1493c <JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>
        if (sw_handle_usb_init_of_joystick(buffer, cnt, false))
   1494e:	b292      	uxth	r2, r2
   14950:	2300      	movs	r3, #0
   14952:	4629      	mov	r1, r5
   14954:	4620      	mov	r0, r4
   14956:	9201      	str	r2, [sp, #4]
   14958:	f7ff fa0a 	bl	13d70 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
   1495c:	9a01      	ldr	r2, [sp, #4]
   1495e:	2800      	cmp	r0, #0
   14960:	d1ed      	bne.n	1493e <JoystickController::hid_process_in_data(Transfer_struct const*)+0x22>
		sw_process_HID_data(buffer, cnt);
   14962:	4629      	mov	r1, r5
   14964:	4620      	mov	r0, r4
   14966:	f7ff fe1f 	bl	145a8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>
        return true; // don't let main hid code process this.		
   1496a:	2001      	movs	r0, #1
   1496c:	e7e7      	b.n	1493e <JoystickController::hid_process_in_data(Transfer_struct const*)+0x22>
   1496e:	bf00      	nop

00014970 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)>:
{
   14970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14974:	b083      	sub	sp, #12
   14976:	460d      	mov	r5, r1
   14978:	4604      	mov	r4, r0
   1497a:	4690      	mov	r8, r2
    report_id_ = data[0];
   1497c:	780e      	ldrb	r6, [r1, #0]
{
   1497e:	af00      	add	r7, sp, #0
    if (data[0] == 1) {
   14980:	2e01      	cmp	r6, #1
    report_id_ = data[0];
   14982:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    if (data[0] == 1) {
   14986:	f000 80ce 	beq.w	14b26 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x1b6>
    } else if (data[0] == 0x11) {
   1498a:	2e11      	cmp	r6, #17
   1498c:	d009      	beq.n	149a2 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x32>
    } else if (joystickType_ == SWITCH) {
   1498e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   14992:	2b07      	cmp	r3, #7
   14994:	f000 8111 	beq.w	14bba <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x24a>
    return false;
   14998:	2000      	movs	r0, #0
}
   1499a:	370c      	adds	r7, #12
   1499c:	46bd      	mov	sp, r7
   1499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        axis_mask_ = 0;
   149a2:	2300      	movs	r3, #0
   149a4:	2200      	movs	r2, #0
    } else if (joystickType_ == SWITCH) {
   149a6:	4669      	mov	r1, sp
        axis_mask_ = 0;
   149a8:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
        axis_changed_mask_ = 0;
   149ac:	e9c0 2354 	strd	r2, r3, [r0, #336]	; 0x150
        uint8_t tmp_data[length - 2];
   149b0:	f108 0305 	add.w	r3, r8, #5
   149b4:	f1a8 0802 	sub.w	r8, r8, #2
    } else if (joystickType_ == SWITCH) {
   149b8:	ee07 1a90 	vmov	s15, r1
        uint8_t tmp_data[length - 2];
   149bc:	08db      	lsrs	r3, r3, #3
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   149be:	f1b8 0f00 	cmp.w	r8, #0
        uint8_t tmp_data[length - 2];
   149c2:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
   149c6:	469d      	mov	sp, r3
   149c8:	46ec      	mov	ip, sp
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   149ca:	dd0a      	ble.n	149e2 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x72>
   149cc:	2300      	movs	r3, #0
   149ce:	461a      	mov	r2, r3
            tmp_data[i] = data[i + 2];
   149d0:	18e9      	adds	r1, r5, r3
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   149d2:	3301      	adds	r3, #1
   149d4:	b29b      	uxth	r3, r3
            tmp_data[i] = data[i + 2];
   149d6:	7889      	ldrb	r1, [r1, #2]
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   149d8:	4543      	cmp	r3, r8
            tmp_data[i] = data[i + 2];
   149da:	f80c 1002 	strb.w	r1, [ip, r2]
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   149de:	461a      	mov	r2, r3
   149e0:	dbf6      	blt.n	149d0 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x60>
        tmp_data[10] = tmp_data[5] & ((1 << 4) - 1);
   149e2:	f89c 1005 	ldrb.w	r1, [ip, #5]
        tmp_data[7] = (tmp_data[7] >> 0) & 1;
   149e6:	f89c 2007 	ldrb.w	r2, [ip, #7]
        tmp_data[5] = tmp_data[5] >> 4;
   149ea:	090b      	lsrs	r3, r1, #4
        uint32_t cur_buttons = ((uint32_t)tmp_data[7] << 12) | (((uint32_t)tmp_data[6] * 0x10)) | ((uint16_t)tmp_data[5] ) ;
   149ec:	f89c 5006 	ldrb.w	r5, [ip, #6]
        tmp_data[7] = (tmp_data[7] >> 0) & 1;
   149f0:	f002 0201 	and.w	r2, r2, #1
        tmp_data[10] = tmp_data[5] & ((1 << 4) - 1);
   149f4:	f001 000f 	and.w	r0, r1, #15
        tmp_data[5] = tmp_data[5] >> 4;
   149f8:	f88c 3005 	strb.w	r3, [ip, #5]
        uint32_t cur_buttons = ((uint32_t)tmp_data[7] << 12) | (((uint32_t)tmp_data[6] * 0x10)) | ((uint16_t)tmp_data[5] ) ;
   149fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
        tmp_data[7] = (tmp_data[7] >> 0) & 1;
   14a00:	f88c 2007 	strb.w	r2, [ip, #7]
        uint32_t cur_buttons = ((uint32_t)tmp_data[7] << 12) | (((uint32_t)tmp_data[6] * 0x10)) | ((uint16_t)tmp_data[5] ) ;
   14a04:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
        if (tmp_data[10] < 8) cur_buttons |= dpad_to_buttons[tmp_data[10]];
   14a08:	070a      	lsls	r2, r1, #28
        tmp_data[10] = tmp_data[5] & ((1 << 4) - 1);
   14a0a:	f88c 000a 	strb.w	r0, [ip, #10]
        if (tmp_data[10] < 8) cur_buttons |= dpad_to_buttons[tmp_data[10]];
   14a0e:	d403      	bmi.n	14a18 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xa8>
   14a10:	4ac7      	ldr	r2, [pc, #796]	; (14d30 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3c0>)
   14a12:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   14a16:	4313      	orrs	r3, r2
        if (cur_buttons != buttons) {
   14a18:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14a1a:	429a      	cmp	r2, r3
   14a1c:	d003      	beq.n	14a26 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xb6>
            joystickEvent = true;   // something changed.
   14a1e:	2201      	movs	r2, #1
            buttons = cur_buttons;
   14a20:	6463      	str	r3, [r4, #68]	; 0x44
            joystickEvent = true;   // something changed.
   14a22:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        axis_mask_ = 0x27;  // assume bits 0, 1, 2, 5
   14a26:	2227      	movs	r2, #39	; 0x27
   14a28:	2300      	movs	r3, #0
   14a2a:	f104 0144 	add.w	r1, r4, #68	; 0x44
   14a2e:	4666      	mov	r6, ip
   14a30:	f104 0e50 	add.w	lr, r4, #80	; 0x50
   14a34:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
        mask = 0x1;
   14a38:	2301      	movs	r3, #1
   14a3a:	2200      	movs	r2, #0
            if (axis[i] != tmp_data[i + 1]) {
   14a3c:	f851 0f04 	ldr.w	r0, [r1, #4]!
   14a40:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   14a44:	42a8      	cmp	r0, r5
   14a46:	d00a      	beq.n	14a5e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xee>
                axis_changed_mask_ |= mask;
   14a48:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   14a4c:	4318      	orrs	r0, r3
   14a4e:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14a52:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   14a56:	4310      	orrs	r0, r2
   14a58:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
                axis[i] = tmp_data[i + 1];
   14a5c:	600d      	str	r5, [r1, #0]
            mask <<= 1; // shift down the mask.
   14a5e:	18db      	adds	r3, r3, r3
   14a60:	4152      	adcs	r2, r2
        for (uint16_t i = 0; i < 3; i++) {
   14a62:	4571      	cmp	r1, lr
   14a64:	d1ea      	bne.n	14a3c <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xcc>
        if (axis[5] != tmp_data[4]) {
   14a66:	f89c 2004 	ldrb.w	r2, [ip, #4]
   14a6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14a6c:	4293      	cmp	r3, r2
   14a6e:	d006      	beq.n	14a7e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x10e>
            axis_changed_mask_ |= (1 << 5);
   14a70:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
            axis[5] = tmp_data[4];
   14a74:	65e2      	str	r2, [r4, #92]	; 0x5c
            axis_changed_mask_ |= (1 << 5);
   14a76:	f043 0320 	orr.w	r3, r3, #32
   14a7a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        if (axis[3] != tmp_data[8]) {
   14a7e:	f89c 2008 	ldrb.w	r2, [ip, #8]
   14a82:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14a84:	4293      	cmp	r3, r2
   14a86:	d006      	beq.n	14a96 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x126>
            axis_changed_mask_ |= (1 << 3);
   14a88:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
            axis[3] = tmp_data[8];
   14a8c:	6562      	str	r2, [r4, #84]	; 0x54
            axis_changed_mask_ |= (1 << 3);
   14a8e:	f043 0308 	orr.w	r3, r3, #8
   14a92:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        if (axis[4] != tmp_data[9]) {
   14a96:	f89c 2009 	ldrb.w	r2, [ip, #9]
   14a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14a9c:	4293      	cmp	r3, r2
   14a9e:	d006      	beq.n	14aae <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x13e>
            axis_changed_mask_ |= (1 << 4);
   14aa0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
            axis[4] = tmp_data[9];
   14aa4:	65a2      	str	r2, [r4, #88]	; 0x58
            axis_changed_mask_ |= (1 << 4);
   14aa6:	f043 0310 	orr.w	r3, r3, #16
   14aaa:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        mask = 0x1;
   14aae:	f04f 0e00 	mov.w	lr, #0
   14ab2:	f10c 0c05 	add.w	ip, ip, #5
   14ab6:	f104 0160 	add.w	r1, r4, #96	; 0x60
   14aba:	f504 79a4 	add.w	r9, r4, #328	; 0x148
   14abe:	f04f 0827 	mov.w	r8, #39	; 0x27
   14ac2:	2301      	movs	r3, #1
   14ac4:	4672      	mov	r2, lr
            axis_mask_ |= mask;
   14ac6:	ea4e 0002 	orr.w	r0, lr, r2
            if (tmp_data[i] != axis[i]) {
   14aca:	f851 ab04 	ldr.w	sl, [r1], #4
            axis_mask_ |= mask;
   14ace:	ea48 0603 	orr.w	r6, r8, r3
   14ad2:	4605      	mov	r5, r0
   14ad4:	6078      	str	r0, [r7, #4]
            if (tmp_data[i] != axis[i]) {
   14ad6:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
            axis_mask_ |= mask;
   14ada:	46b0      	mov	r8, r6
   14adc:	46ae      	mov	lr, r5
            if (tmp_data[i] != axis[i]) {
   14ade:	4550      	cmp	r0, sl
   14ae0:	d00b      	beq.n	14afa <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x18a>
                axis_changed_mask_ |= mask;
   14ae2:	f8d4 5150 	ldr.w	r5, [r4, #336]	; 0x150
   14ae6:	ea45 0a03 	orr.w	sl, r5, r3
   14aea:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
   14aee:	ea45 0b02 	orr.w	fp, r5, r2
   14af2:	e9c4 ab54 	strd	sl, fp, [r4, #336]	; 0x150
                axis[i] = tmp_data[i];
   14af6:	f841 0c04 	str.w	r0, [r1, #-4]
            mask <<= 1; // shift down the mask.
   14afa:	18db      	adds	r3, r3, r3
   14afc:	4152      	adcs	r2, r2
        for (uint16_t i = 6; i < (64); i++ ) {
   14afe:	4549      	cmp	r1, r9
   14b00:	d1e1      	bne.n	14ac6 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x156>
        joystickEvent = true;
   14b02:	2301      	movs	r3, #1
   14b04:	687a      	ldr	r2, [r7, #4]
   14b06:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
    return false;
   14b0a:	2000      	movs	r0, #0
        joystickEvent = true;
   14b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
   14b10:	370c      	adds	r7, #12
        connected_ = true;
   14b12:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
   14b16:	ee17 3a90 	vmov	r3, s15
   14b1a:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
   14b1e:	469d      	mov	sp, r3
}
   14b20:	46bd      	mov	sp, r7
   14b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (length > TOTAL_AXIS_COUNT) length = TOTAL_AXIS_COUNT;   // don't overflow arrays...
   14b26:	2a40      	cmp	r2, #64	; 0x40
        if (joystickType_ == PS3) {
   14b28:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   14b2c:	4694      	mov	ip, r2
   14b2e:	bf28      	it	cs
   14b30:	f04f 0c40 	movcs.w	ip, #64	; 0x40
   14b34:	2b01      	cmp	r3, #1
   14b36:	d04c      	beq.n	14bd2 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x262>
        } else if (joystickType_ == PS3_MOTION) {
   14b38:	2b05      	cmp	r3, #5
   14b3a:	f000 80bd 	beq.w	14cb8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x348>
        } else if (joystickType_ == XBOXONE) {
   14b3e:	2b03      	cmp	r3, #3
   14b40:	f000 80f8 	beq.w	14d34 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3c4>
            axis_mask_ = 0;
   14b44:	2300      	movs	r3, #0
   14b46:	2200      	movs	r2, #0
   14b48:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14b4c:	e9d0 3154 	ldrd	r3, r1, [r0, #336]	; 0x150
            for (uint16_t i = 0; i < length; i++ ) {
   14b50:	f1b8 0f00 	cmp.w	r8, #0
   14b54:	d020      	beq.n	14b98 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14b56:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14b5a:	2500      	movs	r5, #0
   14b5c:	f100 0944 	add.w	r9, r0, #68	; 0x44
   14b60:	46ae      	mov	lr, r5
            for (uint16_t i = 0; i < length; i++ ) {
   14b62:	4628      	mov	r0, r5
            uint64_t mask = 0x1;
   14b64:	462a      	mov	r2, r5
                axis_mask_ |= mask;
   14b66:	4335      	orrs	r5, r6
   14b68:	ea42 0e0e 	orr.w	lr, r2, lr
                if (data[i] != axis[i]) {
   14b6c:	f859 af04 	ldr.w	sl, [r9, #4]!
            for (uint16_t i = 0; i < length; i++ ) {
   14b70:	3001      	adds	r0, #1
                axis_mask_ |= mask;
   14b72:	e9c4 5e52 	strd	r5, lr, [r4, #328]	; 0x148
                if (data[i] != axis[i]) {
   14b76:	f818 bf01 	ldrb.w	fp, [r8, #1]!
            for (uint16_t i = 0; i < length; i++ ) {
   14b7a:	b280      	uxth	r0, r0
                if (data[i] != axis[i]) {
   14b7c:	45d3      	cmp	fp, sl
   14b7e:	d007      	beq.n	14b90 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x220>
                    axis_changed_mask_ |= mask;
   14b80:	4333      	orrs	r3, r6
   14b82:	4311      	orrs	r1, r2
   14b84:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i] = data[i];
   14b88:	f898 a000 	ldrb.w	sl, [r8]
   14b8c:	f8c9 a000 	str.w	sl, [r9]
                mask <<= 1; // shift down the mask.
   14b90:	19b6      	adds	r6, r6, r6
   14b92:	4152      	adcs	r2, r2
            for (uint16_t i = 0; i < length; i++ ) {
   14b94:	4584      	cmp	ip, r0
   14b96:	d8e6      	bhi.n	14b66 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x1f6>
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14b98:	e9d4 0256 	ldrd	r0, r2, [r4, #344]	; 0x158
   14b9c:	4003      	ands	r3, r0
   14b9e:	4011      	ands	r1, r2
   14ba0:	430b      	orrs	r3, r1
   14ba2:	d002      	beq.n	14baa <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x23a>
            joystickEvent = true;
   14ba4:	2301      	movs	r3, #1
   14ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        connected_ = true;
   14baa:	2301      	movs	r3, #1
}
   14bac:	370c      	adds	r7, #12
        return true;
   14bae:	4618      	mov	r0, r3
        connected_ = true;
   14bb0:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   14bb4:	46bd      	mov	sp, r7
   14bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sw_handle_bt_init_of_joystick(data, length, false))
   14bba:	2300      	movs	r3, #0
   14bbc:	f7ff f9b4 	bl	13f28 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>
   14bc0:	2800      	cmp	r0, #0
   14bc2:	f47f aeea 	bne.w	1499a <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2a>
        return sw_process_HID_data(data, length);
   14bc6:	4642      	mov	r2, r8
   14bc8:	4629      	mov	r1, r5
   14bca:	4620      	mov	r0, r4
   14bcc:	f7ff fcec 	bl	145a8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>
   14bd0:	e6e3      	b.n	1499a <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2a>
            uint32_t cur_buttons = data[2] | ((uint16_t)data[3] << 8) | ((uint32_t)data[4] << 16);
   14bd2:	7909      	ldrb	r1, [r1, #4]
   14bd4:	886a      	ldrh	r2, [r5, #2]
   14bd6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
            if (cur_buttons != buttons) {
   14bda:	6c41      	ldr	r1, [r0, #68]	; 0x44
   14bdc:	4291      	cmp	r1, r2
   14bde:	d002      	beq.n	14be6 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x276>
                buttons = cur_buttons;
   14be0:	6442      	str	r2, [r0, #68]	; 0x44
                joystickEvent = true;   // something changed.
   14be2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
            axis_mask_ = 0x27;  // assume bits 0, 1, 2, 5
   14be6:	2227      	movs	r2, #39	; 0x27
   14be8:	2300      	movs	r3, #0
   14bea:	f104 0644 	add.w	r6, r4, #68	; 0x44
   14bee:	f105 0e05 	add.w	lr, r5, #5
   14bf2:	f104 0950 	add.w	r9, r4, #80	; 0x50
            uint64_t mask = 0x1;
   14bf6:	2000      	movs	r0, #0
            axis_mask_ = 0x27;  // assume bits 0, 1, 2, 5
   14bf8:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14bfc:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
            uint64_t mask = 0x1;
   14c00:	2201      	movs	r2, #1
                if (axis[i] != data[i + 6]) {
   14c02:	f81e af01 	ldrb.w	sl, [lr, #1]!
   14c06:	f856 bf04 	ldr.w	fp, [r6, #4]!
   14c0a:	45d3      	cmp	fp, sl
   14c0c:	d007      	beq.n	14c1e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2ae>
                    axis_changed_mask_ |= mask;
   14c0e:	4313      	orrs	r3, r2
   14c10:	4301      	orrs	r1, r0
   14c12:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i] = data[i + 6];
   14c16:	f89e a000 	ldrb.w	sl, [lr]
   14c1a:	f8c6 a000 	str.w	sl, [r6]
                mask <<= 1; // shift down the mask.
   14c1e:	1892      	adds	r2, r2, r2
   14c20:	4140      	adcs	r0, r0
            for (uint16_t i = 0; i < 3; i++) {
   14c22:	45b1      	cmp	r9, r6
   14c24:	d1ed      	bne.n	14c02 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x292>
            if (axis[5] != data[9]) {
   14c26:	7a68      	ldrb	r0, [r5, #9]
   14c28:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   14c2a:	4282      	cmp	r2, r0
   14c2c:	d005      	beq.n	14c3a <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2ca>
                axis_changed_mask_ |= (1 << 5);
   14c2e:	f043 0320 	orr.w	r3, r3, #32
   14c32:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                axis[5] = data[9];
   14c36:	7a6a      	ldrb	r2, [r5, #9]
   14c38:	65e2      	str	r2, [r4, #92]	; 0x5c
            if (axis[3] != data[18]) {
   14c3a:	7ca8      	ldrb	r0, [r5, #18]
   14c3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
   14c3e:	4282      	cmp	r2, r0
   14c40:	d005      	beq.n	14c4e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2de>
                axis_changed_mask_ |= (1 << 3);
   14c42:	f043 0308 	orr.w	r3, r3, #8
   14c46:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                axis[3] = data[18];
   14c4a:	7caa      	ldrb	r2, [r5, #18]
   14c4c:	6562      	str	r2, [r4, #84]	; 0x54
            if (axis[4] != data[19]) {
   14c4e:	7ce8      	ldrb	r0, [r5, #19]
   14c50:	6da2      	ldr	r2, [r4, #88]	; 0x58
   14c52:	4282      	cmp	r2, r0
   14c54:	d005      	beq.n	14c62 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2f2>
                axis_changed_mask_ |= (1 << 4);
   14c56:	f043 0310 	orr.w	r3, r3, #16
   14c5a:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                axis[4] = data[19];
   14c5e:	7cea      	ldrb	r2, [r5, #19]
   14c60:	65a2      	str	r2, [r4, #88]	; 0x58
            for (uint16_t i = 10; i < length; i++ ) {
   14c62:	f1b8 0f0a 	cmp.w	r8, #10
   14c66:	d997      	bls.n	14b98 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14c68:	f105 0a09 	add.w	sl, r5, #9
   14c6c:	2500      	movs	r5, #0
   14c6e:	f104 096c 	add.w	r9, r4, #108	; 0x6c
   14c72:	f04f 0827 	mov.w	r8, #39	; 0x27
   14c76:	46d6      	mov	lr, sl
   14c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14c7c:	4628      	mov	r0, r5
                axis_mask_ |= mask;
   14c7e:	ea42 0808 	orr.w	r8, r2, r8
   14c82:	4305      	orrs	r5, r0
                if (data[i] != axis[i]) {
   14c84:	f859 6f04 	ldr.w	r6, [r9, #4]!
                axis_mask_ |= mask;
   14c88:	e9c4 8552 	strd	r8, r5, [r4, #328]	; 0x148
                if (data[i] != axis[i]) {
   14c8c:	f81e bf01 	ldrb.w	fp, [lr, #1]!
   14c90:	45b3      	cmp	fp, r6
   14c92:	d007      	beq.n	14ca4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x334>
                    axis_changed_mask_ |= mask;
   14c94:	4313      	orrs	r3, r2
   14c96:	4301      	orrs	r1, r0
   14c98:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i] = data[i];
   14c9c:	f89e 6000 	ldrb.w	r6, [lr]
   14ca0:	f8c9 6000 	str.w	r6, [r9]
            for (uint16_t i = 10; i < length; i++ ) {
   14ca4:	f10e 060a 	add.w	r6, lr, #10
                mask <<= 1; // shift down the mask.
   14ca8:	1892      	adds	r2, r2, r2
            for (uint16_t i = 10; i < length; i++ ) {
   14caa:	eba6 060a 	sub.w	r6, r6, sl
                mask <<= 1; // shift down the mask.
   14cae:	4140      	adcs	r0, r0
            for (uint16_t i = 10; i < length; i++ ) {
   14cb0:	b2b6      	uxth	r6, r6
   14cb2:	45b4      	cmp	ip, r6
   14cb4:	d8e3      	bhi.n	14c7e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x30e>
   14cb6:	e76f      	b.n	14b98 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
            uint32_t cur_buttons = data[1] | ((uint16_t)data[2] << 8) | ((uint32_t)data[3] << 16);
   14cb8:	78ca      	ldrb	r2, [r1, #3]
   14cba:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   14cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            if (cur_buttons != buttons) {
   14cc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   14cc4:	429a      	cmp	r2, r3
   14cc6:	d002      	beq.n	14cce <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x35e>
                buttons = cur_buttons;
   14cc8:	6443      	str	r3, [r0, #68]	; 0x44
                joystickEvent = true;   // something changed.
   14cca:	f880 6042 	strb.w	r6, [r0, #66]	; 0x42
            axis_mask_ = 0; // assume bits 0, 1, 2, 5
   14cce:	2200      	movs	r2, #0
   14cd0:	2300      	movs	r3, #0
            for (uint16_t i = 5; i < length; i++ ) {
   14cd2:	f1b8 0f05 	cmp.w	r8, #5
            axis_mask_ = 0; // assume bits 0, 1, 2, 5
   14cd6:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
            for (uint16_t i = 5; i < length; i++ ) {
   14cda:	d978      	bls.n	14dce <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x45e>
   14cdc:	f105 0a04 	add.w	sl, r5, #4
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14ce0:	2500      	movs	r5, #0
   14ce2:	f104 0944 	add.w	r9, r4, #68	; 0x44
            mask = 0x1 << 10;   // setup for other bits
   14ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14cea:	46d6      	mov	lr, sl
   14cec:	46a8      	mov	r8, r5
            mask = 0x1 << 10;   // setup for other bits
   14cee:	4628      	mov	r0, r5
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14cf0:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
                axis_mask_ |= mask;
   14cf4:	4315      	orrs	r5, r2
   14cf6:	ea40 0808 	orr.w	r8, r0, r8
                if (data[i] != axis[i - 5]) {
   14cfa:	f859 6f04 	ldr.w	r6, [r9, #4]!
                axis_mask_ |= mask;
   14cfe:	e9c4 5852 	strd	r5, r8, [r4, #328]	; 0x148
                if (data[i] != axis[i - 5]) {
   14d02:	f81e bf01 	ldrb.w	fp, [lr, #1]!
   14d06:	45b3      	cmp	fp, r6
   14d08:	d007      	beq.n	14d1a <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3aa>
                    axis_changed_mask_ |= mask;
   14d0a:	4313      	orrs	r3, r2
   14d0c:	4301      	orrs	r1, r0
   14d0e:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i - 5] = data[i];
   14d12:	f89e 6000 	ldrb.w	r6, [lr]
   14d16:	f8c9 6000 	str.w	r6, [r9]
            for (uint16_t i = 5; i < length; i++ ) {
   14d1a:	f10e 0605 	add.w	r6, lr, #5
                mask <<= 1; // shift down the mask.
   14d1e:	1892      	adds	r2, r2, r2
            for (uint16_t i = 5; i < length; i++ ) {
   14d20:	eba6 060a 	sub.w	r6, r6, sl
                mask <<= 1; // shift down the mask.
   14d24:	4140      	adcs	r0, r0
            for (uint16_t i = 5; i < length; i++ ) {
   14d26:	b2b6      	uxth	r6, r6
   14d28:	45b4      	cmp	ip, r6
   14d2a:	d8e3      	bhi.n	14cf4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x384>
   14d2c:	e734      	b.n	14b98 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14d2e:	bf00      	nop
   14d30:	20008100 	.word	0x20008100
            axis_mask_ = 0x3f;
   14d34:	203f      	movs	r0, #63	; 0x3f
   14d36:	2100      	movs	r1, #0
                if (xb1d->buttons != buttons) {
   14d38:	6c62      	ldr	r2, [r4, #68]	; 0x44
            axis_mask_ = 0x3f;
   14d3a:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
            axis_changed_mask_ = 0; // assume none for now
   14d3e:	2000      	movs	r0, #0
   14d40:	2100      	movs	r1, #0
   14d42:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
                if (xb1d->buttons != buttons) {
   14d46:	f8d5 300d 	ldr.w	r3, [r5, #13]
   14d4a:	4293      	cmp	r3, r2
   14d4c:	d004      	beq.n	14d58 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3e8>
                    buttons = xb1d->buttons;
   14d4e:	6463      	str	r3, [r4, #68]	; 0x44
                    anychange = true;
   14d50:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
                    joystickEvent = true;
   14d54:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
            mask = 0x1 << 10;   // setup for other bits
   14d58:	f04f 0c00 	mov.w	ip, #0
   14d5c:	f8df e074 	ldr.w	lr, [pc, #116]	; 14dd4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x464>
                        axis_changed_mask_ |= (1 << xbox_bt_axis_order_mapping[i]);
   14d60:	f04f 0801 	mov.w	r8, #1
            mask = 0x1 << 10;   // setup for other bits
   14d64:	4662      	mov	r2, ip
   14d66:	e9d4 a154 	ldrd	sl, r1, [r4, #336]	; 0x150
   14d6a:	e019      	b.n	14da0 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x430>
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14d6c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14d70:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
   14d74:	4298      	cmp	r0, r3
   14d76:	d00d      	beq.n	14d94 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x424>
                        axis_changed_mask_ |= (1 << xbox_bt_axis_order_mapping[i]);
   14d78:	fa08 f202 	lsl.w	r2, r8, r2
                        axis[xbox_bt_axis_order_mapping[i]] = axis_value;
   14d7c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
                        anychange = true;
   14d80:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
                        axis_changed_mask_ |= (1 << xbox_bt_axis_order_mapping[i]);
   14d84:	ea4a 0a02 	orr.w	sl, sl, r2
   14d88:	ea41 71e2 	orr.w	r1, r1, r2, asr #31
   14d8c:	e9c4 a154 	strd	sl, r1, [r4, #336]	; 0x150
                for (uint8_t i = 0; i < sizeof (xbox_axis_order_mapping); i++) {
   14d90:	2e06      	cmp	r6, #6
   14d92:	d017      	beq.n	14dc4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x454>
   14d94:	3601      	adds	r6, #1
   14d96:	f10c 0c01 	add.w	ip, ip, #1
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14d9a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   14d9e:	b2f6      	uxtb	r6, r6
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14da0:	f1bc 0f03 	cmp.w	ip, #3
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14da4:	f102 0912 	add.w	r9, r2, #18
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14da8:	eb05 004c 	add.w	r0, r5, ip, lsl #1
   14dac:	d9de      	bls.n	14d6c <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3fc>
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14dae:	f102 0912 	add.w	r9, r2, #18
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14db2:	eb05 004c 	add.w	r0, r5, ip, lsl #1
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14db6:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14dba:	f9b0 0001 	ldrsh.w	r0, [r0, #1]
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14dbe:	4283      	cmp	r3, r0
   14dc0:	d1da      	bne.n	14d78 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x408>
   14dc2:	e7e5      	b.n	14d90 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x420>
                joystickEvent = true;
   14dc4:	2201      	movs	r2, #1
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14dc6:	4653      	mov	r3, sl
                joystickEvent = true;
   14dc8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   14dcc:	e6e4      	b.n	14b98 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14dce:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
   14dd2:	e6e1      	b.n	14b98 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14dd4:	20008120 	.word	0x20008120

00014dd8 <non-virtual thunk to JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)>:
    virtual bool process_bluetooth_HID_data(const uint8_t *data, uint16_t length);
   14dd8:	f1a0 0018 	sub.w	r0, r0, #24
   14ddc:	f7ff bdc8 	b.w	14970 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)>

00014de0 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)>:
   14de0:	b530      	push	{r4, r5, lr}
   14de2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   14de4:	b083      	sub	sp, #12
   14de6:	782b      	ldrb	r3, [r5, #0]
   14de8:	b163      	cbz	r3, 14e04 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x24>
   14dea:	2b01      	cmp	r3, #1
   14dec:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
   14df0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   14df2:	d004      	beq.n	14dfe <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x1e>
   14df4:	f890 3020 	ldrb.w	r3, [r0, #32]
   14df8:	b2d2      	uxtb	r2, r2
   14dfa:	2b07      	cmp	r3, #7
   14dfc:	d008      	beq.n	14e10 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x30>
   14dfe:	2000      	movs	r0, #0
   14e00:	b003      	add	sp, #12
   14e02:	bd30      	pop	{r4, r5, pc}
   14e04:	f890 3020 	ldrb.w	r3, [r0, #32]
   14e08:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   14e0c:	2b07      	cmp	r3, #7
   14e0e:	d1f6      	bne.n	14dfe <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x1e>
   14e10:	f1a0 040c 	sub.w	r4, r0, #12
   14e14:	b292      	uxth	r2, r2
   14e16:	2300      	movs	r3, #0
   14e18:	4629      	mov	r1, r5
   14e1a:	4620      	mov	r0, r4
   14e1c:	9201      	str	r2, [sp, #4]
   14e1e:	f7fe ffa7 	bl	13d70 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
   14e22:	9a01      	ldr	r2, [sp, #4]
   14e24:	2800      	cmp	r0, #0
   14e26:	d1eb      	bne.n	14e00 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>
   14e28:	4629      	mov	r1, r5
   14e2a:	4620      	mov	r0, r4
   14e2c:	f7ff fbbc 	bl	145a8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>
   14e30:	2001      	movs	r0, #1
   14e32:	e7e5      	b.n	14e00 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>

00014e34 <_GLOBAL__sub_I_ack_rvd>:
struct SWProIMUCalibration {
   14e34:	4a07      	ldr	r2, [pc, #28]	; (14e54 <_GLOBAL__sub_I_ack_rvd+0x20>)
   14e36:	4b08      	ldr	r3, [pc, #32]	; (14e58 <_GLOBAL__sub_I_ack_rvd+0x24>)
   14e38:	6e50      	ldr	r0, [r2, #100]	; 0x64
   14e3a:	f8b2 c068 	ldrh.w	ip, [r2, #104]	; 0x68
   14e3e:	f8b2 1070 	ldrh.w	r1, [r2, #112]	; 0x70
   14e42:	f8c3 0006 	str.w	r0, [r3, #6]
   14e46:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
   14e48:	f8a3 c00a 	strh.w	ip, [r3, #10]
   14e4c:	82d9      	strh	r1, [r3, #22]
   14e4e:	f8c3 0012 	str.w	r0, [r3, #18]
}
   14e52:	4770      	bx	lr
   14e54:	20002124 	.word	0x20002124
   14e58:	2000d6dc 	.word	0x2000d6dc

00014e5c <USBHost::init_Device_Pipe_Transfer_memory()>:
{
   14e5c:	b430      	push	{r4, r5}
	*(Device_t **)device = free_Device_list;
   14e5e:	4c0d      	ldr	r4, [pc, #52]	; (14e94 <USBHost::init_Device_Pipe_Transfer_memory()+0x38>)
	*(Pipe_t **)pipe = free_Pipe_list;
   14e60:	490d      	ldr	r1, [pc, #52]	; (14e98 <USBHost::init_Device_Pipe_Transfer_memory()+0x3c>)
	*(Device_t **)device = free_Device_list;
   14e62:	6825      	ldr	r5, [r4, #0]
   14e64:	4a0d      	ldr	r2, [pc, #52]	; (14e9c <USBHost::init_Device_Pipe_Transfer_memory()+0x40>)
	*(Transfer_t **)transfer = free_Transfer_list;
   14e66:	4b0e      	ldr	r3, [pc, #56]	; (14ea0 <USBHost::init_Device_Pipe_Transfer_memory()+0x44>)
	*(Device_t **)device = free_Device_list;
   14e68:	6015      	str	r5, [r2, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14e6a:	480e      	ldr	r0, [pc, #56]	; (14ea4 <USBHost::init_Device_Pipe_Transfer_memory()+0x48>)
	*(Pipe_t **)pipe = free_Pipe_list;
   14e6c:	680d      	ldr	r5, [r1, #0]
	free_Device_list = device;
   14e6e:	6022      	str	r2, [r4, #0]
	*(Pipe_t **)pipe = free_Pipe_list;
   14e70:	4a0d      	ldr	r2, [pc, #52]	; (14ea8 <USBHost::init_Device_Pipe_Transfer_memory()+0x4c>)
	*(Transfer_t **)transfer = free_Transfer_list;
   14e72:	6804      	ldr	r4, [r0, #0]
	free_Pipe_list = pipe;
   14e74:	600a      	str	r2, [r1, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14e76:	4619      	mov	r1, r3
	*(Pipe_t **)pipe = free_Pipe_list;
   14e78:	6015      	str	r5, [r2, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14e7a:	461a      	mov	r2, r3
   14e7c:	f103 0540 	add.w	r5, r3, #64	; 0x40
   14e80:	601c      	str	r4, [r3, #0]
   14e82:	641b      	str	r3, [r3, #64]	; 0x40
   14e84:	f842 5f80 	str.w	r5, [r2, #128]!
   14e88:	f841 2fc0 	str.w	r2, [r1, #192]!
	for (Transfer_t *transfer = transfers ; transfer < end; transfer++) {
   14e8c:	6001      	str	r1, [r0, #0]
}
   14e8e:	bc30      	pop	{r4, r5}
   14e90:	4770      	bx	lr
   14e92:	bf00      	nop
   14e94:	2000d73c 	.word	0x2000d73c
   14e98:	2000d738 	.word	0x2000d738
   14e9c:	2000d714 	.word	0x2000d714
   14ea0:	2000a140 	.word	0x2000a140
   14ea4:	2000d848 	.word	0x2000d848
   14ea8:	2000a0e0 	.word	0x2000a0e0

00014eac <USBHost::allocate_Device()>:
	Device_t *device = free_Device_list;
   14eac:	4b02      	ldr	r3, [pc, #8]	; (14eb8 <USBHost::allocate_Device()+0xc>)
   14eae:	6818      	ldr	r0, [r3, #0]
	if (device) free_Device_list = *(Device_t **)device;
   14eb0:	b108      	cbz	r0, 14eb6 <USBHost::allocate_Device()+0xa>
   14eb2:	6802      	ldr	r2, [r0, #0]
   14eb4:	601a      	str	r2, [r3, #0]
}
   14eb6:	4770      	bx	lr
   14eb8:	2000d73c 	.word	0x2000d73c

00014ebc <USBHost::free_Device(Device_struct*)>:
	*(Device_t **)device = free_Device_list;
   14ebc:	4b02      	ldr	r3, [pc, #8]	; (14ec8 <USBHost::free_Device(Device_struct*)+0xc>)
   14ebe:	681a      	ldr	r2, [r3, #0]
	free_Device_list = device;
   14ec0:	6018      	str	r0, [r3, #0]
	*(Device_t **)device = free_Device_list;
   14ec2:	6002      	str	r2, [r0, #0]
}
   14ec4:	4770      	bx	lr
   14ec6:	bf00      	nop
   14ec8:	2000d73c 	.word	0x2000d73c

00014ecc <USBHost::allocate_Pipe()>:
	Pipe_t *pipe = free_Pipe_list;
   14ecc:	4b02      	ldr	r3, [pc, #8]	; (14ed8 <USBHost::allocate_Pipe()+0xc>)
   14ece:	6818      	ldr	r0, [r3, #0]
	if (pipe) free_Pipe_list = *(Pipe_t **)pipe;
   14ed0:	b108      	cbz	r0, 14ed6 <USBHost::allocate_Pipe()+0xa>
   14ed2:	6802      	ldr	r2, [r0, #0]
   14ed4:	601a      	str	r2, [r3, #0]
}
   14ed6:	4770      	bx	lr
   14ed8:	2000d738 	.word	0x2000d738

00014edc <USBHost::free_Pipe(Pipe_struct*)>:
	*(Pipe_t **)pipe = free_Pipe_list;
   14edc:	4b02      	ldr	r3, [pc, #8]	; (14ee8 <USBHost::free_Pipe(Pipe_struct*)+0xc>)
   14ede:	681a      	ldr	r2, [r3, #0]
	free_Pipe_list = pipe;
   14ee0:	6018      	str	r0, [r3, #0]
	*(Pipe_t **)pipe = free_Pipe_list;
   14ee2:	6002      	str	r2, [r0, #0]
}
   14ee4:	4770      	bx	lr
   14ee6:	bf00      	nop
   14ee8:	2000d738 	.word	0x2000d738

00014eec <USBHost::allocate_Transfer()>:
	Transfer_t *transfer = free_Transfer_list;
   14eec:	4b02      	ldr	r3, [pc, #8]	; (14ef8 <USBHost::allocate_Transfer()+0xc>)
   14eee:	6818      	ldr	r0, [r3, #0]
	if (transfer) free_Transfer_list = *(Transfer_t **)transfer;
   14ef0:	b108      	cbz	r0, 14ef6 <USBHost::allocate_Transfer()+0xa>
   14ef2:	6802      	ldr	r2, [r0, #0]
   14ef4:	601a      	str	r2, [r3, #0]
}
   14ef6:	4770      	bx	lr
   14ef8:	2000d848 	.word	0x2000d848

00014efc <USBHost::free_Transfer(Transfer_struct*)>:
	*(Transfer_t **)transfer = free_Transfer_list;
   14efc:	4b02      	ldr	r3, [pc, #8]	; (14f08 <USBHost::free_Transfer(Transfer_struct*)+0xc>)
   14efe:	681a      	ldr	r2, [r3, #0]
	free_Transfer_list = transfer;
   14f00:	6018      	str	r0, [r3, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14f02:	6002      	str	r2, [r0, #0]
}
   14f04:	4770      	bx	lr
   14f06:	bf00      	nop
   14f08:	2000d848 	.word	0x2000d848

00014f0c <USBHost::allocate_string_buffer()>:
	strbuf_t *strbuf = free_strbuf_list;
   14f0c:	4a05      	ldr	r2, [pc, #20]	; (14f24 <USBHost::allocate_string_buffer()+0x18>)
   14f0e:	6810      	ldr	r0, [r2, #0]
	if (strbuf) {
   14f10:	b130      	cbz	r0, 14f20 <USBHost::allocate_string_buffer()+0x14>
		free_strbuf_list = *(strbuf_t **)strbuf;
   14f12:	6801      	ldr	r1, [r0, #0]
		strbuf->iStrings[strbuf_t::STR_ID_MAN] = 0;  // Set indexes into string buffer to say not there...
   14f14:	2300      	movs	r3, #0
		free_strbuf_list = *(strbuf_t **)strbuf;
   14f16:	6011      	str	r1, [r2, #0]
		strbuf->iStrings[strbuf_t::STR_ID_MAN] = 0;  // Set indexes into string buffer to say not there...
   14f18:	7003      	strb	r3, [r0, #0]
		strbuf->iStrings[strbuf_t::STR_ID_PROD] = 0;
   14f1a:	7043      	strb	r3, [r0, #1]
		strbuf->iStrings[strbuf_t::STR_ID_SERIAL] = 0;
   14f1c:	7083      	strb	r3, [r0, #2]
		strbuf->buffer[0] = 0;	// have trailing NULL..
   14f1e:	70c3      	strb	r3, [r0, #3]
}
   14f20:	4770      	bx	lr
   14f22:	bf00      	nop
   14f24:	2000d740 	.word	0x2000d740

00014f28 <USBHost::free_string_buffer(strbuf_t*)>:
	*(strbuf_t **)strbuf = free_strbuf_list;
   14f28:	4b02      	ldr	r3, [pc, #8]	; (14f34 <USBHost::free_string_buffer(strbuf_t*)+0xc>)
   14f2a:	681a      	ldr	r2, [r3, #0]
	free_strbuf_list = strbuf;
   14f2c:	6018      	str	r0, [r3, #0]
	*(strbuf_t **)strbuf = free_strbuf_list;
   14f2e:	6002      	str	r2, [r0, #0]
}
   14f30:	4770      	bx	lr
   14f32:	bf00      	nop
   14f34:	2000d740 	.word	0x2000d740

00014f38 <USBHost::contribute_Devices(Device_struct*, unsigned long)>:
	Device_t *end = devices + num;
   14f38:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   14f3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (Device_t *device = devices ; device < end; device++) {
   14f40:	4288      	cmp	r0, r1
   14f42:	d20e      	bcs.n	14f62 <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x2a>
{
   14f44:	b410      	push	{r4}
   14f46:	4c07      	ldr	r4, [pc, #28]	; (14f64 <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x2c>)
   14f48:	6822      	ldr	r2, [r4, #0]
   14f4a:	e000      	b.n	14f4e <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x16>
   14f4c:	4618      	mov	r0, r3
	*(Device_t **)device = free_Device_list;
   14f4e:	4603      	mov	r3, r0
   14f50:	f843 2b24 	str.w	r2, [r3], #36
	for (Device_t *device = devices ; device < end; device++) {
   14f54:	4299      	cmp	r1, r3
   14f56:	4602      	mov	r2, r0
   14f58:	d8f8      	bhi.n	14f4c <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x14>
   14f5a:	6020      	str	r0, [r4, #0]
}
   14f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
   14f60:	4770      	bx	lr
   14f62:	4770      	bx	lr
   14f64:	2000d73c 	.word	0x2000d73c

00014f68 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>:
	Pipe_t *end = pipes + num;
   14f68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   14f6c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
	for (Pipe_t *pipe = pipes; pipe < end; pipe++) {
   14f70:	4288      	cmp	r0, r1
   14f72:	d20e      	bcs.n	14f92 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x2a>
{
   14f74:	b410      	push	{r4}
   14f76:	4c07      	ldr	r4, [pc, #28]	; (14f94 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x2c>)
   14f78:	6822      	ldr	r2, [r4, #0]
   14f7a:	e000      	b.n	14f7e <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x16>
   14f7c:	4618      	mov	r0, r3
	*(Pipe_t **)pipe = free_Pipe_list;
   14f7e:	4603      	mov	r3, r0
   14f80:	f843 2b60 	str.w	r2, [r3], #96
	for (Pipe_t *pipe = pipes; pipe < end; pipe++) {
   14f84:	4299      	cmp	r1, r3
   14f86:	4602      	mov	r2, r0
   14f88:	d8f8      	bhi.n	14f7c <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x14>
   14f8a:	6020      	str	r0, [r4, #0]
}
   14f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   14f90:	4770      	bx	lr
   14f92:	4770      	bx	lr
   14f94:	2000d738 	.word	0x2000d738

00014f98 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>:
	Transfer_t *end = transfers + num;
   14f98:	eb00 1c81 	add.w	ip, r0, r1, lsl #6
	for (Transfer_t *transfer = transfers ; transfer < end; transfer++) {
   14f9c:	4560      	cmp	r0, ip
   14f9e:	d211      	bcs.n	14fc4 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)+0x2c>
   14fa0:	4602      	mov	r2, r0
{
   14fa2:	b510      	push	{r4, lr}
   14fa4:	4c08      	ldr	r4, [pc, #32]	; (14fc8 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)+0x30>)
   14fa6:	ea4f 1e81 	mov.w	lr, r1, lsl #6
   14faa:	6821      	ldr	r1, [r4, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14fac:	4613      	mov	r3, r2
   14fae:	f843 1b40 	str.w	r1, [r3], #64
	for (Transfer_t *transfer = transfers ; transfer < end; transfer++) {
   14fb2:	459c      	cmp	ip, r3
   14fb4:	4611      	mov	r1, r2
   14fb6:	461a      	mov	r2, r3
   14fb8:	d8f8      	bhi.n	14fac <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)+0x14>
   14fba:	f1ae 0e40 	sub.w	lr, lr, #64	; 0x40
   14fbe:	4470      	add	r0, lr
   14fc0:	6020      	str	r0, [r4, #0]
}
   14fc2:	bd10      	pop	{r4, pc}
   14fc4:	4770      	bx	lr
   14fc6:	bf00      	nop
   14fc8:	2000d848 	.word	0x2000d848

00014fcc <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>:
	strbuf_t *end = strbufs + num;
   14fcc:	2335      	movs	r3, #53	; 0x35
   14fce:	fb03 0101 	mla	r1, r3, r1, r0
	for (strbuf_t *str = strbufs ; str < end; str++) {
   14fd2:	4288      	cmp	r0, r1
   14fd4:	d20e      	bcs.n	14ff4 <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x28>
{
   14fd6:	b410      	push	{r4}
   14fd8:	4c07      	ldr	r4, [pc, #28]	; (14ff8 <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x2c>)
   14fda:	6822      	ldr	r2, [r4, #0]
   14fdc:	e000      	b.n	14fe0 <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x14>
   14fde:	4618      	mov	r0, r3
	*(strbuf_t **)strbuf = free_strbuf_list;
   14fe0:	4603      	mov	r3, r0
   14fe2:	f843 2b35 	str.w	r2, [r3], #53
	for (strbuf_t *str = strbufs ; str < end; str++) {
   14fe6:	4299      	cmp	r1, r3
   14fe8:	4602      	mov	r2, r0
   14fea:	d8f8      	bhi.n	14fde <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x12>
   14fec:	6020      	str	r0, [r4, #0]
}
   14fee:	f85d 4b04 	ldr.w	r4, [sp], #4
   14ff2:	4770      	bx	lr
   14ff4:	4770      	bx	lr
   14ff6:	bf00      	nop
   14ff8:	2000d740 	.word	0x2000d740

00014ffc <WS2812Serial::begin()>:
*/

#include "WS2812Serial.h"

bool WS2812Serial::begin()
{
   14ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t hwtrigger;
#else	
	uint32_t divisor, portconfig, hwtrigger;
	KINETISK_UART_t *uart;
#endif
	switch (pin) {
   14ffe:	7881      	ldrb	r1, [r0, #2]
{
   15000:	4604      	mov	r4, r0
	switch (pin) {
   15002:	1e4b      	subs	r3, r1, #1
   15004:	2b34      	cmp	r3, #52	; 0x34
   15006:	d81c      	bhi.n	15042 <WS2812Serial::begin()+0x46>
   15008:	e8df f003 	tbb	[pc, r3]
   1500c:	1b1b1b70 	.word	0x1b1b1b70
   15010:	971b1b1b 	.word	0x971b1b1b
   15014:	1b1b1b1b 	.word	0x1b1b1b1b
   15018:	1b1b851b 	.word	0x1b1b851b
   1501c:	1d1b1b8e 	.word	0x1d1b1b8e
   15020:	a91b1b1b 	.word	0xa91b1b1b
   15024:	1b1b1b1b 	.word	0x1b1b1b1b
   15028:	1b1b1ba0 	.word	0x1b1b1ba0
   1502c:	1bb21b1b 	.word	0x1bb21b1b
   15030:	1b1b1b1b 	.word	0x1b1b1b1b
   15034:	1b1b1b1b 	.word	0x1b1b1b1b
   15038:	1b1d1b1b 	.word	0x1b1d1b1b
   1503c:	1b1b1b1b 	.word	0x1b1b1b1b
   15040:	70          	.byte	0x70
   15041:	00          	.byte	0x00
   15042:	2000      	movs	r0, #0
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
	return true;
}
   15044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   15046:	4a50      	ldr	r2, [pc, #320]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART8; 
   15048:	4850      	ldr	r0, [pc, #320]	; (1518c <WS2812Serial::begin()+0x190>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   1504a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
		break;
   1504e:	4e50      	ldr	r6, [pc, #320]	; (15190 <WS2812Serial::begin()+0x194>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   15050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
		uart = &IMXRT_LPUART8; 
   15054:	61a0      	str	r0, [r4, #24]
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   15056:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if (!dma) {
   1505a:	68e5      	ldr	r5, [r4, #12]
   1505c:	2d00      	cmp	r5, #0
   1505e:	d050      	beq.n	15102 <WS2812Serial::begin()+0x106>
	uart->CTRL = 0;	// clear everything
   15060:	69a3      	ldr	r3, [r4, #24]
   15062:	2200      	movs	r2, #0
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
   15064:	484b      	ldr	r0, [pc, #300]	; (15194 <WS2812Serial::begin()+0x198>)
	uart->CTRL = 0;	// clear everything
   15066:	619a      	str	r2, [r3, #24]
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
   15068:	6118      	str	r0, [r3, #16]
	uart->PINCFG = 0;
   1506a:	60da      	str	r2, [r3, #12]
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
   1506c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1506e:	0892      	lsrs	r2, r2, #2
   15070:	f002 021c 	and.w	r2, r2, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
   15074:	2a0f      	cmp	r2, #15
   15076:	f200 8084 	bhi.w	15182 <WS2812Serial::begin()+0x186>
   1507a:	0852      	lsrs	r2, r2, #1
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
   1507c:	f002 0202 	and.w	r2, r2, #2
   15080:	62da      	str	r2, [r3, #44]	; 0x2c
	if (pin == 35) pinmuxval = 1;
   15082:	2923      	cmp	r1, #35	; 0x23
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   15084:	4a44      	ldr	r2, [pc, #272]	; (15198 <WS2812Serial::begin()+0x19c>)
	dma->destination((volatile uint8_t&)uart->DATA);
   15086:	f103 031c 	add.w	r3, r3, #28
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
   1508a:	f8df c14c 	ldr.w	ip, [pc, #332]	; 151d8 <WS2812Serial::begin()+0x1dc>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   1508e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
	uart->FIFO |= LPUART_FIFO_TXFE;
   15092:	68d9      	ldr	r1, [r3, #12]
   15094:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	*(portConfigRegister(pin)) = pinmuxval;
   15098:	e9d2 0701 	ldrd	r0, r7, [r2, #4]
	uart->FIFO |= LPUART_FIFO_TXFE;
   1509c:	60d9      	str	r1, [r3, #12]
		TCD->DOFF = 0;
   1509e:	f04f 0100 	mov.w	r1, #0
   150a2:	682a      	ldr	r2, [r5, #0]
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
   150a4:	f843 cc04 	str.w	ip, [r3, #-4]
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   150a8:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
   150ac:	f8c7 c000 	str.w	ip, [r7]
	if (pin == 35) pinmuxval = 1;
   150b0:	bf14      	ite	ne
   150b2:	2702      	movne	r7, #2
   150b4:	2701      	moveq	r7, #1
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
   150b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	*(portConfigRegister(pin)) = pinmuxval;
   150ba:	6007      	str	r7, [r0, #0]
		TCD->DADDR = &p;
   150bc:	6113      	str	r3, [r2, #16]
		TCD->DOFF = 0;
   150be:	8291      	strh	r1, [r2, #20]
		TCD->ATTR_DST = 0;
   150c0:	7191      	strb	r1, [r2, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
   150c2:	d301      	bcc.n	150c8 <WS2812Serial::begin()+0xcc>
   150c4:	6893      	ldr	r3, [r2, #8]
   150c6:	b90b      	cbnz	r3, 150cc <WS2812Serial::begin()+0xd0>
   150c8:	2301      	movs	r3, #1
   150ca:	6093      	str	r3, [r2, #8]
		TCD->DLASTSGA = 0;
   150cc:	2100      	movs	r1, #0
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
   150ce:	4b33      	ldr	r3, [pc, #204]	; (1519c <WS2812Serial::begin()+0x1a0>)
	memset(drawBuffer, 0, numled * 3);
   150d0:	68a0      	ldr	r0, [r4, #8]
		TCD->DLASTSGA = 0;
   150d2:	6191      	str	r1, [r2, #24]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
   150d4:	792a      	ldrb	r2, [r5, #4]
		*mux = 0;
   150d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
   150da:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   150de:	8822      	ldrh	r2, [r4, #0]
   150e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   150e4:	f006 fca8 	bl	1ba38 <memset>
	return true;
   150e8:	2001      	movs	r0, #1
}
   150ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   150ec:	4a26      	ldr	r2, [pc, #152]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART6; 
   150ee:	482c      	ldr	r0, [pc, #176]	; (151a0 <WS2812Serial::begin()+0x1a4>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   150f0:	6f53      	ldr	r3, [r2, #116]	; 0x74
	if (!dma) {
   150f2:	68e5      	ldr	r5, [r4, #12]
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   150f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
		uart = &IMXRT_LPUART6; 
   150f8:	61a0      	str	r0, [r4, #24]
		break;
   150fa:	4e2a      	ldr	r6, [pc, #168]	; (151a4 <WS2812Serial::begin()+0x1a8>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   150fc:	6753      	str	r3, [r2, #116]	; 0x74
	if (!dma) {
   150fe:	2d00      	cmp	r5, #0
   15100:	d1ae      	bne.n	15060 <WS2812Serial::begin()+0x64>
		dma = new DMAChannel;
   15102:	2008      	movs	r0, #8
   15104:	f001 fad8 	bl	166b8 <operator new(unsigned int)>
   15108:	4605      	mov	r5, r0
		begin();
   1510a:	2100      	movs	r1, #0
   1510c:	f000 faa0 	bl	15650 <DMAChannel::begin(bool)>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   15110:	78a1      	ldrb	r1, [r4, #2]
		dma = new DMAChannel;
   15112:	60e5      	str	r5, [r4, #12]
		if (!dma) return false; // unable to allocate DMA channel
   15114:	e7a4      	b.n	15060 <WS2812Serial::begin()+0x64>
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   15116:	4a1c      	ldr	r2, [pc, #112]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART2; 
   15118:	4823      	ldr	r0, [pc, #140]	; (151a8 <WS2812Serial::begin()+0x1ac>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   1511a:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
   1511c:	4e23      	ldr	r6, [pc, #140]	; (151ac <WS2812Serial::begin()+0x1b0>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   1511e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
		uart = &IMXRT_LPUART2; 
   15122:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   15124:	6693      	str	r3, [r2, #104]	; 0x68
		break;
   15126:	e798      	b.n	1505a <WS2812Serial::begin()+0x5e>
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   15128:	4a17      	ldr	r2, [pc, #92]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART3; 
   1512a:	4821      	ldr	r0, [pc, #132]	; (151b0 <WS2812Serial::begin()+0x1b4>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   1512c:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
   1512e:	4e21      	ldr	r6, [pc, #132]	; (151b4 <WS2812Serial::begin()+0x1b8>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   15130:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
		uart = &IMXRT_LPUART3; 
   15134:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   15136:	6693      	str	r3, [r2, #104]	; 0x68
		break;
   15138:	e78f      	b.n	1505a <WS2812Serial::begin()+0x5e>
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   1513a:	4a13      	ldr	r2, [pc, #76]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART4; 
   1513c:	481e      	ldr	r0, [pc, #120]	; (151b8 <WS2812Serial::begin()+0x1bc>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   1513e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
		break;
   15140:	4e1e      	ldr	r6, [pc, #120]	; (151bc <WS2812Serial::begin()+0x1c0>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   15142:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART4; 
   15146:	61a0      	str	r0, [r4, #24]
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   15148:	66d3      	str	r3, [r2, #108]	; 0x6c
		break;
   1514a:	e786      	b.n	1505a <WS2812Serial::begin()+0x5e>
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   1514c:	4a0e      	ldr	r2, [pc, #56]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART7; 
   1514e:	481c      	ldr	r0, [pc, #112]	; (151c0 <WS2812Serial::begin()+0x1c4>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   15150:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		break;
   15152:	4e1c      	ldr	r6, [pc, #112]	; (151c4 <WS2812Serial::begin()+0x1c8>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   15154:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
		uart = &IMXRT_LPUART7; 
   15158:	61a0      	str	r0, [r4, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   1515a:	67d3      	str	r3, [r2, #124]	; 0x7c
		break;
   1515c:	e77d      	b.n	1505a <WS2812Serial::begin()+0x5e>
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   1515e:	4a0a      	ldr	r2, [pc, #40]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART1; 
   15160:	4819      	ldr	r0, [pc, #100]	; (151c8 <WS2812Serial::begin()+0x1cc>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   15162:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		break;
   15164:	4e19      	ldr	r6, [pc, #100]	; (151cc <WS2812Serial::begin()+0x1d0>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   15166:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART1; 
   1516a:	61a0      	str	r0, [r4, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   1516c:	67d3      	str	r3, [r2, #124]	; 0x7c
		break;
   1516e:	e774      	b.n	1505a <WS2812Serial::begin()+0x5e>
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   15170:	4a05      	ldr	r2, [pc, #20]	; (15188 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART5; 
   15172:	4817      	ldr	r0, [pc, #92]	; (151d0 <WS2812Serial::begin()+0x1d4>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   15174:	6f53      	ldr	r3, [r2, #116]	; 0x74
		break;
   15176:	4e17      	ldr	r6, [pc, #92]	; (151d4 <WS2812Serial::begin()+0x1d8>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   15178:	f043 030c 	orr.w	r3, r3, #12
		uart = &IMXRT_LPUART5; 
   1517c:	61a0      	str	r0, [r4, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   1517e:	6753      	str	r3, [r2, #116]	; 0x74
		break;
   15180:	e76b      	b.n	1505a <WS2812Serial::begin()+0x5e>
   15182:	2203      	movs	r2, #3
   15184:	e77c      	b.n	15080 <WS2812Serial::begin()+0x84>
   15186:	bf00      	nop
   15188:	400fc000 	.word	0x400fc000
   1518c:	401a0000 	.word	0x401a0000
   15190:	80000048 	.word	0x80000048
   15194:	05800001 	.word	0x05800001
   15198:	20008148 	.word	0x20008148
   1519c:	400ec000 	.word	0x400ec000
   151a0:	40198000 	.word	0x40198000
   151a4:	80000046 	.word	0x80000046
   151a8:	40188000 	.word	0x40188000
   151ac:	80000042 	.word	0x80000042
   151b0:	4018c000 	.word	0x4018c000
   151b4:	80000004 	.word	0x80000004
   151b8:	40190000 	.word	0x40190000
   151bc:	80000044 	.word	0x80000044
   151c0:	4019c000 	.word	0x4019c000
   151c4:	80000008 	.word	0x80000008
   151c8:	40184000 	.word	0x40184000
   151cc:	80000002 	.word	0x80000002
   151d0:	40194000 	.word	0x40194000
   151d4:	80000006 	.word	0x80000006
   151d8:	10080000 	.word	0x10080000

000151dc <WS2812Serial::show()>:
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
   151dc:	68c3      	ldr	r3, [r0, #12]
{
   151de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while ((DMA_ERQ & (1 << dma->channel))) {
   151e2:	4eb1      	ldr	r6, [pc, #708]	; (154a8 <WS2812Serial::show()+0x2cc>)
   151e4:	2501      	movs	r5, #1
   151e6:	791b      	ldrb	r3, [r3, #4]
{
   151e8:	b083      	sub	sp, #12
	while ((DMA_ERQ & (1 << dma->channel))) {
   151ea:	68f2      	ldr	r2, [r6, #12]
{
   151ec:	4604      	mov	r4, r0
	while ((DMA_ERQ & (1 << dma->channel))) {
   151ee:	fa05 f303 	lsl.w	r3, r5, r3
   151f2:	4213      	tst	r3, r2
   151f4:	d008      	beq.n	15208 <WS2812Serial::show()+0x2c>
		yield();
   151f6:	f002 fe8f 	bl	17f18 <yield>
	while ((DMA_ERQ & (1 << dma->channel))) {
   151fa:	68e3      	ldr	r3, [r4, #12]
   151fc:	68f2      	ldr	r2, [r6, #12]
   151fe:	791b      	ldrb	r3, [r3, #4]
   15200:	fa05 f303 	lsl.w	r3, r5, r3
   15204:	4213      	tst	r3, r2
   15206:	d1f6      	bne.n	151f6 <WS2812Serial::show()+0x1a>
	}
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
   15208:	78e0      	ldrb	r0, [r4, #3]
   1520a:	2805      	cmp	r0, #5
   1520c:	d826      	bhi.n	1525c <WS2812Serial::show()+0x80>
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
   1520e:	8823      	ldrh	r3, [r4, #0]
		const uint8_t *p = drawBuffer;
   15210:	68a6      	ldr	r6, [r4, #8]
		const uint8_t *end = p + (numled * 3);
   15212:	eb03 0743 	add.w	r7, r3, r3, lsl #1
		uint8_t *fb = frameBuffer;
   15216:	6865      	ldr	r5, [r4, #4]
		const uint8_t *end = p + (numled * 3);
   15218:	4437      	add	r7, r6
		while (p < end) {
   1521a:	42be      	cmp	r6, r7
   1521c:	f080 820d 	bcs.w	1563a <WS2812Serial::show()+0x45e>
   15220:	3603      	adds	r6, #3
   15222:	350c      	adds	r5, #12
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
   15224:	7d21      	ldrb	r1, [r4, #20]
   15226:	f1a5 020c 	sub.w	r2, r5, #12
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
   1522a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
			b = (b * mult) >> 8;
   1522e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
			g = (g * mult) >> 8;
   15232:	f816 cc02 	ldrb.w	ip, [r6, #-2]
			b = (b * mult) >> 8;
   15236:	fb01 ee0e 	mla	lr, r1, lr, lr
			g = (g * mult) >> 8;
   1523a:	fb01 cc0c 	mla	ip, r1, ip, ip
			r = (r * mult) >> 8;
   1523e:	fb01 3103 	mla	r1, r1, r3, r3
			b = (b * mult) >> 8;
   15242:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
   15246:	ea4f 291c 	mov.w	r9, ip, lsr #8
			r = (r * mult) >> 8;
   1524a:	0a0b      	lsrs	r3, r1, #8
			uint32_t n=0;
			switch (config) {
   1524c:	2805      	cmp	r0, #5
   1524e:	f200 81fb 	bhi.w	15648 <WS2812Serial::show()+0x46c>
   15252:	e8df f000 	tbb	[pc, r0]
   15256:	767d      	.short	0x767d
   15258:	4662696f 	.word	0x4662696f
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
   1525c:	68a2      	ldr	r2, [r4, #8]
		const uint8_t *end = p + (numled * 4);
   1525e:	8823      	ldrh	r3, [r4, #0]
		uint8_t *fb = frameBuffer;
   15260:	6861      	ldr	r1, [r4, #4]
		const uint8_t *end = p + (numled * 4);
   15262:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
		while (p < end) {
   15266:	455a      	cmp	r2, fp
   15268:	f080 81e4 	bcs.w	15634 <WS2812Serial::show()+0x458>
   1526c:	f102 0c04 	add.w	ip, r2, #4
   15270:	3110      	adds	r1, #16
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
   15272:	7d23      	ldrb	r3, [r4, #20]
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
   15274:	3806      	subs	r0, #6
			g = (g * mult) >> 8;
   15276:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
   1527a:	f1a1 0210 	sub.w	r2, r1, #16
			b = (b * mult) >> 8;
   1527e:	f81c ec04 	ldrb.w	lr, [ip, #-4]
			r = (r * mult) >> 8;
   15282:	f81c 7c02 	ldrb.w	r7, [ip, #-2]
			g = (g * mult) >> 8;
   15286:	fb03 6606 	mla	r6, r3, r6, r6
			w = (w * mult) >> 8;
   1528a:	f81c 5c01 	ldrb.w	r5, [ip, #-1]
			b = (b * mult) >> 8;
   1528e:	fb03 ee0e 	mla	lr, r3, lr, lr
			r = (r * mult) >> 8;
   15292:	fb03 7707 	mla	r7, r3, r7, r7
			w = (w * mult) >> 8;
   15296:	fb03 5505 	mla	r5, r3, r5, r5
			g = (g * mult) >> 8;
   1529a:	0a33      	lsrs	r3, r6, #8
			b = (b * mult) >> 8;
   1529c:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
   152a0:	9301      	str	r3, [sp, #4]
			w = (w * mult) >> 8;
   152a2:	ea4f 2915 	mov.w	r9, r5, lsr #8
			r = (r * mult) >> 8;
   152a6:	0a3b      	lsrs	r3, r7, #8
			switch (config) {
   152a8:	2817      	cmp	r0, #23
   152aa:	f200 81cf 	bhi.w	1564c <WS2812Serial::show()+0x470>
   152ae:	e8df f010 	tbh	[pc, r0, lsl #1]
   152b2:	01b5      	.short	0x01b5
   152b4:	01a001ab 	.word	0x01a001ab
   152b8:	018c0195 	.word	0x018c0195
   152bc:	01790182 	.word	0x01790182
   152c0:	0165016f 	.word	0x0165016f
   152c4:	0151015b 	.word	0x0151015b
   152c8:	013e0148 	.word	0x013e0148
   152cc:	01280133 	.word	0x01280133
   152d0:	0113011d 	.word	0x0113011d
   152d4:	00ff010a 	.word	0x00ff010a
   152d8:	00e700f1 	.word	0x00e700f1
   152dc:	00d400dd 	.word	0x00d400dd
   152e0:	00b3      	.short	0x00b3
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
   152e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
   152e6:	ea4c 4108 	orr.w	r1, ip, r8, lsl #16
   152ea:	430b      	orrs	r3, r1
				if (!(n & 0x00800000)) x |= 0x07;
   152ec:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   152f0:	bf0c      	ite	eq
   152f2:	210f      	moveq	r1, #15
   152f4:	2108      	movne	r1, #8
				if (!(n & 0x00400000)) x |= 0xE0;
   152f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
				n <<= 2;
   152fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x00400000)) x |= 0xE0;
   152fe:	bf08      	it	eq
   15300:	f041 01e0 	orreq.w	r1, r1, #224	; 0xe0
				*fb++ = x;
   15304:	f802 1b01 	strb.w	r1, [r2], #1
			} while (fb < stop);
   15308:	42aa      	cmp	r2, r5
   1530a:	d1ef      	bne.n	152ec <WS2812Serial::show()+0x110>
		while (p < end) {
   1530c:	42b7      	cmp	r7, r6
   1530e:	f102 050c 	add.w	r5, r2, #12
   15312:	d924      	bls.n	1535e <WS2812Serial::show()+0x182>
			switch (config) {
   15314:	78e0      	ldrb	r0, [r4, #3]
   15316:	3603      	adds	r6, #3
   15318:	e784      	b.n	15224 <WS2812Serial::show()+0x48>
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
   1531a:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
   1531e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   15322:	ea43 0309 	orr.w	r3, r3, r9
   15326:	e7e1      	b.n	152ec <WS2812Serial::show()+0x110>
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
   15328:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
   1532c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
   15330:	430b      	orrs	r3, r1
   15332:	e7db      	b.n	152ec <WS2812Serial::show()+0x110>
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
   15334:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
   15338:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1533c:	ea43 0308 	orr.w	r3, r3, r8
   15340:	e7d4      	b.n	152ec <WS2812Serial::show()+0x110>
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
   15342:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15346:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
   1534a:	ea43 0309 	orr.w	r3, r3, r9
   1534e:	e7cd      	b.n	152ec <WS2812Serial::show()+0x110>
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
   15350:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
   15354:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   15358:	ea43 0308 	orr.w	r3, r3, r8
   1535c:	e7c6      	b.n	152ec <WS2812Serial::show()+0x110>
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
   1535e:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 12;
   15360:	260c      	movs	r6, #12
		microseconds_per_led = 30;
   15362:	221e      	movs	r2, #30
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
   15364:	fb02 f303 	mul.w	r3, r2, r3
   15368:	f503 7596 	add.w	r5, r3, #300	; 0x12c
   1536c:	e001      	b.n	15372 <WS2812Serial::show()+0x196>
	//if (min_elapsed < 2500) min_elapsed = 2500; // limit refresh to 400 Hz
	uint32_t m;
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
   1536e:	f002 fdd3 	bl	17f18 <yield>
		m = micros();
   15372:	f000 fd89 	bl	15e88 <micros>
		if ((m - prior_micros) > min_elapsed) break;
   15376:	6923      	ldr	r3, [r4, #16]
   15378:	1ac3      	subs	r3, r0, r3
   1537a:	42ab      	cmp	r3, r5
   1537c:	d9f7      	bls.n	1536e <WS2812Serial::show()+0x192>
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
   1537e:	6862      	ldr	r2, [r4, #4]
   15380:	4b4a      	ldr	r3, [pc, #296]	; (154ac <WS2812Serial::show()+0x2d0>)
	prior_micros = m;
   15382:	6120      	str	r0, [r4, #16]
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
   15384:	429a      	cmp	r2, r3
   15386:	d912      	bls.n	153ae <WS2812Serial::show()+0x1d2>
   15388:	8821      	ldrh	r1, [r4, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1538a:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1538e:	fb06 2201 	mla	r2, r6, r1, r2
	asm("dsb");
   15392:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
   15396:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1539a:	f8c1 3f68 	str.w	r3, [r1, #3944]	; 0xf68
		location += 32;
   1539e:	3320      	adds	r3, #32
	} while (location < end_addr);
   153a0:	429a      	cmp	r2, r3
   153a2:	d8fa      	bhi.n	1539a <WS2812Serial::show()+0x1be>
	asm("dsb");
   153a4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   153a8:	f3bf 8f6f 	isb	sy
	
	dma->sourceBuffer(frameBuffer, numled * bytes_per_led);
   153ac:	6862      	ldr	r2, [r4, #4]
   153ae:	68e0      	ldr	r0, [r4, #12]
   153b0:	8821      	ldrh	r1, [r4, #0]
		TCD->SADDR = p;
   153b2:	6803      	ldr	r3, [r0, #0]
   153b4:	fb06 f101 	mul.w	r1, r6, r1
		TCD->ATTR_SRC = 0;
   153b8:	2600      	movs	r6, #0
		TCD->SADDR = p;
   153ba:	601a      	str	r2, [r3, #0]
		TCD->SOFF = 1;
   153bc:	2201      	movs	r2, #1
   153be:	6805      	ldr	r5, [r0, #0]
   153c0:	809a      	strh	r2, [r3, #4]
		TCD->NBYTES = 1;
   153c2:	609a      	str	r2, [r3, #8]
		TCD->SLAST = -len;
   153c4:	424a      	negs	r2, r1
		TCD->ATTR_SRC = 0;
   153c6:	71de      	strb	r6, [r3, #7]
		TCD->SLAST = -len;
   153c8:	60da      	str	r2, [r3, #12]
		TCD->BITER = len;
   153ca:	b28a      	uxth	r2, r1
   153cc:	83da      	strh	r2, [r3, #30]
		TCD->CITER = len;
   153ce:	82da      	strh	r2, [r3, #22]
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
   153d0:	8bee      	ldrh	r6, [r5, #30]
   153d2:	0436      	lsls	r6, r6, #16
   153d4:	d412      	bmi.n	153fc <WS2812Serial::show()+0x220>
			if (len > 32767) return;
   153d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   153da:	d201      	bcs.n	153e0 <WS2812Serial::show()+0x204>
			TCD->BITER = len;
   153dc:	83ea      	strh	r2, [r5, #30]
			TCD->CITER = len;
   153de:	82ea      	strh	r2, [r5, #22]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
   153e0:	8b9a      	ldrh	r2, [r3, #28]

	Serial.printf("SA:%x SO:%d AT:%x NB:%x SL:%d DA:%x DO: %d CI:%x DL:%x CS:%x BI:%x\n", (uint32_t)dma->TCD->SADDR,
	dma->TCD->SOFF, dma->TCD->ATTR, dma->TCD->NBYTES, dma->TCD->SLAST, (uint32_t)dma->TCD->DADDR, 
	dma->TCD->DOFF, dma->TCD->CITER, dma->TCD->DLASTSGA, dma->TCD->CSR, dma->TCD->BITER);
*/
	uart->STAT = 0;	// try clearing out the status
   153e2:	69a1      	ldr	r1, [r4, #24]
   153e4:	2400      	movs	r4, #0
   153e6:	b292      	uxth	r2, r2
   153e8:	f042 0208 	orr.w	r2, r2, #8
   153ec:	839a      	strh	r2, [r3, #28]
   153ee:	614c      	str	r4, [r1, #20]
		DMA_SERQ = channel;
   153f0:	4b2d      	ldr	r3, [pc, #180]	; (154a8 <WS2812Serial::show()+0x2cc>)
   153f2:	7902      	ldrb	r2, [r0, #4]
   153f4:	76da      	strb	r2, [r3, #27]
	dma->enable();

#endif
}
   153f6:	b003      	add	sp, #12
   153f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (len > 511) return;
   153fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   15400:	d2ee      	bcs.n	153e0 <WS2812Serial::show()+0x204>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
   15402:	8be9      	ldrh	r1, [r5, #30]
   15404:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
   15408:	4311      	orrs	r1, r2
   1540a:	83e9      	strh	r1, [r5, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
   1540c:	8ae9      	ldrh	r1, [r5, #22]
   1540e:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
   15412:	430a      	orrs	r2, r1
   15414:	82ea      	strh	r2, [r5, #22]
   15416:	e7e3      	b.n	153e0 <WS2812Serial::show()+0x204>
			  case WS2812_BGWR: n = (b << 24) | (g << 16) | (w << 8) | r; break;
   15418:	ea4f 6008 	mov.w	r0, r8, lsl #24
   1541c:	9e01      	ldr	r6, [sp, #4]
   1541e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   15422:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   15426:	4328      	orrs	r0, r5
   15428:	4303      	orrs	r3, r0
				if (!(n & 0x80000000)) x |= 0x07;
   1542a:	2b00      	cmp	r3, #0
   1542c:	bfb4      	ite	lt
   1542e:	2008      	movlt	r0, #8
   15430:	200f      	movge	r0, #15
				if (!(n & 0x40000000)) x |= 0xE0;
   15432:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
				n <<= 2;
   15436:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x40000000)) x |= 0xE0;
   1543a:	bf08      	it	eq
   1543c:	f040 00e0 	orreq.w	r0, r0, #224	; 0xe0
				*fb++ = x;
   15440:	f802 0b01 	strb.w	r0, [r2], #1
			} while (fb < stop);
   15444:	428a      	cmp	r2, r1
   15446:	d1f0      	bne.n	1542a <WS2812Serial::show()+0x24e>
		while (p < end) {
   15448:	45e3      	cmp	fp, ip
   1544a:	f102 0110 	add.w	r1, r2, #16
   1544e:	f240 80f7 	bls.w	15640 <WS2812Serial::show()+0x464>
			switch (config) {
   15452:	78e0      	ldrb	r0, [r4, #3]
   15454:	f10c 0c04 	add.w	ip, ip, #4
   15458:	e70b      	b.n	15272 <WS2812Serial::show()+0x96>
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
   1545a:	041b      	lsls	r3, r3, #16
   1545c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   15460:	9801      	ldr	r0, [sp, #4]
   15462:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   15466:	432b      	orrs	r3, r5
   15468:	4303      	orrs	r3, r0
   1546a:	e7de      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
   1546c:	ea4f 4008 	mov.w	r0, r8, lsl #16
   15470:	9e01      	ldr	r6, [sp, #4]
   15472:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   15476:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
   1547a:	4328      	orrs	r0, r5
   1547c:	4303      	orrs	r3, r0
   1547e:	e7d4      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
   15480:	041b      	lsls	r3, r3, #16
   15482:	9801      	ldr	r0, [sp, #4]
   15484:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   15488:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   1548c:	432b      	orrs	r3, r5
   1548e:	ea43 0308 	orr.w	r3, r3, r8
   15492:	e7ca      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
   15494:	ea4f 4808 	mov.w	r8, r8, lsl #16
   15498:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   1549c:	9801      	ldr	r0, [sp, #4]
   1549e:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
   154a2:	432b      	orrs	r3, r5
   154a4:	4303      	orrs	r3, r0
   154a6:	e7c0      	b.n	1542a <WS2812Serial::show()+0x24e>
   154a8:	400e8000 	.word	0x400e8000
   154ac:	201fffff 	.word	0x201fffff
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
   154b0:	9801      	ldr	r0, [sp, #4]
   154b2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   154b6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
   154ba:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
   154be:	432b      	orrs	r3, r5
   154c0:	ea43 0308 	orr.w	r3, r3, r8
   154c4:	e7b1      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
   154c6:	ea4f 4009 	mov.w	r0, r9, lsl #16
   154ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   154ce:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
   154d2:	4330      	orrs	r0, r6
   154d4:	4303      	orrs	r3, r0
   154d6:	e7a8      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
   154d8:	ea4f 4309 	mov.w	r3, r9, lsl #16
   154dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   154e0:	9801      	ldr	r0, [sp, #4]
   154e2:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   154e6:	433b      	orrs	r3, r7
   154e8:	4303      	orrs	r3, r0
   154ea:	e79e      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
   154ec:	ea4f 4009 	mov.w	r0, r9, lsl #16
   154f0:	9d01      	ldr	r5, [sp, #4]
   154f2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   154f6:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
   154fa:	ea40 000e 	orr.w	r0, r0, lr
   154fe:	4303      	orrs	r3, r0
   15500:	e793      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
   15502:	ea4f 4309 	mov.w	r3, r9, lsl #16
   15506:	9801      	ldr	r0, [sp, #4]
   15508:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   1550c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   15510:	433b      	orrs	r3, r7
   15512:	ea43 0308 	orr.w	r3, r3, r8
   15516:	e788      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
   15518:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1551c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15520:	9801      	ldr	r0, [sp, #4]
   15522:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
   15526:	ea43 030e 	orr.w	r3, r3, lr
   1552a:	4303      	orrs	r3, r0
   1552c:	e77d      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
   1552e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   15532:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   15536:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
   1553a:	4333      	orrs	r3, r6
   1553c:	ea43 0308 	orr.w	r3, r3, r8
   15540:	e773      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
   15542:	ea4f 4008 	mov.w	r0, r8, lsl #16
   15546:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   1554a:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
   1554e:	4330      	orrs	r0, r6
   15550:	4303      	orrs	r3, r0
   15552:	e76a      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
   15554:	ea4f 4308 	mov.w	r3, r8, lsl #16
   15558:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   1555c:	9801      	ldr	r0, [sp, #4]
   1555e:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   15562:	433b      	orrs	r3, r7
   15564:	4303      	orrs	r3, r0
   15566:	e760      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
   15568:	9801      	ldr	r0, [sp, #4]
   1556a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   1556e:	0400      	lsls	r0, r0, #16
   15570:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
   15574:	ea40 000e 	orr.w	r0, r0, lr
   15578:	4303      	orrs	r3, r0
   1557a:	e756      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
   1557c:	9b01      	ldr	r3, [sp, #4]
   1557e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   15582:	041b      	lsls	r3, r3, #16
   15584:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   15588:	433b      	orrs	r3, r7
   1558a:	ea43 0308 	orr.w	r3, r3, r8
   1558e:	e74c      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
   15590:	041b      	lsls	r3, r3, #16
   15592:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15596:	9801      	ldr	r0, [sp, #4]
   15598:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   1559c:	ea43 030e 	orr.w	r3, r3, lr
   155a0:	4303      	orrs	r3, r0
   155a2:	e742      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
   155a4:	041b      	lsls	r3, r3, #16
   155a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   155aa:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   155ae:	4333      	orrs	r3, r6
   155b0:	ea43 0308 	orr.w	r3, r3, r8
   155b4:	e739      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
   155b6:	ea4f 4308 	mov.w	r3, r8, lsl #16
   155ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   155be:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   155c2:	433b      	orrs	r3, r7
   155c4:	ea43 0309 	orr.w	r3, r3, r9
   155c8:	e72f      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
   155ca:	041b      	lsls	r3, r3, #16
   155cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   155d0:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   155d4:	4333      	orrs	r3, r6
   155d6:	ea43 0309 	orr.w	r3, r3, r9
   155da:	e726      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
   155dc:	ea4f 4308 	mov.w	r3, r8, lsl #16
   155e0:	9801      	ldr	r0, [sp, #4]
   155e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   155e6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   155ea:	433b      	orrs	r3, r7
   155ec:	ea43 0309 	orr.w	r3, r3, r9
   155f0:	e71b      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
   155f2:	041b      	lsls	r3, r3, #16
   155f4:	9801      	ldr	r0, [sp, #4]
   155f6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   155fa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   155fe:	ea43 030e 	orr.w	r3, r3, lr
   15602:	ea43 0309 	orr.w	r3, r3, r9
   15606:	e710      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
   15608:	ea4f 4808 	mov.w	r8, r8, lsl #16
   1560c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   15610:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
   15614:	4333      	orrs	r3, r6
   15616:	ea43 0309 	orr.w	r3, r3, r9
   1561a:	e706      	b.n	1542a <WS2812Serial::show()+0x24e>
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
   1561c:	9801      	ldr	r0, [sp, #4]
   1561e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15622:	ea4f 4a00 	mov.w	sl, r0, lsl #16
   15626:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
   1562a:	ea43 030e 	orr.w	r3, r3, lr
   1562e:	ea43 0309 	orr.w	r3, r3, r9
   15632:	e6fa      	b.n	1542a <WS2812Serial::show()+0x24e>
		bytes_per_led = 16;
   15634:	2610      	movs	r6, #16
		microseconds_per_led = 40;
   15636:	2228      	movs	r2, #40	; 0x28
   15638:	e694      	b.n	15364 <WS2812Serial::show()+0x188>
		bytes_per_led = 12;
   1563a:	260c      	movs	r6, #12
		microseconds_per_led = 30;
   1563c:	221e      	movs	r2, #30
   1563e:	e691      	b.n	15364 <WS2812Serial::show()+0x188>
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
   15640:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 16;
   15642:	2610      	movs	r6, #16
		microseconds_per_led = 40;
   15644:	2228      	movs	r2, #40	; 0x28
   15646:	e68d      	b.n	15364 <WS2812Serial::show()+0x188>
			switch (config) {
   15648:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 12;
   1564a:	e64f      	b.n	152ec <WS2812Serial::show()+0x110>
			switch (config) {
   1564c:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 16;
   1564e:	e6ec      	b.n	1542a <WS2812Serial::show()+0x24e>

00015650 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   15650:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
   15652:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   15654:	b921      	cbnz	r1, 15660 <DMAChannel::begin(bool)+0x10>
   15656:	6803      	ldr	r3, [r0, #0]
   15658:	b113      	cbz	r3, 15660 <DMAChannel::begin(bool)+0x10>
   1565a:	7902      	ldrb	r2, [r0, #4]
   1565c:	2a0f      	cmp	r2, #15
   1565e:	d93b      	bls.n	156d8 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
   15660:	4c24      	ldr	r4, [pc, #144]	; (156f4 <DMAChannel::begin(bool)+0xa4>)
   15662:	8821      	ldrh	r1, [r4, #0]
{
   15664:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   15666:	fa41 f203 	asr.w	r2, r1, r3
   1566a:	f012 0201 	ands.w	r2, r2, #1
   1566e:	d008      	beq.n	15682 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
   15670:	3301      	adds	r3, #1
   15672:	2b10      	cmp	r3, #16
   15674:	d1f7      	bne.n	15666 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
   15676:	b662      	cpsie	i
			TCD = (TCD_t *)0;
   15678:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
   1567a:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
   1567c:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
   1567e:	bc30      	pop	{r4, r5}
   15680:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
   15682:	f04f 0c01 	mov.w	ip, #1
   15686:	fa0c fc03 	lsl.w	ip, ip, r3
   1568a:	ea41 010c 	orr.w	r1, r1, ip
   1568e:	8021      	strh	r1, [r4, #0]
			__enable_irq();
   15690:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   15692:	4919      	ldr	r1, [pc, #100]	; (156f8 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
   15694:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   15698:	4c18      	ldr	r4, [pc, #96]	; (156fc <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1569a:	4419      	add	r1, r3
	channel = ch;
   1569c:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   156a0:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   156a2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   156a4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
   156a8:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   156aa:	f240 4482 	movw	r4, #1154	; 0x482
   156ae:	4914      	ldr	r1, [pc, #80]	; (15700 <DMAChannel::begin(bool)+0xb0>)
   156b0:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
   156b2:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
   156b6:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
   156ba:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
   156be:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   156c2:	6003      	str	r3, [r0, #0]
}
   156c4:	bc30      	pop	{r4, r5}
	*p++ = 0;
   156c6:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
   156ca:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
   156ce:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
   156d2:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
   156d6:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
   156d8:	4c06      	ldr	r4, [pc, #24]	; (156f4 <DMAChannel::begin(bool)+0xa4>)
   156da:	8821      	ldrh	r1, [r4, #0]
   156dc:	fa41 f502 	asr.w	r5, r1, r2
   156e0:	07ed      	lsls	r5, r5, #31
   156e2:	d5bf      	bpl.n	15664 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   156e4:	4d04      	ldr	r5, [pc, #16]	; (156f8 <DMAChannel::begin(bool)+0xa8>)
   156e6:	4415      	add	r5, r2
   156e8:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
   156ec:	d1ba      	bne.n	15664 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
   156ee:	b662      	cpsie	i
		return;
   156f0:	e7c5      	b.n	1567e <DMAChannel::begin(bool)+0x2e>
   156f2:	bf00      	nop
   156f4:	2000ec1e 	.word	0x2000ec1e
   156f8:	02007480 	.word	0x02007480
   156fc:	400fc000 	.word	0x400fc000
   15700:	400e8000 	.word	0x400e8000

00015704 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   15704:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   15708:	b672      	cpsid	i
	if (_triggered == false) {
   1570a:	7f43      	ldrb	r3, [r0, #29]
   1570c:	b95b      	cbnz	r3, 15726 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
   1570e:	7f01      	ldrb	r1, [r0, #28]
   15710:	2901      	cmp	r1, #1
{
   15712:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
   15714:	d00b      	beq.n	1572e <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
   15716:	2903      	cmp	r1, #3
   15718:	d013      	beq.n	15742 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
   1571a:	2301      	movs	r3, #1
   1571c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1571e:	b902      	cbnz	r2, 15722 <EventResponder::triggerEventNotImmediate()+0x1e>
   15720:	b662      	cpsie	i
}
   15722:	bc30      	pop	{r4, r5}
   15724:	4770      	bx	lr
   15726:	b90a      	cbnz	r2, 1572c <EventResponder::triggerEventNotImmediate()+0x28>
   15728:	b662      	cpsie	i
   1572a:	4770      	bx	lr
   1572c:	4770      	bx	lr
			if (firstYield == nullptr) {
   1572e:	4c12      	ldr	r4, [pc, #72]	; (15778 <EventResponder::triggerEventNotImmediate()+0x74>)
   15730:	6821      	ldr	r1, [r4, #0]
   15732:	b1b1      	cbz	r1, 15762 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
   15734:	4911      	ldr	r1, [pc, #68]	; (1577c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
   15736:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
   15738:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
   1573a:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
   1573c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   1573e:	6158      	str	r0, [r3, #20]
				lastYield = this;
   15740:	e7eb      	b.n	1571a <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
   15742:	4d0f      	ldr	r5, [pc, #60]	; (15780 <EventResponder::triggerEventNotImmediate()+0x7c>)
   15744:	490f      	ldr	r1, [pc, #60]	; (15784 <EventResponder::triggerEventNotImmediate()+0x80>)
   15746:	682c      	ldr	r4, [r5, #0]
   15748:	b18c      	cbz	r4, 1576e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
   1574a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
   1574c:	680b      	ldr	r3, [r1, #0]
   1574e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   15750:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   15752:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   15756:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
   1575a:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1575c:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
   15760:	e7db      	b.n	1571a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
   15762:	4b06      	ldr	r3, [pc, #24]	; (1577c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
   15764:	6020      	str	r0, [r4, #0]
				lastYield = this;
   15766:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
   15768:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
   1576c:	e7d5      	b.n	1571a <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
   1576e:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
   15772:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
   15774:	e7ed      	b.n	15752 <EventResponder::triggerEventNotImmediate()+0x4e>
   15776:	bf00      	nop
   15778:	2000d868 	.word	0x2000d868
   1577c:	2000d874 	.word	0x2000d874
   15780:	2000d870 	.word	0x2000d870
   15784:	2000d86c 	.word	0x2000d86c

00015788 <EventResponder::runFromInterrupt()>:
{
   15788:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1578a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   1578e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   15790:	4c0c      	ldr	r4, [pc, #48]	; (157c4 <EventResponder::runFromInterrupt()+0x3c>)
   15792:	6820      	ldr	r0, [r4, #0]
		if (first) {
   15794:	b180      	cbz	r0, 157b8 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
   15796:	4e0c      	ldr	r6, [pc, #48]	; (157c8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
   15798:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
   1579a:	6943      	ldr	r3, [r0, #20]
   1579c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
   1579e:	b173      	cbz	r3, 157be <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   157a0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
   157a2:	b902      	cbnz	r2, 157a6 <EventResponder::runFromInterrupt()+0x1e>
   157a4:	b662      	cpsie	i
			(*(first->_function))(*first);
   157a6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
   157a8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   157aa:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   157ac:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   157b0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   157b2:	6820      	ldr	r0, [r4, #0]
		if (first) {
   157b4:	2800      	cmp	r0, #0
   157b6:	d1f0      	bne.n	1579a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
   157b8:	b902      	cbnz	r2, 157bc <EventResponder::runFromInterrupt()+0x34>
   157ba:	b662      	cpsie	i
}
   157bc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
   157be:	6033      	str	r3, [r6, #0]
   157c0:	e7ef      	b.n	157a2 <EventResponder::runFromInterrupt()+0x1a>
   157c2:	bf00      	nop
   157c4:	2000d870 	.word	0x2000d870
   157c8:	2000d86c 	.word	0x2000d86c

000157cc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
   157cc:	f7ff bfdc 	b.w	15788 <EventResponder::runFromInterrupt()>

000157d0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   157d0:	4904      	ldr	r1, [pc, #16]	; (157e4 <systick_isr+0x14>)
	systick_millis_count++;
   157d2:	4a05      	ldr	r2, [pc, #20]	; (157e8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
   157d4:	6849      	ldr	r1, [r1, #4]
   157d6:	4b05      	ldr	r3, [pc, #20]	; (157ec <systick_isr+0x1c>)
   157d8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
   157da:	6813      	ldr	r3, [r2, #0]
   157dc:	3301      	adds	r3, #1
   157de:	6013      	str	r3, [r2, #0]
}
   157e0:	4770      	bx	lr
   157e2:	bf00      	nop
   157e4:	e0001000 	.word	0xe0001000
   157e8:	2000eaac 	.word	0x2000eaac
   157ec:	2000eaa8 	.word	0x2000eaa8

000157f0 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
   157f0:	4770      	bx	lr
   157f2:	bf00      	nop

000157f4 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   157f4:	4770      	bx	lr
   157f6:	bf00      	nop

000157f8 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   157f8:	4770      	bx	lr
   157fa:	bf00      	nop

000157fc <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
   157fc:	4770      	bx	lr
   157fe:	bf00      	nop

00015800 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
   15800:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   15802:	4c1a      	ldr	r4, [pc, #104]	; (1586c <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   15804:	4d1a      	ldr	r5, [pc, #104]	; (15870 <pit_isr()+0x70>)
   15806:	6823      	ldr	r3, [r4, #0]
   15808:	42ab      	cmp	r3, r5
   1580a:	d002      	beq.n	15812 <pit_isr()+0x12>
   1580c:	4a19      	ldr	r2, [pc, #100]	; (15874 <pit_isr()+0x74>)
   1580e:	68d1      	ldr	r1, [r2, #12]
   15810:	bb29      	cbnz	r1, 1585e <pit_isr()+0x5e>
   15812:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   15814:	42ab      	cmp	r3, r5
   15816:	d002      	beq.n	1581e <pit_isr()+0x1e>
   15818:	4a16      	ldr	r2, [pc, #88]	; (15874 <pit_isr()+0x74>)
   1581a:	69d1      	ldr	r1, [r2, #28]
   1581c:	b9c9      	cbnz	r1, 15852 <pit_isr()+0x52>
   1581e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   15820:	42ab      	cmp	r3, r5
   15822:	d002      	beq.n	1582a <pit_isr()+0x2a>
   15824:	4a13      	ldr	r2, [pc, #76]	; (15874 <pit_isr()+0x74>)
   15826:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   15828:	b969      	cbnz	r1, 15846 <pit_isr()+0x46>
   1582a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   1582c:	42ab      	cmp	r3, r5
   1582e:	d009      	beq.n	15844 <pit_isr()+0x44>
   15830:	4a10      	ldr	r2, [pc, #64]	; (15874 <pit_isr()+0x74>)
   15832:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   15834:	b131      	cbz	r1, 15844 <pit_isr()+0x44>
   15836:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   15838:	681b      	ldr	r3, [r3, #0]
   1583a:	480f      	ldr	r0, [pc, #60]	; (15878 <pit_isr()+0x78>)
   1583c:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
   1583e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15842:	4718      	bx	r3
   15844:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   15846:	2101      	movs	r1, #1
   15848:	681b      	ldr	r3, [r3, #0]
   1584a:	480c      	ldr	r0, [pc, #48]	; (1587c <pit_isr()+0x7c>)
   1584c:	62d1      	str	r1, [r2, #44]	; 0x2c
   1584e:	4798      	blx	r3
        );
   15850:	e7eb      	b.n	1582a <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   15852:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   15854:	681b      	ldr	r3, [r3, #0]
   15856:	480a      	ldr	r0, [pc, #40]	; (15880 <pit_isr()+0x80>)
   15858:	61d1      	str	r1, [r2, #28]
   1585a:	4798      	blx	r3
        );
   1585c:	e7df      	b.n	1581e <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   1585e:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   15860:	681b      	ldr	r3, [r3, #0]
   15862:	f104 0008 	add.w	r0, r4, #8
   15866:	60d1      	str	r1, [r2, #12]
   15868:	4798      	blx	r3
        );
   1586a:	e7d2      	b.n	15812 <pit_isr()+0x12>
   1586c:	2000a080 	.word	0x2000a080
   15870:	20005fa8 	.word	0x20005fa8
   15874:	40084100 	.word	0x40084100
   15878:	2000a0d0 	.word	0x2000a0d0
   1587c:	2000a0b8 	.word	0x2000a0b8
   15880:	2000a0a0 	.word	0x2000a0a0

00015884 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   15884:	b538      	push	{r3, r4, r5, lr}
   15886:	4c06      	ldr	r4, [pc, #24]	; (158a0 <__tcf_0+0x1c>)
   15888:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   1588c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15890:	4620      	mov	r0, r4
   15892:	3c18      	subs	r4, #24
   15894:	68db      	ldr	r3, [r3, #12]
   15896:	4798      	blx	r3
   15898:	42ac      	cmp	r4, r5
   1589a:	d1f7      	bne.n	1588c <__tcf_0+0x8>
   1589c:	bd38      	pop	{r3, r4, r5, pc}
   1589e:	bf00      	nop
   158a0:	2000a0d0 	.word	0x2000a0d0

000158a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
   158a4:	6803      	ldr	r3, [r0, #0]
{
   158a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158aa:	4604      	mov	r4, r0
   158ac:	b088      	sub	sp, #32
   158ae:	4617      	mov	r7, r2
	if (channel) {
   158b0:	2b00      	cmp	r3, #0
   158b2:	d04b      	beq.n	1594c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
   158b4:	2200      	movs	r2, #0
   158b6:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
   158b8:	2201      	movs	r2, #1
   158ba:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
   158bc:	4d30      	ldr	r5, [pc, #192]	; (15980 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
   158be:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   158c0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 159a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
   158c4:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
   158c6:	f851 3b08 	ldr.w	r3, [r1], #8
   158ca:	112d      	asrs	r5, r5, #4
   158cc:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
   158ce:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   158d0:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
   158d4:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   158d6:	00f6      	lsls	r6, r6, #3
   158d8:	f106 0008 	add.w	r0, r6, #8
   158dc:	f858 3006 	ldr.w	r3, [r8, r6]
   158e0:	4440      	add	r0, r8
   158e2:	68db      	ldr	r3, [r3, #12]
   158e4:	9001      	str	r0, [sp, #4]
   158e6:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
   158e8:	4a26      	ldr	r2, [pc, #152]	; (15984 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
   158ea:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
   158ec:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
   158f0:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
   158f2:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
   158f6:	689b      	ldr	r3, [r3, #8]
   158f8:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   158fa:	9b02      	ldr	r3, [sp, #8]
   158fc:	a804      	add	r0, sp, #16
   158fe:	68db      	ldr	r3, [r3, #12]
   15900:	4798      	blx	r3
	channel->LDVAL = cycles;
   15902:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
   15904:	2203      	movs	r2, #3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   15906:	4820      	ldr	r0, [pc, #128]	; (15988 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
   15908:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
   1590a:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   1590c:	4a1f      	ldr	r2, [pc, #124]	; (1598c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
   1590e:	7923      	ldrb	r3, [r4, #4]
   15910:	4c1f      	ldr	r4, [pc, #124]	; (15990 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
   15912:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   15914:	7813      	ldrb	r3, [r2, #0]
   15916:	7851      	ldrb	r1, [r2, #1]
   15918:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
   1591c:	428b      	cmp	r3, r1
   1591e:	bf28      	it	cs
   15920:	460b      	movcs	r3, r1
   15922:	7891      	ldrb	r1, [r2, #2]
   15924:	78d2      	ldrb	r2, [r2, #3]
   15926:	428b      	cmp	r3, r1
   15928:	bf28      	it	cs
   1592a:	460b      	movcs	r3, r1
   1592c:	4293      	cmp	r3, r2
   1592e:	bf28      	it	cs
   15930:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   15932:	4c18      	ldr	r4, [pc, #96]	; (15994 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
   15934:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15938:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
   1593c:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   1593e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
   15942:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
   15946:	b008      	add	sp, #32
   15948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1594c:	4a12      	ldr	r2, [pc, #72]	; (15998 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
   1594e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   15950:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   15954:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
   15956:	2201      	movs	r2, #1
   15958:	4b10      	ldr	r3, [pc, #64]	; (1599c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
   1595a:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
   1595c:	4a10      	ldr	r2, [pc, #64]	; (159a0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
   1595e:	4613      	mov	r3, r2
   15960:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   15962:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
   15964:	6898      	ldr	r0, [r3, #8]
   15966:	2800      	cmp	r0, #0
   15968:	d0a8      	beq.n	158bc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   1596a:	3310      	adds	r3, #16
   1596c:	4293      	cmp	r3, r2
   1596e:	6023      	str	r3, [r4, #0]
   15970:	d1f8      	bne.n	15964 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
   15972:	2300      	movs	r3, #0
				return false;
   15974:	4618      	mov	r0, r3
				channel = NULL;
   15976:	6023      	str	r3, [r4, #0]
}
   15978:	b008      	add	sp, #32
   1597a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1597e:	bf00      	nop
   15980:	bff7bf00 	.word	0xbff7bf00
   15984:	20005fa8 	.word	0x20005fa8
   15988:	20009c00 	.word	0x20009c00
   1598c:	200098fc 	.word	0x200098fc
   15990:	00015801 	.word	0x00015801
   15994:	e000e400 	.word	0xe000e400
   15998:	400fc000 	.word	0x400fc000
   1599c:	40084000 	.word	0x40084000
   159a0:	40084100 	.word	0x40084100
   159a4:	2000a080 	.word	0x2000a080

000159a8 <IntervalTimer::end()>:
void IntervalTimer::end() {
   159a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
   159aa:	6803      	ldr	r3, [r0, #0]
   159ac:	b343      	cbz	r3, 15a00 <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
   159ae:	4c15      	ldr	r4, [pc, #84]	; (15a04 <IntervalTimer::end()+0x5c>)
   159b0:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   159b2:	4e15      	ldr	r6, [pc, #84]	; (15a08 <IntervalTimer::end()+0x60>)
   159b4:	441c      	add	r4, r3
   159b6:	1124      	asrs	r4, r4, #4
   159b8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   159bc:	00ed      	lsls	r5, r5, #3
   159be:	5973      	ldr	r3, [r6, r5]
   159c0:	f105 0008 	add.w	r0, r5, #8
   159c4:	68db      	ldr	r3, [r3, #12]
   159c6:	4430      	add	r0, r6
   159c8:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   159ca:	4b10      	ldr	r3, [pc, #64]	; (15a0c <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
   159cc:	2100      	movs	r1, #0
		channel->TFLG = 1;
   159ce:	2201      	movs	r2, #1
   159d0:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
   159d2:	683b      	ldr	r3, [r7, #0]
   159d4:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
   159d6:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
   159d8:	23ff      	movs	r3, #255	; 0xff
   159da:	4a0d      	ldr	r2, [pc, #52]	; (15a10 <IntervalTimer::end()+0x68>)
   159dc:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   159de:	7813      	ldrb	r3, [r2, #0]
   159e0:	7850      	ldrb	r0, [r2, #1]
   159e2:	7894      	ldrb	r4, [r2, #2]
   159e4:	4283      	cmp	r3, r0
   159e6:	bf28      	it	cs
   159e8:	4603      	movcs	r3, r0
   159ea:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   159ec:	4a09      	ldr	r2, [pc, #36]	; (15a14 <IntervalTimer::end()+0x6c>)
   159ee:	42a3      	cmp	r3, r4
   159f0:	bf28      	it	cs
   159f2:	4623      	movcs	r3, r4
   159f4:	4283      	cmp	r3, r0
   159f6:	bf28      	it	cs
   159f8:	4603      	movcs	r3, r0
   159fa:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
   159fe:	6039      	str	r1, [r7, #0]
}
   15a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15a02:	bf00      	nop
   15a04:	bff7bf00 	.word	0xbff7bf00
   15a08:	2000a080 	.word	0x2000a080
   15a0c:	20005fa8 	.word	0x20005fa8
   15a10:	200098fc 	.word	0x200098fc
   15a14:	e000e400 	.word	0xe000e400

00015a18 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
   15a18:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
   15a1a:	4b06      	ldr	r3, [pc, #24]	; (15a34 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   15a1c:	2000      	movs	r0, #0
   15a1e:	4c06      	ldr	r4, [pc, #24]	; (15a38 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
   15a20:	4a06      	ldr	r2, [pc, #24]	; (15a3c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
   15a22:	601c      	str	r4, [r3, #0]
   15a24:	619c      	str	r4, [r3, #24]
   15a26:	631c      	str	r4, [r3, #48]	; 0x30
   15a28:	649c      	str	r4, [r3, #72]	; 0x48
   15a2a:	4905      	ldr	r1, [pc, #20]	; (15a40 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
   15a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   15a30:	f003 ba62 	b.w	18ef8 <__aeabi_atexit>
   15a34:	2000a080 	.word	0x2000a080
   15a38:	20005fa8 	.word	0x20005fa8
   15a3c:	20008f08 	.word	0x20008f08
   15a40:	00015885 	.word	0x00015885

00015a44 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   15a44:	4608      	mov	r0, r1
   15a46:	f002 b9d3 	b.w	17df0 <usb_serial_putchar>
   15a4a:	bf00      	nop

00015a4c <Print::write(unsigned char const*, unsigned int)>:
{
   15a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
   15a50:	460c      	mov	r4, r1
   15a52:	b1d1      	cbz	r1, 15a8a <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
   15a54:	b1ea      	cbz	r2, 15a92 <Print::write(unsigned char const*, unsigned int)+0x46>
   15a56:	4680      	mov	r8, r0
   15a58:	188e      	adds	r6, r1, r2
	size_t count = 0;
   15a5a:	2500      	movs	r5, #0
   15a5c:	4f0e      	ldr	r7, [pc, #56]	; (15a98 <Print::write(unsigned char const*, unsigned int)+0x4c>)
   15a5e:	e004      	b.n	15a6a <Print::write(unsigned char const*, unsigned int)+0x1e>
   15a60:	f002 f9c6 	bl	17df0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
   15a64:	42b4      	cmp	r4, r6
   15a66:	4405      	add	r5, r0
   15a68:	d00c      	beq.n	15a84 <Print::write(unsigned char const*, unsigned int)+0x38>
   15a6a:	f8d8 3000 	ldr.w	r3, [r8]
   15a6e:	f814 0b01 	ldrb.w	r0, [r4], #1
   15a72:	681b      	ldr	r3, [r3, #0]
   15a74:	42bb      	cmp	r3, r7
   15a76:	d0f3      	beq.n	15a60 <Print::write(unsigned char const*, unsigned int)+0x14>
   15a78:	4601      	mov	r1, r0
   15a7a:	4640      	mov	r0, r8
   15a7c:	4798      	blx	r3
   15a7e:	42b4      	cmp	r4, r6
   15a80:	4405      	add	r5, r0
   15a82:	d1f2      	bne.n	15a6a <Print::write(unsigned char const*, unsigned int)+0x1e>
}
   15a84:	4628      	mov	r0, r5
   15a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   15a8a:	460d      	mov	r5, r1
}
   15a8c:	4628      	mov	r0, r5
   15a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   15a92:	4615      	mov	r5, r2
   15a94:	e7f6      	b.n	15a84 <Print::write(unsigned char const*, unsigned int)+0x38>
   15a96:	bf00      	nop
   15a98:	00015a45 	.word	0x00015a45

00015a9c <Print::println()>:
{
   15a9c:	b500      	push	{lr}
	return write(buf, 2);
   15a9e:	6803      	ldr	r3, [r0, #0]
{
   15aa0:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
   15aa2:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
   15aa6:	2202      	movs	r2, #2
   15aa8:	a901      	add	r1, sp, #4
   15aaa:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
   15aac:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
   15ab0:	4798      	blx	r3
}
   15ab2:	b003      	add	sp, #12
   15ab4:	f85d fb04 	ldr.w	pc, [sp], #4

00015ab8 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   15ab8:	4b05      	ldr	r3, [pc, #20]	; (15ad0 <_write+0x18>)
   15aba:	2802      	cmp	r0, #2
   15abc:	bf88      	it	hi
   15abe:	4603      	movhi	r3, r0
{
   15ac0:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   15ac2:	681c      	ldr	r4, [r3, #0]
   15ac4:	4618      	mov	r0, r3
   15ac6:	6863      	ldr	r3, [r4, #4]
}
   15ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   15acc:	4718      	bx	r3
   15ace:	bf00      	nop
   15ad0:	20009514 	.word	0x20009514

00015ad4 <Print::printf(char const*, ...)>:
{
   15ad4:	b40e      	push	{r1, r2, r3}
   15ad6:	b500      	push	{lr}
   15ad8:	b082      	sub	sp, #8
   15ada:	aa03      	add	r2, sp, #12
   15adc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
   15ae0:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
   15ae2:	f005 fe89 	bl	1b7f8 <vdprintf>
}
   15ae6:	b002      	add	sp, #8
   15ae8:	f85d eb04 	ldr.w	lr, [sp], #4
   15aec:	b003      	add	sp, #12
   15aee:	4770      	bx	lr

00015af0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   15af0:	49a2      	ldr	r1, [pc, #648]	; (15d7c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   15af2:	4ba3      	ldr	r3, [pc, #652]	; (15d80 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
   15af4:	4288      	cmp	r0, r1
{
   15af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
   15afa:	4ca2      	ldr	r4, [pc, #648]	; (15d84 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   15afc:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   15afe:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   15b00:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
   15b04:	d91b      	bls.n	15b3e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   15b06:	4ba0      	ldr	r3, [pc, #640]	; (15d88 <set_arm_clock+0x298>)
   15b08:	4298      	cmp	r0, r3
   15b0a:	f240 8102 	bls.w	15d12 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   15b0e:	1ac3      	subs	r3, r0, r3
   15b10:	499e      	ldr	r1, [pc, #632]	; (15d8c <set_arm_clock+0x29c>)
   15b12:	0a1b      	lsrs	r3, r3, #8
   15b14:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15b18:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   15b1c:	09db      	lsrs	r3, r3, #7
   15b1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15b22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15b26:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15b2a:	428b      	cmp	r3, r1
   15b2c:	bf28      	it	cs
   15b2e:	460b      	movcs	r3, r1
   15b30:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
   15b34:	4b96      	ldr	r3, [pc, #600]	; (15d90 <set_arm_clock+0x2a0>)
   15b36:	fba3 3707 	umull	r3, r7, r3, r7
   15b3a:	08ff      	lsrs	r7, r7, #3
   15b3c:	e004      	b.n	15b48 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
   15b3e:	4f95      	ldr	r7, [pc, #596]	; (15d94 <set_arm_clock+0x2a4>)
   15b40:	42b8      	cmp	r0, r7
   15b42:	bf8c      	ite	hi
   15b44:	270e      	movhi	r7, #14
   15b46:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15b48:	498d      	ldr	r1, [pc, #564]	; (15d80 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15b4a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15b4e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15b52:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   15b58:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15b5c:	d20c      	bcs.n	15b78 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   15b5e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   15b62:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   15b66:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
   15b6a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   15b6e:	680b      	ldr	r3, [r1, #0]
   15b70:	2b00      	cmp	r3, #0
   15b72:	dafc      	bge.n	15b6e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15b74:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   15b78:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
   15b7c:	d124      	bne.n	15bc8 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   15b7e:	4986      	ldr	r1, [pc, #536]	; (15d98 <set_arm_clock+0x2a8>)
   15b80:	690c      	ldr	r4, [r1, #16]
   15b82:	4986      	ldr	r1, [pc, #536]	; (15d9c <set_arm_clock+0x2ac>)
   15b84:	43a1      	bics	r1, r4
   15b86:	f000 80ea 	beq.w	15d5e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   15b8a:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
   15b8e:	4634      	mov	r4, r6
   15b90:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   15b94:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
   15b98:	d004      	beq.n	15ba4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   15b9a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   15b9e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
   15ba0:	4b77      	ldr	r3, [pc, #476]	; (15d80 <set_arm_clock+0x290>)
   15ba2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   15ba4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   15ba8:	d007      	beq.n	15bba <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   15baa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
   15bae:	4974      	ldr	r1, [pc, #464]	; (15d80 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   15bb0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
   15bb2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   15bb4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   15bb6:	071a      	lsls	r2, r3, #28
   15bb8:	d4fc      	bmi.n	15bb4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   15bba:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   15bbe:	4a70      	ldr	r2, [pc, #448]	; (15d80 <set_arm_clock+0x290>)
   15bc0:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   15bc2:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15bc4:	069b      	lsls	r3, r3, #26
   15bc6:	d4fc      	bmi.n	15bc2 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
   15bc8:	4c75      	ldr	r4, [pc, #468]	; (15da0 <set_arm_clock+0x2b0>)
   15bca:	42a0      	cmp	r0, r4
   15bcc:	f200 80ce 	bhi.w	15d6c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
   15bd0:	f04f 0c01 	mov.w	ip, #1
   15bd4:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
   15bd6:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
   15bd8:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
   15bdc:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
   15be0:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15be4:	42a2      	cmp	r2, r4
   15be6:	d818      	bhi.n	15c1a <set_arm_clock+0x12a>
		if (div_arm < 8) {
   15be8:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
   15bec:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
   15bf0:	f040 808d 	bne.w	15d0e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
   15bf4:	f1bc 0f04 	cmp.w	ip, #4
   15bf8:	f200 8091 	bhi.w	15d1e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
   15bfc:	180a      	adds	r2, r1, r0
   15bfe:	42a2      	cmp	r2, r4
   15c00:	f200 80a4 	bhi.w	15d4c <set_arm_clock+0x25c>
   15c04:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
   15c08:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
   15c0a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15c0e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
   15c12:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15c16:	42a2      	cmp	r2, r4
   15c18:	d9e6      	bls.n	15be8 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15c1a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   15c1e:	028c      	lsls	r4, r1, #10
   15c20:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15c24:	485f      	ldr	r0, [pc, #380]	; (15da4 <set_arm_clock+0x2b4>)
   15c26:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
   15c28:	4a5f      	ldr	r2, [pc, #380]	; (15da8 <set_arm_clock+0x2b8>)
   15c2a:	4290      	cmp	r0, r2
   15c2c:	d97f      	bls.n	15d2e <set_arm_clock+0x23e>
   15c2e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 15dd4 <set_arm_clock+0x2e4>
   15c32:	226c      	movs	r2, #108	; 0x6c
   15c34:	485d      	ldr	r0, [pc, #372]	; (15dac <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15c36:	4d58      	ldr	r5, [pc, #352]	; (15d98 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
   15c38:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15c3c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
   15c40:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15c44:	f8df c190 	ldr.w	ip, [pc, #400]	; 15dd8 <set_arm_clock+0x2e8>
   15c48:	ea0e 0c0c 	and.w	ip, lr, ip
   15c4c:	45d4      	cmp	ip, sl
   15c4e:	d009      	beq.n	15c64 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   15c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   15c54:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   15c58:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   15c5c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   15c5e:	682a      	ldr	r2, [r5, #0]
   15c60:	2a00      	cmp	r2, #0
   15c62:	dafc      	bge.n	15c5e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   15c64:	4a46      	ldr	r2, [pc, #280]	; (15d80 <set_arm_clock+0x290>)
   15c66:	6915      	ldr	r5, [r2, #16]
   15c68:	f005 0507 	and.w	r5, r5, #7
   15c6c:	429d      	cmp	r5, r3
   15c6e:	d003      	beq.n	15c78 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   15c70:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   15c72:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15c74:	03dd      	lsls	r5, r3, #15
   15c76:	d4fc      	bmi.n	15c72 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15c78:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
   15c7c:	d009      	beq.n	15c92 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   15c7e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   15c82:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
   15c86:	4a3e      	ldr	r2, [pc, #248]	; (15d80 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   15c88:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
   15c8a:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   15c8c:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15c8e:	0799      	lsls	r1, r3, #30
   15c90:	d4fc      	bmi.n	15c8c <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15c92:	4947      	ldr	r1, [pc, #284]	; (15db0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
   15c94:	4a47      	ldr	r2, [pc, #284]	; (15db4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15c96:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
   15c98:	4291      	cmp	r1, r2
   15c9a:	d83c      	bhi.n	15d16 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15c9c:	4b46      	ldr	r3, [pc, #280]	; (15db8 <set_arm_clock+0x2c8>)
   15c9e:	09c9      	lsrs	r1, r1, #7
   15ca0:	fba3 3101 	umull	r3, r1, r3, r1
   15ca4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   15ca6:	1e4b      	subs	r3, r1, #1
   15ca8:	021b      	lsls	r3, r3, #8
   15caa:	ea86 0203 	eor.w	r2, r6, r3
   15cae:	f412 7f40 	tst.w	r2, #768	; 0x300
   15cb2:	d006      	beq.n	15cc2 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   15cb4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   15cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
   15cbc:	4a30      	ldr	r2, [pc, #192]	; (15d80 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   15cbe:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
   15cc0:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   15cc2:	4a2f      	ldr	r2, [pc, #188]	; (15d80 <set_arm_clock+0x290>)
   15cc4:	6953      	ldr	r3, [r2, #20]
   15cc6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   15cca:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   15ccc:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15cce:	069b      	lsls	r3, r3, #26
   15cd0:	d4fc      	bmi.n	15ccc <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15cd2:	4b3a      	ldr	r3, [pc, #232]	; (15dbc <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15cd4:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15cd6:	fba3 2300 	umull	r2, r3, r3, r0
   15cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15cde:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
   15ce2:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15ce6:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
   15cea:	4a35      	ldr	r2, [pc, #212]	; (15dc0 <set_arm_clock+0x2d0>)
   15cec:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
   15cee:	4a35      	ldr	r2, [pc, #212]	; (15dc4 <set_arm_clock+0x2d4>)
   15cf0:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15cf2:	4a35      	ldr	r2, [pc, #212]	; (15dc8 <set_arm_clock+0x2d8>)
   15cf4:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15cf6:	d208      	bcs.n	15d0a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   15cf8:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   15cfc:	4a21      	ldr	r2, [pc, #132]	; (15d84 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   15cfe:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
   15d02:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   15d04:	6813      	ldr	r3, [r2, #0]
   15d06:	2b00      	cmp	r3, #0
   15d08:	dafc      	bge.n	15d04 <set_arm_clock+0x214>
	}

	return frequency;
}
   15d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d0e:	4673      	mov	r3, lr
   15d10:	e762      	b.n	15bd8 <set_arm_clock+0xe8>
   15d12:	2712      	movs	r7, #18
   15d14:	e718      	b.n	15b48 <set_arm_clock+0x58>
   15d16:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
   15d1a:	2104      	movs	r1, #4
   15d1c:	e7c5      	b.n	15caa <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15d1e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15d22:	4820      	ldr	r0, [pc, #128]	; (15da4 <set_arm_clock+0x2b4>)
   15d24:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15d26:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15d28:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15d2a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15d2e:	4a27      	ldr	r2, [pc, #156]	; (15dcc <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   15d30:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 15ddc <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15d34:	fba2 2000 	umull	r2, r0, r2, r0
   15d38:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
   15d3a:	4825      	ldr	r0, [pc, #148]	; (15dd0 <set_arm_clock+0x2e0>)
   15d3c:	2a36      	cmp	r2, #54	; 0x36
   15d3e:	bf38      	it	cc
   15d40:	2236      	movcc	r2, #54	; 0x36
   15d42:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   15d46:	ea42 0a0a 	orr.w	sl, r2, sl
   15d4a:	e774      	b.n	15c36 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15d4c:	ea4f 248c 	mov.w	r4, ip, lsl #10
   15d50:	2300      	movs	r3, #0
   15d52:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
   15d56:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
   15d5a:	46ac      	mov	ip, r5
   15d5c:	e762      	b.n	15c24 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   15d5e:	461d      	mov	r5, r3
   15d60:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
   15d64:	4611      	mov	r1, r2
   15d66:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   15d6a:	e713      	b.n	15b94 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
   15d6c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
   15d6e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15d72:	4602      	mov	r2, r0
   15d74:	4631      	mov	r1, r6
   15d76:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
   15d78:	46e6      	mov	lr, ip
   15d7a:	e753      	b.n	15c24 <set_arm_clock+0x134>
   15d7c:	1f78a400 	.word	0x1f78a400
   15d80:	400fc000 	.word	0x400fc000
   15d84:	40080000 	.word	0x40080000
   15d88:	23c34600 	.word	0x23c34600
   15d8c:	004cb223 	.word	0x004cb223
   15d90:	51eb851f 	.word	0x51eb851f
   15d94:	016e3600 	.word	0x016e3600
   15d98:	400d8000 	.word	0x400d8000
   15d9c:	80003040 	.word	0x80003040
   15da0:	269fb1ff 	.word	0x269fb1ff
   15da4:	005b8d80 	.word	0x005b8d80
   15da8:	4df67eff 	.word	0x4df67eff
   15dac:	4d3f6400 	.word	0x4d3f6400
   15db0:	08f0d17f 	.word	0x08f0d17f
   15db4:	2cb4177f 	.word	0x2cb4177f
   15db8:	00e5109f 	.word	0x00e5109f
   15dbc:	431bde83 	.word	0x431bde83
   15dc0:	200094c0 	.word	0x200094c0
   15dc4:	200094bc 	.word	0x200094bc
   15dc8:	2000e9d4 	.word	0x2000e9d4
   15dcc:	165e9f81 	.word	0x165e9f81
   15dd0:	00b71b00 	.word	0x00b71b00
   15dd4:	8000206c 	.word	0x8000206c
   15dd8:	8001307f 	.word	0x8001307f
   15ddc:	80002000 	.word	0x80002000

00015de0 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   15de0:	b900      	cbnz	r0, 15de4 <delay+0x4>
   15de2:	4770      	bx	lr
{
   15de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15de8:	2101      	movs	r1, #1
   15dea:	4681      	mov	r9, r0
   15dec:	4c21      	ldr	r4, [pc, #132]	; (15e74 <delay+0x94>)
   15dee:	4d22      	ldr	r5, [pc, #136]	; (15e78 <delay+0x98>)
   15df0:	4e22      	ldr	r6, [pc, #136]	; (15e7c <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15df2:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   15df6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   15df8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15dfa:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   15dfe:	2b00      	cmp	r3, #0
   15e00:	d1f7      	bne.n	15df2 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15e02:	491f      	ldr	r1, [pc, #124]	; (15e80 <delay+0xa0>)
   15e04:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   15e06:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15e0a:	f8df a078 	ldr.w	sl, [pc, #120]	; 15e84 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
   15e0e:	1a1b      	subs	r3, r3, r0
   15e10:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
   15e12:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15e16:	f8da 2000 	ldr.w	r2, [sl]
   15e1a:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
   15e1e:	455a      	cmp	r2, fp
   15e20:	bf94      	ite	ls
   15e22:	4490      	addls	r8, r2
   15e24:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15e26:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
   15e2a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   15e2c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15e2e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   15e32:	2b00      	cmp	r3, #0
   15e34:	d1f7      	bne.n	15e26 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15e36:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15e38:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
   15e3c:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
   15e3e:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15e42:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
   15e46:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
   15e4a:	bf94      	ite	ls
   15e4c:	4462      	addls	r2, ip
   15e4e:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
   15e52:	eba2 0208 	sub.w	r2, r2, r8
   15e56:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   15e5a:	d306      	bcc.n	15e6a <delay+0x8a>
			if (--msec == 0) return;
   15e5c:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
   15e60:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
   15e64:	d1df      	bne.n	15e26 <delay+0x46>
}
   15e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
   15e6a:	f002 f855 	bl	17f18 <yield>
		while ((micros() - start) >= 1000) {
   15e6e:	4904      	ldr	r1, [pc, #16]	; (15e80 <delay+0xa0>)
   15e70:	e7d9      	b.n	15e26 <delay+0x46>
   15e72:	bf00      	nop
   15e74:	2000eab0 	.word	0x2000eab0
   15e78:	2000eaac 	.word	0x2000eaac
   15e7c:	2000eaa8 	.word	0x2000eaa8
   15e80:	e0001000 	.word	0xe0001000
   15e84:	2000e9d4 	.word	0x2000e9d4

00015e88 <micros>:
{
   15e88:	b430      	push	{r4, r5}
   15e8a:	4b0f      	ldr	r3, [pc, #60]	; (15ec8 <micros+0x40>)
   15e8c:	f04f 0c01 	mov.w	ip, #1
   15e90:	4d0e      	ldr	r5, [pc, #56]	; (15ecc <micros+0x44>)
   15e92:	4c0f      	ldr	r4, [pc, #60]	; (15ed0 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15e94:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
   15e98:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   15e9a:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15e9c:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
   15ea0:	2a00      	cmp	r2, #0
   15ea2:	d1f7      	bne.n	15e94 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15ea4:	4b0b      	ldr	r3, [pc, #44]	; (15ed4 <micros+0x4c>)
   15ea6:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15ea8:	4a0b      	ldr	r2, [pc, #44]	; (15ed8 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
   15eaa:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
   15eac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15eb0:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
   15eb2:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15eb6:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
   15eba:	bc30      	pop	{r4, r5}
   15ebc:	428a      	cmp	r2, r1
   15ebe:	bf94      	ite	ls
   15ec0:	1880      	addls	r0, r0, r2
   15ec2:	1840      	addhi	r0, r0, r1
   15ec4:	4770      	bx	lr
   15ec6:	bf00      	nop
   15ec8:	2000eab0 	.word	0x2000eab0
   15ecc:	2000eaac 	.word	0x2000eaac
   15ed0:	2000eaa8 	.word	0x2000eaa8
   15ed4:	e0001000 	.word	0xe0001000
   15ed8:	2000e9d4 	.word	0x2000e9d4

00015edc <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
   15edc:	2836      	cmp	r0, #54	; 0x36
   15ede:	d816      	bhi.n	15f0e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
   15ee0:	0102      	lsls	r2, r0, #4
   15ee2:	4b10      	ldr	r3, [pc, #64]	; (15f24 <digitalWrite+0x48>)
   15ee4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
   15ee8:	589b      	ldr	r3, [r3, r2]
{
   15eea:	b410      	push	{r4}
	mask = p->mask;
   15eec:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
   15eee:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
   15ef0:	4214      	tst	r4, r2
   15ef2:	d005      	beq.n	15f00 <digitalWrite+0x24>
		if (val) {
   15ef4:	b961      	cbnz	r1, 15f10 <digitalWrite+0x34>
}
   15ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
   15efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
   15efe:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   15f00:	6883      	ldr	r3, [r0, #8]
		if (val) {
   15f02:	b151      	cbz	r1, 15f1a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   15f04:	4a08      	ldr	r2, [pc, #32]	; (15f28 <digitalWrite+0x4c>)
}
   15f06:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   15f0a:	601a      	str	r2, [r3, #0]
}
   15f0c:	4770      	bx	lr
   15f0e:	4770      	bx	lr
   15f10:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
   15f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   15f18:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   15f1a:	4a04      	ldr	r2, [pc, #16]	; (15f2c <digitalWrite+0x50>)
}
   15f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   15f20:	601a      	str	r2, [r3, #0]
}
   15f22:	4770      	bx	lr
   15f24:	20008148 	.word	0x20008148
   15f28:	0001f038 	.word	0x0001f038
   15f2c:	00013038 	.word	0x00013038

00015f30 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
   15f30:	2836      	cmp	r0, #54	; 0x36
   15f32:	d80b      	bhi.n	15f4c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
   15f34:	4b06      	ldr	r3, [pc, #24]	; (15f50 <digitalRead+0x20>)
   15f36:	0102      	lsls	r2, r0, #4
   15f38:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
   15f3c:	589a      	ldr	r2, [r3, r2]
   15f3e:	68c3      	ldr	r3, [r0, #12]
   15f40:	6892      	ldr	r2, [r2, #8]
   15f42:	421a      	tst	r2, r3
   15f44:	bf14      	ite	ne
   15f46:	2001      	movne	r0, #1
   15f48:	2000      	moveq	r0, #0
   15f4a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
   15f4c:	2000      	movs	r0, #0
}
   15f4e:	4770      	bx	lr
   15f50:	20008148 	.word	0x20008148

00015f54 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
   15f54:	2836      	cmp	r0, #54	; 0x36
   15f56:	d829      	bhi.n	15fac <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
   15f58:	4b16      	ldr	r3, [pc, #88]	; (15fb4 <pinMode+0x60>)
   15f5a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   15f5c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
   15f5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   15f62:	589a      	ldr	r2, [r3, r2]
{
   15f64:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   15f66:	6853      	ldr	r3, [r2, #4]
   15f68:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   15f6a:	d00e      	beq.n	15f8a <pinMode+0x36>
   15f6c:	2904      	cmp	r1, #4
   15f6e:	d00c      	beq.n	15f8a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   15f70:	ea23 0304 	bic.w	r3, r3, r4
   15f74:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   15f76:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
   15f78:	b1a9      	cbz	r1, 15fa6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
   15f7a:	2902      	cmp	r1, #2
   15f7c:	d017      	beq.n	15fae <pinMode+0x5a>
		} else if (mode == INPUT_PULLDOWN) {
   15f7e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   15f80:	bf0c      	ite	eq
   15f82:	4a0d      	ldreq	r2, [pc, #52]	; (15fb8 <pinMode+0x64>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   15f84:	4a0d      	ldrne	r2, [pc, #52]	; (15fbc <pinMode+0x68>)
   15f86:	601a      	str	r2, [r3, #0]
   15f88:	e007      	b.n	15f9a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
   15f8a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
   15f8c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
   15f8e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   15f90:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
   15f92:	d008      	beq.n	15fa6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   15f94:	f640 0238 	movw	r2, #2104	; 0x838
   15f98:	601a      	str	r2, [r3, #0]
	*(p->mux) = 5 | 0x10;
   15f9a:	6843      	ldr	r3, [r0, #4]
   15f9c:	2215      	movs	r2, #21
}
   15f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
   15fa2:	601a      	str	r2, [r3, #0]
}
   15fa4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
   15fa6:	2238      	movs	r2, #56	; 0x38
   15fa8:	601a      	str	r2, [r3, #0]
   15faa:	e7f6      	b.n	15f9a <pinMode+0x46>
   15fac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   15fae:	4a04      	ldr	r2, [pc, #16]	; (15fc0 <pinMode+0x6c>)
   15fb0:	601a      	str	r2, [r3, #0]
   15fb2:	e7f2      	b.n	15f9a <pinMode+0x46>
   15fb4:	20008148 	.word	0x20008148
   15fb8:	00013038 	.word	0x00013038
   15fbc:	00010038 	.word	0x00010038
   15fc0:	0001f038 	.word	0x0001f038

00015fc4 <flash_wait>:
{
   15fc4:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   15fc6:	4a12      	ldr	r2, [pc, #72]	; (16010 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
   15fc8:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   15fca:	4b12      	ldr	r3, [pc, #72]	; (16014 <flash_wait+0x50>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   15fcc:	2101      	movs	r1, #1
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   15fce:	4d12      	ldr	r5, [pc, #72]	; (16018 <flash_wait+0x54>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
   15fd0:	4c12      	ldr	r4, [pc, #72]	; (1601c <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   15fd2:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   15fd6:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   15fda:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
   15fde:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   15fe2:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   15fe6:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
   15fea:	6953      	ldr	r3, [r2, #20]
   15fec:	07db      	lsls	r3, r3, #31
   15fee:	d5fc      	bpl.n	15fea <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   15ff0:	6151      	str	r1, [r2, #20]
	} while (status & 1);
   15ff2:	7823      	ldrb	r3, [r4, #0]
   15ff4:	07db      	lsls	r3, r3, #31
   15ff6:	d4f0      	bmi.n	15fda <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   15ff8:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   15ffa:	4905      	ldr	r1, [pc, #20]	; (16010 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   15ffc:	f043 0301 	orr.w	r3, r3, #1
   16000:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   16002:	680b      	ldr	r3, [r1, #0]
   16004:	07db      	lsls	r3, r3, #31
   16006:	d4fc      	bmi.n	16002 <flash_wait+0x3e>
	__enable_irq();
   16008:	b662      	cpsie	i
}
   1600a:	bc30      	pop	{r4, r5}
   1600c:	4770      	bx	lr
   1600e:	bf00      	nop
   16010:	402a8000 	.word	0x402a8000
   16014:	24010405 	.word	0x24010405
   16018:	000f0001 	.word	0x000f0001
   1601c:	402a8100 	.word	0x402a8100

00016020 <eeprom_initialize>:
{
   16020:	b570      	push	{r4, r5, r6, lr}
   16022:	4c0e      	ldr	r4, [pc, #56]	; (1605c <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
   16024:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
   16028:	4e0d      	ldr	r6, [pc, #52]	; (16060 <eeprom_initialize+0x40>)
   1602a:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1602e:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
   16032:	2100      	movs	r1, #0
   16034:	e002      	b.n	1603c <eeprom_initialize+0x1c>
		} while (p < end);
   16036:	42b3      	cmp	r3, r6
			index++;
   16038:	b281      	uxth	r1, r0
		} while (p < end);
   1603a:	d204      	bcs.n	16046 <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
   1603c:	881a      	ldrh	r2, [r3, #0]
			index++;
   1603e:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
   16040:	3302      	adds	r3, #2
   16042:	4572      	cmp	r2, lr
   16044:	d1f7      	bne.n	16036 <eeprom_initialize+0x16>
		sector_index[sector] = index;
   16046:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
   1604a:	42ac      	cmp	r4, r5
   1604c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   16050:	d1ed      	bne.n	1602e <eeprom_initialize+0xe>
	initialized = 1;
   16052:	4b04      	ldr	r3, [pc, #16]	; (16064 <eeprom_initialize+0x44>)
   16054:	2201      	movs	r2, #1
   16056:	701a      	strb	r2, [r3, #0]
}
   16058:	bd70      	pop	{r4, r5, r6, pc}
   1605a:	bf00      	nop
   1605c:	2000e9d6 	.word	0x2000e9d6
   16060:	607c1000 	.word	0x607c1000
   16064:	2000ec31 	.word	0x2000ec31

00016068 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
   16068:	f241 03bb 	movw	r3, #4283	; 0x10bb
   1606c:	4298      	cmp	r0, r3
   1606e:	d82f      	bhi.n	160d0 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
   16070:	4b18      	ldr	r3, [pc, #96]	; (160d4 <eeprom_read_byte+0x6c>)
{
   16072:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
   16074:	781b      	ldrb	r3, [r3, #0]
   16076:	4604      	mov	r4, r0
   16078:	b33b      	cbz	r3, 160ca <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
   1607a:	08a0      	lsrs	r0, r4, #2
   1607c:	4b16      	ldr	r3, [pc, #88]	; (160d8 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1607e:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
   16082:	4c16      	ldr	r4, [pc, #88]	; (160dc <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
   16084:	fba3 2300 	umull	r2, r3, r3, r0
   16088:	1ac2      	subs	r2, r0, r3
   1608a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1608e:	4a14      	ldr	r2, [pc, #80]	; (160e0 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
   16090:	095b      	lsrs	r3, r3, #5
   16092:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
   16096:	469c      	mov	ip, r3
   16098:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1609c:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
   160a0:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
   160a2:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   160a6:	441a      	add	r2, r3
	end = p + sector_index[sector];
   160a8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   160ac:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
   160ae:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
   160b2:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
   160b6:	d907      	bls.n	160c8 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
   160b8:	881a      	ldrh	r2, [r3, #0]
   160ba:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
   160bc:	b2d4      	uxtb	r4, r2
   160be:	428c      	cmp	r4, r1
   160c0:	bf08      	it	eq
   160c2:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
   160c4:	459c      	cmp	ip, r3
   160c6:	d8f7      	bhi.n	160b8 <eeprom_read_byte+0x50>
}
   160c8:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
   160ca:	f7ff ffa9 	bl	16020 <eeprom_initialize>
   160ce:	e7d4      	b.n	1607a <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
   160d0:	20ff      	movs	r0, #255	; 0xff
}
   160d2:	4770      	bx	lr
   160d4:	2000ec31 	.word	0x2000ec31
   160d8:	04104105 	.word	0x04104105
   160dc:	2000e9d8 	.word	0x2000e9d8
   160e0:	000607c0 	.word	0x000607c0

000160e4 <eeprom_read_word>:
{
   160e4:	b538      	push	{r3, r4, r5, lr}
   160e6:	4605      	mov	r5, r0
	return eeprom_read_byte(p) | (eeprom_read_byte(p+1) << 8);
   160e8:	f7ff ffbe 	bl	16068 <eeprom_read_byte>
   160ec:	4604      	mov	r4, r0
   160ee:	1c68      	adds	r0, r5, #1
   160f0:	f7ff ffba 	bl	16068 <eeprom_read_byte>
   160f4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   160f8:	b280      	uxth	r0, r0
   160fa:	bd38      	pop	{r3, r4, r5, pc}

000160fc <eeprom_read_dword>:
{
   160fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160fe:	4605      	mov	r5, r0
	return eeprom_read_byte(p) | (eeprom_read_byte(p+1) << 8)
   16100:	f7ff ffb2 	bl	16068 <eeprom_read_byte>
   16104:	4606      	mov	r6, r0
   16106:	1c68      	adds	r0, r5, #1
   16108:	f7ff ffae 	bl	16068 <eeprom_read_byte>
   1610c:	4607      	mov	r7, r0
		| (eeprom_read_byte(p+2) << 16) | (eeprom_read_byte(p+3) << 24);
   1610e:	1ca8      	adds	r0, r5, #2
   16110:	f7ff ffaa 	bl	16068 <eeprom_read_byte>
   16114:	4604      	mov	r4, r0
   16116:	1ce8      	adds	r0, r5, #3
   16118:	0424      	lsls	r4, r4, #16
   1611a:	f7ff ffa5 	bl	16068 <eeprom_read_byte>
   1611e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
   16122:	4334      	orrs	r4, r6
}
   16124:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
   16128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1612a:	bf00      	nop

0001612c <eeprom_is_ready>:
}
   1612c:	2001      	movs	r0, #1
   1612e:	4770      	bx	lr

00016130 <eepromemu_flash_write>:
{
   16130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16132:	460f      	mov	r7, r1
   16134:	4616      	mov	r6, r2
	__disable_irq();
   16136:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16138:	4b34      	ldr	r3, [pc, #208]	; (1620c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   1613a:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1613e:	4a34      	ldr	r2, [pc, #208]	; (16210 <eepromemu_flash_write+0xe0>)
   16140:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   16142:	2202      	movs	r2, #2
   16144:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
   16146:	2200      	movs	r2, #0
   16148:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   1614c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   16150:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   16154:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   16158:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1615c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16160:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16164:	2201      	movs	r2, #1
   16166:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1616a:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1616e:	1982      	adds	r2, r0, r6
	asm("dsb");
   16170:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   16174:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
   16178:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
   1617c:	3320      	adds	r3, #32
	} while (location < end_addr);
   1617e:	429a      	cmp	r2, r3
   16180:	d8fa      	bhi.n	16178 <eepromemu_flash_write+0x48>
	asm("dsb");
   16182:	f3bf 8f4f 	dsb	sy
	asm("isb");
   16186:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1618a:	4d20      	ldr	r5, [pc, #128]	; (1620c <eepromemu_flash_write+0xdc>)
   1618c:	696b      	ldr	r3, [r5, #20]
   1618e:	07da      	lsls	r2, r3, #31
   16190:	d5fc      	bpl.n	1618c <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16192:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   16194:	491f      	ldr	r1, [pc, #124]	; (16214 <eepromemu_flash_write+0xe4>)
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   16196:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   16198:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1619c:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   1619e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   161a2:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   161a6:	f242 2101 	movw	r1, #8705	; 0x2201
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   161aa:	4c18      	ldr	r4, [pc, #96]	; (1620c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   161ac:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
   161b0:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   161b4:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   161b8:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   161bc:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   161c0:	4d15      	ldr	r5, [pc, #84]	; (16218 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   161c2:	e001      	b.n	161c8 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
   161c4:	065b      	lsls	r3, r3, #25
   161c6:	d409      	bmi.n	161dc <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   161c8:	6963      	ldr	r3, [r4, #20]
   161ca:	f013 0001 	ands.w	r0, r3, #1
   161ce:	d0f9      	beq.n	161c4 <eepromemu_flash_write+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
   161d0:	2341      	movs	r3, #65	; 0x41
   161d2:	6163      	str	r3, [r4, #20]
}
   161d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
   161d8:	f7ff bef4 	b.w	15fc4 <flash_wait>
			if (wrlen > 8) wrlen = 8;
   161dc:	2e08      	cmp	r6, #8
   161de:	d80a      	bhi.n	161f6 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
   161e0:	b136      	cbz	r6, 161f0 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   161e2:	4632      	mov	r2, r6
   161e4:	4639      	mov	r1, r7
				src += wrlen;
   161e6:	4437      	add	r7, r6
				len -= wrlen;
   161e8:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   161ea:	4628      	mov	r0, r5
   161ec:	f000 f9ca 	bl	16584 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
   161f0:	2340      	movs	r3, #64	; 0x40
   161f2:	6163      	str	r3, [r4, #20]
   161f4:	e7e8      	b.n	161c8 <eepromemu_flash_write+0x98>
   161f6:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
   161fa:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   161fc:	4639      	mov	r1, r7
   161fe:	4632      	mov	r2, r6
				src += wrlen;
   16200:	4437      	add	r7, r6
				len -= wrlen;
   16202:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16204:	4628      	mov	r0, r5
   16206:	f000 f9bd 	bl	16584 <memcpy>
				len -= wrlen;
   1620a:	e7f1      	b.n	161f0 <eepromemu_flash_write+0xc0>
   1620c:	402a8000 	.word	0x402a8000
   16210:	5af05af0 	.word	0x5af05af0
   16214:	08180432 	.word	0x08180432
   16218:	402a8180 	.word	0x402a8180

0001621c <eepromemu_flash_erase_sector>:
{
   1621c:	b410      	push	{r4}
	__disable_irq();
   1621e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16220:	4b28      	ldr	r3, [pc, #160]	; (162c4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   16222:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16224:	4c28      	ldr	r4, [pc, #160]	; (162c8 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT61 = 0;
   16226:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16228:	619c      	str	r4, [r3, #24]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1622a:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   1622e:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   16230:	f240 4106 	movw	r1, #1030	; 0x406
   16234:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16238:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
   1623a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   1623e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   16242:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
   16246:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   1624a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1624e:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   16252:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16254:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
   16258:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
   1625c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
   16260:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
   16264:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
   16268:	4299      	cmp	r1, r3
   1626a:	bf34      	ite	cc
   1626c:	2101      	movcc	r1, #1
   1626e:	2180      	movcs	r1, #128	; 0x80
   16270:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
   16274:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
   16276:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
   1627a:	461a      	mov	r2, r3
	} while (location < end_addr);
   1627c:	f103 0320 	add.w	r3, r3, #32
   16280:	d1f8      	bne.n	16274 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
   16282:	f3bf 8f4f 	dsb	sy
	asm("isb");
   16286:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1628a:	4a0e      	ldr	r2, [pc, #56]	; (162c4 <eepromemu_flash_erase_sector+0xa8>)
   1628c:	6953      	ldr	r3, [r2, #20]
   1628e:	07d9      	lsls	r1, r3, #31
   16290:	d5fc      	bpl.n	1628c <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16292:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   16294:	490d      	ldr	r1, [pc, #52]	; (162cc <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   16296:	4b0e      	ldr	r3, [pc, #56]	; (162d0 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16298:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   1629a:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   1629c:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   162a0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   162a4:	4907      	ldr	r1, [pc, #28]	; (162c4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   162a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   162aa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   162ae:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   162b2:	694b      	ldr	r3, [r1, #20]
   162b4:	07db      	lsls	r3, r3, #31
   162b6:	d5fc      	bpl.n	162b2 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   162b8:	2301      	movs	r3, #1
}
   162ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   162be:	614b      	str	r3, [r1, #20]
	flash_wait();
   162c0:	f7ff be80 	b.w	15fc4 <flash_wait>
   162c4:	402a8000 	.word	0x402a8000
   162c8:	5af05af0 	.word	0x5af05af0
   162cc:	08180420 	.word	0x08180420
   162d0:	00fff000 	.word	0x00fff000

000162d4 <eeprom_write_byte>:
	if (addr > E2END) return;
   162d4:	f241 03bb 	movw	r3, #4283	; 0x10bb
   162d8:	4298      	cmp	r0, r3
   162da:	f200 8089 	bhi.w	163f0 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
   162de:	4b46      	ldr	r3, [pc, #280]	; (163f8 <eeprom_write_byte+0x124>)
{
   162e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
   162e4:	781b      	ldrb	r3, [r3, #0]
{
   162e6:	b0c2      	sub	sp, #264	; 0x108
   162e8:	4605      	mov	r5, r0
   162ea:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
   162ec:	2b00      	cmp	r3, #0
   162ee:	d07c      	beq.n	163ea <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
   162f0:	08ab      	lsrs	r3, r5, #2
   162f2:	4e42      	ldr	r6, [pc, #264]	; (163fc <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   162f4:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
   162f8:	4f41      	ldr	r7, [pc, #260]	; (16400 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
   162fa:	fba6 2603 	umull	r2, r6, r6, r3
   162fe:	1b9a      	subs	r2, r3, r6
   16300:	eb06 0652 	add.w	r6, r6, r2, lsr #1
   16304:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   16306:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
   1630a:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
   1630e:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16310:	4b3c      	ldr	r3, [pc, #240]	; (16404 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
   16312:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16316:	4433      	add	r3, r6
	end = p + sector_index[sector];
   16318:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1631a:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
   1631e:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
   16322:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
   16326:	d964      	bls.n	163f2 <eeprom_write_byte+0x11e>
   16328:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
   1632a:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
   1632e:	881a      	ldrh	r2, [r3, #0]
   16330:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
   16332:	b2d1      	uxtb	r1, r2
   16334:	42a9      	cmp	r1, r5
   16336:	bf08      	it	eq
   16338:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
   1633c:	4298      	cmp	r0, r3
   1633e:	d8f6      	bhi.n	1632e <eeprom_write_byte+0x5a>
	if (data == olddata) return;
   16340:	45e1      	cmp	r9, ip
   16342:	d041      	beq.n	163c8 <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
   16344:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   16348:	d341      	bcc.n	163ce <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
   1634a:	ac02      	add	r4, sp, #8
   1634c:	f44f 7280 	mov.w	r2, #256	; 0x100
   16350:	21ff      	movs	r1, #255	; 0xff
   16352:	4620      	mov	r0, r4
   16354:	f005 fb70 	bl	1ba38 <memset>
		while (p < end) {
   16358:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   1635c:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16360:	4642      	mov	r2, r8
   16362:	4298      	cmp	r0, r3
   16364:	bf34      	ite	cc
   16366:	2001      	movcc	r0, #1
   16368:	f44f 6000 	movcs.w	r0, #2048	; 0x800
   1636c:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
   16370:	4613      	mov	r3, r2
   16372:	3202      	adds	r2, #2
   16374:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
   16376:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
   16378:	b2d9      	uxtb	r1, r3
   1637a:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1637e:	5463      	strb	r3, [r4, r1]
		while (p < end) {
   16380:	d1f6      	bne.n	16370 <eeprom_write_byte+0x9c>
		buf[offset] = data;
   16382:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
   16386:	f10d 0907 	add.w	r9, sp, #7
   1638a:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
   1638e:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
   16390:	464c      	mov	r4, r9
   16392:	4640      	mov	r0, r8
   16394:	f7ff ff42 	bl	1621c <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
   16398:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
   1639c:	eb08 0045 	add.w	r0, r8, r5, lsl #1
   163a0:	2202      	movs	r2, #2
   163a2:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
   163a6:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
   163a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
   163ac:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
   163b0:	d006      	beq.n	163c0 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
   163b2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
   163b6:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
   163b8:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
   163bc:	f7ff feb8 	bl	16130 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
   163c0:	45a2      	cmp	sl, r4
   163c2:	d1e9      	bne.n	16398 <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
   163c4:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
   163c8:	b042      	add	sp, #264	; 0x108
   163ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
   163ce:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
   163d2:	a902      	add	r1, sp, #8
   163d4:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
   163d6:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
   163d8:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
   163dc:	f7ff fea8 	bl	16130 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
   163e0:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
   163e4:	b042      	add	sp, #264	; 0x108
   163e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
   163ea:	f7ff fe19 	bl	16020 <eeprom_initialize>
   163ee:	e77f      	b.n	162f0 <eeprom_write_byte+0x1c>
   163f0:	4770      	bx	lr
	uint8_t olddata=0xFF;
   163f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   163f6:	e7a3      	b.n	16340 <eeprom_write_byte+0x6c>
   163f8:	2000ec31 	.word	0x2000ec31
   163fc:	04104105 	.word	0x04104105
   16400:	2000e9d8 	.word	0x2000e9d8
   16404:	000607c0 	.word	0x000607c0

00016408 <eeprom_write_word>:
{
   16408:	b538      	push	{r3, r4, r5, lr}
   1640a:	460c      	mov	r4, r1
   1640c:	4605      	mov	r5, r0
	eeprom_write_byte(p++, value);
   1640e:	b2c9      	uxtb	r1, r1
   16410:	f7ff ff60 	bl	162d4 <eeprom_write_byte>
	eeprom_write_byte(p, value >> 8);
   16414:	1c68      	adds	r0, r5, #1
   16416:	0a21      	lsrs	r1, r4, #8
}
   16418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	eeprom_write_byte(p, value >> 8);
   1641c:	f7ff bf5a 	b.w	162d4 <eeprom_write_byte>

00016420 <eeprom_write_dword>:
{
   16420:	b538      	push	{r3, r4, r5, lr}
   16422:	460c      	mov	r4, r1
   16424:	4605      	mov	r5, r0
	eeprom_write_byte(p++, value);
   16426:	b2c9      	uxtb	r1, r1
   16428:	f7ff ff54 	bl	162d4 <eeprom_write_byte>
	eeprom_write_byte(p++, value >> 8);
   1642c:	f3c4 2107 	ubfx	r1, r4, #8, #8
   16430:	1c68      	adds	r0, r5, #1
   16432:	f7ff ff4f 	bl	162d4 <eeprom_write_byte>
	eeprom_write_byte(p++, value >> 16);
   16436:	f3c4 4107 	ubfx	r1, r4, #16, #8
   1643a:	1ca8      	adds	r0, r5, #2
   1643c:	f7ff ff4a 	bl	162d4 <eeprom_write_byte>
	eeprom_write_byte(p, value >> 24);
   16440:	1ce8      	adds	r0, r5, #3
   16442:	0e21      	lsrs	r1, r4, #24
}
   16444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	eeprom_write_byte(p, value >> 24);
   16448:	f7ff bf44 	b.w	162d4 <eeprom_write_byte>

0001644c <eeprom_write_block>:
	while (len--) {
   1644c:	b162      	cbz	r2, 16468 <eeprom_write_block+0x1c>
{
   1644e:	b570      	push	{r4, r5, r6, lr}
   16450:	4605      	mov	r5, r0
   16452:	460c      	mov	r4, r1
   16454:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
   16456:	4620      	mov	r0, r4
   16458:	3401      	adds	r4, #1
   1645a:	f815 1b01 	ldrb.w	r1, [r5], #1
   1645e:	f7ff ff39 	bl	162d4 <eeprom_write_byte>
	while (len--) {
   16462:	42b4      	cmp	r4, r6
   16464:	d1f7      	bne.n	16456 <eeprom_write_block+0xa>
}
   16466:	bd70      	pop	{r4, r5, r6, pc}
   16468:	4770      	bx	lr
   1646a:	bf00      	nop

0001646c <dummy_isr>:
static void dummy_isr() {};
   1646c:	4770      	bx	lr
   1646e:	bf00      	nop

00016470 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   16470:	2836      	cmp	r0, #54	; 0x36
   16472:	d858      	bhi.n	16526 <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
   16474:	0100      	lsls	r0, r0, #4
{
   16476:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
   16478:	4c34      	ldr	r4, [pc, #208]	; (1654c <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
   1647a:	4d35      	ldr	r5, [pc, #212]	; (16550 <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
   1647c:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
   1647e:	42ab      	cmp	r3, r5
   16480:	d056      	beq.n	16530 <attachInterrupt+0xc0>
   16482:	d849      	bhi.n	16518 <attachInterrupt+0xa8>
   16484:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
   16488:	d04b      	beq.n	16522 <attachInterrupt+0xb2>
   1648a:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   1648e:	42ab      	cmp	r3, r5
   16490:	d140      	bne.n	16514 <attachInterrupt+0xa4>
   16492:	4d30      	ldr	r5, [pc, #192]	; (16554 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
   16494:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   16496:	4e30      	ldr	r6, [pc, #192]	; (16558 <attachInterrupt+0xe8>)
   16498:	4c30      	ldr	r4, [pc, #192]	; (1655c <attachInterrupt+0xec>)
   1649a:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
   1649e:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
   164a2:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
   164a4:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
   164a8:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   164ac:	2a04      	cmp	r2, #4
   164ae:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
   164b2:	d82f      	bhi.n	16514 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   164b4:	695e      	ldr	r6, [r3, #20]
   164b6:	ea26 0600 	bic.w	r6, r6, r0
   164ba:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
   164bc:	f04f 0605 	mov.w	r6, #5
   164c0:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
   164c4:	6826      	ldr	r6, [r4, #0]
   164c6:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
   164ca:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
   164cc:	685c      	ldr	r4, [r3, #4]
   164ce:	ea24 0400 	bic.w	r4, r4, r0
   164d2:	605c      	str	r4, [r3, #4]
   164d4:	4c22      	ldr	r4, [pc, #136]	; (16560 <attachInterrupt+0xf0>)
   164d6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
   164da:	fa90 f2a0 	rbit	r2, r0
   164de:	fab2 f282 	clz	r2, r2
	table[index] = function;
   164e2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   164e6:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
   164ea:	d01d      	beq.n	16528 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
   164ec:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
   164ee:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
   164f0:	ea01 0105 	and.w	r1, r1, r5
   164f4:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
   164f6:	dc1d      	bgt.n	16534 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
   164f8:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
   164fa:	2503      	movs	r5, #3
   164fc:	68d9      	ldr	r1, [r3, #12]
   164fe:	4094      	lsls	r4, r2
   16500:	fa05 f202 	lsl.w	r2, r5, r2
   16504:	ea21 0202 	bic.w	r2, r1, r2
   16508:	4322      	orrs	r2, r4
   1650a:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
   1650c:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
   1650e:	695a      	ldr	r2, [r3, #20]
   16510:	4302      	orrs	r2, r0
   16512:	615a      	str	r2, [r3, #20]
}
   16514:	bcf0      	pop	{r4, r5, r6, r7}
   16516:	4770      	bx	lr
	switch((uint32_t)gpio) {
   16518:	4d12      	ldr	r5, [pc, #72]	; (16564 <attachInterrupt+0xf4>)
   1651a:	42ab      	cmp	r3, r5
   1651c:	d1fa      	bne.n	16514 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
   1651e:	4d12      	ldr	r5, [pc, #72]	; (16568 <attachInterrupt+0xf8>)
   16520:	e7b8      	b.n	16494 <attachInterrupt+0x24>
			table = isr_table_gpio1;
   16522:	4d12      	ldr	r5, [pc, #72]	; (1656c <attachInterrupt+0xfc>)
   16524:	e7b6      	b.n	16494 <attachInterrupt+0x24>
   16526:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
   16528:	69da      	ldr	r2, [r3, #28]
   1652a:	4302      	orrs	r2, r0
   1652c:	61da      	str	r2, [r3, #28]
   1652e:	e7ed      	b.n	1650c <attachInterrupt+0x9c>
			table = isr_table_gpio3;
   16530:	4d0f      	ldr	r5, [pc, #60]	; (16570 <attachInterrupt+0x100>)
   16532:	e7af      	b.n	16494 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
   16534:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   16536:	2503      	movs	r5, #3
   16538:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
   1653a:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   1653c:	4094      	lsls	r4, r2
   1653e:	fa05 f202 	lsl.w	r2, r5, r2
   16542:	ea21 0202 	bic.w	r2, r1, r2
   16546:	4322      	orrs	r2, r4
   16548:	611a      	str	r2, [r3, #16]
   1654a:	e7df      	b.n	1650c <attachInterrupt+0x9c>
   1654c:	20008148 	.word	0x20008148
   16550:	42008000 	.word	0x42008000
   16554:	200099f8 	.word	0x200099f8
   16558:	00000021 	.word	0x00000021
   1655c:	20009c00 	.word	0x20009c00
   16560:	20002670 	.word	0x20002670
   16564:	4200c000 	.word	0x4200c000
   16568:	20009af8 	.word	0x20009af8
   1656c:	20009978 	.word	0x20009978
   16570:	20009a78 	.word	0x20009a78

00016574 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   16574:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   16576:	f7e9 fdfb 	bl	170 <setup>
	while (1) {
		loop();
   1657a:	f7e9 fe0f 	bl	19c <loop>
		yield();
   1657e:	f001 fccb 	bl	17f18 <yield>
	while (1) {
   16582:	e7fa      	b.n	1657a <main+0x6>

00016584 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   16584:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   16586:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
   1658a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   1658e:	d16d      	bne.n	1666c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   16590:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
   16592:	d341      	bcc.n	16618 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   16594:	f851 3b04 	ldr.w	r3, [r1], #4
   16598:	f840 3b04 	str.w	r3, [r0], #4
   1659c:	f851 3b04 	ldr.w	r3, [r1], #4
   165a0:	f840 3b04 	str.w	r3, [r0], #4
   165a4:	f851 3b04 	ldr.w	r3, [r1], #4
   165a8:	f840 3b04 	str.w	r3, [r0], #4
   165ac:	f851 3b04 	ldr.w	r3, [r1], #4
   165b0:	f840 3b04 	str.w	r3, [r0], #4
   165b4:	f851 3b04 	ldr.w	r3, [r1], #4
   165b8:	f840 3b04 	str.w	r3, [r0], #4
   165bc:	f851 3b04 	ldr.w	r3, [r1], #4
   165c0:	f840 3b04 	str.w	r3, [r0], #4
   165c4:	f851 3b04 	ldr.w	r3, [r1], #4
   165c8:	f840 3b04 	str.w	r3, [r0], #4
   165cc:	f851 3b04 	ldr.w	r3, [r1], #4
   165d0:	f840 3b04 	str.w	r3, [r0], #4
   165d4:	f851 3b04 	ldr.w	r3, [r1], #4
   165d8:	f840 3b04 	str.w	r3, [r0], #4
   165dc:	f851 3b04 	ldr.w	r3, [r1], #4
   165e0:	f840 3b04 	str.w	r3, [r0], #4
   165e4:	f851 3b04 	ldr.w	r3, [r1], #4
   165e8:	f840 3b04 	str.w	r3, [r0], #4
   165ec:	f851 3b04 	ldr.w	r3, [r1], #4
   165f0:	f840 3b04 	str.w	r3, [r0], #4
   165f4:	f851 3b04 	ldr.w	r3, [r1], #4
   165f8:	f840 3b04 	str.w	r3, [r0], #4
   165fc:	f851 3b04 	ldr.w	r3, [r1], #4
   16600:	f840 3b04 	str.w	r3, [r0], #4
   16604:	f851 3b04 	ldr.w	r3, [r1], #4
   16608:	f840 3b04 	str.w	r3, [r0], #4
   1660c:	f851 3b04 	ldr.w	r3, [r1], #4
   16610:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   16614:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   16616:	d2bd      	bcs.n	16594 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   16618:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   1661a:	d311      	bcc.n	16640 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   1661c:	f851 3b04 	ldr.w	r3, [r1], #4
   16620:	f840 3b04 	str.w	r3, [r0], #4
   16624:	f851 3b04 	ldr.w	r3, [r1], #4
   16628:	f840 3b04 	str.w	r3, [r0], #4
   1662c:	f851 3b04 	ldr.w	r3, [r1], #4
   16630:	f840 3b04 	str.w	r3, [r0], #4
   16634:	f851 3b04 	ldr.w	r3, [r1], #4
   16638:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   1663c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
   1663e:	d2ed      	bcs.n	1661c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   16640:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
   16642:	d305      	bcc.n	16650 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   16644:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   16648:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
   1664c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   1664e:	d2f9      	bcs.n	16644 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   16650:	3204      	adds	r2, #4
	beq	.Ldone
   16652:	d008      	beq.n	16666 <memcpy+0xe2>

	lsls	r2, r2, #31
   16654:	07d2      	lsls	r2, r2, #31
	itt ne
   16656:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   16658:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   1665c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
   16660:	d301      	bcc.n	16666 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   16662:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   16664:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   16666:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   16668:	4770      	bx	lr
   1666a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   1666c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
   1666e:	d313      	bcc.n	16698 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   16670:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
   16672:	d08d      	beq.n	16590 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   16674:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   16678:	d08a      	beq.n	16590 <memcpy+0xc>

	rsb	r3, #4
   1667a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
   1667e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
   16680:	07db      	lsls	r3, r3, #31
	itt ne
   16682:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   16684:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   16688:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   1668c:	d380      	bcc.n	16590 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   1668e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   16692:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   16696:	e77b      	b.n	16590 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   16698:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
   1669a:	d3d9      	bcc.n	16650 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   1669c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
   1669e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   166a2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   166a6:	d2f9      	bcs.n	1669c <memcpy+0x118>

	ldrb	r3, [r1]
   166a8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   166aa:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   166ac:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   166ae:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   166b0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   166b2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   166b4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   166b6:	4770      	bx	lr

000166b8 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
   166b8:	f003 b8a8 	b.w	1980c <malloc>

000166bc <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
   166bc:	f003 b8ae 	b.w	1981c <free>

000166c0 <ultoa>:
	int i=0, j;
   166c0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
   166c4:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
   166c6:	4666      	mov	r6, ip
	int i=0, j;
   166c8:	2400      	movs	r4, #0
   166ca:	e000      	b.n	166ce <ultoa+0xe>
		i++;
   166cc:	3401      	adds	r4, #1
		digit = val % radix;
   166ce:	fbb0 f5f2 	udiv	r5, r0, r2
   166d2:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   166d6:	2b09      	cmp	r3, #9
   166d8:	f103 0e37 	add.w	lr, r3, #55	; 0x37
   166dc:	f103 0330 	add.w	r3, r3, #48	; 0x30
   166e0:	fa5f fe8e 	uxtb.w	lr, lr
   166e4:	bf98      	it	ls
   166e6:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
   166ea:	4290      	cmp	r0, r2
		val /= radix;
   166ec:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   166ee:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
   166f2:	d2eb      	bcs.n	166cc <ultoa+0xc>
	buf[i + 1] = 0;
   166f4:	1c63      	adds	r3, r4, #1
   166f6:	2200      	movs	r2, #0
   166f8:	18c8      	adds	r0, r1, r3
   166fa:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
   166fc:	b17c      	cbz	r4, 1671e <ultoa+0x5e>
		t = buf[j];
   166fe:	4662      	mov	r2, ip
   16700:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
   16704:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
   16708:	eba1 030c 	sub.w	r3, r1, ip
   1670c:	3202      	adds	r2, #2
		buf[j] = buf[i];
   1670e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
   16712:	3b01      	subs	r3, #1
   16714:	1a52      	subs	r2, r2, r1
		buf[i] = t;
   16716:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
   16718:	4423      	add	r3, r4
   1671a:	429a      	cmp	r2, r3
   1671c:	dbef      	blt.n	166fe <ultoa+0x3e>
}
   1671e:	4608      	mov	r0, r1
   16720:	bd70      	pop	{r4, r5, r6, pc}
   16722:	bf00      	nop

00016724 <flexpwmWrite>:
	uint16_t mask = 1 << submodule;
   16724:	f04f 0c01 	mov.w	ip, #1
   16728:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
   1672c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16730:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
   16734:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
   16736:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
   1673a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
   1673e:	4c25      	ldr	r4, [pc, #148]	; (167d4 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
   16740:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
   16744:	7824      	ldrb	r4, [r4, #0]
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16746:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
   16748:	fb0e 3303 	mla	r3, lr, r3, r3
   1674c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
   16750:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16752:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
   16756:	4573      	cmp	r3, lr
   16758:	b2a4      	uxth	r4, r4
   1675a:	bf28      	it	cs
   1675c:	4673      	movcs	r3, lr
   1675e:	4334      	orrs	r4, r6
	switch (channel) {
   16760:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16762:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
   16766:	d00d      	beq.n	16784 <flexpwmWrite+0x60>
   16768:	2a02      	cmp	r2, #2
   1676a:	d028      	beq.n	167be <flexpwmWrite+0x9a>
   1676c:	b1c2      	cbz	r2, 167a0 <flexpwmWrite+0x7c>
   1676e:	f00c 020f 	and.w	r2, ip, #15
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
   16772:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
   16776:	fa1f fc8c 	uxth.w	ip, ip
   1677a:	ea4c 0c02 	orr.w	ip, ip, r2
   1677e:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
   16782:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
   16784:	b29b      	uxth	r3, r3
   16786:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
   1678a:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
   1678c:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
   1678e:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
   16792:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
   16796:	b29b      	uxth	r3, r3
   16798:	432b      	orrs	r3, r5
   1679a:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
   1679e:	e7e8      	b.n	16772 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
   167a0:	ebae 0e03 	sub.w	lr, lr, r3
   167a4:	f00c 020f 	and.w	r2, ip, #15
   167a8:	fa1f fe8e 	uxth.w	lr, lr
   167ac:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
   167b0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
   167b4:	b29b      	uxth	r3, r3
   167b6:	4313      	orrs	r3, r2
   167b8:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
   167bc:	e7d9      	b.n	16772 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
   167be:	b29b      	uxth	r3, r3
   167c0:	f00c 020f 	and.w	r2, ip, #15
   167c4:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
   167c6:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
   167ca:	b29b      	uxth	r3, r3
   167cc:	431e      	orrs	r6, r3
   167ce:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
   167d2:	e7ce      	b.n	16772 <flexpwmWrite+0x4e>
   167d4:	20009bee 	.word	0x20009bee

000167d8 <flexpwmFrequency>:
	uint32_t olddiv = p->SM[submodule].VAL1;
   167d8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   167dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t olddiv = p->SM[submodule].VAL1;
   167e0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   167e4:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   167e8:	4b31      	ldr	r3, [pc, #196]	; (168b0 <flexpwmFrequency+0xd8>)
	uint32_t olddiv = p->SM[submodule].VAL1;
   167ea:	fa1f fc8c 	uxth.w	ip, ip
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   167ee:	ed93 7a00 	vldr	s14, [r3]
   167f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
   167f6:	b570      	push	{r4, r5, r6, lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   167f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
	uint16_t mask = 1 << submodule;
   167fc:	f04f 0e01 	mov.w	lr, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
   16800:	004e      	lsls	r6, r1, #1
	uint16_t mask = 1 << submodule;
   16802:	fa0e fe01 	lsl.w	lr, lr, r1
   16806:	fa1f f58e 	uxth.w	r5, lr
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   1680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1680e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   16812:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65535 && prescale < 7) {
   16816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1681a:	d346      	bcc.n	168aa <flexpwmFrequency+0xd2>
	uint32_t prescale = 0;
   1681c:	2200      	movs	r2, #0
	while (newdiv > 65535 && prescale < 7) {
   1681e:	f64f 74ff 	movw	r4, #65535	; 0xffff
		newdiv = newdiv >> 1;
   16822:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
   16824:	3201      	adds	r2, #1
	while (newdiv > 65535 && prescale < 7) {
   16826:	42a3      	cmp	r3, r4
   16828:	d901      	bls.n	1682e <flexpwmFrequency+0x56>
   1682a:	2a06      	cmp	r2, #6
   1682c:	d9f9      	bls.n	16822 <flexpwmFrequency+0x4a>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   1682e:	0112      	lsls	r2, r2, #4
   16830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   16834:	b292      	uxth	r2, r2
	if (newdiv > 65535) {
   16836:	2b02      	cmp	r3, #2
   16838:	f64f 74ff 	movw	r4, #65535	; 0xffff
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   1683c:	ea4f 1505 	mov.w	r5, r5, lsl #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   16840:	4431      	add	r1, r6
   16842:	bf38      	it	cc
   16844:	2302      	movcc	r3, #2
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
   16846:	f00e 0e0f 	and.w	lr, lr, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   1684a:	b2ed      	uxtb	r5, r5
   1684c:	42a3      	cmp	r3, r4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   1684e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   16852:	bf28      	it	cs
   16854:	4623      	movcs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16856:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
   1685a:	b2a4      	uxth	r4, r4
   1685c:	432c      	orrs	r4, r5
   1685e:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   16862:	80ca      	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
   16864:	1e5a      	subs	r2, r3, #1
   16866:	b292      	uxth	r2, r2
   16868:	81ca      	strh	r2, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
   1686a:	894a      	ldrh	r2, [r1, #10]
   1686c:	b292      	uxth	r2, r2
   1686e:	fb03 f202 	mul.w	r2, r3, r2
   16872:	fbb2 f2fc 	udiv	r2, r2, ip
   16876:	b292      	uxth	r2, r2
   16878:	814a      	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
   1687a:	8aca      	ldrh	r2, [r1, #22]
   1687c:	b292      	uxth	r2, r2
   1687e:	fb03 f202 	mul.w	r2, r3, r2
   16882:	fbb2 f2fc 	udiv	r2, r2, ip
   16886:	b292      	uxth	r2, r2
   16888:	82ca      	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
   1688a:	8bca      	ldrh	r2, [r1, #30]
   1688c:	b292      	uxth	r2, r2
   1688e:	fb02 f303 	mul.w	r3, r2, r3
   16892:	fbb3 f3fc 	udiv	r3, r3, ip
   16896:	b29b      	uxth	r3, r3
   16898:	83cb      	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
   1689a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1689e:	b29b      	uxth	r3, r3
   168a0:	ea43 030e 	orr.w	r3, r3, lr
   168a4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   168a8:	bd70      	pop	{r4, r5, r6, pc}
	while (newdiv > 65535 && prescale < 7) {
   168aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   168ae:	e7c2      	b.n	16836 <flexpwmFrequency+0x5e>
   168b0:	200094bc 	.word	0x200094bc

000168b4 <quadtimerFrequency>:

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   168b4:	4b21      	ldr	r3, [pc, #132]	; (1693c <quadtimerFrequency+0x88>)
   168b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
   168ba:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   168be:	ed93 7a00 	vldr	s14, [r3]
   168c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   168c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   168ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
   168ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   168d2:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
   168d6:	4563      	cmp	r3, ip
   168d8:	d92c      	bls.n	16934 <quadtimerFrequency+0x80>
	uint32_t prescale = 0;
   168da:	2200      	movs	r2, #0
		newdiv = newdiv >> 1; 
   168dc:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
   168de:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
   168e0:	4563      	cmp	r3, ip
   168e2:	d901      	bls.n	168e8 <quadtimerFrequency+0x34>
   168e4:	2a06      	cmp	r2, #6
   168e6:	d9f9      	bls.n	168dc <quadtimerFrequency+0x28>
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
   168e8:	3208      	adds	r2, #8
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
   168ea:	f242 0c26 	movw	ip, #8230	; 0x2026
   168ee:	ea4c 2c42 	orr.w	ip, ip, r2, lsl #9
   168f2:	fa1f fc8c 	uxth.w	ip, ip
	if (newdiv > 65534) {
   168f6:	2b02      	cmp	r3, #2
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
   168f8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   168fc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   16900:	bf38      	it	cc
   16902:	2302      	movcc	r3, #2
   16904:	8a0a      	ldrh	r2, [r1, #16]
   16906:	4283      	cmp	r3, r0
   16908:	b292      	uxth	r2, r2
   1690a:	bf28      	it	cs
   1690c:	4603      	movcs	r3, r0
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
   1690e:	88c8      	ldrh	r0, [r1, #6]
   16910:	b280      	uxth	r0, r0
   16912:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
   16916:	4410      	add	r0, r2
   16918:	fb03 f202 	mul.w	r2, r3, r2
   1691c:	fbb2 f2f0 	udiv	r2, r2, r0
	uint32_t low = newdiv - high;
   16920:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
   16922:	b292      	uxth	r2, r2
	p->CH[submodule].LOAD = 65537 - low;
   16924:	f1c3 0301 	rsb	r3, r3, #1
   16928:	b29b      	uxth	r3, r3
   1692a:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
   1692c:	820a      	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
   1692e:	f8a1 c00c 	strh.w	ip, [r1, #12]
}
   16932:	4770      	bx	lr
	while (newdiv > 65534 && prescale < 7) {
   16934:	f243 0c26 	movw	ip, #12326	; 0x3026
   16938:	e7dd      	b.n	168f6 <quadtimerFrequency+0x42>
   1693a:	bf00      	nop
   1693c:	200094bc 	.word	0x200094bc

00016940 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
   16940:	2836      	cmp	r0, #54	; 0x36
   16942:	d84b      	bhi.n	169dc <analogWrite+0x9c>
{
   16944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
   16946:	4d2a      	ldr	r5, [pc, #168]	; (169f0 <analogWrite+0xb0>)
   16948:	4604      	mov	r4, r0
	if (info->type == 1) {
   1694a:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
   1694e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
   16952:	2a01      	cmp	r2, #1
   16954:	d02d      	beq.n	169b2 <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
   16956:	2a02      	cmp	r2, #2
   16958:	d13f      	bne.n	169da <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
   1695a:	786b      	ldrb	r3, [r5, #1]
   1695c:	f3c3 1001 	ubfx	r0, r3, #4, #2
   16960:	2803      	cmp	r0, #3
   16962:	d03e      	beq.n	169e2 <analogWrite+0xa2>
   16964:	4a23      	ldr	r2, [pc, #140]	; (169f4 <analogWrite+0xb4>)
   16966:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
   1696a:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
   1696e:	4822      	ldr	r0, [pc, #136]	; (169f8 <analogWrite+0xb8>)
   16970:	b289      	uxth	r1, r1
   16972:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
   16974:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
   16978:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
   1697a:	f8bc e006 	ldrh.w	lr, [ip, #6]
   1697e:	0158      	lsls	r0, r3, #5
   16980:	f8bc 3010 	ldrh.w	r3, [ip, #16]
   16984:	fa1f fe8e 	uxth.w	lr, lr
   16988:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
   1698c:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
   16990:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   16994:	fb0e f101 	mul.w	r1, lr, r1
   16998:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
   1699a:	458e      	cmp	lr, r1
   1699c:	d923      	bls.n	169e6 <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
   1699e:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
   169a0:	f1c3 0301 	rsb	r3, r3, #1
   169a4:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
   169a6:	b289      	uxth	r1, r1
   169a8:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
   169aa:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
   169ae:	8211      	strh	r1, [r2, #16]
}
   169b0:	e00d      	b.n	169ce <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
   169b2:	786a      	ldrb	r2, [r5, #1]
   169b4:	f3c2 1301 	ubfx	r3, r2, #4, #2
   169b8:	2b03      	cmp	r3, #3
   169ba:	d010      	beq.n	169de <analogWrite+0x9e>
   169bc:	480f      	ldr	r0, [pc, #60]	; (169fc <analogWrite+0xbc>)
   169be:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
   169c2:	b28b      	uxth	r3, r1
   169c4:	f002 0103 	and.w	r1, r2, #3
   169c8:	78aa      	ldrb	r2, [r5, #2]
   169ca:	f7ff feab 	bl	16724 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
   169ce:	4b0c      	ldr	r3, [pc, #48]	; (16a00 <analogWrite+0xc0>)
   169d0:	78ea      	ldrb	r2, [r5, #3]
   169d2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   169d6:	685b      	ldr	r3, [r3, #4]
   169d8:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
   169da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169dc:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
   169de:	4809      	ldr	r0, [pc, #36]	; (16a04 <analogWrite+0xc4>)
   169e0:	e7ef      	b.n	169c2 <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
   169e2:	4a09      	ldr	r2, [pc, #36]	; (16a08 <analogWrite+0xc8>)
   169e4:	e7c1      	b.n	1696a <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
   169e6:	1e99      	subs	r1, r3, #2
   169e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   169ec:	e7db      	b.n	169a6 <analogWrite+0x66>
   169ee:	bf00      	nop
   169f0:	200084cc 	.word	0x200084cc
   169f4:	401dc000 	.word	0x401dc000
   169f8:	20009bee 	.word	0x20009bee
   169fc:	403dc000 	.word	0x403dc000
   16a00:	20008148 	.word	0x20008148
   16a04:	403e8000 	.word	0x403e8000
   16a08:	401e8000 	.word	0x401e8000

00016a0c <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
   16a0c:	2836      	cmp	r0, #54	; 0x36
   16a0e:	d808      	bhi.n	16a22 <analogWriteFrequency+0x16>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
   16a10:	4b15      	ldr	r3, [pc, #84]	; (16a68 <analogWriteFrequency+0x5c>)
	if (info->type == 1) {
   16a12:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
	info = pwm_pin_info + pin;
   16a16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
   16a1a:	2a01      	cmp	r2, #1
   16a1c:	d002      	beq.n	16a24 <analogWriteFrequency+0x18>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
   16a1e:	2a02      	cmp	r2, #2
   16a20:	d00d      	beq.n	16a3e <analogWriteFrequency+0x32>
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}
   16a22:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
   16a24:	7859      	ldrb	r1, [r3, #1]
   16a26:	f3c1 1201 	ubfx	r2, r1, #4, #2
   16a2a:	2a03      	cmp	r2, #3
   16a2c:	d013      	beq.n	16a56 <analogWriteFrequency+0x4a>
   16a2e:	480f      	ldr	r0, [pc, #60]	; (16a6c <analogWriteFrequency+0x60>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
   16a30:	f001 0103 	and.w	r1, r1, #3
   16a34:	eb00 3082 	add.w	r0, r0, r2, lsl #14
   16a38:	789a      	ldrb	r2, [r3, #2]
   16a3a:	f7ff becd 	b.w	167d8 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
   16a3e:	7859      	ldrb	r1, [r3, #1]
   16a40:	f3c1 1301 	ubfx	r3, r1, #4, #2
   16a44:	2b03      	cmp	r3, #3
   16a46:	d00c      	beq.n	16a62 <analogWriteFrequency+0x56>
   16a48:	4809      	ldr	r0, [pc, #36]	; (16a70 <analogWriteFrequency+0x64>)
   16a4a:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
   16a4e:	f001 0103 	and.w	r1, r1, #3
   16a52:	f7ff bf2f 	b.w	168b4 <quadtimerFrequency>
		switch ((info->module >> 4) & 3) {
   16a56:	4807      	ldr	r0, [pc, #28]	; (16a74 <analogWriteFrequency+0x68>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
   16a58:	f001 0103 	and.w	r1, r1, #3
   16a5c:	789a      	ldrb	r2, [r3, #2]
   16a5e:	f7ff bebb 	b.w	167d8 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
   16a62:	4805      	ldr	r0, [pc, #20]	; (16a78 <analogWriteFrequency+0x6c>)
   16a64:	e7f3      	b.n	16a4e <analogWriteFrequency+0x42>
   16a66:	bf00      	nop
   16a68:	200084cc 	.word	0x200084cc
   16a6c:	403dc000 	.word	0x403dc000
   16a70:	401dc000 	.word	0x401dc000
   16a74:	403e8000 	.word	0x403e8000
   16a78:	401e8000 	.word	0x401e8000

00016a7c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   16a7c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   16a7e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   16a80:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   16a84:	4619      	mov	r1, r3
{
   16a86:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   16a88:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   16a8c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   16a90:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16a94:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   16a98:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   16a9c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   16a9e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   16aa2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16aa6:	b29b      	uxth	r3, r3
   16aa8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   16aac:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16ab0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   16ab4:	3101      	adds	r1, #1
   16ab6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   16aba:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16abc:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   16abe:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   16ac2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   16ac4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   16ac6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   16ac8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   16aca:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   16ace:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   16ad0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   16ad2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   16ad4:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   16ad6:	d1eb      	bne.n	16ab0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   16ad8:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16adc:	b29b      	uxth	r3, r3
   16ade:	f043 030f 	orr.w	r3, r3, #15
   16ae2:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   16ae6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16aea:	b29b      	uxth	r3, r3
   16aec:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   16af0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   16af4:	bd10      	pop	{r4, pc}
   16af6:	bf00      	nop

00016af8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16af8:	4b37      	ldr	r3, [pc, #220]	; (16bd8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16afa:	4a38      	ldr	r2, [pc, #224]	; (16bdc <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16afc:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   16afe:	4838      	ldr	r0, [pc, #224]	; (16be0 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16b00:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   16b04:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16b06:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16b08:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16b0c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16b10:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16b14:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16b18:	430a      	orrs	r2, r1
   16b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   16b1e:	f7ff ffad 	bl	16a7c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   16b22:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16b26:	f7ff ffa9 	bl	16a7c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   16b2a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16b2e:	f7ff ffa5 	bl	16a7c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   16b32:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16b36:	f7ff ffa1 	bl	16a7c <flexpwm_init>
	for (i=0; i < 4; i++) {
   16b3a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16b3c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16b40:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   16b44:	4611      	mov	r1, r2
   16b46:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16b4a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16b4e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16b50:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16b52:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16b54:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16b56:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16b5a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16b5c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16b5e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16b62:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16b64:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   16b66:	d1ee      	bne.n	16b46 <pwm_init+0x4e>
   16b68:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16b6a:	481e      	ldr	r0, [pc, #120]	; (16be4 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16b6c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16b70:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   16b74:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16b76:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16b7a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   16b7e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16b82:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16b86:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16b88:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16b8a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16b8c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16b8e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16b92:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16b94:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16b96:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16b9a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16b9c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   16b9e:	d1ee      	bne.n	16b7e <pwm_init+0x86>
   16ba0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16ba2:	4811      	ldr	r0, [pc, #68]	; (16be8 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16ba4:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16ba6:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   16baa:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16bac:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16bb0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   16bb4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16bb8:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16bbc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16bbe:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16bc0:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16bc2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16bc4:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16bc6:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16bc8:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16bca:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16bce:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16bd0:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   16bd4:	d1ee      	bne.n	16bb4 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   16bd6:	bd70      	pop	{r4, r5, r6, pc}
   16bd8:	400fc000 	.word	0x400fc000
   16bdc:	fc030000 	.word	0xfc030000
   16be0:	403dc000 	.word	0x403dc000
   16be4:	401e0000 	.word	0x401e0000
   16be8:	401e4000 	.word	0x401e4000

00016bec <analogWriteRes>:
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
	analog_write_res = bits;
   16bec:	2810      	cmp	r0, #16
   16bee:	4603      	mov	r3, r0
	prior = analog_write_res;
   16bf0:	4a04      	ldr	r2, [pc, #16]	; (16c04 <analogWriteRes+0x18>)
	analog_write_res = bits;
   16bf2:	bf28      	it	cs
   16bf4:	2310      	movcs	r3, #16
	prior = analog_write_res;
   16bf6:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
   16bf8:	2b01      	cmp	r3, #1
   16bfa:	bf38      	it	cc
   16bfc:	2301      	movcc	r3, #1
   16bfe:	7013      	strb	r3, [r2, #0]
	return prior;
}
   16c00:	4770      	bx	lr
   16c02:	bf00      	nop
   16c04:	20009bee 	.word	0x20009bee

00016c08 <unused_interrupt_vector>:
	__disable_irq();
   16c08:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
   16c0a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
   16c0e:	4c52      	ldr	r4, [pc, #328]	; (16d58 <unused_interrupt_vector+0x150>)
   16c10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
   16c14:	f01e 0f04 	tst.w	lr, #4
   16c18:	bf0c      	ite	eq
   16c1a:	f3ef 8208 	mrseq	r2, MSP
   16c1e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
   16c22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
   16c26:	4e4d      	ldr	r6, [pc, #308]	; (16d5c <unused_interrupt_vector+0x154>)
	while (p < end) {
   16c28:	4d4d      	ldr	r5, [pc, #308]	; (16d60 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
   16c2a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
   16c2e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
   16c32:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
   16c36:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
   16c3a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
   16c3e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
   16c42:	6993      	ldr	r3, [r2, #24]
   16c44:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
   16c48:	69d3      	ldr	r3, [r2, #28]
   16c4a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
   16c4e:	f000 f8d3 	bl	16df8 <tempmonGetTemp>
   16c52:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
   16c56:	f001 f9cb 	bl	17ff0 <rtc_get>
	info->len = sizeof(*info) / 4;
   16c5a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
   16c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
   16c60:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
   16c64:	460b      	mov	r3, r1
   16c66:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   16c6a:	493e      	ldr	r1, [pc, #248]	; (16d64 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
   16c6c:	1d30      	adds	r0, r6, #4
   16c6e:	405a      	eors	r2, r3
   16c70:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   16c72:	f002 0301 	and.w	r3, r2, #1
   16c76:	3c01      	subs	r4, #1
   16c78:	fb01 f303 	mul.w	r3, r1, r3
   16c7c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
   16c80:	d1f7      	bne.n	16c72 <unused_interrupt_vector+0x6a>
	while (p < end) {
   16c82:	42a8      	cmp	r0, r5
   16c84:	d002      	beq.n	16c8c <unused_interrupt_vector+0x84>
		crc ^= *p++;
   16c86:	6873      	ldr	r3, [r6, #4]
   16c88:	4606      	mov	r6, r0
   16c8a:	e7ef      	b.n	16c6c <unused_interrupt_vector+0x64>
	info->crc = crc;
   16c8c:	4b32      	ldr	r3, [pc, #200]	; (16d58 <unused_interrupt_vector+0x150>)
   16c8e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
   16c92:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   16c96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16c9a:	4930      	ldr	r1, [pc, #192]	; (16d5c <unused_interrupt_vector+0x154>)
   16c9c:	4a32      	ldr	r2, [pc, #200]	; (16d68 <unused_interrupt_vector+0x160>)
   16c9e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
   16ca2:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
   16ca6:	f3bf 8f4f 	dsb	sy
	asm("isb");
   16caa:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16cae:	4a2f      	ldr	r2, [pc, #188]	; (16d6c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
   16cb0:	2502      	movs	r5, #2
   16cb2:	482f      	ldr	r0, [pc, #188]	; (16d70 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16cb4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16cb6:	492f      	ldr	r1, [pc, #188]	; (16d74 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16cb8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   16cbc:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
   16cbe:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   16cc0:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16cc2:	482d      	ldr	r0, [pc, #180]	; (16d78 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   16cc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   16cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16ccc:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16cce:	680b      	ldr	r3, [r1, #0]
   16cd0:	4283      	cmp	r3, r0
   16cd2:	d83d      	bhi.n	16d50 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
   16cd4:	4d26      	ldr	r5, [pc, #152]	; (16d70 <unused_interrupt_vector+0x168>)
   16cd6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
   16cd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
   16ce0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   16ce2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
   16ce4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
   16ce8:	4924      	ldr	r1, [pc, #144]	; (16d7c <unused_interrupt_vector+0x174>)
   16cea:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   16cee:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
   16cf2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
   16cf6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
   16cfa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
   16cfe:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
   16d02:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
   16d06:	e001      	b.n	16d0c <unused_interrupt_vector+0x104>
		usb_isr();
   16d08:	f000 f968 	bl	16fdc <usb_isr>
		if (PIT_TFLG0) {
   16d0c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   16d10:	2b00      	cmp	r3, #0
   16d12:	d0f9      	beq.n	16d08 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
   16d14:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
   16d16:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
   16d1a:	2c4f      	cmp	r4, #79	; 0x4f
   16d1c:	d9f4      	bls.n	16d08 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16d1e:	4b18      	ldr	r3, [pc, #96]	; (16d80 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
   16d20:	2002      	movs	r0, #2
   16d22:	4918      	ldr	r1, [pc, #96]	; (16d84 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16d24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
   16d28:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16d2c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16d2e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   16d32:	b93b      	cbnz	r3, 16d44 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
   16d34:	4814      	ldr	r0, [pc, #80]	; (16d88 <unused_interrupt_vector+0x180>)
   16d36:	4915      	ldr	r1, [pc, #84]	; (16d8c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16d38:	4a0d      	ldr	r2, [pc, #52]	; (16d70 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
   16d3a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16d3c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   16d40:	2b00      	cmp	r3, #0
   16d42:	d0fa      	beq.n	16d3a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
   16d44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16d48:	4a11      	ldr	r2, [pc, #68]	; (16d90 <unused_interrupt_vector+0x188>)
   16d4a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
   16d4e:	e7fe      	b.n	16d4e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16d50:	f7fe fece 	bl	15af0 <set_arm_clock>
   16d54:	e7be      	b.n	16cd4 <unused_interrupt_vector+0xcc>
   16d56:	bf00      	nop
   16d58:	2027ff00 	.word	0x2027ff00
   16d5c:	2027ff80 	.word	0x2027ff80
   16d60:	2027ffa8 	.word	0x2027ffa8
   16d64:	edb88320 	.word	0xedb88320
   16d68:	2027ffa0 	.word	0x2027ffa0
   16d6c:	400fc000 	.word	0x400fc000
   16d70:	40084000 	.word	0x40084000
   16d74:	200094c0 	.word	0x200094c0
   16d78:	0bcd3d80 	.word	0x0bcd3d80
   16d7c:	00249f00 	.word	0x00249f00
   16d80:	400d9000 	.word	0x400d9000
   16d84:	402e0000 	.word	0x402e0000
   16d88:	400f8000 	.word	0x400f8000
   16d8c:	0bad00f1 	.word	0x0bad00f1
   16d90:	05fa0004 	.word	0x05fa0004

00016d94 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
   16d94:	490a      	ldr	r1, [pc, #40]	; (16dc0 <_sbrk+0x2c>)
   16d96:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
   16d98:	b138      	cbz	r0, 16daa <_sbrk+0x16>
{
   16d9a:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
   16d9c:	1813      	adds	r3, r2, r0
   16d9e:	4809      	ldr	r0, [pc, #36]	; (16dc4 <_sbrk+0x30>)
   16da0:	4283      	cmp	r3, r0
   16da2:	d804      	bhi.n	16dae <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   16da4:	4610      	mov	r0, r2
                __brkval = prev + incr;
   16da6:	600b      	str	r3, [r1, #0]
}
   16da8:	bd08      	pop	{r3, pc}
   16daa:	4610      	mov	r0, r2
   16dac:	4770      	bx	lr
                        errno = ENOMEM;
   16dae:	f005 ff85 	bl	1ccbc <__errno>
   16db2:	230c      	movs	r3, #12
                        return (void *)-1;
   16db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
   16db8:	6003      	str	r3, [r0, #0]
}
   16dba:	4610      	mov	r0, r2
   16dbc:	bd08      	pop	{r3, pc}
   16dbe:	bf00      	nop
   16dc0:	20009960 	.word	0x20009960
   16dc4:	20280000 	.word	0x20280000

00016dc8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
   16dc8:	2000      	movs	r0, #0
   16dca:	4770      	bx	lr

00016dcc <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
   16dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dd0:	4770      	bx	lr
   16dd2:	bf00      	nop

00016dd4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
   16dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
   16dd8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   16dda:	604b      	str	r3, [r1, #4]
}
   16ddc:	4770      	bx	lr
   16dde:	bf00      	nop

00016de0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
   16de0:	2001      	movs	r0, #1
   16de2:	4770      	bx	lr

00016de4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
   16de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16de8:	4770      	bx	lr
   16dea:	bf00      	nop

00016dec <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   16dec:	bf30      	wfi
   16dee:	e7fd      	b.n	16dec <__cxa_pure_virtual>

00016df0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
   16df0:	bf30      	wfi
   16df2:	e7fd      	b.n	16df0 <abort>

00016df4 <Panic_Temp_isr>:
  unused_interrupt_vector();
   16df4:	f7ff bf08 	b.w	16c08 <unused_interrupt_vector>

00016df8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
   16df8:	4a12      	ldr	r2, [pc, #72]	; (16e44 <tempmonGetTemp+0x4c>)
   16dfa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   16dfe:	075b      	lsls	r3, r3, #29
   16e00:	d5fb      	bpl.n	16dfa <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16e02:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16e06:	4810      	ldr	r0, [pc, #64]	; (16e48 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16e08:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16e0c:	490f      	ldr	r1, [pc, #60]	; (16e4c <tempmonGetTemp+0x54>)
   16e0e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16e12:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16e16:	ed91 6a00 	vldr	s12, [r1]
   16e1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   16e1e:	4a0c      	ldr	r2, [pc, #48]	; (16e50 <tempmonGetTemp+0x58>)
   16e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16e24:	4b0b      	ldr	r3, [pc, #44]	; (16e54 <tempmonGetTemp+0x5c>)
   16e26:	edd2 6a00 	vldr	s13, [r2]
   16e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   16e2e:	ed93 7a00 	vldr	s14, [r3]
   16e32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   16e36:	ee67 7a86 	vmul.f32	s15, s15, s12
   16e3a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
   16e3e:	ee37 0a40 	vsub.f32	s0, s14, s0
   16e42:	4770      	bx	lr
   16e44:	400d8100 	.word	0x400d8100
   16e48:	2000e9c4 	.word	0x2000e9c4
   16e4c:	2000e9cc 	.word	0x2000e9cc
   16e50:	2000e9d0 	.word	0x2000e9d0
   16e54:	2000e9c8 	.word	0x2000e9c8

00016e58 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   16e58:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   16e5a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
   16e5c:	b11b      	cbz	r3, 16e66 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   16e5e:	6853      	ldr	r3, [r2, #4]
   16e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   16e64:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
   16e66:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   16e68:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   16e6a:	b33c      	cbz	r4, 16ebc <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   16e6c:	4b1a      	ldr	r3, [pc, #104]	; (16ed8 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
   16e6e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   16e70:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   16e74:	420c      	tst	r4, r1
   16e76:	d11d      	bne.n	16eb4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   16e78:	4e18      	ldr	r6, [pc, #96]	; (16edc <schedule_transfer+0x84>)
   16e7a:	6877      	ldr	r7, [r6, #4]
   16e7c:	e004      	b.n	16e88 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   16e7e:	6874      	ldr	r4, [r6, #4]
   16e80:	1be4      	subs	r4, r4, r7
   16e82:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
   16e86:	d20b      	bcs.n	16ea0 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   16e88:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   16e8c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   16e90:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   16e94:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   16e98:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   16e9c:	0464      	lsls	r4, r4, #17
   16e9e:	d5ee      	bpl.n	16e7e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   16ea0:	400d      	ands	r5, r1
   16ea2:	d107      	bne.n	16eb4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
   16ea4:	4c0c      	ldr	r4, [pc, #48]	; (16ed8 <schedule_transfer+0x80>)
		endpoint->status = 0;
   16ea6:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
   16eaa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   16eae:	430b      	orrs	r3, r1
   16eb0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
   16eb4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   16eb6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   16eb8:	bcf0      	pop	{r4, r5, r6, r7}
   16eba:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
   16ebc:	4d06      	ldr	r5, [pc, #24]	; (16ed8 <schedule_transfer+0x80>)
	endpoint->status = 0;
   16ebe:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
   16ec2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   16ec6:	430b      	orrs	r3, r1
   16ec8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   16ecc:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
   16ece:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   16ed0:	b662      	cpsie	i
}
   16ed2:	bcf0      	pop	{r4, r5, r6, r7}
   16ed4:	4770      	bx	lr
   16ed6:	bf00      	nop
   16ed8:	402e0000 	.word	0x402e0000
   16edc:	e0001000 	.word	0xe0001000

00016ee0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   16ee0:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   16ee2:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
   16ee4:	b19d      	cbz	r5, 16f0e <run_callbacks+0x2e>
   16ee6:	4606      	mov	r6, r0
   16ee8:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
   16eea:	2400      	movs	r4, #0
   16eec:	e003      	b.n	16ef6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   16eee:	6812      	ldr	r2, [r2, #0]
		count++;
   16ef0:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
   16ef2:	2a01      	cmp	r2, #1
   16ef4:	d00c      	beq.n	16f10 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
   16ef6:	6853      	ldr	r3, [r2, #4]
   16ef8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
   16efc:	d0f7      	beq.n	16eee <run_callbacks+0xe>
			ep->first_transfer = t;
   16efe:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   16f00:	b12c      	cbz	r4, 16f0e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
   16f02:	4628      	mov	r0, r5
		ep->callback_function(first);
   16f04:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
   16f06:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
   16f08:	4798      	blx	r3
	while (count) {
   16f0a:	3c01      	subs	r4, #1
   16f0c:	d1f9      	bne.n	16f02 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
   16f0e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
   16f10:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
   16f14:	e7f4      	b.n	16f00 <run_callbacks+0x20>
   16f16:	bf00      	nop

00016f18 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   16f18:	b430      	push	{r4, r5}
	if (len > 0) {
   16f1a:	b9d9      	cbnz	r1, 16f54 <endpoint0_transmit.constprop.0+0x3c>
   16f1c:	4c1f      	ldr	r4, [pc, #124]	; (16f9c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
   16f1e:	4b20      	ldr	r3, [pc, #128]	; (16fa0 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
   16f20:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   16f22:	4a20      	ldr	r2, [pc, #128]	; (16fa4 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
   16f24:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   16f26:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
   16f2a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   16f2c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
   16f2e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   16f32:	2480      	movs	r4, #128	; 0x80
   16f34:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   16f36:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   16f3a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   16f3e:	481a      	ldr	r0, [pc, #104]	; (16fa8 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
   16f40:	432b      	orrs	r3, r5
   16f42:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   16f46:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
   16f48:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	d1fb      	bne.n	16f48 <endpoint0_transmit.constprop.0+0x30>
}
   16f50:	bc30      	pop	{r4, r5}
   16f52:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   16f54:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
   16f56:	4b15      	ldr	r3, [pc, #84]	; (16fac <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   16f58:	4c10      	ldr	r4, [pc, #64]	; (16f9c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
   16f5a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   16f5c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   16f60:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
   16f62:	4a10      	ldr	r2, [pc, #64]	; (16fa4 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   16f64:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   16f66:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
   16f6a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   16f6c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   16f6e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   16f72:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
   16f74:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   16f76:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   16f7a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   16f7e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
   16f80:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
   16f82:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
   16f84:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
   16f86:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   16f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16f8e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   16f92:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   16f96:	2b00      	cmp	r3, #0
   16f98:	d1fb      	bne.n	16f92 <endpoint0_transmit.constprop.0+0x7a>
   16f9a:	e7c0      	b.n	16f1e <endpoint0_transmit.constprop.0+0x6>
   16f9c:	20000000 	.word	0x20000000
   16fa0:	2000a240 	.word	0x2000a240
   16fa4:	402e0000 	.word	0x402e0000
   16fa8:	2000e178 	.word	0x2000e178
   16fac:	2000a260 	.word	0x2000a260

00016fb0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
   16fb0:	4908      	ldr	r1, [pc, #32]	; (16fd4 <usb_stop_sof_interrupts+0x24>)
   16fb2:	2201      	movs	r2, #1
   16fb4:	780b      	ldrb	r3, [r1, #0]
   16fb6:	fa02 f000 	lsl.w	r0, r2, r0
   16fba:	ea23 0000 	bic.w	r0, r3, r0
   16fbe:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
   16fc0:	b930      	cbnz	r0, 16fd0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   16fc2:	4a05      	ldr	r2, [pc, #20]	; (16fd8 <usb_stop_sof_interrupts+0x28>)
   16fc4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   16fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16fcc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
   16fd0:	4770      	bx	lr
   16fd2:	bf00      	nop
   16fd4:	2000ec34 	.word	0x2000ec34
   16fd8:	402e0000 	.word	0x402e0000

00016fdc <usb_isr>:
{
   16fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
   16fe0:	4c97      	ldr	r4, [pc, #604]	; (17240 <usb_isr+0x264>)
{
   16fe2:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
   16fe4:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   16fe8:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
   16fea:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   16fee:	d553      	bpl.n	17098 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   16ff0:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   16ff4:	2a00      	cmp	r2, #0
   16ff6:	d04a      	beq.n	1708e <usb_isr+0xb2>
   16ff8:	4e92      	ldr	r6, [pc, #584]	; (17244 <usb_isr+0x268>)
   16ffa:	f8df a260 	ldr.w	sl, [pc, #608]	; 1725c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
   16ffe:	f8df 9274 	ldr.w	r9, [pc, #628]	; 17274 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   17002:	f8df b274 	ldr.w	fp, [pc, #628]	; 17278 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   17006:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1727c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
   1700a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
   1700e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
   17012:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   17016:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1701a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   1701e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   17022:	049d      	lsls	r5, r3, #18
   17024:	d5f5      	bpl.n	17012 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   17026:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1702a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1702e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   17032:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   17036:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   1703a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
   1703e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
   17042:	d1fa      	bne.n	1703a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
   17044:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
   17046:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
   17048:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
   1704c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
   17050:	f000 81cf 	beq.w	173f2 <usb_isr+0x416>
   17054:	f200 80db 	bhi.w	1720e <usb_isr+0x232>
   17058:	f240 3102 	movw	r1, #770	; 0x302
   1705c:	428b      	cmp	r3, r1
   1705e:	f000 81e7 	beq.w	17430 <usb_isr+0x454>
   17062:	f200 809a 	bhi.w	1719a <usb_isr+0x1be>
   17066:	2b82      	cmp	r3, #130	; 0x82
   17068:	f000 81cb 	beq.w	17402 <usb_isr+0x426>
   1706c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   17070:	f040 808a 	bne.w	17188 <usb_isr+0x1ac>
		if (endpoint > 7) break;
   17074:	f010 0f78 	tst.w	r0, #120	; 0x78
   17078:	b283      	uxth	r3, r0
   1707a:	f000 8203 	beq.w	17484 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   1707e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   17082:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   17086:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   1708a:	2a00      	cmp	r2, #0
   1708c:	d1bd      	bne.n	1700a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   1708e:	4a6c      	ldr	r2, [pc, #432]	; (17240 <usb_isr+0x264>)
   17090:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   17094:	2b00      	cmp	r3, #0
   17096:	d142      	bne.n	1711e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
   17098:	067e      	lsls	r6, r7, #25
   1709a:	d516      	bpl.n	170ca <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   1709c:	4b68      	ldr	r3, [pc, #416]	; (17240 <usb_isr+0x264>)
   1709e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
   170a2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   170a6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   170aa:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   170ae:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   170b2:	2c00      	cmp	r4, #0
   170b4:	d1fb      	bne.n	170ae <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   170b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   170ba:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   170be:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
   170c2:	f000 fd2d 	bl	17b20 <usb_serial_reset>
		endpointN_notify_mask = 0;
   170c6:	4b60      	ldr	r3, [pc, #384]	; (17248 <usb_isr+0x26c>)
   170c8:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
   170ca:	01fc      	lsls	r4, r7, #7
   170cc:	d503      	bpl.n	170d6 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   170ce:	4b5f      	ldr	r3, [pc, #380]	; (1724c <usb_isr+0x270>)
   170d0:	681b      	ldr	r3, [r3, #0]
   170d2:	b103      	cbz	r3, 170d6 <usb_isr+0xfa>
   170d4:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
   170d6:	01b8      	lsls	r0, r7, #6
   170d8:	d503      	bpl.n	170e2 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   170da:	4b5d      	ldr	r3, [pc, #372]	; (17250 <usb_isr+0x274>)
   170dc:	681b      	ldr	r3, [r3, #0]
   170de:	b103      	cbz	r3, 170e2 <usb_isr+0x106>
   170e0:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
   170e2:	0779      	lsls	r1, r7, #29
   170e4:	d508      	bpl.n	170f8 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   170e6:	4b56      	ldr	r3, [pc, #344]	; (17240 <usb_isr+0x264>)
   170e8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   170ec:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   170f0:	d047      	beq.n	17182 <usb_isr+0x1a6>
			usb_high_speed = 1;
   170f2:	4b58      	ldr	r3, [pc, #352]	; (17254 <usb_isr+0x278>)
   170f4:	2201      	movs	r2, #1
   170f6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   170f8:	4b51      	ldr	r3, [pc, #324]	; (17240 <usb_isr+0x264>)
   170fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   170fe:	061a      	lsls	r2, r3, #24
   17100:	d50a      	bpl.n	17118 <usb_isr+0x13c>
   17102:	063b      	lsls	r3, r7, #24
   17104:	d508      	bpl.n	17118 <usb_isr+0x13c>
		if (usb_reboot_timer) {
   17106:	4a54      	ldr	r2, [pc, #336]	; (17258 <usb_isr+0x27c>)
   17108:	7813      	ldrb	r3, [r2, #0]
   1710a:	b12b      	cbz	r3, 17118 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
   1710c:	3b01      	subs	r3, #1
   1710e:	b2db      	uxtb	r3, r3
   17110:	7013      	strb	r3, [r2, #0]
   17112:	2b00      	cmp	r3, #0
   17114:	f000 8272 	beq.w	175fc <usb_isr+0x620>
}
   17118:	b003      	add	sp, #12
   1711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
   1711e:	494f      	ldr	r1, [pc, #316]	; (1725c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
   17120:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
   17124:	6808      	ldr	r0, [r1, #0]
   17126:	4203      	tst	r3, r0
   17128:	f040 81d1 	bne.w	174ce <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
   1712c:	4a46      	ldr	r2, [pc, #280]	; (17248 <usb_isr+0x26c>)
   1712e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
   17130:	401c      	ands	r4, r3
   17132:	d0b1      	beq.n	17098 <usb_isr+0xbc>
				while (tx) {
   17134:	ea5f 4814 	movs.w	r8, r4, lsr #16
   17138:	d010      	beq.n	1715c <usb_isr+0x180>
   1713a:	4e42      	ldr	r6, [pc, #264]	; (17244 <usb_isr+0x268>)
					tx &= ~(1<<p);
   1713c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
   17140:	fa98 f5a8 	rbit	r5, r8
   17144:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   17148:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
   1714c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   17150:	3040      	adds	r0, #64	; 0x40
   17152:	f7ff fec5 	bl	16ee0 <run_callbacks>
				while (tx) {
   17156:	ea38 0805 	bics.w	r8, r8, r5
   1715a:	d1f1      	bne.n	17140 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
   1715c:	b2a4      	uxth	r4, r4
				while(rx) {
   1715e:	2c00      	cmp	r4, #0
   17160:	d09a      	beq.n	17098 <usb_isr+0xbc>
   17162:	4e38      	ldr	r6, [pc, #224]	; (17244 <usb_isr+0x268>)
					rx &= ~(1<<p);
   17164:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
   17168:	fa94 f5a4 	rbit	r5, r4
   1716c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
   17170:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
   17174:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
   17178:	f7ff feb2 	bl	16ee0 <run_callbacks>
				while(rx) {
   1717c:	43ac      	bics	r4, r5
   1717e:	d1f3      	bne.n	17168 <usb_isr+0x18c>
   17180:	e78a      	b.n	17098 <usb_isr+0xbc>
			usb_high_speed = 0;
   17182:	4a34      	ldr	r2, [pc, #208]	; (17254 <usb_isr+0x278>)
   17184:	7013      	strb	r3, [r2, #0]
   17186:	e7b7      	b.n	170f8 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
   17188:	2b80      	cmp	r3, #128	; 0x80
   1718a:	f47f af78 	bne.w	1707e <usb_isr+0xa2>
		reply_buffer[0] = 0;
   1718e:	4834      	ldr	r0, [pc, #208]	; (17260 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
   17190:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
   17192:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   17194:	f7ff fec0 	bl	16f18 <endpoint0_transmit.constprop.0>
		return;
   17198:	e775      	b.n	17086 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
   1719a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1719e:	f000 810b 	beq.w	173b8 <usb_isr+0x3dc>
   171a2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
   171a6:	2b01      	cmp	r3, #1
   171a8:	f63f af69 	bhi.w	1707e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   171ac:	4b2d      	ldr	r3, [pc, #180]	; (17264 <usb_isr+0x288>)
   171ae:	685d      	ldr	r5, [r3, #4]
   171b0:	2d00      	cmp	r5, #0
   171b2:	f43f af64 	beq.w	1707e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   171b6:	fa1f fc8c 	uxth.w	ip, ip
   171ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   171be:	e004      	b.n	171ca <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   171c0:	691d      	ldr	r5, [r3, #16]
   171c2:	330c      	adds	r3, #12
   171c4:	2d00      	cmp	r5, #0
   171c6:	f43f af5a 	beq.w	1707e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   171ca:	881a      	ldrh	r2, [r3, #0]
   171cc:	4572      	cmp	r2, lr
   171ce:	d1f7      	bne.n	171c0 <usb_isr+0x1e4>
   171d0:	885a      	ldrh	r2, [r3, #2]
   171d2:	4562      	cmp	r2, ip
   171d4:	d1f4      	bne.n	171c0 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
   171d6:	ea4f 221e 	mov.w	r2, lr, lsr #8
   171da:	2a03      	cmp	r2, #3
   171dc:	f000 81a5 	beq.w	1752a <usb_isr+0x54e>
					datalen = list->length;
   171e0:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
   171e2:	0c00      	lsrs	r0, r0, #16
   171e4:	4282      	cmp	r2, r0
   171e6:	bf28      	it	cs
   171e8:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
   171ea:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   171ee:	f040 81a1 	bne.w	17534 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
   171f2:	4b18      	ldr	r3, [pc, #96]	; (17254 <usb_isr+0x278>)
   171f4:	491c      	ldr	r1, [pc, #112]	; (17268 <usb_isr+0x28c>)
   171f6:	7818      	ldrb	r0, [r3, #0]
   171f8:	4b1c      	ldr	r3, [pc, #112]	; (1726c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
   171fa:	9201      	str	r2, [sp, #4]
   171fc:	2800      	cmp	r0, #0
   171fe:	bf18      	it	ne
   17200:	4619      	movne	r1, r3
   17202:	481b      	ldr	r0, [pc, #108]	; (17270 <usb_isr+0x294>)
   17204:	f7ff f9be 	bl	16584 <memcpy>
   17208:	4d19      	ldr	r5, [pc, #100]	; (17270 <usb_isr+0x294>)
   1720a:	9a01      	ldr	r2, [sp, #4]
   1720c:	e1e1      	b.n	175d2 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
   1720e:	f242 2121 	movw	r1, #8737	; 0x2221
   17212:	428b      	cmp	r3, r1
   17214:	d07c      	beq.n	17310 <usb_isr+0x334>
   17216:	d933      	bls.n	17280 <usb_isr+0x2a4>
   17218:	f242 3121 	movw	r1, #8993	; 0x2321
   1721c:	428b      	cmp	r3, r1
   1721e:	f000 8081 	beq.w	17324 <usb_isr+0x348>
   17222:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
   17226:	428b      	cmp	r3, r1
   17228:	f47f af29 	bne.w	1707e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
   1722c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
   17230:	b283      	uxth	r3, r0
   17232:	f47f af24 	bne.w	1707e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
   17236:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
   1723a:	f363 0c0f 	bfi	ip, r3, #0, #16
   1723e:	e7b5      	b.n	171ac <usb_isr+0x1d0>
   17240:	402e0000 	.word	0x402e0000
   17244:	20000000 	.word	0x20000000
   17248:	2000e17c 	.word	0x2000e17c
   1724c:	2000ec14 	.word	0x2000ec14
   17250:	2000ec18 	.word	0x2000ec18
   17254:	2000ec3a 	.word	0x2000ec3a
   17258:	2000ec3b 	.word	0x2000ec3b
   1725c:	2000e178 	.word	0x2000e178
   17260:	2000e64c 	.word	0x2000e64c
   17264:	20008d58 	.word	0x20008d58
   17268:	60002630 	.word	0x60002630
   1726c:	60002694 	.word	0x60002694
   17270:	202000e0 	.word	0x202000e0
   17274:	2000e170 	.word	0x2000e170
   17278:	b8c6cf5d 	.word	0xb8c6cf5d
   1727c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
   17280:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
   17284:	d066      	beq.n	17354 <usb_isr+0x378>
   17286:	f242 0121 	movw	r1, #8225	; 0x2021
   1728a:	428b      	cmp	r3, r1
   1728c:	f47f aef7 	bne.w	1707e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
   17290:	0c03      	lsrs	r3, r0, #16
   17292:	2b07      	cmp	r3, #7
   17294:	f47f aef3 	bne.w	1707e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
   17298:	4bb2      	ldr	r3, [pc, #712]	; (17564 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1729a:	49b3      	ldr	r1, [pc, #716]	; (17568 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
   1729c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1729e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
   172a0:	49b2      	ldr	r1, [pc, #712]	; (1756c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   172a2:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   172a4:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
   172a8:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
   172ac:	2201      	movs	r2, #1
   172ae:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   172b0:	4aaf      	ldr	r2, [pc, #700]	; (17570 <usb_isr+0x594>)
   172b2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   172b4:	4aaf      	ldr	r2, [pc, #700]	; (17574 <usb_isr+0x598>)
   172b6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
   172b8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   172bc:	f041 0101 	orr.w	r1, r1, #1
   172c0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
   172c4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   172c8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   172cc:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   172ce:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
   172d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   172d4:	2b00      	cmp	r3, #0
   172d6:	d1fb      	bne.n	172d0 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
   172d8:	4aa7      	ldr	r2, [pc, #668]	; (17578 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   172da:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   172dc:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
   172de:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   172e0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   172e2:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   172e4:	f248 0380 	movw	r3, #32896	; 0x8080
   172e8:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   172ea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   172ee:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   172f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   172f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   172fa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   172fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17302:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
   17306:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1730a:	2b00      	cmp	r3, #0
   1730c:	d1fb      	bne.n	17306 <usb_isr+0x32a>
   1730e:	e6ba      	b.n	17086 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
   17310:	b280      	uxth	r0, r0
   17312:	b938      	cbnz	r0, 17324 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   17314:	4b99      	ldr	r3, [pc, #612]	; (1757c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
   17316:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   1731a:	6819      	ldr	r1, [r3, #0]
   1731c:	4b98      	ldr	r3, [pc, #608]	; (17580 <usb_isr+0x5a4>)
   1731e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   17320:	4b98      	ldr	r3, [pc, #608]	; (17584 <usb_isr+0x5a8>)
   17322:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
   17324:	4b94      	ldr	r3, [pc, #592]	; (17578 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
   17326:	2200      	movs	r2, #0
   17328:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
   1732a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   1732c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1732e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   17330:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17332:	2280      	movs	r2, #128	; 0x80
   17334:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17336:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1733a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1733e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17346:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1734a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1734e:	2b00      	cmp	r3, #0
   17350:	d1fb      	bne.n	1734a <usb_isr+0x36e>
   17352:	e698      	b.n	17086 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
   17354:	f3c2 4207 	ubfx	r2, r2, #16, #8
   17358:	4b8b      	ldr	r3, [pc, #556]	; (17588 <usb_isr+0x5ac>)
   1735a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   1735c:	4b8b      	ldr	r3, [pc, #556]	; (1758c <usb_isr+0x5b0>)
   1735e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   17362:	4b8b      	ldr	r3, [pc, #556]	; (17590 <usb_isr+0x5b4>)
   17364:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
   17368:	4b8a      	ldr	r3, [pc, #552]	; (17594 <usb_isr+0x5b8>)
   1736a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
   1736e:	f000 fbd9 	bl	17b24 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
   17372:	2280      	movs	r2, #128	; 0x80
   17374:	4629      	mov	r1, r5
   17376:	4888      	ldr	r0, [pc, #544]	; (17598 <usb_isr+0x5bc>)
   17378:	f004 fb5e 	bl	1ba38 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   1737c:	4b87      	ldr	r3, [pc, #540]	; (1759c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1737e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   17380:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   17384:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
   17388:	4b7b      	ldr	r3, [pc, #492]	; (17578 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   1738a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1738c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
   1738e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   17390:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
   17392:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   17394:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17396:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1739a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1739e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   173a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   173a6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   173aa:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
   173ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   173b2:	2b00      	cmp	r3, #0
   173b4:	d1fb      	bne.n	173ae <usb_isr+0x3d2>
   173b6:	e666      	b.n	17086 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
   173b8:	4b6f      	ldr	r3, [pc, #444]	; (17578 <usb_isr+0x59c>)
   173ba:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
   173bc:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   173be:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   173c0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
   173c2:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   173c4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   173c6:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   173c8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   173cc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   173d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   173d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   173d8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   173dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   173e0:	2b00      	cmp	r3, #0
   173e2:	d1fb      	bne.n	173dc <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   173e4:	0c13      	lsrs	r3, r2, #16
   173e6:	065b      	lsls	r3, r3, #25
   173e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   173ec:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
   173f0:	e649      	b.n	17086 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
   173f2:	4b65      	ldr	r3, [pc, #404]	; (17588 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
   173f4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
   173f6:	486a      	ldr	r0, [pc, #424]	; (175a0 <usb_isr+0x5c4>)
   173f8:	781b      	ldrb	r3, [r3, #0]
   173fa:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   173fc:	f7ff fd8c 	bl	16f18 <endpoint0_transmit.constprop.0>
		return;
   17400:	e641      	b.n	17086 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   17402:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
   17404:	f010 0078 	ands.w	r0, r0, #120	; 0x78
   17408:	f47f ae39 	bne.w	1707e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   1740c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   17410:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
   17414:	4a62      	ldr	r2, [pc, #392]	; (175a0 <usb_isr+0x5c4>)
   17416:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   17418:	0618      	lsls	r0, r3, #24
   1741a:	f100 809e 	bmi.w	1755a <usb_isr+0x57e>
   1741e:	07cb      	lsls	r3, r1, #31
   17420:	d501      	bpl.n	17426 <usb_isr+0x44a>
			reply_buffer[0] = 1;
   17422:	2301      	movs	r3, #1
   17424:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   17426:	2102      	movs	r1, #2
   17428:	485d      	ldr	r0, [pc, #372]	; (175a0 <usb_isr+0x5c4>)
   1742a:	f7ff fd75 	bl	16f18 <endpoint0_transmit.constprop.0>
		return;
   1742e:	e62a      	b.n	17086 <usb_isr+0xaa>
		if (endpoint > 7) break;
   17430:	f010 0f78 	tst.w	r0, #120	; 0x78
   17434:	b283      	uxth	r3, r0
   17436:	f47f ae22 	bne.w	1707e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   1743a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   1743e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   17442:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   17446:	bf14      	ite	ne
   17448:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   1744c:	f043 0301 	orreq.w	r3, r3, #1
   17450:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   17454:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   17456:	4b48      	ldr	r3, [pc, #288]	; (17578 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   17458:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   1745a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1745c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1745e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   17460:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17462:	2280      	movs	r2, #128	; 0x80
   17464:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17466:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1746a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1746e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17476:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1747a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1747e:	2b00      	cmp	r3, #0
   17480:	d1fb      	bne.n	1747a <usb_isr+0x49e>
   17482:	e600      	b.n	17086 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   17484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   17488:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   1748c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   17490:	bf14      	ite	ne
   17492:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   17496:	f023 0301 	biceq.w	r3, r3, #1
   1749a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   1749e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   174a0:	4b35      	ldr	r3, [pc, #212]	; (17578 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   174a2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   174a4:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   174a6:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   174a8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   174aa:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   174ac:	2280      	movs	r2, #128	; 0x80
   174ae:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   174b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   174b4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   174b8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   174bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   174c0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   174c4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   174c8:	2b00      	cmp	r3, #0
   174ca:	d1fb      	bne.n	174c4 <usb_isr+0x4e8>
   174cc:	e5db      	b.n	17086 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
   174ce:	2000      	movs	r0, #0
   174d0:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   174d2:	4926      	ldr	r1, [pc, #152]	; (1756c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   174d4:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   174d6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   174d8:	f242 0121 	movw	r1, #8225	; 0x2021
   174dc:	428c      	cmp	r4, r1
   174de:	f47f ae25 	bne.w	1712c <usb_isr+0x150>
   174e2:	b280      	uxth	r0, r0
   174e4:	2800      	cmp	r0, #0
   174e6:	f47f ae21 	bne.w	1712c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   174ea:	492e      	ldr	r1, [pc, #184]	; (175a4 <usb_isr+0x5c8>)
   174ec:	4c2e      	ldr	r4, [pc, #184]	; (175a8 <usb_isr+0x5cc>)
   174ee:	c903      	ldmia	r1, {r0, r1}
   174f0:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
   174f2:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   174f4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   174f8:	6020      	str	r0, [r4, #0]
   174fa:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
   174fc:	f47f ae16 	bne.w	1712c <usb_isr+0x150>
	__disable_irq();
   17500:	b672      	cpsid	i
	sof_usage |= (1 << interface);
   17502:	482a      	ldr	r0, [pc, #168]	; (175ac <usb_isr+0x5d0>)
   17504:	7801      	ldrb	r1, [r0, #0]
   17506:	f041 0108 	orr.w	r1, r1, #8
   1750a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   1750c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   17510:	060d      	lsls	r5, r1, #24
   17512:	d405      	bmi.n	17520 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   17514:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   17516:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   17518:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   1751c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
   17520:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   17522:	4a23      	ldr	r2, [pc, #140]	; (175b0 <usb_isr+0x5d4>)
   17524:	2150      	movs	r1, #80	; 0x50
   17526:	7011      	strb	r1, [r2, #0]
   17528:	e600      	b.n	1712c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
   1752a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
   1752c:	782a      	ldrb	r2, [r5, #0]
   1752e:	4282      	cmp	r2, r0
   17530:	bf28      	it	cs
   17532:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
   17534:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   17538:	d144      	bne.n	175c4 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
   1753a:	4b1e      	ldr	r3, [pc, #120]	; (175b4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1753c:	4d1e      	ldr	r5, [pc, #120]	; (175b8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
   1753e:	7818      	ldrb	r0, [r3, #0]
   17540:	491e      	ldr	r1, [pc, #120]	; (175bc <usb_isr+0x5e0>)
   17542:	4b1f      	ldr	r3, [pc, #124]	; (175c0 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
   17544:	9201      	str	r2, [sp, #4]
   17546:	2800      	cmp	r0, #0
   17548:	bf18      	it	ne
   1754a:	4619      	movne	r1, r3
   1754c:	4628      	mov	r0, r5
   1754e:	f7ff f819 	bl	16584 <memcpy>
					usb_descriptor_buffer[1] = 7;
   17552:	2307      	movs	r3, #7
   17554:	706b      	strb	r3, [r5, #1]
   17556:	9a01      	ldr	r2, [sp, #4]
   17558:	e03b      	b.n	175d2 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   1755a:	03c9      	lsls	r1, r1, #15
   1755c:	f53f af61 	bmi.w	17422 <usb_isr+0x446>
   17560:	e761      	b.n	17426 <usb_isr+0x44a>
   17562:	bf00      	nop
   17564:	2000a260 	.word	0x2000a260
   17568:	2000f170 	.word	0x2000f170
   1756c:	2000cfc8 	.word	0x2000cfc8
   17570:	00070080 	.word	0x00070080
   17574:	20010170 	.word	0x20010170
   17578:	2000a240 	.word	0x2000a240
   1757c:	2000eaac 	.word	0x2000eaac
   17580:	2000ec10 	.word	0x2000ec10
   17584:	2000ec38 	.word	0x2000ec38
   17588:	2000ec39 	.word	0x2000ec39
   1758c:	00cc0002 	.word	0x00cc0002
   17590:	000200c8 	.word	0x000200c8
   17594:	00c80002 	.word	0x00c80002
   17598:	20000080 	.word	0x20000080
   1759c:	74d59319 	.word	0x74d59319
   175a0:	2000e64c 	.word	0x2000e64c
   175a4:	2000e170 	.word	0x2000e170
   175a8:	2000ec08 	.word	0x2000ec08
   175ac:	2000ec34 	.word	0x2000ec34
   175b0:	2000ec3b 	.word	0x2000ec3b
   175b4:	2000ec3a 	.word	0x2000ec3a
   175b8:	202000e0 	.word	0x202000e0
   175bc:	60002694 	.word	0x60002694
   175c0:	60002630 	.word	0x60002630
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   175c4:	4629      	mov	r1, r5
   175c6:	4d10      	ldr	r5, [pc, #64]	; (17608 <usb_isr+0x62c>)
   175c8:	9201      	str	r2, [sp, #4]
   175ca:	4628      	mov	r0, r5
   175cc:	f7fe ffda 	bl	16584 <memcpy>
   175d0:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   175d2:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   175d6:	4415      	add	r5, r2
	asm("dsb");
   175d8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   175dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   175e0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
   175e4:	3320      	adds	r3, #32
	} while (location < end_addr);
   175e6:	429d      	cmp	r5, r3
   175e8:	d8fa      	bhi.n	175e0 <usb_isr+0x604>
	asm("dsb");
   175ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
   175ee:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   175f2:	4805      	ldr	r0, [pc, #20]	; (17608 <usb_isr+0x62c>)
   175f4:	4611      	mov	r1, r2
   175f6:	f7ff fc8f 	bl	16f18 <endpoint0_transmit.constprop.0>
				return;
   175fa:	e544      	b.n	17086 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
   175fc:	2003      	movs	r0, #3
   175fe:	f7ff fcd7 	bl	16fb0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
   17602:	f00d f89d 	bl	24740 <___reboot_Teensyduino__veneer>
   17606:	bf00      	nop
   17608:	202000e0 	.word	0x202000e0

0001760c <usb_config_rx>:
{
   1760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17610:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   17612:	1e83      	subs	r3, r0, #2
   17614:	2b02      	cmp	r3, #2
   17616:	d901      	bls.n	1761c <usb_config_rx+0x10>
}
   17618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1761c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1766c <usb_config_rx+0x60>
   17620:	4615      	mov	r5, r2
   17622:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
   17624:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   17626:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   1762a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1762c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   17630:	2100      	movs	r1, #0
   17632:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17636:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
   17638:	f004 f9fe 	bl	1ba38 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1763c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
   17640:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17642:	0952      	lsrs	r2, r2, #5
   17644:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
   17648:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
   1764c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   17650:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
   17654:	2f00      	cmp	r7, #0
   17656:	d0df      	beq.n	17618 <usb_config_rx+0xc>
   17658:	4a03      	ldr	r2, [pc, #12]	; (17668 <usb_config_rx+0x5c>)
   1765a:	40b3      	lsls	r3, r6
   1765c:	6811      	ldr	r1, [r2, #0]
   1765e:	430b      	orrs	r3, r1
   17660:	6013      	str	r3, [r2, #0]
}
   17662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17666:	bf00      	nop
   17668:	2000e17c 	.word	0x2000e17c
   1766c:	20000000 	.word	0x20000000

00017670 <usb_config_tx>:
{
   17670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17674:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   17676:	1e81      	subs	r1, r0, #2
   17678:	2902      	cmp	r1, #2
   1767a:	d901      	bls.n	17680 <usb_config_tx+0x10>
}
   1767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   17680:	01c7      	lsls	r7, r0, #7
   17682:	f8df 904c 	ldr.w	r9, [pc, #76]	; 176d0 <usb_config_tx+0x60>
   17686:	4692      	mov	sl, r2
   17688:	4604      	mov	r4, r0
   1768a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
   1768c:	223c      	movs	r2, #60	; 0x3c
   1768e:	2100      	movs	r1, #0
   17690:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   17692:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17696:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
   17698:	f108 0004 	add.w	r0, r8, #4
   1769c:	f004 f9cc 	bl	1ba38 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   176a0:	faba f28a 	clz	r2, sl
   176a4:	0952      	lsrs	r2, r2, #5
   176a6:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
   176aa:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
   176ae:	2201      	movs	r2, #1
	qh->callback_function = callback;
   176b0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   176b4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   176b8:	2e00      	cmp	r6, #0
   176ba:	d0df      	beq.n	1767c <usb_config_tx+0xc>
   176bc:	4b03      	ldr	r3, [pc, #12]	; (176cc <usb_config_tx+0x5c>)
   176be:	3410      	adds	r4, #16
   176c0:	6819      	ldr	r1, [r3, #0]
   176c2:	40a2      	lsls	r2, r4
   176c4:	430a      	orrs	r2, r1
   176c6:	601a      	str	r2, [r3, #0]
}
   176c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   176cc:	2000e17c 	.word	0x2000e17c
   176d0:	20000000 	.word	0x20000000

000176d4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
   176d4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
   176d6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
   176d8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
   176da:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
   176de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
   176e2:	b410      	push	{r4}
	transfer->next = 1;
   176e4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
   176e6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
   176e8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
   176ec:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
   176ee:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
   176f2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
   176f6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
   176f8:	6181      	str	r1, [r0, #24]
}
   176fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
   176fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
   17702:	4770      	bx	lr

00017704 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   17704:	1e83      	subs	r3, r0, #2
{
   17706:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   17708:	2b02      	cmp	r3, #2
   1770a:	d900      	bls.n	1770e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
   1770c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   1770e:	4b06      	ldr	r3, [pc, #24]	; (17728 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
   17710:	f100 0110 	add.w	r1, r0, #16
   17714:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   17718:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
   1771c:	fa0c f101 	lsl.w	r1, ip, r1
   17720:	3040      	adds	r0, #64	; 0x40
   17722:	f7ff bb99 	b.w	16e58 <schedule_transfer>
   17726:	bf00      	nop
   17728:	20000000 	.word	0x20000000

0001772c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   1772c:	1e83      	subs	r3, r0, #2
{
   1772e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   17730:	2b02      	cmp	r3, #2
   17732:	d900      	bls.n	17736 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
   17734:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
   17736:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
   17738:	4b02      	ldr	r3, [pc, #8]	; (17744 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
   1773a:	4081      	lsls	r1, r0
   1773c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   17740:	f7ff bb8a 	b.w	16e58 <schedule_transfer>
   17744:	20000000 	.word	0x20000000

00017748 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   17748:	6840      	ldr	r0, [r0, #4]
#endif
}
   1774a:	4770      	bx	lr

0001774c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   1774c:	4a12      	ldr	r2, [pc, #72]	; (17798 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   1774e:	4b13      	ldr	r3, [pc, #76]	; (1779c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   17750:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
   17754:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
   17758:	4298      	cmp	r0, r3
{
   1775a:	b510      	push	{r4, lr}
   1775c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
   1775e:	d202      	bcs.n	17766 <usb_init_serialnumber+0x1a>
   17760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17764:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
   17766:	4c0e      	ldr	r4, [pc, #56]	; (177a0 <usb_init_serialnumber+0x54>)
   17768:	a901      	add	r1, sp, #4
   1776a:	220a      	movs	r2, #10
   1776c:	f7fe ffa8 	bl	166c0 <ultoa>
	for (i=0; i<10; i++) {
   17770:	a901      	add	r1, sp, #4
   17772:	2300      	movs	r3, #0
   17774:	4620      	mov	r0, r4
		char c = buf[i];
   17776:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
   1777a:	3301      	adds	r3, #1
		if (!c) break;
   1777c:	b13a      	cbz	r2, 1778e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
   1777e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
   17780:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   17784:	d1f7      	bne.n	17776 <usb_init_serialnumber+0x2a>
   17786:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   17788:	7023      	strb	r3, [r4, #0]
}
   1778a:	b004      	add	sp, #16
   1778c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   1778e:	005b      	lsls	r3, r3, #1
   17790:	b2db      	uxtb	r3, r3
   17792:	7023      	strb	r3, [r4, #0]
}
   17794:	b004      	add	sp, #16
   17796:	bd10      	pop	{r4, pc}
   17798:	401f4400 	.word	0x401f4400
   1779c:	00989680 	.word	0x00989680
   177a0:	20009bd8 	.word	0x20009bd8

000177a4 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
   177a4:	f000 badc 	b.w	17d60 <usb_serial_flush_input>

000177a8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
   177a8:	f000 baac 	b.w	17d04 <usb_serial_peekchar>

000177ac <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
   177ac:	f000 bb10 	b.w	17dd0 <usb_serial_getchar>

000177b0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
   177b0:	f000 baca 	b.w	17d48 <usb_serial_available>

000177b4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   177b4:	f000 bb66 	b.w	17e84 <usb_serial_flush_output>

000177b8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   177b8:	f000 bb3c 	b.w	17e34 <usb_serial_write_buffer_free>

000177bc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   177bc:	4608      	mov	r0, r1
   177be:	4611      	mov	r1, r2
   177c0:	f000 bb2c 	b.w	17e1c <usb_serial_write>

000177c4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   177c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   177c6:	4c14      	ldr	r4, [pc, #80]	; (17818 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   177c8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   177cc:	4e13      	ldr	r6, [pc, #76]	; (1781c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   177ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   177d2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   177d6:	4f12      	ldr	r7, [pc, #72]	; (17820 <rx_queue_transfer+0x5c>)
   177d8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
   177dc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   177de:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   177e2:	4621      	mov	r1, r4
   177e4:	883a      	ldrh	r2, [r7, #0]
   177e6:	4630      	mov	r0, r6
   177e8:	f7ff ff74 	bl	176d4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
   177ec:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   177ee:	4423      	add	r3, r4
	asm("dsb");
   177f0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   177f4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
   177f8:	3420      	adds	r4, #32
	} while (location < end_addr);
   177fa:	42a3      	cmp	r3, r4
   177fc:	d8fa      	bhi.n	177f4 <rx_queue_transfer+0x30>
	asm("dsb");
   177fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17802:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
   17806:	2003      	movs	r0, #3
   17808:	4631      	mov	r1, r6
   1780a:	f7ff ff8f 	bl	1772c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1780e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   17812:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
   17816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17818:	20200160 	.word	0x20200160
   1781c:	2000a280 	.word	0x2000a280
   17820:	2000ec20 	.word	0x2000ec20

00017824 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17824:	4b24      	ldr	r3, [pc, #144]	; (178b8 <rx_event+0x94>)
{
   17826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1782a:	881c      	ldrh	r4, [r3, #0]
   1782c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
   1782e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17830:	f3c3 430e 	ubfx	r3, r3, #16, #15
   17834:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   17836:	2c00      	cmp	r4, #0
   17838:	dd24      	ble.n	17884 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
   1783a:	4920      	ldr	r1, [pc, #128]	; (178bc <rx_event+0x98>)
		if (head != rx_tail) {
   1783c:	4820      	ldr	r0, [pc, #128]	; (178c0 <rx_event+0x9c>)
		uint32_t head = rx_head;
   1783e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
   17840:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
   17842:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
   17844:	4e1f      	ldr	r6, [pc, #124]	; (178c4 <rx_event+0xa0>)
		if (head != rx_tail) {
   17846:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
   17848:	481f      	ldr	r0, [pc, #124]	; (178c8 <rx_event+0xa4>)
		if (head != rx_tail) {
   1784a:	d007      	beq.n	1785c <rx_event+0x38>
			uint32_t ii = rx_list[head];
   1784c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
   17850:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
   17854:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
   17858:	4294      	cmp	r4, r2
   1785a:	d918      	bls.n	1788e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   1785c:	3301      	adds	r3, #1
		rx_index[i] = 0;
   1785e:	2200      	movs	r2, #0
		rx_count[i] = len;
   17860:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
   17864:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
   17866:	4e19      	ldr	r6, [pc, #100]	; (178cc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
   17868:	bf88      	it	hi
   1786a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
   1786c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
   17870:	bf98      	it	ls
   17872:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
   17874:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
   17876:	4b16      	ldr	r3, [pc, #88]	; (178d0 <rx_event+0xac>)
		rx_head = head;
   17878:	700a      	strb	r2, [r1, #0]
		rx_available += len;
   1787a:	681a      	ldr	r2, [r3, #0]
   1787c:	4414      	add	r4, r2
   1787e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   17880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
   17884:	4628      	mov	r0, r5
}
   17886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
   1788a:	f7ff bf9b 	b.w	177c4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   1788e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
   17892:	4910      	ldr	r1, [pc, #64]	; (178d4 <rx_event+0xb0>)
   17894:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
   17896:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   17898:	4408      	add	r0, r1
   1789a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
   1789e:	f7fe fe71 	bl	16584 <memcpy>
				rx_available += len;
   178a2:	4a0b      	ldr	r2, [pc, #44]	; (178d0 <rx_event+0xac>)
				rx_queue_transfer(i);
   178a4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
   178a6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
   178aa:	6813      	ldr	r3, [r2, #0]
   178ac:	4423      	add	r3, r4
}
   178ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
   178b2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
   178b4:	f7ff bf86 	b.w	177c4 <rx_queue_transfer>
   178b8:	2000ec20 	.word	0x2000ec20
   178bc:	2000ec32 	.word	0x2000ec32
   178c0:	2000ec33 	.word	0x2000ec33
   178c4:	2000e998 	.word	0x2000e998
   178c8:	2000e9b8 	.word	0x2000e9b8
   178cc:	2000e9a8 	.word	0x2000e9a8
   178d0:	2000e994 	.word	0x2000e994
   178d4:	20200160 	.word	0x20200160

000178d8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
   178d8:	4b1d      	ldr	r3, [pc, #116]	; (17950 <usb_serial_flush_callback+0x78>)
   178da:	781a      	ldrb	r2, [r3, #0]
   178dc:	2a00      	cmp	r2, #0
   178de:	d136      	bne.n	1794e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
   178e0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   178e4:	4a1b      	ldr	r2, [pc, #108]	; (17954 <usb_serial_flush_callback+0x7c>)
   178e6:	7812      	ldrb	r2, [r2, #0]
   178e8:	b38a      	cbz	r2, 1794e <usb_serial_flush_callback+0x76>
{
   178ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
   178ee:	4d1a      	ldr	r5, [pc, #104]	; (17958 <usb_serial_flush_callback+0x80>)
   178f0:	882a      	ldrh	r2, [r5, #0]
   178f2:	b352      	cbz	r2, 1794a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
   178f4:	4e19      	ldr	r6, [pc, #100]	; (1795c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
   178f6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   178fa:	4f19      	ldr	r7, [pc, #100]	; (17960 <usb_serial_flush_callback+0x88>)
   178fc:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   178fe:	4c19      	ldr	r4, [pc, #100]	; (17964 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   17900:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17904:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17908:	4642      	mov	r2, r8
   1790a:	4638      	mov	r0, r7
   1790c:	4621      	mov	r1, r4
   1790e:	f7ff fee1 	bl	176d4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   17912:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
   17916:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   1791a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1791e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   17922:	3420      	adds	r4, #32
	} while (location < end_addr);
   17924:	42a2      	cmp	r2, r4
   17926:	d8fa      	bhi.n	1791e <usb_serial_flush_callback+0x46>
	asm("dsb");
   17928:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1792c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   17930:	2004      	movs	r0, #4
   17932:	4639      	mov	r1, r7
   17934:	f7ff fee6 	bl	17704 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   17938:	7833      	ldrb	r3, [r6, #0]
   1793a:	3301      	adds	r3, #1
   1793c:	b2db      	uxtb	r3, r3
   1793e:	2b03      	cmp	r3, #3
   17940:	bf88      	it	hi
   17942:	2300      	movhi	r3, #0
   17944:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   17946:	2300      	movs	r3, #0
   17948:	802b      	strh	r3, [r5, #0]
}
   1794a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1794e:	4770      	bx	lr
   17950:	2000ec37 	.word	0x2000ec37
   17954:	2000ec39 	.word	0x2000ec39
   17958:	2000ec22 	.word	0x2000ec22
   1795c:	2000ec36 	.word	0x2000ec36
   17960:	2000a380 	.word	0x2000a380
   17964:	20201160 	.word	0x20201160

00017968 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
   17968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1796c:	b085      	sub	sp, #20
	while (size > 0) {
   1796e:	e9cd 1001 	strd	r1, r0, [sp, #4]
   17972:	2900      	cmp	r1, #0
   17974:	f000 80bf 	beq.w	17af6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
   17978:	2300      	movs	r3, #0
   1797a:	4c60      	ldr	r4, [pc, #384]	; (17afc <usb_serial_write.part.0+0x194>)
   1797c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 17b18 <usb_serial_write.part.0+0x1b0>
   17980:	f8df a198 	ldr.w	sl, [pc, #408]	; 17b1c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
   17984:	4f5e      	ldr	r7, [pc, #376]	; (17b00 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
   17986:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
   17988:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
   1798a:	4a5e      	ldr	r2, [pc, #376]	; (17b04 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
   1798c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
   1798e:	4b5e      	ldr	r3, [pc, #376]	; (17b08 <usb_serial_write.part.0+0x1a0>)
   17990:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
   17992:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
   17996:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
   1799a:	2b00      	cmp	r3, #0
   1799c:	f040 80a7 	bne.w	17aee <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
   179a0:	461e      	mov	r6, r3
		int waiting=0;
   179a2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
   179a4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
   179a6:	4648      	mov	r0, r9
   179a8:	f7ff fece 	bl	17748 <usb_transfer_status>
			if (!(status & 0x80)) {
   179ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   179b0:	f000 808c 	beq.w	17acc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
   179b4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
   179b8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
   179bc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
   179c0:	b905      	cbnz	r5, 179c4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
   179c2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
   179c4:	2b00      	cmp	r3, #0
   179c6:	d17d      	bne.n	17ac4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   179c8:	683b      	ldr	r3, [r7, #0]
   179ca:	1b9b      	subs	r3, r3, r6
   179cc:	2b78      	cmp	r3, #120	; 0x78
   179ce:	f200 8087 	bhi.w	17ae0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
   179d2:	4b4e      	ldr	r3, [pc, #312]	; (17b0c <usb_serial_write.part.0+0x1a4>)
   179d4:	781b      	ldrb	r3, [r3, #0]
   179d6:	2b00      	cmp	r3, #0
   179d8:	d074      	beq.n	17ac4 <usb_serial_write.part.0+0x15c>
			yield();
   179da:	f000 fa9d 	bl	17f18 <yield>
			tx_noautoflush = 1;
   179de:	2201      	movs	r2, #1
		while (!tx_available) {
   179e0:	f8b8 3000 	ldrh.w	r3, [r8]
   179e4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
   179e6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
   179e8:	2b00      	cmp	r3, #0
   179ea:	d0dc      	beq.n	179a6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   179ec:	4a46      	ldr	r2, [pc, #280]	; (17b08 <usb_serial_write.part.0+0x1a0>)
   179ee:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   179f2:	7811      	ldrb	r1, [r2, #0]
   179f4:	461a      	mov	r2, r3
   179f6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
   179fa:	4d45      	ldr	r5, [pc, #276]	; (17b10 <usb_serial_write.part.0+0x1a8>)
   179fc:	02c9      	lsls	r1, r1, #11
   179fe:	4428      	add	r0, r5
		if (size >= tx_available) {
   17a00:	9d01      	ldr	r5, [sp, #4]
   17a02:	4295      	cmp	r5, r2
   17a04:	d217      	bcs.n	17a36 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
   17a06:	9303      	str	r3, [sp, #12]
   17a08:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   17a0c:	462a      	mov	r2, r5
   17a0e:	f7fe fdb9 	bl	16584 <memcpy>
			tx_available -= size;
   17a12:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   17a14:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
   17a18:	1b5b      	subs	r3, r3, r5
   17a1a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   17a1e:	4b3d      	ldr	r3, [pc, #244]	; (17b14 <usb_serial_write.part.0+0x1ac>)
   17a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
   17a24:	f3bf 8f4f 	dsb	sy
			sent += size;
   17a28:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
   17a2a:	2300      	movs	r3, #0
			sent += size;
   17a2c:	4428      	add	r0, r5
		tx_noautoflush = 0;
   17a2e:	7023      	strb	r3, [r4, #0]
}
   17a30:	b005      	add	sp, #20
   17a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17a36:	4b36      	ldr	r3, [pc, #216]	; (17b10 <usb_serial_write.part.0+0x1a8>)
   17a38:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
   17a3a:	9902      	ldr	r1, [sp, #8]
   17a3c:	f7fe fda2 	bl	16584 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
   17a40:	2300      	movs	r3, #0
   17a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17a46:	4629      	mov	r1, r5
   17a48:	4648      	mov	r0, r9
   17a4a:	f7ff fe43 	bl	176d4 <usb_prepare_transfer>
	asm("dsb");
   17a4e:	f3bf 8f4f 	dsb	sy
   17a52:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
   17a56:	f505 6300 	add.w	r3, r5, #2048	; 0x800
   17a5a:	4293      	cmp	r3, r2
   17a5c:	bf34      	ite	cc
   17a5e:	2301      	movcc	r3, #1
   17a60:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
   17a62:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   17a66:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   17a6a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
   17a6e:	3520      	adds	r5, #32
	} while (location < end_addr);
   17a70:	42ab      	cmp	r3, r5
   17a72:	d1fa      	bne.n	17a6a <usb_serial_write.part.0+0x102>
	asm("dsb");
   17a74:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17a78:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
   17a7c:	2004      	movs	r0, #4
   17a7e:	4649      	mov	r1, r9
   17a80:	f7ff fe40 	bl	17704 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
   17a84:	4a20      	ldr	r2, [pc, #128]	; (17b08 <usb_serial_write.part.0+0x1a0>)
   17a86:	7813      	ldrb	r3, [r2, #0]
   17a88:	3301      	adds	r3, #1
   17a8a:	b2db      	uxtb	r3, r3
   17a8c:	2b03      	cmp	r3, #3
   17a8e:	bf84      	itt	hi
   17a90:	2300      	movhi	r3, #0
   17a92:	4a1d      	ldrhi	r2, [pc, #116]	; (17b08 <usb_serial_write.part.0+0x1a0>)
   17a94:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
   17a96:	f8b8 3000 	ldrh.w	r3, [r8]
   17a9a:	9a01      	ldr	r2, [sp, #4]
   17a9c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
   17a9e:	9a00      	ldr	r2, [sp, #0]
   17aa0:	441a      	add	r2, r3
			size -= tx_available;
   17aa2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
   17aa4:	9200      	str	r2, [sp, #0]
			data += tx_available;
   17aa6:	9a02      	ldr	r2, [sp, #8]
   17aa8:	441a      	add	r2, r3
			tx_available = 0;
   17aaa:	2300      	movs	r3, #0
			data += tx_available;
   17aac:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
   17aae:	4a19      	ldr	r2, [pc, #100]	; (17b14 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
   17ab0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
   17ab4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
   17ab8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
   17abc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
   17abe:	2900      	cmp	r1, #0
   17ac0:	f47f af62 	bne.w	17988 <usb_serial_write.part.0+0x20>
	return sent;
   17ac4:	9800      	ldr	r0, [sp, #0]
}
   17ac6:	b005      	add	sp, #20
   17ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
   17acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   17ad0:	4b0d      	ldr	r3, [pc, #52]	; (17b08 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
   17ad2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   17ad6:	7819      	ldrb	r1, [r3, #0]
				break;
   17ad8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
   17ada:	f8a8 2000 	strh.w	r2, [r8]
				break;
   17ade:	e78a      	b.n	179f6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
   17ae0:	2301      	movs	r3, #1
				return sent;
   17ae2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
   17ae4:	f88a 3000 	strb.w	r3, [sl]
}
   17ae8:	b005      	add	sp, #20
   17aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   17aee:	461a      	mov	r2, r3
   17af0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   17af4:	e77f      	b.n	179f6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
   17af6:	9801      	ldr	r0, [sp, #4]
	return sent;
   17af8:	e7e5      	b.n	17ac6 <usb_serial_write.part.0+0x15e>
   17afa:	bf00      	nop
   17afc:	2000ec37 	.word	0x2000ec37
   17b00:	2000eaac 	.word	0x2000eaac
   17b04:	2000a380 	.word	0x2000a380
   17b08:	2000ec36 	.word	0x2000ec36
   17b0c:	2000ec39 	.word	0x2000ec39
   17b10:	20201160 	.word	0x20201160
   17b14:	402e0000 	.word	0x402e0000
   17b18:	2000ec22 	.word	0x2000ec22
   17b1c:	2000ec35 	.word	0x2000ec35

00017b20 <usb_serial_reset>:
}
   17b20:	4770      	bx	lr
   17b22:	bf00      	nop

00017b24 <usb_serial_configure>:
	if (usb_high_speed) {
   17b24:	4b2d      	ldr	r3, [pc, #180]	; (17bdc <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
   17b26:	2100      	movs	r1, #0
   17b28:	2280      	movs	r2, #128	; 0x80
   17b2a:	482d      	ldr	r0, [pc, #180]	; (17be0 <usb_serial_configure+0xbc>)
{
   17b2c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   17b2e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
   17b30:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
   17b32:	4d2c      	ldr	r5, [pc, #176]	; (17be4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
   17b34:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
   17b36:	4e2c      	ldr	r6, [pc, #176]	; (17be8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
   17b38:	bf0c      	ite	eq
   17b3a:	2340      	moveq	r3, #64	; 0x40
   17b3c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
   17b40:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
   17b42:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   17b44:	f003 ff78 	bl	1ba38 <memset>
	tx_head = 0;
   17b48:	4a28      	ldr	r2, [pc, #160]	; (17bec <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   17b4a:	4621      	mov	r1, r4
	tx_available = 0;
   17b4c:	4b28      	ldr	r3, [pc, #160]	; (17bf0 <usb_serial_configure+0xcc>)
	tx_head = 0;
   17b4e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   17b50:	f44f 7280 	mov.w	r2, #256	; 0x100
   17b54:	4827      	ldr	r0, [pc, #156]	; (17bf4 <usb_serial_configure+0xd0>)
	tx_available = 0;
   17b56:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   17b58:	f003 ff6e 	bl	1ba38 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   17b5c:	4a26      	ldr	r2, [pc, #152]	; (17bf8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17b5e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
   17b60:	4b26      	ldr	r3, [pc, #152]	; (17bfc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17b62:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
   17b64:	e9c2 4400 	strd	r4, r4, [r2]
   17b68:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
   17b6c:	4a24      	ldr	r2, [pc, #144]	; (17c00 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
   17b6e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
   17b72:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
   17b74:	4a23      	ldr	r2, [pc, #140]	; (17c04 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
   17b76:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
   17b7a:	4b23      	ldr	r3, [pc, #140]	; (17c08 <usb_serial_configure+0xe4>)
   17b7c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17b7e:	4623      	mov	r3, r4
	rx_available = 0;
   17b80:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17b82:	4622      	mov	r2, r4
   17b84:	f7ff fd74 	bl	17670 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   17b88:	4622      	mov	r2, r4
   17b8a:	8831      	ldrh	r1, [r6, #0]
   17b8c:	2003      	movs	r0, #3
   17b8e:	4b1f      	ldr	r3, [pc, #124]	; (17c0c <usb_serial_configure+0xe8>)
   17b90:	f7ff fd3c 	bl	1760c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
   17b94:	4623      	mov	r3, r4
   17b96:	2201      	movs	r2, #1
   17b98:	8829      	ldrh	r1, [r5, #0]
   17b9a:	2004      	movs	r0, #4
   17b9c:	f7ff fd68 	bl	17670 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   17ba0:	4620      	mov	r0, r4
   17ba2:	3401      	adds	r4, #1
   17ba4:	f7ff fe0e 	bl	177c4 <rx_queue_transfer>
   17ba8:	2c08      	cmp	r4, #8
   17baa:	d1f9      	bne.n	17ba0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
   17bac:	4b18      	ldr	r3, [pc, #96]	; (17c10 <usb_serial_configure+0xec>)
   17bae:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
   17bb0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
   17bb2:	4818      	ldr	r0, [pc, #96]	; (17c14 <usb_serial_configure+0xf0>)
   17bb4:	4c18      	ldr	r4, [pc, #96]	; (17c18 <usb_serial_configure+0xf4>)
   17bb6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   17bb8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   17bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   17bc0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   17bc4:	4915      	ldr	r1, [pc, #84]	; (17c1c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
   17bc6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   17bca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   17bce:	b121      	cbz	r1, 17bda <usb_serial_configure+0xb6>
   17bd0:	4a13      	ldr	r2, [pc, #76]	; (17c20 <usb_serial_configure+0xfc>)
   17bd2:	7813      	ldrb	r3, [r2, #0]
   17bd4:	f043 0301 	orr.w	r3, r3, #1
   17bd8:	7013      	strb	r3, [r2, #0]
}
   17bda:	bd70      	pop	{r4, r5, r6, pc}
   17bdc:	2000ec3a 	.word	0x2000ec3a
   17be0:	2000a380 	.word	0x2000a380
   17be4:	2000ec24 	.word	0x2000ec24
   17be8:	2000ec20 	.word	0x2000ec20
   17bec:	2000ec36 	.word	0x2000ec36
   17bf0:	2000ec22 	.word	0x2000ec22
   17bf4:	2000a280 	.word	0x2000a280
   17bf8:	2000e998 	.word	0x2000e998
   17bfc:	2000e9a8 	.word	0x2000e9a8
   17c00:	2000ec32 	.word	0x2000ec32
   17c04:	2000e994 	.word	0x2000e994
   17c08:	2000ec33 	.word	0x2000ec33
   17c0c:	00017825 	.word	0x00017825
   17c10:	402e0000 	.word	0x402e0000
   17c14:	2000ec14 	.word	0x2000ec14
   17c18:	000178d9 	.word	0x000178d9
   17c1c:	00000000 	.word	0x00000000
   17c20:	2000ec3c 	.word	0x2000ec3c

00017c24 <usb_serial_read>:
{
   17c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17c28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17c2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
   17c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 17cfc <usb_serial_read+0xd8>
{
   17c34:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17c36:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
   17c3a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
   17c3c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
   17c40:	2900      	cmp	r1, #0
   17c42:	d04f      	beq.n	17ce4 <usb_serial_read+0xc0>
   17c44:	4680      	mov	r8, r0
   17c46:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
   17c48:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
   17c4a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 17d00 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
   17c4e:	4b26      	ldr	r3, [pc, #152]	; (17ce8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
   17c50:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17c54:	4925      	ldr	r1, [pc, #148]	; (17cec <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
   17c56:	781b      	ldrb	r3, [r3, #0]
   17c58:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
   17c5a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
   17c5e:	d03f      	beq.n	17ce0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
   17c60:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
   17c62:	4b23      	ldr	r3, [pc, #140]	; (17cf0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17c64:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
   17c66:	bf28      	it	cs
   17c68:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   17c6a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
   17c6c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17c70:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
   17c74:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
   17c76:	4b1f      	ldr	r3, [pc, #124]	; (17cf4 <usb_serial_read+0xd0>)
   17c78:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
   17c7c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
   17c80:	42aa      	cmp	r2, r5
   17c82:	d21c      	bcs.n	17cbe <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   17c84:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
   17c88:	4918      	ldr	r1, [pc, #96]	; (17cec <usb_serial_read+0xc8>)
			rx_available -= len;
   17c8a:	4c1b      	ldr	r4, [pc, #108]	; (17cf8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   17c8c:	4461      	add	r1, ip
   17c8e:	9201      	str	r2, [sp, #4]
   17c90:	f7fe fc78 	bl	16584 <memcpy>
			rx_available -= len;
   17c94:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
   17c96:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
   17c9a:	4658      	mov	r0, fp
			rx_index[i] += len;
   17c9c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
   17c9e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
   17ca2:	442a      	add	r2, r5
			rx_available -= len;
   17ca4:	4439      	add	r1, r7
			rx_index[i] += len;
   17ca6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
   17caa:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17cb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17cb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   17cb8:	b003      	add	sp, #12
   17cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17cbe:	462a      	mov	r2, r5
			count += avail;
   17cc0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17cc2:	f7fe fc5f 	bl	16584 <memcpy>
			rx_available -= avail;
   17cc6:	490c      	ldr	r1, [pc, #48]	; (17cf8 <usb_serial_read+0xd4>)
			rx_tail = tail;
   17cc8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
   17cca:	4630      	mov	r0, r6
			rx_available -= avail;
   17ccc:	680a      	ldr	r2, [r1, #0]
			p += avail;
   17cce:	44a8      	add	r8, r5
			rx_available -= avail;
   17cd0:	1b52      	subs	r2, r2, r5
   17cd2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
   17cd4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
   17cd8:	f7ff fd74 	bl	177c4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
   17cdc:	45bb      	cmp	fp, r7
   17cde:	d8b6      	bhi.n	17c4e <usb_serial_read+0x2a>
	return count;
   17ce0:	4638      	mov	r0, r7
   17ce2:	e7e3      	b.n	17cac <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
   17ce4:	4608      	mov	r0, r1
   17ce6:	e7e1      	b.n	17cac <usb_serial_read+0x88>
   17ce8:	2000ec32 	.word	0x2000ec32
   17cec:	20200160 	.word	0x20200160
   17cf0:	2000e9b8 	.word	0x2000e9b8
   17cf4:	2000e998 	.word	0x2000e998
   17cf8:	2000e994 	.word	0x2000e994
   17cfc:	2000ec33 	.word	0x2000ec33
   17d00:	2000e9a8 	.word	0x2000e9a8

00017d04 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
   17d04:	4b0b      	ldr	r3, [pc, #44]	; (17d34 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
   17d06:	4a0c      	ldr	r2, [pc, #48]	; (17d38 <usb_serial_peekchar+0x34>)
   17d08:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
   17d0a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
   17d0c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
   17d0e:	428a      	cmp	r2, r1
   17d10:	d00d      	beq.n	17d2e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   17d12:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
   17d14:	4809      	ldr	r0, [pc, #36]	; (17d3c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   17d16:	4a0a      	ldr	r2, [pc, #40]	; (17d40 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
   17d18:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   17d1a:	490a      	ldr	r1, [pc, #40]	; (17d44 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
   17d1c:	bf28      	it	cs
   17d1e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   17d20:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   17d22:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   17d26:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   17d2a:	5c58      	ldrb	r0, [r3, r1]
   17d2c:	4770      	bx	lr
	if (tail == rx_head) return -1;
   17d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17d32:	4770      	bx	lr
   17d34:	2000ec32 	.word	0x2000ec32
   17d38:	2000ec33 	.word	0x2000ec33
   17d3c:	2000e9b8 	.word	0x2000e9b8
   17d40:	20200160 	.word	0x20200160
   17d44:	2000e9a8 	.word	0x2000e9a8

00017d48 <usb_serial_available>:
	uint32_t n = rx_available;
   17d48:	4b04      	ldr	r3, [pc, #16]	; (17d5c <usb_serial_available+0x14>)
{
   17d4a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   17d4c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   17d4e:	b10c      	cbz	r4, 17d54 <usb_serial_available+0xc>
}
   17d50:	4620      	mov	r0, r4
   17d52:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   17d54:	f000 f8e0 	bl	17f18 <yield>
}
   17d58:	4620      	mov	r0, r4
   17d5a:	bd10      	pop	{r4, pc}
   17d5c:	2000e994 	.word	0x2000e994

00017d60 <usb_serial_flush_input>:
{
   17d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
   17d64:	4e14      	ldr	r6, [pc, #80]	; (17db8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
   17d66:	4d15      	ldr	r5, [pc, #84]	; (17dbc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
   17d68:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
   17d6a:	782a      	ldrb	r2, [r5, #0]
   17d6c:	4293      	cmp	r3, r2
   17d6e:	d021      	beq.n	17db4 <usb_serial_flush_input+0x54>
   17d70:	b2dc      	uxtb	r4, r3
   17d72:	f8df 9050 	ldr.w	r9, [pc, #80]	; 17dc4 <usb_serial_flush_input+0x64>
   17d76:	f8df b050 	ldr.w	fp, [pc, #80]	; 17dc8 <usb_serial_flush_input+0x68>
   17d7a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17dcc <usb_serial_flush_input+0x6c>
   17d7e:	4f10      	ldr	r7, [pc, #64]	; (17dc0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   17d80:	3401      	adds	r4, #1
   17d82:	2c08      	cmp	r4, #8
		rx_tail = tail;
   17d84:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   17d88:	d901      	bls.n	17d8e <usb_serial_flush_input+0x2e>
   17d8a:	2400      	movs	r4, #0
   17d8c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   17d8e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   17d92:	f8db 3000 	ldr.w	r3, [fp]
   17d96:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   17d9a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   17d9e:	1a52      	subs	r2, r2, r1
   17da0:	1a9b      	subs	r3, r3, r2
   17da2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   17da6:	f7ff fd0d 	bl	177c4 <rx_queue_transfer>
		rx_tail = tail;
   17daa:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   17dae:	782b      	ldrb	r3, [r5, #0]
   17db0:	42a3      	cmp	r3, r4
   17db2:	d1e5      	bne.n	17d80 <usb_serial_flush_input+0x20>
}
   17db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17db8:	2000ec33 	.word	0x2000ec33
   17dbc:	2000ec32 	.word	0x2000ec32
   17dc0:	2000e9a8 	.word	0x2000e9a8
   17dc4:	2000e9b8 	.word	0x2000e9b8
   17dc8:	2000e994 	.word	0x2000e994
   17dcc:	2000e998 	.word	0x2000e998

00017dd0 <usb_serial_getchar>:
{
   17dd0:	b500      	push	{lr}
   17dd2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   17dd4:	2101      	movs	r1, #1
   17dd6:	f10d 0007 	add.w	r0, sp, #7
   17dda:	f7ff ff23 	bl	17c24 <usb_serial_read>
   17dde:	b120      	cbz	r0, 17dea <usb_serial_getchar+0x1a>
   17de0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   17de4:	b003      	add	sp, #12
   17de6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   17dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17dee:	e7f9      	b.n	17de4 <usb_serial_getchar+0x14>

00017df0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   17df0:	4b09      	ldr	r3, [pc, #36]	; (17e18 <usb_serial_putchar+0x28>)
{
   17df2:	b500      	push	{lr}
   17df4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   17df6:	781b      	ldrb	r3, [r3, #0]
{
   17df8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   17dfc:	b13b      	cbz	r3, 17e0e <usb_serial_putchar+0x1e>
   17dfe:	2101      	movs	r1, #1
   17e00:	f10d 0007 	add.w	r0, sp, #7
   17e04:	f7ff fdb0 	bl	17968 <usb_serial_write.part.0>
}
   17e08:	b003      	add	sp, #12
   17e0a:	f85d fb04 	ldr.w	pc, [sp], #4
   17e0e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   17e12:	b003      	add	sp, #12
   17e14:	f85d fb04 	ldr.w	pc, [sp], #4
   17e18:	2000ec39 	.word	0x2000ec39

00017e1c <usb_serial_write>:
	if (!usb_configuration) return 0;
   17e1c:	4b04      	ldr	r3, [pc, #16]	; (17e30 <usb_serial_write+0x14>)
   17e1e:	781b      	ldrb	r3, [r3, #0]
   17e20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   17e24:	b10b      	cbz	r3, 17e2a <usb_serial_write+0xe>
   17e26:	f7ff bd9f 	b.w	17968 <usb_serial_write.part.0>
}
   17e2a:	4610      	mov	r0, r2
   17e2c:	4770      	bx	lr
   17e2e:	bf00      	nop
   17e30:	2000ec39 	.word	0x2000ec39

00017e34 <usb_serial_write_buffer_free>:
{
   17e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   17e38:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   17e3a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 17e80 <usb_serial_write_buffer_free+0x4c>
   17e3e:	2301      	movs	r3, #1
   17e40:	4d0d      	ldr	r5, [pc, #52]	; (17e78 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   17e42:	4627      	mov	r7, r4
   17e44:	4e0d      	ldr	r6, [pc, #52]	; (17e7c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   17e46:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   17e4a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   17e4c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   17e4e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   17e50:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   17e52:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   17e56:	d005      	beq.n	17e64 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   17e58:	f7ff fc76 	bl	17748 <usb_transfer_status>
   17e5c:	0603      	lsls	r3, r0, #24
   17e5e:	bf58      	it	pl
   17e60:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   17e64:	2c04      	cmp	r4, #4
   17e66:	d1f0      	bne.n	17e4a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   17e68:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   17e6c:	2300      	movs	r3, #0
}
   17e6e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   17e70:	f888 3000 	strb.w	r3, [r8]
}
   17e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e78:	2000a380 	.word	0x2000a380
   17e7c:	2000ec36 	.word	0x2000ec36
   17e80:	2000ec37 	.word	0x2000ec37

00017e84 <usb_serial_flush_output>:
{
   17e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   17e88:	4b1d      	ldr	r3, [pc, #116]	; (17f00 <usb_serial_flush_output+0x7c>)
   17e8a:	781b      	ldrb	r3, [r3, #0]
   17e8c:	b113      	cbz	r3, 17e94 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   17e8e:	4d1d      	ldr	r5, [pc, #116]	; (17f04 <usb_serial_flush_output+0x80>)
   17e90:	882a      	ldrh	r2, [r5, #0]
   17e92:	b90a      	cbnz	r2, 17e98 <usb_serial_flush_output+0x14>
}
   17e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   17e98:	4e1b      	ldr	r6, [pc, #108]	; (17f08 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   17e9a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   17e9e:	491b      	ldr	r1, [pc, #108]	; (17f0c <usb_serial_flush_output+0x88>)
   17ea0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17ea2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17ea4:	4c1a      	ldr	r4, [pc, #104]	; (17f10 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   17ea6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   17eaa:	4f1a      	ldr	r7, [pc, #104]	; (17f14 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17eac:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   17eb0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17eb2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   17eb4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17eb6:	4621      	mov	r1, r4
   17eb8:	2300      	movs	r3, #0
   17eba:	f7ff fc0b 	bl	176d4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   17ebe:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   17ec2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   17ec6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17eca:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   17ece:	3420      	adds	r4, #32
	} while (location < end_addr);
   17ed0:	42a2      	cmp	r2, r4
   17ed2:	d8fa      	bhi.n	17eca <usb_serial_flush_output+0x46>
	asm("dsb");
   17ed4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17ed8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   17edc:	2004      	movs	r0, #4
   17ede:	4641      	mov	r1, r8
   17ee0:	f7ff fc10 	bl	17704 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   17ee4:	7833      	ldrb	r3, [r6, #0]
   17ee6:	3301      	adds	r3, #1
   17ee8:	b2db      	uxtb	r3, r3
   17eea:	2b03      	cmp	r3, #3
   17eec:	bf88      	it	hi
   17eee:	2300      	movhi	r3, #0
   17ef0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   17ef2:	2300      	movs	r3, #0
   17ef4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   17ef6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   17efa:	703b      	strb	r3, [r7, #0]
}
   17efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17f00:	2000ec39 	.word	0x2000ec39
   17f04:	2000ec22 	.word	0x2000ec22
   17f08:	2000ec36 	.word	0x2000ec36
   17f0c:	2000a380 	.word	0x2000a380
   17f10:	20201160 	.word	0x20201160
   17f14:	2000ec37 	.word	0x2000ec37

00017f18 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
   17f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
   17f1c:	4b2d      	ldr	r3, [pc, #180]	; (17fd4 <yield+0xbc>)
   17f1e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
   17f20:	b166      	cbz	r6, 17f3c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
   17f22:	4f2d      	ldr	r7, [pc, #180]	; (17fd8 <yield+0xc0>)
   17f24:	783b      	ldrb	r3, [r7, #0]
   17f26:	b94b      	cbnz	r3, 17f3c <yield+0x24>
	running = 1;
   17f28:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   17f2a:	07f1      	lsls	r1, r6, #31
	running = 1;
   17f2c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   17f2e:	d443      	bmi.n	17fb8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   17f30:	07b2      	lsls	r2, r6, #30
   17f32:	d426      	bmi.n	17f82 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
   17f34:	2300      	movs	r3, #0
   17f36:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
   17f38:	0773      	lsls	r3, r6, #29
   17f3a:	d401      	bmi.n	17f40 <yield+0x28>
		EventResponder::runFromYield();
	}
};
   17f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   17f40:	4b26      	ldr	r3, [pc, #152]	; (17fdc <yield+0xc4>)
   17f42:	681a      	ldr	r2, [r3, #0]
   17f44:	2a00      	cmp	r2, #0
   17f46:	d0f9      	beq.n	17f3c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   17f48:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   17f4c:	2a00      	cmp	r2, #0
   17f4e:	d1f5      	bne.n	17f3c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   17f50:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   17f54:	b672      	cpsid	i
		EventResponder *first = firstYield;
   17f56:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   17f58:	2800      	cmp	r0, #0
   17f5a:	d034      	beq.n	17fc6 <yield+0xae>
		if (runningFromYield) {
   17f5c:	4c20      	ldr	r4, [pc, #128]	; (17fe0 <yield+0xc8>)
   17f5e:	7821      	ldrb	r1, [r4, #0]
   17f60:	2900      	cmp	r1, #0
   17f62:	d130      	bne.n	17fc6 <yield+0xae>
		runningFromYield = true;
   17f64:	2201      	movs	r2, #1
   17f66:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   17f68:	6942      	ldr	r2, [r0, #20]
   17f6a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   17f6c:	2a00      	cmp	r2, #0
   17f6e:	d02e      	beq.n	17fce <yield+0xb6>
			firstYield->_prev = nullptr;
   17f70:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   17f72:	b905      	cbnz	r5, 17f76 <yield+0x5e>
   17f74:	b662      	cpsie	i
		first->_triggered = false;
   17f76:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   17f78:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   17f7a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   17f7c:	4798      	blx	r3
		runningFromYield = false;
   17f7e:	7025      	strb	r5, [r4, #0]
   17f80:	e7dc      	b.n	17f3c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   17f82:	f8df 8064 	ldr.w	r8, [pc, #100]	; 17fe8 <yield+0xd0>
   17f86:	f898 3000 	ldrb.w	r3, [r8]
   17f8a:	2b00      	cmp	r3, #0
   17f8c:	d0d2      	beq.n	17f34 <yield+0x1c>
   17f8e:	2500      	movs	r5, #0
   17f90:	f8df 9058 	ldr.w	r9, [pc, #88]	; 17fec <yield+0xd4>
   17f94:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   17f96:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   17f9a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   17f9c:	6823      	ldr	r3, [r4, #0]
   17f9e:	4620      	mov	r0, r4
   17fa0:	691b      	ldr	r3, [r3, #16]
   17fa2:	4798      	blx	r3
   17fa4:	b110      	cbz	r0, 17fac <yield+0x94>
   17fa6:	6963      	ldr	r3, [r4, #20]
   17fa8:	689b      	ldr	r3, [r3, #8]
   17faa:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   17fac:	f898 2000 	ldrb.w	r2, [r8]
   17fb0:	b2eb      	uxtb	r3, r5
   17fb2:	429a      	cmp	r2, r3
   17fb4:	d8ef      	bhi.n	17f96 <yield+0x7e>
   17fb6:	e7bd      	b.n	17f34 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   17fb8:	f7ff fec6 	bl	17d48 <usb_serial_available>
		if (Serial.available()) serialEvent();
   17fbc:	2800      	cmp	r0, #0
   17fbe:	d0b7      	beq.n	17f30 <yield+0x18>
   17fc0:	f3af 8000 	nop.w
   17fc4:	e7b4      	b.n	17f30 <yield+0x18>
		if (doit) __enable_irq();
   17fc6:	2d00      	cmp	r5, #0
   17fc8:	d1b8      	bne.n	17f3c <yield+0x24>
   17fca:	b662      	cpsie	i
   17fcc:	e7b6      	b.n	17f3c <yield+0x24>
			lastYield = nullptr;
   17fce:	4b05      	ldr	r3, [pc, #20]	; (17fe4 <yield+0xcc>)
   17fd0:	601a      	str	r2, [r3, #0]
   17fd2:	e7ce      	b.n	17f72 <yield+0x5a>
   17fd4:	2000ec3c 	.word	0x2000ec3c
   17fd8:	2000ec2d 	.word	0x2000ec2d
   17fdc:	2000d868 	.word	0x2000d868
   17fe0:	2000ec29 	.word	0x2000ec29
   17fe4:	2000d874 	.word	0x2000d874
   17fe8:	2000ec2a 	.word	0x2000ec2a
   17fec:	2000d87c 	.word	0x2000d87c

00017ff0 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
   17ff0:	4a07      	ldr	r2, [pc, #28]	; (18010 <rtc_get+0x20>)
   17ff2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
   17ff4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
   17ff6:	4619      	mov	r1, r3
   17ff8:	4684      	mov	ip, r0
   17ffa:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
   17ffc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
   17ffe:	4299      	cmp	r1, r3
   18000:	d1f9      	bne.n	17ff6 <rtc_get+0x6>
   18002:	4584      	cmp	ip, r0
   18004:	d1f7      	bne.n	17ff6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
   18006:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
   18008:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   1800c:	4770      	bx	lr
   1800e:	bf00      	nop
   18010:	400d4000 	.word	0x400d4000

00018014 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   18014:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   18016:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   1801a:	b15b      	cbz	r3, 18034 <sm_align_pool+0x20>
   1801c:	b1ba      	cbz	r2, 1804e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   1801e:	4b0f      	ldr	r3, [pc, #60]	; (1805c <sm_align_pool+0x48>)
   18020:	fba3 1302 	umull	r1, r3, r3, r2
   18024:	08db      	lsrs	r3, r3, #3
   18026:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1802a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   1802e:	d10a      	bne.n	18046 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   18030:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   18032:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   18034:	4b09      	ldr	r3, [pc, #36]	; (1805c <sm_align_pool+0x48>)
   18036:	fba3 1302 	umull	r1, r3, r3, r2
   1803a:	08db      	lsrs	r3, r3, #3
   1803c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   18040:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   18044:	d001      	beq.n	1804a <sm_align_pool+0x36>
   18046:	1ad2      	subs	r2, r2, r3
   18048:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   1804a:	2af0      	cmp	r2, #240	; 0xf0
   1804c:	d8f0      	bhi.n	18030 <sm_align_pool+0x1c>
		errno = ENOSPC;
   1804e:	f004 fe35 	bl	1ccbc <__errno>
   18052:	221c      	movs	r2, #28
   18054:	4603      	mov	r3, r0
   18056:	2000      	movs	r0, #0
   18058:	601a      	str	r2, [r3, #0]
}
   1805a:	bd08      	pop	{r3, pc}
   1805c:	aaaaaaab 	.word	0xaaaaaaab

00018060 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   18060:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   18062:	4604      	mov	r4, r0
   18064:	b338      	cbz	r0, 180b6 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   18066:	b119      	cbz	r1, 18070 <sm_set_pool+0x10>
   18068:	fab2 f682 	clz	r6, r2
   1806c:	0976      	lsrs	r6, r6, #5
   1806e:	b9a2      	cbnz	r2, 1809a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   18070:	6820      	ldr	r0, [r4, #0]
   18072:	b300      	cbz	r0, 180b6 <sm_set_pool+0x56>
   18074:	6862      	ldr	r2, [r4, #4]
   18076:	b1f2      	cbz	r2, 180b6 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   18078:	4b18      	ldr	r3, [pc, #96]	; (180dc <sm_set_pool+0x7c>)
   1807a:	4919      	ldr	r1, [pc, #100]	; (180e0 <sm_set_pool+0x80>)
   1807c:	fb02 f303 	mul.w	r3, r2, r3
   18080:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   18084:	d317      	bcc.n	180b6 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   18086:	68a3      	ldr	r3, [r4, #8]
   18088:	b9e3      	cbnz	r3, 180c4 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   1808a:	2200      	movs	r2, #0
			return 1;
   1808c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   1808e:	6022      	str	r2, [r4, #0]
   18090:	6062      	str	r2, [r4, #4]
   18092:	60a2      	str	r2, [r4, #8]
   18094:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   18096:	4618      	mov	r0, r3
   18098:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   1809a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   1809c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   1809e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   180a2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   180a4:	f7ff ffb6 	bl	18014 <sm_align_pool>
   180a8:	4603      	mov	r3, r0
   180aa:	2800      	cmp	r0, #0
   180ac:	d0f3      	beq.n	18096 <sm_set_pool+0x36>
	if (do_zero) {
   180ae:	b96d      	cbnz	r5, 180cc <sm_set_pool+0x6c>
	return 1;
   180b0:	2301      	movs	r3, #1
}
   180b2:	4618      	mov	r0, r3
   180b4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   180b6:	f004 fe01 	bl	1ccbc <__errno>
   180ba:	2216      	movs	r2, #22
		return 0;
   180bc:	2300      	movs	r3, #0
		errno = EINVAL;
   180be:	6002      	str	r2, [r0, #0]
}
   180c0:	4618      	mov	r0, r3
   180c2:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   180c4:	2100      	movs	r1, #0
   180c6:	f003 fcb7 	bl	1ba38 <memset>
   180ca:	e7de      	b.n	1808a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   180cc:	6862      	ldr	r2, [r4, #4]
   180ce:	4631      	mov	r1, r6
   180d0:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   180d2:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   180d4:	f003 fcb0 	bl	1ba38 <memset>
	return 1;
   180d8:	2301      	movs	r3, #1
   180da:	e7dc      	b.n	18096 <sm_set_pool+0x36>
   180dc:	aaaaaaab 	.word	0xaaaaaaab
   180e0:	15555555 	.word	0x15555555

000180e4 <atan2f>:
   180e4:	f000 bd14 	b.w	18b10 <__ieee754_atan2f>

000180e8 <sqrtf>:
   180e8:	b508      	push	{r3, lr}
   180ea:	ed2d 8b02 	vpush	{d8}
   180ee:	eeb0 8a40 	vmov.f32	s16, s0
   180f2:	f000 fd09 	bl	18b08 <__ieee754_sqrtf>
   180f6:	eeb4 8a48 	vcmp.f32	s16, s16
   180fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   180fe:	d606      	bvs.n	1810e <sqrtf+0x26>
   18100:	eddf 8a09 	vldr	s17, [pc, #36]	; 18128 <sqrtf+0x40>
   18104:	eeb4 8ae8 	vcmpe.f32	s16, s17
   18108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1810c:	d402      	bmi.n	18114 <sqrtf+0x2c>
   1810e:	ecbd 8b02 	vpop	{d8}
   18112:	bd08      	pop	{r3, pc}
   18114:	f004 fdd2 	bl	1ccbc <__errno>
   18118:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   1811c:	ecbd 8b02 	vpop	{d8}
   18120:	2321      	movs	r3, #33	; 0x21
   18122:	6003      	str	r3, [r0, #0]
   18124:	bd08      	pop	{r3, pc}
   18126:	bf00      	nop
	...

00018130 <pow>:
   18130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18134:	ec5b ab10 	vmov	sl, fp, d0
   18138:	ed2d 8b0a 	vpush	{d8-d12}
   1813c:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
   18140:	ee11 ea90 	vmov	lr, s3
   18144:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   18148:	f240 70fd 	movw	r0, #2045	; 0x7fd
   1814c:	4286      	cmp	r6, r0
   1814e:	ee10 1a10 	vmov	r1, s0
   18152:	ee11 3a10 	vmov	r3, s2
   18156:	b089      	sub	sp, #36	; 0x24
   18158:	465a      	mov	r2, fp
   1815a:	4665      	mov	r5, ip
   1815c:	ea4f 541e 	mov.w	r4, lr, lsr #20
   18160:	f200 80c6 	bhi.w	182f0 <pow+0x1c0>
   18164:	f3c4 060a 	ubfx	r6, r4, #0, #11
   18168:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
   1816c:	2e7f      	cmp	r6, #127	; 0x7f
   1816e:	bf98      	it	ls
   18170:	2000      	movls	r0, #0
   18172:	f200 80bd 	bhi.w	182f0 <pow+0x1c0>
   18176:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
   1817a:	4ce1      	ldr	r4, [pc, #900]	; (18500 <pow+0x3d0>)
   1817c:	4be1      	ldr	r3, [pc, #900]	; (18504 <pow+0x3d4>)
   1817e:	4414      	add	r4, r2
   18180:	f3c4 3546 	ubfx	r5, r4, #13, #7
   18184:	eb03 1645 	add.w	r6, r3, r5, lsl #5
   18188:	ed93 6b00 	vldr	d6, [r3]
   1818c:	ed93 7b02 	vldr	d7, [r3, #8]
   18190:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
   18194:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
   18198:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
   1819c:	0d26      	lsrs	r6, r4, #20
   1819e:	1524      	asrs	r4, r4, #20
   181a0:	ee05 4a90 	vmov	s11, r4
   181a4:	0536      	lsls	r6, r6, #20
   181a6:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
   181aa:	eeb8 5be5 	vcvt.f64.s32	d5, s11
   181ae:	1b95      	subs	r5, r2, r6
   181b0:	eea5 2b06 	vfma.f64	d2, d5, d6
   181b4:	eea5 9b07 	vfma.f64	d9, d5, d7
   181b8:	ed93 ab04 	vldr	d10, [r3, #16]
   181bc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
   181c0:	ed93 bb08 	vldr	d11, [r3, #32]
   181c4:	ed93 7b06 	vldr	d7, [r3, #24]
   181c8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
   181cc:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   181d0:	1e0c      	subs	r4, r1, #0
   181d2:	ec45 4b1c 	vmov	d12, r4, r5
   181d6:	eeac 0b08 	vfma.f64	d0, d12, d8
   181da:	eea0 3b05 	vfma.f64	d3, d0, d5
   181de:	eea0 6b04 	vfma.f64	d6, d0, d4
   181e2:	ee20 5b0a 	vmul.f64	d5, d0, d10
   181e6:	ee30 4b02 	vadd.f64	d4, d0, d2
   181ea:	ee20 8b05 	vmul.f64	d8, d0, d5
   181ee:	eea0 7b0b 	vfma.f64	d7, d0, d11
   181f2:	eea8 6b03 	vfma.f64	d6, d8, d3
   181f6:	ee32 2b44 	vsub.f64	d2, d2, d4
   181fa:	eea8 7b06 	vfma.f64	d7, d8, d6
   181fe:	ee32 2b00 	vadd.f64	d2, d2, d0
   18202:	eeb0 3b48 	vmov.f64	d3, d8
   18206:	ee39 2b02 	vadd.f64	d2, d9, d2
   1820a:	ee95 3b00 	vfnms.f64	d3, d5, d0
   1820e:	ee34 5b08 	vadd.f64	d5, d4, d8
   18212:	ee20 0b08 	vmul.f64	d0, d0, d8
   18216:	ee34 4b45 	vsub.f64	d4, d4, d5
   1821a:	ee32 6b03 	vadd.f64	d6, d2, d3
   1821e:	ee34 4b08 	vadd.f64	d4, d4, d8
   18222:	ee36 6b04 	vadd.f64	d6, d6, d4
   18226:	eea0 6b07 	vfma.f64	d6, d0, d7
   1822a:	ee35 4b06 	vadd.f64	d4, d5, d6
   1822e:	ee21 8b04 	vmul.f64	d8, d1, d4
   18232:	ee18 2a90 	vmov	r2, s17
   18236:	eeb0 7b48 	vmov.f64	d7, d8
   1823a:	f3c2 550a 	ubfx	r5, r2, #20, #11
   1823e:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
   18242:	18eb      	adds	r3, r5, r3
   18244:	2b3e      	cmp	r3, #62	; 0x3e
   18246:	ee91 7b04 	vfnms.f64	d7, d1, d4
   1824a:	ee35 5b44 	vsub.f64	d5, d5, d4
   1824e:	ee35 5b06 	vadd.f64	d5, d5, d6
   18252:	eea1 7b05 	vfma.f64	d7, d1, d5
   18256:	f200 8093 	bhi.w	18380 <pow+0x250>
   1825a:	4bab      	ldr	r3, [pc, #684]	; (18508 <pow+0x3d8>)
   1825c:	ed93 4b02 	vldr	d4, [r3, #8]
   18260:	ed93 5b00 	vldr	d5, [r3]
   18264:	eeb0 1b44 	vmov.f64	d1, d4
   18268:	ed93 2b04 	vldr	d2, [r3, #16]
   1826c:	eea8 1b05 	vfma.f64	d1, d8, d5
   18270:	ed93 6b06 	vldr	d6, [r3, #24]
   18274:	ee11 1a10 	vmov	r1, s2
   18278:	ee31 1b44 	vsub.f64	d1, d1, d4
   1827c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   18280:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
   18284:	eea1 8b02 	vfma.f64	d8, d1, d2
   18288:	eea1 8b06 	vfma.f64	d8, d1, d6
   1828c:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
   18290:	ee37 7b08 	vadd.f64	d7, d7, d8
   18294:	ee27 2b07 	vmul.f64	d2, d7, d7
   18298:	1892      	adds	r2, r2, r2
   1829a:	f102 040f 	add.w	r4, r2, #15
   1829e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   182a2:	eea7 6b04 	vfma.f64	d6, d7, d4
   182a6:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
   182aa:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   182ae:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
   182b2:	ed93 5b08 	vldr	d5, [r3, #32]
   182b6:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
   182ba:	6857      	ldr	r7, [r2, #4]
   182bc:	eea7 5b03 	vfma.f64	d5, d7, d3
   182c0:	1840      	adds	r0, r0, r1
   182c2:	2400      	movs	r4, #0
   182c4:	ee22 3b02 	vmul.f64	d3, d2, d2
   182c8:	ee37 7b04 	vadd.f64	d7, d7, d4
   182cc:	19a2      	adds	r2, r4, r6
   182ce:	eea2 7b05 	vfma.f64	d7, d2, d5
   182d2:	eb07 3340 	add.w	r3, r7, r0, lsl #13
   182d6:	eea3 7b06 	vfma.f64	d7, d3, d6
   182da:	2d00      	cmp	r5, #0
   182dc:	d05f      	beq.n	1839e <pow+0x26e>
   182de:	ec43 2b10 	vmov	d0, r2, r3
   182e2:	eea7 0b00 	vfma.f64	d0, d7, d0
   182e6:	b009      	add	sp, #36	; 0x24
   182e8:	ecbd 8b0a 	vpop	{d8-d12}
   182ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182f0:	18d8      	adds	r0, r3, r3
   182f2:	eb4e 090e 	adc.w	r9, lr, lr
   182f6:	1e46      	subs	r6, r0, #1
   182f8:	4637      	mov	r7, r6
   182fa:	f06f 0801 	mvn.w	r8, #1
   182fe:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
   18302:	45b8      	cmp	r8, r7
   18304:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   18308:	eb77 0606 	sbcs.w	r6, r7, r6
   1830c:	f0c0 8120 	bcc.w	18550 <pow+0x420>
   18310:	1848      	adds	r0, r1, r1
   18312:	eb42 0902 	adc.w	r9, r2, r2
   18316:	1e46      	subs	r6, r0, #1
   18318:	4637      	mov	r7, r6
   1831a:	f169 0600 	sbc.w	r6, r9, #0
   1831e:	45b8      	cmp	r8, r7
   18320:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   18324:	eb77 0606 	sbcs.w	r6, r7, r6
   18328:	f0c0 8139 	bcc.w	1859e <pow+0x46e>
   1832c:	2a00      	cmp	r2, #0
   1832e:	db6a      	blt.n	18406 <pow+0x2d6>
   18330:	2000      	movs	r0, #0
   18332:	f3c4 060a 	ubfx	r6, r4, #0, #11
   18336:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
   1833a:	2b7f      	cmp	r3, #127	; 0x7f
   1833c:	f240 77ff 	movw	r7, #2047	; 0x7ff
   18340:	d94f      	bls.n	183e2 <pow+0x2b2>
   18342:	4b72      	ldr	r3, [pc, #456]	; (1850c <pow+0x3dc>)
   18344:	2000      	movs	r0, #0
   18346:	429a      	cmp	r2, r3
   18348:	bf08      	it	eq
   1834a:	4281      	cmpeq	r1, r0
   1834c:	f000 80fd 	beq.w	1854a <pow+0x41a>
   18350:	f240 35bd 	movw	r5, #957	; 0x3bd
   18354:	42ae      	cmp	r6, r5
   18356:	f240 8091 	bls.w	1847c <pow+0x34c>
   1835a:	2901      	cmp	r1, #1
   1835c:	eb72 0303 	sbcs.w	r3, r2, r3
   18360:	bf34      	ite	cc
   18362:	2301      	movcc	r3, #1
   18364:	2300      	movcs	r3, #0
   18366:	42bc      	cmp	r4, r7
   18368:	bf8c      	ite	hi
   1836a:	2400      	movhi	r4, #0
   1836c:	2401      	movls	r4, #1
   1836e:	42a3      	cmp	r3, r4
   18370:	d10e      	bne.n	18390 <pow+0x260>
   18372:	b009      	add	sp, #36	; 0x24
   18374:	ecbd 8b0a 	vpop	{d8-d12}
   18378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1837c:	f000 bd64 	b.w	18e48 <__math_uflow>
   18380:	2b00      	cmp	r3, #0
   18382:	f2c0 80ce 	blt.w	18522 <pow+0x3f2>
   18386:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
   1838a:	d975      	bls.n	18478 <pow+0x348>
   1838c:	2a00      	cmp	r2, #0
   1838e:	dbf0      	blt.n	18372 <pow+0x242>
   18390:	b009      	add	sp, #36	; 0x24
   18392:	ecbd 8b0a 	vpop	{d8-d12}
   18396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1839a:	f000 bd65 	b.w	18e68 <__math_oflow>
   1839e:	42a1      	cmp	r1, r4
   183a0:	f280 8113 	bge.w	185ca <pow+0x49a>
   183a4:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
   183a8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   183ac:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   183b0:	4610      	mov	r0, r2
   183b2:	ec41 0b15 	vmov	d5, r0, r1
   183b6:	ee27 7b05 	vmul.f64	d7, d7, d5
   183ba:	ee35 6b07 	vadd.f64	d6, d5, d7
   183be:	eeb0 4bc6 	vabs.f64	d4, d6
   183c2:	eeb4 4bc3 	vcmpe.f64	d4, d3
   183c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   183ca:	d461      	bmi.n	18490 <pow+0x360>
   183cc:	ed9f 0b48 	vldr	d0, [pc, #288]	; 184f0 <pow+0x3c0>
   183d0:	ee26 0b00 	vmul.f64	d0, d6, d0
   183d4:	b009      	add	sp, #36	; 0x24
   183d6:	ecbd 8b0a 	vpop	{d8-d12}
   183da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183de:	f000 bd71 	b.w	18ec4 <__math_check_uflow>
   183e2:	2d00      	cmp	r5, #0
   183e4:	f47f aec7 	bne.w	18176 <pow+0x46>
   183e8:	ed9f 7b43 	vldr	d7, [pc, #268]	; 184f8 <pow+0x3c8>
   183ec:	ec4b ab16 	vmov	d6, sl, fp
   183f0:	ee26 7b07 	vmul.f64	d7, d6, d7
   183f4:	ec53 2b17 	vmov	r2, r3, d7
   183f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   183fc:	ee17 1a10 	vmov	r1, s14
   18400:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
   18404:	e6b7      	b.n	18176 <pow+0x46>
   18406:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1840a:	f240 30fe 	movw	r0, #1022	; 0x3fe
   1840e:	4286      	cmp	r6, r0
   18410:	dd7e      	ble.n	18510 <pow+0x3e0>
   18412:	f240 4033 	movw	r0, #1075	; 0x433
   18416:	4286      	cmp	r6, r0
   18418:	f300 80fa 	bgt.w	18610 <pow+0x4e0>
   1841c:	1b80      	subs	r0, r0, r6
   1841e:	f1a0 0520 	sub.w	r5, r0, #32
   18422:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   18426:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1842a:	4087      	lsls	r7, r0
   1842c:	fa09 f905 	lsl.w	r9, r9, r5
   18430:	f1c0 0820 	rsb	r8, r0, #32
   18434:	9501      	str	r5, [sp, #4]
   18436:	ea47 0509 	orr.w	r5, r7, r9
   1843a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1843e:	fa27 f908 	lsr.w	r9, r7, r8
   18442:	ea45 0509 	orr.w	r5, r5, r9
   18446:	4087      	lsls	r7, r0
   18448:	ea23 0707 	bic.w	r7, r3, r7
   1844c:	ea2e 0505 	bic.w	r5, lr, r5
   18450:	433d      	orrs	r5, r7
   18452:	d15d      	bne.n	18510 <pow+0x3e0>
   18454:	9d01      	ldr	r5, [sp, #4]
   18456:	40c3      	lsrs	r3, r0
   18458:	fa0e f808 	lsl.w	r8, lr, r8
   1845c:	ea43 0308 	orr.w	r3, r3, r8
   18460:	fa2e fe05 	lsr.w	lr, lr, r5
   18464:	ea43 030e 	orr.w	r3, r3, lr
   18468:	f003 0301 	and.w	r3, r3, #1
   1846c:	0498      	lsls	r0, r3, #18
   1846e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   18472:	f3cc 050a 	ubfx	r5, ip, #0, #11
   18476:	e75e      	b.n	18336 <pow+0x206>
   18478:	2500      	movs	r5, #0
   1847a:	e6ee      	b.n	1825a <pow+0x12a>
   1847c:	4288      	cmp	r0, r1
   1847e:	4193      	sbcs	r3, r2
   18480:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   18484:	bf34      	ite	cc
   18486:	ee31 0b00 	vaddcc.f64	d0, d1, d0
   1848a:	ee30 0b41 	vsubcs.f64	d0, d0, d1
   1848e:	e72a      	b.n	182e6 <pow+0x1b6>
   18490:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
   18494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18498:	ee35 5b46 	vsub.f64	d5, d5, d6
   1849c:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
   184a0:	ee35 5b07 	vadd.f64	d5, d5, d7
   184a4:	bf58      	it	pl
   184a6:	eeb0 4b43 	vmovpl.f64	d4, d3
   184aa:	ee36 3b04 	vadd.f64	d3, d6, d4
   184ae:	ee34 7b43 	vsub.f64	d7, d4, d3
   184b2:	ee37 7b06 	vadd.f64	d7, d7, d6
   184b6:	ee37 7b05 	vadd.f64	d7, d7, d5
   184ba:	ee37 7b03 	vadd.f64	d7, d7, d3
   184be:	ee37 6b44 	vsub.f64	d6, d7, d4
   184c2:	eeb5 6b40 	vcmp.f64	d6, #0.0
   184c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   184ca:	d104      	bne.n	184d6 <pow+0x3a6>
   184cc:	462a      	mov	r2, r5
   184ce:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   184d2:	ec43 2b16 	vmov	d6, r2, r3
   184d6:	ed9f 5b06 	vldr	d5, [pc, #24]	; 184f0 <pow+0x3c0>
   184da:	ed8d 5b04 	vstr	d5, [sp, #16]
   184de:	ed9d 7b04 	vldr	d7, [sp, #16]
   184e2:	ee27 7b05 	vmul.f64	d7, d7, d5
   184e6:	ed8d 7b06 	vstr	d7, [sp, #24]
   184ea:	e76f      	b.n	183cc <pow+0x29c>
   184ec:	f3af 8000 	nop.w
   184f0:	00000000 	.word	0x00000000
   184f4:	00100000 	.word	0x00100000
   184f8:	00000000 	.word	0x00000000
   184fc:	43300000 	.word	0x43300000
   18500:	c0196aab 	.word	0xc0196aab
   18504:	20000280 	.word	0x20000280
   18508:	20001408 	.word	0x20001408
   1850c:	3ff00000 	.word	0x3ff00000
   18510:	ec4b ab10 	vmov	d0, sl, fp
   18514:	b009      	add	sp, #36	; 0x24
   18516:	ecbd 8b0a 	vpop	{d8-d12}
   1851a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1851e:	f000 bcc3 	b.w	18ea8 <__math_invalid>
   18522:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   18526:	ee38 0b00 	vadd.f64	d0, d8, d0
   1852a:	2800      	cmp	r0, #0
   1852c:	f43f aedb 	beq.w	182e6 <pow+0x1b6>
   18530:	eeb1 0b40 	vneg.f64	d0, d0
   18534:	e6d7      	b.n	182e6 <pow+0x1b6>
   18536:	1849      	adds	r1, r1, r1
   18538:	4b59      	ldr	r3, [pc, #356]	; (186a0 <pow+0x570>)
   1853a:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
   1853e:	f04f 0000 	mov.w	r0, #0
   18542:	4152      	adcs	r2, r2
   18544:	4288      	cmp	r0, r1
   18546:	4193      	sbcs	r3, r2
   18548:	d35d      	bcc.n	18606 <pow+0x4d6>
   1854a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1854e:	e6ca      	b.n	182e6 <pow+0x1b6>
   18550:	ea50 0409 	orrs.w	r4, r0, r9
   18554:	d0ef      	beq.n	18536 <pow+0x406>
   18556:	4c53      	ldr	r4, [pc, #332]	; (186a4 <pow+0x574>)
   18558:	2500      	movs	r5, #0
   1855a:	42a2      	cmp	r2, r4
   1855c:	bf08      	it	eq
   1855e:	42a9      	cmpeq	r1, r5
   18560:	d047      	beq.n	185f2 <pow+0x4c2>
   18562:	1849      	adds	r1, r1, r1
   18564:	4b50      	ldr	r3, [pc, #320]	; (186a8 <pow+0x578>)
   18566:	4152      	adcs	r2, r2
   18568:	428d      	cmp	r5, r1
   1856a:	eb73 0402 	sbcs.w	r4, r3, r2
   1856e:	d34a      	bcc.n	18606 <pow+0x4d6>
   18570:	4599      	cmp	r9, r3
   18572:	bf08      	it	eq
   18574:	42a8      	cmpeq	r0, r5
   18576:	d146      	bne.n	18606 <pow+0x4d6>
   18578:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1857c:	429a      	cmp	r2, r3
   1857e:	bf08      	it	eq
   18580:	42a9      	cmpeq	r1, r5
   18582:	d0e2      	beq.n	1854a <pow+0x41a>
   18584:	429a      	cmp	r2, r3
   18586:	ea6f 0e0e 	mvn.w	lr, lr
   1858a:	bf34      	ite	cc
   1858c:	2200      	movcc	r2, #0
   1858e:	2201      	movcs	r2, #1
   18590:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   18594:	4572      	cmp	r2, lr
   18596:	d077      	beq.n	18688 <pow+0x558>
   18598:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 18690 <pow+0x560>
   1859c:	e6a3      	b.n	182e6 <pow+0x1b6>
   1859e:	ec4b ab17 	vmov	d7, sl, fp
   185a2:	2a00      	cmp	r2, #0
   185a4:	ee27 0b07 	vmul.f64	d0, d7, d7
   185a8:	db34      	blt.n	18614 <pow+0x4e4>
   185aa:	2200      	movs	r2, #0
   185ac:	ea50 0909 	orrs.w	r9, r0, r9
   185b0:	d15d      	bne.n	1866e <pow+0x53e>
   185b2:	f1be 0f00 	cmp.w	lr, #0
   185b6:	f6bf ae96 	bge.w	182e6 <pow+0x1b6>
   185ba:	4610      	mov	r0, r2
   185bc:	b009      	add	sp, #36	; 0x24
   185be:	ecbd 8b0a 	vpop	{d8-d12}
   185c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185c6:	f000 bc57 	b.w	18e78 <__math_divzero>
   185ca:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
   185ce:	ed9f 6b32 	vldr	d6, [pc, #200]	; 18698 <pow+0x568>
   185d2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
   185d6:	4610      	mov	r0, r2
   185d8:	ec41 0b10 	vmov	d0, r0, r1
   185dc:	eea7 0b00 	vfma.f64	d0, d7, d0
   185e0:	ee20 0b06 	vmul.f64	d0, d0, d6
   185e4:	b009      	add	sp, #36	; 0x24
   185e6:	ecbd 8b0a 	vpop	{d8-d12}
   185ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185ee:	f000 bc71 	b.w	18ed4 <__math_check_oflow>
   185f2:	18db      	adds	r3, r3, r3
   185f4:	4a2a      	ldr	r2, [pc, #168]	; (186a0 <pow+0x570>)
   185f6:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
   185fa:	eb4e 0e0e 	adc.w	lr, lr, lr
   185fe:	429d      	cmp	r5, r3
   18600:	eb72 020e 	sbcs.w	r2, r2, lr
   18604:	d2a1      	bcs.n	1854a <pow+0x41a>
   18606:	ec4b ab17 	vmov	d7, sl, fp
   1860a:	ee37 0b01 	vadd.f64	d0, d7, d1
   1860e:	e66a      	b.n	182e6 <pow+0x1b6>
   18610:	2000      	movs	r0, #0
   18612:	e72c      	b.n	1846e <pow+0x33e>
   18614:	f3c4 020a 	ubfx	r2, r4, #0, #11
   18618:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
   1861c:	2934      	cmp	r1, #52	; 0x34
   1861e:	d8c4      	bhi.n	185aa <pow+0x47a>
   18620:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
   18624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18628:	f1a2 051d 	sub.w	r5, r2, #29
   1862c:	3203      	adds	r2, #3
   1862e:	fa01 f705 	lsl.w	r7, r1, r5
   18632:	fa01 f402 	lsl.w	r4, r1, r2
   18636:	f1c2 0620 	rsb	r6, r2, #32
   1863a:	433c      	orrs	r4, r7
   1863c:	fa21 f706 	lsr.w	r7, r1, r6
   18640:	433c      	orrs	r4, r7
   18642:	4091      	lsls	r1, r2
   18644:	ea23 0101 	bic.w	r1, r3, r1
   18648:	ea2e 0404 	bic.w	r4, lr, r4
   1864c:	4321      	orrs	r1, r4
   1864e:	d1ac      	bne.n	185aa <pow+0x47a>
   18650:	fa23 f202 	lsr.w	r2, r3, r2
   18654:	fa0e f606 	lsl.w	r6, lr, r6
   18658:	4332      	orrs	r2, r6
   1865a:	fa2e f505 	lsr.w	r5, lr, r5
   1865e:	432a      	orrs	r2, r5
   18660:	f012 0201 	ands.w	r2, r2, #1
   18664:	d0a2      	beq.n	185ac <pow+0x47c>
   18666:	eeb1 0b40 	vneg.f64	d0, d0
   1866a:	2201      	movs	r2, #1
   1866c:	e79e      	b.n	185ac <pow+0x47c>
   1866e:	f1be 0f00 	cmp.w	lr, #0
   18672:	f6bf ae38 	bge.w	182e6 <pow+0x1b6>
   18676:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1867a:	ee86 7b00 	vdiv.f64	d7, d6, d0
   1867e:	ed8d 7b02 	vstr	d7, [sp, #8]
   18682:	ed9d 0b02 	vldr	d0, [sp, #8]
   18686:	e62e      	b.n	182e6 <pow+0x1b6>
   18688:	ee21 0b01 	vmul.f64	d0, d1, d1
   1868c:	e62b      	b.n	182e6 <pow+0x1b6>
   1868e:	bf00      	nop
	...
   1869c:	7f000000 	.word	0x7f000000
   186a0:	fff00000 	.word	0xfff00000
   186a4:	3ff00000 	.word	0x3ff00000
   186a8:	ffe00000 	.word	0xffe00000
   186ac:	00000000 	.word	0x00000000

000186b0 <sinf>:
   186b0:	b530      	push	{r4, r5, lr}
   186b2:	ee10 4a10 	vmov	r4, s0
   186b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
   186ba:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
   186be:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
   186c2:	b083      	sub	sp, #12
   186c4:	d21b      	bcs.n	186fe <sinf+0x4e>
   186c6:	ee26 5b06 	vmul.f64	d5, d6, d6
   186ca:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
   186ce:	d36e      	bcc.n	187ae <sinf+0xfe>
   186d0:	ee26 2b05 	vmul.f64	d2, d6, d5
   186d4:	ee25 1b02 	vmul.f64	d1, d5, d2
   186d8:	4b73      	ldr	r3, [pc, #460]	; (188a8 <sinf+0x1f8>)
   186da:	ed93 3b1a 	vldr	d3, [r3, #104]	; 0x68
   186de:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
   186e2:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
   186e6:	eea5 7b03 	vfma.f64	d7, d5, d3
   186ea:	eea2 6b04 	vfma.f64	d6, d2, d4
   186ee:	eeb0 0b46 	vmov.f64	d0, d6
   186f2:	eea7 0b01 	vfma.f64	d0, d7, d1
   186f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   186fa:	b003      	add	sp, #12
   186fc:	bd30      	pop	{r4, r5, pc}
   186fe:	f240 422e 	movw	r2, #1070	; 0x42e
   18702:	4293      	cmp	r3, r2
   18704:	d85e      	bhi.n	187c4 <sinf+0x114>
   18706:	4968      	ldr	r1, [pc, #416]	; (188a8 <sinf+0x1f8>)
   18708:	ed91 7b08 	vldr	d7, [r1, #32]
   1870c:	ee26 7b07 	vmul.f64	d7, d6, d7
   18710:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   18714:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
   18718:	ee17 3a90 	vmov	r3, s15
   1871c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
   18720:	161b      	asrs	r3, r3, #24
   18722:	f013 0f02 	tst.w	r3, #2
   18726:	ee07 3a90 	vmov	s15, r3
   1872a:	f101 0270 	add.w	r2, r1, #112	; 0x70
   1872e:	bf08      	it	eq
   18730:	460a      	moveq	r2, r1
   18732:	07d8      	lsls	r0, r3, #31
   18734:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   18738:	eea7 6b45 	vfms.f64	d6, d7, d5
   1873c:	ee26 7b06 	vmul.f64	d7, d6, d6
   18740:	d41b      	bmi.n	1877a <sinf+0xca>
   18742:	f003 0303 	and.w	r3, r3, #3
   18746:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1874a:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
   1874e:	ed91 2b00 	vldr	d2, [r1]
   18752:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
   18756:	ee26 6b02 	vmul.f64	d6, d6, d2
   1875a:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
   1875e:	eea7 5b04 	vfma.f64	d5, d7, d4
   18762:	ee26 4b07 	vmul.f64	d4, d6, d7
   18766:	ee27 7b04 	vmul.f64	d7, d7, d4
   1876a:	eea4 6b03 	vfma.f64	d6, d4, d3
   1876e:	eea5 6b07 	vfma.f64	d6, d5, d7
   18772:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
   18776:	b003      	add	sp, #12
   18778:	bd30      	pop	{r4, r5, pc}
   1877a:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
   1877e:	ee27 5b07 	vmul.f64	d5, d7, d7
   18782:	ed92 6b12 	vldr	d6, [r2, #72]	; 0x48
   18786:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
   1878a:	eea7 6b02 	vfma.f64	d6, d7, d2
   1878e:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
   18792:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
   18796:	eea7 0b03 	vfma.f64	d0, d7, d3
   1879a:	ee27 7b05 	vmul.f64	d7, d7, d5
   1879e:	eea5 0b04 	vfma.f64	d0, d5, d4
   187a2:	eea6 0b07 	vfma.f64	d0, d6, d7
   187a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   187aa:	b003      	add	sp, #12
   187ac:	bd30      	pop	{r4, r5, pc}
   187ae:	0d22      	lsrs	r2, r4, #20
   187b0:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
   187b4:	d1df      	bne.n	18776 <sinf+0xc6>
   187b6:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
   187ba:	ee00 4a10 	vmov	s0, r4
   187be:	ed8d 5a01 	vstr	s10, [sp, #4]
   187c2:	e7d8      	b.n	18776 <sinf+0xc6>
   187c4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
   187c8:	d24b      	bcs.n	18862 <sinf+0x1b2>
   187ca:	4b38      	ldr	r3, [pc, #224]	; (188ac <sinf+0x1fc>)
   187cc:	f3c4 6283 	ubfx	r2, r4, #26, #4
   187d0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   187d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   187d8:	6905      	ldr	r5, [r0, #16]
   187da:	f3c4 0316 	ubfx	r3, r4, #0, #23
   187de:	f3c4 51c2 	ubfx	r1, r4, #23, #3
   187e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   187e6:	408b      	lsls	r3, r1
   187e8:	6a01      	ldr	r1, [r0, #32]
   187ea:	fb03 f202 	mul.w	r2, r3, r2
   187ee:	fba3 1001 	umull	r1, r0, r3, r1
   187f2:	fbe3 0205 	umlal	r0, r2, r3, r5
   187f6:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
   187fa:	0f8d      	lsrs	r5, r1, #30
   187fc:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
   18800:	1a51      	subs	r1, r2, r1
   18802:	f000 fd0d 	bl	19220 <__aeabi_l2d>
   18806:	4b2a      	ldr	r3, [pc, #168]	; (188b0 <sinf+0x200>)
   18808:	ed9f 7b25 	vldr	d7, [pc, #148]	; 188a0 <sinf+0x1f0>
   1880c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
   18810:	ec41 0b16 	vmov	d6, r0, r1
   18814:	f014 0f02 	tst.w	r4, #2
   18818:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
   1881c:	bf08      	it	eq
   1881e:	4613      	moveq	r3, r2
   18820:	07e9      	lsls	r1, r5, #31
   18822:	ee26 7b07 	vmul.f64	d7, d6, d7
   18826:	ee27 6b07 	vmul.f64	d6, d7, d7
   1882a:	d41f      	bmi.n	1886c <sinf+0x1bc>
   1882c:	f004 0403 	and.w	r4, r4, #3
   18830:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   18834:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
   18838:	ed92 2b00 	vldr	d2, [r2]
   1883c:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
   18840:	ee27 7b02 	vmul.f64	d7, d7, d2
   18844:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
   18848:	eea6 5b04 	vfma.f64	d5, d6, d4
   1884c:	ee27 4b06 	vmul.f64	d4, d7, d6
   18850:	ee26 6b04 	vmul.f64	d6, d6, d4
   18854:	eea4 7b03 	vfma.f64	d7, d4, d3
   18858:	eea5 7b06 	vfma.f64	d7, d5, d6
   1885c:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
   18860:	e789      	b.n	18776 <sinf+0xc6>
   18862:	b003      	add	sp, #12
   18864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   18868:	f000 b940 	b.w	18aec <__math_invalidf>
   1886c:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   18870:	ee26 5b06 	vmul.f64	d5, d6, d6
   18874:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
   18878:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   1887c:	eea6 7b02 	vfma.f64	d7, d6, d2
   18880:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   18884:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   18888:	eea6 0b03 	vfma.f64	d0, d6, d3
   1888c:	ee26 6b05 	vmul.f64	d6, d6, d5
   18890:	eea5 0b04 	vfma.f64	d0, d5, d4
   18894:	eea7 0b06 	vfma.f64	d0, d7, d6
   18898:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1889c:	e76b      	b.n	18776 <sinf+0xc6>
   1889e:	bf00      	nop
   188a0:	54442d18 	.word	0x54442d18
   188a4:	3c1921fb 	.word	0x3c1921fb
   188a8:	20001328 	.word	0x20001328
   188ac:	200012c8 	.word	0x200012c8
   188b0:	20001398 	.word	0x20001398
   188b4:	00000000 	.word	0x00000000

000188b8 <cosf>:
   188b8:	b538      	push	{r3, r4, r5, lr}
   188ba:	ee10 4a10 	vmov	r4, s0
   188be:	f3c4 530a 	ubfx	r3, r4, #20, #11
   188c2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
   188c6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
   188ca:	d21e      	bcs.n	1890a <cosf+0x52>
   188cc:	ee27 7b07 	vmul.f64	d7, d7, d7
   188d0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
   188d4:	d36f      	bcc.n	189b6 <cosf+0xfe>
   188d6:	ee27 1b07 	vmul.f64	d1, d7, d7
   188da:	4b63      	ldr	r3, [pc, #396]	; (18a68 <cosf+0x1b0>)
   188dc:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   188e0:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
   188e4:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   188e8:	eea7 5b02 	vfma.f64	d5, d7, d2
   188ec:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   188f0:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   188f4:	eea7 0b03 	vfma.f64	d0, d7, d3
   188f8:	ee27 7b01 	vmul.f64	d7, d7, d1
   188fc:	eea1 0b04 	vfma.f64	d0, d1, d4
   18900:	eea5 0b07 	vfma.f64	d0, d5, d7
   18904:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   18908:	bd38      	pop	{r3, r4, r5, pc}
   1890a:	f240 422e 	movw	r2, #1070	; 0x42e
   1890e:	4293      	cmp	r3, r2
   18910:	d854      	bhi.n	189bc <cosf+0x104>
   18912:	4955      	ldr	r1, [pc, #340]	; (18a68 <cosf+0x1b0>)
   18914:	ed91 6b08 	vldr	d6, [r1, #32]
   18918:	ee27 6b06 	vmul.f64	d6, d7, d6
   1891c:	eefd 6bc6 	vcvt.s32.f64	s13, d6
   18920:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
   18924:	ee16 3a90 	vmov	r3, s13
   18928:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
   1892c:	161b      	asrs	r3, r3, #24
   1892e:	f013 0f02 	tst.w	r3, #2
   18932:	ee06 3a90 	vmov	s13, r3
   18936:	f101 0270 	add.w	r2, r1, #112	; 0x70
   1893a:	bf08      	it	eq
   1893c:	460a      	moveq	r2, r1
   1893e:	07d8      	lsls	r0, r3, #31
   18940:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   18944:	eea6 7b45 	vfms.f64	d7, d6, d5
   18948:	ee27 6b07 	vmul.f64	d6, d7, d7
   1894c:	d51a      	bpl.n	18984 <cosf+0xcc>
   1894e:	f003 0303 	and.w	r3, r3, #3
   18952:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   18956:	ed91 2b00 	vldr	d2, [r1]
   1895a:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
   1895e:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
   18962:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
   18966:	eea6 5b04 	vfma.f64	d5, d6, d4
   1896a:	ee27 7b02 	vmul.f64	d7, d7, d2
   1896e:	ee27 4b06 	vmul.f64	d4, d7, d6
   18972:	ee26 6b04 	vmul.f64	d6, d6, d4
   18976:	eea4 7b03 	vfma.f64	d7, d4, d3
   1897a:	eea5 7b06 	vfma.f64	d7, d5, d6
   1897e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
   18982:	bd38      	pop	{r3, r4, r5, pc}
   18984:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
   18988:	ed92 7b12 	vldr	d7, [r2, #72]	; 0x48
   1898c:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
   18990:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
   18994:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
   18998:	ee26 5b06 	vmul.f64	d5, d6, d6
   1899c:	eea6 7b02 	vfma.f64	d7, d6, d2
   189a0:	eea6 0b03 	vfma.f64	d0, d6, d3
   189a4:	ee26 6b05 	vmul.f64	d6, d6, d5
   189a8:	eea5 0b04 	vfma.f64	d0, d5, d4
   189ac:	eea7 0b06 	vfma.f64	d0, d7, d6
   189b0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   189b4:	bd38      	pop	{r3, r4, r5, pc}
   189b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   189ba:	bd38      	pop	{r3, r4, r5, pc}
   189bc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
   189c0:	d23d      	bcs.n	18a3e <cosf+0x186>
   189c2:	4b2a      	ldr	r3, [pc, #168]	; (18a6c <cosf+0x1b4>)
   189c4:	f3c4 6283 	ubfx	r2, r4, #26, #4
   189c8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   189cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   189d0:	6905      	ldr	r5, [r0, #16]
   189d2:	f3c4 0316 	ubfx	r3, r4, #0, #23
   189d6:	f3c4 51c2 	ubfx	r1, r4, #23, #3
   189da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   189de:	408b      	lsls	r3, r1
   189e0:	6a01      	ldr	r1, [r0, #32]
   189e2:	fb03 f202 	mul.w	r2, r3, r2
   189e6:	fba3 1001 	umull	r1, r0, r3, r1
   189ea:	fbe3 0205 	umlal	r0, r2, r3, r5
   189ee:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
   189f2:	0f8d      	lsrs	r5, r1, #30
   189f4:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
   189f8:	1a51      	subs	r1, r2, r1
   189fa:	f000 fc11 	bl	19220 <__aeabi_l2d>
   189fe:	4b1c      	ldr	r3, [pc, #112]	; (18a70 <cosf+0x1b8>)
   18a00:	ed9f 7b17 	vldr	d7, [pc, #92]	; 18a60 <cosf+0x1a8>
   18a04:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
   18a08:	ec41 0b16 	vmov	d6, r0, r1
   18a0c:	f014 0f02 	tst.w	r4, #2
   18a10:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
   18a14:	bf08      	it	eq
   18a16:	4613      	moveq	r3, r2
   18a18:	07e9      	lsls	r1, r5, #31
   18a1a:	ee26 7b07 	vmul.f64	d7, d6, d7
   18a1e:	ee27 6b07 	vmul.f64	d6, d7, d7
   18a22:	d510      	bpl.n	18a46 <cosf+0x18e>
   18a24:	f004 0403 	and.w	r4, r4, #3
   18a28:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   18a2c:	ed92 2b00 	vldr	d2, [r2]
   18a30:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
   18a34:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
   18a38:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
   18a3c:	e793      	b.n	18966 <cosf+0xae>
   18a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18a42:	f000 b853 	b.w	18aec <__math_invalidf>
   18a46:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   18a4a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
   18a4e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   18a52:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   18a56:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   18a5a:	e79d      	b.n	18998 <cosf+0xe0>
   18a5c:	f3af 8000 	nop.w
   18a60:	54442d18 	.word	0x54442d18
   18a64:	3c1921fb 	.word	0x3c1921fb
   18a68:	20001328 	.word	0x20001328
   18a6c:	200012c8 	.word	0x200012c8
   18a70:	20001398 	.word	0x20001398
   18a74:	b510      	push	{r4, lr}
   18a76:	b082      	sub	sp, #8
   18a78:	ed8d 0a01 	vstr	s0, [sp, #4]
   18a7c:	4604      	mov	r4, r0
   18a7e:	f004 f91d 	bl	1ccbc <__errno>
   18a82:	ed9d 0a01 	vldr	s0, [sp, #4]
   18a86:	6004      	str	r4, [r0, #0]
   18a88:	b002      	add	sp, #8
   18a8a:	bd10      	pop	{r4, pc}
   18a8c:	b128      	cbz	r0, 18a9a <cosf+0x1e2>
   18a8e:	eef1 7a40 	vneg.f32	s15, s0
   18a92:	ee27 0a80 	vmul.f32	s0, s15, s0
   18a96:	2022      	movs	r0, #34	; 0x22
   18a98:	e7ec      	b.n	18a74 <cosf+0x1bc>
   18a9a:	eef0 7a40 	vmov.f32	s15, s0
   18a9e:	ee27 0a80 	vmul.f32	s0, s15, s0
   18aa2:	2022      	movs	r0, #34	; 0x22
   18aa4:	e7e6      	b.n	18a74 <cosf+0x1bc>
   18aa6:	bf00      	nop

00018aa8 <__math_uflowf>:
   18aa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18ab0 <__math_uflowf+0x8>
   18aac:	e7ee      	b.n	18a8c <cosf+0x1d4>
   18aae:	bf00      	nop
   18ab0:	10000000 	.word	0x10000000

00018ab4 <__math_may_uflowf>:
   18ab4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18abc <__math_may_uflowf+0x8>
   18ab8:	e7e8      	b.n	18a8c <cosf+0x1d4>
   18aba:	bf00      	nop
   18abc:	1a200000 	.word	0x1a200000

00018ac0 <__math_oflowf>:
   18ac0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18ac8 <__math_oflowf+0x8>
   18ac4:	e7e2      	b.n	18a8c <cosf+0x1d4>
   18ac6:	bf00      	nop
   18ac8:	70000000 	.word	0x70000000

00018acc <__math_divzerof>:
   18acc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 18ae8 <__math_divzerof+0x1c>
   18ad0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   18ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   18ad8:	2800      	cmp	r0, #0
   18ada:	f04f 0022 	mov.w	r0, #34	; 0x22
   18ade:	fe47 7a27 	vseleq.f32	s15, s14, s15
   18ae2:	ee87 0a80 	vdiv.f32	s0, s15, s0
   18ae6:	e7c5      	b.n	18a74 <cosf+0x1bc>
   18ae8:	00000000 	.word	0x00000000

00018aec <__math_invalidf>:
   18aec:	ee70 7a40 	vsub.f32	s15, s0, s0
   18af0:	eeb4 0a40 	vcmp.f32	s0, s0
   18af4:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   18af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18afc:	eeb0 0a47 	vmov.f32	s0, s14
   18b00:	d601      	bvs.n	18b06 <__math_invalidf+0x1a>
   18b02:	2021      	movs	r0, #33	; 0x21
   18b04:	e7b6      	b.n	18a74 <cosf+0x1bc>
   18b06:	4770      	bx	lr

00018b08 <__ieee754_sqrtf>:
   18b08:	eeb1 0ac0 	vsqrt.f32	s0, s0
   18b0c:	4770      	bx	lr
   18b0e:	bf00      	nop

00018b10 <__ieee754_atan2f>:
   18b10:	b510      	push	{r4, lr}
   18b12:	b082      	sub	sp, #8
   18b14:	edcd 0a01 	vstr	s1, [sp, #4]
   18b18:	9b01      	ldr	r3, [sp, #4]
   18b1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   18b1e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   18b22:	eef0 7a40 	vmov.f32	s15, s0
   18b26:	dc30      	bgt.n	18b8a <__ieee754_atan2f+0x7a>
   18b28:	ee10 0a10 	vmov	r0, s0
   18b2c:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   18b30:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   18b34:	dc29      	bgt.n	18b8a <__ieee754_atan2f+0x7a>
   18b36:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   18b3a:	d040      	beq.n	18bbe <__ieee754_atan2f+0xae>
   18b3c:	179c      	asrs	r4, r3, #30
   18b3e:	f004 0402 	and.w	r4, r4, #2
   18b42:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   18b46:	b331      	cbz	r1, 18b96 <__ieee754_atan2f+0x86>
   18b48:	b372      	cbz	r2, 18ba8 <__ieee754_atan2f+0x98>
   18b4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   18b4e:	d03e      	beq.n	18bce <__ieee754_atan2f+0xbe>
   18b50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   18b54:	d028      	beq.n	18ba8 <__ieee754_atan2f+0x98>
   18b56:	1a89      	subs	r1, r1, r2
   18b58:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
   18b5c:	ea4f 52e1 	mov.w	r2, r1, asr #23
   18b60:	da32      	bge.n	18bc8 <__ieee754_atan2f+0xb8>
   18b62:	2b00      	cmp	r3, #0
   18b64:	da40      	bge.n	18be8 <__ieee754_atan2f+0xd8>
   18b66:	323c      	adds	r2, #60	; 0x3c
   18b68:	da3e      	bge.n	18be8 <__ieee754_atan2f+0xd8>
   18b6a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 18c38 <__ieee754_atan2f+0x128>
   18b6e:	2c01      	cmp	r4, #1
   18b70:	d04c      	beq.n	18c0c <__ieee754_atan2f+0xfc>
   18b72:	2c02      	cmp	r4, #2
   18b74:	d041      	beq.n	18bfa <__ieee754_atan2f+0xea>
   18b76:	b164      	cbz	r4, 18b92 <__ieee754_atan2f+0x82>
   18b78:	ed9f 7a30 	vldr	s14, [pc, #192]	; 18c3c <__ieee754_atan2f+0x12c>
   18b7c:	eddf 7a30 	vldr	s15, [pc, #192]	; 18c40 <__ieee754_atan2f+0x130>
   18b80:	ee30 0a07 	vadd.f32	s0, s0, s14
   18b84:	ee30 0a67 	vsub.f32	s0, s0, s15
   18b88:	e003      	b.n	18b92 <__ieee754_atan2f+0x82>
   18b8a:	ed9d 7a01 	vldr	s14, [sp, #4]
   18b8e:	ee37 0a27 	vadd.f32	s0, s14, s15
   18b92:	b002      	add	sp, #8
   18b94:	bd10      	pop	{r4, pc}
   18b96:	2c02      	cmp	r4, #2
   18b98:	d00e      	beq.n	18bb8 <__ieee754_atan2f+0xa8>
   18b9a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 18c44 <__ieee754_atan2f+0x134>
   18b9e:	2c03      	cmp	r4, #3
   18ba0:	fe07 0a00 	vseleq.f32	s0, s14, s0
   18ba4:	b002      	add	sp, #8
   18ba6:	bd10      	pop	{r4, pc}
   18ba8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 18c48 <__ieee754_atan2f+0x138>
   18bac:	eddf 7a27 	vldr	s15, [pc, #156]	; 18c4c <__ieee754_atan2f+0x13c>
   18bb0:	2800      	cmp	r0, #0
   18bb2:	fe20 0a27 	vselge.f32	s0, s0, s15
   18bb6:	e7ec      	b.n	18b92 <__ieee754_atan2f+0x82>
   18bb8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 18c40 <__ieee754_atan2f+0x130>
   18bbc:	e7e9      	b.n	18b92 <__ieee754_atan2f+0x82>
   18bbe:	b002      	add	sp, #8
   18bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18bc4:	f000 b848 	b.w	18c58 <atanf>
   18bc8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 18c48 <__ieee754_atan2f+0x138>
   18bcc:	e7cf      	b.n	18b6e <__ieee754_atan2f+0x5e>
   18bce:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   18bd2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   18bd6:	d020      	beq.n	18c1a <__ieee754_atan2f+0x10a>
   18bd8:	2c02      	cmp	r4, #2
   18bda:	d826      	bhi.n	18c2a <__ieee754_atan2f+0x11a>
   18bdc:	4b1c      	ldr	r3, [pc, #112]	; (18c50 <__ieee754_atan2f+0x140>)
   18bde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   18be2:	ed93 0a03 	vldr	s0, [r3, #12]
   18be6:	e7d4      	b.n	18b92 <__ieee754_atan2f+0x82>
   18be8:	ed9d 7a01 	vldr	s14, [sp, #4]
   18bec:	ee87 0a87 	vdiv.f32	s0, s15, s14
   18bf0:	f000 f904 	bl	18dfc <fabsf>
   18bf4:	f000 f830 	bl	18c58 <atanf>
   18bf8:	e7b9      	b.n	18b6e <__ieee754_atan2f+0x5e>
   18bfa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 18c3c <__ieee754_atan2f+0x12c>
   18bfe:	eddf 7a10 	vldr	s15, [pc, #64]	; 18c40 <__ieee754_atan2f+0x130>
   18c02:	ee30 0a07 	vadd.f32	s0, s0, s14
   18c06:	ee37 0ac0 	vsub.f32	s0, s15, s0
   18c0a:	e7c2      	b.n	18b92 <__ieee754_atan2f+0x82>
   18c0c:	ee10 3a10 	vmov	r3, s0
   18c10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   18c14:	ee00 3a10 	vmov	s0, r3
   18c18:	e7bb      	b.n	18b92 <__ieee754_atan2f+0x82>
   18c1a:	2c02      	cmp	r4, #2
   18c1c:	d808      	bhi.n	18c30 <__ieee754_atan2f+0x120>
   18c1e:	4b0c      	ldr	r3, [pc, #48]	; (18c50 <__ieee754_atan2f+0x140>)
   18c20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   18c24:	ed93 0a00 	vldr	s0, [r3]
   18c28:	e7b3      	b.n	18b92 <__ieee754_atan2f+0x82>
   18c2a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 18c38 <__ieee754_atan2f+0x128>
   18c2e:	e7b0      	b.n	18b92 <__ieee754_atan2f+0x82>
   18c30:	ed9f 0a08 	vldr	s0, [pc, #32]	; 18c54 <__ieee754_atan2f+0x144>
   18c34:	e7ad      	b.n	18b92 <__ieee754_atan2f+0x82>
   18c36:	bf00      	nop
   18c38:	00000000 	.word	0x00000000
   18c3c:	33bbbd2e 	.word	0x33bbbd2e
   18c40:	40490fdb 	.word	0x40490fdb
   18c44:	c0490fdb 	.word	0xc0490fdb
   18c48:	3fc90fdb 	.word	0x3fc90fdb
   18c4c:	bfc90fdb 	.word	0xbfc90fdb
   18c50:	20002198 	.word	0x20002198
   18c54:	3f490fdb 	.word	0x3f490fdb

00018c58 <atanf>:
   18c58:	b538      	push	{r3, r4, r5, lr}
   18c5a:	ee10 5a10 	vmov	r5, s0
   18c5e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   18c62:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   18c66:	eef0 7a40 	vmov.f32	s15, s0
   18c6a:	db0a      	blt.n	18c82 <atanf+0x2a>
   18c6c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   18c70:	dc55      	bgt.n	18d1e <atanf+0xc6>
   18c72:	eddf 7a50 	vldr	s15, [pc, #320]	; 18db4 <atanf+0x15c>
   18c76:	ed9f 7a50 	vldr	s14, [pc, #320]	; 18db8 <atanf+0x160>
   18c7a:	2d00      	cmp	r5, #0
   18c7c:	fe37 0a87 	vselgt.f32	s0, s15, s14
   18c80:	bd38      	pop	{r3, r4, r5, pc}
   18c82:	4b4e      	ldr	r3, [pc, #312]	; (18dbc <atanf+0x164>)
   18c84:	429c      	cmp	r4, r3
   18c86:	dc59      	bgt.n	18d3c <atanf+0xe4>
   18c88:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   18c8c:	db4a      	blt.n	18d24 <atanf+0xcc>
   18c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18c92:	ee27 6aa7 	vmul.f32	s12, s15, s15
   18c96:	eddf 6a4a 	vldr	s13, [pc, #296]	; 18dc0 <atanf+0x168>
   18c9a:	eddf 5a4a 	vldr	s11, [pc, #296]	; 18dc4 <atanf+0x16c>
   18c9e:	eddf 4a4a 	vldr	s9, [pc, #296]	; 18dc8 <atanf+0x170>
   18ca2:	ed9f 5a4a 	vldr	s10, [pc, #296]	; 18dcc <atanf+0x174>
   18ca6:	ed9f 4a4a 	vldr	s8, [pc, #296]	; 18dd0 <atanf+0x178>
   18caa:	ee26 7a06 	vmul.f32	s14, s12, s12
   18cae:	1c53      	adds	r3, r2, #1
   18cb0:	eee7 5a26 	vfma.f32	s11, s14, s13
   18cb4:	eddf 6a47 	vldr	s13, [pc, #284]	; 18dd4 <atanf+0x17c>
   18cb8:	eea5 5a87 	vfma.f32	s10, s11, s14
   18cbc:	eee7 6a24 	vfma.f32	s13, s14, s9
   18cc0:	eddf 5a45 	vldr	s11, [pc, #276]	; 18dd8 <atanf+0x180>
   18cc4:	eddf 4a45 	vldr	s9, [pc, #276]	; 18ddc <atanf+0x184>
   18cc8:	eee6 5a87 	vfma.f32	s11, s13, s14
   18ccc:	eea5 4a07 	vfma.f32	s8, s10, s14
   18cd0:	ed9f 5a43 	vldr	s10, [pc, #268]	; 18de0 <atanf+0x188>
   18cd4:	eddf 6a43 	vldr	s13, [pc, #268]	; 18de4 <atanf+0x18c>
   18cd8:	eea5 5a87 	vfma.f32	s10, s11, s14
   18cdc:	eee4 4a07 	vfma.f32	s9, s8, s14
   18ce0:	eddf 5a41 	vldr	s11, [pc, #260]	; 18de8 <atanf+0x190>
   18ce4:	eee4 6a87 	vfma.f32	s13, s9, s14
   18ce8:	eee5 5a07 	vfma.f32	s11, s10, s14
   18cec:	ee66 6a86 	vmul.f32	s13, s13, s12
   18cf0:	ee65 5a87 	vmul.f32	s11, s11, s14
   18cf4:	d037      	beq.n	18d66 <atanf+0x10e>
   18cf6:	4b3d      	ldr	r3, [pc, #244]	; (18dec <atanf+0x194>)
   18cf8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18cfc:	ee76 6aa5 	vadd.f32	s13, s13, s11
   18d00:	ed93 7a00 	vldr	s14, [r3]
   18d04:	ed93 6a04 	vldr	s12, [r3, #16]
   18d08:	ee96 7aa7 	vfnms.f32	s14, s13, s15
   18d0c:	2d00      	cmp	r5, #0
   18d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
   18d12:	ee36 0a67 	vsub.f32	s0, s12, s15
   18d16:	dab3      	bge.n	18c80 <atanf+0x28>
   18d18:	eeb1 0a40 	vneg.f32	s0, s0
   18d1c:	bd38      	pop	{r3, r4, r5, pc}
   18d1e:	ee30 0a00 	vadd.f32	s0, s0, s0
   18d22:	bd38      	pop	{r3, r4, r5, pc}
   18d24:	ed9f 7a32 	vldr	s14, [pc, #200]	; 18df0 <atanf+0x198>
   18d28:	ee30 7a07 	vadd.f32	s14, s0, s14
   18d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   18d30:	eeb4 7ae6 	vcmpe.f32	s14, s13
   18d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18d38:	dda9      	ble.n	18c8e <atanf+0x36>
   18d3a:	bd38      	pop	{r3, r4, r5, pc}
   18d3c:	f000 f85e 	bl	18dfc <fabsf>
   18d40:	4b2c      	ldr	r3, [pc, #176]	; (18df4 <atanf+0x19c>)
   18d42:	429c      	cmp	r4, r3
   18d44:	dc16      	bgt.n	18d74 <atanf+0x11c>
   18d46:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   18d4a:	429c      	cmp	r4, r3
   18d4c:	dc27      	bgt.n	18d9e <atanf+0x146>
   18d4e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   18d52:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   18d56:	eea0 7a27 	vfma.f32	s14, s0, s15
   18d5a:	2200      	movs	r2, #0
   18d5c:	ee30 0a27 	vadd.f32	s0, s0, s15
   18d60:	eec7 7a00 	vdiv.f32	s15, s14, s0
   18d64:	e795      	b.n	18c92 <atanf+0x3a>
   18d66:	ee76 6aa5 	vadd.f32	s13, s13, s11
   18d6a:	eee6 7ae7 	vfms.f32	s15, s13, s15
   18d6e:	eeb0 0a67 	vmov.f32	s0, s15
   18d72:	bd38      	pop	{r3, r4, r5, pc}
   18d74:	4b20      	ldr	r3, [pc, #128]	; (18df8 <atanf+0x1a0>)
   18d76:	429c      	cmp	r4, r3
   18d78:	dc0b      	bgt.n	18d92 <atanf+0x13a>
   18d7a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   18d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   18d82:	eea0 7a27 	vfma.f32	s14, s0, s15
   18d86:	2202      	movs	r2, #2
   18d88:	ee30 0a67 	vsub.f32	s0, s0, s15
   18d8c:	eec0 7a07 	vdiv.f32	s15, s0, s14
   18d90:	e77f      	b.n	18c92 <atanf+0x3a>
   18d92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   18d96:	eec7 7a00 	vdiv.f32	s15, s14, s0
   18d9a:	2203      	movs	r2, #3
   18d9c:	e779      	b.n	18c92 <atanf+0x3a>
   18d9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   18da2:	ee30 7a67 	vsub.f32	s14, s0, s15
   18da6:	ee30 0a27 	vadd.f32	s0, s0, s15
   18daa:	2201      	movs	r2, #1
   18dac:	eec7 7a00 	vdiv.f32	s15, s14, s0
   18db0:	e76f      	b.n	18c92 <atanf+0x3a>
   18db2:	bf00      	nop
   18db4:	3fc90fdb 	.word	0x3fc90fdb
   18db8:	bfc90fdb 	.word	0xbfc90fdb
   18dbc:	3edfffff 	.word	0x3edfffff
   18dc0:	3c8569d7 	.word	0x3c8569d7
   18dc4:	3d4bda59 	.word	0x3d4bda59
   18dc8:	bd15a221 	.word	0xbd15a221
   18dcc:	3d886b35 	.word	0x3d886b35
   18dd0:	3dba2e6e 	.word	0x3dba2e6e
   18dd4:	bd6ef16b 	.word	0xbd6ef16b
   18dd8:	bd9d8795 	.word	0xbd9d8795
   18ddc:	3e124925 	.word	0x3e124925
   18de0:	bde38e38 	.word	0xbde38e38
   18de4:	3eaaaaab 	.word	0x3eaaaaab
   18de8:	be4ccccd 	.word	0xbe4ccccd
   18dec:	200021b0 	.word	0x200021b0
   18df0:	7149f2ca 	.word	0x7149f2ca
   18df4:	3f97ffff 	.word	0x3f97ffff
   18df8:	401bffff 	.word	0x401bffff

00018dfc <fabsf>:
   18dfc:	ee10 3a10 	vmov	r3, s0
   18e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   18e04:	ee00 3a10 	vmov	s0, r3
   18e08:	4770      	bx	lr
   18e0a:	bf00      	nop
   18e0c:	0000      	movs	r0, r0
   18e0e:	0000      	movs	r0, r0
   18e10:	b510      	push	{r4, lr}
   18e12:	b082      	sub	sp, #8
   18e14:	ed8d 0b00 	vstr	d0, [sp]
   18e18:	4604      	mov	r4, r0
   18e1a:	f003 ff4f 	bl	1ccbc <__errno>
   18e1e:	ed9d 0b00 	vldr	d0, [sp]
   18e22:	6004      	str	r4, [r0, #0]
   18e24:	b002      	add	sp, #8
   18e26:	bd10      	pop	{r4, pc}
   18e28:	b082      	sub	sp, #8
   18e2a:	b150      	cbz	r0, 18e42 <fabsf+0x46>
   18e2c:	eeb1 7b40 	vneg.f64	d7, d0
   18e30:	ed8d 7b00 	vstr	d7, [sp]
   18e34:	ed9d 7b00 	vldr	d7, [sp]
   18e38:	2022      	movs	r0, #34	; 0x22
   18e3a:	ee20 0b07 	vmul.f64	d0, d0, d7
   18e3e:	b002      	add	sp, #8
   18e40:	e7e6      	b.n	18e10 <fabsf+0x14>
   18e42:	eeb0 7b40 	vmov.f64	d7, d0
   18e46:	e7f3      	b.n	18e30 <fabsf+0x34>

00018e48 <__math_uflow>:
   18e48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 18e50 <__math_uflow+0x8>
   18e4c:	e7ec      	b.n	18e28 <fabsf+0x2c>
   18e4e:	bf00      	nop
   18e50:	00000000 	.word	0x00000000
   18e54:	10000000 	.word	0x10000000

00018e58 <__math_may_uflow>:
   18e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 18e60 <__math_may_uflow+0x8>
   18e5c:	e7e4      	b.n	18e28 <fabsf+0x2c>
   18e5e:	bf00      	nop
   18e60:	00000000 	.word	0x00000000
   18e64:	1e580000 	.word	0x1e580000

00018e68 <__math_oflow>:
   18e68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 18e70 <__math_oflow+0x8>
   18e6c:	e7dc      	b.n	18e28 <fabsf+0x2c>
   18e6e:	bf00      	nop
   18e70:	00000000 	.word	0x00000000
   18e74:	70000000 	.word	0x70000000

00018e78 <__math_divzero>:
   18e78:	b082      	sub	sp, #8
   18e7a:	2800      	cmp	r0, #0
   18e7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   18e80:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
   18e84:	fe06 7b07 	vseleq.f64	d7, d6, d7
   18e88:	ed8d 7b00 	vstr	d7, [sp]
   18e8c:	ed9d 0b00 	vldr	d0, [sp]
   18e90:	ed9f 7b03 	vldr	d7, [pc, #12]	; 18ea0 <__math_divzero+0x28>
   18e94:	2022      	movs	r0, #34	; 0x22
   18e96:	ee80 0b07 	vdiv.f64	d0, d0, d7
   18e9a:	b002      	add	sp, #8
   18e9c:	e7b8      	b.n	18e10 <fabsf+0x14>
   18e9e:	bf00      	nop
	...

00018ea8 <__math_invalid>:
   18ea8:	eeb4 0b40 	vcmp.f64	d0, d0
   18eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18eb0:	ee30 7b40 	vsub.f64	d7, d0, d0
   18eb4:	ee87 6b07 	vdiv.f64	d6, d7, d7
   18eb8:	eeb0 0b46 	vmov.f64	d0, d6
   18ebc:	d601      	bvs.n	18ec2 <__math_invalid+0x1a>
   18ebe:	2021      	movs	r0, #33	; 0x21
   18ec0:	e7a6      	b.n	18e10 <fabsf+0x14>
   18ec2:	4770      	bx	lr

00018ec4 <__math_check_uflow>:
   18ec4:	eeb5 0b40 	vcmp.f64	d0, #0.0
   18ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18ecc:	d000      	beq.n	18ed0 <__math_check_uflow+0xc>
   18ece:	4770      	bx	lr
   18ed0:	2022      	movs	r0, #34	; 0x22
   18ed2:	e79d      	b.n	18e10 <fabsf+0x14>

00018ed4 <__math_check_oflow>:
   18ed4:	ed9f 6b06 	vldr	d6, [pc, #24]	; 18ef0 <__math_check_oflow+0x1c>
   18ed8:	eeb0 7bc0 	vabs.f64	d7, d0
   18edc:	eeb4 7b46 	vcmp.f64	d7, d6
   18ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18ee4:	dc00      	bgt.n	18ee8 <__math_check_oflow+0x14>
   18ee6:	4770      	bx	lr
   18ee8:	2022      	movs	r0, #34	; 0x22
   18eea:	e791      	b.n	18e10 <fabsf+0x14>
   18eec:	f3af 8000 	nop.w
   18ef0:	ffffffff 	.word	0xffffffff
   18ef4:	7fefffff 	.word	0x7fefffff

00018ef8 <__aeabi_atexit>:
   18ef8:	4603      	mov	r3, r0
   18efa:	4608      	mov	r0, r1
   18efc:	4619      	mov	r1, r3
   18efe:	f002 b9e5 	b.w	1b2cc <__cxa_atexit>
   18f02:	bf00      	nop

00018f04 <__aeabi_drsub>:
   18f04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18f08:	e002      	b.n	18f10 <__adddf3>
   18f0a:	bf00      	nop

00018f0c <__aeabi_dsub>:
   18f0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00018f10 <__adddf3>:
   18f10:	b530      	push	{r4, r5, lr}
   18f12:	ea4f 0441 	mov.w	r4, r1, lsl #1
   18f16:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18f1a:	ea94 0f05 	teq	r4, r5
   18f1e:	bf08      	it	eq
   18f20:	ea90 0f02 	teqeq	r0, r2
   18f24:	bf1f      	itttt	ne
   18f26:	ea54 0c00 	orrsne.w	ip, r4, r0
   18f2a:	ea55 0c02 	orrsne.w	ip, r5, r2
   18f2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   18f32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18f36:	f000 80e2 	beq.w	190fe <__adddf3+0x1ee>
   18f3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   18f3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   18f42:	bfb8      	it	lt
   18f44:	426d      	neglt	r5, r5
   18f46:	dd0c      	ble.n	18f62 <__adddf3+0x52>
   18f48:	442c      	add	r4, r5
   18f4a:	ea80 0202 	eor.w	r2, r0, r2
   18f4e:	ea81 0303 	eor.w	r3, r1, r3
   18f52:	ea82 0000 	eor.w	r0, r2, r0
   18f56:	ea83 0101 	eor.w	r1, r3, r1
   18f5a:	ea80 0202 	eor.w	r2, r0, r2
   18f5e:	ea81 0303 	eor.w	r3, r1, r3
   18f62:	2d36      	cmp	r5, #54	; 0x36
   18f64:	bf88      	it	hi
   18f66:	bd30      	pophi	{r4, r5, pc}
   18f68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18f6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18f70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18f74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18f78:	d002      	beq.n	18f80 <__adddf3+0x70>
   18f7a:	4240      	negs	r0, r0
   18f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18f80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18f84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18f88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18f8c:	d002      	beq.n	18f94 <__adddf3+0x84>
   18f8e:	4252      	negs	r2, r2
   18f90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18f94:	ea94 0f05 	teq	r4, r5
   18f98:	f000 80a7 	beq.w	190ea <__adddf3+0x1da>
   18f9c:	f1a4 0401 	sub.w	r4, r4, #1
   18fa0:	f1d5 0e20 	rsbs	lr, r5, #32
   18fa4:	db0d      	blt.n	18fc2 <__adddf3+0xb2>
   18fa6:	fa02 fc0e 	lsl.w	ip, r2, lr
   18faa:	fa22 f205 	lsr.w	r2, r2, r5
   18fae:	1880      	adds	r0, r0, r2
   18fb0:	f141 0100 	adc.w	r1, r1, #0
   18fb4:	fa03 f20e 	lsl.w	r2, r3, lr
   18fb8:	1880      	adds	r0, r0, r2
   18fba:	fa43 f305 	asr.w	r3, r3, r5
   18fbe:	4159      	adcs	r1, r3
   18fc0:	e00e      	b.n	18fe0 <__adddf3+0xd0>
   18fc2:	f1a5 0520 	sub.w	r5, r5, #32
   18fc6:	f10e 0e20 	add.w	lr, lr, #32
   18fca:	2a01      	cmp	r2, #1
   18fcc:	fa03 fc0e 	lsl.w	ip, r3, lr
   18fd0:	bf28      	it	cs
   18fd2:	f04c 0c02 	orrcs.w	ip, ip, #2
   18fd6:	fa43 f305 	asr.w	r3, r3, r5
   18fda:	18c0      	adds	r0, r0, r3
   18fdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   18fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18fe4:	d507      	bpl.n	18ff6 <__adddf3+0xe6>
   18fe6:	f04f 0e00 	mov.w	lr, #0
   18fea:	f1dc 0c00 	rsbs	ip, ip, #0
   18fee:	eb7e 0000 	sbcs.w	r0, lr, r0
   18ff2:	eb6e 0101 	sbc.w	r1, lr, r1
   18ff6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18ffa:	d31b      	bcc.n	19034 <__adddf3+0x124>
   18ffc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   19000:	d30c      	bcc.n	1901c <__adddf3+0x10c>
   19002:	0849      	lsrs	r1, r1, #1
   19004:	ea5f 0030 	movs.w	r0, r0, rrx
   19008:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1900c:	f104 0401 	add.w	r4, r4, #1
   19010:	ea4f 5244 	mov.w	r2, r4, lsl #21
   19014:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   19018:	f080 809a 	bcs.w	19150 <__adddf3+0x240>
   1901c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19020:	bf08      	it	eq
   19022:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   19026:	f150 0000 	adcs.w	r0, r0, #0
   1902a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1902e:	ea41 0105 	orr.w	r1, r1, r5
   19032:	bd30      	pop	{r4, r5, pc}
   19034:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   19038:	4140      	adcs	r0, r0
   1903a:	eb41 0101 	adc.w	r1, r1, r1
   1903e:	3c01      	subs	r4, #1
   19040:	bf28      	it	cs
   19042:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   19046:	d2e9      	bcs.n	1901c <__adddf3+0x10c>
   19048:	f091 0f00 	teq	r1, #0
   1904c:	bf04      	itt	eq
   1904e:	4601      	moveq	r1, r0
   19050:	2000      	moveq	r0, #0
   19052:	fab1 f381 	clz	r3, r1
   19056:	bf08      	it	eq
   19058:	3320      	addeq	r3, #32
   1905a:	f1a3 030b 	sub.w	r3, r3, #11
   1905e:	f1b3 0220 	subs.w	r2, r3, #32
   19062:	da0c      	bge.n	1907e <__adddf3+0x16e>
   19064:	320c      	adds	r2, #12
   19066:	dd08      	ble.n	1907a <__adddf3+0x16a>
   19068:	f102 0c14 	add.w	ip, r2, #20
   1906c:	f1c2 020c 	rsb	r2, r2, #12
   19070:	fa01 f00c 	lsl.w	r0, r1, ip
   19074:	fa21 f102 	lsr.w	r1, r1, r2
   19078:	e00c      	b.n	19094 <__adddf3+0x184>
   1907a:	f102 0214 	add.w	r2, r2, #20
   1907e:	bfd8      	it	le
   19080:	f1c2 0c20 	rsble	ip, r2, #32
   19084:	fa01 f102 	lsl.w	r1, r1, r2
   19088:	fa20 fc0c 	lsr.w	ip, r0, ip
   1908c:	bfdc      	itt	le
   1908e:	ea41 010c 	orrle.w	r1, r1, ip
   19092:	4090      	lslle	r0, r2
   19094:	1ae4      	subs	r4, r4, r3
   19096:	bfa2      	ittt	ge
   19098:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1909c:	4329      	orrge	r1, r5
   1909e:	bd30      	popge	{r4, r5, pc}
   190a0:	ea6f 0404 	mvn.w	r4, r4
   190a4:	3c1f      	subs	r4, #31
   190a6:	da1c      	bge.n	190e2 <__adddf3+0x1d2>
   190a8:	340c      	adds	r4, #12
   190aa:	dc0e      	bgt.n	190ca <__adddf3+0x1ba>
   190ac:	f104 0414 	add.w	r4, r4, #20
   190b0:	f1c4 0220 	rsb	r2, r4, #32
   190b4:	fa20 f004 	lsr.w	r0, r0, r4
   190b8:	fa01 f302 	lsl.w	r3, r1, r2
   190bc:	ea40 0003 	orr.w	r0, r0, r3
   190c0:	fa21 f304 	lsr.w	r3, r1, r4
   190c4:	ea45 0103 	orr.w	r1, r5, r3
   190c8:	bd30      	pop	{r4, r5, pc}
   190ca:	f1c4 040c 	rsb	r4, r4, #12
   190ce:	f1c4 0220 	rsb	r2, r4, #32
   190d2:	fa20 f002 	lsr.w	r0, r0, r2
   190d6:	fa01 f304 	lsl.w	r3, r1, r4
   190da:	ea40 0003 	orr.w	r0, r0, r3
   190de:	4629      	mov	r1, r5
   190e0:	bd30      	pop	{r4, r5, pc}
   190e2:	fa21 f004 	lsr.w	r0, r1, r4
   190e6:	4629      	mov	r1, r5
   190e8:	bd30      	pop	{r4, r5, pc}
   190ea:	f094 0f00 	teq	r4, #0
   190ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   190f2:	bf06      	itte	eq
   190f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   190f8:	3401      	addeq	r4, #1
   190fa:	3d01      	subne	r5, #1
   190fc:	e74e      	b.n	18f9c <__adddf3+0x8c>
   190fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19102:	bf18      	it	ne
   19104:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19108:	d029      	beq.n	1915e <__adddf3+0x24e>
   1910a:	ea94 0f05 	teq	r4, r5
   1910e:	bf08      	it	eq
   19110:	ea90 0f02 	teqeq	r0, r2
   19114:	d005      	beq.n	19122 <__adddf3+0x212>
   19116:	ea54 0c00 	orrs.w	ip, r4, r0
   1911a:	bf04      	itt	eq
   1911c:	4619      	moveq	r1, r3
   1911e:	4610      	moveq	r0, r2
   19120:	bd30      	pop	{r4, r5, pc}
   19122:	ea91 0f03 	teq	r1, r3
   19126:	bf1e      	ittt	ne
   19128:	2100      	movne	r1, #0
   1912a:	2000      	movne	r0, #0
   1912c:	bd30      	popne	{r4, r5, pc}
   1912e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   19132:	d105      	bne.n	19140 <__adddf3+0x230>
   19134:	0040      	lsls	r0, r0, #1
   19136:	4149      	adcs	r1, r1
   19138:	bf28      	it	cs
   1913a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1913e:	bd30      	pop	{r4, r5, pc}
   19140:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   19144:	bf3c      	itt	cc
   19146:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1914a:	bd30      	popcc	{r4, r5, pc}
   1914c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19150:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   19154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19158:	f04f 0000 	mov.w	r0, #0
   1915c:	bd30      	pop	{r4, r5, pc}
   1915e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19162:	bf1a      	itte	ne
   19164:	4619      	movne	r1, r3
   19166:	4610      	movne	r0, r2
   19168:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1916c:	bf1c      	itt	ne
   1916e:	460b      	movne	r3, r1
   19170:	4602      	movne	r2, r0
   19172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   19176:	bf06      	itte	eq
   19178:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1917c:	ea91 0f03 	teqeq	r1, r3
   19180:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   19184:	bd30      	pop	{r4, r5, pc}
   19186:	bf00      	nop

00019188 <__aeabi_ui2d>:
   19188:	f090 0f00 	teq	r0, #0
   1918c:	bf04      	itt	eq
   1918e:	2100      	moveq	r1, #0
   19190:	4770      	bxeq	lr
   19192:	b530      	push	{r4, r5, lr}
   19194:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19198:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1919c:	f04f 0500 	mov.w	r5, #0
   191a0:	f04f 0100 	mov.w	r1, #0
   191a4:	e750      	b.n	19048 <__adddf3+0x138>
   191a6:	bf00      	nop

000191a8 <__aeabi_i2d>:
   191a8:	f090 0f00 	teq	r0, #0
   191ac:	bf04      	itt	eq
   191ae:	2100      	moveq	r1, #0
   191b0:	4770      	bxeq	lr
   191b2:	b530      	push	{r4, r5, lr}
   191b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   191b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   191bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   191c0:	bf48      	it	mi
   191c2:	4240      	negmi	r0, r0
   191c4:	f04f 0100 	mov.w	r1, #0
   191c8:	e73e      	b.n	19048 <__adddf3+0x138>
   191ca:	bf00      	nop

000191cc <__aeabi_f2d>:
   191cc:	0042      	lsls	r2, r0, #1
   191ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   191d2:	ea4f 0131 	mov.w	r1, r1, rrx
   191d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   191da:	bf1f      	itttt	ne
   191dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   191e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   191e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   191e8:	4770      	bxne	lr
   191ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   191ee:	bf08      	it	eq
   191f0:	4770      	bxeq	lr
   191f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   191f6:	bf04      	itt	eq
   191f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   191fc:	4770      	bxeq	lr
   191fe:	b530      	push	{r4, r5, lr}
   19200:	f44f 7460 	mov.w	r4, #896	; 0x380
   19204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19208:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1920c:	e71c      	b.n	19048 <__adddf3+0x138>
   1920e:	bf00      	nop

00019210 <__aeabi_ul2d>:
   19210:	ea50 0201 	orrs.w	r2, r0, r1
   19214:	bf08      	it	eq
   19216:	4770      	bxeq	lr
   19218:	b530      	push	{r4, r5, lr}
   1921a:	f04f 0500 	mov.w	r5, #0
   1921e:	e00a      	b.n	19236 <__aeabi_l2d+0x16>

00019220 <__aeabi_l2d>:
   19220:	ea50 0201 	orrs.w	r2, r0, r1
   19224:	bf08      	it	eq
   19226:	4770      	bxeq	lr
   19228:	b530      	push	{r4, r5, lr}
   1922a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1922e:	d502      	bpl.n	19236 <__aeabi_l2d+0x16>
   19230:	4240      	negs	r0, r0
   19232:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19236:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1923a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1923e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   19242:	f43f aed8 	beq.w	18ff6 <__adddf3+0xe6>
   19246:	f04f 0203 	mov.w	r2, #3
   1924a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1924e:	bf18      	it	ne
   19250:	3203      	addne	r2, #3
   19252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   19256:	bf18      	it	ne
   19258:	3203      	addne	r2, #3
   1925a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1925e:	f1c2 0320 	rsb	r3, r2, #32
   19262:	fa00 fc03 	lsl.w	ip, r0, r3
   19266:	fa20 f002 	lsr.w	r0, r0, r2
   1926a:	fa01 fe03 	lsl.w	lr, r1, r3
   1926e:	ea40 000e 	orr.w	r0, r0, lr
   19272:	fa21 f102 	lsr.w	r1, r1, r2
   19276:	4414      	add	r4, r2
   19278:	e6bd      	b.n	18ff6 <__adddf3+0xe6>
   1927a:	bf00      	nop

0001927c <__aeabi_frsub>:
   1927c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   19280:	e002      	b.n	19288 <__addsf3>
   19282:	bf00      	nop

00019284 <__aeabi_fsub>:
   19284:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00019288 <__addsf3>:
   19288:	0042      	lsls	r2, r0, #1
   1928a:	bf1f      	itttt	ne
   1928c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   19290:	ea92 0f03 	teqne	r2, r3
   19294:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   19298:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1929c:	d06a      	beq.n	19374 <__addsf3+0xec>
   1929e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   192a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   192a6:	bfc1      	itttt	gt
   192a8:	18d2      	addgt	r2, r2, r3
   192aa:	4041      	eorgt	r1, r0
   192ac:	4048      	eorgt	r0, r1
   192ae:	4041      	eorgt	r1, r0
   192b0:	bfb8      	it	lt
   192b2:	425b      	neglt	r3, r3
   192b4:	2b19      	cmp	r3, #25
   192b6:	bf88      	it	hi
   192b8:	4770      	bxhi	lr
   192ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   192be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   192c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   192c6:	bf18      	it	ne
   192c8:	4240      	negne	r0, r0
   192ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   192ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   192d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   192d6:	bf18      	it	ne
   192d8:	4249      	negne	r1, r1
   192da:	ea92 0f03 	teq	r2, r3
   192de:	d03f      	beq.n	19360 <__addsf3+0xd8>
   192e0:	f1a2 0201 	sub.w	r2, r2, #1
   192e4:	fa41 fc03 	asr.w	ip, r1, r3
   192e8:	eb10 000c 	adds.w	r0, r0, ip
   192ec:	f1c3 0320 	rsb	r3, r3, #32
   192f0:	fa01 f103 	lsl.w	r1, r1, r3
   192f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   192f8:	d502      	bpl.n	19300 <__addsf3+0x78>
   192fa:	4249      	negs	r1, r1
   192fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   19300:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19304:	d313      	bcc.n	1932e <__addsf3+0xa6>
   19306:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1930a:	d306      	bcc.n	1931a <__addsf3+0x92>
   1930c:	0840      	lsrs	r0, r0, #1
   1930e:	ea4f 0131 	mov.w	r1, r1, rrx
   19312:	f102 0201 	add.w	r2, r2, #1
   19316:	2afe      	cmp	r2, #254	; 0xfe
   19318:	d251      	bcs.n	193be <__addsf3+0x136>
   1931a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1931e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   19322:	bf08      	it	eq
   19324:	f020 0001 	biceq.w	r0, r0, #1
   19328:	ea40 0003 	orr.w	r0, r0, r3
   1932c:	4770      	bx	lr
   1932e:	0049      	lsls	r1, r1, #1
   19330:	eb40 0000 	adc.w	r0, r0, r0
   19334:	3a01      	subs	r2, #1
   19336:	bf28      	it	cs
   19338:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   1933c:	d2ed      	bcs.n	1931a <__addsf3+0x92>
   1933e:	fab0 fc80 	clz	ip, r0
   19342:	f1ac 0c08 	sub.w	ip, ip, #8
   19346:	ebb2 020c 	subs.w	r2, r2, ip
   1934a:	fa00 f00c 	lsl.w	r0, r0, ip
   1934e:	bfaa      	itet	ge
   19350:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   19354:	4252      	neglt	r2, r2
   19356:	4318      	orrge	r0, r3
   19358:	bfbc      	itt	lt
   1935a:	40d0      	lsrlt	r0, r2
   1935c:	4318      	orrlt	r0, r3
   1935e:	4770      	bx	lr
   19360:	f092 0f00 	teq	r2, #0
   19364:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   19368:	bf06      	itte	eq
   1936a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1936e:	3201      	addeq	r2, #1
   19370:	3b01      	subne	r3, #1
   19372:	e7b5      	b.n	192e0 <__addsf3+0x58>
   19374:	ea4f 0341 	mov.w	r3, r1, lsl #1
   19378:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1937c:	bf18      	it	ne
   1937e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   19382:	d021      	beq.n	193c8 <__addsf3+0x140>
   19384:	ea92 0f03 	teq	r2, r3
   19388:	d004      	beq.n	19394 <__addsf3+0x10c>
   1938a:	f092 0f00 	teq	r2, #0
   1938e:	bf08      	it	eq
   19390:	4608      	moveq	r0, r1
   19392:	4770      	bx	lr
   19394:	ea90 0f01 	teq	r0, r1
   19398:	bf1c      	itt	ne
   1939a:	2000      	movne	r0, #0
   1939c:	4770      	bxne	lr
   1939e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   193a2:	d104      	bne.n	193ae <__addsf3+0x126>
   193a4:	0040      	lsls	r0, r0, #1
   193a6:	bf28      	it	cs
   193a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   193ac:	4770      	bx	lr
   193ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   193b2:	bf3c      	itt	cc
   193b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   193b8:	4770      	bxcc	lr
   193ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   193be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   193c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   193c6:	4770      	bx	lr
   193c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   193cc:	bf16      	itet	ne
   193ce:	4608      	movne	r0, r1
   193d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   193d4:	4601      	movne	r1, r0
   193d6:	0242      	lsls	r2, r0, #9
   193d8:	bf06      	itte	eq
   193da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   193de:	ea90 0f01 	teqeq	r0, r1
   193e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   193e6:	4770      	bx	lr

000193e8 <__aeabi_ui2f>:
   193e8:	f04f 0300 	mov.w	r3, #0
   193ec:	e004      	b.n	193f8 <__aeabi_i2f+0x8>
   193ee:	bf00      	nop

000193f0 <__aeabi_i2f>:
   193f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   193f4:	bf48      	it	mi
   193f6:	4240      	negmi	r0, r0
   193f8:	ea5f 0c00 	movs.w	ip, r0
   193fc:	bf08      	it	eq
   193fe:	4770      	bxeq	lr
   19400:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   19404:	4601      	mov	r1, r0
   19406:	f04f 0000 	mov.w	r0, #0
   1940a:	e01c      	b.n	19446 <__aeabi_l2f+0x2a>

0001940c <__aeabi_ul2f>:
   1940c:	ea50 0201 	orrs.w	r2, r0, r1
   19410:	bf08      	it	eq
   19412:	4770      	bxeq	lr
   19414:	f04f 0300 	mov.w	r3, #0
   19418:	e00a      	b.n	19430 <__aeabi_l2f+0x14>
   1941a:	bf00      	nop

0001941c <__aeabi_l2f>:
   1941c:	ea50 0201 	orrs.w	r2, r0, r1
   19420:	bf08      	it	eq
   19422:	4770      	bxeq	lr
   19424:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   19428:	d502      	bpl.n	19430 <__aeabi_l2f+0x14>
   1942a:	4240      	negs	r0, r0
   1942c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19430:	ea5f 0c01 	movs.w	ip, r1
   19434:	bf02      	ittt	eq
   19436:	4684      	moveq	ip, r0
   19438:	4601      	moveq	r1, r0
   1943a:	2000      	moveq	r0, #0
   1943c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   19440:	bf08      	it	eq
   19442:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   19446:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1944a:	fabc f28c 	clz	r2, ip
   1944e:	3a08      	subs	r2, #8
   19450:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   19454:	db10      	blt.n	19478 <__aeabi_l2f+0x5c>
   19456:	fa01 fc02 	lsl.w	ip, r1, r2
   1945a:	4463      	add	r3, ip
   1945c:	fa00 fc02 	lsl.w	ip, r0, r2
   19460:	f1c2 0220 	rsb	r2, r2, #32
   19464:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19468:	fa20 f202 	lsr.w	r2, r0, r2
   1946c:	eb43 0002 	adc.w	r0, r3, r2
   19470:	bf08      	it	eq
   19472:	f020 0001 	biceq.w	r0, r0, #1
   19476:	4770      	bx	lr
   19478:	f102 0220 	add.w	r2, r2, #32
   1947c:	fa01 fc02 	lsl.w	ip, r1, r2
   19480:	f1c2 0220 	rsb	r2, r2, #32
   19484:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   19488:	fa21 f202 	lsr.w	r2, r1, r2
   1948c:	eb43 0002 	adc.w	r0, r3, r2
   19490:	bf08      	it	eq
   19492:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   19496:	4770      	bx	lr

00019498 <__aeabi_uldivmod>:
   19498:	b953      	cbnz	r3, 194b0 <__aeabi_uldivmod+0x18>
   1949a:	b94a      	cbnz	r2, 194b0 <__aeabi_uldivmod+0x18>
   1949c:	2900      	cmp	r1, #0
   1949e:	bf08      	it	eq
   194a0:	2800      	cmpeq	r0, #0
   194a2:	bf1c      	itt	ne
   194a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   194a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   194ac:	f000 b970 	b.w	19790 <__aeabi_idiv0>
   194b0:	f1ad 0c08 	sub.w	ip, sp, #8
   194b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   194b8:	f000 f806 	bl	194c8 <__udivmoddi4>
   194bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   194c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   194c4:	b004      	add	sp, #16
   194c6:	4770      	bx	lr

000194c8 <__udivmoddi4>:
   194c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   194cc:	9e08      	ldr	r6, [sp, #32]
   194ce:	460d      	mov	r5, r1
   194d0:	4604      	mov	r4, r0
   194d2:	460f      	mov	r7, r1
   194d4:	2b00      	cmp	r3, #0
   194d6:	d14a      	bne.n	1956e <__udivmoddi4+0xa6>
   194d8:	428a      	cmp	r2, r1
   194da:	4694      	mov	ip, r2
   194dc:	d965      	bls.n	195aa <__udivmoddi4+0xe2>
   194de:	fab2 f382 	clz	r3, r2
   194e2:	b143      	cbz	r3, 194f6 <__udivmoddi4+0x2e>
   194e4:	fa02 fc03 	lsl.w	ip, r2, r3
   194e8:	f1c3 0220 	rsb	r2, r3, #32
   194ec:	409f      	lsls	r7, r3
   194ee:	fa20 f202 	lsr.w	r2, r0, r2
   194f2:	4317      	orrs	r7, r2
   194f4:	409c      	lsls	r4, r3
   194f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   194fa:	fa1f f58c 	uxth.w	r5, ip
   194fe:	fbb7 f1fe 	udiv	r1, r7, lr
   19502:	0c22      	lsrs	r2, r4, #16
   19504:	fb0e 7711 	mls	r7, lr, r1, r7
   19508:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1950c:	fb01 f005 	mul.w	r0, r1, r5
   19510:	4290      	cmp	r0, r2
   19512:	d90a      	bls.n	1952a <__udivmoddi4+0x62>
   19514:	eb1c 0202 	adds.w	r2, ip, r2
   19518:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   1951c:	f080 811c 	bcs.w	19758 <__udivmoddi4+0x290>
   19520:	4290      	cmp	r0, r2
   19522:	f240 8119 	bls.w	19758 <__udivmoddi4+0x290>
   19526:	3902      	subs	r1, #2
   19528:	4462      	add	r2, ip
   1952a:	1a12      	subs	r2, r2, r0
   1952c:	b2a4      	uxth	r4, r4
   1952e:	fbb2 f0fe 	udiv	r0, r2, lr
   19532:	fb0e 2210 	mls	r2, lr, r0, r2
   19536:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1953a:	fb00 f505 	mul.w	r5, r0, r5
   1953e:	42a5      	cmp	r5, r4
   19540:	d90a      	bls.n	19558 <__udivmoddi4+0x90>
   19542:	eb1c 0404 	adds.w	r4, ip, r4
   19546:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   1954a:	f080 8107 	bcs.w	1975c <__udivmoddi4+0x294>
   1954e:	42a5      	cmp	r5, r4
   19550:	f240 8104 	bls.w	1975c <__udivmoddi4+0x294>
   19554:	4464      	add	r4, ip
   19556:	3802      	subs	r0, #2
   19558:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1955c:	1b64      	subs	r4, r4, r5
   1955e:	2100      	movs	r1, #0
   19560:	b11e      	cbz	r6, 1956a <__udivmoddi4+0xa2>
   19562:	40dc      	lsrs	r4, r3
   19564:	2300      	movs	r3, #0
   19566:	e9c6 4300 	strd	r4, r3, [r6]
   1956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1956e:	428b      	cmp	r3, r1
   19570:	d908      	bls.n	19584 <__udivmoddi4+0xbc>
   19572:	2e00      	cmp	r6, #0
   19574:	f000 80ed 	beq.w	19752 <__udivmoddi4+0x28a>
   19578:	2100      	movs	r1, #0
   1957a:	e9c6 0500 	strd	r0, r5, [r6]
   1957e:	4608      	mov	r0, r1
   19580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19584:	fab3 f183 	clz	r1, r3
   19588:	2900      	cmp	r1, #0
   1958a:	d149      	bne.n	19620 <__udivmoddi4+0x158>
   1958c:	42ab      	cmp	r3, r5
   1958e:	d302      	bcc.n	19596 <__udivmoddi4+0xce>
   19590:	4282      	cmp	r2, r0
   19592:	f200 80f8 	bhi.w	19786 <__udivmoddi4+0x2be>
   19596:	1a84      	subs	r4, r0, r2
   19598:	eb65 0203 	sbc.w	r2, r5, r3
   1959c:	2001      	movs	r0, #1
   1959e:	4617      	mov	r7, r2
   195a0:	2e00      	cmp	r6, #0
   195a2:	d0e2      	beq.n	1956a <__udivmoddi4+0xa2>
   195a4:	e9c6 4700 	strd	r4, r7, [r6]
   195a8:	e7df      	b.n	1956a <__udivmoddi4+0xa2>
   195aa:	b902      	cbnz	r2, 195ae <__udivmoddi4+0xe6>
   195ac:	deff      	udf	#255	; 0xff
   195ae:	fab2 f382 	clz	r3, r2
   195b2:	2b00      	cmp	r3, #0
   195b4:	f040 8090 	bne.w	196d8 <__udivmoddi4+0x210>
   195b8:	1a8a      	subs	r2, r1, r2
   195ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
   195be:	fa1f fe8c 	uxth.w	lr, ip
   195c2:	2101      	movs	r1, #1
   195c4:	fbb2 f5f7 	udiv	r5, r2, r7
   195c8:	fb07 2015 	mls	r0, r7, r5, r2
   195cc:	0c22      	lsrs	r2, r4, #16
   195ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   195d2:	fb0e f005 	mul.w	r0, lr, r5
   195d6:	4290      	cmp	r0, r2
   195d8:	d908      	bls.n	195ec <__udivmoddi4+0x124>
   195da:	eb1c 0202 	adds.w	r2, ip, r2
   195de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   195e2:	d202      	bcs.n	195ea <__udivmoddi4+0x122>
   195e4:	4290      	cmp	r0, r2
   195e6:	f200 80cb 	bhi.w	19780 <__udivmoddi4+0x2b8>
   195ea:	4645      	mov	r5, r8
   195ec:	1a12      	subs	r2, r2, r0
   195ee:	b2a4      	uxth	r4, r4
   195f0:	fbb2 f0f7 	udiv	r0, r2, r7
   195f4:	fb07 2210 	mls	r2, r7, r0, r2
   195f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   195fc:	fb0e fe00 	mul.w	lr, lr, r0
   19600:	45a6      	cmp	lr, r4
   19602:	d908      	bls.n	19616 <__udivmoddi4+0x14e>
   19604:	eb1c 0404 	adds.w	r4, ip, r4
   19608:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   1960c:	d202      	bcs.n	19614 <__udivmoddi4+0x14c>
   1960e:	45a6      	cmp	lr, r4
   19610:	f200 80bb 	bhi.w	1978a <__udivmoddi4+0x2c2>
   19614:	4610      	mov	r0, r2
   19616:	eba4 040e 	sub.w	r4, r4, lr
   1961a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   1961e:	e79f      	b.n	19560 <__udivmoddi4+0x98>
   19620:	f1c1 0720 	rsb	r7, r1, #32
   19624:	408b      	lsls	r3, r1
   19626:	fa22 fc07 	lsr.w	ip, r2, r7
   1962a:	ea4c 0c03 	orr.w	ip, ip, r3
   1962e:	fa05 f401 	lsl.w	r4, r5, r1
   19632:	fa20 f307 	lsr.w	r3, r0, r7
   19636:	40fd      	lsrs	r5, r7
   19638:	ea4f 491c 	mov.w	r9, ip, lsr #16
   1963c:	4323      	orrs	r3, r4
   1963e:	fbb5 f8f9 	udiv	r8, r5, r9
   19642:	fa1f fe8c 	uxth.w	lr, ip
   19646:	fb09 5518 	mls	r5, r9, r8, r5
   1964a:	0c1c      	lsrs	r4, r3, #16
   1964c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   19650:	fb08 f50e 	mul.w	r5, r8, lr
   19654:	42a5      	cmp	r5, r4
   19656:	fa02 f201 	lsl.w	r2, r2, r1
   1965a:	fa00 f001 	lsl.w	r0, r0, r1
   1965e:	d90b      	bls.n	19678 <__udivmoddi4+0x1b0>
   19660:	eb1c 0404 	adds.w	r4, ip, r4
   19664:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   19668:	f080 8088 	bcs.w	1977c <__udivmoddi4+0x2b4>
   1966c:	42a5      	cmp	r5, r4
   1966e:	f240 8085 	bls.w	1977c <__udivmoddi4+0x2b4>
   19672:	f1a8 0802 	sub.w	r8, r8, #2
   19676:	4464      	add	r4, ip
   19678:	1b64      	subs	r4, r4, r5
   1967a:	b29d      	uxth	r5, r3
   1967c:	fbb4 f3f9 	udiv	r3, r4, r9
   19680:	fb09 4413 	mls	r4, r9, r3, r4
   19684:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   19688:	fb03 fe0e 	mul.w	lr, r3, lr
   1968c:	45a6      	cmp	lr, r4
   1968e:	d908      	bls.n	196a2 <__udivmoddi4+0x1da>
   19690:	eb1c 0404 	adds.w	r4, ip, r4
   19694:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   19698:	d26c      	bcs.n	19774 <__udivmoddi4+0x2ac>
   1969a:	45a6      	cmp	lr, r4
   1969c:	d96a      	bls.n	19774 <__udivmoddi4+0x2ac>
   1969e:	3b02      	subs	r3, #2
   196a0:	4464      	add	r4, ip
   196a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   196a6:	fba3 9502 	umull	r9, r5, r3, r2
   196aa:	eba4 040e 	sub.w	r4, r4, lr
   196ae:	42ac      	cmp	r4, r5
   196b0:	46c8      	mov	r8, r9
   196b2:	46ae      	mov	lr, r5
   196b4:	d356      	bcc.n	19764 <__udivmoddi4+0x29c>
   196b6:	d053      	beq.n	19760 <__udivmoddi4+0x298>
   196b8:	b156      	cbz	r6, 196d0 <__udivmoddi4+0x208>
   196ba:	ebb0 0208 	subs.w	r2, r0, r8
   196be:	eb64 040e 	sbc.w	r4, r4, lr
   196c2:	fa04 f707 	lsl.w	r7, r4, r7
   196c6:	40ca      	lsrs	r2, r1
   196c8:	40cc      	lsrs	r4, r1
   196ca:	4317      	orrs	r7, r2
   196cc:	e9c6 7400 	strd	r7, r4, [r6]
   196d0:	4618      	mov	r0, r3
   196d2:	2100      	movs	r1, #0
   196d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   196d8:	f1c3 0120 	rsb	r1, r3, #32
   196dc:	fa02 fc03 	lsl.w	ip, r2, r3
   196e0:	fa20 f201 	lsr.w	r2, r0, r1
   196e4:	fa25 f101 	lsr.w	r1, r5, r1
   196e8:	409d      	lsls	r5, r3
   196ea:	432a      	orrs	r2, r5
   196ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
   196f0:	fa1f fe8c 	uxth.w	lr, ip
   196f4:	fbb1 f0f7 	udiv	r0, r1, r7
   196f8:	fb07 1510 	mls	r5, r7, r0, r1
   196fc:	0c11      	lsrs	r1, r2, #16
   196fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   19702:	fb00 f50e 	mul.w	r5, r0, lr
   19706:	428d      	cmp	r5, r1
   19708:	fa04 f403 	lsl.w	r4, r4, r3
   1970c:	d908      	bls.n	19720 <__udivmoddi4+0x258>
   1970e:	eb1c 0101 	adds.w	r1, ip, r1
   19712:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   19716:	d22f      	bcs.n	19778 <__udivmoddi4+0x2b0>
   19718:	428d      	cmp	r5, r1
   1971a:	d92d      	bls.n	19778 <__udivmoddi4+0x2b0>
   1971c:	3802      	subs	r0, #2
   1971e:	4461      	add	r1, ip
   19720:	1b49      	subs	r1, r1, r5
   19722:	b292      	uxth	r2, r2
   19724:	fbb1 f5f7 	udiv	r5, r1, r7
   19728:	fb07 1115 	mls	r1, r7, r5, r1
   1972c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19730:	fb05 f10e 	mul.w	r1, r5, lr
   19734:	4291      	cmp	r1, r2
   19736:	d908      	bls.n	1974a <__udivmoddi4+0x282>
   19738:	eb1c 0202 	adds.w	r2, ip, r2
   1973c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   19740:	d216      	bcs.n	19770 <__udivmoddi4+0x2a8>
   19742:	4291      	cmp	r1, r2
   19744:	d914      	bls.n	19770 <__udivmoddi4+0x2a8>
   19746:	3d02      	subs	r5, #2
   19748:	4462      	add	r2, ip
   1974a:	1a52      	subs	r2, r2, r1
   1974c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   19750:	e738      	b.n	195c4 <__udivmoddi4+0xfc>
   19752:	4631      	mov	r1, r6
   19754:	4630      	mov	r0, r6
   19756:	e708      	b.n	1956a <__udivmoddi4+0xa2>
   19758:	4639      	mov	r1, r7
   1975a:	e6e6      	b.n	1952a <__udivmoddi4+0x62>
   1975c:	4610      	mov	r0, r2
   1975e:	e6fb      	b.n	19558 <__udivmoddi4+0x90>
   19760:	4548      	cmp	r0, r9
   19762:	d2a9      	bcs.n	196b8 <__udivmoddi4+0x1f0>
   19764:	ebb9 0802 	subs.w	r8, r9, r2
   19768:	eb65 0e0c 	sbc.w	lr, r5, ip
   1976c:	3b01      	subs	r3, #1
   1976e:	e7a3      	b.n	196b8 <__udivmoddi4+0x1f0>
   19770:	4645      	mov	r5, r8
   19772:	e7ea      	b.n	1974a <__udivmoddi4+0x282>
   19774:	462b      	mov	r3, r5
   19776:	e794      	b.n	196a2 <__udivmoddi4+0x1da>
   19778:	4640      	mov	r0, r8
   1977a:	e7d1      	b.n	19720 <__udivmoddi4+0x258>
   1977c:	46d0      	mov	r8, sl
   1977e:	e77b      	b.n	19678 <__udivmoddi4+0x1b0>
   19780:	3d02      	subs	r5, #2
   19782:	4462      	add	r2, ip
   19784:	e732      	b.n	195ec <__udivmoddi4+0x124>
   19786:	4608      	mov	r0, r1
   19788:	e70a      	b.n	195a0 <__udivmoddi4+0xd8>
   1978a:	4464      	add	r4, ip
   1978c:	3802      	subs	r0, #2
   1978e:	e742      	b.n	19616 <__udivmoddi4+0x14e>

00019790 <__aeabi_idiv0>:
   19790:	4770      	bx	lr
   19792:	bf00      	nop

00019794 <_calloc_r>:
   19794:	b538      	push	{r3, r4, r5, lr}
   19796:	fba1 1402 	umull	r1, r4, r1, r2
   1979a:	bb8c      	cbnz	r4, 19800 <_calloc_r+0x6c>
   1979c:	f000 f846 	bl	1982c <_malloc_r>
   197a0:	4605      	mov	r5, r0
   197a2:	b1e0      	cbz	r0, 197de <_calloc_r+0x4a>
   197a4:	f850 2c04 	ldr.w	r2, [r0, #-4]
   197a8:	f022 0203 	bic.w	r2, r2, #3
   197ac:	3a04      	subs	r2, #4
   197ae:	2a24      	cmp	r2, #36	; 0x24
   197b0:	d817      	bhi.n	197e2 <_calloc_r+0x4e>
   197b2:	2a13      	cmp	r2, #19
   197b4:	d91a      	bls.n	197ec <_calloc_r+0x58>
   197b6:	2a1b      	cmp	r2, #27
   197b8:	e9c0 4400 	strd	r4, r4, [r0]
   197bc:	d91d      	bls.n	197fa <_calloc_r+0x66>
   197be:	2a24      	cmp	r2, #36	; 0x24
   197c0:	bf14      	ite	ne
   197c2:	f100 0210 	addne.w	r2, r0, #16
   197c6:	f100 0218 	addeq.w	r2, r0, #24
   197ca:	f04f 0300 	mov.w	r3, #0
   197ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
   197d2:	bf04      	itt	eq
   197d4:	6104      	streq	r4, [r0, #16]
   197d6:	6144      	streq	r4, [r0, #20]
   197d8:	e9c2 3300 	strd	r3, r3, [r2]
   197dc:	6093      	str	r3, [r2, #8]
   197de:	4628      	mov	r0, r5
   197e0:	bd38      	pop	{r3, r4, r5, pc}
   197e2:	4621      	mov	r1, r4
   197e4:	f002 f928 	bl	1ba38 <memset>
   197e8:	4628      	mov	r0, r5
   197ea:	bd38      	pop	{r3, r4, r5, pc}
   197ec:	4602      	mov	r2, r0
   197ee:	2300      	movs	r3, #0
   197f0:	e9c2 3300 	strd	r3, r3, [r2]
   197f4:	6093      	str	r3, [r2, #8]
   197f6:	4628      	mov	r0, r5
   197f8:	bd38      	pop	{r3, r4, r5, pc}
   197fa:	f100 0208 	add.w	r2, r0, #8
   197fe:	e7f6      	b.n	197ee <_calloc_r+0x5a>
   19800:	f003 fa5c 	bl	1ccbc <__errno>
   19804:	230c      	movs	r3, #12
   19806:	2500      	movs	r5, #0
   19808:	6003      	str	r3, [r0, #0]
   1980a:	e7e8      	b.n	197de <_calloc_r+0x4a>

0001980c <malloc>:
   1980c:	4b02      	ldr	r3, [pc, #8]	; (19818 <malloc+0xc>)
   1980e:	4601      	mov	r1, r0
   19810:	6818      	ldr	r0, [r3, #0]
   19812:	f000 b80b 	b.w	1982c <_malloc_r>
   19816:	bf00      	nop
   19818:	20008de0 	.word	0x20008de0

0001981c <free>:
   1981c:	4b02      	ldr	r3, [pc, #8]	; (19828 <free+0xc>)
   1981e:	4601      	mov	r1, r0
   19820:	6818      	ldr	r0, [r3, #0]
   19822:	f003 bdbf 	b.w	1d3a4 <_free_r>
   19826:	bf00      	nop
   19828:	20008de0 	.word	0x20008de0

0001982c <_malloc_r>:
   1982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19830:	f101 060b 	add.w	r6, r1, #11
   19834:	2e16      	cmp	r6, #22
   19836:	b083      	sub	sp, #12
   19838:	4604      	mov	r4, r0
   1983a:	d824      	bhi.n	19886 <_malloc_r+0x5a>
   1983c:	2910      	cmp	r1, #16
   1983e:	f200 80ba 	bhi.w	199b6 <_malloc_r+0x18a>
   19842:	f000 fa9d 	bl	19d80 <__malloc_lock>
   19846:	2610      	movs	r6, #16
   19848:	2218      	movs	r2, #24
   1984a:	2002      	movs	r0, #2
   1984c:	4fb7      	ldr	r7, [pc, #732]	; (19b2c <_malloc_r+0x300>)
   1984e:	443a      	add	r2, r7
   19850:	f1a2 0108 	sub.w	r1, r2, #8
   19854:	6853      	ldr	r3, [r2, #4]
   19856:	428b      	cmp	r3, r1
   19858:	f000 80ba 	beq.w	199d0 <_malloc_r+0x1a4>
   1985c:	685a      	ldr	r2, [r3, #4]
   1985e:	68d9      	ldr	r1, [r3, #12]
   19860:	f022 0203 	bic.w	r2, r2, #3
   19864:	441a      	add	r2, r3
   19866:	689d      	ldr	r5, [r3, #8]
   19868:	60e9      	str	r1, [r5, #12]
   1986a:	608d      	str	r5, [r1, #8]
   1986c:	6851      	ldr	r1, [r2, #4]
   1986e:	f041 0101 	orr.w	r1, r1, #1
   19872:	4620      	mov	r0, r4
   19874:	6051      	str	r1, [r2, #4]
   19876:	f103 0508 	add.w	r5, r3, #8
   1987a:	f000 fa87 	bl	19d8c <__malloc_unlock>
   1987e:	4628      	mov	r0, r5
   19880:	b003      	add	sp, #12
   19882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19886:	f036 0607 	bics.w	r6, r6, #7
   1988a:	f100 8094 	bmi.w	199b6 <_malloc_r+0x18a>
   1988e:	42b1      	cmp	r1, r6
   19890:	f200 8091 	bhi.w	199b6 <_malloc_r+0x18a>
   19894:	f000 fa74 	bl	19d80 <__malloc_lock>
   19898:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1989c:	f0c0 8196 	bcc.w	19bcc <_malloc_r+0x3a0>
   198a0:	0a73      	lsrs	r3, r6, #9
   198a2:	f000 808f 	beq.w	199c4 <_malloc_r+0x198>
   198a6:	2b04      	cmp	r3, #4
   198a8:	f200 816b 	bhi.w	19b82 <_malloc_r+0x356>
   198ac:	09b3      	lsrs	r3, r6, #6
   198ae:	f103 0039 	add.w	r0, r3, #57	; 0x39
   198b2:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   198b6:	00c3      	lsls	r3, r0, #3
   198b8:	4f9c      	ldr	r7, [pc, #624]	; (19b2c <_malloc_r+0x300>)
   198ba:	443b      	add	r3, r7
   198bc:	f1a3 0508 	sub.w	r5, r3, #8
   198c0:	685b      	ldr	r3, [r3, #4]
   198c2:	429d      	cmp	r5, r3
   198c4:	d106      	bne.n	198d4 <_malloc_r+0xa8>
   198c6:	e00c      	b.n	198e2 <_malloc_r+0xb6>
   198c8:	2900      	cmp	r1, #0
   198ca:	f280 812b 	bge.w	19b24 <_malloc_r+0x2f8>
   198ce:	68db      	ldr	r3, [r3, #12]
   198d0:	429d      	cmp	r5, r3
   198d2:	d006      	beq.n	198e2 <_malloc_r+0xb6>
   198d4:	685a      	ldr	r2, [r3, #4]
   198d6:	f022 0203 	bic.w	r2, r2, #3
   198da:	1b91      	subs	r1, r2, r6
   198dc:	290f      	cmp	r1, #15
   198de:	ddf3      	ble.n	198c8 <_malloc_r+0x9c>
   198e0:	4660      	mov	r0, ip
   198e2:	693d      	ldr	r5, [r7, #16]
   198e4:	f8df c248 	ldr.w	ip, [pc, #584]	; 19b30 <_malloc_r+0x304>
   198e8:	4565      	cmp	r5, ip
   198ea:	d07c      	beq.n	199e6 <_malloc_r+0x1ba>
   198ec:	686a      	ldr	r2, [r5, #4]
   198ee:	f022 0203 	bic.w	r2, r2, #3
   198f2:	1b93      	subs	r3, r2, r6
   198f4:	2b0f      	cmp	r3, #15
   198f6:	f300 8177 	bgt.w	19be8 <_malloc_r+0x3bc>
   198fa:	2b00      	cmp	r3, #0
   198fc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   19900:	f280 8168 	bge.w	19bd4 <_malloc_r+0x3a8>
   19904:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   19908:	f080 8116 	bcs.w	19b38 <_malloc_r+0x30c>
   1990c:	08d3      	lsrs	r3, r2, #3
   1990e:	6879      	ldr	r1, [r7, #4]
   19910:	3301      	adds	r3, #1
   19912:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   19916:	2201      	movs	r2, #1
   19918:	fa02 f20e 	lsl.w	r2, r2, lr
   1991c:	430a      	orrs	r2, r1
   1991e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   19922:	f8c5 e008 	str.w	lr, [r5, #8]
   19926:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1992a:	3908      	subs	r1, #8
   1992c:	60e9      	str	r1, [r5, #12]
   1992e:	607a      	str	r2, [r7, #4]
   19930:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   19934:	f8ce 500c 	str.w	r5, [lr, #12]
   19938:	1083      	asrs	r3, r0, #2
   1993a:	2101      	movs	r1, #1
   1993c:	4099      	lsls	r1, r3
   1993e:	4291      	cmp	r1, r2
   19940:	d857      	bhi.n	199f2 <_malloc_r+0x1c6>
   19942:	4211      	tst	r1, r2
   19944:	d106      	bne.n	19954 <_malloc_r+0x128>
   19946:	f020 0003 	bic.w	r0, r0, #3
   1994a:	0049      	lsls	r1, r1, #1
   1994c:	4211      	tst	r1, r2
   1994e:	f100 0004 	add.w	r0, r0, #4
   19952:	d0fa      	beq.n	1994a <_malloc_r+0x11e>
   19954:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   19958:	464d      	mov	r5, r9
   1995a:	4686      	mov	lr, r0
   1995c:	f8d5 800c 	ldr.w	r8, [r5, #12]
   19960:	4545      	cmp	r5, r8
   19962:	d108      	bne.n	19976 <_malloc_r+0x14a>
   19964:	e119      	b.n	19b9a <_malloc_r+0x36e>
   19966:	2b00      	cmp	r3, #0
   19968:	f280 8120 	bge.w	19bac <_malloc_r+0x380>
   1996c:	f8d8 800c 	ldr.w	r8, [r8, #12]
   19970:	4545      	cmp	r5, r8
   19972:	f000 8112 	beq.w	19b9a <_malloc_r+0x36e>
   19976:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1997a:	f022 0203 	bic.w	r2, r2, #3
   1997e:	1b93      	subs	r3, r2, r6
   19980:	2b0f      	cmp	r3, #15
   19982:	ddf0      	ble.n	19966 <_malloc_r+0x13a>
   19984:	4620      	mov	r0, r4
   19986:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   1998a:	eb08 0106 	add.w	r1, r8, r6
   1998e:	f046 0601 	orr.w	r6, r6, #1
   19992:	f8c8 6004 	str.w	r6, [r8, #4]
   19996:	60ec      	str	r4, [r5, #12]
   19998:	60a5      	str	r5, [r4, #8]
   1999a:	f043 0401 	orr.w	r4, r3, #1
   1999e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   199a2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   199a6:	604c      	str	r4, [r1, #4]
   199a8:	f848 3002 	str.w	r3, [r8, r2]
   199ac:	f000 f9ee 	bl	19d8c <__malloc_unlock>
   199b0:	f108 0508 	add.w	r5, r8, #8
   199b4:	e002      	b.n	199bc <_malloc_r+0x190>
   199b6:	230c      	movs	r3, #12
   199b8:	6023      	str	r3, [r4, #0]
   199ba:	2500      	movs	r5, #0
   199bc:	4628      	mov	r0, r5
   199be:	b003      	add	sp, #12
   199c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199c4:	f44f 7300 	mov.w	r3, #512	; 0x200
   199c8:	2040      	movs	r0, #64	; 0x40
   199ca:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   199ce:	e773      	b.n	198b8 <_malloc_r+0x8c>
   199d0:	68d3      	ldr	r3, [r2, #12]
   199d2:	429a      	cmp	r2, r3
   199d4:	bf08      	it	eq
   199d6:	3002      	addeq	r0, #2
   199d8:	f47f af40 	bne.w	1985c <_malloc_r+0x30>
   199dc:	693d      	ldr	r5, [r7, #16]
   199de:	f8df c150 	ldr.w	ip, [pc, #336]	; 19b30 <_malloc_r+0x304>
   199e2:	4565      	cmp	r5, ip
   199e4:	d182      	bne.n	198ec <_malloc_r+0xc0>
   199e6:	687a      	ldr	r2, [r7, #4]
   199e8:	1083      	asrs	r3, r0, #2
   199ea:	2101      	movs	r1, #1
   199ec:	4099      	lsls	r1, r3
   199ee:	4291      	cmp	r1, r2
   199f0:	d9a7      	bls.n	19942 <_malloc_r+0x116>
   199f2:	68bd      	ldr	r5, [r7, #8]
   199f4:	686b      	ldr	r3, [r5, #4]
   199f6:	f023 0803 	bic.w	r8, r3, #3
   199fa:	4546      	cmp	r6, r8
   199fc:	d803      	bhi.n	19a06 <_malloc_r+0x1da>
   199fe:	eba8 0306 	sub.w	r3, r8, r6
   19a02:	2b0f      	cmp	r3, #15
   19a04:	dc7e      	bgt.n	19b04 <_malloc_r+0x2d8>
   19a06:	f8df 912c 	ldr.w	r9, [pc, #300]	; 19b34 <_malloc_r+0x308>
   19a0a:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
   19a0e:	f8d9 3000 	ldr.w	r3, [r9]
   19a12:	3201      	adds	r2, #1
   19a14:	4433      	add	r3, r6
   19a16:	eb05 0a08 	add.w	sl, r5, r8
   19a1a:	f000 812f 	beq.w	19c7c <_malloc_r+0x450>
   19a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   19a22:	330f      	adds	r3, #15
   19a24:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   19a28:	f02b 0b0f 	bic.w	fp, fp, #15
   19a2c:	4659      	mov	r1, fp
   19a2e:	4620      	mov	r0, r4
   19a30:	f003 f91c 	bl	1cc6c <_sbrk_r>
   19a34:	1c41      	adds	r1, r0, #1
   19a36:	4602      	mov	r2, r0
   19a38:	f000 80ef 	beq.w	19c1a <_malloc_r+0x3ee>
   19a3c:	4582      	cmp	sl, r0
   19a3e:	f200 80ea 	bhi.w	19c16 <_malloc_r+0x3ea>
   19a42:	f8d9 1004 	ldr.w	r1, [r9, #4]
   19a46:	4459      	add	r1, fp
   19a48:	f8c9 1004 	str.w	r1, [r9, #4]
   19a4c:	460b      	mov	r3, r1
   19a4e:	f000 814b 	beq.w	19ce8 <_malloc_r+0x4bc>
   19a52:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
   19a56:	3101      	adds	r1, #1
   19a58:	bf1b      	ittet	ne
   19a5a:	eba2 0a0a 	subne.w	sl, r2, sl
   19a5e:	4453      	addne	r3, sl
   19a60:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
   19a64:	f8c9 3004 	strne.w	r3, [r9, #4]
   19a68:	f012 0307 	ands.w	r3, r2, #7
   19a6c:	f000 8112 	beq.w	19c94 <_malloc_r+0x468>
   19a70:	f1c3 0108 	rsb	r1, r3, #8
   19a74:	440a      	add	r2, r1
   19a76:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
   19a7a:	4493      	add	fp, r2
   19a7c:	3108      	adds	r1, #8
   19a7e:	eba1 010b 	sub.w	r1, r1, fp
   19a82:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   19a86:	4651      	mov	r1, sl
   19a88:	4620      	mov	r0, r4
   19a8a:	9201      	str	r2, [sp, #4]
   19a8c:	9300      	str	r3, [sp, #0]
   19a8e:	f003 f8ed 	bl	1cc6c <_sbrk_r>
   19a92:	1c42      	adds	r2, r0, #1
   19a94:	e9dd 3200 	ldrd	r3, r2, [sp]
   19a98:	f000 814b 	beq.w	19d32 <_malloc_r+0x506>
   19a9c:	1a80      	subs	r0, r0, r2
   19a9e:	eb00 0b0a 	add.w	fp, r0, sl
   19aa2:	f8d9 0004 	ldr.w	r0, [r9, #4]
   19aa6:	60ba      	str	r2, [r7, #8]
   19aa8:	f04b 0301 	orr.w	r3, fp, #1
   19aac:	eb0a 0100 	add.w	r1, sl, r0
   19ab0:	42bd      	cmp	r5, r7
   19ab2:	6053      	str	r3, [r2, #4]
   19ab4:	f8c9 1004 	str.w	r1, [r9, #4]
   19ab8:	f000 8122 	beq.w	19d00 <_malloc_r+0x4d4>
   19abc:	f1b8 0f0f 	cmp.w	r8, #15
   19ac0:	f240 8120 	bls.w	19d04 <_malloc_r+0x4d8>
   19ac4:	686b      	ldr	r3, [r5, #4]
   19ac6:	f1a8 000c 	sub.w	r0, r8, #12
   19aca:	f020 0007 	bic.w	r0, r0, #7
   19ace:	f003 0301 	and.w	r3, r3, #1
   19ad2:	4303      	orrs	r3, r0
   19ad4:	606b      	str	r3, [r5, #4]
   19ad6:	f04f 0c05 	mov.w	ip, #5
   19ada:	182b      	adds	r3, r5, r0
   19adc:	280f      	cmp	r0, #15
   19ade:	e9c3 cc01 	strd	ip, ip, [r3, #4]
   19ae2:	f200 812d 	bhi.w	19d40 <_malloc_r+0x514>
   19ae6:	6853      	ldr	r3, [r2, #4]
   19ae8:	4615      	mov	r5, r2
   19aea:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
   19aee:	428a      	cmp	r2, r1
   19af0:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
   19af4:	bf38      	it	cc
   19af6:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
   19afa:	428a      	cmp	r2, r1
   19afc:	bf38      	it	cc
   19afe:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
   19b02:	e08c      	b.n	19c1e <_malloc_r+0x3f2>
   19b04:	19aa      	adds	r2, r5, r6
   19b06:	f043 0301 	orr.w	r3, r3, #1
   19b0a:	f046 0601 	orr.w	r6, r6, #1
   19b0e:	606e      	str	r6, [r5, #4]
   19b10:	4620      	mov	r0, r4
   19b12:	60ba      	str	r2, [r7, #8]
   19b14:	6053      	str	r3, [r2, #4]
   19b16:	f000 f939 	bl	19d8c <__malloc_unlock>
   19b1a:	3508      	adds	r5, #8
   19b1c:	4628      	mov	r0, r5
   19b1e:	b003      	add	sp, #12
   19b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b24:	68d9      	ldr	r1, [r3, #12]
   19b26:	441a      	add	r2, r3
   19b28:	e69d      	b.n	19866 <_malloc_r+0x3a>
   19b2a:	bf00      	nop
   19b2c:	20008f0c 	.word	0x20008f0c
   19b30:	20008f14 	.word	0x20008f14
   19b34:	2000d104 	.word	0x2000d104
   19b38:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   19b3c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   19b40:	d363      	bcc.n	19c0a <_malloc_r+0x3de>
   19b42:	2b14      	cmp	r3, #20
   19b44:	f200 80b8 	bhi.w	19cb8 <_malloc_r+0x48c>
   19b48:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   19b4c:	00c9      	lsls	r1, r1, #3
   19b4e:	335b      	adds	r3, #91	; 0x5b
   19b50:	eb07 0e01 	add.w	lr, r7, r1
   19b54:	5879      	ldr	r1, [r7, r1]
   19b56:	f1ae 0e08 	sub.w	lr, lr, #8
   19b5a:	458e      	cmp	lr, r1
   19b5c:	f000 8091 	beq.w	19c82 <_malloc_r+0x456>
   19b60:	684b      	ldr	r3, [r1, #4]
   19b62:	f023 0303 	bic.w	r3, r3, #3
   19b66:	4293      	cmp	r3, r2
   19b68:	d902      	bls.n	19b70 <_malloc_r+0x344>
   19b6a:	6889      	ldr	r1, [r1, #8]
   19b6c:	458e      	cmp	lr, r1
   19b6e:	d1f7      	bne.n	19b60 <_malloc_r+0x334>
   19b70:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   19b74:	687a      	ldr	r2, [r7, #4]
   19b76:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   19b7a:	f8ce 5008 	str.w	r5, [lr, #8]
   19b7e:	60cd      	str	r5, [r1, #12]
   19b80:	e6da      	b.n	19938 <_malloc_r+0x10c>
   19b82:	2b14      	cmp	r3, #20
   19b84:	d959      	bls.n	19c3a <_malloc_r+0x40e>
   19b86:	2b54      	cmp	r3, #84	; 0x54
   19b88:	f200 809e 	bhi.w	19cc8 <_malloc_r+0x49c>
   19b8c:	0b33      	lsrs	r3, r6, #12
   19b8e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   19b92:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   19b96:	00c3      	lsls	r3, r0, #3
   19b98:	e68e      	b.n	198b8 <_malloc_r+0x8c>
   19b9a:	f10e 0e01 	add.w	lr, lr, #1
   19b9e:	f01e 0f03 	tst.w	lr, #3
   19ba2:	f105 0508 	add.w	r5, r5, #8
   19ba6:	f47f aed9 	bne.w	1995c <_malloc_r+0x130>
   19baa:	e051      	b.n	19c50 <_malloc_r+0x424>
   19bac:	4442      	add	r2, r8
   19bae:	4645      	mov	r5, r8
   19bb0:	6853      	ldr	r3, [r2, #4]
   19bb2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   19bb6:	f043 0301 	orr.w	r3, r3, #1
   19bba:	6053      	str	r3, [r2, #4]
   19bbc:	f855 3f08 	ldr.w	r3, [r5, #8]!
   19bc0:	4620      	mov	r0, r4
   19bc2:	60d9      	str	r1, [r3, #12]
   19bc4:	608b      	str	r3, [r1, #8]
   19bc6:	f000 f8e1 	bl	19d8c <__malloc_unlock>
   19bca:	e6f7      	b.n	199bc <_malloc_r+0x190>
   19bcc:	08f0      	lsrs	r0, r6, #3
   19bce:	f106 0208 	add.w	r2, r6, #8
   19bd2:	e63b      	b.n	1984c <_malloc_r+0x20>
   19bd4:	442a      	add	r2, r5
   19bd6:	4620      	mov	r0, r4
   19bd8:	6853      	ldr	r3, [r2, #4]
   19bda:	f043 0301 	orr.w	r3, r3, #1
   19bde:	6053      	str	r3, [r2, #4]
   19be0:	3508      	adds	r5, #8
   19be2:	f000 f8d3 	bl	19d8c <__malloc_unlock>
   19be6:	e6e9      	b.n	199bc <_malloc_r+0x190>
   19be8:	19a9      	adds	r1, r5, r6
   19bea:	4620      	mov	r0, r4
   19bec:	f046 0601 	orr.w	r6, r6, #1
   19bf0:	f043 0401 	orr.w	r4, r3, #1
   19bf4:	606e      	str	r6, [r5, #4]
   19bf6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   19bfa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   19bfe:	604c      	str	r4, [r1, #4]
   19c00:	50ab      	str	r3, [r5, r2]
   19c02:	f000 f8c3 	bl	19d8c <__malloc_unlock>
   19c06:	3508      	adds	r5, #8
   19c08:	e6d8      	b.n	199bc <_malloc_r+0x190>
   19c0a:	0993      	lsrs	r3, r2, #6
   19c0c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   19c10:	00c9      	lsls	r1, r1, #3
   19c12:	3338      	adds	r3, #56	; 0x38
   19c14:	e79c      	b.n	19b50 <_malloc_r+0x324>
   19c16:	42bd      	cmp	r5, r7
   19c18:	d060      	beq.n	19cdc <_malloc_r+0x4b0>
   19c1a:	68bd      	ldr	r5, [r7, #8]
   19c1c:	686b      	ldr	r3, [r5, #4]
   19c1e:	f023 0b03 	bic.w	fp, r3, #3
   19c22:	455e      	cmp	r6, fp
   19c24:	ebab 0306 	sub.w	r3, fp, r6
   19c28:	d802      	bhi.n	19c30 <_malloc_r+0x404>
   19c2a:	2b0f      	cmp	r3, #15
   19c2c:	f73f af6a 	bgt.w	19b04 <_malloc_r+0x2d8>
   19c30:	4620      	mov	r0, r4
   19c32:	f000 f8ab 	bl	19d8c <__malloc_unlock>
   19c36:	2500      	movs	r5, #0
   19c38:	e6c0      	b.n	199bc <_malloc_r+0x190>
   19c3a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   19c3e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   19c42:	00c3      	lsls	r3, r0, #3
   19c44:	e638      	b.n	198b8 <_malloc_r+0x8c>
   19c46:	f859 3908 	ldr.w	r3, [r9], #-8
   19c4a:	454b      	cmp	r3, r9
   19c4c:	f040 8096 	bne.w	19d7c <_malloc_r+0x550>
   19c50:	f010 0f03 	tst.w	r0, #3
   19c54:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   19c58:	d1f5      	bne.n	19c46 <_malloc_r+0x41a>
   19c5a:	687b      	ldr	r3, [r7, #4]
   19c5c:	ea23 0301 	bic.w	r3, r3, r1
   19c60:	607b      	str	r3, [r7, #4]
   19c62:	0049      	lsls	r1, r1, #1
   19c64:	4299      	cmp	r1, r3
   19c66:	f63f aec4 	bhi.w	199f2 <_malloc_r+0x1c6>
   19c6a:	b919      	cbnz	r1, 19c74 <_malloc_r+0x448>
   19c6c:	e6c1      	b.n	199f2 <_malloc_r+0x1c6>
   19c6e:	0049      	lsls	r1, r1, #1
   19c70:	f10e 0e04 	add.w	lr, lr, #4
   19c74:	4219      	tst	r1, r3
   19c76:	d0fa      	beq.n	19c6e <_malloc_r+0x442>
   19c78:	4670      	mov	r0, lr
   19c7a:	e66b      	b.n	19954 <_malloc_r+0x128>
   19c7c:	f103 0b10 	add.w	fp, r3, #16
   19c80:	e6d4      	b.n	19a2c <_malloc_r+0x200>
   19c82:	109a      	asrs	r2, r3, #2
   19c84:	f04f 0801 	mov.w	r8, #1
   19c88:	687b      	ldr	r3, [r7, #4]
   19c8a:	fa08 f202 	lsl.w	r2, r8, r2
   19c8e:	431a      	orrs	r2, r3
   19c90:	607a      	str	r2, [r7, #4]
   19c92:	e770      	b.n	19b76 <_malloc_r+0x34a>
   19c94:	eb02 010b 	add.w	r1, r2, fp
   19c98:	4249      	negs	r1, r1
   19c9a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   19c9e:	4651      	mov	r1, sl
   19ca0:	4620      	mov	r0, r4
   19ca2:	9301      	str	r3, [sp, #4]
   19ca4:	9200      	str	r2, [sp, #0]
   19ca6:	f002 ffe1 	bl	1cc6c <_sbrk_r>
   19caa:	1c43      	adds	r3, r0, #1
   19cac:	e9dd 2300 	ldrd	r2, r3, [sp]
   19cb0:	f47f aef4 	bne.w	19a9c <_malloc_r+0x270>
   19cb4:	469a      	mov	sl, r3
   19cb6:	e6f4      	b.n	19aa2 <_malloc_r+0x276>
   19cb8:	2b54      	cmp	r3, #84	; 0x54
   19cba:	d826      	bhi.n	19d0a <_malloc_r+0x4de>
   19cbc:	0b13      	lsrs	r3, r2, #12
   19cbe:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   19cc2:	00c9      	lsls	r1, r1, #3
   19cc4:	336e      	adds	r3, #110	; 0x6e
   19cc6:	e743      	b.n	19b50 <_malloc_r+0x324>
   19cc8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   19ccc:	d826      	bhi.n	19d1c <_malloc_r+0x4f0>
   19cce:	0bf3      	lsrs	r3, r6, #15
   19cd0:	f103 0078 	add.w	r0, r3, #120	; 0x78
   19cd4:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   19cd8:	00c3      	lsls	r3, r0, #3
   19cda:	e5ed      	b.n	198b8 <_malloc_r+0x8c>
   19cdc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19ce0:	445b      	add	r3, fp
   19ce2:	f8c9 3004 	str.w	r3, [r9, #4]
   19ce6:	e6b4      	b.n	19a52 <_malloc_r+0x226>
   19ce8:	f3ca 000b 	ubfx	r0, sl, #0, #12
   19cec:	2800      	cmp	r0, #0
   19cee:	f47f aeb0 	bne.w	19a52 <_malloc_r+0x226>
   19cf2:	68bd      	ldr	r5, [r7, #8]
   19cf4:	eb08 030b 	add.w	r3, r8, fp
   19cf8:	f043 0301 	orr.w	r3, r3, #1
   19cfc:	606b      	str	r3, [r5, #4]
   19cfe:	e6f4      	b.n	19aea <_malloc_r+0x2be>
   19d00:	4615      	mov	r5, r2
   19d02:	e6f2      	b.n	19aea <_malloc_r+0x2be>
   19d04:	2301      	movs	r3, #1
   19d06:	6053      	str	r3, [r2, #4]
   19d08:	e792      	b.n	19c30 <_malloc_r+0x404>
   19d0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   19d0e:	d821      	bhi.n	19d54 <_malloc_r+0x528>
   19d10:	0bd3      	lsrs	r3, r2, #15
   19d12:	f103 0178 	add.w	r1, r3, #120	; 0x78
   19d16:	00c9      	lsls	r1, r1, #3
   19d18:	3377      	adds	r3, #119	; 0x77
   19d1a:	e719      	b.n	19b50 <_malloc_r+0x324>
   19d1c:	f240 5254 	movw	r2, #1364	; 0x554
   19d20:	4293      	cmp	r3, r2
   19d22:	d821      	bhi.n	19d68 <_malloc_r+0x53c>
   19d24:	0cb3      	lsrs	r3, r6, #18
   19d26:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   19d2a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   19d2e:	00c3      	lsls	r3, r0, #3
   19d30:	e5c2      	b.n	198b8 <_malloc_r+0x8c>
   19d32:	3b08      	subs	r3, #8
   19d34:	449b      	add	fp, r3
   19d36:	ebab 0b02 	sub.w	fp, fp, r2
   19d3a:	f04f 0a00 	mov.w	sl, #0
   19d3e:	e6b0      	b.n	19aa2 <_malloc_r+0x276>
   19d40:	f105 0108 	add.w	r1, r5, #8
   19d44:	4620      	mov	r0, r4
   19d46:	f003 fb2d 	bl	1d3a4 <_free_r>
   19d4a:	68bd      	ldr	r5, [r7, #8]
   19d4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   19d50:	686b      	ldr	r3, [r5, #4]
   19d52:	e6ca      	b.n	19aea <_malloc_r+0x2be>
   19d54:	f240 5154 	movw	r1, #1364	; 0x554
   19d58:	428b      	cmp	r3, r1
   19d5a:	d80b      	bhi.n	19d74 <_malloc_r+0x548>
   19d5c:	0c93      	lsrs	r3, r2, #18
   19d5e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   19d62:	00c9      	lsls	r1, r1, #3
   19d64:	337c      	adds	r3, #124	; 0x7c
   19d66:	e6f3      	b.n	19b50 <_malloc_r+0x324>
   19d68:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   19d6c:	207f      	movs	r0, #127	; 0x7f
   19d6e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   19d72:	e5a1      	b.n	198b8 <_malloc_r+0x8c>
   19d74:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   19d78:	237e      	movs	r3, #126	; 0x7e
   19d7a:	e6e9      	b.n	19b50 <_malloc_r+0x324>
   19d7c:	687b      	ldr	r3, [r7, #4]
   19d7e:	e770      	b.n	19c62 <_malloc_r+0x436>

00019d80 <__malloc_lock>:
   19d80:	4801      	ldr	r0, [pc, #4]	; (19d88 <__malloc_lock+0x8>)
   19d82:	f002 bfcf 	b.w	1cd24 <__retarget_lock_acquire_recursive>
   19d86:	bf00      	nop
   19d88:	2000d534 	.word	0x2000d534

00019d8c <__malloc_unlock>:
   19d8c:	4801      	ldr	r0, [pc, #4]	; (19d94 <__malloc_unlock+0x8>)
   19d8e:	f002 bfd1 	b.w	1cd34 <__retarget_lock_release_recursive>
   19d92:	bf00      	nop
   19d94:	2000d534 	.word	0x2000d534

00019d98 <_realloc_r>:
   19d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d9c:	4617      	mov	r7, r2
   19d9e:	2900      	cmp	r1, #0
   19da0:	f000 8098 	beq.w	19ed4 <_realloc_r+0x13c>
   19da4:	460c      	mov	r4, r1
   19da6:	f107 050b 	add.w	r5, r7, #11
   19daa:	4680      	mov	r8, r0
   19dac:	f7ff ffe8 	bl	19d80 <__malloc_lock>
   19db0:	2d16      	cmp	r5, #22
   19db2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   19db6:	d85b      	bhi.n	19e70 <_realloc_r+0xd8>
   19db8:	2510      	movs	r5, #16
   19dba:	462a      	mov	r2, r5
   19dbc:	42af      	cmp	r7, r5
   19dbe:	d85c      	bhi.n	19e7a <_realloc_r+0xe2>
   19dc0:	f021 0603 	bic.w	r6, r1, #3
   19dc4:	4296      	cmp	r6, r2
   19dc6:	f1a4 0908 	sub.w	r9, r4, #8
   19dca:	da62      	bge.n	19e92 <_realloc_r+0xfa>
   19dcc:	4bbc      	ldr	r3, [pc, #752]	; (1a0c0 <_realloc_r+0x328>)
   19dce:	f8d3 c008 	ldr.w	ip, [r3, #8]
   19dd2:	eb09 0006 	add.w	r0, r9, r6
   19dd6:	4584      	cmp	ip, r0
   19dd8:	f000 8097 	beq.w	19f0a <_realloc_r+0x172>
   19ddc:	f8d0 c004 	ldr.w	ip, [r0, #4]
   19de0:	f02c 0301 	bic.w	r3, ip, #1
   19de4:	4403      	add	r3, r0
   19de6:	685b      	ldr	r3, [r3, #4]
   19de8:	07db      	lsls	r3, r3, #31
   19dea:	d468      	bmi.n	19ebe <_realloc_r+0x126>
   19dec:	f02c 0c03 	bic.w	ip, ip, #3
   19df0:	eb06 030c 	add.w	r3, r6, ip
   19df4:	4293      	cmp	r3, r2
   19df6:	da47      	bge.n	19e88 <_realloc_r+0xf0>
   19df8:	07cb      	lsls	r3, r1, #31
   19dfa:	d410      	bmi.n	19e1e <_realloc_r+0x86>
   19dfc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19e00:	eba9 0a03 	sub.w	sl, r9, r3
   19e04:	f8da 3004 	ldr.w	r3, [sl, #4]
   19e08:	f023 0103 	bic.w	r1, r3, #3
   19e0c:	448c      	add	ip, r1
   19e0e:	44b4      	add	ip, r6
   19e10:	4594      	cmp	ip, r2
   19e12:	f280 8111 	bge.w	1a038 <_realloc_r+0x2a0>
   19e16:	1873      	adds	r3, r6, r1
   19e18:	4293      	cmp	r3, r2
   19e1a:	f280 80e8 	bge.w	19fee <_realloc_r+0x256>
   19e1e:	4639      	mov	r1, r7
   19e20:	4640      	mov	r0, r8
   19e22:	f7ff fd03 	bl	1982c <_malloc_r>
   19e26:	4607      	mov	r7, r0
   19e28:	b1e0      	cbz	r0, 19e64 <_realloc_r+0xcc>
   19e2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19e2e:	f023 0301 	bic.w	r3, r3, #1
   19e32:	444b      	add	r3, r9
   19e34:	f1a0 0208 	sub.w	r2, r0, #8
   19e38:	4293      	cmp	r3, r2
   19e3a:	f000 80d2 	beq.w	19fe2 <_realloc_r+0x24a>
   19e3e:	1f32      	subs	r2, r6, #4
   19e40:	2a24      	cmp	r2, #36	; 0x24
   19e42:	f200 80f5 	bhi.w	1a030 <_realloc_r+0x298>
   19e46:	2a13      	cmp	r2, #19
   19e48:	f200 80ac 	bhi.w	19fa4 <_realloc_r+0x20c>
   19e4c:	4603      	mov	r3, r0
   19e4e:	4622      	mov	r2, r4
   19e50:	6811      	ldr	r1, [r2, #0]
   19e52:	6019      	str	r1, [r3, #0]
   19e54:	6851      	ldr	r1, [r2, #4]
   19e56:	6059      	str	r1, [r3, #4]
   19e58:	6892      	ldr	r2, [r2, #8]
   19e5a:	609a      	str	r2, [r3, #8]
   19e5c:	4621      	mov	r1, r4
   19e5e:	4640      	mov	r0, r8
   19e60:	f003 faa0 	bl	1d3a4 <_free_r>
   19e64:	4640      	mov	r0, r8
   19e66:	f7ff ff91 	bl	19d8c <__malloc_unlock>
   19e6a:	4638      	mov	r0, r7
   19e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e70:	f025 0507 	bic.w	r5, r5, #7
   19e74:	2d00      	cmp	r5, #0
   19e76:	462a      	mov	r2, r5
   19e78:	daa0      	bge.n	19dbc <_realloc_r+0x24>
   19e7a:	230c      	movs	r3, #12
   19e7c:	f8c8 3000 	str.w	r3, [r8]
   19e80:	2700      	movs	r7, #0
   19e82:	4638      	mov	r0, r7
   19e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e88:	461e      	mov	r6, r3
   19e8a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   19e8e:	60d3      	str	r3, [r2, #12]
   19e90:	609a      	str	r2, [r3, #8]
   19e92:	1b73      	subs	r3, r6, r5
   19e94:	2b0f      	cmp	r3, #15
   19e96:	d822      	bhi.n	19ede <_realloc_r+0x146>
   19e98:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19e9c:	f003 0301 	and.w	r3, r3, #1
   19ea0:	4333      	orrs	r3, r6
   19ea2:	444e      	add	r6, r9
   19ea4:	f8c9 3004 	str.w	r3, [r9, #4]
   19ea8:	6873      	ldr	r3, [r6, #4]
   19eaa:	f043 0301 	orr.w	r3, r3, #1
   19eae:	6073      	str	r3, [r6, #4]
   19eb0:	4640      	mov	r0, r8
   19eb2:	4627      	mov	r7, r4
   19eb4:	f7ff ff6a 	bl	19d8c <__malloc_unlock>
   19eb8:	4638      	mov	r0, r7
   19eba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ebe:	07c9      	lsls	r1, r1, #31
   19ec0:	d4ad      	bmi.n	19e1e <_realloc_r+0x86>
   19ec2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19ec6:	eba9 0a03 	sub.w	sl, r9, r3
   19eca:	f8da 1004 	ldr.w	r1, [sl, #4]
   19ece:	f021 0103 	bic.w	r1, r1, #3
   19ed2:	e7a0      	b.n	19e16 <_realloc_r+0x7e>
   19ed4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ed8:	4611      	mov	r1, r2
   19eda:	f7ff bca7 	b.w	1982c <_malloc_r>
   19ede:	f8d9 2004 	ldr.w	r2, [r9, #4]
   19ee2:	eb09 0105 	add.w	r1, r9, r5
   19ee6:	f002 0201 	and.w	r2, r2, #1
   19eea:	444e      	add	r6, r9
   19eec:	f043 0301 	orr.w	r3, r3, #1
   19ef0:	432a      	orrs	r2, r5
   19ef2:	f8c9 2004 	str.w	r2, [r9, #4]
   19ef6:	604b      	str	r3, [r1, #4]
   19ef8:	6873      	ldr	r3, [r6, #4]
   19efa:	f043 0301 	orr.w	r3, r3, #1
   19efe:	3108      	adds	r1, #8
   19f00:	6073      	str	r3, [r6, #4]
   19f02:	4640      	mov	r0, r8
   19f04:	f003 fa4e 	bl	1d3a4 <_free_r>
   19f08:	e7d2      	b.n	19eb0 <_realloc_r+0x118>
   19f0a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   19f0e:	f020 0b03 	bic.w	fp, r0, #3
   19f12:	eb06 0c0b 	add.w	ip, r6, fp
   19f16:	f105 0010 	add.w	r0, r5, #16
   19f1a:	4584      	cmp	ip, r0
   19f1c:	da4d      	bge.n	19fba <_realloc_r+0x222>
   19f1e:	07c9      	lsls	r1, r1, #31
   19f20:	f53f af7d 	bmi.w	19e1e <_realloc_r+0x86>
   19f24:	f854 1c08 	ldr.w	r1, [r4, #-8]
   19f28:	eba9 0a01 	sub.w	sl, r9, r1
   19f2c:	f8da 1004 	ldr.w	r1, [sl, #4]
   19f30:	f021 0103 	bic.w	r1, r1, #3
   19f34:	448b      	add	fp, r1
   19f36:	44b3      	add	fp, r6
   19f38:	4558      	cmp	r0, fp
   19f3a:	f73f af6c 	bgt.w	19e16 <_realloc_r+0x7e>
   19f3e:	4657      	mov	r7, sl
   19f40:	f8da 100c 	ldr.w	r1, [sl, #12]
   19f44:	f857 0f08 	ldr.w	r0, [r7, #8]!
   19f48:	1f32      	subs	r2, r6, #4
   19f4a:	2a24      	cmp	r2, #36	; 0x24
   19f4c:	60c1      	str	r1, [r0, #12]
   19f4e:	6088      	str	r0, [r1, #8]
   19f50:	f200 80db 	bhi.w	1a10a <_realloc_r+0x372>
   19f54:	2a13      	cmp	r2, #19
   19f56:	f240 80d6 	bls.w	1a106 <_realloc_r+0x36e>
   19f5a:	6821      	ldr	r1, [r4, #0]
   19f5c:	f8ca 1008 	str.w	r1, [sl, #8]
   19f60:	6861      	ldr	r1, [r4, #4]
   19f62:	f8ca 100c 	str.w	r1, [sl, #12]
   19f66:	2a1b      	cmp	r2, #27
   19f68:	f200 80df 	bhi.w	1a12a <_realloc_r+0x392>
   19f6c:	3408      	adds	r4, #8
   19f6e:	f10a 0210 	add.w	r2, sl, #16
   19f72:	6821      	ldr	r1, [r4, #0]
   19f74:	6011      	str	r1, [r2, #0]
   19f76:	6861      	ldr	r1, [r4, #4]
   19f78:	6051      	str	r1, [r2, #4]
   19f7a:	68a1      	ldr	r1, [r4, #8]
   19f7c:	6091      	str	r1, [r2, #8]
   19f7e:	eb0a 0105 	add.w	r1, sl, r5
   19f82:	ebab 0205 	sub.w	r2, fp, r5
   19f86:	f042 0201 	orr.w	r2, r2, #1
   19f8a:	6099      	str	r1, [r3, #8]
   19f8c:	604a      	str	r2, [r1, #4]
   19f8e:	f8da 3004 	ldr.w	r3, [sl, #4]
   19f92:	f003 0301 	and.w	r3, r3, #1
   19f96:	432b      	orrs	r3, r5
   19f98:	4640      	mov	r0, r8
   19f9a:	f8ca 3004 	str.w	r3, [sl, #4]
   19f9e:	f7ff fef5 	bl	19d8c <__malloc_unlock>
   19fa2:	e76e      	b.n	19e82 <_realloc_r+0xea>
   19fa4:	6823      	ldr	r3, [r4, #0]
   19fa6:	6003      	str	r3, [r0, #0]
   19fa8:	6863      	ldr	r3, [r4, #4]
   19faa:	6043      	str	r3, [r0, #4]
   19fac:	2a1b      	cmp	r2, #27
   19fae:	d868      	bhi.n	1a082 <_realloc_r+0x2ea>
   19fb0:	f104 0208 	add.w	r2, r4, #8
   19fb4:	f100 0308 	add.w	r3, r0, #8
   19fb8:	e74a      	b.n	19e50 <_realloc_r+0xb8>
   19fba:	eb09 0205 	add.w	r2, r9, r5
   19fbe:	609a      	str	r2, [r3, #8]
   19fc0:	ebac 0305 	sub.w	r3, ip, r5
   19fc4:	f043 0301 	orr.w	r3, r3, #1
   19fc8:	6053      	str	r3, [r2, #4]
   19fca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19fce:	f003 0301 	and.w	r3, r3, #1
   19fd2:	432b      	orrs	r3, r5
   19fd4:	4640      	mov	r0, r8
   19fd6:	f844 3c04 	str.w	r3, [r4, #-4]
   19fda:	f7ff fed7 	bl	19d8c <__malloc_unlock>
   19fde:	4627      	mov	r7, r4
   19fe0:	e74f      	b.n	19e82 <_realloc_r+0xea>
   19fe2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   19fe6:	f023 0303 	bic.w	r3, r3, #3
   19fea:	441e      	add	r6, r3
   19fec:	e751      	b.n	19e92 <_realloc_r+0xfa>
   19fee:	4657      	mov	r7, sl
   19ff0:	f8da 100c 	ldr.w	r1, [sl, #12]
   19ff4:	f857 0f08 	ldr.w	r0, [r7, #8]!
   19ff8:	1f32      	subs	r2, r6, #4
   19ffa:	2a24      	cmp	r2, #36	; 0x24
   19ffc:	60c1      	str	r1, [r0, #12]
   19ffe:	6088      	str	r0, [r1, #8]
   1a000:	d84c      	bhi.n	1a09c <_realloc_r+0x304>
   1a002:	2a13      	cmp	r2, #19
   1a004:	d948      	bls.n	1a098 <_realloc_r+0x300>
   1a006:	6821      	ldr	r1, [r4, #0]
   1a008:	f8ca 1008 	str.w	r1, [sl, #8]
   1a00c:	6861      	ldr	r1, [r4, #4]
   1a00e:	f8ca 100c 	str.w	r1, [sl, #12]
   1a012:	2a1b      	cmp	r2, #27
   1a014:	d856      	bhi.n	1a0c4 <_realloc_r+0x32c>
   1a016:	3408      	adds	r4, #8
   1a018:	f10a 0210 	add.w	r2, sl, #16
   1a01c:	461e      	mov	r6, r3
   1a01e:	6823      	ldr	r3, [r4, #0]
   1a020:	6013      	str	r3, [r2, #0]
   1a022:	6863      	ldr	r3, [r4, #4]
   1a024:	6053      	str	r3, [r2, #4]
   1a026:	68a3      	ldr	r3, [r4, #8]
   1a028:	6093      	str	r3, [r2, #8]
   1a02a:	46d1      	mov	r9, sl
   1a02c:	463c      	mov	r4, r7
   1a02e:	e730      	b.n	19e92 <_realloc_r+0xfa>
   1a030:	4621      	mov	r1, r4
   1a032:	f001 fc85 	bl	1b940 <memmove>
   1a036:	e711      	b.n	19e5c <_realloc_r+0xc4>
   1a038:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   1a03c:	4657      	mov	r7, sl
   1a03e:	60cb      	str	r3, [r1, #12]
   1a040:	6099      	str	r1, [r3, #8]
   1a042:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1a046:	f8da 300c 	ldr.w	r3, [sl, #12]
   1a04a:	60cb      	str	r3, [r1, #12]
   1a04c:	1f32      	subs	r2, r6, #4
   1a04e:	2a24      	cmp	r2, #36	; 0x24
   1a050:	6099      	str	r1, [r3, #8]
   1a052:	d82d      	bhi.n	1a0b0 <_realloc_r+0x318>
   1a054:	2a13      	cmp	r2, #19
   1a056:	d929      	bls.n	1a0ac <_realloc_r+0x314>
   1a058:	6823      	ldr	r3, [r4, #0]
   1a05a:	f8ca 3008 	str.w	r3, [sl, #8]
   1a05e:	6863      	ldr	r3, [r4, #4]
   1a060:	f8ca 300c 	str.w	r3, [sl, #12]
   1a064:	2a1b      	cmp	r2, #27
   1a066:	d842      	bhi.n	1a0ee <_realloc_r+0x356>
   1a068:	3408      	adds	r4, #8
   1a06a:	f10a 0310 	add.w	r3, sl, #16
   1a06e:	6822      	ldr	r2, [r4, #0]
   1a070:	601a      	str	r2, [r3, #0]
   1a072:	6862      	ldr	r2, [r4, #4]
   1a074:	605a      	str	r2, [r3, #4]
   1a076:	68a2      	ldr	r2, [r4, #8]
   1a078:	609a      	str	r2, [r3, #8]
   1a07a:	4666      	mov	r6, ip
   1a07c:	46d1      	mov	r9, sl
   1a07e:	463c      	mov	r4, r7
   1a080:	e707      	b.n	19e92 <_realloc_r+0xfa>
   1a082:	68a3      	ldr	r3, [r4, #8]
   1a084:	6083      	str	r3, [r0, #8]
   1a086:	68e3      	ldr	r3, [r4, #12]
   1a088:	60c3      	str	r3, [r0, #12]
   1a08a:	2a24      	cmp	r2, #36	; 0x24
   1a08c:	d026      	beq.n	1a0dc <_realloc_r+0x344>
   1a08e:	f104 0210 	add.w	r2, r4, #16
   1a092:	f100 0310 	add.w	r3, r0, #16
   1a096:	e6db      	b.n	19e50 <_realloc_r+0xb8>
   1a098:	463a      	mov	r2, r7
   1a09a:	e7bf      	b.n	1a01c <_realloc_r+0x284>
   1a09c:	4621      	mov	r1, r4
   1a09e:	4638      	mov	r0, r7
   1a0a0:	461e      	mov	r6, r3
   1a0a2:	46d1      	mov	r9, sl
   1a0a4:	f001 fc4c 	bl	1b940 <memmove>
   1a0a8:	463c      	mov	r4, r7
   1a0aa:	e6f2      	b.n	19e92 <_realloc_r+0xfa>
   1a0ac:	463b      	mov	r3, r7
   1a0ae:	e7de      	b.n	1a06e <_realloc_r+0x2d6>
   1a0b0:	4621      	mov	r1, r4
   1a0b2:	4638      	mov	r0, r7
   1a0b4:	4666      	mov	r6, ip
   1a0b6:	46d1      	mov	r9, sl
   1a0b8:	f001 fc42 	bl	1b940 <memmove>
   1a0bc:	463c      	mov	r4, r7
   1a0be:	e6e8      	b.n	19e92 <_realloc_r+0xfa>
   1a0c0:	20008f0c 	.word	0x20008f0c
   1a0c4:	68a1      	ldr	r1, [r4, #8]
   1a0c6:	f8ca 1010 	str.w	r1, [sl, #16]
   1a0ca:	68e1      	ldr	r1, [r4, #12]
   1a0cc:	f8ca 1014 	str.w	r1, [sl, #20]
   1a0d0:	2a24      	cmp	r2, #36	; 0x24
   1a0d2:	d020      	beq.n	1a116 <_realloc_r+0x37e>
   1a0d4:	3410      	adds	r4, #16
   1a0d6:	f10a 0218 	add.w	r2, sl, #24
   1a0da:	e79f      	b.n	1a01c <_realloc_r+0x284>
   1a0dc:	6923      	ldr	r3, [r4, #16]
   1a0de:	6103      	str	r3, [r0, #16]
   1a0e0:	6961      	ldr	r1, [r4, #20]
   1a0e2:	6141      	str	r1, [r0, #20]
   1a0e4:	f104 0218 	add.w	r2, r4, #24
   1a0e8:	f100 0318 	add.w	r3, r0, #24
   1a0ec:	e6b0      	b.n	19e50 <_realloc_r+0xb8>
   1a0ee:	68a3      	ldr	r3, [r4, #8]
   1a0f0:	f8ca 3010 	str.w	r3, [sl, #16]
   1a0f4:	68e3      	ldr	r3, [r4, #12]
   1a0f6:	f8ca 3014 	str.w	r3, [sl, #20]
   1a0fa:	2a24      	cmp	r2, #36	; 0x24
   1a0fc:	d021      	beq.n	1a142 <_realloc_r+0x3aa>
   1a0fe:	3410      	adds	r4, #16
   1a100:	f10a 0318 	add.w	r3, sl, #24
   1a104:	e7b3      	b.n	1a06e <_realloc_r+0x2d6>
   1a106:	463a      	mov	r2, r7
   1a108:	e733      	b.n	19f72 <_realloc_r+0x1da>
   1a10a:	4621      	mov	r1, r4
   1a10c:	4638      	mov	r0, r7
   1a10e:	f001 fc17 	bl	1b940 <memmove>
   1a112:	4b16      	ldr	r3, [pc, #88]	; (1a16c <_realloc_r+0x3d4>)
   1a114:	e733      	b.n	19f7e <_realloc_r+0x1e6>
   1a116:	6922      	ldr	r2, [r4, #16]
   1a118:	f8ca 2018 	str.w	r2, [sl, #24]
   1a11c:	6962      	ldr	r2, [r4, #20]
   1a11e:	f8ca 201c 	str.w	r2, [sl, #28]
   1a122:	3418      	adds	r4, #24
   1a124:	f10a 0220 	add.w	r2, sl, #32
   1a128:	e778      	b.n	1a01c <_realloc_r+0x284>
   1a12a:	68a1      	ldr	r1, [r4, #8]
   1a12c:	f8ca 1010 	str.w	r1, [sl, #16]
   1a130:	68e1      	ldr	r1, [r4, #12]
   1a132:	f8ca 1014 	str.w	r1, [sl, #20]
   1a136:	2a24      	cmp	r2, #36	; 0x24
   1a138:	d00d      	beq.n	1a156 <_realloc_r+0x3be>
   1a13a:	3410      	adds	r4, #16
   1a13c:	f10a 0218 	add.w	r2, sl, #24
   1a140:	e717      	b.n	19f72 <_realloc_r+0x1da>
   1a142:	6923      	ldr	r3, [r4, #16]
   1a144:	f8ca 3018 	str.w	r3, [sl, #24]
   1a148:	6963      	ldr	r3, [r4, #20]
   1a14a:	f8ca 301c 	str.w	r3, [sl, #28]
   1a14e:	3418      	adds	r4, #24
   1a150:	f10a 0320 	add.w	r3, sl, #32
   1a154:	e78b      	b.n	1a06e <_realloc_r+0x2d6>
   1a156:	6922      	ldr	r2, [r4, #16]
   1a158:	f8ca 2018 	str.w	r2, [sl, #24]
   1a15c:	6962      	ldr	r2, [r4, #20]
   1a15e:	f8ca 201c 	str.w	r2, [sl, #28]
   1a162:	3418      	adds	r4, #24
   1a164:	f10a 0220 	add.w	r2, sl, #32
   1a168:	e703      	b.n	19f72 <_realloc_r+0x1da>
   1a16a:	bf00      	nop
   1a16c:	20008f0c 	.word	0x20008f0c

0001a170 <_strtod_l>:
   1a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a174:	ed2d 8b10 	vpush	{d8-d15}
   1a178:	b097      	sub	sp, #92	; 0x5c
   1a17a:	468a      	mov	sl, r1
   1a17c:	2100      	movs	r1, #0
   1a17e:	9207      	str	r2, [sp, #28]
   1a180:	9112      	str	r1, [sp, #72]	; 0x48
   1a182:	2200      	movs	r2, #0
   1a184:	2100      	movs	r1, #0
   1a186:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1a18a:	4680      	mov	r8, r0
   1a18c:	4651      	mov	r1, sl
   1a18e:	9111      	str	r1, [sp, #68]	; 0x44
   1a190:	460f      	mov	r7, r1
   1a192:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a196:	2a2d      	cmp	r2, #45	; 0x2d
   1a198:	d85e      	bhi.n	1a258 <_strtod_l+0xe8>
   1a19a:	a001      	add	r0, pc, #4	; (adr r0, 1a1a0 <_strtod_l+0x30>)
   1a19c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   1a1a0:	0001a341 	.word	0x0001a341
   1a1a4:	0001a259 	.word	0x0001a259
   1a1a8:	0001a259 	.word	0x0001a259
   1a1ac:	0001a259 	.word	0x0001a259
   1a1b0:	0001a259 	.word	0x0001a259
   1a1b4:	0001a259 	.word	0x0001a259
   1a1b8:	0001a259 	.word	0x0001a259
   1a1bc:	0001a259 	.word	0x0001a259
   1a1c0:	0001a259 	.word	0x0001a259
   1a1c4:	0001a18f 	.word	0x0001a18f
   1a1c8:	0001a18f 	.word	0x0001a18f
   1a1cc:	0001a18f 	.word	0x0001a18f
   1a1d0:	0001a18f 	.word	0x0001a18f
   1a1d4:	0001a18f 	.word	0x0001a18f
   1a1d8:	0001a259 	.word	0x0001a259
   1a1dc:	0001a259 	.word	0x0001a259
   1a1e0:	0001a259 	.word	0x0001a259
   1a1e4:	0001a259 	.word	0x0001a259
   1a1e8:	0001a259 	.word	0x0001a259
   1a1ec:	0001a259 	.word	0x0001a259
   1a1f0:	0001a259 	.word	0x0001a259
   1a1f4:	0001a259 	.word	0x0001a259
   1a1f8:	0001a259 	.word	0x0001a259
   1a1fc:	0001a259 	.word	0x0001a259
   1a200:	0001a259 	.word	0x0001a259
   1a204:	0001a259 	.word	0x0001a259
   1a208:	0001a259 	.word	0x0001a259
   1a20c:	0001a259 	.word	0x0001a259
   1a210:	0001a259 	.word	0x0001a259
   1a214:	0001a259 	.word	0x0001a259
   1a218:	0001a259 	.word	0x0001a259
   1a21c:	0001a259 	.word	0x0001a259
   1a220:	0001a18f 	.word	0x0001a18f
   1a224:	0001a259 	.word	0x0001a259
   1a228:	0001a259 	.word	0x0001a259
   1a22c:	0001a259 	.word	0x0001a259
   1a230:	0001a259 	.word	0x0001a259
   1a234:	0001a259 	.word	0x0001a259
   1a238:	0001a259 	.word	0x0001a259
   1a23c:	0001a259 	.word	0x0001a259
   1a240:	0001a259 	.word	0x0001a259
   1a244:	0001a259 	.word	0x0001a259
   1a248:	0001a259 	.word	0x0001a259
   1a24c:	0001a97b 	.word	0x0001a97b
   1a250:	0001a259 	.word	0x0001a259
   1a254:	0001a967 	.word	0x0001a967
   1a258:	2100      	movs	r1, #0
   1a25a:	9109      	str	r1, [sp, #36]	; 0x24
   1a25c:	2a30      	cmp	r2, #48	; 0x30
   1a25e:	d07d      	beq.n	1a35c <_strtod_l+0x1ec>
   1a260:	2300      	movs	r3, #0
   1a262:	9308      	str	r3, [sp, #32]
   1a264:	2a2f      	cmp	r2, #47	; 0x2f
   1a266:	4614      	mov	r4, r2
   1a268:	f240 84cd 	bls.w	1ac06 <_strtod_l+0xa96>
   1a26c:	f04f 0900 	mov.w	r9, #0
   1a270:	4638      	mov	r0, r7
   1a272:	464e      	mov	r6, r9
   1a274:	464d      	mov	r5, r9
   1a276:	e012      	b.n	1a29e <_strtod_l+0x12e>
   1a278:	3001      	adds	r0, #1
   1a27a:	2d08      	cmp	r5, #8
   1a27c:	9011      	str	r0, [sp, #68]	; 0x44
   1a27e:	bfc8      	it	gt
   1a280:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   1a284:	7804      	ldrb	r4, [r0, #0]
   1a286:	bfc6      	itte	gt
   1a288:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   1a28c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   1a290:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   1a294:	2c2f      	cmp	r4, #47	; 0x2f
   1a296:	f105 0501 	add.w	r5, r5, #1
   1a29a:	4622      	mov	r2, r4
   1a29c:	dd6f      	ble.n	1a37e <_strtod_l+0x20e>
   1a29e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1a2a2:	2c39      	cmp	r4, #57	; 0x39
   1a2a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1a2a8:	dde6      	ble.n	1a278 <_strtod_l+0x108>
   1a2aa:	499f      	ldr	r1, [pc, #636]	; (1a528 <_strtod_l+0x3b8>)
   1a2ac:	2201      	movs	r2, #1
   1a2ae:	f001 fca9 	bl	1bc04 <strncmp>
   1a2b2:	2800      	cmp	r0, #0
   1a2b4:	d137      	bne.n	1a326 <_strtod_l+0x1b6>
   1a2b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a2b8:	461a      	mov	r2, r3
   1a2ba:	3301      	adds	r3, #1
   1a2bc:	9311      	str	r3, [sp, #68]	; 0x44
   1a2be:	7854      	ldrb	r4, [r2, #1]
   1a2c0:	2d00      	cmp	r5, #0
   1a2c2:	f040 8543 	bne.w	1ad4c <_strtod_l+0xbdc>
   1a2c6:	2c30      	cmp	r4, #48	; 0x30
   1a2c8:	f040 8524 	bne.w	1ad14 <_strtod_l+0xba4>
   1a2cc:	f1c3 0201 	rsb	r2, r3, #1
   1a2d0:	1898      	adds	r0, r3, r2
   1a2d2:	3301      	adds	r3, #1
   1a2d4:	9311      	str	r3, [sp, #68]	; 0x44
   1a2d6:	781c      	ldrb	r4, [r3, #0]
   1a2d8:	2c30      	cmp	r4, #48	; 0x30
   1a2da:	d0f9      	beq.n	1a2d0 <_strtod_l+0x160>
   1a2dc:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   1a2e0:	2b08      	cmp	r3, #8
   1a2e2:	f200 8301 	bhi.w	1a8e8 <_strtod_l+0x778>
   1a2e6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1a2e8:	1c43      	adds	r3, r0, #1
   1a2ea:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1a2ee:	930b      	str	r3, [sp, #44]	; 0x2c
   1a2f0:	2501      	movs	r5, #1
   1a2f2:	46bc      	mov	ip, r7
   1a2f4:	f04f 0e00 	mov.w	lr, #0
   1a2f8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1a2fc:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   1a300:	2000      	movs	r0, #0
   1a302:	f10c 0301 	add.w	r3, ip, #1
   1a306:	9311      	str	r3, [sp, #68]	; 0x44
   1a308:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1a30c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   1a310:	2909      	cmp	r1, #9
   1a312:	f200 82bb 	bhi.w	1a88c <_strtod_l+0x71c>
   1a316:	3001      	adds	r0, #1
   1a318:	468b      	mov	fp, r1
   1a31a:	2900      	cmp	r1, #0
   1a31c:	f040 844f 	bne.w	1abbe <_strtod_l+0xa4e>
   1a320:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1a324:	e7ed      	b.n	1a302 <_strtod_l+0x192>
   1a326:	2000      	movs	r0, #0
   1a328:	2c65      	cmp	r4, #101	; 0x65
   1a32a:	46ae      	mov	lr, r5
   1a32c:	900b      	str	r0, [sp, #44]	; 0x2c
   1a32e:	4684      	mov	ip, r0
   1a330:	d001      	beq.n	1a336 <_strtod_l+0x1c6>
   1a332:	2c45      	cmp	r4, #69	; 0x45
   1a334:	d130      	bne.n	1a398 <_strtod_l+0x228>
   1a336:	2d00      	cmp	r5, #0
   1a338:	d16b      	bne.n	1a412 <_strtod_l+0x2a2>
   1a33a:	9b08      	ldr	r3, [sp, #32]
   1a33c:	4303      	orrs	r3, r0
   1a33e:	d167      	bne.n	1a410 <_strtod_l+0x2a0>
   1a340:	9b07      	ldr	r3, [sp, #28]
   1a342:	ed9f 8b77 	vldr	d8, [pc, #476]	; 1a520 <_strtod_l+0x3b0>
   1a346:	b113      	cbz	r3, 1a34e <_strtod_l+0x1de>
   1a348:	9b07      	ldr	r3, [sp, #28]
   1a34a:	f8c3 a000 	str.w	sl, [r3]
   1a34e:	eeb0 0b48 	vmov.f64	d0, d8
   1a352:	b017      	add	sp, #92	; 0x5c
   1a354:	ecbd 8b10 	vpop	{d8-d15}
   1a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a35c:	787a      	ldrb	r2, [r7, #1]
   1a35e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1a362:	2a58      	cmp	r2, #88	; 0x58
   1a364:	f000 840c 	beq.w	1ab80 <_strtod_l+0xa10>
   1a368:	3701      	adds	r7, #1
   1a36a:	9711      	str	r7, [sp, #68]	; 0x44
   1a36c:	783a      	ldrb	r2, [r7, #0]
   1a36e:	2a30      	cmp	r2, #48	; 0x30
   1a370:	d0fa      	beq.n	1a368 <_strtod_l+0x1f8>
   1a372:	2a00      	cmp	r2, #0
   1a374:	f000 80b7 	beq.w	1a4e6 <_strtod_l+0x376>
   1a378:	2301      	movs	r3, #1
   1a37a:	9308      	str	r3, [sp, #32]
   1a37c:	e772      	b.n	1a264 <_strtod_l+0xf4>
   1a37e:	496a      	ldr	r1, [pc, #424]	; (1a528 <_strtod_l+0x3b8>)
   1a380:	2201      	movs	r2, #1
   1a382:	f001 fc3f 	bl	1bc04 <strncmp>
   1a386:	2800      	cmp	r0, #0
   1a388:	f000 80c0 	beq.w	1a50c <_strtod_l+0x39c>
   1a38c:	46ae      	mov	lr, r5
   1a38e:	f04f 0c00 	mov.w	ip, #0
   1a392:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1a396:	4660      	mov	r0, ip
   1a398:	f04f 0b00 	mov.w	fp, #0
   1a39c:	2d00      	cmp	r5, #0
   1a39e:	d07e      	beq.n	1a49e <_strtod_l+0x32e>
   1a3a0:	ee07 6a90 	vmov	s15, r6
   1a3a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   1a3aa:	ebab 0303 	sub.w	r3, fp, r3
   1a3ae:	f1be 0f00 	cmp.w	lr, #0
   1a3b2:	bf08      	it	eq
   1a3b4:	46ae      	moveq	lr, r5
   1a3b6:	2d10      	cmp	r5, #16
   1a3b8:	930a      	str	r3, [sp, #40]	; 0x28
   1a3ba:	462b      	mov	r3, r5
   1a3bc:	bfa8      	it	ge
   1a3be:	2310      	movge	r3, #16
   1a3c0:	2d09      	cmp	r5, #9
   1a3c2:	ed8d 7b04 	vstr	d7, [sp, #16]
   1a3c6:	dd0c      	ble.n	1a3e2 <_strtod_l+0x272>
   1a3c8:	4a58      	ldr	r2, [pc, #352]	; (1a52c <_strtod_l+0x3bc>)
   1a3ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a3ce:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   1a3d2:	ee06 9a90 	vmov	s13, r9
   1a3d6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   1a3da:	eea7 6b05 	vfma.f64	d6, d7, d5
   1a3de:	ed8d 6b04 	vstr	d6, [sp, #16]
   1a3e2:	2d0f      	cmp	r5, #15
   1a3e4:	f300 80a8 	bgt.w	1a538 <_strtod_l+0x3c8>
   1a3e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a3ea:	2a00      	cmp	r2, #0
   1a3ec:	f000 83e4 	beq.w	1abb8 <_strtod_l+0xa48>
   1a3f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a3f2:	f340 833c 	ble.w	1aa6e <_strtod_l+0x8fe>
   1a3f6:	2a16      	cmp	r2, #22
   1a3f8:	f340 8498 	ble.w	1ad2c <_strtod_l+0xbbc>
   1a3fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a3fe:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   1a402:	428a      	cmp	r2, r1
   1a404:	f280 84a6 	bge.w	1ad54 <_strtod_l+0xbe4>
   1a408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a40a:	1aeb      	subs	r3, r5, r3
   1a40c:	4413      	add	r3, r2
   1a40e:	e099      	b.n	1a544 <_strtod_l+0x3d4>
   1a410:	2500      	movs	r5, #0
   1a412:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   1a416:	f10a 0301 	add.w	r3, sl, #1
   1a41a:	9311      	str	r3, [sp, #68]	; 0x44
   1a41c:	f89a 4001 	ldrb.w	r4, [sl, #1]
   1a420:	2c2b      	cmp	r4, #43	; 0x2b
   1a422:	f000 825e 	beq.w	1a8e2 <_strtod_l+0x772>
   1a426:	2c2d      	cmp	r4, #45	; 0x2d
   1a428:	f000 81f7 	beq.w	1a81a <_strtod_l+0x6aa>
   1a42c:	2300      	movs	r3, #0
   1a42e:	930a      	str	r3, [sp, #40]	; 0x28
   1a430:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1a434:	2b09      	cmp	r3, #9
   1a436:	f200 81eb 	bhi.w	1a810 <_strtod_l+0x6a0>
   1a43a:	2c30      	cmp	r4, #48	; 0x30
   1a43c:	d105      	bne.n	1a44a <_strtod_l+0x2da>
   1a43e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a440:	3301      	adds	r3, #1
   1a442:	9311      	str	r3, [sp, #68]	; 0x44
   1a444:	781c      	ldrb	r4, [r3, #0]
   1a446:	2c30      	cmp	r4, #48	; 0x30
   1a448:	d0fa      	beq.n	1a440 <_strtod_l+0x2d0>
   1a44a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   1a44e:	2b08      	cmp	r3, #8
   1a450:	d8a2      	bhi.n	1a398 <_strtod_l+0x228>
   1a452:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a454:	920c      	str	r2, [sp, #48]	; 0x30
   1a456:	1c53      	adds	r3, r2, #1
   1a458:	9311      	str	r3, [sp, #68]	; 0x44
   1a45a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1a45e:	7854      	ldrb	r4, [r2, #1]
   1a460:	2c2f      	cmp	r4, #47	; 0x2f
   1a462:	dc07      	bgt.n	1a474 <_strtod_l+0x304>
   1a464:	e3de      	b.n	1ac24 <_strtod_l+0xab4>
   1a466:	3301      	adds	r3, #1
   1a468:	9311      	str	r3, [sp, #68]	; 0x44
   1a46a:	784c      	ldrb	r4, [r1, #1]
   1a46c:	2c2f      	cmp	r4, #47	; 0x2f
   1a46e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   1a472:	dd06      	ble.n	1a482 <_strtod_l+0x312>
   1a474:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   1a478:	2c39      	cmp	r4, #57	; 0x39
   1a47a:	4619      	mov	r1, r3
   1a47c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   1a480:	ddf1      	ble.n	1a466 <_strtod_l+0x2f6>
   1a482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a484:	1a9b      	subs	r3, r3, r2
   1a486:	2b08      	cmp	r3, #8
   1a488:	f340 83cc 	ble.w	1ac24 <_strtod_l+0xab4>
   1a48c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   1a490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a492:	2b00      	cmp	r3, #0
   1a494:	d082      	beq.n	1a39c <_strtod_l+0x22c>
   1a496:	f1cb 0b00 	rsb	fp, fp, #0
   1a49a:	2d00      	cmp	r5, #0
   1a49c:	d180      	bne.n	1a3a0 <_strtod_l+0x230>
   1a49e:	9b08      	ldr	r3, [sp, #32]
   1a4a0:	4303      	orrs	r3, r0
   1a4a2:	d120      	bne.n	1a4e6 <_strtod_l+0x376>
   1a4a4:	f1bc 0f00 	cmp.w	ip, #0
   1a4a8:	f47f af4a 	bne.w	1a340 <_strtod_l+0x1d0>
   1a4ac:	2c69      	cmp	r4, #105	; 0x69
   1a4ae:	f000 83cf 	beq.w	1ac50 <_strtod_l+0xae0>
   1a4b2:	f300 82f3 	bgt.w	1aa9c <_strtod_l+0x92c>
   1a4b6:	2c49      	cmp	r4, #73	; 0x49
   1a4b8:	f000 83ca 	beq.w	1ac50 <_strtod_l+0xae0>
   1a4bc:	2c4e      	cmp	r4, #78	; 0x4e
   1a4be:	f47f af3f 	bne.w	1a340 <_strtod_l+0x1d0>
   1a4c2:	491b      	ldr	r1, [pc, #108]	; (1a530 <_strtod_l+0x3c0>)
   1a4c4:	a811      	add	r0, sp, #68	; 0x44
   1a4c6:	f003 fb8f 	bl	1dbe8 <__match>
   1a4ca:	2800      	cmp	r0, #0
   1a4cc:	f43f af38 	beq.w	1a340 <_strtod_l+0x1d0>
   1a4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a4d2:	781b      	ldrb	r3, [r3, #0]
   1a4d4:	2b28      	cmp	r3, #40	; 0x28
   1a4d6:	f000 84f2 	beq.w	1aebe <_strtod_l+0xd4e>
   1a4da:	4816      	ldr	r0, [pc, #88]	; (1a534 <_strtod_l+0x3c4>)
   1a4dc:	f002 fec0 	bl	1d260 <nan>
   1a4e0:	eeb0 8b40 	vmov.f64	d8, d0
   1a4e4:	e001      	b.n	1a4ea <_strtod_l+0x37a>
   1a4e6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 1a520 <_strtod_l+0x3b0>
   1a4ea:	9a07      	ldr	r2, [sp, #28]
   1a4ec:	b10a      	cbz	r2, 1a4f2 <_strtod_l+0x382>
   1a4ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a4f0:	6013      	str	r3, [r2, #0]
   1a4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a4f4:	2b00      	cmp	r3, #0
   1a4f6:	f43f af2a 	beq.w	1a34e <_strtod_l+0x1de>
   1a4fa:	eeb1 8b48 	vneg.f64	d8, d8
   1a4fe:	eeb0 0b48 	vmov.f64	d0, d8
   1a502:	b017      	add	sp, #92	; 0x5c
   1a504:	ecbd 8b10 	vpop	{d8-d15}
   1a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a50c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a50e:	900b      	str	r0, [sp, #44]	; 0x2c
   1a510:	1c5a      	adds	r2, r3, #1
   1a512:	9211      	str	r2, [sp, #68]	; 0x44
   1a514:	785c      	ldrb	r4, [r3, #1]
   1a516:	46ae      	mov	lr, r5
   1a518:	e6f8      	b.n	1a30c <_strtod_l+0x19c>
   1a51a:	bf00      	nop
   1a51c:	f3af 8000 	nop.w
	...
   1a528:	20008a78 	.word	0x20008a78
   1a52c:	20001cd8 	.word	0x20001cd8
   1a530:	20008a88 	.word	0x20008a88
   1a534:	20005754 	.word	0x20005754
   1a538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a53a:	1aeb      	subs	r3, r5, r3
   1a53c:	4413      	add	r3, r2
   1a53e:	2b00      	cmp	r3, #0
   1a540:	f340 82b0 	ble.w	1aaa4 <_strtod_l+0x934>
   1a544:	f013 010f 	ands.w	r1, r3, #15
   1a548:	d00a      	beq.n	1a560 <_strtod_l+0x3f0>
   1a54a:	4ac3      	ldr	r2, [pc, #780]	; (1a858 <_strtod_l+0x6e8>)
   1a54c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1a550:	ed9d 6b04 	vldr	d6, [sp, #16]
   1a554:	ed92 7b00 	vldr	d7, [r2]
   1a558:	ee27 7b06 	vmul.f64	d7, d7, d6
   1a55c:	ed8d 7b04 	vstr	d7, [sp, #16]
   1a560:	f033 020f 	bics.w	r2, r3, #15
   1a564:	f040 8238 	bne.w	1a9d8 <_strtod_l+0x868>
   1a568:	2300      	movs	r3, #0
   1a56a:	9308      	str	r3, [sp, #32]
   1a56c:	9600      	str	r6, [sp, #0]
   1a56e:	462b      	mov	r3, r5
   1a570:	4672      	mov	r2, lr
   1a572:	4639      	mov	r1, r7
   1a574:	4640      	mov	r0, r8
   1a576:	f003 ff49 	bl	1e40c <__s2b>
   1a57a:	4681      	mov	r9, r0
   1a57c:	2800      	cmp	r0, #0
   1a57e:	f000 82e1 	beq.w	1ab44 <_strtod_l+0x9d4>
   1a582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a584:	eba3 0b0b 	sub.w	fp, r3, fp
   1a588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a58a:	ed9f eba9 	vldr	d14, [pc, #676]	; 1a830 <_strtod_l+0x6c0>
   1a58e:	2b00      	cmp	r3, #0
   1a590:	ed9f cba9 	vldr	d12, [pc, #676]	; 1a838 <_strtod_l+0x6c8>
   1a594:	ed9f dbaa 	vldr	d13, [pc, #680]	; 1a840 <_strtod_l+0x6d0>
   1a598:	ed9f bbab 	vldr	d11, [pc, #684]	; 1a848 <_strtod_l+0x6d8>
   1a59c:	bfb4      	ite	lt
   1a59e:	465a      	movlt	r2, fp
   1a5a0:	2200      	movge	r2, #0
   1a5a2:	f04f 0a00 	mov.w	sl, #0
   1a5a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a5aa:	920b      	str	r2, [sp, #44]	; 0x2c
   1a5ac:	930c      	str	r3, [sp, #48]	; 0x30
   1a5ae:	4654      	mov	r4, sl
   1a5b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a5b4:	4640      	mov	r0, r8
   1a5b6:	f003 fea7 	bl	1e308 <_Balloc>
   1a5ba:	4606      	mov	r6, r0
   1a5bc:	2800      	cmp	r0, #0
   1a5be:	f000 810e 	beq.w	1a7de <_strtod_l+0x66e>
   1a5c2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a5c6:	ed9d 8b04 	vldr	d8, [sp, #16]
   1a5ca:	3202      	adds	r2, #2
   1a5cc:	0092      	lsls	r2, r2, #2
   1a5ce:	f109 010c 	add.w	r1, r9, #12
   1a5d2:	300c      	adds	r0, #12
   1a5d4:	f7fb ffd6 	bl	16584 <memcpy>
   1a5d8:	eeb0 0b48 	vmov.f64	d0, d8
   1a5dc:	aa14      	add	r2, sp, #80	; 0x50
   1a5de:	a913      	add	r1, sp, #76	; 0x4c
   1a5e0:	4640      	mov	r0, r8
   1a5e2:	f004 facf 	bl	1eb84 <__d2b>
   1a5e6:	9012      	str	r0, [sp, #72]	; 0x48
   1a5e8:	2800      	cmp	r0, #0
   1a5ea:	f000 80e4 	beq.w	1a7b6 <_strtod_l+0x646>
   1a5ee:	2101      	movs	r1, #1
   1a5f0:	4640      	mov	r0, r8
   1a5f2:	f003 ffb3 	bl	1e55c <__i2b>
   1a5f6:	4604      	mov	r4, r0
   1a5f8:	2800      	cmp	r0, #0
   1a5fa:	f000 80f0 	beq.w	1a7de <_strtod_l+0x66e>
   1a5fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a600:	2a00      	cmp	r2, #0
   1a602:	f2c0 80de 	blt.w	1a7c2 <_strtod_l+0x652>
   1a606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a608:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1a60a:	eb02 0b03 	add.w	fp, r2, r3
   1a60e:	9b08      	ldr	r3, [sp, #32]
   1a610:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1a612:	1ad2      	subs	r2, r2, r3
   1a614:	442a      	add	r2, r5
   1a616:	4b91      	ldr	r3, [pc, #580]	; (1a85c <_strtod_l+0x6ec>)
   1a618:	3a01      	subs	r2, #1
   1a61a:	429a      	cmp	r2, r3
   1a61c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   1a620:	f280 8098 	bge.w	1a754 <_strtod_l+0x5e4>
   1a624:	1a99      	subs	r1, r3, r2
   1a626:	291f      	cmp	r1, #31
   1a628:	eba5 0501 	sub.w	r5, r5, r1
   1a62c:	f300 80e3 	bgt.w	1a7f6 <_strtod_l+0x686>
   1a630:	2201      	movs	r2, #1
   1a632:	fa02 f301 	lsl.w	r3, r2, r1
   1a636:	930d      	str	r3, [sp, #52]	; 0x34
   1a638:	2300      	movs	r3, #0
   1a63a:	930e      	str	r3, [sp, #56]	; 0x38
   1a63c:	442f      	add	r7, r5
   1a63e:	9b08      	ldr	r3, [sp, #32]
   1a640:	445d      	add	r5, fp
   1a642:	45ab      	cmp	fp, r5
   1a644:	465a      	mov	r2, fp
   1a646:	441f      	add	r7, r3
   1a648:	bfa8      	it	ge
   1a64a:	462a      	movge	r2, r5
   1a64c:	42ba      	cmp	r2, r7
   1a64e:	bfa8      	it	ge
   1a650:	463a      	movge	r2, r7
   1a652:	2a00      	cmp	r2, #0
   1a654:	dd03      	ble.n	1a65e <_strtod_l+0x4ee>
   1a656:	1aad      	subs	r5, r5, r2
   1a658:	1abf      	subs	r7, r7, r2
   1a65a:	ebab 0b02 	sub.w	fp, fp, r2
   1a65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a660:	2b00      	cmp	r3, #0
   1a662:	f300 8088 	bgt.w	1a776 <_strtod_l+0x606>
   1a666:	2d00      	cmp	r5, #0
   1a668:	f300 809c 	bgt.w	1a7a4 <_strtod_l+0x634>
   1a66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a66e:	2b00      	cmp	r3, #0
   1a670:	f300 80b7 	bgt.w	1a7e2 <_strtod_l+0x672>
   1a674:	2f00      	cmp	r7, #0
   1a676:	f300 80a9 	bgt.w	1a7cc <_strtod_l+0x65c>
   1a67a:	f1bb 0f00 	cmp.w	fp, #0
   1a67e:	dd08      	ble.n	1a692 <_strtod_l+0x522>
   1a680:	4621      	mov	r1, r4
   1a682:	465a      	mov	r2, fp
   1a684:	4640      	mov	r0, r8
   1a686:	f004 f8a5 	bl	1e7d4 <__lshift>
   1a68a:	4604      	mov	r4, r0
   1a68c:	2800      	cmp	r0, #0
   1a68e:	f000 80a6 	beq.w	1a7de <_strtod_l+0x66e>
   1a692:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a694:	4632      	mov	r2, r6
   1a696:	4640      	mov	r0, r8
   1a698:	f004 f936 	bl	1e908 <__mdiff>
   1a69c:	4682      	mov	sl, r0
   1a69e:	2800      	cmp	r0, #0
   1a6a0:	f000 809d 	beq.w	1a7de <_strtod_l+0x66e>
   1a6a4:	2300      	movs	r3, #0
   1a6a6:	68c5      	ldr	r5, [r0, #12]
   1a6a8:	60c3      	str	r3, [r0, #12]
   1a6aa:	4621      	mov	r1, r4
   1a6ac:	f004 f90a 	bl	1e8c4 <__mcmp>
   1a6b0:	2800      	cmp	r0, #0
   1a6b2:	f2c0 83c7 	blt.w	1ae44 <_strtod_l+0xcd4>
   1a6b6:	f000 8361 	beq.w	1ad7c <_strtod_l+0xc0c>
   1a6ba:	4621      	mov	r1, r4
   1a6bc:	4650      	mov	r0, sl
   1a6be:	f004 facb 	bl	1ec58 <__ratio>
   1a6c2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   1a6c6:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1a6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a6ce:	d846      	bhi.n	1a75e <_strtod_l+0x5ee>
   1a6d0:	2d00      	cmp	r5, #0
   1a6d2:	f000 80cb 	beq.w	1a86c <_strtod_l+0x6fc>
   1a6d6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   1a6da:	9805      	ldr	r0, [sp, #20]
   1a6dc:	4b60      	ldr	r3, [pc, #384]	; (1a860 <_strtod_l+0x6f0>)
   1a6de:	2200      	movs	r2, #0
   1a6e0:	4960      	ldr	r1, [pc, #384]	; (1a864 <_strtod_l+0x6f4>)
   1a6e2:	f8df c184 	ldr.w	ip, [pc, #388]	; 1a868 <_strtod_l+0x6f8>
   1a6e6:	ea00 0701 	and.w	r7, r0, r1
   1a6ea:	4567      	cmp	r7, ip
   1a6ec:	f000 80d4 	beq.w	1a898 <_strtod_l+0x728>
   1a6f0:	9908      	ldr	r1, [sp, #32]
   1a6f2:	b159      	cbz	r1, 1a70c <_strtod_l+0x59c>
   1a6f4:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   1a6f8:	d808      	bhi.n	1a70c <_strtod_l+0x59c>
   1a6fa:	eeb4 9bcb 	vcmpe.f64	d9, d11
   1a6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a702:	f240 8156 	bls.w	1a9b2 <_strtod_l+0x842>
   1a706:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   1a70a:	1bcb      	subs	r3, r1, r7
   1a70c:	eeb0 0b48 	vmov.f64	d0, d8
   1a710:	ec43 2b1a 	vmov	d10, r2, r3
   1a714:	f004 f9a2 	bl	1ea5c <__ulp>
   1a718:	eeaa 8b00 	vfma.f64	d8, d10, d0
   1a71c:	ed8d 8b04 	vstr	d8, [sp, #16]
   1a720:	ee18 3a90 	vmov	r3, s17
   1a724:	9a08      	ldr	r2, [sp, #32]
   1a726:	b922      	cbnz	r2, 1a732 <_strtod_l+0x5c2>
   1a728:	4a4e      	ldr	r2, [pc, #312]	; (1a864 <_strtod_l+0x6f4>)
   1a72a:	401a      	ands	r2, r3
   1a72c:	4297      	cmp	r7, r2
   1a72e:	f000 80e4 	beq.w	1a8fa <_strtod_l+0x78a>
   1a732:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a734:	4640      	mov	r0, r8
   1a736:	f003 fe0d 	bl	1e354 <_Bfree>
   1a73a:	4631      	mov	r1, r6
   1a73c:	4640      	mov	r0, r8
   1a73e:	f003 fe09 	bl	1e354 <_Bfree>
   1a742:	4621      	mov	r1, r4
   1a744:	4640      	mov	r0, r8
   1a746:	f003 fe05 	bl	1e354 <_Bfree>
   1a74a:	4651      	mov	r1, sl
   1a74c:	4640      	mov	r0, r8
   1a74e:	f003 fe01 	bl	1e354 <_Bfree>
   1a752:	e72d      	b.n	1a5b0 <_strtod_l+0x440>
   1a754:	2301      	movs	r3, #1
   1a756:	2100      	movs	r1, #0
   1a758:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   1a75c:	e76e      	b.n	1a63c <_strtod_l+0x4cc>
   1a75e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1a762:	ee20 9b09 	vmul.f64	d9, d0, d9
   1a766:	2d00      	cmp	r5, #0
   1a768:	d15f      	bne.n	1a82a <_strtod_l+0x6ba>
   1a76a:	eeb1 7b49 	vneg.f64	d7, d9
   1a76e:	9805      	ldr	r0, [sp, #20]
   1a770:	ec53 2b17 	vmov	r2, r3, d7
   1a774:	e7b4      	b.n	1a6e0 <_strtod_l+0x570>
   1a776:	4621      	mov	r1, r4
   1a778:	461a      	mov	r2, r3
   1a77a:	4640      	mov	r0, r8
   1a77c:	f003 ffca 	bl	1e714 <__pow5mult>
   1a780:	4604      	mov	r4, r0
   1a782:	b360      	cbz	r0, 1a7de <_strtod_l+0x66e>
   1a784:	4601      	mov	r1, r0
   1a786:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a788:	4640      	mov	r0, r8
   1a78a:	f003 ff15 	bl	1e5b8 <__multiply>
   1a78e:	b330      	cbz	r0, 1a7de <_strtod_l+0x66e>
   1a790:	900f      	str	r0, [sp, #60]	; 0x3c
   1a792:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a794:	4640      	mov	r0, r8
   1a796:	f003 fddd 	bl	1e354 <_Bfree>
   1a79a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a79c:	9212      	str	r2, [sp, #72]	; 0x48
   1a79e:	2d00      	cmp	r5, #0
   1a7a0:	f77f af64 	ble.w	1a66c <_strtod_l+0x4fc>
   1a7a4:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a7a6:	462a      	mov	r2, r5
   1a7a8:	4640      	mov	r0, r8
   1a7aa:	f004 f813 	bl	1e7d4 <__lshift>
   1a7ae:	9012      	str	r0, [sp, #72]	; 0x48
   1a7b0:	2800      	cmp	r0, #0
   1a7b2:	f47f af5b 	bne.w	1a66c <_strtod_l+0x4fc>
   1a7b6:	2322      	movs	r3, #34	; 0x22
   1a7b8:	ed9f 8b25 	vldr	d8, [pc, #148]	; 1a850 <_strtod_l+0x6e0>
   1a7bc:	f8c8 3000 	str.w	r3, [r8]
   1a7c0:	e0bc      	b.n	1a93c <_strtod_l+0x7cc>
   1a7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a7c4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1a7c8:	1a9f      	subs	r7, r3, r2
   1a7ca:	e720      	b.n	1a60e <_strtod_l+0x49e>
   1a7cc:	4631      	mov	r1, r6
   1a7ce:	463a      	mov	r2, r7
   1a7d0:	4640      	mov	r0, r8
   1a7d2:	f003 ffff 	bl	1e7d4 <__lshift>
   1a7d6:	4606      	mov	r6, r0
   1a7d8:	2800      	cmp	r0, #0
   1a7da:	f47f af4e 	bne.w	1a67a <_strtod_l+0x50a>
   1a7de:	9812      	ldr	r0, [sp, #72]	; 0x48
   1a7e0:	e7e9      	b.n	1a7b6 <_strtod_l+0x646>
   1a7e2:	4631      	mov	r1, r6
   1a7e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a7e6:	4640      	mov	r0, r8
   1a7e8:	f003 ff94 	bl	1e714 <__pow5mult>
   1a7ec:	4606      	mov	r6, r0
   1a7ee:	2800      	cmp	r0, #0
   1a7f0:	f47f af40 	bne.w	1a674 <_strtod_l+0x504>
   1a7f4:	e7f3      	b.n	1a7de <_strtod_l+0x66e>
   1a7f6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   1a7fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   1a7fe:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   1a802:	2101      	movs	r1, #1
   1a804:	32e2      	adds	r2, #226	; 0xe2
   1a806:	fa01 f302 	lsl.w	r3, r1, r2
   1a80a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   1a80e:	e715      	b.n	1a63c <_strtod_l+0x4cc>
   1a810:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   1a814:	f04f 0b00 	mov.w	fp, #0
   1a818:	e5c0      	b.n	1a39c <_strtod_l+0x22c>
   1a81a:	2301      	movs	r3, #1
   1a81c:	930a      	str	r3, [sp, #40]	; 0x28
   1a81e:	f10a 0302 	add.w	r3, sl, #2
   1a822:	9311      	str	r3, [sp, #68]	; 0x44
   1a824:	f89a 4002 	ldrb.w	r4, [sl, #2]
   1a828:	e602      	b.n	1a430 <_strtod_l+0x2c0>
   1a82a:	eeb0 7b49 	vmov.f64	d7, d9
   1a82e:	e79e      	b.n	1a76e <_strtod_l+0x5fe>
   1a830:	94a03595 	.word	0x94a03595
   1a834:	3fcfffff 	.word	0x3fcfffff
   1a838:	94a03595 	.word	0x94a03595
   1a83c:	3fdfffff 	.word	0x3fdfffff
   1a840:	35afe535 	.word	0x35afe535
   1a844:	3fe00000 	.word	0x3fe00000
   1a848:	ffc00000 	.word	0xffc00000
   1a84c:	41dfffff 	.word	0x41dfffff
   1a850:	00000000 	.word	0x00000000
   1a854:	7ff00000 	.word	0x7ff00000
   1a858:	20001cd8 	.word	0x20001cd8
   1a85c:	fffffc02 	.word	0xfffffc02
   1a860:	3ff00000 	.word	0x3ff00000
   1a864:	7ff00000 	.word	0x7ff00000
   1a868:	7fe00000 	.word	0x7fe00000
   1a86c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1a870:	2900      	cmp	r1, #0
   1a872:	f000 8085 	beq.w	1a980 <_strtod_l+0x810>
   1a876:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1a87a:	2901      	cmp	r1, #1
   1a87c:	f000 81d8 	beq.w	1ac30 <_strtod_l+0xac0>
   1a880:	4610      	mov	r0, r2
   1a882:	4bb7      	ldr	r3, [pc, #732]	; (1ab60 <_strtod_l+0x9f0>)
   1a884:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   1a888:	2200      	movs	r2, #0
   1a88a:	e729      	b.n	1a6e0 <_strtod_l+0x570>
   1a88c:	2c65      	cmp	r4, #101	; 0x65
   1a88e:	f04f 0c01 	mov.w	ip, #1
   1a892:	f43f adbe 	beq.w	1a412 <_strtod_l+0x2a2>
   1a896:	e54c      	b.n	1a332 <_strtod_l+0x1c2>
   1a898:	ec43 2b1a 	vmov	d10, r2, r3
   1a89c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   1a8a0:	9305      	str	r3, [sp, #20]
   1a8a2:	ed9d fb04 	vldr	d15, [sp, #16]
   1a8a6:	eeb0 0b4f 	vmov.f64	d0, d15
   1a8aa:	f004 f8d7 	bl	1ea5c <__ulp>
   1a8ae:	49ad      	ldr	r1, [pc, #692]	; (1ab64 <_strtod_l+0x9f4>)
   1a8b0:	eeaa fb00 	vfma.f64	d15, d10, d0
   1a8b4:	ee1f 3a90 	vmov	r3, s31
   1a8b8:	4aab      	ldr	r2, [pc, #684]	; (1ab68 <_strtod_l+0x9f8>)
   1a8ba:	4019      	ands	r1, r3
   1a8bc:	4291      	cmp	r1, r2
   1a8be:	ed8d fb04 	vstr	d15, [sp, #16]
   1a8c2:	d972      	bls.n	1a9aa <_strtod_l+0x83a>
   1a8c4:	4ba9      	ldr	r3, [pc, #676]	; (1ab6c <_strtod_l+0x9fc>)
   1a8c6:	ee18 2a90 	vmov	r2, s17
   1a8ca:	429a      	cmp	r2, r3
   1a8cc:	d103      	bne.n	1a8d6 <_strtod_l+0x766>
   1a8ce:	ee18 3a10 	vmov	r3, s16
   1a8d2:	3301      	adds	r3, #1
   1a8d4:	d083      	beq.n	1a7de <_strtod_l+0x66e>
   1a8d6:	4aa5      	ldr	r2, [pc, #660]	; (1ab6c <_strtod_l+0x9fc>)
   1a8d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a8dc:	e9cd 3204 	strd	r3, r2, [sp, #16]
   1a8e0:	e727      	b.n	1a732 <_strtod_l+0x5c2>
   1a8e2:	2300      	movs	r3, #0
   1a8e4:	930a      	str	r3, [sp, #40]	; 0x28
   1a8e6:	e79a      	b.n	1a81e <_strtod_l+0x6ae>
   1a8e8:	2c65      	cmp	r4, #101	; 0x65
   1a8ea:	f000 80d0 	beq.w	1aa8e <_strtod_l+0x91e>
   1a8ee:	2c45      	cmp	r4, #69	; 0x45
   1a8f0:	f000 80cd 	beq.w	1aa8e <_strtod_l+0x91e>
   1a8f4:	f04f 0c01 	mov.w	ip, #1
   1a8f8:	e5d1      	b.n	1a49e <_strtod_l+0x32e>
   1a8fa:	ec51 0b19 	vmov	r0, r1, d9
   1a8fe:	930d      	str	r3, [sp, #52]	; 0x34
   1a900:	f009 fee2 	bl	246c8 <__aeabi_d2lz>
   1a904:	f7fe fc8c 	bl	19220 <__aeabi_l2d>
   1a908:	9b04      	ldr	r3, [sp, #16]
   1a90a:	431d      	orrs	r5, r3
   1a90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a90e:	ec41 0b17 	vmov	d7, r0, r1
   1a912:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1a916:	431d      	orrs	r5, r3
   1a918:	ee39 9b47 	vsub.f64	d9, d9, d7
   1a91c:	f000 80a0 	beq.w	1aa60 <_strtod_l+0x8f0>
   1a920:	eeb4 9bcc 	vcmpe.f64	d9, d12
   1a924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a928:	d405      	bmi.n	1a936 <_strtod_l+0x7c6>
   1a92a:	eeb4 9bcd 	vcmpe.f64	d9, d13
   1a92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a932:	f77f aefe 	ble.w	1a732 <_strtod_l+0x5c2>
   1a936:	ed9d 8b04 	vldr	d8, [sp, #16]
   1a93a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1a93c:	4601      	mov	r1, r0
   1a93e:	4640      	mov	r0, r8
   1a940:	f003 fd08 	bl	1e354 <_Bfree>
   1a944:	4631      	mov	r1, r6
   1a946:	4640      	mov	r0, r8
   1a948:	f003 fd04 	bl	1e354 <_Bfree>
   1a94c:	4621      	mov	r1, r4
   1a94e:	4640      	mov	r0, r8
   1a950:	f003 fd00 	bl	1e354 <_Bfree>
   1a954:	4649      	mov	r1, r9
   1a956:	4640      	mov	r0, r8
   1a958:	f003 fcfc 	bl	1e354 <_Bfree>
   1a95c:	4651      	mov	r1, sl
   1a95e:	4640      	mov	r0, r8
   1a960:	f003 fcf8 	bl	1e354 <_Bfree>
   1a964:	e5c1      	b.n	1a4ea <_strtod_l+0x37a>
   1a966:	2201      	movs	r2, #1
   1a968:	9209      	str	r2, [sp, #36]	; 0x24
   1a96a:	1c79      	adds	r1, r7, #1
   1a96c:	9111      	str	r1, [sp, #68]	; 0x44
   1a96e:	787a      	ldrb	r2, [r7, #1]
   1a970:	2a00      	cmp	r2, #0
   1a972:	f43f ace5 	beq.w	1a340 <_strtod_l+0x1d0>
   1a976:	460f      	mov	r7, r1
   1a978:	e470      	b.n	1a25c <_strtod_l+0xec>
   1a97a:	2200      	movs	r2, #0
   1a97c:	9209      	str	r2, [sp, #36]	; 0x24
   1a97e:	e7f4      	b.n	1a96a <_strtod_l+0x7fa>
   1a980:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1a984:	4610      	mov	r0, r2
   1a986:	2b00      	cmp	r3, #0
   1a988:	f47f af7b 	bne.w	1a882 <_strtod_l+0x712>
   1a98c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1a990:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1a994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a998:	f100 81d3 	bmi.w	1ad42 <_strtod_l+0xbd2>
   1a99c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1a9a0:	ee20 9b09 	vmul.f64	d9, d0, d9
   1a9a4:	eeb1 7b49 	vneg.f64	d7, d9
   1a9a8:	e6e2      	b.n	1a770 <_strtod_l+0x600>
   1a9aa:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   1a9ae:	9305      	str	r3, [sp, #20]
   1a9b0:	e6b8      	b.n	1a724 <_strtod_l+0x5b4>
   1a9b2:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   1a9b6:	ee19 3a10 	vmov	r3, s18
   1a9ba:	2b01      	cmp	r3, #1
   1a9bc:	bf38      	it	cc
   1a9be:	2301      	movcc	r3, #1
   1a9c0:	ee09 3a10 	vmov	s18, r3
   1a9c4:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   1a9c8:	2d00      	cmp	r5, #0
   1a9ca:	f040 813e 	bne.w	1ac4a <_strtod_l+0xada>
   1a9ce:	eeb1 7b49 	vneg.f64	d7, d9
   1a9d2:	ec53 2b17 	vmov	r2, r3, d7
   1a9d6:	e696      	b.n	1a706 <_strtod_l+0x596>
   1a9d8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   1a9dc:	f300 80b2 	bgt.w	1ab44 <_strtod_l+0x9d4>
   1a9e0:	2a10      	cmp	r2, #16
   1a9e2:	ea4f 1322 	mov.w	r3, r2, asr #4
   1a9e6:	f340 8286 	ble.w	1aef6 <_strtod_l+0xd86>
   1a9ea:	4c61      	ldr	r4, [pc, #388]	; (1ab70 <_strtod_l+0xa00>)
   1a9ec:	ed9d 7b04 	vldr	d7, [sp, #16]
   1a9f0:	2000      	movs	r0, #0
   1a9f2:	4622      	mov	r2, r4
   1a9f4:	4601      	mov	r1, r0
   1a9f6:	f013 0f01 	tst.w	r3, #1
   1a9fa:	f101 0101 	add.w	r1, r1, #1
   1a9fe:	ea4f 0363 	mov.w	r3, r3, asr #1
   1aa02:	d004      	beq.n	1aa0e <_strtod_l+0x89e>
   1aa04:	ed92 6b00 	vldr	d6, [r2]
   1aa08:	2001      	movs	r0, #1
   1aa0a:	ee27 7b06 	vmul.f64	d7, d7, d6
   1aa0e:	2b01      	cmp	r3, #1
   1aa10:	f102 0208 	add.w	r2, r2, #8
   1aa14:	d1ef      	bne.n	1a9f6 <_strtod_l+0x886>
   1aa16:	b108      	cbz	r0, 1aa1c <_strtod_l+0x8ac>
   1aa18:	ed8d 7b04 	vstr	d7, [sp, #16]
   1aa1c:	9b05      	ldr	r3, [sp, #20]
   1aa1e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1aa22:	9305      	str	r3, [sp, #20]
   1aa24:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   1aa28:	ed9d 6b04 	vldr	d6, [sp, #16]
   1aa2c:	ed94 7b00 	vldr	d7, [r4]
   1aa30:	4b4c      	ldr	r3, [pc, #304]	; (1ab64 <_strtod_l+0x9f4>)
   1aa32:	ee27 7b06 	vmul.f64	d7, d7, d6
   1aa36:	ee17 2a90 	vmov	r2, s15
   1aa3a:	494e      	ldr	r1, [pc, #312]	; (1ab74 <_strtod_l+0xa04>)
   1aa3c:	4013      	ands	r3, r2
   1aa3e:	428b      	cmp	r3, r1
   1aa40:	ed8d 7b04 	vstr	d7, [sp, #16]
   1aa44:	d87e      	bhi.n	1ab44 <_strtod_l+0x9d4>
   1aa46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1aa4a:	428b      	cmp	r3, r1
   1aa4c:	f240 81d6 	bls.w	1adfc <_strtod_l+0xc8c>
   1aa50:	4c46      	ldr	r4, [pc, #280]	; (1ab6c <_strtod_l+0x9fc>)
   1aa52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa56:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1aa5a:	2300      	movs	r3, #0
   1aa5c:	9308      	str	r3, [sp, #32]
   1aa5e:	e585      	b.n	1a56c <_strtod_l+0x3fc>
   1aa60:	eeb4 9bce 	vcmpe.f64	d9, d14
   1aa64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aa68:	f57f ae63 	bpl.w	1a732 <_strtod_l+0x5c2>
   1aa6c:	e763      	b.n	1a936 <_strtod_l+0x7c6>
   1aa6e:	3216      	adds	r2, #22
   1aa70:	f6ff ad62 	blt.w	1a538 <_strtod_l+0x3c8>
   1aa74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aa76:	eba3 0b0b 	sub.w	fp, r3, fp
   1aa7a:	4b3f      	ldr	r3, [pc, #252]	; (1ab78 <_strtod_l+0xa08>)
   1aa7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   1aa80:	ed93 7b00 	vldr	d7, [r3]
   1aa84:	ed9d 6b04 	vldr	d6, [sp, #16]
   1aa88:	ee86 8b07 	vdiv.f64	d8, d6, d7
   1aa8c:	e52d      	b.n	1a4ea <_strtod_l+0x37a>
   1aa8e:	f04f 0e00 	mov.w	lr, #0
   1aa92:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   1aa96:	f04f 0c01 	mov.w	ip, #1
   1aa9a:	e44e      	b.n	1a33a <_strtod_l+0x1ca>
   1aa9c:	2c6e      	cmp	r4, #110	; 0x6e
   1aa9e:	f43f ad10 	beq.w	1a4c2 <_strtod_l+0x352>
   1aaa2:	e44d      	b.n	1a340 <_strtod_l+0x1d0>
   1aaa4:	f43f ad60 	beq.w	1a568 <_strtod_l+0x3f8>
   1aaa8:	425b      	negs	r3, r3
   1aaaa:	f013 010f 	ands.w	r1, r3, #15
   1aaae:	d00a      	beq.n	1aac6 <_strtod_l+0x956>
   1aab0:	4a31      	ldr	r2, [pc, #196]	; (1ab78 <_strtod_l+0xa08>)
   1aab2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1aab6:	ed9d 6b04 	vldr	d6, [sp, #16]
   1aaba:	ed92 7b00 	vldr	d7, [r2]
   1aabe:	ee86 7b07 	vdiv.f64	d7, d6, d7
   1aac2:	ed8d 7b04 	vstr	d7, [sp, #16]
   1aac6:	111b      	asrs	r3, r3, #4
   1aac8:	f43f ad4e 	beq.w	1a568 <_strtod_l+0x3f8>
   1aacc:	2b1f      	cmp	r3, #31
   1aace:	dc33      	bgt.n	1ab38 <_strtod_l+0x9c8>
   1aad0:	f013 0210 	ands.w	r2, r3, #16
   1aad4:	bf18      	it	ne
   1aad6:	226a      	movne	r2, #106	; 0x6a
   1aad8:	ed9d 7b04 	vldr	d7, [sp, #16]
   1aadc:	9208      	str	r2, [sp, #32]
   1aade:	4a27      	ldr	r2, [pc, #156]	; (1ab7c <_strtod_l+0xa0c>)
   1aae0:	2100      	movs	r1, #0
   1aae2:	07d8      	lsls	r0, r3, #31
   1aae4:	d504      	bpl.n	1aaf0 <_strtod_l+0x980>
   1aae6:	ed92 6b00 	vldr	d6, [r2]
   1aaea:	2101      	movs	r1, #1
   1aaec:	ee27 7b06 	vmul.f64	d7, d7, d6
   1aaf0:	105b      	asrs	r3, r3, #1
   1aaf2:	f102 0208 	add.w	r2, r2, #8
   1aaf6:	d1f4      	bne.n	1aae2 <_strtod_l+0x972>
   1aaf8:	b109      	cbz	r1, 1aafe <_strtod_l+0x98e>
   1aafa:	ed8d 7b04 	vstr	d7, [sp, #16]
   1aafe:	9b08      	ldr	r3, [sp, #32]
   1ab00:	b193      	cbz	r3, 1ab28 <_strtod_l+0x9b8>
   1ab02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ab06:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1ab0a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ab0e:	2b00      	cmp	r3, #0
   1ab10:	dd0a      	ble.n	1ab28 <_strtod_l+0x9b8>
   1ab12:	2b1f      	cmp	r3, #31
   1ab14:	f340 822f 	ble.w	1af76 <_strtod_l+0xe06>
   1ab18:	2000      	movs	r0, #0
   1ab1a:	2b34      	cmp	r3, #52	; 0x34
   1ab1c:	9004      	str	r0, [sp, #16]
   1ab1e:	f340 8240 	ble.w	1afa2 <_strtod_l+0xe32>
   1ab22:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1ab26:	9305      	str	r3, [sp, #20]
   1ab28:	ed9d 7b04 	vldr	d7, [sp, #16]
   1ab2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1ab30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab34:	f47f ad1a 	bne.w	1a56c <_strtod_l+0x3fc>
   1ab38:	2322      	movs	r3, #34	; 0x22
   1ab3a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 1ab50 <_strtod_l+0x9e0>
   1ab3e:	f8c8 3000 	str.w	r3, [r8]
   1ab42:	e4d2      	b.n	1a4ea <_strtod_l+0x37a>
   1ab44:	2322      	movs	r3, #34	; 0x22
   1ab46:	ed9f 8b04 	vldr	d8, [pc, #16]	; 1ab58 <_strtod_l+0x9e8>
   1ab4a:	f8c8 3000 	str.w	r3, [r8]
   1ab4e:	e4cc      	b.n	1a4ea <_strtod_l+0x37a>
	...
   1ab5c:	7ff00000 	.word	0x7ff00000
   1ab60:	bff00000 	.word	0xbff00000
   1ab64:	7ff00000 	.word	0x7ff00000
   1ab68:	7c9fffff 	.word	0x7c9fffff
   1ab6c:	7fefffff 	.word	0x7fefffff
   1ab70:	20001dc8 	.word	0x20001dc8
   1ab74:	7ca00000 	.word	0x7ca00000
   1ab78:	20001cd8 	.word	0x20001cd8
   1ab7c:	20001ca0 	.word	0x20001ca0
   1ab80:	9302      	str	r3, [sp, #8]
   1ab82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ab84:	9301      	str	r3, [sp, #4]
   1ab86:	ab12      	add	r3, sp, #72	; 0x48
   1ab88:	9300      	str	r3, [sp, #0]
   1ab8a:	4aa7      	ldr	r2, [pc, #668]	; (1ae28 <_strtod_l+0xcb8>)
   1ab8c:	ab13      	add	r3, sp, #76	; 0x4c
   1ab8e:	a911      	add	r1, sp, #68	; 0x44
   1ab90:	4640      	mov	r0, r8
   1ab92:	f002 fd5f 	bl	1d654 <__gethex>
   1ab96:	f010 050f 	ands.w	r5, r0, #15
   1ab9a:	4604      	mov	r4, r0
   1ab9c:	f43f aca3 	beq.w	1a4e6 <_strtod_l+0x376>
   1aba0:	2d06      	cmp	r5, #6
   1aba2:	d174      	bne.n	1ac8e <_strtod_l+0xb1e>
   1aba4:	9b07      	ldr	r3, [sp, #28]
   1aba6:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 1ae10 <_strtod_l+0xca0>
   1abaa:	3701      	adds	r7, #1
   1abac:	2b00      	cmp	r3, #0
   1abae:	f43f abce 	beq.w	1a34e <_strtod_l+0x1de>
   1abb2:	601f      	str	r7, [r3, #0]
   1abb4:	f7ff bbcb 	b.w	1a34e <_strtod_l+0x1de>
   1abb8:	ed9d 8b04 	vldr	d8, [sp, #16]
   1abbc:	e495      	b.n	1a4ea <_strtod_l+0x37a>
   1abbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1abc0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1abc4:	4403      	add	r3, r0
   1abc6:	930b      	str	r3, [sp, #44]	; 0x2c
   1abc8:	2801      	cmp	r0, #1
   1abca:	f105 0301 	add.w	r3, r5, #1
   1abce:	461a      	mov	r2, r3
   1abd0:	d014      	beq.n	1abfc <_strtod_l+0xa8c>
   1abd2:	4428      	add	r0, r5
   1abd4:	1e44      	subs	r4, r0, #1
   1abd6:	e003      	b.n	1abe0 <_strtod_l+0xa70>
   1abd8:	0046      	lsls	r6, r0, #1
   1abda:	429c      	cmp	r4, r3
   1abdc:	d00d      	beq.n	1abfa <_strtod_l+0xa8a>
   1abde:	3301      	adds	r3, #1
   1abe0:	462a      	mov	r2, r5
   1abe2:	2a08      	cmp	r2, #8
   1abe4:	461d      	mov	r5, r3
   1abe6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   1abea:	d9f5      	bls.n	1abd8 <_strtod_l+0xa68>
   1abec:	2b10      	cmp	r3, #16
   1abee:	bfdc      	itt	le
   1abf0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1abf4:	ea4f 0949 	movle.w	r9, r9, lsl #1
   1abf8:	e7ef      	b.n	1abda <_strtod_l+0xa6a>
   1abfa:	3202      	adds	r2, #2
   1abfc:	2d08      	cmp	r5, #8
   1abfe:	dc3c      	bgt.n	1ac7a <_strtod_l+0xb0a>
   1ac00:	4615      	mov	r5, r2
   1ac02:	f7ff bb79 	b.w	1a2f8 <_strtod_l+0x188>
   1ac06:	4989      	ldr	r1, [pc, #548]	; (1ae2c <_strtod_l+0xcbc>)
   1ac08:	2201      	movs	r2, #1
   1ac0a:	4638      	mov	r0, r7
   1ac0c:	f000 fffa 	bl	1bc04 <strncmp>
   1ac10:	2800      	cmp	r0, #0
   1ac12:	f000 8082 	beq.w	1ad1a <_strtod_l+0xbaa>
   1ac16:	f04f 0e00 	mov.w	lr, #0
   1ac1a:	46f1      	mov	r9, lr
   1ac1c:	4676      	mov	r6, lr
   1ac1e:	4675      	mov	r5, lr
   1ac20:	f7ff bbb5 	b.w	1a38e <_strtod_l+0x21e>
   1ac24:	f644 631f 	movw	r3, #19999	; 0x4e1f
   1ac28:	459b      	cmp	fp, r3
   1ac2a:	bfa8      	it	ge
   1ac2c:	469b      	movge	fp, r3
   1ac2e:	e42f      	b.n	1a490 <_strtod_l+0x320>
   1ac30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ac34:	4618      	mov	r0, r3
   1ac36:	2b00      	cmp	r3, #0
   1ac38:	f47f ae23 	bne.w	1a882 <_strtod_l+0x712>
   1ac3c:	2322      	movs	r3, #34	; 0x22
   1ac3e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 1ae10 <_strtod_l+0xca0>
   1ac42:	9812      	ldr	r0, [sp, #72]	; 0x48
   1ac44:	f8c8 3000 	str.w	r3, [r8]
   1ac48:	e678      	b.n	1a93c <_strtod_l+0x7cc>
   1ac4a:	eeb0 7b49 	vmov.f64	d7, d9
   1ac4e:	e6c0      	b.n	1a9d2 <_strtod_l+0x862>
   1ac50:	4977      	ldr	r1, [pc, #476]	; (1ae30 <_strtod_l+0xcc0>)
   1ac52:	a811      	add	r0, sp, #68	; 0x44
   1ac54:	f002 ffc8 	bl	1dbe8 <__match>
   1ac58:	2800      	cmp	r0, #0
   1ac5a:	f43f ab71 	beq.w	1a340 <_strtod_l+0x1d0>
   1ac5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ac60:	4974      	ldr	r1, [pc, #464]	; (1ae34 <_strtod_l+0xcc4>)
   1ac62:	3b01      	subs	r3, #1
   1ac64:	a811      	add	r0, sp, #68	; 0x44
   1ac66:	9311      	str	r3, [sp, #68]	; 0x44
   1ac68:	f002 ffbe 	bl	1dbe8 <__match>
   1ac6c:	b910      	cbnz	r0, 1ac74 <_strtod_l+0xb04>
   1ac6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ac70:	3301      	adds	r3, #1
   1ac72:	9311      	str	r3, [sp, #68]	; 0x44
   1ac74:	ed9f 8b68 	vldr	d8, [pc, #416]	; 1ae18 <_strtod_l+0xca8>
   1ac78:	e437      	b.n	1a4ea <_strtod_l+0x37a>
   1ac7a:	2a10      	cmp	r2, #16
   1ac7c:	bfdc      	itt	le
   1ac7e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1ac82:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   1ac86:	4615      	mov	r5, r2
   1ac88:	2000      	movs	r0, #0
   1ac8a:	f7ff bb3a 	b.w	1a302 <_strtod_l+0x192>
   1ac8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1ac90:	b13a      	cbz	r2, 1aca2 <_strtod_l+0xb32>
   1ac92:	2135      	movs	r1, #53	; 0x35
   1ac94:	a814      	add	r0, sp, #80	; 0x50
   1ac96:	f004 f825 	bl	1ece4 <__copybits>
   1ac9a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1ac9c:	4640      	mov	r0, r8
   1ac9e:	f003 fb59 	bl	1e354 <_Bfree>
   1aca2:	3d01      	subs	r5, #1
   1aca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1aca6:	2d04      	cmp	r5, #4
   1aca8:	f200 818f 	bhi.w	1afca <_strtod_l+0xe5a>
   1acac:	e8df f005 	tbb	[pc, r5]
   1acb0:	1f2a2d03 	.word	0x1f2a2d03
   1acb4:	03          	.byte	0x03
   1acb5:	00          	.byte	0x00
   1acb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1acb8:	9204      	str	r2, [sp, #16]
   1acba:	f203 4233 	addw	r2, r3, #1075	; 0x433
   1acbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1acc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1acc4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   1acc8:	9305      	str	r3, [sp, #20]
   1acca:	05e5      	lsls	r5, r4, #23
   1accc:	d502      	bpl.n	1acd4 <_strtod_l+0xb64>
   1acce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1acd2:	9305      	str	r3, [sp, #20]
   1acd4:	4a58      	ldr	r2, [pc, #352]	; (1ae38 <_strtod_l+0xcc8>)
   1acd6:	401a      	ands	r2, r3
   1acd8:	ed9d 8b04 	vldr	d8, [sp, #16]
   1acdc:	2a00      	cmp	r2, #0
   1acde:	f47f ac04 	bne.w	1a4ea <_strtod_l+0x37a>
   1ace2:	f001 ffeb 	bl	1ccbc <__errno>
   1ace6:	2322      	movs	r3, #34	; 0x22
   1ace8:	6003      	str	r3, [r0, #0]
   1acea:	f7ff bbfe 	b.w	1a4ea <_strtod_l+0x37a>
   1acee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1acf2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1acf6:	e9cd 3604 	strd	r3, r6, [sp, #16]
   1acfa:	05e3      	lsls	r3, r4, #23
   1acfc:	f57f af5c 	bpl.w	1abb8 <_strtod_l+0xa48>
   1ad00:	9b05      	ldr	r3, [sp, #20]
   1ad02:	e7e4      	b.n	1acce <_strtod_l+0xb5e>
   1ad04:	4b4c      	ldr	r3, [pc, #304]	; (1ae38 <_strtod_l+0xcc8>)
   1ad06:	9305      	str	r3, [sp, #20]
   1ad08:	e7f7      	b.n	1acfa <_strtod_l+0xb8a>
   1ad0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ad0c:	9304      	str	r3, [sp, #16]
   1ad0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ad10:	9305      	str	r3, [sp, #20]
   1ad12:	e7da      	b.n	1acca <_strtod_l+0xb5a>
   1ad14:	2000      	movs	r0, #0
   1ad16:	f7ff bae1 	b.w	1a2dc <_strtod_l+0x16c>
   1ad1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ad1c:	461a      	mov	r2, r3
   1ad1e:	3301      	adds	r3, #1
   1ad20:	9311      	str	r3, [sp, #68]	; 0x44
   1ad22:	7854      	ldrb	r4, [r2, #1]
   1ad24:	4606      	mov	r6, r0
   1ad26:	4681      	mov	r9, r0
   1ad28:	f7ff bacd 	b.w	1a2c6 <_strtod_l+0x156>
   1ad2c:	4b43      	ldr	r3, [pc, #268]	; (1ae3c <_strtod_l+0xccc>)
   1ad2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ad32:	ed93 8b00 	vldr	d8, [r3]
   1ad36:	ed9d 7b04 	vldr	d7, [sp, #16]
   1ad3a:	ee28 8b07 	vmul.f64	d8, d8, d7
   1ad3e:	f7ff bbd4 	b.w	1a4ea <_strtod_l+0x37a>
   1ad42:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   1ad46:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1ad4a:	e511      	b.n	1a770 <_strtod_l+0x600>
   1ad4c:	46ae      	mov	lr, r5
   1ad4e:	900b      	str	r0, [sp, #44]	; 0x2c
   1ad50:	f7ff badc 	b.w	1a30c <_strtod_l+0x19c>
   1ad54:	4b39      	ldr	r3, [pc, #228]	; (1ae3c <_strtod_l+0xccc>)
   1ad56:	f1c5 050f 	rsb	r5, r5, #15
   1ad5a:	1b4a      	subs	r2, r1, r5
   1ad5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1ad60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ad64:	ed95 8b00 	vldr	d8, [r5]
   1ad68:	ed93 7b00 	vldr	d7, [r3]
   1ad6c:	ed9d 6b04 	vldr	d6, [sp, #16]
   1ad70:	ee28 8b06 	vmul.f64	d8, d8, d6
   1ad74:	ee28 8b07 	vmul.f64	d8, d8, d7
   1ad78:	f7ff bbb7 	b.w	1a4ea <_strtod_l+0x37a>
   1ad7c:	2d00      	cmp	r5, #0
   1ad7e:	f000 8095 	beq.w	1aeac <_strtod_l+0xd3c>
   1ad82:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   1ad86:	4b2e      	ldr	r3, [pc, #184]	; (1ae40 <_strtod_l+0xcd0>)
   1ad88:	f3cc 0113 	ubfx	r1, ip, #0, #20
   1ad8c:	4299      	cmp	r1, r3
   1ad8e:	4662      	mov	r2, ip
   1ad90:	f000 80d2 	beq.w	1af38 <_strtod_l+0xdc8>
   1ad94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ad96:	2b00      	cmp	r3, #0
   1ad98:	f000 80a5 	beq.w	1aee6 <_strtod_l+0xd76>
   1ad9c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1ada0:	4213      	tst	r3, r2
   1ada2:	4617      	mov	r7, r2
   1ada4:	d01a      	beq.n	1addc <_strtod_l+0xc6c>
   1ada6:	eeb0 0b48 	vmov.f64	d0, d8
   1adaa:	2d00      	cmp	r5, #0
   1adac:	f000 80a6 	beq.w	1aefc <_strtod_l+0xd8c>
   1adb0:	f003 fe54 	bl	1ea5c <__ulp>
   1adb4:	9b08      	ldr	r3, [sp, #32]
   1adb6:	b17b      	cbz	r3, 1add8 <_strtod_l+0xc68>
   1adb8:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1adbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1adc0:	2b00      	cmp	r3, #0
   1adc2:	dd09      	ble.n	1add8 <_strtod_l+0xc68>
   1adc4:	051b      	lsls	r3, r3, #20
   1adc6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1adca:	2000      	movs	r0, #0
   1adcc:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   1add0:	ec41 0b17 	vmov	d7, r0, r1
   1add4:	ee20 0b07 	vmul.f64	d0, d0, d7
   1add8:	ee38 8b00 	vadd.f64	d8, d8, d0
   1addc:	9b08      	ldr	r3, [sp, #32]
   1adde:	b15b      	cbz	r3, 1adf8 <_strtod_l+0xc88>
   1ade0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 1ae20 <_strtod_l+0xcb0>
   1ade4:	4b14      	ldr	r3, [pc, #80]	; (1ae38 <_strtod_l+0xcc8>)
   1ade6:	ee28 8b07 	vmul.f64	d8, d8, d7
   1adea:	ee18 2a90 	vmov	r2, s17
   1adee:	4013      	ands	r3, r2
   1adf0:	b913      	cbnz	r3, 1adf8 <_strtod_l+0xc88>
   1adf2:	2322      	movs	r3, #34	; 0x22
   1adf4:	f8c8 3000 	str.w	r3, [r8]
   1adf8:	9812      	ldr	r0, [sp, #72]	; 0x48
   1adfa:	e59f      	b.n	1a93c <_strtod_l+0x7cc>
   1adfc:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   1ae00:	9305      	str	r3, [sp, #20]
   1ae02:	2300      	movs	r3, #0
   1ae04:	9308      	str	r3, [sp, #32]
   1ae06:	f7ff bbb1 	b.w	1a56c <_strtod_l+0x3fc>
   1ae0a:	bf00      	nop
   1ae0c:	f3af 8000 	nop.w
	...
   1ae1c:	7ff00000 	.word	0x7ff00000
   1ae20:	00000000 	.word	0x00000000
   1ae24:	39500000 	.word	0x39500000
   1ae28:	20001c78 	.word	0x20001c78
   1ae2c:	20008a78 	.word	0x20008a78
   1ae30:	20008a7c 	.word	0x20008a7c
   1ae34:	20008a80 	.word	0x20008a80
   1ae38:	7ff00000 	.word	0x7ff00000
   1ae3c:	20001cd8 	.word	0x20001cd8
   1ae40:	000fffff 	.word	0x000fffff
   1ae44:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1ae48:	430d      	orrs	r5, r1
   1ae4a:	d1c7      	bne.n	1addc <_strtod_l+0xc6c>
   1ae4c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1ae50:	4617      	mov	r7, r2
   1ae52:	2b00      	cmp	r3, #0
   1ae54:	d1c2      	bne.n	1addc <_strtod_l+0xc6c>
   1ae56:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1ae5a:	0d1b      	lsrs	r3, r3, #20
   1ae5c:	051b      	lsls	r3, r3, #20
   1ae5e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1ae62:	d9bb      	bls.n	1addc <_strtod_l+0xc6c>
   1ae64:	f8da 3014 	ldr.w	r3, [sl, #20]
   1ae68:	b91b      	cbnz	r3, 1ae72 <_strtod_l+0xd02>
   1ae6a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ae6e:	2b01      	cmp	r3, #1
   1ae70:	ddb4      	ble.n	1addc <_strtod_l+0xc6c>
   1ae72:	4651      	mov	r1, sl
   1ae74:	2201      	movs	r2, #1
   1ae76:	4640      	mov	r0, r8
   1ae78:	f003 fcac 	bl	1e7d4 <__lshift>
   1ae7c:	4621      	mov	r1, r4
   1ae7e:	4682      	mov	sl, r0
   1ae80:	f003 fd20 	bl	1e8c4 <__mcmp>
   1ae84:	2800      	cmp	r0, #0
   1ae86:	dda9      	ble.n	1addc <_strtod_l+0xc6c>
   1ae88:	9b08      	ldr	r3, [sp, #32]
   1ae8a:	2b00      	cmp	r3, #0
   1ae8c:	d17e      	bne.n	1af8c <_strtod_l+0xe1c>
   1ae8e:	4b50      	ldr	r3, [pc, #320]	; (1afd0 <_strtod_l+0xe60>)
   1ae90:	403b      	ands	r3, r7
   1ae92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ae96:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1ae9a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1ae9e:	9305      	str	r3, [sp, #20]
   1aea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aea4:	9304      	str	r3, [sp, #16]
   1aea6:	ed9d 8b04 	vldr	d8, [sp, #16]
   1aeaa:	e797      	b.n	1addc <_strtod_l+0xc6c>
   1aeac:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1aeb0:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1aeb4:	430b      	orrs	r3, r1
   1aeb6:	4617      	mov	r7, r2
   1aeb8:	f47f af6c 	bne.w	1ad94 <_strtod_l+0xc24>
   1aebc:	e7e4      	b.n	1ae88 <_strtod_l+0xd18>
   1aebe:	4945      	ldr	r1, [pc, #276]	; (1afd4 <_strtod_l+0xe64>)
   1aec0:	a811      	add	r0, sp, #68	; 0x44
   1aec2:	aa14      	add	r2, sp, #80	; 0x50
   1aec4:	f002 feac 	bl	1dc20 <__hexnan>
   1aec8:	2805      	cmp	r0, #5
   1aeca:	f47f ab06 	bne.w	1a4da <_strtod_l+0x36a>
   1aece:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1aed0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   1aed4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1aed8:	9305      	str	r3, [sp, #20]
   1aeda:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1aedc:	9304      	str	r3, [sp, #16]
   1aede:	ed9d 8b04 	vldr	d8, [sp, #16]
   1aee2:	f7ff bb02 	b.w	1a4ea <_strtod_l+0x37a>
   1aee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1aeea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aeec:	4203      	tst	r3, r0
   1aeee:	f43f af75 	beq.w	1addc <_strtod_l+0xc6c>
   1aef2:	460f      	mov	r7, r1
   1aef4:	e757      	b.n	1ada6 <_strtod_l+0xc36>
   1aef6:	4c38      	ldr	r4, [pc, #224]	; (1afd8 <_strtod_l+0xe68>)
   1aef8:	2100      	movs	r1, #0
   1aefa:	e58f      	b.n	1aa1c <_strtod_l+0x8ac>
   1aefc:	f003 fdae 	bl	1ea5c <__ulp>
   1af00:	9b08      	ldr	r3, [sp, #32]
   1af02:	2b00      	cmp	r3, #0
   1af04:	d055      	beq.n	1afb2 <_strtod_l+0xe42>
   1af06:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1af0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1af0e:	2b00      	cmp	r3, #0
   1af10:	dd09      	ble.n	1af26 <_strtod_l+0xdb6>
   1af12:	051b      	lsls	r3, r3, #20
   1af14:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1af18:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   1af1c:	4628      	mov	r0, r5
   1af1e:	ec41 0b17 	vmov	d7, r0, r1
   1af22:	ee20 0b07 	vmul.f64	d0, d0, d7
   1af26:	ee38 8b40 	vsub.f64	d8, d8, d0
   1af2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1af2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af32:	f47f af55 	bne.w	1ade0 <_strtod_l+0xc70>
   1af36:	e681      	b.n	1ac3c <_strtod_l+0xacc>
   1af38:	9b08      	ldr	r3, [sp, #32]
   1af3a:	9904      	ldr	r1, [sp, #16]
   1af3c:	b31b      	cbz	r3, 1af86 <_strtod_l+0xe16>
   1af3e:	4b24      	ldr	r3, [pc, #144]	; (1afd0 <_strtod_l+0xe60>)
   1af40:	4013      	ands	r3, r2
   1af42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1af46:	d81e      	bhi.n	1af86 <_strtod_l+0xe16>
   1af48:	0d1b      	lsrs	r3, r3, #20
   1af4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1af4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1af52:	fa00 f303 	lsl.w	r3, r0, r3
   1af56:	4299      	cmp	r1, r3
   1af58:	f47f af1c 	bne.w	1ad94 <_strtod_l+0xc24>
   1af5c:	4b1f      	ldr	r3, [pc, #124]	; (1afdc <_strtod_l+0xe6c>)
   1af5e:	429a      	cmp	r2, r3
   1af60:	d030      	beq.n	1afc4 <_strtod_l+0xe54>
   1af62:	4b1b      	ldr	r3, [pc, #108]	; (1afd0 <_strtod_l+0xe60>)
   1af64:	4013      	ands	r3, r2
   1af66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1af6a:	9305      	str	r3, [sp, #20]
   1af6c:	2300      	movs	r3, #0
   1af6e:	9304      	str	r3, [sp, #16]
   1af70:	ed9d 8b04 	vldr	d8, [sp, #16]
   1af74:	e732      	b.n	1addc <_strtod_l+0xc6c>
   1af76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1af7a:	fa02 f303 	lsl.w	r3, r2, r3
   1af7e:	9a04      	ldr	r2, [sp, #16]
   1af80:	401a      	ands	r2, r3
   1af82:	9204      	str	r2, [sp, #16]
   1af84:	e5d0      	b.n	1ab28 <_strtod_l+0x9b8>
   1af86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1af8a:	e7e4      	b.n	1af56 <_strtod_l+0xde6>
   1af8c:	4b10      	ldr	r3, [pc, #64]	; (1afd0 <_strtod_l+0xe60>)
   1af8e:	403b      	ands	r3, r7
   1af90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1af94:	f73f af7d 	bgt.w	1ae92 <_strtod_l+0xd22>
   1af98:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1af9c:	f73f af20 	bgt.w	1ade0 <_strtod_l+0xc70>
   1afa0:	e64c      	b.n	1ac3c <_strtod_l+0xacc>
   1afa2:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   1afa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1afaa:	4093      	lsls	r3, r2
   1afac:	400b      	ands	r3, r1
   1afae:	9305      	str	r3, [sp, #20]
   1afb0:	e5ba      	b.n	1ab28 <_strtod_l+0x9b8>
   1afb2:	ee38 8b40 	vsub.f64	d8, d8, d0
   1afb6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1afba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1afbe:	f47f af1b 	bne.w	1adf8 <_strtod_l+0xc88>
   1afc2:	e63b      	b.n	1ac3c <_strtod_l+0xacc>
   1afc4:	3101      	adds	r1, #1
   1afc6:	d1cc      	bne.n	1af62 <_strtod_l+0xdf2>
   1afc8:	e409      	b.n	1a7de <_strtod_l+0x66e>
   1afca:	2300      	movs	r3, #0
   1afcc:	e67d      	b.n	1acca <_strtod_l+0xb5a>
   1afce:	bf00      	nop
   1afd0:	7ff00000 	.word	0x7ff00000
   1afd4:	20001c8c 	.word	0x20001c8c
   1afd8:	20001dc8 	.word	0x20001dc8
   1afdc:	7fefffff 	.word	0x7fefffff

0001afe0 <_strtod_r>:
   1afe0:	4b01      	ldr	r3, [pc, #4]	; (1afe8 <_strtod_r+0x8>)
   1afe2:	f7ff b8c5 	b.w	1a170 <_strtod_l>
   1afe6:	bf00      	nop
   1afe8:	20009328 	.word	0x20009328

0001afec <strtod_l>:
   1afec:	b410      	push	{r4}
   1afee:	4c05      	ldr	r4, [pc, #20]	; (1b004 <strtod_l+0x18>)
   1aff0:	4684      	mov	ip, r0
   1aff2:	4613      	mov	r3, r2
   1aff4:	6820      	ldr	r0, [r4, #0]
   1aff6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1affa:	460a      	mov	r2, r1
   1affc:	4661      	mov	r1, ip
   1affe:	f7ff b8b7 	b.w	1a170 <_strtod_l>
   1b002:	bf00      	nop
   1b004:	20008de0 	.word	0x20008de0

0001b008 <strtod>:
   1b008:	b410      	push	{r4}
   1b00a:	4c05      	ldr	r4, [pc, #20]	; (1b020 <strtod+0x18>)
   1b00c:	4b05      	ldr	r3, [pc, #20]	; (1b024 <strtod+0x1c>)
   1b00e:	4684      	mov	ip, r0
   1b010:	460a      	mov	r2, r1
   1b012:	6820      	ldr	r0, [r4, #0]
   1b014:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b018:	4661      	mov	r1, ip
   1b01a:	f7ff b8a9 	b.w	1a170 <_strtod_l>
   1b01e:	bf00      	nop
   1b020:	20008de0 	.word	0x20008de0
   1b024:	20009328 	.word	0x20009328

0001b028 <strtof_l>:
   1b028:	b510      	push	{r4, lr}
   1b02a:	4c1d      	ldr	r4, [pc, #116]	; (1b0a0 <strtof_l+0x78>)
   1b02c:	4684      	mov	ip, r0
   1b02e:	4613      	mov	r3, r2
   1b030:	6820      	ldr	r0, [r4, #0]
   1b032:	460a      	mov	r2, r1
   1b034:	4661      	mov	r1, ip
   1b036:	f7ff f89b 	bl	1a170 <_strtod_l>
   1b03a:	eeb4 0b40 	vcmp.f64	d0, d0
   1b03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b042:	d619      	bvs.n	1b078 <strtof_l+0x50>
   1b044:	eef7 6bc0 	vcvt.f32.f64	s13, d0
   1b048:	eddf 7a16 	vldr	s15, [pc, #88]	; 1b0a4 <strtof_l+0x7c>
   1b04c:	eeb0 7ae6 	vabs.f32	s14, s13
   1b050:	eeb4 7a67 	vcmp.f32	s14, s15
   1b054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b058:	dd0b      	ble.n	1b072 <strtof_l+0x4a>
   1b05a:	eeb0 0bc0 	vabs.f64	d0, d0
   1b05e:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 1b098 <strtof_l+0x70>
   1b062:	eeb4 0b45 	vcmp.f64	d0, d5
   1b066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b06a:	dc02      	bgt.n	1b072 <strtof_l+0x4a>
   1b06c:	6823      	ldr	r3, [r4, #0]
   1b06e:	2222      	movs	r2, #34	; 0x22
   1b070:	601a      	str	r2, [r3, #0]
   1b072:	eeb0 0a66 	vmov.f32	s0, s13
   1b076:	bd10      	pop	{r4, pc}
   1b078:	ee10 3a90 	vmov	r3, s1
   1b07c:	2b00      	cmp	r3, #0
   1b07e:	480a      	ldr	r0, [pc, #40]	; (1b0a8 <strtof_l+0x80>)
   1b080:	da04      	bge.n	1b08c <strtof_l+0x64>
   1b082:	f002 f8f5 	bl	1d270 <nanf>
   1b086:	eef1 6a40 	vneg.f32	s13, s0
   1b08a:	e7f2      	b.n	1b072 <strtof_l+0x4a>
   1b08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b090:	f002 b8ee 	b.w	1d270 <nanf>
   1b094:	f3af 8000 	nop.w
   1b098:	ffffffff 	.word	0xffffffff
   1b09c:	7fefffff 	.word	0x7fefffff
   1b0a0:	20008de0 	.word	0x20008de0
   1b0a4:	7f7fffff 	.word	0x7f7fffff
   1b0a8:	20005754 	.word	0x20005754

0001b0ac <strtof>:
   1b0ac:	b510      	push	{r4, lr}
   1b0ae:	4c24      	ldr	r4, [pc, #144]	; (1b140 <strtof+0x94>)
   1b0b0:	4b24      	ldr	r3, [pc, #144]	; (1b144 <strtof+0x98>)
   1b0b2:	4684      	mov	ip, r0
   1b0b4:	460a      	mov	r2, r1
   1b0b6:	6820      	ldr	r0, [r4, #0]
   1b0b8:	4661      	mov	r1, ip
   1b0ba:	f7ff f859 	bl	1a170 <_strtod_l>
   1b0be:	eeb4 0b40 	vcmp.f64	d0, d0
   1b0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b0c6:	d627      	bvs.n	1b118 <strtof+0x6c>
   1b0c8:	eef7 7bc0 	vcvt.f32.f64	s15, d0
   1b0cc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 1b148 <strtof+0x9c>
   1b0d0:	eef0 6ae7 	vabs.f32	s13, s15
   1b0d4:	eef4 6a47 	vcmp.f32	s13, s14
   1b0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b0dc:	dd0e      	ble.n	1b0fc <strtof+0x50>
   1b0de:	eeb0 5bc0 	vabs.f64	d5, d0
   1b0e2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 1b138 <strtof+0x8c>
   1b0e6:	eeb4 5b46 	vcmp.f64	d5, d6
   1b0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b0ee:	dc05      	bgt.n	1b0fc <strtof+0x50>
   1b0f0:	6823      	ldr	r3, [r4, #0]
   1b0f2:	2222      	movs	r2, #34	; 0x22
   1b0f4:	601a      	str	r2, [r3, #0]
   1b0f6:	eeb0 0a67 	vmov.f32	s0, s15
   1b0fa:	bd10      	pop	{r4, pc}
   1b0fc:	ee17 3a90 	vmov	r3, s15
   1b100:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   1b104:	d1f7      	bne.n	1b0f6 <strtof+0x4a>
   1b106:	4b11      	ldr	r3, [pc, #68]	; (1b14c <strtof+0xa0>)
   1b108:	ee10 2a90 	vmov	r2, s1
   1b10c:	4013      	ands	r3, r2
   1b10e:	2b00      	cmp	r3, #0
   1b110:	d1ee      	bne.n	1b0f0 <strtof+0x44>
   1b112:	eeb0 0a67 	vmov.f32	s0, s15
   1b116:	bd10      	pop	{r4, pc}
   1b118:	ee10 3a90 	vmov	r3, s1
   1b11c:	2b00      	cmp	r3, #0
   1b11e:	480c      	ldr	r0, [pc, #48]	; (1b150 <strtof+0xa4>)
   1b120:	da04      	bge.n	1b12c <strtof+0x80>
   1b122:	f002 f8a5 	bl	1d270 <nanf>
   1b126:	eef1 7a40 	vneg.f32	s15, s0
   1b12a:	e7e4      	b.n	1b0f6 <strtof+0x4a>
   1b12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b130:	f002 b89e 	b.w	1d270 <nanf>
   1b134:	f3af 8000 	nop.w
   1b138:	ffffffff 	.word	0xffffffff
   1b13c:	7fefffff 	.word	0x7fefffff
   1b140:	20008de0 	.word	0x20008de0
   1b144:	20009328 	.word	0x20009328
   1b148:	7f7fffff 	.word	0x7f7fffff
   1b14c:	7ff00000 	.word	0x7ff00000
   1b150:	20005754 	.word	0x20005754
   1b154:	2b01      	cmp	r3, #1
   1b156:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b15a:	d040      	beq.n	1b1de <strtof+0x132>
   1b15c:	2b24      	cmp	r3, #36	; 0x24
   1b15e:	4698      	mov	r8, r3
   1b160:	d83d      	bhi.n	1b1de <strtof+0x132>
   1b162:	4d4c      	ldr	r5, [pc, #304]	; (1b294 <strtof+0x1e8>)
   1b164:	468e      	mov	lr, r1
   1b166:	4676      	mov	r6, lr
   1b168:	f81e bb01 	ldrb.w	fp, [lr], #1
   1b16c:	f815 400b 	ldrb.w	r4, [r5, fp]
   1b170:	f014 0408 	ands.w	r4, r4, #8
   1b174:	d1f7      	bne.n	1b166 <strtof+0xba>
   1b176:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1b17a:	d072      	beq.n	1b262 <strtof+0x1b6>
   1b17c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1b180:	bf08      	it	eq
   1b182:	f89e b000 	ldrbeq.w	fp, [lr]
   1b186:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1b18a:	bf08      	it	eq
   1b18c:	f106 0e02 	addeq.w	lr, r6, #2
   1b190:	2b00      	cmp	r3, #0
   1b192:	d042      	beq.n	1b21a <strtof+0x16e>
   1b194:	2b10      	cmp	r3, #16
   1b196:	d057      	beq.n	1b248 <strtof+0x19c>
   1b198:	fbb9 f7f8 	udiv	r7, r9, r8
   1b19c:	2500      	movs	r5, #0
   1b19e:	462e      	mov	r6, r5
   1b1a0:	fb08 9a17 	mls	sl, r8, r7, r9
   1b1a4:	e005      	b.n	1b1b2 <strtof+0x106>
   1b1a6:	d033      	beq.n	1b210 <strtof+0x164>
   1b1a8:	fb08 c606 	mla	r6, r8, r6, ip
   1b1ac:	2501      	movs	r5, #1
   1b1ae:	f81e bb01 	ldrb.w	fp, [lr], #1
   1b1b2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   1b1b6:	f1bc 0f09 	cmp.w	ip, #9
   1b1ba:	d906      	bls.n	1b1ca <strtof+0x11e>
   1b1bc:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   1b1c0:	f1bc 0f19 	cmp.w	ip, #25
   1b1c4:	d812      	bhi.n	1b1ec <strtof+0x140>
   1b1c6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   1b1ca:	4563      	cmp	r3, ip
   1b1cc:	dd17      	ble.n	1b1fe <strtof+0x152>
   1b1ce:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b1d2:	d0ec      	beq.n	1b1ae <strtof+0x102>
   1b1d4:	42b7      	cmp	r7, r6
   1b1d6:	d2e6      	bcs.n	1b1a6 <strtof+0xfa>
   1b1d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b1dc:	e7e7      	b.n	1b1ae <strtof+0x102>
   1b1de:	f001 fd6d 	bl	1ccbc <__errno>
   1b1e2:	2316      	movs	r3, #22
   1b1e4:	6003      	str	r3, [r0, #0]
   1b1e6:	2000      	movs	r0, #0
   1b1e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1ec:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   1b1f0:	f1bc 0f19 	cmp.w	ip, #25
   1b1f4:	d803      	bhi.n	1b1fe <strtof+0x152>
   1b1f6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   1b1fa:	4563      	cmp	r3, ip
   1b1fc:	dce7      	bgt.n	1b1ce <strtof+0x122>
   1b1fe:	1c6b      	adds	r3, r5, #1
   1b200:	d027      	beq.n	1b252 <strtof+0x1a6>
   1b202:	b98c      	cbnz	r4, 1b228 <strtof+0x17c>
   1b204:	b10a      	cbz	r2, 1b20a <strtof+0x15e>
   1b206:	bba5      	cbnz	r5, 1b272 <strtof+0x1c6>
   1b208:	6011      	str	r1, [r2, #0]
   1b20a:	4630      	mov	r0, r6
   1b20c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b210:	45e2      	cmp	sl, ip
   1b212:	dac9      	bge.n	1b1a8 <strtof+0xfc>
   1b214:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b218:	e7c9      	b.n	1b1ae <strtof+0x102>
   1b21a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1b21e:	d005      	beq.n	1b22c <strtof+0x180>
   1b220:	f04f 080a 	mov.w	r8, #10
   1b224:	4643      	mov	r3, r8
   1b226:	e7b7      	b.n	1b198 <strtof+0xec>
   1b228:	4276      	negs	r6, r6
   1b22a:	e7eb      	b.n	1b204 <strtof+0x158>
   1b22c:	f89e 3000 	ldrb.w	r3, [lr]
   1b230:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b234:	2b58      	cmp	r3, #88	; 0x58
   1b236:	d121      	bne.n	1b27c <strtof+0x1d0>
   1b238:	f04f 0810 	mov.w	r8, #16
   1b23c:	f89e b001 	ldrb.w	fp, [lr, #1]
   1b240:	4643      	mov	r3, r8
   1b242:	f10e 0e02 	add.w	lr, lr, #2
   1b246:	e7a7      	b.n	1b198 <strtof+0xec>
   1b248:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1b24c:	d01a      	beq.n	1b284 <strtof+0x1d8>
   1b24e:	4698      	mov	r8, r3
   1b250:	e7a2      	b.n	1b198 <strtof+0xec>
   1b252:	2322      	movs	r3, #34	; 0x22
   1b254:	6003      	str	r3, [r0, #0]
   1b256:	b172      	cbz	r2, 1b276 <strtof+0x1ca>
   1b258:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   1b25c:	464e      	mov	r6, r9
   1b25e:	6011      	str	r1, [r2, #0]
   1b260:	e7d3      	b.n	1b20a <strtof+0x15e>
   1b262:	f89e b000 	ldrb.w	fp, [lr]
   1b266:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   1b26a:	f106 0e02 	add.w	lr, r6, #2
   1b26e:	2401      	movs	r4, #1
   1b270:	e78e      	b.n	1b190 <strtof+0xe4>
   1b272:	46b1      	mov	r9, r6
   1b274:	e7f0      	b.n	1b258 <strtof+0x1ac>
   1b276:	464e      	mov	r6, r9
   1b278:	4630      	mov	r0, r6
   1b27a:	e7c7      	b.n	1b20c <strtof+0x160>
   1b27c:	f04f 0808 	mov.w	r8, #8
   1b280:	4643      	mov	r3, r8
   1b282:	e789      	b.n	1b198 <strtof+0xec>
   1b284:	f89e 5000 	ldrb.w	r5, [lr]
   1b288:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   1b28c:	2d58      	cmp	r5, #88	; 0x58
   1b28e:	d0d3      	beq.n	1b238 <strtof+0x18c>
   1b290:	4698      	mov	r8, r3
   1b292:	e781      	b.n	1b198 <strtof+0xec>
   1b294:	200021d1 	.word	0x200021d1

0001b298 <_strtol_r>:
   1b298:	e75c      	b.n	1b154 <strtof+0xa8>
   1b29a:	bf00      	nop

0001b29c <strtol_l>:
   1b29c:	b410      	push	{r4}
   1b29e:	4c04      	ldr	r4, [pc, #16]	; (1b2b0 <strtol_l+0x14>)
   1b2a0:	4684      	mov	ip, r0
   1b2a2:	4613      	mov	r3, r2
   1b2a4:	6820      	ldr	r0, [r4, #0]
   1b2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b2aa:	460a      	mov	r2, r1
   1b2ac:	4661      	mov	r1, ip
   1b2ae:	e751      	b.n	1b154 <strtof+0xa8>
   1b2b0:	20008de0 	.word	0x20008de0

0001b2b4 <strtol>:
   1b2b4:	b410      	push	{r4}
   1b2b6:	4c04      	ldr	r4, [pc, #16]	; (1b2c8 <strtol+0x14>)
   1b2b8:	4684      	mov	ip, r0
   1b2ba:	4613      	mov	r3, r2
   1b2bc:	6820      	ldr	r0, [r4, #0]
   1b2be:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b2c2:	460a      	mov	r2, r1
   1b2c4:	4661      	mov	r1, ip
   1b2c6:	e745      	b.n	1b154 <strtof+0xa8>
   1b2c8:	20008de0 	.word	0x20008de0

0001b2cc <__cxa_atexit>:
   1b2cc:	4613      	mov	r3, r2
   1b2ce:	460a      	mov	r2, r1
   1b2d0:	4601      	mov	r1, r0
   1b2d2:	2002      	movs	r0, #2
   1b2d4:	f001 bfd2 	b.w	1d27c <__register_exitproc>

0001b2d8 <__set_ctype>:
   1b2d8:	4b01      	ldr	r3, [pc, #4]	; (1b2e0 <__set_ctype+0x8>)
   1b2da:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
   1b2de:	4770      	bx	lr
   1b2e0:	200021d0 	.word	0x200021d0

0001b2e4 <isalnum>:
   1b2e4:	4b02      	ldr	r3, [pc, #8]	; (1b2f0 <isalnum+0xc>)
   1b2e6:	4418      	add	r0, r3
   1b2e8:	7840      	ldrb	r0, [r0, #1]
   1b2ea:	f000 0007 	and.w	r0, r0, #7
   1b2ee:	4770      	bx	lr
   1b2f0:	200021d0 	.word	0x200021d0

0001b2f4 <isspace>:
   1b2f4:	4b02      	ldr	r3, [pc, #8]	; (1b300 <isspace+0xc>)
   1b2f6:	4418      	add	r0, r3
   1b2f8:	7840      	ldrb	r0, [r0, #1]
   1b2fa:	f000 0008 	and.w	r0, r0, #8
   1b2fe:	4770      	bx	lr
   1b300:	200021d0 	.word	0x200021d0

0001b304 <stdio_exit_handler>:
   1b304:	4a02      	ldr	r2, [pc, #8]	; (1b310 <stdio_exit_handler+0xc>)
   1b306:	4903      	ldr	r1, [pc, #12]	; (1b314 <stdio_exit_handler+0x10>)
   1b308:	4803      	ldr	r0, [pc, #12]	; (1b318 <stdio_exit_handler+0x14>)
   1b30a:	f000 b95f 	b.w	1b5cc <_fwalk_sglue>
   1b30e:	bf00      	nop
   1b310:	2000931c 	.word	0x2000931c
   1b314:	00020b0d 	.word	0x00020b0d
   1b318:	20008de8 	.word	0x20008de8

0001b31c <cleanup_stdio>:
   1b31c:	4b0c      	ldr	r3, [pc, #48]	; (1b350 <cleanup_stdio+0x34>)
   1b31e:	6841      	ldr	r1, [r0, #4]
   1b320:	4299      	cmp	r1, r3
   1b322:	b510      	push	{r4, lr}
   1b324:	4604      	mov	r4, r0
   1b326:	d001      	beq.n	1b32c <cleanup_stdio+0x10>
   1b328:	f005 fbf0 	bl	20b0c <_fclose_r>
   1b32c:	68a1      	ldr	r1, [r4, #8]
   1b32e:	4b09      	ldr	r3, [pc, #36]	; (1b354 <cleanup_stdio+0x38>)
   1b330:	4299      	cmp	r1, r3
   1b332:	d002      	beq.n	1b33a <cleanup_stdio+0x1e>
   1b334:	4620      	mov	r0, r4
   1b336:	f005 fbe9 	bl	20b0c <_fclose_r>
   1b33a:	68e1      	ldr	r1, [r4, #12]
   1b33c:	4b06      	ldr	r3, [pc, #24]	; (1b358 <cleanup_stdio+0x3c>)
   1b33e:	4299      	cmp	r1, r3
   1b340:	d004      	beq.n	1b34c <cleanup_stdio+0x30>
   1b342:	4620      	mov	r0, r4
   1b344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b348:	f005 bbe0 	b.w	20b0c <_fclose_r>
   1b34c:	bd10      	pop	{r4, pc}
   1b34e:	bf00      	nop
   1b350:	2000d138 	.word	0x2000d138
   1b354:	2000d1a0 	.word	0x2000d1a0
   1b358:	2000d208 	.word	0x2000d208

0001b35c <__fp_lock>:
   1b35c:	b508      	push	{r3, lr}
   1b35e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1b360:	07da      	lsls	r2, r3, #31
   1b362:	d402      	bmi.n	1b36a <__fp_lock+0xe>
   1b364:	898b      	ldrh	r3, [r1, #12]
   1b366:	059b      	lsls	r3, r3, #22
   1b368:	d501      	bpl.n	1b36e <__fp_lock+0x12>
   1b36a:	2000      	movs	r0, #0
   1b36c:	bd08      	pop	{r3, pc}
   1b36e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1b370:	f001 fcd8 	bl	1cd24 <__retarget_lock_acquire_recursive>
   1b374:	2000      	movs	r0, #0
   1b376:	bd08      	pop	{r3, pc}

0001b378 <__fp_unlock>:
   1b378:	b508      	push	{r3, lr}
   1b37a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1b37c:	07da      	lsls	r2, r3, #31
   1b37e:	d402      	bmi.n	1b386 <__fp_unlock+0xe>
   1b380:	898b      	ldrh	r3, [r1, #12]
   1b382:	059b      	lsls	r3, r3, #22
   1b384:	d501      	bpl.n	1b38a <__fp_unlock+0x12>
   1b386:	2000      	movs	r0, #0
   1b388:	bd08      	pop	{r3, pc}
   1b38a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1b38c:	f001 fcd2 	bl	1cd34 <__retarget_lock_release_recursive>
   1b390:	2000      	movs	r0, #0
   1b392:	bd08      	pop	{r3, pc}
   1b394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b398:	4c2a      	ldr	r4, [pc, #168]	; (1b444 <__fp_unlock+0xcc>)
   1b39a:	4b2b      	ldr	r3, [pc, #172]	; (1b448 <__fp_unlock+0xd0>)
   1b39c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1b45c <__fp_unlock+0xe4>
   1b3a0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1b460 <__fp_unlock+0xe8>
   1b3a4:	4f29      	ldr	r7, [pc, #164]	; (1b44c <__fp_unlock+0xd4>)
   1b3a6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1b3aa:	2500      	movs	r5, #0
   1b3ac:	2304      	movs	r3, #4
   1b3ae:	2208      	movs	r2, #8
   1b3b0:	4629      	mov	r1, r5
   1b3b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1b3b6:	4e26      	ldr	r6, [pc, #152]	; (1b450 <__fp_unlock+0xd8>)
   1b3b8:	6665      	str	r5, [r4, #100]	; 0x64
   1b3ba:	e9c4 5302 	strd	r5, r3, [r4, #8]
   1b3be:	e9c4 5500 	strd	r5, r5, [r4]
   1b3c2:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1b3c6:	61a5      	str	r5, [r4, #24]
   1b3c8:	f000 fb36 	bl	1ba38 <memset>
   1b3cc:	4b21      	ldr	r3, [pc, #132]	; (1b454 <__fp_unlock+0xdc>)
   1b3ce:	6763      	str	r3, [r4, #116]	; 0x74
   1b3d0:	2208      	movs	r2, #8
   1b3d2:	4629      	mov	r1, r5
   1b3d4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1b3d8:	e9c4 4907 	strd	r4, r9, [r4, #28]
   1b3dc:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   1b3e0:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   1b3e4:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   1b3e8:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   1b3ec:	6725      	str	r5, [r4, #112]	; 0x70
   1b3ee:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1b3f2:	62e6      	str	r6, [r4, #44]	; 0x2c
   1b3f4:	f000 fb20 	bl	1ba38 <memset>
   1b3f8:	4b17      	ldr	r3, [pc, #92]	; (1b458 <__fp_unlock+0xe0>)
   1b3fa:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   1b3fe:	4629      	mov	r1, r5
   1b400:	f104 0368 	add.w	r3, r4, #104	; 0x68
   1b404:	2208      	movs	r2, #8
   1b406:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   1b40a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   1b40e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   1b412:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   1b416:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   1b41a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   1b41e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   1b422:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   1b426:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   1b42a:	f000 fb05 	bl	1ba38 <memset>
   1b42e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1b432:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   1b436:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   1b43a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1b43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b442:	bf00      	nop
   1b444:	2000d138 	.word	0x2000d138
   1b448:	0001b305 	.word	0x0001b305
   1b44c:	0001b785 	.word	0x0001b785
   1b450:	0001b7a5 	.word	0x0001b7a5
   1b454:	00010009 	.word	0x00010009
   1b458:	00020012 	.word	0x00020012
   1b45c:	0001b71d 	.word	0x0001b71d
   1b460:	0001b745 	.word	0x0001b745

0001b464 <__sfp>:
   1b464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b468:	4607      	mov	r7, r0
   1b46a:	482c      	ldr	r0, [pc, #176]	; (1b51c <__sfp+0xb8>)
   1b46c:	f001 fc5a 	bl	1cd24 <__retarget_lock_acquire_recursive>
   1b470:	4b2b      	ldr	r3, [pc, #172]	; (1b520 <__sfp+0xbc>)
   1b472:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   1b476:	2b00      	cmp	r3, #0
   1b478:	d046      	beq.n	1b508 <__sfp+0xa4>
   1b47a:	4e2a      	ldr	r6, [pc, #168]	; (1b524 <__sfp+0xc0>)
   1b47c:	f04f 0804 	mov.w	r8, #4
   1b480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1b484:	3b01      	subs	r3, #1
   1b486:	d504      	bpl.n	1b492 <__sfp+0x2e>
   1b488:	e025      	b.n	1b4d6 <__sfp+0x72>
   1b48a:	1c5a      	adds	r2, r3, #1
   1b48c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1b490:	d021      	beq.n	1b4d6 <__sfp+0x72>
   1b492:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1b496:	3b01      	subs	r3, #1
   1b498:	2d00      	cmp	r5, #0
   1b49a:	d1f6      	bne.n	1b48a <__sfp+0x26>
   1b49c:	4b22      	ldr	r3, [pc, #136]	; (1b528 <__sfp+0xc4>)
   1b49e:	60e3      	str	r3, [r4, #12]
   1b4a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1b4a4:	6665      	str	r5, [r4, #100]	; 0x64
   1b4a6:	f001 fc35 	bl	1cd14 <__retarget_lock_init_recursive>
   1b4aa:	481c      	ldr	r0, [pc, #112]	; (1b51c <__sfp+0xb8>)
   1b4ac:	f001 fc42 	bl	1cd34 <__retarget_lock_release_recursive>
   1b4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1b4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1b4b8:	6025      	str	r5, [r4, #0]
   1b4ba:	61a5      	str	r5, [r4, #24]
   1b4bc:	2208      	movs	r2, #8
   1b4be:	4629      	mov	r1, r5
   1b4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1b4c4:	f000 fab8 	bl	1ba38 <memset>
   1b4c8:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
   1b4cc:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
   1b4d0:	4620      	mov	r0, r4
   1b4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4d6:	6835      	ldr	r5, [r6, #0]
   1b4d8:	b10d      	cbz	r5, 1b4de <__sfp+0x7a>
   1b4da:	462e      	mov	r6, r5
   1b4dc:	e7d0      	b.n	1b480 <__sfp+0x1c>
   1b4de:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1b4e2:	4638      	mov	r0, r7
   1b4e4:	f7fe f9a2 	bl	1982c <_malloc_r>
   1b4e8:	4604      	mov	r4, r0
   1b4ea:	b180      	cbz	r0, 1b50e <__sfp+0xaa>
   1b4ec:	6005      	str	r5, [r0, #0]
   1b4ee:	f8c0 8004 	str.w	r8, [r0, #4]
   1b4f2:	300c      	adds	r0, #12
   1b4f4:	4629      	mov	r1, r5
   1b4f6:	60a0      	str	r0, [r4, #8]
   1b4f8:	4625      	mov	r5, r4
   1b4fa:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1b4fe:	f000 fa9b 	bl	1ba38 <memset>
   1b502:	6034      	str	r4, [r6, #0]
   1b504:	462e      	mov	r6, r5
   1b506:	e7bb      	b.n	1b480 <__sfp+0x1c>
   1b508:	f7ff ff44 	bl	1b394 <__fp_unlock+0x1c>
   1b50c:	e7b5      	b.n	1b47a <__sfp+0x16>
   1b50e:	4803      	ldr	r0, [pc, #12]	; (1b51c <__sfp+0xb8>)
   1b510:	6034      	str	r4, [r6, #0]
   1b512:	f001 fc0f 	bl	1cd34 <__retarget_lock_release_recursive>
   1b516:	230c      	movs	r3, #12
   1b518:	603b      	str	r3, [r7, #0]
   1b51a:	e7d9      	b.n	1b4d0 <__sfp+0x6c>
   1b51c:	2000d540 	.word	0x2000d540
   1b520:	2000d138 	.word	0x2000d138
   1b524:	2000931c 	.word	0x2000931c
   1b528:	ffff0001 	.word	0xffff0001

0001b52c <__sinit>:
   1b52c:	b510      	push	{r4, lr}
   1b52e:	4604      	mov	r4, r0
   1b530:	480b      	ldr	r0, [pc, #44]	; (1b560 <__sinit+0x34>)
   1b532:	f001 fbf7 	bl	1cd24 <__retarget_lock_acquire_recursive>
   1b536:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b538:	b92b      	cbnz	r3, 1b546 <__sinit+0x1a>
   1b53a:	4b0a      	ldr	r3, [pc, #40]	; (1b564 <__sinit+0x38>)
   1b53c:	4a0a      	ldr	r2, [pc, #40]	; (1b568 <__sinit+0x3c>)
   1b53e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   1b542:	6362      	str	r2, [r4, #52]	; 0x34
   1b544:	b123      	cbz	r3, 1b550 <__sinit+0x24>
   1b546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b54a:	4805      	ldr	r0, [pc, #20]	; (1b560 <__sinit+0x34>)
   1b54c:	f001 bbf2 	b.w	1cd34 <__retarget_lock_release_recursive>
   1b550:	f7ff ff20 	bl	1b394 <__fp_unlock+0x1c>
   1b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b558:	4801      	ldr	r0, [pc, #4]	; (1b560 <__sinit+0x34>)
   1b55a:	f001 bbeb 	b.w	1cd34 <__retarget_lock_release_recursive>
   1b55e:	bf00      	nop
   1b560:	2000d540 	.word	0x2000d540
   1b564:	2000d138 	.word	0x2000d138
   1b568:	0001b31d 	.word	0x0001b31d

0001b56c <__sfp_lock_acquire>:
   1b56c:	4801      	ldr	r0, [pc, #4]	; (1b574 <__sfp_lock_acquire+0x8>)
   1b56e:	f001 bbd9 	b.w	1cd24 <__retarget_lock_acquire_recursive>
   1b572:	bf00      	nop
   1b574:	2000d540 	.word	0x2000d540

0001b578 <__sfp_lock_release>:
   1b578:	4801      	ldr	r0, [pc, #4]	; (1b580 <__sfp_lock_release+0x8>)
   1b57a:	f001 bbdb 	b.w	1cd34 <__retarget_lock_release_recursive>
   1b57e:	bf00      	nop
   1b580:	2000d540 	.word	0x2000d540

0001b584 <__fp_lock_all>:
   1b584:	b508      	push	{r3, lr}
   1b586:	4805      	ldr	r0, [pc, #20]	; (1b59c <__fp_lock_all+0x18>)
   1b588:	f001 fbcc 	bl	1cd24 <__retarget_lock_acquire_recursive>
   1b58c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b590:	4a03      	ldr	r2, [pc, #12]	; (1b5a0 <__fp_lock_all+0x1c>)
   1b592:	4904      	ldr	r1, [pc, #16]	; (1b5a4 <__fp_lock_all+0x20>)
   1b594:	2000      	movs	r0, #0
   1b596:	f000 b819 	b.w	1b5cc <_fwalk_sglue>
   1b59a:	bf00      	nop
   1b59c:	2000d540 	.word	0x2000d540
   1b5a0:	2000931c 	.word	0x2000931c
   1b5a4:	0001b35d 	.word	0x0001b35d

0001b5a8 <__fp_unlock_all>:
   1b5a8:	b508      	push	{r3, lr}
   1b5aa:	4a05      	ldr	r2, [pc, #20]	; (1b5c0 <__fp_unlock_all+0x18>)
   1b5ac:	4905      	ldr	r1, [pc, #20]	; (1b5c4 <__fp_unlock_all+0x1c>)
   1b5ae:	2000      	movs	r0, #0
   1b5b0:	f000 f80c 	bl	1b5cc <_fwalk_sglue>
   1b5b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b5b8:	4803      	ldr	r0, [pc, #12]	; (1b5c8 <__fp_unlock_all+0x20>)
   1b5ba:	f001 bbbb 	b.w	1cd34 <__retarget_lock_release_recursive>
   1b5be:	bf00      	nop
   1b5c0:	2000931c 	.word	0x2000931c
   1b5c4:	0001b379 	.word	0x0001b379
   1b5c8:	2000d540 	.word	0x2000d540

0001b5cc <_fwalk_sglue>:
   1b5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b5d0:	4680      	mov	r8, r0
   1b5d2:	460f      	mov	r7, r1
   1b5d4:	4616      	mov	r6, r2
   1b5d6:	f04f 0900 	mov.w	r9, #0
   1b5da:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   1b5de:	3d01      	subs	r5, #1
   1b5e0:	d411      	bmi.n	1b606 <_fwalk_sglue+0x3a>
   1b5e2:	89a3      	ldrh	r3, [r4, #12]
   1b5e4:	2b01      	cmp	r3, #1
   1b5e6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1b5ea:	d908      	bls.n	1b5fe <_fwalk_sglue+0x32>
   1b5ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1b5f0:	3301      	adds	r3, #1
   1b5f2:	4621      	mov	r1, r4
   1b5f4:	d003      	beq.n	1b5fe <_fwalk_sglue+0x32>
   1b5f6:	4640      	mov	r0, r8
   1b5f8:	47b8      	blx	r7
   1b5fa:	ea49 0900 	orr.w	r9, r9, r0
   1b5fe:	1c6b      	adds	r3, r5, #1
   1b600:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1b604:	d1ed      	bne.n	1b5e2 <_fwalk_sglue+0x16>
   1b606:	6836      	ldr	r6, [r6, #0]
   1b608:	2e00      	cmp	r6, #0
   1b60a:	d1e6      	bne.n	1b5da <_fwalk_sglue+0xe>
   1b60c:	4648      	mov	r0, r9
   1b60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b612:	bf00      	nop

0001b614 <_snprintf_r>:
   1b614:	b408      	push	{r3}
   1b616:	b510      	push	{r4, lr}
   1b618:	2a00      	cmp	r2, #0
   1b61a:	b09d      	sub	sp, #116	; 0x74
   1b61c:	4604      	mov	r4, r0
   1b61e:	db33      	blt.n	1b688 <_snprintf_r+0x74>
   1b620:	f44f 7302 	mov.w	r3, #520	; 0x208
   1b624:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b628:	9102      	str	r1, [sp, #8]
   1b62a:	9106      	str	r1, [sp, #24]
   1b62c:	ab20      	add	r3, sp, #128	; 0x80
   1b62e:	d017      	beq.n	1b660 <_snprintf_r+0x4c>
   1b630:	3a01      	subs	r2, #1
   1b632:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b636:	9204      	str	r2, [sp, #16]
   1b638:	9207      	str	r2, [sp, #28]
   1b63a:	f8ad 1016 	strh.w	r1, [sp, #22]
   1b63e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b640:	9301      	str	r3, [sp, #4]
   1b642:	a902      	add	r1, sp, #8
   1b644:	f003 fcc0 	bl	1efc8 <_svfprintf_r>
   1b648:	1c42      	adds	r2, r0, #1
   1b64a:	da01      	bge.n	1b650 <_snprintf_r+0x3c>
   1b64c:	238b      	movs	r3, #139	; 0x8b
   1b64e:	6023      	str	r3, [r4, #0]
   1b650:	9b02      	ldr	r3, [sp, #8]
   1b652:	2200      	movs	r2, #0
   1b654:	701a      	strb	r2, [r3, #0]
   1b656:	b01d      	add	sp, #116	; 0x74
   1b658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b65c:	b001      	add	sp, #4
   1b65e:	4770      	bx	lr
   1b660:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b664:	9204      	str	r2, [sp, #16]
   1b666:	9207      	str	r2, [sp, #28]
   1b668:	f8ad 1016 	strh.w	r1, [sp, #22]
   1b66c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b66e:	9301      	str	r3, [sp, #4]
   1b670:	a902      	add	r1, sp, #8
   1b672:	f003 fca9 	bl	1efc8 <_svfprintf_r>
   1b676:	1c43      	adds	r3, r0, #1
   1b678:	da01      	bge.n	1b67e <_snprintf_r+0x6a>
   1b67a:	238b      	movs	r3, #139	; 0x8b
   1b67c:	6023      	str	r3, [r4, #0]
   1b67e:	b01d      	add	sp, #116	; 0x74
   1b680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b684:	b001      	add	sp, #4
   1b686:	4770      	bx	lr
   1b688:	238b      	movs	r3, #139	; 0x8b
   1b68a:	6003      	str	r3, [r0, #0]
   1b68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b690:	e7f5      	b.n	1b67e <_snprintf_r+0x6a>
   1b692:	bf00      	nop

0001b694 <snprintf>:
   1b694:	b40c      	push	{r2, r3}
   1b696:	b510      	push	{r4, lr}
   1b698:	4b1f      	ldr	r3, [pc, #124]	; (1b718 <snprintf+0x84>)
   1b69a:	2900      	cmp	r1, #0
   1b69c:	681c      	ldr	r4, [r3, #0]
   1b69e:	b09c      	sub	sp, #112	; 0x70
   1b6a0:	db35      	blt.n	1b70e <snprintf+0x7a>
   1b6a2:	f44f 7302 	mov.w	r3, #520	; 0x208
   1b6a6:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b6aa:	9002      	str	r0, [sp, #8]
   1b6ac:	9006      	str	r0, [sp, #24]
   1b6ae:	ab1f      	add	r3, sp, #124	; 0x7c
   1b6b0:	d018      	beq.n	1b6e4 <snprintf+0x50>
   1b6b2:	3901      	subs	r1, #1
   1b6b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b6b8:	9104      	str	r1, [sp, #16]
   1b6ba:	9107      	str	r1, [sp, #28]
   1b6bc:	f8ad 2016 	strh.w	r2, [sp, #22]
   1b6c0:	a902      	add	r1, sp, #8
   1b6c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b6c4:	9301      	str	r3, [sp, #4]
   1b6c6:	4620      	mov	r0, r4
   1b6c8:	f003 fc7e 	bl	1efc8 <_svfprintf_r>
   1b6cc:	1c42      	adds	r2, r0, #1
   1b6ce:	da01      	bge.n	1b6d4 <snprintf+0x40>
   1b6d0:	238b      	movs	r3, #139	; 0x8b
   1b6d2:	6023      	str	r3, [r4, #0]
   1b6d4:	9b02      	ldr	r3, [sp, #8]
   1b6d6:	2200      	movs	r2, #0
   1b6d8:	701a      	strb	r2, [r3, #0]
   1b6da:	b01c      	add	sp, #112	; 0x70
   1b6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b6e0:	b002      	add	sp, #8
   1b6e2:	4770      	bx	lr
   1b6e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b6e8:	9104      	str	r1, [sp, #16]
   1b6ea:	9107      	str	r1, [sp, #28]
   1b6ec:	f8ad 2016 	strh.w	r2, [sp, #22]
   1b6f0:	a902      	add	r1, sp, #8
   1b6f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b6f4:	9301      	str	r3, [sp, #4]
   1b6f6:	4620      	mov	r0, r4
   1b6f8:	f003 fc66 	bl	1efc8 <_svfprintf_r>
   1b6fc:	1c43      	adds	r3, r0, #1
   1b6fe:	da01      	bge.n	1b704 <snprintf+0x70>
   1b700:	238b      	movs	r3, #139	; 0x8b
   1b702:	6023      	str	r3, [r4, #0]
   1b704:	b01c      	add	sp, #112	; 0x70
   1b706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b70a:	b002      	add	sp, #8
   1b70c:	4770      	bx	lr
   1b70e:	238b      	movs	r3, #139	; 0x8b
   1b710:	6023      	str	r3, [r4, #0]
   1b712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b716:	e7f5      	b.n	1b704 <snprintf+0x70>
   1b718:	20008de0 	.word	0x20008de0

0001b71c <__sread>:
   1b71c:	b510      	push	{r4, lr}
   1b71e:	460c      	mov	r4, r1
   1b720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b724:	f001 fa8c 	bl	1cc40 <_read_r>
   1b728:	2800      	cmp	r0, #0
   1b72a:	db03      	blt.n	1b734 <__sread+0x18>
   1b72c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1b72e:	4403      	add	r3, r0
   1b730:	6523      	str	r3, [r4, #80]	; 0x50
   1b732:	bd10      	pop	{r4, pc}
   1b734:	89a3      	ldrh	r3, [r4, #12]
   1b736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1b73a:	81a3      	strh	r3, [r4, #12]
   1b73c:	bd10      	pop	{r4, pc}
   1b73e:	bf00      	nop

0001b740 <__seofread>:
   1b740:	2000      	movs	r0, #0
   1b742:	4770      	bx	lr

0001b744 <__swrite>:
   1b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b748:	460c      	mov	r4, r1
   1b74a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1b74e:	461f      	mov	r7, r3
   1b750:	05cb      	lsls	r3, r1, #23
   1b752:	4605      	mov	r5, r0
   1b754:	4616      	mov	r6, r2
   1b756:	d40b      	bmi.n	1b770 <__swrite+0x2c>
   1b758:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1b75c:	81a1      	strh	r1, [r4, #12]
   1b75e:	463b      	mov	r3, r7
   1b760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1b764:	4632      	mov	r2, r6
   1b766:	4628      	mov	r0, r5
   1b768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b76c:	f001 ba90 	b.w	1cc90 <_write_r>
   1b770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1b774:	2302      	movs	r3, #2
   1b776:	2200      	movs	r2, #0
   1b778:	f001 fa4c 	bl	1cc14 <_lseek_r>
   1b77c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   1b780:	e7ea      	b.n	1b758 <__swrite+0x14>
   1b782:	bf00      	nop

0001b784 <__sseek>:
   1b784:	b510      	push	{r4, lr}
   1b786:	460c      	mov	r4, r1
   1b788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b78c:	f001 fa42 	bl	1cc14 <_lseek_r>
   1b790:	89a3      	ldrh	r3, [r4, #12]
   1b792:	1c42      	adds	r2, r0, #1
   1b794:	bf0e      	itee	eq
   1b796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1b79a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1b79e:	6520      	strne	r0, [r4, #80]	; 0x50
   1b7a0:	81a3      	strh	r3, [r4, #12]
   1b7a2:	bd10      	pop	{r4, pc}

0001b7a4 <__sclose>:
   1b7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b7a8:	f001 ba22 	b.w	1cbf0 <_close_r>

0001b7ac <_vdprintf_r>:
   1b7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7ae:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   1b7b2:	af04      	add	r7, sp, #16
   1b7b4:	9300      	str	r3, [sp, #0]
   1b7b6:	4613      	mov	r3, r2
   1b7b8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b7bc:	460e      	mov	r6, r1
   1b7be:	9203      	str	r2, [sp, #12]
   1b7c0:	4639      	mov	r1, r7
   1b7c2:	aa03      	add	r2, sp, #12
   1b7c4:	4605      	mov	r5, r0
   1b7c6:	f000 f825 	bl	1b814 <_vasnprintf_r>
   1b7ca:	b188      	cbz	r0, 1b7f0 <_vdprintf_r+0x44>
   1b7cc:	4604      	mov	r4, r0
   1b7ce:	4602      	mov	r2, r0
   1b7d0:	9b03      	ldr	r3, [sp, #12]
   1b7d2:	4631      	mov	r1, r6
   1b7d4:	4628      	mov	r0, r5
   1b7d6:	f001 fa5b 	bl	1cc90 <_write_r>
   1b7da:	42bc      	cmp	r4, r7
   1b7dc:	9003      	str	r0, [sp, #12]
   1b7de:	d004      	beq.n	1b7ea <_vdprintf_r+0x3e>
   1b7e0:	4628      	mov	r0, r5
   1b7e2:	4621      	mov	r1, r4
   1b7e4:	f001 fdde 	bl	1d3a4 <_free_r>
   1b7e8:	9803      	ldr	r0, [sp, #12]
   1b7ea:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   1b7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b7f4:	e7f9      	b.n	1b7ea <_vdprintf_r+0x3e>
   1b7f6:	bf00      	nop

0001b7f8 <vdprintf>:
   1b7f8:	b410      	push	{r4}
   1b7fa:	4c05      	ldr	r4, [pc, #20]	; (1b810 <vdprintf+0x18>)
   1b7fc:	4684      	mov	ip, r0
   1b7fe:	4613      	mov	r3, r2
   1b800:	6820      	ldr	r0, [r4, #0]
   1b802:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b806:	460a      	mov	r2, r1
   1b808:	4661      	mov	r1, ip
   1b80a:	f7ff bfcf 	b.w	1b7ac <_vdprintf_r>
   1b80e:	bf00      	nop
   1b810:	20008de0 	.word	0x20008de0

0001b814 <_vasnprintf_r>:
   1b814:	b530      	push	{r4, r5, lr}
   1b816:	6814      	ldr	r4, [r2, #0]
   1b818:	4615      	mov	r5, r2
   1b81a:	b09b      	sub	sp, #108	; 0x6c
   1b81c:	461a      	mov	r2, r3
   1b81e:	b109      	cbz	r1, 1b824 <_vasnprintf_r+0x10>
   1b820:	2c00      	cmp	r4, #0
   1b822:	d119      	bne.n	1b858 <_vasnprintf_r+0x44>
   1b824:	2100      	movs	r1, #0
   1b826:	f44f 7322 	mov.w	r3, #648	; 0x288
   1b82a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b82e:	9100      	str	r1, [sp, #0]
   1b830:	9104      	str	r1, [sp, #16]
   1b832:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b836:	9102      	str	r1, [sp, #8]
   1b838:	9105      	str	r1, [sp, #20]
   1b83a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b83e:	4669      	mov	r1, sp
   1b840:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1b842:	f003 fbc1 	bl	1efc8 <_svfprintf_r>
   1b846:	2800      	cmp	r0, #0
   1b848:	db13      	blt.n	1b872 <_vasnprintf_r+0x5e>
   1b84a:	9b00      	ldr	r3, [sp, #0]
   1b84c:	6028      	str	r0, [r5, #0]
   1b84e:	2200      	movs	r2, #0
   1b850:	701a      	strb	r2, [r3, #0]
   1b852:	9804      	ldr	r0, [sp, #16]
   1b854:	b01b      	add	sp, #108	; 0x6c
   1b856:	bd30      	pop	{r4, r5, pc}
   1b858:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   1b85c:	9100      	str	r1, [sp, #0]
   1b85e:	9104      	str	r1, [sp, #16]
   1b860:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b864:	4621      	mov	r1, r4
   1b866:	dae4      	bge.n	1b832 <_vasnprintf_r+0x1e>
   1b868:	238b      	movs	r3, #139	; 0x8b
   1b86a:	6003      	str	r3, [r0, #0]
   1b86c:	2000      	movs	r0, #0
   1b86e:	b01b      	add	sp, #108	; 0x6c
   1b870:	bd30      	pop	{r4, r5, pc}
   1b872:	2000      	movs	r0, #0
   1b874:	e7ee      	b.n	1b854 <_vasnprintf_r+0x40>
   1b876:	bf00      	nop

0001b878 <vasnprintf>:
   1b878:	b530      	push	{r4, r5, lr}
   1b87a:	4c18      	ldr	r4, [pc, #96]	; (1b8dc <vasnprintf+0x64>)
   1b87c:	460d      	mov	r5, r1
   1b87e:	b09b      	sub	sp, #108	; 0x6c
   1b880:	6821      	ldr	r1, [r4, #0]
   1b882:	682c      	ldr	r4, [r5, #0]
   1b884:	b108      	cbz	r0, 1b88a <vasnprintf+0x12>
   1b886:	2c00      	cmp	r4, #0
   1b888:	d119      	bne.n	1b8be <vasnprintf+0x46>
   1b88a:	2400      	movs	r4, #0
   1b88c:	f44f 7022 	mov.w	r0, #648	; 0x288
   1b890:	f8ad 000c 	strh.w	r0, [sp, #12]
   1b894:	9400      	str	r4, [sp, #0]
   1b896:	9404      	str	r4, [sp, #16]
   1b898:	4608      	mov	r0, r1
   1b89a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b89e:	f8ad 100e 	strh.w	r1, [sp, #14]
   1b8a2:	4669      	mov	r1, sp
   1b8a4:	9402      	str	r4, [sp, #8]
   1b8a6:	9405      	str	r4, [sp, #20]
   1b8a8:	f003 fb8e 	bl	1efc8 <_svfprintf_r>
   1b8ac:	2800      	cmp	r0, #0
   1b8ae:	db12      	blt.n	1b8d6 <vasnprintf+0x5e>
   1b8b0:	9b00      	ldr	r3, [sp, #0]
   1b8b2:	6028      	str	r0, [r5, #0]
   1b8b4:	2200      	movs	r2, #0
   1b8b6:	701a      	strb	r2, [r3, #0]
   1b8b8:	9804      	ldr	r0, [sp, #16]
   1b8ba:	b01b      	add	sp, #108	; 0x6c
   1b8bc:	bd30      	pop	{r4, r5, pc}
   1b8be:	9000      	str	r0, [sp, #0]
   1b8c0:	9004      	str	r0, [sp, #16]
   1b8c2:	f44f 60c1 	mov.w	r0, #1544	; 0x608
   1b8c6:	f8ad 000c 	strh.w	r0, [sp, #12]
   1b8ca:	dae5      	bge.n	1b898 <vasnprintf+0x20>
   1b8cc:	238b      	movs	r3, #139	; 0x8b
   1b8ce:	2000      	movs	r0, #0
   1b8d0:	600b      	str	r3, [r1, #0]
   1b8d2:	b01b      	add	sp, #108	; 0x6c
   1b8d4:	bd30      	pop	{r4, r5, pc}
   1b8d6:	2000      	movs	r0, #0
   1b8d8:	e7ef      	b.n	1b8ba <vasnprintf+0x42>
   1b8da:	bf00      	nop
   1b8dc:	20008de0 	.word	0x20008de0

0001b8e0 <memcmp>:
   1b8e0:	2a03      	cmp	r2, #3
   1b8e2:	b570      	push	{r4, r5, r6, lr}
   1b8e4:	d914      	bls.n	1b910 <memcmp+0x30>
   1b8e6:	ea40 0301 	orr.w	r3, r0, r1
   1b8ea:	079b      	lsls	r3, r3, #30
   1b8ec:	d122      	bne.n	1b934 <memcmp+0x54>
   1b8ee:	4604      	mov	r4, r0
   1b8f0:	460b      	mov	r3, r1
   1b8f2:	4619      	mov	r1, r3
   1b8f4:	4620      	mov	r0, r4
   1b8f6:	680e      	ldr	r6, [r1, #0]
   1b8f8:	6805      	ldr	r5, [r0, #0]
   1b8fa:	42b5      	cmp	r5, r6
   1b8fc:	f104 0404 	add.w	r4, r4, #4
   1b900:	f103 0304 	add.w	r3, r3, #4
   1b904:	d116      	bne.n	1b934 <memcmp+0x54>
   1b906:	3a04      	subs	r2, #4
   1b908:	2a03      	cmp	r2, #3
   1b90a:	4620      	mov	r0, r4
   1b90c:	4619      	mov	r1, r3
   1b90e:	d8f0      	bhi.n	1b8f2 <memcmp+0x12>
   1b910:	1e54      	subs	r4, r2, #1
   1b912:	b19a      	cbz	r2, 1b93c <memcmp+0x5c>
   1b914:	1e42      	subs	r2, r0, #1
   1b916:	3901      	subs	r1, #1
   1b918:	e001      	b.n	1b91e <memcmp+0x3e>
   1b91a:	18c3      	adds	r3, r0, r3
   1b91c:	d00c      	beq.n	1b938 <memcmp+0x58>
   1b91e:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1b922:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1b926:	45e6      	cmp	lr, ip
   1b928:	eba4 0302 	sub.w	r3, r4, r2
   1b92c:	d0f5      	beq.n	1b91a <memcmp+0x3a>
   1b92e:	ebae 000c 	sub.w	r0, lr, ip
   1b932:	bd70      	pop	{r4, r5, r6, pc}
   1b934:	1e54      	subs	r4, r2, #1
   1b936:	e7ed      	b.n	1b914 <memcmp+0x34>
   1b938:	4618      	mov	r0, r3
   1b93a:	bd70      	pop	{r4, r5, r6, pc}
   1b93c:	4610      	mov	r0, r2
   1b93e:	bd70      	pop	{r4, r5, r6, pc}

0001b940 <memmove>:
   1b940:	4288      	cmp	r0, r1
   1b942:	d90d      	bls.n	1b960 <memmove+0x20>
   1b944:	188b      	adds	r3, r1, r2
   1b946:	4283      	cmp	r3, r0
   1b948:	d90a      	bls.n	1b960 <memmove+0x20>
   1b94a:	eb00 0c02 	add.w	ip, r0, r2
   1b94e:	b1ba      	cbz	r2, 1b980 <memmove+0x40>
   1b950:	4662      	mov	r2, ip
   1b952:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1b956:	f802 cd01 	strb.w	ip, [r2, #-1]!
   1b95a:	4299      	cmp	r1, r3
   1b95c:	d1f9      	bne.n	1b952 <memmove+0x12>
   1b95e:	4770      	bx	lr
   1b960:	2a0f      	cmp	r2, #15
   1b962:	d80e      	bhi.n	1b982 <memmove+0x42>
   1b964:	4603      	mov	r3, r0
   1b966:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1b96a:	b14a      	cbz	r2, 1b980 <memmove+0x40>
   1b96c:	f10c 0c01 	add.w	ip, ip, #1
   1b970:	3b01      	subs	r3, #1
   1b972:	448c      	add	ip, r1
   1b974:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b978:	f803 2f01 	strb.w	r2, [r3, #1]!
   1b97c:	4561      	cmp	r1, ip
   1b97e:	d1f9      	bne.n	1b974 <memmove+0x34>
   1b980:	4770      	bx	lr
   1b982:	ea40 0301 	orr.w	r3, r0, r1
   1b986:	079b      	lsls	r3, r3, #30
   1b988:	d150      	bne.n	1ba2c <memmove+0xec>
   1b98a:	f1a2 0310 	sub.w	r3, r2, #16
   1b98e:	b570      	push	{r4, r5, r6, lr}
   1b990:	f101 0c20 	add.w	ip, r1, #32
   1b994:	f023 050f 	bic.w	r5, r3, #15
   1b998:	f101 0e10 	add.w	lr, r1, #16
   1b99c:	f100 0410 	add.w	r4, r0, #16
   1b9a0:	44ac      	add	ip, r5
   1b9a2:	091b      	lsrs	r3, r3, #4
   1b9a4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   1b9a8:	f844 5c10 	str.w	r5, [r4, #-16]
   1b9ac:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   1b9b0:	f844 5c0c 	str.w	r5, [r4, #-12]
   1b9b4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   1b9b8:	f844 5c08 	str.w	r5, [r4, #-8]
   1b9bc:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   1b9c0:	f844 5c04 	str.w	r5, [r4, #-4]
   1b9c4:	f10e 0e10 	add.w	lr, lr, #16
   1b9c8:	45e6      	cmp	lr, ip
   1b9ca:	f104 0410 	add.w	r4, r4, #16
   1b9ce:	d1e9      	bne.n	1b9a4 <memmove+0x64>
   1b9d0:	3301      	adds	r3, #1
   1b9d2:	f012 0f0c 	tst.w	r2, #12
   1b9d6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1b9da:	f002 040f 	and.w	r4, r2, #15
   1b9de:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   1b9e2:	d027      	beq.n	1ba34 <memmove+0xf4>
   1b9e4:	3c04      	subs	r4, #4
   1b9e6:	f024 0603 	bic.w	r6, r4, #3
   1b9ea:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1b9ee:	441e      	add	r6, r3
   1b9f0:	1f1c      	subs	r4, r3, #4
   1b9f2:	468e      	mov	lr, r1
   1b9f4:	f85e 5b04 	ldr.w	r5, [lr], #4
   1b9f8:	f844 5f04 	str.w	r5, [r4, #4]!
   1b9fc:	42b4      	cmp	r4, r6
   1b9fe:	d1f9      	bne.n	1b9f4 <memmove+0xb4>
   1ba00:	f10c 0401 	add.w	r4, ip, #1
   1ba04:	f002 0203 	and.w	r2, r2, #3
   1ba08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1ba0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1ba10:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1ba14:	b14a      	cbz	r2, 1ba2a <memmove+0xea>
   1ba16:	f10c 0c01 	add.w	ip, ip, #1
   1ba1a:	3b01      	subs	r3, #1
   1ba1c:	448c      	add	ip, r1
   1ba1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   1ba22:	f803 2f01 	strb.w	r2, [r3, #1]!
   1ba26:	4561      	cmp	r1, ip
   1ba28:	d1f9      	bne.n	1ba1e <memmove+0xde>
   1ba2a:	bd70      	pop	{r4, r5, r6, pc}
   1ba2c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1ba30:	4603      	mov	r3, r0
   1ba32:	e79b      	b.n	1b96c <memmove+0x2c>
   1ba34:	4622      	mov	r2, r4
   1ba36:	e7eb      	b.n	1ba10 <memmove+0xd0>

0001ba38 <memset>:
   1ba38:	0783      	lsls	r3, r0, #30
   1ba3a:	b530      	push	{r4, r5, lr}
   1ba3c:	d048      	beq.n	1bad0 <memset+0x98>
   1ba3e:	1e54      	subs	r4, r2, #1
   1ba40:	2a00      	cmp	r2, #0
   1ba42:	d03f      	beq.n	1bac4 <memset+0x8c>
   1ba44:	b2ca      	uxtb	r2, r1
   1ba46:	4603      	mov	r3, r0
   1ba48:	e001      	b.n	1ba4e <memset+0x16>
   1ba4a:	3c01      	subs	r4, #1
   1ba4c:	d33a      	bcc.n	1bac4 <memset+0x8c>
   1ba4e:	f803 2b01 	strb.w	r2, [r3], #1
   1ba52:	079d      	lsls	r5, r3, #30
   1ba54:	d1f9      	bne.n	1ba4a <memset+0x12>
   1ba56:	2c03      	cmp	r4, #3
   1ba58:	d92d      	bls.n	1bab6 <memset+0x7e>
   1ba5a:	b2cd      	uxtb	r5, r1
   1ba5c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1ba60:	2c0f      	cmp	r4, #15
   1ba62:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1ba66:	d936      	bls.n	1bad6 <memset+0x9e>
   1ba68:	f1a4 0210 	sub.w	r2, r4, #16
   1ba6c:	f022 0c0f 	bic.w	ip, r2, #15
   1ba70:	f103 0e20 	add.w	lr, r3, #32
   1ba74:	44e6      	add	lr, ip
   1ba76:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   1ba7a:	f103 0210 	add.w	r2, r3, #16
   1ba7e:	e942 5504 	strd	r5, r5, [r2, #-16]
   1ba82:	e942 5502 	strd	r5, r5, [r2, #-8]
   1ba86:	3210      	adds	r2, #16
   1ba88:	4572      	cmp	r2, lr
   1ba8a:	d1f8      	bne.n	1ba7e <memset+0x46>
   1ba8c:	f10c 0201 	add.w	r2, ip, #1
   1ba90:	f014 0f0c 	tst.w	r4, #12
   1ba94:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   1ba98:	f004 0c0f 	and.w	ip, r4, #15
   1ba9c:	d013      	beq.n	1bac6 <memset+0x8e>
   1ba9e:	f1ac 0304 	sub.w	r3, ip, #4
   1baa2:	f023 0303 	bic.w	r3, r3, #3
   1baa6:	3304      	adds	r3, #4
   1baa8:	4413      	add	r3, r2
   1baaa:	f842 5b04 	str.w	r5, [r2], #4
   1baae:	4293      	cmp	r3, r2
   1bab0:	d1fb      	bne.n	1baaa <memset+0x72>
   1bab2:	f00c 0403 	and.w	r4, ip, #3
   1bab6:	b12c      	cbz	r4, 1bac4 <memset+0x8c>
   1bab8:	b2c9      	uxtb	r1, r1
   1baba:	441c      	add	r4, r3
   1babc:	f803 1b01 	strb.w	r1, [r3], #1
   1bac0:	429c      	cmp	r4, r3
   1bac2:	d1fb      	bne.n	1babc <memset+0x84>
   1bac4:	bd30      	pop	{r4, r5, pc}
   1bac6:	4664      	mov	r4, ip
   1bac8:	4613      	mov	r3, r2
   1baca:	2c00      	cmp	r4, #0
   1bacc:	d1f4      	bne.n	1bab8 <memset+0x80>
   1bace:	e7f9      	b.n	1bac4 <memset+0x8c>
   1bad0:	4603      	mov	r3, r0
   1bad2:	4614      	mov	r4, r2
   1bad4:	e7bf      	b.n	1ba56 <memset+0x1e>
   1bad6:	461a      	mov	r2, r3
   1bad8:	46a4      	mov	ip, r4
   1bada:	e7e0      	b.n	1ba9e <memset+0x66>

0001badc <strchr>:
   1badc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1bae0:	4603      	mov	r3, r0
   1bae2:	d044      	beq.n	1bb6e <strchr+0x92>
   1bae4:	0782      	lsls	r2, r0, #30
   1bae6:	d132      	bne.n	1bb4e <strchr+0x72>
   1bae8:	b510      	push	{r4, lr}
   1baea:	6804      	ldr	r4, [r0, #0]
   1baec:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
   1baf0:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
   1baf4:	ea8e 0204 	eor.w	r2, lr, r4
   1baf8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1bafc:	ea23 0302 	bic.w	r3, r3, r2
   1bb00:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1bb04:	ea22 0204 	bic.w	r2, r2, r4
   1bb08:	4313      	orrs	r3, r2
   1bb0a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bb0e:	d10f      	bne.n	1bb30 <strchr+0x54>
   1bb10:	f850 4f04 	ldr.w	r4, [r0, #4]!
   1bb14:	ea84 0c0e 	eor.w	ip, r4, lr
   1bb18:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   1bb1c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
   1bb20:	ea23 0304 	bic.w	r3, r3, r4
   1bb24:	ea22 020c 	bic.w	r2, r2, ip
   1bb28:	4313      	orrs	r3, r2
   1bb2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bb2e:	d0ef      	beq.n	1bb10 <strchr+0x34>
   1bb30:	7803      	ldrb	r3, [r0, #0]
   1bb32:	b923      	cbnz	r3, 1bb3e <strchr+0x62>
   1bb34:	e036      	b.n	1bba4 <strchr+0xc8>
   1bb36:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1bb3a:	2b00      	cmp	r3, #0
   1bb3c:	d032      	beq.n	1bba4 <strchr+0xc8>
   1bb3e:	4299      	cmp	r1, r3
   1bb40:	d1f9      	bne.n	1bb36 <strchr+0x5a>
   1bb42:	bd10      	pop	{r4, pc}
   1bb44:	428a      	cmp	r2, r1
   1bb46:	d011      	beq.n	1bb6c <strchr+0x90>
   1bb48:	079a      	lsls	r2, r3, #30
   1bb4a:	4618      	mov	r0, r3
   1bb4c:	d0cc      	beq.n	1bae8 <strchr+0xc>
   1bb4e:	4618      	mov	r0, r3
   1bb50:	f813 2b01 	ldrb.w	r2, [r3], #1
   1bb54:	2a00      	cmp	r2, #0
   1bb56:	d1f5      	bne.n	1bb44 <strchr+0x68>
   1bb58:	4610      	mov	r0, r2
   1bb5a:	4770      	bx	lr
   1bb5c:	0799      	lsls	r1, r3, #30
   1bb5e:	4618      	mov	r0, r3
   1bb60:	d007      	beq.n	1bb72 <strchr+0x96>
   1bb62:	4618      	mov	r0, r3
   1bb64:	3301      	adds	r3, #1
   1bb66:	7802      	ldrb	r2, [r0, #0]
   1bb68:	2a00      	cmp	r2, #0
   1bb6a:	d1f7      	bne.n	1bb5c <strchr+0x80>
   1bb6c:	4770      	bx	lr
   1bb6e:	0782      	lsls	r2, r0, #30
   1bb70:	d1f7      	bne.n	1bb62 <strchr+0x86>
   1bb72:	6802      	ldr	r2, [r0, #0]
   1bb74:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1bb78:	ea23 0302 	bic.w	r3, r3, r2
   1bb7c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bb80:	d108      	bne.n	1bb94 <strchr+0xb8>
   1bb82:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1bb86:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1bb8a:	ea23 0302 	bic.w	r3, r3, r2
   1bb8e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bb92:	d0f6      	beq.n	1bb82 <strchr+0xa6>
   1bb94:	7803      	ldrb	r3, [r0, #0]
   1bb96:	2b00      	cmp	r3, #0
   1bb98:	d0e8      	beq.n	1bb6c <strchr+0x90>
   1bb9a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1bb9e:	2b00      	cmp	r3, #0
   1bba0:	d1fb      	bne.n	1bb9a <strchr+0xbe>
   1bba2:	4770      	bx	lr
   1bba4:	4618      	mov	r0, r3
   1bba6:	bd10      	pop	{r4, pc}

0001bba8 <strncasecmp>:
   1bba8:	b33a      	cbz	r2, 1bbfa <strncasecmp+0x52>
   1bbaa:	b530      	push	{r4, r5, lr}
   1bbac:	4402      	add	r2, r0
   1bbae:	4d14      	ldr	r5, [pc, #80]	; (1bc00 <strncasecmp+0x58>)
   1bbb0:	4604      	mov	r4, r0
   1bbb2:	e005      	b.n	1bbc0 <strncasecmp+0x18>
   1bbb4:	ebbc 0c03 	subs.w	ip, ip, r3
   1bbb8:	d11d      	bne.n	1bbf6 <strncasecmp+0x4e>
   1bbba:	b1cb      	cbz	r3, 1bbf0 <strncasecmp+0x48>
   1bbbc:	4294      	cmp	r4, r2
   1bbbe:	d018      	beq.n	1bbf2 <strncasecmp+0x4a>
   1bbc0:	f814 0b01 	ldrb.w	r0, [r4], #1
   1bbc4:	5c2b      	ldrb	r3, [r5, r0]
   1bbc6:	f003 0303 	and.w	r3, r3, #3
   1bbca:	2b01      	cmp	r3, #1
   1bbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
   1bbd0:	f815 e003 	ldrb.w	lr, [r5, r3]
   1bbd4:	f00e 0e03 	and.w	lr, lr, #3
   1bbd8:	4684      	mov	ip, r0
   1bbda:	bf08      	it	eq
   1bbdc:	f100 0c20 	addeq.w	ip, r0, #32
   1bbe0:	f1be 0f01 	cmp.w	lr, #1
   1bbe4:	4618      	mov	r0, r3
   1bbe6:	d1e5      	bne.n	1bbb4 <strncasecmp+0xc>
   1bbe8:	3320      	adds	r3, #32
   1bbea:	ebbc 0003 	subs.w	r0, ip, r3
   1bbee:	d0e5      	beq.n	1bbbc <strncasecmp+0x14>
   1bbf0:	bd30      	pop	{r4, r5, pc}
   1bbf2:	2000      	movs	r0, #0
   1bbf4:	bd30      	pop	{r4, r5, pc}
   1bbf6:	4660      	mov	r0, ip
   1bbf8:	bd30      	pop	{r4, r5, pc}
   1bbfa:	4610      	mov	r0, r2
   1bbfc:	4770      	bx	lr
   1bbfe:	bf00      	nop
   1bc00:	200021d1 	.word	0x200021d1

0001bc04 <strncmp>:
   1bc04:	2a00      	cmp	r2, #0
   1bc06:	d03e      	beq.n	1bc86 <strncmp+0x82>
   1bc08:	ea40 0301 	orr.w	r3, r0, r1
   1bc0c:	079b      	lsls	r3, r3, #30
   1bc0e:	b530      	push	{r4, r5, lr}
   1bc10:	4684      	mov	ip, r0
   1bc12:	d12f      	bne.n	1bc74 <strncmp+0x70>
   1bc14:	2a03      	cmp	r2, #3
   1bc16:	d92d      	bls.n	1bc74 <strncmp+0x70>
   1bc18:	460b      	mov	r3, r1
   1bc1a:	e008      	b.n	1bc2e <strncmp+0x2a>
   1bc1c:	3a04      	subs	r2, #4
   1bc1e:	4684      	mov	ip, r0
   1bc20:	4619      	mov	r1, r3
   1bc22:	d025      	beq.n	1bc70 <strncmp+0x6c>
   1bc24:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   1bc28:	d122      	bne.n	1bc70 <strncmp+0x6c>
   1bc2a:	2a03      	cmp	r2, #3
   1bc2c:	d922      	bls.n	1bc74 <strncmp+0x70>
   1bc2e:	6804      	ldr	r4, [r0, #0]
   1bc30:	4619      	mov	r1, r3
   1bc32:	f853 5b04 	ldr.w	r5, [r3], #4
   1bc36:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   1bc3a:	42ac      	cmp	r4, r5
   1bc3c:	4684      	mov	ip, r0
   1bc3e:	ea2e 0e04 	bic.w	lr, lr, r4
   1bc42:	f100 0004 	add.w	r0, r0, #4
   1bc46:	d0e9      	beq.n	1bc1c <strncmp+0x18>
   1bc48:	f89c 0000 	ldrb.w	r0, [ip]
   1bc4c:	780c      	ldrb	r4, [r1, #0]
   1bc4e:	42a0      	cmp	r0, r4
   1bc50:	d11b      	bne.n	1bc8a <strncmp+0x86>
   1bc52:	46e6      	mov	lr, ip
   1bc54:	b168      	cbz	r0, 1bc72 <strncmp+0x6e>
   1bc56:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1bc5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1bc5e:	eba2 030e 	sub.w	r3, r2, lr
   1bc62:	42a0      	cmp	r0, r4
   1bc64:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1bc68:	d10f      	bne.n	1bc8a <strncmp+0x86>
   1bc6a:	eb1c 0303 	adds.w	r3, ip, r3
   1bc6e:	d1f1      	bne.n	1bc54 <strncmp+0x50>
   1bc70:	2000      	movs	r0, #0
   1bc72:	bd30      	pop	{r4, r5, pc}
   1bc74:	f89c 0000 	ldrb.w	r0, [ip]
   1bc78:	780c      	ldrb	r4, [r1, #0]
   1bc7a:	4284      	cmp	r4, r0
   1bc7c:	d105      	bne.n	1bc8a <strncmp+0x86>
   1bc7e:	2a01      	cmp	r2, #1
   1bc80:	d0f6      	beq.n	1bc70 <strncmp+0x6c>
   1bc82:	46e6      	mov	lr, ip
   1bc84:	e7e6      	b.n	1bc54 <strncmp+0x50>
   1bc86:	4610      	mov	r0, r2
   1bc88:	4770      	bx	lr
   1bc8a:	1b00      	subs	r0, r0, r4
   1bc8c:	bd30      	pop	{r4, r5, pc}
   1bc8e:	bf00      	nop

0001bc90 <strncpy>:
   1bc90:	ea40 0301 	orr.w	r3, r0, r1
   1bc94:	079b      	lsls	r3, r3, #30
   1bc96:	b530      	push	{r4, r5, lr}
   1bc98:	d101      	bne.n	1bc9e <strncpy+0xe>
   1bc9a:	2a03      	cmp	r2, #3
   1bc9c:	d80f      	bhi.n	1bcbe <strncpy+0x2e>
   1bc9e:	4684      	mov	ip, r0
   1bca0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1bca4:	e007      	b.n	1bcb6 <strncpy+0x26>
   1bca6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   1bcaa:	f803 1b01 	strb.w	r1, [r3], #1
   1bcae:	1e54      	subs	r4, r2, #1
   1bcb0:	b1c1      	cbz	r1, 1bce4 <strncpy+0x54>
   1bcb2:	469c      	mov	ip, r3
   1bcb4:	4622      	mov	r2, r4
   1bcb6:	4663      	mov	r3, ip
   1bcb8:	2a00      	cmp	r2, #0
   1bcba:	d1f4      	bne.n	1bca6 <strncpy+0x16>
   1bcbc:	bd30      	pop	{r4, r5, pc}
   1bcbe:	460b      	mov	r3, r1
   1bcc0:	4684      	mov	ip, r0
   1bcc2:	4619      	mov	r1, r3
   1bcc4:	f853 5b04 	ldr.w	r5, [r3], #4
   1bcc8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   1bccc:	ea24 0405 	bic.w	r4, r4, r5
   1bcd0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1bcd4:	d1e4      	bne.n	1bca0 <strncpy+0x10>
   1bcd6:	3a04      	subs	r2, #4
   1bcd8:	2a03      	cmp	r2, #3
   1bcda:	f84c 5b04 	str.w	r5, [ip], #4
   1bcde:	4619      	mov	r1, r3
   1bce0:	d8ef      	bhi.n	1bcc2 <strncpy+0x32>
   1bce2:	e7dd      	b.n	1bca0 <strncpy+0x10>
   1bce4:	4494      	add	ip, r2
   1bce6:	2c00      	cmp	r4, #0
   1bce8:	d0e8      	beq.n	1bcbc <strncpy+0x2c>
   1bcea:	f803 1b01 	strb.w	r1, [r3], #1
   1bcee:	4563      	cmp	r3, ip
   1bcf0:	d1fb      	bne.n	1bcea <strncpy+0x5a>
   1bcf2:	bd30      	pop	{r4, r5, pc}
   1bcf4:	2901      	cmp	r1, #1
   1bcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bcfa:	d95b      	bls.n	1bdb4 <strncpy+0x124>
   1bcfc:	f04f 0801 	mov.w	r8, #1
   1bd00:	46c6      	mov	lr, r8
   1bd02:	2400      	movs	r4, #0
   1bd04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bd08:	4643      	mov	r3, r8
   1bd0a:	e008      	b.n	1bd1e <strncpy+0x8e>
   1bd0c:	eba3 0805 	sub.w	r8, r3, r5
   1bd10:	461c      	mov	r4, r3
   1bd12:	f04f 0e01 	mov.w	lr, #1
   1bd16:	eb04 030e 	add.w	r3, r4, lr
   1bd1a:	428b      	cmp	r3, r1
   1bd1c:	d210      	bcs.n	1bd40 <strncpy+0xb0>
   1bd1e:	eb00 0c0e 	add.w	ip, r0, lr
   1bd22:	5cc7      	ldrb	r7, [r0, r3]
   1bd24:	f81c 6005 	ldrb.w	r6, [ip, r5]
   1bd28:	42b7      	cmp	r7, r6
   1bd2a:	d3ef      	bcc.n	1bd0c <strncpy+0x7c>
   1bd2c:	d032      	beq.n	1bd94 <strncpy+0x104>
   1bd2e:	f04f 0801 	mov.w	r8, #1
   1bd32:	4625      	mov	r5, r4
   1bd34:	46c6      	mov	lr, r8
   1bd36:	4444      	add	r4, r8
   1bd38:	eb04 030e 	add.w	r3, r4, lr
   1bd3c:	428b      	cmp	r3, r1
   1bd3e:	d3ee      	bcc.n	1bd1e <strncpy+0x8e>
   1bd40:	2701      	movs	r7, #1
   1bd42:	f8c2 8000 	str.w	r8, [r2]
   1bd46:	46be      	mov	lr, r7
   1bd48:	2400      	movs	r4, #0
   1bd4a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1bd4e:	463b      	mov	r3, r7
   1bd50:	e007      	b.n	1bd62 <strncpy+0xd2>
   1bd52:	1b9f      	subs	r7, r3, r6
   1bd54:	461c      	mov	r4, r3
   1bd56:	f04f 0e01 	mov.w	lr, #1
   1bd5a:	eb04 030e 	add.w	r3, r4, lr
   1bd5e:	428b      	cmp	r3, r1
   1bd60:	d210      	bcs.n	1bd84 <strncpy+0xf4>
   1bd62:	eb00 0c06 	add.w	ip, r0, r6
   1bd66:	f810 8003 	ldrb.w	r8, [r0, r3]
   1bd6a:	f81c c00e 	ldrb.w	ip, [ip, lr]
   1bd6e:	45e0      	cmp	r8, ip
   1bd70:	d8ef      	bhi.n	1bd52 <strncpy+0xc2>
   1bd72:	d017      	beq.n	1bda4 <strncpy+0x114>
   1bd74:	2701      	movs	r7, #1
   1bd76:	4626      	mov	r6, r4
   1bd78:	46be      	mov	lr, r7
   1bd7a:	443c      	add	r4, r7
   1bd7c:	eb04 030e 	add.w	r3, r4, lr
   1bd80:	428b      	cmp	r3, r1
   1bd82:	d3ee      	bcc.n	1bd62 <strncpy+0xd2>
   1bd84:	3601      	adds	r6, #1
   1bd86:	1c68      	adds	r0, r5, #1
   1bd88:	4286      	cmp	r6, r0
   1bd8a:	d301      	bcc.n	1bd90 <strncpy+0x100>
   1bd8c:	6017      	str	r7, [r2, #0]
   1bd8e:	4630      	mov	r0, r6
   1bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd94:	45c6      	cmp	lr, r8
   1bd96:	bf0a      	itet	eq
   1bd98:	4474      	addeq	r4, lr
   1bd9a:	f10e 0e01 	addne.w	lr, lr, #1
   1bd9e:	f04f 0e01 	moveq.w	lr, #1
   1bda2:	e7b8      	b.n	1bd16 <strncpy+0x86>
   1bda4:	45be      	cmp	lr, r7
   1bda6:	bf0a      	itet	eq
   1bda8:	4474      	addeq	r4, lr
   1bdaa:	f10e 0e01 	addne.w	lr, lr, #1
   1bdae:	f04f 0e01 	moveq.w	lr, #1
   1bdb2:	e7d2      	b.n	1bd5a <strncpy+0xca>
   1bdb4:	2701      	movs	r7, #1
   1bdb6:	2600      	movs	r6, #0
   1bdb8:	e7e8      	b.n	1bd8c <strncpy+0xfc>
   1bdba:	bf00      	nop
   1bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdc0:	4616      	mov	r6, r2
   1bdc2:	b085      	sub	sp, #20
   1bdc4:	aa03      	add	r2, sp, #12
   1bdc6:	4682      	mov	sl, r0
   1bdc8:	4689      	mov	r9, r1
   1bdca:	4630      	mov	r0, r6
   1bdcc:	4619      	mov	r1, r3
   1bdce:	4698      	mov	r8, r3
   1bdd0:	f7ff ff90 	bl	1bcf4 <strncpy+0x64>
   1bdd4:	9903      	ldr	r1, [sp, #12]
   1bdd6:	4683      	mov	fp, r0
   1bdd8:	4602      	mov	r2, r0
   1bdda:	4431      	add	r1, r6
   1bddc:	4630      	mov	r0, r6
   1bdde:	f7ff fd7f 	bl	1b8e0 <memcmp>
   1bde2:	2800      	cmp	r0, #0
   1bde4:	d15c      	bne.n	1bea0 <strncpy+0x210>
   1bde6:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
   1bdea:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1bdee:	4607      	mov	r7, r0
   1bdf0:	4434      	add	r4, r6
   1bdf2:	4605      	mov	r5, r0
   1bdf4:	9301      	str	r3, [sp, #4]
   1bdf6:	45bb      	cmp	fp, r7
   1bdf8:	465a      	mov	r2, fp
   1bdfa:	bf38      	it	cc
   1bdfc:	463a      	movcc	r2, r7
   1bdfe:	4590      	cmp	r8, r2
   1be00:	d929      	bls.n	1be56 <strncpy+0x1c6>
   1be02:	1e53      	subs	r3, r2, #1
   1be04:	442a      	add	r2, r5
   1be06:	4433      	add	r3, r6
   1be08:	4452      	add	r2, sl
   1be0a:	f1c6 0c01 	rsb	ip, r6, #1
   1be0e:	e001      	b.n	1be14 <strncpy+0x184>
   1be10:	42a3      	cmp	r3, r4
   1be12:	d020      	beq.n	1be56 <strncpy+0x1c6>
   1be14:	f812 1b01 	ldrb.w	r1, [r2], #1
   1be18:	eb0c 0e03 	add.w	lr, ip, r3
   1be1c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1be20:	4288      	cmp	r0, r1
   1be22:	d0f5      	beq.n	1be10 <strncpy+0x180>
   1be24:	f1cb 0301 	rsb	r3, fp, #1
   1be28:	442b      	add	r3, r5
   1be2a:	eb03 050e 	add.w	r5, r3, lr
   1be2e:	2700      	movs	r7, #0
   1be30:	eba9 0308 	sub.w	r3, r9, r8
   1be34:	42ab      	cmp	r3, r5
   1be36:	d2de      	bcs.n	1bdf6 <strncpy+0x166>
   1be38:	eb0a 0009 	add.w	r0, sl, r9
   1be3c:	f448 6100 	orr.w	r1, r8, #2048	; 0x800
   1be40:	f005 f838 	bl	20eb4 <strnlen>
   1be44:	4481      	add	r9, r0
   1be46:	eba9 0308 	sub.w	r3, r9, r8
   1be4a:	42ab      	cmp	r3, r5
   1be4c:	d2d3      	bcs.n	1bdf6 <strncpy+0x166>
   1be4e:	2000      	movs	r0, #0
   1be50:	b005      	add	sp, #20
   1be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be56:	45bb      	cmp	fp, r7
   1be58:	9b01      	ldr	r3, [sp, #4]
   1be5a:	d96c      	bls.n	1bf36 <strncpy+0x2a6>
   1be5c:	eb0b 0205 	add.w	r2, fp, r5
   1be60:	eb06 010b 	add.w	r1, r6, fp
   1be64:	4452      	add	r2, sl
   1be66:	e002      	b.n	1be6e <strncpy+0x1de>
   1be68:	42bb      	cmp	r3, r7
   1be6a:	d017      	beq.n	1be9c <strncpy+0x20c>
   1be6c:	4603      	mov	r3, r0
   1be6e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1be72:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
   1be76:	4584      	cmp	ip, r0
   1be78:	f103 0e01 	add.w	lr, r3, #1
   1be7c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   1be80:	d0f2      	beq.n	1be68 <strncpy+0x1d8>
   1be82:	3701      	adds	r7, #1
   1be84:	4577      	cmp	r7, lr
   1be86:	d804      	bhi.n	1be92 <strncpy+0x202>
   1be88:	9f03      	ldr	r7, [sp, #12]
   1be8a:	443d      	add	r5, r7
   1be8c:	eba8 0707 	sub.w	r7, r8, r7
   1be90:	e7ce      	b.n	1be30 <strncpy+0x1a0>
   1be92:	eb0a 0005 	add.w	r0, sl, r5
   1be96:	b005      	add	sp, #20
   1be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be9c:	46be      	mov	lr, r7
   1be9e:	e7f0      	b.n	1be82 <strncpy+0x1f2>
   1bea0:	eba8 030b 	sub.w	r3, r8, fp
   1bea4:	455b      	cmp	r3, fp
   1bea6:	bf38      	it	cc
   1bea8:	465b      	movcc	r3, fp
   1beaa:	3301      	adds	r3, #1
   1beac:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
   1beb0:	9303      	str	r3, [sp, #12]
   1beb2:	4434      	add	r4, r6
   1beb4:	2500      	movs	r5, #0
   1beb6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
   1beba:	45d8      	cmp	r8, fp
   1bebc:	d926      	bls.n	1bf0c <strncpy+0x27c>
   1bebe:	eb0b 0205 	add.w	r2, fp, r5
   1bec2:	19f3      	adds	r3, r6, r7
   1bec4:	4452      	add	r2, sl
   1bec6:	f1c6 0c01 	rsb	ip, r6, #1
   1beca:	e001      	b.n	1bed0 <strncpy+0x240>
   1becc:	42a3      	cmp	r3, r4
   1bece:	d01d      	beq.n	1bf0c <strncpy+0x27c>
   1bed0:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bed4:	eb0c 0e03 	add.w	lr, ip, r3
   1bed8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1bedc:	4288      	cmp	r0, r1
   1bede:	d0f5      	beq.n	1becc <strncpy+0x23c>
   1bee0:	f1cb 0301 	rsb	r3, fp, #1
   1bee4:	442b      	add	r3, r5
   1bee6:	eb03 050e 	add.w	r5, r3, lr
   1beea:	eba9 0308 	sub.w	r3, r9, r8
   1beee:	42ab      	cmp	r3, r5
   1bef0:	d2e3      	bcs.n	1beba <strncpy+0x22a>
   1bef2:	eb0a 0009 	add.w	r0, sl, r9
   1bef6:	f448 6100 	orr.w	r1, r8, #2048	; 0x800
   1befa:	f004 ffdb 	bl	20eb4 <strnlen>
   1befe:	4481      	add	r9, r0
   1bf00:	eba9 0308 	sub.w	r3, r9, r8
   1bf04:	42ab      	cmp	r3, r5
   1bf06:	d3a2      	bcc.n	1be4e <strncpy+0x1be>
   1bf08:	45d8      	cmp	r8, fp
   1bf0a:	d8d8      	bhi.n	1bebe <strncpy+0x22e>
   1bf0c:	f1bb 0f00 	cmp.w	fp, #0
   1bf10:	d0bf      	beq.n	1be92 <strncpy+0x202>
   1bf12:	eb0b 0105 	add.w	r1, fp, r5
   1bf16:	eb06 020b 	add.w	r2, r6, fp
   1bf1a:	4451      	add	r1, sl
   1bf1c:	e001      	b.n	1bf22 <strncpy+0x292>
   1bf1e:	42b3      	cmp	r3, r6
   1bf20:	d0b7      	beq.n	1be92 <strncpy+0x202>
   1bf22:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1bf26:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
   1bf2a:	4584      	cmp	ip, r0
   1bf2c:	4613      	mov	r3, r2
   1bf2e:	d0f6      	beq.n	1bf1e <strncpy+0x28e>
   1bf30:	9b03      	ldr	r3, [sp, #12]
   1bf32:	441d      	add	r5, r3
   1bf34:	e7d9      	b.n	1beea <strncpy+0x25a>
   1bf36:	46de      	mov	lr, fp
   1bf38:	e7a3      	b.n	1be82 <strncpy+0x1f2>
   1bf3a:	bf00      	nop
   1bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf40:	4692      	mov	sl, r2
   1bf42:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   1bf46:	aa05      	add	r2, sp, #20
   1bf48:	4681      	mov	r9, r0
   1bf4a:	460f      	mov	r7, r1
   1bf4c:	4650      	mov	r0, sl
   1bf4e:	4619      	mov	r1, r3
   1bf50:	461d      	mov	r5, r3
   1bf52:	f7ff fecf 	bl	1bcf4 <strncpy+0x64>
   1bf56:	4613      	mov	r3, r2
   1bf58:	4683      	mov	fp, r0
   1bf5a:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   1bf5e:	f843 5f04 	str.w	r5, [r3, #4]!
   1bf62:	4293      	cmp	r3, r2
   1bf64:	d1fb      	bne.n	1bf5e <strncpy+0x2ce>
   1bf66:	2d00      	cmp	r5, #0
   1bf68:	f000 80df 	beq.w	1c12a <strncpy+0x49a>
   1bf6c:	1e6c      	subs	r4, r5, #1
   1bf6e:	ae06      	add	r6, sp, #24
   1bf70:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   1bf74:	eb0a 0004 	add.w	r0, sl, r4
   1bf78:	9600      	str	r6, [sp, #0]
   1bf7a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   1bf7e:	1aab      	subs	r3, r5, r2
   1bf80:	3b01      	subs	r3, #1
   1bf82:	4453      	add	r3, sl
   1bf84:	4282      	cmp	r2, r0
   1bf86:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   1bf8a:	d1f6      	bne.n	1bf7a <strncpy+0x2ea>
   1bf8c:	9905      	ldr	r1, [sp, #20]
   1bf8e:	465a      	mov	r2, fp
   1bf90:	4451      	add	r1, sl
   1bf92:	4650      	mov	r0, sl
   1bf94:	f7ff fca4 	bl	1b8e0 <memcmp>
   1bf98:	2800      	cmp	r0, #0
   1bf9a:	d16f      	bne.n	1c07c <strncpy+0x3ec>
   1bf9c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1bfa0:	9303      	str	r3, [sp, #12]
   1bfa2:	f1cb 0301 	rsb	r3, fp, #1
   1bfa6:	4680      	mov	r8, r0
   1bfa8:	4606      	mov	r6, r0
   1bfaa:	9301      	str	r3, [sp, #4]
   1bfac:	eb09 0e06 	add.w	lr, r9, r6
   1bfb0:	9a00      	ldr	r2, [sp, #0]
   1bfb2:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1bfb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1bfba:	b1db      	cbz	r3, 1bff4 <strncpy+0x364>
   1bfbc:	f1b8 0f00 	cmp.w	r8, #0
   1bfc0:	d003      	beq.n	1bfca <strncpy+0x33a>
   1bfc2:	9a05      	ldr	r2, [sp, #20]
   1bfc4:	429a      	cmp	r2, r3
   1bfc6:	d900      	bls.n	1bfca <strncpy+0x33a>
   1bfc8:	1aab      	subs	r3, r5, r2
   1bfca:	441e      	add	r6, r3
   1bfcc:	f04f 0800 	mov.w	r8, #0
   1bfd0:	1b7b      	subs	r3, r7, r5
   1bfd2:	429e      	cmp	r6, r3
   1bfd4:	d9ea      	bls.n	1bfac <strncpy+0x31c>
   1bfd6:	eb09 0007 	add.w	r0, r9, r7
   1bfda:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   1bfde:	f004 ff69 	bl	20eb4 <strnlen>
   1bfe2:	4407      	add	r7, r0
   1bfe4:	1b7b      	subs	r3, r7, r5
   1bfe6:	429e      	cmp	r6, r3
   1bfe8:	d9e0      	bls.n	1bfac <strncpy+0x31c>
   1bfea:	2000      	movs	r0, #0
   1bfec:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bff4:	45c3      	cmp	fp, r8
   1bff6:	465b      	mov	r3, fp
   1bff8:	bf38      	it	cc
   1bffa:	4643      	movcc	r3, r8
   1bffc:	42a3      	cmp	r3, r4
   1bffe:	d210      	bcs.n	1c022 <strncpy+0x392>
   1c000:	1e59      	subs	r1, r3, #1
   1c002:	18f2      	adds	r2, r6, r3
   1c004:	4451      	add	r1, sl
   1c006:	444a      	add	r2, r9
   1c008:	e002      	b.n	1c010 <strncpy+0x380>
   1c00a:	3301      	adds	r3, #1
   1c00c:	42a3      	cmp	r3, r4
   1c00e:	d208      	bcs.n	1c022 <strncpy+0x392>
   1c010:	f812 0b01 	ldrb.w	r0, [r2], #1
   1c014:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1c018:	4584      	cmp	ip, r0
   1c01a:	d0f6      	beq.n	1c00a <strncpy+0x37a>
   1c01c:	9a01      	ldr	r2, [sp, #4]
   1c01e:	4416      	add	r6, r2
   1c020:	e7d3      	b.n	1bfca <strncpy+0x33a>
   1c022:	45c3      	cmp	fp, r8
   1c024:	9b03      	ldr	r3, [sp, #12]
   1c026:	d97e      	bls.n	1c126 <strncpy+0x496>
   1c028:	eb06 020b 	add.w	r2, r6, fp
   1c02c:	444a      	add	r2, r9
   1c02e:	eb0a 010b 	add.w	r1, sl, fp
   1c032:	9602      	str	r6, [sp, #8]
   1c034:	e002      	b.n	1c03c <strncpy+0x3ac>
   1c036:	4543      	cmp	r3, r8
   1c038:	d015      	beq.n	1c066 <strncpy+0x3d6>
   1c03a:	4603      	mov	r3, r0
   1c03c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1c040:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
   1c044:	4286      	cmp	r6, r0
   1c046:	f103 0c01 	add.w	ip, r3, #1
   1c04a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   1c04e:	d0f2      	beq.n	1c036 <strncpy+0x3a6>
   1c050:	9e02      	ldr	r6, [sp, #8]
   1c052:	4663      	mov	r3, ip
   1c054:	f108 0801 	add.w	r8, r8, #1
   1c058:	4598      	cmp	r8, r3
   1c05a:	d80a      	bhi.n	1c072 <strncpy+0x3e2>
   1c05c:	9b05      	ldr	r3, [sp, #20]
   1c05e:	441e      	add	r6, r3
   1c060:	eba5 0803 	sub.w	r8, r5, r3
   1c064:	e7b4      	b.n	1bfd0 <strncpy+0x340>
   1c066:	4643      	mov	r3, r8
   1c068:	f108 0801 	add.w	r8, r8, #1
   1c06c:	4598      	cmp	r8, r3
   1c06e:	9e02      	ldr	r6, [sp, #8]
   1c070:	d9f4      	bls.n	1c05c <strncpy+0x3cc>
   1c072:	4670      	mov	r0, lr
   1c074:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c07c:	eba5 030b 	sub.w	r3, r5, fp
   1c080:	455b      	cmp	r3, fp
   1c082:	bf38      	it	cc
   1c084:	465b      	movcc	r3, fp
   1c086:	3301      	adds	r3, #1
   1c088:	9305      	str	r3, [sp, #20]
   1c08a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1c08e:	9301      	str	r3, [sp, #4]
   1c090:	f1cb 0301 	rsb	r3, fp, #1
   1c094:	2600      	movs	r6, #0
   1c096:	9302      	str	r3, [sp, #8]
   1c098:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
   1c09c:	eb09 0106 	add.w	r1, r9, r6
   1c0a0:	9a00      	ldr	r2, [sp, #0]
   1c0a2:	5d0b      	ldrb	r3, [r1, r4]
   1c0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c0a8:	b16b      	cbz	r3, 1c0c6 <strncpy+0x436>
   1c0aa:	441e      	add	r6, r3
   1c0ac:	1b7b      	subs	r3, r7, r5
   1c0ae:	42b3      	cmp	r3, r6
   1c0b0:	d2f4      	bcs.n	1c09c <strncpy+0x40c>
   1c0b2:	eb09 0007 	add.w	r0, r9, r7
   1c0b6:	4641      	mov	r1, r8
   1c0b8:	f004 fefc 	bl	20eb4 <strnlen>
   1c0bc:	4407      	add	r7, r0
   1c0be:	1b7b      	subs	r3, r7, r5
   1c0c0:	42b3      	cmp	r3, r6
   1c0c2:	d2eb      	bcs.n	1c09c <strncpy+0x40c>
   1c0c4:	e791      	b.n	1bfea <strncpy+0x35a>
   1c0c6:	45a3      	cmp	fp, r4
   1c0c8:	d214      	bcs.n	1c0f4 <strncpy+0x464>
   1c0ca:	9b01      	ldr	r3, [sp, #4]
   1c0cc:	eb0b 0206 	add.w	r2, fp, r6
   1c0d0:	eb0a 0c03 	add.w	ip, sl, r3
   1c0d4:	444a      	add	r2, r9
   1c0d6:	465b      	mov	r3, fp
   1c0d8:	e002      	b.n	1c0e0 <strncpy+0x450>
   1c0da:	3301      	adds	r3, #1
   1c0dc:	42a3      	cmp	r3, r4
   1c0de:	d209      	bcs.n	1c0f4 <strncpy+0x464>
   1c0e0:	f812 0b01 	ldrb.w	r0, [r2], #1
   1c0e4:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   1c0e8:	4586      	cmp	lr, r0
   1c0ea:	d0f6      	beq.n	1c0da <strncpy+0x44a>
   1c0ec:	9a02      	ldr	r2, [sp, #8]
   1c0ee:	4416      	add	r6, r2
   1c0f0:	441e      	add	r6, r3
   1c0f2:	e7db      	b.n	1c0ac <strncpy+0x41c>
   1c0f4:	f1bb 0f00 	cmp.w	fp, #0
   1c0f8:	d010      	beq.n	1c11c <strncpy+0x48c>
   1c0fa:	eb0b 0006 	add.w	r0, fp, r6
   1c0fe:	4448      	add	r0, r9
   1c100:	eb0a 020b 	add.w	r2, sl, fp
   1c104:	e001      	b.n	1c10a <strncpy+0x47a>
   1c106:	4553      	cmp	r3, sl
   1c108:	d008      	beq.n	1c11c <strncpy+0x48c>
   1c10a:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   1c10e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   1c112:	45e6      	cmp	lr, ip
   1c114:	4613      	mov	r3, r2
   1c116:	d0f6      	beq.n	1c106 <strncpy+0x476>
   1c118:	9b05      	ldr	r3, [sp, #20]
   1c11a:	e7c6      	b.n	1c0aa <strncpy+0x41a>
   1c11c:	4608      	mov	r0, r1
   1c11e:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c126:	465b      	mov	r3, fp
   1c128:	e794      	b.n	1c054 <strncpy+0x3c4>
   1c12a:	ab06      	add	r3, sp, #24
   1c12c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c130:	9300      	str	r3, [sp, #0]
   1c132:	e72b      	b.n	1bf8c <strncpy+0x2fc>

0001c134 <strstr>:
   1c134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c138:	460d      	mov	r5, r1
   1c13a:	7809      	ldrb	r1, [r1, #0]
   1c13c:	b090      	sub	sp, #64	; 0x40
   1c13e:	4604      	mov	r4, r0
   1c140:	2900      	cmp	r1, #0
   1c142:	d054      	beq.n	1c1ee <strstr+0xba>
   1c144:	786a      	ldrb	r2, [r5, #1]
   1c146:	2a00      	cmp	r2, #0
   1c148:	f000 8083 	beq.w	1c252 <strstr+0x11e>
   1c14c:	78ab      	ldrb	r3, [r5, #2]
   1c14e:	2b00      	cmp	r3, #0
   1c150:	d051      	beq.n	1c1f6 <strstr+0xc2>
   1c152:	78e8      	ldrb	r0, [r5, #3]
   1c154:	682e      	ldr	r6, [r5, #0]
   1c156:	2800      	cmp	r0, #0
   1c158:	f000 8082 	beq.w	1c260 <strstr+0x12c>
   1c15c:	792b      	ldrb	r3, [r5, #4]
   1c15e:	2b00      	cmp	r3, #0
   1c160:	d057      	beq.n	1c212 <strstr+0xde>
   1c162:	4628      	mov	r0, r5
   1c164:	f001 f80c 	bl	1d180 <strlen>
   1c168:	4606      	mov	r6, r0
   1c16a:	f440 7100 	orr.w	r1, r0, #512	; 0x200
   1c16e:	4620      	mov	r0, r4
   1c170:	f004 fea0 	bl	20eb4 <strnlen>
   1c174:	4286      	cmp	r6, r0
   1c176:	d85b      	bhi.n	1c230 <strstr+0xfc>
   1c178:	2efe      	cmp	r6, #254	; 0xfe
   1c17a:	f200 8086 	bhi.w	1c28a <strstr+0x156>
   1c17e:	1b80      	subs	r0, r0, r6
   1c180:	1827      	adds	r7, r4, r0
   1c182:	2240      	movs	r2, #64	; 0x40
   1c184:	1c71      	adds	r1, r6, #1
   1c186:	4668      	mov	r0, sp
   1c188:	f7ff fc56 	bl	1ba38 <memset>
   1c18c:	b17e      	cbz	r6, 1c1ae <strstr+0x7a>
   1c18e:	1e6a      	subs	r2, r5, #1
   1c190:	fa5f fc86 	uxtb.w	ip, r6
   1c194:	1990      	adds	r0, r2, r6
   1c196:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1c19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c19e:	3340      	adds	r3, #64	; 0x40
   1c1a0:	446b      	add	r3, sp
   1c1a2:	1aa9      	subs	r1, r5, r2
   1c1a4:	4461      	add	r1, ip
   1c1a6:	4282      	cmp	r2, r0
   1c1a8:	f803 1c40 	strb.w	r1, [r3, #-64]
   1c1ac:	d1f3      	bne.n	1c196 <strstr+0x62>
   1c1ae:	3c01      	subs	r4, #1
   1c1b0:	5da3      	ldrb	r3, [r4, r6]
   1c1b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c1b6:	3340      	adds	r3, #64	; 0x40
   1c1b8:	446b      	add	r3, sp
   1c1ba:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   1c1be:	441c      	add	r4, r3
   1c1c0:	42a7      	cmp	r7, r4
   1c1c2:	d203      	bcs.n	1c1cc <strstr+0x98>
   1c1c4:	e039      	b.n	1c23a <strstr+0x106>
   1c1c6:	4444      	add	r4, r8
   1c1c8:	42a7      	cmp	r7, r4
   1c1ca:	d336      	bcc.n	1c23a <strstr+0x106>
   1c1cc:	f814 c006 	ldrb.w	ip, [r4, r6]
   1c1d0:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   1c1d4:	f10c 0340 	add.w	r3, ip, #64	; 0x40
   1c1d8:	eb0d 0c03 	add.w	ip, sp, r3
   1c1dc:	4620      	mov	r0, r4
   1c1de:	4632      	mov	r2, r6
   1c1e0:	4629      	mov	r1, r5
   1c1e2:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
   1c1e6:	f7ff fb7b 	bl	1b8e0 <memcmp>
   1c1ea:	2800      	cmp	r0, #0
   1c1ec:	d1eb      	bne.n	1c1c6 <strstr+0x92>
   1c1ee:	4620      	mov	r0, r4
   1c1f0:	b010      	add	sp, #64	; 0x40
   1c1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c1f6:	7800      	ldrb	r0, [r0, #0]
   1c1f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1c1fc:	e000      	b.n	1c200 <strstr+0xcc>
   1c1fe:	460c      	mov	r4, r1
   1c200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1c204:	1c61      	adds	r1, r4, #1
   1c206:	b198      	cbz	r0, 1c230 <strstr+0xfc>
   1c208:	429a      	cmp	r2, r3
   1c20a:	7860      	ldrb	r0, [r4, #1]
   1c20c:	d1f7      	bne.n	1c1fe <strstr+0xca>
   1c20e:	3c01      	subs	r4, #1
   1c210:	e7ed      	b.n	1c1ee <strstr+0xba>
   1c212:	7822      	ldrb	r2, [r4, #0]
   1c214:	b162      	cbz	r2, 1c230 <strstr+0xfc>
   1c216:	ba31      	rev	r1, r6
   1c218:	e001      	b.n	1c21e <strstr+0xea>
   1c21a:	4299      	cmp	r1, r3
   1c21c:	d01e      	beq.n	1c25c <strstr+0x128>
   1c21e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1c222:	4620      	mov	r0, r4
   1c224:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   1c228:	2a00      	cmp	r2, #0
   1c22a:	d1f6      	bne.n	1c21a <strstr+0xe6>
   1c22c:	4299      	cmp	r1, r3
   1c22e:	d015      	beq.n	1c25c <strstr+0x128>
   1c230:	2400      	movs	r4, #0
   1c232:	4620      	mov	r0, r4
   1c234:	b010      	add	sp, #64	; 0x40
   1c236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c23a:	5dbb      	ldrb	r3, [r7, r6]
   1c23c:	19b8      	adds	r0, r7, r6
   1c23e:	2b00      	cmp	r3, #0
   1c240:	d0f6      	beq.n	1c230 <strstr+0xfc>
   1c242:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1c246:	f004 fe35 	bl	20eb4 <strnlen>
   1c24a:	4407      	add	r7, r0
   1c24c:	42bc      	cmp	r4, r7
   1c24e:	d9ae      	bls.n	1c1ae <strstr+0x7a>
   1c250:	e7ee      	b.n	1c230 <strstr+0xfc>
   1c252:	b010      	add	sp, #64	; 0x40
   1c254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c258:	f7ff bc40 	b.w	1badc <strchr>
   1c25c:	1ec4      	subs	r4, r0, #3
   1c25e:	e7c6      	b.n	1c1ee <strstr+0xba>
   1c260:	0412      	lsls	r2, r2, #16
   1c262:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1c266:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1c26a:	7821      	ldrb	r1, [r4, #0]
   1c26c:	4602      	mov	r2, r0
   1c26e:	e000      	b.n	1c272 <strstr+0x13e>
   1c270:	462c      	mov	r4, r5
   1c272:	ea41 0002 	orr.w	r0, r1, r2
   1c276:	1c65      	adds	r5, r4, #1
   1c278:	0202      	lsls	r2, r0, #8
   1c27a:	2900      	cmp	r1, #0
   1c27c:	d0d8      	beq.n	1c230 <strstr+0xfc>
   1c27e:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
   1c282:	7861      	ldrb	r1, [r4, #1]
   1c284:	d1f4      	bne.n	1c270 <strstr+0x13c>
   1c286:	3c02      	subs	r4, #2
   1c288:	e7b1      	b.n	1c1ee <strstr+0xba>
   1c28a:	4601      	mov	r1, r0
   1c28c:	4633      	mov	r3, r6
   1c28e:	462a      	mov	r2, r5
   1c290:	4620      	mov	r0, r4
   1c292:	b010      	add	sp, #64	; 0x40
   1c294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c298:	e650      	b.n	1bf3c <strncpy+0x2ac>
   1c29a:	bf00      	nop
   1c29c:	4912      	ldr	r1, [pc, #72]	; (1c2e8 <strstr+0x1b4>)
   1c29e:	4813      	ldr	r0, [pc, #76]	; (1c2ec <strstr+0x1b8>)
   1c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2a2:	f101 0520 	add.w	r5, r1, #32
   1c2a6:	f000 feb9 	bl	1d01c <strcpy>
   1c2aa:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
   1c2ae:	462c      	mov	r4, r5
   1c2b0:	f1a5 0720 	sub.w	r7, r5, #32
   1c2b4:	4621      	mov	r1, r4
   1c2b6:	4638      	mov	r0, r7
   1c2b8:	3420      	adds	r4, #32
   1c2ba:	f000 fd45 	bl	1cd48 <strcmp>
   1c2be:	b918      	cbnz	r0, 1c2c8 <strstr+0x194>
   1c2c0:	42b4      	cmp	r4, r6
   1c2c2:	d1f7      	bne.n	1c2b4 <strstr+0x180>
   1c2c4:	4809      	ldr	r0, [pc, #36]	; (1c2ec <strstr+0x1b8>)
   1c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c2c8:	4f09      	ldr	r7, [pc, #36]	; (1c2f0 <strstr+0x1bc>)
   1c2ca:	4c08      	ldr	r4, [pc, #32]	; (1c2ec <strstr+0x1b8>)
   1c2cc:	4639      	mov	r1, r7
   1c2ce:	4620      	mov	r0, r4
   1c2d0:	f004 fdae 	bl	20e30 <strcat>
   1c2d4:	4629      	mov	r1, r5
   1c2d6:	4620      	mov	r0, r4
   1c2d8:	3520      	adds	r5, #32
   1c2da:	f004 fda9 	bl	20e30 <strcat>
   1c2de:	42b5      	cmp	r5, r6
   1c2e0:	d1f4      	bne.n	1c2cc <strstr+0x198>
   1c2e2:	4802      	ldr	r0, [pc, #8]	; (1c2ec <strstr+0x1b8>)
   1c2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c2e6:	bf00      	nop
   1c2e8:	20009348 	.word	0x20009348
   1c2ec:	2000d274 	.word	0x2000d274
   1c2f0:	20008a8c 	.word	0x20008a8c

0001c2f4 <__loadlocale>:
   1c2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2f8:	eb00 1741 	add.w	r7, r0, r1, lsl #5
   1c2fc:	b08f      	sub	sp, #60	; 0x3c
   1c2fe:	4605      	mov	r5, r0
   1c300:	460e      	mov	r6, r1
   1c302:	4610      	mov	r0, r2
   1c304:	4639      	mov	r1, r7
   1c306:	4614      	mov	r4, r2
   1c308:	f000 fd1e 	bl	1cd48 <strcmp>
   1c30c:	b918      	cbnz	r0, 1c316 <__loadlocale+0x22>
   1c30e:	4638      	mov	r0, r7
   1c310:	b00f      	add	sp, #60	; 0x3c
   1c312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c316:	49b7      	ldr	r1, [pc, #732]	; (1c5f4 <__loadlocale+0x300>)
   1c318:	4620      	mov	r0, r4
   1c31a:	f000 fd15 	bl	1cd48 <strcmp>
   1c31e:	2800      	cmp	r0, #0
   1c320:	f000 80c3 	beq.w	1c4aa <__loadlocale+0x1b6>
   1c324:	49b4      	ldr	r1, [pc, #720]	; (1c5f8 <__loadlocale+0x304>)
   1c326:	4620      	mov	r0, r4
   1c328:	f000 fd0e 	bl	1cd48 <strcmp>
   1c32c:	4680      	mov	r8, r0
   1c32e:	2800      	cmp	r0, #0
   1c330:	f000 80b2 	beq.w	1c498 <__loadlocale+0x1a4>
   1c334:	7823      	ldrb	r3, [r4, #0]
   1c336:	2b43      	cmp	r3, #67	; 0x43
   1c338:	f000 80bc 	beq.w	1c4b4 <__loadlocale+0x1c0>
   1c33c:	3b61      	subs	r3, #97	; 0x61
   1c33e:	2b19      	cmp	r3, #25
   1c340:	d815      	bhi.n	1c36e <__loadlocale+0x7a>
   1c342:	7863      	ldrb	r3, [r4, #1]
   1c344:	3b61      	subs	r3, #97	; 0x61
   1c346:	2b19      	cmp	r3, #25
   1c348:	d811      	bhi.n	1c36e <__loadlocale+0x7a>
   1c34a:	78a3      	ldrb	r3, [r4, #2]
   1c34c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1c350:	2a19      	cmp	r2, #25
   1c352:	bf96      	itet	ls
   1c354:	78e3      	ldrbls	r3, [r4, #3]
   1c356:	f104 0802 	addhi.w	r8, r4, #2
   1c35a:	f104 0803 	addls.w	r8, r4, #3
   1c35e:	2b5f      	cmp	r3, #95	; 0x5f
   1c360:	d00a      	beq.n	1c378 <__loadlocale+0x84>
   1c362:	2b2e      	cmp	r3, #46	; 0x2e
   1c364:	f000 8272 	beq.w	1c84c <__loadlocale+0x558>
   1c368:	f013 0fbf 	tst.w	r3, #191	; 0xbf
   1c36c:	d013      	beq.n	1c396 <__loadlocale+0xa2>
   1c36e:	2700      	movs	r7, #0
   1c370:	4638      	mov	r0, r7
   1c372:	b00f      	add	sp, #60	; 0x3c
   1c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c378:	f898 3001 	ldrb.w	r3, [r8, #1]
   1c37c:	3b41      	subs	r3, #65	; 0x41
   1c37e:	2b19      	cmp	r3, #25
   1c380:	d8f5      	bhi.n	1c36e <__loadlocale+0x7a>
   1c382:	f898 3002 	ldrb.w	r3, [r8, #2]
   1c386:	3b41      	subs	r3, #65	; 0x41
   1c388:	2b19      	cmp	r3, #25
   1c38a:	d8f0      	bhi.n	1c36e <__loadlocale+0x7a>
   1c38c:	f898 3003 	ldrb.w	r3, [r8, #3]
   1c390:	f108 0803 	add.w	r8, r8, #3
   1c394:	e7e5      	b.n	1c362 <__loadlocale+0x6e>
   1c396:	f10d 0918 	add.w	r9, sp, #24
   1c39a:	4998      	ldr	r1, [pc, #608]	; (1c5fc <__loadlocale+0x308>)
   1c39c:	4648      	mov	r0, r9
   1c39e:	f000 fe3d 	bl	1d01c <strcpy>
   1c3a2:	f898 3000 	ldrb.w	r3, [r8]
   1c3a6:	2b40      	cmp	r3, #64	; 0x40
   1c3a8:	f000 823f 	beq.w	1c82a <__loadlocale+0x536>
   1c3ac:	f04f 0a00 	mov.w	sl, #0
   1c3b0:	46d0      	mov	r8, sl
   1c3b2:	46d3      	mov	fp, sl
   1c3b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1c3b8:	3b41      	subs	r3, #65	; 0x41
   1c3ba:	2b34      	cmp	r3, #52	; 0x34
   1c3bc:	d8d7      	bhi.n	1c36e <__loadlocale+0x7a>
   1c3be:	a201      	add	r2, pc, #4	; (adr r2, 1c3c4 <__loadlocale+0xd0>)
   1c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c3c4:	0001c7c7 	.word	0x0001c7c7
   1c3c8:	0001c36f 	.word	0x0001c36f
   1c3cc:	0001c75f 	.word	0x0001c75f
   1c3d0:	0001c36f 	.word	0x0001c36f
   1c3d4:	0001c723 	.word	0x0001c723
   1c3d8:	0001c36f 	.word	0x0001c36f
   1c3dc:	0001c6f5 	.word	0x0001c6f5
   1c3e0:	0001c36f 	.word	0x0001c36f
   1c3e4:	0001c651 	.word	0x0001c651
   1c3e8:	0001c5d3 	.word	0x0001c5d3
   1c3ec:	0001c5a3 	.word	0x0001c5a3
   1c3f0:	0001c36f 	.word	0x0001c36f
   1c3f4:	0001c36f 	.word	0x0001c36f
   1c3f8:	0001c36f 	.word	0x0001c36f
   1c3fc:	0001c36f 	.word	0x0001c36f
   1c400:	0001c591 	.word	0x0001c591
   1c404:	0001c36f 	.word	0x0001c36f
   1c408:	0001c36f 	.word	0x0001c36f
   1c40c:	0001c571 	.word	0x0001c571
   1c410:	0001c535 	.word	0x0001c535
   1c414:	0001c4e7 	.word	0x0001c4e7
   1c418:	0001c36f 	.word	0x0001c36f
   1c41c:	0001c36f 	.word	0x0001c36f
   1c420:	0001c36f 	.word	0x0001c36f
   1c424:	0001c36f 	.word	0x0001c36f
   1c428:	0001c36f 	.word	0x0001c36f
   1c42c:	0001c36f 	.word	0x0001c36f
   1c430:	0001c36f 	.word	0x0001c36f
   1c434:	0001c36f 	.word	0x0001c36f
   1c438:	0001c36f 	.word	0x0001c36f
   1c43c:	0001c36f 	.word	0x0001c36f
   1c440:	0001c36f 	.word	0x0001c36f
   1c444:	0001c7c7 	.word	0x0001c7c7
   1c448:	0001c36f 	.word	0x0001c36f
   1c44c:	0001c75f 	.word	0x0001c75f
   1c450:	0001c36f 	.word	0x0001c36f
   1c454:	0001c723 	.word	0x0001c723
   1c458:	0001c36f 	.word	0x0001c36f
   1c45c:	0001c6f5 	.word	0x0001c6f5
   1c460:	0001c36f 	.word	0x0001c36f
   1c464:	0001c651 	.word	0x0001c651
   1c468:	0001c5d3 	.word	0x0001c5d3
   1c46c:	0001c5a3 	.word	0x0001c5a3
   1c470:	0001c36f 	.word	0x0001c36f
   1c474:	0001c36f 	.word	0x0001c36f
   1c478:	0001c36f 	.word	0x0001c36f
   1c47c:	0001c36f 	.word	0x0001c36f
   1c480:	0001c591 	.word	0x0001c591
   1c484:	0001c36f 	.word	0x0001c36f
   1c488:	0001c36f 	.word	0x0001c36f
   1c48c:	0001c571 	.word	0x0001c571
   1c490:	0001c535 	.word	0x0001c535
   1c494:	0001c4e7 	.word	0x0001c4e7
   1c498:	f10d 0918 	add.w	r9, sp, #24
   1c49c:	4958      	ldr	r1, [pc, #352]	; (1c600 <__loadlocale+0x30c>)
   1c49e:	4648      	mov	r0, r9
   1c4a0:	f000 fdbc 	bl	1d01c <strcpy>
   1c4a4:	46c2      	mov	sl, r8
   1c4a6:	46c3      	mov	fp, r8
   1c4a8:	e784      	b.n	1c3b4 <__loadlocale+0xc0>
   1c4aa:	4953      	ldr	r1, [pc, #332]	; (1c5f8 <__loadlocale+0x304>)
   1c4ac:	4620      	mov	r0, r4
   1c4ae:	f000 fdb5 	bl	1d01c <strcpy>
   1c4b2:	e737      	b.n	1c324 <__loadlocale+0x30>
   1c4b4:	7863      	ldrb	r3, [r4, #1]
   1c4b6:	3b2d      	subs	r3, #45	; 0x2d
   1c4b8:	2b01      	cmp	r3, #1
   1c4ba:	f63f af58 	bhi.w	1c36e <__loadlocale+0x7a>
   1c4be:	f104 0802 	add.w	r8, r4, #2
   1c4c2:	f10d 0918 	add.w	r9, sp, #24
   1c4c6:	4641      	mov	r1, r8
   1c4c8:	4648      	mov	r0, r9
   1c4ca:	f000 fda7 	bl	1d01c <strcpy>
   1c4ce:	2140      	movs	r1, #64	; 0x40
   1c4d0:	4648      	mov	r0, r9
   1c4d2:	f7ff fb03 	bl	1badc <strchr>
   1c4d6:	b108      	cbz	r0, 1c4dc <__loadlocale+0x1e8>
   1c4d8:	2300      	movs	r3, #0
   1c4da:	7003      	strb	r3, [r0, #0]
   1c4dc:	4648      	mov	r0, r9
   1c4de:	f000 fe4f 	bl	1d180 <strlen>
   1c4e2:	4480      	add	r8, r0
   1c4e4:	e75d      	b.n	1c3a2 <__loadlocale+0xae>
   1c4e6:	4947      	ldr	r1, [pc, #284]	; (1c604 <__loadlocale+0x310>)
   1c4e8:	4648      	mov	r0, r9
   1c4ea:	f004 fc77 	bl	20ddc <strcasecmp>
   1c4ee:	b130      	cbz	r0, 1c4fe <__loadlocale+0x20a>
   1c4f0:	4945      	ldr	r1, [pc, #276]	; (1c608 <__loadlocale+0x314>)
   1c4f2:	4648      	mov	r0, r9
   1c4f4:	f004 fc72 	bl	20ddc <strcasecmp>
   1c4f8:	2800      	cmp	r0, #0
   1c4fa:	f47f af38 	bne.w	1c36e <__loadlocale+0x7a>
   1c4fe:	4941      	ldr	r1, [pc, #260]	; (1c604 <__loadlocale+0x310>)
   1c500:	4648      	mov	r0, r9
   1c502:	f000 fd8b 	bl	1d01c <strcpy>
   1c506:	2106      	movs	r1, #6
   1c508:	4b40      	ldr	r3, [pc, #256]	; (1c60c <__loadlocale+0x318>)
   1c50a:	4a41      	ldr	r2, [pc, #260]	; (1c610 <__loadlocale+0x31c>)
   1c50c:	9101      	str	r1, [sp, #4]
   1c50e:	2e02      	cmp	r6, #2
   1c510:	f000 8162 	beq.w	1c7d8 <__loadlocale+0x4e4>
   1c514:	2e06      	cmp	r6, #6
   1c516:	d104      	bne.n	1c522 <__loadlocale+0x22e>
   1c518:	4649      	mov	r1, r9
   1c51a:	f505 70a5 	add.w	r0, r5, #330	; 0x14a
   1c51e:	f000 fd7d 	bl	1d01c <strcpy>
   1c522:	4638      	mov	r0, r7
   1c524:	4621      	mov	r1, r4
   1c526:	f000 fd79 	bl	1d01c <strcpy>
   1c52a:	4607      	mov	r7, r0
   1c52c:	4638      	mov	r0, r7
   1c52e:	b00f      	add	sp, #60	; 0x3c
   1c530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c534:	4937      	ldr	r1, [pc, #220]	; (1c614 <__loadlocale+0x320>)
   1c536:	2203      	movs	r2, #3
   1c538:	4648      	mov	r0, r9
   1c53a:	f7ff fb35 	bl	1bba8 <strncasecmp>
   1c53e:	2800      	cmp	r0, #0
   1c540:	f47f af15 	bne.w	1c36e <__loadlocale+0x7a>
   1c544:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1c548:	4933      	ldr	r1, [pc, #204]	; (1c618 <__loadlocale+0x324>)
   1c54a:	2b2d      	cmp	r3, #45	; 0x2d
   1c54c:	bf0c      	ite	eq
   1c54e:	a807      	addeq	r0, sp, #28
   1c550:	f10d 001b 	addne.w	r0, sp, #27
   1c554:	f000 fbf8 	bl	1cd48 <strcmp>
   1c558:	2800      	cmp	r0, #0
   1c55a:	f47f af08 	bne.w	1c36e <__loadlocale+0x7a>
   1c55e:	492f      	ldr	r1, [pc, #188]	; (1c61c <__loadlocale+0x328>)
   1c560:	4648      	mov	r0, r9
   1c562:	f000 fd5b 	bl	1d01c <strcpy>
   1c566:	2101      	movs	r1, #1
   1c568:	4b2d      	ldr	r3, [pc, #180]	; (1c620 <__loadlocale+0x32c>)
   1c56a:	4a2e      	ldr	r2, [pc, #184]	; (1c624 <__loadlocale+0x330>)
   1c56c:	9101      	str	r1, [sp, #4]
   1c56e:	e7ce      	b.n	1c50e <__loadlocale+0x21a>
   1c570:	492d      	ldr	r1, [pc, #180]	; (1c628 <__loadlocale+0x334>)
   1c572:	4648      	mov	r0, r9
   1c574:	f004 fc32 	bl	20ddc <strcasecmp>
   1c578:	2800      	cmp	r0, #0
   1c57a:	f47f aef8 	bne.w	1c36e <__loadlocale+0x7a>
   1c57e:	492a      	ldr	r1, [pc, #168]	; (1c628 <__loadlocale+0x334>)
   1c580:	4648      	mov	r0, r9
   1c582:	f000 fd4b 	bl	1d01c <strcpy>
   1c586:	2102      	movs	r1, #2
   1c588:	4b28      	ldr	r3, [pc, #160]	; (1c62c <__loadlocale+0x338>)
   1c58a:	4a29      	ldr	r2, [pc, #164]	; (1c630 <__loadlocale+0x33c>)
   1c58c:	9101      	str	r1, [sp, #4]
   1c58e:	e7be      	b.n	1c50e <__loadlocale+0x21a>
   1c590:	4928      	ldr	r1, [pc, #160]	; (1c634 <__loadlocale+0x340>)
   1c592:	4648      	mov	r0, r9
   1c594:	f004 fc22 	bl	20ddc <strcasecmp>
   1c598:	2800      	cmp	r0, #0
   1c59a:	f47f aee8 	bne.w	1c36e <__loadlocale+0x7a>
   1c59e:	4926      	ldr	r1, [pc, #152]	; (1c638 <__loadlocale+0x344>)
   1c5a0:	e7de      	b.n	1c560 <__loadlocale+0x26c>
   1c5a2:	4926      	ldr	r1, [pc, #152]	; (1c63c <__loadlocale+0x348>)
   1c5a4:	2204      	movs	r2, #4
   1c5a6:	4648      	mov	r0, r9
   1c5a8:	f7ff fafe 	bl	1bba8 <strncasecmp>
   1c5ac:	2800      	cmp	r0, #0
   1c5ae:	f47f aede 	bne.w	1c36e <__loadlocale+0x7a>
   1c5b2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c5b6:	2b2d      	cmp	r3, #45	; 0x2d
   1c5b8:	bf08      	it	eq
   1c5ba:	f89d 301d 	ldrbeq.w	r3, [sp, #29]
   1c5be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c5c2:	2b52      	cmp	r3, #82	; 0x52
   1c5c4:	f000 815f 	beq.w	1c886 <__loadlocale+0x592>
   1c5c8:	2b55      	cmp	r3, #85	; 0x55
   1c5ca:	f47f aed0 	bne.w	1c36e <__loadlocale+0x7a>
   1c5ce:	491c      	ldr	r1, [pc, #112]	; (1c640 <__loadlocale+0x34c>)
   1c5d0:	e7c6      	b.n	1c560 <__loadlocale+0x26c>
   1c5d2:	491c      	ldr	r1, [pc, #112]	; (1c644 <__loadlocale+0x350>)
   1c5d4:	4648      	mov	r0, r9
   1c5d6:	f004 fc01 	bl	20ddc <strcasecmp>
   1c5da:	2800      	cmp	r0, #0
   1c5dc:	f47f aec7 	bne.w	1c36e <__loadlocale+0x7a>
   1c5e0:	4918      	ldr	r1, [pc, #96]	; (1c644 <__loadlocale+0x350>)
   1c5e2:	4648      	mov	r0, r9
   1c5e4:	f000 fd1a 	bl	1d01c <strcpy>
   1c5e8:	2108      	movs	r1, #8
   1c5ea:	4b17      	ldr	r3, [pc, #92]	; (1c648 <__loadlocale+0x354>)
   1c5ec:	4a17      	ldr	r2, [pc, #92]	; (1c64c <__loadlocale+0x358>)
   1c5ee:	9101      	str	r1, [sp, #4]
   1c5f0:	e78d      	b.n	1c50e <__loadlocale+0x21a>
   1c5f2:	bf00      	nop
   1c5f4:	20008a90 	.word	0x20008a90
   1c5f8:	20008a98 	.word	0x20008a98
   1c5fc:	20008aa4 	.word	0x20008aa4
   1c600:	20008a9c 	.word	0x20008a9c
   1c604:	20008ad0 	.word	0x20008ad0
   1c608:	20008ad8 	.word	0x20008ad8
   1c60c:	0001dea1 	.word	0x0001dea1
   1c610:	0001edd5 	.word	0x0001edd5
   1c614:	20008b58 	.word	0x20008b58
   1c618:	20008b5c 	.word	0x20008b5c
   1c61c:	20008b60 	.word	0x20008b60
   1c620:	0001de75 	.word	0x0001de75
   1c624:	0001edb9 	.word	0x0001edb9
   1c628:	20008af4 	.word	0x20008af4
   1c62c:	0001e071 	.word	0x0001e071
   1c630:	0001ee75 	.word	0x0001ee75
   1c634:	20008b48 	.word	0x20008b48
   1c638:	20008b50 	.word	0x20008b50
   1c63c:	20008b18 	.word	0x20008b18
   1c640:	20008b28 	.word	0x20008b28
   1c644:	20008ae0 	.word	0x20008ae0
   1c648:	0001e1c1 	.word	0x0001e1c1
   1c64c:	0001ef49 	.word	0x0001ef49
   1c650:	499b      	ldr	r1, [pc, #620]	; (1c8c0 <__loadlocale+0x5cc>)
   1c652:	2203      	movs	r2, #3
   1c654:	4648      	mov	r0, r9
   1c656:	f7ff faa7 	bl	1bba8 <strncasecmp>
   1c65a:	2800      	cmp	r0, #0
   1c65c:	f47f ae87 	bne.w	1c36e <__loadlocale+0x7a>
   1c660:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1c664:	4997      	ldr	r1, [pc, #604]	; (1c8c4 <__loadlocale+0x5d0>)
   1c666:	2b2d      	cmp	r3, #45	; 0x2d
   1c668:	bf0c      	ite	eq
   1c66a:	ab07      	addeq	r3, sp, #28
   1c66c:	f10d 031b 	addne.w	r3, sp, #27
   1c670:	2204      	movs	r2, #4
   1c672:	4618      	mov	r0, r3
   1c674:	9301      	str	r3, [sp, #4]
   1c676:	f7ff fa97 	bl	1bba8 <strncasecmp>
   1c67a:	2800      	cmp	r0, #0
   1c67c:	f47f ae77 	bne.w	1c36e <__loadlocale+0x7a>
   1c680:	9b01      	ldr	r3, [sp, #4]
   1c682:	791a      	ldrb	r2, [r3, #4]
   1c684:	2a2d      	cmp	r2, #45	; 0x2d
   1c686:	bf14      	ite	ne
   1c688:	1d18      	addne	r0, r3, #4
   1c68a:	1d58      	addeq	r0, r3, #5
   1c68c:	220a      	movs	r2, #10
   1c68e:	a905      	add	r1, sp, #20
   1c690:	f7fe fe10 	bl	1b2b4 <strtol>
   1c694:	1e42      	subs	r2, r0, #1
   1c696:	2a0f      	cmp	r2, #15
   1c698:	f63f ae69 	bhi.w	1c36e <__loadlocale+0x7a>
   1c69c:	280c      	cmp	r0, #12
   1c69e:	9001      	str	r0, [sp, #4]
   1c6a0:	f43f ae65 	beq.w	1c36e <__loadlocale+0x7a>
   1c6a4:	9a05      	ldr	r2, [sp, #20]
   1c6a6:	7812      	ldrb	r2, [r2, #0]
   1c6a8:	2a00      	cmp	r2, #0
   1c6aa:	f47f ae60 	bne.w	1c36e <__loadlocale+0x7a>
   1c6ae:	4986      	ldr	r1, [pc, #536]	; (1c8c8 <__loadlocale+0x5d4>)
   1c6b0:	4648      	mov	r0, r9
   1c6b2:	f000 fcb3 	bl	1d01c <strcpy>
   1c6b6:	9b01      	ldr	r3, [sp, #4]
   1c6b8:	4884      	ldr	r0, [pc, #528]	; (1c8cc <__loadlocale+0x5d8>)
   1c6ba:	2b0a      	cmp	r3, #10
   1c6bc:	bfc4      	itt	gt
   1c6be:	2231      	movgt	r2, #49	; 0x31
   1c6c0:	f88d 2021 	strbgt.w	r2, [sp, #33]	; 0x21
   1c6c4:	fb80 2003 	smull	r2, r0, r0, r3
   1c6c8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1c6cc:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
   1c6d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1c6d4:	bfcc      	ite	gt
   1c6d6:	f10d 0122 	addgt.w	r1, sp, #34	; 0x22
   1c6da:	f10d 0121 	addle.w	r1, sp, #33	; 0x21
   1c6de:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   1c6e2:	3330      	adds	r3, #48	; 0x30
   1c6e4:	700b      	strb	r3, [r1, #0]
   1c6e6:	2300      	movs	r3, #0
   1c6e8:	704b      	strb	r3, [r1, #1]
   1c6ea:	2101      	movs	r1, #1
   1c6ec:	4b78      	ldr	r3, [pc, #480]	; (1c8d0 <__loadlocale+0x5dc>)
   1c6ee:	4a79      	ldr	r2, [pc, #484]	; (1c8d4 <__loadlocale+0x5e0>)
   1c6f0:	9101      	str	r1, [sp, #4]
   1c6f2:	e70c      	b.n	1c50e <__loadlocale+0x21a>
   1c6f4:	4978      	ldr	r1, [pc, #480]	; (1c8d8 <__loadlocale+0x5e4>)
   1c6f6:	2208      	movs	r2, #8
   1c6f8:	4648      	mov	r0, r9
   1c6fa:	f7ff fa55 	bl	1bba8 <strncasecmp>
   1c6fe:	2800      	cmp	r0, #0
   1c700:	f47f ae35 	bne.w	1c36e <__loadlocale+0x7a>
   1c704:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1c708:	4974      	ldr	r1, [pc, #464]	; (1c8dc <__loadlocale+0x5e8>)
   1c70a:	2b2d      	cmp	r3, #45	; 0x2d
   1c70c:	bf0c      	ite	eq
   1c70e:	f10d 0021 	addeq.w	r0, sp, #33	; 0x21
   1c712:	a808      	addne	r0, sp, #32
   1c714:	f004 fb62 	bl	20ddc <strcasecmp>
   1c718:	2800      	cmp	r0, #0
   1c71a:	f47f ae28 	bne.w	1c36e <__loadlocale+0x7a>
   1c71e:	4970      	ldr	r1, [pc, #448]	; (1c8e0 <__loadlocale+0x5ec>)
   1c720:	e71e      	b.n	1c560 <__loadlocale+0x26c>
   1c722:	4970      	ldr	r1, [pc, #448]	; (1c8e4 <__loadlocale+0x5f0>)
   1c724:	2203      	movs	r2, #3
   1c726:	4648      	mov	r0, r9
   1c728:	f7ff fa3e 	bl	1bba8 <strncasecmp>
   1c72c:	2800      	cmp	r0, #0
   1c72e:	f47f ae1e 	bne.w	1c36e <__loadlocale+0x7a>
   1c732:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1c736:	496c      	ldr	r1, [pc, #432]	; (1c8e8 <__loadlocale+0x5f4>)
   1c738:	2b2d      	cmp	r3, #45	; 0x2d
   1c73a:	bf0c      	ite	eq
   1c73c:	a807      	addeq	r0, sp, #28
   1c73e:	f10d 001b 	addne.w	r0, sp, #27
   1c742:	f004 fb4b 	bl	20ddc <strcasecmp>
   1c746:	2800      	cmp	r0, #0
   1c748:	f47f ae11 	bne.w	1c36e <__loadlocale+0x7a>
   1c74c:	4967      	ldr	r1, [pc, #412]	; (1c8ec <__loadlocale+0x5f8>)
   1c74e:	4648      	mov	r0, r9
   1c750:	f000 fc64 	bl	1d01c <strcpy>
   1c754:	2103      	movs	r1, #3
   1c756:	4b66      	ldr	r3, [pc, #408]	; (1c8f0 <__loadlocale+0x5fc>)
   1c758:	4a66      	ldr	r2, [pc, #408]	; (1c8f4 <__loadlocale+0x600>)
   1c75a:	9101      	str	r1, [sp, #4]
   1c75c:	e6d7      	b.n	1c50e <__loadlocale+0x21a>
   1c75e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1c762:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c766:	2b50      	cmp	r3, #80	; 0x50
   1c768:	f47f ae01 	bne.w	1c36e <__loadlocale+0x7a>
   1c76c:	4962      	ldr	r1, [pc, #392]	; (1c8f8 <__loadlocale+0x604>)
   1c76e:	2202      	movs	r2, #2
   1c770:	4648      	mov	r0, r9
   1c772:	f7ff fa8d 	bl	1bc90 <strncpy>
   1c776:	220a      	movs	r2, #10
   1c778:	a905      	add	r1, sp, #20
   1c77a:	f10d 001a 	add.w	r0, sp, #26
   1c77e:	f7fe fd99 	bl	1b2b4 <strtol>
   1c782:	9b05      	ldr	r3, [sp, #20]
   1c784:	781b      	ldrb	r3, [r3, #0]
   1c786:	2b00      	cmp	r3, #0
   1c788:	f47f adf1 	bne.w	1c36e <__loadlocale+0x7a>
   1c78c:	f5b0 7f69 	cmp.w	r0, #932	; 0x3a4
   1c790:	f000 8085 	beq.w	1c89e <__loadlocale+0x5aa>
   1c794:	dc65      	bgt.n	1c862 <__loadlocale+0x56e>
   1c796:	f240 336a 	movw	r3, #874	; 0x36a
   1c79a:	4298      	cmp	r0, r3
   1c79c:	f73f ade7 	bgt.w	1c36e <__loadlocale+0x7a>
   1c7a0:	f240 3351 	movw	r3, #849	; 0x351
   1c7a4:	4298      	cmp	r0, r3
   1c7a6:	dc54      	bgt.n	1c852 <__loadlocale+0x55e>
   1c7a8:	f240 23e1 	movw	r3, #737	; 0x2e1
   1c7ac:	4298      	cmp	r0, r3
   1c7ae:	d005      	beq.n	1c7bc <__loadlocale+0x4c8>
   1c7b0:	dd61      	ble.n	1c876 <__loadlocale+0x582>
   1c7b2:	f240 3307 	movw	r3, #775	; 0x307
   1c7b6:	4298      	cmp	r0, r3
   1c7b8:	f47f add9 	bne.w	1c36e <__loadlocale+0x7a>
   1c7bc:	2101      	movs	r1, #1
   1c7be:	4b44      	ldr	r3, [pc, #272]	; (1c8d0 <__loadlocale+0x5dc>)
   1c7c0:	4a44      	ldr	r2, [pc, #272]	; (1c8d4 <__loadlocale+0x5e0>)
   1c7c2:	9101      	str	r1, [sp, #4]
   1c7c4:	e6a3      	b.n	1c50e <__loadlocale+0x21a>
   1c7c6:	494d      	ldr	r1, [pc, #308]	; (1c8fc <__loadlocale+0x608>)
   1c7c8:	4648      	mov	r0, r9
   1c7ca:	f004 fb07 	bl	20ddc <strcasecmp>
   1c7ce:	2800      	cmp	r0, #0
   1c7d0:	f47f adcd 	bne.w	1c36e <__loadlocale+0x7a>
   1c7d4:	4949      	ldr	r1, [pc, #292]	; (1c8fc <__loadlocale+0x608>)
   1c7d6:	e6c3      	b.n	1c560 <__loadlocale+0x26c>
   1c7d8:	4649      	mov	r1, r9
   1c7da:	f505 7095 	add.w	r0, r5, #298	; 0x12a
   1c7de:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c7e2:	f000 fc1b 	bl	1d01c <strcpy>
   1c7e6:	9a02      	ldr	r2, [sp, #8]
   1c7e8:	9b03      	ldr	r3, [sp, #12]
   1c7ea:	9e01      	ldr	r6, [sp, #4]
   1c7ec:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
   1c7f0:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
   1c7f4:	f885 6128 	strb.w	r6, [r5, #296]	; 0x128
   1c7f8:	4649      	mov	r1, r9
   1c7fa:	4628      	mov	r0, r5
   1c7fc:	f7fe fd6c 	bl	1b2d8 <__set_ctype>
   1c800:	f1ba 0f00 	cmp.w	sl, #0
   1c804:	d10b      	bne.n	1c81e <__loadlocale+0x52a>
   1c806:	f1b8 0f00 	cmp.w	r8, #0
   1c80a:	d108      	bne.n	1c81e <__loadlocale+0x52a>
   1c80c:	2e01      	cmp	r6, #1
   1c80e:	d006      	beq.n	1c81e <__loadlocale+0x52a>
   1c810:	f89d a018 	ldrb.w	sl, [sp, #24]
   1c814:	f1ba 0a55 	subs.w	sl, sl, #85	; 0x55
   1c818:	bf18      	it	ne
   1c81a:	f04f 0a01 	movne.w	sl, #1
   1c81e:	f1bb 0f00 	cmp.w	fp, #0
   1c822:	d10e      	bne.n	1c842 <__loadlocale+0x54e>
   1c824:	f8c5 a0e8 	str.w	sl, [r5, #232]	; 0xe8
   1c828:	e67b      	b.n	1c522 <__loadlocale+0x22e>
   1c82a:	f108 0b01 	add.w	fp, r8, #1
   1c82e:	4934      	ldr	r1, [pc, #208]	; (1c900 <__loadlocale+0x60c>)
   1c830:	4658      	mov	r0, fp
   1c832:	f000 fa89 	bl	1cd48 <strcmp>
   1c836:	4680      	mov	r8, r0
   1c838:	bb38      	cbnz	r0, 1c88a <__loadlocale+0x596>
   1c83a:	4682      	mov	sl, r0
   1c83c:	f04f 0b01 	mov.w	fp, #1
   1c840:	e5b8      	b.n	1c3b4 <__loadlocale+0xc0>
   1c842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c846:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
   1c84a:	e66a      	b.n	1c522 <__loadlocale+0x22e>
   1c84c:	f108 0801 	add.w	r8, r8, #1
   1c850:	e637      	b.n	1c4c2 <__loadlocale+0x1ce>
   1c852:	4b2c      	ldr	r3, [pc, #176]	; (1c904 <__loadlocale+0x610>)
   1c854:	f2a0 3052 	subw	r0, r0, #850	; 0x352
   1c858:	40c3      	lsrs	r3, r0
   1c85a:	07db      	lsls	r3, r3, #31
   1c85c:	f57f ad87 	bpl.w	1c36e <__loadlocale+0x7a>
   1c860:	e7ac      	b.n	1c7bc <__loadlocale+0x4c8>
   1c862:	f240 4365 	movw	r3, #1125	; 0x465
   1c866:	4298      	cmp	r0, r3
   1c868:	d0a8      	beq.n	1c7bc <__loadlocale+0x4c8>
   1c86a:	f2a0 40e2 	subw	r0, r0, #1250	; 0x4e2
   1c86e:	2808      	cmp	r0, #8
   1c870:	f63f ad7d 	bhi.w	1c36e <__loadlocale+0x7a>
   1c874:	e7a2      	b.n	1c7bc <__loadlocale+0x4c8>
   1c876:	f240 13b5 	movw	r3, #437	; 0x1b5
   1c87a:	4298      	cmp	r0, r3
   1c87c:	d09e      	beq.n	1c7bc <__loadlocale+0x4c8>
   1c87e:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
   1c882:	d09b      	beq.n	1c7bc <__loadlocale+0x4c8>
   1c884:	e573      	b.n	1c36e <__loadlocale+0x7a>
   1c886:	4920      	ldr	r1, [pc, #128]	; (1c908 <__loadlocale+0x614>)
   1c888:	e66a      	b.n	1c560 <__loadlocale+0x26c>
   1c88a:	4920      	ldr	r1, [pc, #128]	; (1c90c <__loadlocale+0x618>)
   1c88c:	4658      	mov	r0, fp
   1c88e:	f000 fa5b 	bl	1cd48 <strcmp>
   1c892:	4682      	mov	sl, r0
   1c894:	b940      	cbnz	r0, 1c8a8 <__loadlocale+0x5b4>
   1c896:	4683      	mov	fp, r0
   1c898:	f04f 0801 	mov.w	r8, #1
   1c89c:	e58a      	b.n	1c3b4 <__loadlocale+0xc0>
   1c89e:	2102      	movs	r1, #2
   1c8a0:	4b1b      	ldr	r3, [pc, #108]	; (1c910 <__loadlocale+0x61c>)
   1c8a2:	4a1c      	ldr	r2, [pc, #112]	; (1c914 <__loadlocale+0x620>)
   1c8a4:	9101      	str	r1, [sp, #4]
   1c8a6:	e632      	b.n	1c50e <__loadlocale+0x21a>
   1c8a8:	4658      	mov	r0, fp
   1c8aa:	491b      	ldr	r1, [pc, #108]	; (1c918 <__loadlocale+0x624>)
   1c8ac:	f000 fa4c 	bl	1cd48 <strcmp>
   1c8b0:	f04f 0800 	mov.w	r8, #0
   1c8b4:	fab0 fa80 	clz	sl, r0
   1c8b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
   1c8bc:	46c3      	mov	fp, r8
   1c8be:	e579      	b.n	1c3b4 <__loadlocale+0xc0>
   1c8c0:	20008afc 	.word	0x20008afc
   1c8c4:	20008b00 	.word	0x20008b00
   1c8c8:	20008b08 	.word	0x20008b08
   1c8cc:	66666667 	.word	0x66666667
   1c8d0:	0001de75 	.word	0x0001de75
   1c8d4:	0001edb9 	.word	0x0001edb9
   1c8d8:	20008b30 	.word	0x20008b30
   1c8dc:	20008b3c 	.word	0x20008b3c
   1c8e0:	20008b40 	.word	0x20008b40
   1c8e4:	20008ae4 	.word	0x20008ae4
   1c8e8:	20008ae8 	.word	0x20008ae8
   1c8ec:	20008aec 	.word	0x20008aec
   1c8f0:	0001e101 	.word	0x0001e101
   1c8f4:	0001eecd 	.word	0x0001eecd
   1c8f8:	20008b14 	.word	0x20008b14
   1c8fc:	20008a9c 	.word	0x20008a9c
   1c900:	20008ab0 	.word	0x20008ab0
   1c904:	010111a5 	.word	0x010111a5
   1c908:	20008b20 	.word	0x20008b20
   1c90c:	20008abc 	.word	0x20008abc
   1c910:	0001e071 	.word	0x0001e071
   1c914:	0001ee75 	.word	0x0001ee75
   1c918:	20008ac8 	.word	0x20008ac8

0001c91c <__get_locale_env>:
   1c91c:	b538      	push	{r3, r4, r5, lr}
   1c91e:	460d      	mov	r5, r1
   1c920:	490e      	ldr	r1, [pc, #56]	; (1c95c <__get_locale_env+0x40>)
   1c922:	4604      	mov	r4, r0
   1c924:	f001 fa94 	bl	1de50 <_getenv_r>
   1c928:	b108      	cbz	r0, 1c92e <__get_locale_env+0x12>
   1c92a:	7803      	ldrb	r3, [r0, #0]
   1c92c:	b973      	cbnz	r3, 1c94c <__get_locale_env+0x30>
   1c92e:	4b0c      	ldr	r3, [pc, #48]	; (1c960 <__get_locale_env+0x44>)
   1c930:	4620      	mov	r0, r4
   1c932:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   1c936:	f001 fa8b 	bl	1de50 <_getenv_r>
   1c93a:	b108      	cbz	r0, 1c940 <__get_locale_env+0x24>
   1c93c:	7803      	ldrb	r3, [r0, #0]
   1c93e:	b92b      	cbnz	r3, 1c94c <__get_locale_env+0x30>
   1c940:	4908      	ldr	r1, [pc, #32]	; (1c964 <__get_locale_env+0x48>)
   1c942:	4620      	mov	r0, r4
   1c944:	f001 fa84 	bl	1de50 <_getenv_r>
   1c948:	b908      	cbnz	r0, 1c94e <__get_locale_env+0x32>
   1c94a:	4807      	ldr	r0, [pc, #28]	; (1c968 <__get_locale_env+0x4c>)
   1c94c:	bd38      	pop	{r3, r4, r5, pc}
   1c94e:	7802      	ldrb	r2, [r0, #0]
   1c950:	4b05      	ldr	r3, [pc, #20]	; (1c968 <__get_locale_env+0x4c>)
   1c952:	2a00      	cmp	r2, #0
   1c954:	bf08      	it	eq
   1c956:	4618      	moveq	r0, r3
   1c958:	bd38      	pop	{r3, r4, r5, pc}
   1c95a:	bf00      	nop
   1c95c:	20008b68 	.word	0x20008b68
   1c960:	200022d4 	.word	0x200022d4
   1c964:	20008b70 	.word	0x20008b70
   1c968:	20009494 	.word	0x20009494
   1c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c970:	f8df 8204 	ldr.w	r8, [pc, #516]	; 1cb78 <__get_locale_env+0x25c>
   1c974:	4e7d      	ldr	r6, [pc, #500]	; (1cb6c <__get_locale_env+0x250>)
   1c976:	b083      	sub	sp, #12
   1c978:	4681      	mov	r9, r0
   1c97a:	468b      	mov	fp, r1
   1c97c:	4692      	mov	sl, r2
   1c97e:	f108 07c0 	add.w	r7, r8, #192	; 0xc0
   1c982:	4635      	mov	r5, r6
   1c984:	4644      	mov	r4, r8
   1c986:	4629      	mov	r1, r5
   1c988:	4620      	mov	r0, r4
   1c98a:	3420      	adds	r4, #32
   1c98c:	f000 fb46 	bl	1d01c <strcpy>
   1c990:	42bc      	cmp	r4, r7
   1c992:	f105 0520 	add.w	r5, r5, #32
   1c996:	d1f6      	bne.n	1c986 <__get_locale_env+0x6a>
   1c998:	f89a 3000 	ldrb.w	r3, [sl]
   1c99c:	bbab      	cbnz	r3, 1ca0a <__get_locale_env+0xee>
   1c99e:	f1bb 0f00 	cmp.w	fp, #0
   1c9a2:	f040 8086 	bne.w	1cab2 <__get_locale_env+0x196>
   1c9a6:	4645      	mov	r5, r8
   1c9a8:	2401      	movs	r4, #1
   1c9aa:	4621      	mov	r1, r4
   1c9ac:	4648      	mov	r0, r9
   1c9ae:	f7ff ffb5 	bl	1c91c <__get_locale_env>
   1c9b2:	9001      	str	r0, [sp, #4]
   1c9b4:	f000 fbe4 	bl	1d180 <strlen>
   1c9b8:	4603      	mov	r3, r0
   1c9ba:	2b1f      	cmp	r3, #31
   1c9bc:	4628      	mov	r0, r5
   1c9be:	9901      	ldr	r1, [sp, #4]
   1c9c0:	f104 0401 	add.w	r4, r4, #1
   1c9c4:	f105 0520 	add.w	r5, r5, #32
   1c9c8:	d86c      	bhi.n	1caa4 <__get_locale_env+0x188>
   1c9ca:	f000 fb27 	bl	1d01c <strcpy>
   1c9ce:	2c07      	cmp	r4, #7
   1c9d0:	d1eb      	bne.n	1c9aa <__get_locale_env+0x8e>
   1c9d2:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 1cb7c <__get_locale_env+0x260>
   1c9d6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 1cb74 <__get_locale_env+0x258>
   1c9da:	4647      	mov	r7, r8
   1c9dc:	4655      	mov	r5, sl
   1c9de:	2401      	movs	r4, #1
   1c9e0:	4631      	mov	r1, r6
   1c9e2:	4628      	mov	r0, r5
   1c9e4:	f000 fb1a 	bl	1d01c <strcpy>
   1c9e8:	463a      	mov	r2, r7
   1c9ea:	4621      	mov	r1, r4
   1c9ec:	4658      	mov	r0, fp
   1c9ee:	f7ff fc81 	bl	1c2f4 <__loadlocale>
   1c9f2:	3520      	adds	r5, #32
   1c9f4:	3620      	adds	r6, #32
   1c9f6:	3720      	adds	r7, #32
   1c9f8:	2800      	cmp	r0, #0
   1c9fa:	d06b      	beq.n	1cad4 <__get_locale_env+0x1b8>
   1c9fc:	3401      	adds	r4, #1
   1c9fe:	2c07      	cmp	r4, #7
   1ca00:	d1ee      	bne.n	1c9e0 <__get_locale_env+0xc4>
   1ca02:	b003      	add	sp, #12
   1ca04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca08:	e448      	b.n	1c29c <strstr+0x168>
   1ca0a:	f1bb 0f00 	cmp.w	fp, #0
   1ca0e:	d135      	bne.n	1ca7c <__get_locale_env+0x160>
   1ca10:	212f      	movs	r1, #47	; 0x2f
   1ca12:	4650      	mov	r0, sl
   1ca14:	f7ff f862 	bl	1badc <strchr>
   1ca18:	4604      	mov	r4, r0
   1ca1a:	2800      	cmp	r0, #0
   1ca1c:	f000 8089 	beq.w	1cb32 <__get_locale_env+0x216>
   1ca20:	7842      	ldrb	r2, [r0, #1]
   1ca22:	2a2f      	cmp	r2, #47	; 0x2f
   1ca24:	bf08      	it	eq
   1ca26:	1c43      	addeq	r3, r0, #1
   1ca28:	d104      	bne.n	1ca34 <__get_locale_env+0x118>
   1ca2a:	461c      	mov	r4, r3
   1ca2c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ca30:	2a2f      	cmp	r2, #47	; 0x2f
   1ca32:	d0fa      	beq.n	1ca2a <__get_locale_env+0x10e>
   1ca34:	b3b2      	cbz	r2, 1caa4 <__get_locale_env+0x188>
   1ca36:	46c3      	mov	fp, r8
   1ca38:	2501      	movs	r5, #1
   1ca3a:	eba4 020a 	sub.w	r2, r4, sl
   1ca3e:	2a1f      	cmp	r2, #31
   1ca40:	dc30      	bgt.n	1caa4 <__get_locale_env+0x188>
   1ca42:	3201      	adds	r2, #1
   1ca44:	4651      	mov	r1, sl
   1ca46:	4658      	mov	r0, fp
   1ca48:	f004 fa12 	bl	20e70 <strlcpy>
   1ca4c:	7823      	ldrb	r3, [r4, #0]
   1ca4e:	2b2f      	cmp	r3, #47	; 0x2f
   1ca50:	f105 0501 	add.w	r5, r5, #1
   1ca54:	d103      	bne.n	1ca5e <__get_locale_env+0x142>
   1ca56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ca5a:	2b2f      	cmp	r3, #47	; 0x2f
   1ca5c:	d0fb      	beq.n	1ca56 <__get_locale_env+0x13a>
   1ca5e:	2b00      	cmp	r3, #0
   1ca60:	d075      	beq.n	1cb4e <__get_locale_env+0x232>
   1ca62:	4622      	mov	r2, r4
   1ca64:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1ca68:	b10b      	cbz	r3, 1ca6e <__get_locale_env+0x152>
   1ca6a:	2b2f      	cmp	r3, #47	; 0x2f
   1ca6c:	d1fa      	bne.n	1ca64 <__get_locale_env+0x148>
   1ca6e:	2d07      	cmp	r5, #7
   1ca70:	f10b 0b20 	add.w	fp, fp, #32
   1ca74:	d0ad      	beq.n	1c9d2 <__get_locale_env+0xb6>
   1ca76:	46a2      	mov	sl, r4
   1ca78:	4614      	mov	r4, r2
   1ca7a:	e7de      	b.n	1ca3a <__get_locale_env+0x11e>
   1ca7c:	4650      	mov	r0, sl
   1ca7e:	f000 fb7f 	bl	1d180 <strlen>
   1ca82:	281f      	cmp	r0, #31
   1ca84:	d80e      	bhi.n	1caa4 <__get_locale_env+0x188>
   1ca86:	4c3a      	ldr	r4, [pc, #232]	; (1cb70 <__get_locale_env+0x254>)
   1ca88:	eb04 144b 	add.w	r4, r4, fp, lsl #5
   1ca8c:	4651      	mov	r1, sl
   1ca8e:	4620      	mov	r0, r4
   1ca90:	f000 fac4 	bl	1d01c <strcpy>
   1ca94:	4837      	ldr	r0, [pc, #220]	; (1cb74 <__get_locale_env+0x258>)
   1ca96:	4622      	mov	r2, r4
   1ca98:	4659      	mov	r1, fp
   1ca9a:	b003      	add	sp, #12
   1ca9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caa0:	f7ff bc28 	b.w	1c2f4 <__loadlocale>
   1caa4:	2316      	movs	r3, #22
   1caa6:	2000      	movs	r0, #0
   1caa8:	f8c9 3000 	str.w	r3, [r9]
   1caac:	b003      	add	sp, #12
   1caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cab2:	4659      	mov	r1, fp
   1cab4:	4648      	mov	r0, r9
   1cab6:	f7ff ff31 	bl	1c91c <__get_locale_env>
   1caba:	4605      	mov	r5, r0
   1cabc:	f000 fb60 	bl	1d180 <strlen>
   1cac0:	281f      	cmp	r0, #31
   1cac2:	d8ef      	bhi.n	1caa4 <__get_locale_env+0x188>
   1cac4:	4c2a      	ldr	r4, [pc, #168]	; (1cb70 <__get_locale_env+0x254>)
   1cac6:	eb04 144b 	add.w	r4, r4, fp, lsl #5
   1caca:	4629      	mov	r1, r5
   1cacc:	4620      	mov	r0, r4
   1cace:	f000 faa5 	bl	1d01c <strcpy>
   1cad2:	e7df      	b.n	1ca94 <__get_locale_env+0x178>
   1cad4:	2c01      	cmp	r4, #1
   1cad6:	f8d9 7000 	ldr.w	r7, [r9]
   1cada:	d024      	beq.n	1cb26 <__get_locale_env+0x20a>
   1cadc:	4e25      	ldr	r6, [pc, #148]	; (1cb74 <__get_locale_env+0x258>)
   1cade:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 1cb80 <__get_locale_env+0x264>
   1cae2:	2501      	movs	r5, #1
   1cae4:	e004      	b.n	1caf0 <__get_locale_env+0x1d4>
   1cae6:	3501      	adds	r5, #1
   1cae8:	42a5      	cmp	r5, r4
   1caea:	f108 0820 	add.w	r8, r8, #32
   1caee:	d01a      	beq.n	1cb26 <__get_locale_env+0x20a>
   1caf0:	4651      	mov	r1, sl
   1caf2:	4640      	mov	r0, r8
   1caf4:	f000 fa92 	bl	1d01c <strcpy>
   1caf8:	4642      	mov	r2, r8
   1cafa:	4629      	mov	r1, r5
   1cafc:	4630      	mov	r0, r6
   1cafe:	f10a 0a20 	add.w	sl, sl, #32
   1cb02:	f7ff fbf7 	bl	1c2f4 <__loadlocale>
   1cb06:	2800      	cmp	r0, #0
   1cb08:	d1ed      	bne.n	1cae6 <__get_locale_env+0x1ca>
   1cb0a:	4659      	mov	r1, fp
   1cb0c:	4640      	mov	r0, r8
   1cb0e:	f000 fa85 	bl	1d01c <strcpy>
   1cb12:	4642      	mov	r2, r8
   1cb14:	4629      	mov	r1, r5
   1cb16:	4630      	mov	r0, r6
   1cb18:	3501      	adds	r5, #1
   1cb1a:	f7ff fbeb 	bl	1c2f4 <__loadlocale>
   1cb1e:	42a5      	cmp	r5, r4
   1cb20:	f108 0820 	add.w	r8, r8, #32
   1cb24:	d1e4      	bne.n	1caf0 <__get_locale_env+0x1d4>
   1cb26:	2000      	movs	r0, #0
   1cb28:	f8c9 7000 	str.w	r7, [r9]
   1cb2c:	b003      	add	sp, #12
   1cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb32:	4650      	mov	r0, sl
   1cb34:	f000 fb24 	bl	1d180 <strlen>
   1cb38:	281f      	cmp	r0, #31
   1cb3a:	d8b3      	bhi.n	1caa4 <__get_locale_env+0x188>
   1cb3c:	4644      	mov	r4, r8
   1cb3e:	4620      	mov	r0, r4
   1cb40:	4651      	mov	r1, sl
   1cb42:	3420      	adds	r4, #32
   1cb44:	f000 fa6a 	bl	1d01c <strcpy>
   1cb48:	42bc      	cmp	r4, r7
   1cb4a:	d1f8      	bne.n	1cb3e <__get_locale_env+0x222>
   1cb4c:	e741      	b.n	1c9d2 <__get_locale_env+0xb6>
   1cb4e:	2d07      	cmp	r5, #7
   1cb50:	f43f af3f 	beq.w	1c9d2 <__get_locale_env+0xb6>
   1cb54:	4c06      	ldr	r4, [pc, #24]	; (1cb70 <__get_locale_env+0x254>)
   1cb56:	eb04 1445 	add.w	r4, r4, r5, lsl #5
   1cb5a:	f1a4 0120 	sub.w	r1, r4, #32
   1cb5e:	4620      	mov	r0, r4
   1cb60:	3420      	adds	r4, #32
   1cb62:	f000 fa5b 	bl	1d01c <strcpy>
   1cb66:	42bc      	cmp	r4, r7
   1cb68:	d1f7      	bne.n	1cb5a <__get_locale_env+0x23e>
   1cb6a:	e732      	b.n	1c9d2 <__get_locale_env+0xb6>
   1cb6c:	20009348 	.word	0x20009348
   1cb70:	2000d35c 	.word	0x2000d35c
   1cb74:	20009328 	.word	0x20009328
   1cb78:	2000d37c 	.word	0x2000d37c
   1cb7c:	2000d45c 	.word	0x2000d45c
   1cb80:	20008a98 	.word	0x20008a98

0001cb84 <_setlocale_r>:
   1cb84:	2906      	cmp	r1, #6
   1cb86:	d804      	bhi.n	1cb92 <_setlocale_r+0xe>
   1cb88:	b410      	push	{r4}
   1cb8a:	b132      	cbz	r2, 1cb9a <_setlocale_r+0x16>
   1cb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cb90:	e6ec      	b.n	1c96c <__get_locale_env+0x50>
   1cb92:	2316      	movs	r3, #22
   1cb94:	6003      	str	r3, [r0, #0]
   1cb96:	2000      	movs	r0, #0
   1cb98:	4770      	bx	lr
   1cb9a:	b129      	cbz	r1, 1cba8 <_setlocale_r+0x24>
   1cb9c:	4804      	ldr	r0, [pc, #16]	; (1cbb0 <_setlocale_r+0x2c>)
   1cb9e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cba2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   1cba6:	4770      	bx	lr
   1cba8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cbac:	f7ff bb76 	b.w	1c29c <strstr+0x168>
   1cbb0:	20009328 	.word	0x20009328

0001cbb4 <__locale_mb_cur_max>:
   1cbb4:	4b01      	ldr	r3, [pc, #4]	; (1cbbc <__locale_mb_cur_max+0x8>)
   1cbb6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1cbba:	4770      	bx	lr
   1cbbc:	20009328 	.word	0x20009328

0001cbc0 <setlocale>:
   1cbc0:	4b09      	ldr	r3, [pc, #36]	; (1cbe8 <setlocale+0x28>)
   1cbc2:	2806      	cmp	r0, #6
   1cbc4:	681b      	ldr	r3, [r3, #0]
   1cbc6:	460a      	mov	r2, r1
   1cbc8:	d803      	bhi.n	1cbd2 <setlocale+0x12>
   1cbca:	b131      	cbz	r1, 1cbda <setlocale+0x1a>
   1cbcc:	4601      	mov	r1, r0
   1cbce:	4618      	mov	r0, r3
   1cbd0:	e6cc      	b.n	1c96c <__get_locale_env+0x50>
   1cbd2:	2216      	movs	r2, #22
   1cbd4:	601a      	str	r2, [r3, #0]
   1cbd6:	2000      	movs	r0, #0
   1cbd8:	4770      	bx	lr
   1cbda:	b118      	cbz	r0, 1cbe4 <setlocale+0x24>
   1cbdc:	4b03      	ldr	r3, [pc, #12]	; (1cbec <setlocale+0x2c>)
   1cbde:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1cbe2:	4770      	bx	lr
   1cbe4:	f7ff bb5a 	b.w	1c29c <strstr+0x168>
   1cbe8:	20008de0 	.word	0x20008de0
   1cbec:	20009328 	.word	0x20009328

0001cbf0 <_close_r>:
   1cbf0:	b538      	push	{r3, r4, r5, lr}
   1cbf2:	4d07      	ldr	r5, [pc, #28]	; (1cc10 <_close_r+0x20>)
   1cbf4:	2200      	movs	r2, #0
   1cbf6:	4604      	mov	r4, r0
   1cbf8:	4608      	mov	r0, r1
   1cbfa:	602a      	str	r2, [r5, #0]
   1cbfc:	f7fa f8e6 	bl	16dcc <_close>
   1cc00:	1c43      	adds	r3, r0, #1
   1cc02:	d000      	beq.n	1cc06 <_close_r+0x16>
   1cc04:	bd38      	pop	{r3, r4, r5, pc}
   1cc06:	682b      	ldr	r3, [r5, #0]
   1cc08:	2b00      	cmp	r3, #0
   1cc0a:	d0fb      	beq.n	1cc04 <_close_r+0x14>
   1cc0c:	6023      	str	r3, [r4, #0]
   1cc0e:	bd38      	pop	{r3, r4, r5, pc}
   1cc10:	2000d520 	.word	0x2000d520

0001cc14 <_lseek_r>:
   1cc14:	b538      	push	{r3, r4, r5, lr}
   1cc16:	460c      	mov	r4, r1
   1cc18:	4d08      	ldr	r5, [pc, #32]	; (1cc3c <_lseek_r+0x28>)
   1cc1a:	4684      	mov	ip, r0
   1cc1c:	4611      	mov	r1, r2
   1cc1e:	4620      	mov	r0, r4
   1cc20:	461a      	mov	r2, r3
   1cc22:	2300      	movs	r3, #0
   1cc24:	602b      	str	r3, [r5, #0]
   1cc26:	4664      	mov	r4, ip
   1cc28:	f7fa f8dc 	bl	16de4 <_lseek>
   1cc2c:	1c43      	adds	r3, r0, #1
   1cc2e:	d000      	beq.n	1cc32 <_lseek_r+0x1e>
   1cc30:	bd38      	pop	{r3, r4, r5, pc}
   1cc32:	682b      	ldr	r3, [r5, #0]
   1cc34:	2b00      	cmp	r3, #0
   1cc36:	d0fb      	beq.n	1cc30 <_lseek_r+0x1c>
   1cc38:	6023      	str	r3, [r4, #0]
   1cc3a:	bd38      	pop	{r3, r4, r5, pc}
   1cc3c:	2000d520 	.word	0x2000d520

0001cc40 <_read_r>:
   1cc40:	b538      	push	{r3, r4, r5, lr}
   1cc42:	460c      	mov	r4, r1
   1cc44:	4d08      	ldr	r5, [pc, #32]	; (1cc68 <_read_r+0x28>)
   1cc46:	4684      	mov	ip, r0
   1cc48:	4611      	mov	r1, r2
   1cc4a:	4620      	mov	r0, r4
   1cc4c:	461a      	mov	r2, r3
   1cc4e:	2300      	movs	r3, #0
   1cc50:	602b      	str	r3, [r5, #0]
   1cc52:	4664      	mov	r4, ip
   1cc54:	f7fa f8b8 	bl	16dc8 <_read>
   1cc58:	1c43      	adds	r3, r0, #1
   1cc5a:	d000      	beq.n	1cc5e <_read_r+0x1e>
   1cc5c:	bd38      	pop	{r3, r4, r5, pc}
   1cc5e:	682b      	ldr	r3, [r5, #0]
   1cc60:	2b00      	cmp	r3, #0
   1cc62:	d0fb      	beq.n	1cc5c <_read_r+0x1c>
   1cc64:	6023      	str	r3, [r4, #0]
   1cc66:	bd38      	pop	{r3, r4, r5, pc}
   1cc68:	2000d520 	.word	0x2000d520

0001cc6c <_sbrk_r>:
   1cc6c:	b538      	push	{r3, r4, r5, lr}
   1cc6e:	4d07      	ldr	r5, [pc, #28]	; (1cc8c <_sbrk_r+0x20>)
   1cc70:	2200      	movs	r2, #0
   1cc72:	4604      	mov	r4, r0
   1cc74:	4608      	mov	r0, r1
   1cc76:	602a      	str	r2, [r5, #0]
   1cc78:	f7fa f88c 	bl	16d94 <_sbrk>
   1cc7c:	1c43      	adds	r3, r0, #1
   1cc7e:	d000      	beq.n	1cc82 <_sbrk_r+0x16>
   1cc80:	bd38      	pop	{r3, r4, r5, pc}
   1cc82:	682b      	ldr	r3, [r5, #0]
   1cc84:	2b00      	cmp	r3, #0
   1cc86:	d0fb      	beq.n	1cc80 <_sbrk_r+0x14>
   1cc88:	6023      	str	r3, [r4, #0]
   1cc8a:	bd38      	pop	{r3, r4, r5, pc}
   1cc8c:	2000d520 	.word	0x2000d520

0001cc90 <_write_r>:
   1cc90:	b538      	push	{r3, r4, r5, lr}
   1cc92:	460c      	mov	r4, r1
   1cc94:	4d08      	ldr	r5, [pc, #32]	; (1ccb8 <_write_r+0x28>)
   1cc96:	4684      	mov	ip, r0
   1cc98:	4611      	mov	r1, r2
   1cc9a:	4620      	mov	r0, r4
   1cc9c:	461a      	mov	r2, r3
   1cc9e:	2300      	movs	r3, #0
   1cca0:	602b      	str	r3, [r5, #0]
   1cca2:	4664      	mov	r4, ip
   1cca4:	f7f8 ff08 	bl	15ab8 <_write>
   1cca8:	1c43      	adds	r3, r0, #1
   1ccaa:	d000      	beq.n	1ccae <_write_r+0x1e>
   1ccac:	bd38      	pop	{r3, r4, r5, pc}
   1ccae:	682b      	ldr	r3, [r5, #0]
   1ccb0:	2b00      	cmp	r3, #0
   1ccb2:	d0fb      	beq.n	1ccac <_write_r+0x1c>
   1ccb4:	6023      	str	r3, [r4, #0]
   1ccb6:	bd38      	pop	{r3, r4, r5, pc}
   1ccb8:	2000d520 	.word	0x2000d520

0001ccbc <__errno>:
   1ccbc:	4b01      	ldr	r3, [pc, #4]	; (1ccc4 <__errno+0x8>)
   1ccbe:	6818      	ldr	r0, [r3, #0]
   1ccc0:	4770      	bx	lr
   1ccc2:	bf00      	nop
   1ccc4:	20008de0 	.word	0x20008de0

0001ccc8 <__libc_init_array>:
   1ccc8:	b570      	push	{r4, r5, r6, lr}
   1ccca:	4e0d      	ldr	r6, [pc, #52]	; (1cd00 <__libc_init_array+0x38>)
   1cccc:	4d0d      	ldr	r5, [pc, #52]	; (1cd04 <__libc_init_array+0x3c>)
   1ccce:	1b76      	subs	r6, r6, r5
   1ccd0:	10b6      	asrs	r6, r6, #2
   1ccd2:	d006      	beq.n	1cce2 <__libc_init_array+0x1a>
   1ccd4:	2400      	movs	r4, #0
   1ccd6:	f855 3b04 	ldr.w	r3, [r5], #4
   1ccda:	3401      	adds	r4, #1
   1ccdc:	4798      	blx	r3
   1ccde:	42a6      	cmp	r6, r4
   1cce0:	d1f9      	bne.n	1ccd6 <__libc_init_array+0xe>
   1cce2:	4e09      	ldr	r6, [pc, #36]	; (1cd08 <__libc_init_array+0x40>)
   1cce4:	4d09      	ldr	r5, [pc, #36]	; (1cd0c <__libc_init_array+0x44>)
   1cce6:	1b76      	subs	r6, r6, r5
   1cce8:	f007 fd2e 	bl	24748 <___init_veneer>
   1ccec:	10b6      	asrs	r6, r6, #2
   1ccee:	d006      	beq.n	1ccfe <__libc_init_array+0x36>
   1ccf0:	2400      	movs	r4, #0
   1ccf2:	f855 3b04 	ldr.w	r3, [r5], #4
   1ccf6:	3401      	adds	r4, #1
   1ccf8:	4798      	blx	r3
   1ccfa:	42a6      	cmp	r6, r4
   1ccfc:	d1f9      	bne.n	1ccf2 <__libc_init_array+0x2a>
   1ccfe:	bd70      	pop	{r4, r5, r6, pc}
   1cd00:	60002000 	.word	0x60002000
   1cd04:	60002000 	.word	0x60002000
   1cd08:	60002060 	.word	0x60002060
   1cd0c:	60002000 	.word	0x60002000

0001cd10 <__retarget_lock_init>:
   1cd10:	4770      	bx	lr
   1cd12:	bf00      	nop

0001cd14 <__retarget_lock_init_recursive>:
   1cd14:	4770      	bx	lr
   1cd16:	bf00      	nop

0001cd18 <__retarget_lock_close>:
   1cd18:	4770      	bx	lr
   1cd1a:	bf00      	nop

0001cd1c <__retarget_lock_close_recursive>:
   1cd1c:	4770      	bx	lr
   1cd1e:	bf00      	nop

0001cd20 <__retarget_lock_acquire>:
   1cd20:	4770      	bx	lr
   1cd22:	bf00      	nop

0001cd24 <__retarget_lock_acquire_recursive>:
   1cd24:	4770      	bx	lr
   1cd26:	bf00      	nop

0001cd28 <__retarget_lock_try_acquire>:
   1cd28:	2001      	movs	r0, #1
   1cd2a:	4770      	bx	lr

0001cd2c <__retarget_lock_try_acquire_recursive>:
   1cd2c:	2001      	movs	r0, #1
   1cd2e:	4770      	bx	lr

0001cd30 <__retarget_lock_release>:
   1cd30:	4770      	bx	lr
   1cd32:	bf00      	nop

0001cd34 <__retarget_lock_release_recursive>:
   1cd34:	4770      	bx	lr
   1cd36:	bf00      	nop
	...
   1cd40:	eba2 0003 	sub.w	r0, r2, r3
   1cd44:	4770      	bx	lr
   1cd46:	bf00      	nop

0001cd48 <strcmp>:
   1cd48:	7802      	ldrb	r2, [r0, #0]
   1cd4a:	780b      	ldrb	r3, [r1, #0]
   1cd4c:	2a01      	cmp	r2, #1
   1cd4e:	bf28      	it	cs
   1cd50:	429a      	cmpcs	r2, r3
   1cd52:	d1f5      	bne.n	1cd40 <__retarget_lock_release_recursive+0xc>
   1cd54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1cd58:	ea40 0401 	orr.w	r4, r0, r1
   1cd5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1cd60:	f06f 0c00 	mvn.w	ip, #0
   1cd64:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1cd68:	b312      	cbz	r2, 1cdb0 <strcmp+0x68>
   1cd6a:	ea80 0401 	eor.w	r4, r0, r1
   1cd6e:	f014 0f07 	tst.w	r4, #7
   1cd72:	d16a      	bne.n	1ce4a <strcmp+0x102>
   1cd74:	f000 0407 	and.w	r4, r0, #7
   1cd78:	f020 0007 	bic.w	r0, r0, #7
   1cd7c:	f004 0503 	and.w	r5, r4, #3
   1cd80:	f021 0107 	bic.w	r1, r1, #7
   1cd84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1cd88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1cd8c:	f014 0f04 	tst.w	r4, #4
   1cd90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1cd94:	fa0c f405 	lsl.w	r4, ip, r5
   1cd98:	ea62 0204 	orn	r2, r2, r4
   1cd9c:	ea66 0604 	orn	r6, r6, r4
   1cda0:	d00a      	beq.n	1cdb8 <strcmp+0x70>
   1cda2:	ea63 0304 	orn	r3, r3, r4
   1cda6:	4662      	mov	r2, ip
   1cda8:	ea67 0704 	orn	r7, r7, r4
   1cdac:	4666      	mov	r6, ip
   1cdae:	e003      	b.n	1cdb8 <strcmp+0x70>
   1cdb0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1cdb4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1cdb8:	fa82 f54c 	uadd8	r5, r2, ip
   1cdbc:	ea82 0406 	eor.w	r4, r2, r6
   1cdc0:	faa4 f48c 	sel	r4, r4, ip
   1cdc4:	bb6c      	cbnz	r4, 1ce22 <strcmp+0xda>
   1cdc6:	fa83 f54c 	uadd8	r5, r3, ip
   1cdca:	ea83 0507 	eor.w	r5, r3, r7
   1cdce:	faa5 f58c 	sel	r5, r5, ip
   1cdd2:	b995      	cbnz	r5, 1cdfa <strcmp+0xb2>
   1cdd4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1cdd8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1cddc:	fa82 f54c 	uadd8	r5, r2, ip
   1cde0:	ea82 0406 	eor.w	r4, r2, r6
   1cde4:	faa4 f48c 	sel	r4, r4, ip
   1cde8:	fa83 f54c 	uadd8	r5, r3, ip
   1cdec:	ea83 0507 	eor.w	r5, r3, r7
   1cdf0:	faa5 f58c 	sel	r5, r5, ip
   1cdf4:	4325      	orrs	r5, r4
   1cdf6:	d0db      	beq.n	1cdb0 <strcmp+0x68>
   1cdf8:	b99c      	cbnz	r4, 1ce22 <strcmp+0xda>
   1cdfa:	ba2d      	rev	r5, r5
   1cdfc:	fab5 f485 	clz	r4, r5
   1ce00:	f024 0407 	bic.w	r4, r4, #7
   1ce04:	fa27 f104 	lsr.w	r1, r7, r4
   1ce08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ce0c:	fa23 f304 	lsr.w	r3, r3, r4
   1ce10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ce14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ce18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ce1c:	eba0 0001 	sub.w	r0, r0, r1
   1ce20:	4770      	bx	lr
   1ce22:	ba24      	rev	r4, r4
   1ce24:	fab4 f484 	clz	r4, r4
   1ce28:	f024 0407 	bic.w	r4, r4, #7
   1ce2c:	fa26 f104 	lsr.w	r1, r6, r4
   1ce30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ce34:	fa22 f204 	lsr.w	r2, r2, r4
   1ce38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ce3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ce40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ce44:	eba0 0001 	sub.w	r0, r0, r1
   1ce48:	4770      	bx	lr
   1ce4a:	f014 0f03 	tst.w	r4, #3
   1ce4e:	d13c      	bne.n	1ceca <strcmp+0x182>
   1ce50:	f010 0403 	ands.w	r4, r0, #3
   1ce54:	d128      	bne.n	1cea8 <strcmp+0x160>
   1ce56:	f850 2b08 	ldr.w	r2, [r0], #8
   1ce5a:	f851 3b08 	ldr.w	r3, [r1], #8
   1ce5e:	fa82 f54c 	uadd8	r5, r2, ip
   1ce62:	ea82 0503 	eor.w	r5, r2, r3
   1ce66:	faa5 f58c 	sel	r5, r5, ip
   1ce6a:	b95d      	cbnz	r5, 1ce84 <strcmp+0x13c>
   1ce6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1ce70:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ce74:	fa82 f54c 	uadd8	r5, r2, ip
   1ce78:	ea82 0503 	eor.w	r5, r2, r3
   1ce7c:	faa5 f58c 	sel	r5, r5, ip
   1ce80:	2d00      	cmp	r5, #0
   1ce82:	d0e8      	beq.n	1ce56 <strcmp+0x10e>
   1ce84:	ba2d      	rev	r5, r5
   1ce86:	fab5 f485 	clz	r4, r5
   1ce8a:	f024 0407 	bic.w	r4, r4, #7
   1ce8e:	fa23 f104 	lsr.w	r1, r3, r4
   1ce92:	fa22 f204 	lsr.w	r2, r2, r4
   1ce96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ce9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ce9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cea2:	eba0 0001 	sub.w	r0, r0, r1
   1cea6:	4770      	bx	lr
   1cea8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1ceac:	f020 0003 	bic.w	r0, r0, #3
   1ceb0:	f850 2b08 	ldr.w	r2, [r0], #8
   1ceb4:	f021 0103 	bic.w	r1, r1, #3
   1ceb8:	f851 3b08 	ldr.w	r3, [r1], #8
   1cebc:	fa0c f404 	lsl.w	r4, ip, r4
   1cec0:	ea62 0204 	orn	r2, r2, r4
   1cec4:	ea63 0304 	orn	r3, r3, r4
   1cec8:	e7c9      	b.n	1ce5e <strcmp+0x116>
   1ceca:	f010 0403 	ands.w	r4, r0, #3
   1cece:	d01a      	beq.n	1cf06 <strcmp+0x1be>
   1ced0:	eba1 0104 	sub.w	r1, r1, r4
   1ced4:	f020 0003 	bic.w	r0, r0, #3
   1ced8:	07e4      	lsls	r4, r4, #31
   1ceda:	f850 2b04 	ldr.w	r2, [r0], #4
   1cede:	d006      	beq.n	1ceee <strcmp+0x1a6>
   1cee0:	d20f      	bcs.n	1cf02 <strcmp+0x1ba>
   1cee2:	788b      	ldrb	r3, [r1, #2]
   1cee4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1cee8:	1ae4      	subs	r4, r4, r3
   1ceea:	d106      	bne.n	1cefa <strcmp+0x1b2>
   1ceec:	b12b      	cbz	r3, 1cefa <strcmp+0x1b2>
   1ceee:	78cb      	ldrb	r3, [r1, #3]
   1cef0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1cef4:	1ae4      	subs	r4, r4, r3
   1cef6:	d100      	bne.n	1cefa <strcmp+0x1b2>
   1cef8:	b91b      	cbnz	r3, 1cf02 <strcmp+0x1ba>
   1cefa:	4620      	mov	r0, r4
   1cefc:	f85d 4b10 	ldr.w	r4, [sp], #16
   1cf00:	4770      	bx	lr
   1cf02:	f101 0104 	add.w	r1, r1, #4
   1cf06:	f850 2b04 	ldr.w	r2, [r0], #4
   1cf0a:	07cc      	lsls	r4, r1, #31
   1cf0c:	f021 0103 	bic.w	r1, r1, #3
   1cf10:	f851 3b04 	ldr.w	r3, [r1], #4
   1cf14:	d848      	bhi.n	1cfa8 <strcmp+0x260>
   1cf16:	d224      	bcs.n	1cf62 <strcmp+0x21a>
   1cf18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1cf1c:	fa82 f54c 	uadd8	r5, r2, ip
   1cf20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1cf24:	faa5 f58c 	sel	r5, r5, ip
   1cf28:	d10a      	bne.n	1cf40 <strcmp+0x1f8>
   1cf2a:	b965      	cbnz	r5, 1cf46 <strcmp+0x1fe>
   1cf2c:	f851 3b04 	ldr.w	r3, [r1], #4
   1cf30:	ea84 0402 	eor.w	r4, r4, r2
   1cf34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1cf38:	d10e      	bne.n	1cf58 <strcmp+0x210>
   1cf3a:	f850 2b04 	ldr.w	r2, [r0], #4
   1cf3e:	e7eb      	b.n	1cf18 <strcmp+0x1d0>
   1cf40:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1cf44:	e055      	b.n	1cff2 <strcmp+0x2aa>
   1cf46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1cf4a:	d14d      	bne.n	1cfe8 <strcmp+0x2a0>
   1cf4c:	7808      	ldrb	r0, [r1, #0]
   1cf4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cf52:	f1c0 0000 	rsb	r0, r0, #0
   1cf56:	4770      	bx	lr
   1cf58:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1cf5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1cf60:	e047      	b.n	1cff2 <strcmp+0x2aa>
   1cf62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1cf66:	fa82 f54c 	uadd8	r5, r2, ip
   1cf6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1cf6e:	faa5 f58c 	sel	r5, r5, ip
   1cf72:	d10a      	bne.n	1cf8a <strcmp+0x242>
   1cf74:	b965      	cbnz	r5, 1cf90 <strcmp+0x248>
   1cf76:	f851 3b04 	ldr.w	r3, [r1], #4
   1cf7a:	ea84 0402 	eor.w	r4, r4, r2
   1cf7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1cf82:	d10c      	bne.n	1cf9e <strcmp+0x256>
   1cf84:	f850 2b04 	ldr.w	r2, [r0], #4
   1cf88:	e7eb      	b.n	1cf62 <strcmp+0x21a>
   1cf8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1cf8e:	e030      	b.n	1cff2 <strcmp+0x2aa>
   1cf90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1cf94:	d128      	bne.n	1cfe8 <strcmp+0x2a0>
   1cf96:	880b      	ldrh	r3, [r1, #0]
   1cf98:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1cf9c:	e029      	b.n	1cff2 <strcmp+0x2aa>
   1cf9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1cfa2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1cfa6:	e024      	b.n	1cff2 <strcmp+0x2aa>
   1cfa8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1cfac:	fa82 f54c 	uadd8	r5, r2, ip
   1cfb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1cfb4:	faa5 f58c 	sel	r5, r5, ip
   1cfb8:	d10a      	bne.n	1cfd0 <strcmp+0x288>
   1cfba:	b965      	cbnz	r5, 1cfd6 <strcmp+0x28e>
   1cfbc:	f851 3b04 	ldr.w	r3, [r1], #4
   1cfc0:	ea84 0402 	eor.w	r4, r4, r2
   1cfc4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1cfc8:	d109      	bne.n	1cfde <strcmp+0x296>
   1cfca:	f850 2b04 	ldr.w	r2, [r0], #4
   1cfce:	e7eb      	b.n	1cfa8 <strcmp+0x260>
   1cfd0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1cfd4:	e00d      	b.n	1cff2 <strcmp+0x2aa>
   1cfd6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1cfda:	d105      	bne.n	1cfe8 <strcmp+0x2a0>
   1cfdc:	680b      	ldr	r3, [r1, #0]
   1cfde:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1cfe2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1cfe6:	e004      	b.n	1cff2 <strcmp+0x2aa>
   1cfe8:	f04f 0000 	mov.w	r0, #0
   1cfec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cff0:	4770      	bx	lr
   1cff2:	ba12      	rev	r2, r2
   1cff4:	ba1b      	rev	r3, r3
   1cff6:	fa82 f44c 	uadd8	r4, r2, ip
   1cffa:	ea82 0403 	eor.w	r4, r2, r3
   1cffe:	faa4 f58c 	sel	r5, r4, ip
   1d002:	fab5 f485 	clz	r4, r5
   1d006:	fa02 f204 	lsl.w	r2, r2, r4
   1d00a:	fa03 f304 	lsl.w	r3, r3, r4
   1d00e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1d012:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d016:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1d01a:	4770      	bx	lr

0001d01c <strcpy>:
   1d01c:	ea80 0201 	eor.w	r2, r0, r1
   1d020:	4684      	mov	ip, r0
   1d022:	f012 0f03 	tst.w	r2, #3
   1d026:	d14f      	bne.n	1d0c8 <strcpy+0xac>
   1d028:	f011 0f03 	tst.w	r1, #3
   1d02c:	d132      	bne.n	1d094 <strcpy+0x78>
   1d02e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1d032:	f011 0f04 	tst.w	r1, #4
   1d036:	f851 3b04 	ldr.w	r3, [r1], #4
   1d03a:	d00b      	beq.n	1d054 <strcpy+0x38>
   1d03c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1d040:	439a      	bics	r2, r3
   1d042:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d046:	bf04      	itt	eq
   1d048:	f84c 3b04 	streq.w	r3, [ip], #4
   1d04c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1d050:	d116      	bne.n	1d080 <strcpy+0x64>
   1d052:	bf00      	nop
   1d054:	f851 4b04 	ldr.w	r4, [r1], #4
   1d058:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1d05c:	439a      	bics	r2, r3
   1d05e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d062:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1d066:	d10b      	bne.n	1d080 <strcpy+0x64>
   1d068:	f84c 3b04 	str.w	r3, [ip], #4
   1d06c:	43a2      	bics	r2, r4
   1d06e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d072:	bf04      	itt	eq
   1d074:	f851 3b04 	ldreq.w	r3, [r1], #4
   1d078:	f84c 4b04 	streq.w	r4, [ip], #4
   1d07c:	d0ea      	beq.n	1d054 <strcpy+0x38>
   1d07e:	4623      	mov	r3, r4
   1d080:	f80c 3b01 	strb.w	r3, [ip], #1
   1d084:	f013 0fff 	tst.w	r3, #255	; 0xff
   1d088:	ea4f 2333 	mov.w	r3, r3, ror #8
   1d08c:	d1f8      	bne.n	1d080 <strcpy+0x64>
   1d08e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d092:	4770      	bx	lr
   1d094:	f011 0f01 	tst.w	r1, #1
   1d098:	d006      	beq.n	1d0a8 <strcpy+0x8c>
   1d09a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d09e:	f80c 2b01 	strb.w	r2, [ip], #1
   1d0a2:	2a00      	cmp	r2, #0
   1d0a4:	bf08      	it	eq
   1d0a6:	4770      	bxeq	lr
   1d0a8:	f011 0f02 	tst.w	r1, #2
   1d0ac:	d0bf      	beq.n	1d02e <strcpy+0x12>
   1d0ae:	f831 2b02 	ldrh.w	r2, [r1], #2
   1d0b2:	f012 0fff 	tst.w	r2, #255	; 0xff
   1d0b6:	bf16      	itet	ne
   1d0b8:	f82c 2b02 	strhne.w	r2, [ip], #2
   1d0bc:	f88c 2000 	strbeq.w	r2, [ip]
   1d0c0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1d0c4:	d1b3      	bne.n	1d02e <strcpy+0x12>
   1d0c6:	4770      	bx	lr
   1d0c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d0cc:	f80c 2b01 	strb.w	r2, [ip], #1
   1d0d0:	2a00      	cmp	r2, #0
   1d0d2:	d1f9      	bne.n	1d0c8 <strcpy+0xac>
   1d0d4:	4770      	bx	lr
   1d0d6:	bf00      	nop
	...

0001d0e0 <memchr>:
   1d0e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d0e4:	2a10      	cmp	r2, #16
   1d0e6:	db2b      	blt.n	1d140 <memchr+0x60>
   1d0e8:	f010 0f07 	tst.w	r0, #7
   1d0ec:	d008      	beq.n	1d100 <memchr+0x20>
   1d0ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d0f2:	3a01      	subs	r2, #1
   1d0f4:	428b      	cmp	r3, r1
   1d0f6:	d02d      	beq.n	1d154 <memchr+0x74>
   1d0f8:	f010 0f07 	tst.w	r0, #7
   1d0fc:	b342      	cbz	r2, 1d150 <memchr+0x70>
   1d0fe:	d1f6      	bne.n	1d0ee <memchr+0xe>
   1d100:	b4f0      	push	{r4, r5, r6, r7}
   1d102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1d106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1d10a:	f022 0407 	bic.w	r4, r2, #7
   1d10e:	f07f 0700 	mvns.w	r7, #0
   1d112:	2300      	movs	r3, #0
   1d114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1d118:	3c08      	subs	r4, #8
   1d11a:	ea85 0501 	eor.w	r5, r5, r1
   1d11e:	ea86 0601 	eor.w	r6, r6, r1
   1d122:	fa85 f547 	uadd8	r5, r5, r7
   1d126:	faa3 f587 	sel	r5, r3, r7
   1d12a:	fa86 f647 	uadd8	r6, r6, r7
   1d12e:	faa5 f687 	sel	r6, r5, r7
   1d132:	b98e      	cbnz	r6, 1d158 <memchr+0x78>
   1d134:	d1ee      	bne.n	1d114 <memchr+0x34>
   1d136:	bcf0      	pop	{r4, r5, r6, r7}
   1d138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d13c:	f002 0207 	and.w	r2, r2, #7
   1d140:	b132      	cbz	r2, 1d150 <memchr+0x70>
   1d142:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d146:	3a01      	subs	r2, #1
   1d148:	ea83 0301 	eor.w	r3, r3, r1
   1d14c:	b113      	cbz	r3, 1d154 <memchr+0x74>
   1d14e:	d1f8      	bne.n	1d142 <memchr+0x62>
   1d150:	2000      	movs	r0, #0
   1d152:	4770      	bx	lr
   1d154:	3801      	subs	r0, #1
   1d156:	4770      	bx	lr
   1d158:	2d00      	cmp	r5, #0
   1d15a:	bf06      	itte	eq
   1d15c:	4635      	moveq	r5, r6
   1d15e:	3803      	subeq	r0, #3
   1d160:	3807      	subne	r0, #7
   1d162:	f015 0f01 	tst.w	r5, #1
   1d166:	d107      	bne.n	1d178 <memchr+0x98>
   1d168:	3001      	adds	r0, #1
   1d16a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1d16e:	bf02      	ittt	eq
   1d170:	3001      	addeq	r0, #1
   1d172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1d176:	3001      	addeq	r0, #1
   1d178:	bcf0      	pop	{r4, r5, r6, r7}
   1d17a:	3801      	subs	r0, #1
   1d17c:	4770      	bx	lr
   1d17e:	bf00      	nop

0001d180 <strlen>:
   1d180:	f890 f000 	pld	[r0]
   1d184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1d188:	f020 0107 	bic.w	r1, r0, #7
   1d18c:	f06f 0c00 	mvn.w	ip, #0
   1d190:	f010 0407 	ands.w	r4, r0, #7
   1d194:	f891 f020 	pld	[r1, #32]
   1d198:	f040 8049 	bne.w	1d22e <strlen+0xae>
   1d19c:	f04f 0400 	mov.w	r4, #0
   1d1a0:	f06f 0007 	mvn.w	r0, #7
   1d1a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d1a8:	f891 f040 	pld	[r1, #64]	; 0x40
   1d1ac:	f100 0008 	add.w	r0, r0, #8
   1d1b0:	fa82 f24c 	uadd8	r2, r2, ip
   1d1b4:	faa4 f28c 	sel	r2, r4, ip
   1d1b8:	fa83 f34c 	uadd8	r3, r3, ip
   1d1bc:	faa2 f38c 	sel	r3, r2, ip
   1d1c0:	bb4b      	cbnz	r3, 1d216 <strlen+0x96>
   1d1c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1d1c6:	fa82 f24c 	uadd8	r2, r2, ip
   1d1ca:	f100 0008 	add.w	r0, r0, #8
   1d1ce:	faa4 f28c 	sel	r2, r4, ip
   1d1d2:	fa83 f34c 	uadd8	r3, r3, ip
   1d1d6:	faa2 f38c 	sel	r3, r2, ip
   1d1da:	b9e3      	cbnz	r3, 1d216 <strlen+0x96>
   1d1dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1d1e0:	fa82 f24c 	uadd8	r2, r2, ip
   1d1e4:	f100 0008 	add.w	r0, r0, #8
   1d1e8:	faa4 f28c 	sel	r2, r4, ip
   1d1ec:	fa83 f34c 	uadd8	r3, r3, ip
   1d1f0:	faa2 f38c 	sel	r3, r2, ip
   1d1f4:	b97b      	cbnz	r3, 1d216 <strlen+0x96>
   1d1f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1d1fa:	f101 0120 	add.w	r1, r1, #32
   1d1fe:	fa82 f24c 	uadd8	r2, r2, ip
   1d202:	f100 0008 	add.w	r0, r0, #8
   1d206:	faa4 f28c 	sel	r2, r4, ip
   1d20a:	fa83 f34c 	uadd8	r3, r3, ip
   1d20e:	faa2 f38c 	sel	r3, r2, ip
   1d212:	2b00      	cmp	r3, #0
   1d214:	d0c6      	beq.n	1d1a4 <strlen+0x24>
   1d216:	2a00      	cmp	r2, #0
   1d218:	bf04      	itt	eq
   1d21a:	3004      	addeq	r0, #4
   1d21c:	461a      	moveq	r2, r3
   1d21e:	ba12      	rev	r2, r2
   1d220:	fab2 f282 	clz	r2, r2
   1d224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1d228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1d22c:	4770      	bx	lr
   1d22e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d232:	f004 0503 	and.w	r5, r4, #3
   1d236:	f1c4 0000 	rsb	r0, r4, #0
   1d23a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1d23e:	f014 0f04 	tst.w	r4, #4
   1d242:	f891 f040 	pld	[r1, #64]	; 0x40
   1d246:	fa0c f505 	lsl.w	r5, ip, r5
   1d24a:	ea62 0205 	orn	r2, r2, r5
   1d24e:	bf1c      	itt	ne
   1d250:	ea63 0305 	ornne	r3, r3, r5
   1d254:	4662      	movne	r2, ip
   1d256:	f04f 0400 	mov.w	r4, #0
   1d25a:	e7a9      	b.n	1d1b0 <strlen+0x30>
   1d25c:	0000      	movs	r0, r0
	...

0001d260 <nan>:
   1d260:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1d268 <nan+0x8>
   1d264:	4770      	bx	lr
   1d266:	bf00      	nop
   1d268:	00000000 	.word	0x00000000
   1d26c:	7ff80000 	.word	0x7ff80000

0001d270 <nanf>:
   1d270:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1d278 <nanf+0x8>
   1d274:	4770      	bx	lr
   1d276:	bf00      	nop
   1d278:	7fc00000 	.word	0x7fc00000

0001d27c <__register_exitproc>:
   1d27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d280:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1d300 <__register_exitproc+0x84>
   1d284:	4606      	mov	r6, r0
   1d286:	f8da 0000 	ldr.w	r0, [sl]
   1d28a:	4698      	mov	r8, r3
   1d28c:	460f      	mov	r7, r1
   1d28e:	4691      	mov	r9, r2
   1d290:	f7ff fd48 	bl	1cd24 <__retarget_lock_acquire_recursive>
   1d294:	4b18      	ldr	r3, [pc, #96]	; (1d2f8 <__register_exitproc+0x7c>)
   1d296:	681c      	ldr	r4, [r3, #0]
   1d298:	b324      	cbz	r4, 1d2e4 <__register_exitproc+0x68>
   1d29a:	6865      	ldr	r5, [r4, #4]
   1d29c:	2d1f      	cmp	r5, #31
   1d29e:	dc24      	bgt.n	1d2ea <__register_exitproc+0x6e>
   1d2a0:	b95e      	cbnz	r6, 1d2ba <__register_exitproc+0x3e>
   1d2a2:	1c6b      	adds	r3, r5, #1
   1d2a4:	3502      	adds	r5, #2
   1d2a6:	f8da 0000 	ldr.w	r0, [sl]
   1d2aa:	6063      	str	r3, [r4, #4]
   1d2ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   1d2b0:	f7ff fd40 	bl	1cd34 <__retarget_lock_release_recursive>
   1d2b4:	2000      	movs	r0, #0
   1d2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d2ba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1d2be:	2301      	movs	r3, #1
   1d2c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1d2c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   1d2c8:	40ab      	lsls	r3, r5
   1d2ca:	431a      	orrs	r2, r3
   1d2cc:	2e02      	cmp	r6, #2
   1d2ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   1d2d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1d2d6:	d1e4      	bne.n	1d2a2 <__register_exitproc+0x26>
   1d2d8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1d2dc:	431a      	orrs	r2, r3
   1d2de:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   1d2e2:	e7de      	b.n	1d2a2 <__register_exitproc+0x26>
   1d2e4:	4c05      	ldr	r4, [pc, #20]	; (1d2fc <__register_exitproc+0x80>)
   1d2e6:	601c      	str	r4, [r3, #0]
   1d2e8:	e7d7      	b.n	1d29a <__register_exitproc+0x1e>
   1d2ea:	f8da 0000 	ldr.w	r0, [sl]
   1d2ee:	f7ff fd21 	bl	1cd34 <__retarget_lock_release_recursive>
   1d2f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d2f6:	e7de      	b.n	1d2b6 <__register_exitproc+0x3a>
   1d2f8:	2000d6d4 	.word	0x2000d6d4
   1d2fc:	2000d544 	.word	0x2000d544
   1d300:	200094b4 	.word	0x200094b4

0001d304 <_malloc_trim_r>:
   1d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d306:	4f24      	ldr	r7, [pc, #144]	; (1d398 <_malloc_trim_r+0x94>)
   1d308:	460c      	mov	r4, r1
   1d30a:	4606      	mov	r6, r0
   1d30c:	f7fc fd38 	bl	19d80 <__malloc_lock>
   1d310:	68bb      	ldr	r3, [r7, #8]
   1d312:	685d      	ldr	r5, [r3, #4]
   1d314:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1d318:	310f      	adds	r1, #15
   1d31a:	f025 0503 	bic.w	r5, r5, #3
   1d31e:	194b      	adds	r3, r1, r5
   1d320:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1d324:	f023 030f 	bic.w	r3, r3, #15
   1d328:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1d32c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1d330:	db07      	blt.n	1d342 <_malloc_trim_r+0x3e>
   1d332:	2100      	movs	r1, #0
   1d334:	4630      	mov	r0, r6
   1d336:	f7ff fc99 	bl	1cc6c <_sbrk_r>
   1d33a:	68bb      	ldr	r3, [r7, #8]
   1d33c:	442b      	add	r3, r5
   1d33e:	4298      	cmp	r0, r3
   1d340:	d004      	beq.n	1d34c <_malloc_trim_r+0x48>
   1d342:	4630      	mov	r0, r6
   1d344:	f7fc fd22 	bl	19d8c <__malloc_unlock>
   1d348:	2000      	movs	r0, #0
   1d34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d34c:	4261      	negs	r1, r4
   1d34e:	4630      	mov	r0, r6
   1d350:	f7ff fc8c 	bl	1cc6c <_sbrk_r>
   1d354:	3001      	adds	r0, #1
   1d356:	d00d      	beq.n	1d374 <_malloc_trim_r+0x70>
   1d358:	4a10      	ldr	r2, [pc, #64]	; (1d39c <_malloc_trim_r+0x98>)
   1d35a:	68bb      	ldr	r3, [r7, #8]
   1d35c:	1b2d      	subs	r5, r5, r4
   1d35e:	f045 0501 	orr.w	r5, r5, #1
   1d362:	605d      	str	r5, [r3, #4]
   1d364:	6813      	ldr	r3, [r2, #0]
   1d366:	4630      	mov	r0, r6
   1d368:	1b1b      	subs	r3, r3, r4
   1d36a:	6013      	str	r3, [r2, #0]
   1d36c:	f7fc fd0e 	bl	19d8c <__malloc_unlock>
   1d370:	2001      	movs	r0, #1
   1d372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d374:	2100      	movs	r1, #0
   1d376:	4630      	mov	r0, r6
   1d378:	f7ff fc78 	bl	1cc6c <_sbrk_r>
   1d37c:	68ba      	ldr	r2, [r7, #8]
   1d37e:	1a83      	subs	r3, r0, r2
   1d380:	2b0f      	cmp	r3, #15
   1d382:	ddde      	ble.n	1d342 <_malloc_trim_r+0x3e>
   1d384:	f043 0301 	orr.w	r3, r3, #1
   1d388:	6053      	str	r3, [r2, #4]
   1d38a:	4b05      	ldr	r3, [pc, #20]	; (1d3a0 <_malloc_trim_r+0x9c>)
   1d38c:	4903      	ldr	r1, [pc, #12]	; (1d39c <_malloc_trim_r+0x98>)
   1d38e:	681b      	ldr	r3, [r3, #0]
   1d390:	1ac0      	subs	r0, r0, r3
   1d392:	6008      	str	r0, [r1, #0]
   1d394:	e7d5      	b.n	1d342 <_malloc_trim_r+0x3e>
   1d396:	bf00      	nop
   1d398:	20008f0c 	.word	0x20008f0c
   1d39c:	2000d108 	.word	0x2000d108
   1d3a0:	20009314 	.word	0x20009314

0001d3a4 <_free_r>:
   1d3a4:	2900      	cmp	r1, #0
   1d3a6:	d061      	beq.n	1d46c <_free_r+0xc8>
   1d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3aa:	460c      	mov	r4, r1
   1d3ac:	4606      	mov	r6, r0
   1d3ae:	f7fc fce7 	bl	19d80 <__malloc_lock>
   1d3b2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   1d3b6:	4f7b      	ldr	r7, [pc, #492]	; (1d5a4 <_free_r+0x200>)
   1d3b8:	f1a4 0508 	sub.w	r5, r4, #8
   1d3bc:	f022 0101 	bic.w	r1, r2, #1
   1d3c0:	eb05 0c01 	add.w	ip, r5, r1
   1d3c4:	68b8      	ldr	r0, [r7, #8]
   1d3c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1d3ca:	4560      	cmp	r0, ip
   1d3cc:	f023 0303 	bic.w	r3, r3, #3
   1d3d0:	f000 808b 	beq.w	1d4ea <_free_r+0x146>
   1d3d4:	07d2      	lsls	r2, r2, #31
   1d3d6:	f8cc 3004 	str.w	r3, [ip, #4]
   1d3da:	d432      	bmi.n	1d442 <_free_r+0x9e>
   1d3dc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   1d3e0:	1aad      	subs	r5, r5, r2
   1d3e2:	4411      	add	r1, r2
   1d3e4:	68aa      	ldr	r2, [r5, #8]
   1d3e6:	f107 0008 	add.w	r0, r7, #8
   1d3ea:	4282      	cmp	r2, r0
   1d3ec:	d06a      	beq.n	1d4c4 <_free_r+0x120>
   1d3ee:	eb0c 0403 	add.w	r4, ip, r3
   1d3f2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   1d3f6:	68ec      	ldr	r4, [r5, #12]
   1d3f8:	60d4      	str	r4, [r2, #12]
   1d3fa:	f01e 0f01 	tst.w	lr, #1
   1d3fe:	60a2      	str	r2, [r4, #8]
   1d400:	f000 8097 	beq.w	1d532 <_free_r+0x18e>
   1d404:	f041 0301 	orr.w	r3, r1, #1
   1d408:	606b      	str	r3, [r5, #4]
   1d40a:	f8cc 1000 	str.w	r1, [ip]
   1d40e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d412:	d235      	bcs.n	1d480 <_free_r+0xdc>
   1d414:	6878      	ldr	r0, [r7, #4]
   1d416:	08cb      	lsrs	r3, r1, #3
   1d418:	2201      	movs	r2, #1
   1d41a:	0949      	lsrs	r1, r1, #5
   1d41c:	3301      	adds	r3, #1
   1d41e:	408a      	lsls	r2, r1
   1d420:	4302      	orrs	r2, r0
   1d422:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   1d426:	607a      	str	r2, [r7, #4]
   1d428:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1d42c:	3a08      	subs	r2, #8
   1d42e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   1d432:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   1d436:	60cd      	str	r5, [r1, #12]
   1d438:	4630      	mov	r0, r6
   1d43a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d43e:	f7fc bca5 	b.w	19d8c <__malloc_unlock>
   1d442:	eb0c 0203 	add.w	r2, ip, r3
   1d446:	6852      	ldr	r2, [r2, #4]
   1d448:	07d0      	lsls	r0, r2, #31
   1d44a:	d410      	bmi.n	1d46e <_free_r+0xca>
   1d44c:	4419      	add	r1, r3
   1d44e:	f107 0008 	add.w	r0, r7, #8
   1d452:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1d456:	4283      	cmp	r3, r0
   1d458:	d073      	beq.n	1d542 <_free_r+0x19e>
   1d45a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1d45e:	60da      	str	r2, [r3, #12]
   1d460:	6093      	str	r3, [r2, #8]
   1d462:	f041 0301 	orr.w	r3, r1, #1
   1d466:	606b      	str	r3, [r5, #4]
   1d468:	5069      	str	r1, [r5, r1]
   1d46a:	e7d0      	b.n	1d40e <_free_r+0x6a>
   1d46c:	4770      	bx	lr
   1d46e:	f041 0301 	orr.w	r3, r1, #1
   1d472:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d476:	f844 3c04 	str.w	r3, [r4, #-4]
   1d47a:	f8cc 1000 	str.w	r1, [ip]
   1d47e:	d3c9      	bcc.n	1d414 <_free_r+0x70>
   1d480:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   1d484:	ea4f 2351 	mov.w	r3, r1, lsr #9
   1d488:	d248      	bcs.n	1d51c <_free_r+0x178>
   1d48a:	098b      	lsrs	r3, r1, #6
   1d48c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1d490:	f103 0238 	add.w	r2, r3, #56	; 0x38
   1d494:	00c3      	lsls	r3, r0, #3
   1d496:	18f8      	adds	r0, r7, r3
   1d498:	58fb      	ldr	r3, [r7, r3]
   1d49a:	3808      	subs	r0, #8
   1d49c:	4298      	cmp	r0, r3
   1d49e:	d059      	beq.n	1d554 <_free_r+0x1b0>
   1d4a0:	685a      	ldr	r2, [r3, #4]
   1d4a2:	f022 0203 	bic.w	r2, r2, #3
   1d4a6:	428a      	cmp	r2, r1
   1d4a8:	d902      	bls.n	1d4b0 <_free_r+0x10c>
   1d4aa:	689b      	ldr	r3, [r3, #8]
   1d4ac:	4298      	cmp	r0, r3
   1d4ae:	d1f7      	bne.n	1d4a0 <_free_r+0xfc>
   1d4b0:	68d8      	ldr	r0, [r3, #12]
   1d4b2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   1d4b6:	6085      	str	r5, [r0, #8]
   1d4b8:	60dd      	str	r5, [r3, #12]
   1d4ba:	4630      	mov	r0, r6
   1d4bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d4c0:	f7fc bc64 	b.w	19d8c <__malloc_unlock>
   1d4c4:	eb0c 0203 	add.w	r2, ip, r3
   1d4c8:	6852      	ldr	r2, [r2, #4]
   1d4ca:	07d2      	lsls	r2, r2, #31
   1d4cc:	d463      	bmi.n	1d596 <_free_r+0x1f2>
   1d4ce:	440b      	add	r3, r1
   1d4d0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   1d4d4:	60ca      	str	r2, [r1, #12]
   1d4d6:	6091      	str	r1, [r2, #8]
   1d4d8:	f043 0201 	orr.w	r2, r3, #1
   1d4dc:	606a      	str	r2, [r5, #4]
   1d4de:	4630      	mov	r0, r6
   1d4e0:	50eb      	str	r3, [r5, r3]
   1d4e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d4e6:	f7fc bc51 	b.w	19d8c <__malloc_unlock>
   1d4ea:	440b      	add	r3, r1
   1d4ec:	07d1      	lsls	r1, r2, #31
   1d4ee:	d407      	bmi.n	1d500 <_free_r+0x15c>
   1d4f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   1d4f4:	1aad      	subs	r5, r5, r2
   1d4f6:	4413      	add	r3, r2
   1d4f8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   1d4fc:	60ca      	str	r2, [r1, #12]
   1d4fe:	6091      	str	r1, [r2, #8]
   1d500:	f043 0201 	orr.w	r2, r3, #1
   1d504:	606a      	str	r2, [r5, #4]
   1d506:	4a28      	ldr	r2, [pc, #160]	; (1d5a8 <_free_r+0x204>)
   1d508:	60bd      	str	r5, [r7, #8]
   1d50a:	6812      	ldr	r2, [r2, #0]
   1d50c:	429a      	cmp	r2, r3
   1d50e:	d893      	bhi.n	1d438 <_free_r+0x94>
   1d510:	4b26      	ldr	r3, [pc, #152]	; (1d5ac <_free_r+0x208>)
   1d512:	4630      	mov	r0, r6
   1d514:	6819      	ldr	r1, [r3, #0]
   1d516:	f7ff fef5 	bl	1d304 <_malloc_trim_r>
   1d51a:	e78d      	b.n	1d438 <_free_r+0x94>
   1d51c:	2b14      	cmp	r3, #20
   1d51e:	d90a      	bls.n	1d536 <_free_r+0x192>
   1d520:	2b54      	cmp	r3, #84	; 0x54
   1d522:	d81f      	bhi.n	1d564 <_free_r+0x1c0>
   1d524:	0b0b      	lsrs	r3, r1, #12
   1d526:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1d52a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1d52e:	00c3      	lsls	r3, r0, #3
   1d530:	e7b1      	b.n	1d496 <_free_r+0xf2>
   1d532:	4419      	add	r1, r3
   1d534:	e78d      	b.n	1d452 <_free_r+0xae>
   1d536:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1d53a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   1d53e:	00c3      	lsls	r3, r0, #3
   1d540:	e7a9      	b.n	1d496 <_free_r+0xf2>
   1d542:	f041 0301 	orr.w	r3, r1, #1
   1d546:	e9c7 5504 	strd	r5, r5, [r7, #16]
   1d54a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   1d54e:	606b      	str	r3, [r5, #4]
   1d550:	5069      	str	r1, [r5, r1]
   1d552:	e771      	b.n	1d438 <_free_r+0x94>
   1d554:	6879      	ldr	r1, [r7, #4]
   1d556:	1092      	asrs	r2, r2, #2
   1d558:	2401      	movs	r4, #1
   1d55a:	fa04 f202 	lsl.w	r2, r4, r2
   1d55e:	430a      	orrs	r2, r1
   1d560:	607a      	str	r2, [r7, #4]
   1d562:	e7a6      	b.n	1d4b2 <_free_r+0x10e>
   1d564:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1d568:	d806      	bhi.n	1d578 <_free_r+0x1d4>
   1d56a:	0bcb      	lsrs	r3, r1, #15
   1d56c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1d570:	f103 0277 	add.w	r2, r3, #119	; 0x77
   1d574:	00c3      	lsls	r3, r0, #3
   1d576:	e78e      	b.n	1d496 <_free_r+0xf2>
   1d578:	f240 5254 	movw	r2, #1364	; 0x554
   1d57c:	4293      	cmp	r3, r2
   1d57e:	d806      	bhi.n	1d58e <_free_r+0x1ea>
   1d580:	0c8b      	lsrs	r3, r1, #18
   1d582:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1d586:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1d58a:	00c3      	lsls	r3, r0, #3
   1d58c:	e783      	b.n	1d496 <_free_r+0xf2>
   1d58e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1d592:	227e      	movs	r2, #126	; 0x7e
   1d594:	e77f      	b.n	1d496 <_free_r+0xf2>
   1d596:	f041 0301 	orr.w	r3, r1, #1
   1d59a:	606b      	str	r3, [r5, #4]
   1d59c:	f8cc 1000 	str.w	r1, [ip]
   1d5a0:	e74a      	b.n	1d438 <_free_r+0x94>
   1d5a2:	bf00      	nop
   1d5a4:	20008f0c 	.word	0x20008f0c
   1d5a8:	20009318 	.word	0x20009318
   1d5ac:	2000d104 	.word	0x2000d104
   1d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5b4:	6904      	ldr	r4, [r0, #16]
   1d5b6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   1d5ba:	dd2f      	ble.n	1d61c <_free_r+0x278>
   1d5bc:	f100 0e14 	add.w	lr, r0, #20
   1d5c0:	114e      	asrs	r6, r1, #5
   1d5c2:	f011 0c1f 	ands.w	ip, r1, #31
   1d5c6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   1d5ca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   1d5ce:	d02b      	beq.n	1d628 <_free_r+0x284>
   1d5d0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   1d5d4:	3304      	adds	r3, #4
   1d5d6:	429d      	cmp	r5, r3
   1d5d8:	fa21 f10c 	lsr.w	r1, r1, ip
   1d5dc:	f1cc 0820 	rsb	r8, ip, #32
   1d5e0:	d918      	bls.n	1d614 <_free_r+0x270>
   1d5e2:	4677      	mov	r7, lr
   1d5e4:	681a      	ldr	r2, [r3, #0]
   1d5e6:	fa02 f208 	lsl.w	r2, r2, r8
   1d5ea:	430a      	orrs	r2, r1
   1d5ec:	f847 2b04 	str.w	r2, [r7], #4
   1d5f0:	f853 1b04 	ldr.w	r1, [r3], #4
   1d5f4:	429d      	cmp	r5, r3
   1d5f6:	fa21 f10c 	lsr.w	r1, r1, ip
   1d5fa:	d8f3      	bhi.n	1d5e4 <_free_r+0x240>
   1d5fc:	1ba3      	subs	r3, r4, r6
   1d5fe:	009b      	lsls	r3, r3, #2
   1d600:	3b05      	subs	r3, #5
   1d602:	089b      	lsrs	r3, r3, #2
   1d604:	3301      	adds	r3, #1
   1d606:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   1d60a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   1d60e:	b1c9      	cbz	r1, 1d644 <_free_r+0x2a0>
   1d610:	3404      	adds	r4, #4
   1d612:	e017      	b.n	1d644 <_free_r+0x2a0>
   1d614:	6141      	str	r1, [r0, #20]
   1d616:	4674      	mov	r4, lr
   1d618:	2900      	cmp	r1, #0
   1d61a:	d1f9      	bne.n	1d610 <_free_r+0x26c>
   1d61c:	2300      	movs	r3, #0
   1d61e:	6103      	str	r3, [r0, #16]
   1d620:	2300      	movs	r3, #0
   1d622:	6143      	str	r3, [r0, #20]
   1d624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d628:	429d      	cmp	r5, r3
   1d62a:	bf88      	it	hi
   1d62c:	f100 0210 	addhi.w	r2, r0, #16
   1d630:	d9f4      	bls.n	1d61c <_free_r+0x278>
   1d632:	f853 1b04 	ldr.w	r1, [r3], #4
   1d636:	f842 1f04 	str.w	r1, [r2, #4]!
   1d63a:	429d      	cmp	r5, r3
   1d63c:	d8f9      	bhi.n	1d632 <_free_r+0x28e>
   1d63e:	1ba4      	subs	r4, r4, r6
   1d640:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   1d644:	eba4 030e 	sub.w	r3, r4, lr
   1d648:	109b      	asrs	r3, r3, #2
   1d64a:	4574      	cmp	r4, lr
   1d64c:	6103      	str	r3, [r0, #16]
   1d64e:	d0e7      	beq.n	1d620 <_free_r+0x27c>
   1d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d654 <__gethex>:
   1d654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d658:	ed2d 8b02 	vpush	{d8}
   1d65c:	680c      	ldr	r4, [r1, #0]
   1d65e:	468b      	mov	fp, r1
   1d660:	78a1      	ldrb	r1, [r4, #2]
   1d662:	b085      	sub	sp, #20
   1d664:	2930      	cmp	r1, #48	; 0x30
   1d666:	ee08 0a10 	vmov	s16, r0
   1d66a:	4692      	mov	sl, r2
   1d66c:	9302      	str	r3, [sp, #8]
   1d66e:	f040 81ce 	bne.w	1da0e <__gethex+0x3ba>
   1d672:	f06f 0001 	mvn.w	r0, #1
   1d676:	1b00      	subs	r0, r0, r4
   1d678:	1ce2      	adds	r2, r4, #3
   1d67a:	1883      	adds	r3, r0, r2
   1d67c:	4614      	mov	r4, r2
   1d67e:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d682:	2930      	cmp	r1, #48	; 0x30
   1d684:	d0f9      	beq.n	1d67a <__gethex+0x26>
   1d686:	f8df 8300 	ldr.w	r8, [pc, #768]	; 1d988 <__gethex+0x334>
   1d68a:	f818 2001 	ldrb.w	r2, [r8, r1]
   1d68e:	2a00      	cmp	r2, #0
   1d690:	f000 80e5 	beq.w	1d85e <__gethex+0x20a>
   1d694:	7822      	ldrb	r2, [r4, #0]
   1d696:	2700      	movs	r7, #0
   1d698:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d69c:	463d      	mov	r5, r7
   1d69e:	4626      	mov	r6, r4
   1d6a0:	b12a      	cbz	r2, 1d6ae <__gethex+0x5a>
   1d6a2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   1d6a6:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d6aa:	2a00      	cmp	r2, #0
   1d6ac:	d1f9      	bne.n	1d6a2 <__gethex+0x4e>
   1d6ae:	49b5      	ldr	r1, [pc, #724]	; (1d984 <__gethex+0x330>)
   1d6b0:	9301      	str	r3, [sp, #4]
   1d6b2:	2201      	movs	r2, #1
   1d6b4:	4630      	mov	r0, r6
   1d6b6:	f7fe faa5 	bl	1bc04 <strncmp>
   1d6ba:	9b01      	ldr	r3, [sp, #4]
   1d6bc:	4681      	mov	r9, r0
   1d6be:	2800      	cmp	r0, #0
   1d6c0:	d04d      	beq.n	1d75e <__gethex+0x10a>
   1d6c2:	2d00      	cmp	r5, #0
   1d6c4:	d14e      	bne.n	1d764 <__gethex+0x110>
   1d6c6:	7832      	ldrb	r2, [r6, #0]
   1d6c8:	46a9      	mov	r9, r5
   1d6ca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1d6ce:	2a50      	cmp	r2, #80	; 0x50
   1d6d0:	4635      	mov	r5, r6
   1d6d2:	d050      	beq.n	1d776 <__gethex+0x122>
   1d6d4:	f8cb 6000 	str.w	r6, [fp]
   1d6d8:	2f00      	cmp	r7, #0
   1d6da:	d169      	bne.n	1d7b0 <__gethex+0x15c>
   1d6dc:	1b2b      	subs	r3, r5, r4
   1d6de:	3b01      	subs	r3, #1
   1d6e0:	2b07      	cmp	r3, #7
   1d6e2:	4639      	mov	r1, r7
   1d6e4:	dd04      	ble.n	1d6f0 <__gethex+0x9c>
   1d6e6:	105b      	asrs	r3, r3, #1
   1d6e8:	2b07      	cmp	r3, #7
   1d6ea:	f101 0101 	add.w	r1, r1, #1
   1d6ee:	dcfa      	bgt.n	1d6e6 <__gethex+0x92>
   1d6f0:	ee18 0a10 	vmov	r0, s16
   1d6f4:	f000 fe08 	bl	1e308 <_Balloc>
   1d6f8:	4683      	mov	fp, r0
   1d6fa:	2800      	cmp	r0, #0
   1d6fc:	f000 8266 	beq.w	1dbcc <__gethex+0x578>
   1d700:	f100 0614 	add.w	r6, r0, #20
   1d704:	42ac      	cmp	r4, r5
   1d706:	9601      	str	r6, [sp, #4]
   1d708:	f080 81d2 	bcs.w	1dab0 <__gethex+0x45c>
   1d70c:	2700      	movs	r7, #0
   1d70e:	f8cd 900c 	str.w	r9, [sp, #12]
   1d712:	499c      	ldr	r1, [pc, #624]	; (1d984 <__gethex+0x330>)
   1d714:	46a1      	mov	r9, r4
   1d716:	463c      	mov	r4, r7
   1d718:	e00c      	b.n	1d734 <__gethex+0xe0>
   1d71a:	2f20      	cmp	r7, #32
   1d71c:	d019      	beq.n	1d752 <__gethex+0xfe>
   1d71e:	4638      	mov	r0, r7
   1d720:	3704      	adds	r7, #4
   1d722:	782a      	ldrb	r2, [r5, #0]
   1d724:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d728:	f002 020f 	and.w	r2, r2, #15
   1d72c:	4082      	lsls	r2, r0
   1d72e:	4314      	orrs	r4, r2
   1d730:	454d      	cmp	r5, r9
   1d732:	d047      	beq.n	1d7c4 <__gethex+0x170>
   1d734:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   1d738:	2a2e      	cmp	r2, #46	; 0x2e
   1d73a:	d1ee      	bne.n	1d71a <__gethex+0xc6>
   1d73c:	454d      	cmp	r5, r9
   1d73e:	d3ec      	bcc.n	1d71a <__gethex+0xc6>
   1d740:	2201      	movs	r2, #1
   1d742:	4628      	mov	r0, r5
   1d744:	f7fe fa5e 	bl	1bc04 <strncmp>
   1d748:	498e      	ldr	r1, [pc, #568]	; (1d984 <__gethex+0x330>)
   1d74a:	2800      	cmp	r0, #0
   1d74c:	d0f0      	beq.n	1d730 <__gethex+0xdc>
   1d74e:	2f20      	cmp	r7, #32
   1d750:	d1e5      	bne.n	1d71e <__gethex+0xca>
   1d752:	2000      	movs	r0, #0
   1d754:	f846 4b04 	str.w	r4, [r6], #4
   1d758:	2704      	movs	r7, #4
   1d75a:	4604      	mov	r4, r0
   1d75c:	e7e1      	b.n	1d722 <__gethex+0xce>
   1d75e:	2d00      	cmp	r5, #0
   1d760:	f000 8142 	beq.w	1d9e8 <__gethex+0x394>
   1d764:	7832      	ldrb	r2, [r6, #0]
   1d766:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1d76a:	1bad      	subs	r5, r5, r6
   1d76c:	2a50      	cmp	r2, #80	; 0x50
   1d76e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1d772:	4635      	mov	r5, r6
   1d774:	d1ae      	bne.n	1d6d4 <__gethex+0x80>
   1d776:	786a      	ldrb	r2, [r5, #1]
   1d778:	2a2b      	cmp	r2, #43	; 0x2b
   1d77a:	f000 8125 	beq.w	1d9c8 <__gethex+0x374>
   1d77e:	2a2d      	cmp	r2, #45	; 0x2d
   1d780:	f000 80a5 	beq.w	1d8ce <__gethex+0x27a>
   1d784:	1c6e      	adds	r6, r5, #1
   1d786:	2000      	movs	r0, #0
   1d788:	f818 1002 	ldrb.w	r1, [r8, r2]
   1d78c:	1e4a      	subs	r2, r1, #1
   1d78e:	2a18      	cmp	r2, #24
   1d790:	f200 809b 	bhi.w	1d8ca <__gethex+0x276>
   1d794:	7872      	ldrb	r2, [r6, #1]
   1d796:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d79a:	3910      	subs	r1, #16
   1d79c:	3601      	adds	r6, #1
   1d79e:	2a00      	cmp	r2, #0
   1d7a0:	d15a      	bne.n	1d858 <__gethex+0x204>
   1d7a2:	b100      	cbz	r0, 1d7a6 <__gethex+0x152>
   1d7a4:	4249      	negs	r1, r1
   1d7a6:	4489      	add	r9, r1
   1d7a8:	f8cb 6000 	str.w	r6, [fp]
   1d7ac:	2f00      	cmp	r7, #0
   1d7ae:	d095      	beq.n	1d6dc <__gethex+0x88>
   1d7b0:	2b00      	cmp	r3, #0
   1d7b2:	bf14      	ite	ne
   1d7b4:	2500      	movne	r5, #0
   1d7b6:	2506      	moveq	r5, #6
   1d7b8:	4628      	mov	r0, r5
   1d7ba:	b005      	add	sp, #20
   1d7bc:	ecbd 8b02 	vpop	{d8}
   1d7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1d7c8:	4623      	mov	r3, r4
   1d7ca:	f846 3b04 	str.w	r3, [r6], #4
   1d7ce:	4618      	mov	r0, r3
   1d7d0:	9b01      	ldr	r3, [sp, #4]
   1d7d2:	1af6      	subs	r6, r6, r3
   1d7d4:	10b6      	asrs	r6, r6, #2
   1d7d6:	f8cb 6010 	str.w	r6, [fp, #16]
   1d7da:	f000 fe6f 	bl	1e4bc <__hi0bits>
   1d7de:	0176      	lsls	r6, r6, #5
   1d7e0:	f8da 4000 	ldr.w	r4, [sl]
   1d7e4:	1a30      	subs	r0, r6, r0
   1d7e6:	42a0      	cmp	r0, r4
   1d7e8:	dc75      	bgt.n	1d8d6 <__gethex+0x282>
   1d7ea:	f2c0 80ef 	blt.w	1d9cc <__gethex+0x378>
   1d7ee:	2700      	movs	r7, #0
   1d7f0:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d7f4:	454b      	cmp	r3, r9
   1d7f6:	f2c0 8151 	blt.w	1da9c <__gethex+0x448>
   1d7fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d7fe:	454b      	cmp	r3, r9
   1d800:	dd4a      	ble.n	1d898 <__gethex+0x244>
   1d802:	eba3 0909 	sub.w	r9, r3, r9
   1d806:	454c      	cmp	r4, r9
   1d808:	f300 8082 	bgt.w	1d910 <__gethex+0x2bc>
   1d80c:	f8da 200c 	ldr.w	r2, [sl, #12]
   1d810:	2a02      	cmp	r2, #2
   1d812:	f000 8165 	beq.w	1dae0 <__gethex+0x48c>
   1d816:	2a03      	cmp	r2, #3
   1d818:	f000 8181 	beq.w	1db1e <__gethex+0x4ca>
   1d81c:	2a01      	cmp	r2, #1
   1d81e:	f000 816f 	beq.w	1db00 <__gethex+0x4ac>
   1d822:	ee18 0a10 	vmov	r0, s16
   1d826:	4659      	mov	r1, fp
   1d828:	f000 fd94 	bl	1e354 <_Bfree>
   1d82c:	2550      	movs	r5, #80	; 0x50
   1d82e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d830:	2300      	movs	r3, #0
   1d832:	4628      	mov	r0, r5
   1d834:	6013      	str	r3, [r2, #0]
   1d836:	b005      	add	sp, #20
   1d838:	ecbd 8b02 	vpop	{d8}
   1d83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d840:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1d844:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1d848:	f1a2 0110 	sub.w	r1, r2, #16
   1d84c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   1d850:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d854:	2a00      	cmp	r2, #0
   1d856:	d0a4      	beq.n	1d7a2 <__gethex+0x14e>
   1d858:	2a19      	cmp	r2, #25
   1d85a:	ddf1      	ble.n	1d840 <__gethex+0x1ec>
   1d85c:	e7a1      	b.n	1d7a2 <__gethex+0x14e>
   1d85e:	4949      	ldr	r1, [pc, #292]	; (1d984 <__gethex+0x330>)
   1d860:	9301      	str	r3, [sp, #4]
   1d862:	2201      	movs	r2, #1
   1d864:	4620      	mov	r0, r4
   1d866:	f7fe f9cd 	bl	1bc04 <strncmp>
   1d86a:	9b01      	ldr	r3, [sp, #4]
   1d86c:	2800      	cmp	r0, #0
   1d86e:	d16d      	bne.n	1d94c <__gethex+0x2f8>
   1d870:	7861      	ldrb	r1, [r4, #1]
   1d872:	f818 2001 	ldrb.w	r2, [r8, r1]
   1d876:	1c65      	adds	r5, r4, #1
   1d878:	2a00      	cmp	r2, #0
   1d87a:	d069      	beq.n	1d950 <__gethex+0x2fc>
   1d87c:	2930      	cmp	r1, #48	; 0x30
   1d87e:	462c      	mov	r4, r5
   1d880:	d105      	bne.n	1d88e <__gethex+0x23a>
   1d882:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1d886:	2b30      	cmp	r3, #48	; 0x30
   1d888:	d0fb      	beq.n	1d882 <__gethex+0x22e>
   1d88a:	f818 2003 	ldrb.w	r2, [r8, r3]
   1d88e:	fab2 f782 	clz	r7, r2
   1d892:	097f      	lsrs	r7, r7, #5
   1d894:	2301      	movs	r3, #1
   1d896:	e702      	b.n	1d69e <__gethex+0x4a>
   1d898:	2501      	movs	r5, #1
   1d89a:	b157      	cbz	r7, 1d8b2 <__gethex+0x25e>
   1d89c:	f8da 300c 	ldr.w	r3, [sl, #12]
   1d8a0:	2b02      	cmp	r3, #2
   1d8a2:	d05d      	beq.n	1d960 <__gethex+0x30c>
   1d8a4:	2b03      	cmp	r3, #3
   1d8a6:	d05f      	beq.n	1d968 <__gethex+0x314>
   1d8a8:	2b01      	cmp	r3, #1
   1d8aa:	f000 8084 	beq.w	1d9b6 <__gethex+0x362>
   1d8ae:	f045 0510 	orr.w	r5, r5, #16
   1d8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d8b4:	f8c3 b000 	str.w	fp, [r3]
   1d8b8:	9b02      	ldr	r3, [sp, #8]
   1d8ba:	4628      	mov	r0, r5
   1d8bc:	f8c3 9000 	str.w	r9, [r3]
   1d8c0:	b005      	add	sp, #20
   1d8c2:	ecbd 8b02 	vpop	{d8}
   1d8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8ca:	462e      	mov	r6, r5
   1d8cc:	e702      	b.n	1d6d4 <__gethex+0x80>
   1d8ce:	2001      	movs	r0, #1
   1d8d0:	78aa      	ldrb	r2, [r5, #2]
   1d8d2:	1cae      	adds	r6, r5, #2
   1d8d4:	e758      	b.n	1d788 <__gethex+0x134>
   1d8d6:	1b06      	subs	r6, r0, r4
   1d8d8:	4631      	mov	r1, r6
   1d8da:	4658      	mov	r0, fp
   1d8dc:	f001 fa30 	bl	1ed40 <__any_on>
   1d8e0:	4607      	mov	r7, r0
   1d8e2:	b178      	cbz	r0, 1d904 <__gethex+0x2b0>
   1d8e4:	1e72      	subs	r2, r6, #1
   1d8e6:	1153      	asrs	r3, r2, #5
   1d8e8:	9901      	ldr	r1, [sp, #4]
   1d8ea:	2701      	movs	r7, #1
   1d8ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   1d8f0:	f002 031f 	and.w	r3, r2, #31
   1d8f4:	fa07 f303 	lsl.w	r3, r7, r3
   1d8f8:	420b      	tst	r3, r1
   1d8fa:	d003      	beq.n	1d904 <__gethex+0x2b0>
   1d8fc:	42ba      	cmp	r2, r7
   1d8fe:	f300 80e2 	bgt.w	1dac6 <__gethex+0x472>
   1d902:	2702      	movs	r7, #2
   1d904:	4631      	mov	r1, r6
   1d906:	4658      	mov	r0, fp
   1d908:	44b1      	add	r9, r6
   1d90a:	f7ff fe51 	bl	1d5b0 <_free_r+0x20c>
   1d90e:	e76f      	b.n	1d7f0 <__gethex+0x19c>
   1d910:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
   1d914:	2f00      	cmp	r7, #0
   1d916:	f040 80ce 	bne.w	1dab6 <__gethex+0x462>
   1d91a:	2d00      	cmp	r5, #0
   1d91c:	f040 80cd 	bne.w	1daba <__gethex+0x466>
   1d920:	116b      	asrs	r3, r5, #5
   1d922:	9a01      	ldr	r2, [sp, #4]
   1d924:	f005 051f 	and.w	r5, r5, #31
   1d928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1d92c:	2301      	movs	r3, #1
   1d92e:	40ab      	lsls	r3, r5
   1d930:	4213      	tst	r3, r2
   1d932:	4649      	mov	r1, r9
   1d934:	4658      	mov	r0, fp
   1d936:	bf18      	it	ne
   1d938:	f047 0702 	orrne.w	r7, r7, #2
   1d93c:	eba4 0409 	sub.w	r4, r4, r9
   1d940:	f7ff fe36 	bl	1d5b0 <_free_r+0x20c>
   1d944:	2502      	movs	r5, #2
   1d946:	f8da 9004 	ldr.w	r9, [sl, #4]
   1d94a:	e7a6      	b.n	1d89a <__gethex+0x246>
   1d94c:	7821      	ldrb	r1, [r4, #0]
   1d94e:	4625      	mov	r5, r4
   1d950:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   1d954:	2950      	cmp	r1, #80	; 0x50
   1d956:	f000 80bf 	beq.w	1dad8 <__gethex+0x484>
   1d95a:	f8cb 5000 	str.w	r5, [fp]
   1d95e:	e727      	b.n	1d7b0 <__gethex+0x15c>
   1d960:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d962:	f1c3 0301 	rsb	r3, r3, #1
   1d966:	9311      	str	r3, [sp, #68]	; 0x44
   1d968:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d96a:	2b00      	cmp	r3, #0
   1d96c:	d09f      	beq.n	1d8ae <__gethex+0x25a>
   1d96e:	f8db 7010 	ldr.w	r7, [fp, #16]
   1d972:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1d976:	00ba      	lsls	r2, r7, #2
   1d978:	4643      	mov	r3, r8
   1d97a:	9201      	str	r2, [sp, #4]
   1d97c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   1d980:	2100      	movs	r1, #0
   1d982:	e007      	b.n	1d994 <__gethex+0x340>
   1d984:	20008a78 	.word	0x20008a78
   1d988:	2000245c 	.word	0x2000245c
   1d98c:	4298      	cmp	r0, r3
   1d98e:	f843 1c04 	str.w	r1, [r3, #-4]
   1d992:	d93f      	bls.n	1da14 <__gethex+0x3c0>
   1d994:	461e      	mov	r6, r3
   1d996:	f853 2b04 	ldr.w	r2, [r3], #4
   1d99a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1d99e:	d0f5      	beq.n	1d98c <__gethex+0x338>
   1d9a0:	3201      	adds	r2, #1
   1d9a2:	2d02      	cmp	r5, #2
   1d9a4:	6032      	str	r2, [r6, #0]
   1d9a6:	f000 80bf 	beq.w	1db28 <__gethex+0x4d4>
   1d9aa:	f014 041f 	ands.w	r4, r4, #31
   1d9ae:	f040 80e7 	bne.w	1db80 <__gethex+0x52c>
   1d9b2:	2521      	movs	r5, #33	; 0x21
   1d9b4:	e77d      	b.n	1d8b2 <__gethex+0x25e>
   1d9b6:	07ba      	lsls	r2, r7, #30
   1d9b8:	f57f af79 	bpl.w	1d8ae <__gethex+0x25a>
   1d9bc:	9b01      	ldr	r3, [sp, #4]
   1d9be:	681b      	ldr	r3, [r3, #0]
   1d9c0:	431f      	orrs	r7, r3
   1d9c2:	07fb      	lsls	r3, r7, #31
   1d9c4:	d4d3      	bmi.n	1d96e <__gethex+0x31a>
   1d9c6:	e772      	b.n	1d8ae <__gethex+0x25a>
   1d9c8:	2000      	movs	r0, #0
   1d9ca:	e781      	b.n	1d8d0 <__gethex+0x27c>
   1d9cc:	1a22      	subs	r2, r4, r0
   1d9ce:	4659      	mov	r1, fp
   1d9d0:	ee18 0a10 	vmov	r0, s16
   1d9d4:	eba9 0902 	sub.w	r9, r9, r2
   1d9d8:	f000 fefc 	bl	1e7d4 <__lshift>
   1d9dc:	f100 0314 	add.w	r3, r0, #20
   1d9e0:	4683      	mov	fp, r0
   1d9e2:	9301      	str	r3, [sp, #4]
   1d9e4:	2700      	movs	r7, #0
   1d9e6:	e703      	b.n	1d7f0 <__gethex+0x19c>
   1d9e8:	7872      	ldrb	r2, [r6, #1]
   1d9ea:	f818 0002 	ldrb.w	r0, [r8, r2]
   1d9ee:	1c71      	adds	r1, r6, #1
   1d9f0:	2800      	cmp	r0, #0
   1d9f2:	f000 80a0 	beq.w	1db36 <__gethex+0x4e2>
   1d9f6:	460d      	mov	r5, r1
   1d9f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d9fc:	f818 0002 	ldrb.w	r0, [r8, r2]
   1da00:	2800      	cmp	r0, #0
   1da02:	d1f8      	bne.n	1d9f6 <__gethex+0x3a2>
   1da04:	1b75      	subs	r5, r6, r5
   1da06:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1da0a:	460e      	mov	r6, r1
   1da0c:	e65d      	b.n	1d6ca <__gethex+0x76>
   1da0e:	3402      	adds	r4, #2
   1da10:	2300      	movs	r3, #0
   1da12:	e638      	b.n	1d686 <__gethex+0x32>
   1da14:	f8db 3008 	ldr.w	r3, [fp, #8]
   1da18:	429f      	cmp	r7, r3
   1da1a:	f280 808e 	bge.w	1db3a <__gethex+0x4e6>
   1da1e:	463b      	mov	r3, r7
   1da20:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   1da24:	2101      	movs	r1, #1
   1da26:	3301      	adds	r3, #1
   1da28:	2d02      	cmp	r5, #2
   1da2a:	f8cb 3010 	str.w	r3, [fp, #16]
   1da2e:	6151      	str	r1, [r2, #20]
   1da30:	d07a      	beq.n	1db28 <__gethex+0x4d4>
   1da32:	429f      	cmp	r7, r3
   1da34:	dab9      	bge.n	1d9aa <__gethex+0x356>
   1da36:	2b00      	cmp	r3, #0
   1da38:	f340 809b 	ble.w	1db72 <__gethex+0x51e>
   1da3c:	f8db 2014 	ldr.w	r2, [fp, #20]
   1da40:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1da44:	f10b 0018 	add.w	r0, fp, #24
   1da48:	4283      	cmp	r3, r0
   1da4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1da4e:	f240 80b1 	bls.w	1dbb4 <__gethex+0x560>
   1da52:	4644      	mov	r4, r8
   1da54:	6801      	ldr	r1, [r0, #0]
   1da56:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   1da5a:	f844 2b04 	str.w	r2, [r4], #4
   1da5e:	f850 2b04 	ldr.w	r2, [r0], #4
   1da62:	4283      	cmp	r3, r0
   1da64:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1da68:	d8f4      	bhi.n	1da54 <__gethex+0x400>
   1da6a:	eba3 030b 	sub.w	r3, r3, fp
   1da6e:	3b19      	subs	r3, #25
   1da70:	089b      	lsrs	r3, r3, #2
   1da72:	3301      	adds	r3, #1
   1da74:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   1da78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1da7c:	2a00      	cmp	r2, #0
   1da7e:	f040 809d 	bne.w	1dbbc <__gethex+0x568>
   1da82:	eba3 0208 	sub.w	r2, r3, r8
   1da86:	1092      	asrs	r2, r2, #2
   1da88:	4543      	cmp	r3, r8
   1da8a:	f8cb 2010 	str.w	r2, [fp, #16]
   1da8e:	d073      	beq.n	1db78 <__gethex+0x524>
   1da90:	f8da 3008 	ldr.w	r3, [sl, #8]
   1da94:	f109 0901 	add.w	r9, r9, #1
   1da98:	454b      	cmp	r3, r9
   1da9a:	da8a      	bge.n	1d9b2 <__gethex+0x35e>
   1da9c:	ee18 0a10 	vmov	r0, s16
   1daa0:	4659      	mov	r1, fp
   1daa2:	f000 fc57 	bl	1e354 <_Bfree>
   1daa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1daa8:	2300      	movs	r3, #0
   1daaa:	6013      	str	r3, [r2, #0]
   1daac:	25a3      	movs	r5, #163	; 0xa3
   1daae:	e683      	b.n	1d7b8 <__gethex+0x164>
   1dab0:	9e01      	ldr	r6, [sp, #4]
   1dab2:	2300      	movs	r3, #0
   1dab4:	e689      	b.n	1d7ca <__gethex+0x176>
   1dab6:	2701      	movs	r7, #1
   1dab8:	e732      	b.n	1d920 <__gethex+0x2cc>
   1daba:	4629      	mov	r1, r5
   1dabc:	4658      	mov	r0, fp
   1dabe:	f001 f93f 	bl	1ed40 <__any_on>
   1dac2:	4607      	mov	r7, r0
   1dac4:	e72c      	b.n	1d920 <__gethex+0x2cc>
   1dac6:	1eb1      	subs	r1, r6, #2
   1dac8:	4658      	mov	r0, fp
   1daca:	f001 f939 	bl	1ed40 <__any_on>
   1dace:	2800      	cmp	r0, #0
   1dad0:	f43f af17 	beq.w	1d902 <__gethex+0x2ae>
   1dad4:	2703      	movs	r7, #3
   1dad6:	e715      	b.n	1d904 <__gethex+0x2b0>
   1dad8:	f04f 0900 	mov.w	r9, #0
   1dadc:	2701      	movs	r7, #1
   1dade:	e64a      	b.n	1d776 <__gethex+0x122>
   1dae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1dae2:	2a00      	cmp	r2, #0
   1dae4:	f47f ae9d 	bne.w	1d822 <__gethex+0x1ce>
   1dae8:	9902      	ldr	r1, [sp, #8]
   1daea:	600b      	str	r3, [r1, #0]
   1daec:	9b01      	ldr	r3, [sp, #4]
   1daee:	2201      	movs	r2, #1
   1daf0:	f8cb 2010 	str.w	r2, [fp, #16]
   1daf4:	601a      	str	r2, [r3, #0]
   1daf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1daf8:	2562      	movs	r5, #98	; 0x62
   1dafa:	f8c3 b000 	str.w	fp, [r3]
   1dafe:	e65b      	b.n	1d7b8 <__gethex+0x164>
   1db00:	454c      	cmp	r4, r9
   1db02:	f47f ae8e 	bne.w	1d822 <__gethex+0x1ce>
   1db06:	2c01      	cmp	r4, #1
   1db08:	d0ee      	beq.n	1dae8 <__gethex+0x494>
   1db0a:	1e61      	subs	r1, r4, #1
   1db0c:	4658      	mov	r0, fp
   1db0e:	f001 f917 	bl	1ed40 <__any_on>
   1db12:	2800      	cmp	r0, #0
   1db14:	f43f ae85 	beq.w	1d822 <__gethex+0x1ce>
   1db18:	f8da 3004 	ldr.w	r3, [sl, #4]
   1db1c:	e7e4      	b.n	1dae8 <__gethex+0x494>
   1db1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1db20:	2a00      	cmp	r2, #0
   1db22:	f43f ae7e 	beq.w	1d822 <__gethex+0x1ce>
   1db26:	e7df      	b.n	1dae8 <__gethex+0x494>
   1db28:	f8da 3000 	ldr.w	r3, [sl]
   1db2c:	3b01      	subs	r3, #1
   1db2e:	42a3      	cmp	r3, r4
   1db30:	d034      	beq.n	1db9c <__gethex+0x548>
   1db32:	2522      	movs	r5, #34	; 0x22
   1db34:	e6bd      	b.n	1d8b2 <__gethex+0x25e>
   1db36:	460e      	mov	r6, r1
   1db38:	e5c7      	b.n	1d6ca <__gethex+0x76>
   1db3a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1db3e:	ee18 0a10 	vmov	r0, s16
   1db42:	3101      	adds	r1, #1
   1db44:	f000 fbe0 	bl	1e308 <_Balloc>
   1db48:	4606      	mov	r6, r0
   1db4a:	b3c8      	cbz	r0, 1dbc0 <__gethex+0x56c>
   1db4c:	f8db 3010 	ldr.w	r3, [fp, #16]
   1db50:	3302      	adds	r3, #2
   1db52:	009a      	lsls	r2, r3, #2
   1db54:	f10b 010c 	add.w	r1, fp, #12
   1db58:	300c      	adds	r0, #12
   1db5a:	f7f8 fd13 	bl	16584 <memcpy>
   1db5e:	4659      	mov	r1, fp
   1db60:	ee18 0a10 	vmov	r0, s16
   1db64:	f000 fbf6 	bl	1e354 <_Bfree>
   1db68:	f106 0814 	add.w	r8, r6, #20
   1db6c:	6933      	ldr	r3, [r6, #16]
   1db6e:	46b3      	mov	fp, r6
   1db70:	e756      	b.n	1da20 <__gethex+0x3cc>
   1db72:	2300      	movs	r3, #0
   1db74:	f8cb 3010 	str.w	r3, [fp, #16]
   1db78:	2300      	movs	r3, #0
   1db7a:	f8cb 3014 	str.w	r3, [fp, #20]
   1db7e:	e787      	b.n	1da90 <__gethex+0x43c>
   1db80:	9b01      	ldr	r3, [sp, #4]
   1db82:	4443      	add	r3, r8
   1db84:	f1c4 0420 	rsb	r4, r4, #32
   1db88:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1db8c:	f000 fc96 	bl	1e4bc <__hi0bits>
   1db90:	42a0      	cmp	r0, r4
   1db92:	f6bf af0e 	bge.w	1d9b2 <__gethex+0x35e>
   1db96:	f8db 3010 	ldr.w	r3, [fp, #16]
   1db9a:	e74c      	b.n	1da36 <__gethex+0x3e2>
   1db9c:	1163      	asrs	r3, r4, #5
   1db9e:	f004 041f 	and.w	r4, r4, #31
   1dba2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   1dba6:	2301      	movs	r3, #1
   1dba8:	40a3      	lsls	r3, r4
   1dbaa:	4213      	tst	r3, r2
   1dbac:	bf0c      	ite	eq
   1dbae:	2522      	moveq	r5, #34	; 0x22
   1dbb0:	2521      	movne	r5, #33	; 0x21
   1dbb2:	e67e      	b.n	1d8b2 <__gethex+0x25e>
   1dbb4:	f8c8 2000 	str.w	r2, [r8]
   1dbb8:	4643      	mov	r3, r8
   1dbba:	b16a      	cbz	r2, 1dbd8 <__gethex+0x584>
   1dbbc:	3304      	adds	r3, #4
   1dbbe:	e760      	b.n	1da82 <__gethex+0x42e>
   1dbc0:	4b07      	ldr	r3, [pc, #28]	; (1dbe0 <__gethex+0x58c>)
   1dbc2:	4808      	ldr	r0, [pc, #32]	; (1dbe4 <__gethex+0x590>)
   1dbc4:	4632      	mov	r2, r6
   1dbc6:	2184      	movs	r1, #132	; 0x84
   1dbc8:	f003 f9ce 	bl	20f68 <__assert_func>
   1dbcc:	4b04      	ldr	r3, [pc, #16]	; (1dbe0 <__gethex+0x58c>)
   1dbce:	4805      	ldr	r0, [pc, #20]	; (1dbe4 <__gethex+0x590>)
   1dbd0:	465a      	mov	r2, fp
   1dbd2:	21e4      	movs	r1, #228	; 0xe4
   1dbd4:	f003 f9c8 	bl	20f68 <__assert_func>
   1dbd8:	f8cb 2010 	str.w	r2, [fp, #16]
   1dbdc:	e7cc      	b.n	1db78 <__gethex+0x524>
   1dbde:	bf00      	nop
   1dbe0:	20008bbc 	.word	0x20008bbc
   1dbe4:	20008bd0 	.word	0x20008bd0

0001dbe8 <__match>:
   1dbe8:	b410      	push	{r4}
   1dbea:	6804      	ldr	r4, [r0, #0]
   1dbec:	e009      	b.n	1dc02 <__match+0x1a>
   1dbee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1dbf2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   1dbf6:	f1bc 0f19 	cmp.w	ip, #25
   1dbfa:	bf98      	it	ls
   1dbfc:	3320      	addls	r3, #32
   1dbfe:	4293      	cmp	r3, r2
   1dc00:	d109      	bne.n	1dc16 <__match+0x2e>
   1dc02:	f811 2b01 	ldrb.w	r2, [r1], #1
   1dc06:	2a00      	cmp	r2, #0
   1dc08:	d1f1      	bne.n	1dbee <__match+0x6>
   1dc0a:	3401      	adds	r4, #1
   1dc0c:	6004      	str	r4, [r0, #0]
   1dc0e:	2001      	movs	r0, #1
   1dc10:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dc14:	4770      	bx	lr
   1dc16:	2000      	movs	r0, #0
   1dc18:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dc1c:	4770      	bx	lr
   1dc1e:	bf00      	nop

0001dc20 <__hexnan>:
   1dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc24:	6809      	ldr	r1, [r1, #0]
   1dc26:	b085      	sub	sp, #20
   1dc28:	114b      	asrs	r3, r1, #5
   1dc2a:	f011 011f 	ands.w	r1, r1, #31
   1dc2e:	9002      	str	r0, [sp, #8]
   1dc30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1dc34:	9103      	str	r1, [sp, #12]
   1dc36:	f040 808f 	bne.w	1dd58 <__hexnan+0x138>
   1dc3a:	1f1d      	subs	r5, r3, #4
   1dc3c:	9301      	str	r3, [sp, #4]
   1dc3e:	9b02      	ldr	r3, [sp, #8]
   1dc40:	9901      	ldr	r1, [sp, #4]
   1dc42:	681c      	ldr	r4, [r3, #0]
   1dc44:	2300      	movs	r3, #0
   1dc46:	f841 3c04 	str.w	r3, [r1, #-4]
   1dc4a:	7861      	ldrb	r1, [r4, #1]
   1dc4c:	3401      	adds	r4, #1
   1dc4e:	2900      	cmp	r1, #0
   1dc50:	f000 8098 	beq.w	1dd84 <__hexnan+0x164>
   1dc54:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1ddcc <__hexnan+0x1ac>
   1dc58:	46a8      	mov	r8, r5
   1dc5a:	46ac      	mov	ip, r5
   1dc5c:	469a      	mov	sl, r3
   1dc5e:	461e      	mov	r6, r3
   1dc60:	e00e      	b.n	1dc80 <__hexnan+0x60>
   1dc62:	2920      	cmp	r1, #32
   1dc64:	f200 808c 	bhi.w	1dd80 <__hexnan+0x160>
   1dc68:	4556      	cmp	r6, sl
   1dc6a:	dd06      	ble.n	1dc7a <__hexnan+0x5a>
   1dc6c:	45c4      	cmp	ip, r8
   1dc6e:	d201      	bcs.n	1dc74 <__hexnan+0x54>
   1dc70:	2b07      	cmp	r3, #7
   1dc72:	dd5b      	ble.n	1dd2c <__hexnan+0x10c>
   1dc74:	4562      	cmp	r2, ip
   1dc76:	d351      	bcc.n	1dd1c <__hexnan+0xfc>
   1dc78:	2308      	movs	r3, #8
   1dc7a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1dc7e:	b1a1      	cbz	r1, 1dcaa <__hexnan+0x8a>
   1dc80:	f819 0001 	ldrb.w	r0, [r9, r1]
   1dc84:	2800      	cmp	r0, #0
   1dc86:	d0ec      	beq.n	1dc62 <__hexnan+0x42>
   1dc88:	3301      	adds	r3, #1
   1dc8a:	2b08      	cmp	r3, #8
   1dc8c:	f106 0601 	add.w	r6, r6, #1
   1dc90:	dc3a      	bgt.n	1dd08 <__hexnan+0xe8>
   1dc92:	f8dc 1000 	ldr.w	r1, [ip]
   1dc96:	0109      	lsls	r1, r1, #4
   1dc98:	f000 000f 	and.w	r0, r0, #15
   1dc9c:	4308      	orrs	r0, r1
   1dc9e:	f8cc 0000 	str.w	r0, [ip]
   1dca2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1dca6:	2900      	cmp	r1, #0
   1dca8:	d1ea      	bne.n	1dc80 <__hexnan+0x60>
   1dcaa:	2e00      	cmp	r6, #0
   1dcac:	d06a      	beq.n	1dd84 <__hexnan+0x164>
   1dcae:	45c4      	cmp	ip, r8
   1dcb0:	d201      	bcs.n	1dcb6 <__hexnan+0x96>
   1dcb2:	2b07      	cmp	r3, #7
   1dcb4:	dd74      	ble.n	1dda0 <__hexnan+0x180>
   1dcb6:	4562      	cmp	r2, ip
   1dcb8:	d252      	bcs.n	1dd60 <__hexnan+0x140>
   1dcba:	1f11      	subs	r1, r2, #4
   1dcbc:	4663      	mov	r3, ip
   1dcbe:	f853 0b04 	ldr.w	r0, [r3], #4
   1dcc2:	f841 0f04 	str.w	r0, [r1, #4]!
   1dcc6:	42ab      	cmp	r3, r5
   1dcc8:	d9f9      	bls.n	1dcbe <__hexnan+0x9e>
   1dcca:	eba5 030c 	sub.w	r3, r5, ip
   1dcce:	f023 0303 	bic.w	r3, r3, #3
   1dcd2:	1c69      	adds	r1, r5, #1
   1dcd4:	3304      	adds	r3, #4
   1dcd6:	f10c 0c01 	add.w	ip, ip, #1
   1dcda:	4561      	cmp	r1, ip
   1dcdc:	bf38      	it	cc
   1dcde:	2304      	movcc	r3, #4
   1dce0:	4413      	add	r3, r2
   1dce2:	2100      	movs	r1, #0
   1dce4:	f843 1b04 	str.w	r1, [r3], #4
   1dce8:	42ab      	cmp	r3, r5
   1dcea:	d9fb      	bls.n	1dce4 <__hexnan+0xc4>
   1dcec:	9b01      	ldr	r3, [sp, #4]
   1dcee:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1dcf2:	b92b      	cbnz	r3, 1dd00 <__hexnan+0xe0>
   1dcf4:	42aa      	cmp	r2, r5
   1dcf6:	d049      	beq.n	1dd8c <__hexnan+0x16c>
   1dcf8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   1dcfc:	2b00      	cmp	r3, #0
   1dcfe:	d0f9      	beq.n	1dcf4 <__hexnan+0xd4>
   1dd00:	2005      	movs	r0, #5
   1dd02:	b005      	add	sp, #20
   1dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd08:	4562      	cmp	r2, ip
   1dd0a:	d2b6      	bcs.n	1dc7a <__hexnan+0x5a>
   1dd0c:	2300      	movs	r3, #0
   1dd0e:	f84c 3c04 	str.w	r3, [ip, #-4]
   1dd12:	4619      	mov	r1, r3
   1dd14:	f1ac 0c04 	sub.w	ip, ip, #4
   1dd18:	2301      	movs	r3, #1
   1dd1a:	e7bd      	b.n	1dc98 <__hexnan+0x78>
   1dd1c:	2300      	movs	r3, #0
   1dd1e:	f1ac 0804 	sub.w	r8, ip, #4
   1dd22:	f84c 3c04 	str.w	r3, [ip, #-4]
   1dd26:	46b2      	mov	sl, r6
   1dd28:	46c4      	mov	ip, r8
   1dd2a:	e7a6      	b.n	1dc7a <__hexnan+0x5a>
   1dd2c:	f1c3 0108 	rsb	r1, r3, #8
   1dd30:	f8dc 3000 	ldr.w	r3, [ip]
   1dd34:	0089      	lsls	r1, r1, #2
   1dd36:	f1c1 0e20 	rsb	lr, r1, #32
   1dd3a:	4660      	mov	r0, ip
   1dd3c:	469b      	mov	fp, r3
   1dd3e:	6847      	ldr	r7, [r0, #4]
   1dd40:	fa07 f30e 	lsl.w	r3, r7, lr
   1dd44:	ea43 030b 	orr.w	r3, r3, fp
   1dd48:	fa27 fb01 	lsr.w	fp, r7, r1
   1dd4c:	6003      	str	r3, [r0, #0]
   1dd4e:	f840 bf04 	str.w	fp, [r0, #4]!
   1dd52:	4540      	cmp	r0, r8
   1dd54:	d3f3      	bcc.n	1dd3e <__hexnan+0x11e>
   1dd56:	e78d      	b.n	1dc74 <__hexnan+0x54>
   1dd58:	1d19      	adds	r1, r3, #4
   1dd5a:	9101      	str	r1, [sp, #4]
   1dd5c:	461d      	mov	r5, r3
   1dd5e:	e76e      	b.n	1dc3e <__hexnan+0x1e>
   1dd60:	9b03      	ldr	r3, [sp, #12]
   1dd62:	2b00      	cmp	r3, #0
   1dd64:	d0c2      	beq.n	1dcec <__hexnan+0xcc>
   1dd66:	9b03      	ldr	r3, [sp, #12]
   1dd68:	9801      	ldr	r0, [sp, #4]
   1dd6a:	f1c3 0120 	rsb	r1, r3, #32
   1dd6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd72:	40cb      	lsrs	r3, r1
   1dd74:	f850 1c04 	ldr.w	r1, [r0, #-4]
   1dd78:	400b      	ands	r3, r1
   1dd7a:	f840 3c04 	str.w	r3, [r0, #-4]
   1dd7e:	e7b8      	b.n	1dcf2 <__hexnan+0xd2>
   1dd80:	2929      	cmp	r1, #41	; 0x29
   1dd82:	d009      	beq.n	1dd98 <__hexnan+0x178>
   1dd84:	2004      	movs	r0, #4
   1dd86:	b005      	add	sp, #20
   1dd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd8c:	2301      	movs	r3, #1
   1dd8e:	2005      	movs	r0, #5
   1dd90:	602b      	str	r3, [r5, #0]
   1dd92:	b005      	add	sp, #20
   1dd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd98:	9902      	ldr	r1, [sp, #8]
   1dd9a:	3401      	adds	r4, #1
   1dd9c:	600c      	str	r4, [r1, #0]
   1dd9e:	e784      	b.n	1dcaa <__hexnan+0x8a>
   1dda0:	f8dc 1000 	ldr.w	r1, [ip]
   1dda4:	f1c3 0308 	rsb	r3, r3, #8
   1dda8:	009b      	lsls	r3, r3, #2
   1ddaa:	f1c3 0720 	rsb	r7, r3, #32
   1ddae:	4664      	mov	r4, ip
   1ddb0:	4608      	mov	r0, r1
   1ddb2:	6866      	ldr	r6, [r4, #4]
   1ddb4:	fa06 f107 	lsl.w	r1, r6, r7
   1ddb8:	4301      	orrs	r1, r0
   1ddba:	fa26 f003 	lsr.w	r0, r6, r3
   1ddbe:	6021      	str	r1, [r4, #0]
   1ddc0:	f844 0f04 	str.w	r0, [r4, #4]!
   1ddc4:	4544      	cmp	r4, r8
   1ddc6:	d3f4      	bcc.n	1ddb2 <__hexnan+0x192>
   1ddc8:	e775      	b.n	1dcb6 <__hexnan+0x96>
   1ddca:	bf00      	nop
   1ddcc:	2000245c 	.word	0x2000245c

0001ddd0 <_findenv_r>:
   1ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ddd4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1de4c <_findenv_r+0x7c>
   1ddd8:	4606      	mov	r6, r0
   1ddda:	4689      	mov	r9, r1
   1dddc:	4617      	mov	r7, r2
   1ddde:	f003 fff5 	bl	21dcc <__env_lock>
   1dde2:	f8d8 5000 	ldr.w	r5, [r8]
   1dde6:	b155      	cbz	r5, 1ddfe <_findenv_r+0x2e>
   1dde8:	f899 3000 	ldrb.w	r3, [r9]
   1ddec:	461c      	mov	r4, r3
   1ddee:	b173      	cbz	r3, 1de0e <_findenv_r+0x3e>
   1ddf0:	464c      	mov	r4, r9
   1ddf2:	e002      	b.n	1ddfa <_findenv_r+0x2a>
   1ddf4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ddf8:	b13b      	cbz	r3, 1de0a <_findenv_r+0x3a>
   1ddfa:	2b3d      	cmp	r3, #61	; 0x3d
   1ddfc:	d1fa      	bne.n	1ddf4 <_findenv_r+0x24>
   1ddfe:	4630      	mov	r0, r6
   1de00:	f003 ffea 	bl	21dd8 <__env_unlock>
   1de04:	2000      	movs	r0, #0
   1de06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1de0a:	eba4 0409 	sub.w	r4, r4, r9
   1de0e:	6828      	ldr	r0, [r5, #0]
   1de10:	2800      	cmp	r0, #0
   1de12:	d0f4      	beq.n	1ddfe <_findenv_r+0x2e>
   1de14:	4622      	mov	r2, r4
   1de16:	4649      	mov	r1, r9
   1de18:	f7fd fef4 	bl	1bc04 <strncmp>
   1de1c:	b928      	cbnz	r0, 1de2a <_findenv_r+0x5a>
   1de1e:	682b      	ldr	r3, [r5, #0]
   1de20:	5d1a      	ldrb	r2, [r3, r4]
   1de22:	2a3d      	cmp	r2, #61	; 0x3d
   1de24:	eb03 0a04 	add.w	sl, r3, r4
   1de28:	d004      	beq.n	1de34 <_findenv_r+0x64>
   1de2a:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1de2e:	2800      	cmp	r0, #0
   1de30:	d1f0      	bne.n	1de14 <_findenv_r+0x44>
   1de32:	e7e4      	b.n	1ddfe <_findenv_r+0x2e>
   1de34:	f8d8 3000 	ldr.w	r3, [r8]
   1de38:	1aeb      	subs	r3, r5, r3
   1de3a:	109b      	asrs	r3, r3, #2
   1de3c:	4630      	mov	r0, r6
   1de3e:	603b      	str	r3, [r7, #0]
   1de40:	f003 ffca 	bl	21dd8 <__env_unlock>
   1de44:	f10a 0001 	add.w	r0, sl, #1
   1de48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1de4c:	200094b8 	.word	0x200094b8

0001de50 <_getenv_r>:
   1de50:	b500      	push	{lr}
   1de52:	b083      	sub	sp, #12
   1de54:	aa01      	add	r2, sp, #4
   1de56:	f7ff ffbb 	bl	1ddd0 <_findenv_r>
   1de5a:	b003      	add	sp, #12
   1de5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001de60 <_mbtowc_r>:
   1de60:	b410      	push	{r4}
   1de62:	4c03      	ldr	r4, [pc, #12]	; (1de70 <_mbtowc_r+0x10>)
   1de64:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1de68:	46a4      	mov	ip, r4
   1de6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1de6e:	4760      	bx	ip
   1de70:	20009328 	.word	0x20009328

0001de74 <__ascii_mbtowc>:
   1de74:	b082      	sub	sp, #8
   1de76:	b149      	cbz	r1, 1de8c <__ascii_mbtowc+0x18>
   1de78:	b15a      	cbz	r2, 1de92 <__ascii_mbtowc+0x1e>
   1de7a:	b16b      	cbz	r3, 1de98 <__ascii_mbtowc+0x24>
   1de7c:	7813      	ldrb	r3, [r2, #0]
   1de7e:	600b      	str	r3, [r1, #0]
   1de80:	7812      	ldrb	r2, [r2, #0]
   1de82:	1e10      	subs	r0, r2, #0
   1de84:	bf18      	it	ne
   1de86:	2001      	movne	r0, #1
   1de88:	b002      	add	sp, #8
   1de8a:	4770      	bx	lr
   1de8c:	a901      	add	r1, sp, #4
   1de8e:	2a00      	cmp	r2, #0
   1de90:	d1f3      	bne.n	1de7a <__ascii_mbtowc+0x6>
   1de92:	4610      	mov	r0, r2
   1de94:	b002      	add	sp, #8
   1de96:	4770      	bx	lr
   1de98:	f06f 0001 	mvn.w	r0, #1
   1de9c:	e7f4      	b.n	1de88 <__ascii_mbtowc+0x14>
   1de9e:	bf00      	nop

0001dea0 <__utf8_mbtowc>:
   1dea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dea2:	b083      	sub	sp, #12
   1dea4:	4686      	mov	lr, r0
   1dea6:	9d08      	ldr	r5, [sp, #32]
   1dea8:	2900      	cmp	r1, #0
   1deaa:	d038      	beq.n	1df1e <__utf8_mbtowc+0x7e>
   1deac:	2a00      	cmp	r2, #0
   1deae:	d039      	beq.n	1df24 <__utf8_mbtowc+0x84>
   1deb0:	2b00      	cmp	r3, #0
   1deb2:	f000 80c5 	beq.w	1e040 <__utf8_mbtowc+0x1a0>
   1deb6:	682c      	ldr	r4, [r5, #0]
   1deb8:	bb44      	cbnz	r4, 1df0c <__utf8_mbtowc+0x6c>
   1deba:	7810      	ldrb	r0, [r2, #0]
   1debc:	f04f 0c01 	mov.w	ip, #1
   1dec0:	b348      	cbz	r0, 1df16 <__utf8_mbtowc+0x76>
   1dec2:	287f      	cmp	r0, #127	; 0x7f
   1dec4:	dd56      	ble.n	1df74 <__utf8_mbtowc+0xd4>
   1dec6:	f1a0 06c0 	sub.w	r6, r0, #192	; 0xc0
   1deca:	2e1f      	cmp	r6, #31
   1decc:	d82d      	bhi.n	1df2a <__utf8_mbtowc+0x8a>
   1dece:	7128      	strb	r0, [r5, #4]
   1ded0:	b924      	cbnz	r4, 1dedc <__utf8_mbtowc+0x3c>
   1ded2:	2401      	movs	r4, #1
   1ded4:	42a3      	cmp	r3, r4
   1ded6:	602c      	str	r4, [r5, #0]
   1ded8:	f000 80b2 	beq.w	1e040 <__utf8_mbtowc+0x1a0>
   1dedc:	f812 200c 	ldrb.w	r2, [r2, ip]
   1dee0:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   1dee4:	2b3f      	cmp	r3, #63	; 0x3f
   1dee6:	f10c 0c01 	add.w	ip, ip, #1
   1deea:	f200 809f 	bhi.w	1e02c <__utf8_mbtowc+0x18c>
   1deee:	28c1      	cmp	r0, #193	; 0xc1
   1def0:	f340 809c 	ble.w	1e02c <__utf8_mbtowc+0x18c>
   1def4:	0183      	lsls	r3, r0, #6
   1def6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
   1defa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1defe:	4313      	orrs	r3, r2
   1df00:	4660      	mov	r0, ip
   1df02:	2200      	movs	r2, #0
   1df04:	602a      	str	r2, [r5, #0]
   1df06:	600b      	str	r3, [r1, #0]
   1df08:	b003      	add	sp, #12
   1df0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df0c:	7928      	ldrb	r0, [r5, #4]
   1df0e:	f04f 0c00 	mov.w	ip, #0
   1df12:	2800      	cmp	r0, #0
   1df14:	d1d5      	bne.n	1dec2 <__utf8_mbtowc+0x22>
   1df16:	6008      	str	r0, [r1, #0]
   1df18:	6028      	str	r0, [r5, #0]
   1df1a:	b003      	add	sp, #12
   1df1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df1e:	a901      	add	r1, sp, #4
   1df20:	2a00      	cmp	r2, #0
   1df22:	d1c5      	bne.n	1deb0 <__utf8_mbtowc+0x10>
   1df24:	4610      	mov	r0, r2
   1df26:	b003      	add	sp, #12
   1df28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df2a:	f1a0 06e0 	sub.w	r6, r0, #224	; 0xe0
   1df2e:	2e0f      	cmp	r6, #15
   1df30:	d826      	bhi.n	1df80 <__utf8_mbtowc+0xe0>
   1df32:	7128      	strb	r0, [r5, #4]
   1df34:	2c00      	cmp	r4, #0
   1df36:	d063      	beq.n	1e000 <__utf8_mbtowc+0x160>
   1df38:	1c5f      	adds	r7, r3, #1
   1df3a:	bf18      	it	ne
   1df3c:	3301      	addne	r3, #1
   1df3e:	2c01      	cmp	r4, #1
   1df40:	d062      	beq.n	1e008 <__utf8_mbtowc+0x168>
   1df42:	796e      	ldrb	r6, [r5, #5]
   1df44:	28e0      	cmp	r0, #224	; 0xe0
   1df46:	d06f      	beq.n	1e028 <__utf8_mbtowc+0x188>
   1df48:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
   1df4c:	2f3f      	cmp	r7, #63	; 0x3f
   1df4e:	d86d      	bhi.n	1e02c <__utf8_mbtowc+0x18c>
   1df50:	2c01      	cmp	r4, #1
   1df52:	716e      	strb	r6, [r5, #5]
   1df54:	d070      	beq.n	1e038 <__utf8_mbtowc+0x198>
   1df56:	f812 200c 	ldrb.w	r2, [r2, ip]
   1df5a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   1df5e:	2b3f      	cmp	r3, #63	; 0x3f
   1df60:	f10c 0c01 	add.w	ip, ip, #1
   1df64:	d862      	bhi.n	1e02c <__utf8_mbtowc+0x18c>
   1df66:	0303      	lsls	r3, r0, #12
   1df68:	01b6      	lsls	r6, r6, #6
   1df6a:	b29b      	uxth	r3, r3
   1df6c:	f406 667c 	and.w	r6, r6, #4032	; 0xfc0
   1df70:	4333      	orrs	r3, r6
   1df72:	e7c2      	b.n	1defa <__utf8_mbtowc+0x5a>
   1df74:	2300      	movs	r3, #0
   1df76:	602b      	str	r3, [r5, #0]
   1df78:	6008      	str	r0, [r1, #0]
   1df7a:	2001      	movs	r0, #1
   1df7c:	b003      	add	sp, #12
   1df7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df80:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
   1df84:	2e04      	cmp	r6, #4
   1df86:	d851      	bhi.n	1e02c <__utf8_mbtowc+0x18c>
   1df88:	7128      	strb	r0, [r5, #4]
   1df8a:	2c00      	cmp	r4, #0
   1df8c:	d042      	beq.n	1e014 <__utf8_mbtowc+0x174>
   1df8e:	1c5e      	adds	r6, r3, #1
   1df90:	bf18      	it	ne
   1df92:	3301      	addne	r3, #1
   1df94:	2c01      	cmp	r4, #1
   1df96:	d041      	beq.n	1e01c <__utf8_mbtowc+0x17c>
   1df98:	796e      	ldrb	r6, [r5, #5]
   1df9a:	28f0      	cmp	r0, #240	; 0xf0
   1df9c:	d053      	beq.n	1e046 <__utf8_mbtowc+0x1a6>
   1df9e:	28f4      	cmp	r0, #244	; 0xf4
   1dfa0:	d101      	bne.n	1dfa6 <__utf8_mbtowc+0x106>
   1dfa2:	2e8f      	cmp	r6, #143	; 0x8f
   1dfa4:	dc42      	bgt.n	1e02c <__utf8_mbtowc+0x18c>
   1dfa6:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
   1dfaa:	2f3f      	cmp	r7, #63	; 0x3f
   1dfac:	d83e      	bhi.n	1e02c <__utf8_mbtowc+0x18c>
   1dfae:	2c01      	cmp	r4, #1
   1dfb0:	716e      	strb	r6, [r5, #5]
   1dfb2:	d04b      	beq.n	1e04c <__utf8_mbtowc+0x1ac>
   1dfb4:	1c5c      	adds	r4, r3, #1
   1dfb6:	682c      	ldr	r4, [r5, #0]
   1dfb8:	bf18      	it	ne
   1dfba:	3301      	addne	r3, #1
   1dfbc:	2c02      	cmp	r4, #2
   1dfbe:	d049      	beq.n	1e054 <__utf8_mbtowc+0x1b4>
   1dfc0:	79ac      	ldrb	r4, [r5, #6]
   1dfc2:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
   1dfc6:	2b3f      	cmp	r3, #63	; 0x3f
   1dfc8:	d830      	bhi.n	1e02c <__utf8_mbtowc+0x18c>
   1dfca:	f812 200c 	ldrb.w	r2, [r2, ip]
   1dfce:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   1dfd2:	2b3f      	cmp	r3, #63	; 0x3f
   1dfd4:	f10c 0c01 	add.w	ip, ip, #1
   1dfd8:	d828      	bhi.n	1e02c <__utf8_mbtowc+0x18c>
   1dfda:	0483      	lsls	r3, r0, #18
   1dfdc:	0336      	lsls	r6, r6, #12
   1dfde:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
   1dfe2:	f406 367c 	and.w	r6, r6, #258048	; 0x3f000
   1dfe6:	01a4      	lsls	r4, r4, #6
   1dfe8:	4333      	orrs	r3, r6
   1dfea:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
   1dfee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1dff2:	4323      	orrs	r3, r4
   1dff4:	4313      	orrs	r3, r2
   1dff6:	2200      	movs	r2, #0
   1dff8:	600b      	str	r3, [r1, #0]
   1dffa:	4660      	mov	r0, ip
   1dffc:	602a      	str	r2, [r5, #0]
   1dffe:	e78c      	b.n	1df1a <__utf8_mbtowc+0x7a>
   1e000:	2401      	movs	r4, #1
   1e002:	42a3      	cmp	r3, r4
   1e004:	602c      	str	r4, [r5, #0]
   1e006:	d01b      	beq.n	1e040 <__utf8_mbtowc+0x1a0>
   1e008:	f812 600c 	ldrb.w	r6, [r2, ip]
   1e00c:	2401      	movs	r4, #1
   1e00e:	f10c 0c01 	add.w	ip, ip, #1
   1e012:	e797      	b.n	1df44 <__utf8_mbtowc+0xa4>
   1e014:	2401      	movs	r4, #1
   1e016:	42a3      	cmp	r3, r4
   1e018:	602c      	str	r4, [r5, #0]
   1e01a:	d011      	beq.n	1e040 <__utf8_mbtowc+0x1a0>
   1e01c:	f812 600c 	ldrb.w	r6, [r2, ip]
   1e020:	2401      	movs	r4, #1
   1e022:	f10c 0c01 	add.w	ip, ip, #1
   1e026:	e7b8      	b.n	1df9a <__utf8_mbtowc+0xfa>
   1e028:	2e9f      	cmp	r6, #159	; 0x9f
   1e02a:	dc8d      	bgt.n	1df48 <__utf8_mbtowc+0xa8>
   1e02c:	238a      	movs	r3, #138	; 0x8a
   1e02e:	f8ce 3000 	str.w	r3, [lr]
   1e032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e036:	e770      	b.n	1df1a <__utf8_mbtowc+0x7a>
   1e038:	2402      	movs	r4, #2
   1e03a:	42a3      	cmp	r3, r4
   1e03c:	602c      	str	r4, [r5, #0]
   1e03e:	d18a      	bne.n	1df56 <__utf8_mbtowc+0xb6>
   1e040:	f06f 0001 	mvn.w	r0, #1
   1e044:	e769      	b.n	1df1a <__utf8_mbtowc+0x7a>
   1e046:	2e8f      	cmp	r6, #143	; 0x8f
   1e048:	dcad      	bgt.n	1dfa6 <__utf8_mbtowc+0x106>
   1e04a:	e7ef      	b.n	1e02c <__utf8_mbtowc+0x18c>
   1e04c:	2402      	movs	r4, #2
   1e04e:	42a3      	cmp	r3, r4
   1e050:	602c      	str	r4, [r5, #0]
   1e052:	d0f5      	beq.n	1e040 <__utf8_mbtowc+0x1a0>
   1e054:	f812 400c 	ldrb.w	r4, [r2, ip]
   1e058:	f1a4 0780 	sub.w	r7, r4, #128	; 0x80
   1e05c:	2f3f      	cmp	r7, #63	; 0x3f
   1e05e:	f10c 0c01 	add.w	ip, ip, #1
   1e062:	d8e3      	bhi.n	1e02c <__utf8_mbtowc+0x18c>
   1e064:	2703      	movs	r7, #3
   1e066:	42bb      	cmp	r3, r7
   1e068:	71ac      	strb	r4, [r5, #6]
   1e06a:	602f      	str	r7, [r5, #0]
   1e06c:	d1ad      	bne.n	1dfca <__utf8_mbtowc+0x12a>
   1e06e:	e7e7      	b.n	1e040 <__utf8_mbtowc+0x1a0>

0001e070 <__sjis_mbtowc>:
   1e070:	b430      	push	{r4, r5}
   1e072:	b082      	sub	sp, #8
   1e074:	4684      	mov	ip, r0
   1e076:	9d04      	ldr	r5, [sp, #16]
   1e078:	2900      	cmp	r1, #0
   1e07a:	d030      	beq.n	1e0de <__sjis_mbtowc+0x6e>
   1e07c:	2a00      	cmp	r2, #0
   1e07e:	d031      	beq.n	1e0e4 <__sjis_mbtowc+0x74>
   1e080:	2b00      	cmp	r3, #0
   1e082:	d039      	beq.n	1e0f8 <__sjis_mbtowc+0x88>
   1e084:	6828      	ldr	r0, [r5, #0]
   1e086:	7814      	ldrb	r4, [r2, #0]
   1e088:	b148      	cbz	r0, 1e09e <__sjis_mbtowc+0x2e>
   1e08a:	2801      	cmp	r0, #1
   1e08c:	d016      	beq.n	1e0bc <__sjis_mbtowc+0x4c>
   1e08e:	600c      	str	r4, [r1, #0]
   1e090:	7810      	ldrb	r0, [r2, #0]
   1e092:	3800      	subs	r0, #0
   1e094:	bf18      	it	ne
   1e096:	2001      	movne	r0, #1
   1e098:	b002      	add	sp, #8
   1e09a:	bc30      	pop	{r4, r5}
   1e09c:	4770      	bx	lr
   1e09e:	f1a4 0081 	sub.w	r0, r4, #129	; 0x81
   1e0a2:	281e      	cmp	r0, #30
   1e0a4:	d903      	bls.n	1e0ae <__sjis_mbtowc+0x3e>
   1e0a6:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
   1e0aa:	280f      	cmp	r0, #15
   1e0ac:	d8ef      	bhi.n	1e08e <__sjis_mbtowc+0x1e>
   1e0ae:	2001      	movs	r0, #1
   1e0b0:	4283      	cmp	r3, r0
   1e0b2:	712c      	strb	r4, [r5, #4]
   1e0b4:	6028      	str	r0, [r5, #0]
   1e0b6:	d01f      	beq.n	1e0f8 <__sjis_mbtowc+0x88>
   1e0b8:	7854      	ldrb	r4, [r2, #1]
   1e0ba:	2002      	movs	r0, #2
   1e0bc:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
   1e0c0:	2b3e      	cmp	r3, #62	; 0x3e
   1e0c2:	d903      	bls.n	1e0cc <__sjis_mbtowc+0x5c>
   1e0c4:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
   1e0c8:	2b7c      	cmp	r3, #124	; 0x7c
   1e0ca:	d80f      	bhi.n	1e0ec <__sjis_mbtowc+0x7c>
   1e0cc:	792b      	ldrb	r3, [r5, #4]
   1e0ce:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   1e0d2:	2300      	movs	r3, #0
   1e0d4:	600c      	str	r4, [r1, #0]
   1e0d6:	602b      	str	r3, [r5, #0]
   1e0d8:	b002      	add	sp, #8
   1e0da:	bc30      	pop	{r4, r5}
   1e0dc:	4770      	bx	lr
   1e0de:	a901      	add	r1, sp, #4
   1e0e0:	2a00      	cmp	r2, #0
   1e0e2:	d1cd      	bne.n	1e080 <__sjis_mbtowc+0x10>
   1e0e4:	4610      	mov	r0, r2
   1e0e6:	b002      	add	sp, #8
   1e0e8:	bc30      	pop	{r4, r5}
   1e0ea:	4770      	bx	lr
   1e0ec:	238a      	movs	r3, #138	; 0x8a
   1e0ee:	f8cc 3000 	str.w	r3, [ip]
   1e0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0f6:	e7cf      	b.n	1e098 <__sjis_mbtowc+0x28>
   1e0f8:	f06f 0001 	mvn.w	r0, #1
   1e0fc:	e7cc      	b.n	1e098 <__sjis_mbtowc+0x28>
   1e0fe:	bf00      	nop

0001e100 <__eucjp_mbtowc>:
   1e100:	b530      	push	{r4, r5, lr}
   1e102:	b083      	sub	sp, #12
   1e104:	4686      	mov	lr, r0
   1e106:	9d06      	ldr	r5, [sp, #24]
   1e108:	2900      	cmp	r1, #0
   1e10a:	d040      	beq.n	1e18e <__eucjp_mbtowc+0x8e>
   1e10c:	2a00      	cmp	r2, #0
   1e10e:	d041      	beq.n	1e194 <__eucjp_mbtowc+0x94>
   1e110:	2b00      	cmp	r3, #0
   1e112:	d04b      	beq.n	1e1ac <__eucjp_mbtowc+0xac>
   1e114:	7814      	ldrb	r4, [r2, #0]
   1e116:	6828      	ldr	r0, [r5, #0]
   1e118:	46a4      	mov	ip, r4
   1e11a:	b150      	cbz	r0, 1e132 <__eucjp_mbtowc+0x32>
   1e11c:	2801      	cmp	r0, #1
   1e11e:	d018      	beq.n	1e152 <__eucjp_mbtowc+0x52>
   1e120:	2802      	cmp	r0, #2
   1e122:	d041      	beq.n	1e1a8 <__eucjp_mbtowc+0xa8>
   1e124:	600c      	str	r4, [r1, #0]
   1e126:	7810      	ldrb	r0, [r2, #0]
   1e128:	3800      	subs	r0, #0
   1e12a:	bf18      	it	ne
   1e12c:	2001      	movne	r0, #1
   1e12e:	b003      	add	sp, #12
   1e130:	bd30      	pop	{r4, r5, pc}
   1e132:	f1a4 008e 	sub.w	r0, r4, #142	; 0x8e
   1e136:	2801      	cmp	r0, #1
   1e138:	d903      	bls.n	1e142 <__eucjp_mbtowc+0x42>
   1e13a:	f1a4 00a1 	sub.w	r0, r4, #161	; 0xa1
   1e13e:	285d      	cmp	r0, #93	; 0x5d
   1e140:	d8f0      	bhi.n	1e124 <__eucjp_mbtowc+0x24>
   1e142:	2001      	movs	r0, #1
   1e144:	4283      	cmp	r3, r0
   1e146:	712c      	strb	r4, [r5, #4]
   1e148:	6028      	str	r0, [r5, #0]
   1e14a:	d02f      	beq.n	1e1ac <__eucjp_mbtowc+0xac>
   1e14c:	f892 c001 	ldrb.w	ip, [r2, #1]
   1e150:	2002      	movs	r0, #2
   1e152:	f1ac 04a1 	sub.w	r4, ip, #161	; 0xa1
   1e156:	2c5d      	cmp	r4, #93	; 0x5d
   1e158:	d82b      	bhi.n	1e1b2 <__eucjp_mbtowc+0xb2>
   1e15a:	792c      	ldrb	r4, [r5, #4]
   1e15c:	2c8f      	cmp	r4, #143	; 0x8f
   1e15e:	d11c      	bne.n	1e19a <__eucjp_mbtowc+0x9a>
   1e160:	2402      	movs	r4, #2
   1e162:	4298      	cmp	r0, r3
   1e164:	f885 c005 	strb.w	ip, [r5, #5]
   1e168:	602c      	str	r4, [r5, #0]
   1e16a:	d21f      	bcs.n	1e1ac <__eucjp_mbtowc+0xac>
   1e16c:	f812 c000 	ldrb.w	ip, [r2, r0]
   1e170:	3001      	adds	r0, #1
   1e172:	f1ac 03a1 	sub.w	r3, ip, #161	; 0xa1
   1e176:	2b5d      	cmp	r3, #93	; 0x5d
   1e178:	d81b      	bhi.n	1e1b2 <__eucjp_mbtowc+0xb2>
   1e17a:	796b      	ldrb	r3, [r5, #5]
   1e17c:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1e180:	eb0c 2303 	add.w	r3, ip, r3, lsl #8
   1e184:	2200      	movs	r2, #0
   1e186:	600b      	str	r3, [r1, #0]
   1e188:	602a      	str	r2, [r5, #0]
   1e18a:	b003      	add	sp, #12
   1e18c:	bd30      	pop	{r4, r5, pc}
   1e18e:	a901      	add	r1, sp, #4
   1e190:	2a00      	cmp	r2, #0
   1e192:	d1bd      	bne.n	1e110 <__eucjp_mbtowc+0x10>
   1e194:	4610      	mov	r0, r2
   1e196:	b003      	add	sp, #12
   1e198:	bd30      	pop	{r4, r5, pc}
   1e19a:	eb0c 2404 	add.w	r4, ip, r4, lsl #8
   1e19e:	2200      	movs	r2, #0
   1e1a0:	600c      	str	r4, [r1, #0]
   1e1a2:	602a      	str	r2, [r5, #0]
   1e1a4:	b003      	add	sp, #12
   1e1a6:	bd30      	pop	{r4, r5, pc}
   1e1a8:	2001      	movs	r0, #1
   1e1aa:	e7e2      	b.n	1e172 <__eucjp_mbtowc+0x72>
   1e1ac:	f06f 0001 	mvn.w	r0, #1
   1e1b0:	e7bd      	b.n	1e12e <__eucjp_mbtowc+0x2e>
   1e1b2:	238a      	movs	r3, #138	; 0x8a
   1e1b4:	f8ce 3000 	str.w	r3, [lr]
   1e1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1bc:	e7b7      	b.n	1e12e <__eucjp_mbtowc+0x2e>
   1e1be:	bf00      	nop

0001e1c0 <__jis_mbtowc>:
   1e1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e1c4:	b082      	sub	sp, #8
   1e1c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1e1c8:	b389      	cbz	r1, 1e22e <__jis_mbtowc+0x6e>
   1e1ca:	b39a      	cbz	r2, 1e234 <__jis_mbtowc+0x74>
   1e1cc:	2b00      	cmp	r3, #0
   1e1ce:	f000 8091 	beq.w	1e2f4 <__jis_mbtowc+0x134>
   1e1d2:	4696      	mov	lr, r2
   1e1d4:	46f1      	mov	r9, lr
   1e1d6:	f81e 6b01 	ldrb.w	r6, [lr], #1
   1e1da:	783c      	ldrb	r4, [r7, #0]
   1e1dc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1e304 <__jis_mbtowc+0x144>
   1e1e0:	2501      	movs	r5, #1
   1e1e2:	2e00      	cmp	r6, #0
   1e1e4:	d050      	beq.n	1e288 <__jis_mbtowc+0xc8>
   1e1e6:	f1a6 0c1b 	sub.w	ip, r6, #27
   1e1ea:	fa5f fa8c 	uxtb.w	sl, ip
   1e1ee:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   1e1f2:	d824      	bhi.n	1e23e <__jis_mbtowc+0x7e>
   1e1f4:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
   1e1f8:	d821      	bhi.n	1e23e <__jis_mbtowc+0x7e>
   1e1fa:	e8df f00c 	tbb	[pc, ip]
   1e1fe:	2071      	.short	0x2071
   1e200:	20202020 	.word	0x20202020
   1e204:	74202020 	.word	0x74202020
   1e208:	65202020 	.word	0x65202020
   1e20c:	20202020 	.word	0x20202020
   1e210:	20202020 	.word	0x20202020
   1e214:	20202020 	.word	0x20202020
   1e218:	20202020 	.word	0x20202020
   1e21c:	20202020 	.word	0x20202020
   1e220:	68202020 	.word	0x68202020
   1e224:	20206b20 	.word	0x20206b20
   1e228:	20202020 	.word	0x20202020
   1e22c:	6e20      	.short	0x6e20
   1e22e:	a901      	add	r1, sp, #4
   1e230:	2a00      	cmp	r2, #0
   1e232:	d1cb      	bne.n	1e1cc <__jis_mbtowc+0xc>
   1e234:	2001      	movs	r0, #1
   1e236:	603a      	str	r2, [r7, #0]
   1e238:	b002      	add	sp, #8
   1e23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e23e:	f1a6 0c21 	sub.w	ip, r6, #33	; 0x21
   1e242:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
   1e246:	bf34      	ite	cc
   1e248:	f04f 0c07 	movcc.w	ip, #7
   1e24c:	f04f 0c08 	movcs.w	ip, #8
   1e250:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1e254:	4444      	add	r4, r8
   1e256:	eb04 0a0c 	add.w	sl, r4, ip
   1e25a:	f814 400c 	ldrb.w	r4, [r4, ip]
   1e25e:	f89a c048 	ldrb.w	ip, [sl, #72]	; 0x48
   1e262:	f1bc 0f05 	cmp.w	ip, #5
   1e266:	d848      	bhi.n	1e2fa <__jis_mbtowc+0x13a>
   1e268:	e8df f00c 	tbb	[pc, ip]
   1e26c:	1113031f 	.word	0x1113031f
   1e270:	2704      	.short	0x2704
   1e272:	713e      	strb	r6, [r7, #4]
   1e274:	42ab      	cmp	r3, r5
   1e276:	f105 0601 	add.w	r6, r5, #1
   1e27a:	d937      	bls.n	1e2ec <__jis_mbtowc+0x12c>
   1e27c:	4635      	mov	r5, r6
   1e27e:	46f1      	mov	r9, lr
   1e280:	f81e 6b01 	ldrb.w	r6, [lr], #1
   1e284:	2e00      	cmp	r6, #0
   1e286:	d1ae      	bne.n	1e1e6 <__jis_mbtowc+0x26>
   1e288:	f04f 0c06 	mov.w	ip, #6
   1e28c:	e7e0      	b.n	1e250 <__jis_mbtowc+0x90>
   1e28e:	4672      	mov	r2, lr
   1e290:	e7f0      	b.n	1e274 <__jis_mbtowc+0xb4>
   1e292:	2301      	movs	r3, #1
   1e294:	603b      	str	r3, [r7, #0]
   1e296:	793a      	ldrb	r2, [r7, #4]
   1e298:	f899 3000 	ldrb.w	r3, [r9]
   1e29c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1e2a0:	4628      	mov	r0, r5
   1e2a2:	600b      	str	r3, [r1, #0]
   1e2a4:	b002      	add	sp, #8
   1e2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e2aa:	2300      	movs	r3, #0
   1e2ac:	603b      	str	r3, [r7, #0]
   1e2ae:	7813      	ldrb	r3, [r2, #0]
   1e2b0:	600b      	str	r3, [r1, #0]
   1e2b2:	4628      	mov	r0, r5
   1e2b4:	b002      	add	sp, #8
   1e2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e2ba:	2300      	movs	r3, #0
   1e2bc:	4618      	mov	r0, r3
   1e2be:	603b      	str	r3, [r7, #0]
   1e2c0:	600b      	str	r3, [r1, #0]
   1e2c2:	b002      	add	sp, #8
   1e2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e2c8:	f04f 0c02 	mov.w	ip, #2
   1e2cc:	e7c0      	b.n	1e250 <__jis_mbtowc+0x90>
   1e2ce:	f04f 0c03 	mov.w	ip, #3
   1e2d2:	e7bd      	b.n	1e250 <__jis_mbtowc+0x90>
   1e2d4:	f04f 0c04 	mov.w	ip, #4
   1e2d8:	e7ba      	b.n	1e250 <__jis_mbtowc+0x90>
   1e2da:	f04f 0c05 	mov.w	ip, #5
   1e2de:	e7b7      	b.n	1e250 <__jis_mbtowc+0x90>
   1e2e0:	f04f 0c00 	mov.w	ip, #0
   1e2e4:	e7b4      	b.n	1e250 <__jis_mbtowc+0x90>
   1e2e6:	f04f 0c01 	mov.w	ip, #1
   1e2ea:	e7b1      	b.n	1e250 <__jis_mbtowc+0x90>
   1e2ec:	603c      	str	r4, [r7, #0]
   1e2ee:	f06f 0001 	mvn.w	r0, #1
   1e2f2:	e7d7      	b.n	1e2a4 <__jis_mbtowc+0xe4>
   1e2f4:	f06f 0001 	mvn.w	r0, #1
   1e2f8:	e7d4      	b.n	1e2a4 <__jis_mbtowc+0xe4>
   1e2fa:	238a      	movs	r3, #138	; 0x8a
   1e2fc:	6003      	str	r3, [r0, #0]
   1e2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e302:	e7cf      	b.n	1e2a4 <__jis_mbtowc+0xe4>
   1e304:	2000255c 	.word	0x2000255c

0001e308 <_Balloc>:
   1e308:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e30a:	b570      	push	{r4, r5, r6, lr}
   1e30c:	4605      	mov	r5, r0
   1e30e:	460c      	mov	r4, r1
   1e310:	b14b      	cbz	r3, 1e326 <_Balloc+0x1e>
   1e312:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1e316:	b180      	cbz	r0, 1e33a <_Balloc+0x32>
   1e318:	6802      	ldr	r2, [r0, #0]
   1e31a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1e31e:	2300      	movs	r3, #0
   1e320:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1e324:	bd70      	pop	{r4, r5, r6, pc}
   1e326:	2221      	movs	r2, #33	; 0x21
   1e328:	2104      	movs	r1, #4
   1e32a:	f7fb fa33 	bl	19794 <_calloc_r>
   1e32e:	4603      	mov	r3, r0
   1e330:	6468      	str	r0, [r5, #68]	; 0x44
   1e332:	2800      	cmp	r0, #0
   1e334:	d1ed      	bne.n	1e312 <_Balloc+0xa>
   1e336:	2000      	movs	r0, #0
   1e338:	bd70      	pop	{r4, r5, r6, pc}
   1e33a:	2101      	movs	r1, #1
   1e33c:	fa01 f604 	lsl.w	r6, r1, r4
   1e340:	1d72      	adds	r2, r6, #5
   1e342:	0092      	lsls	r2, r2, #2
   1e344:	4628      	mov	r0, r5
   1e346:	f7fb fa25 	bl	19794 <_calloc_r>
   1e34a:	2800      	cmp	r0, #0
   1e34c:	d0f3      	beq.n	1e336 <_Balloc+0x2e>
   1e34e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   1e352:	e7e4      	b.n	1e31e <_Balloc+0x16>

0001e354 <_Bfree>:
   1e354:	b131      	cbz	r1, 1e364 <_Bfree+0x10>
   1e356:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e358:	684a      	ldr	r2, [r1, #4]
   1e35a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1e35e:	6008      	str	r0, [r1, #0]
   1e360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1e364:	4770      	bx	lr
   1e366:	bf00      	nop

0001e368 <__multadd>:
   1e368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e36c:	690e      	ldr	r6, [r1, #16]
   1e36e:	4680      	mov	r8, r0
   1e370:	460f      	mov	r7, r1
   1e372:	461d      	mov	r5, r3
   1e374:	f101 0e14 	add.w	lr, r1, #20
   1e378:	2000      	movs	r0, #0
   1e37a:	f8de 1000 	ldr.w	r1, [lr]
   1e37e:	b28c      	uxth	r4, r1
   1e380:	fb02 5304 	mla	r3, r2, r4, r5
   1e384:	0c09      	lsrs	r1, r1, #16
   1e386:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1e38a:	fb02 cc01 	mla	ip, r2, r1, ip
   1e38e:	3001      	adds	r0, #1
   1e390:	b29c      	uxth	r4, r3
   1e392:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   1e396:	4286      	cmp	r6, r0
   1e398:	f84e 4b04 	str.w	r4, [lr], #4
   1e39c:	ea4f 451c 	mov.w	r5, ip, lsr #16
   1e3a0:	dceb      	bgt.n	1e37a <__multadd+0x12>
   1e3a2:	b13d      	cbz	r5, 1e3b4 <__multadd+0x4c>
   1e3a4:	68bb      	ldr	r3, [r7, #8]
   1e3a6:	42b3      	cmp	r3, r6
   1e3a8:	dd07      	ble.n	1e3ba <__multadd+0x52>
   1e3aa:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1e3ae:	3601      	adds	r6, #1
   1e3b0:	615d      	str	r5, [r3, #20]
   1e3b2:	613e      	str	r6, [r7, #16]
   1e3b4:	4638      	mov	r0, r7
   1e3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e3ba:	6879      	ldr	r1, [r7, #4]
   1e3bc:	4640      	mov	r0, r8
   1e3be:	3101      	adds	r1, #1
   1e3c0:	f7ff ffa2 	bl	1e308 <_Balloc>
   1e3c4:	4604      	mov	r4, r0
   1e3c6:	b1b0      	cbz	r0, 1e3f6 <__multadd+0x8e>
   1e3c8:	693a      	ldr	r2, [r7, #16]
   1e3ca:	3202      	adds	r2, #2
   1e3cc:	f107 010c 	add.w	r1, r7, #12
   1e3d0:	0092      	lsls	r2, r2, #2
   1e3d2:	300c      	adds	r0, #12
   1e3d4:	f7f8 f8d6 	bl	16584 <memcpy>
   1e3d8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1e3dc:	687a      	ldr	r2, [r7, #4]
   1e3de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1e3e2:	6039      	str	r1, [r7, #0]
   1e3e4:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1e3e8:	4627      	mov	r7, r4
   1e3ea:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1e3ee:	3601      	adds	r6, #1
   1e3f0:	615d      	str	r5, [r3, #20]
   1e3f2:	613e      	str	r6, [r7, #16]
   1e3f4:	e7de      	b.n	1e3b4 <__multadd+0x4c>
   1e3f6:	4b03      	ldr	r3, [pc, #12]	; (1e404 <__multadd+0x9c>)
   1e3f8:	4803      	ldr	r0, [pc, #12]	; (1e408 <__multadd+0xa0>)
   1e3fa:	4622      	mov	r2, r4
   1e3fc:	21ba      	movs	r1, #186	; 0xba
   1e3fe:	f002 fdb3 	bl	20f68 <__assert_func>
   1e402:	bf00      	nop
   1e404:	20008bbc 	.word	0x20008bbc
   1e408:	20008c28 	.word	0x20008c28

0001e40c <__s2b>:
   1e40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e410:	4617      	mov	r7, r2
   1e412:	4a27      	ldr	r2, [pc, #156]	; (1e4b0 <__s2b+0xa4>)
   1e414:	461e      	mov	r6, r3
   1e416:	3308      	adds	r3, #8
   1e418:	460c      	mov	r4, r1
   1e41a:	2e09      	cmp	r6, #9
   1e41c:	fb82 1203 	smull	r1, r2, r2, r3
   1e420:	ea4f 73e3 	mov.w	r3, r3, asr #31
   1e424:	4605      	mov	r5, r0
   1e426:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1e42a:	dd39      	ble.n	1e4a0 <__s2b+0x94>
   1e42c:	f04f 0c01 	mov.w	ip, #1
   1e430:	2100      	movs	r1, #0
   1e432:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1e436:	4563      	cmp	r3, ip
   1e438:	f101 0101 	add.w	r1, r1, #1
   1e43c:	dcf9      	bgt.n	1e432 <__s2b+0x26>
   1e43e:	4628      	mov	r0, r5
   1e440:	f7ff ff62 	bl	1e308 <_Balloc>
   1e444:	4601      	mov	r1, r0
   1e446:	b368      	cbz	r0, 1e4a4 <__s2b+0x98>
   1e448:	9b08      	ldr	r3, [sp, #32]
   1e44a:	6143      	str	r3, [r0, #20]
   1e44c:	2f09      	cmp	r7, #9
   1e44e:	f04f 0301 	mov.w	r3, #1
   1e452:	6103      	str	r3, [r0, #16]
   1e454:	dc12      	bgt.n	1e47c <__s2b+0x70>
   1e456:	340a      	adds	r4, #10
   1e458:	2709      	movs	r7, #9
   1e45a:	42be      	cmp	r6, r7
   1e45c:	dd0b      	ble.n	1e476 <__s2b+0x6a>
   1e45e:	1bf2      	subs	r2, r6, r7
   1e460:	18a6      	adds	r6, r4, r2
   1e462:	f814 3b01 	ldrb.w	r3, [r4], #1
   1e466:	220a      	movs	r2, #10
   1e468:	3b30      	subs	r3, #48	; 0x30
   1e46a:	4628      	mov	r0, r5
   1e46c:	f7ff ff7c 	bl	1e368 <__multadd>
   1e470:	42a6      	cmp	r6, r4
   1e472:	4601      	mov	r1, r0
   1e474:	d1f5      	bne.n	1e462 <__s2b+0x56>
   1e476:	4608      	mov	r0, r1
   1e478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e47c:	f104 0909 	add.w	r9, r4, #9
   1e480:	46c8      	mov	r8, r9
   1e482:	443c      	add	r4, r7
   1e484:	f818 3b01 	ldrb.w	r3, [r8], #1
   1e488:	220a      	movs	r2, #10
   1e48a:	3b30      	subs	r3, #48	; 0x30
   1e48c:	4628      	mov	r0, r5
   1e48e:	f7ff ff6b 	bl	1e368 <__multadd>
   1e492:	45a0      	cmp	r8, r4
   1e494:	4601      	mov	r1, r0
   1e496:	d1f5      	bne.n	1e484 <__s2b+0x78>
   1e498:	f1a7 0408 	sub.w	r4, r7, #8
   1e49c:	444c      	add	r4, r9
   1e49e:	e7dc      	b.n	1e45a <__s2b+0x4e>
   1e4a0:	2100      	movs	r1, #0
   1e4a2:	e7cc      	b.n	1e43e <__s2b+0x32>
   1e4a4:	460a      	mov	r2, r1
   1e4a6:	4b03      	ldr	r3, [pc, #12]	; (1e4b4 <__s2b+0xa8>)
   1e4a8:	4803      	ldr	r0, [pc, #12]	; (1e4b8 <__s2b+0xac>)
   1e4aa:	21d3      	movs	r1, #211	; 0xd3
   1e4ac:	f002 fd5c 	bl	20f68 <__assert_func>
   1e4b0:	38e38e39 	.word	0x38e38e39
   1e4b4:	20008bbc 	.word	0x20008bbc
   1e4b8:	20008c28 	.word	0x20008c28

0001e4bc <__hi0bits>:
   1e4bc:	0c03      	lsrs	r3, r0, #16
   1e4be:	041b      	lsls	r3, r3, #16
   1e4c0:	b9d3      	cbnz	r3, 1e4f8 <__hi0bits+0x3c>
   1e4c2:	0400      	lsls	r0, r0, #16
   1e4c4:	2310      	movs	r3, #16
   1e4c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   1e4ca:	bf04      	itt	eq
   1e4cc:	0200      	lsleq	r0, r0, #8
   1e4ce:	3308      	addeq	r3, #8
   1e4d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   1e4d4:	bf04      	itt	eq
   1e4d6:	0100      	lsleq	r0, r0, #4
   1e4d8:	3304      	addeq	r3, #4
   1e4da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   1e4de:	bf04      	itt	eq
   1e4e0:	0080      	lsleq	r0, r0, #2
   1e4e2:	3302      	addeq	r3, #2
   1e4e4:	2800      	cmp	r0, #0
   1e4e6:	db05      	blt.n	1e4f4 <__hi0bits+0x38>
   1e4e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   1e4ec:	f103 0301 	add.w	r3, r3, #1
   1e4f0:	bf08      	it	eq
   1e4f2:	2320      	moveq	r3, #32
   1e4f4:	4618      	mov	r0, r3
   1e4f6:	4770      	bx	lr
   1e4f8:	2300      	movs	r3, #0
   1e4fa:	e7e4      	b.n	1e4c6 <__hi0bits+0xa>

0001e4fc <__lo0bits>:
   1e4fc:	6803      	ldr	r3, [r0, #0]
   1e4fe:	f013 0207 	ands.w	r2, r3, #7
   1e502:	d008      	beq.n	1e516 <__lo0bits+0x1a>
   1e504:	07d9      	lsls	r1, r3, #31
   1e506:	d41f      	bmi.n	1e548 <__lo0bits+0x4c>
   1e508:	079a      	lsls	r2, r3, #30
   1e50a:	d522      	bpl.n	1e552 <__lo0bits+0x56>
   1e50c:	085b      	lsrs	r3, r3, #1
   1e50e:	6003      	str	r3, [r0, #0]
   1e510:	2201      	movs	r2, #1
   1e512:	4610      	mov	r0, r2
   1e514:	4770      	bx	lr
   1e516:	b299      	uxth	r1, r3
   1e518:	b909      	cbnz	r1, 1e51e <__lo0bits+0x22>
   1e51a:	0c1b      	lsrs	r3, r3, #16
   1e51c:	2210      	movs	r2, #16
   1e51e:	b2d9      	uxtb	r1, r3
   1e520:	b909      	cbnz	r1, 1e526 <__lo0bits+0x2a>
   1e522:	3208      	adds	r2, #8
   1e524:	0a1b      	lsrs	r3, r3, #8
   1e526:	0719      	lsls	r1, r3, #28
   1e528:	bf04      	itt	eq
   1e52a:	091b      	lsreq	r3, r3, #4
   1e52c:	3204      	addeq	r2, #4
   1e52e:	0799      	lsls	r1, r3, #30
   1e530:	bf04      	itt	eq
   1e532:	089b      	lsreq	r3, r3, #2
   1e534:	3202      	addeq	r2, #2
   1e536:	07d9      	lsls	r1, r3, #31
   1e538:	d403      	bmi.n	1e542 <__lo0bits+0x46>
   1e53a:	085b      	lsrs	r3, r3, #1
   1e53c:	f102 0201 	add.w	r2, r2, #1
   1e540:	d005      	beq.n	1e54e <__lo0bits+0x52>
   1e542:	6003      	str	r3, [r0, #0]
   1e544:	4610      	mov	r0, r2
   1e546:	4770      	bx	lr
   1e548:	2200      	movs	r2, #0
   1e54a:	4610      	mov	r0, r2
   1e54c:	4770      	bx	lr
   1e54e:	2220      	movs	r2, #32
   1e550:	e7df      	b.n	1e512 <__lo0bits+0x16>
   1e552:	089b      	lsrs	r3, r3, #2
   1e554:	2202      	movs	r2, #2
   1e556:	6003      	str	r3, [r0, #0]
   1e558:	4610      	mov	r0, r2
   1e55a:	4770      	bx	lr

0001e55c <__i2b>:
   1e55c:	b538      	push	{r3, r4, r5, lr}
   1e55e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e560:	4604      	mov	r4, r0
   1e562:	460d      	mov	r5, r1
   1e564:	b14b      	cbz	r3, 1e57a <__i2b+0x1e>
   1e566:	6858      	ldr	r0, [r3, #4]
   1e568:	b1b0      	cbz	r0, 1e598 <__i2b+0x3c>
   1e56a:	6802      	ldr	r2, [r0, #0]
   1e56c:	605a      	str	r2, [r3, #4]
   1e56e:	2200      	movs	r2, #0
   1e570:	2301      	movs	r3, #1
   1e572:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1e576:	60c2      	str	r2, [r0, #12]
   1e578:	bd38      	pop	{r3, r4, r5, pc}
   1e57a:	2221      	movs	r2, #33	; 0x21
   1e57c:	2104      	movs	r1, #4
   1e57e:	f7fb f909 	bl	19794 <_calloc_r>
   1e582:	4603      	mov	r3, r0
   1e584:	6460      	str	r0, [r4, #68]	; 0x44
   1e586:	2800      	cmp	r0, #0
   1e588:	d1ed      	bne.n	1e566 <__i2b+0xa>
   1e58a:	4b09      	ldr	r3, [pc, #36]	; (1e5b0 <__i2b+0x54>)
   1e58c:	4809      	ldr	r0, [pc, #36]	; (1e5b4 <__i2b+0x58>)
   1e58e:	2200      	movs	r2, #0
   1e590:	f240 1145 	movw	r1, #325	; 0x145
   1e594:	f002 fce8 	bl	20f68 <__assert_func>
   1e598:	221c      	movs	r2, #28
   1e59a:	2101      	movs	r1, #1
   1e59c:	4620      	mov	r0, r4
   1e59e:	f7fb f8f9 	bl	19794 <_calloc_r>
   1e5a2:	2800      	cmp	r0, #0
   1e5a4:	d0f1      	beq.n	1e58a <__i2b+0x2e>
   1e5a6:	2201      	movs	r2, #1
   1e5a8:	2302      	movs	r3, #2
   1e5aa:	e9c0 2301 	strd	r2, r3, [r0, #4]
   1e5ae:	e7de      	b.n	1e56e <__i2b+0x12>
   1e5b0:	20008bbc 	.word	0x20008bbc
   1e5b4:	20008c28 	.word	0x20008c28

0001e5b8 <__multiply>:
   1e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5bc:	690e      	ldr	r6, [r1, #16]
   1e5be:	6915      	ldr	r5, [r2, #16]
   1e5c0:	42ae      	cmp	r6, r5
   1e5c2:	b085      	sub	sp, #20
   1e5c4:	4688      	mov	r8, r1
   1e5c6:	4614      	mov	r4, r2
   1e5c8:	db05      	blt.n	1e5d6 <__multiply+0x1e>
   1e5ca:	462a      	mov	r2, r5
   1e5cc:	4623      	mov	r3, r4
   1e5ce:	4635      	mov	r5, r6
   1e5d0:	460c      	mov	r4, r1
   1e5d2:	4616      	mov	r6, r2
   1e5d4:	4698      	mov	r8, r3
   1e5d6:	68a3      	ldr	r3, [r4, #8]
   1e5d8:	6861      	ldr	r1, [r4, #4]
   1e5da:	19af      	adds	r7, r5, r6
   1e5dc:	42bb      	cmp	r3, r7
   1e5de:	bfb8      	it	lt
   1e5e0:	3101      	addlt	r1, #1
   1e5e2:	f7ff fe91 	bl	1e308 <_Balloc>
   1e5e6:	9001      	str	r0, [sp, #4]
   1e5e8:	2800      	cmp	r0, #0
   1e5ea:	f000 8087 	beq.w	1e6fc <__multiply+0x144>
   1e5ee:	9b01      	ldr	r3, [sp, #4]
   1e5f0:	f103 0914 	add.w	r9, r3, #20
   1e5f4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   1e5f8:	45d1      	cmp	r9, sl
   1e5fa:	d205      	bcs.n	1e608 <__multiply+0x50>
   1e5fc:	464b      	mov	r3, r9
   1e5fe:	2200      	movs	r2, #0
   1e600:	f843 2b04 	str.w	r2, [r3], #4
   1e604:	459a      	cmp	sl, r3
   1e606:	d8fb      	bhi.n	1e600 <__multiply+0x48>
   1e608:	f108 0814 	add.w	r8, r8, #20
   1e60c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   1e610:	f104 0314 	add.w	r3, r4, #20
   1e614:	45d8      	cmp	r8, fp
   1e616:	461a      	mov	r2, r3
   1e618:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1e61c:	d25f      	bcs.n	1e6de <__multiply+0x126>
   1e61e:	1b2b      	subs	r3, r5, r4
   1e620:	3b15      	subs	r3, #21
   1e622:	f023 0303 	bic.w	r3, r3, #3
   1e626:	3304      	adds	r3, #4
   1e628:	3415      	adds	r4, #21
   1e62a:	42a5      	cmp	r5, r4
   1e62c:	bf38      	it	cc
   1e62e:	2304      	movcc	r3, #4
   1e630:	e9cd a702 	strd	sl, r7, [sp, #8]
   1e634:	46ac      	mov	ip, r5
   1e636:	461f      	mov	r7, r3
   1e638:	4692      	mov	sl, r2
   1e63a:	e005      	b.n	1e648 <__multiply+0x90>
   1e63c:	0c09      	lsrs	r1, r1, #16
   1e63e:	d129      	bne.n	1e694 <__multiply+0xdc>
   1e640:	45c3      	cmp	fp, r8
   1e642:	f109 0904 	add.w	r9, r9, #4
   1e646:	d948      	bls.n	1e6da <__multiply+0x122>
   1e648:	f858 1b04 	ldr.w	r1, [r8], #4
   1e64c:	b28d      	uxth	r5, r1
   1e64e:	2d00      	cmp	r5, #0
   1e650:	d0f4      	beq.n	1e63c <__multiply+0x84>
   1e652:	4656      	mov	r6, sl
   1e654:	464c      	mov	r4, r9
   1e656:	2300      	movs	r3, #0
   1e658:	f856 1b04 	ldr.w	r1, [r6], #4
   1e65c:	6822      	ldr	r2, [r4, #0]
   1e65e:	fa1f fe81 	uxth.w	lr, r1
   1e662:	b290      	uxth	r0, r2
   1e664:	0c09      	lsrs	r1, r1, #16
   1e666:	fb05 000e 	mla	r0, r5, lr, r0
   1e66a:	0c12      	lsrs	r2, r2, #16
   1e66c:	4403      	add	r3, r0
   1e66e:	fb05 2201 	mla	r2, r5, r1, r2
   1e672:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1e676:	b29b      	uxth	r3, r3
   1e678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1e67c:	45b4      	cmp	ip, r6
   1e67e:	f844 3b04 	str.w	r3, [r4], #4
   1e682:	ea4f 4312 	mov.w	r3, r2, lsr #16
   1e686:	d8e7      	bhi.n	1e658 <__multiply+0xa0>
   1e688:	f849 3007 	str.w	r3, [r9, r7]
   1e68c:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1e690:	0c09      	lsrs	r1, r1, #16
   1e692:	d0d5      	beq.n	1e640 <__multiply+0x88>
   1e694:	f8d9 3000 	ldr.w	r3, [r9]
   1e698:	4650      	mov	r0, sl
   1e69a:	461a      	mov	r2, r3
   1e69c:	464c      	mov	r4, r9
   1e69e:	2600      	movs	r6, #0
   1e6a0:	8805      	ldrh	r5, [r0, #0]
   1e6a2:	0c12      	lsrs	r2, r2, #16
   1e6a4:	fb01 2205 	mla	r2, r1, r5, r2
   1e6a8:	4416      	add	r6, r2
   1e6aa:	b29b      	uxth	r3, r3
   1e6ac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1e6b0:	f844 3b04 	str.w	r3, [r4], #4
   1e6b4:	f850 5b04 	ldr.w	r5, [r0], #4
   1e6b8:	6822      	ldr	r2, [r4, #0]
   1e6ba:	0c2d      	lsrs	r5, r5, #16
   1e6bc:	b293      	uxth	r3, r2
   1e6be:	fb01 3305 	mla	r3, r1, r5, r3
   1e6c2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   1e6c6:	4584      	cmp	ip, r0
   1e6c8:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1e6cc:	d8e8      	bhi.n	1e6a0 <__multiply+0xe8>
   1e6ce:	45c3      	cmp	fp, r8
   1e6d0:	f849 3007 	str.w	r3, [r9, r7]
   1e6d4:	f109 0904 	add.w	r9, r9, #4
   1e6d8:	d8b6      	bhi.n	1e648 <__multiply+0x90>
   1e6da:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   1e6de:	2f00      	cmp	r7, #0
   1e6e0:	dc02      	bgt.n	1e6e8 <__multiply+0x130>
   1e6e2:	e005      	b.n	1e6f0 <__multiply+0x138>
   1e6e4:	3f01      	subs	r7, #1
   1e6e6:	d003      	beq.n	1e6f0 <__multiply+0x138>
   1e6e8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   1e6ec:	2b00      	cmp	r3, #0
   1e6ee:	d0f9      	beq.n	1e6e4 <__multiply+0x12c>
   1e6f0:	9b01      	ldr	r3, [sp, #4]
   1e6f2:	4618      	mov	r0, r3
   1e6f4:	611f      	str	r7, [r3, #16]
   1e6f6:	b005      	add	sp, #20
   1e6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6fc:	4b03      	ldr	r3, [pc, #12]	; (1e70c <__multiply+0x154>)
   1e6fe:	4804      	ldr	r0, [pc, #16]	; (1e710 <__multiply+0x158>)
   1e700:	9a01      	ldr	r2, [sp, #4]
   1e702:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1e706:	f002 fc2f 	bl	20f68 <__assert_func>
   1e70a:	bf00      	nop
   1e70c:	20008bbc 	.word	0x20008bbc
   1e710:	20008c28 	.word	0x20008c28

0001e714 <__pow5mult>:
   1e714:	f012 0303 	ands.w	r3, r2, #3
   1e718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e71c:	4614      	mov	r4, r2
   1e71e:	4606      	mov	r6, r0
   1e720:	d132      	bne.n	1e788 <__pow5mult+0x74>
   1e722:	460d      	mov	r5, r1
   1e724:	10a4      	asrs	r4, r4, #2
   1e726:	d020      	beq.n	1e76a <__pow5mult+0x56>
   1e728:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   1e72c:	f1b8 0f00 	cmp.w	r8, #0
   1e730:	d033      	beq.n	1e79a <__pow5mult+0x86>
   1e732:	07e3      	lsls	r3, r4, #31
   1e734:	f04f 0700 	mov.w	r7, #0
   1e738:	d407      	bmi.n	1e74a <__pow5mult+0x36>
   1e73a:	1064      	asrs	r4, r4, #1
   1e73c:	d015      	beq.n	1e76a <__pow5mult+0x56>
   1e73e:	f8d8 0000 	ldr.w	r0, [r8]
   1e742:	b1a8      	cbz	r0, 1e770 <__pow5mult+0x5c>
   1e744:	4680      	mov	r8, r0
   1e746:	07e3      	lsls	r3, r4, #31
   1e748:	d5f7      	bpl.n	1e73a <__pow5mult+0x26>
   1e74a:	4642      	mov	r2, r8
   1e74c:	4629      	mov	r1, r5
   1e74e:	4630      	mov	r0, r6
   1e750:	f7ff ff32 	bl	1e5b8 <__multiply>
   1e754:	b1b5      	cbz	r5, 1e784 <__pow5mult+0x70>
   1e756:	6869      	ldr	r1, [r5, #4]
   1e758:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1e75a:	1064      	asrs	r4, r4, #1
   1e75c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   1e760:	602a      	str	r2, [r5, #0]
   1e762:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   1e766:	4605      	mov	r5, r0
   1e768:	d1e9      	bne.n	1e73e <__pow5mult+0x2a>
   1e76a:	4628      	mov	r0, r5
   1e76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e770:	4642      	mov	r2, r8
   1e772:	4641      	mov	r1, r8
   1e774:	4630      	mov	r0, r6
   1e776:	f7ff ff1f 	bl	1e5b8 <__multiply>
   1e77a:	f8c8 0000 	str.w	r0, [r8]
   1e77e:	6007      	str	r7, [r0, #0]
   1e780:	4680      	mov	r8, r0
   1e782:	e7e0      	b.n	1e746 <__pow5mult+0x32>
   1e784:	4605      	mov	r5, r0
   1e786:	e7d8      	b.n	1e73a <__pow5mult+0x26>
   1e788:	3b01      	subs	r3, #1
   1e78a:	4a0f      	ldr	r2, [pc, #60]	; (1e7c8 <__pow5mult+0xb4>)
   1e78c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1e790:	2300      	movs	r3, #0
   1e792:	f7ff fde9 	bl	1e368 <__multadd>
   1e796:	4605      	mov	r5, r0
   1e798:	e7c4      	b.n	1e724 <__pow5mult+0x10>
   1e79a:	2101      	movs	r1, #1
   1e79c:	4630      	mov	r0, r6
   1e79e:	f7ff fdb3 	bl	1e308 <_Balloc>
   1e7a2:	4680      	mov	r8, r0
   1e7a4:	b140      	cbz	r0, 1e7b8 <__pow5mult+0xa4>
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	f240 2271 	movw	r2, #625	; 0x271
   1e7ac:	e9c0 3204 	strd	r3, r2, [r0, #16]
   1e7b0:	2300      	movs	r3, #0
   1e7b2:	6430      	str	r0, [r6, #64]	; 0x40
   1e7b4:	6003      	str	r3, [r0, #0]
   1e7b6:	e7bc      	b.n	1e732 <__pow5mult+0x1e>
   1e7b8:	4b04      	ldr	r3, [pc, #16]	; (1e7cc <__pow5mult+0xb8>)
   1e7ba:	4805      	ldr	r0, [pc, #20]	; (1e7d0 <__pow5mult+0xbc>)
   1e7bc:	4642      	mov	r2, r8
   1e7be:	f240 1145 	movw	r1, #325	; 0x145
   1e7c2:	f002 fbd1 	bl	20f68 <__assert_func>
   1e7c6:	bf00      	nop
   1e7c8:	20001cc8 	.word	0x20001cc8
   1e7cc:	20008bbc 	.word	0x20008bbc
   1e7d0:	20008c28 	.word	0x20008c28

0001e7d4 <__lshift>:
   1e7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e7d8:	460d      	mov	r5, r1
   1e7da:	4614      	mov	r4, r2
   1e7dc:	692f      	ldr	r7, [r5, #16]
   1e7de:	68ab      	ldr	r3, [r5, #8]
   1e7e0:	6849      	ldr	r1, [r1, #4]
   1e7e2:	eb07 1762 	add.w	r7, r7, r2, asr #5
   1e7e6:	1c7e      	adds	r6, r7, #1
   1e7e8:	429e      	cmp	r6, r3
   1e7ea:	4680      	mov	r8, r0
   1e7ec:	ea4f 1962 	mov.w	r9, r2, asr #5
   1e7f0:	dd04      	ble.n	1e7fc <__lshift+0x28>
   1e7f2:	005b      	lsls	r3, r3, #1
   1e7f4:	429e      	cmp	r6, r3
   1e7f6:	f101 0101 	add.w	r1, r1, #1
   1e7fa:	dcfa      	bgt.n	1e7f2 <__lshift+0x1e>
   1e7fc:	4640      	mov	r0, r8
   1e7fe:	f7ff fd83 	bl	1e308 <_Balloc>
   1e802:	4684      	mov	ip, r0
   1e804:	2800      	cmp	r0, #0
   1e806:	d052      	beq.n	1e8ae <__lshift+0xda>
   1e808:	f1b9 0f00 	cmp.w	r9, #0
   1e80c:	f100 0214 	add.w	r2, r0, #20
   1e810:	dd0e      	ble.n	1e830 <__lshift+0x5c>
   1e812:	f109 0105 	add.w	r1, r9, #5
   1e816:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   1e81a:	4613      	mov	r3, r2
   1e81c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e820:	2000      	movs	r0, #0
   1e822:	f843 0b04 	str.w	r0, [r3], #4
   1e826:	428b      	cmp	r3, r1
   1e828:	d1fb      	bne.n	1e822 <__lshift+0x4e>
   1e82a:	f1ae 0314 	sub.w	r3, lr, #20
   1e82e:	441a      	add	r2, r3
   1e830:	6929      	ldr	r1, [r5, #16]
   1e832:	f105 0314 	add.w	r3, r5, #20
   1e836:	f014 0e1f 	ands.w	lr, r4, #31
   1e83a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1e83e:	d02e      	beq.n	1e89e <__lshift+0xca>
   1e840:	f1ce 0920 	rsb	r9, lr, #32
   1e844:	4610      	mov	r0, r2
   1e846:	f04f 0a00 	mov.w	sl, #0
   1e84a:	681c      	ldr	r4, [r3, #0]
   1e84c:	fa04 f40e 	lsl.w	r4, r4, lr
   1e850:	ea44 040a 	orr.w	r4, r4, sl
   1e854:	f840 4b04 	str.w	r4, [r0], #4
   1e858:	f853 4b04 	ldr.w	r4, [r3], #4
   1e85c:	4299      	cmp	r1, r3
   1e85e:	fa24 fa09 	lsr.w	sl, r4, r9
   1e862:	d8f2      	bhi.n	1e84a <__lshift+0x76>
   1e864:	1b4b      	subs	r3, r1, r5
   1e866:	3b15      	subs	r3, #21
   1e868:	f023 0303 	bic.w	r3, r3, #3
   1e86c:	3304      	adds	r3, #4
   1e86e:	f105 0015 	add.w	r0, r5, #21
   1e872:	4281      	cmp	r1, r0
   1e874:	bf38      	it	cc
   1e876:	2304      	movcc	r3, #4
   1e878:	f1ba 0f00 	cmp.w	sl, #0
   1e87c:	bf18      	it	ne
   1e87e:	4637      	movne	r7, r6
   1e880:	f842 a003 	str.w	sl, [r2, r3]
   1e884:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1e888:	686a      	ldr	r2, [r5, #4]
   1e88a:	f8cc 7010 	str.w	r7, [ip, #16]
   1e88e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1e892:	6029      	str	r1, [r5, #0]
   1e894:	4660      	mov	r0, ip
   1e896:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1e89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e89e:	3a04      	subs	r2, #4
   1e8a0:	f853 0b04 	ldr.w	r0, [r3], #4
   1e8a4:	f842 0f04 	str.w	r0, [r2, #4]!
   1e8a8:	4299      	cmp	r1, r3
   1e8aa:	d8f9      	bhi.n	1e8a0 <__lshift+0xcc>
   1e8ac:	e7ea      	b.n	1e884 <__lshift+0xb0>
   1e8ae:	4b03      	ldr	r3, [pc, #12]	; (1e8bc <__lshift+0xe8>)
   1e8b0:	4803      	ldr	r0, [pc, #12]	; (1e8c0 <__lshift+0xec>)
   1e8b2:	4662      	mov	r2, ip
   1e8b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   1e8b8:	f002 fb56 	bl	20f68 <__assert_func>
   1e8bc:	20008bbc 	.word	0x20008bbc
   1e8c0:	20008c28 	.word	0x20008c28

0001e8c4 <__mcmp>:
   1e8c4:	690b      	ldr	r3, [r1, #16]
   1e8c6:	4684      	mov	ip, r0
   1e8c8:	6900      	ldr	r0, [r0, #16]
   1e8ca:	1ac0      	subs	r0, r0, r3
   1e8cc:	d116      	bne.n	1e8fc <__mcmp+0x38>
   1e8ce:	f10c 0c14 	add.w	ip, ip, #20
   1e8d2:	3114      	adds	r1, #20
   1e8d4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   1e8d8:	b410      	push	{r4}
   1e8da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1e8de:	e001      	b.n	1e8e4 <__mcmp+0x20>
   1e8e0:	4594      	cmp	ip, r2
   1e8e2:	d208      	bcs.n	1e8f6 <__mcmp+0x32>
   1e8e4:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1e8e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1e8ec:	428c      	cmp	r4, r1
   1e8ee:	d0f7      	beq.n	1e8e0 <__mcmp+0x1c>
   1e8f0:	d205      	bcs.n	1e8fe <__mcmp+0x3a>
   1e8f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e8fa:	4770      	bx	lr
   1e8fc:	4770      	bx	lr
   1e8fe:	2001      	movs	r0, #1
   1e900:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e904:	4770      	bx	lr
   1e906:	bf00      	nop

0001e908 <__mdiff>:
   1e908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e90c:	690f      	ldr	r7, [r1, #16]
   1e90e:	6913      	ldr	r3, [r2, #16]
   1e910:	1aff      	subs	r7, r7, r3
   1e912:	2f00      	cmp	r7, #0
   1e914:	460e      	mov	r6, r1
   1e916:	4690      	mov	r8, r2
   1e918:	d17f      	bne.n	1ea1a <__mdiff+0x112>
   1e91a:	f101 0514 	add.w	r5, r1, #20
   1e91e:	3214      	adds	r2, #20
   1e920:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1e924:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1e928:	e001      	b.n	1e92e <__mdiff+0x26>
   1e92a:	429d      	cmp	r5, r3
   1e92c:	d278      	bcs.n	1ea20 <__mdiff+0x118>
   1e92e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1e932:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1e936:	42a1      	cmp	r1, r4
   1e938:	d0f7      	beq.n	1e92a <__mdiff+0x22>
   1e93a:	d369      	bcc.n	1ea10 <__mdiff+0x108>
   1e93c:	6871      	ldr	r1, [r6, #4]
   1e93e:	f7ff fce3 	bl	1e308 <_Balloc>
   1e942:	4681      	mov	r9, r0
   1e944:	2800      	cmp	r0, #0
   1e946:	d077      	beq.n	1ea38 <__mdiff+0x130>
   1e948:	6935      	ldr	r5, [r6, #16]
   1e94a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1e94e:	60c7      	str	r7, [r0, #12]
   1e950:	f108 0e14 	add.w	lr, r8, #20
   1e954:	f106 0014 	add.w	r0, r6, #20
   1e958:	f109 0a14 	add.w	sl, r9, #20
   1e95c:	f106 0110 	add.w	r1, r6, #16
   1e960:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   1e964:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   1e968:	4656      	mov	r6, sl
   1e96a:	f04f 0c00 	mov.w	ip, #0
   1e96e:	f85e 4b04 	ldr.w	r4, [lr], #4
   1e972:	f851 bf04 	ldr.w	fp, [r1, #4]!
   1e976:	b2a3      	uxth	r3, r4
   1e978:	fa1c fc8b 	uxtah	ip, ip, fp
   1e97c:	ebac 0303 	sub.w	r3, ip, r3
   1e980:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   1e984:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   1e988:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   1e98c:	b29b      	uxth	r3, r3
   1e98e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1e992:	4572      	cmp	r2, lr
   1e994:	f846 3b04 	str.w	r3, [r6], #4
   1e998:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   1e99c:	d8e7      	bhi.n	1e96e <__mdiff+0x66>
   1e99e:	eba2 0108 	sub.w	r1, r2, r8
   1e9a2:	3915      	subs	r1, #21
   1e9a4:	f108 0815 	add.w	r8, r8, #21
   1e9a8:	4542      	cmp	r2, r8
   1e9aa:	f021 0403 	bic.w	r4, r1, #3
   1e9ae:	f104 0404 	add.w	r4, r4, #4
   1e9b2:	bf38      	it	cc
   1e9b4:	2404      	movcc	r4, #4
   1e9b6:	4420      	add	r0, r4
   1e9b8:	f021 0203 	bic.w	r2, r1, #3
   1e9bc:	bf38      	it	cc
   1e9be:	2200      	movcc	r2, #0
   1e9c0:	4287      	cmp	r7, r0
   1e9c2:	4452      	add	r2, sl
   1e9c4:	4454      	add	r4, sl
   1e9c6:	d918      	bls.n	1e9fa <__mdiff+0xf2>
   1e9c8:	4626      	mov	r6, r4
   1e9ca:	4601      	mov	r1, r0
   1e9cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1e9d0:	fa1c fc83 	uxtah	ip, ip, r3
   1e9d4:	ea4f 422c 	mov.w	r2, ip, asr #16
   1e9d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1e9dc:	fa1f fc8c 	uxth.w	ip, ip
   1e9e0:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   1e9e4:	428f      	cmp	r7, r1
   1e9e6:	f846 3b04 	str.w	r3, [r6], #4
   1e9ea:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1e9ee:	d8ed      	bhi.n	1e9cc <__mdiff+0xc4>
   1e9f0:	3f01      	subs	r7, #1
   1e9f2:	1a3f      	subs	r7, r7, r0
   1e9f4:	f027 0703 	bic.w	r7, r7, #3
   1e9f8:	19e2      	adds	r2, r4, r7
   1e9fa:	b923      	cbnz	r3, 1ea06 <__mdiff+0xfe>
   1e9fc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1ea00:	3d01      	subs	r5, #1
   1ea02:	2b00      	cmp	r3, #0
   1ea04:	d0fa      	beq.n	1e9fc <__mdiff+0xf4>
   1ea06:	f8c9 5010 	str.w	r5, [r9, #16]
   1ea0a:	4648      	mov	r0, r9
   1ea0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea10:	4633      	mov	r3, r6
   1ea12:	2701      	movs	r7, #1
   1ea14:	4646      	mov	r6, r8
   1ea16:	4698      	mov	r8, r3
   1ea18:	e790      	b.n	1e93c <__mdiff+0x34>
   1ea1a:	dbf9      	blt.n	1ea10 <__mdiff+0x108>
   1ea1c:	2700      	movs	r7, #0
   1ea1e:	e78d      	b.n	1e93c <__mdiff+0x34>
   1ea20:	2100      	movs	r1, #0
   1ea22:	f7ff fc71 	bl	1e308 <_Balloc>
   1ea26:	4681      	mov	r9, r0
   1ea28:	b168      	cbz	r0, 1ea46 <__mdiff+0x13e>
   1ea2a:	2201      	movs	r2, #1
   1ea2c:	2300      	movs	r3, #0
   1ea2e:	e9c9 2304 	strd	r2, r3, [r9, #16]
   1ea32:	4648      	mov	r0, r9
   1ea34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea38:	4b06      	ldr	r3, [pc, #24]	; (1ea54 <__mdiff+0x14c>)
   1ea3a:	4807      	ldr	r0, [pc, #28]	; (1ea58 <__mdiff+0x150>)
   1ea3c:	464a      	mov	r2, r9
   1ea3e:	f240 2145 	movw	r1, #581	; 0x245
   1ea42:	f002 fa91 	bl	20f68 <__assert_func>
   1ea46:	4b03      	ldr	r3, [pc, #12]	; (1ea54 <__mdiff+0x14c>)
   1ea48:	4803      	ldr	r0, [pc, #12]	; (1ea58 <__mdiff+0x150>)
   1ea4a:	464a      	mov	r2, r9
   1ea4c:	f240 2137 	movw	r1, #567	; 0x237
   1ea50:	f002 fa8a 	bl	20f68 <__assert_func>
   1ea54:	20008bbc 	.word	0x20008bbc
   1ea58:	20008c28 	.word	0x20008c28

0001ea5c <__ulp>:
   1ea5c:	b082      	sub	sp, #8
   1ea5e:	ed8d 0b00 	vstr	d0, [sp]
   1ea62:	4b16      	ldr	r3, [pc, #88]	; (1eabc <__ulp+0x60>)
   1ea64:	9a01      	ldr	r2, [sp, #4]
   1ea66:	4013      	ands	r3, r2
   1ea68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   1ea6c:	2b00      	cmp	r3, #0
   1ea6e:	dd06      	ble.n	1ea7e <__ulp+0x22>
   1ea70:	2200      	movs	r2, #0
   1ea72:	4619      	mov	r1, r3
   1ea74:	4610      	mov	r0, r2
   1ea76:	ec41 0b10 	vmov	d0, r0, r1
   1ea7a:	b002      	add	sp, #8
   1ea7c:	4770      	bx	lr
   1ea7e:	425b      	negs	r3, r3
   1ea80:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   1ea84:	ea4f 5223 	mov.w	r2, r3, asr #20
   1ea88:	da09      	bge.n	1ea9e <__ulp+0x42>
   1ea8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1ea8e:	4113      	asrs	r3, r2
   1ea90:	2200      	movs	r2, #0
   1ea92:	4619      	mov	r1, r3
   1ea94:	4610      	mov	r0, r2
   1ea96:	ec41 0b10 	vmov	d0, r0, r1
   1ea9a:	b002      	add	sp, #8
   1ea9c:	4770      	bx	lr
   1ea9e:	f1a2 0314 	sub.w	r3, r2, #20
   1eaa2:	2b1e      	cmp	r3, #30
   1eaa4:	bfda      	itte	le
   1eaa6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1eaaa:	40da      	lsrle	r2, r3
   1eaac:	2201      	movgt	r2, #1
   1eaae:	2300      	movs	r3, #0
   1eab0:	4619      	mov	r1, r3
   1eab2:	4610      	mov	r0, r2
   1eab4:	ec41 0b10 	vmov	d0, r0, r1
   1eab8:	b002      	add	sp, #8
   1eaba:	4770      	bx	lr
   1eabc:	7ff00000 	.word	0x7ff00000

0001eac0 <__b2d>:
   1eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eac2:	6904      	ldr	r4, [r0, #16]
   1eac4:	f100 0614 	add.w	r6, r0, #20
   1eac8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   1eacc:	1f27      	subs	r7, r4, #4
   1eace:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1ead2:	4628      	mov	r0, r5
   1ead4:	f7ff fcf2 	bl	1e4bc <__hi0bits>
   1ead8:	f1c0 0320 	rsb	r3, r0, #32
   1eadc:	280a      	cmp	r0, #10
   1eade:	600b      	str	r3, [r1, #0]
   1eae0:	dd1b      	ble.n	1eb1a <__b2d+0x5a>
   1eae2:	42be      	cmp	r6, r7
   1eae4:	d20b      	bcs.n	1eafe <__b2d+0x3e>
   1eae6:	380b      	subs	r0, #11
   1eae8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1eaec:	d12e      	bne.n	1eb4c <__b2d+0x8c>
   1eaee:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   1eaf2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1eaf6:	460a      	mov	r2, r1
   1eaf8:	ec43 2b10 	vmov	d0, r2, r3
   1eafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eafe:	f1b0 010b 	subs.w	r1, r0, #11
   1eb02:	d0f4      	beq.n	1eaee <__b2d+0x2e>
   1eb04:	fa05 f101 	lsl.w	r1, r5, r1
   1eb08:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1eb0c:	2100      	movs	r1, #0
   1eb0e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1eb12:	460a      	mov	r2, r1
   1eb14:	ec43 2b10 	vmov	d0, r2, r3
   1eb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb1a:	f1c0 0c0b 	rsb	ip, r0, #11
   1eb1e:	fa25 f10c 	lsr.w	r1, r5, ip
   1eb22:	42be      	cmp	r6, r7
   1eb24:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1eb28:	bf38      	it	cc
   1eb2a:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   1eb2e:	f100 0015 	add.w	r0, r0, #21
   1eb32:	bf34      	ite	cc
   1eb34:	fa21 f10c 	lsrcc.w	r1, r1, ip
   1eb38:	2100      	movcs	r1, #0
   1eb3a:	fa05 f000 	lsl.w	r0, r5, r0
   1eb3e:	4301      	orrs	r1, r0
   1eb40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1eb44:	460a      	mov	r2, r1
   1eb46:	ec43 2b10 	vmov	d0, r2, r3
   1eb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb4c:	f1c0 0c20 	rsb	ip, r0, #32
   1eb50:	4085      	lsls	r5, r0
   1eb52:	fa21 f30c 	lsr.w	r3, r1, ip
   1eb56:	ea45 0703 	orr.w	r7, r5, r3
   1eb5a:	f1a4 0508 	sub.w	r5, r4, #8
   1eb5e:	42ae      	cmp	r6, r5
   1eb60:	fa01 f100 	lsl.w	r1, r1, r0
   1eb64:	bf3c      	itt	cc
   1eb66:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   1eb6a:	fa20 f00c 	lsrcc.w	r0, r0, ip
   1eb6e:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   1eb72:	bf38      	it	cc
   1eb74:	4301      	orrcc	r1, r0
   1eb76:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1eb7a:	460a      	mov	r2, r1
   1eb7c:	ec43 2b10 	vmov	d0, r2, r3
   1eb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb82:	bf00      	nop

0001eb84 <__d2b>:
   1eb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eb88:	4688      	mov	r8, r1
   1eb8a:	b083      	sub	sp, #12
   1eb8c:	2101      	movs	r1, #1
   1eb8e:	ec57 6b10 	vmov	r6, r7, d0
   1eb92:	4615      	mov	r5, r2
   1eb94:	f7ff fbb8 	bl	1e308 <_Balloc>
   1eb98:	4604      	mov	r4, r0
   1eb9a:	2800      	cmp	r0, #0
   1eb9c:	d051      	beq.n	1ec42 <__d2b+0xbe>
   1eb9e:	f3c7 590a 	ubfx	r9, r7, #20, #11
   1eba2:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1eba6:	f1b9 0f00 	cmp.w	r9, #0
   1ebaa:	d001      	beq.n	1ebb0 <__d2b+0x2c>
   1ebac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ebb0:	2e00      	cmp	r6, #0
   1ebb2:	9301      	str	r3, [sp, #4]
   1ebb4:	d118      	bne.n	1ebe8 <__d2b+0x64>
   1ebb6:	a801      	add	r0, sp, #4
   1ebb8:	f7ff fca0 	bl	1e4fc <__lo0bits>
   1ebbc:	9a01      	ldr	r2, [sp, #4]
   1ebbe:	6162      	str	r2, [r4, #20]
   1ebc0:	2201      	movs	r2, #1
   1ebc2:	f100 0320 	add.w	r3, r0, #32
   1ebc6:	6122      	str	r2, [r4, #16]
   1ebc8:	f1b9 0f00 	cmp.w	r9, #0
   1ebcc:	d025      	beq.n	1ec1a <__d2b+0x96>
   1ebce:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   1ebd2:	eb09 0203 	add.w	r2, r9, r3
   1ebd6:	4620      	mov	r0, r4
   1ebd8:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   1ebdc:	f8c8 2000 	str.w	r2, [r8]
   1ebe0:	602b      	str	r3, [r5, #0]
   1ebe2:	b003      	add	sp, #12
   1ebe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ebe8:	4668      	mov	r0, sp
   1ebea:	9600      	str	r6, [sp, #0]
   1ebec:	f7ff fc86 	bl	1e4fc <__lo0bits>
   1ebf0:	4603      	mov	r3, r0
   1ebf2:	b310      	cbz	r0, 1ec3a <__d2b+0xb6>
   1ebf4:	e9dd 0200 	ldrd	r0, r2, [sp]
   1ebf8:	f1c3 0120 	rsb	r1, r3, #32
   1ebfc:	fa02 f101 	lsl.w	r1, r2, r1
   1ec00:	4301      	orrs	r1, r0
   1ec02:	40da      	lsrs	r2, r3
   1ec04:	6161      	str	r1, [r4, #20]
   1ec06:	9201      	str	r2, [sp, #4]
   1ec08:	2a00      	cmp	r2, #0
   1ec0a:	61a2      	str	r2, [r4, #24]
   1ec0c:	bf14      	ite	ne
   1ec0e:	2202      	movne	r2, #2
   1ec10:	2201      	moveq	r2, #1
   1ec12:	6122      	str	r2, [r4, #16]
   1ec14:	f1b9 0f00 	cmp.w	r9, #0
   1ec18:	d1d9      	bne.n	1ebce <__d2b+0x4a>
   1ec1a:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   1ec1e:	f8c8 3000 	str.w	r3, [r8]
   1ec22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1ec26:	6918      	ldr	r0, [r3, #16]
   1ec28:	f7ff fc48 	bl	1e4bc <__hi0bits>
   1ec2c:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   1ec30:	4620      	mov	r0, r4
   1ec32:	602b      	str	r3, [r5, #0]
   1ec34:	b003      	add	sp, #12
   1ec36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ec3a:	9a00      	ldr	r2, [sp, #0]
   1ec3c:	6162      	str	r2, [r4, #20]
   1ec3e:	9a01      	ldr	r2, [sp, #4]
   1ec40:	e7e2      	b.n	1ec08 <__d2b+0x84>
   1ec42:	4b03      	ldr	r3, [pc, #12]	; (1ec50 <__d2b+0xcc>)
   1ec44:	4803      	ldr	r0, [pc, #12]	; (1ec54 <__d2b+0xd0>)
   1ec46:	4622      	mov	r2, r4
   1ec48:	f240 310f 	movw	r1, #783	; 0x30f
   1ec4c:	f002 f98c 	bl	20f68 <__assert_func>
   1ec50:	20008bbc 	.word	0x20008bbc
   1ec54:	20008c28 	.word	0x20008c28

0001ec58 <__ratio>:
   1ec58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec5a:	b083      	sub	sp, #12
   1ec5c:	460e      	mov	r6, r1
   1ec5e:	4669      	mov	r1, sp
   1ec60:	4607      	mov	r7, r0
   1ec62:	f7ff ff2d 	bl	1eac0 <__b2d>
   1ec66:	a901      	add	r1, sp, #4
   1ec68:	4630      	mov	r0, r6
   1ec6a:	ec55 4b10 	vmov	r4, r5, d0
   1ec6e:	eeb0 7b40 	vmov.f64	d7, d0
   1ec72:	f7ff ff25 	bl	1eac0 <__b2d>
   1ec76:	6933      	ldr	r3, [r6, #16]
   1ec78:	693a      	ldr	r2, [r7, #16]
   1ec7a:	1ad2      	subs	r2, r2, r3
   1ec7c:	e9dd 3100 	ldrd	r3, r1, [sp]
   1ec80:	1a5b      	subs	r3, r3, r1
   1ec82:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1ec86:	2b00      	cmp	r3, #0
   1ec88:	dd09      	ble.n	1ec9e <__ratio+0x46>
   1ec8a:	ee17 2a90 	vmov	r2, s15
   1ec8e:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   1ec92:	ec45 4b17 	vmov	d7, r4, r5
   1ec96:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1ec9a:	b003      	add	sp, #12
   1ec9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ec9e:	ee10 2a90 	vmov	r2, s1
   1eca2:	ec51 0b10 	vmov	r0, r1, d0
   1eca6:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   1ecaa:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   1ecae:	ec41 0b10 	vmov	d0, r0, r1
   1ecb2:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1ecb6:	b003      	add	sp, #12
   1ecb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ecba:	bf00      	nop

0001ecbc <_mprec_log10>:
   1ecbc:	2817      	cmp	r0, #23
   1ecbe:	dd08      	ble.n	1ecd2 <_mprec_log10+0x16>
   1ecc0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1ecc4:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
   1ecc8:	3801      	subs	r0, #1
   1ecca:	ee20 0b07 	vmul.f64	d0, d0, d7
   1ecce:	d1fb      	bne.n	1ecc8 <_mprec_log10+0xc>
   1ecd0:	4770      	bx	lr
   1ecd2:	4b03      	ldr	r3, [pc, #12]	; (1ece0 <_mprec_log10+0x24>)
   1ecd4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1ecd8:	ed93 0b04 	vldr	d0, [r3, #16]
   1ecdc:	4770      	bx	lr
   1ecde:	bf00      	nop
   1ece0:	20001cc8 	.word	0x20001cc8

0001ece4 <__copybits>:
   1ece4:	3901      	subs	r1, #1
   1ece6:	1149      	asrs	r1, r1, #5
   1ece8:	f101 0c01 	add.w	ip, r1, #1
   1ecec:	6911      	ldr	r1, [r2, #16]
   1ecee:	f102 0314 	add.w	r3, r2, #20
   1ecf2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1ecf6:	428b      	cmp	r3, r1
   1ecf8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   1ecfc:	d217      	bcs.n	1ed2e <__copybits+0x4a>
   1ecfe:	b510      	push	{r4, lr}
   1ed00:	f1a0 0e04 	sub.w	lr, r0, #4
   1ed04:	f853 4b04 	ldr.w	r4, [r3], #4
   1ed08:	f84e 4f04 	str.w	r4, [lr, #4]!
   1ed0c:	4299      	cmp	r1, r3
   1ed0e:	d8f9      	bhi.n	1ed04 <__copybits+0x20>
   1ed10:	1a8a      	subs	r2, r1, r2
   1ed12:	f1a2 0315 	sub.w	r3, r2, #21
   1ed16:	f023 0303 	bic.w	r3, r3, #3
   1ed1a:	3304      	adds	r3, #4
   1ed1c:	4418      	add	r0, r3
   1ed1e:	4584      	cmp	ip, r0
   1ed20:	d904      	bls.n	1ed2c <__copybits+0x48>
   1ed22:	2300      	movs	r3, #0
   1ed24:	f840 3b04 	str.w	r3, [r0], #4
   1ed28:	4584      	cmp	ip, r0
   1ed2a:	d8fb      	bhi.n	1ed24 <__copybits+0x40>
   1ed2c:	bd10      	pop	{r4, pc}
   1ed2e:	4584      	cmp	ip, r0
   1ed30:	d905      	bls.n	1ed3e <__copybits+0x5a>
   1ed32:	2300      	movs	r3, #0
   1ed34:	f840 3b04 	str.w	r3, [r0], #4
   1ed38:	4584      	cmp	ip, r0
   1ed3a:	d8fb      	bhi.n	1ed34 <__copybits+0x50>
   1ed3c:	4770      	bx	lr
   1ed3e:	4770      	bx	lr

0001ed40 <__any_on>:
   1ed40:	6903      	ldr	r3, [r0, #16]
   1ed42:	114a      	asrs	r2, r1, #5
   1ed44:	4293      	cmp	r3, r2
   1ed46:	f100 0014 	add.w	r0, r0, #20
   1ed4a:	da09      	bge.n	1ed60 <__any_on+0x20>
   1ed4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ed50:	e002      	b.n	1ed58 <__any_on+0x18>
   1ed52:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1ed56:	b9c2      	cbnz	r2, 1ed8a <__any_on+0x4a>
   1ed58:	4283      	cmp	r3, r0
   1ed5a:	d8fa      	bhi.n	1ed52 <__any_on+0x12>
   1ed5c:	2000      	movs	r0, #0
   1ed5e:	4770      	bx	lr
   1ed60:	dd10      	ble.n	1ed84 <__any_on+0x44>
   1ed62:	f011 011f 	ands.w	r1, r1, #31
   1ed66:	d00d      	beq.n	1ed84 <__any_on+0x44>
   1ed68:	b410      	push	{r4}
   1ed6a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   1ed6e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   1ed72:	fa24 f201 	lsr.w	r2, r4, r1
   1ed76:	408a      	lsls	r2, r1
   1ed78:	4294      	cmp	r4, r2
   1ed7a:	d00c      	beq.n	1ed96 <__any_on+0x56>
   1ed7c:	2001      	movs	r0, #1
   1ed7e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ed82:	4770      	bx	lr
   1ed84:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   1ed88:	e7e6      	b.n	1ed58 <__any_on+0x18>
   1ed8a:	2001      	movs	r0, #1
   1ed8c:	4770      	bx	lr
   1ed8e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1ed92:	2a00      	cmp	r2, #0
   1ed94:	d1f2      	bne.n	1ed7c <__any_on+0x3c>
   1ed96:	4283      	cmp	r3, r0
   1ed98:	d8f9      	bhi.n	1ed8e <__any_on+0x4e>
   1ed9a:	2000      	movs	r0, #0
   1ed9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1eda0:	4770      	bx	lr
   1eda2:	bf00      	nop

0001eda4 <_wctomb_r>:
   1eda4:	b410      	push	{r4}
   1eda6:	4c03      	ldr	r4, [pc, #12]	; (1edb4 <_wctomb_r+0x10>)
   1eda8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   1edac:	46a4      	mov	ip, r4
   1edae:	f85d 4b04 	ldr.w	r4, [sp], #4
   1edb2:	4760      	bx	ip
   1edb4:	20009328 	.word	0x20009328

0001edb8 <__ascii_wctomb>:
   1edb8:	b149      	cbz	r1, 1edce <__ascii_wctomb+0x16>
   1edba:	2aff      	cmp	r2, #255	; 0xff
   1edbc:	d802      	bhi.n	1edc4 <__ascii_wctomb+0xc>
   1edbe:	700a      	strb	r2, [r1, #0]
   1edc0:	2001      	movs	r0, #1
   1edc2:	4770      	bx	lr
   1edc4:	238a      	movs	r3, #138	; 0x8a
   1edc6:	6003      	str	r3, [r0, #0]
   1edc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1edcc:	4770      	bx	lr
   1edce:	4608      	mov	r0, r1
   1edd0:	4770      	bx	lr
   1edd2:	bf00      	nop

0001edd4 <__utf8_wctomb>:
   1edd4:	4603      	mov	r3, r0
   1edd6:	b3a9      	cbz	r1, 1ee44 <__utf8_wctomb+0x70>
   1edd8:	2a7f      	cmp	r2, #127	; 0x7f
   1edda:	d925      	bls.n	1ee28 <__utf8_wctomb+0x54>
   1eddc:	f1a2 0080 	sub.w	r0, r2, #128	; 0x80
   1ede0:	f5b0 6ff0 	cmp.w	r0, #1920	; 0x780
   1ede4:	d323      	bcc.n	1ee2e <__utf8_wctomb+0x5a>
   1ede6:	f5a2 6000 	sub.w	r0, r2, #2048	; 0x800
   1edea:	f5b0 4f78 	cmp.w	r0, #63488	; 0xf800
   1edee:	d32b      	bcc.n	1ee48 <__utf8_wctomb+0x74>
   1edf0:	f5a2 3080 	sub.w	r0, r2, #65536	; 0x10000
   1edf4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1edf8:	d236      	bcs.n	1ee68 <__utf8_wctomb+0x94>
   1edfa:	ea4f 4c92 	mov.w	ip, r2, lsr #18
   1edfe:	f3c2 3005 	ubfx	r0, r2, #12, #6
   1ee02:	f3c2 1385 	ubfx	r3, r2, #6, #6
   1ee06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1ee0a:	f06c 0c0f 	orn	ip, ip, #15
   1ee0e:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1ee12:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ee16:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ee1a:	7048      	strb	r0, [r1, #1]
   1ee1c:	f881 c000 	strb.w	ip, [r1]
   1ee20:	708b      	strb	r3, [r1, #2]
   1ee22:	70ca      	strb	r2, [r1, #3]
   1ee24:	2004      	movs	r0, #4
   1ee26:	4770      	bx	lr
   1ee28:	700a      	strb	r2, [r1, #0]
   1ee2a:	2001      	movs	r0, #1
   1ee2c:	4770      	bx	lr
   1ee2e:	0993      	lsrs	r3, r2, #6
   1ee30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1ee34:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ee38:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ee3c:	700b      	strb	r3, [r1, #0]
   1ee3e:	704a      	strb	r2, [r1, #1]
   1ee40:	2002      	movs	r0, #2
   1ee42:	4770      	bx	lr
   1ee44:	4608      	mov	r0, r1
   1ee46:	4770      	bx	lr
   1ee48:	0b10      	lsrs	r0, r2, #12
   1ee4a:	f3c2 1385 	ubfx	r3, r2, #6, #6
   1ee4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1ee52:	f060 001f 	orn	r0, r0, #31
   1ee56:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ee5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ee5e:	7008      	strb	r0, [r1, #0]
   1ee60:	704b      	strb	r3, [r1, #1]
   1ee62:	708a      	strb	r2, [r1, #2]
   1ee64:	2003      	movs	r0, #3
   1ee66:	4770      	bx	lr
   1ee68:	228a      	movs	r2, #138	; 0x8a
   1ee6a:	601a      	str	r2, [r3, #0]
   1ee6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ee70:	4770      	bx	lr
   1ee72:	bf00      	nop

0001ee74 <__sjis_wctomb>:
   1ee74:	b2d3      	uxtb	r3, r2
   1ee76:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1ee7a:	b1f9      	cbz	r1, 1eebc <__sjis_wctomb+0x48>
   1ee7c:	b1da      	cbz	r2, 1eeb6 <__sjis_wctomb+0x42>
   1ee7e:	f102 0c7f 	add.w	ip, r2, #127	; 0x7f
   1ee82:	fa5f fc8c 	uxtb.w	ip, ip
   1ee86:	f1bc 0f1e 	cmp.w	ip, #30
   1ee8a:	d906      	bls.n	1ee9a <__sjis_wctomb+0x26>
   1ee8c:	f102 0c20 	add.w	ip, r2, #32
   1ee90:	fa5f fc8c 	uxtb.w	ip, ip
   1ee94:	f1bc 0f0f 	cmp.w	ip, #15
   1ee98:	d812      	bhi.n	1eec0 <__sjis_wctomb+0x4c>
   1ee9a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1ee9e:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
   1eea2:	d904      	bls.n	1eeae <__sjis_wctomb+0x3a>
   1eea4:	f083 0c80 	eor.w	ip, r3, #128	; 0x80
   1eea8:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
   1eeac:	d808      	bhi.n	1eec0 <__sjis_wctomb+0x4c>
   1eeae:	700a      	strb	r2, [r1, #0]
   1eeb0:	704b      	strb	r3, [r1, #1]
   1eeb2:	2002      	movs	r0, #2
   1eeb4:	4770      	bx	lr
   1eeb6:	700b      	strb	r3, [r1, #0]
   1eeb8:	2001      	movs	r0, #1
   1eeba:	4770      	bx	lr
   1eebc:	4608      	mov	r0, r1
   1eebe:	4770      	bx	lr
   1eec0:	238a      	movs	r3, #138	; 0x8a
   1eec2:	6003      	str	r3, [r0, #0]
   1eec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eec8:	4770      	bx	lr
   1eeca:	bf00      	nop

0001eecc <__eucjp_wctomb>:
   1eecc:	b2d3      	uxtb	r3, r2
   1eece:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1eed2:	b339      	cbz	r1, 1ef24 <__eucjp_wctomb+0x58>
   1eed4:	b31a      	cbz	r2, 1ef1e <__eucjp_wctomb+0x52>
   1eed6:	f102 0c72 	add.w	ip, r2, #114	; 0x72
   1eeda:	fa5f fc8c 	uxtb.w	ip, ip
   1eede:	f1bc 0f01 	cmp.w	ip, #1
   1eee2:	d921      	bls.n	1ef28 <__eucjp_wctomb+0x5c>
   1eee4:	f102 0c5f 	add.w	ip, r2, #95	; 0x5f
   1eee8:	fa5f fc8c 	uxtb.w	ip, ip
   1eeec:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1eef0:	d821      	bhi.n	1ef36 <__eucjp_wctomb+0x6a>
   1eef2:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
   1eef6:	fa5f fc8c 	uxtb.w	ip, ip
   1eefa:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1eefe:	d91f      	bls.n	1ef40 <__eucjp_wctomb+0x74>
   1ef00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ef04:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
   1ef08:	fa5f fc8c 	uxtb.w	ip, ip
   1ef0c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1ef10:	d811      	bhi.n	1ef36 <__eucjp_wctomb+0x6a>
   1ef12:	208f      	movs	r0, #143	; 0x8f
   1ef14:	7008      	strb	r0, [r1, #0]
   1ef16:	704a      	strb	r2, [r1, #1]
   1ef18:	708b      	strb	r3, [r1, #2]
   1ef1a:	2003      	movs	r0, #3
   1ef1c:	4770      	bx	lr
   1ef1e:	700b      	strb	r3, [r1, #0]
   1ef20:	2001      	movs	r0, #1
   1ef22:	4770      	bx	lr
   1ef24:	4608      	mov	r0, r1
   1ef26:	4770      	bx	lr
   1ef28:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
   1ef2c:	fa5f fc8c 	uxtb.w	ip, ip
   1ef30:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1ef34:	d904      	bls.n	1ef40 <__eucjp_wctomb+0x74>
   1ef36:	238a      	movs	r3, #138	; 0x8a
   1ef38:	6003      	str	r3, [r0, #0]
   1ef3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ef3e:	4770      	bx	lr
   1ef40:	700a      	strb	r2, [r1, #0]
   1ef42:	704b      	strb	r3, [r1, #1]
   1ef44:	2002      	movs	r0, #2
   1ef46:	4770      	bx	lr

0001ef48 <__jis_wctomb>:
   1ef48:	fa5f fc82 	uxtb.w	ip, r2
   1ef4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1ef50:	b381      	cbz	r1, 1efb4 <__jis_wctomb+0x6c>
   1ef52:	b192      	cbz	r2, 1ef7a <__jis_wctomb+0x32>
   1ef54:	b500      	push	{lr}
   1ef56:	f1a2 0e21 	sub.w	lr, r2, #33	; 0x21
   1ef5a:	f1be 0f5d 	cmp.w	lr, #93	; 0x5d
   1ef5e:	d82b      	bhi.n	1efb8 <__jis_wctomb+0x70>
   1ef60:	f1ac 0e21 	sub.w	lr, ip, #33	; 0x21
   1ef64:	f1be 0f5d 	cmp.w	lr, #93	; 0x5d
   1ef68:	d826      	bhi.n	1efb8 <__jis_wctomb+0x70>
   1ef6a:	6818      	ldr	r0, [r3, #0]
   1ef6c:	b1b8      	cbz	r0, 1ef9e <__jis_wctomb+0x56>
   1ef6e:	2002      	movs	r0, #2
   1ef70:	700a      	strb	r2, [r1, #0]
   1ef72:	f881 c001 	strb.w	ip, [r1, #1]
   1ef76:	f85d fb04 	ldr.w	pc, [sp], #4
   1ef7a:	6818      	ldr	r0, [r3, #0]
   1ef7c:	b158      	cbz	r0, 1ef96 <__jis_wctomb+0x4e>
   1ef7e:	601a      	str	r2, [r3, #0]
   1ef80:	201b      	movs	r0, #27
   1ef82:	2228      	movs	r2, #40	; 0x28
   1ef84:	2342      	movs	r3, #66	; 0x42
   1ef86:	7008      	strb	r0, [r1, #0]
   1ef88:	704a      	strb	r2, [r1, #1]
   1ef8a:	708b      	strb	r3, [r1, #2]
   1ef8c:	2004      	movs	r0, #4
   1ef8e:	3103      	adds	r1, #3
   1ef90:	f881 c000 	strb.w	ip, [r1]
   1ef94:	4770      	bx	lr
   1ef96:	2001      	movs	r0, #1
   1ef98:	f881 c000 	strb.w	ip, [r1]
   1ef9c:	4770      	bx	lr
   1ef9e:	2001      	movs	r0, #1
   1efa0:	6018      	str	r0, [r3, #0]
   1efa2:	2324      	movs	r3, #36	; 0x24
   1efa4:	201b      	movs	r0, #27
   1efa6:	704b      	strb	r3, [r1, #1]
   1efa8:	2342      	movs	r3, #66	; 0x42
   1efaa:	7008      	strb	r0, [r1, #0]
   1efac:	708b      	strb	r3, [r1, #2]
   1efae:	2005      	movs	r0, #5
   1efb0:	3103      	adds	r1, #3
   1efb2:	e7dd      	b.n	1ef70 <__jis_wctomb+0x28>
   1efb4:	2001      	movs	r0, #1
   1efb6:	4770      	bx	lr
   1efb8:	238a      	movs	r3, #138	; 0x8a
   1efba:	6003      	str	r3, [r0, #0]
   1efbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1efc0:	e7d9      	b.n	1ef76 <__jis_wctomb+0x2e>
   1efc2:	bf00      	nop
   1efc4:	0000      	movs	r0, r0
	...

0001efc8 <_svfprintf_r>:
   1efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efcc:	ed2d 8b08 	vpush	{d8-d11}
   1efd0:	b0d1      	sub	sp, #324	; 0x144
   1efd2:	460c      	mov	r4, r1
   1efd4:	ee0b 1a10 	vmov	s22, r1
   1efd8:	4690      	mov	r8, r2
   1efda:	9308      	str	r3, [sp, #32]
   1efdc:	4683      	mov	fp, r0
   1efde:	f001 ff7d 	bl	20edc <_localeconv_r>
   1efe2:	6803      	ldr	r3, [r0, #0]
   1efe4:	9312      	str	r3, [sp, #72]	; 0x48
   1efe6:	4618      	mov	r0, r3
   1efe8:	f7fe f8ca 	bl	1d180 <strlen>
   1efec:	af20      	add	r7, sp, #128	; 0x80
   1efee:	9010      	str	r0, [sp, #64]	; 0x40
   1eff0:	2208      	movs	r2, #8
   1eff2:	2100      	movs	r1, #0
   1eff4:	4638      	mov	r0, r7
   1eff6:	f7fc fd1f 	bl	1ba38 <memset>
   1effa:	89a3      	ldrh	r3, [r4, #12]
   1effc:	061b      	lsls	r3, r3, #24
   1effe:	d503      	bpl.n	1f008 <_svfprintf_r+0x40>
   1f000:	6923      	ldr	r3, [r4, #16]
   1f002:	2b00      	cmp	r3, #0
   1f004:	f000 8755 	beq.w	1feb2 <_svfprintf_r+0xeea>
   1f008:	2300      	movs	r3, #0
   1f00a:	ed9f 8b83 	vldr	d8, [pc, #524]	; 1f218 <_svfprintf_r+0x250>
   1f00e:	ed9f 9b84 	vldr	d9, [pc, #528]	; 1f220 <_svfprintf_r+0x258>
   1f012:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   1f016:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   1f01a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   1f01e:	aa27      	add	r2, sp, #156	; 0x9c
   1f020:	930e      	str	r3, [sp, #56]	; 0x38
   1f022:	9224      	str	r2, [sp, #144]	; 0x90
   1f024:	4692      	mov	sl, r2
   1f026:	9311      	str	r3, [sp, #68]	; 0x44
   1f028:	9304      	str	r3, [sp, #16]
   1f02a:	4644      	mov	r4, r8
   1f02c:	46a1      	mov	r9, r4
   1f02e:	4b7e      	ldr	r3, [pc, #504]	; (1f228 <_svfprintf_r+0x260>)
   1f030:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1f034:	f7fd fdbe 	bl	1cbb4 <__locale_mb_cur_max>
   1f038:	464a      	mov	r2, r9
   1f03a:	4603      	mov	r3, r0
   1f03c:	a91c      	add	r1, sp, #112	; 0x70
   1f03e:	9700      	str	r7, [sp, #0]
   1f040:	4658      	mov	r0, fp
   1f042:	47a8      	blx	r5
   1f044:	2800      	cmp	r0, #0
   1f046:	f000 80b0 	beq.w	1f1aa <_svfprintf_r+0x1e2>
   1f04a:	f2c0 80a6 	blt.w	1f19a <_svfprintf_r+0x1d2>
   1f04e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1f050:	2a25      	cmp	r2, #37	; 0x25
   1f052:	4603      	mov	r3, r0
   1f054:	d001      	beq.n	1f05a <_svfprintf_r+0x92>
   1f056:	4499      	add	r9, r3
   1f058:	e7e9      	b.n	1f02e <_svfprintf_r+0x66>
   1f05a:	ebb9 0504 	subs.w	r5, r9, r4
   1f05e:	4606      	mov	r6, r0
   1f060:	f040 80a7 	bne.w	1f1b2 <_svfprintf_r+0x1ea>
   1f064:	2300      	movs	r3, #0
   1f066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f06a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   1f06e:	4698      	mov	r8, r3
   1f070:	9306      	str	r3, [sp, #24]
   1f072:	f109 0901 	add.w	r9, r9, #1
   1f076:	f899 3000 	ldrb.w	r3, [r9]
   1f07a:	9203      	str	r2, [sp, #12]
   1f07c:	252b      	movs	r5, #43	; 0x2b
   1f07e:	2620      	movs	r6, #32
   1f080:	f109 0901 	add.w	r9, r9, #1
   1f084:	f1a3 0220 	sub.w	r2, r3, #32
   1f088:	2a5a      	cmp	r2, #90	; 0x5a
   1f08a:	f200 80cf 	bhi.w	1f22c <_svfprintf_r+0x264>
   1f08e:	e8df f012 	tbh	[pc, r2, lsl #1]
   1f092:	02e8      	.short	0x02e8
   1f094:	00cd00cd 	.word	0x00cd00cd
   1f098:	00cd02e3 	.word	0x00cd02e3
   1f09c:	00cd00cd 	.word	0x00cd00cd
   1f0a0:	00cd006a 	.word	0x00cd006a
   1f0a4:	020500cd 	.word	0x020500cd
   1f0a8:	00cd0284 	.word	0x00cd0284
   1f0ac:	02c90210 	.word	0x02c90210
   1f0b0:	02bd00cd 	.word	0x02bd00cd
   1f0b4:	005b005b 	.word	0x005b005b
   1f0b8:	005b005b 	.word	0x005b005b
   1f0bc:	005b005b 	.word	0x005b005b
   1f0c0:	005b005b 	.word	0x005b005b
   1f0c4:	00cd005b 	.word	0x00cd005b
   1f0c8:	00cd00cd 	.word	0x00cd00cd
   1f0cc:	00cd00cd 	.word	0x00cd00cd
   1f0d0:	00cd00cd 	.word	0x00cd00cd
   1f0d4:	00cd0153 	.word	0x00cd0153
   1f0d8:	021a0183 	.word	0x021a0183
   1f0dc:	01530153 	.word	0x01530153
   1f0e0:	00cd0153 	.word	0x00cd0153
   1f0e4:	00cd00cd 	.word	0x00cd00cd
   1f0e8:	021500cd 	.word	0x021500cd
   1f0ec:	00cd00cd 	.word	0x00cd00cd
   1f0f0:	00cd0296 	.word	0x00cd0296
   1f0f4:	00cd00cd 	.word	0x00cd00cd
   1f0f8:	00cd01ab 	.word	0x00cd01ab
   1f0fc:	00cd02aa 	.word	0x00cd02aa
   1f100:	06e300cd 	.word	0x06e300cd
   1f104:	00cd00cd 	.word	0x00cd00cd
   1f108:	00cd00cd 	.word	0x00cd00cd
   1f10c:	00cd00cd 	.word	0x00cd00cd
   1f110:	00cd00cd 	.word	0x00cd00cd
   1f114:	00cd0153 	.word	0x00cd0153
   1f118:	01de0183 	.word	0x01de0183
   1f11c:	01530153 	.word	0x01530153
   1f120:	02770153 	.word	0x02770153
   1f124:	007f01de 	.word	0x007f01de
   1f128:	028900cd 	.word	0x028900cd
   1f12c:	025f00cd 	.word	0x025f00cd
   1f130:	022f06e0 	.word	0x022f06e0
   1f134:	00cd007f 	.word	0x00cd007f
   1f138:	007c01ab 	.word	0x007c01ab
   1f13c:	00cd06b8 	.word	0x00cd06b8
   1f140:	06bd00cd 	.word	0x06bd00cd
   1f144:	007c00cd 	.word	0x007c00cd
   1f148:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f14c:	2100      	movs	r1, #0
   1f14e:	f819 3b01 	ldrb.w	r3, [r9], #1
   1f152:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1f156:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   1f15a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f15e:	2a09      	cmp	r2, #9
   1f160:	d9f5      	bls.n	1f14e <_svfprintf_r+0x186>
   1f162:	9106      	str	r1, [sp, #24]
   1f164:	e78e      	b.n	1f084 <_svfprintf_r+0xbc>
   1f166:	4658      	mov	r0, fp
   1f168:	f001 feb8 	bl	20edc <_localeconv_r>
   1f16c:	6843      	ldr	r3, [r0, #4]
   1f16e:	9315      	str	r3, [sp, #84]	; 0x54
   1f170:	4618      	mov	r0, r3
   1f172:	f7fe f805 	bl	1d180 <strlen>
   1f176:	9016      	str	r0, [sp, #88]	; 0x58
   1f178:	4658      	mov	r0, fp
   1f17a:	f001 feaf 	bl	20edc <_localeconv_r>
   1f17e:	6883      	ldr	r3, [r0, #8]
   1f180:	9313      	str	r3, [sp, #76]	; 0x4c
   1f182:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f184:	2b00      	cmp	r3, #0
   1f186:	f040 862d 	bne.w	1fde4 <_svfprintf_r+0xe1c>
   1f18a:	f899 3000 	ldrb.w	r3, [r9]
   1f18e:	e777      	b.n	1f080 <_svfprintf_r+0xb8>
   1f190:	f899 3000 	ldrb.w	r3, [r9]
   1f194:	f048 0820 	orr.w	r8, r8, #32
   1f198:	e772      	b.n	1f080 <_svfprintf_r+0xb8>
   1f19a:	2208      	movs	r2, #8
   1f19c:	2100      	movs	r1, #0
   1f19e:	4638      	mov	r0, r7
   1f1a0:	f7fc fc4a 	bl	1ba38 <memset>
   1f1a4:	2301      	movs	r3, #1
   1f1a6:	4499      	add	r9, r3
   1f1a8:	e741      	b.n	1f02e <_svfprintf_r+0x66>
   1f1aa:	ebb9 0504 	subs.w	r5, r9, r4
   1f1ae:	4606      	mov	r6, r0
   1f1b0:	d011      	beq.n	1f1d6 <_svfprintf_r+0x20e>
   1f1b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1f1b4:	442b      	add	r3, r5
   1f1b6:	9326      	str	r3, [sp, #152]	; 0x98
   1f1b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f1ba:	3301      	adds	r3, #1
   1f1bc:	2b07      	cmp	r3, #7
   1f1be:	e9ca 4500 	strd	r4, r5, [sl]
   1f1c2:	9325      	str	r3, [sp, #148]	; 0x94
   1f1c4:	dc1c      	bgt.n	1f200 <_svfprintf_r+0x238>
   1f1c6:	f10a 0a08 	add.w	sl, sl, #8
   1f1ca:	9b04      	ldr	r3, [sp, #16]
   1f1cc:	442b      	add	r3, r5
   1f1ce:	9304      	str	r3, [sp, #16]
   1f1d0:	2e00      	cmp	r6, #0
   1f1d2:	f47f af47 	bne.w	1f064 <_svfprintf_r+0x9c>
   1f1d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1f1d8:	2b00      	cmp	r3, #0
   1f1da:	f041 820b 	bne.w	205f4 <_svfprintf_r+0x162c>
   1f1de:	ee1b 3a10 	vmov	r3, s22
   1f1e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1f1e6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f1ea:	9b04      	ldr	r3, [sp, #16]
   1f1ec:	bf18      	it	ne
   1f1ee:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1f1f2:	9304      	str	r3, [sp, #16]
   1f1f4:	9804      	ldr	r0, [sp, #16]
   1f1f6:	b051      	add	sp, #324	; 0x144
   1f1f8:	ecbd 8b08 	vpop	{d8-d11}
   1f1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f200:	ee1b 1a10 	vmov	r1, s22
   1f204:	aa24      	add	r2, sp, #144	; 0x90
   1f206:	4658      	mov	r0, fp
   1f208:	f002 fe7e 	bl	21f08 <__ssprint_r>
   1f20c:	2800      	cmp	r0, #0
   1f20e:	d1e6      	bne.n	1f1de <_svfprintf_r+0x216>
   1f210:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f214:	e7d9      	b.n	1f1ca <_svfprintf_r+0x202>
   1f216:	bf00      	nop
	...
   1f220:	ffffffff 	.word	0xffffffff
   1f224:	7fefffff 	.word	0x7fefffff
   1f228:	20009328 	.word	0x20009328
   1f22c:	930b      	str	r3, [sp, #44]	; 0x2c
   1f22e:	2b00      	cmp	r3, #0
   1f230:	d0d1      	beq.n	1f1d6 <_svfprintf_r+0x20e>
   1f232:	2100      	movs	r1, #0
   1f234:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   1f238:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   1f23c:	2301      	movs	r3, #1
   1f23e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1f242:	9302      	str	r3, [sp, #8]
   1f244:	9107      	str	r1, [sp, #28]
   1f246:	9305      	str	r3, [sp, #20]
   1f248:	9103      	str	r1, [sp, #12]
   1f24a:	910f      	str	r1, [sp, #60]	; 0x3c
   1f24c:	ac37      	add	r4, sp, #220	; 0xdc
   1f24e:	f018 0302 	ands.w	r3, r8, #2
   1f252:	9309      	str	r3, [sp, #36]	; 0x24
   1f254:	d002      	beq.n	1f25c <_svfprintf_r+0x294>
   1f256:	9b02      	ldr	r3, [sp, #8]
   1f258:	3302      	adds	r3, #2
   1f25a:	9302      	str	r3, [sp, #8]
   1f25c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   1f260:	930a      	str	r3, [sp, #40]	; 0x28
   1f262:	d105      	bne.n	1f270 <_svfprintf_r+0x2a8>
   1f264:	9b06      	ldr	r3, [sp, #24]
   1f266:	9a02      	ldr	r2, [sp, #8]
   1f268:	1a9d      	subs	r5, r3, r2
   1f26a:	2d00      	cmp	r5, #0
   1f26c:	f300 8369 	bgt.w	1f942 <_svfprintf_r+0x97a>
   1f270:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1f272:	b189      	cbz	r1, 1f298 <_svfprintf_r+0x2d0>
   1f274:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f276:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   1f27a:	3101      	adds	r1, #1
   1f27c:	3201      	adds	r2, #1
   1f27e:	f8ca 0000 	str.w	r0, [sl]
   1f282:	2907      	cmp	r1, #7
   1f284:	f04f 0001 	mov.w	r0, #1
   1f288:	9226      	str	r2, [sp, #152]	; 0x98
   1f28a:	9125      	str	r1, [sp, #148]	; 0x94
   1f28c:	f8ca 0004 	str.w	r0, [sl, #4]
   1f290:	f300 83a2 	bgt.w	1f9d8 <_svfprintf_r+0xa10>
   1f294:	f10a 0a08 	add.w	sl, sl, #8
   1f298:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f29a:	b183      	cbz	r3, 1f2be <_svfprintf_r+0x2f6>
   1f29c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f29e:	a91a      	add	r1, sp, #104	; 0x68
   1f2a0:	3301      	adds	r3, #1
   1f2a2:	3202      	adds	r2, #2
   1f2a4:	f8ca 1000 	str.w	r1, [sl]
   1f2a8:	2b07      	cmp	r3, #7
   1f2aa:	f04f 0102 	mov.w	r1, #2
   1f2ae:	9226      	str	r2, [sp, #152]	; 0x98
   1f2b0:	9325      	str	r3, [sp, #148]	; 0x94
   1f2b2:	f8ca 1004 	str.w	r1, [sl, #4]
   1f2b6:	f300 83a3 	bgt.w	1fa00 <_svfprintf_r+0xa38>
   1f2ba:	f10a 0a08 	add.w	sl, sl, #8
   1f2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f2c0:	2b80      	cmp	r3, #128	; 0x80
   1f2c2:	f000 826c 	beq.w	1f79e <_svfprintf_r+0x7d6>
   1f2c6:	9b03      	ldr	r3, [sp, #12]
   1f2c8:	9905      	ldr	r1, [sp, #20]
   1f2ca:	1a5d      	subs	r5, r3, r1
   1f2cc:	2d00      	cmp	r5, #0
   1f2ce:	f300 82a5 	bgt.w	1f81c <_svfprintf_r+0x854>
   1f2d2:	f418 7f80 	tst.w	r8, #256	; 0x100
   1f2d6:	f040 820d 	bne.w	1f6f4 <_svfprintf_r+0x72c>
   1f2da:	9b05      	ldr	r3, [sp, #20]
   1f2dc:	f8ca 3004 	str.w	r3, [sl, #4]
   1f2e0:	441a      	add	r2, r3
   1f2e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f2e4:	f8ca 4000 	str.w	r4, [sl]
   1f2e8:	3301      	adds	r3, #1
   1f2ea:	2b07      	cmp	r3, #7
   1f2ec:	9226      	str	r2, [sp, #152]	; 0x98
   1f2ee:	9325      	str	r3, [sp, #148]	; 0x94
   1f2f0:	f300 831b 	bgt.w	1f92a <_svfprintf_r+0x962>
   1f2f4:	f10a 0a08 	add.w	sl, sl, #8
   1f2f8:	f018 0f04 	tst.w	r8, #4
   1f2fc:	d005      	beq.n	1f30a <_svfprintf_r+0x342>
   1f2fe:	9b06      	ldr	r3, [sp, #24]
   1f300:	9902      	ldr	r1, [sp, #8]
   1f302:	1a5c      	subs	r4, r3, r1
   1f304:	2c00      	cmp	r4, #0
   1f306:	f300 8388 	bgt.w	1fa1a <_svfprintf_r+0xa52>
   1f30a:	9b04      	ldr	r3, [sp, #16]
   1f30c:	9906      	ldr	r1, [sp, #24]
   1f30e:	9802      	ldr	r0, [sp, #8]
   1f310:	4281      	cmp	r1, r0
   1f312:	bfac      	ite	ge
   1f314:	185b      	addge	r3, r3, r1
   1f316:	181b      	addlt	r3, r3, r0
   1f318:	9304      	str	r3, [sp, #16]
   1f31a:	2a00      	cmp	r2, #0
   1f31c:	f040 82b0 	bne.w	1f880 <_svfprintf_r+0x8b8>
   1f320:	2300      	movs	r3, #0
   1f322:	9325      	str	r3, [sp, #148]	; 0x94
   1f324:	9b07      	ldr	r3, [sp, #28]
   1f326:	b11b      	cbz	r3, 1f330 <_svfprintf_r+0x368>
   1f328:	9907      	ldr	r1, [sp, #28]
   1f32a:	4658      	mov	r0, fp
   1f32c:	f7fe f83a 	bl	1d3a4 <_free_r>
   1f330:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f334:	464c      	mov	r4, r9
   1f336:	e679      	b.n	1f02c <_svfprintf_r+0x64>
   1f338:	930b      	str	r3, [sp, #44]	; 0x2c
   1f33a:	9b08      	ldr	r3, [sp, #32]
   1f33c:	3307      	adds	r3, #7
   1f33e:	f023 0307 	bic.w	r3, r3, #7
   1f342:	ecb3 8b02 	vldmia	r3!, {d8}
   1f346:	eeb0 7bc8 	vabs.f64	d7, d8
   1f34a:	eeb4 7b49 	vcmp.f64	d7, d9
   1f34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f352:	9308      	str	r3, [sp, #32]
   1f354:	f340 84e9 	ble.w	1fd2a <_svfprintf_r+0xd62>
   1f358:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   1f35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f360:	f101 8059 	bmi.w	20416 <_svfprintf_r+0x144e>
   1f364:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1f368:	4cab      	ldr	r4, [pc, #684]	; (1f618 <_svfprintf_r+0x650>)
   1f36a:	4bac      	ldr	r3, [pc, #688]	; (1f61c <_svfprintf_r+0x654>)
   1f36c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   1f370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f372:	2a47      	cmp	r2, #71	; 0x47
   1f374:	bfc8      	it	gt
   1f376:	461c      	movgt	r4, r3
   1f378:	2300      	movs	r3, #0
   1f37a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1f37e:	2203      	movs	r2, #3
   1f380:	9307      	str	r3, [sp, #28]
   1f382:	9202      	str	r2, [sp, #8]
   1f384:	9205      	str	r2, [sp, #20]
   1f386:	9303      	str	r3, [sp, #12]
   1f388:	930f      	str	r3, [sp, #60]	; 0x3c
   1f38a:	2900      	cmp	r1, #0
   1f38c:	f43f af5f 	beq.w	1f24e <_svfprintf_r+0x286>
   1f390:	9b02      	ldr	r3, [sp, #8]
   1f392:	3301      	adds	r3, #1
   1f394:	9302      	str	r3, [sp, #8]
   1f396:	e75a      	b.n	1f24e <_svfprintf_r+0x286>
   1f398:	2b43      	cmp	r3, #67	; 0x43
   1f39a:	930b      	str	r3, [sp, #44]	; 0x2c
   1f39c:	d003      	beq.n	1f3a6 <_svfprintf_r+0x3de>
   1f39e:	f018 0f10 	tst.w	r8, #16
   1f3a2:	f000 855d 	beq.w	1fe60 <_svfprintf_r+0xe98>
   1f3a6:	9d08      	ldr	r5, [sp, #32]
   1f3a8:	2208      	movs	r2, #8
   1f3aa:	2100      	movs	r1, #0
   1f3ac:	a822      	add	r0, sp, #136	; 0x88
   1f3ae:	ac37      	add	r4, sp, #220	; 0xdc
   1f3b0:	f7fc fb42 	bl	1ba38 <memset>
   1f3b4:	ab22      	add	r3, sp, #136	; 0x88
   1f3b6:	f855 2b04 	ldr.w	r2, [r5], #4
   1f3ba:	4621      	mov	r1, r4
   1f3bc:	4658      	mov	r0, fp
   1f3be:	f002 fd11 	bl	21de4 <_wcrtomb_r>
   1f3c2:	4603      	mov	r3, r0
   1f3c4:	3301      	adds	r3, #1
   1f3c6:	9005      	str	r0, [sp, #20]
   1f3c8:	f001 82ee 	beq.w	209a8 <_svfprintf_r+0x19e0>
   1f3cc:	9b05      	ldr	r3, [sp, #20]
   1f3ce:	9508      	str	r5, [sp, #32]
   1f3d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f3d4:	9302      	str	r3, [sp, #8]
   1f3d6:	2100      	movs	r1, #0
   1f3d8:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   1f3dc:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1f3e0:	9107      	str	r1, [sp, #28]
   1f3e2:	9103      	str	r1, [sp, #12]
   1f3e4:	910f      	str	r1, [sp, #60]	; 0x3c
   1f3e6:	e732      	b.n	1f24e <_svfprintf_r+0x286>
   1f3e8:	930b      	str	r3, [sp, #44]	; 0x2c
   1f3ea:	9b08      	ldr	r3, [sp, #32]
   1f3ec:	461a      	mov	r2, r3
   1f3ee:	2300      	movs	r3, #0
   1f3f0:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   1f3f4:	4613      	mov	r3, r2
   1f3f6:	f853 4b04 	ldr.w	r4, [r3], #4
   1f3fa:	9308      	str	r3, [sp, #32]
   1f3fc:	2c00      	cmp	r4, #0
   1f3fe:	f000 8548 	beq.w	1fe92 <_svfprintf_r+0xeca>
   1f402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f404:	2b53      	cmp	r3, #83	; 0x53
   1f406:	f000 86ec 	beq.w	201e2 <_svfprintf_r+0x121a>
   1f40a:	f018 0310 	ands.w	r3, r8, #16
   1f40e:	930c      	str	r3, [sp, #48]	; 0x30
   1f410:	f040 86e7 	bne.w	201e2 <_svfprintf_r+0x121a>
   1f414:	9b03      	ldr	r3, [sp, #12]
   1f416:	1c5d      	adds	r5, r3, #1
   1f418:	f001 80e5 	beq.w	205e6 <_svfprintf_r+0x161e>
   1f41c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f41e:	461a      	mov	r2, r3
   1f420:	4620      	mov	r0, r4
   1f422:	f7fd fe5d 	bl	1d0e0 <memchr>
   1f426:	9007      	str	r0, [sp, #28]
   1f428:	2800      	cmp	r0, #0
   1f42a:	f001 8328 	beq.w	20a7e <_svfprintf_r+0x1ab6>
   1f42e:	9b07      	ldr	r3, [sp, #28]
   1f430:	1b1a      	subs	r2, r3, r4
   1f432:	9205      	str	r2, [sp, #20]
   1f434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f436:	9303      	str	r3, [sp, #12]
   1f438:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1f43c:	930f      	str	r3, [sp, #60]	; 0x3c
   1f43e:	930d      	str	r3, [sp, #52]	; 0x34
   1f440:	9307      	str	r3, [sp, #28]
   1f442:	2373      	movs	r3, #115	; 0x73
   1f444:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1f448:	9202      	str	r2, [sp, #8]
   1f44a:	930b      	str	r3, [sp, #44]	; 0x2c
   1f44c:	e79d      	b.n	1f38a <_svfprintf_r+0x3c2>
   1f44e:	f018 0f20 	tst.w	r8, #32
   1f452:	930b      	str	r3, [sp, #44]	; 0x2c
   1f454:	9b08      	ldr	r3, [sp, #32]
   1f456:	d03d      	beq.n	1f4d4 <_svfprintf_r+0x50c>
   1f458:	3307      	adds	r3, #7
   1f45a:	f023 0307 	bic.w	r3, r3, #7
   1f45e:	461a      	mov	r2, r3
   1f460:	4611      	mov	r1, r2
   1f462:	685b      	ldr	r3, [r3, #4]
   1f464:	f851 2b08 	ldr.w	r2, [r1], #8
   1f468:	9108      	str	r1, [sp, #32]
   1f46a:	4619      	mov	r1, r3
   1f46c:	2b00      	cmp	r3, #0
   1f46e:	f2c0 840c 	blt.w	1fc8a <_svfprintf_r+0xcc2>
   1f472:	9b03      	ldr	r3, [sp, #12]
   1f474:	3301      	adds	r3, #1
   1f476:	f000 829e 	beq.w	1f9b6 <_svfprintf_r+0x9ee>
   1f47a:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   1f47e:	ea52 0301 	orrs.w	r3, r2, r1
   1f482:	9002      	str	r0, [sp, #8]
   1f484:	f040 8299 	bne.w	1f9ba <_svfprintf_r+0x9f2>
   1f488:	9b03      	ldr	r3, [sp, #12]
   1f48a:	2b00      	cmp	r3, #0
   1f48c:	f040 829a 	bne.w	1f9c4 <_svfprintf_r+0x9fc>
   1f490:	4680      	mov	r8, r0
   1f492:	2300      	movs	r3, #0
   1f494:	9303      	str	r3, [sp, #12]
   1f496:	9305      	str	r3, [sp, #20]
   1f498:	ac50      	add	r4, sp, #320	; 0x140
   1f49a:	e106      	b.n	1f6aa <_svfprintf_r+0x6e2>
   1f49c:	9b08      	ldr	r3, [sp, #32]
   1f49e:	f853 2b04 	ldr.w	r2, [r3], #4
   1f4a2:	9206      	str	r2, [sp, #24]
   1f4a4:	2a00      	cmp	r2, #0
   1f4a6:	f280 8419 	bge.w	1fcdc <_svfprintf_r+0xd14>
   1f4aa:	9a06      	ldr	r2, [sp, #24]
   1f4ac:	9308      	str	r3, [sp, #32]
   1f4ae:	4252      	negs	r2, r2
   1f4b0:	9206      	str	r2, [sp, #24]
   1f4b2:	f899 3000 	ldrb.w	r3, [r9]
   1f4b6:	f048 0804 	orr.w	r8, r8, #4
   1f4ba:	e5e1      	b.n	1f080 <_svfprintf_r+0xb8>
   1f4bc:	f899 3000 	ldrb.w	r3, [r9]
   1f4c0:	f048 0808 	orr.w	r8, r8, #8
   1f4c4:	e5dc      	b.n	1f080 <_svfprintf_r+0xb8>
   1f4c6:	f048 0810 	orr.w	r8, r8, #16
   1f4ca:	f018 0f20 	tst.w	r8, #32
   1f4ce:	930b      	str	r3, [sp, #44]	; 0x2c
   1f4d0:	9b08      	ldr	r3, [sp, #32]
   1f4d2:	d1c1      	bne.n	1f458 <_svfprintf_r+0x490>
   1f4d4:	f018 0f10 	tst.w	r8, #16
   1f4d8:	f040 840b 	bne.w	1fcf2 <_svfprintf_r+0xd2a>
   1f4dc:	f018 0f40 	tst.w	r8, #64	; 0x40
   1f4e0:	f000 8403 	beq.w	1fcea <_svfprintf_r+0xd22>
   1f4e4:	f933 2b04 	ldrsh.w	r2, [r3], #4
   1f4e8:	9308      	str	r3, [sp, #32]
   1f4ea:	17d1      	asrs	r1, r2, #31
   1f4ec:	460b      	mov	r3, r1
   1f4ee:	e7bd      	b.n	1f46c <_svfprintf_r+0x4a4>
   1f4f0:	9b08      	ldr	r3, [sp, #32]
   1f4f2:	f048 0202 	orr.w	r2, r8, #2
   1f4f6:	9202      	str	r2, [sp, #8]
   1f4f8:	f853 2b04 	ldr.w	r2, [r3], #4
   1f4fc:	9308      	str	r3, [sp, #32]
   1f4fe:	f647 0330 	movw	r3, #30768	; 0x7830
   1f502:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   1f506:	2078      	movs	r0, #120	; 0x78
   1f508:	4b45      	ldr	r3, [pc, #276]	; (1f620 <_svfprintf_r+0x658>)
   1f50a:	9311      	str	r3, [sp, #68]	; 0x44
   1f50c:	2100      	movs	r1, #0
   1f50e:	2302      	movs	r3, #2
   1f510:	900b      	str	r0, [sp, #44]	; 0x2c
   1f512:	2000      	movs	r0, #0
   1f514:	9c03      	ldr	r4, [sp, #12]
   1f516:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   1f51a:	1c60      	adds	r0, r4, #1
   1f51c:	f000 80ad 	beq.w	1f67a <_svfprintf_r+0x6b2>
   1f520:	9802      	ldr	r0, [sp, #8]
   1f522:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   1f526:	ea52 0001 	orrs.w	r0, r2, r1
   1f52a:	f040 80a4 	bne.w	1f676 <_svfprintf_r+0x6ae>
   1f52e:	2c00      	cmp	r4, #0
   1f530:	f040 86ae 	bne.w	20290 <_svfprintf_r+0x12c8>
   1f534:	2b00      	cmp	r3, #0
   1f536:	d1ac      	bne.n	1f492 <_svfprintf_r+0x4ca>
   1f538:	9b02      	ldr	r3, [sp, #8]
   1f53a:	f013 0301 	ands.w	r3, r3, #1
   1f53e:	9305      	str	r3, [sp, #20]
   1f540:	f000 83d1 	beq.w	1fce6 <_svfprintf_r+0xd1e>
   1f544:	2330      	movs	r3, #48	; 0x30
   1f546:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   1f54a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   1f54e:	e0ac      	b.n	1f6aa <_svfprintf_r+0x6e2>
   1f550:	f018 0f20 	tst.w	r8, #32
   1f554:	f040 83d4 	bne.w	1fd00 <_svfprintf_r+0xd38>
   1f558:	f018 0f10 	tst.w	r8, #16
   1f55c:	f040 869f 	bne.w	2029e <_svfprintf_r+0x12d6>
   1f560:	f018 0f40 	tst.w	r8, #64	; 0x40
   1f564:	f040 8797 	bne.w	20496 <_svfprintf_r+0x14ce>
   1f568:	f418 7f00 	tst.w	r8, #512	; 0x200
   1f56c:	f000 8697 	beq.w	2029e <_svfprintf_r+0x12d6>
   1f570:	9b08      	ldr	r3, [sp, #32]
   1f572:	9904      	ldr	r1, [sp, #16]
   1f574:	f853 2b04 	ldr.w	r2, [r3], #4
   1f578:	9308      	str	r3, [sp, #32]
   1f57a:	7011      	strb	r1, [r2, #0]
   1f57c:	464c      	mov	r4, r9
   1f57e:	e555      	b.n	1f02c <_svfprintf_r+0x64>
   1f580:	f899 3000 	ldrb.w	r3, [r9]
   1f584:	2b68      	cmp	r3, #104	; 0x68
   1f586:	bf03      	ittte	eq
   1f588:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   1f58c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   1f590:	f109 0901 	addeq.w	r9, r9, #1
   1f594:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   1f598:	e572      	b.n	1f080 <_svfprintf_r+0xb8>
   1f59a:	f899 3000 	ldrb.w	r3, [r9]
   1f59e:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   1f5a2:	e56d      	b.n	1f080 <_svfprintf_r+0xb8>
   1f5a4:	f899 3000 	ldrb.w	r3, [r9]
   1f5a8:	2b6c      	cmp	r3, #108	; 0x6c
   1f5aa:	bf03      	ittte	eq
   1f5ac:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   1f5b0:	f048 0820 	orreq.w	r8, r8, #32
   1f5b4:	f109 0901 	addeq.w	r9, r9, #1
   1f5b8:	f048 0810 	orrne.w	r8, r8, #16
   1f5bc:	e560      	b.n	1f080 <_svfprintf_r+0xb8>
   1f5be:	930b      	str	r3, [sp, #44]	; 0x2c
   1f5c0:	f048 0810 	orr.w	r8, r8, #16
   1f5c4:	f018 0120 	ands.w	r1, r8, #32
   1f5c8:	f000 8351 	beq.w	1fc6e <_svfprintf_r+0xca6>
   1f5cc:	9b08      	ldr	r3, [sp, #32]
   1f5ce:	3307      	adds	r3, #7
   1f5d0:	f023 0307 	bic.w	r3, r3, #7
   1f5d4:	6859      	ldr	r1, [r3, #4]
   1f5d6:	f853 2b08 	ldr.w	r2, [r3], #8
   1f5da:	9308      	str	r3, [sp, #32]
   1f5dc:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   1f5e0:	9302      	str	r3, [sp, #8]
   1f5e2:	2300      	movs	r3, #0
   1f5e4:	e795      	b.n	1f512 <_svfprintf_r+0x54a>
   1f5e6:	930b      	str	r3, [sp, #44]	; 0x2c
   1f5e8:	f048 0310 	orr.w	r3, r8, #16
   1f5ec:	9302      	str	r3, [sp, #8]
   1f5ee:	9b02      	ldr	r3, [sp, #8]
   1f5f0:	f013 0120 	ands.w	r1, r3, #32
   1f5f4:	f000 8329 	beq.w	1fc4a <_svfprintf_r+0xc82>
   1f5f8:	9b08      	ldr	r3, [sp, #32]
   1f5fa:	3307      	adds	r3, #7
   1f5fc:	f023 0307 	bic.w	r3, r3, #7
   1f600:	6859      	ldr	r1, [r3, #4]
   1f602:	f853 2b08 	ldr.w	r2, [r3], #8
   1f606:	9308      	str	r3, [sp, #32]
   1f608:	2301      	movs	r3, #1
   1f60a:	e782      	b.n	1f512 <_svfprintf_r+0x54a>
   1f60c:	f899 3000 	ldrb.w	r3, [r9]
   1f610:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   1f614:	e534      	b.n	1f080 <_svfprintf_r+0xb8>
   1f616:	bf00      	nop
   1f618:	20008c78 	.word	0x20008c78
   1f61c:	20008c7c 	.word	0x20008c7c
   1f620:	20008c88 	.word	0x20008c88
   1f624:	4649      	mov	r1, r9
   1f626:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f62a:	2b2a      	cmp	r3, #42	; 0x2a
   1f62c:	f001 8249 	beq.w	20ac2 <_svfprintf_r+0x1afa>
   1f630:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f634:	2a09      	cmp	r2, #9
   1f636:	4689      	mov	r9, r1
   1f638:	bf98      	it	ls
   1f63a:	2100      	movls	r1, #0
   1f63c:	f201 8144 	bhi.w	208c8 <_svfprintf_r+0x1900>
   1f640:	f819 3b01 	ldrb.w	r3, [r9], #1
   1f644:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1f648:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   1f64c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f650:	2a09      	cmp	r2, #9
   1f652:	d9f5      	bls.n	1f640 <_svfprintf_r+0x678>
   1f654:	9103      	str	r1, [sp, #12]
   1f656:	e515      	b.n	1f084 <_svfprintf_r+0xbc>
   1f658:	f899 3000 	ldrb.w	r3, [r9]
   1f65c:	f048 0801 	orr.w	r8, r8, #1
   1f660:	e50e      	b.n	1f080 <_svfprintf_r+0xb8>
   1f662:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   1f666:	2b00      	cmp	r3, #0
   1f668:	f47f ad8f 	bne.w	1f18a <_svfprintf_r+0x1c2>
   1f66c:	f899 3000 	ldrb.w	r3, [r9]
   1f670:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   1f674:	e504      	b.n	1f080 <_svfprintf_r+0xb8>
   1f676:	f8cd 8008 	str.w	r8, [sp, #8]
   1f67a:	2b01      	cmp	r3, #1
   1f67c:	f000 819d 	beq.w	1f9ba <_svfprintf_r+0x9f2>
   1f680:	2b02      	cmp	r3, #2
   1f682:	ac50      	add	r4, sp, #320	; 0x140
   1f684:	d120      	bne.n	1f6c8 <_svfprintf_r+0x700>
   1f686:	9811      	ldr	r0, [sp, #68]	; 0x44
   1f688:	f002 030f 	and.w	r3, r2, #15
   1f68c:	0912      	lsrs	r2, r2, #4
   1f68e:	5cc3      	ldrb	r3, [r0, r3]
   1f690:	f804 3d01 	strb.w	r3, [r4, #-1]!
   1f694:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   1f698:	0909      	lsrs	r1, r1, #4
   1f69a:	ea52 0301 	orrs.w	r3, r2, r1
   1f69e:	d1f3      	bne.n	1f688 <_svfprintf_r+0x6c0>
   1f6a0:	ab50      	add	r3, sp, #320	; 0x140
   1f6a2:	1b1b      	subs	r3, r3, r4
   1f6a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1f6a8:	9305      	str	r3, [sp, #20]
   1f6aa:	9a05      	ldr	r2, [sp, #20]
   1f6ac:	9803      	ldr	r0, [sp, #12]
   1f6ae:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1f6b2:	4282      	cmp	r2, r0
   1f6b4:	f04f 0300 	mov.w	r3, #0
   1f6b8:	bfb8      	it	lt
   1f6ba:	4602      	movlt	r2, r0
   1f6bc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1f6c0:	9307      	str	r3, [sp, #28]
   1f6c2:	9202      	str	r2, [sp, #8]
   1f6c4:	930f      	str	r3, [sp, #60]	; 0x3c
   1f6c6:	e660      	b.n	1f38a <_svfprintf_r+0x3c2>
   1f6c8:	f002 0307 	and.w	r3, r2, #7
   1f6cc:	08d2      	lsrs	r2, r2, #3
   1f6ce:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   1f6d2:	08c9      	lsrs	r1, r1, #3
   1f6d4:	3330      	adds	r3, #48	; 0x30
   1f6d6:	ea52 0501 	orrs.w	r5, r2, r1
   1f6da:	4620      	mov	r0, r4
   1f6dc:	f804 3d01 	strb.w	r3, [r4, #-1]!
   1f6e0:	d1f2      	bne.n	1f6c8 <_svfprintf_r+0x700>
   1f6e2:	9a02      	ldr	r2, [sp, #8]
   1f6e4:	07d1      	lsls	r1, r2, #31
   1f6e6:	f100 824d 	bmi.w	1fb84 <_svfprintf_r+0xbbc>
   1f6ea:	ab50      	add	r3, sp, #320	; 0x140
   1f6ec:	1b1b      	subs	r3, r3, r4
   1f6ee:	4690      	mov	r8, r2
   1f6f0:	9305      	str	r3, [sp, #20]
   1f6f2:	e7da      	b.n	1f6aa <_svfprintf_r+0x6e2>
   1f6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f6f6:	2b65      	cmp	r3, #101	; 0x65
   1f6f8:	f340 80d4 	ble.w	1f8a4 <_svfprintf_r+0x8dc>
   1f6fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1f700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f704:	f040 81c1 	bne.w	1fa8a <_svfprintf_r+0xac2>
   1f708:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f70a:	49ba      	ldr	r1, [pc, #744]	; (1f9f4 <_svfprintf_r+0xa2c>)
   1f70c:	f8ca 1000 	str.w	r1, [sl]
   1f710:	3301      	adds	r3, #1
   1f712:	3201      	adds	r2, #1
   1f714:	2101      	movs	r1, #1
   1f716:	2b07      	cmp	r3, #7
   1f718:	9226      	str	r2, [sp, #152]	; 0x98
   1f71a:	9325      	str	r3, [sp, #148]	; 0x94
   1f71c:	f8ca 1004 	str.w	r1, [sl, #4]
   1f720:	f300 8551 	bgt.w	201c6 <_svfprintf_r+0x11fe>
   1f724:	f10a 0a08 	add.w	sl, sl, #8
   1f728:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f72a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f72c:	428b      	cmp	r3, r1
   1f72e:	f280 82d0 	bge.w	1fcd2 <_svfprintf_r+0xd0a>
   1f732:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f734:	9912      	ldr	r1, [sp, #72]	; 0x48
   1f736:	441a      	add	r2, r3
   1f738:	e9ca 1300 	strd	r1, r3, [sl]
   1f73c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f73e:	9226      	str	r2, [sp, #152]	; 0x98
   1f740:	3301      	adds	r3, #1
   1f742:	2b07      	cmp	r3, #7
   1f744:	9325      	str	r3, [sp, #148]	; 0x94
   1f746:	f300 8397 	bgt.w	1fe78 <_svfprintf_r+0xeb0>
   1f74a:	f10a 0a08 	add.w	sl, sl, #8
   1f74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f750:	1e5c      	subs	r4, r3, #1
   1f752:	2c00      	cmp	r4, #0
   1f754:	f77f add0 	ble.w	1f2f8 <_svfprintf_r+0x330>
   1f758:	2c10      	cmp	r4, #16
   1f75a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f75c:	f340 856e 	ble.w	2023c <_svfprintf_r+0x1274>
   1f760:	ee1b 6a10 	vmov	r6, s22
   1f764:	2510      	movs	r5, #16
   1f766:	e005      	b.n	1f774 <_svfprintf_r+0x7ac>
   1f768:	f10a 0a08 	add.w	sl, sl, #8
   1f76c:	3c10      	subs	r4, #16
   1f76e:	2c10      	cmp	r4, #16
   1f770:	f340 8564 	ble.w	2023c <_svfprintf_r+0x1274>
   1f774:	3301      	adds	r3, #1
   1f776:	49a0      	ldr	r1, [pc, #640]	; (1f9f8 <_svfprintf_r+0xa30>)
   1f778:	3210      	adds	r2, #16
   1f77a:	2b07      	cmp	r3, #7
   1f77c:	e9ca 1500 	strd	r1, r5, [sl]
   1f780:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f784:	ddf0      	ble.n	1f768 <_svfprintf_r+0x7a0>
   1f786:	aa24      	add	r2, sp, #144	; 0x90
   1f788:	4631      	mov	r1, r6
   1f78a:	4658      	mov	r0, fp
   1f78c:	f002 fbbc 	bl	21f08 <__ssprint_r>
   1f790:	2800      	cmp	r0, #0
   1f792:	d17e      	bne.n	1f892 <_svfprintf_r+0x8ca>
   1f794:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1f798:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f79c:	e7e6      	b.n	1f76c <_svfprintf_r+0x7a4>
   1f79e:	9b06      	ldr	r3, [sp, #24]
   1f7a0:	9902      	ldr	r1, [sp, #8]
   1f7a2:	1a5d      	subs	r5, r3, r1
   1f7a4:	2d00      	cmp	r5, #0
   1f7a6:	f77f ad8e 	ble.w	1f2c6 <_svfprintf_r+0x2fe>
   1f7aa:	2d10      	cmp	r5, #16
   1f7ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f7ae:	dd21      	ble.n	1f7f4 <_svfprintf_r+0x82c>
   1f7b0:	9409      	str	r4, [sp, #36]	; 0x24
   1f7b2:	2610      	movs	r6, #16
   1f7b4:	ee1b 4a10 	vmov	r4, s22
   1f7b8:	e004      	b.n	1f7c4 <_svfprintf_r+0x7fc>
   1f7ba:	3d10      	subs	r5, #16
   1f7bc:	2d10      	cmp	r5, #16
   1f7be:	f10a 0a08 	add.w	sl, sl, #8
   1f7c2:	dd16      	ble.n	1f7f2 <_svfprintf_r+0x82a>
   1f7c4:	3301      	adds	r3, #1
   1f7c6:	498c      	ldr	r1, [pc, #560]	; (1f9f8 <_svfprintf_r+0xa30>)
   1f7c8:	3210      	adds	r2, #16
   1f7ca:	2b07      	cmp	r3, #7
   1f7cc:	e9ca 1600 	strd	r1, r6, [sl]
   1f7d0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f7d4:	ddf1      	ble.n	1f7ba <_svfprintf_r+0x7f2>
   1f7d6:	aa24      	add	r2, sp, #144	; 0x90
   1f7d8:	4621      	mov	r1, r4
   1f7da:	4658      	mov	r0, fp
   1f7dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f7e0:	f002 fb92 	bl	21f08 <__ssprint_r>
   1f7e4:	2800      	cmp	r0, #0
   1f7e6:	d154      	bne.n	1f892 <_svfprintf_r+0x8ca>
   1f7e8:	3d10      	subs	r5, #16
   1f7ea:	2d10      	cmp	r5, #16
   1f7ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1f7f0:	dce8      	bgt.n	1f7c4 <_svfprintf_r+0x7fc>
   1f7f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f7f4:	4980      	ldr	r1, [pc, #512]	; (1f9f8 <_svfprintf_r+0xa30>)
   1f7f6:	f8ca 5004 	str.w	r5, [sl, #4]
   1f7fa:	3301      	adds	r3, #1
   1f7fc:	442a      	add	r2, r5
   1f7fe:	2b07      	cmp	r3, #7
   1f800:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f804:	f8ca 1000 	str.w	r1, [sl]
   1f808:	f300 8526 	bgt.w	20258 <_svfprintf_r+0x1290>
   1f80c:	9b03      	ldr	r3, [sp, #12]
   1f80e:	9905      	ldr	r1, [sp, #20]
   1f810:	1a5d      	subs	r5, r3, r1
   1f812:	2d00      	cmp	r5, #0
   1f814:	f10a 0a08 	add.w	sl, sl, #8
   1f818:	f77f ad5b 	ble.w	1f2d2 <_svfprintf_r+0x30a>
   1f81c:	2d10      	cmp	r5, #16
   1f81e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f820:	dd1f      	ble.n	1f862 <_svfprintf_r+0x89a>
   1f822:	4651      	mov	r1, sl
   1f824:	2610      	movs	r6, #16
   1f826:	ee1b aa10 	vmov	sl, s22
   1f82a:	e004      	b.n	1f836 <_svfprintf_r+0x86e>
   1f82c:	3d10      	subs	r5, #16
   1f82e:	2d10      	cmp	r5, #16
   1f830:	f101 0108 	add.w	r1, r1, #8
   1f834:	dd14      	ble.n	1f860 <_svfprintf_r+0x898>
   1f836:	3301      	adds	r3, #1
   1f838:	486f      	ldr	r0, [pc, #444]	; (1f9f8 <_svfprintf_r+0xa30>)
   1f83a:	3210      	adds	r2, #16
   1f83c:	2b07      	cmp	r3, #7
   1f83e:	e9c1 0600 	strd	r0, r6, [r1]
   1f842:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f846:	ddf1      	ble.n	1f82c <_svfprintf_r+0x864>
   1f848:	aa24      	add	r2, sp, #144	; 0x90
   1f84a:	4651      	mov	r1, sl
   1f84c:	4658      	mov	r0, fp
   1f84e:	f002 fb5b 	bl	21f08 <__ssprint_r>
   1f852:	b9f0      	cbnz	r0, 1f892 <_svfprintf_r+0x8ca>
   1f854:	3d10      	subs	r5, #16
   1f856:	2d10      	cmp	r5, #16
   1f858:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1f85c:	a927      	add	r1, sp, #156	; 0x9c
   1f85e:	dcea      	bgt.n	1f836 <_svfprintf_r+0x86e>
   1f860:	468a      	mov	sl, r1
   1f862:	3301      	adds	r3, #1
   1f864:	4964      	ldr	r1, [pc, #400]	; (1f9f8 <_svfprintf_r+0xa30>)
   1f866:	f8ca 5004 	str.w	r5, [sl, #4]
   1f86a:	442a      	add	r2, r5
   1f86c:	2b07      	cmp	r3, #7
   1f86e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f872:	f8ca 1000 	str.w	r1, [sl]
   1f876:	f300 81da 	bgt.w	1fc2e <_svfprintf_r+0xc66>
   1f87a:	f10a 0a08 	add.w	sl, sl, #8
   1f87e:	e528      	b.n	1f2d2 <_svfprintf_r+0x30a>
   1f880:	ee1b 1a10 	vmov	r1, s22
   1f884:	aa24      	add	r2, sp, #144	; 0x90
   1f886:	4658      	mov	r0, fp
   1f888:	f002 fb3e 	bl	21f08 <__ssprint_r>
   1f88c:	2800      	cmp	r0, #0
   1f88e:	f43f ad47 	beq.w	1f320 <_svfprintf_r+0x358>
   1f892:	9b07      	ldr	r3, [sp, #28]
   1f894:	2b00      	cmp	r3, #0
   1f896:	f43f aca2 	beq.w	1f1de <_svfprintf_r+0x216>
   1f89a:	9907      	ldr	r1, [sp, #28]
   1f89c:	4658      	mov	r0, fp
   1f89e:	f7fd fd81 	bl	1d3a4 <_free_r>
   1f8a2:	e49c      	b.n	1f1de <_svfprintf_r+0x216>
   1f8a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f8a6:	2b01      	cmp	r3, #1
   1f8a8:	f340 817a 	ble.w	1fba0 <_svfprintf_r+0xbd8>
   1f8ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f8ae:	f8ca 4000 	str.w	r4, [sl]
   1f8b2:	3301      	adds	r3, #1
   1f8b4:	3201      	adds	r2, #1
   1f8b6:	2101      	movs	r1, #1
   1f8b8:	2b07      	cmp	r3, #7
   1f8ba:	9226      	str	r2, [sp, #152]	; 0x98
   1f8bc:	9325      	str	r3, [sp, #148]	; 0x94
   1f8be:	f8ca 1004 	str.w	r1, [sl, #4]
   1f8c2:	f300 81f8 	bgt.w	1fcb6 <_svfprintf_r+0xcee>
   1f8c6:	f10a 0a08 	add.w	sl, sl, #8
   1f8ca:	9910      	ldr	r1, [sp, #64]	; 0x40
   1f8cc:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f8ce:	3301      	adds	r3, #1
   1f8d0:	440a      	add	r2, r1
   1f8d2:	2b07      	cmp	r3, #7
   1f8d4:	e9ca 0100 	strd	r0, r1, [sl]
   1f8d8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f8dc:	f300 81dd 	bgt.w	1fc9a <_svfprintf_r+0xcd2>
   1f8e0:	f10a 0a08 	add.w	sl, sl, #8
   1f8e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1f8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f8ec:	f000 8177 	beq.w	1fbde <_svfprintf_r+0xc16>
   1f8f0:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f8f2:	3301      	adds	r3, #1
   1f8f4:	3901      	subs	r1, #1
   1f8f6:	3401      	adds	r4, #1
   1f8f8:	440a      	add	r2, r1
   1f8fa:	2b07      	cmp	r3, #7
   1f8fc:	f8ca 4000 	str.w	r4, [sl]
   1f900:	9325      	str	r3, [sp, #148]	; 0x94
   1f902:	f8ca 1004 	str.w	r1, [sl, #4]
   1f906:	9226      	str	r2, [sp, #152]	; 0x98
   1f908:	f300 815b 	bgt.w	1fbc2 <_svfprintf_r+0xbfa>
   1f90c:	f10a 0a08 	add.w	sl, sl, #8
   1f910:	9914      	ldr	r1, [sp, #80]	; 0x50
   1f912:	f8ca 1004 	str.w	r1, [sl, #4]
   1f916:	3301      	adds	r3, #1
   1f918:	440a      	add	r2, r1
   1f91a:	2b07      	cmp	r3, #7
   1f91c:	a91e      	add	r1, sp, #120	; 0x78
   1f91e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f922:	f8ca 1000 	str.w	r1, [sl]
   1f926:	f77f ace5 	ble.w	1f2f4 <_svfprintf_r+0x32c>
   1f92a:	ee1b 1a10 	vmov	r1, s22
   1f92e:	aa24      	add	r2, sp, #144	; 0x90
   1f930:	4658      	mov	r0, fp
   1f932:	f002 fae9 	bl	21f08 <__ssprint_r>
   1f936:	2800      	cmp	r0, #0
   1f938:	d1ab      	bne.n	1f892 <_svfprintf_r+0x8ca>
   1f93a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1f93c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f940:	e4da      	b.n	1f2f8 <_svfprintf_r+0x330>
   1f942:	2d10      	cmp	r5, #16
   1f944:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   1f948:	4e2c      	ldr	r6, [pc, #176]	; (1f9fc <_svfprintf_r+0xa34>)
   1f94a:	dd24      	ble.n	1f996 <_svfprintf_r+0x9ce>
   1f94c:	9417      	str	r4, [sp, #92]	; 0x5c
   1f94e:	2310      	movs	r3, #16
   1f950:	ee1b 4a10 	vmov	r4, s22
   1f954:	4608      	mov	r0, r1
   1f956:	e004      	b.n	1f962 <_svfprintf_r+0x99a>
   1f958:	3d10      	subs	r5, #16
   1f95a:	2d10      	cmp	r5, #16
   1f95c:	f10a 0a08 	add.w	sl, sl, #8
   1f960:	dd17      	ble.n	1f992 <_svfprintf_r+0x9ca>
   1f962:	3001      	adds	r0, #1
   1f964:	3210      	adds	r2, #16
   1f966:	2807      	cmp	r0, #7
   1f968:	e9ca 6300 	strd	r6, r3, [sl]
   1f96c:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   1f970:	ddf2      	ble.n	1f958 <_svfprintf_r+0x990>
   1f972:	aa24      	add	r2, sp, #144	; 0x90
   1f974:	4621      	mov	r1, r4
   1f976:	4658      	mov	r0, fp
   1f978:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f97c:	f002 fac4 	bl	21f08 <__ssprint_r>
   1f980:	2800      	cmp	r0, #0
   1f982:	d186      	bne.n	1f892 <_svfprintf_r+0x8ca>
   1f984:	3d10      	subs	r5, #16
   1f986:	2d10      	cmp	r5, #16
   1f988:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   1f98c:	f04f 0310 	mov.w	r3, #16
   1f990:	dce7      	bgt.n	1f962 <_svfprintf_r+0x99a>
   1f992:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   1f994:	4601      	mov	r1, r0
   1f996:	3101      	adds	r1, #1
   1f998:	442a      	add	r2, r5
   1f99a:	2907      	cmp	r1, #7
   1f99c:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   1f9a0:	f8ca 6000 	str.w	r6, [sl]
   1f9a4:	f8ca 5004 	str.w	r5, [sl, #4]
   1f9a8:	f300 83bd 	bgt.w	20126 <_svfprintf_r+0x115e>
   1f9ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1f9b0:	f10a 0a08 	add.w	sl, sl, #8
   1f9b4:	e45d      	b.n	1f272 <_svfprintf_r+0x2aa>
   1f9b6:	f8cd 8008 	str.w	r8, [sp, #8]
   1f9ba:	2a0a      	cmp	r2, #10
   1f9bc:	f171 0300 	sbcs.w	r3, r1, #0
   1f9c0:	f080 8345 	bcs.w	2004e <_svfprintf_r+0x1086>
   1f9c4:	3230      	adds	r2, #48	; 0x30
   1f9c6:	2301      	movs	r3, #1
   1f9c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1f9cc:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   1f9d0:	9305      	str	r3, [sp, #20]
   1f9d2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   1f9d6:	e668      	b.n	1f6aa <_svfprintf_r+0x6e2>
   1f9d8:	ee1b 1a10 	vmov	r1, s22
   1f9dc:	aa24      	add	r2, sp, #144	; 0x90
   1f9de:	4658      	mov	r0, fp
   1f9e0:	f002 fa92 	bl	21f08 <__ssprint_r>
   1f9e4:	2800      	cmp	r0, #0
   1f9e6:	f47f af54 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1f9ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1f9ec:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f9f0:	e452      	b.n	1f298 <_svfprintf_r+0x2d0>
   1f9f2:	bf00      	nop
   1f9f4:	200035f0 	.word	0x200035f0
   1f9f8:	200025fc 	.word	0x200025fc
   1f9fc:	200025ec 	.word	0x200025ec
   1fa00:	ee1b 1a10 	vmov	r1, s22
   1fa04:	aa24      	add	r2, sp, #144	; 0x90
   1fa06:	4658      	mov	r0, fp
   1fa08:	f002 fa7e 	bl	21f08 <__ssprint_r>
   1fa0c:	2800      	cmp	r0, #0
   1fa0e:	f47f af40 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fa12:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fa14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fa18:	e451      	b.n	1f2be <_svfprintf_r+0x2f6>
   1fa1a:	2c10      	cmp	r4, #16
   1fa1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fa1e:	4ebe      	ldr	r6, [pc, #760]	; (1fd18 <_svfprintf_r+0xd50>)
   1fa20:	dd1f      	ble.n	1fa62 <_svfprintf_r+0xa9a>
   1fa22:	ee1b 8a10 	vmov	r8, s22
   1fa26:	2510      	movs	r5, #16
   1fa28:	e004      	b.n	1fa34 <_svfprintf_r+0xa6c>
   1fa2a:	3c10      	subs	r4, #16
   1fa2c:	2c10      	cmp	r4, #16
   1fa2e:	f10a 0a08 	add.w	sl, sl, #8
   1fa32:	dd16      	ble.n	1fa62 <_svfprintf_r+0xa9a>
   1fa34:	3301      	adds	r3, #1
   1fa36:	3210      	adds	r2, #16
   1fa38:	2b07      	cmp	r3, #7
   1fa3a:	e9ca 6500 	strd	r6, r5, [sl]
   1fa3e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fa42:	ddf2      	ble.n	1fa2a <_svfprintf_r+0xa62>
   1fa44:	aa24      	add	r2, sp, #144	; 0x90
   1fa46:	4641      	mov	r1, r8
   1fa48:	4658      	mov	r0, fp
   1fa4a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fa4e:	f002 fa5b 	bl	21f08 <__ssprint_r>
   1fa52:	2800      	cmp	r0, #0
   1fa54:	f47f af1d 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fa58:	3c10      	subs	r4, #16
   1fa5a:	2c10      	cmp	r4, #16
   1fa5c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fa60:	dce8      	bgt.n	1fa34 <_svfprintf_r+0xa6c>
   1fa62:	3301      	adds	r3, #1
   1fa64:	4422      	add	r2, r4
   1fa66:	2b07      	cmp	r3, #7
   1fa68:	e9ca 6400 	strd	r6, r4, [sl]
   1fa6c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fa70:	f77f ac4b 	ble.w	1f30a <_svfprintf_r+0x342>
   1fa74:	ee1b 1a10 	vmov	r1, s22
   1fa78:	aa24      	add	r2, sp, #144	; 0x90
   1fa7a:	4658      	mov	r0, fp
   1fa7c:	f002 fa44 	bl	21f08 <__ssprint_r>
   1fa80:	2800      	cmp	r0, #0
   1fa82:	f47f af06 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fa86:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fa88:	e43f      	b.n	1f30a <_svfprintf_r+0x342>
   1fa8a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1fa8c:	2900      	cmp	r1, #0
   1fa8e:	f340 835a 	ble.w	20146 <_svfprintf_r+0x117e>
   1fa92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1fa94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fa96:	429e      	cmp	r6, r3
   1fa98:	bfa8      	it	ge
   1fa9a:	461e      	movge	r6, r3
   1fa9c:	2e00      	cmp	r6, #0
   1fa9e:	dd0b      	ble.n	1fab8 <_svfprintf_r+0xaf0>
   1faa0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1faa2:	3301      	adds	r3, #1
   1faa4:	4432      	add	r2, r6
   1faa6:	2b07      	cmp	r3, #7
   1faa8:	e9ca 4600 	strd	r4, r6, [sl]
   1faac:	9226      	str	r2, [sp, #152]	; 0x98
   1faae:	9325      	str	r3, [sp, #148]	; 0x94
   1fab0:	f300 8689 	bgt.w	207c6 <_svfprintf_r+0x17fe>
   1fab4:	f10a 0a08 	add.w	sl, sl, #8
   1fab8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1faba:	2e00      	cmp	r6, #0
   1fabc:	bfa8      	it	ge
   1fabe:	1bad      	subge	r5, r5, r6
   1fac0:	2d00      	cmp	r5, #0
   1fac2:	f300 8203 	bgt.w	1fecc <_svfprintf_r+0xf04>
   1fac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fac8:	f418 6f80 	tst.w	r8, #1024	; 0x400
   1facc:	4423      	add	r3, r4
   1face:	9305      	str	r3, [sp, #20]
   1fad0:	f040 821f 	bne.w	1ff12 <_svfprintf_r+0xf4a>
   1fad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1fad6:	990e      	ldr	r1, [sp, #56]	; 0x38
   1fad8:	428b      	cmp	r3, r1
   1fada:	db03      	blt.n	1fae4 <_svfprintf_r+0xb1c>
   1fadc:	f018 0f01 	tst.w	r8, #1
   1fae0:	f000 84cf 	beq.w	20482 <_svfprintf_r+0x14ba>
   1fae4:	9910      	ldr	r1, [sp, #64]	; 0x40
   1fae6:	9812      	ldr	r0, [sp, #72]	; 0x48
   1fae8:	440a      	add	r2, r1
   1faea:	e9ca 0100 	strd	r0, r1, [sl]
   1faee:	9925      	ldr	r1, [sp, #148]	; 0x94
   1faf0:	9226      	str	r2, [sp, #152]	; 0x98
   1faf2:	3101      	adds	r1, #1
   1faf4:	2907      	cmp	r1, #7
   1faf6:	9125      	str	r1, [sp, #148]	; 0x94
   1faf8:	f300 86a5 	bgt.w	20846 <_svfprintf_r+0x187e>
   1fafc:	f10a 0a08 	add.w	sl, sl, #8
   1fb00:	990e      	ldr	r1, [sp, #56]	; 0x38
   1fb02:	1865      	adds	r5, r4, r1
   1fb04:	1acc      	subs	r4, r1, r3
   1fb06:	9b05      	ldr	r3, [sp, #20]
   1fb08:	1aed      	subs	r5, r5, r3
   1fb0a:	42a5      	cmp	r5, r4
   1fb0c:	bfa8      	it	ge
   1fb0e:	4625      	movge	r5, r4
   1fb10:	2d00      	cmp	r5, #0
   1fb12:	dd0d      	ble.n	1fb30 <_svfprintf_r+0xb68>
   1fb14:	f8ca 3000 	str.w	r3, [sl]
   1fb18:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fb1a:	f8ca 5004 	str.w	r5, [sl, #4]
   1fb1e:	3301      	adds	r3, #1
   1fb20:	442a      	add	r2, r5
   1fb22:	2b07      	cmp	r3, #7
   1fb24:	9226      	str	r2, [sp, #152]	; 0x98
   1fb26:	9325      	str	r3, [sp, #148]	; 0x94
   1fb28:	f300 86bb 	bgt.w	208a2 <_svfprintf_r+0x18da>
   1fb2c:	f10a 0a08 	add.w	sl, sl, #8
   1fb30:	2d00      	cmp	r5, #0
   1fb32:	bfa8      	it	ge
   1fb34:	1b64      	subge	r4, r4, r5
   1fb36:	2c00      	cmp	r4, #0
   1fb38:	f77f abde 	ble.w	1f2f8 <_svfprintf_r+0x330>
   1fb3c:	2c10      	cmp	r4, #16
   1fb3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fb40:	f340 837c 	ble.w	2023c <_svfprintf_r+0x1274>
   1fb44:	ee1b 6a10 	vmov	r6, s22
   1fb48:	2510      	movs	r5, #16
   1fb4a:	e005      	b.n	1fb58 <_svfprintf_r+0xb90>
   1fb4c:	f10a 0a08 	add.w	sl, sl, #8
   1fb50:	3c10      	subs	r4, #16
   1fb52:	2c10      	cmp	r4, #16
   1fb54:	f340 8372 	ble.w	2023c <_svfprintf_r+0x1274>
   1fb58:	3301      	adds	r3, #1
   1fb5a:	4970      	ldr	r1, [pc, #448]	; (1fd1c <_svfprintf_r+0xd54>)
   1fb5c:	3210      	adds	r2, #16
   1fb5e:	2b07      	cmp	r3, #7
   1fb60:	e9ca 1500 	strd	r1, r5, [sl]
   1fb64:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fb68:	ddf0      	ble.n	1fb4c <_svfprintf_r+0xb84>
   1fb6a:	aa24      	add	r2, sp, #144	; 0x90
   1fb6c:	4631      	mov	r1, r6
   1fb6e:	4658      	mov	r0, fp
   1fb70:	f002 f9ca 	bl	21f08 <__ssprint_r>
   1fb74:	2800      	cmp	r0, #0
   1fb76:	f47f ae8c 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fb7a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fb7e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fb82:	e7e5      	b.n	1fb50 <_svfprintf_r+0xb88>
   1fb84:	2b30      	cmp	r3, #48	; 0x30
   1fb86:	f43f ad8b 	beq.w	1f6a0 <_svfprintf_r+0x6d8>
   1fb8a:	2330      	movs	r3, #48	; 0x30
   1fb8c:	3802      	subs	r0, #2
   1fb8e:	f804 3c01 	strb.w	r3, [r4, #-1]
   1fb92:	ab50      	add	r3, sp, #320	; 0x140
   1fb94:	1a1b      	subs	r3, r3, r0
   1fb96:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1fb9a:	9305      	str	r3, [sp, #20]
   1fb9c:	4604      	mov	r4, r0
   1fb9e:	e584      	b.n	1f6aa <_svfprintf_r+0x6e2>
   1fba0:	f018 0f01 	tst.w	r8, #1
   1fba4:	f47f ae82 	bne.w	1f8ac <_svfprintf_r+0x8e4>
   1fba8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fbaa:	f8ca 4000 	str.w	r4, [sl]
   1fbae:	3301      	adds	r3, #1
   1fbb0:	3201      	adds	r2, #1
   1fbb2:	2101      	movs	r1, #1
   1fbb4:	2b07      	cmp	r3, #7
   1fbb6:	9226      	str	r2, [sp, #152]	; 0x98
   1fbb8:	9325      	str	r3, [sp, #148]	; 0x94
   1fbba:	f8ca 1004 	str.w	r1, [sl, #4]
   1fbbe:	f77f aea5 	ble.w	1f90c <_svfprintf_r+0x944>
   1fbc2:	ee1b 1a10 	vmov	r1, s22
   1fbc6:	aa24      	add	r2, sp, #144	; 0x90
   1fbc8:	4658      	mov	r0, fp
   1fbca:	f002 f99d 	bl	21f08 <__ssprint_r>
   1fbce:	2800      	cmp	r0, #0
   1fbd0:	f47f ae5f 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fbd4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fbd8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fbdc:	e698      	b.n	1f910 <_svfprintf_r+0x948>
   1fbde:	990e      	ldr	r1, [sp, #56]	; 0x38
   1fbe0:	1e4c      	subs	r4, r1, #1
   1fbe2:	2c00      	cmp	r4, #0
   1fbe4:	f77f ae94 	ble.w	1f910 <_svfprintf_r+0x948>
   1fbe8:	2c10      	cmp	r4, #16
   1fbea:	f340 8361 	ble.w	202b0 <_svfprintf_r+0x12e8>
   1fbee:	ee1b 6a10 	vmov	r6, s22
   1fbf2:	2510      	movs	r5, #16
   1fbf4:	e005      	b.n	1fc02 <_svfprintf_r+0xc3a>
   1fbf6:	f10a 0a08 	add.w	sl, sl, #8
   1fbfa:	3c10      	subs	r4, #16
   1fbfc:	2c10      	cmp	r4, #16
   1fbfe:	f340 8357 	ble.w	202b0 <_svfprintf_r+0x12e8>
   1fc02:	3301      	adds	r3, #1
   1fc04:	4945      	ldr	r1, [pc, #276]	; (1fd1c <_svfprintf_r+0xd54>)
   1fc06:	3210      	adds	r2, #16
   1fc08:	2b07      	cmp	r3, #7
   1fc0a:	e9ca 1500 	strd	r1, r5, [sl]
   1fc0e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fc12:	ddf0      	ble.n	1fbf6 <_svfprintf_r+0xc2e>
   1fc14:	aa24      	add	r2, sp, #144	; 0x90
   1fc16:	4631      	mov	r1, r6
   1fc18:	4658      	mov	r0, fp
   1fc1a:	f002 f975 	bl	21f08 <__ssprint_r>
   1fc1e:	2800      	cmp	r0, #0
   1fc20:	f47f ae37 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fc24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fc28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fc2c:	e7e5      	b.n	1fbfa <_svfprintf_r+0xc32>
   1fc2e:	ee1b 1a10 	vmov	r1, s22
   1fc32:	aa24      	add	r2, sp, #144	; 0x90
   1fc34:	4658      	mov	r0, fp
   1fc36:	f002 f967 	bl	21f08 <__ssprint_r>
   1fc3a:	2800      	cmp	r0, #0
   1fc3c:	f47f ae29 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fc40:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fc42:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fc46:	f7ff bb44 	b.w	1f2d2 <_svfprintf_r+0x30a>
   1fc4a:	9b02      	ldr	r3, [sp, #8]
   1fc4c:	f013 0310 	ands.w	r3, r3, #16
   1fc50:	f040 80c1 	bne.w	1fdd6 <_svfprintf_r+0xe0e>
   1fc54:	9a02      	ldr	r2, [sp, #8]
   1fc56:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   1fc5a:	f000 837a 	beq.w	20352 <_svfprintf_r+0x138a>
   1fc5e:	9808      	ldr	r0, [sp, #32]
   1fc60:	f850 2b04 	ldr.w	r2, [r0], #4
   1fc64:	9008      	str	r0, [sp, #32]
   1fc66:	4619      	mov	r1, r3
   1fc68:	b292      	uxth	r2, r2
   1fc6a:	2301      	movs	r3, #1
   1fc6c:	e451      	b.n	1f512 <_svfprintf_r+0x54a>
   1fc6e:	f018 0310 	ands.w	r3, r8, #16
   1fc72:	d155      	bne.n	1fd20 <_svfprintf_r+0xd58>
   1fc74:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   1fc78:	f000 835d 	beq.w	20336 <_svfprintf_r+0x136e>
   1fc7c:	9808      	ldr	r0, [sp, #32]
   1fc7e:	f850 2b04 	ldr.w	r2, [r0], #4
   1fc82:	9008      	str	r0, [sp, #32]
   1fc84:	4619      	mov	r1, r3
   1fc86:	b292      	uxth	r2, r2
   1fc88:	e4a8      	b.n	1f5dc <_svfprintf_r+0x614>
   1fc8a:	4252      	negs	r2, r2
   1fc8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fc90:	f8cd 8008 	str.w	r8, [sp, #8]
   1fc94:	202d      	movs	r0, #45	; 0x2d
   1fc96:	2301      	movs	r3, #1
   1fc98:	e43c      	b.n	1f514 <_svfprintf_r+0x54c>
   1fc9a:	ee1b 1a10 	vmov	r1, s22
   1fc9e:	aa24      	add	r2, sp, #144	; 0x90
   1fca0:	4658      	mov	r0, fp
   1fca2:	f002 f931 	bl	21f08 <__ssprint_r>
   1fca6:	2800      	cmp	r0, #0
   1fca8:	f47f adf3 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fcac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fcb0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fcb4:	e616      	b.n	1f8e4 <_svfprintf_r+0x91c>
   1fcb6:	ee1b 1a10 	vmov	r1, s22
   1fcba:	aa24      	add	r2, sp, #144	; 0x90
   1fcbc:	4658      	mov	r0, fp
   1fcbe:	f002 f923 	bl	21f08 <__ssprint_r>
   1fcc2:	2800      	cmp	r0, #0
   1fcc4:	f47f ade5 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fcc8:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fccc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fcd0:	e5fb      	b.n	1f8ca <_svfprintf_r+0x902>
   1fcd2:	f018 0f01 	tst.w	r8, #1
   1fcd6:	f43f ab0f 	beq.w	1f2f8 <_svfprintf_r+0x330>
   1fcda:	e52a      	b.n	1f732 <_svfprintf_r+0x76a>
   1fcdc:	9308      	str	r3, [sp, #32]
   1fcde:	f899 3000 	ldrb.w	r3, [r9]
   1fce2:	f7ff b9cd 	b.w	1f080 <_svfprintf_r+0xb8>
   1fce6:	ac50      	add	r4, sp, #320	; 0x140
   1fce8:	e4df      	b.n	1f6aa <_svfprintf_r+0x6e2>
   1fcea:	f418 7f00 	tst.w	r8, #512	; 0x200
   1fcee:	f040 83db 	bne.w	204a8 <_svfprintf_r+0x14e0>
   1fcf2:	f853 2b04 	ldr.w	r2, [r3], #4
   1fcf6:	9308      	str	r3, [sp, #32]
   1fcf8:	17d1      	asrs	r1, r2, #31
   1fcfa:	460b      	mov	r3, r1
   1fcfc:	f7ff bbb6 	b.w	1f46c <_svfprintf_r+0x4a4>
   1fd00:	9b08      	ldr	r3, [sp, #32]
   1fd02:	9804      	ldr	r0, [sp, #16]
   1fd04:	f853 1b04 	ldr.w	r1, [r3], #4
   1fd08:	9308      	str	r3, [sp, #32]
   1fd0a:	17c2      	asrs	r2, r0, #31
   1fd0c:	e9c1 0200 	strd	r0, r2, [r1]
   1fd10:	464c      	mov	r4, r9
   1fd12:	f7ff b98b 	b.w	1f02c <_svfprintf_r+0x64>
   1fd16:	bf00      	nop
   1fd18:	200025ec 	.word	0x200025ec
   1fd1c:	200025fc 	.word	0x200025fc
   1fd20:	9b08      	ldr	r3, [sp, #32]
   1fd22:	f853 2b04 	ldr.w	r2, [r3], #4
   1fd26:	9308      	str	r3, [sp, #32]
   1fd28:	e458      	b.n	1f5dc <_svfprintf_r+0x614>
   1fd2a:	eeb4 8b48 	vcmp.f64	d8, d8
   1fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fd32:	f180 8694 	bvs.w	20a5e <_svfprintf_r+0x1a96>
   1fd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fd38:	2b61      	cmp	r3, #97	; 0x61
   1fd3a:	f000 8552 	beq.w	207e2 <_svfprintf_r+0x181a>
   1fd3e:	2b41      	cmp	r3, #65	; 0x41
   1fd40:	f000 85c0 	beq.w	208c4 <_svfprintf_r+0x18fc>
   1fd44:	9b03      	ldr	r3, [sp, #12]
   1fd46:	3301      	adds	r3, #1
   1fd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fd4a:	f023 0520 	bic.w	r5, r3, #32
   1fd4e:	f000 8480 	beq.w	20652 <_svfprintf_r+0x168a>
   1fd52:	2d47      	cmp	r5, #71	; 0x47
   1fd54:	d104      	bne.n	1fd60 <_svfprintf_r+0xd98>
   1fd56:	9b03      	ldr	r3, [sp, #12]
   1fd58:	2b00      	cmp	r3, #0
   1fd5a:	bf08      	it	eq
   1fd5c:	2301      	moveq	r3, #1
   1fd5e:	9303      	str	r3, [sp, #12]
   1fd60:	ee18 3a90 	vmov	r3, s17
   1fd64:	2b00      	cmp	r3, #0
   1fd66:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   1fd6a:	4646      	mov	r6, r8
   1fd6c:	f2c0 8618 	blt.w	209a0 <_svfprintf_r+0x19d8>
   1fd70:	eeb0 ab48 	vmov.f64	d10, d8
   1fd74:	2300      	movs	r3, #0
   1fd76:	4690      	mov	r8, r2
   1fd78:	9309      	str	r3, [sp, #36]	; 0x24
   1fd7a:	9307      	str	r3, [sp, #28]
   1fd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fd7e:	3b41      	subs	r3, #65	; 0x41
   1fd80:	2b25      	cmp	r3, #37	; 0x25
   1fd82:	f200 8398 	bhi.w	204b6 <_svfprintf_r+0x14ee>
   1fd86:	e8df f013 	tbh	[pc, r3, lsl #1]
   1fd8a:	046f      	.short	0x046f
   1fd8c:	03960396 	.word	0x03960396
   1fd90:	04680396 	.word	0x04680396
   1fd94:	0396046c 	.word	0x0396046c
   1fd98:	03960396 	.word	0x03960396
   1fd9c:	03960396 	.word	0x03960396
   1fda0:	03960396 	.word	0x03960396
   1fda4:	03960396 	.word	0x03960396
   1fda8:	03960396 	.word	0x03960396
   1fdac:	03960396 	.word	0x03960396
   1fdb0:	03960396 	.word	0x03960396
   1fdb4:	03960396 	.word	0x03960396
   1fdb8:	03960396 	.word	0x03960396
   1fdbc:	03960396 	.word	0x03960396
   1fdc0:	03960396 	.word	0x03960396
   1fdc4:	03960396 	.word	0x03960396
   1fdc8:	03960396 	.word	0x03960396
   1fdcc:	03960396 	.word	0x03960396
   1fdd0:	04680396 	.word	0x04680396
   1fdd4:	046c      	.short	0x046c
   1fdd6:	9b08      	ldr	r3, [sp, #32]
   1fdd8:	f853 2b04 	ldr.w	r2, [r3], #4
   1fddc:	9308      	str	r3, [sp, #32]
   1fdde:	2301      	movs	r3, #1
   1fde0:	f7ff bb97 	b.w	1f512 <_svfprintf_r+0x54a>
   1fde4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1fde6:	2b00      	cmp	r3, #0
   1fde8:	f43f a9cf 	beq.w	1f18a <_svfprintf_r+0x1c2>
   1fdec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1fdee:	781b      	ldrb	r3, [r3, #0]
   1fdf0:	2b00      	cmp	r3, #0
   1fdf2:	f43f a9ca 	beq.w	1f18a <_svfprintf_r+0x1c2>
   1fdf6:	f899 3000 	ldrb.w	r3, [r9]
   1fdfa:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   1fdfe:	f7ff b93f 	b.w	1f080 <_svfprintf_r+0xb8>
   1fe02:	930b      	str	r3, [sp, #44]	; 0x2c
   1fe04:	f8cd 8008 	str.w	r8, [sp, #8]
   1fe08:	f7ff bbf1 	b.w	1f5ee <_svfprintf_r+0x626>
   1fe0c:	930b      	str	r3, [sp, #44]	; 0x2c
   1fe0e:	4b9a      	ldr	r3, [pc, #616]	; (20078 <_svfprintf_r+0x10b0>)
   1fe10:	9311      	str	r3, [sp, #68]	; 0x44
   1fe12:	f018 0120 	ands.w	r1, r8, #32
   1fe16:	f000 8105 	beq.w	20024 <_svfprintf_r+0x105c>
   1fe1a:	9b08      	ldr	r3, [sp, #32]
   1fe1c:	3307      	adds	r3, #7
   1fe1e:	f023 0307 	bic.w	r3, r3, #7
   1fe22:	6859      	ldr	r1, [r3, #4]
   1fe24:	f853 2b08 	ldr.w	r2, [r3], #8
   1fe28:	9308      	str	r3, [sp, #32]
   1fe2a:	f018 0f01 	tst.w	r8, #1
   1fe2e:	d00a      	beq.n	1fe46 <_svfprintf_r+0xe7e>
   1fe30:	ea52 0301 	orrs.w	r3, r2, r1
   1fe34:	d007      	beq.n	1fe46 <_svfprintf_r+0xe7e>
   1fe36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fe38:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   1fe3c:	2330      	movs	r3, #48	; 0x30
   1fe3e:	f048 0802 	orr.w	r8, r8, #2
   1fe42:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   1fe46:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   1fe4a:	9302      	str	r3, [sp, #8]
   1fe4c:	2302      	movs	r3, #2
   1fe4e:	f7ff bb60 	b.w	1f512 <_svfprintf_r+0x54a>
   1fe52:	930b      	str	r3, [sp, #44]	; 0x2c
   1fe54:	f7ff bbb6 	b.w	1f5c4 <_svfprintf_r+0x5fc>
   1fe58:	930b      	str	r3, [sp, #44]	; 0x2c
   1fe5a:	4b88      	ldr	r3, [pc, #544]	; (2007c <_svfprintf_r+0x10b4>)
   1fe5c:	9311      	str	r3, [sp, #68]	; 0x44
   1fe5e:	e7d8      	b.n	1fe12 <_svfprintf_r+0xe4a>
   1fe60:	9b08      	ldr	r3, [sp, #32]
   1fe62:	2101      	movs	r1, #1
   1fe64:	f853 2b04 	ldr.w	r2, [r3], #4
   1fe68:	9102      	str	r1, [sp, #8]
   1fe6a:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   1fe6e:	9308      	str	r3, [sp, #32]
   1fe70:	9105      	str	r1, [sp, #20]
   1fe72:	ac37      	add	r4, sp, #220	; 0xdc
   1fe74:	f7ff baaf 	b.w	1f3d6 <_svfprintf_r+0x40e>
   1fe78:	ee1b 1a10 	vmov	r1, s22
   1fe7c:	aa24      	add	r2, sp, #144	; 0x90
   1fe7e:	4658      	mov	r0, fp
   1fe80:	f002 f842 	bl	21f08 <__ssprint_r>
   1fe84:	2800      	cmp	r0, #0
   1fe86:	f47f ad04 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fe8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fe8c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fe90:	e45d      	b.n	1f74e <_svfprintf_r+0x786>
   1fe92:	9b03      	ldr	r3, [sp, #12]
   1fe94:	9407      	str	r4, [sp, #28]
   1fe96:	2b06      	cmp	r3, #6
   1fe98:	4622      	mov	r2, r4
   1fe9a:	bf28      	it	cs
   1fe9c:	2306      	movcs	r3, #6
   1fe9e:	9403      	str	r4, [sp, #12]
   1fea0:	4621      	mov	r1, r4
   1fea2:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   1fea6:	4c76      	ldr	r4, [pc, #472]	; (20080 <_svfprintf_r+0x10b8>)
   1fea8:	9302      	str	r3, [sp, #8]
   1feaa:	9305      	str	r3, [sp, #20]
   1feac:	920f      	str	r2, [sp, #60]	; 0x3c
   1feae:	f7ff ba6c 	b.w	1f38a <_svfprintf_r+0x3c2>
   1feb2:	2140      	movs	r1, #64	; 0x40
   1feb4:	4658      	mov	r0, fp
   1feb6:	f7f9 fcb9 	bl	1982c <_malloc_r>
   1feba:	6020      	str	r0, [r4, #0]
   1febc:	6120      	str	r0, [r4, #16]
   1febe:	2800      	cmp	r0, #0
   1fec0:	f000 860f 	beq.w	20ae2 <_svfprintf_r+0x1b1a>
   1fec4:	2340      	movs	r3, #64	; 0x40
   1fec6:	6163      	str	r3, [r4, #20]
   1fec8:	f7ff b89e 	b.w	1f008 <_svfprintf_r+0x40>
   1fecc:	2d10      	cmp	r5, #16
   1fece:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fed0:	f340 825d 	ble.w	2038e <_svfprintf_r+0x13c6>
   1fed4:	4651      	mov	r1, sl
   1fed6:	2610      	movs	r6, #16
   1fed8:	ee1b aa10 	vmov	sl, s22
   1fedc:	e004      	b.n	1fee8 <_svfprintf_r+0xf20>
   1fede:	3108      	adds	r1, #8
   1fee0:	3d10      	subs	r5, #16
   1fee2:	2d10      	cmp	r5, #16
   1fee4:	f340 8252 	ble.w	2038c <_svfprintf_r+0x13c4>
   1fee8:	3301      	adds	r3, #1
   1feea:	4866      	ldr	r0, [pc, #408]	; (20084 <_svfprintf_r+0x10bc>)
   1feec:	3210      	adds	r2, #16
   1feee:	2b07      	cmp	r3, #7
   1fef0:	e9c1 0600 	strd	r0, r6, [r1]
   1fef4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fef8:	ddf1      	ble.n	1fede <_svfprintf_r+0xf16>
   1fefa:	aa24      	add	r2, sp, #144	; 0x90
   1fefc:	4651      	mov	r1, sl
   1fefe:	4658      	mov	r0, fp
   1ff00:	f002 f802 	bl	21f08 <__ssprint_r>
   1ff04:	2800      	cmp	r0, #0
   1ff06:	f47f acc4 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1ff0a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1ff0e:	a927      	add	r1, sp, #156	; 0x9c
   1ff10:	e7e6      	b.n	1fee0 <_svfprintf_r+0xf18>
   1ff12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ff14:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1ff18:	18e3      	adds	r3, r4, r3
   1ff1a:	9303      	str	r3, [sp, #12]
   1ff1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff1e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1ff22:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1ff24:	9d05      	ldr	r5, [sp, #20]
   1ff26:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   1ff2a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   1ff2e:	940b      	str	r4, [sp, #44]	; 0x2c
   1ff30:	ee1b 1a10 	vmov	r1, s22
   1ff34:	4650      	mov	r0, sl
   1ff36:	2b00      	cmp	r3, #0
   1ff38:	d034      	beq.n	1ffa4 <_svfprintf_r+0xfdc>
   1ff3a:	f1b8 0f00 	cmp.w	r8, #0
   1ff3e:	d135      	bne.n	1ffac <_svfprintf_r+0xfe4>
   1ff40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff42:	3b01      	subs	r3, #1
   1ff44:	3e01      	subs	r6, #1
   1ff46:	930d      	str	r3, [sp, #52]	; 0x34
   1ff48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ff4a:	e9c0 3900 	strd	r3, r9, [r0]
   1ff4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1ff50:	3301      	adds	r3, #1
   1ff52:	444a      	add	r2, r9
   1ff54:	2b07      	cmp	r3, #7
   1ff56:	9226      	str	r2, [sp, #152]	; 0x98
   1ff58:	9325      	str	r3, [sp, #148]	; 0x94
   1ff5a:	dc6c      	bgt.n	20036 <_svfprintf_r+0x106e>
   1ff5c:	3008      	adds	r0, #8
   1ff5e:	9b03      	ldr	r3, [sp, #12]
   1ff60:	f896 c000 	ldrb.w	ip, [r6]
   1ff64:	1b5b      	subs	r3, r3, r5
   1ff66:	4563      	cmp	r3, ip
   1ff68:	bfa8      	it	ge
   1ff6a:	4663      	movge	r3, ip
   1ff6c:	2b00      	cmp	r3, #0
   1ff6e:	469a      	mov	sl, r3
   1ff70:	dd0c      	ble.n	1ff8c <_svfprintf_r+0xfc4>
   1ff72:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ff74:	3401      	adds	r4, #1
   1ff76:	441a      	add	r2, r3
   1ff78:	2c07      	cmp	r4, #7
   1ff7a:	e9c0 5300 	strd	r5, r3, [r0]
   1ff7e:	9226      	str	r2, [sp, #152]	; 0x98
   1ff80:	9425      	str	r4, [sp, #148]	; 0x94
   1ff82:	f300 8177 	bgt.w	20274 <_svfprintf_r+0x12ac>
   1ff86:	f896 c000 	ldrb.w	ip, [r6]
   1ff8a:	3008      	adds	r0, #8
   1ff8c:	f1ba 0f00 	cmp.w	sl, #0
   1ff90:	bfac      	ite	ge
   1ff92:	ebac 040a 	subge.w	r4, ip, sl
   1ff96:	4664      	movlt	r4, ip
   1ff98:	2c00      	cmp	r4, #0
   1ff9a:	dc0a      	bgt.n	1ffb2 <_svfprintf_r+0xfea>
   1ff9c:	4465      	add	r5, ip
   1ff9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ffa0:	2b00      	cmp	r3, #0
   1ffa2:	d1ca      	bne.n	1ff3a <_svfprintf_r+0xf72>
   1ffa4:	f1b8 0f00 	cmp.w	r8, #0
   1ffa8:	f000 83ac 	beq.w	20704 <_svfprintf_r+0x173c>
   1ffac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1ffb0:	e7ca      	b.n	1ff48 <_svfprintf_r+0xf80>
   1ffb2:	2c10      	cmp	r4, #16
   1ffb4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   1ffb8:	dd24      	ble.n	20004 <_svfprintf_r+0x103c>
   1ffba:	9505      	str	r5, [sp, #20]
   1ffbc:	f04f 0a10 	mov.w	sl, #16
   1ffc0:	4663      	mov	r3, ip
   1ffc2:	460d      	mov	r5, r1
   1ffc4:	e004      	b.n	1ffd0 <_svfprintf_r+0x1008>
   1ffc6:	3c10      	subs	r4, #16
   1ffc8:	2c10      	cmp	r4, #16
   1ffca:	f100 0008 	add.w	r0, r0, #8
   1ffce:	dd16      	ble.n	1fffe <_svfprintf_r+0x1036>
   1ffd0:	3301      	adds	r3, #1
   1ffd2:	492c      	ldr	r1, [pc, #176]	; (20084 <_svfprintf_r+0x10bc>)
   1ffd4:	3210      	adds	r2, #16
   1ffd6:	2b07      	cmp	r3, #7
   1ffd8:	e9c0 1a00 	strd	r1, sl, [r0]
   1ffdc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1ffe0:	ddf1      	ble.n	1ffc6 <_svfprintf_r+0xffe>
   1ffe2:	aa24      	add	r2, sp, #144	; 0x90
   1ffe4:	4629      	mov	r1, r5
   1ffe6:	4658      	mov	r0, fp
   1ffe8:	f001 ff8e 	bl	21f08 <__ssprint_r>
   1ffec:	2800      	cmp	r0, #0
   1ffee:	f47f ac50 	bne.w	1f892 <_svfprintf_r+0x8ca>
   1fff2:	3c10      	subs	r4, #16
   1fff4:	2c10      	cmp	r4, #16
   1fff6:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fffa:	a827      	add	r0, sp, #156	; 0x9c
   1fffc:	dce8      	bgt.n	1ffd0 <_svfprintf_r+0x1008>
   1fffe:	4629      	mov	r1, r5
   20000:	9d05      	ldr	r5, [sp, #20]
   20002:	469c      	mov	ip, r3
   20004:	f10c 0301 	add.w	r3, ip, #1
   20008:	4422      	add	r2, r4
   2000a:	6044      	str	r4, [r0, #4]
   2000c:	2b07      	cmp	r3, #7
   2000e:	4c1d      	ldr	r4, [pc, #116]	; (20084 <_svfprintf_r+0x10bc>)
   20010:	6004      	str	r4, [r0, #0]
   20012:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20016:	f300 83c6 	bgt.w	207a6 <_svfprintf_r+0x17de>
   2001a:	f896 c000 	ldrb.w	ip, [r6]
   2001e:	3008      	adds	r0, #8
   20020:	4465      	add	r5, ip
   20022:	e7bc      	b.n	1ff9e <_svfprintf_r+0xfd6>
   20024:	f018 0310 	ands.w	r3, r8, #16
   20028:	f000 80c2 	beq.w	201b0 <_svfprintf_r+0x11e8>
   2002c:	9b08      	ldr	r3, [sp, #32]
   2002e:	f853 2b04 	ldr.w	r2, [r3], #4
   20032:	9308      	str	r3, [sp, #32]
   20034:	e6f9      	b.n	1fe2a <_svfprintf_r+0xe62>
   20036:	aa24      	add	r2, sp, #144	; 0x90
   20038:	4658      	mov	r0, fp
   2003a:	9105      	str	r1, [sp, #20]
   2003c:	f001 ff64 	bl	21f08 <__ssprint_r>
   20040:	2800      	cmp	r0, #0
   20042:	f47f ac26 	bne.w	1f892 <_svfprintf_r+0x8ca>
   20046:	9a26      	ldr	r2, [sp, #152]	; 0x98
   20048:	9905      	ldr	r1, [sp, #20]
   2004a:	a827      	add	r0, sp, #156	; 0x9c
   2004c:	e787      	b.n	1ff5e <_svfprintf_r+0xf96>
   2004e:	9802      	ldr	r0, [sp, #8]
   20050:	f8cd a01c 	str.w	sl, [sp, #28]
   20054:	ac50      	add	r4, sp, #320	; 0x140
   20056:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   2005a:	2500      	movs	r5, #0
   2005c:	ee0a ba10 	vmov	s20, fp
   20060:	4b09      	ldr	r3, [pc, #36]	; (20088 <_svfprintf_r+0x10c0>)
   20062:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   20066:	f8cd 9014 	str.w	r9, [sp, #20]
   2006a:	46a3      	mov	fp, r4
   2006c:	f04f 0805 	mov.w	r8, #5
   20070:	46ac      	mov	ip, r5
   20072:	4604      	mov	r4, r0
   20074:	e010      	b.n	20098 <_svfprintf_r+0x10d0>
   20076:	bf00      	nop
   20078:	20008c88 	.word	0x20008c88
   2007c:	20008c9c 	.word	0x20008c9c
   20080:	20008cb0 	.word	0x20008cb0
   20084:	200025fc 	.word	0x200025fc
   20088:	cccccccd 	.word	0xcccccccd
   2008c:	2a0a      	cmp	r2, #10
   2008e:	f171 0100 	sbcs.w	r1, r1, #0
   20092:	d336      	bcc.n	20102 <_svfprintf_r+0x113a>
   20094:	464a      	mov	r2, r9
   20096:	4631      	mov	r1, r6
   20098:	1850      	adds	r0, r2, r1
   2009a:	f140 0000 	adc.w	r0, r0, #0
   2009e:	fba3 5600 	umull	r5, r6, r3, r0
   200a2:	f026 0503 	bic.w	r5, r6, #3
   200a6:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   200aa:	1b40      	subs	r0, r0, r5
   200ac:	1a15      	subs	r5, r2, r0
   200ae:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   200b2:	f161 0e00 	sbc.w	lr, r1, #0
   200b6:	fb06 f605 	mul.w	r6, r6, r5
   200ba:	fba5 9503 	umull	r9, r5, r5, r3
   200be:	fb03 660e 	mla	r6, r3, lr, r6
   200c2:	f009 0e01 	and.w	lr, r9, #1
   200c6:	442e      	add	r6, r5
   200c8:	fbae 5e08 	umull	r5, lr, lr, r8
   200cc:	182d      	adds	r5, r5, r0
   200ce:	ea4f 0959 	mov.w	r9, r9, lsr #1
   200d2:	3530      	adds	r5, #48	; 0x30
   200d4:	f80b 5c01 	strb.w	r5, [fp, #-1]
   200d8:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   200dc:	f10c 0c01 	add.w	ip, ip, #1
   200e0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   200e4:	0876      	lsrs	r6, r6, #1
   200e6:	2c00      	cmp	r4, #0
   200e8:	d0d0      	beq.n	2008c <_svfprintf_r+0x10c4>
   200ea:	f89a 0000 	ldrb.w	r0, [sl]
   200ee:	4584      	cmp	ip, r0
   200f0:	d1cc      	bne.n	2008c <_svfprintf_r+0x10c4>
   200f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   200f6:	d0c9      	beq.n	2008c <_svfprintf_r+0x10c4>
   200f8:	2a0a      	cmp	r2, #10
   200fa:	f171 0100 	sbcs.w	r1, r1, #0
   200fe:	f080 818f 	bcs.w	20420 <_svfprintf_r+0x1458>
   20102:	465c      	mov	r4, fp
   20104:	ab50      	add	r3, sp, #320	; 0x140
   20106:	1b1b      	subs	r3, r3, r4
   20108:	f8dd 9014 	ldr.w	r9, [sp, #20]
   2010c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   20110:	ee1a ba10 	vmov	fp, s20
   20114:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20118:	f8dd 8008 	ldr.w	r8, [sp, #8]
   2011c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   20120:	9305      	str	r3, [sp, #20]
   20122:	f7ff bac2 	b.w	1f6aa <_svfprintf_r+0x6e2>
   20126:	ee1b 1a10 	vmov	r1, s22
   2012a:	aa24      	add	r2, sp, #144	; 0x90
   2012c:	4658      	mov	r0, fp
   2012e:	f001 feeb 	bl	21f08 <__ssprint_r>
   20132:	2800      	cmp	r0, #0
   20134:	f47f abad 	bne.w	1f892 <_svfprintf_r+0x8ca>
   20138:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2013c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2013e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20142:	f7ff b896 	b.w	1f272 <_svfprintf_r+0x2aa>
   20146:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20148:	48be      	ldr	r0, [pc, #760]	; (20444 <_svfprintf_r+0x147c>)
   2014a:	f8ca 0000 	str.w	r0, [sl]
   2014e:	3301      	adds	r3, #1
   20150:	3201      	adds	r2, #1
   20152:	2001      	movs	r0, #1
   20154:	2b07      	cmp	r3, #7
   20156:	9226      	str	r2, [sp, #152]	; 0x98
   20158:	9325      	str	r3, [sp, #148]	; 0x94
   2015a:	f8ca 0004 	str.w	r0, [sl, #4]
   2015e:	f300 8177 	bgt.w	20450 <_svfprintf_r+0x1488>
   20162:	f10a 0a08 	add.w	sl, sl, #8
   20166:	2900      	cmp	r1, #0
   20168:	f040 80af 	bne.w	202ca <_svfprintf_r+0x1302>
   2016c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2016e:	f008 0301 	and.w	r3, r8, #1
   20172:	430b      	orrs	r3, r1
   20174:	f43f a8c0 	beq.w	1f2f8 <_svfprintf_r+0x330>
   20178:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2017a:	9912      	ldr	r1, [sp, #72]	; 0x48
   2017c:	441a      	add	r2, r3
   2017e:	e9ca 1300 	strd	r1, r3, [sl]
   20182:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20184:	9226      	str	r2, [sp, #152]	; 0x98
   20186:	3301      	adds	r3, #1
   20188:	2b07      	cmp	r3, #7
   2018a:	9325      	str	r3, [sp, #148]	; 0x94
   2018c:	f300 8252 	bgt.w	20634 <_svfprintf_r+0x166c>
   20190:	f10a 0a08 	add.w	sl, sl, #8
   20194:	990e      	ldr	r1, [sp, #56]	; 0x38
   20196:	f8ca 4000 	str.w	r4, [sl]
   2019a:	3301      	adds	r3, #1
   2019c:	440a      	add	r2, r1
   2019e:	2b07      	cmp	r3, #7
   201a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   201a4:	f8ca 1004 	str.w	r1, [sl, #4]
   201a8:	f77f a8a4 	ble.w	1f2f4 <_svfprintf_r+0x32c>
   201ac:	f7ff bbbd 	b.w	1f92a <_svfprintf_r+0x962>
   201b0:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   201b4:	f000 80dd 	beq.w	20372 <_svfprintf_r+0x13aa>
   201b8:	9808      	ldr	r0, [sp, #32]
   201ba:	f850 2b04 	ldr.w	r2, [r0], #4
   201be:	9008      	str	r0, [sp, #32]
   201c0:	4619      	mov	r1, r3
   201c2:	b292      	uxth	r2, r2
   201c4:	e631      	b.n	1fe2a <_svfprintf_r+0xe62>
   201c6:	ee1b 1a10 	vmov	r1, s22
   201ca:	aa24      	add	r2, sp, #144	; 0x90
   201cc:	4658      	mov	r0, fp
   201ce:	f001 fe9b 	bl	21f08 <__ssprint_r>
   201d2:	2800      	cmp	r0, #0
   201d4:	f47f ab5d 	bne.w	1f892 <_svfprintf_r+0x8ca>
   201d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   201da:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   201de:	f7ff baa3 	b.w	1f728 <_svfprintf_r+0x760>
   201e2:	ae22      	add	r6, sp, #136	; 0x88
   201e4:	2208      	movs	r2, #8
   201e6:	2100      	movs	r1, #0
   201e8:	4630      	mov	r0, r6
   201ea:	941d      	str	r4, [sp, #116]	; 0x74
   201ec:	f7fb fc24 	bl	1ba38 <memset>
   201f0:	9b03      	ldr	r3, [sp, #12]
   201f2:	1c5a      	adds	r2, r3, #1
   201f4:	f000 80db 	beq.w	203ae <_svfprintf_r+0x13e6>
   201f8:	2500      	movs	r5, #0
   201fa:	f8cd 9008 	str.w	r9, [sp, #8]
   201fe:	f8cd 801c 	str.w	r8, [sp, #28]
   20202:	4699      	mov	r9, r3
   20204:	46a8      	mov	r8, r5
   20206:	e00c      	b.n	20222 <_svfprintf_r+0x125a>
   20208:	a937      	add	r1, sp, #220	; 0xdc
   2020a:	4658      	mov	r0, fp
   2020c:	f001 fdea 	bl	21de4 <_wcrtomb_r>
   20210:	1c43      	adds	r3, r0, #1
   20212:	4440      	add	r0, r8
   20214:	f000 83c8 	beq.w	209a8 <_svfprintf_r+0x19e0>
   20218:	4548      	cmp	r0, r9
   2021a:	dc08      	bgt.n	2022e <_svfprintf_r+0x1266>
   2021c:	f000 8418 	beq.w	20a50 <_svfprintf_r+0x1a88>
   20220:	4680      	mov	r8, r0
   20222:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20224:	5952      	ldr	r2, [r2, r5]
   20226:	4633      	mov	r3, r6
   20228:	3504      	adds	r5, #4
   2022a:	2a00      	cmp	r2, #0
   2022c:	d1ec      	bne.n	20208 <_svfprintf_r+0x1240>
   2022e:	f8cd 8014 	str.w	r8, [sp, #20]
   20232:	f8dd 9008 	ldr.w	r9, [sp, #8]
   20236:	f8dd 801c 	ldr.w	r8, [sp, #28]
   2023a:	e0c5      	b.n	203c8 <_svfprintf_r+0x1400>
   2023c:	3301      	adds	r3, #1
   2023e:	4982      	ldr	r1, [pc, #520]	; (20448 <_svfprintf_r+0x1480>)
   20240:	f8ca 4004 	str.w	r4, [sl, #4]
   20244:	4422      	add	r2, r4
   20246:	2b07      	cmp	r3, #7
   20248:	f8ca 1000 	str.w	r1, [sl]
   2024c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20250:	f77f a850 	ble.w	1f2f4 <_svfprintf_r+0x32c>
   20254:	f7ff bb69 	b.w	1f92a <_svfprintf_r+0x962>
   20258:	ee1b 1a10 	vmov	r1, s22
   2025c:	aa24      	add	r2, sp, #144	; 0x90
   2025e:	4658      	mov	r0, fp
   20260:	f001 fe52 	bl	21f08 <__ssprint_r>
   20264:	2800      	cmp	r0, #0
   20266:	f47f ab14 	bne.w	1f892 <_svfprintf_r+0x8ca>
   2026a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2026c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20270:	f7ff b829 	b.w	1f2c6 <_svfprintf_r+0x2fe>
   20274:	aa24      	add	r2, sp, #144	; 0x90
   20276:	4658      	mov	r0, fp
   20278:	9105      	str	r1, [sp, #20]
   2027a:	f001 fe45 	bl	21f08 <__ssprint_r>
   2027e:	2800      	cmp	r0, #0
   20280:	f47f ab07 	bne.w	1f892 <_svfprintf_r+0x8ca>
   20284:	f896 c000 	ldrb.w	ip, [r6]
   20288:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2028a:	9905      	ldr	r1, [sp, #20]
   2028c:	a827      	add	r0, sp, #156	; 0x9c
   2028e:	e67d      	b.n	1ff8c <_svfprintf_r+0xfc4>
   20290:	2b01      	cmp	r3, #1
   20292:	f8cd 8008 	str.w	r8, [sp, #8]
   20296:	f47f a9f3 	bne.w	1f680 <_svfprintf_r+0x6b8>
   2029a:	f7ff bb93 	b.w	1f9c4 <_svfprintf_r+0x9fc>
   2029e:	9b08      	ldr	r3, [sp, #32]
   202a0:	9904      	ldr	r1, [sp, #16]
   202a2:	f853 2b04 	ldr.w	r2, [r3], #4
   202a6:	464c      	mov	r4, r9
   202a8:	6011      	str	r1, [r2, #0]
   202aa:	9308      	str	r3, [sp, #32]
   202ac:	f7fe bebe 	b.w	1f02c <_svfprintf_r+0x64>
   202b0:	3301      	adds	r3, #1
   202b2:	4965      	ldr	r1, [pc, #404]	; (20448 <_svfprintf_r+0x1480>)
   202b4:	f8ca 4004 	str.w	r4, [sl, #4]
   202b8:	4422      	add	r2, r4
   202ba:	2b07      	cmp	r3, #7
   202bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   202c0:	f8ca 1000 	str.w	r1, [sl]
   202c4:	f77f ab22 	ble.w	1f90c <_svfprintf_r+0x944>
   202c8:	e47b      	b.n	1fbc2 <_svfprintf_r+0xbfa>
   202ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   202cc:	9812      	ldr	r0, [sp, #72]	; 0x48
   202ce:	441a      	add	r2, r3
   202d0:	e9ca 0300 	strd	r0, r3, [sl]
   202d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   202d6:	9226      	str	r2, [sp, #152]	; 0x98
   202d8:	3301      	adds	r3, #1
   202da:	2b07      	cmp	r3, #7
   202dc:	9325      	str	r3, [sp, #148]	; 0x94
   202de:	f300 81a9 	bgt.w	20634 <_svfprintf_r+0x166c>
   202e2:	f10a 0a08 	add.w	sl, sl, #8
   202e6:	2900      	cmp	r1, #0
   202e8:	f6bf af54 	bge.w	20194 <_svfprintf_r+0x11cc>
   202ec:	424d      	negs	r5, r1
   202ee:	3110      	adds	r1, #16
   202f0:	f280 830f 	bge.w	20912 <_svfprintf_r+0x194a>
   202f4:	ee1b 1a10 	vmov	r1, s22
   202f8:	2610      	movs	r6, #16
   202fa:	e005      	b.n	20308 <_svfprintf_r+0x1340>
   202fc:	f10a 0a08 	add.w	sl, sl, #8
   20300:	3d10      	subs	r5, #16
   20302:	2d10      	cmp	r5, #16
   20304:	f340 8305 	ble.w	20912 <_svfprintf_r+0x194a>
   20308:	3301      	adds	r3, #1
   2030a:	484f      	ldr	r0, [pc, #316]	; (20448 <_svfprintf_r+0x1480>)
   2030c:	3210      	adds	r2, #16
   2030e:	2b07      	cmp	r3, #7
   20310:	e9ca 0600 	strd	r0, r6, [sl]
   20314:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20318:	ddf0      	ble.n	202fc <_svfprintf_r+0x1334>
   2031a:	aa24      	add	r2, sp, #144	; 0x90
   2031c:	4658      	mov	r0, fp
   2031e:	9103      	str	r1, [sp, #12]
   20320:	f001 fdf2 	bl	21f08 <__ssprint_r>
   20324:	2800      	cmp	r0, #0
   20326:	f47f aab4 	bne.w	1f892 <_svfprintf_r+0x8ca>
   2032a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   2032e:	9903      	ldr	r1, [sp, #12]
   20330:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20334:	e7e4      	b.n	20300 <_svfprintf_r+0x1338>
   20336:	9b08      	ldr	r3, [sp, #32]
   20338:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   2033c:	bf1a      	itte	ne
   2033e:	4611      	movne	r1, r2
   20340:	f853 2b04 	ldrne.w	r2, [r3], #4
   20344:	f853 2b04 	ldreq.w	r2, [r3], #4
   20348:	9308      	str	r3, [sp, #32]
   2034a:	bf18      	it	ne
   2034c:	b2d2      	uxtbne	r2, r2
   2034e:	f7ff b945 	b.w	1f5dc <_svfprintf_r+0x614>
   20352:	9b02      	ldr	r3, [sp, #8]
   20354:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   20358:	9b08      	ldr	r3, [sp, #32]
   2035a:	bf1a      	itte	ne
   2035c:	4611      	movne	r1, r2
   2035e:	f853 2b04 	ldrne.w	r2, [r3], #4
   20362:	f853 2b04 	ldreq.w	r2, [r3], #4
   20366:	9308      	str	r3, [sp, #32]
   20368:	bf18      	it	ne
   2036a:	b2d2      	uxtbne	r2, r2
   2036c:	2301      	movs	r3, #1
   2036e:	f7ff b8d0 	b.w	1f512 <_svfprintf_r+0x54a>
   20372:	9b08      	ldr	r3, [sp, #32]
   20374:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   20378:	bf1a      	itte	ne
   2037a:	4611      	movne	r1, r2
   2037c:	f853 2b04 	ldrne.w	r2, [r3], #4
   20380:	f853 2b04 	ldreq.w	r2, [r3], #4
   20384:	9308      	str	r3, [sp, #32]
   20386:	bf18      	it	ne
   20388:	b2d2      	uxtbne	r2, r2
   2038a:	e54e      	b.n	1fe2a <_svfprintf_r+0xe62>
   2038c:	468a      	mov	sl, r1
   2038e:	3301      	adds	r3, #1
   20390:	492d      	ldr	r1, [pc, #180]	; (20448 <_svfprintf_r+0x1480>)
   20392:	f8ca 5004 	str.w	r5, [sl, #4]
   20396:	442a      	add	r2, r5
   20398:	2b07      	cmp	r3, #7
   2039a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2039e:	f8ca 1000 	str.w	r1, [sl]
   203a2:	f300 8139 	bgt.w	20618 <_svfprintf_r+0x1650>
   203a6:	f10a 0a08 	add.w	sl, sl, #8
   203aa:	f7ff bb8c 	b.w	1fac6 <_svfprintf_r+0xafe>
   203ae:	2300      	movs	r3, #0
   203b0:	4619      	mov	r1, r3
   203b2:	9600      	str	r6, [sp, #0]
   203b4:	aa1d      	add	r2, sp, #116	; 0x74
   203b6:	4658      	mov	r0, fp
   203b8:	f001 fd66 	bl	21e88 <_wcsrtombs_r>
   203bc:	4603      	mov	r3, r0
   203be:	3301      	adds	r3, #1
   203c0:	9005      	str	r0, [sp, #20]
   203c2:	f000 82f1 	beq.w	209a8 <_svfprintf_r+0x19e0>
   203c6:	941d      	str	r4, [sp, #116]	; 0x74
   203c8:	9b05      	ldr	r3, [sp, #20]
   203ca:	2b00      	cmp	r3, #0
   203cc:	d04e      	beq.n	2046c <_svfprintf_r+0x14a4>
   203ce:	2b63      	cmp	r3, #99	; 0x63
   203d0:	f300 8118 	bgt.w	20604 <_svfprintf_r+0x163c>
   203d4:	2300      	movs	r3, #0
   203d6:	9307      	str	r3, [sp, #28]
   203d8:	ac37      	add	r4, sp, #220	; 0xdc
   203da:	2208      	movs	r2, #8
   203dc:	2100      	movs	r1, #0
   203de:	4630      	mov	r0, r6
   203e0:	f7fb fb2a 	bl	1ba38 <memset>
   203e4:	9d05      	ldr	r5, [sp, #20]
   203e6:	9600      	str	r6, [sp, #0]
   203e8:	462b      	mov	r3, r5
   203ea:	aa1d      	add	r2, sp, #116	; 0x74
   203ec:	4621      	mov	r1, r4
   203ee:	4658      	mov	r0, fp
   203f0:	f001 fd4a 	bl	21e88 <_wcsrtombs_r>
   203f4:	4285      	cmp	r5, r0
   203f6:	f040 837c 	bne.w	20af2 <_svfprintf_r+0x1b2a>
   203fa:	9a05      	ldr	r2, [sp, #20]
   203fc:	2300      	movs	r3, #0
   203fe:	54a3      	strb	r3, [r4, r2]
   20400:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   20404:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   20408:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2040c:	9303      	str	r3, [sp, #12]
   2040e:	9202      	str	r2, [sp, #8]
   20410:	930f      	str	r3, [sp, #60]	; 0x3c
   20412:	f7fe bfba 	b.w	1f38a <_svfprintf_r+0x3c2>
   20416:	212d      	movs	r1, #45	; 0x2d
   20418:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   2041c:	f7fe bfa4 	b.w	1f368 <_svfprintf_r+0x3a0>
   20420:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20422:	9915      	ldr	r1, [sp, #84]	; 0x54
   20424:	ebab 0b03 	sub.w	fp, fp, r3
   20428:	461a      	mov	r2, r3
   2042a:	4658      	mov	r0, fp
   2042c:	f7fb fc30 	bl	1bc90 <strncpy>
   20430:	f89a 2001 	ldrb.w	r2, [sl, #1]
   20434:	4b05      	ldr	r3, [pc, #20]	; (2044c <_svfprintf_r+0x1484>)
   20436:	b10a      	cbz	r2, 2043c <_svfprintf_r+0x1474>
   20438:	f10a 0a01 	add.w	sl, sl, #1
   2043c:	f04f 0c00 	mov.w	ip, #0
   20440:	e628      	b.n	20094 <_svfprintf_r+0x10cc>
   20442:	bf00      	nop
   20444:	200035f0 	.word	0x200035f0
   20448:	200025fc 	.word	0x200025fc
   2044c:	cccccccd 	.word	0xcccccccd
   20450:	ee1b 1a10 	vmov	r1, s22
   20454:	aa24      	add	r2, sp, #144	; 0x90
   20456:	4658      	mov	r0, fp
   20458:	f001 fd56 	bl	21f08 <__ssprint_r>
   2045c:	2800      	cmp	r0, #0
   2045e:	f47f aa18 	bne.w	1f892 <_svfprintf_r+0x8ca>
   20462:	991b      	ldr	r1, [sp, #108]	; 0x6c
   20464:	9a26      	ldr	r2, [sp, #152]	; 0x98
   20466:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2046a:	e67c      	b.n	20166 <_svfprintf_r+0x119e>
   2046c:	9b05      	ldr	r3, [sp, #20]
   2046e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   20472:	930f      	str	r3, [sp, #60]	; 0x3c
   20474:	e9cd 3302 	strd	r3, r3, [sp, #8]
   20478:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   2047c:	9307      	str	r3, [sp, #28]
   2047e:	f7fe bf84 	b.w	1f38a <_svfprintf_r+0x3c2>
   20482:	990e      	ldr	r1, [sp, #56]	; 0x38
   20484:	9805      	ldr	r0, [sp, #20]
   20486:	1865      	adds	r5, r4, r1
   20488:	1a2d      	subs	r5, r5, r0
   2048a:	1acc      	subs	r4, r1, r3
   2048c:	42a5      	cmp	r5, r4
   2048e:	bfa8      	it	ge
   20490:	4625      	movge	r5, r4
   20492:	f7ff bb4d 	b.w	1fb30 <_svfprintf_r+0xb68>
   20496:	9b08      	ldr	r3, [sp, #32]
   20498:	9904      	ldr	r1, [sp, #16]
   2049a:	f853 2b04 	ldr.w	r2, [r3], #4
   2049e:	9308      	str	r3, [sp, #32]
   204a0:	8011      	strh	r1, [r2, #0]
   204a2:	464c      	mov	r4, r9
   204a4:	f7fe bdc2 	b.w	1f02c <_svfprintf_r+0x64>
   204a8:	f913 2b04 	ldrsb.w	r2, [r3], #4
   204ac:	9308      	str	r3, [sp, #32]
   204ae:	17d1      	asrs	r1, r2, #31
   204b0:	460b      	mov	r3, r1
   204b2:	f7fe bfdb 	b.w	1f46c <_svfprintf_r+0x4a4>
   204b6:	9a03      	ldr	r2, [sp, #12]
   204b8:	2102      	movs	r1, #2
   204ba:	ab22      	add	r3, sp, #136	; 0x88
   204bc:	9301      	str	r3, [sp, #4]
   204be:	ab1d      	add	r3, sp, #116	; 0x74
   204c0:	9300      	str	r3, [sp, #0]
   204c2:	4658      	mov	r0, fp
   204c4:	ab1b      	add	r3, sp, #108	; 0x6c
   204c6:	eeb0 0b4a 	vmov.f64	d0, d10
   204ca:	9202      	str	r2, [sp, #8]
   204cc:	f000 fe08 	bl	210e0 <_dtoa_r>
   204d0:	2d47      	cmp	r5, #71	; 0x47
   204d2:	9a02      	ldr	r2, [sp, #8]
   204d4:	4604      	mov	r4, r0
   204d6:	f000 8161 	beq.w	2079c <_svfprintf_r+0x17d4>
   204da:	2d46      	cmp	r5, #70	; 0x46
   204dc:	4410      	add	r0, r2
   204de:	d105      	bne.n	204ec <_svfprintf_r+0x1524>
   204e0:	7823      	ldrb	r3, [r4, #0]
   204e2:	2b30      	cmp	r3, #48	; 0x30
   204e4:	f000 826f 	beq.w	209c6 <_svfprintf_r+0x19fe>
   204e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   204ea:	4410      	add	r0, r2
   204ec:	eeb5 ab40 	vcmp.f64	d10, #0.0
   204f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   204f4:	f040 8146 	bne.w	20784 <_svfprintf_r+0x17bc>
   204f8:	4603      	mov	r3, r0
   204fa:	1b1b      	subs	r3, r3, r4
   204fc:	930e      	str	r3, [sp, #56]	; 0x38
   204fe:	2d47      	cmp	r5, #71	; 0x47
   20500:	f000 8110 	beq.w	20724 <_svfprintf_r+0x175c>
   20504:	2d46      	cmp	r5, #70	; 0x46
   20506:	f000 81b5 	beq.w	20874 <_svfprintf_r+0x18ac>
   2050a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2050c:	930c      	str	r3, [sp, #48]	; 0x30
   2050e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20510:	2d41      	cmp	r5, #65	; 0x41
   20512:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   20516:	931b      	str	r3, [sp, #108]	; 0x6c
   20518:	f000 81e5 	beq.w	208e6 <_svfprintf_r+0x191e>
   2051c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   20520:	2100      	movs	r1, #0
   20522:	2b00      	cmp	r3, #0
   20524:	bfb8      	it	lt
   20526:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   20528:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2052c:	bfba      	itte	lt
   2052e:	f1c3 0301 	rsblt	r3, r3, #1
   20532:	222d      	movlt	r2, #45	; 0x2d
   20534:	222b      	movge	r2, #43	; 0x2b
   20536:	2b09      	cmp	r3, #9
   20538:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2053c:	f340 81da 	ble.w	208f4 <_svfprintf_r+0x192c>
   20540:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   20544:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 20964 <_svfprintf_r+0x199c>
   20548:	462a      	mov	r2, r5
   2054a:	4610      	mov	r0, r2
   2054c:	fb8c 2103 	smull	r2, r1, ip, r3
   20550:	17da      	asrs	r2, r3, #31
   20552:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   20556:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   2055a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   2055e:	3130      	adds	r1, #48	; 0x30
   20560:	f800 1c01 	strb.w	r1, [r0, #-1]
   20564:	4619      	mov	r1, r3
   20566:	2963      	cmp	r1, #99	; 0x63
   20568:	4613      	mov	r3, r2
   2056a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2056e:	dcec      	bgt.n	2054a <_svfprintf_r+0x1582>
   20570:	3330      	adds	r3, #48	; 0x30
   20572:	b2d9      	uxtb	r1, r3
   20574:	1e83      	subs	r3, r0, #2
   20576:	429d      	cmp	r5, r3
   20578:	f802 1c01 	strb.w	r1, [r2, #-1]
   2057c:	f240 828b 	bls.w	20a96 <_svfprintf_r+0x1ace>
   20580:	4613      	mov	r3, r2
   20582:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   20586:	e001      	b.n	2058c <_svfprintf_r+0x15c4>
   20588:	f813 1b01 	ldrb.w	r1, [r3], #1
   2058c:	f802 1b01 	strb.w	r1, [r2], #1
   20590:	429d      	cmp	r5, r3
   20592:	d1f9      	bne.n	20588 <_svfprintf_r+0x15c0>
   20594:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   20598:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   2059c:	1a1b      	subs	r3, r3, r0
   2059e:	4413      	add	r3, r2
   205a0:	aa1e      	add	r2, sp, #120	; 0x78
   205a2:	1a9b      	subs	r3, r3, r2
   205a4:	9314      	str	r3, [sp, #80]	; 0x50
   205a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   205a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   205aa:	2b01      	cmp	r3, #1
   205ac:	441a      	add	r2, r3
   205ae:	9205      	str	r2, [sp, #20]
   205b0:	f340 8203 	ble.w	209ba <_svfprintf_r+0x19f2>
   205b4:	9b05      	ldr	r3, [sp, #20]
   205b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   205b8:	4413      	add	r3, r2
   205ba:	9305      	str	r3, [sp, #20]
   205bc:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   205c0:	9a05      	ldr	r2, [sp, #20]
   205c2:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   205c6:	2300      	movs	r3, #0
   205c8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   205cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   205d0:	930f      	str	r3, [sp, #60]	; 0x3c
   205d2:	9202      	str	r2, [sp, #8]
   205d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   205d6:	2b00      	cmp	r3, #0
   205d8:	f040 80b1 	bne.w	2073e <_svfprintf_r+0x1776>
   205dc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   205e0:	9303      	str	r3, [sp, #12]
   205e2:	f7fe bed2 	b.w	1f38a <_svfprintf_r+0x3c2>
   205e6:	4620      	mov	r0, r4
   205e8:	f7fc fdca 	bl	1d180 <strlen>
   205ec:	4602      	mov	r2, r0
   205ee:	9005      	str	r0, [sp, #20]
   205f0:	f7fe bf20 	b.w	1f434 <_svfprintf_r+0x46c>
   205f4:	ee1b 1a10 	vmov	r1, s22
   205f8:	aa24      	add	r2, sp, #144	; 0x90
   205fa:	4658      	mov	r0, fp
   205fc:	f001 fc84 	bl	21f08 <__ssprint_r>
   20600:	f7fe bded 	b.w	1f1de <_svfprintf_r+0x216>
   20604:	1c59      	adds	r1, r3, #1
   20606:	4658      	mov	r0, fp
   20608:	f7f9 f910 	bl	1982c <_malloc_r>
   2060c:	4604      	mov	r4, r0
   2060e:	2800      	cmp	r0, #0
   20610:	f000 81ca 	beq.w	209a8 <_svfprintf_r+0x19e0>
   20614:	9007      	str	r0, [sp, #28]
   20616:	e6e0      	b.n	203da <_svfprintf_r+0x1412>
   20618:	ee1b 1a10 	vmov	r1, s22
   2061c:	aa24      	add	r2, sp, #144	; 0x90
   2061e:	4658      	mov	r0, fp
   20620:	f001 fc72 	bl	21f08 <__ssprint_r>
   20624:	2800      	cmp	r0, #0
   20626:	f47f a934 	bne.w	1f892 <_svfprintf_r+0x8ca>
   2062a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2062c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20630:	f7ff ba49 	b.w	1fac6 <_svfprintf_r+0xafe>
   20634:	ee1b 1a10 	vmov	r1, s22
   20638:	aa24      	add	r2, sp, #144	; 0x90
   2063a:	4658      	mov	r0, fp
   2063c:	f001 fc64 	bl	21f08 <__ssprint_r>
   20640:	2800      	cmp	r0, #0
   20642:	f47f a926 	bne.w	1f892 <_svfprintf_r+0x8ca>
   20646:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   2064a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   2064c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20650:	e649      	b.n	202e6 <_svfprintf_r+0x131e>
   20652:	2306      	movs	r3, #6
   20654:	9303      	str	r3, [sp, #12]
   20656:	f7ff bb83 	b.w	1fd60 <_svfprintf_r+0xd98>
   2065a:	9b03      	ldr	r3, [sp, #12]
   2065c:	2102      	movs	r1, #2
   2065e:	1c5a      	adds	r2, r3, #1
   20660:	e72b      	b.n	204ba <_svfprintf_r+0x14f2>
   20662:	9a03      	ldr	r2, [sp, #12]
   20664:	2103      	movs	r1, #3
   20666:	e728      	b.n	204ba <_svfprintf_r+0x14f2>
   20668:	a81b      	add	r0, sp, #108	; 0x6c
   2066a:	eeb0 0b4a 	vmov.f64	d0, d10
   2066e:	f000 fc3f 	bl	20ef0 <frexp>
   20672:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   20676:	ee20 0b07 	vmul.f64	d0, d0, d7
   2067a:	eeb5 0b40 	vcmp.f64	d0, #0.0
   2067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20682:	d101      	bne.n	20688 <_svfprintf_r+0x16c0>
   20684:	2301      	movs	r3, #1
   20686:	931b      	str	r3, [sp, #108]	; 0x6c
   20688:	48b3      	ldr	r0, [pc, #716]	; (20958 <_svfprintf_r+0x1990>)
   2068a:	9b03      	ldr	r3, [sp, #12]
   2068c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   20690:	3b01      	subs	r3, #1
   20692:	4622      	mov	r2, r4
   20694:	e004      	b.n	206a0 <_svfprintf_r+0x16d8>
   20696:	eeb5 0b40 	vcmp.f64	d0, #0.0
   2069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2069e:	d013      	beq.n	206c8 <_svfprintf_r+0x1700>
   206a0:	ee20 0b05 	vmul.f64	d0, d0, d5
   206a4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   206a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   206ac:	ee17 1a90 	vmov	r1, s15
   206b0:	5c41      	ldrb	r1, [r0, r1]
   206b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   206b6:	4694      	mov	ip, r2
   206b8:	ee30 0b46 	vsub.f64	d0, d0, d6
   206bc:	f802 1b01 	strb.w	r1, [r2], #1
   206c0:	4619      	mov	r1, r3
   206c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   206c6:	d1e6      	bne.n	20696 <_svfprintf_r+0x16ce>
   206c8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   206cc:	eeb4 0bc6 	vcmpe.f64	d0, d6
   206d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   206d4:	f300 8148 	bgt.w	20968 <_svfprintf_r+0x19a0>
   206d8:	eeb4 0b46 	vcmp.f64	d0, d6
   206dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   206e0:	d104      	bne.n	206ec <_svfprintf_r+0x1724>
   206e2:	ee17 3a90 	vmov	r3, s15
   206e6:	07db      	lsls	r3, r3, #31
   206e8:	f100 813e 	bmi.w	20968 <_svfprintf_r+0x19a0>
   206ec:	2900      	cmp	r1, #0
   206ee:	db06      	blt.n	206fe <_svfprintf_r+0x1736>
   206f0:	1c4b      	adds	r3, r1, #1
   206f2:	4413      	add	r3, r2
   206f4:	2130      	movs	r1, #48	; 0x30
   206f6:	f802 1b01 	strb.w	r1, [r2], #1
   206fa:	4293      	cmp	r3, r2
   206fc:	d1fb      	bne.n	206f6 <_svfprintf_r+0x172e>
   206fe:	1b13      	subs	r3, r2, r4
   20700:	930e      	str	r3, [sp, #56]	; 0x38
   20702:	e6fc      	b.n	204fe <_svfprintf_r+0x1536>
   20704:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   20706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20708:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   2070c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   20710:	9613      	str	r6, [sp, #76]	; 0x4c
   20712:	18e3      	adds	r3, r4, r3
   20714:	429d      	cmp	r5, r3
   20716:	4629      	mov	r1, r5
   20718:	bf28      	it	cs
   2071a:	4619      	movcs	r1, r3
   2071c:	4682      	mov	sl, r0
   2071e:	9105      	str	r1, [sp, #20]
   20720:	f7ff b9d8 	b.w	1fad4 <_svfprintf_r+0xb0c>
   20724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   20726:	930c      	str	r3, [sp, #48]	; 0x30
   20728:	1cda      	adds	r2, r3, #3
   2072a:	db02      	blt.n	20732 <_svfprintf_r+0x176a>
   2072c:	9a03      	ldr	r2, [sp, #12]
   2072e:	4293      	cmp	r3, r2
   20730:	dd0c      	ble.n	2074c <_svfprintf_r+0x1784>
   20732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20734:	3b02      	subs	r3, #2
   20736:	930b      	str	r3, [sp, #44]	; 0x2c
   20738:	f023 0520 	bic.w	r5, r3, #32
   2073c:	e6e7      	b.n	2050e <_svfprintf_r+0x1546>
   2073e:	212d      	movs	r1, #45	; 0x2d
   20740:	2300      	movs	r3, #0
   20742:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   20746:	9303      	str	r3, [sp, #12]
   20748:	f7fe be22 	b.w	1f390 <_svfprintf_r+0x3c8>
   2074c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2074e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20750:	4293      	cmp	r3, r2
   20752:	f2c0 80bd 	blt.w	208d0 <_svfprintf_r+0x1908>
   20756:	07f0      	lsls	r0, r6, #31
   20758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2075a:	f140 8132 	bpl.w	209c2 <_svfprintf_r+0x19fa>
   2075e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20760:	4413      	add	r3, r2
   20762:	9305      	str	r3, [sp, #20]
   20764:	0571      	lsls	r1, r6, #21
   20766:	d503      	bpl.n	20770 <_svfprintf_r+0x17a8>
   20768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2076a:	2b00      	cmp	r3, #0
   2076c:	f300 8135 	bgt.w	209da <_svfprintf_r+0x1a12>
   20770:	9b05      	ldr	r3, [sp, #20]
   20772:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20776:	9302      	str	r3, [sp, #8]
   20778:	2367      	movs	r3, #103	; 0x67
   2077a:	930b      	str	r3, [sp, #44]	; 0x2c
   2077c:	2300      	movs	r3, #0
   2077e:	930f      	str	r3, [sp, #60]	; 0x3c
   20780:	930d      	str	r3, [sp, #52]	; 0x34
   20782:	e727      	b.n	205d4 <_svfprintf_r+0x160c>
   20784:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20786:	4283      	cmp	r3, r0
   20788:	f4bf aeb7 	bcs.w	204fa <_svfprintf_r+0x1532>
   2078c:	2130      	movs	r1, #48	; 0x30
   2078e:	1c5a      	adds	r2, r3, #1
   20790:	9222      	str	r2, [sp, #136]	; 0x88
   20792:	7019      	strb	r1, [r3, #0]
   20794:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20796:	4298      	cmp	r0, r3
   20798:	d8f9      	bhi.n	2078e <_svfprintf_r+0x17c6>
   2079a:	e6ae      	b.n	204fa <_svfprintf_r+0x1532>
   2079c:	07f3      	lsls	r3, r6, #31
   2079e:	f100 80a7 	bmi.w	208f0 <_svfprintf_r+0x1928>
   207a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   207a4:	e6a9      	b.n	204fa <_svfprintf_r+0x1532>
   207a6:	aa24      	add	r2, sp, #144	; 0x90
   207a8:	4658      	mov	r0, fp
   207aa:	9105      	str	r1, [sp, #20]
   207ac:	f001 fbac 	bl	21f08 <__ssprint_r>
   207b0:	2800      	cmp	r0, #0
   207b2:	f47f a86e 	bne.w	1f892 <_svfprintf_r+0x8ca>
   207b6:	f896 c000 	ldrb.w	ip, [r6]
   207ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
   207bc:	9905      	ldr	r1, [sp, #20]
   207be:	a827      	add	r0, sp, #156	; 0x9c
   207c0:	4465      	add	r5, ip
   207c2:	f7ff bbec 	b.w	1ff9e <_svfprintf_r+0xfd6>
   207c6:	ee1b 1a10 	vmov	r1, s22
   207ca:	aa24      	add	r2, sp, #144	; 0x90
   207cc:	4658      	mov	r0, fp
   207ce:	f001 fb9b 	bl	21f08 <__ssprint_r>
   207d2:	2800      	cmp	r0, #0
   207d4:	f47f a85d 	bne.w	1f892 <_svfprintf_r+0x8ca>
   207d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   207da:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   207de:	f7ff b96b 	b.w	1fab8 <_svfprintf_r+0xaf0>
   207e2:	2378      	movs	r3, #120	; 0x78
   207e4:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   207e8:	2330      	movs	r3, #48	; 0x30
   207ea:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   207ee:	9b03      	ldr	r3, [sp, #12]
   207f0:	2b63      	cmp	r3, #99	; 0x63
   207f2:	f048 0602 	orr.w	r6, r8, #2
   207f6:	f300 80a6 	bgt.w	20946 <_svfprintf_r+0x197e>
   207fa:	2300      	movs	r3, #0
   207fc:	9307      	str	r3, [sp, #28]
   207fe:	ac37      	add	r4, sp, #220	; 0xdc
   20800:	ee18 3a90 	vmov	r3, s17
   20804:	2b00      	cmp	r3, #0
   20806:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   2080a:	db2b      	blt.n	20864 <_svfprintf_r+0x189c>
   2080c:	eeb0 ab48 	vmov.f64	d10, d8
   20810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20812:	f023 0520 	bic.w	r5, r3, #32
   20816:	2300      	movs	r3, #0
   20818:	9309      	str	r3, [sp, #36]	; 0x24
   2081a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2081c:	2b61      	cmp	r3, #97	; 0x61
   2081e:	f47f aaad 	bne.w	1fd7c <_svfprintf_r+0xdb4>
   20822:	eeb0 0b4a 	vmov.f64	d0, d10
   20826:	a81b      	add	r0, sp, #108	; 0x6c
   20828:	f000 fb62 	bl	20ef0 <frexp>
   2082c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   20830:	ee20 0b07 	vmul.f64	d0, d0, d7
   20834:	eeb5 0b40 	vcmp.f64	d0, #0.0
   20838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2083c:	d101      	bne.n	20842 <_svfprintf_r+0x187a>
   2083e:	2301      	movs	r3, #1
   20840:	931b      	str	r3, [sp, #108]	; 0x6c
   20842:	4846      	ldr	r0, [pc, #280]	; (2095c <_svfprintf_r+0x1994>)
   20844:	e721      	b.n	2068a <_svfprintf_r+0x16c2>
   20846:	ee1b 1a10 	vmov	r1, s22
   2084a:	aa24      	add	r2, sp, #144	; 0x90
   2084c:	4658      	mov	r0, fp
   2084e:	f001 fb5b 	bl	21f08 <__ssprint_r>
   20852:	2800      	cmp	r0, #0
   20854:	f47f a81d 	bne.w	1f892 <_svfprintf_r+0x8ca>
   20858:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2085a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2085c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20860:	f7ff b94e 	b.w	1fb00 <_svfprintf_r+0xb38>
   20864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20866:	f023 0520 	bic.w	r5, r3, #32
   2086a:	232d      	movs	r3, #45	; 0x2d
   2086c:	9309      	str	r3, [sp, #36]	; 0x24
   2086e:	eeb1 ab48 	vneg.f64	d10, d8
   20872:	e7d2      	b.n	2081a <_svfprintf_r+0x1852>
   20874:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   20876:	920c      	str	r2, [sp, #48]	; 0x30
   20878:	2a00      	cmp	r2, #0
   2087a:	f006 0301 	and.w	r3, r6, #1
   2087e:	f340 810d 	ble.w	20a9c <_svfprintf_r+0x1ad4>
   20882:	9903      	ldr	r1, [sp, #12]
   20884:	430b      	orrs	r3, r1
   20886:	f040 80cf 	bne.w	20a28 <_svfprintf_r+0x1a60>
   2088a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2088c:	9305      	str	r3, [sp, #20]
   2088e:	2366      	movs	r3, #102	; 0x66
   20890:	930b      	str	r3, [sp, #44]	; 0x2c
   20892:	0572      	lsls	r2, r6, #21
   20894:	f100 80a3 	bmi.w	209de <_svfprintf_r+0x1a16>
   20898:	9b05      	ldr	r3, [sp, #20]
   2089a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2089e:	9302      	str	r3, [sp, #8]
   208a0:	e76c      	b.n	2077c <_svfprintf_r+0x17b4>
   208a2:	ee1b 1a10 	vmov	r1, s22
   208a6:	aa24      	add	r2, sp, #144	; 0x90
   208a8:	4658      	mov	r0, fp
   208aa:	f001 fb2d 	bl	21f08 <__ssprint_r>
   208ae:	2800      	cmp	r0, #0
   208b0:	f47e afef 	bne.w	1f892 <_svfprintf_r+0x8ca>
   208b4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   208b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   208b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   208ba:	1b1c      	subs	r4, r3, r4
   208bc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   208c0:	f7ff b936 	b.w	1fb30 <_svfprintf_r+0xb68>
   208c4:	2358      	movs	r3, #88	; 0x58
   208c6:	e78d      	b.n	207e4 <_svfprintf_r+0x181c>
   208c8:	2200      	movs	r2, #0
   208ca:	9203      	str	r2, [sp, #12]
   208cc:	f7fe bbda 	b.w	1f084 <_svfprintf_r+0xbc>
   208d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   208d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   208d4:	189a      	adds	r2, r3, r2
   208d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   208d8:	9205      	str	r2, [sp, #20]
   208da:	2b00      	cmp	r3, #0
   208dc:	f340 80ab 	ble.w	20a36 <_svfprintf_r+0x1a6e>
   208e0:	2367      	movs	r3, #103	; 0x67
   208e2:	930b      	str	r3, [sp, #44]	; 0x2c
   208e4:	e7d5      	b.n	20892 <_svfprintf_r+0x18ca>
   208e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   208e8:	320f      	adds	r2, #15
   208ea:	b2d2      	uxtb	r2, r2
   208ec:	2101      	movs	r1, #1
   208ee:	e618      	b.n	20522 <_svfprintf_r+0x155a>
   208f0:	18a0      	adds	r0, r4, r2
   208f2:	e5fb      	b.n	204ec <_svfprintf_r+0x1524>
   208f4:	2900      	cmp	r1, #0
   208f6:	f040 80a8 	bne.w	20a4a <_svfprintf_r+0x1a82>
   208fa:	2230      	movs	r2, #48	; 0x30
   208fc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   20900:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   20904:	3330      	adds	r3, #48	; 0x30
   20906:	f802 3b01 	strb.w	r3, [r2], #1
   2090a:	ab1e      	add	r3, sp, #120	; 0x78
   2090c:	1ad3      	subs	r3, r2, r3
   2090e:	9314      	str	r3, [sp, #80]	; 0x50
   20910:	e649      	b.n	205a6 <_svfprintf_r+0x15de>
   20912:	3301      	adds	r3, #1
   20914:	4912      	ldr	r1, [pc, #72]	; (20960 <_svfprintf_r+0x1998>)
   20916:	f8ca 5004 	str.w	r5, [sl, #4]
   2091a:	442a      	add	r2, r5
   2091c:	2b07      	cmp	r3, #7
   2091e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20922:	f8ca 1000 	str.w	r1, [sl]
   20926:	f77f ac33 	ble.w	20190 <_svfprintf_r+0x11c8>
   2092a:	ee1b 1a10 	vmov	r1, s22
   2092e:	aa24      	add	r2, sp, #144	; 0x90
   20930:	4658      	mov	r0, fp
   20932:	f001 fae9 	bl	21f08 <__ssprint_r>
   20936:	2800      	cmp	r0, #0
   20938:	f47e afab 	bne.w	1f892 <_svfprintf_r+0x8ca>
   2093c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   20940:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20944:	e426      	b.n	20194 <_svfprintf_r+0x11cc>
   20946:	1c59      	adds	r1, r3, #1
   20948:	4658      	mov	r0, fp
   2094a:	f7f8 ff6f 	bl	1982c <_malloc_r>
   2094e:	4604      	mov	r4, r0
   20950:	b350      	cbz	r0, 209a8 <_svfprintf_r+0x19e0>
   20952:	9007      	str	r0, [sp, #28]
   20954:	e754      	b.n	20800 <_svfprintf_r+0x1838>
   20956:	bf00      	nop
   20958:	20008c9c 	.word	0x20008c9c
   2095c:	20008c88 	.word	0x20008c88
   20960:	200025fc 	.word	0x200025fc
   20964:	66666667 	.word	0x66666667
   20968:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   2096c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   20970:	f890 c00f 	ldrb.w	ip, [r0, #15]
   20974:	4561      	cmp	r1, ip
   20976:	4613      	mov	r3, r2
   20978:	d10a      	bne.n	20990 <_svfprintf_r+0x19c8>
   2097a:	f04f 0e30 	mov.w	lr, #48	; 0x30
   2097e:	f803 ec01 	strb.w	lr, [r3, #-1]
   20982:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20984:	1e59      	subs	r1, r3, #1
   20986:	9122      	str	r1, [sp, #136]	; 0x88
   20988:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2098c:	458c      	cmp	ip, r1
   2098e:	d0f6      	beq.n	2097e <_svfprintf_r+0x19b6>
   20990:	2939      	cmp	r1, #57	; 0x39
   20992:	bf16      	itet	ne
   20994:	3101      	addne	r1, #1
   20996:	7a81      	ldrbeq	r1, [r0, #10]
   20998:	b2c9      	uxtbne	r1, r1
   2099a:	f803 1c01 	strb.w	r1, [r3, #-1]
   2099e:	e6ae      	b.n	206fe <_svfprintf_r+0x1736>
   209a0:	2300      	movs	r3, #0
   209a2:	4690      	mov	r8, r2
   209a4:	9307      	str	r3, [sp, #28]
   209a6:	e760      	b.n	2086a <_svfprintf_r+0x18a2>
   209a8:	ee1b 2a10 	vmov	r2, s22
   209ac:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   209b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   209b4:	8193      	strh	r3, [r2, #12]
   209b6:	f7fe bc16 	b.w	1f1e6 <_svfprintf_r+0x21e>
   209ba:	07f5      	lsls	r5, r6, #31
   209bc:	f57f adfe 	bpl.w	205bc <_svfprintf_r+0x15f4>
   209c0:	e5f8      	b.n	205b4 <_svfprintf_r+0x15ec>
   209c2:	9305      	str	r3, [sp, #20]
   209c4:	e6ce      	b.n	20764 <_svfprintf_r+0x179c>
   209c6:	eeb5 ab40 	vcmp.f64	d10, #0.0
   209ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   209ce:	f43f ad8b 	beq.w	204e8 <_svfprintf_r+0x1520>
   209d2:	f1c2 0201 	rsb	r2, r2, #1
   209d6:	921b      	str	r2, [sp, #108]	; 0x6c
   209d8:	e587      	b.n	204ea <_svfprintf_r+0x1522>
   209da:	2367      	movs	r3, #103	; 0x67
   209dc:	930b      	str	r3, [sp, #44]	; 0x2c
   209de:	9913      	ldr	r1, [sp, #76]	; 0x4c
   209e0:	780b      	ldrb	r3, [r1, #0]
   209e2:	2bff      	cmp	r3, #255	; 0xff
   209e4:	d079      	beq.n	20ada <_svfprintf_r+0x1b12>
   209e6:	2500      	movs	r5, #0
   209e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   209ea:	4628      	mov	r0, r5
   209ec:	e003      	b.n	209f6 <_svfprintf_r+0x1a2e>
   209ee:	3001      	adds	r0, #1
   209f0:	3101      	adds	r1, #1
   209f2:	2bff      	cmp	r3, #255	; 0xff
   209f4:	d008      	beq.n	20a08 <_svfprintf_r+0x1a40>
   209f6:	4293      	cmp	r3, r2
   209f8:	da06      	bge.n	20a08 <_svfprintf_r+0x1a40>
   209fa:	1ad2      	subs	r2, r2, r3
   209fc:	784b      	ldrb	r3, [r1, #1]
   209fe:	2b00      	cmp	r3, #0
   20a00:	d1f5      	bne.n	209ee <_svfprintf_r+0x1a26>
   20a02:	780b      	ldrb	r3, [r1, #0]
   20a04:	3501      	adds	r5, #1
   20a06:	e7f4      	b.n	209f2 <_svfprintf_r+0x1a2a>
   20a08:	920c      	str	r2, [sp, #48]	; 0x30
   20a0a:	9113      	str	r1, [sp, #76]	; 0x4c
   20a0c:	900d      	str	r0, [sp, #52]	; 0x34
   20a0e:	950f      	str	r5, [sp, #60]	; 0x3c
   20a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20a14:	9916      	ldr	r1, [sp, #88]	; 0x58
   20a16:	4413      	add	r3, r2
   20a18:	9a05      	ldr	r2, [sp, #20]
   20a1a:	fb01 2303 	mla	r3, r1, r3, r2
   20a1e:	9305      	str	r3, [sp, #20]
   20a20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20a24:	9302      	str	r3, [sp, #8]
   20a26:	e5d5      	b.n	205d4 <_svfprintf_r+0x160c>
   20a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20a2a:	18d3      	adds	r3, r2, r3
   20a2c:	4419      	add	r1, r3
   20a2e:	2366      	movs	r3, #102	; 0x66
   20a30:	9105      	str	r1, [sp, #20]
   20a32:	930b      	str	r3, [sp, #44]	; 0x2c
   20a34:	e72d      	b.n	20892 <_svfprintf_r+0x18ca>
   20a36:	f1c3 0301 	rsb	r3, r3, #1
   20a3a:	441a      	add	r2, r3
   20a3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20a40:	9302      	str	r3, [sp, #8]
   20a42:	2367      	movs	r3, #103	; 0x67
   20a44:	9205      	str	r2, [sp, #20]
   20a46:	930b      	str	r3, [sp, #44]	; 0x2c
   20a48:	e698      	b.n	2077c <_svfprintf_r+0x17b4>
   20a4a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   20a4e:	e759      	b.n	20904 <_svfprintf_r+0x193c>
   20a50:	9b03      	ldr	r3, [sp, #12]
   20a52:	f8dd 9008 	ldr.w	r9, [sp, #8]
   20a56:	f8dd 801c 	ldr.w	r8, [sp, #28]
   20a5a:	9305      	str	r3, [sp, #20]
   20a5c:	e4b4      	b.n	203c8 <_svfprintf_r+0x1400>
   20a5e:	ee18 3a90 	vmov	r3, s17
   20a62:	2b00      	cmp	r3, #0
   20a64:	bfb4      	ite	lt
   20a66:	212d      	movlt	r1, #45	; 0x2d
   20a68:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   20a6c:	4c25      	ldr	r4, [pc, #148]	; (20b04 <_svfprintf_r+0x1b3c>)
   20a6e:	4b26      	ldr	r3, [pc, #152]	; (20b08 <_svfprintf_r+0x1b40>)
   20a70:	bfb8      	it	lt
   20a72:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   20a76:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   20a7a:	f7fe bc79 	b.w	1f370 <_svfprintf_r+0x3a8>
   20a7e:	9b03      	ldr	r3, [sp, #12]
   20a80:	9302      	str	r3, [sp, #8]
   20a82:	9305      	str	r3, [sp, #20]
   20a84:	2373      	movs	r3, #115	; 0x73
   20a86:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   20a8a:	9003      	str	r0, [sp, #12]
   20a8c:	900f      	str	r0, [sp, #60]	; 0x3c
   20a8e:	900d      	str	r0, [sp, #52]	; 0x34
   20a90:	930b      	str	r3, [sp, #44]	; 0x2c
   20a92:	f7fe bc7a 	b.w	1f38a <_svfprintf_r+0x3c2>
   20a96:	2302      	movs	r3, #2
   20a98:	9314      	str	r3, [sp, #80]	; 0x50
   20a9a:	e584      	b.n	205a6 <_svfprintf_r+0x15de>
   20a9c:	9a03      	ldr	r2, [sp, #12]
   20a9e:	4313      	orrs	r3, r2
   20aa0:	d105      	bne.n	20aae <_svfprintf_r+0x1ae6>
   20aa2:	2301      	movs	r3, #1
   20aa4:	2266      	movs	r2, #102	; 0x66
   20aa6:	9302      	str	r3, [sp, #8]
   20aa8:	920b      	str	r2, [sp, #44]	; 0x2c
   20aaa:	9305      	str	r3, [sp, #20]
   20aac:	e666      	b.n	2077c <_svfprintf_r+0x17b4>
   20aae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20ab0:	3301      	adds	r3, #1
   20ab2:	441a      	add	r2, r3
   20ab4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20ab8:	9302      	str	r3, [sp, #8]
   20aba:	2366      	movs	r3, #102	; 0x66
   20abc:	9205      	str	r2, [sp, #20]
   20abe:	930b      	str	r3, [sp, #44]	; 0x2c
   20ac0:	e65c      	b.n	2077c <_svfprintf_r+0x17b4>
   20ac2:	9a08      	ldr	r2, [sp, #32]
   20ac4:	f899 3001 	ldrb.w	r3, [r9, #1]
   20ac8:	4689      	mov	r9, r1
   20aca:	f852 1b04 	ldr.w	r1, [r2], #4
   20ace:	9208      	str	r2, [sp, #32]
   20ad0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   20ad4:	9103      	str	r1, [sp, #12]
   20ad6:	f7fe bad3 	b.w	1f080 <_svfprintf_r+0xb8>
   20ada:	2300      	movs	r3, #0
   20adc:	930f      	str	r3, [sp, #60]	; 0x3c
   20ade:	930d      	str	r3, [sp, #52]	; 0x34
   20ae0:	e796      	b.n	20a10 <_svfprintf_r+0x1a48>
   20ae2:	230c      	movs	r3, #12
   20ae4:	f8cb 3000 	str.w	r3, [fp]
   20ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20aec:	9304      	str	r3, [sp, #16]
   20aee:	f7fe bb81 	b.w	1f1f4 <_svfprintf_r+0x22c>
   20af2:	ee1b 2a10 	vmov	r2, s22
   20af6:	8993      	ldrh	r3, [r2, #12]
   20af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20afc:	8193      	strh	r3, [r2, #12]
   20afe:	f7fe bec8 	b.w	1f892 <_svfprintf_r+0x8ca>
   20b02:	bf00      	nop
   20b04:	20008c80 	.word	0x20008c80
   20b08:	20008c84 	.word	0x20008c84

00020b0c <_fclose_r>:
   20b0c:	b570      	push	{r4, r5, r6, lr}
   20b0e:	2900      	cmp	r1, #0
   20b10:	d04b      	beq.n	20baa <_fclose_r+0x9e>
   20b12:	4606      	mov	r6, r0
   20b14:	460c      	mov	r4, r1
   20b16:	b110      	cbz	r0, 20b1e <_fclose_r+0x12>
   20b18:	6b43      	ldr	r3, [r0, #52]	; 0x34
   20b1a:	2b00      	cmp	r3, #0
   20b1c:	d048      	beq.n	20bb0 <_fclose_r+0xa4>
   20b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20b20:	07d8      	lsls	r0, r3, #31
   20b22:	d534      	bpl.n	20b8e <_fclose_r+0x82>
   20b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20b28:	2b00      	cmp	r3, #0
   20b2a:	d03e      	beq.n	20baa <_fclose_r+0x9e>
   20b2c:	4621      	mov	r1, r4
   20b2e:	4630      	mov	r0, r6
   20b30:	f000 f858 	bl	20be4 <__sflush_r>
   20b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20b36:	4605      	mov	r5, r0
   20b38:	b133      	cbz	r3, 20b48 <_fclose_r+0x3c>
   20b3a:	69e1      	ldr	r1, [r4, #28]
   20b3c:	4630      	mov	r0, r6
   20b3e:	4798      	blx	r3
   20b40:	2800      	cmp	r0, #0
   20b42:	bfb8      	it	lt
   20b44:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   20b48:	89a3      	ldrh	r3, [r4, #12]
   20b4a:	061a      	lsls	r2, r3, #24
   20b4c:	d43c      	bmi.n	20bc8 <_fclose_r+0xbc>
   20b4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20b50:	b141      	cbz	r1, 20b64 <_fclose_r+0x58>
   20b52:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20b56:	4299      	cmp	r1, r3
   20b58:	d002      	beq.n	20b60 <_fclose_r+0x54>
   20b5a:	4630      	mov	r0, r6
   20b5c:	f7fc fc22 	bl	1d3a4 <_free_r>
   20b60:	2300      	movs	r3, #0
   20b62:	6323      	str	r3, [r4, #48]	; 0x30
   20b64:	6c61      	ldr	r1, [r4, #68]	; 0x44
   20b66:	b121      	cbz	r1, 20b72 <_fclose_r+0x66>
   20b68:	4630      	mov	r0, r6
   20b6a:	f7fc fc1b 	bl	1d3a4 <_free_r>
   20b6e:	2300      	movs	r3, #0
   20b70:	6463      	str	r3, [r4, #68]	; 0x44
   20b72:	f7fa fcfb 	bl	1b56c <__sfp_lock_acquire>
   20b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20b78:	2200      	movs	r2, #0
   20b7a:	07db      	lsls	r3, r3, #31
   20b7c:	81a2      	strh	r2, [r4, #12]
   20b7e:	d51f      	bpl.n	20bc0 <_fclose_r+0xb4>
   20b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20b82:	f7fc f8cb 	bl	1cd1c <__retarget_lock_close_recursive>
   20b86:	f7fa fcf7 	bl	1b578 <__sfp_lock_release>
   20b8a:	4628      	mov	r0, r5
   20b8c:	bd70      	pop	{r4, r5, r6, pc}
   20b8e:	89a3      	ldrh	r3, [r4, #12]
   20b90:	0599      	lsls	r1, r3, #22
   20b92:	d4cb      	bmi.n	20b2c <_fclose_r+0x20>
   20b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20b96:	f7fc f8c5 	bl	1cd24 <__retarget_lock_acquire_recursive>
   20b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	d1c4      	bne.n	20b2c <_fclose_r+0x20>
   20ba2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   20ba4:	f015 0501 	ands.w	r5, r5, #1
   20ba8:	d005      	beq.n	20bb6 <_fclose_r+0xaa>
   20baa:	2500      	movs	r5, #0
   20bac:	4628      	mov	r0, r5
   20bae:	bd70      	pop	{r4, r5, r6, pc}
   20bb0:	f7fa fcbc 	bl	1b52c <__sinit>
   20bb4:	e7b3      	b.n	20b1e <_fclose_r+0x12>
   20bb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20bb8:	f7fc f8bc 	bl	1cd34 <__retarget_lock_release_recursive>
   20bbc:	4628      	mov	r0, r5
   20bbe:	bd70      	pop	{r4, r5, r6, pc}
   20bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20bc2:	f7fc f8b7 	bl	1cd34 <__retarget_lock_release_recursive>
   20bc6:	e7db      	b.n	20b80 <_fclose_r+0x74>
   20bc8:	6921      	ldr	r1, [r4, #16]
   20bca:	4630      	mov	r0, r6
   20bcc:	f7fc fbea 	bl	1d3a4 <_free_r>
   20bd0:	e7bd      	b.n	20b4e <_fclose_r+0x42>
   20bd2:	bf00      	nop

00020bd4 <fclose>:
   20bd4:	4b02      	ldr	r3, [pc, #8]	; (20be0 <fclose+0xc>)
   20bd6:	4601      	mov	r1, r0
   20bd8:	6818      	ldr	r0, [r3, #0]
   20bda:	f7ff bf97 	b.w	20b0c <_fclose_r>
   20bde:	bf00      	nop
   20be0:	20008de0 	.word	0x20008de0

00020be4 <__sflush_r>:
   20be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   20be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20bec:	460c      	mov	r4, r1
   20bee:	0711      	lsls	r1, r2, #28
   20bf0:	4680      	mov	r8, r0
   20bf2:	d447      	bmi.n	20c84 <__sflush_r+0xa0>
   20bf4:	6863      	ldr	r3, [r4, #4]
   20bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   20bfa:	2b00      	cmp	r3, #0
   20bfc:	81a2      	strh	r2, [r4, #12]
   20bfe:	dd5e      	ble.n	20cbe <__sflush_r+0xda>
   20c00:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   20c02:	2d00      	cmp	r5, #0
   20c04:	d058      	beq.n	20cb8 <__sflush_r+0xd4>
   20c06:	2300      	movs	r3, #0
   20c08:	f8d8 6000 	ldr.w	r6, [r8]
   20c0c:	f8c8 3000 	str.w	r3, [r8]
   20c10:	b293      	uxth	r3, r2
   20c12:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   20c16:	d156      	bne.n	20cc6 <__sflush_r+0xe2>
   20c18:	2301      	movs	r3, #1
   20c1a:	69e1      	ldr	r1, [r4, #28]
   20c1c:	4640      	mov	r0, r8
   20c1e:	47a8      	blx	r5
   20c20:	1c43      	adds	r3, r0, #1
   20c22:	d067      	beq.n	20cf4 <__sflush_r+0x110>
   20c24:	89a3      	ldrh	r3, [r4, #12]
   20c26:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   20c28:	075f      	lsls	r7, r3, #29
   20c2a:	d505      	bpl.n	20c38 <__sflush_r+0x54>
   20c2c:	6863      	ldr	r3, [r4, #4]
   20c2e:	1ac0      	subs	r0, r0, r3
   20c30:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20c32:	b10b      	cbz	r3, 20c38 <__sflush_r+0x54>
   20c34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   20c36:	1ac0      	subs	r0, r0, r3
   20c38:	69e1      	ldr	r1, [r4, #28]
   20c3a:	4602      	mov	r2, r0
   20c3c:	2300      	movs	r3, #0
   20c3e:	4640      	mov	r0, r8
   20c40:	47a8      	blx	r5
   20c42:	1c41      	adds	r1, r0, #1
   20c44:	d141      	bne.n	20cca <__sflush_r+0xe6>
   20c46:	f8d8 3000 	ldr.w	r3, [r8]
   20c4a:	2b00      	cmp	r3, #0
   20c4c:	d03d      	beq.n	20cca <__sflush_r+0xe6>
   20c4e:	2b1d      	cmp	r3, #29
   20c50:	d001      	beq.n	20c56 <__sflush_r+0x72>
   20c52:	2b16      	cmp	r3, #22
   20c54:	d156      	bne.n	20d04 <__sflush_r+0x120>
   20c56:	89a3      	ldrh	r3, [r4, #12]
   20c58:	6922      	ldr	r2, [r4, #16]
   20c5a:	6022      	str	r2, [r4, #0]
   20c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   20c60:	2100      	movs	r1, #0
   20c62:	6061      	str	r1, [r4, #4]
   20c64:	81a3      	strh	r3, [r4, #12]
   20c66:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20c68:	f8c8 6000 	str.w	r6, [r8]
   20c6c:	b321      	cbz	r1, 20cb8 <__sflush_r+0xd4>
   20c6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20c72:	4299      	cmp	r1, r3
   20c74:	d002      	beq.n	20c7c <__sflush_r+0x98>
   20c76:	4640      	mov	r0, r8
   20c78:	f7fc fb94 	bl	1d3a4 <_free_r>
   20c7c:	2000      	movs	r0, #0
   20c7e:	6320      	str	r0, [r4, #48]	; 0x30
   20c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c84:	6926      	ldr	r6, [r4, #16]
   20c86:	b1be      	cbz	r6, 20cb8 <__sflush_r+0xd4>
   20c88:	b293      	uxth	r3, r2
   20c8a:	6825      	ldr	r5, [r4, #0]
   20c8c:	6026      	str	r6, [r4, #0]
   20c8e:	079a      	lsls	r2, r3, #30
   20c90:	bf0c      	ite	eq
   20c92:	6963      	ldreq	r3, [r4, #20]
   20c94:	2300      	movne	r3, #0
   20c96:	1bad      	subs	r5, r5, r6
   20c98:	60a3      	str	r3, [r4, #8]
   20c9a:	e00b      	b.n	20cb4 <__sflush_r+0xd0>
   20c9c:	462b      	mov	r3, r5
   20c9e:	4632      	mov	r2, r6
   20ca0:	69e1      	ldr	r1, [r4, #28]
   20ca2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   20ca4:	4640      	mov	r0, r8
   20ca6:	47b8      	blx	r7
   20ca8:	f1b0 0c00 	subs.w	ip, r0, #0
   20cac:	eba5 050c 	sub.w	r5, r5, ip
   20cb0:	4466      	add	r6, ip
   20cb2:	dd17      	ble.n	20ce4 <__sflush_r+0x100>
   20cb4:	2d00      	cmp	r5, #0
   20cb6:	dcf1      	bgt.n	20c9c <__sflush_r+0xb8>
   20cb8:	2000      	movs	r0, #0
   20cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20cbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   20cc0:	2b00      	cmp	r3, #0
   20cc2:	dc9d      	bgt.n	20c00 <__sflush_r+0x1c>
   20cc4:	e7f8      	b.n	20cb8 <__sflush_r+0xd4>
   20cc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   20cc8:	e7ae      	b.n	20c28 <__sflush_r+0x44>
   20cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20cce:	6922      	ldr	r2, [r4, #16]
   20cd0:	6022      	str	r2, [r4, #0]
   20cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   20cd6:	81a3      	strh	r3, [r4, #12]
   20cd8:	2200      	movs	r2, #0
   20cda:	04db      	lsls	r3, r3, #19
   20cdc:	6062      	str	r2, [r4, #4]
   20cde:	d5c2      	bpl.n	20c66 <__sflush_r+0x82>
   20ce0:	6520      	str	r0, [r4, #80]	; 0x50
   20ce2:	e7c0      	b.n	20c66 <__sflush_r+0x82>
   20ce4:	89a3      	ldrh	r3, [r4, #12]
   20ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20cee:	81a3      	strh	r3, [r4, #12]
   20cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20cf4:	f8d8 3000 	ldr.w	r3, [r8]
   20cf8:	2b00      	cmp	r3, #0
   20cfa:	d093      	beq.n	20c24 <__sflush_r+0x40>
   20cfc:	2b1d      	cmp	r3, #29
   20cfe:	d006      	beq.n	20d0e <__sflush_r+0x12a>
   20d00:	2b16      	cmp	r3, #22
   20d02:	d004      	beq.n	20d0e <__sflush_r+0x12a>
   20d04:	89a3      	ldrh	r3, [r4, #12]
   20d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20d0a:	81a3      	strh	r3, [r4, #12]
   20d0c:	e7d5      	b.n	20cba <__sflush_r+0xd6>
   20d0e:	f8c8 6000 	str.w	r6, [r8]
   20d12:	e7d1      	b.n	20cb8 <__sflush_r+0xd4>

00020d14 <_fflush_r>:
   20d14:	b538      	push	{r3, r4, r5, lr}
   20d16:	460c      	mov	r4, r1
   20d18:	4605      	mov	r5, r0
   20d1a:	b108      	cbz	r0, 20d20 <_fflush_r+0xc>
   20d1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   20d1e:	b303      	cbz	r3, 20d62 <_fflush_r+0x4e>
   20d20:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   20d24:	b188      	cbz	r0, 20d4a <_fflush_r+0x36>
   20d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20d28:	07db      	lsls	r3, r3, #31
   20d2a:	d401      	bmi.n	20d30 <_fflush_r+0x1c>
   20d2c:	0581      	lsls	r1, r0, #22
   20d2e:	d50f      	bpl.n	20d50 <_fflush_r+0x3c>
   20d30:	4628      	mov	r0, r5
   20d32:	4621      	mov	r1, r4
   20d34:	f7ff ff56 	bl	20be4 <__sflush_r>
   20d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20d3a:	07da      	lsls	r2, r3, #31
   20d3c:	4605      	mov	r5, r0
   20d3e:	d402      	bmi.n	20d46 <_fflush_r+0x32>
   20d40:	89a3      	ldrh	r3, [r4, #12]
   20d42:	059b      	lsls	r3, r3, #22
   20d44:	d508      	bpl.n	20d58 <_fflush_r+0x44>
   20d46:	4628      	mov	r0, r5
   20d48:	bd38      	pop	{r3, r4, r5, pc}
   20d4a:	4605      	mov	r5, r0
   20d4c:	4628      	mov	r0, r5
   20d4e:	bd38      	pop	{r3, r4, r5, pc}
   20d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20d52:	f7fb ffe7 	bl	1cd24 <__retarget_lock_acquire_recursive>
   20d56:	e7eb      	b.n	20d30 <_fflush_r+0x1c>
   20d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20d5a:	f7fb ffeb 	bl	1cd34 <__retarget_lock_release_recursive>
   20d5e:	4628      	mov	r0, r5
   20d60:	bd38      	pop	{r3, r4, r5, pc}
   20d62:	f7fa fbe3 	bl	1b52c <__sinit>
   20d66:	e7db      	b.n	20d20 <_fflush_r+0xc>

00020d68 <fflush>:
   20d68:	b350      	cbz	r0, 20dc0 <fflush+0x58>
   20d6a:	b538      	push	{r3, r4, r5, lr}
   20d6c:	4b17      	ldr	r3, [pc, #92]	; (20dcc <fflush+0x64>)
   20d6e:	681d      	ldr	r5, [r3, #0]
   20d70:	4604      	mov	r4, r0
   20d72:	b10d      	cbz	r5, 20d78 <fflush+0x10>
   20d74:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20d76:	b1bb      	cbz	r3, 20da8 <fflush+0x40>
   20d78:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   20d7c:	b188      	cbz	r0, 20da2 <fflush+0x3a>
   20d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20d80:	07db      	lsls	r3, r3, #31
   20d82:	d401      	bmi.n	20d88 <fflush+0x20>
   20d84:	0581      	lsls	r1, r0, #22
   20d86:	d513      	bpl.n	20db0 <fflush+0x48>
   20d88:	4628      	mov	r0, r5
   20d8a:	4621      	mov	r1, r4
   20d8c:	f7ff ff2a 	bl	20be4 <__sflush_r>
   20d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20d92:	07da      	lsls	r2, r3, #31
   20d94:	4605      	mov	r5, r0
   20d96:	d402      	bmi.n	20d9e <fflush+0x36>
   20d98:	89a3      	ldrh	r3, [r4, #12]
   20d9a:	059b      	lsls	r3, r3, #22
   20d9c:	d50c      	bpl.n	20db8 <fflush+0x50>
   20d9e:	4628      	mov	r0, r5
   20da0:	bd38      	pop	{r3, r4, r5, pc}
   20da2:	4605      	mov	r5, r0
   20da4:	4628      	mov	r0, r5
   20da6:	bd38      	pop	{r3, r4, r5, pc}
   20da8:	4628      	mov	r0, r5
   20daa:	f7fa fbbf 	bl	1b52c <__sinit>
   20dae:	e7e3      	b.n	20d78 <fflush+0x10>
   20db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20db2:	f7fb ffb7 	bl	1cd24 <__retarget_lock_acquire_recursive>
   20db6:	e7e7      	b.n	20d88 <fflush+0x20>
   20db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20dba:	f7fb ffbb 	bl	1cd34 <__retarget_lock_release_recursive>
   20dbe:	e7ee      	b.n	20d9e <fflush+0x36>
   20dc0:	4a03      	ldr	r2, [pc, #12]	; (20dd0 <fflush+0x68>)
   20dc2:	4904      	ldr	r1, [pc, #16]	; (20dd4 <fflush+0x6c>)
   20dc4:	4804      	ldr	r0, [pc, #16]	; (20dd8 <fflush+0x70>)
   20dc6:	f7fa bc01 	b.w	1b5cc <_fwalk_sglue>
   20dca:	bf00      	nop
   20dcc:	20008de0 	.word	0x20008de0
   20dd0:	2000931c 	.word	0x2000931c
   20dd4:	00020d15 	.word	0x00020d15
   20dd8:	20008de8 	.word	0x20008de8

00020ddc <strcasecmp>:
   20ddc:	b430      	push	{r4, r5}
   20dde:	4d13      	ldr	r5, [pc, #76]	; (20e2c <strcasecmp+0x50>)
   20de0:	f810 4b01 	ldrb.w	r4, [r0], #1
   20de4:	5d2b      	ldrb	r3, [r5, r4]
   20de6:	f003 0303 	and.w	r3, r3, #3
   20dea:	2b01      	cmp	r3, #1
   20dec:	f811 3b01 	ldrb.w	r3, [r1], #1
   20df0:	f815 c003 	ldrb.w	ip, [r5, r3]
   20df4:	f00c 0c03 	and.w	ip, ip, #3
   20df8:	4622      	mov	r2, r4
   20dfa:	bf08      	it	eq
   20dfc:	f104 0220 	addeq.w	r2, r4, #32
   20e00:	f1bc 0f01 	cmp.w	ip, #1
   20e04:	461c      	mov	r4, r3
   20e06:	d006      	beq.n	20e16 <strcasecmp+0x3a>
   20e08:	1ad2      	subs	r2, r2, r3
   20e0a:	d10a      	bne.n	20e22 <strcasecmp+0x46>
   20e0c:	2b00      	cmp	r3, #0
   20e0e:	d1e7      	bne.n	20de0 <strcasecmp+0x4>
   20e10:	4620      	mov	r0, r4
   20e12:	bc30      	pop	{r4, r5}
   20e14:	4770      	bx	lr
   20e16:	3320      	adds	r3, #32
   20e18:	1ad4      	subs	r4, r2, r3
   20e1a:	d0e1      	beq.n	20de0 <strcasecmp+0x4>
   20e1c:	4620      	mov	r0, r4
   20e1e:	bc30      	pop	{r4, r5}
   20e20:	4770      	bx	lr
   20e22:	4614      	mov	r4, r2
   20e24:	4620      	mov	r0, r4
   20e26:	bc30      	pop	{r4, r5}
   20e28:	4770      	bx	lr
   20e2a:	bf00      	nop
   20e2c:	200021d1 	.word	0x200021d1

00020e30 <strcat>:
   20e30:	0783      	lsls	r3, r0, #30
   20e32:	b510      	push	{r4, lr}
   20e34:	4604      	mov	r4, r0
   20e36:	d110      	bne.n	20e5a <strcat+0x2a>
   20e38:	6802      	ldr	r2, [r0, #0]
   20e3a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   20e3e:	ea23 0302 	bic.w	r3, r3, r2
   20e42:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   20e46:	d108      	bne.n	20e5a <strcat+0x2a>
   20e48:	f850 2f04 	ldr.w	r2, [r0, #4]!
   20e4c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   20e50:	ea23 0302 	bic.w	r3, r3, r2
   20e54:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   20e58:	d0f6      	beq.n	20e48 <strcat+0x18>
   20e5a:	7803      	ldrb	r3, [r0, #0]
   20e5c:	b11b      	cbz	r3, 20e66 <strcat+0x36>
   20e5e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   20e62:	2b00      	cmp	r3, #0
   20e64:	d1fb      	bne.n	20e5e <strcat+0x2e>
   20e66:	f7fc f8d9 	bl	1d01c <strcpy>
   20e6a:	4620      	mov	r0, r4
   20e6c:	bd10      	pop	{r4, pc}
   20e6e:	bf00      	nop

00020e70 <strlcpy>:
   20e70:	b1c2      	cbz	r2, 20ea4 <strlcpy+0x34>
   20e72:	eb00 0c02 	add.w	ip, r0, r2
   20e76:	b500      	push	{lr}
   20e78:	460b      	mov	r3, r1
   20e7a:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
   20e7e:	e004      	b.n	20e8a <strlcpy+0x1a>
   20e80:	f813 2b01 	ldrb.w	r2, [r3], #1
   20e84:	f800 2b01 	strb.w	r2, [r0], #1
   20e88:	b142      	cbz	r2, 20e9c <strlcpy+0x2c>
   20e8a:	4586      	cmp	lr, r0
   20e8c:	d1f8      	bne.n	20e80 <strlcpy+0x10>
   20e8e:	2200      	movs	r2, #0
   20e90:	f80c 2c01 	strb.w	r2, [ip, #-1]
   20e94:	f813 2b01 	ldrb.w	r2, [r3], #1
   20e98:	2a00      	cmp	r2, #0
   20e9a:	d1fb      	bne.n	20e94 <strlcpy+0x24>
   20e9c:	1a59      	subs	r1, r3, r1
   20e9e:	1e48      	subs	r0, r1, #1
   20ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   20ea4:	460b      	mov	r3, r1
   20ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
   20eaa:	2a00      	cmp	r2, #0
   20eac:	d1fb      	bne.n	20ea6 <strlcpy+0x36>
   20eae:	1a59      	subs	r1, r3, r1
   20eb0:	1e48      	subs	r0, r1, #1
   20eb2:	4770      	bx	lr

00020eb4 <strnlen>:
   20eb4:	b171      	cbz	r1, 20ed4 <strnlen+0x20>
   20eb6:	4603      	mov	r3, r0
   20eb8:	eb00 0c01 	add.w	ip, r0, r1
   20ebc:	e001      	b.n	20ec2 <strnlen+0xe>
   20ebe:	4563      	cmp	r3, ip
   20ec0:	d006      	beq.n	20ed0 <strnlen+0x1c>
   20ec2:	461a      	mov	r2, r3
   20ec4:	3301      	adds	r3, #1
   20ec6:	7811      	ldrb	r1, [r2, #0]
   20ec8:	2900      	cmp	r1, #0
   20eca:	d1f8      	bne.n	20ebe <strnlen+0xa>
   20ecc:	1a10      	subs	r0, r2, r0
   20ece:	4770      	bx	lr
   20ed0:	1a18      	subs	r0, r3, r0
   20ed2:	4770      	bx	lr
   20ed4:	4608      	mov	r0, r1
   20ed6:	4770      	bx	lr

00020ed8 <__localeconv_l>:
   20ed8:	30f0      	adds	r0, #240	; 0xf0
   20eda:	4770      	bx	lr

00020edc <_localeconv_r>:
   20edc:	4800      	ldr	r0, [pc, #0]	; (20ee0 <_localeconv_r+0x4>)
   20ede:	4770      	bx	lr
   20ee0:	20009418 	.word	0x20009418

00020ee4 <localeconv>:
   20ee4:	4800      	ldr	r0, [pc, #0]	; (20ee8 <localeconv+0x4>)
   20ee6:	4770      	bx	lr
   20ee8:	20009418 	.word	0x20009418
   20eec:	00000000 	.word	0x00000000

00020ef0 <frexp>:
   20ef0:	b430      	push	{r4, r5}
   20ef2:	b082      	sub	sp, #8
   20ef4:	ed8d 0b00 	vstr	d0, [sp]
   20ef8:	9a01      	ldr	r2, [sp, #4]
   20efa:	4c19      	ldr	r4, [pc, #100]	; (20f60 <frexp+0x70>)
   20efc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   20f00:	2100      	movs	r1, #0
   20f02:	42a3      	cmp	r3, r4
   20f04:	6001      	str	r1, [r0, #0]
   20f06:	dc21      	bgt.n	20f4c <frexp+0x5c>
   20f08:	9c00      	ldr	r4, [sp, #0]
   20f0a:	431c      	orrs	r4, r3
   20f0c:	d01e      	beq.n	20f4c <frexp+0x5c>
   20f0e:	4c15      	ldr	r4, [pc, #84]	; (20f64 <frexp+0x74>)
   20f10:	4014      	ands	r4, r2
   20f12:	b954      	cbnz	r4, 20f2a <frexp+0x3a>
   20f14:	ed9f 7b10 	vldr	d7, [pc, #64]	; 20f58 <frexp+0x68>
   20f18:	ee20 7b07 	vmul.f64	d7, d0, d7
   20f1c:	ed8d 7b00 	vstr	d7, [sp]
   20f20:	9a01      	ldr	r2, [sp, #4]
   20f22:	f06f 0135 	mvn.w	r1, #53	; 0x35
   20f26:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   20f2a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   20f2e:	e9dd 4500 	ldrd	r4, r5, [sp]
   20f32:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   20f36:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   20f3a:	151b      	asrs	r3, r3, #20
   20f3c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   20f40:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   20f44:	e9cd 4500 	strd	r4, r5, [sp]
   20f48:	440b      	add	r3, r1
   20f4a:	6003      	str	r3, [r0, #0]
   20f4c:	ed9d 0b00 	vldr	d0, [sp]
   20f50:	b002      	add	sp, #8
   20f52:	bc30      	pop	{r4, r5}
   20f54:	4770      	bx	lr
   20f56:	bf00      	nop
   20f58:	00000000 	.word	0x00000000
   20f5c:	43500000 	.word	0x43500000
   20f60:	7fefffff 	.word	0x7fefffff
   20f64:	7ff00000 	.word	0x7ff00000

00020f68 <__assert_func>:
   20f68:	b500      	push	{lr}
   20f6a:	4c0b      	ldr	r4, [pc, #44]	; (20f98 <__assert_func+0x30>)
   20f6c:	6825      	ldr	r5, [r4, #0]
   20f6e:	4614      	mov	r4, r2
   20f70:	68ee      	ldr	r6, [r5, #12]
   20f72:	461a      	mov	r2, r3
   20f74:	b085      	sub	sp, #20
   20f76:	4603      	mov	r3, r0
   20f78:	460d      	mov	r5, r1
   20f7a:	b14c      	cbz	r4, 20f90 <__assert_func+0x28>
   20f7c:	4907      	ldr	r1, [pc, #28]	; (20f9c <__assert_func+0x34>)
   20f7e:	9500      	str	r5, [sp, #0]
   20f80:	e9cd 1401 	strd	r1, r4, [sp, #4]
   20f84:	4630      	mov	r0, r6
   20f86:	4906      	ldr	r1, [pc, #24]	; (20fa0 <__assert_func+0x38>)
   20f88:	f000 ffaa 	bl	21ee0 <fiprintf>
   20f8c:	f7f5 ff30 	bl	16df0 <abort>
   20f90:	4904      	ldr	r1, [pc, #16]	; (20fa4 <__assert_func+0x3c>)
   20f92:	460c      	mov	r4, r1
   20f94:	e7f3      	b.n	20f7e <__assert_func+0x16>
   20f96:	bf00      	nop
   20f98:	20008de0 	.word	0x20008de0
   20f9c:	20008cb8 	.word	0x20008cb8
   20fa0:	20008cc8 	.word	0x20008cc8
   20fa4:	20005754 	.word	0x20005754

00020fa8 <__assert>:
   20fa8:	b508      	push	{r3, lr}
   20faa:	4613      	mov	r3, r2
   20fac:	2200      	movs	r2, #0
   20fae:	f7ff ffdb 	bl	20f68 <__assert_func>
   20fb2:	bf00      	nop
   20fb4:	0000      	movs	r0, r0
   20fb6:	0000      	movs	r0, r0
   20fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fbc:	6903      	ldr	r3, [r0, #16]
   20fbe:	690c      	ldr	r4, [r1, #16]
   20fc0:	42a3      	cmp	r3, r4
   20fc2:	b083      	sub	sp, #12
   20fc4:	f2c0 8087 	blt.w	210d6 <__assert+0x12e>
   20fc8:	3c01      	subs	r4, #1
   20fca:	f101 0514 	add.w	r5, r1, #20
   20fce:	00a3      	lsls	r3, r4, #2
   20fd0:	f100 0814 	add.w	r8, r0, #20
   20fd4:	9300      	str	r3, [sp, #0]
   20fd6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   20fda:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   20fde:	3301      	adds	r3, #1
   20fe0:	4681      	mov	r9, r0
   20fe2:	429a      	cmp	r2, r3
   20fe4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   20fe8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   20fec:	9001      	str	r0, [sp, #4]
   20fee:	fbb2 f6f3 	udiv	r6, r2, r3
   20ff2:	d33b      	bcc.n	2106c <__assert+0xc4>
   20ff4:	f04f 0c00 	mov.w	ip, #0
   20ff8:	46ae      	mov	lr, r5
   20ffa:	4640      	mov	r0, r8
   20ffc:	46e2      	mov	sl, ip
   20ffe:	4663      	mov	r3, ip
   21000:	f85e bb04 	ldr.w	fp, [lr], #4
   21004:	6802      	ldr	r2, [r0, #0]
   21006:	fa1f fc8b 	uxth.w	ip, fp
   2100a:	fb06 330c 	mla	r3, r6, ip, r3
   2100e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   21012:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   21016:	fb06 cc0b 	mla	ip, r6, fp, ip
   2101a:	b29b      	uxth	r3, r3
   2101c:	ebaa 0303 	sub.w	r3, sl, r3
   21020:	fa1f fa8c 	uxth.w	sl, ip
   21024:	fa13 f382 	uxtah	r3, r3, r2
   21028:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   2102c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   21030:	b29b      	uxth	r3, r3
   21032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21036:	4577      	cmp	r7, lr
   21038:	f840 3b04 	str.w	r3, [r0], #4
   2103c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   21040:	ea4f 431c 	mov.w	r3, ip, lsr #16
   21044:	d2dc      	bcs.n	21000 <__assert+0x58>
   21046:	9b00      	ldr	r3, [sp, #0]
   21048:	f858 3003 	ldr.w	r3, [r8, r3]
   2104c:	b973      	cbnz	r3, 2106c <__assert+0xc4>
   2104e:	9b01      	ldr	r3, [sp, #4]
   21050:	3b04      	subs	r3, #4
   21052:	4598      	cmp	r8, r3
   21054:	d304      	bcc.n	21060 <__assert+0xb8>
   21056:	e007      	b.n	21068 <__assert+0xc0>
   21058:	4598      	cmp	r8, r3
   2105a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2105e:	d203      	bcs.n	21068 <__assert+0xc0>
   21060:	f853 2904 	ldr.w	r2, [r3], #-4
   21064:	2a00      	cmp	r2, #0
   21066:	d0f7      	beq.n	21058 <__assert+0xb0>
   21068:	f8c9 4010 	str.w	r4, [r9, #16]
   2106c:	4648      	mov	r0, r9
   2106e:	f7fd fc29 	bl	1e8c4 <__mcmp>
   21072:	2800      	cmp	r0, #0
   21074:	db2b      	blt.n	210ce <__assert+0x126>
   21076:	3601      	adds	r6, #1
   21078:	4641      	mov	r1, r8
   2107a:	2300      	movs	r3, #0
   2107c:	f855 0b04 	ldr.w	r0, [r5], #4
   21080:	f8d1 c000 	ldr.w	ip, [r1]
   21084:	b282      	uxth	r2, r0
   21086:	1a9a      	subs	r2, r3, r2
   21088:	0c03      	lsrs	r3, r0, #16
   2108a:	fa12 f28c 	uxtah	r2, r2, ip
   2108e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   21092:	eb03 4322 	add.w	r3, r3, r2, asr #16
   21096:	b292      	uxth	r2, r2
   21098:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2109c:	42af      	cmp	r7, r5
   2109e:	f841 2b04 	str.w	r2, [r1], #4
   210a2:	ea4f 4323 	mov.w	r3, r3, asr #16
   210a6:	d2e9      	bcs.n	2107c <__assert+0xd4>
   210a8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   210ac:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   210b0:	b96a      	cbnz	r2, 210ce <__assert+0x126>
   210b2:	3b04      	subs	r3, #4
   210b4:	4598      	cmp	r8, r3
   210b6:	d304      	bcc.n	210c2 <__assert+0x11a>
   210b8:	e007      	b.n	210ca <__assert+0x122>
   210ba:	4598      	cmp	r8, r3
   210bc:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   210c0:	d203      	bcs.n	210ca <__assert+0x122>
   210c2:	f853 2904 	ldr.w	r2, [r3], #-4
   210c6:	2a00      	cmp	r2, #0
   210c8:	d0f7      	beq.n	210ba <__assert+0x112>
   210ca:	f8c9 4010 	str.w	r4, [r9, #16]
   210ce:	4630      	mov	r0, r6
   210d0:	b003      	add	sp, #12
   210d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210d6:	2000      	movs	r0, #0
   210d8:	b003      	add	sp, #12
   210da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210de:	bf00      	nop

000210e0 <_dtoa_r>:
   210e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210e4:	ed2d 8b02 	vpush	{d8}
   210e8:	b08f      	sub	sp, #60	; 0x3c
   210ea:	ed8d 0b02 	vstr	d0, [sp, #8]
   210ee:	9101      	str	r1, [sp, #4]
   210f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   210f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   210f4:	9305      	str	r3, [sp, #20]
   210f6:	ec57 6b10 	vmov	r6, r7, d0
   210fa:	4604      	mov	r4, r0
   210fc:	4693      	mov	fp, r2
   210fe:	b141      	cbz	r1, 21112 <_dtoa_r+0x32>
   21100:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   21102:	604a      	str	r2, [r1, #4]
   21104:	2301      	movs	r3, #1
   21106:	4093      	lsls	r3, r2
   21108:	608b      	str	r3, [r1, #8]
   2110a:	f7fd f923 	bl	1e354 <_Bfree>
   2110e:	2300      	movs	r3, #0
   21110:	63a3      	str	r3, [r4, #56]	; 0x38
   21112:	f1b7 0800 	subs.w	r8, r7, #0
   21116:	bfb4      	ite	lt
   21118:	2301      	movlt	r3, #1
   2111a:	2300      	movge	r3, #0
   2111c:	602b      	str	r3, [r5, #0]
   2111e:	4bbe      	ldr	r3, [pc, #760]	; (21418 <_dtoa_r+0x338>)
   21120:	bfbc      	itt	lt
   21122:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   21126:	f8cd 800c 	strlt.w	r8, [sp, #12]
   2112a:	ea33 0308 	bics.w	r3, r3, r8
   2112e:	f000 809f 	beq.w	21270 <_dtoa_r+0x190>
   21132:	ed9d 8b02 	vldr	d8, [sp, #8]
   21136:	eeb5 8b40 	vcmp.f64	d8, #0.0
   2113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2113e:	d111      	bne.n	21164 <_dtoa_r+0x84>
   21140:	9a05      	ldr	r2, [sp, #20]
   21142:	2301      	movs	r3, #1
   21144:	6013      	str	r3, [r2, #0]
   21146:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21148:	2b00      	cmp	r3, #0
   2114a:	f000 823f 	beq.w	215cc <_dtoa_r+0x4ec>
   2114e:	4bb3      	ldr	r3, [pc, #716]	; (2141c <_dtoa_r+0x33c>)
   21150:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   21152:	6013      	str	r3, [r2, #0]
   21154:	3b01      	subs	r3, #1
   21156:	9300      	str	r3, [sp, #0]
   21158:	9800      	ldr	r0, [sp, #0]
   2115a:	b00f      	add	sp, #60	; 0x3c
   2115c:	ecbd 8b02 	vpop	{d8}
   21160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21164:	aa0c      	add	r2, sp, #48	; 0x30
   21166:	a90d      	add	r1, sp, #52	; 0x34
   21168:	4620      	mov	r0, r4
   2116a:	eeb0 0b48 	vmov.f64	d0, d8
   2116e:	f7fd fd09 	bl	1eb84 <__d2b>
   21172:	ea5f 5318 	movs.w	r3, r8, lsr #20
   21176:	4605      	mov	r5, r0
   21178:	f040 8092 	bne.w	212a0 <_dtoa_r+0x1c0>
   2117c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   21180:	440b      	add	r3, r1
   21182:	f203 4232 	addw	r2, r3, #1074	; 0x432
   21186:	2a20      	cmp	r2, #32
   21188:	f340 82fa 	ble.w	21780 <_dtoa_r+0x6a0>
   2118c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   21190:	fa08 f802 	lsl.w	r8, r8, r2
   21194:	f203 4212 	addw	r2, r3, #1042	; 0x412
   21198:	40d6      	lsrs	r6, r2
   2119a:	ea48 0206 	orr.w	r2, r8, r6
   2119e:	ee07 2a10 	vmov	s14, r2
   211a2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   211a6:	1e58      	subs	r0, r3, #1
   211a8:	ee17 6a90 	vmov	r6, s15
   211ac:	ec53 2b17 	vmov	r2, r3, d7
   211b0:	f04f 0a01 	mov.w	sl, #1
   211b4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   211b8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 21400 <_dtoa_r+0x320>
   211bc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 21408 <_dtoa_r+0x328>
   211c0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 21410 <_dtoa_r+0x330>
   211c4:	ee06 0a90 	vmov	s13, r0
   211c8:	ec43 2b12 	vmov	d2, r2, r3
   211cc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   211d0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   211d4:	ee32 6b46 	vsub.f64	d6, d2, d6
   211d8:	eea6 7b03 	vfma.f64	d7, d6, d3
   211dc:	eea4 7b05 	vfma.f64	d7, d4, d5
   211e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   211e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   211e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   211ec:	ee16 7a90 	vmov	r7, s13
   211f0:	d508      	bpl.n	21204 <_dtoa_r+0x124>
   211f2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   211f6:	eeb4 6b47 	vcmp.f64	d6, d7
   211fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   211fe:	bf18      	it	ne
   21200:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   21204:	2f16      	cmp	r7, #22
   21206:	f200 8145 	bhi.w	21494 <_dtoa_r+0x3b4>
   2120a:	4b85      	ldr	r3, [pc, #532]	; (21420 <_dtoa_r+0x340>)
   2120c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   21210:	ed93 7b00 	vldr	d7, [r3]
   21214:	eeb4 8bc7 	vcmpe.f64	d8, d7
   21218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2121c:	d557      	bpl.n	212ce <_dtoa_r+0x1ee>
   2121e:	1a09      	subs	r1, r1, r0
   21220:	2300      	movs	r3, #0
   21222:	f1b1 0801 	subs.w	r8, r1, #1
   21226:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   2122a:	930a      	str	r3, [sp, #40]	; 0x28
   2122c:	f100 8139 	bmi.w	214a2 <_dtoa_r+0x3c2>
   21230:	2300      	movs	r3, #0
   21232:	9306      	str	r3, [sp, #24]
   21234:	2f00      	cmp	r7, #0
   21236:	da52      	bge.n	212de <_dtoa_r+0x1fe>
   21238:	9b06      	ldr	r3, [sp, #24]
   2123a:	9704      	str	r7, [sp, #16]
   2123c:	1bdb      	subs	r3, r3, r7
   2123e:	9306      	str	r3, [sp, #24]
   21240:	427b      	negs	r3, r7
   21242:	9308      	str	r3, [sp, #32]
   21244:	9b01      	ldr	r3, [sp, #4]
   21246:	2b09      	cmp	r3, #9
   21248:	f04f 0700 	mov.w	r7, #0
   2124c:	d84e      	bhi.n	212ec <_dtoa_r+0x20c>
   2124e:	2b05      	cmp	r3, #5
   21250:	f340 829d 	ble.w	2178e <_dtoa_r+0x6ae>
   21254:	3b04      	subs	r3, #4
   21256:	9301      	str	r3, [sp, #4]
   21258:	2600      	movs	r6, #0
   2125a:	9b01      	ldr	r3, [sp, #4]
   2125c:	1e9a      	subs	r2, r3, #2
   2125e:	2a03      	cmp	r2, #3
   21260:	f200 8125 	bhi.w	214ae <_dtoa_r+0x3ce>
   21264:	e8df f012 	tbh	[pc, r2, lsl #1]
   21268:	03a703aa 	.word	0x03a703aa
   2126c:	037e039d 	.word	0x037e039d
   21270:	9a05      	ldr	r2, [sp, #20]
   21272:	f3c8 0813 	ubfx	r8, r8, #0, #20
   21276:	f242 730f 	movw	r3, #9999	; 0x270f
   2127a:	ea58 0806 	orrs.w	r8, r8, r6
   2127e:	6013      	str	r3, [r2, #0]
   21280:	d11e      	bne.n	212c0 <_dtoa_r+0x1e0>
   21282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21284:	2b00      	cmp	r3, #0
   21286:	f000 8591 	beq.w	21dac <_dtoa_r+0xccc>
   2128a:	4b66      	ldr	r3, [pc, #408]	; (21424 <_dtoa_r+0x344>)
   2128c:	9300      	str	r3, [sp, #0]
   2128e:	3308      	adds	r3, #8
   21290:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   21292:	9800      	ldr	r0, [sp, #0]
   21294:	6013      	str	r3, [r2, #0]
   21296:	b00f      	add	sp, #60	; 0x3c
   21298:	ecbd 8b02 	vpop	{d8}
   2129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212a0:	ee18 6a90 	vmov	r6, s17
   212a4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   212a8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   212ac:	ec53 2b18 	vmov	r2, r3, d8
   212b0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   212b4:	990c      	ldr	r1, [sp, #48]	; 0x30
   212b6:	f04f 0a00 	mov.w	sl, #0
   212ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   212be:	e77b      	b.n	211b8 <_dtoa_r+0xd8>
   212c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   212c2:	2b00      	cmp	r3, #0
   212c4:	f040 833b 	bne.w	2193e <_dtoa_r+0x85e>
   212c8:	4b57      	ldr	r3, [pc, #348]	; (21428 <_dtoa_r+0x348>)
   212ca:	9300      	str	r3, [sp, #0]
   212cc:	e744      	b.n	21158 <_dtoa_r+0x78>
   212ce:	1a09      	subs	r1, r1, r0
   212d0:	2300      	movs	r3, #0
   212d2:	f1b1 0801 	subs.w	r8, r1, #1
   212d6:	930a      	str	r3, [sp, #40]	; 0x28
   212d8:	f100 80e3 	bmi.w	214a2 <_dtoa_r+0x3c2>
   212dc:	9306      	str	r3, [sp, #24]
   212de:	2300      	movs	r3, #0
   212e0:	9308      	str	r3, [sp, #32]
   212e2:	9b01      	ldr	r3, [sp, #4]
   212e4:	9704      	str	r7, [sp, #16]
   212e6:	2b09      	cmp	r3, #9
   212e8:	44b8      	add	r8, r7
   212ea:	d9b0      	bls.n	2124e <_dtoa_r+0x16e>
   212ec:	2300      	movs	r3, #0
   212ee:	2601      	movs	r6, #1
   212f0:	9301      	str	r3, [sp, #4]
   212f2:	9607      	str	r6, [sp, #28]
   212f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   212f8:	469b      	mov	fp, r3
   212fa:	2100      	movs	r1, #0
   212fc:	63e1      	str	r1, [r4, #60]	; 0x3c
   212fe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   21302:	4620      	mov	r0, r4
   21304:	f7fd f800 	bl	1e308 <_Balloc>
   21308:	9000      	str	r0, [sp, #0]
   2130a:	2800      	cmp	r0, #0
   2130c:	f000 8540 	beq.w	21d90 <_dtoa_r+0xcb0>
   21310:	9b00      	ldr	r3, [sp, #0]
   21312:	63a3      	str	r3, [r4, #56]	; 0x38
   21314:	f1b9 0f0e 	cmp.w	r9, #14
   21318:	f200 80dc 	bhi.w	214d4 <_dtoa_r+0x3f4>
   2131c:	2e00      	cmp	r6, #0
   2131e:	f000 80d9 	beq.w	214d4 <_dtoa_r+0x3f4>
   21322:	9b04      	ldr	r3, [sp, #16]
   21324:	2b00      	cmp	r3, #0
   21326:	f340 83de 	ble.w	21ae6 <_dtoa_r+0xa06>
   2132a:	4a3d      	ldr	r2, [pc, #244]	; (21420 <_dtoa_r+0x340>)
   2132c:	f003 010f 	and.w	r1, r3, #15
   21330:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   21334:	ed92 7b00 	vldr	d7, [r2]
   21338:	111a      	asrs	r2, r3, #4
   2133a:	05db      	lsls	r3, r3, #23
   2133c:	f140 8382 	bpl.w	21a44 <_dtoa_r+0x964>
   21340:	493a      	ldr	r1, [pc, #232]	; (2142c <_dtoa_r+0x34c>)
   21342:	ed91 6b08 	vldr	d6, [r1, #32]
   21346:	f002 020f 	and.w	r2, r2, #15
   2134a:	2003      	movs	r0, #3
   2134c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   21350:	b15a      	cbz	r2, 2136a <_dtoa_r+0x28a>
   21352:	4936      	ldr	r1, [pc, #216]	; (2142c <_dtoa_r+0x34c>)
   21354:	07d6      	lsls	r6, r2, #31
   21356:	d504      	bpl.n	21362 <_dtoa_r+0x282>
   21358:	ed91 6b00 	vldr	d6, [r1]
   2135c:	3001      	adds	r0, #1
   2135e:	ee27 7b06 	vmul.f64	d7, d7, d6
   21362:	1052      	asrs	r2, r2, #1
   21364:	f101 0108 	add.w	r1, r1, #8
   21368:	d1f4      	bne.n	21354 <_dtoa_r+0x274>
   2136a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   2136e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21370:	b13b      	cbz	r3, 21382 <_dtoa_r+0x2a2>
   21372:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   21376:	eeb4 6bc7 	vcmpe.f64	d6, d7
   2137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2137e:	f100 84ae 	bmi.w	21cde <_dtoa_r+0xbfe>
   21382:	ee07 0a90 	vmov	s15, r0
   21386:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   2138a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   2138e:	eea5 7b06 	vfma.f64	d7, d5, d6
   21392:	ee17 2a90 	vmov	r2, s15
   21396:	ec51 0b17 	vmov	r0, r1, d7
   2139a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   2139e:	f1b9 0f00 	cmp.w	r9, #0
   213a2:	f000 8388 	beq.w	21ab6 <_dtoa_r+0x9d6>
   213a6:	9e04      	ldr	r6, [sp, #16]
   213a8:	464a      	mov	r2, r9
   213aa:	9b07      	ldr	r3, [sp, #28]
   213ac:	2b00      	cmp	r3, #0
   213ae:	f000 8447 	beq.w	21c40 <_dtoa_r+0xb60>
   213b2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   213b6:	4b1a      	ldr	r3, [pc, #104]	; (21420 <_dtoa_r+0x340>)
   213b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   213bc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   213c0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   213c4:	ee36 7b47 	vsub.f64	d7, d6, d7
   213c8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   213cc:	ee83 5b06 	vdiv.f64	d5, d3, d6
   213d0:	ec41 0b16 	vmov	d6, r0, r1
   213d4:	ee14 0a90 	vmov	r0, s9
   213d8:	ee35 5b46 	vsub.f64	d5, d5, d6
   213dc:	9900      	ldr	r1, [sp, #0]
   213de:	eeb4 5bc7 	vcmpe.f64	d5, d7
   213e2:	3030      	adds	r0, #48	; 0x30
   213e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   213e8:	f801 0b01 	strb.w	r0, [r1], #1
   213ec:	f300 84ac 	bgt.w	21d48 <_dtoa_r+0xc68>
   213f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   213f4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   213f8:	f04f 0c00 	mov.w	ip, #0
   213fc:	e031      	b.n	21462 <_dtoa_r+0x382>
   213fe:	bf00      	nop
   21400:	636f4361 	.word	0x636f4361
   21404:	3fd287a7 	.word	0x3fd287a7
   21408:	8b60c8b3 	.word	0x8b60c8b3
   2140c:	3fc68a28 	.word	0x3fc68a28
   21410:	509f79fb 	.word	0x509f79fb
   21414:	3fd34413 	.word	0x3fd34413
   21418:	7ff00000 	.word	0x7ff00000
   2141c:	200035f1 	.word	0x200035f1
   21420:	20001cd8 	.word	0x20001cd8
   21424:	20008cf8 	.word	0x20008cf8
   21428:	20008d04 	.word	0x20008d04
   2142c:	20001dc8 	.word	0x20001dc8
   21430:	f10c 0c01 	add.w	ip, ip, #1
   21434:	4594      	cmp	ip, r2
   21436:	da4d      	bge.n	214d4 <_dtoa_r+0x3f4>
   21438:	ee27 7b04 	vmul.f64	d7, d7, d4
   2143c:	ee25 5b04 	vmul.f64	d5, d5, d4
   21440:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   21444:	ee16 3a90 	vmov	r3, s13
   21448:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   2144c:	3330      	adds	r3, #48	; 0x30
   2144e:	ee37 7b43 	vsub.f64	d7, d7, d3
   21452:	eeb4 7bc5 	vcmpe.f64	d7, d5
   21456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2145a:	f801 3b01 	strb.w	r3, [r1], #1
   2145e:	f100 8473 	bmi.w	21d48 <_dtoa_r+0xc68>
   21462:	ee32 6b47 	vsub.f64	d6, d2, d7
   21466:	eeb4 6bc5 	vcmpe.f64	d6, d5
   2146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2146e:	d5df      	bpl.n	21430 <_dtoa_r+0x350>
   21470:	9a00      	ldr	r2, [sp, #0]
   21472:	9604      	str	r6, [sp, #16]
   21474:	e002      	b.n	2147c <_dtoa_r+0x39c>
   21476:	428a      	cmp	r2, r1
   21478:	f000 8450 	beq.w	21d1c <_dtoa_r+0xc3c>
   2147c:	4689      	mov	r9, r1
   2147e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   21482:	2b39      	cmp	r3, #57	; 0x39
   21484:	d0f7      	beq.n	21476 <_dtoa_r+0x396>
   21486:	3301      	adds	r3, #1
   21488:	b2db      	uxtb	r3, r3
   2148a:	700b      	strb	r3, [r1, #0]
   2148c:	9b04      	ldr	r3, [sp, #16]
   2148e:	3301      	adds	r3, #1
   21490:	9304      	str	r3, [sp, #16]
   21492:	e155      	b.n	21740 <_dtoa_r+0x660>
   21494:	1a09      	subs	r1, r1, r0
   21496:	2301      	movs	r3, #1
   21498:	f1b1 0801 	subs.w	r8, r1, #1
   2149c:	930a      	str	r3, [sp, #40]	; 0x28
   2149e:	f57f aec7 	bpl.w	21230 <_dtoa_r+0x150>
   214a2:	f1c1 0301 	rsb	r3, r1, #1
   214a6:	9306      	str	r3, [sp, #24]
   214a8:	f04f 0800 	mov.w	r8, #0
   214ac:	e6c2      	b.n	21234 <_dtoa_r+0x154>
   214ae:	2600      	movs	r6, #0
   214b0:	63e6      	str	r6, [r4, #60]	; 0x3c
   214b2:	4631      	mov	r1, r6
   214b4:	4620      	mov	r0, r4
   214b6:	f7fc ff27 	bl	1e308 <_Balloc>
   214ba:	9000      	str	r0, [sp, #0]
   214bc:	2800      	cmp	r0, #0
   214be:	f000 8467 	beq.w	21d90 <_dtoa_r+0xcb0>
   214c2:	9b00      	ldr	r3, [sp, #0]
   214c4:	63a3      	str	r3, [r4, #56]	; 0x38
   214c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   214ca:	930b      	str	r3, [sp, #44]	; 0x2c
   214cc:	4699      	mov	r9, r3
   214ce:	2301      	movs	r3, #1
   214d0:	46b3      	mov	fp, r6
   214d2:	9307      	str	r3, [sp, #28]
   214d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   214d6:	2a00      	cmp	r2, #0
   214d8:	db55      	blt.n	21586 <_dtoa_r+0x4a6>
   214da:	9904      	ldr	r1, [sp, #16]
   214dc:	290e      	cmp	r1, #14
   214de:	dc52      	bgt.n	21586 <_dtoa_r+0x4a6>
   214e0:	4bb7      	ldr	r3, [pc, #732]	; (217c0 <_dtoa_r+0x6e0>)
   214e2:	f1bb 0f00 	cmp.w	fp, #0
   214e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   214ea:	ed93 6b00 	vldr	d6, [r3]
   214ee:	da15      	bge.n	2151c <_dtoa_r+0x43c>
   214f0:	f1b9 0f00 	cmp.w	r9, #0
   214f4:	dc12      	bgt.n	2151c <_dtoa_r+0x43c>
   214f6:	f040 82f2 	bne.w	21ade <_dtoa_r+0x9fe>
   214fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   214fe:	ee26 7b07 	vmul.f64	d7, d6, d7
   21502:	eeb4 8bc7 	vcmpe.f64	d8, d7
   21506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2150a:	46ca      	mov	sl, r9
   2150c:	464e      	mov	r6, r9
   2150e:	f200 826d 	bhi.w	219ec <_dtoa_r+0x90c>
   21512:	f8dd 8000 	ldr.w	r8, [sp]
   21516:	ea6f 0b0b 	mvn.w	fp, fp
   2151a:	e270      	b.n	219fe <_dtoa_r+0x91e>
   2151c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   21520:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   21524:	9900      	ldr	r1, [sp, #0]
   21526:	ee17 3a10 	vmov	r3, s14
   2152a:	f1b9 0f01 	cmp.w	r9, #1
   2152e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   21532:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   21536:	f801 3b01 	strb.w	r3, [r1], #1
   2153a:	eea5 8b46 	vfms.f64	d8, d5, d6
   2153e:	f000 8334 	beq.w	21baa <_dtoa_r+0xaca>
   21542:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   21546:	2301      	movs	r3, #1
   21548:	e011      	b.n	2156e <_dtoa_r+0x48e>
   2154a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   2154e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   21552:	3301      	adds	r3, #1
   21554:	ee17 2a10 	vmov	r2, s14
   21558:	454b      	cmp	r3, r9
   2155a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   2155e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   21562:	f801 2b01 	strb.w	r2, [r1], #1
   21566:	eea5 8b46 	vfms.f64	d8, d5, d6
   2156a:	f000 831e 	beq.w	21baa <_dtoa_r+0xaca>
   2156e:	ee28 8b04 	vmul.f64	d8, d8, d4
   21572:	eeb5 8b40 	vcmp.f64	d8, #0.0
   21576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2157a:	d1e6      	bne.n	2154a <_dtoa_r+0x46a>
   2157c:	9b04      	ldr	r3, [sp, #16]
   2157e:	3301      	adds	r3, #1
   21580:	9304      	str	r3, [sp, #16]
   21582:	4689      	mov	r9, r1
   21584:	e0dc      	b.n	21740 <_dtoa_r+0x660>
   21586:	9b07      	ldr	r3, [sp, #28]
   21588:	b343      	cbz	r3, 215dc <_dtoa_r+0x4fc>
   2158a:	9b01      	ldr	r3, [sp, #4]
   2158c:	2b01      	cmp	r3, #1
   2158e:	f340 8276 	ble.w	21a7e <_dtoa_r+0x99e>
   21592:	9b08      	ldr	r3, [sp, #32]
   21594:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   21598:	4553      	cmp	r3, sl
   2159a:	f280 823f 	bge.w	21a1c <_dtoa_r+0x93c>
   2159e:	9b08      	ldr	r3, [sp, #32]
   215a0:	f8cd a020 	str.w	sl, [sp, #32]
   215a4:	ebaa 0203 	sub.w	r2, sl, r3
   215a8:	4417      	add	r7, r2
   215aa:	f04f 0a00 	mov.w	sl, #0
   215ae:	f1b9 0f00 	cmp.w	r9, #0
   215b2:	f2c0 8325 	blt.w	21c00 <_dtoa_r+0xb20>
   215b6:	9b06      	ldr	r3, [sp, #24]
   215b8:	9309      	str	r3, [sp, #36]	; 0x24
   215ba:	444b      	add	r3, r9
   215bc:	44c8      	add	r8, r9
   215be:	9306      	str	r3, [sp, #24]
   215c0:	2101      	movs	r1, #1
   215c2:	4620      	mov	r0, r4
   215c4:	f7fc ffca 	bl	1e55c <__i2b>
   215c8:	4606      	mov	r6, r0
   215ca:	e00c      	b.n	215e6 <_dtoa_r+0x506>
   215cc:	4b7d      	ldr	r3, [pc, #500]	; (217c4 <_dtoa_r+0x6e4>)
   215ce:	9300      	str	r3, [sp, #0]
   215d0:	9800      	ldr	r0, [sp, #0]
   215d2:	b00f      	add	sp, #60	; 0x3c
   215d4:	ecbd 8b02 	vpop	{d8}
   215d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215dc:	9b06      	ldr	r3, [sp, #24]
   215de:	f8dd a020 	ldr.w	sl, [sp, #32]
   215e2:	9e07      	ldr	r6, [sp, #28]
   215e4:	9309      	str	r3, [sp, #36]	; 0x24
   215e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   215e8:	b16b      	cbz	r3, 21606 <_dtoa_r+0x526>
   215ea:	f1b8 0f00 	cmp.w	r8, #0
   215ee:	dd0a      	ble.n	21606 <_dtoa_r+0x526>
   215f0:	4543      	cmp	r3, r8
   215f2:	9906      	ldr	r1, [sp, #24]
   215f4:	461a      	mov	r2, r3
   215f6:	bfa8      	it	ge
   215f8:	4642      	movge	r2, r8
   215fa:	1a89      	subs	r1, r1, r2
   215fc:	1a9b      	subs	r3, r3, r2
   215fe:	9106      	str	r1, [sp, #24]
   21600:	9309      	str	r3, [sp, #36]	; 0x24
   21602:	eba8 0802 	sub.w	r8, r8, r2
   21606:	9b08      	ldr	r3, [sp, #32]
   21608:	b163      	cbz	r3, 21624 <_dtoa_r+0x544>
   2160a:	9b07      	ldr	r3, [sp, #28]
   2160c:	2b00      	cmp	r3, #0
   2160e:	f000 82a7 	beq.w	21b60 <_dtoa_r+0xa80>
   21612:	f1ba 0f00 	cmp.w	sl, #0
   21616:	f300 8204 	bgt.w	21a22 <_dtoa_r+0x942>
   2161a:	9b08      	ldr	r3, [sp, #32]
   2161c:	ebb3 020a 	subs.w	r2, r3, sl
   21620:	f040 82ff 	bne.w	21c22 <_dtoa_r+0xb42>
   21624:	2101      	movs	r1, #1
   21626:	4620      	mov	r0, r4
   21628:	f7fc ff98 	bl	1e55c <__i2b>
   2162c:	2f00      	cmp	r7, #0
   2162e:	4682      	mov	sl, r0
   21630:	f300 80af 	bgt.w	21792 <_dtoa_r+0x6b2>
   21634:	9b01      	ldr	r3, [sp, #4]
   21636:	2b01      	cmp	r3, #1
   21638:	f340 8187 	ble.w	2194a <_dtoa_r+0x86a>
   2163c:	2300      	movs	r3, #0
   2163e:	9308      	str	r3, [sp, #32]
   21640:	2001      	movs	r0, #1
   21642:	2f00      	cmp	r7, #0
   21644:	f040 80b1 	bne.w	217aa <_dtoa_r+0x6ca>
   21648:	4440      	add	r0, r8
   2164a:	f010 001f 	ands.w	r0, r0, #31
   2164e:	f000 817a 	beq.w	21946 <_dtoa_r+0x866>
   21652:	f1c0 0220 	rsb	r2, r0, #32
   21656:	2a04      	cmp	r2, #4
   21658:	f300 8088 	bgt.w	2176c <_dtoa_r+0x68c>
   2165c:	f040 81f6 	bne.w	21a4c <_dtoa_r+0x96c>
   21660:	9b06      	ldr	r3, [sp, #24]
   21662:	2b00      	cmp	r3, #0
   21664:	dd05      	ble.n	21672 <_dtoa_r+0x592>
   21666:	4629      	mov	r1, r5
   21668:	461a      	mov	r2, r3
   2166a:	4620      	mov	r0, r4
   2166c:	f7fd f8b2 	bl	1e7d4 <__lshift>
   21670:	4605      	mov	r5, r0
   21672:	f1b8 0f00 	cmp.w	r8, #0
   21676:	dd05      	ble.n	21684 <_dtoa_r+0x5a4>
   21678:	4651      	mov	r1, sl
   2167a:	4642      	mov	r2, r8
   2167c:	4620      	mov	r0, r4
   2167e:	f7fd f8a9 	bl	1e7d4 <__lshift>
   21682:	4682      	mov	sl, r0
   21684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21686:	2b00      	cmp	r3, #0
   21688:	f040 813f 	bne.w	2190a <_dtoa_r+0x82a>
   2168c:	f1b9 0f00 	cmp.w	r9, #0
   21690:	f340 8125 	ble.w	218de <_dtoa_r+0x7fe>
   21694:	9b07      	ldr	r3, [sp, #28]
   21696:	2b00      	cmp	r3, #0
   21698:	f040 80a3 	bne.w	217e2 <_dtoa_r+0x702>
   2169c:	9b04      	ldr	r3, [sp, #16]
   2169e:	3301      	adds	r3, #1
   216a0:	9304      	str	r3, [sp, #16]
   216a2:	f8dd 8000 	ldr.w	r8, [sp]
   216a6:	2701      	movs	r7, #1
   216a8:	e007      	b.n	216ba <_dtoa_r+0x5da>
   216aa:	4629      	mov	r1, r5
   216ac:	2300      	movs	r3, #0
   216ae:	220a      	movs	r2, #10
   216b0:	4620      	mov	r0, r4
   216b2:	f7fc fe59 	bl	1e368 <__multadd>
   216b6:	3701      	adds	r7, #1
   216b8:	4605      	mov	r5, r0
   216ba:	4651      	mov	r1, sl
   216bc:	4628      	mov	r0, r5
   216be:	f7ff fc7b 	bl	20fb8 <__assert+0x10>
   216c2:	45b9      	cmp	r9, r7
   216c4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   216c8:	f808 0b01 	strb.w	r0, [r8], #1
   216cc:	dced      	bgt.n	216aa <_dtoa_r+0x5ca>
   216ce:	f1b9 0f00 	cmp.w	r9, #0
   216d2:	9a00      	ldr	r2, [sp, #0]
   216d4:	bfcc      	ite	gt
   216d6:	46cb      	movgt	fp, r9
   216d8:	f04f 0b01 	movle.w	fp, #1
   216dc:	4603      	mov	r3, r0
   216de:	4493      	add	fp, r2
   216e0:	2700      	movs	r7, #0
   216e2:	4629      	mov	r1, r5
   216e4:	2201      	movs	r2, #1
   216e6:	4620      	mov	r0, r4
   216e8:	9301      	str	r3, [sp, #4]
   216ea:	f7fd f873 	bl	1e7d4 <__lshift>
   216ee:	4651      	mov	r1, sl
   216f0:	4605      	mov	r5, r0
   216f2:	f7fd f8e7 	bl	1e8c4 <__mcmp>
   216f6:	2800      	cmp	r0, #0
   216f8:	f340 81af 	ble.w	21a5a <_dtoa_r+0x97a>
   216fc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   21700:	9a00      	ldr	r2, [sp, #0]
   21702:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   21706:	e004      	b.n	21712 <_dtoa_r+0x632>
   21708:	455a      	cmp	r2, fp
   2170a:	f000 81b1 	beq.w	21a70 <_dtoa_r+0x990>
   2170e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   21712:	2b39      	cmp	r3, #57	; 0x39
   21714:	f10b 0901 	add.w	r9, fp, #1
   21718:	d0f6      	beq.n	21708 <_dtoa_r+0x628>
   2171a:	3301      	adds	r3, #1
   2171c:	f88b 3000 	strb.w	r3, [fp]
   21720:	4651      	mov	r1, sl
   21722:	4620      	mov	r0, r4
   21724:	f7fc fe16 	bl	1e354 <_Bfree>
   21728:	b156      	cbz	r6, 21740 <_dtoa_r+0x660>
   2172a:	b12f      	cbz	r7, 21738 <_dtoa_r+0x658>
   2172c:	42b7      	cmp	r7, r6
   2172e:	d003      	beq.n	21738 <_dtoa_r+0x658>
   21730:	4639      	mov	r1, r7
   21732:	4620      	mov	r0, r4
   21734:	f7fc fe0e 	bl	1e354 <_Bfree>
   21738:	4631      	mov	r1, r6
   2173a:	4620      	mov	r0, r4
   2173c:	f7fc fe0a 	bl	1e354 <_Bfree>
   21740:	4629      	mov	r1, r5
   21742:	4620      	mov	r0, r4
   21744:	f7fc fe06 	bl	1e354 <_Bfree>
   21748:	2300      	movs	r3, #0
   2174a:	f889 3000 	strb.w	r3, [r9]
   2174e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21752:	601a      	str	r2, [r3, #0]
   21754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21756:	2b00      	cmp	r3, #0
   21758:	f43f acfe 	beq.w	21158 <_dtoa_r+0x78>
   2175c:	9800      	ldr	r0, [sp, #0]
   2175e:	f8c3 9000 	str.w	r9, [r3]
   21762:	b00f      	add	sp, #60	; 0x3c
   21764:	ecbd 8b02 	vpop	{d8}
   21768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2176c:	f1c0 001c 	rsb	r0, r0, #28
   21770:	9b06      	ldr	r3, [sp, #24]
   21772:	4403      	add	r3, r0
   21774:	9306      	str	r3, [sp, #24]
   21776:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21778:	4403      	add	r3, r0
   2177a:	9309      	str	r3, [sp, #36]	; 0x24
   2177c:	4480      	add	r8, r0
   2177e:	e76f      	b.n	21660 <_dtoa_r+0x580>
   21780:	f1c2 0220 	rsb	r2, r2, #32
   21784:	fa06 f202 	lsl.w	r2, r6, r2
   21788:	ee07 2a10 	vmov	s14, r2
   2178c:	e509      	b.n	211a2 <_dtoa_r+0xc2>
   2178e:	2601      	movs	r6, #1
   21790:	e563      	b.n	2125a <_dtoa_r+0x17a>
   21792:	4601      	mov	r1, r0
   21794:	463a      	mov	r2, r7
   21796:	4620      	mov	r0, r4
   21798:	f7fc ffbc 	bl	1e714 <__pow5mult>
   2179c:	9b01      	ldr	r3, [sp, #4]
   2179e:	2b01      	cmp	r3, #1
   217a0:	4682      	mov	sl, r0
   217a2:	f340 81c5 	ble.w	21b30 <_dtoa_r+0xa50>
   217a6:	2300      	movs	r3, #0
   217a8:	9308      	str	r3, [sp, #32]
   217aa:	f8da 2010 	ldr.w	r2, [sl, #16]
   217ae:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   217b2:	6910      	ldr	r0, [r2, #16]
   217b4:	f7fc fe82 	bl	1e4bc <__hi0bits>
   217b8:	f1c0 0020 	rsb	r0, r0, #32
   217bc:	e744      	b.n	21648 <_dtoa_r+0x568>
   217be:	bf00      	nop
   217c0:	20001cd8 	.word	0x20001cd8
   217c4:	200035f0 	.word	0x200035f0
   217c8:	4631      	mov	r1, r6
   217ca:	2300      	movs	r3, #0
   217cc:	220a      	movs	r2, #10
   217ce:	4620      	mov	r0, r4
   217d0:	f7fc fdca 	bl	1e368 <__multadd>
   217d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   217d6:	2b00      	cmp	r3, #0
   217d8:	4606      	mov	r6, r0
   217da:	f340 82ce 	ble.w	21d7a <_dtoa_r+0xc9a>
   217de:	9704      	str	r7, [sp, #16]
   217e0:	4699      	mov	r9, r3
   217e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   217e4:	2b00      	cmp	r3, #0
   217e6:	dd05      	ble.n	217f4 <_dtoa_r+0x714>
   217e8:	4631      	mov	r1, r6
   217ea:	461a      	mov	r2, r3
   217ec:	4620      	mov	r0, r4
   217ee:	f7fc fff1 	bl	1e7d4 <__lshift>
   217f2:	4606      	mov	r6, r0
   217f4:	9b08      	ldr	r3, [sp, #32]
   217f6:	2b00      	cmp	r3, #0
   217f8:	f040 81eb 	bne.w	21bd2 <_dtoa_r+0xaf2>
   217fc:	46b0      	mov	r8, r6
   217fe:	9b02      	ldr	r3, [sp, #8]
   21800:	9f00      	ldr	r7, [sp, #0]
   21802:	f003 0201 	and.w	r2, r3, #1
   21806:	1e7b      	subs	r3, r7, #1
   21808:	444b      	add	r3, r9
   2180a:	9308      	str	r3, [sp, #32]
   2180c:	9b01      	ldr	r3, [sp, #4]
   2180e:	920a      	str	r2, [sp, #40]	; 0x28
   21810:	4313      	orrs	r3, r2
   21812:	9309      	str	r3, [sp, #36]	; 0x24
   21814:	4651      	mov	r1, sl
   21816:	4628      	mov	r0, r5
   21818:	f7ff fbce 	bl	20fb8 <__assert+0x10>
   2181c:	4631      	mov	r1, r6
   2181e:	4683      	mov	fp, r0
   21820:	4628      	mov	r0, r5
   21822:	f7fd f84f 	bl	1e8c4 <__mcmp>
   21826:	4642      	mov	r2, r8
   21828:	4651      	mov	r1, sl
   2182a:	4681      	mov	r9, r0
   2182c:	4620      	mov	r0, r4
   2182e:	f7fd f86b 	bl	1e908 <__mdiff>
   21832:	68c2      	ldr	r2, [r0, #12]
   21834:	4601      	mov	r1, r0
   21836:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   2183a:	2a00      	cmp	r2, #0
   2183c:	d142      	bne.n	218c4 <_dtoa_r+0x7e4>
   2183e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   21842:	4628      	mov	r0, r5
   21844:	f7fd f83e 	bl	1e8c4 <__mcmp>
   21848:	9906      	ldr	r1, [sp, #24]
   2184a:	9002      	str	r0, [sp, #8]
   2184c:	4620      	mov	r0, r4
   2184e:	f7fc fd81 	bl	1e354 <_Bfree>
   21852:	9a02      	ldr	r2, [sp, #8]
   21854:	9b07      	ldr	r3, [sp, #28]
   21856:	b91a      	cbnz	r2, 21860 <_dtoa_r+0x780>
   21858:	9909      	ldr	r1, [sp, #36]	; 0x24
   2185a:	2900      	cmp	r1, #0
   2185c:	f000 827e 	beq.w	21d5c <_dtoa_r+0xc7c>
   21860:	f1b9 0f00 	cmp.w	r9, #0
   21864:	f2c0 8183 	blt.w	21b6e <_dtoa_r+0xa8e>
   21868:	9901      	ldr	r1, [sp, #4]
   2186a:	ea49 0901 	orr.w	r9, r9, r1
   2186e:	990a      	ldr	r1, [sp, #40]	; 0x28
   21870:	ea51 0909 	orrs.w	r9, r1, r9
   21874:	f000 817b 	beq.w	21b6e <_dtoa_r+0xa8e>
   21878:	2a00      	cmp	r2, #0
   2187a:	f300 81c6 	bgt.w	21c0a <_dtoa_r+0xb2a>
   2187e:	9a08      	ldr	r2, [sp, #32]
   21880:	703b      	strb	r3, [r7, #0]
   21882:	f107 0901 	add.w	r9, r7, #1
   21886:	4297      	cmp	r7, r2
   21888:	46cb      	mov	fp, r9
   2188a:	f000 81c4 	beq.w	21c16 <_dtoa_r+0xb36>
   2188e:	4629      	mov	r1, r5
   21890:	2300      	movs	r3, #0
   21892:	220a      	movs	r2, #10
   21894:	4620      	mov	r0, r4
   21896:	f7fc fd67 	bl	1e368 <__multadd>
   2189a:	4546      	cmp	r6, r8
   2189c:	4605      	mov	r5, r0
   2189e:	4631      	mov	r1, r6
   218a0:	f04f 0300 	mov.w	r3, #0
   218a4:	f04f 020a 	mov.w	r2, #10
   218a8:	4620      	mov	r0, r4
   218aa:	d012      	beq.n	218d2 <_dtoa_r+0x7f2>
   218ac:	f7fc fd5c 	bl	1e368 <__multadd>
   218b0:	4641      	mov	r1, r8
   218b2:	4606      	mov	r6, r0
   218b4:	2300      	movs	r3, #0
   218b6:	220a      	movs	r2, #10
   218b8:	4620      	mov	r0, r4
   218ba:	f7fc fd55 	bl	1e368 <__multadd>
   218be:	464f      	mov	r7, r9
   218c0:	4680      	mov	r8, r0
   218c2:	e7a7      	b.n	21814 <_dtoa_r+0x734>
   218c4:	4620      	mov	r0, r4
   218c6:	9302      	str	r3, [sp, #8]
   218c8:	f7fc fd44 	bl	1e354 <_Bfree>
   218cc:	9b02      	ldr	r3, [sp, #8]
   218ce:	2201      	movs	r2, #1
   218d0:	e7c6      	b.n	21860 <_dtoa_r+0x780>
   218d2:	f7fc fd49 	bl	1e368 <__multadd>
   218d6:	464f      	mov	r7, r9
   218d8:	4606      	mov	r6, r0
   218da:	4680      	mov	r8, r0
   218dc:	e79a      	b.n	21814 <_dtoa_r+0x734>
   218de:	9b01      	ldr	r3, [sp, #4]
   218e0:	2b02      	cmp	r3, #2
   218e2:	dc71      	bgt.n	219c8 <_dtoa_r+0x8e8>
   218e4:	9b07      	ldr	r3, [sp, #28]
   218e6:	2b00      	cmp	r3, #0
   218e8:	f47f af7b 	bne.w	217e2 <_dtoa_r+0x702>
   218ec:	9b04      	ldr	r3, [sp, #16]
   218ee:	4651      	mov	r1, sl
   218f0:	3301      	adds	r3, #1
   218f2:	4628      	mov	r0, r5
   218f4:	9304      	str	r3, [sp, #16]
   218f6:	f7ff fb5f 	bl	20fb8 <__assert+0x10>
   218fa:	f8dd b000 	ldr.w	fp, [sp]
   218fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
   21902:	f80b 3b01 	strb.w	r3, [fp], #1
   21906:	2700      	movs	r7, #0
   21908:	e6eb      	b.n	216e2 <_dtoa_r+0x602>
   2190a:	4651      	mov	r1, sl
   2190c:	4628      	mov	r0, r5
   2190e:	f7fc ffd9 	bl	1e8c4 <__mcmp>
   21912:	2800      	cmp	r0, #0
   21914:	f6bf aeba 	bge.w	2168c <_dtoa_r+0x5ac>
   21918:	4629      	mov	r1, r5
   2191a:	2300      	movs	r3, #0
   2191c:	220a      	movs	r2, #10
   2191e:	4620      	mov	r0, r4
   21920:	f7fc fd22 	bl	1e368 <__multadd>
   21924:	9b04      	ldr	r3, [sp, #16]
   21926:	1e5f      	subs	r7, r3, #1
   21928:	9b07      	ldr	r3, [sp, #28]
   2192a:	4605      	mov	r5, r0
   2192c:	2b00      	cmp	r3, #0
   2192e:	f47f af4b 	bne.w	217c8 <_dtoa_r+0x6e8>
   21932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21934:	2b00      	cmp	r3, #0
   21936:	f340 8218 	ble.w	21d6a <_dtoa_r+0xc8a>
   2193a:	4699      	mov	r9, r3
   2193c:	e6b1      	b.n	216a2 <_dtoa_r+0x5c2>
   2193e:	4bbc      	ldr	r3, [pc, #752]	; (21c30 <_dtoa_r+0xb50>)
   21940:	9300      	str	r3, [sp, #0]
   21942:	3303      	adds	r3, #3
   21944:	e4a4      	b.n	21290 <_dtoa_r+0x1b0>
   21946:	201c      	movs	r0, #28
   21948:	e712      	b.n	21770 <_dtoa_r+0x690>
   2194a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2194e:	2800      	cmp	r0, #0
   21950:	f47f ae74 	bne.w	2163c <_dtoa_r+0x55c>
   21954:	f3c1 0213 	ubfx	r2, r1, #0, #20
   21958:	2a00      	cmp	r2, #0
   2195a:	f000 80f4 	beq.w	21b46 <_dtoa_r+0xa66>
   2195e:	9b02      	ldr	r3, [sp, #8]
   21960:	9308      	str	r3, [sp, #32]
   21962:	e66d      	b.n	21640 <_dtoa_r+0x560>
   21964:	2301      	movs	r3, #1
   21966:	9307      	str	r3, [sp, #28]
   21968:	9b04      	ldr	r3, [sp, #16]
   2196a:	445b      	add	r3, fp
   2196c:	f103 0901 	add.w	r9, r3, #1
   21970:	f1b9 0f01 	cmp.w	r9, #1
   21974:	46cc      	mov	ip, r9
   21976:	930b      	str	r3, [sp, #44]	; 0x2c
   21978:	bfb8      	it	lt
   2197a:	f04f 0c01 	movlt.w	ip, #1
   2197e:	2100      	movs	r1, #0
   21980:	f1bc 0f17 	cmp.w	ip, #23
   21984:	63e1      	str	r1, [r4, #60]	; 0x3c
   21986:	f77f acbc 	ble.w	21302 <_dtoa_r+0x222>
   2198a:	2001      	movs	r0, #1
   2198c:	2204      	movs	r2, #4
   2198e:	0052      	lsls	r2, r2, #1
   21990:	f102 0314 	add.w	r3, r2, #20
   21994:	4563      	cmp	r3, ip
   21996:	4601      	mov	r1, r0
   21998:	f100 0001 	add.w	r0, r0, #1
   2199c:	d9f7      	bls.n	2198e <_dtoa_r+0x8ae>
   2199e:	63e1      	str	r1, [r4, #60]	; 0x3c
   219a0:	e4af      	b.n	21302 <_dtoa_r+0x222>
   219a2:	2301      	movs	r3, #1
   219a4:	9307      	str	r3, [sp, #28]
   219a6:	f1bb 0f00 	cmp.w	fp, #0
   219aa:	dd52      	ble.n	21a52 <_dtoa_r+0x972>
   219ac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   219b0:	46d9      	mov	r9, fp
   219b2:	46dc      	mov	ip, fp
   219b4:	e7e3      	b.n	2197e <_dtoa_r+0x89e>
   219b6:	2300      	movs	r3, #0
   219b8:	9307      	str	r3, [sp, #28]
   219ba:	e7d5      	b.n	21968 <_dtoa_r+0x888>
   219bc:	2300      	movs	r3, #0
   219be:	9307      	str	r3, [sp, #28]
   219c0:	e7f1      	b.n	219a6 <_dtoa_r+0x8c6>
   219c2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   219c6:	9704      	str	r7, [sp, #16]
   219c8:	f1b9 0f00 	cmp.w	r9, #0
   219cc:	f47f ada1 	bne.w	21512 <_dtoa_r+0x432>
   219d0:	4651      	mov	r1, sl
   219d2:	464b      	mov	r3, r9
   219d4:	2205      	movs	r2, #5
   219d6:	4620      	mov	r0, r4
   219d8:	f7fc fcc6 	bl	1e368 <__multadd>
   219dc:	4601      	mov	r1, r0
   219de:	4682      	mov	sl, r0
   219e0:	4628      	mov	r0, r5
   219e2:	f7fc ff6f 	bl	1e8c4 <__mcmp>
   219e6:	2800      	cmp	r0, #0
   219e8:	f77f ad93 	ble.w	21512 <_dtoa_r+0x432>
   219ec:	9b04      	ldr	r3, [sp, #16]
   219ee:	f103 0b01 	add.w	fp, r3, #1
   219f2:	9b00      	ldr	r3, [sp, #0]
   219f4:	2231      	movs	r2, #49	; 0x31
   219f6:	4698      	mov	r8, r3
   219f8:	f803 2b01 	strb.w	r2, [r3], #1
   219fc:	9300      	str	r3, [sp, #0]
   219fe:	4651      	mov	r1, sl
   21a00:	4620      	mov	r0, r4
   21a02:	f7fc fca7 	bl	1e354 <_Bfree>
   21a06:	f10b 0301 	add.w	r3, fp, #1
   21a0a:	f8dd 9000 	ldr.w	r9, [sp]
   21a0e:	9304      	str	r3, [sp, #16]
   21a10:	f8cd 8000 	str.w	r8, [sp]
   21a14:	2e00      	cmp	r6, #0
   21a16:	f47f ae8f 	bne.w	21738 <_dtoa_r+0x658>
   21a1a:	e691      	b.n	21740 <_dtoa_r+0x660>
   21a1c:	eba3 0a0a 	sub.w	sl, r3, sl
   21a20:	e5c5      	b.n	215ae <_dtoa_r+0x4ce>
   21a22:	4631      	mov	r1, r6
   21a24:	4652      	mov	r2, sl
   21a26:	4620      	mov	r0, r4
   21a28:	f7fc fe74 	bl	1e714 <__pow5mult>
   21a2c:	462a      	mov	r2, r5
   21a2e:	4601      	mov	r1, r0
   21a30:	4606      	mov	r6, r0
   21a32:	4620      	mov	r0, r4
   21a34:	f7fc fdc0 	bl	1e5b8 <__multiply>
   21a38:	4629      	mov	r1, r5
   21a3a:	4605      	mov	r5, r0
   21a3c:	4620      	mov	r0, r4
   21a3e:	f7fc fc89 	bl	1e354 <_Bfree>
   21a42:	e5ea      	b.n	2161a <_dtoa_r+0x53a>
   21a44:	2002      	movs	r0, #2
   21a46:	eeb0 5b48 	vmov.f64	d5, d8
   21a4a:	e481      	b.n	21350 <_dtoa_r+0x270>
   21a4c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21a50:	e68e      	b.n	21770 <_dtoa_r+0x690>
   21a52:	f04f 0b01 	mov.w	fp, #1
   21a56:	46d9      	mov	r9, fp
   21a58:	e44f      	b.n	212fa <_dtoa_r+0x21a>
   21a5a:	d103      	bne.n	21a64 <_dtoa_r+0x984>
   21a5c:	9b01      	ldr	r3, [sp, #4]
   21a5e:	07db      	lsls	r3, r3, #31
   21a60:	f53f ae4c 	bmi.w	216fc <_dtoa_r+0x61c>
   21a64:	46d9      	mov	r9, fp
   21a66:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   21a6a:	2b30      	cmp	r3, #48	; 0x30
   21a6c:	d0fa      	beq.n	21a64 <_dtoa_r+0x984>
   21a6e:	e657      	b.n	21720 <_dtoa_r+0x640>
   21a70:	9b04      	ldr	r3, [sp, #16]
   21a72:	9a00      	ldr	r2, [sp, #0]
   21a74:	3301      	adds	r3, #1
   21a76:	9304      	str	r3, [sp, #16]
   21a78:	2331      	movs	r3, #49	; 0x31
   21a7a:	7013      	strb	r3, [r2, #0]
   21a7c:	e650      	b.n	21720 <_dtoa_r+0x640>
   21a7e:	f1ba 0f00 	cmp.w	sl, #0
   21a82:	f000 8123 	beq.w	21ccc <_dtoa_r+0xbec>
   21a86:	f202 4233 	addw	r2, r2, #1075	; 0x433
   21a8a:	9b06      	ldr	r3, [sp, #24]
   21a8c:	9309      	str	r3, [sp, #36]	; 0x24
   21a8e:	4413      	add	r3, r2
   21a90:	f8dd a020 	ldr.w	sl, [sp, #32]
   21a94:	9306      	str	r3, [sp, #24]
   21a96:	4490      	add	r8, r2
   21a98:	e592      	b.n	215c0 <_dtoa_r+0x4e0>
   21a9a:	ee07 0a90 	vmov	s15, r0
   21a9e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   21aa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   21aa6:	eea6 5b07 	vfma.f64	d5, d6, d7
   21aaa:	ee15 2a90 	vmov	r2, s11
   21aae:	ec51 0b15 	vmov	r0, r1, d5
   21ab2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   21ab6:	ec41 0b15 	vmov	d5, r0, r1
   21aba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   21abe:	ee36 7b47 	vsub.f64	d7, d6, d7
   21ac2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   21ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21aca:	f300 8137 	bgt.w	21d3c <_dtoa_r+0xc5c>
   21ace:	eeb1 5b45 	vneg.f64	d5, d5
   21ad2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   21ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21ada:	f57f acfb 	bpl.w	214d4 <_dtoa_r+0x3f4>
   21ade:	f04f 0a00 	mov.w	sl, #0
   21ae2:	4656      	mov	r6, sl
   21ae4:	e515      	b.n	21512 <_dtoa_r+0x432>
   21ae6:	f000 80f5 	beq.w	21cd4 <_dtoa_r+0xbf4>
   21aea:	9b04      	ldr	r3, [sp, #16]
   21aec:	4951      	ldr	r1, [pc, #324]	; (21c34 <_dtoa_r+0xb54>)
   21aee:	425a      	negs	r2, r3
   21af0:	f002 000f 	and.w	r0, r2, #15
   21af4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   21af8:	ed91 6b00 	vldr	d6, [r1]
   21afc:	1112      	asrs	r2, r2, #4
   21afe:	ee28 6b06 	vmul.f64	d6, d8, d6
   21b02:	f000 8142 	beq.w	21d8a <_dtoa_r+0xcaa>
   21b06:	eeb0 7b46 	vmov.f64	d7, d6
   21b0a:	494b      	ldr	r1, [pc, #300]	; (21c38 <_dtoa_r+0xb58>)
   21b0c:	2600      	movs	r6, #0
   21b0e:	2002      	movs	r0, #2
   21b10:	07d3      	lsls	r3, r2, #31
   21b12:	d505      	bpl.n	21b20 <_dtoa_r+0xa40>
   21b14:	ed91 5b00 	vldr	d5, [r1]
   21b18:	3001      	adds	r0, #1
   21b1a:	2601      	movs	r6, #1
   21b1c:	ee27 7b05 	vmul.f64	d7, d7, d5
   21b20:	1052      	asrs	r2, r2, #1
   21b22:	f101 0108 	add.w	r1, r1, #8
   21b26:	d1f3      	bne.n	21b10 <_dtoa_r+0xa30>
   21b28:	2e00      	cmp	r6, #0
   21b2a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   21b2e:	e41e      	b.n	2136e <_dtoa_r+0x28e>
   21b30:	9b02      	ldr	r3, [sp, #8]
   21b32:	2b00      	cmp	r3, #0
   21b34:	f47f ae37 	bne.w	217a6 <_dtoa_r+0x6c6>
   21b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21b3c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   21b40:	2a00      	cmp	r2, #0
   21b42:	f040 8137 	bne.w	21db4 <_dtoa_r+0xcd4>
   21b46:	4a3d      	ldr	r2, [pc, #244]	; (21c3c <_dtoa_r+0xb5c>)
   21b48:	400a      	ands	r2, r1
   21b4a:	2a00      	cmp	r2, #0
   21b4c:	f000 80fa 	beq.w	21d44 <_dtoa_r+0xc64>
   21b50:	9b06      	ldr	r3, [sp, #24]
   21b52:	3301      	adds	r3, #1
   21b54:	9306      	str	r3, [sp, #24]
   21b56:	2301      	movs	r3, #1
   21b58:	f108 0801 	add.w	r8, r8, #1
   21b5c:	9308      	str	r3, [sp, #32]
   21b5e:	e56f      	b.n	21640 <_dtoa_r+0x560>
   21b60:	4629      	mov	r1, r5
   21b62:	9a08      	ldr	r2, [sp, #32]
   21b64:	4620      	mov	r0, r4
   21b66:	f7fc fdd5 	bl	1e714 <__pow5mult>
   21b6a:	4605      	mov	r5, r0
   21b6c:	e55a      	b.n	21624 <_dtoa_r+0x544>
   21b6e:	2a00      	cmp	r2, #0
   21b70:	dd12      	ble.n	21b98 <_dtoa_r+0xab8>
   21b72:	4629      	mov	r1, r5
   21b74:	2201      	movs	r2, #1
   21b76:	4620      	mov	r0, r4
   21b78:	9301      	str	r3, [sp, #4]
   21b7a:	f7fc fe2b 	bl	1e7d4 <__lshift>
   21b7e:	4651      	mov	r1, sl
   21b80:	4605      	mov	r5, r0
   21b82:	f7fc fe9f 	bl	1e8c4 <__mcmp>
   21b86:	2800      	cmp	r0, #0
   21b88:	9b01      	ldr	r3, [sp, #4]
   21b8a:	f340 80e1 	ble.w	21d50 <_dtoa_r+0xc70>
   21b8e:	2b39      	cmp	r3, #57	; 0x39
   21b90:	f000 80ca 	beq.w	21d28 <_dtoa_r+0xc48>
   21b94:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   21b98:	46b9      	mov	r9, r7
   21b9a:	f809 3b01 	strb.w	r3, [r9], #1
   21b9e:	9b04      	ldr	r3, [sp, #16]
   21ba0:	3301      	adds	r3, #1
   21ba2:	4637      	mov	r7, r6
   21ba4:	9304      	str	r3, [sp, #16]
   21ba6:	4646      	mov	r6, r8
   21ba8:	e5ba      	b.n	21720 <_dtoa_r+0x640>
   21baa:	ee38 8b08 	vadd.f64	d8, d8, d8
   21bae:	eeb4 8bc6 	vcmpe.f64	d8, d6
   21bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21bb6:	dc0a      	bgt.n	21bce <_dtoa_r+0xaee>
   21bb8:	eeb4 8b46 	vcmp.f64	d8, d6
   21bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21bc0:	f47f acdc 	bne.w	2157c <_dtoa_r+0x49c>
   21bc4:	ee17 3a10 	vmov	r3, s14
   21bc8:	07d8      	lsls	r0, r3, #31
   21bca:	f57f acd7 	bpl.w	2157c <_dtoa_r+0x49c>
   21bce:	9a00      	ldr	r2, [sp, #0]
   21bd0:	e454      	b.n	2147c <_dtoa_r+0x39c>
   21bd2:	6871      	ldr	r1, [r6, #4]
   21bd4:	4620      	mov	r0, r4
   21bd6:	f7fc fb97 	bl	1e308 <_Balloc>
   21bda:	4607      	mov	r7, r0
   21bdc:	2800      	cmp	r0, #0
   21bde:	f000 80de 	beq.w	21d9e <_dtoa_r+0xcbe>
   21be2:	6933      	ldr	r3, [r6, #16]
   21be4:	3302      	adds	r3, #2
   21be6:	009a      	lsls	r2, r3, #2
   21be8:	f106 010c 	add.w	r1, r6, #12
   21bec:	300c      	adds	r0, #12
   21bee:	f7f4 fcc9 	bl	16584 <memcpy>
   21bf2:	4639      	mov	r1, r7
   21bf4:	2201      	movs	r2, #1
   21bf6:	4620      	mov	r0, r4
   21bf8:	f7fc fdec 	bl	1e7d4 <__lshift>
   21bfc:	4680      	mov	r8, r0
   21bfe:	e5fe      	b.n	217fe <_dtoa_r+0x71e>
   21c00:	9b06      	ldr	r3, [sp, #24]
   21c02:	eba3 0309 	sub.w	r3, r3, r9
   21c06:	9309      	str	r3, [sp, #36]	; 0x24
   21c08:	e4da      	b.n	215c0 <_dtoa_r+0x4e0>
   21c0a:	2b39      	cmp	r3, #57	; 0x39
   21c0c:	f000 808c 	beq.w	21d28 <_dtoa_r+0xc48>
   21c10:	46b9      	mov	r9, r7
   21c12:	3301      	adds	r3, #1
   21c14:	e7c1      	b.n	21b9a <_dtoa_r+0xaba>
   21c16:	9a04      	ldr	r2, [sp, #16]
   21c18:	3201      	adds	r2, #1
   21c1a:	4637      	mov	r7, r6
   21c1c:	9204      	str	r2, [sp, #16]
   21c1e:	4646      	mov	r6, r8
   21c20:	e55f      	b.n	216e2 <_dtoa_r+0x602>
   21c22:	4629      	mov	r1, r5
   21c24:	4620      	mov	r0, r4
   21c26:	f7fc fd75 	bl	1e714 <__pow5mult>
   21c2a:	4605      	mov	r5, r0
   21c2c:	e4fa      	b.n	21624 <_dtoa_r+0x544>
   21c2e:	bf00      	nop
   21c30:	20008d04 	.word	0x20008d04
   21c34:	20001cd8 	.word	0x20001cd8
   21c38:	20001dc8 	.word	0x20001dc8
   21c3c:	7ff00000 	.word	0x7ff00000
   21c40:	4b5e      	ldr	r3, [pc, #376]	; (21dbc <_dtoa_r+0xcdc>)
   21c42:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   21c46:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   21c4a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   21c4e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   21c52:	ee36 7b47 	vsub.f64	d7, d6, d7
   21c56:	ec41 0b16 	vmov	d6, r0, r1
   21c5a:	ee15 1a90 	vmov	r1, s11
   21c5e:	ee23 3b06 	vmul.f64	d3, d3, d6
   21c62:	9800      	ldr	r0, [sp, #0]
   21c64:	3130      	adds	r1, #48	; 0x30
   21c66:	2a01      	cmp	r2, #1
   21c68:	f800 1b01 	strb.w	r1, [r0], #1
   21c6c:	f000 8083 	beq.w	21d76 <_dtoa_r+0xc96>
   21c70:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   21c74:	9b00      	ldr	r3, [sp, #0]
   21c76:	1899      	adds	r1, r3, r2
   21c78:	ee27 7b04 	vmul.f64	d7, d7, d4
   21c7c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   21c80:	ee16 3a90 	vmov	r3, s13
   21c84:	3330      	adds	r3, #48	; 0x30
   21c86:	f800 3b01 	strb.w	r3, [r0], #1
   21c8a:	4281      	cmp	r1, r0
   21c8c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   21c90:	ee37 7b45 	vsub.f64	d7, d7, d5
   21c94:	d1f0      	bne.n	21c78 <_dtoa_r+0xb98>
   21c96:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   21c9a:	ee33 5b06 	vadd.f64	d5, d3, d6
   21c9e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   21ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21ca6:	f53f abe3 	bmi.w	21470 <_dtoa_r+0x390>
   21caa:	ee36 6b43 	vsub.f64	d6, d6, d3
   21cae:	eeb4 6bc7 	vcmpe.f64	d6, d7
   21cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21cb6:	f77f ac0d 	ble.w	214d4 <_dtoa_r+0x3f4>
   21cba:	4689      	mov	r9, r1
   21cbc:	3901      	subs	r1, #1
   21cbe:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   21cc2:	2b30      	cmp	r3, #48	; 0x30
   21cc4:	d0f9      	beq.n	21cba <_dtoa_r+0xbda>
   21cc6:	1c73      	adds	r3, r6, #1
   21cc8:	9304      	str	r3, [sp, #16]
   21cca:	e539      	b.n	21740 <_dtoa_r+0x660>
   21ccc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   21cce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   21cd2:	e6da      	b.n	21a8a <_dtoa_r+0x9aa>
   21cd4:	2002      	movs	r0, #2
   21cd6:	eeb0 6b48 	vmov.f64	d6, d8
   21cda:	f7ff bb48 	b.w	2136e <_dtoa_r+0x28e>
   21cde:	f1b9 0f00 	cmp.w	r9, #0
   21ce2:	f43f aeda 	beq.w	21a9a <_dtoa_r+0x9ba>
   21ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21ce8:	2a00      	cmp	r2, #0
   21cea:	f77f abf3 	ble.w	214d4 <_dtoa_r+0x3f4>
   21cee:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   21cf2:	ee26 6b04 	vmul.f64	d6, d6, d4
   21cf6:	3001      	adds	r0, #1
   21cf8:	ee07 0a90 	vmov	s15, r0
   21cfc:	9b04      	ldr	r3, [sp, #16]
   21cfe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   21d02:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   21d06:	eea6 7b05 	vfma.f64	d7, d6, d5
   21d0a:	ee17 ca90 	vmov	ip, s15
   21d0e:	ec51 0b17 	vmov	r0, r1, d7
   21d12:	1e5e      	subs	r6, r3, #1
   21d14:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   21d18:	f7ff bb47 	b.w	213aa <_dtoa_r+0x2ca>
   21d1c:	9b04      	ldr	r3, [sp, #16]
   21d1e:	3301      	adds	r3, #1
   21d20:	9304      	str	r3, [sp, #16]
   21d22:	2331      	movs	r3, #49	; 0x31
   21d24:	f7ff bbb1 	b.w	2148a <_dtoa_r+0x3aa>
   21d28:	9b04      	ldr	r3, [sp, #16]
   21d2a:	46bb      	mov	fp, r7
   21d2c:	3301      	adds	r3, #1
   21d2e:	9304      	str	r3, [sp, #16]
   21d30:	2339      	movs	r3, #57	; 0x39
   21d32:	4637      	mov	r7, r6
   21d34:	f80b 3b01 	strb.w	r3, [fp], #1
   21d38:	4646      	mov	r6, r8
   21d3a:	e4e1      	b.n	21700 <_dtoa_r+0x620>
   21d3c:	f04f 0a00 	mov.w	sl, #0
   21d40:	4656      	mov	r6, sl
   21d42:	e653      	b.n	219ec <_dtoa_r+0x90c>
   21d44:	9208      	str	r2, [sp, #32]
   21d46:	e47b      	b.n	21640 <_dtoa_r+0x560>
   21d48:	1c73      	adds	r3, r6, #1
   21d4a:	9304      	str	r3, [sp, #16]
   21d4c:	4689      	mov	r9, r1
   21d4e:	e4f7      	b.n	21740 <_dtoa_r+0x660>
   21d50:	f47f af22 	bne.w	21b98 <_dtoa_r+0xab8>
   21d54:	07da      	lsls	r2, r3, #31
   21d56:	f57f af1f 	bpl.w	21b98 <_dtoa_r+0xab8>
   21d5a:	e718      	b.n	21b8e <_dtoa_r+0xaae>
   21d5c:	2b39      	cmp	r3, #57	; 0x39
   21d5e:	d0e3      	beq.n	21d28 <_dtoa_r+0xc48>
   21d60:	f1b9 0f00 	cmp.w	r9, #0
   21d64:	f73f af16 	bgt.w	21b94 <_dtoa_r+0xab4>
   21d68:	e716      	b.n	21b98 <_dtoa_r+0xab8>
   21d6a:	9b01      	ldr	r3, [sp, #4]
   21d6c:	2b02      	cmp	r3, #2
   21d6e:	f73f ae28 	bgt.w	219c2 <_dtoa_r+0x8e2>
   21d72:	9704      	str	r7, [sp, #16]
   21d74:	e5ba      	b.n	218ec <_dtoa_r+0x80c>
   21d76:	4601      	mov	r1, r0
   21d78:	e78d      	b.n	21c96 <_dtoa_r+0xbb6>
   21d7a:	9b01      	ldr	r3, [sp, #4]
   21d7c:	2b02      	cmp	r3, #2
   21d7e:	f73f ae20 	bgt.w	219c2 <_dtoa_r+0x8e2>
   21d82:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   21d86:	9704      	str	r7, [sp, #16]
   21d88:	e52b      	b.n	217e2 <_dtoa_r+0x702>
   21d8a:	2002      	movs	r0, #2
   21d8c:	f7ff baef 	b.w	2136e <_dtoa_r+0x28e>
   21d90:	4b0b      	ldr	r3, [pc, #44]	; (21dc0 <_dtoa_r+0xce0>)
   21d92:	480c      	ldr	r0, [pc, #48]	; (21dc4 <_dtoa_r+0xce4>)
   21d94:	2200      	movs	r2, #0
   21d96:	f240 11af 	movw	r1, #431	; 0x1af
   21d9a:	f7ff f8e5 	bl	20f68 <__assert_func>
   21d9e:	4b08      	ldr	r3, [pc, #32]	; (21dc0 <_dtoa_r+0xce0>)
   21da0:	4808      	ldr	r0, [pc, #32]	; (21dc4 <_dtoa_r+0xce4>)
   21da2:	463a      	mov	r2, r7
   21da4:	f240 21ef 	movw	r1, #751	; 0x2ef
   21da8:	f7ff f8de 	bl	20f68 <__assert_func>
   21dac:	4b06      	ldr	r3, [pc, #24]	; (21dc8 <_dtoa_r+0xce8>)
   21dae:	9300      	str	r3, [sp, #0]
   21db0:	f7ff b9d2 	b.w	21158 <_dtoa_r+0x78>
   21db4:	9b02      	ldr	r3, [sp, #8]
   21db6:	9308      	str	r3, [sp, #32]
   21db8:	e4f7      	b.n	217aa <_dtoa_r+0x6ca>
   21dba:	bf00      	nop
   21dbc:	20001cd8 	.word	0x20001cd8
   21dc0:	20008bbc 	.word	0x20008bbc
   21dc4:	20008d08 	.word	0x20008d08
   21dc8:	20008cf8 	.word	0x20008cf8

00021dcc <__env_lock>:
   21dcc:	4801      	ldr	r0, [pc, #4]	; (21dd4 <__env_lock+0x8>)
   21dce:	f7fa bfa9 	b.w	1cd24 <__retarget_lock_acquire_recursive>
   21dd2:	bf00      	nop
   21dd4:	2000d530 	.word	0x2000d530

00021dd8 <__env_unlock>:
   21dd8:	4801      	ldr	r0, [pc, #4]	; (21de0 <__env_unlock+0x8>)
   21dda:	f7fa bfab 	b.w	1cd34 <__retarget_lock_release_recursive>
   21dde:	bf00      	nop
   21de0:	2000d530 	.word	0x2000d530

00021de4 <_wcrtomb_r>:
   21de4:	b570      	push	{r4, r5, r6, lr}
   21de6:	4605      	mov	r5, r0
   21de8:	b084      	sub	sp, #16
   21dea:	b15b      	cbz	r3, 21e04 <_wcrtomb_r+0x20>
   21dec:	461c      	mov	r4, r3
   21dee:	b169      	cbz	r1, 21e0c <_wcrtomb_r+0x28>
   21df0:	4b0e      	ldr	r3, [pc, #56]	; (21e2c <_wcrtomb_r+0x48>)
   21df2:	4628      	mov	r0, r5
   21df4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   21df8:	4623      	mov	r3, r4
   21dfa:	47b0      	blx	r6
   21dfc:	1c43      	adds	r3, r0, #1
   21dfe:	d00f      	beq.n	21e20 <_wcrtomb_r+0x3c>
   21e00:	b004      	add	sp, #16
   21e02:	bd70      	pop	{r4, r5, r6, pc}
   21e04:	f500 7482 	add.w	r4, r0, #260	; 0x104
   21e08:	2900      	cmp	r1, #0
   21e0a:	d1f1      	bne.n	21df0 <_wcrtomb_r+0xc>
   21e0c:	4a07      	ldr	r2, [pc, #28]	; (21e2c <_wcrtomb_r+0x48>)
   21e0e:	4623      	mov	r3, r4
   21e10:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   21e14:	4628      	mov	r0, r5
   21e16:	460a      	mov	r2, r1
   21e18:	a901      	add	r1, sp, #4
   21e1a:	47b0      	blx	r6
   21e1c:	1c43      	adds	r3, r0, #1
   21e1e:	d1ef      	bne.n	21e00 <_wcrtomb_r+0x1c>
   21e20:	2200      	movs	r2, #0
   21e22:	238a      	movs	r3, #138	; 0x8a
   21e24:	6022      	str	r2, [r4, #0]
   21e26:	602b      	str	r3, [r5, #0]
   21e28:	b004      	add	sp, #16
   21e2a:	bd70      	pop	{r4, r5, r6, pc}
   21e2c:	20009328 	.word	0x20009328

00021e30 <wcrtomb>:
   21e30:	b570      	push	{r4, r5, r6, lr}
   21e32:	4b13      	ldr	r3, [pc, #76]	; (21e80 <wcrtomb+0x50>)
   21e34:	b084      	sub	sp, #16
   21e36:	681d      	ldr	r5, [r3, #0]
   21e38:	b16a      	cbz	r2, 21e56 <wcrtomb+0x26>
   21e3a:	4614      	mov	r4, r2
   21e3c:	b178      	cbz	r0, 21e5e <wcrtomb+0x2e>
   21e3e:	4b11      	ldr	r3, [pc, #68]	; (21e84 <wcrtomb+0x54>)
   21e40:	460a      	mov	r2, r1
   21e42:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   21e46:	4601      	mov	r1, r0
   21e48:	4623      	mov	r3, r4
   21e4a:	4628      	mov	r0, r5
   21e4c:	47b0      	blx	r6
   21e4e:	1c43      	adds	r3, r0, #1
   21e50:	d00f      	beq.n	21e72 <wcrtomb+0x42>
   21e52:	b004      	add	sp, #16
   21e54:	bd70      	pop	{r4, r5, r6, pc}
   21e56:	f505 7482 	add.w	r4, r5, #260	; 0x104
   21e5a:	2800      	cmp	r0, #0
   21e5c:	d1ef      	bne.n	21e3e <wcrtomb+0xe>
   21e5e:	4a09      	ldr	r2, [pc, #36]	; (21e84 <wcrtomb+0x54>)
   21e60:	4623      	mov	r3, r4
   21e62:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   21e66:	a901      	add	r1, sp, #4
   21e68:	4602      	mov	r2, r0
   21e6a:	4628      	mov	r0, r5
   21e6c:	47b0      	blx	r6
   21e6e:	1c43      	adds	r3, r0, #1
   21e70:	d1ef      	bne.n	21e52 <wcrtomb+0x22>
   21e72:	2200      	movs	r2, #0
   21e74:	238a      	movs	r3, #138	; 0x8a
   21e76:	6022      	str	r2, [r4, #0]
   21e78:	602b      	str	r3, [r5, #0]
   21e7a:	b004      	add	sp, #16
   21e7c:	bd70      	pop	{r4, r5, r6, pc}
   21e7e:	bf00      	nop
   21e80:	20008de0 	.word	0x20008de0
   21e84:	20009328 	.word	0x20009328

00021e88 <_wcsrtombs_r>:
   21e88:	b510      	push	{r4, lr}
   21e8a:	b082      	sub	sp, #8
   21e8c:	9c04      	ldr	r4, [sp, #16]
   21e8e:	e9cd 3400 	strd	r3, r4, [sp]
   21e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21e96:	f002 fac7 	bl	24428 <_wcsnrtombs_r>
   21e9a:	b002      	add	sp, #8
   21e9c:	bd10      	pop	{r4, pc}
   21e9e:	bf00      	nop

00021ea0 <wcsrtombs>:
   21ea0:	b510      	push	{r4, lr}
   21ea2:	4c07      	ldr	r4, [pc, #28]	; (21ec0 <wcsrtombs+0x20>)
   21ea4:	b082      	sub	sp, #8
   21ea6:	4684      	mov	ip, r0
   21ea8:	e9cd 2300 	strd	r2, r3, [sp]
   21eac:	6820      	ldr	r0, [r4, #0]
   21eae:	460a      	mov	r2, r1
   21eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21eb4:	4661      	mov	r1, ip
   21eb6:	f002 fab7 	bl	24428 <_wcsnrtombs_r>
   21eba:	b002      	add	sp, #8
   21ebc:	bd10      	pop	{r4, pc}
   21ebe:	bf00      	nop
   21ec0:	20008de0 	.word	0x20008de0

00021ec4 <_fiprintf_r>:
   21ec4:	b40c      	push	{r2, r3}
   21ec6:	b500      	push	{lr}
   21ec8:	b083      	sub	sp, #12
   21eca:	ab04      	add	r3, sp, #16
   21ecc:	f853 2b04 	ldr.w	r2, [r3], #4
   21ed0:	9301      	str	r3, [sp, #4]
   21ed2:	f000 ff6d 	bl	22db0 <_vfiprintf_r>
   21ed6:	b003      	add	sp, #12
   21ed8:	f85d eb04 	ldr.w	lr, [sp], #4
   21edc:	b002      	add	sp, #8
   21ede:	4770      	bx	lr

00021ee0 <fiprintf>:
   21ee0:	b40e      	push	{r1, r2, r3}
   21ee2:	b510      	push	{r4, lr}
   21ee4:	b083      	sub	sp, #12
   21ee6:	ab05      	add	r3, sp, #20
   21ee8:	4c06      	ldr	r4, [pc, #24]	; (21f04 <fiprintf+0x24>)
   21eea:	f853 2b04 	ldr.w	r2, [r3], #4
   21eee:	9301      	str	r3, [sp, #4]
   21ef0:	4601      	mov	r1, r0
   21ef2:	6820      	ldr	r0, [r4, #0]
   21ef4:	f000 ff5c 	bl	22db0 <_vfiprintf_r>
   21ef8:	b003      	add	sp, #12
   21efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21efe:	b003      	add	sp, #12
   21f00:	4770      	bx	lr
   21f02:	bf00      	nop
   21f04:	20008de0 	.word	0x20008de0

00021f08 <__ssprint_r>:
   21f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f0c:	6893      	ldr	r3, [r2, #8]
   21f0e:	6817      	ldr	r7, [r2, #0]
   21f10:	b083      	sub	sp, #12
   21f12:	4692      	mov	sl, r2
   21f14:	2b00      	cmp	r3, #0
   21f16:	d070      	beq.n	21ffa <__ssprint_r+0xf2>
   21f18:	4681      	mov	r9, r0
   21f1a:	688a      	ldr	r2, [r1, #8]
   21f1c:	6808      	ldr	r0, [r1, #0]
   21f1e:	460c      	mov	r4, r1
   21f20:	3708      	adds	r7, #8
   21f22:	e043      	b.n	21fac <__ssprint_r+0xa4>
   21f24:	89a3      	ldrh	r3, [r4, #12]
   21f26:	f413 6f90 	tst.w	r3, #1152	; 0x480
   21f2a:	d02e      	beq.n	21f8a <__ssprint_r+0x82>
   21f2c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   21f30:	eba0 0801 	sub.w	r8, r0, r1
   21f34:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   21f38:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   21f3c:	f108 0001 	add.w	r0, r8, #1
   21f40:	1076      	asrs	r6, r6, #1
   21f42:	4428      	add	r0, r5
   21f44:	42b0      	cmp	r0, r6
   21f46:	4632      	mov	r2, r6
   21f48:	bf84      	itt	hi
   21f4a:	4606      	movhi	r6, r0
   21f4c:	4632      	movhi	r2, r6
   21f4e:	055b      	lsls	r3, r3, #21
   21f50:	d537      	bpl.n	21fc2 <__ssprint_r+0xba>
   21f52:	4611      	mov	r1, r2
   21f54:	4648      	mov	r0, r9
   21f56:	f7f7 fc69 	bl	1982c <_malloc_r>
   21f5a:	9001      	str	r0, [sp, #4]
   21f5c:	2800      	cmp	r0, #0
   21f5e:	d03a      	beq.n	21fd6 <__ssprint_r+0xce>
   21f60:	4642      	mov	r2, r8
   21f62:	6921      	ldr	r1, [r4, #16]
   21f64:	f7f4 fb0e 	bl	16584 <memcpy>
   21f68:	89a2      	ldrh	r2, [r4, #12]
   21f6a:	9b01      	ldr	r3, [sp, #4]
   21f6c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   21f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   21f74:	81a2      	strh	r2, [r4, #12]
   21f76:	eba6 0208 	sub.w	r2, r6, r8
   21f7a:	eb03 0008 	add.w	r0, r3, r8
   21f7e:	6166      	str	r6, [r4, #20]
   21f80:	60a2      	str	r2, [r4, #8]
   21f82:	6123      	str	r3, [r4, #16]
   21f84:	6020      	str	r0, [r4, #0]
   21f86:	462e      	mov	r6, r5
   21f88:	46a8      	mov	r8, r5
   21f8a:	4642      	mov	r2, r8
   21f8c:	4659      	mov	r1, fp
   21f8e:	f7f9 fcd7 	bl	1b940 <memmove>
   21f92:	f8da 3008 	ldr.w	r3, [sl, #8]
   21f96:	68a2      	ldr	r2, [r4, #8]
   21f98:	6820      	ldr	r0, [r4, #0]
   21f9a:	1b92      	subs	r2, r2, r6
   21f9c:	4440      	add	r0, r8
   21f9e:	1b5b      	subs	r3, r3, r5
   21fa0:	60a2      	str	r2, [r4, #8]
   21fa2:	6020      	str	r0, [r4, #0]
   21fa4:	f8ca 3008 	str.w	r3, [sl, #8]
   21fa8:	b33b      	cbz	r3, 21ffa <__ssprint_r+0xf2>
   21faa:	3708      	adds	r7, #8
   21fac:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   21fb0:	2d00      	cmp	r5, #0
   21fb2:	d0fa      	beq.n	21faa <__ssprint_r+0xa2>
   21fb4:	42aa      	cmp	r2, r5
   21fb6:	4616      	mov	r6, r2
   21fb8:	4690      	mov	r8, r2
   21fba:	d9b3      	bls.n	21f24 <__ssprint_r+0x1c>
   21fbc:	462e      	mov	r6, r5
   21fbe:	46a8      	mov	r8, r5
   21fc0:	e7e3      	b.n	21f8a <__ssprint_r+0x82>
   21fc2:	4648      	mov	r0, r9
   21fc4:	f7f7 fee8 	bl	19d98 <_realloc_r>
   21fc8:	4603      	mov	r3, r0
   21fca:	2800      	cmp	r0, #0
   21fcc:	d1d3      	bne.n	21f76 <__ssprint_r+0x6e>
   21fce:	6921      	ldr	r1, [r4, #16]
   21fd0:	4648      	mov	r0, r9
   21fd2:	f7fb f9e7 	bl	1d3a4 <_free_r>
   21fd6:	89a3      	ldrh	r3, [r4, #12]
   21fd8:	220c      	movs	r2, #12
   21fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21fde:	f8c9 2000 	str.w	r2, [r9]
   21fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21fe6:	81a3      	strh	r3, [r4, #12]
   21fe8:	2200      	movs	r2, #0
   21fea:	2300      	movs	r3, #0
   21fec:	f8ca 2008 	str.w	r2, [sl, #8]
   21ff0:	f8ca 3004 	str.w	r3, [sl, #4]
   21ff4:	b003      	add	sp, #12
   21ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ffa:	2000      	movs	r0, #0
   21ffc:	2300      	movs	r3, #0
   21ffe:	f8ca 3004 	str.w	r3, [sl, #4]
   22002:	b003      	add	sp, #12
   22004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022008 <_svfiprintf_r>:
   22008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2200c:	ed2d 8b02 	vpush	{d8}
   22010:	b0c5      	sub	sp, #276	; 0x114
   22012:	460c      	mov	r4, r1
   22014:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   22018:	ee08 1a10 	vmov	s16, r1
   2201c:	4683      	mov	fp, r0
   2201e:	4616      	mov	r6, r2
   22020:	2100      	movs	r1, #0
   22022:	2208      	movs	r2, #8
   22024:	4650      	mov	r0, sl
   22026:	9308      	str	r3, [sp, #32]
   22028:	f7f9 fd06 	bl	1ba38 <memset>
   2202c:	89a3      	ldrh	r3, [r4, #12]
   2202e:	061f      	lsls	r7, r3, #24
   22030:	d503      	bpl.n	2203a <_svfiprintf_r+0x32>
   22032:	6923      	ldr	r3, [r4, #16]
   22034:	2b00      	cmp	r3, #0
   22036:	f000 855b 	beq.w	22af0 <_svfiprintf_r+0xae8>
   2203a:	2300      	movs	r3, #0
   2203c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   22040:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   22044:	aa1b      	add	r2, sp, #108	; 0x6c
   22046:	930c      	str	r3, [sp, #48]	; 0x30
   22048:	9218      	str	r2, [sp, #96]	; 0x60
   2204a:	4691      	mov	r9, r2
   2204c:	930b      	str	r3, [sp, #44]	; 0x2c
   2204e:	9304      	str	r3, [sp, #16]
   22050:	46b0      	mov	r8, r6
   22052:	4644      	mov	r4, r8
   22054:	4b97      	ldr	r3, [pc, #604]	; (222b4 <_svfiprintf_r+0x2ac>)
   22056:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   2205a:	f7fa fdab 	bl	1cbb4 <__locale_mb_cur_max>
   2205e:	4622      	mov	r2, r4
   22060:	4603      	mov	r3, r0
   22062:	a912      	add	r1, sp, #72	; 0x48
   22064:	f8cd a000 	str.w	sl, [sp]
   22068:	4658      	mov	r0, fp
   2206a:	47a8      	blx	r5
   2206c:	2800      	cmp	r0, #0
   2206e:	f000 8123 	beq.w	222b8 <_svfiprintf_r+0x2b0>
   22072:	f2c0 8116 	blt.w	222a2 <_svfiprintf_r+0x29a>
   22076:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22078:	2a25      	cmp	r2, #37	; 0x25
   2207a:	4603      	mov	r3, r0
   2207c:	d001      	beq.n	22082 <_svfiprintf_r+0x7a>
   2207e:	441c      	add	r4, r3
   22080:	e7e8      	b.n	22054 <_svfiprintf_r+0x4c>
   22082:	ebb4 0608 	subs.w	r6, r4, r8
   22086:	4605      	mov	r5, r0
   22088:	f040 811a 	bne.w	222c0 <_svfiprintf_r+0x2b8>
   2208c:	2300      	movs	r3, #0
   2208e:	7861      	ldrb	r1, [r4, #1]
   22090:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   22094:	f104 0801 	add.w	r8, r4, #1
   22098:	9306      	str	r3, [sp, #24]
   2209a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2209e:	461e      	mov	r6, r3
   220a0:	242b      	movs	r4, #43	; 0x2b
   220a2:	f108 0801 	add.w	r8, r8, #1
   220a6:	f1a1 0320 	sub.w	r3, r1, #32
   220aa:	2b5a      	cmp	r3, #90	; 0x5a
   220ac:	f200 813a 	bhi.w	22324 <_svfiprintf_r+0x31c>
   220b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   220b4:	0138028c 	.word	0x0138028c
   220b8:	02870138 	.word	0x02870138
   220bc:	01380138 	.word	0x01380138
   220c0:	006a0138 	.word	0x006a0138
   220c4:	01380138 	.word	0x01380138
   220c8:	0272027c 	.word	0x0272027c
   220cc:	00f20138 	.word	0x00f20138
   220d0:	01380259 	.word	0x01380259
   220d4:	005b0277 	.word	0x005b0277
   220d8:	005b005b 	.word	0x005b005b
   220dc:	005b005b 	.word	0x005b005b
   220e0:	005b005b 	.word	0x005b005b
   220e4:	005b005b 	.word	0x005b005b
   220e8:	01380138 	.word	0x01380138
   220ec:	01380138 	.word	0x01380138
   220f0:	01380138 	.word	0x01380138
   220f4:	01380138 	.word	0x01380138
   220f8:	02000138 	.word	0x02000138
   220fc:	01380084 	.word	0x01380084
   22100:	01380138 	.word	0x01380138
   22104:	01380138 	.word	0x01380138
   22108:	01380138 	.word	0x01380138
   2210c:	01380138 	.word	0x01380138
   22110:	00ae0138 	.word	0x00ae0138
   22114:	01380138 	.word	0x01380138
   22118:	01cb0138 	.word	0x01cb0138
   2211c:	02970138 	.word	0x02970138
   22120:	01380138 	.word	0x01380138
   22124:	013804ea 	.word	0x013804ea
   22128:	01380138 	.word	0x01380138
   2212c:	01380138 	.word	0x01380138
   22130:	01380138 	.word	0x01380138
   22134:	01380138 	.word	0x01380138
   22138:	02000138 	.word	0x02000138
   2213c:	01380086 	.word	0x01380086
   22140:	01380138 	.word	0x01380138
   22144:	008602ca 	.word	0x008602ca
   22148:	0138007f 	.word	0x0138007f
   2214c:	013802bd 	.word	0x013802bd
   22150:	00b002aa 	.word	0x00b002aa
   22154:	007f02d7 	.word	0x007f02d7
   22158:	01cb0138 	.word	0x01cb0138
   2215c:	04e8007c 	.word	0x04e8007c
   22160:	01380138 	.word	0x01380138
   22164:	013804c8 	.word	0x013804c8
   22168:	007c      	.short	0x007c
   2216a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2216e:	2200      	movs	r2, #0
   22170:	f818 1b01 	ldrb.w	r1, [r8], #1
   22174:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   22178:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   2217c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   22180:	2b09      	cmp	r3, #9
   22182:	d9f5      	bls.n	22170 <_svfiprintf_r+0x168>
   22184:	9206      	str	r2, [sp, #24]
   22186:	e78e      	b.n	220a6 <_svfiprintf_r+0x9e>
   22188:	4658      	mov	r0, fp
   2218a:	f7fe fea7 	bl	20edc <_localeconv_r>
   2218e:	6843      	ldr	r3, [r0, #4]
   22190:	930d      	str	r3, [sp, #52]	; 0x34
   22192:	4618      	mov	r0, r3
   22194:	f7fa fff4 	bl	1d180 <strlen>
   22198:	900e      	str	r0, [sp, #56]	; 0x38
   2219a:	4605      	mov	r5, r0
   2219c:	4658      	mov	r0, fp
   2219e:	f7fe fe9d 	bl	20edc <_localeconv_r>
   221a2:	6883      	ldr	r3, [r0, #8]
   221a4:	930b      	str	r3, [sp, #44]	; 0x2c
   221a6:	2d00      	cmp	r5, #0
   221a8:	f040 843d 	bne.w	22a26 <_svfiprintf_r+0xa1e>
   221ac:	f898 1000 	ldrb.w	r1, [r8]
   221b0:	e777      	b.n	220a2 <_svfiprintf_r+0x9a>
   221b2:	f898 1000 	ldrb.w	r1, [r8]
   221b6:	f046 0620 	orr.w	r6, r6, #32
   221ba:	e772      	b.n	220a2 <_svfiprintf_r+0x9a>
   221bc:	f046 0610 	orr.w	r6, r6, #16
   221c0:	06b4      	lsls	r4, r6, #26
   221c2:	f140 8137 	bpl.w	22434 <_svfiprintf_r+0x42c>
   221c6:	9b08      	ldr	r3, [sp, #32]
   221c8:	3307      	adds	r3, #7
   221ca:	f023 0307 	bic.w	r3, r3, #7
   221ce:	461a      	mov	r2, r3
   221d0:	6859      	ldr	r1, [r3, #4]
   221d2:	f852 3b08 	ldr.w	r3, [r2], #8
   221d6:	9208      	str	r2, [sp, #32]
   221d8:	460a      	mov	r2, r1
   221da:	2900      	cmp	r1, #0
   221dc:	f2c0 819e 	blt.w	2251c <_svfiprintf_r+0x514>
   221e0:	1c79      	adds	r1, r7, #1
   221e2:	f000 84b8 	beq.w	22b56 <_svfiprintf_r+0xb4e>
   221e6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   221ea:	ea53 0102 	orrs.w	r1, r3, r2
   221ee:	9603      	str	r6, [sp, #12]
   221f0:	f000 8385 	beq.w	228fe <_svfiprintf_r+0x8f6>
   221f4:	2b0a      	cmp	r3, #10
   221f6:	f172 0100 	sbcs.w	r1, r2, #0
   221fa:	f080 83a6 	bcs.w	2294a <_svfiprintf_r+0x942>
   221fe:	3330      	adds	r3, #48	; 0x30
   22200:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   22204:	2301      	movs	r3, #1
   22206:	9e03      	ldr	r6, [sp, #12]
   22208:	9305      	str	r3, [sp, #20]
   2220a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   2220e:	e030      	b.n	22272 <_svfiprintf_r+0x26a>
   22210:	f046 0610 	orr.w	r6, r6, #16
   22214:	f016 0220 	ands.w	r2, r6, #32
   22218:	f000 80ff 	beq.w	2241a <_svfiprintf_r+0x412>
   2221c:	9b08      	ldr	r3, [sp, #32]
   2221e:	3307      	adds	r3, #7
   22220:	f023 0307 	bic.w	r3, r3, #7
   22224:	4619      	mov	r1, r3
   22226:	685a      	ldr	r2, [r3, #4]
   22228:	f851 3b08 	ldr.w	r3, [r1], #8
   2222c:	9108      	str	r1, [sp, #32]
   2222e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   22232:	9103      	str	r1, [sp, #12]
   22234:	2100      	movs	r1, #0
   22236:	2000      	movs	r0, #0
   22238:	1c7e      	adds	r6, r7, #1
   2223a:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   2223e:	f000 8179 	beq.w	22534 <_svfiprintf_r+0x52c>
   22242:	9803      	ldr	r0, [sp, #12]
   22244:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   22248:	ea53 0002 	orrs.w	r0, r3, r2
   2224c:	f040 82c6 	bne.w	227dc <_svfiprintf_r+0x7d4>
   22250:	2f00      	cmp	r7, #0
   22252:	f040 8483 	bne.w	22b5c <_svfiprintf_r+0xb54>
   22256:	2900      	cmp	r1, #0
   22258:	f040 8354 	bne.w	22904 <_svfiprintf_r+0x8fc>
   2225c:	9b03      	ldr	r3, [sp, #12]
   2225e:	f013 0301 	ands.w	r3, r3, #1
   22262:	9305      	str	r3, [sp, #20]
   22264:	f000 83cd 	beq.w	22a02 <_svfiprintf_r+0x9fa>
   22268:	2330      	movs	r3, #48	; 0x30
   2226a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   2226e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   22272:	9b05      	ldr	r3, [sp, #20]
   22274:	42bb      	cmp	r3, r7
   22276:	bfb8      	it	lt
   22278:	463b      	movlt	r3, r7
   2227a:	9303      	str	r3, [sp, #12]
   2227c:	2300      	movs	r3, #0
   2227e:	9307      	str	r3, [sp, #28]
   22280:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   22284:	2b00      	cmp	r3, #0
   22286:	d05b      	beq.n	22340 <_svfiprintf_r+0x338>
   22288:	9b03      	ldr	r3, [sp, #12]
   2228a:	3301      	adds	r3, #1
   2228c:	9303      	str	r3, [sp, #12]
   2228e:	e057      	b.n	22340 <_svfiprintf_r+0x338>
   22290:	9a06      	ldr	r2, [sp, #24]
   22292:	9308      	str	r3, [sp, #32]
   22294:	4252      	negs	r2, r2
   22296:	9206      	str	r2, [sp, #24]
   22298:	f898 1000 	ldrb.w	r1, [r8]
   2229c:	f046 0604 	orr.w	r6, r6, #4
   222a0:	e6ff      	b.n	220a2 <_svfiprintf_r+0x9a>
   222a2:	2208      	movs	r2, #8
   222a4:	2100      	movs	r1, #0
   222a6:	4650      	mov	r0, sl
   222a8:	f7f9 fbc6 	bl	1ba38 <memset>
   222ac:	2301      	movs	r3, #1
   222ae:	441c      	add	r4, r3
   222b0:	e6d0      	b.n	22054 <_svfiprintf_r+0x4c>
   222b2:	bf00      	nop
   222b4:	20009328 	.word	0x20009328
   222b8:	ebb4 0608 	subs.w	r6, r4, r8
   222bc:	4605      	mov	r5, r0
   222be:	d011      	beq.n	222e4 <_svfiprintf_r+0x2dc>
   222c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   222c2:	4433      	add	r3, r6
   222c4:	931a      	str	r3, [sp, #104]	; 0x68
   222c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   222c8:	3301      	adds	r3, #1
   222ca:	2b07      	cmp	r3, #7
   222cc:	e9c9 8600 	strd	r8, r6, [r9]
   222d0:	9319      	str	r3, [sp, #100]	; 0x64
   222d2:	dc1c      	bgt.n	2230e <_svfiprintf_r+0x306>
   222d4:	f109 0908 	add.w	r9, r9, #8
   222d8:	9b04      	ldr	r3, [sp, #16]
   222da:	4433      	add	r3, r6
   222dc:	9304      	str	r3, [sp, #16]
   222de:	2d00      	cmp	r5, #0
   222e0:	f47f aed4 	bne.w	2208c <_svfiprintf_r+0x84>
   222e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   222e6:	2b00      	cmp	r3, #0
   222e8:	f040 84cb 	bne.w	22c82 <_svfiprintf_r+0xc7a>
   222ec:	ee18 3a10 	vmov	r3, s16
   222f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   222f4:	f013 0f40 	tst.w	r3, #64	; 0x40
   222f8:	9b04      	ldr	r3, [sp, #16]
   222fa:	bf18      	it	ne
   222fc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   22300:	9304      	str	r3, [sp, #16]
   22302:	9804      	ldr	r0, [sp, #16]
   22304:	b045      	add	sp, #276	; 0x114
   22306:	ecbd 8b02 	vpop	{d8}
   2230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2230e:	ee18 1a10 	vmov	r1, s16
   22312:	aa18      	add	r2, sp, #96	; 0x60
   22314:	4658      	mov	r0, fp
   22316:	f7ff fdf7 	bl	21f08 <__ssprint_r>
   2231a:	2800      	cmp	r0, #0
   2231c:	d1e6      	bne.n	222ec <_svfiprintf_r+0x2e4>
   2231e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22322:	e7d9      	b.n	222d8 <_svfiprintf_r+0x2d0>
   22324:	2900      	cmp	r1, #0
   22326:	d0dd      	beq.n	222e4 <_svfiprintf_r+0x2dc>
   22328:	2300      	movs	r3, #0
   2232a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2232e:	2301      	movs	r3, #1
   22330:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   22334:	9303      	str	r3, [sp, #12]
   22336:	9305      	str	r3, [sp, #20]
   22338:	ac2b      	add	r4, sp, #172	; 0xac
   2233a:	2300      	movs	r3, #0
   2233c:	9307      	str	r3, [sp, #28]
   2233e:	461f      	mov	r7, r3
   22340:	f016 0302 	ands.w	r3, r6, #2
   22344:	9309      	str	r3, [sp, #36]	; 0x24
   22346:	d002      	beq.n	2234e <_svfiprintf_r+0x346>
   22348:	9b03      	ldr	r3, [sp, #12]
   2234a:	3302      	adds	r3, #2
   2234c:	9303      	str	r3, [sp, #12]
   2234e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   22352:	930a      	str	r3, [sp, #40]	; 0x28
   22354:	d105      	bne.n	22362 <_svfiprintf_r+0x35a>
   22356:	9b06      	ldr	r3, [sp, #24]
   22358:	9a03      	ldr	r2, [sp, #12]
   2235a:	1a9d      	subs	r5, r3, r2
   2235c:	2d00      	cmp	r5, #0
   2235e:	f300 823f 	bgt.w	227e0 <_svfiprintf_r+0x7d8>
   22362:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22366:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   2236a:	b178      	cbz	r0, 2238c <_svfiprintf_r+0x384>
   2236c:	3201      	adds	r2, #1
   2236e:	3101      	adds	r1, #1
   22370:	2301      	movs	r3, #1
   22372:	f10d 0043 	add.w	r0, sp, #67	; 0x43
   22376:	2a07      	cmp	r2, #7
   22378:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   2237c:	f8c9 3004 	str.w	r3, [r9, #4]
   22380:	f8c9 0000 	str.w	r0, [r9]
   22384:	f300 8265 	bgt.w	22852 <_svfiprintf_r+0x84a>
   22388:	f109 0908 	add.w	r9, r9, #8
   2238c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2238e:	b17b      	cbz	r3, 223b0 <_svfiprintf_r+0x3a8>
   22390:	3201      	adds	r2, #1
   22392:	ab11      	add	r3, sp, #68	; 0x44
   22394:	3102      	adds	r1, #2
   22396:	f8c9 3000 	str.w	r3, [r9]
   2239a:	2a07      	cmp	r2, #7
   2239c:	f04f 0302 	mov.w	r3, #2
   223a0:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   223a4:	f8c9 3004 	str.w	r3, [r9, #4]
   223a8:	f300 8260 	bgt.w	2286c <_svfiprintf_r+0x864>
   223ac:	f109 0908 	add.w	r9, r9, #8
   223b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   223b2:	2b80      	cmp	r3, #128	; 0x80
   223b4:	f000 8183 	beq.w	226be <_svfiprintf_r+0x6b6>
   223b8:	9b05      	ldr	r3, [sp, #20]
   223ba:	1afd      	subs	r5, r7, r3
   223bc:	2d00      	cmp	r5, #0
   223be:	f300 81bf 	bgt.w	22740 <_svfiprintf_r+0x738>
   223c2:	9b05      	ldr	r3, [sp, #20]
   223c4:	f8c9 4000 	str.w	r4, [r9]
   223c8:	3201      	adds	r2, #1
   223ca:	4419      	add	r1, r3
   223cc:	2a07      	cmp	r2, #7
   223ce:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   223d2:	f8c9 3004 	str.w	r3, [r9, #4]
   223d6:	f300 81e4 	bgt.w	227a2 <_svfiprintf_r+0x79a>
   223da:	f109 0908 	add.w	r9, r9, #8
   223de:	0770      	lsls	r0, r6, #29
   223e0:	d505      	bpl.n	223ee <_svfiprintf_r+0x3e6>
   223e2:	9b06      	ldr	r3, [sp, #24]
   223e4:	9a03      	ldr	r2, [sp, #12]
   223e6:	1a9c      	subs	r4, r3, r2
   223e8:	2c00      	cmp	r4, #0
   223ea:	f300 824c 	bgt.w	22886 <_svfiprintf_r+0x87e>
   223ee:	9b04      	ldr	r3, [sp, #16]
   223f0:	9a06      	ldr	r2, [sp, #24]
   223f2:	9803      	ldr	r0, [sp, #12]
   223f4:	4282      	cmp	r2, r0
   223f6:	bfac      	ite	ge
   223f8:	189b      	addge	r3, r3, r2
   223fa:	181b      	addlt	r3, r3, r0
   223fc:	9304      	str	r3, [sp, #16]
   223fe:	2900      	cmp	r1, #0
   22400:	f040 81da 	bne.w	227b8 <_svfiprintf_r+0x7b0>
   22404:	2300      	movs	r3, #0
   22406:	9319      	str	r3, [sp, #100]	; 0x64
   22408:	9b07      	ldr	r3, [sp, #28]
   2240a:	b11b      	cbz	r3, 22414 <_svfiprintf_r+0x40c>
   2240c:	9907      	ldr	r1, [sp, #28]
   2240e:	4658      	mov	r0, fp
   22410:	f7fa ffc8 	bl	1d3a4 <_free_r>
   22414:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22418:	e61b      	b.n	22052 <_svfiprintf_r+0x4a>
   2241a:	f016 0310 	ands.w	r3, r6, #16
   2241e:	9908      	ldr	r1, [sp, #32]
   22420:	d16d      	bne.n	224fe <_svfiprintf_r+0x4f6>
   22422:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   22426:	d066      	beq.n	224f6 <_svfiprintf_r+0x4ee>
   22428:	461a      	mov	r2, r3
   2242a:	f851 3b04 	ldr.w	r3, [r1], #4
   2242e:	9108      	str	r1, [sp, #32]
   22430:	b29b      	uxth	r3, r3
   22432:	e6fc      	b.n	2222e <_svfiprintf_r+0x226>
   22434:	06f0      	lsls	r0, r6, #27
   22436:	9a08      	ldr	r2, [sp, #32]
   22438:	d468      	bmi.n	2250c <_svfiprintf_r+0x504>
   2243a:	0671      	lsls	r1, r6, #25
   2243c:	d563      	bpl.n	22506 <_svfiprintf_r+0x4fe>
   2243e:	f932 3b04 	ldrsh.w	r3, [r2], #4
   22442:	9208      	str	r2, [sp, #32]
   22444:	17da      	asrs	r2, r3, #31
   22446:	4611      	mov	r1, r2
   22448:	e6c7      	b.n	221da <_svfiprintf_r+0x1d2>
   2244a:	9b08      	ldr	r3, [sp, #32]
   2244c:	461a      	mov	r2, r3
   2244e:	2300      	movs	r3, #0
   22450:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   22454:	4613      	mov	r3, r2
   22456:	f853 4b04 	ldr.w	r4, [r3], #4
   2245a:	9303      	str	r3, [sp, #12]
   2245c:	2c00      	cmp	r4, #0
   2245e:	f000 8399 	beq.w	22b94 <_svfiprintf_r+0xb8c>
   22462:	2953      	cmp	r1, #83	; 0x53
   22464:	d003      	beq.n	2246e <_svfiprintf_r+0x466>
   22466:	f016 0510 	ands.w	r5, r6, #16
   2246a:	f000 832a 	beq.w	22ac2 <_svfiprintf_r+0xaba>
   2246e:	2100      	movs	r1, #0
   22470:	2208      	movs	r2, #8
   22472:	a816      	add	r0, sp, #88	; 0x58
   22474:	9413      	str	r4, [sp, #76]	; 0x4c
   22476:	f7f9 fadf 	bl	1ba38 <memset>
   2247a:	1c79      	adds	r1, r7, #1
   2247c:	f000 83a5 	beq.w	22bca <_svfiprintf_r+0xbc2>
   22480:	2500      	movs	r5, #0
   22482:	9407      	str	r4, [sp, #28]
   22484:	462c      	mov	r4, r5
   22486:	e00c      	b.n	224a2 <_svfiprintf_r+0x49a>
   22488:	a92b      	add	r1, sp, #172	; 0xac
   2248a:	4658      	mov	r0, fp
   2248c:	f7ff fcaa 	bl	21de4 <_wcrtomb_r>
   22490:	1c42      	adds	r2, r0, #1
   22492:	4420      	add	r0, r4
   22494:	f000 841d 	beq.w	22cd2 <_svfiprintf_r+0xcca>
   22498:	42b8      	cmp	r0, r7
   2249a:	dc08      	bgt.n	224ae <_svfiprintf_r+0x4a6>
   2249c:	f000 8422 	beq.w	22ce4 <_svfiprintf_r+0xcdc>
   224a0:	4604      	mov	r4, r0
   224a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   224a4:	5952      	ldr	r2, [r2, r5]
   224a6:	ab16      	add	r3, sp, #88	; 0x58
   224a8:	3504      	adds	r5, #4
   224aa:	2a00      	cmp	r2, #0
   224ac:	d1ec      	bne.n	22488 <_svfiprintf_r+0x480>
   224ae:	9405      	str	r4, [sp, #20]
   224b0:	9c07      	ldr	r4, [sp, #28]
   224b2:	e397      	b.n	22be4 <_svfiprintf_r+0xbdc>
   224b4:	2943      	cmp	r1, #67	; 0x43
   224b6:	d002      	beq.n	224be <_svfiprintf_r+0x4b6>
   224b8:	06f5      	lsls	r5, r6, #27
   224ba:	f140 82f7 	bpl.w	22aac <_svfiprintf_r+0xaa4>
   224be:	9d08      	ldr	r5, [sp, #32]
   224c0:	2208      	movs	r2, #8
   224c2:	2100      	movs	r1, #0
   224c4:	a816      	add	r0, sp, #88	; 0x58
   224c6:	ac2b      	add	r4, sp, #172	; 0xac
   224c8:	f7f9 fab6 	bl	1ba38 <memset>
   224cc:	ab16      	add	r3, sp, #88	; 0x58
   224ce:	f855 2b04 	ldr.w	r2, [r5], #4
   224d2:	4621      	mov	r1, r4
   224d4:	4658      	mov	r0, fp
   224d6:	f7ff fc85 	bl	21de4 <_wcrtomb_r>
   224da:	4603      	mov	r3, r0
   224dc:	3301      	adds	r3, #1
   224de:	9005      	str	r0, [sp, #20]
   224e0:	f000 83f7 	beq.w	22cd2 <_svfiprintf_r+0xcca>
   224e4:	9b05      	ldr	r3, [sp, #20]
   224e6:	9508      	str	r5, [sp, #32]
   224e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   224ec:	9303      	str	r3, [sp, #12]
   224ee:	2300      	movs	r3, #0
   224f0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   224f4:	e721      	b.n	2233a <_svfiprintf_r+0x332>
   224f6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   224fa:	f040 83ad 	bne.w	22c58 <_svfiprintf_r+0xc50>
   224fe:	f851 3b04 	ldr.w	r3, [r1], #4
   22502:	9108      	str	r1, [sp, #32]
   22504:	e693      	b.n	2222e <_svfiprintf_r+0x226>
   22506:	05b3      	lsls	r3, r6, #22
   22508:	f100 8396 	bmi.w	22c38 <_svfiprintf_r+0xc30>
   2250c:	f852 3b04 	ldr.w	r3, [r2], #4
   22510:	9208      	str	r2, [sp, #32]
   22512:	17da      	asrs	r2, r3, #31
   22514:	4611      	mov	r1, r2
   22516:	2900      	cmp	r1, #0
   22518:	f6bf ae62 	bge.w	221e0 <_svfiprintf_r+0x1d8>
   2251c:	425b      	negs	r3, r3
   2251e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   22522:	9603      	str	r6, [sp, #12]
   22524:	202d      	movs	r0, #45	; 0x2d
   22526:	1c7e      	adds	r6, r7, #1
   22528:	f04f 0101 	mov.w	r1, #1
   2252c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   22530:	f47f ae87 	bne.w	22242 <_svfiprintf_r+0x23a>
   22534:	2901      	cmp	r1, #1
   22536:	f43f ae5d 	beq.w	221f4 <_svfiprintf_r+0x1ec>
   2253a:	2902      	cmp	r1, #2
   2253c:	ac44      	add	r4, sp, #272	; 0x110
   2253e:	f040 80a0 	bne.w	22682 <_svfiprintf_r+0x67a>
   22542:	980c      	ldr	r0, [sp, #48]	; 0x30
   22544:	f003 010f 	and.w	r1, r3, #15
   22548:	091b      	lsrs	r3, r3, #4
   2254a:	5c41      	ldrb	r1, [r0, r1]
   2254c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   22550:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   22554:	0912      	lsrs	r2, r2, #4
   22556:	ea53 0102 	orrs.w	r1, r3, r2
   2255a:	d1f3      	bne.n	22544 <_svfiprintf_r+0x53c>
   2255c:	9e03      	ldr	r6, [sp, #12]
   2255e:	ab44      	add	r3, sp, #272	; 0x110
   22560:	1b1b      	subs	r3, r3, r4
   22562:	9305      	str	r3, [sp, #20]
   22564:	e685      	b.n	22272 <_svfiprintf_r+0x26a>
   22566:	4642      	mov	r2, r8
   22568:	f812 1b01 	ldrb.w	r1, [r2], #1
   2256c:	292a      	cmp	r1, #42	; 0x2a
   2256e:	f000 83bc 	beq.w	22cea <_svfiprintf_r+0xce2>
   22572:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   22576:	2b09      	cmp	r3, #9
   22578:	4690      	mov	r8, r2
   2257a:	f04f 0700 	mov.w	r7, #0
   2257e:	f63f ad92 	bhi.w	220a6 <_svfiprintf_r+0x9e>
   22582:	f818 1b01 	ldrb.w	r1, [r8], #1
   22586:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   2258a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   2258e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   22592:	2b09      	cmp	r3, #9
   22594:	d9f5      	bls.n	22582 <_svfiprintf_r+0x57a>
   22596:	e586      	b.n	220a6 <_svfiprintf_r+0x9e>
   22598:	f898 1000 	ldrb.w	r1, [r8]
   2259c:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   225a0:	e57f      	b.n	220a2 <_svfiprintf_r+0x9a>
   225a2:	f898 1000 	ldrb.w	r1, [r8]
   225a6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   225aa:	e57a      	b.n	220a2 <_svfiprintf_r+0x9a>
   225ac:	9b08      	ldr	r3, [sp, #32]
   225ae:	f853 2b04 	ldr.w	r2, [r3], #4
   225b2:	9206      	str	r2, [sp, #24]
   225b4:	2a00      	cmp	r2, #0
   225b6:	f6ff ae6b 	blt.w	22290 <_svfiprintf_r+0x288>
   225ba:	f898 1000 	ldrb.w	r1, [r8]
   225be:	9308      	str	r3, [sp, #32]
   225c0:	e56f      	b.n	220a2 <_svfiprintf_r+0x9a>
   225c2:	f898 1000 	ldrb.w	r1, [r8]
   225c6:	f046 0601 	orr.w	r6, r6, #1
   225ca:	e56a      	b.n	220a2 <_svfiprintf_r+0x9a>
   225cc:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   225d0:	2b00      	cmp	r3, #0
   225d2:	f47f adeb 	bne.w	221ac <_svfiprintf_r+0x1a4>
   225d6:	2320      	movs	r3, #32
   225d8:	f898 1000 	ldrb.w	r1, [r8]
   225dc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   225e0:	e55f      	b.n	220a2 <_svfiprintf_r+0x9a>
   225e2:	f046 0310 	orr.w	r3, r6, #16
   225e6:	9303      	str	r3, [sp, #12]
   225e8:	9b03      	ldr	r3, [sp, #12]
   225ea:	f013 0220 	ands.w	r2, r3, #32
   225ee:	f000 818d 	beq.w	2290c <_svfiprintf_r+0x904>
   225f2:	9b08      	ldr	r3, [sp, #32]
   225f4:	3307      	adds	r3, #7
   225f6:	f023 0307 	bic.w	r3, r3, #7
   225fa:	4619      	mov	r1, r3
   225fc:	685a      	ldr	r2, [r3, #4]
   225fe:	f851 3b08 	ldr.w	r3, [r1], #8
   22602:	9108      	str	r1, [sp, #32]
   22604:	2101      	movs	r1, #1
   22606:	e616      	b.n	22236 <_svfiprintf_r+0x22e>
   22608:	06b7      	lsls	r7, r6, #26
   2260a:	f100 8202 	bmi.w	22a12 <_svfiprintf_r+0xa0a>
   2260e:	06f5      	lsls	r5, r6, #27
   22610:	f100 82b8 	bmi.w	22b84 <_svfiprintf_r+0xb7c>
   22614:	0674      	lsls	r4, r6, #25
   22616:	f100 832c 	bmi.w	22c72 <_svfiprintf_r+0xc6a>
   2261a:	05b0      	lsls	r0, r6, #22
   2261c:	f140 82b2 	bpl.w	22b84 <_svfiprintf_r+0xb7c>
   22620:	9b08      	ldr	r3, [sp, #32]
   22622:	9904      	ldr	r1, [sp, #16]
   22624:	f853 2b04 	ldr.w	r2, [r3], #4
   22628:	9308      	str	r3, [sp, #32]
   2262a:	7011      	strb	r1, [r2, #0]
   2262c:	e511      	b.n	22052 <_svfiprintf_r+0x4a>
   2262e:	f898 1000 	ldrb.w	r1, [r8]
   22632:	296c      	cmp	r1, #108	; 0x6c
   22634:	bf03      	ittte	eq
   22636:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   2263a:	f046 0620 	orreq.w	r6, r6, #32
   2263e:	f108 0801 	addeq.w	r8, r8, #1
   22642:	f046 0610 	orrne.w	r6, r6, #16
   22646:	e52c      	b.n	220a2 <_svfiprintf_r+0x9a>
   22648:	f898 1000 	ldrb.w	r1, [r8]
   2264c:	2968      	cmp	r1, #104	; 0x68
   2264e:	bf03      	ittte	eq
   22650:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   22654:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   22658:	f108 0801 	addeq.w	r8, r8, #1
   2265c:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   22660:	e51f      	b.n	220a2 <_svfiprintf_r+0x9a>
   22662:	9a08      	ldr	r2, [sp, #32]
   22664:	f046 0302 	orr.w	r3, r6, #2
   22668:	9303      	str	r3, [sp, #12]
   2266a:	f852 3b04 	ldr.w	r3, [r2], #4
   2266e:	9208      	str	r2, [sp, #32]
   22670:	f647 0230 	movw	r2, #30768	; 0x7830
   22674:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   22678:	4aba      	ldr	r2, [pc, #744]	; (22964 <_svfiprintf_r+0x95c>)
   2267a:	920c      	str	r2, [sp, #48]	; 0x30
   2267c:	2102      	movs	r1, #2
   2267e:	2200      	movs	r2, #0
   22680:	e5d9      	b.n	22236 <_svfiprintf_r+0x22e>
   22682:	f003 0107 	and.w	r1, r3, #7
   22686:	08db      	lsrs	r3, r3, #3
   22688:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   2268c:	08d2      	lsrs	r2, r2, #3
   2268e:	3130      	adds	r1, #48	; 0x30
   22690:	ea53 0502 	orrs.w	r5, r3, r2
   22694:	4620      	mov	r0, r4
   22696:	f804 1d01 	strb.w	r1, [r4, #-1]!
   2269a:	d1f2      	bne.n	22682 <_svfiprintf_r+0x67a>
   2269c:	9e03      	ldr	r6, [sp, #12]
   2269e:	07f5      	lsls	r5, r6, #31
   226a0:	f57f af5d 	bpl.w	2255e <_svfiprintf_r+0x556>
   226a4:	2930      	cmp	r1, #48	; 0x30
   226a6:	f43f af59 	beq.w	2255c <_svfiprintf_r+0x554>
   226aa:	2330      	movs	r3, #48	; 0x30
   226ac:	3802      	subs	r0, #2
   226ae:	f804 3c01 	strb.w	r3, [r4, #-1]
   226b2:	ab44      	add	r3, sp, #272	; 0x110
   226b4:	1a1b      	subs	r3, r3, r0
   226b6:	9e03      	ldr	r6, [sp, #12]
   226b8:	9305      	str	r3, [sp, #20]
   226ba:	4604      	mov	r4, r0
   226bc:	e5d9      	b.n	22272 <_svfiprintf_r+0x26a>
   226be:	9b06      	ldr	r3, [sp, #24]
   226c0:	9803      	ldr	r0, [sp, #12]
   226c2:	1a1d      	subs	r5, r3, r0
   226c4:	2d00      	cmp	r5, #0
   226c6:	f77f ae77 	ble.w	223b8 <_svfiprintf_r+0x3b0>
   226ca:	2d10      	cmp	r5, #16
   226cc:	dd25      	ble.n	2271a <_svfiprintf_r+0x712>
   226ce:	9409      	str	r4, [sp, #36]	; 0x24
   226d0:	2310      	movs	r3, #16
   226d2:	ee18 4a10 	vmov	r4, s16
   226d6:	4608      	mov	r0, r1
   226d8:	e004      	b.n	226e4 <_svfiprintf_r+0x6dc>
   226da:	3d10      	subs	r5, #16
   226dc:	2d10      	cmp	r5, #16
   226de:	f109 0908 	add.w	r9, r9, #8
   226e2:	dd18      	ble.n	22716 <_svfiprintf_r+0x70e>
   226e4:	3201      	adds	r2, #1
   226e6:	49a0      	ldr	r1, [pc, #640]	; (22968 <_svfiprintf_r+0x960>)
   226e8:	3010      	adds	r0, #16
   226ea:	2a07      	cmp	r2, #7
   226ec:	e9c9 1300 	strd	r1, r3, [r9]
   226f0:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   226f4:	ddf1      	ble.n	226da <_svfiprintf_r+0x6d2>
   226f6:	aa18      	add	r2, sp, #96	; 0x60
   226f8:	4621      	mov	r1, r4
   226fa:	4658      	mov	r0, fp
   226fc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22700:	f7ff fc02 	bl	21f08 <__ssprint_r>
   22704:	2800      	cmp	r0, #0
   22706:	d160      	bne.n	227ca <_svfiprintf_r+0x7c2>
   22708:	3d10      	subs	r5, #16
   2270a:	2d10      	cmp	r5, #16
   2270c:	e9dd 2019 	ldrd	r2, r0, [sp, #100]	; 0x64
   22710:	f04f 0310 	mov.w	r3, #16
   22714:	dce6      	bgt.n	226e4 <_svfiprintf_r+0x6dc>
   22716:	9c09      	ldr	r4, [sp, #36]	; 0x24
   22718:	4601      	mov	r1, r0
   2271a:	3201      	adds	r2, #1
   2271c:	4b92      	ldr	r3, [pc, #584]	; (22968 <_svfiprintf_r+0x960>)
   2271e:	f8c9 5004 	str.w	r5, [r9, #4]
   22722:	4429      	add	r1, r5
   22724:	2a07      	cmp	r2, #7
   22726:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   2272a:	f8c9 3000 	str.w	r3, [r9]
   2272e:	f300 821b 	bgt.w	22b68 <_svfiprintf_r+0xb60>
   22732:	9b05      	ldr	r3, [sp, #20]
   22734:	1afd      	subs	r5, r7, r3
   22736:	2d00      	cmp	r5, #0
   22738:	f109 0908 	add.w	r9, r9, #8
   2273c:	f77f ae41 	ble.w	223c2 <_svfiprintf_r+0x3ba>
   22740:	2d10      	cmp	r5, #16
   22742:	dd1f      	ble.n	22784 <_svfiprintf_r+0x77c>
   22744:	464b      	mov	r3, r9
   22746:	2710      	movs	r7, #16
   22748:	ee18 9a10 	vmov	r9, s16
   2274c:	e004      	b.n	22758 <_svfiprintf_r+0x750>
   2274e:	3d10      	subs	r5, #16
   22750:	2d10      	cmp	r5, #16
   22752:	f103 0308 	add.w	r3, r3, #8
   22756:	dd14      	ble.n	22782 <_svfiprintf_r+0x77a>
   22758:	3201      	adds	r2, #1
   2275a:	4883      	ldr	r0, [pc, #524]	; (22968 <_svfiprintf_r+0x960>)
   2275c:	3110      	adds	r1, #16
   2275e:	2a07      	cmp	r2, #7
   22760:	e9c3 0700 	strd	r0, r7, [r3]
   22764:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   22768:	ddf1      	ble.n	2274e <_svfiprintf_r+0x746>
   2276a:	aa18      	add	r2, sp, #96	; 0x60
   2276c:	4649      	mov	r1, r9
   2276e:	4658      	mov	r0, fp
   22770:	f7ff fbca 	bl	21f08 <__ssprint_r>
   22774:	bb48      	cbnz	r0, 227ca <_svfiprintf_r+0x7c2>
   22776:	3d10      	subs	r5, #16
   22778:	2d10      	cmp	r5, #16
   2277a:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   2277e:	ab1b      	add	r3, sp, #108	; 0x6c
   22780:	dcea      	bgt.n	22758 <_svfiprintf_r+0x750>
   22782:	4699      	mov	r9, r3
   22784:	3201      	adds	r2, #1
   22786:	4b78      	ldr	r3, [pc, #480]	; (22968 <_svfiprintf_r+0x960>)
   22788:	f8c9 5004 	str.w	r5, [r9, #4]
   2278c:	4429      	add	r1, r5
   2278e:	2a07      	cmp	r2, #7
   22790:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   22794:	f8c9 3000 	str.w	r3, [r9]
   22798:	f300 80c9 	bgt.w	2292e <_svfiprintf_r+0x926>
   2279c:	f109 0908 	add.w	r9, r9, #8
   227a0:	e60f      	b.n	223c2 <_svfiprintf_r+0x3ba>
   227a2:	ee18 1a10 	vmov	r1, s16
   227a6:	aa18      	add	r2, sp, #96	; 0x60
   227a8:	4658      	mov	r0, fp
   227aa:	f7ff fbad 	bl	21f08 <__ssprint_r>
   227ae:	b960      	cbnz	r0, 227ca <_svfiprintf_r+0x7c2>
   227b0:	991a      	ldr	r1, [sp, #104]	; 0x68
   227b2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   227b6:	e612      	b.n	223de <_svfiprintf_r+0x3d6>
   227b8:	ee18 1a10 	vmov	r1, s16
   227bc:	aa18      	add	r2, sp, #96	; 0x60
   227be:	4658      	mov	r0, fp
   227c0:	f7ff fba2 	bl	21f08 <__ssprint_r>
   227c4:	2800      	cmp	r0, #0
   227c6:	f43f ae1d 	beq.w	22404 <_svfiprintf_r+0x3fc>
   227ca:	9b07      	ldr	r3, [sp, #28]
   227cc:	2b00      	cmp	r3, #0
   227ce:	f43f ad8d 	beq.w	222ec <_svfiprintf_r+0x2e4>
   227d2:	9907      	ldr	r1, [sp, #28]
   227d4:	4658      	mov	r0, fp
   227d6:	f7fa fde5 	bl	1d3a4 <_free_r>
   227da:	e587      	b.n	222ec <_svfiprintf_r+0x2e4>
   227dc:	9603      	str	r6, [sp, #12]
   227de:	e6a9      	b.n	22534 <_svfiprintf_r+0x52c>
   227e0:	2d10      	cmp	r5, #16
   227e2:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   227e6:	dd25      	ble.n	22834 <_svfiprintf_r+0x82c>
   227e8:	940f      	str	r4, [sp, #60]	; 0x3c
   227ea:	2310      	movs	r3, #16
   227ec:	ee18 4a10 	vmov	r4, s16
   227f0:	4608      	mov	r0, r1
   227f2:	e004      	b.n	227fe <_svfiprintf_r+0x7f6>
   227f4:	3d10      	subs	r5, #16
   227f6:	2d10      	cmp	r5, #16
   227f8:	f109 0908 	add.w	r9, r9, #8
   227fc:	dd18      	ble.n	22830 <_svfiprintf_r+0x828>
   227fe:	3201      	adds	r2, #1
   22800:	495a      	ldr	r1, [pc, #360]	; (2296c <_svfiprintf_r+0x964>)
   22802:	3010      	adds	r0, #16
   22804:	2a07      	cmp	r2, #7
   22806:	e9c9 1300 	strd	r1, r3, [r9]
   2280a:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   2280e:	ddf1      	ble.n	227f4 <_svfiprintf_r+0x7ec>
   22810:	aa18      	add	r2, sp, #96	; 0x60
   22812:	4621      	mov	r1, r4
   22814:	4658      	mov	r0, fp
   22816:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2281a:	f7ff fb75 	bl	21f08 <__ssprint_r>
   2281e:	2800      	cmp	r0, #0
   22820:	d1d3      	bne.n	227ca <_svfiprintf_r+0x7c2>
   22822:	3d10      	subs	r5, #16
   22824:	2d10      	cmp	r5, #16
   22826:	e9dd 2019 	ldrd	r2, r0, [sp, #100]	; 0x64
   2282a:	f04f 0310 	mov.w	r3, #16
   2282e:	dce6      	bgt.n	227fe <_svfiprintf_r+0x7f6>
   22830:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   22832:	4601      	mov	r1, r0
   22834:	3201      	adds	r2, #1
   22836:	4b4d      	ldr	r3, [pc, #308]	; (2296c <_svfiprintf_r+0x964>)
   22838:	f8c9 5004 	str.w	r5, [r9, #4]
   2283c:	4429      	add	r1, r5
   2283e:	2a07      	cmp	r2, #7
   22840:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   22844:	f8c9 3000 	str.w	r3, [r9]
   22848:	f300 8177 	bgt.w	22b3a <_svfiprintf_r+0xb32>
   2284c:	f109 0908 	add.w	r9, r9, #8
   22850:	e589      	b.n	22366 <_svfiprintf_r+0x35e>
   22852:	ee18 1a10 	vmov	r1, s16
   22856:	aa18      	add	r2, sp, #96	; 0x60
   22858:	4658      	mov	r0, fp
   2285a:	f7ff fb55 	bl	21f08 <__ssprint_r>
   2285e:	2800      	cmp	r0, #0
   22860:	d1b3      	bne.n	227ca <_svfiprintf_r+0x7c2>
   22862:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22866:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2286a:	e58f      	b.n	2238c <_svfiprintf_r+0x384>
   2286c:	ee18 1a10 	vmov	r1, s16
   22870:	aa18      	add	r2, sp, #96	; 0x60
   22872:	4658      	mov	r0, fp
   22874:	f7ff fb48 	bl	21f08 <__ssprint_r>
   22878:	2800      	cmp	r0, #0
   2287a:	d1a6      	bne.n	227ca <_svfiprintf_r+0x7c2>
   2287c:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22880:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22884:	e594      	b.n	223b0 <_svfiprintf_r+0x3a8>
   22886:	2c10      	cmp	r4, #16
   22888:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2288a:	dd21      	ble.n	228d0 <_svfiprintf_r+0x8c8>
   2288c:	ee18 6a10 	vmov	r6, s16
   22890:	2510      	movs	r5, #16
   22892:	460a      	mov	r2, r1
   22894:	e004      	b.n	228a0 <_svfiprintf_r+0x898>
   22896:	3c10      	subs	r4, #16
   22898:	2c10      	cmp	r4, #16
   2289a:	f109 0908 	add.w	r9, r9, #8
   2289e:	dd16      	ble.n	228ce <_svfiprintf_r+0x8c6>
   228a0:	3301      	adds	r3, #1
   228a2:	4932      	ldr	r1, [pc, #200]	; (2296c <_svfiprintf_r+0x964>)
   228a4:	3210      	adds	r2, #16
   228a6:	2b07      	cmp	r3, #7
   228a8:	e9c9 1500 	strd	r1, r5, [r9]
   228ac:	e9cd 3219 	strd	r3, r2, [sp, #100]	; 0x64
   228b0:	ddf1      	ble.n	22896 <_svfiprintf_r+0x88e>
   228b2:	aa18      	add	r2, sp, #96	; 0x60
   228b4:	4631      	mov	r1, r6
   228b6:	4658      	mov	r0, fp
   228b8:	f7ff fb26 	bl	21f08 <__ssprint_r>
   228bc:	2800      	cmp	r0, #0
   228be:	d184      	bne.n	227ca <_svfiprintf_r+0x7c2>
   228c0:	3c10      	subs	r4, #16
   228c2:	2c10      	cmp	r4, #16
   228c4:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
   228c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   228cc:	dce8      	bgt.n	228a0 <_svfiprintf_r+0x898>
   228ce:	4611      	mov	r1, r2
   228d0:	3301      	adds	r3, #1
   228d2:	4a26      	ldr	r2, [pc, #152]	; (2296c <_svfiprintf_r+0x964>)
   228d4:	f8c9 4004 	str.w	r4, [r9, #4]
   228d8:	4421      	add	r1, r4
   228da:	2b07      	cmp	r3, #7
   228dc:	e9cd 3119 	strd	r3, r1, [sp, #100]	; 0x64
   228e0:	f8c9 2000 	str.w	r2, [r9]
   228e4:	f77f ad83 	ble.w	223ee <_svfiprintf_r+0x3e6>
   228e8:	ee18 1a10 	vmov	r1, s16
   228ec:	aa18      	add	r2, sp, #96	; 0x60
   228ee:	4658      	mov	r0, fp
   228f0:	f7ff fb0a 	bl	21f08 <__ssprint_r>
   228f4:	2800      	cmp	r0, #0
   228f6:	f47f af68 	bne.w	227ca <_svfiprintf_r+0x7c2>
   228fa:	991a      	ldr	r1, [sp, #104]	; 0x68
   228fc:	e577      	b.n	223ee <_svfiprintf_r+0x3e6>
   228fe:	2f00      	cmp	r7, #0
   22900:	f47f ac7d 	bne.w	221fe <_svfiprintf_r+0x1f6>
   22904:	2700      	movs	r7, #0
   22906:	9705      	str	r7, [sp, #20]
   22908:	ac44      	add	r4, sp, #272	; 0x110
   2290a:	e4b2      	b.n	22272 <_svfiprintf_r+0x26a>
   2290c:	9b03      	ldr	r3, [sp, #12]
   2290e:	f013 0310 	ands.w	r3, r3, #16
   22912:	d178      	bne.n	22a06 <_svfiprintf_r+0x9fe>
   22914:	9a03      	ldr	r2, [sp, #12]
   22916:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   2291a:	f000 8146 	beq.w	22baa <_svfiprintf_r+0xba2>
   2291e:	9908      	ldr	r1, [sp, #32]
   22920:	461a      	mov	r2, r3
   22922:	f851 3b04 	ldr.w	r3, [r1], #4
   22926:	9108      	str	r1, [sp, #32]
   22928:	b29b      	uxth	r3, r3
   2292a:	2101      	movs	r1, #1
   2292c:	e483      	b.n	22236 <_svfiprintf_r+0x22e>
   2292e:	ee18 1a10 	vmov	r1, s16
   22932:	aa18      	add	r2, sp, #96	; 0x60
   22934:	4658      	mov	r0, fp
   22936:	f7ff fae7 	bl	21f08 <__ssprint_r>
   2293a:	2800      	cmp	r0, #0
   2293c:	f47f af45 	bne.w	227ca <_svfiprintf_r+0x7c2>
   22940:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22944:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22948:	e53b      	b.n	223c2 <_svfiprintf_r+0x3ba>
   2294a:	9903      	ldr	r1, [sp, #12]
   2294c:	9705      	str	r7, [sp, #20]
   2294e:	ac44      	add	r4, sp, #272	; 0x110
   22950:	469e      	mov	lr, r3
   22952:	ee08 ba90 	vmov	s17, fp
   22956:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   2295a:	f04f 0c00 	mov.w	ip, #0
   2295e:	4623      	mov	r3, r4
   22960:	e00d      	b.n	2297e <_svfiprintf_r+0x976>
   22962:	bf00      	nop
   22964:	20008c88 	.word	0x20008c88
   22968:	2000261c 	.word	0x2000261c
   2296c:	2000260c 	.word	0x2000260c
   22970:	f1be 0f0a 	cmp.w	lr, #10
   22974:	f172 0200 	sbcs.w	r2, r2, #0
   22978:	d33a      	bcc.n	229f0 <_svfiprintf_r+0x9e8>
   2297a:	46a6      	mov	lr, r4
   2297c:	462a      	mov	r2, r5
   2297e:	49b2      	ldr	r1, [pc, #712]	; (22c48 <_svfiprintf_r+0xc40>)
   22980:	eb1e 0002 	adds.w	r0, lr, r2
   22984:	f140 0000 	adc.w	r0, r0, #0
   22988:	460f      	mov	r7, r1
   2298a:	fba1 1400 	umull	r1, r4, r1, r0
   2298e:	f024 0103 	bic.w	r1, r4, #3
   22992:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   22996:	1a40      	subs	r0, r0, r1
   22998:	ebbe 0100 	subs.w	r1, lr, r0
   2299c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   229a0:	f162 0400 	sbc.w	r4, r2, #0
   229a4:	fb05 f501 	mul.w	r5, r5, r1
   229a8:	fb07 5504 	mla	r5, r7, r4, r5
   229ac:	fba1 4107 	umull	r4, r1, r1, r7
   229b0:	440d      	add	r5, r1
   229b2:	2705      	movs	r7, #5
   229b4:	f004 0101 	and.w	r1, r4, #1
   229b8:	fba1 1b07 	umull	r1, fp, r1, r7
   229bc:	1809      	adds	r1, r1, r0
   229be:	0864      	lsrs	r4, r4, #1
   229c0:	3130      	adds	r1, #48	; 0x30
   229c2:	f803 1c01 	strb.w	r1, [r3, #-1]
   229c6:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   229ca:	f10c 0c01 	add.w	ip, ip, #1
   229ce:	3b01      	subs	r3, #1
   229d0:	086d      	lsrs	r5, r5, #1
   229d2:	2e00      	cmp	r6, #0
   229d4:	d0cc      	beq.n	22970 <_svfiprintf_r+0x968>
   229d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   229d8:	7809      	ldrb	r1, [r1, #0]
   229da:	4561      	cmp	r1, ip
   229dc:	d1c8      	bne.n	22970 <_svfiprintf_r+0x968>
   229de:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   229e2:	d0c5      	beq.n	22970 <_svfiprintf_r+0x968>
   229e4:	f1be 0f0a 	cmp.w	lr, #10
   229e8:	f172 0200 	sbcs.w	r2, r2, #0
   229ec:	f080 808d 	bcs.w	22b0a <_svfiprintf_r+0xb02>
   229f0:	461c      	mov	r4, r3
   229f2:	ab44      	add	r3, sp, #272	; 0x110
   229f4:	1b1b      	subs	r3, r3, r4
   229f6:	9f05      	ldr	r7, [sp, #20]
   229f8:	9e03      	ldr	r6, [sp, #12]
   229fa:	9305      	str	r3, [sp, #20]
   229fc:	ee18 ba90 	vmov	fp, s17
   22a00:	e437      	b.n	22272 <_svfiprintf_r+0x26a>
   22a02:	ac44      	add	r4, sp, #272	; 0x110
   22a04:	e435      	b.n	22272 <_svfiprintf_r+0x26a>
   22a06:	9908      	ldr	r1, [sp, #32]
   22a08:	f851 3b04 	ldr.w	r3, [r1], #4
   22a0c:	9108      	str	r1, [sp, #32]
   22a0e:	2101      	movs	r1, #1
   22a10:	e411      	b.n	22236 <_svfiprintf_r+0x22e>
   22a12:	9b08      	ldr	r3, [sp, #32]
   22a14:	9804      	ldr	r0, [sp, #16]
   22a16:	f853 1b04 	ldr.w	r1, [r3], #4
   22a1a:	9308      	str	r3, [sp, #32]
   22a1c:	17c2      	asrs	r2, r0, #31
   22a1e:	e9c1 0200 	strd	r0, r2, [r1]
   22a22:	f7ff bb16 	b.w	22052 <_svfiprintf_r+0x4a>
   22a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22a28:	2b00      	cmp	r3, #0
   22a2a:	f43f abbf 	beq.w	221ac <_svfiprintf_r+0x1a4>
   22a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22a30:	781b      	ldrb	r3, [r3, #0]
   22a32:	2b00      	cmp	r3, #0
   22a34:	f43f abba 	beq.w	221ac <_svfiprintf_r+0x1a4>
   22a38:	f898 1000 	ldrb.w	r1, [r8]
   22a3c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   22a40:	f7ff bb2f 	b.w	220a2 <_svfiprintf_r+0x9a>
   22a44:	4b81      	ldr	r3, [pc, #516]	; (22c4c <_svfiprintf_r+0xc44>)
   22a46:	930c      	str	r3, [sp, #48]	; 0x30
   22a48:	f016 0220 	ands.w	r2, r6, #32
   22a4c:	d021      	beq.n	22a92 <_svfiprintf_r+0xa8a>
   22a4e:	9b08      	ldr	r3, [sp, #32]
   22a50:	3307      	adds	r3, #7
   22a52:	f023 0307 	bic.w	r3, r3, #7
   22a56:	4618      	mov	r0, r3
   22a58:	685a      	ldr	r2, [r3, #4]
   22a5a:	f850 3b08 	ldr.w	r3, [r0], #8
   22a5e:	9008      	str	r0, [sp, #32]
   22a60:	07f0      	lsls	r0, r6, #31
   22a62:	d509      	bpl.n	22a78 <_svfiprintf_r+0xa70>
   22a64:	ea53 0002 	orrs.w	r0, r3, r2
   22a68:	d006      	beq.n	22a78 <_svfiprintf_r+0xa70>
   22a6a:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   22a6e:	2130      	movs	r1, #48	; 0x30
   22a70:	f046 0602 	orr.w	r6, r6, #2
   22a74:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   22a78:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   22a7c:	9103      	str	r1, [sp, #12]
   22a7e:	2102      	movs	r1, #2
   22a80:	f7ff bbd9 	b.w	22236 <_svfiprintf_r+0x22e>
   22a84:	9603      	str	r6, [sp, #12]
   22a86:	e5af      	b.n	225e8 <_svfiprintf_r+0x5e0>
   22a88:	4b71      	ldr	r3, [pc, #452]	; (22c50 <_svfiprintf_r+0xc48>)
   22a8a:	930c      	str	r3, [sp, #48]	; 0x30
   22a8c:	f016 0220 	ands.w	r2, r6, #32
   22a90:	d1dd      	bne.n	22a4e <_svfiprintf_r+0xa46>
   22a92:	f016 0310 	ands.w	r3, r6, #16
   22a96:	9808      	ldr	r0, [sp, #32]
   22a98:	d14b      	bne.n	22b32 <_svfiprintf_r+0xb2a>
   22a9a:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   22a9e:	d044      	beq.n	22b2a <_svfiprintf_r+0xb22>
   22aa0:	461a      	mov	r2, r3
   22aa2:	f850 3b04 	ldr.w	r3, [r0], #4
   22aa6:	9008      	str	r0, [sp, #32]
   22aa8:	b29b      	uxth	r3, r3
   22aaa:	e7d9      	b.n	22a60 <_svfiprintf_r+0xa58>
   22aac:	9b08      	ldr	r3, [sp, #32]
   22aae:	2101      	movs	r1, #1
   22ab0:	f853 2b04 	ldr.w	r2, [r3], #4
   22ab4:	9103      	str	r1, [sp, #12]
   22ab6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   22aba:	9308      	str	r3, [sp, #32]
   22abc:	9105      	str	r1, [sp, #20]
   22abe:	ac2b      	add	r4, sp, #172	; 0xac
   22ac0:	e515      	b.n	224ee <_svfiprintf_r+0x4e6>
   22ac2:	1c7b      	adds	r3, r7, #1
   22ac4:	f000 80f8 	beq.w	22cb8 <_svfiprintf_r+0xcb0>
   22ac8:	463a      	mov	r2, r7
   22aca:	4629      	mov	r1, r5
   22acc:	4620      	mov	r0, r4
   22ace:	f7fa fb07 	bl	1d0e0 <memchr>
   22ad2:	9007      	str	r0, [sp, #28]
   22ad4:	2800      	cmp	r0, #0
   22ad6:	f000 80e8 	beq.w	22caa <_svfiprintf_r+0xca2>
   22ada:	1b03      	subs	r3, r0, r4
   22adc:	9a03      	ldr	r2, [sp, #12]
   22ade:	9305      	str	r3, [sp, #20]
   22ae0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22ae4:	462f      	mov	r7, r5
   22ae6:	9208      	str	r2, [sp, #32]
   22ae8:	9303      	str	r3, [sp, #12]
   22aea:	9507      	str	r5, [sp, #28]
   22aec:	f7ff bbc8 	b.w	22280 <_svfiprintf_r+0x278>
   22af0:	2140      	movs	r1, #64	; 0x40
   22af2:	4658      	mov	r0, fp
   22af4:	f7f6 fe9a 	bl	1982c <_malloc_r>
   22af8:	6020      	str	r0, [r4, #0]
   22afa:	6120      	str	r0, [r4, #16]
   22afc:	2800      	cmp	r0, #0
   22afe:	f000 80ff 	beq.w	22d00 <_svfiprintf_r+0xcf8>
   22b02:	2340      	movs	r3, #64	; 0x40
   22b04:	6163      	str	r3, [r4, #20]
   22b06:	f7ff ba98 	b.w	2203a <_svfiprintf_r+0x32>
   22b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22b0c:	990d      	ldr	r1, [sp, #52]	; 0x34
   22b0e:	1a9b      	subs	r3, r3, r2
   22b10:	4618      	mov	r0, r3
   22b12:	9307      	str	r3, [sp, #28]
   22b14:	f7f9 f8bc 	bl	1bc90 <strncpy>
   22b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
   22b1a:	9b07      	ldr	r3, [sp, #28]
   22b1c:	784a      	ldrb	r2, [r1, #1]
   22b1e:	b10a      	cbz	r2, 22b24 <_svfiprintf_r+0xb1c>
   22b20:	3101      	adds	r1, #1
   22b22:	910b      	str	r1, [sp, #44]	; 0x2c
   22b24:	f04f 0c00 	mov.w	ip, #0
   22b28:	e727      	b.n	2297a <_svfiprintf_r+0x972>
   22b2a:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   22b2e:	f040 809a 	bne.w	22c66 <_svfiprintf_r+0xc5e>
   22b32:	f850 3b04 	ldr.w	r3, [r0], #4
   22b36:	9008      	str	r0, [sp, #32]
   22b38:	e792      	b.n	22a60 <_svfiprintf_r+0xa58>
   22b3a:	ee18 1a10 	vmov	r1, s16
   22b3e:	aa18      	add	r2, sp, #96	; 0x60
   22b40:	4658      	mov	r0, fp
   22b42:	f7ff f9e1 	bl	21f08 <__ssprint_r>
   22b46:	2800      	cmp	r0, #0
   22b48:	f47f ae3f 	bne.w	227ca <_svfiprintf_r+0x7c2>
   22b4c:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22b50:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22b54:	e407      	b.n	22366 <_svfiprintf_r+0x35e>
   22b56:	9603      	str	r6, [sp, #12]
   22b58:	f7ff bb4c 	b.w	221f4 <_svfiprintf_r+0x1ec>
   22b5c:	2901      	cmp	r1, #1
   22b5e:	9603      	str	r6, [sp, #12]
   22b60:	f47f aceb 	bne.w	2253a <_svfiprintf_r+0x532>
   22b64:	f7ff bb4b 	b.w	221fe <_svfiprintf_r+0x1f6>
   22b68:	ee18 1a10 	vmov	r1, s16
   22b6c:	aa18      	add	r2, sp, #96	; 0x60
   22b6e:	4658      	mov	r0, fp
   22b70:	f7ff f9ca 	bl	21f08 <__ssprint_r>
   22b74:	2800      	cmp	r0, #0
   22b76:	f47f ae28 	bne.w	227ca <_svfiprintf_r+0x7c2>
   22b7a:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22b7e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22b82:	e419      	b.n	223b8 <_svfiprintf_r+0x3b0>
   22b84:	9b08      	ldr	r3, [sp, #32]
   22b86:	9904      	ldr	r1, [sp, #16]
   22b88:	f853 2b04 	ldr.w	r2, [r3], #4
   22b8c:	6011      	str	r1, [r2, #0]
   22b8e:	9308      	str	r3, [sp, #32]
   22b90:	f7ff ba5f 	b.w	22052 <_svfiprintf_r+0x4a>
   22b94:	2f06      	cmp	r7, #6
   22b96:	463b      	mov	r3, r7
   22b98:	9a03      	ldr	r2, [sp, #12]
   22b9a:	4c2e      	ldr	r4, [pc, #184]	; (22c54 <_svfiprintf_r+0xc4c>)
   22b9c:	9208      	str	r2, [sp, #32]
   22b9e:	bf28      	it	cs
   22ba0:	2306      	movcs	r3, #6
   22ba2:	9305      	str	r3, [sp, #20]
   22ba4:	9303      	str	r3, [sp, #12]
   22ba6:	f7ff bbc8 	b.w	2233a <_svfiprintf_r+0x332>
   22baa:	9b03      	ldr	r3, [sp, #12]
   22bac:	9908      	ldr	r1, [sp, #32]
   22bae:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   22bb2:	bf14      	ite	ne
   22bb4:	f851 3b04 	ldrne.w	r3, [r1], #4
   22bb8:	f851 3b04 	ldreq.w	r3, [r1], #4
   22bbc:	9108      	str	r1, [sp, #32]
   22bbe:	bf1c      	itt	ne
   22bc0:	4602      	movne	r2, r0
   22bc2:	b2db      	uxtbne	r3, r3
   22bc4:	2101      	movs	r1, #1
   22bc6:	f7ff bb36 	b.w	22236 <_svfiprintf_r+0x22e>
   22bca:	ab16      	add	r3, sp, #88	; 0x58
   22bcc:	9300      	str	r3, [sp, #0]
   22bce:	2300      	movs	r3, #0
   22bd0:	4619      	mov	r1, r3
   22bd2:	aa13      	add	r2, sp, #76	; 0x4c
   22bd4:	4658      	mov	r0, fp
   22bd6:	f7ff f957 	bl	21e88 <_wcsrtombs_r>
   22bda:	4603      	mov	r3, r0
   22bdc:	3301      	adds	r3, #1
   22bde:	9005      	str	r0, [sp, #20]
   22be0:	d077      	beq.n	22cd2 <_svfiprintf_r+0xcca>
   22be2:	9413      	str	r4, [sp, #76]	; 0x4c
   22be4:	9b05      	ldr	r3, [sp, #20]
   22be6:	b1fb      	cbz	r3, 22c28 <_svfiprintf_r+0xc20>
   22be8:	2b63      	cmp	r3, #99	; 0x63
   22bea:	dc56      	bgt.n	22c9a <_svfiprintf_r+0xc92>
   22bec:	2300      	movs	r3, #0
   22bee:	9307      	str	r3, [sp, #28]
   22bf0:	ac2b      	add	r4, sp, #172	; 0xac
   22bf2:	2208      	movs	r2, #8
   22bf4:	2100      	movs	r1, #0
   22bf6:	a816      	add	r0, sp, #88	; 0x58
   22bf8:	f7f8 ff1e 	bl	1ba38 <memset>
   22bfc:	9d05      	ldr	r5, [sp, #20]
   22bfe:	ab16      	add	r3, sp, #88	; 0x58
   22c00:	9300      	str	r3, [sp, #0]
   22c02:	aa13      	add	r2, sp, #76	; 0x4c
   22c04:	462b      	mov	r3, r5
   22c06:	4621      	mov	r1, r4
   22c08:	4658      	mov	r0, fp
   22c0a:	f7ff f93d 	bl	21e88 <_wcsrtombs_r>
   22c0e:	4285      	cmp	r5, r0
   22c10:	d17e      	bne.n	22d10 <_svfiprintf_r+0xd08>
   22c12:	9b03      	ldr	r3, [sp, #12]
   22c14:	9a05      	ldr	r2, [sp, #20]
   22c16:	9308      	str	r3, [sp, #32]
   22c18:	2300      	movs	r3, #0
   22c1a:	54a3      	strb	r3, [r4, r2]
   22c1c:	461f      	mov	r7, r3
   22c1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   22c22:	9303      	str	r3, [sp, #12]
   22c24:	f7ff bb2c 	b.w	22280 <_svfiprintf_r+0x278>
   22c28:	9b03      	ldr	r3, [sp, #12]
   22c2a:	9308      	str	r3, [sp, #32]
   22c2c:	9b05      	ldr	r3, [sp, #20]
   22c2e:	9303      	str	r3, [sp, #12]
   22c30:	461f      	mov	r7, r3
   22c32:	9307      	str	r3, [sp, #28]
   22c34:	f7ff bb24 	b.w	22280 <_svfiprintf_r+0x278>
   22c38:	f912 3b04 	ldrsb.w	r3, [r2], #4
   22c3c:	9208      	str	r2, [sp, #32]
   22c3e:	17da      	asrs	r2, r3, #31
   22c40:	4611      	mov	r1, r2
   22c42:	f7ff baca 	b.w	221da <_svfiprintf_r+0x1d2>
   22c46:	bf00      	nop
   22c48:	cccccccd 	.word	0xcccccccd
   22c4c:	20008c88 	.word	0x20008c88
   22c50:	20008c9c 	.word	0x20008c9c
   22c54:	20008cb0 	.word	0x20008cb0
   22c58:	f851 3b04 	ldr.w	r3, [r1], #4
   22c5c:	9108      	str	r1, [sp, #32]
   22c5e:	4602      	mov	r2, r0
   22c60:	b2db      	uxtb	r3, r3
   22c62:	f7ff bae4 	b.w	2222e <_svfiprintf_r+0x226>
   22c66:	f850 3b04 	ldr.w	r3, [r0], #4
   22c6a:	9008      	str	r0, [sp, #32]
   22c6c:	4622      	mov	r2, r4
   22c6e:	b2db      	uxtb	r3, r3
   22c70:	e6f6      	b.n	22a60 <_svfiprintf_r+0xa58>
   22c72:	9b08      	ldr	r3, [sp, #32]
   22c74:	9904      	ldr	r1, [sp, #16]
   22c76:	f853 2b04 	ldr.w	r2, [r3], #4
   22c7a:	9308      	str	r3, [sp, #32]
   22c7c:	8011      	strh	r1, [r2, #0]
   22c7e:	f7ff b9e8 	b.w	22052 <_svfiprintf_r+0x4a>
   22c82:	ee18 4a10 	vmov	r4, s16
   22c86:	ee18 1a10 	vmov	r1, s16
   22c8a:	aa18      	add	r2, sp, #96	; 0x60
   22c8c:	4658      	mov	r0, fp
   22c8e:	f7ff f93b 	bl	21f08 <__ssprint_r>
   22c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22c96:	f7ff bb2d 	b.w	222f4 <_svfiprintf_r+0x2ec>
   22c9a:	1c59      	adds	r1, r3, #1
   22c9c:	4658      	mov	r0, fp
   22c9e:	f7f6 fdc5 	bl	1982c <_malloc_r>
   22ca2:	4604      	mov	r4, r0
   22ca4:	b1a8      	cbz	r0, 22cd2 <_svfiprintf_r+0xcca>
   22ca6:	9007      	str	r0, [sp, #28]
   22ca8:	e7a3      	b.n	22bf2 <_svfiprintf_r+0xbea>
   22caa:	9b03      	ldr	r3, [sp, #12]
   22cac:	9705      	str	r7, [sp, #20]
   22cae:	9703      	str	r7, [sp, #12]
   22cb0:	9308      	str	r3, [sp, #32]
   22cb2:	9f07      	ldr	r7, [sp, #28]
   22cb4:	f7ff bae4 	b.w	22280 <_svfiprintf_r+0x278>
   22cb8:	9b03      	ldr	r3, [sp, #12]
   22cba:	9308      	str	r3, [sp, #32]
   22cbc:	4620      	mov	r0, r4
   22cbe:	f7fa fa5f 	bl	1d180 <strlen>
   22cc2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   22cc6:	462f      	mov	r7, r5
   22cc8:	9005      	str	r0, [sp, #20]
   22cca:	9303      	str	r3, [sp, #12]
   22ccc:	9507      	str	r5, [sp, #28]
   22cce:	f7ff bad7 	b.w	22280 <_svfiprintf_r+0x278>
   22cd2:	ee18 2a10 	vmov	r2, s16
   22cd6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   22cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22cde:	8193      	strh	r3, [r2, #12]
   22ce0:	f7ff bb08 	b.w	222f4 <_svfiprintf_r+0x2ec>
   22ce4:	9c07      	ldr	r4, [sp, #28]
   22ce6:	9705      	str	r7, [sp, #20]
   22ce8:	e77c      	b.n	22be4 <_svfiprintf_r+0xbdc>
   22cea:	9b08      	ldr	r3, [sp, #32]
   22cec:	f898 1001 	ldrb.w	r1, [r8, #1]
   22cf0:	f853 7b04 	ldr.w	r7, [r3], #4
   22cf4:	9308      	str	r3, [sp, #32]
   22cf6:	4690      	mov	r8, r2
   22cf8:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   22cfc:	f7ff b9d1 	b.w	220a2 <_svfiprintf_r+0x9a>
   22d00:	230c      	movs	r3, #12
   22d02:	f8cb 3000 	str.w	r3, [fp]
   22d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22d0a:	9304      	str	r3, [sp, #16]
   22d0c:	f7ff baf9 	b.w	22302 <_svfiprintf_r+0x2fa>
   22d10:	ee18 2a10 	vmov	r2, s16
   22d14:	8993      	ldrh	r3, [r2, #12]
   22d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22d1a:	8193      	strh	r3, [r2, #12]
   22d1c:	e555      	b.n	227ca <_svfiprintf_r+0x7c2>
   22d1e:	bf00      	nop
   22d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d24:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   22d26:	049c      	lsls	r4, r3, #18
   22d28:	4690      	mov	r8, r2
   22d2a:	d52d      	bpl.n	22d88 <_svfiprintf_r+0xd80>
   22d2c:	6893      	ldr	r3, [r2, #8]
   22d2e:	6812      	ldr	r2, [r2, #0]
   22d30:	b343      	cbz	r3, 22d84 <_svfiprintf_r+0xd7c>
   22d32:	468b      	mov	fp, r1
   22d34:	4606      	mov	r6, r0
   22d36:	f102 0908 	add.w	r9, r2, #8
   22d3a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   22d3e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   22d42:	d015      	beq.n	22d70 <_svfiprintf_r+0xd68>
   22d44:	3d04      	subs	r5, #4
   22d46:	2400      	movs	r4, #0
   22d48:	e001      	b.n	22d4e <_svfiprintf_r+0xd46>
   22d4a:	42a7      	cmp	r7, r4
   22d4c:	d00e      	beq.n	22d6c <_svfiprintf_r+0xd64>
   22d4e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   22d52:	465a      	mov	r2, fp
   22d54:	4630      	mov	r0, r6
   22d56:	f001 fa75 	bl	24244 <_fputwc_r>
   22d5a:	1c43      	adds	r3, r0, #1
   22d5c:	f104 0401 	add.w	r4, r4, #1
   22d60:	d1f3      	bne.n	22d4a <_svfiprintf_r+0xd42>
   22d62:	2300      	movs	r3, #0
   22d64:	e9c8 3301 	strd	r3, r3, [r8, #4]
   22d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22d70:	f02a 0a03 	bic.w	sl, sl, #3
   22d74:	eba3 030a 	sub.w	r3, r3, sl
   22d78:	f8c8 3008 	str.w	r3, [r8, #8]
   22d7c:	f109 0908 	add.w	r9, r9, #8
   22d80:	2b00      	cmp	r3, #0
   22d82:	d1da      	bne.n	22d3a <_svfiprintf_r+0xd32>
   22d84:	2000      	movs	r0, #0
   22d86:	e7ec      	b.n	22d62 <_svfiprintf_r+0xd5a>
   22d88:	f001 f826 	bl	23dd8 <__sfvwrite_r>
   22d8c:	2300      	movs	r3, #0
   22d8e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   22d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d96:	bf00      	nop

00022d98 <__sprint_r>:
   22d98:	b410      	push	{r4}
   22d9a:	6894      	ldr	r4, [r2, #8]
   22d9c:	b114      	cbz	r4, 22da4 <__sprint_r+0xc>
   22d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
   22da2:	e7bd      	b.n	22d20 <_svfiprintf_r+0xd18>
   22da4:	4620      	mov	r0, r4
   22da6:	6054      	str	r4, [r2, #4]
   22da8:	f85d 4b04 	ldr.w	r4, [sp], #4
   22dac:	4770      	bx	lr
   22dae:	bf00      	nop

00022db0 <_vfiprintf_r>:
   22db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22db4:	ed2d 8b02 	vpush	{d8}
   22db8:	b0c5      	sub	sp, #276	; 0x114
   22dba:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   22dbe:	4683      	mov	fp, r0
   22dc0:	ee08 1a10 	vmov	s16, r1
   22dc4:	4616      	mov	r6, r2
   22dc6:	2100      	movs	r1, #0
   22dc8:	2208      	movs	r2, #8
   22dca:	4650      	mov	r0, sl
   22dcc:	461c      	mov	r4, r3
   22dce:	9307      	str	r3, [sp, #28]
   22dd0:	f7f8 fe32 	bl	1ba38 <memset>
   22dd4:	f1bb 0f00 	cmp.w	fp, #0
   22dd8:	d004      	beq.n	22de4 <_vfiprintf_r+0x34>
   22dda:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   22dde:	2b00      	cmp	r3, #0
   22de0:	f000 86a0 	beq.w	23b24 <_vfiprintf_r+0xd74>
   22de4:	ee18 2a10 	vmov	r2, s16
   22de8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   22dea:	07db      	lsls	r3, r3, #31
   22dec:	f140 8513 	bpl.w	23816 <_vfiprintf_r+0xa66>
   22df0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   22df4:	b28a      	uxth	r2, r1
   22df6:	0495      	lsls	r5, r2, #18
   22df8:	d40b      	bmi.n	22e12 <_vfiprintf_r+0x62>
   22dfa:	ee18 3a10 	vmov	r3, s16
   22dfe:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   22e02:	8199      	strh	r1, [r3, #12]
   22e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   22e06:	b28a      	uxth	r2, r1
   22e08:	ee18 1a10 	vmov	r1, s16
   22e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   22e10:	664b      	str	r3, [r1, #100]	; 0x64
   22e12:	0710      	lsls	r0, r2, #28
   22e14:	f140 8105 	bpl.w	23022 <_vfiprintf_r+0x272>
   22e18:	ee18 3a10 	vmov	r3, s16
   22e1c:	691b      	ldr	r3, [r3, #16]
   22e1e:	2b00      	cmp	r3, #0
   22e20:	f000 80ff 	beq.w	23022 <_vfiprintf_r+0x272>
   22e24:	f002 031a 	and.w	r3, r2, #26
   22e28:	2b0a      	cmp	r3, #10
   22e2a:	f000 810a 	beq.w	23042 <_vfiprintf_r+0x292>
   22e2e:	2300      	movs	r3, #0
   22e30:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   22e34:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   22e38:	aa1b      	add	r2, sp, #108	; 0x6c
   22e3a:	930c      	str	r3, [sp, #48]	; 0x30
   22e3c:	9218      	str	r2, [sp, #96]	; 0x60
   22e3e:	4691      	mov	r9, r2
   22e40:	930b      	str	r3, [sp, #44]	; 0x2c
   22e42:	9305      	str	r3, [sp, #20]
   22e44:	46b0      	mov	r8, r6
   22e46:	4644      	mov	r4, r8
   22e48:	4ba8      	ldr	r3, [pc, #672]	; (230ec <_vfiprintf_r+0x33c>)
   22e4a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   22e4e:	f7f9 feb1 	bl	1cbb4 <__locale_mb_cur_max>
   22e52:	4622      	mov	r2, r4
   22e54:	4603      	mov	r3, r0
   22e56:	a912      	add	r1, sp, #72	; 0x48
   22e58:	f8cd a000 	str.w	sl, [sp]
   22e5c:	4658      	mov	r0, fp
   22e5e:	47a8      	blx	r5
   22e60:	2800      	cmp	r0, #0
   22e62:	f000 8145 	beq.w	230f0 <_vfiprintf_r+0x340>
   22e66:	f2c0 8139 	blt.w	230dc <_vfiprintf_r+0x32c>
   22e6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22e6c:	2a25      	cmp	r2, #37	; 0x25
   22e6e:	4603      	mov	r3, r0
   22e70:	d001      	beq.n	22e76 <_vfiprintf_r+0xc6>
   22e72:	441c      	add	r4, r3
   22e74:	e7e8      	b.n	22e48 <_vfiprintf_r+0x98>
   22e76:	ebb4 0608 	subs.w	r6, r4, r8
   22e7a:	4605      	mov	r5, r0
   22e7c:	f040 813c 	bne.w	230f8 <_vfiprintf_r+0x348>
   22e80:	2300      	movs	r3, #0
   22e82:	7861      	ldrb	r1, [r4, #1]
   22e84:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   22e88:	f104 0801 	add.w	r8, r4, #1
   22e8c:	9306      	str	r3, [sp, #24]
   22e8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22e92:	461e      	mov	r6, r3
   22e94:	242b      	movs	r4, #43	; 0x2b
   22e96:	f108 0801 	add.w	r8, r8, #1
   22e9a:	f1a1 0320 	sub.w	r3, r1, #32
   22e9e:	2b5a      	cmp	r3, #90	; 0x5a
   22ea0:	f200 8178 	bhi.w	23194 <_vfiprintf_r+0x3e4>
   22ea4:	e8df f013 	tbh	[pc, r3, lsl #1]
   22ea8:	017602b5 	.word	0x017602b5
   22eac:	02b00176 	.word	0x02b00176
   22eb0:	01760176 	.word	0x01760176
   22eb4:	006a0176 	.word	0x006a0176
   22eb8:	01760176 	.word	0x01760176
   22ebc:	028d027d 	.word	0x028d027d
   22ec0:	02880176 	.word	0x02880176
   22ec4:	01760297 	.word	0x01760297
   22ec8:	005b0292 	.word	0x005b0292
   22ecc:	005b005b 	.word	0x005b005b
   22ed0:	005b005b 	.word	0x005b005b
   22ed4:	005b005b 	.word	0x005b005b
   22ed8:	005b005b 	.word	0x005b005b
   22edc:	01760176 	.word	0x01760176
   22ee0:	01760176 	.word	0x01760176
   22ee4:	01760176 	.word	0x01760176
   22ee8:	01760176 	.word	0x01760176
   22eec:	025c0176 	.word	0x025c0176
   22ef0:	01760084 	.word	0x01760084
   22ef4:	01760176 	.word	0x01760176
   22ef8:	01760176 	.word	0x01760176
   22efc:	01760176 	.word	0x01760176
   22f00:	01760176 	.word	0x01760176
   22f04:	00e80176 	.word	0x00e80176
   22f08:	01760176 	.word	0x01760176
   22f0c:	02330176 	.word	0x02330176
   22f10:	02da0176 	.word	0x02da0176
   22f14:	01760176 	.word	0x01760176
   22f18:	0176058b 	.word	0x0176058b
   22f1c:	01760176 	.word	0x01760176
   22f20:	01760176 	.word	0x01760176
   22f24:	01760176 	.word	0x01760176
   22f28:	01760176 	.word	0x01760176
   22f2c:	025c0176 	.word	0x025c0176
   22f30:	01760086 	.word	0x01760086
   22f34:	01760176 	.word	0x01760176
   22f38:	008602cd 	.word	0x008602cd
   22f3c:	0176007f 	.word	0x0176007f
   22f40:	017602c0 	.word	0x017602c0
   22f44:	00ea02fd 	.word	0x00ea02fd
   22f48:	007f02ed 	.word	0x007f02ed
   22f4c:	02330176 	.word	0x02330176
   22f50:	0569007c 	.word	0x0569007c
   22f54:	01760176 	.word	0x01760176
   22f58:	0176056b 	.word	0x0176056b
   22f5c:	007c      	.short	0x007c
   22f5e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   22f62:	2200      	movs	r2, #0
   22f64:	f818 1b01 	ldrb.w	r1, [r8], #1
   22f68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   22f6c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   22f70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   22f74:	2b09      	cmp	r3, #9
   22f76:	d9f5      	bls.n	22f64 <_vfiprintf_r+0x1b4>
   22f78:	9206      	str	r2, [sp, #24]
   22f7a:	e78e      	b.n	22e9a <_vfiprintf_r+0xea>
   22f7c:	4658      	mov	r0, fp
   22f7e:	f7fd ffad 	bl	20edc <_localeconv_r>
   22f82:	6843      	ldr	r3, [r0, #4]
   22f84:	930d      	str	r3, [sp, #52]	; 0x34
   22f86:	4618      	mov	r0, r3
   22f88:	f7fa f8fa 	bl	1d180 <strlen>
   22f8c:	900e      	str	r0, [sp, #56]	; 0x38
   22f8e:	4605      	mov	r5, r0
   22f90:	4658      	mov	r0, fp
   22f92:	f7fd ffa3 	bl	20edc <_localeconv_r>
   22f96:	6883      	ldr	r3, [r0, #8]
   22f98:	930b      	str	r3, [sp, #44]	; 0x2c
   22f9a:	2d00      	cmp	r5, #0
   22f9c:	f040 84d6 	bne.w	2394c <_vfiprintf_r+0xb9c>
   22fa0:	f898 1000 	ldrb.w	r1, [r8]
   22fa4:	e777      	b.n	22e96 <_vfiprintf_r+0xe6>
   22fa6:	f898 1000 	ldrb.w	r1, [r8]
   22faa:	f046 0620 	orr.w	r6, r6, #32
   22fae:	e772      	b.n	22e96 <_vfiprintf_r+0xe6>
   22fb0:	f046 0610 	orr.w	r6, r6, #16
   22fb4:	06b4      	lsls	r4, r6, #26
   22fb6:	f140 818e 	bpl.w	232d6 <_vfiprintf_r+0x526>
   22fba:	9b07      	ldr	r3, [sp, #28]
   22fbc:	3307      	adds	r3, #7
   22fbe:	f023 0307 	bic.w	r3, r3, #7
   22fc2:	461a      	mov	r2, r3
   22fc4:	6859      	ldr	r1, [r3, #4]
   22fc6:	f852 3b08 	ldr.w	r3, [r2], #8
   22fca:	9207      	str	r2, [sp, #28]
   22fcc:	460a      	mov	r2, r1
   22fce:	2900      	cmp	r1, #0
   22fd0:	f2c0 8470 	blt.w	238b4 <_vfiprintf_r+0xb04>
   22fd4:	1c79      	adds	r1, r7, #1
   22fd6:	f000 85a2 	beq.w	23b1e <_vfiprintf_r+0xd6e>
   22fda:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   22fde:	9103      	str	r1, [sp, #12]
   22fe0:	ea53 0102 	orrs.w	r1, r3, r2
   22fe4:	f000 843f 	beq.w	23866 <_vfiprintf_r+0xab6>
   22fe8:	2b0a      	cmp	r3, #10
   22fea:	f172 0100 	sbcs.w	r1, r2, #0
   22fee:	f080 8541 	bcs.w	23a74 <_vfiprintf_r+0xcc4>
   22ff2:	3330      	adds	r3, #48	; 0x30
   22ff4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   22ff8:	9e03      	ldr	r6, [sp, #12]
   22ffa:	2301      	movs	r3, #1
   22ffc:	9304      	str	r3, [sp, #16]
   22ffe:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   23002:	9b04      	ldr	r3, [sp, #16]
   23004:	42bb      	cmp	r3, r7
   23006:	bfb8      	it	lt
   23008:	463b      	movlt	r3, r7
   2300a:	9303      	str	r3, [sp, #12]
   2300c:	2300      	movs	r3, #0
   2300e:	9308      	str	r3, [sp, #32]
   23010:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   23014:	2b00      	cmp	r3, #0
   23016:	f000 80cb 	beq.w	231b0 <_vfiprintf_r+0x400>
   2301a:	9b03      	ldr	r3, [sp, #12]
   2301c:	3301      	adds	r3, #1
   2301e:	9303      	str	r3, [sp, #12]
   23020:	e0c6      	b.n	231b0 <_vfiprintf_r+0x400>
   23022:	ee18 1a10 	vmov	r1, s16
   23026:	4658      	mov	r0, fp
   23028:	ee18 5a10 	vmov	r5, s16
   2302c:	f001 f84e 	bl	240cc <__swsetup_r>
   23030:	2800      	cmp	r0, #0
   23032:	f040 8652 	bne.w	23cda <_vfiprintf_r+0xf2a>
   23036:	89aa      	ldrh	r2, [r5, #12]
   23038:	f002 031a 	and.w	r3, r2, #26
   2303c:	2b0a      	cmp	r3, #10
   2303e:	f47f aef6 	bne.w	22e2e <_vfiprintf_r+0x7e>
   23042:	ee18 1a10 	vmov	r1, s16
   23046:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   2304a:	2b00      	cmp	r3, #0
   2304c:	f6ff aeef 	blt.w	22e2e <_vfiprintf_r+0x7e>
   23050:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   23052:	07db      	lsls	r3, r3, #31
   23054:	d402      	bmi.n	2305c <_vfiprintf_r+0x2ac>
   23056:	0597      	lsls	r7, r2, #22
   23058:	f140 8612 	bpl.w	23c80 <_vfiprintf_r+0xed0>
   2305c:	ee18 1a10 	vmov	r1, s16
   23060:	4623      	mov	r3, r4
   23062:	4632      	mov	r2, r6
   23064:	4658      	mov	r0, fp
   23066:	f000 fe77 	bl	23d58 <vfiprintf+0x1c>
   2306a:	9005      	str	r0, [sp, #20]
   2306c:	9805      	ldr	r0, [sp, #20]
   2306e:	b045      	add	sp, #276	; 0x114
   23070:	ecbd 8b02 	vpop	{d8}
   23074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23078:	f046 0610 	orr.w	r6, r6, #16
   2307c:	f016 0220 	ands.w	r2, r6, #32
   23080:	f000 8136 	beq.w	232f0 <_vfiprintf_r+0x540>
   23084:	9b07      	ldr	r3, [sp, #28]
   23086:	3307      	adds	r3, #7
   23088:	f023 0307 	bic.w	r3, r3, #7
   2308c:	4619      	mov	r1, r3
   2308e:	685a      	ldr	r2, [r3, #4]
   23090:	f851 3b08 	ldr.w	r3, [r1], #8
   23094:	9107      	str	r1, [sp, #28]
   23096:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   2309a:	9103      	str	r1, [sp, #12]
   2309c:	2100      	movs	r1, #0
   2309e:	2000      	movs	r0, #0
   230a0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   230a4:	1c78      	adds	r0, r7, #1
   230a6:	f000 8210 	beq.w	234ca <_vfiprintf_r+0x71a>
   230aa:	9803      	ldr	r0, [sp, #12]
   230ac:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   230b0:	ea53 0002 	orrs.w	r0, r3, r2
   230b4:	f040 8208 	bne.w	234c8 <_vfiprintf_r+0x718>
   230b8:	2f00      	cmp	r7, #0
   230ba:	f040 8538 	bne.w	23b2e <_vfiprintf_r+0xd7e>
   230be:	2900      	cmp	r1, #0
   230c0:	f040 83d5 	bne.w	2386e <_vfiprintf_r+0xabe>
   230c4:	9b03      	ldr	r3, [sp, #12]
   230c6:	f013 0301 	ands.w	r3, r3, #1
   230ca:	9304      	str	r3, [sp, #16]
   230cc:	f000 8411 	beq.w	238f2 <_vfiprintf_r+0xb42>
   230d0:	2330      	movs	r3, #48	; 0x30
   230d2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   230d6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   230da:	e792      	b.n	23002 <_vfiprintf_r+0x252>
   230dc:	2208      	movs	r2, #8
   230de:	2100      	movs	r1, #0
   230e0:	4650      	mov	r0, sl
   230e2:	f7f8 fca9 	bl	1ba38 <memset>
   230e6:	2301      	movs	r3, #1
   230e8:	441c      	add	r4, r3
   230ea:	e6ad      	b.n	22e48 <_vfiprintf_r+0x98>
   230ec:	20009328 	.word	0x20009328
   230f0:	ebb4 0608 	subs.w	r6, r4, r8
   230f4:	4605      	mov	r5, r0
   230f6:	d01b      	beq.n	23130 <_vfiprintf_r+0x380>
   230f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   230fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   230fc:	3301      	adds	r3, #1
   230fe:	4432      	add	r2, r6
   23100:	2b07      	cmp	r3, #7
   23102:	e9c9 8600 	strd	r8, r6, [r9]
   23106:	921a      	str	r2, [sp, #104]	; 0x68
   23108:	9319      	str	r3, [sp, #100]	; 0x64
   2310a:	dd1c      	ble.n	23146 <_vfiprintf_r+0x396>
   2310c:	2a00      	cmp	r2, #0
   2310e:	f000 83a6 	beq.w	2385e <_vfiprintf_r+0xaae>
   23112:	ee18 1a10 	vmov	r1, s16
   23116:	aa18      	add	r2, sp, #96	; 0x60
   23118:	4658      	mov	r0, fp
   2311a:	f7ff fe01 	bl	22d20 <_svfiprintf_r+0xd18>
   2311e:	bb20      	cbnz	r0, 2316a <_vfiprintf_r+0x3ba>
   23120:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23124:	9b05      	ldr	r3, [sp, #20]
   23126:	4433      	add	r3, r6
   23128:	9305      	str	r3, [sp, #20]
   2312a:	2d00      	cmp	r5, #0
   2312c:	f47f aea8 	bne.w	22e80 <_vfiprintf_r+0xd0>
   23130:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23132:	2b00      	cmp	r3, #0
   23134:	f040 85c1 	bne.w	23cba <_vfiprintf_r+0xf0a>
   23138:	ee18 3a10 	vmov	r3, s16
   2313c:	2200      	movs	r2, #0
   2313e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   23142:	9219      	str	r2, [sp, #100]	; 0x64
   23144:	e015      	b.n	23172 <_vfiprintf_r+0x3c2>
   23146:	f109 0908 	add.w	r9, r9, #8
   2314a:	e7eb      	b.n	23124 <_vfiprintf_r+0x374>
   2314c:	ee18 1a10 	vmov	r1, s16
   23150:	aa18      	add	r2, sp, #96	; 0x60
   23152:	4658      	mov	r0, fp
   23154:	f7ff fde4 	bl	22d20 <_svfiprintf_r+0xd18>
   23158:	2800      	cmp	r0, #0
   2315a:	f000 80a6 	beq.w	232aa <_vfiprintf_r+0x4fa>
   2315e:	9b08      	ldr	r3, [sp, #32]
   23160:	b11b      	cbz	r3, 2316a <_vfiprintf_r+0x3ba>
   23162:	9908      	ldr	r1, [sp, #32]
   23164:	4658      	mov	r0, fp
   23166:	f7fa f91d 	bl	1d3a4 <_free_r>
   2316a:	ee18 3a10 	vmov	r3, s16
   2316e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   23172:	ee18 2a10 	vmov	r2, s16
   23176:	6e52      	ldr	r2, [r2, #100]	; 0x64
   23178:	f012 0f01 	tst.w	r2, #1
   2317c:	b29a      	uxth	r2, r3
   2317e:	f000 80a0 	beq.w	232c2 <_vfiprintf_r+0x512>
   23182:	0650      	lsls	r0, r2, #25
   23184:	f100 85b2 	bmi.w	23cec <_vfiprintf_r+0xf3c>
   23188:	9805      	ldr	r0, [sp, #20]
   2318a:	b045      	add	sp, #276	; 0x114
   2318c:	ecbd 8b02 	vpop	{d8}
   23190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23194:	2900      	cmp	r1, #0
   23196:	d0cb      	beq.n	23130 <_vfiprintf_r+0x380>
   23198:	2300      	movs	r3, #0
   2319a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2319e:	2301      	movs	r3, #1
   231a0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   231a4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   231a8:	ac2b      	add	r4, sp, #172	; 0xac
   231aa:	2300      	movs	r3, #0
   231ac:	9308      	str	r3, [sp, #32]
   231ae:	461f      	mov	r7, r3
   231b0:	f016 0302 	ands.w	r3, r6, #2
   231b4:	9309      	str	r3, [sp, #36]	; 0x24
   231b6:	d002      	beq.n	231be <_vfiprintf_r+0x40e>
   231b8:	9b03      	ldr	r3, [sp, #12]
   231ba:	3302      	adds	r3, #2
   231bc:	9303      	str	r3, [sp, #12]
   231be:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   231c2:	930a      	str	r3, [sp, #40]	; 0x28
   231c4:	d105      	bne.n	231d2 <_vfiprintf_r+0x422>
   231c6:	9b06      	ldr	r3, [sp, #24]
   231c8:	9a03      	ldr	r2, [sp, #12]
   231ca:	1a9d      	subs	r5, r3, r2
   231cc:	2d00      	cmp	r5, #0
   231ce:	f300 827b 	bgt.w	236c8 <_vfiprintf_r+0x918>
   231d2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   231d6:	1c41      	adds	r1, r0, #1
   231d8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   231dc:	b182      	cbz	r2, 23200 <_vfiprintf_r+0x450>
   231de:	2201      	movs	r2, #1
   231e0:	3301      	adds	r3, #1
   231e2:	f8c9 2004 	str.w	r2, [r9, #4]
   231e6:	2907      	cmp	r1, #7
   231e8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   231ec:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   231f0:	f8c9 2000 	str.w	r2, [r9]
   231f4:	f300 824a 	bgt.w	2368c <_vfiprintf_r+0x8dc>
   231f8:	4608      	mov	r0, r1
   231fa:	f109 0908 	add.w	r9, r9, #8
   231fe:	3101      	adds	r1, #1
   23200:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23202:	b1e2      	cbz	r2, 2323e <_vfiprintf_r+0x48e>
   23204:	aa11      	add	r2, sp, #68	; 0x44
   23206:	3302      	adds	r3, #2
   23208:	f8c9 2000 	str.w	r2, [r9]
   2320c:	2907      	cmp	r1, #7
   2320e:	f04f 0202 	mov.w	r2, #2
   23212:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   23216:	f8c9 2004 	str.w	r2, [r9, #4]
   2321a:	f340 8250 	ble.w	236be <_vfiprintf_r+0x90e>
   2321e:	2b00      	cmp	r3, #0
   23220:	f000 8343 	beq.w	238aa <_vfiprintf_r+0xafa>
   23224:	ee18 1a10 	vmov	r1, s16
   23228:	aa18      	add	r2, sp, #96	; 0x60
   2322a:	4658      	mov	r0, fp
   2322c:	f7ff fd78 	bl	22d20 <_svfiprintf_r+0xd18>
   23230:	2800      	cmp	r0, #0
   23232:	d194      	bne.n	2315e <_vfiprintf_r+0x3ae>
   23234:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   23238:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2323c:	1c41      	adds	r1, r0, #1
   2323e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23240:	2a80      	cmp	r2, #128	; 0x80
   23242:	f000 8184 	beq.w	2354e <_vfiprintf_r+0x79e>
   23246:	9a04      	ldr	r2, [sp, #16]
   23248:	1abd      	subs	r5, r7, r2
   2324a:	2d00      	cmp	r5, #0
   2324c:	f300 81d7 	bgt.w	235fe <_vfiprintf_r+0x84e>
   23250:	9a04      	ldr	r2, [sp, #16]
   23252:	f8c9 4000 	str.w	r4, [r9]
   23256:	4413      	add	r3, r2
   23258:	2907      	cmp	r1, #7
   2325a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   2325e:	f8c9 2004 	str.w	r2, [r9, #4]
   23262:	f340 816e 	ble.w	23542 <_vfiprintf_r+0x792>
   23266:	2b00      	cmp	r3, #0
   23268:	f000 8275 	beq.w	23756 <_vfiprintf_r+0x9a6>
   2326c:	ee18 1a10 	vmov	r1, s16
   23270:	aa18      	add	r2, sp, #96	; 0x60
   23272:	4658      	mov	r0, fp
   23274:	f7ff fd54 	bl	22d20 <_svfiprintf_r+0xd18>
   23278:	2800      	cmp	r0, #0
   2327a:	f47f af70 	bne.w	2315e <_vfiprintf_r+0x3ae>
   2327e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23280:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23284:	0775      	lsls	r5, r6, #29
   23286:	d505      	bpl.n	23294 <_vfiprintf_r+0x4e4>
   23288:	9a06      	ldr	r2, [sp, #24]
   2328a:	9903      	ldr	r1, [sp, #12]
   2328c:	1a54      	subs	r4, r2, r1
   2328e:	2c00      	cmp	r4, #0
   23290:	f300 826b 	bgt.w	2376a <_vfiprintf_r+0x9ba>
   23294:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   23298:	9803      	ldr	r0, [sp, #12]
   2329a:	4281      	cmp	r1, r0
   2329c:	bfac      	ite	ge
   2329e:	1852      	addge	r2, r2, r1
   232a0:	1812      	addlt	r2, r2, r0
   232a2:	9205      	str	r2, [sp, #20]
   232a4:	2b00      	cmp	r3, #0
   232a6:	f47f af51 	bne.w	2314c <_vfiprintf_r+0x39c>
   232aa:	9908      	ldr	r1, [sp, #32]
   232ac:	2300      	movs	r3, #0
   232ae:	9319      	str	r3, [sp, #100]	; 0x64
   232b0:	2900      	cmp	r1, #0
   232b2:	f000 8149 	beq.w	23548 <_vfiprintf_r+0x798>
   232b6:	4658      	mov	r0, fp
   232b8:	f7fa f874 	bl	1d3a4 <_free_r>
   232bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   232c0:	e5c1      	b.n	22e46 <_vfiprintf_r+0x96>
   232c2:	059c      	lsls	r4, r3, #22
   232c4:	f53f af5d 	bmi.w	23182 <_vfiprintf_r+0x3d2>
   232c8:	ee18 4a10 	vmov	r4, s16
   232cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   232ce:	f7f9 fd31 	bl	1cd34 <__retarget_lock_release_recursive>
   232d2:	89a2      	ldrh	r2, [r4, #12]
   232d4:	e755      	b.n	23182 <_vfiprintf_r+0x3d2>
   232d6:	06f0      	lsls	r0, r6, #27
   232d8:	9a07      	ldr	r2, [sp, #28]
   232da:	f100 831f 	bmi.w	2391c <_vfiprintf_r+0xb6c>
   232de:	0671      	lsls	r1, r6, #25
   232e0:	f140 8319 	bpl.w	23916 <_vfiprintf_r+0xb66>
   232e4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   232e8:	9207      	str	r2, [sp, #28]
   232ea:	17da      	asrs	r2, r3, #31
   232ec:	4611      	mov	r1, r2
   232ee:	e66e      	b.n	22fce <_vfiprintf_r+0x21e>
   232f0:	f016 0310 	ands.w	r3, r6, #16
   232f4:	9907      	ldr	r1, [sp, #28]
   232f6:	f040 8309 	bne.w	2390c <_vfiprintf_r+0xb5c>
   232fa:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   232fe:	f000 8301 	beq.w	23904 <_vfiprintf_r+0xb54>
   23302:	461a      	mov	r2, r3
   23304:	f851 3b04 	ldr.w	r3, [r1], #4
   23308:	9107      	str	r1, [sp, #28]
   2330a:	b29b      	uxth	r3, r3
   2330c:	e6c3      	b.n	23096 <_vfiprintf_r+0x2e6>
   2330e:	9b07      	ldr	r3, [sp, #28]
   23310:	461a      	mov	r2, r3
   23312:	2300      	movs	r3, #0
   23314:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   23318:	4613      	mov	r3, r2
   2331a:	f853 4b04 	ldr.w	r4, [r3], #4
   2331e:	9303      	str	r3, [sp, #12]
   23320:	2c00      	cmp	r4, #0
   23322:	f000 8412 	beq.w	23b4a <_vfiprintf_r+0xd9a>
   23326:	2953      	cmp	r1, #83	; 0x53
   23328:	f000 8365 	beq.w	239f6 <_vfiprintf_r+0xc46>
   2332c:	f016 0510 	ands.w	r5, r6, #16
   23330:	f040 8361 	bne.w	239f6 <_vfiprintf_r+0xc46>
   23334:	1c7b      	adds	r3, r7, #1
   23336:	f000 84b3 	beq.w	23ca0 <_vfiprintf_r+0xef0>
   2333a:	463a      	mov	r2, r7
   2333c:	4629      	mov	r1, r5
   2333e:	4620      	mov	r0, r4
   23340:	f7f9 fece 	bl	1d0e0 <memchr>
   23344:	9008      	str	r0, [sp, #32]
   23346:	2800      	cmp	r0, #0
   23348:	f000 849f 	beq.w	23c8a <_vfiprintf_r+0xeda>
   2334c:	1b03      	subs	r3, r0, r4
   2334e:	9a03      	ldr	r2, [sp, #12]
   23350:	9304      	str	r3, [sp, #16]
   23352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23356:	462f      	mov	r7, r5
   23358:	9207      	str	r2, [sp, #28]
   2335a:	9303      	str	r3, [sp, #12]
   2335c:	9508      	str	r5, [sp, #32]
   2335e:	e657      	b.n	23010 <_vfiprintf_r+0x260>
   23360:	2943      	cmp	r1, #67	; 0x43
   23362:	d002      	beq.n	2336a <_vfiprintf_r+0x5ba>
   23364:	06f5      	lsls	r5, r6, #27
   23366:	f140 832d 	bpl.w	239c4 <_vfiprintf_r+0xc14>
   2336a:	9d07      	ldr	r5, [sp, #28]
   2336c:	2208      	movs	r2, #8
   2336e:	2100      	movs	r1, #0
   23370:	a816      	add	r0, sp, #88	; 0x58
   23372:	ac2b      	add	r4, sp, #172	; 0xac
   23374:	f7f8 fb60 	bl	1ba38 <memset>
   23378:	ab16      	add	r3, sp, #88	; 0x58
   2337a:	f855 2b04 	ldr.w	r2, [r5], #4
   2337e:	4621      	mov	r1, r4
   23380:	4658      	mov	r0, fp
   23382:	f7fe fd2f 	bl	21de4 <_wcrtomb_r>
   23386:	4603      	mov	r3, r0
   23388:	3301      	adds	r3, #1
   2338a:	9004      	str	r0, [sp, #16]
   2338c:	f000 84b3 	beq.w	23cf6 <_vfiprintf_r+0xf46>
   23390:	9b04      	ldr	r3, [sp, #16]
   23392:	9507      	str	r5, [sp, #28]
   23394:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23398:	9303      	str	r3, [sp, #12]
   2339a:	2300      	movs	r3, #0
   2339c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   233a0:	e703      	b.n	231aa <_vfiprintf_r+0x3fa>
   233a2:	9b07      	ldr	r3, [sp, #28]
   233a4:	f853 2b04 	ldr.w	r2, [r3], #4
   233a8:	9206      	str	r2, [sp, #24]
   233aa:	2a00      	cmp	r2, #0
   233ac:	f280 829c 	bge.w	238e8 <_vfiprintf_r+0xb38>
   233b0:	9a06      	ldr	r2, [sp, #24]
   233b2:	4252      	negs	r2, r2
   233b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   233b8:	f898 1000 	ldrb.w	r1, [r8]
   233bc:	f046 0604 	orr.w	r6, r6, #4
   233c0:	e569      	b.n	22e96 <_vfiprintf_r+0xe6>
   233c2:	f898 1000 	ldrb.w	r1, [r8]
   233c6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   233ca:	e564      	b.n	22e96 <_vfiprintf_r+0xe6>
   233cc:	f898 1000 	ldrb.w	r1, [r8]
   233d0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   233d4:	e55f      	b.n	22e96 <_vfiprintf_r+0xe6>
   233d6:	4642      	mov	r2, r8
   233d8:	f812 1b01 	ldrb.w	r1, [r2], #1
   233dc:	292a      	cmp	r1, #42	; 0x2a
   233de:	f000 8496 	beq.w	23d0e <_vfiprintf_r+0xf5e>
   233e2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   233e6:	2b09      	cmp	r3, #9
   233e8:	4690      	mov	r8, r2
   233ea:	f04f 0700 	mov.w	r7, #0
   233ee:	f63f ad54 	bhi.w	22e9a <_vfiprintf_r+0xea>
   233f2:	f818 1b01 	ldrb.w	r1, [r8], #1
   233f6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   233fa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   233fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   23402:	2b09      	cmp	r3, #9
   23404:	d9f5      	bls.n	233f2 <_vfiprintf_r+0x642>
   23406:	e548      	b.n	22e9a <_vfiprintf_r+0xea>
   23408:	f898 1000 	ldrb.w	r1, [r8]
   2340c:	f046 0601 	orr.w	r6, r6, #1
   23410:	e541      	b.n	22e96 <_vfiprintf_r+0xe6>
   23412:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   23416:	2b00      	cmp	r3, #0
   23418:	f47f adc2 	bne.w	22fa0 <_vfiprintf_r+0x1f0>
   2341c:	2320      	movs	r3, #32
   2341e:	f898 1000 	ldrb.w	r1, [r8]
   23422:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   23426:	e536      	b.n	22e96 <_vfiprintf_r+0xe6>
   23428:	f898 1000 	ldrb.w	r1, [r8]
   2342c:	296c      	cmp	r1, #108	; 0x6c
   2342e:	bf03      	ittte	eq
   23430:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   23434:	f046 0620 	orreq.w	r6, r6, #32
   23438:	f108 0801 	addeq.w	r8, r8, #1
   2343c:	f046 0610 	orrne.w	r6, r6, #16
   23440:	e529      	b.n	22e96 <_vfiprintf_r+0xe6>
   23442:	f898 1000 	ldrb.w	r1, [r8]
   23446:	2968      	cmp	r1, #104	; 0x68
   23448:	bf03      	ittte	eq
   2344a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   2344e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   23452:	f108 0801 	addeq.w	r8, r8, #1
   23456:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   2345a:	e51c      	b.n	22e96 <_vfiprintf_r+0xe6>
   2345c:	f046 0310 	orr.w	r3, r6, #16
   23460:	9303      	str	r3, [sp, #12]
   23462:	9b03      	ldr	r3, [sp, #12]
   23464:	f013 0220 	ands.w	r2, r3, #32
   23468:	f000 8206 	beq.w	23878 <_vfiprintf_r+0xac8>
   2346c:	9b07      	ldr	r3, [sp, #28]
   2346e:	3307      	adds	r3, #7
   23470:	f023 0307 	bic.w	r3, r3, #7
   23474:	4619      	mov	r1, r3
   23476:	685a      	ldr	r2, [r3, #4]
   23478:	f851 3b08 	ldr.w	r3, [r1], #8
   2347c:	9107      	str	r1, [sp, #28]
   2347e:	2101      	movs	r1, #1
   23480:	e60d      	b.n	2309e <_vfiprintf_r+0x2ee>
   23482:	9a07      	ldr	r2, [sp, #28]
   23484:	f046 0302 	orr.w	r3, r6, #2
   23488:	9303      	str	r3, [sp, #12]
   2348a:	f852 3b04 	ldr.w	r3, [r2], #4
   2348e:	9207      	str	r2, [sp, #28]
   23490:	f647 0230 	movw	r2, #30768	; 0x7830
   23494:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   23498:	4ab8      	ldr	r2, [pc, #736]	; (2377c <_vfiprintf_r+0x9cc>)
   2349a:	920c      	str	r2, [sp, #48]	; 0x30
   2349c:	2102      	movs	r1, #2
   2349e:	2200      	movs	r2, #0
   234a0:	e5fd      	b.n	2309e <_vfiprintf_r+0x2ee>
   234a2:	06b7      	lsls	r7, r6, #26
   234a4:	f100 8248 	bmi.w	23938 <_vfiprintf_r+0xb88>
   234a8:	06f5      	lsls	r5, r6, #27
   234aa:	f100 8346 	bmi.w	23b3a <_vfiprintf_r+0xd8a>
   234ae:	0674      	lsls	r4, r6, #25
   234b0:	f100 83d5 	bmi.w	23c5e <_vfiprintf_r+0xeae>
   234b4:	05b0      	lsls	r0, r6, #22
   234b6:	f140 8340 	bpl.w	23b3a <_vfiprintf_r+0xd8a>
   234ba:	9b07      	ldr	r3, [sp, #28]
   234bc:	9905      	ldr	r1, [sp, #20]
   234be:	f853 2b04 	ldr.w	r2, [r3], #4
   234c2:	9307      	str	r3, [sp, #28]
   234c4:	7011      	strb	r1, [r2, #0]
   234c6:	e4be      	b.n	22e46 <_vfiprintf_r+0x96>
   234c8:	9603      	str	r6, [sp, #12]
   234ca:	2901      	cmp	r1, #1
   234cc:	f43f ad8c 	beq.w	22fe8 <_vfiprintf_r+0x238>
   234d0:	2902      	cmp	r1, #2
   234d2:	ac44      	add	r4, sp, #272	; 0x110
   234d4:	d111      	bne.n	234fa <_vfiprintf_r+0x74a>
   234d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   234d8:	f003 010f 	and.w	r1, r3, #15
   234dc:	091b      	lsrs	r3, r3, #4
   234de:	5c41      	ldrb	r1, [r0, r1]
   234e0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   234e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   234e8:	0912      	lsrs	r2, r2, #4
   234ea:	ea53 0102 	orrs.w	r1, r3, r2
   234ee:	d1f3      	bne.n	234d8 <_vfiprintf_r+0x728>
   234f0:	9e03      	ldr	r6, [sp, #12]
   234f2:	ab44      	add	r3, sp, #272	; 0x110
   234f4:	1b1b      	subs	r3, r3, r4
   234f6:	9304      	str	r3, [sp, #16]
   234f8:	e583      	b.n	23002 <_vfiprintf_r+0x252>
   234fa:	f003 0107 	and.w	r1, r3, #7
   234fe:	08db      	lsrs	r3, r3, #3
   23500:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   23504:	08d2      	lsrs	r2, r2, #3
   23506:	3130      	adds	r1, #48	; 0x30
   23508:	ea53 0502 	orrs.w	r5, r3, r2
   2350c:	4620      	mov	r0, r4
   2350e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   23512:	d1f2      	bne.n	234fa <_vfiprintf_r+0x74a>
   23514:	9e03      	ldr	r6, [sp, #12]
   23516:	07f3      	lsls	r3, r6, #31
   23518:	d5eb      	bpl.n	234f2 <_vfiprintf_r+0x742>
   2351a:	2930      	cmp	r1, #48	; 0x30
   2351c:	d0e8      	beq.n	234f0 <_vfiprintf_r+0x740>
   2351e:	2330      	movs	r3, #48	; 0x30
   23520:	3802      	subs	r0, #2
   23522:	f804 3c01 	strb.w	r3, [r4, #-1]
   23526:	ab44      	add	r3, sp, #272	; 0x110
   23528:	1a1b      	subs	r3, r3, r0
   2352a:	9e03      	ldr	r6, [sp, #12]
   2352c:	9304      	str	r3, [sp, #16]
   2352e:	4604      	mov	r4, r0
   23530:	e567      	b.n	23002 <_vfiprintf_r+0x252>
   23532:	9b04      	ldr	r3, [sp, #16]
   23534:	941b      	str	r4, [sp, #108]	; 0x6c
   23536:	2201      	movs	r2, #1
   23538:	931c      	str	r3, [sp, #112]	; 0x70
   2353a:	931a      	str	r3, [sp, #104]	; 0x68
   2353c:	9219      	str	r2, [sp, #100]	; 0x64
   2353e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23542:	f109 0908 	add.w	r9, r9, #8
   23546:	e69d      	b.n	23284 <_vfiprintf_r+0x4d4>
   23548:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2354c:	e47b      	b.n	22e46 <_vfiprintf_r+0x96>
   2354e:	9a06      	ldr	r2, [sp, #24]
   23550:	9d03      	ldr	r5, [sp, #12]
   23552:	1b55      	subs	r5, r2, r5
   23554:	2d00      	cmp	r5, #0
   23556:	f77f ae76 	ble.w	23246 <_vfiprintf_r+0x496>
   2355a:	2d10      	cmp	r5, #16
   2355c:	f340 83bb 	ble.w	23cd6 <_vfiprintf_r+0xf26>
   23560:	9409      	str	r4, [sp, #36]	; 0x24
   23562:	ee18 4a10 	vmov	r4, s16
   23566:	e007      	b.n	23578 <_vfiprintf_r+0x7c8>
   23568:	f100 0c02 	add.w	ip, r0, #2
   2356c:	f109 0908 	add.w	r9, r9, #8
   23570:	4610      	mov	r0, r2
   23572:	3d10      	subs	r5, #16
   23574:	2d10      	cmp	r5, #16
   23576:	dd1e      	ble.n	235b6 <_vfiprintf_r+0x806>
   23578:	4981      	ldr	r1, [pc, #516]	; (23780 <_vfiprintf_r+0x9d0>)
   2357a:	f8c9 1000 	str.w	r1, [r9]
   2357e:	1c42      	adds	r2, r0, #1
   23580:	3310      	adds	r3, #16
   23582:	2110      	movs	r1, #16
   23584:	2a07      	cmp	r2, #7
   23586:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   2358a:	f8c9 1004 	str.w	r1, [r9, #4]
   2358e:	ddeb      	ble.n	23568 <_vfiprintf_r+0x7b8>
   23590:	aa18      	add	r2, sp, #96	; 0x60
   23592:	2b00      	cmp	r3, #0
   23594:	d074      	beq.n	23680 <_vfiprintf_r+0x8d0>
   23596:	4621      	mov	r1, r4
   23598:	4658      	mov	r0, fp
   2359a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2359e:	f7ff fbbf 	bl	22d20 <_svfiprintf_r+0xd18>
   235a2:	2800      	cmp	r0, #0
   235a4:	f47f addb 	bne.w	2315e <_vfiprintf_r+0x3ae>
   235a8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   235ac:	3d10      	subs	r5, #16
   235ae:	2d10      	cmp	r5, #16
   235b0:	f100 0c01 	add.w	ip, r0, #1
   235b4:	dce0      	bgt.n	23578 <_vfiprintf_r+0x7c8>
   235b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   235b8:	4a71      	ldr	r2, [pc, #452]	; (23780 <_vfiprintf_r+0x9d0>)
   235ba:	f8c9 5004 	str.w	r5, [r9, #4]
   235be:	442b      	add	r3, r5
   235c0:	f1bc 0f07 	cmp.w	ip, #7
   235c4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   235c8:	f8c9 2000 	str.w	r2, [r9]
   235cc:	f340 8194 	ble.w	238f8 <_vfiprintf_r+0xb48>
   235d0:	2b00      	cmp	r3, #0
   235d2:	f000 831f 	beq.w	23c14 <_vfiprintf_r+0xe64>
   235d6:	ee18 1a10 	vmov	r1, s16
   235da:	aa18      	add	r2, sp, #96	; 0x60
   235dc:	4658      	mov	r0, fp
   235de:	f7ff fb9f 	bl	22d20 <_svfiprintf_r+0xd18>
   235e2:	2800      	cmp	r0, #0
   235e4:	f47f adbb 	bne.w	2315e <_vfiprintf_r+0x3ae>
   235e8:	9a04      	ldr	r2, [sp, #16]
   235ea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   235ee:	1abd      	subs	r5, r7, r2
   235f0:	2d00      	cmp	r5, #0
   235f2:	f100 0101 	add.w	r1, r0, #1
   235f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   235fa:	f77f ae29 	ble.w	23250 <_vfiprintf_r+0x4a0>
   235fe:	2d10      	cmp	r5, #16
   23600:	dd29      	ble.n	23656 <_vfiprintf_r+0x8a6>
   23602:	9409      	str	r4, [sp, #36]	; 0x24
   23604:	2710      	movs	r7, #16
   23606:	ee18 4a10 	vmov	r4, s16
   2360a:	e007      	b.n	2361c <_vfiprintf_r+0x86c>
   2360c:	f100 0c02 	add.w	ip, r0, #2
   23610:	f109 0908 	add.w	r9, r9, #8
   23614:	4610      	mov	r0, r2
   23616:	3d10      	subs	r5, #16
   23618:	2d10      	cmp	r5, #16
   2361a:	dd1a      	ble.n	23652 <_vfiprintf_r+0x8a2>
   2361c:	1c42      	adds	r2, r0, #1
   2361e:	4958      	ldr	r1, [pc, #352]	; (23780 <_vfiprintf_r+0x9d0>)
   23620:	3310      	adds	r3, #16
   23622:	2a07      	cmp	r2, #7
   23624:	e9c9 1700 	strd	r1, r7, [r9]
   23628:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   2362c:	ddee      	ble.n	2360c <_vfiprintf_r+0x85c>
   2362e:	aa18      	add	r2, sp, #96	; 0x60
   23630:	b303      	cbz	r3, 23674 <_vfiprintf_r+0x8c4>
   23632:	4621      	mov	r1, r4
   23634:	4658      	mov	r0, fp
   23636:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2363a:	f7ff fb71 	bl	22d20 <_svfiprintf_r+0xd18>
   2363e:	2800      	cmp	r0, #0
   23640:	f47f ad8d 	bne.w	2315e <_vfiprintf_r+0x3ae>
   23644:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   23648:	3d10      	subs	r5, #16
   2364a:	2d10      	cmp	r5, #16
   2364c:	f100 0c01 	add.w	ip, r0, #1
   23650:	dce4      	bgt.n	2361c <_vfiprintf_r+0x86c>
   23652:	9c09      	ldr	r4, [sp, #36]	; 0x24
   23654:	4661      	mov	r1, ip
   23656:	4a4a      	ldr	r2, [pc, #296]	; (23780 <_vfiprintf_r+0x9d0>)
   23658:	f8c9 5004 	str.w	r5, [r9, #4]
   2365c:	442b      	add	r3, r5
   2365e:	2907      	cmp	r1, #7
   23660:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   23664:	f8c9 2000 	str.w	r2, [r9]
   23668:	f300 80e7 	bgt.w	2383a <_vfiprintf_r+0xa8a>
   2366c:	f109 0908 	add.w	r9, r9, #8
   23670:	3101      	adds	r1, #1
   23672:	e5ed      	b.n	23250 <_vfiprintf_r+0x4a0>
   23674:	f04f 0c01 	mov.w	ip, #1
   23678:	4618      	mov	r0, r3
   2367a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2367e:	e7ca      	b.n	23616 <_vfiprintf_r+0x866>
   23680:	f04f 0c01 	mov.w	ip, #1
   23684:	4618      	mov	r0, r3
   23686:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2368a:	e772      	b.n	23572 <_vfiprintf_r+0x7c2>
   2368c:	2b00      	cmp	r3, #0
   2368e:	f000 8104 	beq.w	2389a <_vfiprintf_r+0xaea>
   23692:	ee18 1a10 	vmov	r1, s16
   23696:	aa18      	add	r2, sp, #96	; 0x60
   23698:	4658      	mov	r0, fp
   2369a:	f7ff fb41 	bl	22d20 <_svfiprintf_r+0xd18>
   2369e:	2800      	cmp	r0, #0
   236a0:	f47f ad5d 	bne.w	2315e <_vfiprintf_r+0x3ae>
   236a4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   236a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   236ac:	1c41      	adds	r1, r0, #1
   236ae:	e5a7      	b.n	23200 <_vfiprintf_r+0x450>
   236b0:	2302      	movs	r3, #2
   236b2:	aa11      	add	r2, sp, #68	; 0x44
   236b4:	931c      	str	r3, [sp, #112]	; 0x70
   236b6:	921b      	str	r2, [sp, #108]	; 0x6c
   236b8:	2101      	movs	r1, #1
   236ba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   236be:	4608      	mov	r0, r1
   236c0:	f109 0908 	add.w	r9, r9, #8
   236c4:	1c41      	adds	r1, r0, #1
   236c6:	e5ba      	b.n	2323e <_vfiprintf_r+0x48e>
   236c8:	2d10      	cmp	r5, #16
   236ca:	f340 82e5 	ble.w	23c98 <_vfiprintf_r+0xee8>
   236ce:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   236d2:	940f      	str	r4, [sp, #60]	; 0x3c
   236d4:	4608      	mov	r0, r1
   236d6:	ee18 4a10 	vmov	r4, s16
   236da:	e007      	b.n	236ec <_vfiprintf_r+0x93c>
   236dc:	f100 0c02 	add.w	ip, r0, #2
   236e0:	f109 0908 	add.w	r9, r9, #8
   236e4:	4610      	mov	r0, r2
   236e6:	3d10      	subs	r5, #16
   236e8:	2d10      	cmp	r5, #16
   236ea:	dd1d      	ble.n	23728 <_vfiprintf_r+0x978>
   236ec:	4925      	ldr	r1, [pc, #148]	; (23784 <_vfiprintf_r+0x9d4>)
   236ee:	f8c9 1000 	str.w	r1, [r9]
   236f2:	1c42      	adds	r2, r0, #1
   236f4:	3310      	adds	r3, #16
   236f6:	2110      	movs	r1, #16
   236f8:	2a07      	cmp	r2, #7
   236fa:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   236fe:	f8c9 1004 	str.w	r1, [r9, #4]
   23702:	ddeb      	ble.n	236dc <_vfiprintf_r+0x92c>
   23704:	aa18      	add	r2, sp, #96	; 0x60
   23706:	b303      	cbz	r3, 2374a <_vfiprintf_r+0x99a>
   23708:	4621      	mov	r1, r4
   2370a:	4658      	mov	r0, fp
   2370c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23710:	f7ff fb06 	bl	22d20 <_svfiprintf_r+0xd18>
   23714:	2800      	cmp	r0, #0
   23716:	f47f ad22 	bne.w	2315e <_vfiprintf_r+0x3ae>
   2371a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   2371e:	3d10      	subs	r5, #16
   23720:	2d10      	cmp	r5, #16
   23722:	f100 0c01 	add.w	ip, r0, #1
   23726:	dce1      	bgt.n	236ec <_vfiprintf_r+0x93c>
   23728:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2372a:	4660      	mov	r0, ip
   2372c:	4a15      	ldr	r2, [pc, #84]	; (23784 <_vfiprintf_r+0x9d4>)
   2372e:	f8c9 5004 	str.w	r5, [r9, #4]
   23732:	442b      	add	r3, r5
   23734:	2807      	cmp	r0, #7
   23736:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   2373a:	f8c9 2000 	str.w	r2, [r9]
   2373e:	f300 80c1 	bgt.w	238c4 <_vfiprintf_r+0xb14>
   23742:	f109 0908 	add.w	r9, r9, #8
   23746:	1c41      	adds	r1, r0, #1
   23748:	e546      	b.n	231d8 <_vfiprintf_r+0x428>
   2374a:	4618      	mov	r0, r3
   2374c:	f04f 0c01 	mov.w	ip, #1
   23750:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23754:	e7c7      	b.n	236e6 <_vfiprintf_r+0x936>
   23756:	0776      	lsls	r6, r6, #29
   23758:	9319      	str	r3, [sp, #100]	; 0x64
   2375a:	d553      	bpl.n	23804 <_vfiprintf_r+0xa54>
   2375c:	9a06      	ldr	r2, [sp, #24]
   2375e:	9903      	ldr	r1, [sp, #12]
   23760:	1a54      	subs	r4, r2, r1
   23762:	2c00      	cmp	r4, #0
   23764:	dd4e      	ble.n	23804 <_vfiprintf_r+0xa54>
   23766:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2376a:	2c10      	cmp	r4, #16
   2376c:	f340 82b0 	ble.w	23cd0 <_vfiprintf_r+0xf20>
   23770:	9919      	ldr	r1, [sp, #100]	; 0x64
   23772:	ee18 6a10 	vmov	r6, s16
   23776:	2510      	movs	r5, #16
   23778:	e00d      	b.n	23796 <_vfiprintf_r+0x9e6>
   2377a:	bf00      	nop
   2377c:	20008c88 	.word	0x20008c88
   23780:	2000263c 	.word	0x2000263c
   23784:	2000262c 	.word	0x2000262c
   23788:	1c88      	adds	r0, r1, #2
   2378a:	f109 0908 	add.w	r9, r9, #8
   2378e:	4611      	mov	r1, r2
   23790:	3c10      	subs	r4, #16
   23792:	2c10      	cmp	r4, #16
   23794:	dd1a      	ble.n	237cc <_vfiprintf_r+0xa1c>
   23796:	1c4a      	adds	r2, r1, #1
   23798:	48b3      	ldr	r0, [pc, #716]	; (23a68 <_vfiprintf_r+0xcb8>)
   2379a:	3310      	adds	r3, #16
   2379c:	2a07      	cmp	r2, #7
   2379e:	e9c9 0500 	strd	r0, r5, [r9]
   237a2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   237a6:	ddef      	ble.n	23788 <_vfiprintf_r+0x9d8>
   237a8:	aa18      	add	r2, sp, #96	; 0x60
   237aa:	b333      	cbz	r3, 237fa <_vfiprintf_r+0xa4a>
   237ac:	4631      	mov	r1, r6
   237ae:	4658      	mov	r0, fp
   237b0:	f7ff fab6 	bl	22d20 <_svfiprintf_r+0xd18>
   237b4:	2800      	cmp	r0, #0
   237b6:	f47f acd2 	bne.w	2315e <_vfiprintf_r+0x3ae>
   237ba:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   237be:	3c10      	subs	r4, #16
   237c0:	2c10      	cmp	r4, #16
   237c2:	f101 0001 	add.w	r0, r1, #1
   237c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   237ca:	dce4      	bgt.n	23796 <_vfiprintf_r+0x9e6>
   237cc:	4aa6      	ldr	r2, [pc, #664]	; (23a68 <_vfiprintf_r+0xcb8>)
   237ce:	f8c9 4004 	str.w	r4, [r9, #4]
   237d2:	4423      	add	r3, r4
   237d4:	2807      	cmp	r0, #7
   237d6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   237da:	f8c9 2000 	str.w	r2, [r9]
   237de:	f77f ad59 	ble.w	23294 <_vfiprintf_r+0x4e4>
   237e2:	b17b      	cbz	r3, 23804 <_vfiprintf_r+0xa54>
   237e4:	ee18 1a10 	vmov	r1, s16
   237e8:	aa18      	add	r2, sp, #96	; 0x60
   237ea:	4658      	mov	r0, fp
   237ec:	f7ff fa98 	bl	22d20 <_svfiprintf_r+0xd18>
   237f0:	2800      	cmp	r0, #0
   237f2:	f47f acb4 	bne.w	2315e <_vfiprintf_r+0x3ae>
   237f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   237f8:	e54c      	b.n	23294 <_vfiprintf_r+0x4e4>
   237fa:	2001      	movs	r0, #1
   237fc:	4619      	mov	r1, r3
   237fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23802:	e7c5      	b.n	23790 <_vfiprintf_r+0x9e0>
   23804:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   23808:	9903      	ldr	r1, [sp, #12]
   2380a:	428a      	cmp	r2, r1
   2380c:	bfac      	ite	ge
   2380e:	189b      	addge	r3, r3, r2
   23810:	185b      	addlt	r3, r3, r1
   23812:	9305      	str	r3, [sp, #20]
   23814:	e549      	b.n	232aa <_vfiprintf_r+0x4fa>
   23816:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   2381a:	058f      	lsls	r7, r1, #22
   2381c:	ee18 3a10 	vmov	r3, s16
   23820:	b28a      	uxth	r2, r1
   23822:	f53f aae8 	bmi.w	22df6 <_vfiprintf_r+0x46>
   23826:	ee18 5a10 	vmov	r5, s16
   2382a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   2382c:	f7f9 fa7a 	bl	1cd24 <__retarget_lock_acquire_recursive>
   23830:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   23834:	b28a      	uxth	r2, r1
   23836:	f7ff bade 	b.w	22df6 <_vfiprintf_r+0x46>
   2383a:	2b00      	cmp	r3, #0
   2383c:	f43f ae79 	beq.w	23532 <_vfiprintf_r+0x782>
   23840:	ee18 1a10 	vmov	r1, s16
   23844:	aa18      	add	r2, sp, #96	; 0x60
   23846:	4658      	mov	r0, fp
   23848:	f7ff fa6a 	bl	22d20 <_svfiprintf_r+0xd18>
   2384c:	2800      	cmp	r0, #0
   2384e:	f47f ac86 	bne.w	2315e <_vfiprintf_r+0x3ae>
   23852:	9919      	ldr	r1, [sp, #100]	; 0x64
   23854:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23856:	3101      	adds	r1, #1
   23858:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2385c:	e4f8      	b.n	23250 <_vfiprintf_r+0x4a0>
   2385e:	9219      	str	r2, [sp, #100]	; 0x64
   23860:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23864:	e45e      	b.n	23124 <_vfiprintf_r+0x374>
   23866:	2f00      	cmp	r7, #0
   23868:	f47f abc3 	bne.w	22ff2 <_vfiprintf_r+0x242>
   2386c:	9e03      	ldr	r6, [sp, #12]
   2386e:	2700      	movs	r7, #0
   23870:	9704      	str	r7, [sp, #16]
   23872:	ac44      	add	r4, sp, #272	; 0x110
   23874:	f7ff bbc5 	b.w	23002 <_vfiprintf_r+0x252>
   23878:	9b03      	ldr	r3, [sp, #12]
   2387a:	f013 0310 	ands.w	r3, r3, #16
   2387e:	d154      	bne.n	2392a <_vfiprintf_r+0xb7a>
   23880:	9a03      	ldr	r2, [sp, #12]
   23882:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   23886:	f000 816b 	beq.w	23b60 <_vfiprintf_r+0xdb0>
   2388a:	9907      	ldr	r1, [sp, #28]
   2388c:	461a      	mov	r2, r3
   2388e:	f851 3b04 	ldr.w	r3, [r1], #4
   23892:	9107      	str	r1, [sp, #28]
   23894:	b29b      	uxth	r3, r3
   23896:	2101      	movs	r1, #1
   23898:	e401      	b.n	2309e <_vfiprintf_r+0x2ee>
   2389a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2389c:	2a00      	cmp	r2, #0
   2389e:	d164      	bne.n	2396a <_vfiprintf_r+0xbba>
   238a0:	4618      	mov	r0, r3
   238a2:	2101      	movs	r1, #1
   238a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   238a8:	e4c9      	b.n	2323e <_vfiprintf_r+0x48e>
   238aa:	2101      	movs	r1, #1
   238ac:	4618      	mov	r0, r3
   238ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   238b2:	e4c4      	b.n	2323e <_vfiprintf_r+0x48e>
   238b4:	425b      	negs	r3, r3
   238b6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   238ba:	9603      	str	r6, [sp, #12]
   238bc:	202d      	movs	r0, #45	; 0x2d
   238be:	2101      	movs	r1, #1
   238c0:	f7ff bbee 	b.w	230a0 <_vfiprintf_r+0x2f0>
   238c4:	2b00      	cmp	r3, #0
   238c6:	f000 8088 	beq.w	239da <_vfiprintf_r+0xc2a>
   238ca:	ee18 1a10 	vmov	r1, s16
   238ce:	aa18      	add	r2, sp, #96	; 0x60
   238d0:	4658      	mov	r0, fp
   238d2:	f7ff fa25 	bl	22d20 <_svfiprintf_r+0xd18>
   238d6:	2800      	cmp	r0, #0
   238d8:	f47f ac41 	bne.w	2315e <_vfiprintf_r+0x3ae>
   238dc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   238e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   238e4:	1c41      	adds	r1, r0, #1
   238e6:	e477      	b.n	231d8 <_vfiprintf_r+0x428>
   238e8:	f898 1000 	ldrb.w	r1, [r8]
   238ec:	9307      	str	r3, [sp, #28]
   238ee:	f7ff bad2 	b.w	22e96 <_vfiprintf_r+0xe6>
   238f2:	ac44      	add	r4, sp, #272	; 0x110
   238f4:	f7ff bb85 	b.w	23002 <_vfiprintf_r+0x252>
   238f8:	f109 0908 	add.w	r9, r9, #8
   238fc:	f10c 0101 	add.w	r1, ip, #1
   23900:	4660      	mov	r0, ip
   23902:	e4a0      	b.n	23246 <_vfiprintf_r+0x496>
   23904:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   23908:	f040 8197 	bne.w	23c3a <_vfiprintf_r+0xe8a>
   2390c:	f851 3b04 	ldr.w	r3, [r1], #4
   23910:	9107      	str	r1, [sp, #28]
   23912:	f7ff bbc0 	b.w	23096 <_vfiprintf_r+0x2e6>
   23916:	05b3      	lsls	r3, r6, #22
   23918:	f100 8188 	bmi.w	23c2c <_vfiprintf_r+0xe7c>
   2391c:	f852 3b04 	ldr.w	r3, [r2], #4
   23920:	9207      	str	r2, [sp, #28]
   23922:	17da      	asrs	r2, r3, #31
   23924:	4611      	mov	r1, r2
   23926:	f7ff bb52 	b.w	22fce <_vfiprintf_r+0x21e>
   2392a:	9907      	ldr	r1, [sp, #28]
   2392c:	f851 3b04 	ldr.w	r3, [r1], #4
   23930:	9107      	str	r1, [sp, #28]
   23932:	2101      	movs	r1, #1
   23934:	f7ff bbb3 	b.w	2309e <_vfiprintf_r+0x2ee>
   23938:	9b07      	ldr	r3, [sp, #28]
   2393a:	9805      	ldr	r0, [sp, #20]
   2393c:	f853 1b04 	ldr.w	r1, [r3], #4
   23940:	9307      	str	r3, [sp, #28]
   23942:	17c2      	asrs	r2, r0, #31
   23944:	e9c1 0200 	strd	r0, r2, [r1]
   23948:	f7ff ba7d 	b.w	22e46 <_vfiprintf_r+0x96>
   2394c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2394e:	2b00      	cmp	r3, #0
   23950:	f43f ab26 	beq.w	22fa0 <_vfiprintf_r+0x1f0>
   23954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23956:	781b      	ldrb	r3, [r3, #0]
   23958:	2b00      	cmp	r3, #0
   2395a:	f43f ab21 	beq.w	22fa0 <_vfiprintf_r+0x1f0>
   2395e:	f898 1000 	ldrb.w	r1, [r8]
   23962:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   23966:	f7ff ba96 	b.w	22e96 <_vfiprintf_r+0xe6>
   2396a:	2302      	movs	r3, #2
   2396c:	aa11      	add	r2, sp, #68	; 0x44
   2396e:	931c      	str	r3, [sp, #112]	; 0x70
   23970:	921b      	str	r2, [sp, #108]	; 0x6c
   23972:	2001      	movs	r0, #1
   23974:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23978:	e6a2      	b.n	236c0 <_vfiprintf_r+0x910>
   2397a:	9603      	str	r6, [sp, #12]
   2397c:	e571      	b.n	23462 <_vfiprintf_r+0x6b2>
   2397e:	4b3b      	ldr	r3, [pc, #236]	; (23a6c <_vfiprintf_r+0xcbc>)
   23980:	930c      	str	r3, [sp, #48]	; 0x30
   23982:	f016 0220 	ands.w	r2, r6, #32
   23986:	d059      	beq.n	23a3c <_vfiprintf_r+0xc8c>
   23988:	9b07      	ldr	r3, [sp, #28]
   2398a:	3307      	adds	r3, #7
   2398c:	f023 0307 	bic.w	r3, r3, #7
   23990:	4618      	mov	r0, r3
   23992:	685a      	ldr	r2, [r3, #4]
   23994:	f850 3b08 	ldr.w	r3, [r0], #8
   23998:	9007      	str	r0, [sp, #28]
   2399a:	07f4      	lsls	r4, r6, #31
   2399c:	d509      	bpl.n	239b2 <_vfiprintf_r+0xc02>
   2399e:	ea53 0002 	orrs.w	r0, r3, r2
   239a2:	d006      	beq.n	239b2 <_vfiprintf_r+0xc02>
   239a4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   239a8:	2130      	movs	r1, #48	; 0x30
   239aa:	f046 0602 	orr.w	r6, r6, #2
   239ae:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   239b2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   239b6:	9103      	str	r1, [sp, #12]
   239b8:	2102      	movs	r1, #2
   239ba:	f7ff bb70 	b.w	2309e <_vfiprintf_r+0x2ee>
   239be:	4b2c      	ldr	r3, [pc, #176]	; (23a70 <_vfiprintf_r+0xcc0>)
   239c0:	930c      	str	r3, [sp, #48]	; 0x30
   239c2:	e7de      	b.n	23982 <_vfiprintf_r+0xbd2>
   239c4:	9b07      	ldr	r3, [sp, #28]
   239c6:	2101      	movs	r1, #1
   239c8:	f853 2b04 	ldr.w	r2, [r3], #4
   239cc:	9103      	str	r1, [sp, #12]
   239ce:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   239d2:	9307      	str	r3, [sp, #28]
   239d4:	9104      	str	r1, [sp, #16]
   239d6:	ac2b      	add	r4, sp, #172	; 0xac
   239d8:	e4df      	b.n	2339a <_vfiprintf_r+0x5ea>
   239da:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   239de:	2a00      	cmp	r2, #0
   239e0:	f040 8132 	bne.w	23c48 <_vfiprintf_r+0xe98>
   239e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   239e6:	2a00      	cmp	r2, #0
   239e8:	f47f ae62 	bne.w	236b0 <_vfiprintf_r+0x900>
   239ec:	4618      	mov	r0, r3
   239ee:	2101      	movs	r1, #1
   239f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   239f4:	e427      	b.n	23246 <_vfiprintf_r+0x496>
   239f6:	2100      	movs	r1, #0
   239f8:	2208      	movs	r2, #8
   239fa:	a816      	add	r0, sp, #88	; 0x58
   239fc:	9413      	str	r4, [sp, #76]	; 0x4c
   239fe:	f7f8 f81b 	bl	1ba38 <memset>
   23a02:	1c79      	adds	r1, r7, #1
   23a04:	f000 80bc 	beq.w	23b80 <_vfiprintf_r+0xdd0>
   23a08:	2500      	movs	r5, #0
   23a0a:	9407      	str	r4, [sp, #28]
   23a0c:	462c      	mov	r4, r5
   23a0e:	e00c      	b.n	23a2a <_vfiprintf_r+0xc7a>
   23a10:	a92b      	add	r1, sp, #172	; 0xac
   23a12:	4658      	mov	r0, fp
   23a14:	f7fe f9e6 	bl	21de4 <_wcrtomb_r>
   23a18:	1c42      	adds	r2, r0, #1
   23a1a:	4420      	add	r0, r4
   23a1c:	f000 816b 	beq.w	23cf6 <_vfiprintf_r+0xf46>
   23a20:	42b8      	cmp	r0, r7
   23a22:	dc08      	bgt.n	23a36 <_vfiprintf_r+0xc86>
   23a24:	f000 8170 	beq.w	23d08 <_vfiprintf_r+0xf58>
   23a28:	4604      	mov	r4, r0
   23a2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   23a2c:	5952      	ldr	r2, [r2, r5]
   23a2e:	ab16      	add	r3, sp, #88	; 0x58
   23a30:	3504      	adds	r5, #4
   23a32:	2a00      	cmp	r2, #0
   23a34:	d1ec      	bne.n	23a10 <_vfiprintf_r+0xc60>
   23a36:	9404      	str	r4, [sp, #16]
   23a38:	9c07      	ldr	r4, [sp, #28]
   23a3a:	e0af      	b.n	23b9c <_vfiprintf_r+0xdec>
   23a3c:	f016 0310 	ands.w	r3, r6, #16
   23a40:	9807      	ldr	r0, [sp, #28]
   23a42:	d10c      	bne.n	23a5e <_vfiprintf_r+0xcae>
   23a44:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   23a48:	d005      	beq.n	23a56 <_vfiprintf_r+0xca6>
   23a4a:	461a      	mov	r2, r3
   23a4c:	f850 3b04 	ldr.w	r3, [r0], #4
   23a50:	9007      	str	r0, [sp, #28]
   23a52:	b29b      	uxth	r3, r3
   23a54:	e7a1      	b.n	2399a <_vfiprintf_r+0xbea>
   23a56:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   23a5a:	f040 80e1 	bne.w	23c20 <_vfiprintf_r+0xe70>
   23a5e:	f850 3b04 	ldr.w	r3, [r0], #4
   23a62:	9007      	str	r0, [sp, #28]
   23a64:	e799      	b.n	2399a <_vfiprintf_r+0xbea>
   23a66:	bf00      	nop
   23a68:	2000262c 	.word	0x2000262c
   23a6c:	20008c88 	.word	0x20008c88
   23a70:	20008c9c 	.word	0x20008c9c
   23a74:	9903      	ldr	r1, [sp, #12]
   23a76:	9704      	str	r7, [sp, #16]
   23a78:	ac44      	add	r4, sp, #272	; 0x110
   23a7a:	469e      	mov	lr, r3
   23a7c:	ee08 ba90 	vmov	s17, fp
   23a80:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   23a84:	f04f 0c00 	mov.w	ip, #0
   23a88:	4623      	mov	r3, r4
   23a8a:	e006      	b.n	23a9a <_vfiprintf_r+0xcea>
   23a8c:	f1be 0f0a 	cmp.w	lr, #10
   23a90:	f172 0200 	sbcs.w	r2, r2, #0
   23a94:	d339      	bcc.n	23b0a <_vfiprintf_r+0xd5a>
   23a96:	46a6      	mov	lr, r4
   23a98:	462a      	mov	r2, r5
   23a9a:	49a6      	ldr	r1, [pc, #664]	; (23d34 <_vfiprintf_r+0xf84>)
   23a9c:	eb1e 0002 	adds.w	r0, lr, r2
   23aa0:	f140 0000 	adc.w	r0, r0, #0
   23aa4:	460f      	mov	r7, r1
   23aa6:	fba1 1400 	umull	r1, r4, r1, r0
   23aaa:	f024 0103 	bic.w	r1, r4, #3
   23aae:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   23ab2:	1a40      	subs	r0, r0, r1
   23ab4:	ebbe 0100 	subs.w	r1, lr, r0
   23ab8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   23abc:	f162 0400 	sbc.w	r4, r2, #0
   23ac0:	fb05 f501 	mul.w	r5, r5, r1
   23ac4:	fb07 5504 	mla	r5, r7, r4, r5
   23ac8:	fba1 4107 	umull	r4, r1, r1, r7
   23acc:	440d      	add	r5, r1
   23ace:	2705      	movs	r7, #5
   23ad0:	f004 0101 	and.w	r1, r4, #1
   23ad4:	fba1 1b07 	umull	r1, fp, r1, r7
   23ad8:	1809      	adds	r1, r1, r0
   23ada:	0864      	lsrs	r4, r4, #1
   23adc:	3130      	adds	r1, #48	; 0x30
   23ade:	f803 1c01 	strb.w	r1, [r3, #-1]
   23ae2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   23ae6:	f10c 0c01 	add.w	ip, ip, #1
   23aea:	3b01      	subs	r3, #1
   23aec:	086d      	lsrs	r5, r5, #1
   23aee:	2e00      	cmp	r6, #0
   23af0:	d0cc      	beq.n	23a8c <_vfiprintf_r+0xcdc>
   23af2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23af4:	7809      	ldrb	r1, [r1, #0]
   23af6:	4561      	cmp	r1, ip
   23af8:	d1c8      	bne.n	23a8c <_vfiprintf_r+0xcdc>
   23afa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   23afe:	d0c5      	beq.n	23a8c <_vfiprintf_r+0xcdc>
   23b00:	f1be 0f0a 	cmp.w	lr, #10
   23b04:	f172 0200 	sbcs.w	r2, r2, #0
   23b08:	d26c      	bcs.n	23be4 <_vfiprintf_r+0xe34>
   23b0a:	461c      	mov	r4, r3
   23b0c:	ab44      	add	r3, sp, #272	; 0x110
   23b0e:	1b1b      	subs	r3, r3, r4
   23b10:	9f04      	ldr	r7, [sp, #16]
   23b12:	9e03      	ldr	r6, [sp, #12]
   23b14:	9304      	str	r3, [sp, #16]
   23b16:	ee18 ba90 	vmov	fp, s17
   23b1a:	f7ff ba72 	b.w	23002 <_vfiprintf_r+0x252>
   23b1e:	9603      	str	r6, [sp, #12]
   23b20:	f7ff ba62 	b.w	22fe8 <_vfiprintf_r+0x238>
   23b24:	4658      	mov	r0, fp
   23b26:	f7f7 fd01 	bl	1b52c <__sinit>
   23b2a:	f7ff b95b 	b.w	22de4 <_vfiprintf_r+0x34>
   23b2e:	2901      	cmp	r1, #1
   23b30:	9603      	str	r6, [sp, #12]
   23b32:	f47f accd 	bne.w	234d0 <_vfiprintf_r+0x720>
   23b36:	f7ff ba5c 	b.w	22ff2 <_vfiprintf_r+0x242>
   23b3a:	9b07      	ldr	r3, [sp, #28]
   23b3c:	9905      	ldr	r1, [sp, #20]
   23b3e:	f853 2b04 	ldr.w	r2, [r3], #4
   23b42:	6011      	str	r1, [r2, #0]
   23b44:	9307      	str	r3, [sp, #28]
   23b46:	f7ff b97e 	b.w	22e46 <_vfiprintf_r+0x96>
   23b4a:	2f06      	cmp	r7, #6
   23b4c:	463b      	mov	r3, r7
   23b4e:	9a03      	ldr	r2, [sp, #12]
   23b50:	4c79      	ldr	r4, [pc, #484]	; (23d38 <_vfiprintf_r+0xf88>)
   23b52:	9207      	str	r2, [sp, #28]
   23b54:	bf28      	it	cs
   23b56:	2306      	movcs	r3, #6
   23b58:	9304      	str	r3, [sp, #16]
   23b5a:	9303      	str	r3, [sp, #12]
   23b5c:	f7ff bb25 	b.w	231aa <_vfiprintf_r+0x3fa>
   23b60:	9b03      	ldr	r3, [sp, #12]
   23b62:	9907      	ldr	r1, [sp, #28]
   23b64:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   23b68:	bf14      	ite	ne
   23b6a:	f851 3b04 	ldrne.w	r3, [r1], #4
   23b6e:	f851 3b04 	ldreq.w	r3, [r1], #4
   23b72:	9107      	str	r1, [sp, #28]
   23b74:	bf1c      	itt	ne
   23b76:	4602      	movne	r2, r0
   23b78:	b2db      	uxtbne	r3, r3
   23b7a:	2101      	movs	r1, #1
   23b7c:	f7ff ba8f 	b.w	2309e <_vfiprintf_r+0x2ee>
   23b80:	ab16      	add	r3, sp, #88	; 0x58
   23b82:	9300      	str	r3, [sp, #0]
   23b84:	2300      	movs	r3, #0
   23b86:	4619      	mov	r1, r3
   23b88:	aa13      	add	r2, sp, #76	; 0x4c
   23b8a:	4658      	mov	r0, fp
   23b8c:	f7fe f97c 	bl	21e88 <_wcsrtombs_r>
   23b90:	4603      	mov	r3, r0
   23b92:	3301      	adds	r3, #1
   23b94:	9004      	str	r0, [sp, #16]
   23b96:	f000 80ae 	beq.w	23cf6 <_vfiprintf_r+0xf46>
   23b9a:	9413      	str	r4, [sp, #76]	; 0x4c
   23b9c:	9b04      	ldr	r3, [sp, #16]
   23b9e:	2b00      	cmp	r3, #0
   23ba0:	d030      	beq.n	23c04 <_vfiprintf_r+0xe54>
   23ba2:	2b63      	cmp	r3, #99	; 0x63
   23ba4:	dc63      	bgt.n	23c6e <_vfiprintf_r+0xebe>
   23ba6:	2300      	movs	r3, #0
   23ba8:	9308      	str	r3, [sp, #32]
   23baa:	ac2b      	add	r4, sp, #172	; 0xac
   23bac:	2208      	movs	r2, #8
   23bae:	2100      	movs	r1, #0
   23bb0:	a816      	add	r0, sp, #88	; 0x58
   23bb2:	f7f7 ff41 	bl	1ba38 <memset>
   23bb6:	9d04      	ldr	r5, [sp, #16]
   23bb8:	ab16      	add	r3, sp, #88	; 0x58
   23bba:	9300      	str	r3, [sp, #0]
   23bbc:	aa13      	add	r2, sp, #76	; 0x4c
   23bbe:	462b      	mov	r3, r5
   23bc0:	4621      	mov	r1, r4
   23bc2:	4658      	mov	r0, fp
   23bc4:	f7fe f960 	bl	21e88 <_wcsrtombs_r>
   23bc8:	4285      	cmp	r5, r0
   23bca:	f040 80ab 	bne.w	23d24 <_vfiprintf_r+0xf74>
   23bce:	9b03      	ldr	r3, [sp, #12]
   23bd0:	9a04      	ldr	r2, [sp, #16]
   23bd2:	9307      	str	r3, [sp, #28]
   23bd4:	2300      	movs	r3, #0
   23bd6:	54a3      	strb	r3, [r4, r2]
   23bd8:	461f      	mov	r7, r3
   23bda:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   23bde:	9303      	str	r3, [sp, #12]
   23be0:	f7ff ba16 	b.w	23010 <_vfiprintf_r+0x260>
   23be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23be6:	990d      	ldr	r1, [sp, #52]	; 0x34
   23be8:	1a9b      	subs	r3, r3, r2
   23bea:	4618      	mov	r0, r3
   23bec:	9308      	str	r3, [sp, #32]
   23bee:	f7f8 f84f 	bl	1bc90 <strncpy>
   23bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23bf4:	9b08      	ldr	r3, [sp, #32]
   23bf6:	784a      	ldrb	r2, [r1, #1]
   23bf8:	b10a      	cbz	r2, 23bfe <_vfiprintf_r+0xe4e>
   23bfa:	3101      	adds	r1, #1
   23bfc:	910b      	str	r1, [sp, #44]	; 0x2c
   23bfe:	f04f 0c00 	mov.w	ip, #0
   23c02:	e748      	b.n	23a96 <_vfiprintf_r+0xce6>
   23c04:	9b03      	ldr	r3, [sp, #12]
   23c06:	9307      	str	r3, [sp, #28]
   23c08:	9b04      	ldr	r3, [sp, #16]
   23c0a:	9303      	str	r3, [sp, #12]
   23c0c:	461f      	mov	r7, r3
   23c0e:	9308      	str	r3, [sp, #32]
   23c10:	f7ff b9fe 	b.w	23010 <_vfiprintf_r+0x260>
   23c14:	2101      	movs	r1, #1
   23c16:	4618      	mov	r0, r3
   23c18:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23c1c:	f7ff bb13 	b.w	23246 <_vfiprintf_r+0x496>
   23c20:	f850 3b04 	ldr.w	r3, [r0], #4
   23c24:	9007      	str	r0, [sp, #28]
   23c26:	4622      	mov	r2, r4
   23c28:	b2db      	uxtb	r3, r3
   23c2a:	e6b6      	b.n	2399a <_vfiprintf_r+0xbea>
   23c2c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   23c30:	9207      	str	r2, [sp, #28]
   23c32:	17da      	asrs	r2, r3, #31
   23c34:	4611      	mov	r1, r2
   23c36:	f7ff b9ca 	b.w	22fce <_vfiprintf_r+0x21e>
   23c3a:	f851 3b04 	ldr.w	r3, [r1], #4
   23c3e:	9107      	str	r1, [sp, #28]
   23c40:	4602      	mov	r2, r0
   23c42:	b2db      	uxtb	r3, r3
   23c44:	f7ff ba27 	b.w	23096 <_vfiprintf_r+0x2e6>
   23c48:	2301      	movs	r3, #1
   23c4a:	931c      	str	r3, [sp, #112]	; 0x70
   23c4c:	2101      	movs	r1, #1
   23c4e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   23c52:	931b      	str	r3, [sp, #108]	; 0x6c
   23c54:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23c58:	460b      	mov	r3, r1
   23c5a:	f7ff bacd 	b.w	231f8 <_vfiprintf_r+0x448>
   23c5e:	9b07      	ldr	r3, [sp, #28]
   23c60:	9905      	ldr	r1, [sp, #20]
   23c62:	f853 2b04 	ldr.w	r2, [r3], #4
   23c66:	9307      	str	r3, [sp, #28]
   23c68:	8011      	strh	r1, [r2, #0]
   23c6a:	f7ff b8ec 	b.w	22e46 <_vfiprintf_r+0x96>
   23c6e:	1c59      	adds	r1, r3, #1
   23c70:	4658      	mov	r0, fp
   23c72:	f7f5 fddb 	bl	1982c <_malloc_r>
   23c76:	4604      	mov	r4, r0
   23c78:	2800      	cmp	r0, #0
   23c7a:	d03c      	beq.n	23cf6 <_vfiprintf_r+0xf46>
   23c7c:	9008      	str	r0, [sp, #32]
   23c7e:	e795      	b.n	23bac <_vfiprintf_r+0xdfc>
   23c80:	6d88      	ldr	r0, [r1, #88]	; 0x58
   23c82:	f7f9 f857 	bl	1cd34 <__retarget_lock_release_recursive>
   23c86:	f7ff b9e9 	b.w	2305c <_vfiprintf_r+0x2ac>
   23c8a:	9b03      	ldr	r3, [sp, #12]
   23c8c:	9307      	str	r3, [sp, #28]
   23c8e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   23c92:	9f08      	ldr	r7, [sp, #32]
   23c94:	f7ff b9bc 	b.w	23010 <_vfiprintf_r+0x260>
   23c98:	9819      	ldr	r0, [sp, #100]	; 0x64
   23c9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23c9c:	3001      	adds	r0, #1
   23c9e:	e545      	b.n	2372c <_vfiprintf_r+0x97c>
   23ca0:	9b03      	ldr	r3, [sp, #12]
   23ca2:	9307      	str	r3, [sp, #28]
   23ca4:	4620      	mov	r0, r4
   23ca6:	f7f9 fa6b 	bl	1d180 <strlen>
   23caa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   23cae:	462f      	mov	r7, r5
   23cb0:	9004      	str	r0, [sp, #16]
   23cb2:	9303      	str	r3, [sp, #12]
   23cb4:	9508      	str	r5, [sp, #32]
   23cb6:	f7ff b9ab 	b.w	23010 <_vfiprintf_r+0x260>
   23cba:	ee18 1a10 	vmov	r1, s16
   23cbe:	aa18      	add	r2, sp, #96	; 0x60
   23cc0:	4658      	mov	r0, fp
   23cc2:	f7ff f82d 	bl	22d20 <_svfiprintf_r+0xd18>
   23cc6:	2800      	cmp	r0, #0
   23cc8:	f43f aa36 	beq.w	23138 <_vfiprintf_r+0x388>
   23ccc:	f7ff ba4d 	b.w	2316a <_vfiprintf_r+0x3ba>
   23cd0:	9819      	ldr	r0, [sp, #100]	; 0x64
   23cd2:	3001      	adds	r0, #1
   23cd4:	e57a      	b.n	237cc <_vfiprintf_r+0xa1c>
   23cd6:	468c      	mov	ip, r1
   23cd8:	e46e      	b.n	235b8 <_vfiprintf_r+0x808>
   23cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23cdc:	07d9      	lsls	r1, r3, #31
   23cde:	d405      	bmi.n	23cec <_vfiprintf_r+0xf3c>
   23ce0:	89ab      	ldrh	r3, [r5, #12]
   23ce2:	059a      	lsls	r2, r3, #22
   23ce4:	d402      	bmi.n	23cec <_vfiprintf_r+0xf3c>
   23ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23ce8:	f7f9 f824 	bl	1cd34 <__retarget_lock_release_recursive>
   23cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23cf0:	9305      	str	r3, [sp, #20]
   23cf2:	f7ff ba49 	b.w	23188 <_vfiprintf_r+0x3d8>
   23cf6:	ee18 2a10 	vmov	r2, s16
   23cfa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   23cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23d02:	8193      	strh	r3, [r2, #12]
   23d04:	f7ff ba35 	b.w	23172 <_vfiprintf_r+0x3c2>
   23d08:	9c07      	ldr	r4, [sp, #28]
   23d0a:	9704      	str	r7, [sp, #16]
   23d0c:	e746      	b.n	23b9c <_vfiprintf_r+0xdec>
   23d0e:	9b07      	ldr	r3, [sp, #28]
   23d10:	f898 1001 	ldrb.w	r1, [r8, #1]
   23d14:	f853 7b04 	ldr.w	r7, [r3], #4
   23d18:	9307      	str	r3, [sp, #28]
   23d1a:	4690      	mov	r8, r2
   23d1c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   23d20:	f7ff b8b9 	b.w	22e96 <_vfiprintf_r+0xe6>
   23d24:	ee18 2a10 	vmov	r2, s16
   23d28:	8993      	ldrh	r3, [r2, #12]
   23d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23d2e:	8193      	strh	r3, [r2, #12]
   23d30:	f7ff ba15 	b.w	2315e <_vfiprintf_r+0x3ae>
   23d34:	cccccccd 	.word	0xcccccccd
   23d38:	20008cb0 	.word	0x20008cb0

00023d3c <vfiprintf>:
   23d3c:	b410      	push	{r4}
   23d3e:	4c05      	ldr	r4, [pc, #20]	; (23d54 <vfiprintf+0x18>)
   23d40:	4684      	mov	ip, r0
   23d42:	4613      	mov	r3, r2
   23d44:	6820      	ldr	r0, [r4, #0]
   23d46:	f85d 4b04 	ldr.w	r4, [sp], #4
   23d4a:	460a      	mov	r2, r1
   23d4c:	4661      	mov	r1, ip
   23d4e:	f7ff b82f 	b.w	22db0 <_vfiprintf_r>
   23d52:	bf00      	nop
   23d54:	20008de0 	.word	0x20008de0
   23d58:	b570      	push	{r4, r5, r6, lr}
   23d5a:	460c      	mov	r4, r1
   23d5c:	8989      	ldrh	r1, [r1, #12]
   23d5e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   23d62:	f021 0102 	bic.w	r1, r1, #2
   23d66:	f8ad 1014 	strh.w	r1, [sp, #20]
   23d6a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   23d6c:	911b      	str	r1, [sp, #108]	; 0x6c
   23d6e:	89e1      	ldrh	r1, [r4, #14]
   23d70:	f8ad 1016 	strh.w	r1, [sp, #22]
   23d74:	69e1      	ldr	r1, [r4, #28]
   23d76:	9109      	str	r1, [sp, #36]	; 0x24
   23d78:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23d7a:	910b      	str	r1, [sp, #44]	; 0x2c
   23d7c:	a91c      	add	r1, sp, #112	; 0x70
   23d7e:	9102      	str	r1, [sp, #8]
   23d80:	9106      	str	r1, [sp, #24]
   23d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
   23d86:	4606      	mov	r6, r0
   23d88:	9104      	str	r1, [sp, #16]
   23d8a:	9107      	str	r1, [sp, #28]
   23d8c:	a818      	add	r0, sp, #96	; 0x60
   23d8e:	2100      	movs	r1, #0
   23d90:	e9cd 3200 	strd	r3, r2, [sp]
   23d94:	9108      	str	r1, [sp, #32]
   23d96:	f7f8 ffbd 	bl	1cd14 <__retarget_lock_init_recursive>
   23d9a:	e9dd 3200 	ldrd	r3, r2, [sp]
   23d9e:	a902      	add	r1, sp, #8
   23da0:	4630      	mov	r0, r6
   23da2:	f7ff f805 	bl	22db0 <_vfiprintf_r>
   23da6:	1e05      	subs	r5, r0, #0
   23da8:	db07      	blt.n	23dba <vfiprintf+0x7e>
   23daa:	a902      	add	r1, sp, #8
   23dac:	4630      	mov	r0, r6
   23dae:	f7fc ffb1 	bl	20d14 <_fflush_r>
   23db2:	2800      	cmp	r0, #0
   23db4:	bf18      	it	ne
   23db6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   23dba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   23dbe:	065b      	lsls	r3, r3, #25
   23dc0:	d503      	bpl.n	23dca <vfiprintf+0x8e>
   23dc2:	89a3      	ldrh	r3, [r4, #12]
   23dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23dc8:	81a3      	strh	r3, [r4, #12]
   23dca:	9818      	ldr	r0, [sp, #96]	; 0x60
   23dcc:	f7f8 ffa6 	bl	1cd1c <__retarget_lock_close_recursive>
   23dd0:	4628      	mov	r0, r5
   23dd2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   23dd6:	bd70      	pop	{r4, r5, r6, pc}

00023dd8 <__sfvwrite_r>:
   23dd8:	6893      	ldr	r3, [r2, #8]
   23dda:	2b00      	cmp	r3, #0
   23ddc:	f000 8085 	beq.w	23eea <__sfvwrite_r+0x112>
   23de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23de4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   23de8:	460c      	mov	r4, r1
   23dea:	0719      	lsls	r1, r3, #28
   23dec:	4680      	mov	r8, r0
   23dee:	b083      	sub	sp, #12
   23df0:	4617      	mov	r7, r2
   23df2:	b298      	uxth	r0, r3
   23df4:	d525      	bpl.n	23e42 <__sfvwrite_r+0x6a>
   23df6:	6923      	ldr	r3, [r4, #16]
   23df8:	b31b      	cbz	r3, 23e42 <__sfvwrite_r+0x6a>
   23dfa:	f010 0302 	ands.w	r3, r0, #2
   23dfe:	683d      	ldr	r5, [r7, #0]
   23e00:	d02d      	beq.n	23e5e <__sfvwrite_r+0x86>
   23e02:	f04f 0a00 	mov.w	sl, #0
   23e06:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 240c8 <__sfvwrite_r+0x2f0>
   23e0a:	4656      	mov	r6, sl
   23e0c:	46b9      	mov	r9, r7
   23e0e:	455e      	cmp	r6, fp
   23e10:	4633      	mov	r3, r6
   23e12:	4652      	mov	r2, sl
   23e14:	bf28      	it	cs
   23e16:	465b      	movcs	r3, fp
   23e18:	4640      	mov	r0, r8
   23e1a:	2e00      	cmp	r6, #0
   23e1c:	d052      	beq.n	23ec4 <__sfvwrite_r+0xec>
   23e1e:	69e1      	ldr	r1, [r4, #28]
   23e20:	6a67      	ldr	r7, [r4, #36]	; 0x24
   23e22:	47b8      	blx	r7
   23e24:	2800      	cmp	r0, #0
   23e26:	dd56      	ble.n	23ed6 <__sfvwrite_r+0xfe>
   23e28:	f8d9 3008 	ldr.w	r3, [r9, #8]
   23e2c:	1a1b      	subs	r3, r3, r0
   23e2e:	4482      	add	sl, r0
   23e30:	1a36      	subs	r6, r6, r0
   23e32:	f8c9 3008 	str.w	r3, [r9, #8]
   23e36:	2b00      	cmp	r3, #0
   23e38:	d1e9      	bne.n	23e0e <__sfvwrite_r+0x36>
   23e3a:	2000      	movs	r0, #0
   23e3c:	b003      	add	sp, #12
   23e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e42:	4621      	mov	r1, r4
   23e44:	4640      	mov	r0, r8
   23e46:	f000 f941 	bl	240cc <__swsetup_r>
   23e4a:	2800      	cmp	r0, #0
   23e4c:	f040 8138 	bne.w	240c0 <__sfvwrite_r+0x2e8>
   23e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23e54:	683d      	ldr	r5, [r7, #0]
   23e56:	b298      	uxth	r0, r3
   23e58:	f010 0302 	ands.w	r3, r0, #2
   23e5c:	d1d1      	bne.n	23e02 <__sfvwrite_r+0x2a>
   23e5e:	f010 0901 	ands.w	r9, r0, #1
   23e62:	d144      	bne.n	23eee <__sfvwrite_r+0x116>
   23e64:	464e      	mov	r6, r9
   23e66:	9700      	str	r7, [sp, #0]
   23e68:	b346      	cbz	r6, 23ebc <__sfvwrite_r+0xe4>
   23e6a:	0582      	lsls	r2, r0, #22
   23e6c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   23e70:	f140 8085 	bpl.w	23f7e <__sfvwrite_r+0x1a6>
   23e74:	45b3      	cmp	fp, r6
   23e76:	465a      	mov	r2, fp
   23e78:	f200 80b4 	bhi.w	23fe4 <__sfvwrite_r+0x20c>
   23e7c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   23e80:	f040 80c1 	bne.w	24006 <__sfvwrite_r+0x22e>
   23e84:	6820      	ldr	r0, [r4, #0]
   23e86:	9201      	str	r2, [sp, #4]
   23e88:	4649      	mov	r1, r9
   23e8a:	f7f7 fd59 	bl	1b940 <memmove>
   23e8e:	68a3      	ldr	r3, [r4, #8]
   23e90:	9a01      	ldr	r2, [sp, #4]
   23e92:	eba3 010b 	sub.w	r1, r3, fp
   23e96:	6823      	ldr	r3, [r4, #0]
   23e98:	60a1      	str	r1, [r4, #8]
   23e9a:	4413      	add	r3, r2
   23e9c:	46b2      	mov	sl, r6
   23e9e:	6023      	str	r3, [r4, #0]
   23ea0:	2600      	movs	r6, #0
   23ea2:	9a00      	ldr	r2, [sp, #0]
   23ea4:	6893      	ldr	r3, [r2, #8]
   23ea6:	eba3 030a 	sub.w	r3, r3, sl
   23eaa:	44d1      	add	r9, sl
   23eac:	6093      	str	r3, [r2, #8]
   23eae:	2b00      	cmp	r3, #0
   23eb0:	d0c3      	beq.n	23e3a <__sfvwrite_r+0x62>
   23eb2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   23eb6:	b280      	uxth	r0, r0
   23eb8:	2e00      	cmp	r6, #0
   23eba:	d1d6      	bne.n	23e6a <__sfvwrite_r+0x92>
   23ebc:	e9d5 9600 	ldrd	r9, r6, [r5]
   23ec0:	3508      	adds	r5, #8
   23ec2:	e7d1      	b.n	23e68 <__sfvwrite_r+0x90>
   23ec4:	e9d5 a600 	ldrd	sl, r6, [r5]
   23ec8:	3508      	adds	r5, #8
   23eca:	e7a0      	b.n	23e0e <__sfvwrite_r+0x36>
   23ecc:	4621      	mov	r1, r4
   23ece:	4640      	mov	r0, r8
   23ed0:	f7fc ff20 	bl	20d14 <_fflush_r>
   23ed4:	b388      	cbz	r0, 23f3a <__sfvwrite_r+0x162>
   23ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23ee2:	81a3      	strh	r3, [r4, #12]
   23ee4:	b003      	add	sp, #12
   23ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23eea:	2000      	movs	r0, #0
   23eec:	4770      	bx	lr
   23eee:	461e      	mov	r6, r3
   23ef0:	46ba      	mov	sl, r7
   23ef2:	4699      	mov	r9, r3
   23ef4:	4618      	mov	r0, r3
   23ef6:	9500      	str	r5, [sp, #0]
   23ef8:	461f      	mov	r7, r3
   23efa:	b366      	cbz	r6, 23f56 <__sfvwrite_r+0x17e>
   23efc:	2800      	cmp	r0, #0
   23efe:	d032      	beq.n	23f66 <__sfvwrite_r+0x18e>
   23f00:	464a      	mov	r2, r9
   23f02:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   23f06:	6820      	ldr	r0, [r4, #0]
   23f08:	68a5      	ldr	r5, [r4, #8]
   23f0a:	42b2      	cmp	r2, r6
   23f0c:	bf28      	it	cs
   23f0e:	4632      	movcs	r2, r6
   23f10:	4288      	cmp	r0, r1
   23f12:	d904      	bls.n	23f1e <__sfvwrite_r+0x146>
   23f14:	eb05 0b03 	add.w	fp, r5, r3
   23f18:	455a      	cmp	r2, fp
   23f1a:	f300 80a7 	bgt.w	2406c <__sfvwrite_r+0x294>
   23f1e:	4293      	cmp	r3, r2
   23f20:	dc64      	bgt.n	23fec <__sfvwrite_r+0x214>
   23f22:	69e1      	ldr	r1, [r4, #28]
   23f24:	6a65      	ldr	r5, [r4, #36]	; 0x24
   23f26:	463a      	mov	r2, r7
   23f28:	4640      	mov	r0, r8
   23f2a:	47a8      	blx	r5
   23f2c:	f1b0 0b00 	subs.w	fp, r0, #0
   23f30:	ddd1      	ble.n	23ed6 <__sfvwrite_r+0xfe>
   23f32:	ebb9 090b 	subs.w	r9, r9, fp
   23f36:	d0c9      	beq.n	23ecc <__sfvwrite_r+0xf4>
   23f38:	2001      	movs	r0, #1
   23f3a:	f8da 3008 	ldr.w	r3, [sl, #8]
   23f3e:	eba3 030b 	sub.w	r3, r3, fp
   23f42:	445f      	add	r7, fp
   23f44:	eba6 060b 	sub.w	r6, r6, fp
   23f48:	f8ca 3008 	str.w	r3, [sl, #8]
   23f4c:	2b00      	cmp	r3, #0
   23f4e:	f43f af74 	beq.w	23e3a <__sfvwrite_r+0x62>
   23f52:	2e00      	cmp	r6, #0
   23f54:	d1d2      	bne.n	23efc <__sfvwrite_r+0x124>
   23f56:	9a00      	ldr	r2, [sp, #0]
   23f58:	6856      	ldr	r6, [r2, #4]
   23f5a:	4613      	mov	r3, r2
   23f5c:	3208      	adds	r2, #8
   23f5e:	9200      	str	r2, [sp, #0]
   23f60:	2e00      	cmp	r6, #0
   23f62:	d0f8      	beq.n	23f56 <__sfvwrite_r+0x17e>
   23f64:	681f      	ldr	r7, [r3, #0]
   23f66:	4632      	mov	r2, r6
   23f68:	210a      	movs	r1, #10
   23f6a:	4638      	mov	r0, r7
   23f6c:	f7f9 f8b8 	bl	1d0e0 <memchr>
   23f70:	2800      	cmp	r0, #0
   23f72:	f000 809c 	beq.w	240ae <__sfvwrite_r+0x2d6>
   23f76:	3001      	adds	r0, #1
   23f78:	eba0 0907 	sub.w	r9, r0, r7
   23f7c:	e7c0      	b.n	23f00 <__sfvwrite_r+0x128>
   23f7e:	6820      	ldr	r0, [r4, #0]
   23f80:	6923      	ldr	r3, [r4, #16]
   23f82:	4298      	cmp	r0, r3
   23f84:	d816      	bhi.n	23fb4 <__sfvwrite_r+0x1dc>
   23f86:	6962      	ldr	r2, [r4, #20]
   23f88:	42b2      	cmp	r2, r6
   23f8a:	d813      	bhi.n	23fb4 <__sfvwrite_r+0x1dc>
   23f8c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   23f90:	42b3      	cmp	r3, r6
   23f92:	bf28      	it	cs
   23f94:	4633      	movcs	r3, r6
   23f96:	69e1      	ldr	r1, [r4, #28]
   23f98:	fb93 f3f2 	sdiv	r3, r3, r2
   23f9c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   23f9e:	fb02 f303 	mul.w	r3, r2, r3
   23fa2:	4640      	mov	r0, r8
   23fa4:	464a      	mov	r2, r9
   23fa6:	47b8      	blx	r7
   23fa8:	f1b0 0a00 	subs.w	sl, r0, #0
   23fac:	dd93      	ble.n	23ed6 <__sfvwrite_r+0xfe>
   23fae:	eba6 060a 	sub.w	r6, r6, sl
   23fb2:	e776      	b.n	23ea2 <__sfvwrite_r+0xca>
   23fb4:	45b3      	cmp	fp, r6
   23fb6:	46da      	mov	sl, fp
   23fb8:	bf28      	it	cs
   23fba:	46b2      	movcs	sl, r6
   23fbc:	4652      	mov	r2, sl
   23fbe:	4649      	mov	r1, r9
   23fc0:	f7f7 fcbe 	bl	1b940 <memmove>
   23fc4:	68a3      	ldr	r3, [r4, #8]
   23fc6:	6822      	ldr	r2, [r4, #0]
   23fc8:	eba3 030a 	sub.w	r3, r3, sl
   23fcc:	4452      	add	r2, sl
   23fce:	60a3      	str	r3, [r4, #8]
   23fd0:	6022      	str	r2, [r4, #0]
   23fd2:	2b00      	cmp	r3, #0
   23fd4:	d1eb      	bne.n	23fae <__sfvwrite_r+0x1d6>
   23fd6:	4621      	mov	r1, r4
   23fd8:	4640      	mov	r0, r8
   23fda:	f7fc fe9b 	bl	20d14 <_fflush_r>
   23fde:	2800      	cmp	r0, #0
   23fe0:	d0e5      	beq.n	23fae <__sfvwrite_r+0x1d6>
   23fe2:	e778      	b.n	23ed6 <__sfvwrite_r+0xfe>
   23fe4:	6820      	ldr	r0, [r4, #0]
   23fe6:	46b3      	mov	fp, r6
   23fe8:	4632      	mov	r2, r6
   23fea:	e74c      	b.n	23e86 <__sfvwrite_r+0xae>
   23fec:	4639      	mov	r1, r7
   23fee:	9201      	str	r2, [sp, #4]
   23ff0:	f7f7 fca6 	bl	1b940 <memmove>
   23ff4:	9a01      	ldr	r2, [sp, #4]
   23ff6:	68a3      	ldr	r3, [r4, #8]
   23ff8:	1a9b      	subs	r3, r3, r2
   23ffa:	60a3      	str	r3, [r4, #8]
   23ffc:	6823      	ldr	r3, [r4, #0]
   23ffe:	4413      	add	r3, r2
   24000:	6023      	str	r3, [r4, #0]
   24002:	4693      	mov	fp, r2
   24004:	e795      	b.n	23f32 <__sfvwrite_r+0x15a>
   24006:	6823      	ldr	r3, [r4, #0]
   24008:	6921      	ldr	r1, [r4, #16]
   2400a:	eba3 0b01 	sub.w	fp, r3, r1
   2400e:	6963      	ldr	r3, [r4, #20]
   24010:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   24014:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   24018:	f10b 0301 	add.w	r3, fp, #1
   2401c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   24020:	4433      	add	r3, r6
   24022:	4553      	cmp	r3, sl
   24024:	4652      	mov	r2, sl
   24026:	bf84      	itt	hi
   24028:	469a      	movhi	sl, r3
   2402a:	4652      	movhi	r2, sl
   2402c:	0543      	lsls	r3, r0, #21
   2402e:	d52c      	bpl.n	2408a <__sfvwrite_r+0x2b2>
   24030:	4611      	mov	r1, r2
   24032:	4640      	mov	r0, r8
   24034:	f7f5 fbfa 	bl	1982c <_malloc_r>
   24038:	2800      	cmp	r0, #0
   2403a:	d03b      	beq.n	240b4 <__sfvwrite_r+0x2dc>
   2403c:	465a      	mov	r2, fp
   2403e:	6921      	ldr	r1, [r4, #16]
   24040:	9001      	str	r0, [sp, #4]
   24042:	f7f2 fa9f 	bl	16584 <memcpy>
   24046:	89a2      	ldrh	r2, [r4, #12]
   24048:	9b01      	ldr	r3, [sp, #4]
   2404a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2404e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   24052:	81a2      	strh	r2, [r4, #12]
   24054:	eb03 000b 	add.w	r0, r3, fp
   24058:	6123      	str	r3, [r4, #16]
   2405a:	ebaa 030b 	sub.w	r3, sl, fp
   2405e:	f8c4 a014 	str.w	sl, [r4, #20]
   24062:	60a3      	str	r3, [r4, #8]
   24064:	6020      	str	r0, [r4, #0]
   24066:	46b3      	mov	fp, r6
   24068:	4632      	mov	r2, r6
   2406a:	e70c      	b.n	23e86 <__sfvwrite_r+0xae>
   2406c:	4639      	mov	r1, r7
   2406e:	465a      	mov	r2, fp
   24070:	f7f7 fc66 	bl	1b940 <memmove>
   24074:	6823      	ldr	r3, [r4, #0]
   24076:	445b      	add	r3, fp
   24078:	6023      	str	r3, [r4, #0]
   2407a:	4621      	mov	r1, r4
   2407c:	4640      	mov	r0, r8
   2407e:	f7fc fe49 	bl	20d14 <_fflush_r>
   24082:	2800      	cmp	r0, #0
   24084:	f43f af55 	beq.w	23f32 <__sfvwrite_r+0x15a>
   24088:	e725      	b.n	23ed6 <__sfvwrite_r+0xfe>
   2408a:	4640      	mov	r0, r8
   2408c:	f7f5 fe84 	bl	19d98 <_realloc_r>
   24090:	4603      	mov	r3, r0
   24092:	2800      	cmp	r0, #0
   24094:	d1de      	bne.n	24054 <__sfvwrite_r+0x27c>
   24096:	6921      	ldr	r1, [r4, #16]
   24098:	4640      	mov	r0, r8
   2409a:	f7f9 f983 	bl	1d3a4 <_free_r>
   2409e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   240a2:	220c      	movs	r2, #12
   240a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   240a8:	f8c8 2000 	str.w	r2, [r8]
   240ac:	e715      	b.n	23eda <__sfvwrite_r+0x102>
   240ae:	1c72      	adds	r2, r6, #1
   240b0:	4691      	mov	r9, r2
   240b2:	e726      	b.n	23f02 <__sfvwrite_r+0x12a>
   240b4:	220c      	movs	r2, #12
   240b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   240ba:	f8c8 2000 	str.w	r2, [r8]
   240be:	e70c      	b.n	23eda <__sfvwrite_r+0x102>
   240c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   240c4:	e6ba      	b.n	23e3c <__sfvwrite_r+0x64>
   240c6:	bf00      	nop
   240c8:	7ffffc00 	.word	0x7ffffc00

000240cc <__swsetup_r>:
   240cc:	b538      	push	{r3, r4, r5, lr}
   240ce:	4b31      	ldr	r3, [pc, #196]	; (24194 <__swsetup_r+0xc8>)
   240d0:	681b      	ldr	r3, [r3, #0]
   240d2:	4605      	mov	r5, r0
   240d4:	460c      	mov	r4, r1
   240d6:	b113      	cbz	r3, 240de <__swsetup_r+0x12>
   240d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   240da:	2a00      	cmp	r2, #0
   240dc:	d04e      	beq.n	2417c <__swsetup_r+0xb0>
   240de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   240e2:	0718      	lsls	r0, r3, #28
   240e4:	b29a      	uxth	r2, r3
   240e6:	d51c      	bpl.n	24122 <__swsetup_r+0x56>
   240e8:	6921      	ldr	r1, [r4, #16]
   240ea:	b329      	cbz	r1, 24138 <__swsetup_r+0x6c>
   240ec:	f012 0001 	ands.w	r0, r2, #1
   240f0:	d007      	beq.n	24102 <__swsetup_r+0x36>
   240f2:	2000      	movs	r0, #0
   240f4:	60a0      	str	r0, [r4, #8]
   240f6:	6960      	ldr	r0, [r4, #20]
   240f8:	4240      	negs	r0, r0
   240fa:	61a0      	str	r0, [r4, #24]
   240fc:	b139      	cbz	r1, 2410e <__swsetup_r+0x42>
   240fe:	2000      	movs	r0, #0
   24100:	bd38      	pop	{r3, r4, r5, pc}
   24102:	0795      	lsls	r5, r2, #30
   24104:	bf58      	it	pl
   24106:	6960      	ldrpl	r0, [r4, #20]
   24108:	60a0      	str	r0, [r4, #8]
   2410a:	2900      	cmp	r1, #0
   2410c:	d1f7      	bne.n	240fe <__swsetup_r+0x32>
   2410e:	0612      	lsls	r2, r2, #24
   24110:	bf58      	it	pl
   24112:	4608      	movpl	r0, r1
   24114:	d5f4      	bpl.n	24100 <__swsetup_r+0x34>
   24116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2411a:	81a3      	strh	r3, [r4, #12]
   2411c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24120:	bd38      	pop	{r3, r4, r5, pc}
   24122:	06d1      	lsls	r1, r2, #27
   24124:	d52e      	bpl.n	24184 <__swsetup_r+0xb8>
   24126:	0752      	lsls	r2, r2, #29
   24128:	d414      	bmi.n	24154 <__swsetup_r+0x88>
   2412a:	6921      	ldr	r1, [r4, #16]
   2412c:	f043 0308 	orr.w	r3, r3, #8
   24130:	81a3      	strh	r3, [r4, #12]
   24132:	b29a      	uxth	r2, r3
   24134:	2900      	cmp	r1, #0
   24136:	d1d9      	bne.n	240ec <__swsetup_r+0x20>
   24138:	f402 7020 	and.w	r0, r2, #640	; 0x280
   2413c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   24140:	d0d4      	beq.n	240ec <__swsetup_r+0x20>
   24142:	4621      	mov	r1, r4
   24144:	4628      	mov	r0, r5
   24146:	f000 f997 	bl	24478 <__smakebuf_r>
   2414a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2414e:	6921      	ldr	r1, [r4, #16]
   24150:	b29a      	uxth	r2, r3
   24152:	e7cb      	b.n	240ec <__swsetup_r+0x20>
   24154:	6b21      	ldr	r1, [r4, #48]	; 0x30
   24156:	b151      	cbz	r1, 2416e <__swsetup_r+0xa2>
   24158:	f104 0240 	add.w	r2, r4, #64	; 0x40
   2415c:	4291      	cmp	r1, r2
   2415e:	d004      	beq.n	2416a <__swsetup_r+0x9e>
   24160:	4628      	mov	r0, r5
   24162:	f7f9 f91f 	bl	1d3a4 <_free_r>
   24166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2416a:	2200      	movs	r2, #0
   2416c:	6322      	str	r2, [r4, #48]	; 0x30
   2416e:	6921      	ldr	r1, [r4, #16]
   24170:	2200      	movs	r2, #0
   24172:	e9c4 1200 	strd	r1, r2, [r4]
   24176:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2417a:	e7d7      	b.n	2412c <__swsetup_r+0x60>
   2417c:	4618      	mov	r0, r3
   2417e:	f7f7 f9d5 	bl	1b52c <__sinit>
   24182:	e7ac      	b.n	240de <__swsetup_r+0x12>
   24184:	2209      	movs	r2, #9
   24186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2418a:	602a      	str	r2, [r5, #0]
   2418c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24190:	81a3      	strh	r3, [r4, #12]
   24192:	bd38      	pop	{r3, r4, r5, pc}
   24194:	20008de0 	.word	0x20008de0

00024198 <__fputwc>:
   24198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2419c:	b082      	sub	sp, #8
   2419e:	4682      	mov	sl, r0
   241a0:	4688      	mov	r8, r1
   241a2:	4614      	mov	r4, r2
   241a4:	f7f8 fd06 	bl	1cbb4 <__locale_mb_cur_max>
   241a8:	2801      	cmp	r0, #1
   241aa:	d103      	bne.n	241b4 <__fputwc+0x1c>
   241ac:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   241b0:	2bfe      	cmp	r3, #254	; 0xfe
   241b2:	d937      	bls.n	24224 <__fputwc+0x8c>
   241b4:	466d      	mov	r5, sp
   241b6:	4642      	mov	r2, r8
   241b8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   241bc:	4629      	mov	r1, r5
   241be:	4650      	mov	r0, sl
   241c0:	f7fd fe10 	bl	21de4 <_wcrtomb_r>
   241c4:	1c42      	adds	r2, r0, #1
   241c6:	4606      	mov	r6, r0
   241c8:	d033      	beq.n	24232 <__fputwc+0x9a>
   241ca:	b330      	cbz	r0, 2421a <__fputwc+0x82>
   241cc:	f89d c000 	ldrb.w	ip, [sp]
   241d0:	f1c5 0901 	rsb	r9, r5, #1
   241d4:	e00a      	b.n	241ec <__fputwc+0x54>
   241d6:	6823      	ldr	r3, [r4, #0]
   241d8:	1c5a      	adds	r2, r3, #1
   241da:	6022      	str	r2, [r4, #0]
   241dc:	f883 c000 	strb.w	ip, [r3]
   241e0:	eb09 0305 	add.w	r3, r9, r5
   241e4:	42b3      	cmp	r3, r6
   241e6:	d218      	bcs.n	2421a <__fputwc+0x82>
   241e8:	f815 cf01 	ldrb.w	ip, [r5, #1]!
   241ec:	68a3      	ldr	r3, [r4, #8]
   241ee:	3b01      	subs	r3, #1
   241f0:	2b00      	cmp	r3, #0
   241f2:	60a3      	str	r3, [r4, #8]
   241f4:	daef      	bge.n	241d6 <__fputwc+0x3e>
   241f6:	69a7      	ldr	r7, [r4, #24]
   241f8:	42bb      	cmp	r3, r7
   241fa:	4661      	mov	r1, ip
   241fc:	4622      	mov	r2, r4
   241fe:	4650      	mov	r0, sl
   24200:	db02      	blt.n	24208 <__fputwc+0x70>
   24202:	f1bc 0f0a 	cmp.w	ip, #10
   24206:	d1e6      	bne.n	241d6 <__fputwc+0x3e>
   24208:	f000 f9d2 	bl	245b0 <__swbuf_r>
   2420c:	1c43      	adds	r3, r0, #1
   2420e:	d1e7      	bne.n	241e0 <__fputwc+0x48>
   24210:	4606      	mov	r6, r0
   24212:	4630      	mov	r0, r6
   24214:	b002      	add	sp, #8
   24216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2421a:	4646      	mov	r6, r8
   2421c:	4630      	mov	r0, r6
   2421e:	b002      	add	sp, #8
   24220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24224:	fa5f fc88 	uxtb.w	ip, r8
   24228:	f88d c000 	strb.w	ip, [sp]
   2422c:	4606      	mov	r6, r0
   2422e:	466d      	mov	r5, sp
   24230:	e7ce      	b.n	241d0 <__fputwc+0x38>
   24232:	89a3      	ldrh	r3, [r4, #12]
   24234:	4630      	mov	r0, r6
   24236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2423a:	81a3      	strh	r3, [r4, #12]
   2423c:	b002      	add	sp, #8
   2423e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24242:	bf00      	nop

00024244 <_fputwc_r>:
   24244:	b530      	push	{r4, r5, lr}
   24246:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24248:	f013 0f01 	tst.w	r3, #1
   2424c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   24250:	4614      	mov	r4, r2
   24252:	b083      	sub	sp, #12
   24254:	4605      	mov	r5, r0
   24256:	b29a      	uxth	r2, r3
   24258:	d101      	bne.n	2425e <_fputwc_r+0x1a>
   2425a:	0598      	lsls	r0, r3, #22
   2425c:	d51c      	bpl.n	24298 <_fputwc_r+0x54>
   2425e:	0490      	lsls	r0, r2, #18
   24260:	d406      	bmi.n	24270 <_fputwc_r+0x2c>
   24262:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   24268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2426c:	81a3      	strh	r3, [r4, #12]
   2426e:	6662      	str	r2, [r4, #100]	; 0x64
   24270:	4622      	mov	r2, r4
   24272:	4628      	mov	r0, r5
   24274:	f7ff ff90 	bl	24198 <__fputwc>
   24278:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2427a:	07da      	lsls	r2, r3, #31
   2427c:	4605      	mov	r5, r0
   2427e:	d402      	bmi.n	24286 <_fputwc_r+0x42>
   24280:	89a3      	ldrh	r3, [r4, #12]
   24282:	059b      	lsls	r3, r3, #22
   24284:	d502      	bpl.n	2428c <_fputwc_r+0x48>
   24286:	4628      	mov	r0, r5
   24288:	b003      	add	sp, #12
   2428a:	bd30      	pop	{r4, r5, pc}
   2428c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2428e:	f7f8 fd51 	bl	1cd34 <__retarget_lock_release_recursive>
   24292:	4628      	mov	r0, r5
   24294:	b003      	add	sp, #12
   24296:	bd30      	pop	{r4, r5, pc}
   24298:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2429a:	9101      	str	r1, [sp, #4]
   2429c:	f7f8 fd42 	bl	1cd24 <__retarget_lock_acquire_recursive>
   242a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   242a4:	9901      	ldr	r1, [sp, #4]
   242a6:	b29a      	uxth	r2, r3
   242a8:	e7d9      	b.n	2425e <_fputwc_r+0x1a>
   242aa:	bf00      	nop

000242ac <fputwc>:
   242ac:	4b1b      	ldr	r3, [pc, #108]	; (2431c <fputwc+0x70>)
   242ae:	b570      	push	{r4, r5, r6, lr}
   242b0:	681e      	ldr	r6, [r3, #0]
   242b2:	4605      	mov	r5, r0
   242b4:	460c      	mov	r4, r1
   242b6:	b10e      	cbz	r6, 242bc <fputwc+0x10>
   242b8:	6b73      	ldr	r3, [r6, #52]	; 0x34
   242ba:	b35b      	cbz	r3, 24314 <fputwc+0x68>
   242bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   242be:	f013 0f01 	tst.w	r3, #1
   242c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   242c6:	b29a      	uxth	r2, r3
   242c8:	d101      	bne.n	242ce <fputwc+0x22>
   242ca:	0598      	lsls	r0, r3, #22
   242cc:	d51b      	bpl.n	24306 <fputwc+0x5a>
   242ce:	0491      	lsls	r1, r2, #18
   242d0:	d406      	bmi.n	242e0 <fputwc+0x34>
   242d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   242d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   242d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   242dc:	81a3      	strh	r3, [r4, #12]
   242de:	6662      	str	r2, [r4, #100]	; 0x64
   242e0:	4622      	mov	r2, r4
   242e2:	4629      	mov	r1, r5
   242e4:	4630      	mov	r0, r6
   242e6:	f7ff ff57 	bl	24198 <__fputwc>
   242ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
   242ec:	07da      	lsls	r2, r3, #31
   242ee:	4605      	mov	r5, r0
   242f0:	d402      	bmi.n	242f8 <fputwc+0x4c>
   242f2:	89a3      	ldrh	r3, [r4, #12]
   242f4:	059b      	lsls	r3, r3, #22
   242f6:	d501      	bpl.n	242fc <fputwc+0x50>
   242f8:	4628      	mov	r0, r5
   242fa:	bd70      	pop	{r4, r5, r6, pc}
   242fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   242fe:	f7f8 fd19 	bl	1cd34 <__retarget_lock_release_recursive>
   24302:	4628      	mov	r0, r5
   24304:	bd70      	pop	{r4, r5, r6, pc}
   24306:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24308:	f7f8 fd0c 	bl	1cd24 <__retarget_lock_acquire_recursive>
   2430c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24310:	b29a      	uxth	r2, r3
   24312:	e7dc      	b.n	242ce <fputwc+0x22>
   24314:	4630      	mov	r0, r6
   24316:	f7f7 f909 	bl	1b52c <__sinit>
   2431a:	e7cf      	b.n	242bc <fputwc+0x10>
   2431c:	20008de0 	.word	0x20008de0

00024320 <_wcsnrtombs_l>:
   24320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24324:	b08b      	sub	sp, #44	; 0x2c
   24326:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   2432a:	9f14      	ldr	r7, [sp, #80]	; 0x50
   2432c:	9103      	str	r1, [sp, #12]
   2432e:	4681      	mov	r9, r0
   24330:	9205      	str	r2, [sp, #20]
   24332:	461e      	mov	r6, r3
   24334:	f1b8 0f00 	cmp.w	r8, #0
   24338:	d05c      	beq.n	243f4 <_wcsnrtombs_l+0xd4>
   2433a:	9b03      	ldr	r3, [sp, #12]
   2433c:	2b00      	cmp	r3, #0
   2433e:	d05e      	beq.n	243fe <_wcsnrtombs_l+0xde>
   24340:	9b05      	ldr	r3, [sp, #20]
   24342:	681d      	ldr	r5, [r3, #0]
   24344:	2f00      	cmp	r7, #0
   24346:	d06a      	beq.n	2441e <_wcsnrtombs_l+0xfe>
   24348:	1e74      	subs	r4, r6, #1
   2434a:	b34e      	cbz	r6, 243a0 <_wcsnrtombs_l+0x80>
   2434c:	9b03      	ldr	r3, [sp, #12]
   2434e:	9304      	str	r3, [sp, #16]
   24350:	3d04      	subs	r5, #4
   24352:	2600      	movs	r6, #0
   24354:	9501      	str	r5, [sp, #4]
   24356:	e00b      	b.n	24370 <_wcsnrtombs_l+0x50>
   24358:	9b03      	ldr	r3, [sp, #12]
   2435a:	bb2b      	cbnz	r3, 243a8 <_wcsnrtombs_l+0x88>
   2435c:	9b01      	ldr	r3, [sp, #4]
   2435e:	681a      	ldr	r2, [r3, #0]
   24360:	2a00      	cmp	r2, #0
   24362:	d03a      	beq.n	243da <_wcsnrtombs_l+0xba>
   24364:	45bc      	cmp	ip, r7
   24366:	d25c      	bcs.n	24422 <_wcsnrtombs_l+0x102>
   24368:	3c01      	subs	r4, #1
   2436a:	1c63      	adds	r3, r4, #1
   2436c:	4666      	mov	r6, ip
   2436e:	d017      	beq.n	243a0 <_wcsnrtombs_l+0x80>
   24370:	f8d8 3000 	ldr.w	r3, [r8]
   24374:	9302      	str	r3, [sp, #8]
   24376:	9b01      	ldr	r3, [sp, #4]
   24378:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   2437c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   24380:	9301      	str	r3, [sp, #4]
   24382:	a907      	add	r1, sp, #28
   24384:	4643      	mov	r3, r8
   24386:	4648      	mov	r0, r9
   24388:	f8d8 b004 	ldr.w	fp, [r8, #4]
   2438c:	47a8      	blx	r5
   2438e:	1c42      	adds	r2, r0, #1
   24390:	d03a      	beq.n	24408 <_wcsnrtombs_l+0xe8>
   24392:	eb00 0c06 	add.w	ip, r0, r6
   24396:	45bc      	cmp	ip, r7
   24398:	d9de      	bls.n	24358 <_wcsnrtombs_l+0x38>
   2439a:	9b02      	ldr	r3, [sp, #8]
   2439c:	e9c8 3b00 	strd	r3, fp, [r8]
   243a0:	4630      	mov	r0, r6
   243a2:	b00b      	add	sp, #44	; 0x2c
   243a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243a8:	2800      	cmp	r0, #0
   243aa:	dd0e      	ble.n	243ca <_wcsnrtombs_l+0xaa>
   243ac:	9b04      	ldr	r3, [sp, #16]
   243ae:	9d01      	ldr	r5, [sp, #4]
   243b0:	4418      	add	r0, r3
   243b2:	1e5a      	subs	r2, r3, #1
   243b4:	a907      	add	r1, sp, #28
   243b6:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   243ba:	f811 3b01 	ldrb.w	r3, [r1], #1
   243be:	f802 3f01 	strb.w	r3, [r2, #1]!
   243c2:	4572      	cmp	r2, lr
   243c4:	d1f9      	bne.n	243ba <_wcsnrtombs_l+0x9a>
   243c6:	9501      	str	r5, [sp, #4]
   243c8:	9004      	str	r0, [sp, #16]
   243ca:	9b05      	ldr	r3, [sp, #20]
   243cc:	681a      	ldr	r2, [r3, #0]
   243ce:	3204      	adds	r2, #4
   243d0:	601a      	str	r2, [r3, #0]
   243d2:	9b01      	ldr	r3, [sp, #4]
   243d4:	681a      	ldr	r2, [r3, #0]
   243d6:	2a00      	cmp	r2, #0
   243d8:	d1c4      	bne.n	24364 <_wcsnrtombs_l+0x44>
   243da:	9b03      	ldr	r3, [sp, #12]
   243dc:	b10b      	cbz	r3, 243e2 <_wcsnrtombs_l+0xc2>
   243de:	9b05      	ldr	r3, [sp, #20]
   243e0:	601a      	str	r2, [r3, #0]
   243e2:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   243e6:	2200      	movs	r2, #0
   243e8:	4630      	mov	r0, r6
   243ea:	f8c8 2000 	str.w	r2, [r8]
   243ee:	b00b      	add	sp, #44	; 0x2c
   243f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243f4:	9b03      	ldr	r3, [sp, #12]
   243f6:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   243fa:	2b00      	cmp	r3, #0
   243fc:	d1a0      	bne.n	24340 <_wcsnrtombs_l+0x20>
   243fe:	9b05      	ldr	r3, [sp, #20]
   24400:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   24404:	681d      	ldr	r5, [r3, #0]
   24406:	e79f      	b.n	24348 <_wcsnrtombs_l+0x28>
   24408:	4606      	mov	r6, r0
   2440a:	218a      	movs	r1, #138	; 0x8a
   2440c:	2200      	movs	r2, #0
   2440e:	4630      	mov	r0, r6
   24410:	f8c9 1000 	str.w	r1, [r9]
   24414:	f8c8 2000 	str.w	r2, [r8]
   24418:	b00b      	add	sp, #44	; 0x2c
   2441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2441e:	463e      	mov	r6, r7
   24420:	e7be      	b.n	243a0 <_wcsnrtombs_l+0x80>
   24422:	4666      	mov	r6, ip
   24424:	e7bc      	b.n	243a0 <_wcsnrtombs_l+0x80>
   24426:	bf00      	nop

00024428 <_wcsnrtombs_r>:
   24428:	b510      	push	{r4, lr}
   2442a:	b084      	sub	sp, #16
   2442c:	4c05      	ldr	r4, [pc, #20]	; (24444 <_wcsnrtombs_r+0x1c>)
   2442e:	9806      	ldr	r0, [sp, #24]
   24430:	9000      	str	r0, [sp, #0]
   24432:	9807      	ldr	r0, [sp, #28]
   24434:	9001      	str	r0, [sp, #4]
   24436:	4804      	ldr	r0, [pc, #16]	; (24448 <_wcsnrtombs_r+0x20>)
   24438:	6800      	ldr	r0, [r0, #0]
   2443a:	9402      	str	r4, [sp, #8]
   2443c:	f7ff ff70 	bl	24320 <_wcsnrtombs_l>
   24440:	b004      	add	sp, #16
   24442:	bd10      	pop	{r4, pc}
   24444:	20009328 	.word	0x20009328
   24448:	20008de0 	.word	0x20008de0

0002444c <wcsnrtombs>:
   2444c:	b500      	push	{lr}
   2444e:	b085      	sub	sp, #20
   24450:	4684      	mov	ip, r0
   24452:	9300      	str	r3, [sp, #0]
   24454:	4806      	ldr	r0, [pc, #24]	; (24470 <wcsnrtombs+0x24>)
   24456:	9b06      	ldr	r3, [sp, #24]
   24458:	9301      	str	r3, [sp, #4]
   2445a:	4b06      	ldr	r3, [pc, #24]	; (24474 <wcsnrtombs+0x28>)
   2445c:	6800      	ldr	r0, [r0, #0]
   2445e:	9302      	str	r3, [sp, #8]
   24460:	4613      	mov	r3, r2
   24462:	460a      	mov	r2, r1
   24464:	4661      	mov	r1, ip
   24466:	f7ff ff5b 	bl	24320 <_wcsnrtombs_l>
   2446a:	b005      	add	sp, #20
   2446c:	f85d fb04 	ldr.w	pc, [sp], #4
   24470:	20008de0 	.word	0x20008de0
   24474:	20009328 	.word	0x20009328

00024478 <__smakebuf_r>:
   24478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2447c:	898b      	ldrh	r3, [r1, #12]
   2447e:	460c      	mov	r4, r1
   24480:	0799      	lsls	r1, r3, #30
   24482:	b096      	sub	sp, #88	; 0x58
   24484:	d508      	bpl.n	24498 <__smakebuf_r+0x20>
   24486:	f104 0343 	add.w	r3, r4, #67	; 0x43
   2448a:	2201      	movs	r2, #1
   2448c:	e9c4 3204 	strd	r3, r2, [r4, #16]
   24490:	6023      	str	r3, [r4, #0]
   24492:	b016      	add	sp, #88	; 0x58
   24494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2449c:	2900      	cmp	r1, #0
   2449e:	4606      	mov	r6, r0
   244a0:	db25      	blt.n	244ee <__smakebuf_r+0x76>
   244a2:	466a      	mov	r2, sp
   244a4:	f000 f8e8 	bl	24678 <_fstat_r>
   244a8:	2800      	cmp	r0, #0
   244aa:	db1f      	blt.n	244ec <__smakebuf_r+0x74>
   244ac:	9d01      	ldr	r5, [sp, #4]
   244ae:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   244b2:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   244b6:	fab5 f585 	clz	r5, r5
   244ba:	f44f 6880 	mov.w	r8, #1024	; 0x400
   244be:	096d      	lsrs	r5, r5, #5
   244c0:	f44f 6700 	mov.w	r7, #2048	; 0x800
   244c4:	4641      	mov	r1, r8
   244c6:	4630      	mov	r0, r6
   244c8:	f7f5 f9b0 	bl	1982c <_malloc_r>
   244cc:	b1e0      	cbz	r0, 24508 <__smakebuf_r+0x90>
   244ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   244d2:	f8c4 8014 	str.w	r8, [r4, #20]
   244d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   244da:	6020      	str	r0, [r4, #0]
   244dc:	6120      	str	r0, [r4, #16]
   244de:	81a3      	strh	r3, [r4, #12]
   244e0:	bb35      	cbnz	r5, 24530 <__smakebuf_r+0xb8>
   244e2:	433b      	orrs	r3, r7
   244e4:	81a3      	strh	r3, [r4, #12]
   244e6:	b016      	add	sp, #88	; 0x58
   244e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   244ec:	89a3      	ldrh	r3, [r4, #12]
   244ee:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   244f2:	d019      	beq.n	24528 <__smakebuf_r+0xb0>
   244f4:	f04f 0840 	mov.w	r8, #64	; 0x40
   244f8:	2500      	movs	r5, #0
   244fa:	4641      	mov	r1, r8
   244fc:	4630      	mov	r0, r6
   244fe:	462f      	mov	r7, r5
   24500:	f7f5 f994 	bl	1982c <_malloc_r>
   24504:	2800      	cmp	r0, #0
   24506:	d1e2      	bne.n	244ce <__smakebuf_r+0x56>
   24508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2450c:	059a      	lsls	r2, r3, #22
   2450e:	d4c0      	bmi.n	24492 <__smakebuf_r+0x1a>
   24510:	f023 0303 	bic.w	r3, r3, #3
   24514:	f104 0243 	add.w	r2, r4, #67	; 0x43
   24518:	f043 0302 	orr.w	r3, r3, #2
   2451c:	2101      	movs	r1, #1
   2451e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   24522:	81a3      	strh	r3, [r4, #12]
   24524:	6022      	str	r2, [r4, #0]
   24526:	e7b4      	b.n	24492 <__smakebuf_r+0x1a>
   24528:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2452c:	462f      	mov	r7, r5
   2452e:	e7c9      	b.n	244c4 <__smakebuf_r+0x4c>
   24530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24534:	4630      	mov	r0, r6
   24536:	f000 f8b5 	bl	246a4 <_isatty_r>
   2453a:	b910      	cbnz	r0, 24542 <__smakebuf_r+0xca>
   2453c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24540:	e7cf      	b.n	244e2 <__smakebuf_r+0x6a>
   24542:	89a3      	ldrh	r3, [r4, #12]
   24544:	f023 0303 	bic.w	r3, r3, #3
   24548:	f043 0301 	orr.w	r3, r3, #1
   2454c:	b21b      	sxth	r3, r3
   2454e:	e7c8      	b.n	244e2 <__smakebuf_r+0x6a>

00024550 <__swhatbuf_r>:
   24550:	b570      	push	{r4, r5, r6, lr}
   24552:	460c      	mov	r4, r1
   24554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24558:	2900      	cmp	r1, #0
   2455a:	b096      	sub	sp, #88	; 0x58
   2455c:	4615      	mov	r5, r2
   2455e:	461e      	mov	r6, r3
   24560:	db14      	blt.n	2458c <__swhatbuf_r+0x3c>
   24562:	466a      	mov	r2, sp
   24564:	f000 f888 	bl	24678 <_fstat_r>
   24568:	2800      	cmp	r0, #0
   2456a:	db0f      	blt.n	2458c <__swhatbuf_r+0x3c>
   2456c:	9901      	ldr	r1, [sp, #4]
   2456e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   24572:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
   24576:	fab1 f181 	clz	r1, r1
   2457a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2457e:	0949      	lsrs	r1, r1, #5
   24580:	f44f 6000 	mov.w	r0, #2048	; 0x800
   24584:	6031      	str	r1, [r6, #0]
   24586:	602b      	str	r3, [r5, #0]
   24588:	b016      	add	sp, #88	; 0x58
   2458a:	bd70      	pop	{r4, r5, r6, pc}
   2458c:	89a1      	ldrh	r1, [r4, #12]
   2458e:	f011 0180 	ands.w	r1, r1, #128	; 0x80
   24592:	d006      	beq.n	245a2 <__swhatbuf_r+0x52>
   24594:	2100      	movs	r1, #0
   24596:	2340      	movs	r3, #64	; 0x40
   24598:	4608      	mov	r0, r1
   2459a:	6031      	str	r1, [r6, #0]
   2459c:	602b      	str	r3, [r5, #0]
   2459e:	b016      	add	sp, #88	; 0x58
   245a0:	bd70      	pop	{r4, r5, r6, pc}
   245a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   245a6:	4608      	mov	r0, r1
   245a8:	6031      	str	r1, [r6, #0]
   245aa:	602b      	str	r3, [r5, #0]
   245ac:	b016      	add	sp, #88	; 0x58
   245ae:	bd70      	pop	{r4, r5, r6, pc}

000245b0 <__swbuf_r>:
   245b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245b2:	460d      	mov	r5, r1
   245b4:	4614      	mov	r4, r2
   245b6:	4606      	mov	r6, r0
   245b8:	b110      	cbz	r0, 245c0 <__swbuf_r+0x10>
   245ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   245bc:	2b00      	cmp	r3, #0
   245be:	d04c      	beq.n	2465a <__swbuf_r+0xaa>
   245c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   245c4:	69a3      	ldr	r3, [r4, #24]
   245c6:	60a3      	str	r3, [r4, #8]
   245c8:	0717      	lsls	r7, r2, #28
   245ca:	b290      	uxth	r0, r2
   245cc:	d51b      	bpl.n	24606 <__swbuf_r+0x56>
   245ce:	6923      	ldr	r3, [r4, #16]
   245d0:	b1cb      	cbz	r3, 24606 <__swbuf_r+0x56>
   245d2:	b2ed      	uxtb	r5, r5
   245d4:	0481      	lsls	r1, r0, #18
   245d6:	462f      	mov	r7, r5
   245d8:	d522      	bpl.n	24620 <__swbuf_r+0x70>
   245da:	6822      	ldr	r2, [r4, #0]
   245dc:	6961      	ldr	r1, [r4, #20]
   245de:	1ad3      	subs	r3, r2, r3
   245e0:	4299      	cmp	r1, r3
   245e2:	dd29      	ble.n	24638 <__swbuf_r+0x88>
   245e4:	3301      	adds	r3, #1
   245e6:	68a1      	ldr	r1, [r4, #8]
   245e8:	3901      	subs	r1, #1
   245ea:	60a1      	str	r1, [r4, #8]
   245ec:	1c51      	adds	r1, r2, #1
   245ee:	6021      	str	r1, [r4, #0]
   245f0:	7015      	strb	r5, [r2, #0]
   245f2:	6962      	ldr	r2, [r4, #20]
   245f4:	429a      	cmp	r2, r3
   245f6:	d027      	beq.n	24648 <__swbuf_r+0x98>
   245f8:	89a3      	ldrh	r3, [r4, #12]
   245fa:	07db      	lsls	r3, r3, #31
   245fc:	d501      	bpl.n	24602 <__swbuf_r+0x52>
   245fe:	2d0a      	cmp	r5, #10
   24600:	d022      	beq.n	24648 <__swbuf_r+0x98>
   24602:	4638      	mov	r0, r7
   24604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24606:	4621      	mov	r1, r4
   24608:	4630      	mov	r0, r6
   2460a:	f7ff fd5f 	bl	240cc <__swsetup_r>
   2460e:	bb08      	cbnz	r0, 24654 <__swbuf_r+0xa4>
   24610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   24614:	6923      	ldr	r3, [r4, #16]
   24616:	b290      	uxth	r0, r2
   24618:	b2ed      	uxtb	r5, r5
   2461a:	0481      	lsls	r1, r0, #18
   2461c:	462f      	mov	r7, r5
   2461e:	d4dc      	bmi.n	245da <__swbuf_r+0x2a>
   24620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   24624:	81a2      	strh	r2, [r4, #12]
   24626:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24628:	6961      	ldr	r1, [r4, #20]
   2462a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   2462e:	6662      	str	r2, [r4, #100]	; 0x64
   24630:	6822      	ldr	r2, [r4, #0]
   24632:	1ad3      	subs	r3, r2, r3
   24634:	4299      	cmp	r1, r3
   24636:	dcd5      	bgt.n	245e4 <__swbuf_r+0x34>
   24638:	4621      	mov	r1, r4
   2463a:	4630      	mov	r0, r6
   2463c:	f7fc fb6a 	bl	20d14 <_fflush_r>
   24640:	b940      	cbnz	r0, 24654 <__swbuf_r+0xa4>
   24642:	6822      	ldr	r2, [r4, #0]
   24644:	2301      	movs	r3, #1
   24646:	e7ce      	b.n	245e6 <__swbuf_r+0x36>
   24648:	4621      	mov	r1, r4
   2464a:	4630      	mov	r0, r6
   2464c:	f7fc fb62 	bl	20d14 <_fflush_r>
   24650:	2800      	cmp	r0, #0
   24652:	d0d6      	beq.n	24602 <__swbuf_r+0x52>
   24654:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   24658:	e7d3      	b.n	24602 <__swbuf_r+0x52>
   2465a:	f7f6 ff67 	bl	1b52c <__sinit>
   2465e:	e7af      	b.n	245c0 <__swbuf_r+0x10>

00024660 <__swbuf>:
   24660:	b410      	push	{r4}
   24662:	4c04      	ldr	r4, [pc, #16]	; (24674 <__swbuf+0x14>)
   24664:	4603      	mov	r3, r0
   24666:	460a      	mov	r2, r1
   24668:	6820      	ldr	r0, [r4, #0]
   2466a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2466e:	4619      	mov	r1, r3
   24670:	f7ff bf9e 	b.w	245b0 <__swbuf_r>
   24674:	20008de0 	.word	0x20008de0

00024678 <_fstat_r>:
   24678:	b570      	push	{r4, r5, r6, lr}
   2467a:	460c      	mov	r4, r1
   2467c:	4d08      	ldr	r5, [pc, #32]	; (246a0 <_fstat_r+0x28>)
   2467e:	4603      	mov	r3, r0
   24680:	2600      	movs	r6, #0
   24682:	4620      	mov	r0, r4
   24684:	4611      	mov	r1, r2
   24686:	461c      	mov	r4, r3
   24688:	602e      	str	r6, [r5, #0]
   2468a:	f7f2 fba3 	bl	16dd4 <_fstat>
   2468e:	1c43      	adds	r3, r0, #1
   24690:	d000      	beq.n	24694 <_fstat_r+0x1c>
   24692:	bd70      	pop	{r4, r5, r6, pc}
   24694:	682b      	ldr	r3, [r5, #0]
   24696:	2b00      	cmp	r3, #0
   24698:	d0fb      	beq.n	24692 <_fstat_r+0x1a>
   2469a:	6023      	str	r3, [r4, #0]
   2469c:	bd70      	pop	{r4, r5, r6, pc}
   2469e:	bf00      	nop
   246a0:	2000d520 	.word	0x2000d520

000246a4 <_isatty_r>:
   246a4:	b538      	push	{r3, r4, r5, lr}
   246a6:	4d07      	ldr	r5, [pc, #28]	; (246c4 <_isatty_r+0x20>)
   246a8:	2200      	movs	r2, #0
   246aa:	4604      	mov	r4, r0
   246ac:	4608      	mov	r0, r1
   246ae:	602a      	str	r2, [r5, #0]
   246b0:	f7f2 fb96 	bl	16de0 <_isatty>
   246b4:	1c43      	adds	r3, r0, #1
   246b6:	d000      	beq.n	246ba <_isatty_r+0x16>
   246b8:	bd38      	pop	{r3, r4, r5, pc}
   246ba:	682b      	ldr	r3, [r5, #0]
   246bc:	2b00      	cmp	r3, #0
   246be:	d0fb      	beq.n	246b8 <_isatty_r+0x14>
   246c0:	6023      	str	r3, [r4, #0]
   246c2:	bd38      	pop	{r3, r4, r5, pc}
   246c4:	2000d520 	.word	0x2000d520

000246c8 <__aeabi_d2lz>:
   246c8:	b508      	push	{r3, lr}
   246ca:	4602      	mov	r2, r0
   246cc:	460b      	mov	r3, r1
   246ce:	ec43 2b17 	vmov	d7, r2, r3
   246d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   246d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   246da:	d403      	bmi.n	246e4 <__aeabi_d2lz+0x1c>
   246dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   246e0:	f000 b80a 	b.w	246f8 <__aeabi_d2ulz>
   246e4:	eeb1 7b47 	vneg.f64	d7, d7
   246e8:	ec51 0b17 	vmov	r0, r1, d7
   246ec:	f000 f804 	bl	246f8 <__aeabi_d2ulz>
   246f0:	4240      	negs	r0, r0
   246f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   246f6:	bd08      	pop	{r3, pc}

000246f8 <__aeabi_d2ulz>:
   246f8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 24728 <__aeabi_d2ulz+0x30>
   246fc:	ec41 0b17 	vmov	d7, r0, r1
   24700:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 24730 <__aeabi_d2ulz+0x38>
   24704:	ee27 6b06 	vmul.f64	d6, d7, d6
   24708:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   2470c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   24710:	eea4 7b45 	vfms.f64	d7, d4, d5
   24714:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   24718:	ee16 1a10 	vmov	r1, s12
   2471c:	ee17 0a90 	vmov	r0, s15
   24720:	4770      	bx	lr
   24722:	bf00      	nop
   24724:	f3af 8000 	nop.w
   24728:	00000000 	.word	0x00000000
   2472c:	3df00000 	.word	0x3df00000
   24730:	00000000 	.word	0x00000000
   24734:	41f00000 	.word	0x41f00000

00024738 <___ZN7TwoWire5beginEv_veneer>:
   24738:	f85f f000 	ldr.w	pc, [pc]	; 2473c <___ZN7TwoWire5beginEv_veneer+0x4>
   2473c:	60001789 	.word	0x60001789

00024740 <___reboot_Teensyduino__veneer>:
   24740:	f85f f000 	ldr.w	pc, [pc]	; 24744 <___reboot_Teensyduino__veneer+0x4>
   24744:	60001f09 	.word	0x60001f09

00024748 <___init_veneer>:
   24748:	f85f f000 	ldr.w	pc, [pc]	; 2474c <___init_veneer+0x4>
   2474c:	60001fb1 	.word	0x60001fb1

Disassembly of section .fini:

00024750 <_fini>:
   24750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24752:	bf00      	nop
