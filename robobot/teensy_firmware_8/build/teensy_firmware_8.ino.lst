
/home/local/svn/robobot/teensy_firmware_8/build/teensy_firmware_8.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	2000a2c0 	.word	0x2000a2c0
6000142c:	2000fc80 	.word	0x2000fc80

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9d6 	bl	600017f0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f974 	bl	60001800 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fba2 	bl	60001c94 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fd49 	bl	60001ff8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f9b0 	bl	60001910 <configure_external_ram>
	analog_init();
600015b0:	f000 fcd4 	bl	60001f5c <analog_init>
	pwm_init();
600015b4:	f000 fd08 	bl	60001fc8 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb9a 	bl	60001cf0 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f91a 	bl	600017f4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fc2b 	bl	60001e20 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f913 	bl	600017fc <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f90f 	bl	600017f8 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fcf9 	bl	60001fd0 <____libc_init_array_veneer>
	main();
600015de:	f000 fd03 	bl	60001fe8 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00024898 	.word	0x00024898
600015f0:	60002704 	.word	0x60002704
600015f4:	00000000 	.word	0x00000000
600015f8:	2000a2c0 	.word	0x2000a2c0
600015fc:	60026fa0 	.word	0x60026fa0
60001600:	20000000 	.word	0x20000000
60001604:	2000a000 	.word	0x2000a000
60001608:	00016d29 	.word	0x00016d29
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	000158ed 	.word	0x000158ed
6000161c:	2000fab4 	.word	0x2000fab4
60001620:	000158f1 	.word	0x000158f1
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	2000fab8 	.word	0x2000fab8
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaabff 	.word	0xaaaaabff
6000166c:	00200007 	.word	0x00200007
60001670:	20058000 	.word	0x20058000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	200081bc 	.word	0x200081bc
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	200081bc 	.word	0x200081bc

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	200081bc 	.word	0x200081bc
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	200081bc 	.word	0x200081bc

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017f0:	4770      	bx	lr
600017f2:	bf00      	nop

600017f4 <startup_default_middle_hook>:
600017f4:	4770      	bx	lr
600017f6:	bf00      	nop

600017f8 <startup_default_late_hook>:
600017f8:	4770      	bx	lr
600017fa:	bf00      	nop

600017fc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017fc:	bf00      	nop
600017fe:	4770      	bx	lr

60001800 <configure_cache>:
{
60001800:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001806:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001808:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000180a:	4831      	ldr	r0, [pc, #196]	; (600018d0 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000180c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001810:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001814:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001816:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000181a:	482e      	ldr	r0, [pc, #184]	; (600018d4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000181c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001820:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001822:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001826:	482c      	ldr	r0, [pc, #176]	; (600018d8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001828:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000182c:	4a2b      	ldr	r2, [pc, #172]	; (600018dc <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000182e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001832:	4c2b      	ldr	r4, [pc, #172]	; (600018e0 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001834:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001838:	482a      	ldr	r0, [pc, #168]	; (600018e4 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000183a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001842:	4c29      	ldr	r4, [pc, #164]	; (600018e8 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001844:	4829      	ldr	r0, [pc, #164]	; (600018ec <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001846:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000184a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000184e:	4c28      	ldr	r4, [pc, #160]	; (600018f0 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001850:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001854:	4827      	ldr	r0, [pc, #156]	; (600018f4 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001856:	4a28      	ldr	r2, [pc, #160]	; (600018f8 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001858:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000185c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001860:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001864:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001868:	4c24      	ldr	r4, [pc, #144]	; (600018fc <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000186a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000186c:	4824      	ldr	r0, [pc, #144]	; (60001900 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000186e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001872:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001876:	4a23      	ldr	r2, [pc, #140]	; (60001904 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001878:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000187c:	4c22      	ldr	r4, [pc, #136]	; (60001908 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000187e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001882:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001886:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000188a:	4820      	ldr	r0, [pc, #128]	; (6000190c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000188c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001890:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001892:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001896:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000189a:	bf00      	nop
	asm("nop");
6000189c:	bf00      	nop
	asm("nop");
6000189e:	bf00      	nop
	asm("nop");
600018a0:	bf00      	nop
	asm("nop");
600018a2:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a4:	2201      	movs	r2, #1
600018a6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ae:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018b2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ba:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018be:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018c6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600018ca:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600018ce:	4770      	bx	lr
600018d0:	1000003f 	.word	0x1000003f
600018d4:	07080025 	.word	0x07080025
600018d8:	00100009 	.word	0x00100009
600018dc:	2000fc80 	.word	0x2000fc80
600018e0:	00200013 	.word	0x00200013
600018e4:	07020021 	.word	0x07020021
600018e8:	20000014 	.word	0x20000014
600018ec:	13080025 	.word	0x13080025
600018f0:	10000009 	.word	0x10000009
600018f4:	20200016 	.word	0x20200016
600018f8:	130b0027 	.word	0x130b0027
600018fc:	40000017 	.word	0x40000017
60001900:	60000018 	.word	0x60000018
60001904:	070b002f 	.word	0x070b002f
60001908:	70000019 	.word	0x70000019
6000190c:	8000001a 	.word	0x8000001a

60001910 <configure_external_ram>:
{
60001910:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001912:	4bb8      	ldr	r3, [pc, #736]	; (60001bf4 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001916:	4eb8      	ldr	r6, [pc, #736]	; (60001bf8 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001918:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000191a:	4fb8      	ldr	r7, [pc, #736]	; (60001bfc <configure_external_ram+0x2ec>)
{
6000191c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000191e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001922:	49b7      	ldr	r1, [pc, #732]	; (60001c00 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001924:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001928:	4db6      	ldr	r5, [pc, #728]	; (60001c04 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000192a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000192e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001932:	4cb5      	ldr	r4, [pc, #724]	; (60001c08 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001934:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001938:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000193c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001940:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001944:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001948:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000194c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000194e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001950:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001952:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001954:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
6000195a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000195e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001962:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001966:	4aa9      	ldr	r2, [pc, #676]	; (60001c0c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001968:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
6000196c:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001970:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001974:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001978:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000197c:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000197e:	4ba4      	ldr	r3, [pc, #656]	; (60001c10 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001980:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001982:	48a4      	ldr	r0, [pc, #656]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001986:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001988:	4aa4      	ldr	r2, [pc, #656]	; (60001c1c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000198a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000198c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001990:	f043 030c 	orr.w	r3, r3, #12
60001994:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001998:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000199c:	6803      	ldr	r3, [r0, #0]
6000199e:	f043 0302 	orr.w	r3, r3, #2
600019a2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019a6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019a8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019ac:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ae:	4b9c      	ldr	r3, [pc, #624]	; (60001c20 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019b0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019b2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b6:	4c9b      	ldr	r4, [pc, #620]	; (60001c24 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ba:	4a9b      	ldr	r2, [pc, #620]	; (60001c28 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019c0:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019c2:	68c3      	ldr	r3, [r0, #12]
600019c4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600019c8:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ca:	6a03      	ldr	r3, [r0, #32]
600019cc:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019ce:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d0:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d2:	6a03      	ldr	r3, [r0, #32]
600019d4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019d6:	4a95      	ldr	r2, [pc, #596]	; (60001c2c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d8:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019da:	4c95      	ldr	r4, [pc, #596]	; (60001c30 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019dc:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019de:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019e0:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019e2:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e4:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019ec:	f043 0301 	orr.w	r3, r3, #1
600019f0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f4:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019f8:	498e      	ldr	r1, [pc, #568]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019fe:	f043 0301 	orr.w	r3, r3, #1
60001a02:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a06:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a0a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a0c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a10:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a14:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a16:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a18:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1e:	6803      	ldr	r3, [r0, #0]
60001a20:	f023 0302 	bic.w	r3, r3, #2
60001a24:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a26:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a28:	4b83      	ldr	r3, [pc, #524]	; (60001c38 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2a:	4984      	ldr	r1, [pc, #528]	; (60001c3c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a2c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2e:	f843 2b04 	str.w	r2, [r3], #4
60001a32:	428b      	cmp	r3, r1
60001a34:	d1fb      	bne.n	60001a2e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a36:	4a77      	ldr	r2, [pc, #476]	; (60001c14 <configure_external_ram+0x304>)
60001a38:	6813      	ldr	r3, [r2, #0]
60001a3a:	f043 0301 	orr.w	r3, r3, #1
60001a3e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a40:	6813      	ldr	r3, [r2, #0]
60001a42:	f013 0301 	ands.w	r3, r3, #1
60001a46:	d1fb      	bne.n	60001a40 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a48:	487a      	ldr	r0, [pc, #488]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a4a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a4c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a50:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a52:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a56:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a58:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a5c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a60:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a64:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a68:	4975      	ldr	r1, [pc, #468]	; (60001c40 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a6a:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6e:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a72:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a76:	4873      	ldr	r0, [pc, #460]	; (60001c44 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a78:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a7c:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a80:	4c71      	ldr	r4, [pc, #452]	; (60001c48 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a82:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a86:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a8a:	4970      	ldr	r1, [pc, #448]	; (60001c4c <configure_external_ram+0x33c>)
60001a8c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a90:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a92:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a96:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9a:	485e      	ldr	r0, [pc, #376]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa8:	6943      	ldr	r3, [r0, #20]
60001aaa:	07da      	lsls	r2, r3, #31
60001aac:	d5fc      	bpl.n	60001aa8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aae:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab6:	4957      	ldr	r1, [pc, #348]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001aba:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac6:	694b      	ldr	r3, [r1, #20]
60001ac8:	07db      	lsls	r3, r3, #31
60001aca:	d5fc      	bpl.n	60001ac6 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001acc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ace:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	4a4f      	ldr	r2, [pc, #316]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	6953      	ldr	r3, [r2, #20]
60001ae6:	07df      	lsls	r7, r3, #31
60001ae8:	d5fc      	bpl.n	60001ae4 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aee:	4858      	ldr	r0, [pc, #352]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af0:	4948      	ldr	r1, [pc, #288]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001af8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	694b      	ldr	r3, [r1, #20]
60001b02:	07de      	lsls	r6, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001b06:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b0a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b0e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b10:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b12:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b14:	4293      	cmp	r3, r2
60001b16:	d165      	bne.n	60001be4 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001b18:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b20:	483c      	ldr	r0, [pc, #240]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b22:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b26:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b2a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b2e:	6943      	ldr	r3, [r0, #20]
60001b30:	07dd      	lsls	r5, r3, #31
60001b32:	d5fc      	bpl.n	60001b2e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b34:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b36:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b3c:	4a35      	ldr	r2, [pc, #212]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b40:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b44:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b48:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b4c:	6953      	ldr	r3, [r2, #20]
60001b4e:	07dc      	lsls	r4, r3, #31
60001b50:	d5fc      	bpl.n	60001b4c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b52:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b54:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b5c:	492d      	ldr	r1, [pc, #180]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b60:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b64:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b6c:	694b      	ldr	r3, [r1, #20]
60001b6e:	07d8      	lsls	r0, r3, #31
60001b70:	d5fc      	bpl.n	60001b6c <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b72:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b74:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b7c:	4a25      	ldr	r2, [pc, #148]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b7e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b80:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b84:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b88:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8c:	6953      	ldr	r3, [r2, #20]
60001b8e:	07d9      	lsls	r1, r3, #31
60001b90:	d5fc      	bpl.n	60001b8c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b92:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b94:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b98:	482d      	ldr	r0, [pc, #180]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	491e      	ldr	r1, [pc, #120]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b9c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b9e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ba2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	694b      	ldr	r3, [r1, #20]
60001bac:	07da      	lsls	r2, r3, #31
60001bae:	d5fc      	bpl.n	60001baa <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001bb0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bb8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001bba:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bbc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bbe:	4293      	cmp	r3, r2
60001bc0:	d050      	beq.n	60001c64 <configure_external_ram+0x354>
60001bc2:	2508      	movs	r5, #8
60001bc4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001bc8:	4922      	ldr	r1, [pc, #136]	; (60001c54 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bca:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001bcc:	4b22      	ldr	r3, [pc, #136]	; (60001c58 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001bce:	4a23      	ldr	r2, [pc, #140]	; (60001c5c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd0:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001bd2:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001bd4:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd6:	2301      	movs	r3, #1
60001bd8:	4821      	ldr	r0, [pc, #132]	; (60001c60 <configure_external_ram+0x350>)
60001bda:	4422      	add	r2, r4
60001bdc:	f000 fa08 	bl	60001ff0 <__sm_set_pool_veneer>
}
60001be0:	b003      	add	sp, #12
60001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001be4:	4b1e      	ldr	r3, [pc, #120]	; (60001c60 <configure_external_ram+0x350>)
60001be6:	2200      	movs	r2, #0
60001be8:	e9c3 2200 	strd	r2, r2, [r3]
60001bec:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bf0:	b003      	add	sp, #12
60001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	401f8400 	.word	0x401f8400
60001c04:	000170f9 	.word	0x000170f9
60001c08:	400fc000 	.word	0x400fc000
60001c0c:	1ffffcff 	.word	0x1ffffcff
60001c10:	a0000300 	.word	0xa0000300
60001c14:	402a4000 	.word	0x402a4000
60001c18:	402a8000 	.word	0x402a8000
60001c1c:	ffff0012 	.word	0xffff0012
60001c20:	00f737ff 	.word	0x00f737ff
60001c24:	80000040 	.word	0x80000040
60001c28:	7cf0ff00 	.word	0x7cf0ff00
60001c2c:	830f00ff 	.word	0x830f00ff
60001c30:	00020063 	.word	0x00020063
60001c34:	5af05af0 	.word	0x5af05af0
60001c38:	402a4200 	.word	0x402a4200
60001c3c:	402a4300 	.word	0x402a4300
60001c40:	3018049f 	.word	0x3018049f
60001c44:	0a1806eb 	.word	0x0a1806eb
60001c48:	0a180638 	.word	0x0a180638
60001c4c:	26013206 	.word	0x26013206
60001c50:	00030004 	.word	0x00030004
60001c54:	70000000 	.word	0x70000000
60001c58:	70000000 	.word	0x70000000
60001c5c:	2000fc3c 	.word	0x2000fc3c
60001c60:	2000f18c 	.word	0x2000f18c
	FLEXSPI2_IPCR0 = addr;
60001c64:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c6c:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c6e:	4808      	ldr	r0, [pc, #32]	; (60001c90 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c70:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c74:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c78:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c7c:	6943      	ldr	r3, [r0, #20]
60001c7e:	07db      	lsls	r3, r3, #31
60001c80:	d5fc      	bpl.n	60001c7c <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c82:	2301      	movs	r3, #1
60001c84:	2510      	movs	r5, #16
60001c86:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c8a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c8c:	e79c      	b.n	60001bc8 <configure_external_ram+0x2b8>
60001c8e:	bf00      	nop
60001c90:	402a4000 	.word	0x402a4000

60001c94 <usb_pll_start>:
{
60001c94:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c96:	4a15      	ldr	r2, [pc, #84]	; (60001cec <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c98:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001ca6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001caa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cae:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001cb0:	f013 0f02 	tst.w	r3, #2
60001cb4:	d10e      	bne.n	60001cd4 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001cba:	d00f      	beq.n	60001cdc <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001cbc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001cc0:	d00e      	beq.n	60001ce0 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001cc2:	2b00      	cmp	r3, #0
60001cc4:	daf3      	bge.n	60001cae <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001cc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001cca:	d10b      	bne.n	60001ce4 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ccc:	065b      	lsls	r3, r3, #25
60001cce:	d50b      	bpl.n	60001ce8 <usb_pll_start+0x54>
}
60001cd0:	bcf0      	pop	{r4, r5, r6, r7}
60001cd2:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cd4:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cd6:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cd8:	6190      	str	r0, [r2, #24]
			continue;
60001cda:	e7e8      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cdc:	6155      	str	r5, [r2, #20]
			continue;
60001cde:	e7e6      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ce0:	6156      	str	r6, [r2, #20]
			continue;
60001ce2:	e7e4      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ce4:	6191      	str	r1, [r2, #24]
			continue;
60001ce6:	e7e2      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ce8:	6157      	str	r7, [r2, #20]
			continue;
60001cea:	e7e0      	b.n	60001cae <usb_pll_start+0x1a>
60001cec:	400d8000 	.word	0x400d8000

60001cf0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cf0:	4a3f      	ldr	r2, [pc, #252]	; (60001df0 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cf2:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cf4:	493f      	ldr	r1, [pc, #252]	; (60001df4 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf6:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cfa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cfe:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d02:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001df8 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d06:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d0a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dfc <tempmon_init+0x10c>
{
60001d0e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d14:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d18:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d1c:	4d38      	ldr	r5, [pc, #224]	; (60001e00 <tempmon_init+0x110>)
60001d1e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d20:	4c38      	ldr	r4, [pc, #224]	; (60001e04 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d22:	4839      	ldr	r0, [pc, #228]	; (60001e08 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d24:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d26:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d2a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d2c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d34:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d38:	ee07 1a10 	vmov	s14, r1
60001d3c:	4b33      	ldr	r3, [pc, #204]	; (60001e0c <tempmon_init+0x11c>)
60001d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d42:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d48:	4931      	ldr	r1, [pc, #196]	; (60001e10 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d52:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d56:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d5a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d5e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d62:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d6a:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d6e:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d76:	4827      	ldr	r0, [pc, #156]	; (60001e14 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d78:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d80:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d84:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d8c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d90:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d98:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001da0:	ee16 3a10 	vmov	r3, s12
60001da4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dac:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001db0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001dbe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001dc2:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001dc4:	4914      	ldr	r1, [pc, #80]	; (60001e18 <tempmon_init+0x128>)
60001dc6:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001dce:	f043 0302 	orr.w	r3, r3, #2
60001dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001dd6:	4b11      	ldr	r3, [pc, #68]	; (60001e1c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001dd8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001ddc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001de4:	2201      	movs	r2, #1
}
60001de6:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dec:	4770      	bx	lr
60001dee:	bf00      	nop
60001df0:	400d8100 	.word	0x400d8100
60001df4:	401f4400 	.word	0x401f4400
60001df8:	42aa0000 	.word	0x42aa0000
60001dfc:	42b40000 	.word	0x42b40000
60001e00:	2000f9d4 	.word	0x2000f9d4
60001e04:	2000f9d0 	.word	0x2000f9d0
60001e08:	2000f9d8 	.word	0x2000f9d8
60001e0c:	2000f9dc 	.word	0x2000f9dc
60001e10:	0fff0000 	.word	0x0fff0000
60001e14:	e000e400 	.word	0xe000e400
60001e18:	2000a000 	.word	0x2000a000
60001e1c:	00016f15 	.word	0x00016f15

60001e20 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e20:	4b31      	ldr	r3, [pc, #196]	; (60001ee8 <usb_init+0xc8>)
60001e22:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001e26:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e28:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e2c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001e30:	f000 f8d2 	bl	60001fd8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e34:	4a2d      	ldr	r2, [pc, #180]	; (60001eec <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001e36:	492e      	ldr	r1, [pc, #184]	; (60001ef0 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e3c:	482d      	ldr	r0, [pc, #180]	; (60001ef4 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e3e:	f043 0303 	orr.w	r3, r3, #3
60001e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e46:	4b2c      	ldr	r3, [pc, #176]	; (60001ef8 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e48:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e4c:	6802      	ldr	r2, [r0, #0]
60001e4e:	421a      	tst	r2, r3
60001e50:	d103      	bne.n	60001e5a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e52:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e56:	079a      	lsls	r2, r3, #30
60001e58:	d01b      	beq.n	60001e92 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e5a:	4a25      	ldr	r2, [pc, #148]	; (60001ef0 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e60:	4b24      	ldr	r3, [pc, #144]	; (60001ef4 <usb_init+0xd4>)
60001e62:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e64:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e68:	f043 0302 	orr.w	r3, r3, #2
60001e6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e70:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e74:	079b      	lsls	r3, r3, #30
60001e76:	d4fb      	bmi.n	60001e70 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e80:	4b1c      	ldr	r3, [pc, #112]	; (60001ef4 <usb_init+0xd4>)
60001e82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e86:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e8a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e8c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e8e:	f000 f8a7 	bl	60001fe0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e92:	4a18      	ldr	r2, [pc, #96]	; (60001ef4 <usb_init+0xd4>)
60001e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e98:	4c15      	ldr	r4, [pc, #84]	; (60001ef0 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e9a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e9c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e9e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea0:	4b16      	ldr	r3, [pc, #88]	; (60001efc <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001ea2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ea8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eac:	4618      	mov	r0, r3
60001eae:	f000 f887 	bl	60001fc0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001eb2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eb6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001eb8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ebc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001ec0:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001ec2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001ec6:	641a      	str	r2, [r3, #64]	; 0x40
60001ec8:	4b0d      	ldr	r3, [pc, #52]	; (60001f00 <usb_init+0xe0>)
60001eca:	4a0e      	ldr	r2, [pc, #56]	; (60001f04 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ecc:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ed4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ed8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001edc:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ede:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001ee2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ee6:	bd10      	pop	{r4, pc}
60001ee8:	400d8000 	.word	0x400d8000
60001eec:	400fc000 	.word	0x400fc000
60001ef0:	402e0000 	.word	0x402e0000
60001ef4:	400d9000 	.word	0x400d9000
60001ef8:	001e1c00 	.word	0x001e1c00
60001efc:	20000000 	.word	0x20000000
60001f00:	2000a000 	.word	0x2000a000
60001f04:	000170fd 	.word	0x000170fd

60001f08 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001f08:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001f0a:	4b0e      	ldr	r3, [pc, #56]	; (60001f44 <_reboot_Teensyduino_+0x3c>)
60001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001f0e:	079b      	lsls	r3, r3, #30
60001f10:	d400      	bmi.n	60001f14 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001f12:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001f14:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001f16:	4b0c      	ldr	r3, [pc, #48]	; (60001f48 <_reboot_Teensyduino_+0x40>)
60001f18:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f1a:	4a0c      	ldr	r2, [pc, #48]	; (60001f4c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001f1c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f24:	490a      	ldr	r1, [pc, #40]	; (60001f50 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f26:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f2a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f2c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f2e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001f36:	4807      	ldr	r0, [pc, #28]	; (60001f54 <_reboot_Teensyduino_+0x4c>)
60001f38:	4a07      	ldr	r2, [pc, #28]	; (60001f58 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f3c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3e:	689b      	ldr	r3, [r3, #8]
60001f40:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f42:	bf00      	nop
60001f44:	401f4400 	.word	0x401f4400
60001f48:	402e0000 	.word	0x402e0000
60001f4c:	400ac000 	.word	0x400ac000
60001f50:	00200003 	.word	0x00200003
60001f54:	20208000 	.word	0x20208000
60001f58:	eb120000 	.word	0xeb120000

60001f5c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f5c:	4b10      	ldr	r3, [pc, #64]	; (60001fa0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f5e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f60:	4a10      	ldr	r2, [pc, #64]	; (60001fa4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f62:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f64:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f68:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f6a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f6c:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f72:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f76:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f78:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f7a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f7c:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f7e:	061b      	lsls	r3, r3, #24
60001f80:	d4fc      	bmi.n	60001f7c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f82:	4a09      	ldr	r2, [pc, #36]	; (60001fa8 <analog_init+0x4c>)
60001f84:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f88:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f8a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f8c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f94:	d1fb      	bne.n	60001f8e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f96:	4a05      	ldr	r2, [pc, #20]	; (60001fac <analog_init+0x50>)
60001f98:	7013      	strb	r3, [r2, #0]
}
60001f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f9e:	4770      	bx	lr
60001fa0:	400fc000 	.word	0x400fc000
60001fa4:	400c4000 	.word	0x400c4000
60001fa8:	400c8000 	.word	0x400c8000
60001fac:	2000fc3b 	.word	0x2000fc3b

60001fb0 <_init>:
60001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001fb2:	bf00      	nop
60001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001fb6:	bc08      	pop	{r3}
60001fb8:	469e      	mov	lr, r3
60001fba:	4770      	bx	lr
60001fbc:	0000      	movs	r0, r0
	...

60001fc0 <__memset_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__memset_veneer+0x4>
60001fc4:	0001bb59 	.word	0x0001bb59

60001fc8 <__pwm_init_veneer>:
60001fc8:	f85f f000 	ldr.w	pc, [pc]	; 60001fcc <__pwm_init_veneer+0x4>
60001fcc:	00016c19 	.word	0x00016c19

60001fd0 <____libc_init_array_veneer>:
60001fd0:	f85f f000 	ldr.w	pc, [pc]	; 60001fd4 <____libc_init_array_veneer+0x4>
60001fd4:	0001cde9 	.word	0x0001cde9

60001fd8 <__usb_init_serialnumber_veneer>:
60001fd8:	f85f f000 	ldr.w	pc, [pc]	; 60001fdc <__usb_init_serialnumber_veneer+0x4>
60001fdc:	0001786d 	.word	0x0001786d

60001fe0 <__delay_veneer>:
60001fe0:	f85f f000 	ldr.w	pc, [pc]	; 60001fe4 <__delay_veneer+0x4>
60001fe4:	00015f01 	.word	0x00015f01

60001fe8 <__main_veneer>:
60001fe8:	f85f f000 	ldr.w	pc, [pc]	; 60001fec <__main_veneer+0x4>
60001fec:	00016695 	.word	0x00016695

60001ff0 <__sm_set_pool_veneer>:
60001ff0:	f85f f000 	ldr.w	pc, [pc]	; 60001ff4 <__sm_set_pool_veneer+0x4>
60001ff4:	00018181 	.word	0x00018181

60001ff8 <__set_arm_clock_veneer>:
60001ff8:	f85f f000 	ldr.w	pc, [pc]	; 60001ffc <__set_arm_clock_veneer+0x4>
60001ffc:	00015c11 	.word	0x00015c11

60002000 <__frame_dummy_init_array_entry>:
60002000:	00000149 0000072d 00001d69 000021b1     I...-...i....!..
60002010:	00002535 00002a11 00002eb5 00003659     5%...*......Y6..
60002020:	00004655 000051dd 0000570d 00006035     UF...Q...W..5`..
60002030:	00006e8d 00008509 0000901d 0000a489     .n..............
60002040:	0000b69d 0000bacd 0000c0bd 0000cec5     ................
60002050:	0000dbd5 0000fd9d 00014f55 00015b39     ........UO..9[..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
		// do callback function...
		//println("    completed");
		return true;
	}
	return false;
}
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char s[MSL];
  // changed to svs rather than svo, the bridge do not handle same name 
  // both to and from robot - gets relayed back to robot (create overhead)
  snprintf(s, MSL, "enc %lu %lu\r\n", encoder[0], encoder[1]);
  usb.send(s);
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
      2a:	4015      	ands	r5, r2

void USubss::sendPublishList(int & listNum)
{
  for (int i = 0; i < (int)subs.size(); i++)
    subs[i]->sendPublishList(listNum);
}
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0x9f>)
{
  const int MSL = 150;
  char s[MSL];
  snprintf(s, MSL, "# '%s';'%s';'%s'\r\n", lineName, lineState, lineFree);
  usb.send(s);
}
      30:	2601      	movs	r6, #1
      32:	619d      	str	r5, [r3, #24]
{
  const int MSL = 200;
  char s[MSL];
  snprintf(s, MSL, "pub %d %s %s\r\n", listNum++, msgKey, helpText);
  usb.send(s);
}
      34:	fa95 f4a5 	rbit	r4, r5
           motorCurrentRawAD[0],
           motorCurrentRawAD[1],
           supplyCurrent
  );
  usb.send(s);
}
      38:	fab4 f484 	clz	r4, r4
  bool pressed_now = not digitalReadFast(PIN_START_BUTTON);
  if (buttonPressed and not pressed_now and not robot.poweringOff)
    released = true;
  buttonPressed = pressed_now;
  return released;
}
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
		if (changebits & (1 << i)) {
			send_getstatus(i);
		}
	}
	queue_Data_Transfer(changepipe, &changebits, 1, this);
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
	queue_Data_Transfer(changepipe, &changebits, 1, this);
      44:	4798      	blx	r3
  //   int16_t * m = mpu.getMag();
  snprintf(reply, MRL, "# AS5147U: interface %d, reg  %x = warn=%d, err=%d, data= 0x%04x\r\n",
           reg16Interface, reg16, reg16Raw.values.pard, reg16Raw.values.ef, reg16Raw.values.data);
  usb.send(reply);
  reg16IsSend = true;
}
      46:	43a5      	bics	r5, r4
  snprintf(reply, MRL, "gyroo %f %f %f\r\n",
           offsetGyro[0],
           offsetGyro[1],
           offsetGyro[2]);
  usb.send(reply);
}
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa3>)
  char reply[MRL];
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
           motorCurrentMOffset[0]/300, motorCurrentMOffset[1]/300, 
           ad.motorCurrentRawAD[0], ad.motorCurrentRawAD[1]);
  usb.send(reply);
}
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
    65000; // default
  else if (frq < 100)
    PWMfrq = 100;
  else
    PWMfrq = frq;
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa7>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      6a:	4798      	blx	r3
}

// for debugging, hopefully never needed...
void USBHost::countFree(uint32_t &devices, uint32_t &pipes, uint32_t &transfers, uint32_t &strs)
{
	uint32_t ndev=0, npipe=0, ntransfer=0, nstr=0;
      6c:	43a5      	bics	r5, r4
	Transfer_t *transfer = free_Transfer_list;
	while (transfer) {
		ntransfer++;
		transfer = *(Transfer_t **)transfer;
	}
	strbuf_t *str = free_strbuf_list;
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xab>)
	while (str) {
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
	uint32_t ndev=0, npipe=0, ntransfer=0, nstr=0;
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xaf>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
      80:	fa95 f4a5 	rbit	r4, r5
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
        txbuf_[7] = 0x10;
        txbuf_[8] = 0x01;
        txbuf_[9] = 0x02;
        txbuf_[10] = 0x12;
        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        return driver_->sendControlPacket(0x21, 9, 0x305, 0, 11, txbuf_);
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb3>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
    }
    return false;
}
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb7>)
			write(iaddress.b[n]);
      a2:	2601      	movs	r6, #1
		} while (n > 0);
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
}
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FF8000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
      b2:	fa06 f404 	lsl.w	r4, r6, r4
      b6:	4798      	blx	r3
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      bc:	f3bf 8f4f 	dsb	sy
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	200099f0 	.word	0x200099f0
      c8:	42004000 	.word	0x42004000
      cc:	20009a70 	.word	0x20009a70
      d0:	42008000 	.word	0x42008000
      d4:	20009af0 	.word	0x20009af0
      d8:	4200c000 	.word	0x4200c000
      dc:	20009b70 	.word	0x20009b70

000000e0 <deregister_tm_clones>:
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList4c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList4c, sizeof(scrollList4c));
  TRANSACTION_END
}
      e0:	4803      	ldr	r0, [pc, #12]	; (f0 <deregister_tm_clones+0x10>)
      e2:	4b04      	ldr	r3, [pc, #16]	; (f4 <deregister_tm_clones+0x14>)
	// transfer value
	digitalWrite(chipSelectPin, LOW);
	SPI.transfer16(value);
	digitalWrite(chipSelectPin, HIGH);
	SPI.endTransaction();
}
      e4:	4283      	cmp	r3, r0
      e6:	d002      	beq.n	ee <deregister_tm_clones+0xe>
      e8:	4b03      	ldr	r3, [pc, #12]	; (f8 <deregister_tm_clones+0x18>)
      ea:	b103      	cbz	r3, ee <deregister_tm_clones+0xe>
      ec:	4718      	bx	r3
      ee:	4770      	bx	lr
      f0:	2000a2c0 	.word	0x2000a2c0
      f4:	2000a2c0 	.word	0x2000a2c0
      f8:	00000000 	.word	0x00000000

000000fc <register_tm_clones>:
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
      fc:	4805      	ldr	r0, [pc, #20]	; (114 <register_tm_clones+0x18>)
	if (pinmode & mask) {
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <register_tm_clones+0x1c>)
     100:	1a1b      	subs	r3, r3, r0
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     102:	0fd9      	lsrs	r1, r3, #31
     104:	eb01 01a3 	add.w	r1, r1, r3, asr #2
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
		    t += cycles / 2;
		}
	}
	else
	for (mask=0x01; mask; mask <<= 1) {
     108:	1049      	asrs	r1, r1, #1
     10a:	d002      	beq.n	112 <register_tm_clones+0x16>
     10c:	4b03      	ldr	r3, [pc, #12]	; (11c <register_tm_clones+0x20>)
	if (pin >= CORE_NUM_DIGITAL) return;
     10e:	b103      	cbz	r3, 112 <register_tm_clones+0x16>
     110:	4718      	bx	r3
     112:	4770      	bx	lr
     114:	2000a2c0 	.word	0x2000a2c0
     118:	2000a2c0 	.word	0x2000a2c0
     11c:	00000000 	.word	0x00000000

00000120 <__do_global_dtors_aux>:
     120:	b510      	push	{r4, lr}
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <__do_global_dtors_aux+0x1c>)
	pinmode = *(p->reg + 1);
     124:	7823      	ldrb	r3, [r4, #0]
	mask = p->mask;
     126:	b943      	cbnz	r3, 13a <__do_global_dtors_aux+0x1a>
	pinmode = *(p->reg + 1);
     128:	f7ff ffda 	bl	e0 <deregister_tm_clones>
	if (pinmode & mask) {
     12c:	4b04      	ldr	r3, [pc, #16]	; (140 <__do_global_dtors_aux+0x20>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	b113      	cbz	r3, 136 <__do_global_dtors_aux+0x16>
     130:	4804      	ldr	r0, [pc, #16]	; (144 <__do_global_dtors_aux+0x24>)
	pinmode = *(p->reg + 1);
     132:	f3af 8000 	nop.w
	if (pinmode & mask) {
     136:	2301      	movs	r3, #1
     138:	7023      	strb	r3, [r4, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	bd10      	pop	{r4, pc}
     13c:	2000e0e8 	.word	0x2000e0e8
     140:	00000000 	.word	0x00000000
     144:	60032000 	.word	0x60032000

00000148 <frame_dummy>:
     148:	b508      	push	{r3, lr}
     14a:	4b04      	ldr	r3, [pc, #16]	; (15c <frame_dummy+0x14>)
     14c:	b11b      	cbz	r3, 156 <frame_dummy+0xe>
     14e:	4904      	ldr	r1, [pc, #16]	; (160 <frame_dummy+0x18>)
     150:	4804      	ldr	r0, [pc, #16]	; (164 <frame_dummy+0x1c>)
     152:	f3af 8000 	nop.w
     156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     15a:	e7cf      	b.n	fc <register_tm_clones>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	00000000 	.word	0x00000000
     160:	2000e0ec 	.word	0x2000e0ec
    // setup adc_etc - BUGBUG have not used the preset values yet.
    if (IMXRT_ADC_ETC.CTRL & ADC_ETC_CTRL_SOFTRST)
    { // SOFTRST
        // Soft reset
        atomic::clearBitFlag(IMXRT_ADC_ETC.CTRL, ADC_ETC_CTRL_SOFTRST);
        delay(5); // give some time to be sure it is init
     164:	60032000 	.word	0x60032000

00000168 <getRevisionString()>:

///
const char * getRevisionString()
{
  return "$Id: teensy_firmware_8.ino 1033 2025-01-26 15:41:51Z jcan $";
}
     168:	4800      	ldr	r0, [pc, #0]	; (16c <getRevisionString()+0x4>)
     16a:	4770      	bx	lr
     16c:	20002684 	.word	0x20002684

00000170 <setup>:


// ////////////////////////////////////////

void setup()   // INITIALIZATION
{
     170:	b508      	push	{r3, lr}
   * Set intensity to 0=off, 1=max or 2..255 PWM intensity
   * */
  inline void setStatusLed(uint8_t value) {
    #if defined(REGBOT_HW4) || defined(REGBOT_HW41) || defined(REGBOT_HW63_35)
    int pin = PIN_LED_STATUS;
    if (robotHWversion == 9)
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <setup+0x24>)
    { // blue board (PCB version 6.x)
      pin = PIN_LED_STATUS_6;
    }
    if (value == 1)
      // boolean value, so max intensity
      analogWrite(pin, 4095);
     174:	f640 71ff 	movw	r1, #4095	; 0xfff
    if (robotHWversion == 9)
     178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
     17c:	2b09      	cmp	r3, #9
      analogWrite(pin, 4095);
     17e:	bf14      	ite	ne
     180:	2006      	movne	r0, #6
     182:	2000      	moveq	r0, #0
     184:	f016 fc6c 	bl	16a60 <analogWrite>
  robot.setStatusLed(HIGH);
  service.setup();
     188:	4803      	ldr	r0, [pc, #12]	; (198 <setup+0x28>)
}
     18a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  service.setup();
     18e:	f00b bb43 	b.w	b818 <UService::setup()>
     192:	bf00      	nop
     194:	2000f660 	.word	0x2000f660
     198:	2000e0c8 	.word	0x2000e0c8

0000019c <loop>:
    if (robotHWversion == 9)
     19c:	4b11      	ldr	r3, [pc, #68]	; (1e4 <loop+0x48>)
    else
      // use value as is - but convert to 12 bit
      analogWrite(pin, value << 3);
     19e:	2100      	movs	r1, #0
* Main loop
* */
// const int MSL = 100;
// char s[MSL];
void loop ( void )
{
     1a0:	b570      	push	{r4, r5, r6, lr}
    if (robotHWversion == 9)
     1a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  robot.setStatusLed(LOW);
  int cnt = 0;
  bool done1 = false;
  while ( true )
  { // main loop
    if (service.isSampleTime())
     1a6:	4c10      	ldr	r4, [pc, #64]	; (1e8 <loop+0x4c>)
      pin = PIN_LED_STATUS_6;
     1a8:	2b09      	cmp	r3, #9
    {
      service.updateSensors();
      // advance mission
      done1 = dbehave.tick();
     1aa:	4e10      	ldr	r6, [pc, #64]	; (1ec <loop+0x50>)
      if (done1)
        usb.send("%% finished demo 1\n");
     1ac:	4d10      	ldr	r5, [pc, #64]	; (1f0 <loop+0x54>)
      analogWrite(pin, value << 3);
     1ae:	bf14      	ite	ne
     1b0:	2006      	movne	r0, #6
     1b2:	4608      	moveq	r0, r1
     1b4:	f016 fc54 	bl	16a60 <analogWrite>
    if (service.isSampleTime())
     1b8:	4620      	mov	r0, r4
     1ba:	f00b fbc1 	bl	b940 <UService::isSampleTime()>
     1be:	2800      	cmp	r0, #0
     1c0:	d0fa      	beq.n	1b8 <loop+0x1c>
      service.updateSensors();
     1c2:	4620      	mov	r0, r4
     1c4:	f00b fc12 	bl	b9ec <UService::updateSensors()>
      done1 = dbehave.tick();
     1c8:	4630      	mov	r0, r6
     1ca:	f000 f8b1 	bl	330 <UDemo_Behave::tick()>
     1ce:	4603      	mov	r3, r0
        usb.send("%% finished demo 1\n");
     1d0:	4629      	mov	r1, r5
     1d2:	4808      	ldr	r0, [pc, #32]	; (1f4 <loop+0x58>)
      if (done1)
     1d4:	b10b      	cbz	r3, 1da <loop+0x3e>
        usb.send("%% finished demo 1\n");
     1d6:	f00c fa19 	bl	c60c <UUSB::send(char const*)>
      // implement mission actions
      service.updateActuators();
     1da:	4620      	mov	r0, r4
     1dc:	f00b fc42 	bl	ba64 <UService::updateActuators()>
      cnt++;
     1e0:	e7ea      	b.n	1b8 <loop+0x1c>
     1e2:	bf00      	nop
     1e4:	2000f660 	.word	0x2000f660
     1e8:	2000e0c8 	.word	0x2000e0c8
     1ec:	2000eaf0 	.word	0x2000eaf0
     1f0:	2000852c 	.word	0x2000852c
     1f4:	2000fac4 	.word	0x2000fac4

000001f8 <UDemo_Behave::followLine(float) [clone .part.0]>:
  float e, u;
  const float kp = 0.5;
  if (ls.lineValid)
  { // line position is a value from
    // about -2 (robot too far right) to +2 (too far left)
    e = pos - ls.linePosition; // error compared to 'pos'
     1f8:	4b19      	ldr	r3, [pc, #100]	; (260 <UDemo_Behave::followLine(float) [clone .part.0]+0x68>)
    //u = kp * e;   // P controller
    u = lead.tick(kp * e);  // P-Lead controller
     1fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    e = pos - ls.linePosition; // error compared to 'pos'
     1fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
void UDemo_Behave::followLine(float pos)
     202:	4603      	mov	r3, r0
    // get average voltage
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     204:	4817      	ldr	r0, [pc, #92]	; (264 <UDemo_Behave::followLine(float) [clone .part.0]+0x6c>)
    e = pos - ls.linePosition; // error compared to 'pos'
     206:	ee30 0a67 	vsub.f32	s0, s0, s15


float ULead::tick(float x)
{
  float y = 0;
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     20a:	ed93 7a04 	vldr	s14, [r3, #16]
     20e:	edd3 7a03 	vldr	s15, [r3, #12]
     212:	ed93 4a02 	vldr	s8, [r3, #8]
    u = lead.tick(kp * e);  // P-Lead controller
     216:	ee20 0a06 	vmul.f32	s0, s0, s12
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     21a:	ed93 5a05 	vldr	s10, [r3, #20]
     21e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
     222:	edd3 6a01 	vldr	s13, [r3, #4]
     226:	edd3 5a00 	vldr	s11, [r3]
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     22a:	ed90 7a06 	vldr	s14, [r0, #24]
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     22e:	eee0 7a04 	vfma.f32	s15, s0, s8
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     232:	edd0 4a07 	vldr	s9, [r0, #28]
  x1 = x;
     236:	ed83 0a04 	vstr	s0, [r3, #16]
    float avgv = (motor.motorVoltage[0] + motor.motorVoltage[1])/2;
     23a:	ee37 7a24 	vadd.f32	s14, s14, s9
  y = (x * tauZ2pT - x1 * tauZ2mT + y1 * tauP2mT)/tauP2pT;
     23e:	eee5 7a26 	vfma.f32	s15, s10, s13
     242:	eec7 6aa5 	vdiv.f32	s13, s15, s11
    motor.setMotorVoltage(avgv - u, avgv + u);
     246:	eef0 0a66 	vmov.f32	s1, s13
  y1 = y;
     24a:	edc3 6a05 	vstr	s13, [r3, #20]
    motor.setMotorVoltage(avgv - u, avgv + u);
     24e:	eeb0 0a66 	vmov.f32	s0, s13
     252:	eee7 0a06 	vfma.f32	s1, s14, s12
     256:	ee97 0a06 	vfnms.f32	s0, s14, s12
     25a:	f008 be5d 	b.w	8f18 <UMotor::setMotorVoltage(float, float)>
     25e:	bf00      	nop
     260:	2000f390 	.word	0x2000f390
     264:	2000f4c8 	.word	0x2000f4c8

00000268 <ULead::setup(float, float, float)>:
  tauP2pT = tauP*2.0 + sampleTime;
     268:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     26c:	4a2d      	ldr	r2, [pc, #180]	; (324 <ULead::setup(float, float, float)+0xbc>)
  tauP2pT = tauP*2.0 + sampleTime;
     26e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     272:	2196      	movs	r1, #150	; 0x96
  tauP2pT = tauP*2.0 + sampleTime;
     274:	eeb7 7ae0 	vcvt.f64.f32	d7, s1
     278:	eeb0 2b41 	vmov.f64	d2, d1
  tauZ2pT = tauZ * 2.0 + sampleTime;
     27c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
  tauP2mT = tauP*2.0 - sampleTime;
     280:	eeb0 3b41 	vmov.f64	d3, d1
  tauZ2pT = tauZ * 2.0 + sampleTime;
     284:	eeb0 4b41 	vmov.f64	d4, d1
  tauZ2mT = tauZ * 2.0 - sampleTime;
     288:	eeb0 5b41 	vmov.f64	d5, d1
  tauP2pT = tauP*2.0 + sampleTime;
     28c:	eea7 2b06 	vfma.f64	d2, d7, d6
  tauP2mT = tauP*2.0 - sampleTime;
     290:	ee97 3b06 	vfnms.f64	d3, d7, d6
  tauZ2pT = tauZ * 2.0 + sampleTime;
     294:	eea0 4b06 	vfma.f64	d4, d0, d6
  tauZ2mT = tauZ * 2.0 - sampleTime;
     298:	ee90 5b06 	vfnms.f64	d5, d0, d6
  tauP2pT = tauP*2.0 + sampleTime;
     29c:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  tauP2mT = tauP*2.0 - sampleTime;
     2a0:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  tauZ2pT = tauZ * 2.0 + sampleTime;
     2a4:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
{
     2a8:	b530      	push	{r4, r5, lr}
  tauZ2mT = tauZ * 2.0 - sampleTime;
     2aa:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
{
     2ae:	b0af      	sub	sp, #188	; 0xbc
     2b0:	4604      	mov	r4, r0
  usb.send(s);
     2b2:	4d1d      	ldr	r5, [pc, #116]	; (328 <ULead::setup(float, float, float)+0xc0>)
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     2b4:	a808      	add	r0, sp, #32
     2b6:	ed8d 1b04 	vstr	d1, [sp, #16]
     2ba:	ed8d 7b02 	vstr	d7, [sp, #8]
     2be:	ed8d 0b00 	vstr	d0, [sp]
  tauP2pT = tauP*2.0 + sampleTime;
     2c2:	ed84 2a00 	vstr	s4, [r4]
  tauP2mT = tauP*2.0 - sampleTime;
     2c6:	ed84 3a01 	vstr	s6, [r4, #4]
  tauZ2pT = tauZ * 2.0 + sampleTime;
     2ca:	ed84 4a02 	vstr	s8, [r4, #8]
  tauZ2mT = tauZ * 2.0 - sampleTime;
     2ce:	ed84 5a03 	vstr	s10, [r4, #12]
  snprintf(s, MSL, "%% Lead: tauZ %g sec, tauP = %g sec, T = %g sec\n",
     2d2:	f01b fa6f 	bl	1b7b4 <snprintf>
  usb.send(s);
     2d6:	a908      	add	r1, sp, #32
     2d8:	4628      	mov	r0, r5
     2da:	f00c f997 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "%%       tauZ2pT = %g, tauZ2mT = %g, tauP2pT = %g, tauP2mT = %g\n",
     2de:	ed94 4a01 	vldr	s8, [r4, #4]
     2e2:	ed94 5a00 	vldr	s10, [r4]
     2e6:	2196      	movs	r1, #150	; 0x96
     2e8:	ed94 6a03 	vldr	s12, [r4, #12]
     2ec:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     2f0:	ed94 7a02 	vldr	s14, [r4, #8]
     2f4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
     2f8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     2fc:	4a0b      	ldr	r2, [pc, #44]	; (32c <ULead::setup(float, float, float)+0xc4>)
     2fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     302:	a808      	add	r0, sp, #32
     304:	ed8d 4b06 	vstr	d4, [sp, #24]
     308:	ed8d 5b04 	vstr	d5, [sp, #16]
     30c:	ed8d 6b02 	vstr	d6, [sp, #8]
     310:	ed8d 7b00 	vstr	d7, [sp]
     314:	f01b fa4e 	bl	1b7b4 <snprintf>
  usb.send(s);
     318:	a908      	add	r1, sp, #32
     31a:	4628      	mov	r0, r5
     31c:	f00c f976 	bl	c60c <UUSB::send(char const*)>
}
     320:	b02f      	add	sp, #188	; 0xbc
     322:	bd30      	pop	{r4, r5, pc}
     324:	20004d20 	.word	0x20004d20
     328:	2000fac4 	.word	0x2000fac4
     32c:	20004d54 	.word	0x20004d54

00000330 <UDemo_Behave::tick()>:
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	6985      	ldr	r5, [r0, #24]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
     334:	b0b7      	sub	sp, #220	; 0xdc
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
     336:	4604      	mov	r4, r0
     338:	2d0e      	cmp	r5, #14
     33a:	dc14      	bgt.n	366 <UDemo_Behave::tick()+0x36>
     33c:	2d00      	cmp	r5, #0
     33e:	db23      	blt.n	388 <UDemo_Behave::tick()+0x58>
     340:	2d0e      	cmp	r5, #14
     342:	d821      	bhi.n	388 <UDemo_Behave::tick()+0x58>
     344:	e8df f015 	tbh	[pc, r5, lsl #1]
     348:	00200055 	.word	0x00200055
  // debug
  snprintf(s, MSL, "# calc K and R vel: R=%.3f, OK=%d\n", estR, estR > 0 and estK > 0);
  usb.send(s);
  // debug end
  return estR > 0 and estK > 0;
}
     34c:	00200020 	.word	0x00200020
     350:	00200020 	.word	0x00200020
     354:	00200020 	.word	0x00200020
     358:	00200020 	.word	0x00200020
     35c:	00cd009d 	.word	0x00cd009d
     360:	012200f5 	.word	0x012200f5
     364:	0146      	.short	0x0146
     366:	2d5a      	cmp	r5, #90	; 0x5a
     368:	d10e      	bne.n	388 <UDemo_Behave::tick()+0x58>
     36a:	4bc9      	ldr	r3, [pc, #804]	; (690 <UDemo_Behave::tick()+0x360>)
     36c:	edd0 7a07 	vldr	s15, [r0, #28]
     370:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
     374:	eeb4 7ae7 	vcmpe.f32	s14, s15
     378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     37c:	f340 8158 	ble.w	630 <UDemo_Behave::tick()+0x300>
     380:	2363      	movs	r3, #99	; 0x63
     382:	461d      	mov	r5, r3
     384:	61a3      	str	r3, [r4, #24]
     386:	e086      	b.n	496 <UDemo_Behave::tick()+0x166>
    encoderReversed = not encoderReversed;
     388:	2500      	movs	r5, #0
    return false;
     38a:	6a26      	ldr	r6, [r4, #32]
    usb.send("# encoder reversed is fixed, run test again\n");
     38c:	61a5      	str	r5, [r4, #24]
    encoderReversed = not encoderReversed;
     38e:	b1fe      	cbz	r6, 3d0 <UDemo_Behave::tick()+0xa0>
     390:	4bc0      	ldr	r3, [pc, #768]	; (694 <UDemo_Behave::tick()+0x364>)
    usb.send("# encoder reversed is fixed, run test again\n");
     392:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
     396:	f019 f8c9 	bl	1952c <__aeabi_ul2f>
}
     39a:	ee07 0a90 	vmov	s15, r0
     39e:	4633      	mov	r3, r6
     3a0:	4abd      	ldr	r2, [pc, #756]	; (698 <UDemo_Behave::tick()+0x368>)
     3a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  for (int i = 0; i < lowN; i++)
     3a6:	21c8      	movs	r1, #200	; 0xc8
     3a8:	a804      	add	r0, sp, #16
  float sumCurLow = 0;
     3aa:	9500      	str	r5, [sp, #0]
     3ac:	ed9f 6bae 	vldr	d6, [pc, #696]	; 668 <UDemo_Behave::tick()+0x338>
  for (int i = 0; i < highN; i++)
     3b0:	ee27 7b06 	vmul.f64	d7, d7, d6
  float sumCurHigh = 0;
     3b4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     3b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     3bc:	ed8d 7b02 	vstr	d7, [sp, #8]
     3c0:	f01b f9f8 	bl	1b7b4 <snprintf>
     3c4:	a904      	add	r1, sp, #16
     3c6:	48b5      	ldr	r0, [pc, #724]	; (69c <UDemo_Behave::tick()+0x36c>)
     3c8:	f00c f920 	bl	c60c <UUSB::send(char const*)>
     3cc:	69a3      	ldr	r3, [r4, #24]
     3ce:	6223      	str	r3, [r4, #32]
     3d0:	eddf 0ab3 	vldr	s1, [pc, #716]	; 6a0 <UDemo_Behave::tick()+0x370>
    motor.setMotorVoltage(0, 0);
     3d4:	48b3      	ldr	r0, [pc, #716]	; (6a4 <UDemo_Behave::tick()+0x374>)
     3d6:	eeb0 0a60 	vmov.f32	s0, s1
     3da:	f008 fd9d 	bl	8f18 <UMotor::setMotorVoltage(float, float)>
    logger.stopLogging();
     3de:	48b2      	ldr	r0, [pc, #712]	; (6a8 <UDemo_Behave::tick()+0x378>)
     3e0:	f006 fe82 	bl	70e8 <ULog::stopLogging()>
    ls.lineSensorOn = false;
     3e4:	4bb1      	ldr	r3, [pc, #708]	; (6ac <UDemo_Behave::tick()+0x37c>)
     3e6:	2200      	movs	r2, #0
     3e8:	2001      	movs	r0, #1
     3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
     3ee:	b037      	add	sp, #220	; 0xdc
     3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return (CORE_PIN37_PINREG & CORE_PIN37_BITMASK) ? 1 : 0;
     3f2:	4baf      	ldr	r3, [pc, #700]	; (6b0 <UDemo_Behave::tick()+0x380>)
     3f4:	689b      	ldr	r3, [r3, #8]
     3f6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  if (buttonPressed and not pressed_now and not robot.poweringOff)
     3fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
     3fe:	f000 8167 	beq.w	6d0 <UDemo_Behave::tick()+0x3a0>
     402:	2b00      	cmp	r3, #0
     404:	f000 8165 	beq.w	6d2 <UDemo_Behave::tick()+0x3a2>
     408:	4baa      	ldr	r3, [pc, #680]	; (6b4 <UDemo_Behave::tick()+0x384>)
     40a:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
     40e:	2a00      	cmp	r2, #0
     410:	f040 817d 	bne.w	70e <UDemo_Behave::tick()+0x3de>
  buttonPressed = pressed_now;
     414:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
        usb.use_CRC = false;
     418:	2200      	movs	r2, #0
        encoder.clearPose();
     41a:	4d9d      	ldr	r5, [pc, #628]	; (690 <UDemo_Behave::tick()+0x360>)
        usb.use_CRC = false;
     41c:	489f      	ldr	r0, [pc, #636]	; (69c <UDemo_Behave::tick()+0x36c>)
        usb.send("%% starting\n");
     41e:	49a6      	ldr	r1, [pc, #664]	; (6b8 <UDemo_Behave::tick()+0x388>)
        robot.missionStart = false;
     420:	761a      	strb	r2, [r3, #24]
        usb.use_CRC = false;
     422:	f880 2121 	strb.w	r2, [r0, #289]	; 0x121
        usb.send("%% starting\n");
     426:	f00c f8f1 	bl	c60c <UUSB::send(char const*)>
        encoder.clearPose();
     42a:	4628      	mov	r0, r5
     42c:	f003 fd80 	bl	3f30 <UEncoder::clearPose()>
   * normally constant, but can be set for special
   * requirements, e.g. motortest */
  uint32_t sampleTime_us;
  float sampleTime_sec()
  {
    return float(sampleTime_us)/1e6;
     430:	4b98      	ldr	r3, [pc, #608]	; (694 <UDemo_Behave::tick()+0x364>)
     432:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 6bc <UDemo_Behave::tick()+0x38c>
        lead.setup(0.8, 0.15, service.sampleTime_sec());
     436:	4620      	mov	r0, r4
     438:	edd3 7a00 	vldr	s15, [r3]
     43c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 6c0 <UDemo_Behave::tick()+0x390>
     440:	eef8 7a67 	vcvt.f32.u32	s15, s15
     444:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 6c4 <UDemo_Behave::tick()+0x394>
     448:	ee87 1a81 	vdiv.f32	s2, s15, s2
     44c:	f7ff ff0c 	bl	268 <ULead::setup(float, float, float)>
        logger.startLogging(2, true);
     450:	2201      	movs	r2, #1
     452:	2102      	movs	r1, #2
     454:	4894      	ldr	r0, [pc, #592]	; (6a8 <UDemo_Behave::tick()+0x378>)
     456:	f007 fc8f 	bl	7d78 <ULog::startLogging(int, bool)>
        endTime =encoder.tripBtime + 0.1;
     45a:	ed95 7a1d 	vldr	s14, [r5, #116]	; 0x74
        state = 10;
     45e:	230a      	movs	r3, #10
        ls.lineSensorOn = true;
     460:	4a92      	ldr	r2, [pc, #584]	; (6ac <UDemo_Behave::tick()+0x37c>)
        endTime =encoder.tripBtime + 0.1;
     462:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ls.lineSensorOn = true;
     466:	2101      	movs	r1, #1
     468:	461d      	mov	r5, r3
     46a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
        state = 10;
     46e:	61a3      	str	r3, [r4, #24]
        endTime =encoder.tripBtime + 0.1;
     470:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 670 <UDemo_Behave::tick()+0x340>
     474:	ee37 7b06 	vadd.f64	d7, d7, d6
     478:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     47c:	ed84 7a07 	vstr	s14, [r4, #28]
     480:	e009      	b.n	496 <UDemo_Behave::tick()+0x166>
      if (encoder.tripBtime > endTime)
     482:	4e83      	ldr	r6, [pc, #524]	; (690 <UDemo_Behave::tick()+0x360>)
     484:	edd0 7a07 	vldr	s15, [r0, #28]
     488:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     48c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     494:	dc62      	bgt.n	55c <UDemo_Behave::tick()+0x22c>
  if (state != lastState)
     496:	6a26      	ldr	r6, [r4, #32]
     498:	42b5      	cmp	r5, r6
     49a:	d074      	beq.n	586 <UDemo_Behave::tick()+0x256>
   * Not folding system time in us ~4e9 hours
   * NB! updated at sample time only. */
  uint64_t time_us;
  inline float time_sec()
  {
    return float(time_us)*1e-6;
     49c:	4b7d      	ldr	r3, [pc, #500]	; (694 <UDemo_Behave::tick()+0x364>)
     49e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
     4a2:	f019 f843 	bl	1952c <__aeabi_ul2f>
     4a6:	ee07 0a90 	vmov	s15, r0
    snprintf(s, MSL, "%% Demo behave:: state changed from %d to %d at %.4f sec\n",
     4aa:	4633      	mov	r3, r6
     4ac:	4a7a      	ldr	r2, [pc, #488]	; (698 <UDemo_Behave::tick()+0x368>)
     4ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
     4b2:	21c8      	movs	r1, #200	; 0xc8
     4b4:	a804      	add	r0, sp, #16
     4b6:	9500      	str	r5, [sp, #0]
     4b8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 668 <UDemo_Behave::tick()+0x338>
     4bc:	ee27 7b06 	vmul.f64	d7, d7, d6
     4c0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     4c4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     4c8:	ed8d 7b02 	vstr	d7, [sp, #8]
     4cc:	f01b f972 	bl	1b7b4 <snprintf>
    usb.send(s);
     4d0:	a904      	add	r1, sp, #16
     4d2:	4872      	ldr	r0, [pc, #456]	; (69c <UDemo_Behave::tick()+0x36c>)
     4d4:	f00c f89a 	bl	c60c <UUSB::send(char const*)>
    lastState = state;
     4d8:	69a3      	ldr	r3, [r4, #24]
     4da:	2000      	movs	r0, #0
     4dc:	6223      	str	r3, [r4, #32]
}
     4de:	b037      	add	sp, #220	; 0xdc
     4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (encoder.tripBtime > endTime  or encoder.tripB > 0.3)
     4e2:	4e6b      	ldr	r6, [pc, #428]	; (690 <UDemo_Behave::tick()+0x360>)
     4e4:	edd0 7a07 	vldr	s15, [r0, #28]
     4e8:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     4ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
     4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4f4:	dc0a      	bgt.n	50c <UDemo_Behave::tick()+0x1dc>
     4f6:	ed96 7a19 	vldr	s14, [r6, #100]	; 0x64
     4fa:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 678 <UDemo_Behave::tick()+0x348>
     4fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     502:	eeb4 7bc6 	vcmpe.f64	d7, d6
     506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     50a:	ddc4      	ble.n	496 <UDemo_Behave::tick()+0x166>
        motor.setMotorVoltage(1.5, 3.0);
     50c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
     510:	4864      	ldr	r0, [pc, #400]	; (6a4 <UDemo_Behave::tick()+0x374>)
     512:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
     516:	f008 fcff 	bl	8f18 <UMotor::setMotorVoltage(float, float)>
        endTime = encoder.tripBtime + 10.0;
     51a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
     51e:	edd6 7a1d 	vldr	s15, [r6, #116]	; 0x74
        state = 12;
     522:	230c      	movs	r3, #12
        endTime = encoder.tripBtime + 10.0;
     524:	ee77 7a87 	vadd.f32	s15, s15, s14
        state = 12;
     528:	461d      	mov	r5, r3
     52a:	61a3      	str	r3, [r4, #24]
        endTime = encoder.tripBtime + 10.0;
     52c:	edc4 7a07 	vstr	s15, [r4, #28]
        state = 12;
     530:	e7b1      	b.n	496 <UDemo_Behave::tick()+0x166>
      if (encoder.tripBtime > endTime or encoder.tripBh > M_PI/2.0)
     532:	4e57      	ldr	r6, [pc, #348]	; (690 <UDemo_Behave::tick()+0x360>)
     534:	edd0 7a07 	vldr	s15, [r0, #28]
     538:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     53c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     544:	dc0a      	bgt.n	55c <UDemo_Behave::tick()+0x22c>
     546:	ed96 7a1b 	vldr	s14, [r6, #108]	; 0x6c
     54a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 680 <UDemo_Behave::tick()+0x350>
     54e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     552:	eeb4 7bc6 	vcmpe.f64	d7, d6
     556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     55a:	dd9c      	ble.n	496 <UDemo_Behave::tick()+0x166>
        motor.setMotorVoltage(2, 2);
     55c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
     560:	4850      	ldr	r0, [pc, #320]	; (6a4 <UDemo_Behave::tick()+0x374>)
     562:	eeb0 0a60 	vmov.f32	s0, s1
     566:	f008 fcd7 	bl	8f18 <UMotor::setMotorVoltage(float, float)>
        state = 13;
     56a:	230d      	movs	r3, #13
        endTime = encoder.tripBtime + 10.00;
     56c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
     570:	edd6 7a1d 	vldr	s15, [r6, #116]	; 0x74
        state = 13;
     574:	461d      	mov	r5, r3
  if (state != lastState)
     576:	6a26      	ldr	r6, [r4, #32]
        state = 13;
     578:	61a3      	str	r3, [r4, #24]
        endTime = encoder.tripBtime + 10.00;
     57a:	ee77 7a87 	vadd.f32	s15, s15, s14
  if (state != lastState)
     57e:	42b5      	cmp	r5, r6
        endTime = encoder.tripBtime + 10.00;
     580:	edc4 7a07 	vstr	s15, [r4, #28]
  if (state != lastState)
     584:	d18a      	bne.n	49c <UDemo_Behave::tick()+0x16c>
     586:	2000      	movs	r0, #0
}
     588:	b037      	add	sp, #220	; 0xdc
     58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (encoder.tripBtime > endTime or ls.lineValidCnt > 15)
     58c:	4e40      	ldr	r6, [pc, #256]	; (690 <UDemo_Behave::tick()+0x360>)
     58e:	edd0 7a07 	vldr	s15, [r0, #28]
     592:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     596:	4f45      	ldr	r7, [pc, #276]	; (6ac <UDemo_Behave::tick()+0x37c>)
     598:	eeb4 7ae7 	vcmpe.f32	s14, s15
     59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5a0:	dc04      	bgt.n	5ac <UDemo_Behave::tick()+0x27c>
     5a2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
     5a6:	2b0f      	cmp	r3, #15
     5a8:	f77f af75 	ble.w	496 <UDemo_Behave::tick()+0x166>
        if (not ls.lineValid)
     5ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
     5b0:	2b00      	cmp	r3, #0
     5b2:	f040 8094 	bne.w	6de <UDemo_Behave::tick()+0x3ae>
          motor.setMotorVoltage(0, 0);
     5b6:	eddf 0a3a 	vldr	s1, [pc, #232]	; 6a0 <UDemo_Behave::tick()+0x370>
     5ba:	483a      	ldr	r0, [pc, #232]	; (6a4 <UDemo_Behave::tick()+0x374>)
     5bc:	eeb0 0a60 	vmov.f32	s0, s1
     5c0:	f008 fcaa 	bl	8f18 <UMotor::setMotorVoltage(float, float)>
          state = 90;
     5c4:	235a      	movs	r3, #90	; 0x5a
          usb.send("%% no line\n");
     5c6:	4940      	ldr	r1, [pc, #256]	; (6c8 <UDemo_Behave::tick()+0x398>)
     5c8:	4834      	ldr	r0, [pc, #208]	; (69c <UDemo_Behave::tick()+0x36c>)
          state = 90;
     5ca:	61a3      	str	r3, [r4, #24]
          usb.send("%% no line\n");
     5cc:	f00c f81e 	bl	c60c <UUSB::send(char const*)>
  if (state != lastState)
     5d0:	69a5      	ldr	r5, [r4, #24]
     5d2:	e760      	b.n	496 <UDemo_Behave::tick()+0x166>
  if (ls.lineValid)
     5d4:	4f35      	ldr	r7, [pc, #212]	; (6ac <UDemo_Behave::tick()+0x37c>)
     5d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
     5da:	2b00      	cmp	r3, #0
     5dc:	f040 8092 	bne.w	704 <UDemo_Behave::tick()+0x3d4>
      if (encoder.tripBtime > endTime or ls.lineValidCnt < 5)
     5e0:	4e2b      	ldr	r6, [pc, #172]	; (690 <UDemo_Behave::tick()+0x360>)
     5e2:	edd4 7a07 	vldr	s15, [r4, #28]
     5e6:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
     5ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
     5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5f2:	dc03      	bgt.n	5fc <UDemo_Behave::tick()+0x2cc>
     5f4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
     5f8:	2b04      	cmp	r3, #4
     5fa:	dc17      	bgt.n	62c <UDemo_Behave::tick()+0x2fc>
        motor.setMotorVoltage(0, 0);
     5fc:	eddf 0a28 	vldr	s1, [pc, #160]	; 6a0 <UDemo_Behave::tick()+0x370>
     600:	4828      	ldr	r0, [pc, #160]	; (6a4 <UDemo_Behave::tick()+0x374>)
     602:	eeb0 0a60 	vmov.f32	s0, s1
     606:	f008 fc87 	bl	8f18 <UMotor::setMotorVoltage(float, float)>
        snprintf(s, MSL, "%% followed line in %f sec\n", encoder.tripBtime);
     60a:	ed96 7a1d 	vldr	s14, [r6, #116]	; 0x74
        state = 90;
     60e:	235a      	movs	r3, #90	; 0x5a
        snprintf(s, MSL, "%% followed line in %f sec\n", encoder.tripBtime);
     610:	21c8      	movs	r1, #200	; 0xc8
     612:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     616:	4a2d      	ldr	r2, [pc, #180]	; (6cc <UDemo_Behave::tick()+0x39c>)
        state = 90;
     618:	61a3      	str	r3, [r4, #24]
        snprintf(s, MSL, "%% followed line in %f sec\n", encoder.tripBtime);
     61a:	a804      	add	r0, sp, #16
     61c:	ed8d 7b00 	vstr	d7, [sp]
     620:	f01b f8c8 	bl	1b7b4 <snprintf>
        usb.send(s);
     624:	a904      	add	r1, sp, #16
     626:	481d      	ldr	r0, [pc, #116]	; (69c <UDemo_Behave::tick()+0x36c>)
     628:	f00b fff0 	bl	c60c <UUSB::send(char const*)>
  if (state != lastState)
     62c:	69a5      	ldr	r5, [r4, #24]
     62e:	e732      	b.n	496 <UDemo_Behave::tick()+0x166>
         (fabsf(encoder.motorVelocity[0]) < 0.01 and fabsf(encoder.motorVelocity[1]) < 0.01))
     630:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
     634:	eeb0 7ac7 	vabs.f32	s14, s14
      if (encoder.tripBtime > endTime or
     638:	ed9f 6b13 	vldr	d6, [pc, #76]	; 688 <UDemo_Behave::tick()+0x358>
         (fabsf(encoder.motorVelocity[0]) < 0.01 and fabsf(encoder.motorVelocity[1]) < 0.01))
     63c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      if (encoder.tripBtime > endTime or
     640:	eeb4 7bc6 	vcmpe.f64	d7, d6
     644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     648:	f57f af25 	bpl.w	496 <UDemo_Behave::tick()+0x166>
         (fabsf(encoder.motorVelocity[0]) < 0.01 and fabsf(encoder.motorVelocity[1]) < 0.01))
     64c:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
     650:	eeb0 7ac7 	vabs.f32	s14, s14
     654:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     658:	eeb4 7bc6 	vcmpe.f64	d7, d6
     65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     660:	f57f af19 	bpl.w	496 <UDemo_Behave::tick()+0x166>
     664:	e68c      	b.n	380 <UDemo_Behave::tick()+0x50>
     666:	bf00      	nop
     668:	a0b5ed8d 	.word	0xa0b5ed8d
     66c:	3eb0c6f7 	.word	0x3eb0c6f7
     670:	9999999a 	.word	0x9999999a
     674:	3fb99999 	.word	0x3fb99999
     678:	33333333 	.word	0x33333333
     67c:	3fd33333 	.word	0x3fd33333
     680:	54442d18 	.word	0x54442d18
     684:	3ff921fb 	.word	0x3ff921fb
     688:	47ae147b 	.word	0x47ae147b
     68c:	3f847ae1 	.word	0x3f847ae1
     690:	2000ec40 	.word	0x2000ec40
     694:	2000e0c8 	.word	0x2000e0c8
     698:	2000395c 	.word	0x2000395c
     69c:	2000fac4 	.word	0x2000fac4
     6a0:	00000000 	.word	0x00000000
     6a4:	2000f4c8 	.word	0x2000f4c8
     6a8:	2000f24c 	.word	0x2000f24c
     6ac:	2000f390 	.word	0x2000f390
     6b0:	42004000 	.word	0x42004000
     6b4:	2000f660 	.word	0x2000f660
     6b8:	20003910 	.word	0x20003910
     6bc:	49742400 	.word	0x49742400
     6c0:	3e19999a 	.word	0x3e19999a
     6c4:	3f4ccccd 	.word	0x3f4ccccd
     6c8:	20003920 	.word	0x20003920
     6cc:	20003940 	.word	0x20003940
  if (buttonPressed and not pressed_now and not robot.poweringOff)
     6d0:	b19b      	cbz	r3, 6fa <UDemo_Behave::tick()+0x3ca>
     6d2:	4b11      	ldr	r3, [pc, #68]	; (718 <UDemo_Behave::tick()+0x3e8>)
      if (buttonReleased() or robot.missionStart)
     6d4:	7e1a      	ldrb	r2, [r3, #24]
     6d6:	2a00      	cmp	r2, #0
     6d8:	f43f aedd 	beq.w	496 <UDemo_Behave::tick()+0x166>
     6dc:	e69c      	b.n	418 <UDemo_Behave::tick()+0xe8>
    tripAh = 0;
    tripAtime = 0;
  };
  void inline tripBreset()
  {
    tripB = 0;
     6de:	2300      	movs	r3, #0
          endTime = 10.0;
     6e0:	4a0e      	ldr	r2, [pc, #56]	; (71c <UDemo_Behave::tick()+0x3ec>)
          state = 14;
     6e2:	210e      	movs	r1, #14
          usb.send("%% following line\n");
     6e4:	480e      	ldr	r0, [pc, #56]	; (720 <UDemo_Behave::tick()+0x3f0>)
          state = 14;
     6e6:	61a1      	str	r1, [r4, #24]
     6e8:	6673      	str	r3, [r6, #100]	; 0x64
    tripBh = 0;
     6ea:	66f3      	str	r3, [r6, #108]	; 0x6c
    tripBtime = 0;
     6ec:	6773      	str	r3, [r6, #116]	; 0x74
          usb.send("%% following line\n");
     6ee:	490d      	ldr	r1, [pc, #52]	; (724 <UDemo_Behave::tick()+0x3f4>)
          endTime = 10.0;
     6f0:	61e2      	str	r2, [r4, #28]
          usb.send("%% following line\n");
     6f2:	f00b ff8b 	bl	c60c <UUSB::send(char const*)>
  if (state != lastState)
     6f6:	69a5      	ldr	r5, [r4, #24]
     6f8:	e6cd      	b.n	496 <UDemo_Behave::tick()+0x166>
  buttonPressed = pressed_now;
     6fa:	2201      	movs	r2, #1
     6fc:	4b06      	ldr	r3, [pc, #24]	; (718 <UDemo_Behave::tick()+0x3e8>)
     6fe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  return released;
     702:	e7e7      	b.n	6d4 <UDemo_Behave::tick()+0x3a4>
     704:	ed9f 0a08 	vldr	s0, [pc, #32]	; 728 <UDemo_Behave::tick()+0x3f8>
     708:	f7ff fd76 	bl	1f8 <UDemo_Behave::followLine(float) [clone .part.0]>
     70c:	e768      	b.n	5e0 <UDemo_Behave::tick()+0x2b0>
  buttonPressed = pressed_now;
     70e:	2200      	movs	r2, #0
     710:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  return released;
     714:	e7de      	b.n	6d4 <UDemo_Behave::tick()+0x3a4>
     716:	bf00      	nop
     718:	2000f660 	.word	0x2000f660
     71c:	41200000 	.word	0x41200000
     720:	2000fac4 	.word	0x2000fac4
     724:	2000392c 	.word	0x2000392c
     728:	00000000 	.word	0x00000000

0000072c <_GLOBAL__sub_I_dbehave>:
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE. */
 
#pragma once

class ULead
     72c:	4b06      	ldr	r3, [pc, #24]	; (748 <_GLOBAL__sub_I_dbehave+0x1c>)
     72e:	2200      	movs	r2, #0
};

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

class UDemo_Behave
     730:	2100      	movs	r1, #0
     732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
class ULead
     736:	611a      	str	r2, [r3, #16]
     738:	615a      	str	r2, [r3, #20]
class UDemo_Behave
     73a:	6199      	str	r1, [r3, #24]
     73c:	61da      	str	r2, [r3, #28]
     73e:	6218      	str	r0, [r3, #32]
     740:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
  return y;
}
     744:	4770      	bx	lr
     746:	bf00      	nop
     748:	2000eaf0 	.word	0x2000eaf0

0000074c <AS5X47::AS5X47(unsigned char)>:
*/

#include "AS5X47.h"
#include "uusb.h"

AS5X47::AS5X47(uint8_t chipSelectPin) : spi(chipSelectPin) {
     74c:	b510      	push	{r4, lr}
     74e:	4604      	mov	r4, r0
     750:	f000 f9fc 	bl	b4c <AS5X47Spi::AS5X47Spi(unsigned char)>
}
     754:	4620      	mov	r0, r4
     756:	bd10      	pop	{r4, pc}

00000758 <AS5X47::readRegister(unsigned short)>:

  CommandFrame nopCommand;
  nopCommand.values.commandFrame = NOP_REG;
  nopCommand.values.rw = READ;
  nopCommand.values.parc = 0; //isEven(nopCommand.raw);
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  command.values.commandFrame = registerAddress;
     75c:	f3c1 010d 	ubfx	r1, r1, #0, #14
{
     760:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     762:	4311      	orrs	r1, r2
     764:	f000 fa06 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
	return receivedFrame;
}
     768:	bd08      	pop	{r3, pc}

static const char *decodeAscAscq(uint8_t asc, uint8_t ascq) {
	static char msg[64];
	uint16_t ascAscq = asc<<8 | ascq;

	switch (ascAscq) {
     76a:	bf00      	nop
     76c:	0000      	movs	r0, r0
	...

00000770 <AS5X47::readAngle()>:
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     770:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     774:	f647 71ff 	movw	r1, #32767	; 0x7fff
	contentFrame.values.low = 0;
	contentFrame.values.pard = 0; //isEven(contentFrame.raw);
	spi.writeData(command.raw, contentFrame.raw);
}

float AS5X47::readAngle() {
     778:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     77a:	f000 f9fb 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
	ReadDataFrame readDataFrame = readRegister(ANGLE_COMPSATED);
	Angle angle;
	angle.raw = readDataFrame.values.data;
	return angle.values.cordicang/16384.*360.;
     77e:	f3c0 000d 	ubfx	r0, r0, #0, #14
     782:	ed9f 7b05 	vldr	d7, [pc, #20]	; 798 <AS5X47::readAngle()+0x28>
     786:	ee00 0a10 	vmov	s0, r0
     78a:	eeba 0bc9 	vcvt.f64.s32	d0, d0, #14
     78e:	ee20 0b07 	vmul.f64	d0, d0, d7
}
     792:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     796:	bd08      	pop	{r3, pc}
     798:	00000000 	.word	0x00000000
     79c:	40768000 	.word	0x40768000

000007a0 <AS5X47::readVel()>:

float AS5X47::readVel()
{
     7a0:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     7a6:	f647 71fc 	movw	r1, #32764	; 0x7ffc
     7aa:	f000 f9e3 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
  angle.raw = readDataFrame.values.data;
  // 14 bit signed - default is +/-28000 RPM or 24.141 deg/s per LSB
  // can be changed in settings?
  // convert to deg/s
  // extend to get sign
  int16_t a = angle.values.cordicang << 2;
     7ae:	f340 000d 	sbfx	r0, r0, #0, #14
  return a*24.141 / 4.;
     7b2:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
     7b6:	0083      	lsls	r3, r0, #2
     7b8:	ee00 3a10 	vmov	s0, r3
     7bc:	ed9f 6b06 	vldr	d6, [pc, #24]	; 7d8 <AS5X47::readVel()+0x38>
     7c0:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
     7c4:	ee20 0b06 	vmul.f64	d0, d0, d6
     7c8:	ee20 0b07 	vmul.f64	d0, d0, d7
}
     7cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     7d0:	bd08      	pop	{r3, pc}
     7d2:	bf00      	nop
     7d4:	f3af 8000 	nop.w
     7d8:	9374bc6a 	.word	0x9374bc6a
     7dc:	40382418 	.word	0x40382418

000007e0 <AS5X47::readErr()>:
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     7e4:	f244 0101 	movw	r1, #16385	; 0x4001

Errfl AS5X47::readErr()
{
     7e8:	b508      	push	{r3, lr}
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7ea:	f000 f9c3 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
  err.raw = readDataFrame.values.data;
  // 14 bit signed - default is +/-28000 RPM or 24.141 deg/s per LSB
  // can be changed in settings?
  // convert to deg/s
  return err;
}
     7ee:	f3c0 000d 	ubfx	r0, r0, #0, #14
     7f2:	bd08      	pop	{r3, pc}

000007f4 <AS5X47::printDebugString()>:
void AS5X47::writeZeroPosition(Zposm zposm, Zposl zposl){
	writeRegister(ZPOSM_REG, zposm.raw);
	writeRegister(ZPOSL_REG, zposl.raw);
}

void AS5X47::printDebugString() {
     7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	readDataFrame = readRegister(ERRFL_REG);
	Errfl errfl;
	errfl.raw = readDataFrame.values.data;
  const int MSL = 200;
  char s[MSL];
  usb.send("#======== AS5X47 Debug ========\r\n");
     7f8:	4c80      	ldr	r4, [pc, #512]	; (9fc <AS5X47::printDebugString()+0x208>)
void AS5X47::printDebugString() {
     7fa:	b0b6      	sub	sp, #216	; 0xd8
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     7fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     800:	f244 0101 	movw	r1, #16385	; 0x4001
void AS5X47::printDebugString() {
     804:	4605      	mov	r5, r0
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     806:	f000 f9b5 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
  usb.send("#======== AS5X47 Debug ========\r\n");
     80a:	497d      	ldr	r1, [pc, #500]	; (a00 <AS5X47::printDebugString()+0x20c>)
     80c:	f3c0 0a0d 	ubfx	sl, r0, #0, #14
     810:	f3c0 3980 	ubfx	r9, r0, #14, #1
     814:	f3c0 36c0 	ubfx	r6, r0, #15, #1
     818:	4620      	mov	r0, r4

	readDataFrame = readRegister(ANGLE_REG);
	Angle angle;
	angle.raw = readDataFrame.values.data;
  usb.send("#------- Angle Register: \r\n");
  snprintf(s, MSL, "#   (%x) Read Error: %d, CORDIANG: %d\r\n", ANGLE_REG,
     81a:	f8df 8218 	ldr.w	r8, [pc, #536]	; a34 <AS5X47::printDebugString()+0x240>
  usb.send("#======== AS5X47 Debug ========\r\n");
     81e:	f00b fef5 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#------- ERRFL Register :\r\n");
     822:	f8df e214 	ldr.w	lr, [pc, #532]	; a38 <AS5X47::printDebugString()+0x244>
     826:	f10d 0c10 	add.w	ip, sp, #16

	readDataFrame = readRegister(SETTINGS1_REG);
	Settings1 settings1;
	settings1.raw = readDataFrame.values.data;
  usb.send("#------- Settings1 Register: \r\n");
  snprintf(s, MSL, "#   (%x) Read Error: %d, settings1: 0x%x\r\n", SETTINGS1_REG,
     82a:	4f76      	ldr	r7, [pc, #472]	; (a04 <AS5X47::printDebugString()+0x210>)
  snprintf(s, MSL, "#------- ERRFL Register :\r\n");
     82c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     834:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
     838:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  usb.send(s);
     83c:	a904      	add	r1, sp, #16
     83e:	4620      	mov	r0, r4
     840:	f00b fee4 	bl	c60c <UUSB::send(char const*)>
	snprintf(s, MSL, "#   Read Warning %d, Read Error: %d, flags 0x%04x (see AS5247U manual reg 0x0001)\r\n",
     844:	4633      	mov	r3, r6
     846:	4a70      	ldr	r2, [pc, #448]	; (a08 <AS5X47::printDebugString()+0x214>)
     848:	21c8      	movs	r1, #200	; 0xc8
     84a:	a804      	add	r0, sp, #16
     84c:	e9cd 9a00 	strd	r9, sl, [sp]
     850:	f01a ffb0 	bl	1b7b4 <snprintf>
  usb.send(s);
     854:	a904      	add	r1, sp, #16
     856:	4620      	mov	r0, r4
     858:	f00b fed8 	bl	c60c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     85c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     860:	f647 71f5 	movw	r1, #32757	; 0x7ff5
     864:	4628      	mov	r0, r5
     866:	f000 f985 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     86a:	4603      	mov	r3, r0
  usb.send("#------- DIAG Register: \r\n");
     86c:	4967      	ldr	r1, [pc, #412]	; (a0c <AS5X47::printDebugString()+0x218>)
     86e:	4620      	mov	r0, r4
     870:	f3c3 060d 	ubfx	r6, r3, #0, #14
     874:	f3c3 3380 	ubfx	r3, r3, #14, #1
     878:	9303      	str	r3, [sp, #12]
     87a:	f00b fec7 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   Read Error: %d, Flags: 0x%04x (hex, see AS5147U manual, reg=0x3FF5)\r\n",
     87e:	9b03      	ldr	r3, [sp, #12]
     880:	21c8      	movs	r1, #200	; 0xc8
     882:	4a63      	ldr	r2, [pc, #396]	; (a10 <AS5X47::printDebugString()+0x21c>)
     884:	a804      	add	r0, sp, #16
     886:	9600      	str	r6, [sp, #0]
     888:	f01a ff94 	bl	1b7b4 <snprintf>
  usb.send(s);
     88c:	a904      	add	r1, sp, #16
     88e:	4620      	mov	r0, r4
     890:	f00b febc 	bl	c60c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     894:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     898:	f647 71fd 	movw	r1, #32765	; 0x7ffd
     89c:	4628      	mov	r0, r5
     89e:	f000 f969 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     8a2:	4603      	mov	r3, r0
  usb.send("#------- MAG Register: \r\n");
     8a4:	495b      	ldr	r1, [pc, #364]	; (a14 <AS5X47::printDebugString()+0x220>)
     8a6:	4620      	mov	r0, r4
	mag.raw = readDataFrame.values.data;
     8a8:	f3c3 090d 	ubfx	r9, r3, #0, #14
     8ac:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- MAG Register: \r\n");
     8b0:	f00b feac 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, CMAG: %d\r\n", MAG_REG,
     8b4:	4a58      	ldr	r2, [pc, #352]	; (a18 <AS5X47::printDebugString()+0x224>)
     8b6:	f3c9 030d 	ubfx	r3, r9, #0, #14
     8ba:	9600      	str	r6, [sp, #0]
     8bc:	21c8      	movs	r1, #200	; 0xc8
     8be:	a804      	add	r0, sp, #16
     8c0:	9301      	str	r3, [sp, #4]
     8c2:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     8c6:	f01a ff75 	bl	1b7b4 <snprintf>
  usb.send(s);
     8ca:	a904      	add	r1, sp, #16
     8cc:	4620      	mov	r0, r4
     8ce:	f00b fe9d 	bl	c60c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     8d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     8d6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
     8da:	4628      	mov	r0, r5
     8dc:	f000 f94a 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     8e0:	4603      	mov	r3, r0
  usb.send("#------- Angle Register: \r\n");
     8e2:	494e      	ldr	r1, [pc, #312]	; (a1c <AS5X47::printDebugString()+0x228>)
     8e4:	4620      	mov	r0, r4
	angle.raw = readDataFrame.values.data;
     8e6:	f3c3 090d 	ubfx	r9, r3, #0, #14
     8ea:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- Angle Register: \r\n");
     8ee:	f00b fe8d 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, CORDIANG: %d\r\n", ANGLE_REG,
     8f2:	4642      	mov	r2, r8
     8f4:	f3c9 030d 	ubfx	r3, r9, #0, #14
     8f8:	9600      	str	r6, [sp, #0]
     8fa:	21c8      	movs	r1, #200	; 0xc8
     8fc:	a804      	add	r0, sp, #16
     8fe:	9301      	str	r3, [sp, #4]
     900:	f643 73fe 	movw	r3, #16382	; 0x3ffe
     904:	f01a ff56 	bl	1b7b4 <snprintf>
  usb.send(s);
     908:	a904      	add	r1, sp, #16
     90a:	4620      	mov	r0, r4
     90c:	f00b fe7e 	bl	c60c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     910:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     914:	f647 71fc 	movw	r1, #32764	; 0x7ffc
     918:	4628      	mov	r0, r5
     91a:	f000 f92b 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     91e:	4603      	mov	r3, r0
  usb.send("#------- Velocity Register: \r\n");
     920:	493f      	ldr	r1, [pc, #252]	; (a20 <AS5X47::printDebugString()+0x22c>)
     922:	4620      	mov	r0, r4
  velocity.raw = readDataFrame.values.data;
     924:	f3c3 090d 	ubfx	r9, r3, #0, #14
     928:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- Velocity Register: \r\n");
     92c:	f00b fe6e 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, CORDIANG: %d\r\n", ANGLE_VEL,
     930:	4642      	mov	r2, r8
     932:	f3c9 030d 	ubfx	r3, r9, #0, #14
     936:	9600      	str	r6, [sp, #0]
     938:	21c8      	movs	r1, #200	; 0xc8
     93a:	a804      	add	r0, sp, #16
     93c:	9301      	str	r3, [sp, #4]
     93e:	f643 73fc 	movw	r3, #16380	; 0x3ffc
     942:	f01a ff37 	bl	1b7b4 <snprintf>
  usb.send(s);
     946:	a904      	add	r1, sp, #16
     948:	4620      	mov	r0, r4
     94a:	f00b fe5f 	bl	c60c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     94e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     952:	f647 71ff 	movw	r1, #32767	; 0x7fff
     956:	4628      	mov	r0, r5
     958:	f000 f90c 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     95c:	4603      	mov	r3, r0
  usb.send("#------- AngleCom Register: \r\n");
     95e:	4931      	ldr	r1, [pc, #196]	; (a24 <AS5X47::printDebugString()+0x230>)
     960:	4620      	mov	r0, r4
	anglecom.raw = readDataFrame.values.data;
     962:	f3c3 080d 	ubfx	r8, r3, #0, #14
     966:	f3c3 3680 	ubfx	r6, r3, #14, #1
  usb.send("#------- AngleCom Register: \r\n");
     96a:	f00b fe4f 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, DAECANG: %d\r\n", ANGLECOM_REG,
     96e:	4a2e      	ldr	r2, [pc, #184]	; (a28 <AS5X47::printDebugString()+0x234>)
     970:	f3c8 030d 	ubfx	r3, r8, #0, #14
     974:	9600      	str	r6, [sp, #0]
     976:	21c8      	movs	r1, #200	; 0xc8
     978:	a804      	add	r0, sp, #16
     97a:	9301      	str	r3, [sp, #4]
     97c:	f643 73ff 	movw	r3, #16383	; 0x3fff
     980:	f01a ff18 	bl	1b7b4 <snprintf>
  usb.send(s);
     984:	a904      	add	r1, sp, #16
     986:	4620      	mov	r0, r4
     988:	f00b fe40 	bl	c60c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     98c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     990:	f244 0118 	movw	r1, #16408	; 0x4018
     994:	4628      	mov	r0, r5
     996:	f000 f8ed 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
     99a:	4603      	mov	r3, r0
  usb.send("#------- Settings1 Register: \r\n");
     99c:	4923      	ldr	r1, [pc, #140]	; (a2c <AS5X47::printDebugString()+0x238>)
     99e:	4620      	mov	r0, r4
     9a0:	f3c3 3880 	ubfx	r8, r3, #14, #1
	settings1.raw = readDataFrame.values.data;
     9a4:	b2de      	uxtb	r6, r3
  usb.send("#------- Settings1 Register: \r\n");
     9a6:	f00b fe31 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, settings1: 0x%x\r\n", SETTINGS1_REG,
     9aa:	2318      	movs	r3, #24
     9ac:	463a      	mov	r2, r7
     9ae:	21c8      	movs	r1, #200	; 0xc8
     9b0:	a804      	add	r0, sp, #16
     9b2:	e9cd 8600 	strd	r8, r6, [sp]
     9b6:	f01a fefd 	bl	1b7b4 <snprintf>
           readDataFrame.values.ef, settings1.raw);
  usb.send(s);
     9ba:	a904      	add	r1, sp, #16
     9bc:	4620      	mov	r0, r4
     9be:	f00b fe25 	bl	c60c <UUSB::send(char const*)>
  receivedFrame.raw = spi.readData(command.raw, nopCommand.raw);
     9c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     9c6:	4628      	mov	r0, r5
     9c8:	f244 0119 	movw	r1, #16409	; 0x4019
     9cc:	f000 f8d2 	bl	b74 <AS5X47Spi::readData(unsigned short, unsigned short)>
	return receivedFrame;
     9d0:	f3c0 3680 	ubfx	r6, r0, #14, #1
// 	Serial.println(settings1.values.pwmon);
// 	Serial.println("|");

	readDataFrame = readRegister(SETTINGS2_REG);
	Settings2 settings2;
	settings2.raw = readDataFrame.values.data;
     9d4:	b2c5      	uxtb	r5, r0
  usb.send("#------- Settings2 Register: \r\n");
     9d6:	4916      	ldr	r1, [pc, #88]	; (a30 <AS5X47::printDebugString()+0x23c>)
     9d8:	4620      	mov	r0, r4
     9da:	f00b fe17 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "#   (%x) Read Error: %d, settings1: 0x%x\r\n", SETTINGS2_REG,
     9de:	463a      	mov	r2, r7
     9e0:	2319      	movs	r3, #25
     9e2:	21c8      	movs	r1, #200	; 0xc8
     9e4:	a804      	add	r0, sp, #16
     9e6:	9501      	str	r5, [sp, #4]
     9e8:	9600      	str	r6, [sp, #0]
     9ea:	f01a fee3 	bl	1b7b4 <snprintf>
           readDataFrame.values.ef, settings2.raw);
  usb.send(s);
     9ee:	a904      	add	r1, sp, #16
     9f0:	4620      	mov	r0, r4
     9f2:	f00b fe0b 	bl	c60c <UUSB::send(char const*)>
// Non-Volatile Registers Addresses
#define ZPOSM_REG 		0x0016
#define ZPOSL_REG 		0x0017
#define SETTINGS1_REG 	0x0018
#define SETTINGS2_REG 	0x0019*/
}
     9f6:	b036      	add	sp, #216	; 0xd8
     9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9fc:	2000fac4 	.word	0x2000fac4
     a00:	20004df8 	.word	0x20004df8
     a04:	20005000 	.word	0x20005000
     a08:	20004e38 	.word	0x20004e38
     a0c:	20004e8c 	.word	0x20004e8c
     a10:	20004ea8 	.word	0x20004ea8
     a14:	20004ef4 	.word	0x20004ef4
     a18:	20004f10 	.word	0x20004f10
     a1c:	20004f34 	.word	0x20004f34
     a20:	20004f78 	.word	0x20004f78
     a24:	20004f98 	.word	0x20004f98
     a28:	20004fb8 	.word	0x20004fb8
     a2c:	20004fe0 	.word	0x20004fe0
     a30:	2000502c 	.word	0x2000502c
     a34:	20004f50 	.word	0x20004f50
     a38:	20004e1c 	.word	0x20004e1c

00000a3c <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
     a3c:	b430      	push	{r4, r5}
     a3e:	b082      	sub	sp, #8
     a40:	460c      	mov	r4, r1
     a42:	ab02      	add	r3, sp, #8
     a44:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
     a48:	7cc3      	ldrb	r3, [r0, #19]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d030      	beq.n	ab0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
     a4e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     a50:	7cc3      	ldrb	r3, [r0, #19]
     a52:	07da      	lsls	r2, r3, #31
     a54:	d508      	bpl.n	a68 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     a56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a5a:	6945      	ldr	r5, [r0, #20]
     a5c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
     a60:	402a      	ands	r2, r5
     a62:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     a64:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
     a68:	079d      	lsls	r5, r3, #30
     a6a:	d508      	bpl.n	a7e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     a6c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a70:	6985      	ldr	r5, [r0, #24]
     a72:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
     a76:	402a      	ands	r2, r5
     a78:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     a7a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
     a7e:	0759      	lsls	r1, r3, #29
     a80:	d508      	bpl.n	a94 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     a82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a86:	69c5      	ldr	r5, [r0, #28]
     a88:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
     a8c:	402a      	ands	r2, r5
     a8e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     a90:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
     a94:	071a      	lsls	r2, r3, #28
     a96:	d508      	bpl.n	aaa <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     a98:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     a9c:	6a05      	ldr	r5, [r0, #32]
     a9e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
     aa2:	402a      	ands	r2, r5
     aa4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     aa6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
     aaa:	06db      	lsls	r3, r3, #27
     aac:	d42f      	bmi.n	b0e <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
     aae:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     ab0:	6883      	ldr	r3, [r0, #8]
     ab2:	429c      	cmp	r4, r3
     ab4:	d035      	beq.n	b22 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     ab6:	4b22      	ldr	r3, [pc, #136]	; (b40 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
     ab8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
     aba:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     abc:	4a21      	ldr	r2, [pc, #132]	; (b44 <SPIClass::beginTransaction(SPISettings)+0x108>)
     abe:	f3c3 1101 	ubfx	r1, r3, #4, #2
     ac2:	f3c3 6382 	ubfx	r3, r3, #26, #3
     ac6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
     aca:	3301      	adds	r3, #1
     acc:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     ad0:	b1cc      	cbz	r4, b06 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
     ad2:	4294      	cmp	r4, r2
     ad4:	d827      	bhi.n	b26 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
     ad6:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
     ada:	fbb2 f2f3 	udiv	r2, r2, r3
     ade:	4294      	cmp	r4, r2
     ae0:	d32c      	bcc.n	b3c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
     ae2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     ae6:	d320      	bcc.n	b2a <SPIClass::beginTransaction(SPISettings)+0xee>
     ae8:	4c17      	ldr	r4, [pc, #92]	; (b48 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     aea:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     aec:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     aee:	2203      	movs	r2, #3
		port().CR = 0;
     af0:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
     af2:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
     af4:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     af6:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
     af8:	2201      	movs	r2, #1
		port().CCR = _ccr;
     afa:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     afc:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     afe:	611a      	str	r2, [r3, #16]
	}
     b00:	b002      	add	sp, #8
     b02:	bc30      	pop	{r4, r5}
     b04:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
     b06:	4299      	cmp	r1, r3
     b08:	d3ef      	bcc.n	aea <SPIClass::beginTransaction(SPISettings)+0xae>
     b0a:	1c53      	adds	r3, r2, #1
     b0c:	e7e9      	b.n	ae2 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     b0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     b12:	6a41      	ldr	r1, [r0, #36]	; 0x24
     b14:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
     b18:	400b      	ands	r3, r1
     b1a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     b1c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
     b20:	e7c5      	b.n	aae <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
     b22:	68c4      	ldr	r4, [r0, #12]
     b24:	e7e2      	b.n	aec <SPIClass::beginTransaction(SPISettings)+0xb0>
     b26:	2400      	movs	r4, #0
     b28:	e7df      	b.n	aea <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
     b2a:	2b02      	cmp	r3, #2
     b2c:	d9fb      	bls.n	b26 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
     b2e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     b30:	085a      	lsrs	r2, r3, #1
     b32:	0214      	lsls	r4, r2, #8
     b34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     b38:	431c      	orrs	r4, r3
     b3a:	e7d6      	b.n	aea <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
     b3c:	461a      	mov	r2, r3
     b3e:	e7e4      	b.n	b0a <SPIClass::beginTransaction(SPISettings)+0xce>
     b40:	400fc000 	.word	0x400fc000
     b44:	200081ac 	.word	0x200081ac
     b48:	007f7fff 	.word	0x007f7fff

00000b4c <AS5X47Spi::AS5X47Spi(unsigned char)>:
AS5X47Spi::AS5X47Spi(uint8_t _chipSelectPin) {
     b4c:	460b      	mov	r3, r1
	pinMode(chipSelectPin, OUTPUT);
     b4e:	2101      	movs	r1, #1
AS5X47Spi::AS5X47Spi(uint8_t _chipSelectPin) {
     b50:	b510      	push	{r4, lr}
     b52:	4604      	mov	r4, r0
     b54:	4618      	mov	r0, r3
	chipSelectPin = _chipSelectPin;
     b56:	7023      	strb	r3, [r4, #0]
	pinMode(chipSelectPin, OUTPUT);
     b58:	f015 fa8c 	bl	16074 <pinMode>
	digitalWrite(chipSelectPin, HIGH);
     b5c:	2101      	movs	r1, #1
     b5e:	7820      	ldrb	r0, [r4, #0]
     b60:	f015 fa4c 	bl	15ffc <digitalWrite>
	SPI.begin();
     b64:	4802      	ldr	r0, [pc, #8]	; (b70 <AS5X47Spi::AS5X47Spi(unsigned char)+0x24>)
     b66:	f00e ff61 	bl	fa2c <SPIClass::begin()>
}
     b6a:	4620      	mov	r0, r4
     b6c:	bd10      	pop	{r4, pc}
     b6e:	bf00      	nop
     b70:	2000953c 	.word	0x2000953c

00000b74 <AS5X47Spi::readData(unsigned short, unsigned short)>:

uint16_t AS5X47Spi::readData(uint16_t command, uint16_t nopCommand)
{
     b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE1));
     b78:	4b46      	ldr	r3, [pc, #280]	; (c94 <AS5X47Spi::readData(unsigned short, unsigned short)+0x120>)
{
     b7a:	b082      	sub	sp, #8
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
     b7c:	4c46      	ldr	r4, [pc, #280]	; (c98 <AS5X47Spi::readData(unsigned short, unsigned short)+0x124>)
     b7e:	4605      	mov	r5, r0
     b80:	4688      	mov	r8, r1
	SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE1));
     b82:	4846      	ldr	r0, [pc, #280]	; (c9c <AS5X47Spi::readData(unsigned short, unsigned short)+0x128>)
{
     b84:	4616      	mov	r6, r2
	SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE1));
     b86:	e9cd 4300 	strd	r4, r3, [sp]
     b8a:	ab02      	add	r3, sp, #8
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     b8c:	4c44      	ldr	r4, [pc, #272]	; (ca0 <AS5X47Spi::readData(unsigned short, unsigned short)+0x12c>)
     b8e:	e913 0006 	ldmdb	r3, {r1, r2}
     b92:	f7ff ff53 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
	// Send Read Command
	digitalWrite(chipSelectPin, LOW);
     b96:	2100      	movs	r1, #0
     b98:	7828      	ldrb	r0, [r5, #0]
     b9a:	f015 fa2f 	bl	15ffc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     b9e:	4941      	ldr	r1, [pc, #260]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     ba0:	4b41      	ldr	r3, [pc, #260]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
	uint32_t begin = ARM_DWT_CYCCNT;
     ba2:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     ba4:	6822      	ldr	r2, [r4, #0]
     ba6:	fba3 3202 	umull	r3, r2, r3, r2
     baa:	0c92      	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     bac:	684b      	ldr	r3, [r1, #4]
     bae:	1a1b      	subs	r3, r3, r0
     bb0:	429a      	cmp	r2, r3
     bb2:	d8fb      	bhi.n	bac <AS5X47Spi::readData(unsigned short, unsigned short)+0x38>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bb4:	4f39      	ldr	r7, [pc, #228]	; (c9c <AS5X47Spi::readData(unsigned short, unsigned short)+0x128>)
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     bb6:	4b3d      	ldr	r3, [pc, #244]	; (cac <AS5X47Spi::readData(unsigned short, unsigned short)+0x138>)
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bb8:	683a      	ldr	r2, [r7, #0]
		uint32_t tcr = port().TCR;
     bba:	6e11      	ldr	r1, [r2, #96]	; 0x60
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     bbc:	400b      	ands	r3, r1
     bbe:	f043 030f 	orr.w	r3, r3, #15
     bc2:	6613      	str	r3, [r2, #96]	; 0x60
		port().TDR = data;		// output 16 bit data.
     bc4:	f8c2 8064 	str.w	r8, [r2, #100]	; 0x64
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     bc8:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bca:	0798      	lsls	r0, r3, #30
     bcc:	d4fc      	bmi.n	bc8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x54>
	uint32_t begin = ARM_DWT_CYCCNT;
     bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	; ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>
		port().TCR = tcr;	// restore back
     bd2:	6611      	str	r1, [r2, #96]	; 0x60
		return port().RDR;
     bd4:	6f53      	ldr	r3, [r2, #116]	; 0x74
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     bd6:	4b34      	ldr	r3, [pc, #208]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
	uint32_t begin = ARM_DWT_CYCCNT;
     bd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     bdc:	6822      	ldr	r2, [r4, #0]
     bde:	fba3 3202 	umull	r3, r2, r3, r2
     be2:	0c92      	lsrs	r2, r2, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     be4:	f8d8 3004 	ldr.w	r3, [r8, #4]
     be8:	1a5b      	subs	r3, r3, r1
     bea:	429a      	cmp	r2, r3
     bec:	d8fa      	bhi.n	be4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x70>
  delayMicroseconds(1);
  SPI.transfer16(command);
  delayMicroseconds(1);
  digitalWrite(chipSelectPin, HIGH);
     bee:	2101      	movs	r1, #1
     bf0:	7828      	ldrb	r0, [r5, #0]
     bf2:	f015 fa03 	bl	15ffc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     bf6:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     bfa:	4b2b      	ldr	r3, [pc, #172]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
     bfc:	6822      	ldr	r2, [r4, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     bfe:	f8df 80a4 	ldr.w	r8, [pc, #164]	; ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c02:	fba3 3202 	umull	r3, r2, r3, r2
     c06:	0c92      	lsrs	r2, r2, #18
     c08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
     c10:	1a5b      	subs	r3, r3, r1
     c12:	429a      	cmp	r2, r3
     c14:	d8fa      	bhi.n	c0c <AS5X47Spi::readData(unsigned short, unsigned short)+0x98>
	delayMicroseconds(3);
	// Send Nop Command while receiving data
	digitalWrite(chipSelectPin, LOW);
     c16:	2100      	movs	r1, #0
     c18:	7828      	ldrb	r0, [r5, #0]
     c1a:	f015 f9ef 	bl	15ffc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     c1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c22:	4b21      	ldr	r3, [pc, #132]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
     c24:	6822      	ldr	r2, [r4, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c26:	491f      	ldr	r1, [pc, #124]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c28:	fba3 3202 	umull	r3, r2, r3, r2
     c2c:	0c92      	lsrs	r2, r2, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c2e:	684b      	ldr	r3, [r1, #4]
     c30:	1a1b      	subs	r3, r3, r0
     c32:	429a      	cmp	r2, r3
     c34:	d8fb      	bhi.n	c2e <AS5X47Spi::readData(unsigned short, unsigned short)+0xba>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c36:	683a      	ldr	r2, [r7, #0]
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     c38:	4b1c      	ldr	r3, [pc, #112]	; (cac <AS5X47Spi::readData(unsigned short, unsigned short)+0x138>)
		uint32_t tcr = port().TCR;
     c3a:	6e11      	ldr	r1, [r2, #96]	; 0x60
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     c3c:	400b      	ands	r3, r1
     c3e:	f043 030f 	orr.w	r3, r3, #15
     c42:	6613      	str	r3, [r2, #96]	; 0x60
		port().TDR = data;		// output 16 bit data.
     c44:	6656      	str	r6, [r2, #100]	; 0x64
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     c46:	6f13      	ldr	r3, [r2, #112]	; 0x70
     c48:	079b      	lsls	r3, r3, #30
     c4a:	d4fc      	bmi.n	c46 <AS5X47Spi::readData(unsigned short, unsigned short)+0xd2>
	uint32_t begin = ARM_DWT_CYCCNT;
     c4c:	4f15      	ldr	r7, [pc, #84]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
		port().TCR = tcr;	// restore back
     c4e:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c50:	4b15      	ldr	r3, [pc, #84]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
		return port().RDR;
     c52:	6f56      	ldr	r6, [r2, #116]	; 0x74
	uint32_t begin = ARM_DWT_CYCCNT;
     c54:	6879      	ldr	r1, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c56:	6822      	ldr	r2, [r4, #0]
     c58:	b2b6      	uxth	r6, r6
     c5a:	fba3 3202 	umull	r3, r2, r3, r2
     c5e:	0c92      	lsrs	r2, r2, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	1a5b      	subs	r3, r3, r1
     c64:	429a      	cmp	r2, r3
     c66:	d8fb      	bhi.n	c60 <AS5X47Spi::readData(unsigned short, unsigned short)+0xec>
  delayMicroseconds(1);
  uint16_t receivedData = SPI.transfer16(nopCommand);
  delayMicroseconds(1);
  digitalWrite(chipSelectPin, HIGH);
     c68:	2101      	movs	r1, #1
     c6a:	7828      	ldrb	r0, [r5, #0]
     c6c:	f015 f9c6 	bl	15ffc <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     c70:	6878      	ldr	r0, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c72:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <AS5X47Spi::readData(unsigned short, unsigned short)+0x134>)
     c74:	6822      	ldr	r2, [r4, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c76:	490b      	ldr	r1, [pc, #44]	; (ca4 <AS5X47Spi::readData(unsigned short, unsigned short)+0x130>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c78:	fba3 3202 	umull	r3, r2, r3, r2
     c7c:	0c92      	lsrs	r2, r2, #18
     c7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c82:	684b      	ldr	r3, [r1, #4]
     c84:	1a1b      	subs	r3, r3, r0
     c86:	429a      	cmp	r2, r3
     c88:	d8fb      	bhi.n	c82 <AS5X47Spi::readData(unsigned short, unsigned short)+0x10e>
//   receivedData = SPI.transfer16(nopCommand);
//   delayMicroseconds(1);
//   digitalWrite(chipSelectPin, HIGH);
//   SPI.endTransaction();
	return receivedData;
}
     c8a:	4630      	mov	r0, r6
     c8c:	b002      	add	sp, #8
     c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c92:	bf00      	nop
     c94:	40000007 	.word	0x40000007
     c98:	000f4240 	.word	0x000f4240
     c9c:	2000953c 	.word	0x2000953c
     ca0:	20009538 	.word	0x20009538
     ca4:	e0001000 	.word	0xe0001000
     ca8:	431bde83 	.word	0x431bde83
     cac:	fffff000 	.word	0xfffff000

00000cb0 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     cb0:	2000      	movs	r0, #0
     cb2:	4770      	bx	lr

00000cb4 <Print::flush()>:
	virtual void flush()				{ }
     cb4:	4770      	bx	lr
     cb6:	bf00      	nop

00000cb8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>:
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
     cb8:	2900      	cmp	r1, #0
     cba:	db05      	blt.n	cc8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
     cbc:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
     cc0:	458c      	cmp	ip, r1
     cc2:	dd01      	ble.n	cc8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
     cc4:	2a00      	cmp	r2, #0
     cc6:	da00      	bge.n	cca <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x12>
     cc8:	4770      	bx	lr
     cca:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
     cce:	4594      	cmp	ip, r2
     cd0:	ddfa      	ble.n	cc8 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
     cd2:	b410      	push	{r4}
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
     cd4:	f890 c01a 	ldrb.w	ip, [r0, #26]
    switch (getRotation()) {
     cd8:	f1bc 0f02 	cmp.w	ip, #2
     cdc:	d00d      	beq.n	cfa <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x42>
     cde:	f1bc 0f03 	cmp.w	ip, #3
     ce2:	d058      	beq.n	d96 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xde>
     ce4:	f1bc 0f01 	cmp.w	ip, #1
     ce8:	d04c      	beq.n	d84 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xcc>
    switch (color) {
     cea:	2b01      	cmp	r3, #1
     cec:	d038      	beq.n	d60 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xa8>
     cee:	2b02      	cmp	r3, #2
     cf0:	d024      	beq.n	d3c <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x84>
     cf2:	b17b      	cbz	r3, d14 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x5c>
}
     cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
     cf8:	4770      	bx	lr
      x = WIDTH - x - 1;
     cfa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     cfe:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     d02:	ebac 0c01 	sub.w	ip, ip, r1
      y = HEIGHT - y - 1;
     d06:	8941      	ldrh	r1, [r0, #10]
     d08:	1a8a      	subs	r2, r1, r2
      x = WIDTH - x - 1;
     d0a:	fa0f f18c 	sxth.w	r1, ip
      y = HEIGHT - y - 1;
     d0e:	3a01      	subs	r2, #1
     d10:	b212      	sxth	r2, r2
      break;
     d12:	e7ea      	b.n	cea <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
     d14:	2a00      	cmp	r2, #0
     d16:	4613      	mov	r3, r2
     d18:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     d1c:	bfb8      	it	lt
     d1e:	1dd3      	addlt	r3, r2, #7
     d20:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     d22:	f002 0207 	and.w	r2, r2, #7
     d26:	2001      	movs	r0, #1
     d28:	10db      	asrs	r3, r3, #3
     d2a:	fa00 f202 	lsl.w	r2, r0, r2
     d2e:	fb13 130c 	smlabb	r3, r3, ip, r1
     d32:	5ce1      	ldrb	r1, [r4, r3]
     d34:	ea21 0202 	bic.w	r2, r1, r2
     d38:	54e2      	strb	r2, [r4, r3]
      break;
     d3a:	e7db      	b.n	cf4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
     d3c:	2a00      	cmp	r2, #0
     d3e:	4613      	mov	r3, r2
     d40:	8904      	ldrh	r4, [r0, #8]
     d42:	bfb8      	it	lt
     d44:	1dd3      	addlt	r3, r2, #7
     d46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     d48:	f002 0207 	and.w	r2, r2, #7
     d4c:	10db      	asrs	r3, r3, #3
     d4e:	fb13 1304 	smlabb	r3, r3, r4, r1
     d52:	2101      	movs	r1, #1
     d54:	5cc4      	ldrb	r4, [r0, r3]
     d56:	fa01 f202 	lsl.w	r2, r1, r2
     d5a:	4062      	eors	r2, r4
     d5c:	54c2      	strb	r2, [r0, r3]
}
     d5e:	e7c9      	b.n	cf4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
     d60:	2a00      	cmp	r2, #0
     d62:	4613      	mov	r3, r2
     d64:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     d68:	f002 0407 	and.w	r4, r2, #7
     d6c:	bfb8      	it	lt
     d6e:	1dd3      	addlt	r3, r2, #7
     d70:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     d72:	2201      	movs	r2, #1
     d74:	10db      	asrs	r3, r3, #3
     d76:	40a2      	lsls	r2, r4
     d78:	fb13 130c 	smlabb	r3, r3, ip, r1
     d7c:	5cc1      	ldrb	r1, [r0, r3]
     d7e:	430a      	orrs	r2, r1
     d80:	54c2      	strb	r2, [r0, r3]
      break;
     d82:	e7b7      	b.n	cf4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      x = WIDTH - x - 1;
     d84:	f8b0 c008 	ldrh.w	ip, [r0, #8]
     d88:	ebac 0c02 	sub.w	ip, ip, r2
      break;
     d8c:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
     d8e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     d92:	b209      	sxth	r1, r1
      break;
     d94:	e7a9      	b.n	cea <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
      y = HEIGHT - y - 1;
     d96:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
     d9a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     d9e:	ebac 0c01 	sub.w	ip, ip, r1
      break;
     da2:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
     da4:	fa0f f28c 	sxth.w	r2, ip
      break;
     da8:	e79f      	b.n	cea <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
     daa:	bf00      	nop

00000dac <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>:
    if (x < 0) {                  // Clip left
     dac:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
     dae:	b530      	push	{r4, r5, lr}
     db0:	f8bd 400c 	ldrh.w	r4, [sp, #12]
    if (x < 0) {                  // Clip left
     db4:	da02      	bge.n	dbc <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x10>
      w += x;
     db6:	440b      	add	r3, r1
     db8:	2100      	movs	r1, #0
     dba:	b21b      	sxth	r3, r3
    if ((x + w) > WIDTH) { // Clip right
     dbc:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
     dc0:	185d      	adds	r5, r3, r1
      x = 0;
     dc2:	468e      	mov	lr, r1
    if ((x + w) > WIDTH) { // Clip right
     dc4:	4565      	cmp	r5, ip
     dc6:	dd02      	ble.n	dce <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x22>
      w = (WIDTH - x);
     dc8:	ebac 0101 	sub.w	r1, ip, r1
     dcc:	b20b      	sxth	r3, r1
    if (w > 0) { // Proceed only if width is positive
     dce:	2b00      	cmp	r3, #0
     dd0:	dd0f      	ble.n	df2 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x46>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
     dd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     dd4:	10d0      	asrs	r0, r2, #3
     dd6:	f002 0207 	and.w	r2, r2, #7
     dda:	fb1c ec00 	smlabb	ip, ip, r0, lr
     dde:	2001      	movs	r0, #1
     de0:	fa00 f202 	lsl.w	r2, r0, r2
      switch (color) {
     de4:	4284      	cmp	r4, r0
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
     de6:	4461      	add	r1, ip
     de8:	b2d2      	uxtb	r2, r2
      switch (color) {
     dea:	d019      	beq.n	e20 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x74>
     dec:	2c02      	cmp	r4, #2
     dee:	d00d      	beq.n	e0c <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x60>
     df0:	b104      	cbz	r4, df4 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x48>
}
     df2:	bd30      	pop	{r4, r5, pc}
        mask = ~mask;
     df4:	43d2      	mvns	r2, r2
     df6:	fa11 f383 	uxtah	r3, r1, r3
     dfa:	b2d2      	uxtb	r2, r2
          *pBuf++ &= mask;
     dfc:	f811 0b01 	ldrb.w	r0, [r1], #1
     e00:	4010      	ands	r0, r2
        while (w--) {
     e02:	4299      	cmp	r1, r3
          *pBuf++ &= mask;
     e04:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
     e08:	d1f8      	bne.n	dfc <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x50>
}
     e0a:	bd30      	pop	{r4, r5, pc}
        while (w--) {
     e0c:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ ^= mask;
     e10:	f811 0b01 	ldrb.w	r0, [r1], #1
     e14:	4050      	eors	r0, r2
        while (w--) {
     e16:	428b      	cmp	r3, r1
          *pBuf++ ^= mask;
     e18:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
     e1c:	d1f8      	bne.n	e10 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x64>
}
     e1e:	bd30      	pop	{r4, r5, pc}
        while (w--) {
     e20:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ |= mask;
     e24:	f811 0b01 	ldrb.w	r0, [r1], #1
     e28:	4310      	orrs	r0, r2
        while (w--) {
     e2a:	4299      	cmp	r1, r3
          *pBuf++ |= mask;
     e2c:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
     e30:	d1f8      	bne.n	e24 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x78>
}
     e32:	bd30      	pop	{r4, r5, pc}

00000e34 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>:
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
     e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
     e38:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
     e3c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
     e40:	458e      	cmp	lr, r1
     e42:	dd2d      	ble.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
    if (__y < 0) {               // Clip top
     e44:	2a00      	cmp	r2, #0
     e46:	db2d      	blt.n	ea4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
      __y = 0;
     e48:	4694      	mov	ip, r2
    if ((__y + __h) > HEIGHT) { // Clip bottom
     e4a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
     e4e:	449c      	add	ip, r3
     e50:	45a4      	cmp	ip, r4
     e52:	dd01      	ble.n	e58 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x24>
      __h = (HEIGHT - __y);
     e54:	1aa4      	subs	r4, r4, r2
     e56:	b223      	sxth	r3, r4
    if (__h > 0) { // Proceed only if height is now positive
     e58:	2b00      	cmp	r3, #0
     e5a:	dd21      	ble.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
     e5c:	f3c2 04c4 	ubfx	r4, r2, #3, #5
     e60:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
      if (mod) {
     e62:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
     e66:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
     e68:	fb1e 1404 	smlabb	r4, lr, r4, r1
     e6c:	eb06 0104 	add.w	r1, r6, r4
      if (mod) {
     e70:	d036      	beq.n	ee0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xac>
        mod = 8 - mod;
     e72:	f1c2 0c08 	rsb	ip, r2, #8
        uint8_t mask = pgm_read_byte(&premask[mod]);
     e76:	f8df 8118 	ldr.w	r8, [pc, #280]	; f90 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>
        mod = 8 - mod;
     e7a:	fa5f fc8c 	uxtb.w	ip, ip
        if (h < mod)
     e7e:	4563      	cmp	r3, ip
        uint8_t mask = pgm_read_byte(&premask[mod]);
     e80:	f818 700c 	ldrb.w	r7, [r8, ip]
        if (h < mod)
     e84:	d218      	bcs.n	eb8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x84>
          mask &= (0XFF >> (mod - h));
     e86:	ebac 0803 	sub.w	r8, ip, r3
     e8a:	f04f 0eff 	mov.w	lr, #255	; 0xff
        switch (color) {
     e8e:	2d01      	cmp	r5, #1
          mask &= (0XFF >> (mod - h));
     e90:	fa4e fe08 	asr.w	lr, lr, r8
     e94:	ea07 070e 	and.w	r7, r7, lr
        switch (color) {
     e98:	d071      	beq.n	f7e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14a>
     e9a:	2d02      	cmp	r5, #2
     e9c:	d049      	beq.n	f32 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xfe>
     e9e:	b18d      	cbz	r5, ec4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x90>
}
     ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __h += __y;
     ea4:	4413      	add	r3, r2
     ea6:	2200      	movs	r2, #0
    if ((__y + __h) > HEIGHT) { // Clip bottom
     ea8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __h += __y;
     eac:	b21b      	sxth	r3, r3
      __y = 0;
     eae:	4694      	mov	ip, r2
    if ((__y + __h) > HEIGHT) { // Clip bottom
     eb0:	449c      	add	ip, r3
     eb2:	45a4      	cmp	ip, r4
     eb4:	ddd0      	ble.n	e58 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x24>
     eb6:	e7cd      	b.n	e54 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x20>
        switch (color) {
     eb8:	2d01      	cmp	r5, #1
     eba:	d060      	beq.n	f7e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14a>
     ebc:	2d02      	cmp	r5, #2
     ebe:	d038      	beq.n	f32 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xfe>
     ec0:	2d00      	cmp	r5, #0
     ec2:	d13b      	bne.n	f3c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x108>
          *pBuf &= ~mask;
     ec4:	f816 e004 	ldrb.w	lr, [r6, r4]
     ec8:	ea2e 0e07 	bic.w	lr, lr, r7
      if (h >= mod) { // More to go?
     ecc:	4563      	cmp	r3, ip
          *pBuf ^= mask;
     ece:	f806 e004 	strb.w	lr, [r6, r4]
        pBuf += WIDTH;
     ed2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
      if (h >= mod) { // More to go?
     ed6:	d3e3      	bcc.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
        h -= mod;
     ed8:	3a08      	subs	r2, #8
        pBuf += WIDTH;
     eda:	4421      	add	r1, r4
        h -= mod;
     edc:	4413      	add	r3, r2
     ede:	b2db      	uxtb	r3, r3
        if (h >= 8) {
     ee0:	2b07      	cmp	r3, #7
     ee2:	d916      	bls.n	f12 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xde>
          if (color == SSD1306_INVERSE) {
     ee4:	2d02      	cmp	r5, #2
     ee6:	d035      	beq.n	f54 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x120>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
     ee8:	f1b5 0c00 	subs.w	ip, r5, #0
     eec:	461a      	mov	r2, r3
     eee:	bf18      	it	ne
     ef0:	f04f 0c01 	movne.w	ip, #1
     ef4:	f1cc 0c00 	rsb	ip, ip, #0
     ef8:	fa5f fc8c 	uxtb.w	ip, ip
              h -= 8;        // Subtract 8 rows from height
     efc:	3a08      	subs	r2, #8
              *pBuf = val;   // Set byte
     efe:	f881 c000 	strb.w	ip, [r1]
              pBuf += WIDTH; // Advance pointer 8 rows
     f02:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
     f06:	b2d2      	uxtb	r2, r2
              pBuf += WIDTH; // Advance pointer 8 rows
     f08:	4421      	add	r1, r4
            } while (h >= 8);
     f0a:	2a07      	cmp	r2, #7
     f0c:	d8f6      	bhi.n	efc <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xc8>
     f0e:	f003 0307 	and.w	r3, r3, #7
        if (h) { // Do the final partial byte, if necessary
     f12:	2b00      	cmp	r3, #0
     f14:	d0c4      	beq.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f16:	4a1e      	ldr	r2, [pc, #120]	; (f90 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>)
          switch (color) {
     f18:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f1a:	4413      	add	r3, r2
     f1c:	7a1b      	ldrb	r3, [r3, #8]
          switch (color) {
     f1e:	d033      	beq.n	f88 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x154>
     f20:	2d02      	cmp	r5, #2
     f22:	d028      	beq.n	f76 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x142>
     f24:	2d00      	cmp	r5, #0
     f26:	d1bb      	bne.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
            *pBuf &= ~mask;
     f28:	780a      	ldrb	r2, [r1, #0]
     f2a:	ea22 0303 	bic.w	r3, r2, r3
     f2e:	700b      	strb	r3, [r1, #0]
            break;
     f30:	e7b6      	b.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          *pBuf ^= mask;
     f32:	f816 e004 	ldrb.w	lr, [r6, r4]
     f36:	ea87 0e0e 	eor.w	lr, r7, lr
          break;
     f3a:	e7c7      	b.n	ecc <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x98>
        h -= mod;
     f3c:	3a08      	subs	r2, #8
        pBuf += WIDTH;
     f3e:	4471      	add	r1, lr
        h -= mod;
     f40:	4413      	add	r3, r2
     f42:	b2db      	uxtb	r3, r3
        if (h >= 8) {
     f44:	2b07      	cmp	r3, #7
     f46:	d8cf      	bhi.n	ee8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xb4>
        if (h) { // Do the final partial byte, if necessary
     f48:	2b00      	cmp	r3, #0
     f4a:	d0a9      	beq.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f4c:	4498      	add	r8, r3
     f4e:	f898 3008 	ldrb.w	r3, [r8, #8]
          switch (color) {
     f52:	e7e5      	b.n	f20 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xec>
     f54:	461a      	mov	r2, r3
              *pBuf ^= 0xFF; // Invert byte
     f56:	780c      	ldrb	r4, [r1, #0]
              h -= 8;        // Subtract 8 rows from height
     f58:	3a08      	subs	r2, #8
              *pBuf ^= 0xFF; // Invert byte
     f5a:	43e4      	mvns	r4, r4
              h -= 8;        // Subtract 8 rows from height
     f5c:	b2d2      	uxtb	r2, r2
              *pBuf ^= 0xFF; // Invert byte
     f5e:	700c      	strb	r4, [r1, #0]
            } while (h >= 8);
     f60:	2a07      	cmp	r2, #7
              pBuf += WIDTH; // Advance pointer 8 rows
     f62:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
     f66:	4421      	add	r1, r4
            } while (h >= 8);
     f68:	d8f5      	bhi.n	f56 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x122>
        if (h) { // Do the final partial byte, if necessary
     f6a:	f013 0307 	ands.w	r3, r3, #7
     f6e:	d097      	beq.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
     f70:	4a07      	ldr	r2, [pc, #28]	; (f90 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>)
     f72:	4413      	add	r3, r2
     f74:	7a1b      	ldrb	r3, [r3, #8]
            *pBuf ^= mask;
     f76:	780a      	ldrb	r2, [r1, #0]
     f78:	4053      	eors	r3, r2
     f7a:	700b      	strb	r3, [r1, #0]
}
     f7c:	e790      	b.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          *pBuf |= mask;
     f7e:	f816 e004 	ldrb.w	lr, [r6, r4]
     f82:	ea47 0e0e 	orr.w	lr, r7, lr
          break;
     f86:	e7a1      	b.n	ecc <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x98>
            *pBuf |= mask;
     f88:	780a      	ldrb	r2, [r1, #0]
     f8a:	4313      	orrs	r3, r2
     f8c:	700b      	strb	r3, [r1, #0]
            break;
     f8e:	e787      	b.n	ea0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
     f90:	60002060 	.word	0x60002060

00000f94 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
     f94:	4694      	mov	ip, r2
  switch (rotation) {
     f96:	7e82      	ldrb	r2, [r0, #26]
     f98:	2a02      	cmp	r2, #2
                                     uint16_t color) {
     f9a:	b410      	push	{r4}
     f9c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
     fa0:	d028      	beq.n	ff4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x60>
     fa2:	2a03      	cmp	r2, #3
     fa4:	d021      	beq.n	fea <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x56>
     fa6:	2a01      	cmp	r2, #1
     fa8:	d00f      	beq.n	fca <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x36>
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
     faa:	f1bc 0f00 	cmp.w	ip, #0
     fae:	db09      	blt.n	fc4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
     fb0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
     fb4:	4562      	cmp	r2, ip
     fb6:	dd05      	ble.n	fc4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
     fb8:	9401      	str	r4, [sp, #4]
     fba:	4662      	mov	r2, ip
}
     fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
     fc0:	f7ff bef4 	b.w	dac <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
     fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
     fc8:	4770      	bx	lr
    x = WIDTH - x - 1;
     fca:	8902      	ldrh	r2, [r0, #8]
     fcc:	eba2 020c 	sub.w	r2, r2, ip
     fd0:	3a01      	subs	r2, #1
     fd2:	fa0f fc82 	sxth.w	ip, r2
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
     fd6:	f1bc 0f00 	cmp.w	ip, #0
     fda:	dbf3      	blt.n	fc4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
     fdc:	460a      	mov	r2, r1
     fde:	9401      	str	r4, [sp, #4]
     fe0:	4661      	mov	r1, ip
}
     fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
     fe6:	f7ff bf25 	b.w	e34 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    y -= (w - 1);
     fea:	4419      	add	r1, r3
     fec:	8942      	ldrh	r2, [r0, #10]
     fee:	1a52      	subs	r2, r2, r1
     ff0:	b211      	sxth	r1, r2
  if (bSwap)
     ff2:	e7f0      	b.n	fd6 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x42>
    y = HEIGHT - y - 1;
     ff4:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
     ff6:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
     ff8:	eba2 020c 	sub.w	r2, r2, ip
     ffc:	3a01      	subs	r2, #1
     ffe:	fa0f fc82 	sxth.w	ip, r2
    x -= (w - 1);
    1002:	8902      	ldrh	r2, [r0, #8]
    1004:	1a52      	subs	r2, r2, r1
    1006:	b211      	sxth	r1, r2
  if (bSwap)
    1008:	e7cf      	b.n	faa <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x16>
    100a:	bf00      	nop

0000100c <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
    100c:	4694      	mov	ip, r2
  switch (rotation) {
    100e:	7e82      	ldrb	r2, [r0, #26]
    1010:	2a02      	cmp	r2, #2
                                     uint16_t color) {
    1012:	b410      	push	{r4}
    1014:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
    1018:	d027      	beq.n	106a <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x5e>
    101a:	2a03      	cmp	r2, #3
    101c:	d014      	beq.n	1048 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x3c>
    101e:	2a01      	cmp	r2, #1
    1020:	d007      	beq.n	1032 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x26>
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    1022:	2900      	cmp	r1, #0
    1024:	db0d      	blt.n	1042 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    1026:	9401      	str	r4, [sp, #4]
    1028:	4662      	mov	r2, ip
}
    102a:	f85d 4b04 	ldr.w	r4, [sp], #4
    102e:	f7ff bf01 	b.w	e34 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x -= (h - 1);
    1032:	449c      	add	ip, r3
    1034:	8902      	ldrh	r2, [r0, #8]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1036:	2900      	cmp	r1, #0
    x -= (h - 1);
    1038:	eba2 020c 	sub.w	r2, r2, ip
    103c:	fa0f fc82 	sxth.w	ip, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1040:	da08      	bge.n	1054 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x48>
}
    1042:	f85d 4b04 	ldr.w	r4, [sp], #4
    1046:	4770      	bx	lr
    y = HEIGHT - y - 1;
    1048:	8942      	ldrh	r2, [r0, #10]
    104a:	1a52      	subs	r2, r2, r1
    104c:	3a01      	subs	r2, #1
    104e:	b211      	sxth	r1, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1050:	2900      	cmp	r1, #0
    1052:	dbf6      	blt.n	1042 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    1054:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    1058:	428a      	cmp	r2, r1
    105a:	ddf2      	ble.n	1042 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    105c:	460a      	mov	r2, r1
    105e:	9401      	str	r4, [sp, #4]
    1060:	4661      	mov	r1, ip
}
    1062:	f85d 4b04 	ldr.w	r4, [sp], #4
    1066:	f7ff bea1 	b.w	dac <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x = WIDTH - x - 1;
    106a:	8902      	ldrh	r2, [r0, #8]
    y -= (h - 1);
    106c:	449c      	add	ip, r3
    x = WIDTH - x - 1;
    106e:	1a52      	subs	r2, r2, r1
    1070:	3a01      	subs	r2, #1
    1072:	b211      	sxth	r1, r2
    y -= (h - 1);
    1074:	8942      	ldrh	r2, [r0, #10]
    1076:	eba2 020c 	sub.w	r2, r2, ip
    107a:	fa0f fc82 	sxth.w	ip, r2
  if (bSwap)
    107e:	e7d0      	b.n	1022 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x16>

00001080 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
    1080:	b570      	push	{r4, r5, r6, lr}
    1082:	4604      	mov	r4, r0
    1084:	461d      	mov	r5, r3
    1086:	f99d 6010 	ldrsb.w	r6, [sp, #16]
      wireClk(clkDuring), restoreClk(clkAfter)
    108a:	f00e f937 	bl	f2fc <Adafruit_GFX::Adafruit_GFX(short, short)>
    108e:	4b0f      	ldr	r3, [pc, #60]	; (10cc <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x4c>)
    1090:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    1092:	2300      	movs	r3, #0
    1094:	6263      	str	r3, [r4, #36]	; 0x24
    1096:	b1b5      	cbz	r5, 10c6 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x46>
      wireClk(clkDuring), restoreClk(clkAfter)
    1098:	9a05      	ldr	r2, [sp, #20]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    109a:	2300      	movs	r3, #0
	SPISettings() : _clock(4000000) {
    109c:	480c      	ldr	r0, [pc, #48]	; (10d0 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x50>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    109e:	2107      	movs	r1, #7
      wireClk(clkDuring), restoreClk(clkAfter)
    10a0:	65a2      	str	r2, [r4, #88]	; 0x58
    10a2:	9a06      	ldr	r2, [sp, #24]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    10a4:	62e3      	str	r3, [r4, #44]	; 0x2c
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    10a6:	23ff      	movs	r3, #255	; 0xff
      wireClk(clkDuring), restoreClk(clkAfter)
    10a8:	65e2      	str	r2, [r4, #92]	; 0x5c
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    10aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10ae:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    10b2:	62a5      	str	r5, [r4, #40]	; 0x28
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    10b4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    10b8:	86a2      	strh	r2, [r4, #52]	; 0x34
    10ba:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    10be:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
}
    10c2:	4620      	mov	r0, r4
    10c4:	bd70      	pop	{r4, r5, r6, pc}
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    10c6:	4d03      	ldr	r5, [pc, #12]	; (10d4 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x54>)
    10c8:	e7e6      	b.n	1098 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x18>
    10ca:	bf00      	nop
    10cc:	20007e90 	.word	0x20007e90
    10d0:	003d0900 	.word	0x003d0900
    10d4:	2000959c 	.word	0x2000959c

000010d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    10d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (wire) { // I2C
    10da:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    10dc:	4604      	mov	r4, r0
    10de:	460d      	mov	r5, r1
  if (wire) { // I2C
    10e0:	b1cb      	cbz	r3, 1116 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x3e>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    10e2:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    10e6:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    10e8:	2100      	movs	r1, #0
		txBuffer[0] = (address << 1);
    10ea:	40b2      	lsls	r2, r6
		transmitting = 1;
    10ec:	f883 6130 	strb.w	r6, [r3, #304]	; 0x130
		txBufferLength = 1;
    10f0:	f883 612f 	strb.w	r6, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    10f4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    10f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    10fa:	6803      	ldr	r3, [r0, #0]
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	4798      	blx	r3
    WIRE_WRITE(c);
    1100:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1102:	4629      	mov	r1, r5
    1104:	6803      	ldr	r3, [r0, #0]
    1106:	681b      	ldr	r3, [r3, #0]
    1108:	4798      	blx	r3
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    110a:	4631      	mov	r1, r6
    110c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    110e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1112:	f00d bce7 	b.w	eae4 <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    1116:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1118:	6d00      	ldr	r0, [r0, #80]	; 0x50
    111a:	6813      	ldr	r3, [r2, #0]
  if (spi) {
    111c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    SSD1306_MODE_COMMAND
    111e:	ea23 0300 	bic.w	r3, r3, r0
    1122:	6013      	str	r3, [r2, #0]
  if (spi) {
    1124:	b139      	cbz	r1, 1136 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x5e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1126:	680a      	ldr	r2, [r1, #0]
		port().TDR = data;
    1128:	6655      	str	r5, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    112a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    112c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1130:	d0fb      	beq.n	112a <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x52>
    1132:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    1134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *clkPort |= clkPinMask;  // Clock high
    1136:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1138:	2008      	movs	r0, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    113a:	2180      	movs	r1, #128	; 0x80
    113c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    113e:	6832      	ldr	r2, [r6, #0]
      if (d & bit)
    1140:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
    1142:	6ca7      	ldr	r7, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1144:	ea4f 0151 	mov.w	r1, r1, lsr #1
        *mosiPort |= mosiPinMask;
    1148:	bf14      	ite	ne
    114a:	433a      	orrne	r2, r7
        *mosiPort &= ~mosiPinMask;
    114c:	43ba      	biceq	r2, r7
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    114e:	3801      	subs	r0, #1
        *mosiPort &= ~mosiPinMask;
    1150:	6032      	str	r2, [r6, #0]
      *clkPort |= clkPinMask;  // Clock high
    1152:	681a      	ldr	r2, [r3, #0]
    1154:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    1156:	ea42 0207 	orr.w	r2, r2, r7
    115a:	601a      	str	r2, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    115c:	681a      	ldr	r2, [r3, #0]
    115e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    1160:	ea22 0207 	bic.w	r2, r2, r7
    1164:	601a      	str	r2, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1166:	d1ea      	bne.n	113e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x66>
}
    1168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    116a:	bf00      	nop

0000116c <Adafruit_SSD1306::invertDisplay(bool)>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    116c:	b538      	push	{r3, r4, r5, lr}
    116e:	4604      	mov	r4, r0
  TRANSACTION_START
    1170:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
    1172:	460d      	mov	r5, r1
  TRANSACTION_START
    1174:	b178      	cbz	r0, 1196 <Adafruit_SSD1306::invertDisplay(bool)+0x2a>
    1176:	6da1      	ldr	r1, [r4, #88]	; 0x58
    1178:	f00d fe4c 	bl	ee14 <TwoWire::setClock(unsigned long)>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    117c:	f1a5 015a 	sub.w	r1, r5, #90	; 0x5a
    1180:	4620      	mov	r0, r4
    1182:	b2c9      	uxtb	r1, r1
    1184:	f7ff ffa8 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  TRANSACTION_END
    1188:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    118a:	b198      	cbz	r0, 11b4 <Adafruit_SSD1306::invertDisplay(bool)+0x48>
    118c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
    118e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
    1192:	f00d be3f 	b.w	ee14 <TwoWire::setClock(unsigned long)>
  TRANSACTION_START
    1196:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1198:	b128      	cbz	r0, 11a6 <Adafruit_SSD1306::invertDisplay(bool)+0x3a>
    119a:	f104 0364 	add.w	r3, r4, #100	; 0x64
    119e:	e893 0006 	ldmia.w	r3, {r1, r2}
    11a2:	f7ff fc4b 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
    11a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    11a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    11aa:	6813      	ldr	r3, [r2, #0]
    11ac:	ea23 0301 	bic.w	r3, r3, r1
    11b0:	6013      	str	r3, [r2, #0]
    11b2:	e7e3      	b.n	117c <Adafruit_SSD1306::invertDisplay(bool)+0x10>
  TRANSACTION_END
    11b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    11b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    11b8:	680b      	ldr	r3, [r1, #0]
    11ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    11bc:	4303      	orrs	r3, r0
    11be:	600b      	str	r3, [r1, #0]
    11c0:	b322      	cbz	r2, 120c <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
		if (interruptMasksUsed) {
    11c2:	7cd3      	ldrb	r3, [r2, #19]
    11c4:	b313      	cbz	r3, 120c <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    11c6:	07dd      	lsls	r5, r3, #31
    11c8:	d504      	bpl.n	11d4 <Adafruit_SSD1306::invertDisplay(bool)+0x68>
    11ca:	6a90      	ldr	r0, [r2, #40]	; 0x28
    11cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11d0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    11d4:	079c      	lsls	r4, r3, #30
    11d6:	d504      	bpl.n	11e2 <Adafruit_SSD1306::invertDisplay(bool)+0x76>
    11d8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    11da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11de:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    11e2:	0758      	lsls	r0, r3, #29
    11e4:	d504      	bpl.n	11f0 <Adafruit_SSD1306::invertDisplay(bool)+0x84>
    11e6:	6b10      	ldr	r0, [r2, #48]	; 0x30
    11e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11ec:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    11f0:	0719      	lsls	r1, r3, #28
    11f2:	d504      	bpl.n	11fe <Adafruit_SSD1306::invertDisplay(bool)+0x92>
    11f4:	6b50      	ldr	r0, [r2, #52]	; 0x34
    11f6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    11fa:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    11fe:	06db      	lsls	r3, r3, #27
    1200:	d504      	bpl.n	120c <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
    1202:	6b92      	ldr	r2, [r2, #56]	; 0x38
    1204:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1208:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    120c:	bd38      	pop	{r3, r4, r5, pc}
    120e:	bf00      	nop

00001210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>:
  if (wire) { // I2C
    1210:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    1212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1216:	4604      	mov	r4, r0
    1218:	460d      	mov	r5, r1
    121a:	4690      	mov	r8, r2
  if (wire) { // I2C
    121c:	2b00      	cmp	r3, #0
    121e:	d03b      	beq.n	1298 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x88>
		txBuffer[0] = (address << 1);
    1220:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    1224:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    1226:	2100      	movs	r1, #0
		txBuffer[0] = (address << 1);
    1228:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    122a:	f883 6130 	strb.w	r6, [r3, #304]	; 0x130
		txBufferLength = 1;
    122e:	f883 612f 	strb.w	r6, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1232:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    1236:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1238:	6803      	ldr	r3, [r0, #0]
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	4798      	blx	r3
    while (n--) {
    123e:	f1b8 0f00 	cmp.w	r8, #0
    1242:	d023      	beq.n	128c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
    1244:	eb05 0708 	add.w	r7, r5, r8
		return endTransmission(1);
    1248:	46b0      	mov	r8, r6
      WIRE_WRITE(pgm_read_byte(c++));
    124a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      bytesOut++;
    124c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
    124e:	f815 1b01 	ldrb.w	r1, [r5], #1
    1252:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
    1254:	b2b6      	uxth	r6, r6
      WIRE_WRITE(pgm_read_byte(c++));
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	4798      	blx	r3
    while (n--) {
    125a:	42af      	cmp	r7, r5
    125c:	d016      	beq.n	128c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
      if (bytesOut >= WIRE_MAX) {
    125e:	2e88      	cmp	r6, #136	; 0x88
    1260:	d1f3      	bne.n	124a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
    1262:	2101      	movs	r1, #1
    1264:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1266:	f00d fc3d 	bl	eae4 <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    126a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    126e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    1270:	2100      	movs	r1, #0
    1272:	0052      	lsls	r2, r2, #1
        bytesOut = 1;
    1274:	2601      	movs	r6, #1
		transmitting = 1;
    1276:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    127a:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    127e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    1282:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1284:	6803      	ldr	r3, [r0, #0]
    1286:	681b      	ldr	r3, [r3, #0]
    1288:	4798      	blx	r3
        bytesOut = 1;
    128a:	e7de      	b.n	124a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
		return endTransmission(1);
    128c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    128e:	2101      	movs	r1, #1
}
    1290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1294:	f00d bc26 	b.w	eae4 <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    1298:	6c02      	ldr	r2, [r0, #64]	; 0x40
    129a:	6d01      	ldr	r1, [r0, #80]	; 0x50
    129c:	6813      	ldr	r3, [r2, #0]
    129e:	ea23 0301 	bic.w	r3, r3, r1
    12a2:	6013      	str	r3, [r2, #0]
    while (n--)
    12a4:	f1b8 0f00 	cmp.w	r8, #0
    12a8:	d00d      	beq.n	12c6 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb6>
  if (spi) {
    12aa:	6a47      	ldr	r7, [r0, #36]	; 0x24
    12ac:	44a8      	add	r8, r5
      SPIwrite(pgm_read_byte(c++));
    12ae:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (spi) {
    12b2:	b157      	cbz	r7, 12ca <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xba>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    12b4:	6839      	ldr	r1, [r7, #0]
		port().TDR = data;
    12b6:	664e      	str	r6, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    12b8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    12ba:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    12be:	d0fb      	beq.n	12b8 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xa8>
    12c0:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    while (n--)
    12c2:	4545      	cmp	r5, r8
    12c4:	d1f3      	bne.n	12ae <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x9e>
}
    12c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *clkPort |= clkPinMask;  // Clock high
    12ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12cc:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    12d0:	f04f 0c80 	mov.w	ip, #128	; 0x80
    12d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    12d6:	6808      	ldr	r0, [r1, #0]
      if (d & bit)
    12d8:	ea16 0f0c 	tst.w	r6, ip
        *mosiPort |= mosiPinMask;
    12dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    12de:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        *mosiPort |= mosiPinMask;
    12e2:	bf14      	ite	ne
    12e4:	4310      	orrne	r0, r2
        *mosiPort &= ~mosiPinMask;
    12e6:	4390      	biceq	r0, r2
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    12e8:	f1be 0e01 	subs.w	lr, lr, #1
        *mosiPort &= ~mosiPinMask;
    12ec:	6008      	str	r0, [r1, #0]
      *clkPort |= clkPinMask;  // Clock high
    12ee:	6818      	ldr	r0, [r3, #0]
    12f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    12f2:	ea40 0002 	orr.w	r0, r0, r2
    12f6:	6018      	str	r0, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    12f8:	6818      	ldr	r0, [r3, #0]
    12fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    12fc:	ea20 0002 	bic.w	r0, r0, r2
    1300:	6018      	str	r0, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1302:	d1e8      	bne.n	12d6 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xc6>
    1304:	e7dd      	b.n	12c2 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb2>
    1306:	bf00      	nop

00001308 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>:
                             bool periphBegin) {
    1308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    130c:	4604      	mov	r4, r0
    130e:	b086      	sub	sp, #24
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    1310:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
                             bool periphBegin) {
    1312:	461e      	mov	r6, r3
    1314:	460f      	mov	r7, r1
    1316:	4615      	mov	r5, r2
    1318:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    131c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    1320:	2800      	cmp	r0, #0
    1322:	f000 815d 	beq.w	15e0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2d8>
    1326:	1dda      	adds	r2, r3, #7
    1328:	bf48      	it	mi
    132a:	f103 020e 	addmi.w	r2, r3, #14
    132e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    1332:	10d2      	asrs	r2, r2, #3
    1334:	fb03 f202 	mul.w	r2, r3, r2
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    1338:	2100      	movs	r1, #0
    133a:	f01a fc0d 	bl	1bb58 <memset>
  if (HEIGHT > 32) {
    133e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
    1342:	2820      	cmp	r0, #32
    1344:	f300 80bd 	bgt.w	14c2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1ba>
    drawBitmap((WIDTH - dtu_width) / 2, (HEIGHT - dtu_height) / 2,
    1348:	f1b0 0220 	subs.w	r2, r0, #32
    134c:	f04f 0c01 	mov.w	ip, #1
    1350:	4bb9      	ldr	r3, [pc, #740]	; (1638 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x330>)
    1352:	bf48      	it	mi
    1354:	f1a0 021f 	submi.w	r2, r0, #31
    1358:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    135c:	f1b0 0167 	subs.w	r1, r0, #103	; 0x67
    1360:	ea4f 0262 	mov.w	r2, r2, asr #1
    1364:	bf48      	it	mi
    1366:	f1a0 0166 	submi.w	r1, r0, #102	; 0x66
    136a:	2020      	movs	r0, #32
    136c:	e9cd 0c01 	strd	r0, ip, [sp, #4]
    1370:	2067      	movs	r0, #103	; 0x67
    1372:	1049      	asrs	r1, r1, #1
    1374:	9000      	str	r0, [sp, #0]
    1376:	4620      	mov	r0, r4
    1378:	f00d ffd8 	bl	f32c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    137c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    137e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    1382:	2800      	cmp	r0, #0
    1384:	f000 80bc 	beq.w	1500 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f8>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    1388:	2d00      	cmp	r5, #0
    138a:	f040 811d 	bne.w	15c8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2c0>
    138e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    1392:	2b20      	cmp	r3, #32
    1394:	bf0c      	ite	eq
    1396:	253c      	moveq	r5, #60	; 0x3c
    1398:	253d      	movne	r5, #61	; 0x3d
    139a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    139e:	f1b8 0f00 	cmp.w	r8, #0
    13a2:	f040 8118 	bne.w	15d6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2ce>
  if (reset && (rstPin >= 0)) {
    13a6:	2e00      	cmp	r6, #0
    13a8:	f000 80d8 	beq.w	155c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x254>
    13ac:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
    13b0:	2800      	cmp	r0, #0
    13b2:	db18      	blt.n	13e6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xde>
    pinMode(rstPin, OUTPUT);
    13b4:	2101      	movs	r1, #1
    13b6:	b2c0      	uxtb	r0, r0
    13b8:	f014 fe5c 	bl	16074 <pinMode>
    digitalWrite(rstPin, HIGH);
    13bc:	2101      	movs	r1, #1
    13be:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    13c2:	f014 fe1b 	bl	15ffc <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
    13c6:	2001      	movs	r0, #1
    13c8:	f014 fd9a 	bl	15f00 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
    13cc:	2100      	movs	r1, #0
    13ce:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    13d2:	f014 fe13 	bl	15ffc <digitalWrite>
    delay(10);                  // Wait 10 ms
    13d6:	200a      	movs	r0, #10
    13d8:	f014 fd92 	bl	15f00 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
    13dc:	2101      	movs	r1, #1
    13de:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    13e2:	f014 fe0b 	bl	15ffc <digitalWrite>
  TRANSACTION_START
    13e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    13e8:	2800      	cmp	r0, #0
    13ea:	f040 80b7 	bne.w	155c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x254>
    13ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13f0:	b128      	cbz	r0, 13fe <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xf6>
    13f2:	f104 0364 	add.w	r3, r4, #100	; 0x64
    13f6:	e893 0006 	ldmia.w	r3, {r1, r2}
    13fa:	f7ff fb1f 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
    13fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1400:	6d61      	ldr	r1, [r4, #84]	; 0x54
    1402:	6813      	ldr	r3, [r2, #0]
    1404:	ea23 0301 	bic.w	r3, r3, r1
    1408:	6013      	str	r3, [r2, #0]
  ssd1306_commandList(init1, sizeof(init1));
    140a:	2204      	movs	r2, #4
    140c:	498b      	ldr	r1, [pc, #556]	; (163c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x334>)
    140e:	4620      	mov	r0, r4
    1410:	f7ff fefe 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(HEIGHT - 1);
    1414:	8961      	ldrh	r1, [r4, #10]
    1416:	4620      	mov	r0, r4
    1418:	3901      	subs	r1, #1
    141a:	b2c9      	uxtb	r1, r1
    141c:	f7ff fe5c 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init2, sizeof(init2));
    1420:	4987      	ldr	r1, [pc, #540]	; (1640 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x338>)
    1422:	2204      	movs	r2, #4
    1424:	4620      	mov	r0, r4
    1426:	f7ff fef3 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
    142a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    142e:	4620      	mov	r0, r4
    1430:	2b01      	cmp	r3, #1
    1432:	bf0c      	ite	eq
    1434:	2110      	moveq	r1, #16
    1436:	2114      	movne	r1, #20
    1438:	f7ff fe4e 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init3, sizeof(init3));
    143c:	2204      	movs	r2, #4
    143e:	4981      	ldr	r1, [pc, #516]	; (1644 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x33c>)
    1440:	4620      	mov	r0, r4
    1442:	f7ff fee5 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    1446:	68a3      	ldr	r3, [r4, #8]
    1448:	4a7f      	ldr	r2, [pc, #508]	; (1648 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x340>)
  contrast = 0x8F;
    144a:	218f      	movs	r1, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    144c:	4293      	cmp	r3, r2
  contrast = 0x8F;
    144e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    1452:	d008      	beq.n	1466 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x15e>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    1454:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
    1458:	4293      	cmp	r3, r2
    145a:	f000 80d4 	beq.w	1606 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2fe>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    145e:	4a7b      	ldr	r2, [pc, #492]	; (164c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x344>)
    1460:	4293      	cmp	r3, r2
    1462:	f000 80da 	beq.w	161a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x312>
    comPins = 0x02;
    1466:	2502      	movs	r5, #2
  ssd1306_command1(SSD1306_SETCOMPINS);
    1468:	21da      	movs	r1, #218	; 0xda
    146a:	4620      	mov	r0, r4
    146c:	f7ff fe34 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(comPins);
    1470:	4629      	mov	r1, r5
    1472:	4620      	mov	r0, r4
    1474:	f7ff fe30 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETCONTRAST);
    1478:	2181      	movs	r1, #129	; 0x81
    147a:	4620      	mov	r0, r4
    147c:	f7ff fe2c 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(contrast);
    1480:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    1484:	4620      	mov	r0, r4
    1486:	f7ff fe27 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
    148a:	21d9      	movs	r1, #217	; 0xd9
    148c:	4620      	mov	r0, r4
    148e:	f7ff fe23 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
    1492:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    1496:	4620      	mov	r0, r4
    1498:	2b01      	cmp	r3, #1
    149a:	bf0c      	ite	eq
    149c:	2122      	moveq	r1, #34	; 0x22
    149e:	21f1      	movne	r1, #241	; 0xf1
    14a0:	f7ff fe1a 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init5, sizeof(init5));
    14a4:	4620      	mov	r0, r4
    14a6:	2206      	movs	r2, #6
    14a8:	4969      	ldr	r1, [pc, #420]	; (1650 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x348>)
    14aa:	f7ff feb1 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  TRANSACTION_END
    14ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    14b0:	2800      	cmp	r0, #0
    14b2:	d057      	beq.n	1564 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x25c>
    14b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    14b6:	f00d fcad 	bl	ee14 <TwoWire::setClock(unsigned long)>
  return true; // Success
    14ba:	2001      	movs	r0, #1
}
    14bc:	b006      	add	sp, #24
    14be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
    14c2:	3840      	subs	r0, #64	; 0x40
    14c4:	f04f 0e01 	mov.w	lr, #1
    14c8:	4b62      	ldr	r3, [pc, #392]	; (1654 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x34c>)
    14ca:	b200      	sxth	r0, r0
    14cc:	2800      	cmp	r0, #0
    14ce:	bfb8      	it	lt
    14d0:	3001      	addlt	r0, #1
    14d2:	1042      	asrs	r2, r0, #1
    14d4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    14d8:	f1b0 0152 	subs.w	r1, r0, #82	; 0x52
    14dc:	bf48      	it	mi
    14de:	f1a0 0151 	submi.w	r1, r0, #81	; 0x51
    14e2:	2040      	movs	r0, #64	; 0x40
    14e4:	e9cd 0e01 	strd	r0, lr, [sp, #4]
    14e8:	2052      	movs	r0, #82	; 0x52
    14ea:	1049      	asrs	r1, r1, #1
    14ec:	9000      	str	r0, [sp, #0]
    14ee:	4620      	mov	r0, r4
    14f0:	f00d ff1c 	bl	f32c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    14f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    14f6:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    14fa:	2800      	cmp	r0, #0
    14fc:	f47f af44 	bne.w	1388 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x80>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    1500:	2101      	movs	r1, #1
    1502:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    1506:	f014 fdb5 	bl	16074 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
    150a:	2101      	movs	r1, #1
    150c:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
    1510:	f014 fdb0 	bl	16074 <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    1514:	4d50      	ldr	r5, [pc, #320]	; (1658 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x350>)
    1516:	f994 2035 	ldrsb.w	r2, [r4, #53]	; 0x35
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    151a:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    151e:	0111      	lsls	r1, r2, #4
    if (spi) { // Hardware SPI
    1520:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    1522:	eb05 1202 	add.w	r2, r5, r2, lsl #4
    1526:	5869      	ldr	r1, [r5, r1]
    dcPinMask = digitalPinToBitMask(dcPin);
    1528:	68d2      	ldr	r2, [r2, #12]
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    152a:	6421      	str	r1, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
    152c:	6522      	str	r2, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    152e:	011a      	lsls	r2, r3, #4
    1530:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    1534:	58aa      	ldr	r2, [r5, r2]
    csPinMask = digitalPinToBitMask(csPin);
    1536:	68db      	ldr	r3, [r3, #12]
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    1538:	6462      	str	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
    153a:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
    153c:	6811      	ldr	r1, [r2, #0]
    153e:	430b      	orrs	r3, r1
    1540:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
    1542:	2800      	cmp	r0, #0
    1544:	f000 808a 	beq.w	165c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x354>
      if (periphBegin)
    1548:	f1b8 0f00 	cmp.w	r8, #0
    154c:	d16f      	bne.n	162e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x326>
  if (reset && (rstPin >= 0)) {
    154e:	2e00      	cmp	r6, #0
    1550:	f47f af2c 	bne.w	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  TRANSACTION_START
    1554:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1556:	2800      	cmp	r0, #0
    1558:	f43f af49 	beq.w	13ee <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xe6>
    155c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    155e:	f00d fc59 	bl	ee14 <TwoWire::setClock(unsigned long)>
    1562:	e752      	b.n	140a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x102>
  TRANSACTION_END
    1564:	6c61      	ldr	r1, [r4, #68]	; 0x44
    1566:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1568:	680b      	ldr	r3, [r1, #0]
    156a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    156c:	4303      	orrs	r3, r0
    156e:	600b      	str	r3, [r1, #0]
    1570:	b332      	cbz	r2, 15c0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
		if (interruptMasksUsed) {
    1572:	7cd3      	ldrb	r3, [r2, #19]
    1574:	b323      	cbz	r3, 15c0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1576:	07dd      	lsls	r5, r3, #31
    1578:	d504      	bpl.n	1584 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x27c>
    157a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    157c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1580:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1584:	079c      	lsls	r4, r3, #30
    1586:	d504      	bpl.n	1592 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x28a>
    1588:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    158a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    158e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1592:	0758      	lsls	r0, r3, #29
    1594:	d504      	bpl.n	15a0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x298>
    1596:	6b10      	ldr	r0, [r2, #48]	; 0x30
    1598:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    159c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    15a0:	0719      	lsls	r1, r3, #28
    15a2:	d504      	bpl.n	15ae <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2a6>
    15a4:	6b50      	ldr	r0, [r2, #52]	; 0x34
    15a6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    15aa:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    15ae:	06db      	lsls	r3, r3, #27
    15b0:	d506      	bpl.n	15c0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
    15b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    15b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  return true; // Success
    15b8:	2001      	movs	r0, #1
    15ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    15be:	e77d      	b.n	14bc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1b4>
    15c0:	2001      	movs	r0, #1
}
    15c2:	b006      	add	sp, #24
    15c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    15c8:	b26d      	sxtb	r5, r5
    15ca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    15ce:	f1b8 0f00 	cmp.w	r8, #0
    15d2:	f43f aee8 	beq.w	13a6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x9e>
      wire->begin();
    15d6:	f023 f957 	bl	24888 <___ZN7TwoWire5beginEv_veneer>
  if (reset && (rstPin >= 0)) {
    15da:	2e00      	cmp	r6, #0
    15dc:	d0ba      	beq.n	1554 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    15de:	e6e5      	b.n	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    15e0:	1dda      	adds	r2, r3, #7
    15e2:	bf48      	it	mi
    15e4:	f103 020e 	addmi.w	r2, r3, #14
    15e8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    15ec:	10d2      	asrs	r2, r2, #3
    15ee:	fb03 f202 	mul.w	r2, r3, r2
    15f2:	4610      	mov	r0, r2
    15f4:	9205      	str	r2, [sp, #20]
    15f6:	f018 f999 	bl	1992c <malloc>
    15fa:	9a05      	ldr	r2, [sp, #20]
    15fc:	62e0      	str	r0, [r4, #44]	; 0x2c
    15fe:	2800      	cmp	r0, #0
    1600:	f47f ae9a 	bne.w	1338 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x30>
    1604:	e75a      	b.n	14bc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1b4>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    1606:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
    160a:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    160c:	2b01      	cmp	r3, #1
    160e:	bf0c      	ite	eq
    1610:	239f      	moveq	r3, #159	; 0x9f
    1612:	23cf      	movne	r3, #207	; 0xcf
    1614:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    1618:	e726      	b.n	1468 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x160>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    161a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x2; // ada x12
    161e:	2502      	movs	r5, #2
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    1620:	2b01      	cmp	r3, #1
    1622:	bf0c      	ite	eq
    1624:	2310      	moveq	r3, #16
    1626:	23af      	movne	r3, #175	; 0xaf
    1628:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    162c:	e71c      	b.n	1468 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x160>
        spi->begin();
    162e:	f00e f9fd 	bl	fa2c <SPIClass::begin()>
  if (reset && (rstPin >= 0)) {
    1632:	2e00      	cmp	r6, #0
    1634:	d08e      	beq.n	1554 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    1636:	e6b9      	b.n	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
    1638:	60002330 	.word	0x60002330
    163c:	600024d0 	.word	0x600024d0
    1640:	600024d4 	.word	0x600024d4
    1644:	600024d8 	.word	0x600024d8
    1648:	00200080 	.word	0x00200080
    164c:	00100060 	.word	0x00100060
    1650:	600024dc 	.word	0x600024dc
    1654:	60002070 	.word	0x60002070
    1658:	200081bc 	.word	0x200081bc
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
    165c:	2101      	movs	r1, #1
    165e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1662:	f014 fd07 	bl	16074 <pinMode>
      pinMode(clkPin, OUTPUT);
    1666:	2101      	movs	r1, #1
    1668:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    166c:	f014 fd02 	bl	16074 <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    1670:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
    1674:	0119      	lsls	r1, r3, #4
    1676:	eb05 1203 	add.w	r2, r5, r3, lsl #4
    167a:	586b      	ldr	r3, [r5, r1]
      mosiPinMask = digitalPinToBitMask(mosiPin);
    167c:	68d2      	ldr	r2, [r2, #12]
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    167e:	63a3      	str	r3, [r4, #56]	; 0x38
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    1680:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      mosiPinMask = digitalPinToBitMask(mosiPin);
    1684:	64a2      	str	r2, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    1686:	011a      	lsls	r2, r3, #4
    1688:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    168c:	58aa      	ldr	r2, [r5, r2]
      clkPinMask = digitalPinToBitMask(clkPin);
    168e:	68d9      	ldr	r1, [r3, #12]
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    1690:	63e2      	str	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
    1692:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
    1694:	6813      	ldr	r3, [r2, #0]
    1696:	ea23 0301 	bic.w	r3, r3, r1
    169a:	6013      	str	r3, [r2, #0]
  if (reset && (rstPin >= 0)) {
    169c:	2e00      	cmp	r6, #0
    169e:	f43f af59 	beq.w	1554 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    16a2:	e683      	b.n	13ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>

000016a4 <Adafruit_SSD1306::clearDisplay()>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    16a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    16a8:	2100      	movs	r1, #0
    16aa:	1dda      	adds	r2, r3, #7
    16ac:	bf48      	it	mi
    16ae:	f103 020e 	addmi.w	r2, r3, #14
    16b2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    16b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    16b8:	10d2      	asrs	r2, r2, #3
    16ba:	fb03 f202 	mul.w	r2, r3, r2
    16be:	f01a ba4b 	b.w	1bb58 <memset>
    16c2:	bf00      	nop

000016c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>:
void Adafruit_SSD1306::display(uint8_t page, uint8_t column) {
    16c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16c8:	4604      	mov	r4, r0
  TRANSACTION_START
    16ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::display(uint8_t page, uint8_t column) {
    16cc:	b082      	sub	sp, #8
    16ce:	460f      	mov	r7, r1
    16d0:	4615      	mov	r5, r2
  TRANSACTION_START
    16d2:	2800      	cmp	r0, #0
    16d4:	d078      	beq.n	17c8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x104>
    16d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    16d8:	f00d fb9c 	bl	ee14 <TwoWire::setClock(unsigned long)>
  dlist1[0] = SSD1306_PAGEADDR,       // (0x22, 0, 0xff)
    16dc:	2322      	movs	r3, #34	; 0x22
  uint8_t /*PROGMEM*/ dlist1[] = {
    16de:	f242 12ff 	movw	r2, #8703	; 0x21ff
  ssd1306_commandList(dlist1, sizeof(dlist1));
    16e2:	4669      	mov	r1, sp
    16e4:	4620      	mov	r0, r4
  dlist1[0] = SSD1306_PAGEADDR,       // (0x22, 0, 0xff)
    16e6:	f88d 3000 	strb.w	r3, [sp]
      SSD1306_COLUMNADDR, uint8_t(column*32/2)}; // Column start address (0x21, 0, width)
    16ea:	012b      	lsls	r3, r5, #4
  uint8_t /*PROGMEM*/ dlist1[] = {
    16ec:	f8ad 2002 	strh.w	r2, [sp, #2]
  ssd1306_commandList(dlist1, sizeof(dlist1));
    16f0:	2205      	movs	r2, #5
      SSD1306_COLUMNADDR, uint8_t(column*32/2)}; // Column start address (0x21, 0, width)
    16f2:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    16f6:	012d      	lsls	r5, r5, #4
      SSD1306_COLUMNADDR, uint8_t(column*32/2)}; // Column start address (0x21, 0, width)
    16f8:	f88d 7001 	strb.w	r7, [sp, #1]
  ssd1306_commandList(dlist1, sizeof(dlist1));
    16fc:	f7ff fd88 	bl	1210 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(WIDTH - 1); // Column end address
    1700:	8921      	ldrh	r1, [r4, #8]
    1702:	4620      	mov	r0, r4
    1704:	3901      	subs	r1, #1
    1706:	b2c9      	uxtb	r1, r1
    1708:	f7ff fce6 	bl	10d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  uint16_t countFull = WIDTH * ((HEIGHT + 7) / 8);
    170c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    1710:	8926      	ldrh	r6, [r4, #8]
    1712:	1dd3      	adds	r3, r2, #7
    1714:	bf48      	it	mi
    1716:	f102 030e 	addmi.w	r3, r2, #14
    171a:	10db      	asrs	r3, r3, #3
    171c:	fb16 f603 	smulbb	r6, r6, r3
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    1720:	f3c6 038d 	ubfx	r3, r6, #2, #14
  uint16_t count = countFull / (16*2); // divide transfer into 4 pages with 1/8 of width
    1724:	f3c6 164a 	ubfx	r6, r6, #5, #11
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    1728:	fb07 5103 	mla	r1, r7, r3, r5
  if (wire) { // I2C
    172c:	e9d4 350a 	ldrd	r3, r5, [r4, #40]	; 0x28
  uint8_t *ptr = buffer + countFull/4*page + column*32/2; // send 16 bytes in one burst
    1730:	440d      	add	r5, r1
  if (wire) { // I2C
    1732:	2b00      	cmp	r3, #0
    1734:	d057      	beq.n	17e6 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x122>
		txBuffer[0] = (address << 1);
    1736:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
		transmitting = 1;
    173a:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
    173c:	2140      	movs	r1, #64	; 0x40
		txBuffer[0] = (address << 1);
    173e:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    1740:	f883 7130 	strb.w	r7, [r3, #304]	; 0x130
		txBufferLength = 1;
    1744:	f883 712f 	strb.w	r7, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1748:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    174c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    174e:	6803      	ldr	r3, [r0, #0]
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	4798      	blx	r3
    while (count--) {
    1754:	b356      	cbz	r6, 17ac <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xe8>
    1756:	442e      	add	r6, r5
		return endTransmission(1);
    1758:	46b8      	mov	r8, r7
        usb.send("# UDisplay:: hit MAX\n");
    175a:	f8df a168 	ldr.w	sl, [pc, #360]	; 18c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x200>
    175e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 18c8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x204>
      WIRE_WRITE(*ptr++);
    1762:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      bytesOut++;
    1764:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
    1766:	f815 1b01 	ldrb.w	r1, [r5], #1
    176a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
    176c:	b2bf      	uxth	r7, r7
      WIRE_WRITE(*ptr++);
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	4798      	blx	r3
    while (count--) {
    1772:	42b5      	cmp	r5, r6
    1774:	d01a      	beq.n	17ac <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xe8>
      if (bytesOut >= WIRE_MAX) {
    1776:	2f88      	cmp	r7, #136	; 0x88
    1778:	d1f3      	bne.n	1762 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x9e>
    177a:	2101      	movs	r1, #1
    177c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    177e:	f00d f9b1 	bl	eae4 <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    1782:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    1786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WIRE_WRITE((uint8_t)0x40);
    1788:	2140      	movs	r1, #64	; 0x40
    178a:	0052      	lsls	r2, r2, #1
        bytesOut = 1;
    178c:	2701      	movs	r7, #1
		transmitting = 1;
    178e:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    1792:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1796:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        WIRE_WRITE((uint8_t)0x40);
    179a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    179c:	6803      	ldr	r3, [r0, #0]
    179e:	681b      	ldr	r3, [r3, #0]
    17a0:	4798      	blx	r3
        usb.send("# UDisplay:: hit MAX\n");
    17a2:	4651      	mov	r1, sl
    17a4:	4648      	mov	r0, r9
    17a6:	f00a ff31 	bl	c60c <UUSB::send(char const*)>
    17aa:	e7da      	b.n	1762 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x9e>
		return endTransmission(1);
    17ac:	2101      	movs	r1, #1
    17ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    17b0:	f00d f998 	bl	eae4 <TwoWire::endTransmission(unsigned char)>
  TRANSACTION_END
    17b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    17b6:	2800      	cmp	r0, #0
    17b8:	f000 8081 	beq.w	18be <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1fa>
    17bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    17be:	f00d fb29 	bl	ee14 <TwoWire::setClock(unsigned long)>
}
    17c2:	b002      	add	sp, #8
    17c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TRANSACTION_START
    17c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    17ca:	b128      	cbz	r0, 17d8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x114>
    17cc:	f104 0364 	add.w	r3, r4, #100	; 0x64
    17d0:	e893 0006 	ldmia.w	r3, {r1, r2}
    17d4:	f7ff f932 	bl	a3c <SPIClass::beginTransaction(SPISettings)>
    17d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    17da:	6d61      	ldr	r1, [r4, #84]	; 0x54
    17dc:	6813      	ldr	r3, [r2, #0]
    17de:	ea23 0301 	bic.w	r3, r3, r1
    17e2:	6013      	str	r3, [r2, #0]
    17e4:	e77a      	b.n	16dc <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x18>
    SSD1306_MODE_DATA
    17e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    17e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
    17ea:	6813      	ldr	r3, [r2, #0]
  if (spi) {
    17ec:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
    SSD1306_MODE_DATA
    17f0:	430b      	orrs	r3, r1
    17f2:	6013      	str	r3, [r2, #0]
    while (count--)
    17f4:	b17e      	cbz	r6, 1816 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x152>
    17f6:	442e      	add	r6, r5
      SPIwrite(*ptr++);
    17f8:	f815 7b01 	ldrb.w	r7, [r5], #1
  if (spi) {
    17fc:	f1b8 0f00 	cmp.w	r8, #0
    1800:	d03e      	beq.n	1880 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1bc>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1802:	f8d8 2000 	ldr.w	r2, [r8]
		port().TDR = data;
    1806:	6657      	str	r7, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1808:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    180a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    180e:	d0fb      	beq.n	1808 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x144>
    1810:	6f53      	ldr	r3, [r2, #116]	; 0x74
    while (count--)
    1812:	42b5      	cmp	r5, r6
    1814:	d1f0      	bne.n	17f8 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x134>
  TRANSACTION_END
    1816:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1818:	6d61      	ldr	r1, [r4, #84]	; 0x54
    181a:	6813      	ldr	r3, [r2, #0]
    181c:	430b      	orrs	r3, r1
    181e:	6013      	str	r3, [r2, #0]
    1820:	f1b8 0f00 	cmp.w	r8, #0
    1824:	d0cd      	beq.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
		if (interruptMasksUsed) {
    1826:	f898 3013 	ldrb.w	r3, [r8, #19]
    182a:	2b00      	cmp	r3, #0
    182c:	d0c9      	beq.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    182e:	07dc      	lsls	r4, r3, #31
    1830:	d505      	bpl.n	183e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x17a>
    1832:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    1836:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    183a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    183e:	0798      	lsls	r0, r3, #30
    1840:	d505      	bpl.n	184e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x18a>
    1842:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
    1846:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    184a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    184e:	0759      	lsls	r1, r3, #29
    1850:	d505      	bpl.n	185e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x19a>
    1852:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    1856:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    185a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    185e:	071a      	lsls	r2, r3, #28
    1860:	d505      	bpl.n	186e <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1aa>
    1862:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    1866:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    186a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    186e:	06db      	lsls	r3, r3, #27
    1870:	d5a7      	bpl.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
    1872:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    1876:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    187a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    187e:	e7a0      	b.n	17c2 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0xfe>
      *clkPort |= clkPinMask;  // Clock high
    1880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1882:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1886:	f04f 0c80 	mov.w	ip, #128	; 0x80
    188a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    188c:	6810      	ldr	r0, [r2, #0]
      if (d & bit)
    188e:	ea17 0f0c 	tst.w	r7, ip
        *mosiPort |= mosiPinMask;
    1892:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    1894:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        *mosiPort |= mosiPinMask;
    1898:	bf14      	ite	ne
    189a:	4301      	orrne	r1, r0
        *mosiPort &= ~mosiPinMask;
    189c:	ea20 0101 	biceq.w	r1, r0, r1
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    18a0:	f1be 0e01 	subs.w	lr, lr, #1
        *mosiPort &= ~mosiPinMask;
    18a4:	6011      	str	r1, [r2, #0]
      *clkPort |= clkPinMask;  // Clock high
    18a6:	6818      	ldr	r0, [r3, #0]
    18a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    18aa:	ea41 0100 	orr.w	r1, r1, r0
    18ae:	6019      	str	r1, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    18b0:	6818      	ldr	r0, [r3, #0]
    18b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    18b4:	ea20 0001 	bic.w	r0, r0, r1
    18b8:	6018      	str	r0, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    18ba:	d1e7      	bne.n	188c <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x1c8>
    18bc:	e7a9      	b.n	1812 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x14e>
  TRANSACTION_END
    18be:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
    18c2:	e7a8      	b.n	1816 <Adafruit_SSD1306::display(unsigned char, unsigned char)+0x152>
    18c4:	20003998 	.word	0x20003998
    18c8:	2000fac4 	.word	0x2000fac4

000018cc <USubss::sendData(int)>:
   * add subscription key */
  void addPublistItem(const char * key, const char * helpLine);
  /**
   * send data now from one of the subscription items
   * single request or as subscribed */
  virtual void sendData(int item) {};
    18cc:	4770      	bx	lr
    18ce:	bf00      	nop

000018d0 <USubss::sendHelp()>:
   * @brief sendHelpLine sends help line for this key
   */
  void subscribeSendHelp();
  /**
   * send command help */
  virtual void sendHelp() {};
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop

000018d4 <USubss::decode(char const*)>:
  /**
   * send data now from one of the subscription items
   * single request or as subscribed */
  virtual bool decode(const char * buf) { return false;};
    18d4:	2000      	movs	r0, #0
    18d6:	4770      	bx	lr

000018d8 <UAd::decode(char const*)>:
}
    18d8:	2000      	movs	r0, #0
    18da:	4770      	bx	lr

000018dc <UAd::sendHelp()>:
  usb.send("# AD converter -------\r\n");
    18dc:	4901      	ldr	r1, [pc, #4]	; (18e4 <UAd::sendHelp()+0x8>)
    18de:	4802      	ldr	r0, [pc, #8]	; (18e8 <UAd::sendHelp()+0xc>)
    18e0:	f00a be94 	b.w	c60c <UUSB::send(char const*)>
    18e4:	20003dbc 	.word	0x20003dbc
    18e8:	2000fac4 	.word	0x2000fac4

000018ec <UAd::~UAd()>:
#include <ADC.h>
#include "main.h"
// #include "ucontrol.h"
#include "usubss.h"

class UAd : public USubss
    18ec:	b510      	push	{r4, lr}
class USubss
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <UAd::~UAd()+0x18>)
    18f0:	4604      	mov	r4, r0
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
    18f2:	6840      	ldr	r0, [r0, #4]
    18f4:	6023      	str	r3, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    18f6:	b118      	cbz	r0, 1900 <UAd::~UAd()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    18f8:	68e1      	ldr	r1, [r4, #12]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
    18fa:	1a09      	subs	r1, r1, r0
    18fc:	f014 ff6e 	bl	167dc <operator delete(void*, unsigned int)>
    1900:	4620      	mov	r0, r4
    1902:	bd10      	pop	{r4, pc}
    1904:	200080a0 	.word	0x200080a0

00001908 <UAd::setup()>:
{ // calibrate
    1908:	b538      	push	{r3, r4, r5, lr}
    190a:	4604      	mov	r4, r0
  adc.adc0->calibrate();
    190c:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    1910:	f00c fa32 	bl	dd78 <ADC_Module::calibrate()>
  adc.adc0->wait_for_cal();
    1914:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
  motorCurrentRawAD[0] = adc.analogRead ( PIN_LEFT_MOTOR_CURRENT );
    1918:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
  adc.adc0->wait_for_cal();
    191c:	f00c fc0c 	bl	e138 <ADC_Module::wait_for_cal()>
  adc.adc1->calibrate();
    1920:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1924:	f00c fa28 	bl	dd78 <ADC_Module::calibrate()>
  adc.adc1->wait_for_cal();
    1928:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    192c:	f00c fc04 	bl	e138 <ADC_Module::wait_for_cal()>
  adc.adc0->setResolution ( useADCresolution); 
    1930:	7d21      	ldrb	r1, [r4, #20]
    1932:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    1936:	f00c fc29 	bl	e18c <ADC_Module::setResolution(unsigned char)>
  adc.adc1->setResolution ( useADCresolution);
    193a:	7d21      	ldrb	r1, [r4, #20]
    193c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1940:	f00c fc24 	bl	e18c <ADC_Module::setResolution(unsigned char)>
  adc.adc0->setReference ( ADC_REFERENCE::REF_3V3);
    1944:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    1948:	2100      	movs	r1, #0
    194a:	f00c fa2f 	bl	ddac <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)>
  adc.adc1->setReference ( ADC_REFERENCE::REF_3V3);
    194e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1952:	2100      	movs	r1, #0
    1954:	f00c fa2a 	bl	ddac <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)>
  adc.adc0->setConversionSpeed ( ADC_CONVERSION_SPEED::MED_SPEED);
    1958:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    195c:	2101      	movs	r1, #1
    195e:	f00c fa51 	bl	de04 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc.adc1->setConversionSpeed ( ADC_CONVERSION_SPEED::MED_SPEED);
    1962:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1966:	2101      	movs	r1, #1
    1968:	f00c fa4c 	bl	de04 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  pinMode ( PIN_BATTERY_VOLTAGE, INPUT ); // battery voltage (A9)
    196c:	2100      	movs	r1, #0
    196e:	2029      	movs	r0, #41	; 0x29
    1970:	f014 fb80 	bl	16074 <pinMode>
  pinMode ( PIN_LEFT_MOTOR_CURRENT, INPUT ); // battery voltage (A9)
    1974:	2100      	movs	r1, #0
    1976:	200e      	movs	r0, #14
    1978:	f014 fb7c 	bl	16074 <pinMode>
  pinMode ( PIN_RIGHT_MOTOR_CURRENT, INPUT ); // battery voltage (A9)
    197c:	2100      	movs	r1, #0
    197e:	200f      	movs	r0, #15
    1980:	f014 fb78 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_0, INPUT ); // Line sensor sensor value
    1984:	2100      	movs	r1, #0
    1986:	2014      	movs	r0, #20
    1988:	f014 fb74 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_1, INPUT ); // Line sensor sensor value
    198c:	2100      	movs	r1, #0
    198e:	201b      	movs	r0, #27
    1990:	f014 fb70 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_2, INPUT ); // Line sensor sensor value
    1994:	2100      	movs	r1, #0
    1996:	2015      	movs	r0, #21
    1998:	f014 fb6c 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_3, INPUT ); // Line sensor sensor value
    199c:	2100      	movs	r1, #0
    199e:	201a      	movs	r0, #26
    19a0:	f014 fb68 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_4, INPUT ); // Line sensor sensor value
    19a4:	2100      	movs	r1, #0
    19a6:	2016      	movs	r0, #22
    19a8:	f014 fb64 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_5, INPUT ); // Line sensor sensor value
    19ac:	2100      	movs	r1, #0
    19ae:	2019      	movs	r0, #25
    19b0:	f014 fb60 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_6, INPUT ); // Line sensor sensor value
    19b4:	2100      	movs	r1, #0
    19b6:	2017      	movs	r0, #23
    19b8:	f014 fb5c 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_SENSOR_7, INPUT ); // Line sensor sensor value
    19bc:	2100      	movs	r1, #0
    19be:	2018      	movs	r0, #24
    19c0:	f014 fb58 	bl	16074 <pinMode>
  motorCurrentRawAD[0] = adc.analogRead ( PIN_LEFT_MOTOR_CURRENT );
    19c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19c8:	210e      	movs	r1, #14
    19ca:	4628      	mov	r0, r5
    19cc:	f00c f934 	bl	dc38 <ADC::analogRead(unsigned char, signed char)>
  motorCurrentRawAD[1] = adc.analogRead ( PIN_RIGHT_MOTOR_CURRENT );
    19d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  motorCurrentRawAD[0] = adc.analogRead ( PIN_LEFT_MOTOR_CURRENT );
    19d4:	8420      	strh	r0, [r4, #32]
  motorCurrentRawAD[1] = adc.analogRead ( PIN_RIGHT_MOTOR_CURRENT );
    19d6:	210f      	movs	r1, #15
    19d8:	4628      	mov	r0, r5
    19da:	f00c f92d 	bl	dc38 <ADC::analogRead(unsigned char, signed char)>
    19de:	4603      	mov	r3, r0
  batVoltRawAD = adc.analogRead ( PIN_BATTERY_VOLTAGE );
    19e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19e4:	2129      	movs	r1, #41	; 0x29
  motorCurrentRawAD[1] = adc.analogRead ( PIN_RIGHT_MOTOR_CURRENT );
    19e6:	8463      	strh	r3, [r4, #34]	; 0x22
  batVoltRawAD = adc.analogRead ( PIN_BATTERY_VOLTAGE );
    19e8:	4628      	mov	r0, r5
    19ea:	f00c f925 	bl	dc38 <ADC::analogRead(unsigned char, signed char)>
    19ee:	4603      	mov	r3, r0
  adc.adc0->enableInterrupts(adc0_isr); // ( ADC_0 );
    19f0:	22ff      	movs	r2, #255	; 0xff
    19f2:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
  batVoltRawAD = adc.analogRead ( PIN_BATTERY_VOLTAGE );
    19f6:	83a3      	strh	r3, [r4, #28]
  adc.adc0->enableInterrupts(adc0_isr); // ( ADC_0 );
    19f8:	490c      	ldr	r1, [pc, #48]	; (1a2c <UAd::setup()+0x124>)
    19fa:	f00c fc83 	bl	e304 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
  adc.adc1->enableInterrupts(adc1_isr); // ( ADC_1 );
    19fe:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1a02:	22ff      	movs	r2, #255	; 0xff
    1a04:	490a      	ldr	r1, [pc, #40]	; (1a30 <UAd::setup()+0x128>)
    1a06:	f00c fc7d 	bl	e304 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
  addPublistItem("ad", "Get raw AD values (ir1, ir2, battery, m1 current, m2 current, supply current)");
    1a0a:	4620      	mov	r0, r4
    1a0c:	4a09      	ldr	r2, [pc, #36]	; (1a34 <UAd::setup()+0x12c>)
    1a0e:	490a      	ldr	r1, [pc, #40]	; (1a38 <UAd::setup()+0x130>)
    1a10:	f00a fd2e 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ls", "Get raw line sensor AD values (n1, n2, ls1 (l,h), ls2 ... ls8, ct1, ct2 (us))");
    1a14:	4620      	mov	r0, r4
    1a16:	4909      	ldr	r1, [pc, #36]	; (1a3c <UAd::setup()+0x134>)
    1a18:	4a09      	ldr	r2, [pc, #36]	; (1a40 <UAd::setup()+0x138>)
    1a1a:	f00a fd29 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    1a1e:	4621      	mov	r1, r4
    1a20:	4808      	ldr	r0, [pc, #32]	; (1a44 <UAd::setup()+0x13c>)
}
    1a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    1a26:	f00b ba35 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    1a2a:	bf00      	nop
    1a2c:	00001d51 	.word	0x00001d51
    1a30:	00001d5d 	.word	0x00001d5d
    1a34:	20003d18 	.word	0x20003d18
    1a38:	20008a28 	.word	0x20008a28
    1a3c:	20003db8 	.word	0x20003db8
    1a40:	20003d68 	.word	0x20003d68
    1a44:	2000fac4 	.word	0x2000fac4

00001a48 <UAd::tick()>:
{ // start AD cycle
    1a48:	b530      	push	{r4, r5, lr}
    1a4a:	4604      	mov	r4, r0
  adcSeq = 0;
    1a4c:	2500      	movs	r5, #0
  adc.startSingleRead(adcPin[0]); // + 400;
    1a4e:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    1a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{ // start AD cycle
    1a56:	b091      	sub	sp, #68	; 0x44
  adc.startSingleRead(adcPin[0]); // + 400;
    1a58:	30bc      	adds	r0, #188	; 0xbc
  adcSeq = 0;
    1a5a:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  adcHalf = false;
    1a5e:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
  adc.startSingleRead(adcPin[0]); // + 400;
    1a62:	f00c f937 	bl	dcd4 <ADC::startSingleRead(unsigned char, signed char)>
  adcStartTime = micros();
    1a66:	f014 fa9f 	bl	15fa8 <micros>
  adcStartCnt++;
    1a6a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  if (debug1adcIntCntLast == adcInt0Cnt)
    1a6e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
  adcStartCnt++;
    1a72:	3301      	adds	r3, #1
  adcStartTime = micros();
    1a74:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
  adcStartCnt++;
    1a78:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  if (debug1adcIntCntLast == adcInt0Cnt)
    1a7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    1a7e:	4293      	cmp	r3, r2
    1a80:	d003      	beq.n	1a8a <UAd::tick()+0x42>
    adcIntErrCnt = 0;
    1a82:	6625      	str	r5, [r4, #96]	; 0x60
  debug1adcIntCntLast = adcInt0Cnt;
    1a84:	65e2      	str	r2, [r4, #92]	; 0x5c
}
    1a86:	b011      	add	sp, #68	; 0x44
    1a88:	bd30      	pop	{r4, r5, pc}
    adcIntErrCnt++;
    1a8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    1a8c:	4816      	ldr	r0, [pc, #88]	; (1ae8 <UAd::tick()+0xa0>)
    1a8e:	3301      	adds	r3, #1
    1a90:	4916      	ldr	r1, [pc, #88]	; (1aec <UAd::tick()+0xa4>)
    1a92:	fb00 1103 	mla	r1, r0, r3, r1
    if (adcIntErrCnt % 100 == 0)
    1a96:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    adcIntErrCnt++;
    1a9a:	6623      	str	r3, [r4, #96]	; 0x60
    if (adcIntErrCnt % 100 == 0)
    1a9c:	3801      	subs	r0, #1
    1a9e:	ebb0 0fb1 	cmp.w	r0, r1, ror #2
    1aa2:	d3ef      	bcc.n	1a84 <UAd::tick()+0x3c>
      snprintf(s, MSL, "# ADC seq=%d, resetcnt=%d, reset\n", adcSeq, adcResetCnt);
    1aa4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    1aa6:	a802      	add	r0, sp, #8
    1aa8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1aac:	4a10      	ldr	r2, [pc, #64]	; (1af0 <UAd::tick()+0xa8>)
    1aae:	9100      	str	r1, [sp, #0]
    1ab0:	2136      	movs	r1, #54	; 0x36
    1ab2:	f019 fe7f 	bl	1b7b4 <snprintf>
      usb.send(s);
    1ab6:	a902      	add	r1, sp, #8
    1ab8:	480e      	ldr	r0, [pc, #56]	; (1af4 <UAd::tick()+0xac>)
    1aba:	f00a fda7 	bl	c60c <UUSB::send(char const*)>
      adc.adc0->enableInterrupts(adc0_isr); // ( ADC_0 );
    1abe:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    1ac2:	22ff      	movs	r2, #255	; 0xff
    1ac4:	490c      	ldr	r1, [pc, #48]	; (1af8 <UAd::tick()+0xb0>)
    1ac6:	f00c fc1d 	bl	e304 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
      adc.adc1->enableInterrupts(adc1_isr); // ( ADC_1 );
    1aca:	22ff      	movs	r2, #255	; 0xff
    1acc:	490b      	ldr	r1, [pc, #44]	; (1afc <UAd::tick()+0xb4>)
    1ace:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    1ad2:	f00c fc17 	bl	e304 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>
      adcResetCnt++;
    1ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  debug1adcIntCntLast = adcInt0Cnt;
    1ad8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
      adcResetCnt++;
    1adc:	3301      	adds	r3, #1
  debug1adcIntCntLast = adcInt0Cnt;
    1ade:	65e2      	str	r2, [r4, #92]	; 0x5c
      adcResetCnt++;
    1ae0:	65a3      	str	r3, [r4, #88]	; 0x58
}
    1ae2:	b011      	add	sp, #68	; 0x44
    1ae4:	bd30      	pop	{r4, r5, pc}
    1ae6:	bf00      	nop
    1ae8:	c28f5c29 	.word	0xc28f5c29
    1aec:	051eb850 	.word	0x051eb850
    1af0:	20003cf4 	.word	0x20003cf4
    1af4:	2000fac4 	.word	0x2000fac4
    1af8:	00001d51 	.word	0x00001d51
    1afc:	00001d5d 	.word	0x00001d5d

00001b00 <UAd::tickHalfTime()>:
  if ( adcSeq >= ADC_NUM_ALL )
    1b00:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    1b04:	2b0d      	cmp	r3, #13
{ // NB! called by timer interrupt
    1b06:	b510      	push	{r4, lr}
    1b08:	4604      	mov	r4, r0
  if ( adcSeq >= ADC_NUM_ALL )
    1b0a:	dc05      	bgt.n	1b18 <UAd::tickHalfTime()+0x18>
    adcHalfFailCnt++;
    1b0c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    1b10:	3301      	adds	r3, #1
    1b12:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
}
    1b16:	bd10      	pop	{r4, pc}
    adcHalfStartTime = micros();
    1b18:	f014 fa46 	bl	15fa8 <micros>
    adcSeq = 0;
    1b1c:	2300      	movs	r3, #0
    adc.startSingleRead ( adcPin[0] );
    1b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    adcHalfStartTime = micros();
    1b22:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
    adcSeq = 0;
    1b26:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    adc.startSingleRead ( adcPin[0] );
    1b2a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    1b2e:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    1b32:	f00c f8cf 	bl	dcd4 <ADC::startSingleRead(unsigned char, signed char)>
    adcHalfCnt++;
    1b36:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    adcHalf = true;
    1b3a:	2201      	movs	r2, #1
    adcHalfCnt++;
    1b3c:	4413      	add	r3, r2
    adcHalf = true;
    1b3e:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    adcHalfCnt++;
    1b42:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
}
    1b46:	bd10      	pop	{r4, pc}

00001b48 <UAd::sendStatusLSRaw()>:

void UAd::sendStatusLSRaw()
{
    1b48:	4603      	mov	r3, r0
  const int MRL = 250;
  char reply[MRL];
  //                       #1 #2   LS0    LS1    LS2    LS3    LS4    LS5    LS6    LS7    timing (us)
  snprintf(reply, MRL, "ls %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %lu %lu %d\r\n",
    1b4a:	4a24      	ldr	r2, [pc, #144]	; (1bdc <UAd::sendStatusLSRaw()+0x94>)
    1b4c:	21fa      	movs	r1, #250	; 0xfa
{
    1b4e:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "ls %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %lu %lu %d\r\n",
    1b50:	f8b3 4048 	ldrh.w	r4, [r3, #72]	; 0x48
{
    1b54:	b0d4      	sub	sp, #336	; 0x150
  snprintf(reply, MRL, "ls %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %d %d  %lu %lu %d\r\n",
    1b56:	9413      	str	r4, [sp, #76]	; 0x4c
    1b58:	a815      	add	r0, sp, #84	; 0x54
    1b5a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
    1b5c:	9412      	str	r4, [sp, #72]	; 0x48
    1b5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    1b60:	9411      	str	r4, [sp, #68]	; 0x44
    1b62:	f9b3 4032 	ldrsh.w	r4, [r3, #50]	; 0x32
    1b66:	9410      	str	r4, [sp, #64]	; 0x40
    1b68:	f9b3 4042 	ldrsh.w	r4, [r3, #66]	; 0x42
    1b6c:	940f      	str	r4, [sp, #60]	; 0x3c
    1b6e:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
    1b72:	940e      	str	r4, [sp, #56]	; 0x38
    1b74:	f9b3 4040 	ldrsh.w	r4, [r3, #64]	; 0x40
    1b78:	940d      	str	r4, [sp, #52]	; 0x34
    1b7a:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
    1b7e:	940c      	str	r4, [sp, #48]	; 0x30
    1b80:	f9b3 403e 	ldrsh.w	r4, [r3, #62]	; 0x3e
    1b84:	940b      	str	r4, [sp, #44]	; 0x2c
    1b86:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
    1b8a:	940a      	str	r4, [sp, #40]	; 0x28
    1b8c:	f9b3 403c 	ldrsh.w	r4, [r3, #60]	; 0x3c
    1b90:	9409      	str	r4, [sp, #36]	; 0x24
    1b92:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
    1b96:	9408      	str	r4, [sp, #32]
    1b98:	f9b3 403a 	ldrsh.w	r4, [r3, #58]	; 0x3a
    1b9c:	9407      	str	r4, [sp, #28]
    1b9e:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
    1ba2:	9406      	str	r4, [sp, #24]
    1ba4:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
    1ba8:	9405      	str	r4, [sp, #20]
    1baa:	f9b3 4026 	ldrsh.w	r4, [r3, #38]	; 0x26
    1bae:	9404      	str	r4, [sp, #16]
    1bb0:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
    1bb4:	9403      	str	r4, [sp, #12]
    1bb6:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
    1bba:	9402      	str	r4, [sp, #8]
    1bbc:	f9b3 4034 	ldrsh.w	r4, [r3, #52]	; 0x34
    1bc0:	9401      	str	r4, [sp, #4]
    1bc2:	f8b3 4046 	ldrh.w	r4, [r3, #70]	; 0x46
    1bc6:	9400      	str	r4, [sp, #0]
    1bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    1bcc:	f019 fdf2 	bl	1b7b4 <snprintf>
           adcStartCnt, adcHalfCnt, 
           adcLSH[0], adcLSL[0], adcLSH[1], adcLSL[1], adcLSH[2], adcLSL[2], adcLSH[3], adcLSL[3], 
           adcLSH[4], adcLSL[4], adcLSH[5], adcLSL[5], adcLSH[6], adcLSL[6], adcLSH[7], adcLSL[7], 
           adcConvertTime, adcHalfConvertTime, adcHalfFailCnt);
  usb.send(reply);
    1bd0:	a915      	add	r1, sp, #84	; 0x54
    1bd2:	4803      	ldr	r0, [pc, #12]	; (1be0 <UAd::sendStatusLSRaw()+0x98>)
    1bd4:	f00a fd1a 	bl	c60c <UUSB::send(char const*)>
}
    1bd8:	b054      	add	sp, #336	; 0x150
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	20003ca4 	.word	0x20003ca4
    1be0:	2000fac4 	.word	0x2000fac4

00001be4 <UAd::sendData(int)>:
  if (item == 0)
    1be4:	b111      	cbz	r1, 1bec <UAd::sendData(int)+0x8>
  else if (item == 1)
    1be6:	2901      	cmp	r1, #1
    1be8:	d01a      	beq.n	1c20 <UAd::sendData(int)+0x3c>
    1bea:	4770      	bx	lr
{
    1bec:	b500      	push	{lr}
  snprintf(s, MSL, "ad %d %d %d %d %d %d\n",
    1bee:	8bc1      	ldrh	r1, [r0, #30]
{
    1bf0:	b0a1      	sub	sp, #132	; 0x84
  snprintf(s, MSL, "ad %d %d %d %d %d %d\n",
    1bf2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
    1bf4:	4603      	mov	r3, r0
    1bf6:	8c00      	ldrh	r0, [r0, #32]
    1bf8:	e9cd 2103 	strd	r2, r1, [sp, #12]
    1bfc:	8b9a      	ldrh	r2, [r3, #28]
    1bfe:	8b59      	ldrh	r1, [r3, #26]
    1c00:	8b1b      	ldrh	r3, [r3, #24]
    1c02:	9100      	str	r1, [sp, #0]
    1c04:	2164      	movs	r1, #100	; 0x64
    1c06:	e9cd 2001 	strd	r2, r0, [sp, #4]
    1c0a:	4a06      	ldr	r2, [pc, #24]	; (1c24 <UAd::sendData(int)+0x40>)
    1c0c:	a807      	add	r0, sp, #28
    1c0e:	f019 fdd1 	bl	1b7b4 <snprintf>
  usb.send(s);
    1c12:	a907      	add	r1, sp, #28
    1c14:	4804      	ldr	r0, [pc, #16]	; (1c28 <UAd::sendData(int)+0x44>)
    1c16:	f00a fcf9 	bl	c60c <UUSB::send(char const*)>
}
    1c1a:	b021      	add	sp, #132	; 0x84
    1c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    sendStatusLSRaw();
    1c20:	f7ff bf92 	b.w	1b48 <UAd::sendStatusLSRaw()>
    1c24:	20003dd8 	.word	0x20003dd8
    1c28:	2000fac4 	.word	0x2000fac4

00001c2c <UAd::adInterrupt(int)>:
{
  // eeConfig.pushWord(deviceID);
}

void UAd::adInterrupt(int a)
{
    1c2c:	b538      	push	{r3, r4, r5, lr}
    1c2e:	4604      	mov	r4, r0
  uint16_t v;
  if (a == 0)
  {
    v = adc.readSingle ( ADC_0 );
    1c30:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
  if (a == 0)
    1c34:	bb19      	cbnz	r1, 1c7e <UAd::adInterrupt(int)+0x52>
    v = adc.readSingle ( ADC_0 );
    1c36:	4628      	mov	r0, r5
    1c38:	f00c f896 	bl	dd68 <ADC::readSingle(signed char)>
    adcInt0Cnt++;
    1c3c:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    v = adc.readSingle ( ADC_0 );
    1c40:	b280      	uxth	r0, r0
    adcInt0Cnt++;
    1c42:	3301      	adds	r3, #1
    1c44:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    nv[adcSeq] = v;
  }
  // debug end
  //uint8_t pin = ADC::sc1a2channelADC0[ADC0_SC1A&ADC_SC1A_CHANNELS];   // <- For ADC Debug
  //Serial.printf("ADC0 %d pin %d\n\r", v, pin);                        // <- For ADC Debug
  if ( adcSeq < ADC_NUM_IR_SENSORS )
    1c48:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1c4c:	2b01      	cmp	r3, #1
    1c4e:	dd24      	ble.n	1c9a <UAd::adInterrupt(int)+0x6e>
  {
    *adcDest[adcSeq] = v;
  }
  else if ( adcSeq < ADC_NUM_NO_LS )
    1c50:	2b05      	cmp	r3, #5
    1c52:	dc27      	bgt.n	1ca4 <UAd::adInterrupt(int)+0x78>
  { // low-pass filter battery and current sensor values at about 2ms time constant
    // result is in range 0..8196 (for measured between 0v and 1.2V or 3.3V for T4.1)
    *adcDest[adcSeq] = ( ( *adcDest[adcSeq] ) >> 1 ) + v;
    1c54:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    1c58:	6e51      	ldr	r1, [r2, #100]	; 0x64
    1c5a:	880a      	ldrh	r2, [r1, #0]
    1c5c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    1c60:	800a      	strh	r2, [r1, #0]
  }
  else
  {
    adcLSL[adcSeq - ADC_NUM_NO_LS] = v;
  }
  adcSeq++;
    1c62:	3301      	adds	r3, #1
    1c64:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
  {
    adc.startSingleRead ( adcPin[adcSeq] );
    1c68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1c6c:	4628      	mov	r0, r5
    1c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1c72:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
               adcHalfConvertTime,
               micros(), adcHalfFailCnt);
      usb.send(s);
    }
  }
}
    1c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    adc.startSingleRead ( adcPin[adcSeq] );
    1c7a:	f00c b82b 	b.w	dcd4 <ADC::startSingleRead(unsigned char, signed char)>
    v = adc.readSingle ( ADC_1 );
    1c7e:	2101      	movs	r1, #1
    1c80:	4628      	mov	r0, r5
    1c82:	f00c f871 	bl	dd68 <ADC::readSingle(signed char)>
    adcInt1Cnt++;
    1c86:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    v = adc.readSingle ( ADC_1 );
    1c8a:	b280      	uxth	r0, r0
    adcInt1Cnt++;
    1c8c:	3301      	adds	r3, #1
    1c8e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
  if ( adcSeq < ADC_NUM_IR_SENSORS )
    1c92:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1c96:	2b01      	cmp	r3, #1
    1c98:	dcda      	bgt.n	1c50 <UAd::adInterrupt(int)+0x24>
    *adcDest[adcSeq] = v;
    1c9a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    1c9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    1ca0:	8010      	strh	r0, [r2, #0]
    1ca2:	e7de      	b.n	1c62 <UAd::adInterrupt(int)+0x36>
  else if ( adcHalf )
    1ca4:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
    1ca8:	b302      	cbz	r2, 1cec <UAd::adInterrupt(int)+0xc0>
    adcLSH[adcSeq - ADC_NUM_NO_LS] = v;
    1caa:	eb04 0243 	add.w	r2, r4, r3, lsl #1
  adcSeq++;
    1cae:	3301      	adds	r3, #1
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cb0:	2b0d      	cmp	r3, #13
    adcLSH[adcSeq - ADC_NUM_NO_LS] = v;
    1cb2:	8510      	strh	r0, [r2, #40]	; 0x28
  adcSeq++;
    1cb4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cb8:	ddd6      	ble.n	1c68 <UAd::adInterrupt(int)+0x3c>
      adcHalfConvertTime = micros() - adcHalfStartTime;
    1cba:	f014 f975 	bl	15fa8 <micros>
      digitalWriteFast ( ls.highPowerPin, ls.lineSensorOn );
    1cbe:	4b21      	ldr	r3, [pc, #132]	; (1d44 <UAd::adInterrupt(int)+0x118>)
      adcHalfConvertTime = micros() - adcHalfStartTime;
    1cc0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1cc4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    1cc8:	1a40      	subs	r0, r0, r1
      digitalWriteFast ( ls.highPowerPin, ls.lineSensorOn );
    1cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
      adcHalfConvertTime = micros() - adcHalfStartTime;
    1cce:	6520      	str	r0, [r4, #80]	; 0x50
    1cd0:	b352      	cbz	r2, 1d28 <UAd::adInterrupt(int)+0xfc>
    1cd2:	4a1d      	ldr	r2, [pc, #116]	; (1d48 <UAd::adInterrupt(int)+0x11c>)
    1cd4:	011c      	lsls	r4, r3, #4
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
    1cd6:	491d      	ldr	r1, [pc, #116]	; (1d4c <UAd::adInterrupt(int)+0x120>)
    1cd8:	2080      	movs	r0, #128	; 0x80
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    1cda:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1cde:	5912      	ldr	r2, [r2, r4]
    1ce0:	68db      	ldr	r3, [r3, #12]
    1ce2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
    1ce6:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
}
    1cea:	bd38      	pop	{r3, r4, r5, pc}
    adcLSL[adcSeq - ADC_NUM_NO_LS] = v;
    1cec:	eb04 0243 	add.w	r2, r4, r3, lsl #1
  adcSeq++;
    1cf0:	3301      	adds	r3, #1
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cf2:	2b0d      	cmp	r3, #13
    adcLSL[adcSeq - ADC_NUM_NO_LS] = v;
    1cf4:	8310      	strh	r0, [r2, #24]
  adcSeq++;
    1cf6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  if ( adcSeq < ADC_NUM_ALL ) // start new and re-enable interrupt
    1cfa:	ddb5      	ble.n	1c68 <UAd::adInterrupt(int)+0x3c>
      adcConvertTime = micros() - adcStartTime;
    1cfc:	f014 f954 	bl	15fa8 <micros>
    1d00:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
      digitalWriteFast ( ls.highPowerPin, LOW );
    1d04:	4b0f      	ldr	r3, [pc, #60]	; (1d44 <UAd::adInterrupt(int)+0x118>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d06:	4a10      	ldr	r2, [pc, #64]	; (1d48 <UAd::adInterrupt(int)+0x11c>)
      adcConvertTime = micros() - adcStartTime;
    1d08:	1a40      	subs	r0, r0, r1
    1d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    1d0e:	64e0      	str	r0, [r4, #76]	; 0x4c
    1d10:	0118      	lsls	r0, r3, #4
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d12:	490e      	ldr	r1, [pc, #56]	; (1d4c <UAd::adInterrupt(int)+0x120>)
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d14:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1d18:	5810      	ldr	r0, [r2, r0]
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d1a:	2280      	movs	r2, #128	; 0x80
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d1c:	68db      	ldr	r3, [r3, #12]
    1d1e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
}
    1d26:	bd38      	pop	{r3, r4, r5, pc}
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d28:	4a07      	ldr	r2, [pc, #28]	; (1d48 <UAd::adInterrupt(int)+0x11c>)
    1d2a:	011c      	lsls	r4, r3, #4
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d2c:	4907      	ldr	r1, [pc, #28]	; (1d4c <UAd::adInterrupt(int)+0x120>)
    1d2e:	2080      	movs	r0, #128	; 0x80
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    1d30:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1d34:	5912      	ldr	r2, [r2, r4]
    1d36:	68db      	ldr	r3, [r3, #12]
    1d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    1d3c:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
    1d40:	bd38      	pop	{r3, r4, r5, pc}
    1d42:	bf00      	nop
    1d44:	2000f390 	.word	0x2000f390
    1d48:	200081bc 	.word	0x200081bc
    1d4c:	4200c000 	.word	0x4200c000

00001d50 <adc0_isr()>:

// If you enable interrupts make sure to call readSingle() to clear the interrupt.
void adc0_isr()
{
  ad.adInterrupt(0);
    1d50:	2100      	movs	r1, #0
    1d52:	4801      	ldr	r0, [pc, #4]	; (1d58 <adc0_isr()+0x8>)
    1d54:	f7ff bf6a 	b.w	1c2c <UAd::adInterrupt(int)>
    1d58:	2000e89c 	.word	0x2000e89c

00001d5c <adc1_isr()>:

//////////////////////////////////////////////////////////

void adc1_isr()
{
  ad.adInterrupt(1);
    1d5c:	2101      	movs	r1, #1
    1d5e:	4801      	ldr	r0, [pc, #4]	; (1d64 <adc1_isr()+0x8>)
    1d60:	f7ff bf64 	b.w	1c2c <UAd::adInterrupt(int)>
    1d64:	2000e89c 	.word	0x2000e89c

00001d68 <_GLOBAL__sub_I_ad>:
}
    1d68:	b538      	push	{r3, r4, r5, lr}
    1d6a:	4c1f      	ldr	r4, [pc, #124]	; (1de8 <_GLOBAL__sub_I_ad+0x80>)
    1d6c:	4d1f      	ldr	r5, [pc, #124]	; (1dec <_GLOBAL__sub_I_ad+0x84>)
    1d6e:	4620      	mov	r0, r4
    1d70:	f00a fa5a 	bl	c228 <USubss::USubss()>
    1d74:	4a1e      	ldr	r2, [pc, #120]	; (1df0 <_GLOBAL__sub_I_ad+0x88>)
    1d76:	2300      	movs	r3, #0
    1d78:	f104 0c7c 	add.w	ip, r4, #124	; 0x7c
    1d7c:	6022      	str	r2, [r4, #0]
    1d7e:	220c      	movs	r2, #12
    1d80:	6463      	str	r3, [r4, #68]	; 0x44
    1d82:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    1d86:	6563      	str	r3, [r4, #84]	; 0x54
    1d88:	65e3      	str	r3, [r4, #92]	; 0x5c
    1d8a:	6162      	str	r2, [r4, #20]
    1d8c:	2201      	movs	r2, #1
    1d8e:	6623      	str	r3, [r4, #96]	; 0x60
    1d90:	f104 0318 	add.w	r3, r4, #24
    1d94:	65a2      	str	r2, [r4, #88]	; 0x58
    1d96:	f104 021a 	add.w	r2, r4, #26
    1d9a:	6663      	str	r3, [r4, #100]	; 0x64
    1d9c:	f104 031c 	add.w	r3, r4, #28
    1da0:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
    1da4:	f104 0220 	add.w	r2, r4, #32
    1da8:	f104 0322 	add.w	r3, r4, #34	; 0x22
    1dac:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
    1db0:	f104 031e 	add.w	r3, r4, #30
    1db4:	67a3      	str	r3, [r4, #120]	; 0x78
    1db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1db8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1dbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1dc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1dc8:	e895 0003 	ldmia.w	r5, {r0, r1}
    1dcc:	e88c 0003 	stmia.w	ip, {r0, r1}
    1dd0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    1dd4:	f00b ff10 	bl	dbf8 <ADC::ADC()>
UAd ad;
    1dd8:	4620      	mov	r0, r4
    1dda:	4a06      	ldr	r2, [pc, #24]	; (1df4 <_GLOBAL__sub_I_ad+0x8c>)
    1ddc:	4906      	ldr	r1, [pc, #24]	; (1df8 <_GLOBAL__sub_I_ad+0x90>)
}
    1dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
UAd ad;
    1de2:	f017 b919 	b.w	19018 <__aeabi_atexit>
    1de6:	bf00      	nop
    1de8:	2000e89c 	.word	0x2000e89c
    1dec:	20001df0 	.word	0x20001df0
    1df0:	20007fe4 	.word	0x20007fe4
    1df4:	20008f80 	.word	0x20008f80
    1df8:	000018ed 	.word	0x000018ed

00001dfc <UAsEnc::sendHelp()>:
{
    1dfc:	b530      	push	{r4, r5, lr}
  usb.send("# AS5x47 encoder -------\r\n");
    1dfe:	4c0f      	ldr	r4, [pc, #60]	; (1e3c <UAsEnc::sendHelp()+0x40>)
{
    1e00:	b0cf      	sub	sp, #316	; 0x13c
    1e02:	4605      	mov	r5, r0
  usb.send("# AS5x47 encoder -------\r\n");
    1e04:	490e      	ldr	r1, [pc, #56]	; (1e40 <UAsEnc::sendHelp()+0x44>)
    1e06:	4620      	mov	r0, r4
    1e08:	f00a fc00 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tasi N \tInitialize SPI channel N [0..2]\r\n");
    1e0c:	490d      	ldr	r1, [pc, #52]	; (1e44 <UAsEnc::sendHelp()+0x48>)
    1e0e:	4620      	mov	r0, r4
    1e10:	f00a fbfc 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tencof o1 o2 o3 \tSet encoder offset\r\n (is=%d, %d, %d)\r\n",
    1e14:	2100      	movs	r1, #0
    1e16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e18:	a803      	add	r0, sp, #12
    1e1a:	4a0b      	ldr	r2, [pc, #44]	; (1e48 <UAsEnc::sendHelp()+0x4c>)
    1e1c:	e9cd 1100 	strd	r1, r1, [sp]
    1e20:	f44f 7196 	mov.w	r1, #300	; 0x12c
    1e24:	f019 fcc6 	bl	1b7b4 <snprintf>
  usb.send(reply);
    1e28:	a903      	add	r1, sp, #12
    1e2a:	4620      	mov	r0, r4
    1e2c:	f00a fbee 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tas16 e i R \tGet register R value from interface i, disable if e=0 (use as16i to see)\r\n");
    1e30:	4906      	ldr	r1, [pc, #24]	; (1e4c <UAsEnc::sendHelp()+0x50>)
    1e32:	4620      	mov	r0, r4
    1e34:	f00a fbea 	bl	c60c <UUSB::send(char const*)>
}
    1e38:	b04f      	add	sp, #316	; 0x13c
    1e3a:	bd30      	pop	{r4, r5, pc}
    1e3c:	2000fac4 	.word	0x2000fac4
    1e40:	200052f4 	.word	0x200052f4
    1e44:	20005310 	.word	0x20005310
    1e48:	20005340 	.word	0x20005340
    1e4c:	20005380 	.word	0x20005380

00001e50 <UAsEnc::~UAsEnc()>:
#include "AS5X47.h"
#include "main.h"

class ULog;

class UAsEnc : public USubss
    1e50:	b510      	push	{r4, lr}
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <UAsEnc::~UAsEnc()+0x18>)
    1e54:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    1e56:	6840      	ldr	r0, [r0, #4]
    1e58:	6023      	str	r3, [r4, #0]
	if (__p)
    1e5a:	b118      	cbz	r0, 1e64 <UAsEnc::~UAsEnc()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1e5c:	68e1      	ldr	r1, [r4, #12]
    1e5e:	1a09      	subs	r1, r1, r0
    1e60:	f014 fcbc 	bl	167dc <operator delete(void*, unsigned int)>
    1e64:	4620      	mov	r0, r4
    1e66:	bd10      	pop	{r4, pc}
    1e68:	200080a0 	.word	0x200080a0

00001e6c <UAsEnc::decode(char const*)>:
{
    1e6c:	b530      	push	{r4, r5, lr}
    1e6e:	460c      	mov	r4, r1
    1e70:	b09d      	sub	sp, #116	; 0x74
    1e72:	4605      	mov	r5, r0
  if (strncmp(cmd, "aseof ", 6) == 0)
    1e74:	2206      	movs	r2, #6
    1e76:	4932      	ldr	r1, [pc, #200]	; (1f40 <UAsEnc::decode(char const*)+0xd4>)
    1e78:	4620      	mov	r0, r4
    1e7a:	f019 ff53 	bl	1bd24 <strncmp>
    1e7e:	b1e0      	cbz	r0, 1eba <UAsEnc::decode(char const*)+0x4e>
  else if (strncmp(cmd, "asi ", 4) == 0)
    1e80:	2204      	movs	r2, #4
    1e82:	4930      	ldr	r1, [pc, #192]	; (1f44 <UAsEnc::decode(char const*)+0xd8>)
    1e84:	4620      	mov	r0, r4
    1e86:	f019 ff4d 	bl	1bd24 <strncmp>
    1e8a:	b140      	cbz	r0, 1e9e <UAsEnc::decode(char const*)+0x32>
  else if (strncmp(cmd, "as16 ", 5) == 0)
    1e8c:	2205      	movs	r2, #5
    1e8e:	492e      	ldr	r1, [pc, #184]	; (1f48 <UAsEnc::decode(char const*)+0xdc>)
    1e90:	4620      	mov	r0, r4
    1e92:	f019 ff47 	bl	1bd24 <strncmp>
    1e96:	b300      	cbz	r0, 1eda <UAsEnc::decode(char const*)+0x6e>
    found = false;
    1e98:	2000      	movs	r0, #0
}
    1e9a:	b01d      	add	sp, #116	; 0x74
    1e9c:	bd30      	pop	{r4, r5, pc}
    const char * p1 = &cmd[4];
    1e9e:	1d20      	adds	r0, r4, #4
    unsigned int i = strtol(p1, (char**)&p1, 10);
    1ea0:	220a      	movs	r2, #10
    1ea2:	a903      	add	r1, sp, #12
    const char * p1 = &cmd[4];
    1ea4:	9003      	str	r0, [sp, #12]
    unsigned int i = strtol(p1, (char**)&p1, 10);
    1ea6:	f019 fa95 	bl	1b3d4 <strtol>
    if (i < AS_CNT)
    1eaa:	b190      	cbz	r0, 1ed2 <UAsEnc::decode(char const*)+0x66>
      usb.send("# not a valid device\n");
    1eac:	4927      	ldr	r1, [pc, #156]	; (1f4c <UAsEnc::decode(char const*)+0xe0>)
    1eae:	4828      	ldr	r0, [pc, #160]	; (1f50 <UAsEnc::decode(char const*)+0xe4>)
    1eb0:	f00a fbac 	bl	c60c <UUSB::send(char const*)>
  bool found = true;
    1eb4:	2001      	movs	r0, #1
}
    1eb6:	b01d      	add	sp, #116	; 0x74
    1eb8:	bd30      	pop	{r4, r5, pc}
    const char * p1 = &cmd[6];
    1eba:	1da0      	adds	r0, r4, #6
      encOffset[i] = strtof(p1, (char**)&p1);
    1ebc:	a903      	add	r1, sp, #12
    const char * p1 = &cmd[6];
    1ebe:	9003      	str	r0, [sp, #12]
      encOffset[i] = strtof(p1, (char**)&p1);
    1ec0:	f019 f984 	bl	1b1cc <strtof>
    1ec4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  bool found = true;
    1ec8:	2001      	movs	r0, #1
      encOffset[i] = strtof(p1, (char**)&p1);
    1eca:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
    1ece:	b01d      	add	sp, #116	; 0x74
    1ed0:	bd30      	pop	{r4, r5, pc}
      encs[i]->printDebugString();
    1ed2:	6a28      	ldr	r0, [r5, #32]
    1ed4:	f7fe fc8e 	bl	7f4 <AS5X47::printDebugString()>
    1ed8:	e7ec      	b.n	1eb4 <UAsEnc::decode(char const*)+0x48>
    const char * p1 = &cmd[5];
    1eda:	1d60      	adds	r0, r4, #5
    reg16Enabled = strtol(p1, (char**)&p1, 10);
    1edc:	a902      	add	r1, sp, #8
    1ede:	220a      	movs	r2, #10
    const char * p1 = &cmd[5];
    1ee0:	9002      	str	r0, [sp, #8]
    reg16Enabled = strtol(p1, (char**)&p1, 10);
    1ee2:	f019 fa77 	bl	1b3d4 <strtol>
    1ee6:	3800      	subs	r0, #0
    reg16Interface = strtol(p1, (char**)&p1, 10);
    1ee8:	a902      	add	r1, sp, #8
    1eea:	f04f 020a 	mov.w	r2, #10
    reg16Enabled = strtol(p1, (char**)&p1, 10);
    1eee:	bf18      	it	ne
    1ef0:	2001      	movne	r0, #1
    1ef2:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    reg16Interface = strtol(p1, (char**)&p1, 10);
    1ef6:	9802      	ldr	r0, [sp, #8]
    1ef8:	f019 fa6c 	bl	1b3d4 <strtol>
    1efc:	4603      	mov	r3, r0
    reg16 = strtol(p1, (char**)&p1, 16);
    1efe:	a902      	add	r1, sp, #8
    1f00:	2210      	movs	r2, #16
    reg16Interface = strtol(p1, (char**)&p1, 10);
    1f02:	636b      	str	r3, [r5, #52]	; 0x34
    reg16 = strtol(p1, (char**)&p1, 16);
    1f04:	9802      	ldr	r0, [sp, #8]
    1f06:	f019 fa65 	bl	1b3d4 <strtol>
    snprintf(s, MSL, "# reg16 interface %d reg %x\r\n", reg16Interface, reg16);
    1f0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    1f0c:	b281      	uxth	r1, r0
    1f0e:	4a11      	ldr	r2, [pc, #68]	; (1f54 <UAsEnc::decode(char const*)+0xe8>)
    1f10:	9100      	str	r1, [sp, #0]
    1f12:	2164      	movs	r1, #100	; 0x64
    reg16 = strtol(p1, (char**)&p1, 16);
    1f14:	85a8      	strh	r0, [r5, #44]	; 0x2c
    snprintf(s, MSL, "# reg16 interface %d reg %x\r\n", reg16Interface, reg16);
    1f16:	a803      	add	r0, sp, #12
    1f18:	f019 fc4c 	bl	1b7b4 <snprintf>
    usb.send(s);
    1f1c:	a903      	add	r1, sp, #12
    1f1e:	480c      	ldr	r0, [pc, #48]	; (1f50 <UAsEnc::decode(char const*)+0xe4>)
    1f20:	f00a fb74 	bl	c60c <UUSB::send(char const*)>
    snprintf(s, MSL, "# pack test 0x4007 should be = %x\r\n", aa.raw);
    1f24:	f244 0307 	movw	r3, #16391	; 0x4007
    1f28:	4a0b      	ldr	r2, [pc, #44]	; (1f58 <UAsEnc::decode(char const*)+0xec>)
    1f2a:	2164      	movs	r1, #100	; 0x64
    1f2c:	a803      	add	r0, sp, #12
    1f2e:	f019 fc41 	bl	1b7b4 <snprintf>
    usb.send(s);
    1f32:	a903      	add	r1, sp, #12
    1f34:	4806      	ldr	r0, [pc, #24]	; (1f50 <UAsEnc::decode(char const*)+0xe4>)
    1f36:	f00a fb69 	bl	c60c <UUSB::send(char const*)>
  bool found = true;
    1f3a:	2001      	movs	r0, #1
}
    1f3c:	b01d      	add	sp, #116	; 0x74
    1f3e:	bd30      	pop	{r4, r5, pc}
    1f40:	200051c4 	.word	0x200051c4
    1f44:	200051cc 	.word	0x200051cc
    1f48:	200051ec 	.word	0x200051ec
    1f4c:	200051d4 	.word	0x200051d4
    1f50:	2000fac4 	.word	0x2000fac4
    1f54:	200051f4 	.word	0x200051f4
    1f58:	20005214 	.word	0x20005214

00001f5c <UAsEnc::sendData(int)>:
{
    1f5c:	b510      	push	{r4, lr}
    1f5e:	4604      	mov	r4, r0
    1f60:	b0c6      	sub	sp, #280	; 0x118
    1f62:	2905      	cmp	r1, #5
    1f64:	d81c      	bhi.n	1fa0 <UAsEnc::sendData(int)+0x44>
    1f66:	e8df f001 	tbb	[pc, r1]
    1f6a:	4939      	.short	0x4939
    1f6c:	1d5b4e03 	.word	0x1d5b4e03
  snprintf(reply, MRL, "asenp %.2f %.2f %.2f\r\n",
    1f70:	ed90 7a05 	vldr	s14, [r0, #20]
    1f74:	2200      	movs	r2, #0
    1f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f7a:	2000      	movs	r0, #0
    1f7c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1f80:	492f      	ldr	r1, [pc, #188]	; (2040 <UAsEnc::sendData(int)+0xe4>)
    1f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f86:	4a2f      	ldr	r2, [pc, #188]	; (2044 <UAsEnc::sendData(int)+0xe8>)
  snprintf(reply, MRL, "asenv %.1f %.1f %.1f\r\n",
    1f88:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1f8c:	ed8d 7b00 	vstr	d7, [sp]
    1f90:	21fa      	movs	r1, #250	; 0xfa
    1f92:	a807      	add	r0, sp, #28
    1f94:	f019 fc0e 	bl	1b7b4 <snprintf>
  usb.send(reply);
    1f98:	a907      	add	r1, sp, #28
    1f9a:	482b      	ldr	r0, [pc, #172]	; (2048 <UAsEnc::sendData(int)+0xec>)
    1f9c:	f00a fb36 	bl	c60c <UUSB::send(char const*)>
}
    1fa0:	b046      	add	sp, #280	; 0x118
    1fa2:	bd10      	pop	{r4, pc}
           reg16Interface, reg16, reg16Raw.values.pard, reg16Raw.values.ef, reg16Raw.values.data);
    1fa4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    1fa8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
  snprintf(reply, MRL, "# AS5147U: interface %d, reg  %x = warn=%d, err=%d, data= 0x%04x\r\n",
    1faa:	f3c3 1280 	ubfx	r2, r3, #6, #1
    1fae:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    1fb0:	f3c1 010d 	ubfx	r1, r1, #0, #14
    1fb4:	9202      	str	r2, [sp, #8]
    1fb6:	09da      	lsrs	r2, r3, #7
    1fb8:	9000      	str	r0, [sp, #0]
    1fba:	a807      	add	r0, sp, #28
    1fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1fbe:	9103      	str	r1, [sp, #12]
    1fc0:	21fa      	movs	r1, #250	; 0xfa
    1fc2:	9201      	str	r2, [sp, #4]
    1fc4:	4a21      	ldr	r2, [pc, #132]	; (204c <UAsEnc::sendData(int)+0xf0>)
    1fc6:	f019 fbf5 	bl	1b7b4 <snprintf>
  usb.send(reply);
    1fca:	a907      	add	r1, sp, #28
    1fcc:	481e      	ldr	r0, [pc, #120]	; (2048 <UAsEnc::sendData(int)+0xec>)
    1fce:	f00a fb1d 	bl	c60c <UUSB::send(char const*)>
  reg16IsSend = true;
    1fd2:	2301      	movs	r3, #1
    1fd4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
    1fd8:	b046      	add	sp, #280	; 0x118
    1fda:	bd10      	pop	{r4, pc}
  snprintf(reply, MRL, "asens %d %d %d\r\n",
    1fdc:	2002      	movs	r0, #2
    1fde:	2101      	movs	r1, #1
    1fe0:	7f23      	ldrb	r3, [r4, #28]
    1fe2:	4a1b      	ldr	r2, [pc, #108]	; (2050 <UAsEnc::sendData(int)+0xf4>)
  snprintf(reply, MRL, "aseno %d %d %d\r\n",
    1fe4:	e9cd 1000 	strd	r1, r0, [sp]
    1fe8:	a807      	add	r0, sp, #28
    1fea:	21fa      	movs	r1, #250	; 0xfa
    1fec:	f019 fbe2 	bl	1b7b4 <snprintf>
  usb.send(reply);
    1ff0:	a907      	add	r1, sp, #28
    1ff2:	4815      	ldr	r0, [pc, #84]	; (2048 <UAsEnc::sendData(int)+0xec>)
    1ff4:	f00a fb0a 	bl	c60c <UUSB::send(char const*)>
}
    1ff8:	b046      	add	sp, #280	; 0x118
    1ffa:	bd10      	pop	{r4, pc}
  snprintf(reply, MRL, "aseno %d %d %d\r\n",
    1ffc:	2002      	movs	r0, #2
    1ffe:	2101      	movs	r1, #1
    2000:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2002:	4a14      	ldr	r2, [pc, #80]	; (2054 <UAsEnc::sendData(int)+0xf8>)
    2004:	e7ee      	b.n	1fe4 <UAsEnc::sendData(int)+0x88>
  snprintf(reply, MRL, "asenv %.1f %.1f %.1f\r\n",
    2006:	ed90 7a06 	vldr	s14, [r0, #24]
    200a:	2200      	movs	r2, #0
    200c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2010:	2000      	movs	r0, #0
    2012:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2016:	490a      	ldr	r1, [pc, #40]	; (2040 <UAsEnc::sendData(int)+0xe4>)
    2018:	e9cd 2304 	strd	r2, r3, [sp, #16]
    201c:	4a0e      	ldr	r2, [pc, #56]	; (2058 <UAsEnc::sendData(int)+0xfc>)
    201e:	e7b3      	b.n	1f88 <UAsEnc::sendData(int)+0x2c>
  snprintf(reply, MRL, "asene 0x%04x 0x%04x 0x%04x\r\n",
    2020:	2100      	movs	r1, #0
    2022:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    2024:	4a0d      	ldr	r2, [pc, #52]	; (205c <UAsEnc::sendData(int)+0x100>)
    2026:	a807      	add	r0, sp, #28
    2028:	e9cd 1100 	strd	r1, r1, [sp]
    202c:	21fa      	movs	r1, #250	; 0xfa
    202e:	f019 fbc1 	bl	1b7b4 <snprintf>
  usb.send(reply);
    2032:	a907      	add	r1, sp, #28
    2034:	4804      	ldr	r0, [pc, #16]	; (2048 <UAsEnc::sendData(int)+0xec>)
    2036:	f00a fae9 	bl	c60c <UUSB::send(char const*)>
}
    203a:	b046      	add	sp, #280	; 0x118
    203c:	bd10      	pop	{r4, pc}
    203e:	bf00      	nop
    2040:	3ff00000 	.word	0x3ff00000
    2044:	20005260 	.word	0x20005260
    2048:	2000fac4 	.word	0x2000fac4
    204c:	200052b0 	.word	0x200052b0
    2050:	20005238 	.word	0x20005238
    2054:	2000524c 	.word	0x2000524c
    2058:	20005278 	.word	0x20005278
    205c:	20005290 	.word	0x20005290

00002060 <UAsEnc::initEnc()>:
{
    2060:	b538      	push	{r3, r4, r5, lr}
  if (encs[0] == nullptr)
    2062:	6a05      	ldr	r5, [r0, #32]
{
    2064:	4604      	mov	r4, r0
  if (encs[0] == nullptr)
    2066:	b165      	cbz	r5, 2082 <UAsEnc::initEnc()+0x22>
    readDataFrame = encs[i]->readRegister(DIAG_REG);
    2068:	f643 71f5 	movw	r1, #16373	; 0x3ff5
    206c:	4628      	mov	r0, r5
    206e:	f7fe fb73 	bl	758 <AS5X47::readRegister(unsigned short)>
    encErr[i].raw = 0;
    2072:	2300      	movs	r3, #0
    readDataFrame = encs[i]->readRegister(DIAG_REG);
    2074:	b280      	uxth	r0, r0
    encErr[i].raw = 0;
    2076:	8763      	strh	r3, [r4, #58]	; 0x3a
    asencValid[i] = readDataFrame.raw > 0;
    2078:	1ac3      	subs	r3, r0, r3
    207a:	bf18      	it	ne
    207c:	2301      	movne	r3, #1
    207e:	7723      	strb	r3, [r4, #28]
}
    2080:	bd38      	pop	{r3, r4, r5, pc}
    encs[0] = new AS5X47{CS0};
    2082:	2001      	movs	r0, #1
    2084:	f014 fba8 	bl	167d8 <operator new(unsigned int)>
    2088:	4605      	mov	r5, r0
    208a:	2107      	movs	r1, #7
    208c:	f7fe fb5e 	bl	74c <AS5X47::AS5X47(unsigned char)>
    2090:	6225      	str	r5, [r4, #32]
    2092:	e7e9      	b.n	2068 <UAsEnc::initEnc()+0x8>

00002094 <UAsEnc::setup()>:
{
    2094:	b510      	push	{r4, lr}
    2096:	4604      	mov	r4, r0
  initEnc();
    2098:	f7ff ffe2 	bl	2060 <UAsEnc::initEnc()>
  addPublistItem("asens",  "Get encoder status 'asenc s1 s2 s3' 1=available");
    209c:	4a11      	ldr	r2, [pc, #68]	; (20e4 <UAsEnc::setup()+0x50>)
    209e:	4620      	mov	r0, r4
    20a0:	4911      	ldr	r1, [pc, #68]	; (20e8 <UAsEnc::setup()+0x54>)
    20a2:	f00a f9e5 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("aseno",  "Get encoder offset 'aseno o1 o2 o3' in degrees");
    20a6:	4620      	mov	r0, r4
    20a8:	4a10      	ldr	r2, [pc, #64]	; (20ec <UAsEnc::setup()+0x58>)
    20aa:	4911      	ldr	r1, [pc, #68]	; (20f0 <UAsEnc::setup()+0x5c>)
    20ac:	f00a f9e0 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("asenp",  "Get encoder values 'asenv p1 p2 p3' (angle in degrees)");
    20b0:	4620      	mov	r0, r4
    20b2:	4a10      	ldr	r2, [pc, #64]	; (20f4 <UAsEnc::setup()+0x60>)
    20b4:	4910      	ldr	r1, [pc, #64]	; (20f8 <UAsEnc::setup()+0x64>)
    20b6:	f00a f9db 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("asenv",  "Get encoder values 'asenv v1 v2 v3' (velocity in degrees/s)");
    20ba:	4620      	mov	r0, r4
    20bc:	4a0f      	ldr	r2, [pc, #60]	; (20fc <UAsEnc::setup()+0x68>)
    20be:	4910      	ldr	r1, [pc, #64]	; (2100 <UAsEnc::setup()+0x6c>)
    20c0:	f00a f9d6 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("asene",  "Get encoder error flags 'asene e1 e2 e3' (Hex, see AS5147E doc)");
    20c4:	4620      	mov	r0, r4
    20c6:	4a0f      	ldr	r2, [pc, #60]	; (2104 <UAsEnc::setup()+0x70>)
    20c8:	490f      	ldr	r1, [pc, #60]	; (2108 <UAsEnc::setup()+0x74>)
    20ca:	f00a f9d1 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("as16",   "Get register values '#reg16 interface, reg, value'");
    20ce:	4620      	mov	r0, r4
    20d0:	490e      	ldr	r1, [pc, #56]	; (210c <UAsEnc::setup()+0x78>)
    20d2:	4a0f      	ldr	r2, [pc, #60]	; (2110 <UAsEnc::setup()+0x7c>)
    20d4:	f00a f9cc 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    20d8:	4621      	mov	r1, r4
    20da:	480e      	ldr	r0, [pc, #56]	; (2114 <UAsEnc::setup()+0x80>)
}
    20dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    20e0:	f00a bed8 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    20e4:	2000504c 	.word	0x2000504c
    20e8:	2000507c 	.word	0x2000507c
    20ec:	20005084 	.word	0x20005084
    20f0:	200050b4 	.word	0x200050b4
    20f4:	200050bc 	.word	0x200050bc
    20f8:	200050f4 	.word	0x200050f4
    20fc:	200050fc 	.word	0x200050fc
    2100:	20005138 	.word	0x20005138
    2104:	20005140 	.word	0x20005140
    2108:	20005180 	.word	0x20005180
    210c:	200051bc 	.word	0x200051bc
    2110:	20005188 	.word	0x20005188
    2114:	2000fac4 	.word	0x2000fac4

00002118 <UAsEnc::tick()>:
{ // read data - first time will fail
    2118:	b538      	push	{r3, r4, r5, lr}
  tickCnt++;
    211a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{ // read data - first time will fail
    211c:	4604      	mov	r4, r0
    if (asencValid[i])
    211e:	7f02      	ldrb	r2, [r0, #28]
  tickCnt++;
    2120:	3301      	adds	r3, #1
    2122:	6243      	str	r3, [r0, #36]	; 0x24
    if (asencValid[i])
    2124:	b16a      	cbz	r2, 2142 <UAsEnc::tick()+0x2a>
      encPos[i] = encs[i]->readAngle();
    2126:	6a00      	ldr	r0, [r0, #32]
    2128:	f7fe fb22 	bl	770 <AS5X47::readAngle()>
      encVel[i] = encs[i]->readVel();
    212c:	6a20      	ldr	r0, [r4, #32]
      encPos[i] = encs[i]->readAngle();
    212e:	ed84 0a05 	vstr	s0, [r4, #20]
      encVel[i] = encs[i]->readVel();
    2132:	f7fe fb35 	bl	7a0 <AS5X47::readVel()>
      encErr[i] = encs[i]->readErr();
    2136:	6a20      	ldr	r0, [r4, #32]
      encVel[i] = encs[i]->readVel();
    2138:	ed84 0a06 	vstr	s0, [r4, #24]
      encErr[i] = encs[i]->readErr();
    213c:	f7fe fb50 	bl	7e0 <AS5X47::readErr()>
    2140:	8760      	strh	r0, [r4, #58]	; 0x3a
  if (reg16Enabled and reg16IsSend and reg16Interface < AS_CNT)
    2142:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2146:	b123      	cbz	r3, 2152 <UAsEnc::tick()+0x3a>
    2148:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    214c:	b10b      	cbz	r3, 2152 <UAsEnc::tick()+0x3a>
    214e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    2150:	b105      	cbz	r5, 2154 <UAsEnc::tick()+0x3c>
}
    2152:	bd38      	pop	{r3, r4, r5, pc}
    reg16Raw = encs[reg16Interface]->readRegister(reg16);
    2154:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    2156:	6a20      	ldr	r0, [r4, #32]
    2158:	f7fe fafe 	bl	758 <AS5X47::readRegister(unsigned short)>
    reg16IsSend = false;
    215c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    reg16Raw = encs[reg16Interface]->readRegister(reg16);
    2160:	85e0      	strh	r0, [r4, #46]	; 0x2e
}
    2162:	bd38      	pop	{r3, r4, r5, pc}

00002164 <UAsEnc::eePromSave()>:
{
    2164:	b510      	push	{r4, lr}
    2166:	4604      	mov	r4, r0
  eeConfig.pushByte(f);
    2168:	2101      	movs	r1, #1
    216a:	4807      	ldr	r0, [pc, #28]	; (2188 <UAsEnc::eePromSave()+0x24>)
    216c:	f000 ffd0 	bl	3110 <EEConfig::pushByte(unsigned char)>
    eeConfig.pushFloat(encOffset[i]);
    2170:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  /** save a 32 bit float to configuration stack */
  inline void pushFloat(float value)
  {
    union {float f; uint32_t u32;} u;
    u.f = value;
    push32(u.u32);
    2172:	4805      	ldr	r0, [pc, #20]	; (2188 <UAsEnc::eePromSave()+0x24>)
    2174:	ee07 1a90 	vmov	s15, r1
    2178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2180:	ee17 1a90 	vmov	r1, s15
    2184:	f000 bfa8 	b.w	30d8 <EEConfig::push32(unsigned long)>
    2188:	2000ebf4 	.word	0x2000ebf4

0000218c <UAsEnc::eePromLoad()>:
{
    218c:	b538      	push	{r3, r4, r5, lr}
  /*uint8_t f =*/ eeConfig.readByte();
    218e:	4d07      	ldr	r5, [pc, #28]	; (21ac <UAsEnc::eePromLoad()+0x20>)
{
    2190:	4604      	mov	r4, r0
  /*uint8_t f =*/ eeConfig.readByte();
    2192:	4628      	mov	r0, r5
    2194:	f001 f808 	bl	31a8 <EEConfig::readByte()>
  }
  // read 32 bit as float from configuration stack
  inline float readFloat()
  {
    union {float f; uint32_t u32;} u;
    u.u32 = read32();
    2198:	4628      	mov	r0, r5
    219a:	f000 fff1 	bl	3180 <EEConfig::read32()>
    encOffset[i] = eeConfig.readFloat();
    219e:	ee07 0a90 	vmov	s15, r0
    21a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    21a6:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
}
    21aa:	bd38      	pop	{r3, r4, r5, pc}
    21ac:	2000ebf4 	.word	0x2000ebf4

000021b0 <_GLOBAL__sub_I_asenc>:
}
    21b0:	b510      	push	{r4, lr}
    21b2:	4c0d      	ldr	r4, [pc, #52]	; (21e8 <_GLOBAL__sub_I_asenc+0x38>)
    21b4:	4620      	mov	r0, r4
    21b6:	f00a f837 	bl	c228 <USubss::USubss()>
    21ba:	2300      	movs	r3, #0
    21bc:	480b      	ldr	r0, [pc, #44]	; (21ec <_GLOBAL__sub_I_asenc+0x3c>)
    21be:	f643 71f5 	movw	r1, #16373	; 0x3ff5
    21c2:	7723      	strb	r3, [r4, #28]
    21c4:	6020      	str	r0, [r4, #0]
UAsEnc asenc;
    21c6:	4620      	mov	r0, r4
    21c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    21cc:	6363      	str	r3, [r4, #52]	; 0x34
    21ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    21d2:	4a07      	ldr	r2, [pc, #28]	; (21f0 <_GLOBAL__sub_I_asenc+0x40>)
    21d4:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
    21d8:	e9c4 3308 	strd	r3, r3, [r4, #32]
    21dc:	4905      	ldr	r1, [pc, #20]	; (21f4 <_GLOBAL__sub_I_asenc+0x44>)
}
    21de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UAsEnc asenc;
    21e2:	f016 bf19 	b.w	19018 <__aeabi_atexit>
    21e6:	bf00      	nop
    21e8:	2000e9dc 	.word	0x2000e9dc
    21ec:	20008034 	.word	0x20008034
    21f0:	20008f80 	.word	0x20008f80
    21f4:	00001e51 	.word	0x00001e51

000021f8 <UCommand::sendHelp()>:

void UCommand::sendHelp()
{
  const int MRL = 320;
  char reply[MRL];
  snprintf(reply, MRL, "# Command information for %s %s ------- \r\n", robot.deviceName, robot.getRobotName());
    21f8:	4b26      	ldr	r3, [pc, #152]	; (2294 <UCommand::sendHelp()+0x9c>)
    21fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
    21fe:	4a26      	ldr	r2, [pc, #152]	; (2298 <UCommand::sendHelp()+0xa0>)
    return robotname[deviceID];
    2200:	f853 0c05 	ldr.w	r0, [r3, #-5]
{
    2204:	b570      	push	{r4, r5, r6, lr}
    2206:	3026      	adds	r0, #38	; 0x26
    2208:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
    220c:	b0d2      	sub	sp, #328	; 0x148
  usb.send(reply);
    220e:	4e23      	ldr	r6, [pc, #140]	; (229c <UCommand::sendHelp()+0xa4>)
  snprintf(reply, MRL, "# Command information for %s %s ------- \r\n", robot.deviceName, robot.getRobotName());
    2210:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  snprintf(reply, MRL, "# -- \thelp \tThis help text.\r\n");
    2214:	4d22      	ldr	r5, [pc, #136]	; (22a0 <UCommand::sendHelp()+0xa8>)
    2216:	ac02      	add	r4, sp, #8
  snprintf(reply, MRL, "# Command information for %s %s ------- \r\n", robot.deviceName, robot.getRobotName());
    2218:	9000      	str	r0, [sp, #0]
    221a:	a802      	add	r0, sp, #8
    221c:	f019 faca 	bl	1b7b4 <snprintf>
  usb.send(reply);
    2220:	a902      	add	r1, sp, #8
    2222:	4630      	mov	r0, r6
    2224:	f00a f9f2 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \thelp \tThis help text.\r\n");
    2228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    222a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    222c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2230:	c407      	stmia	r4!, {r0, r1, r2}
    2232:	8023      	strh	r3, [r4, #0]
  usb.send(reply);
    2234:	a902      	add	r1, sp, #8
  snprintf(reply, MRL, "# -- \tleave \tStop all subscriptions.\r\n");
    2236:	4c1b      	ldr	r4, [pc, #108]	; (22a4 <UCommand::sendHelp()+0xac>)
  usb.send(reply);
    2238:	4630      	mov	r0, r6
    223a:	f00a f9e7 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tleave \tStop all subscriptions.\r\n");
    223e:	f10d 0c08 	add.w	ip, sp, #8
    2242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    224a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    224e:	e894 0003 	ldmia.w	r4, {r0, r1}
  usb.send(reply);
  snprintf(reply, MRL, "# -- \treboot \tReboot the Teensy processor.\r\n");
    2252:	4c15      	ldr	r4, [pc, #84]	; (22a8 <UCommand::sendHelp()+0xb0>)
  snprintf(reply, MRL, "# -- \tleave \tStop all subscriptions.\r\n");
    2254:	0c0b      	lsrs	r3, r1, #16
    2256:	f84c 0b04 	str.w	r0, [ip], #4
  usb.send(reply);
    225a:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \tleave \tStop all subscriptions.\r\n");
    225c:	f82c 1b02 	strh.w	r1, [ip], #2
  usb.send(reply);
    2260:	a902      	add	r1, sp, #8
  snprintf(reply, MRL, "# -- \tleave \tStop all subscriptions.\r\n");
    2262:	f88c 3000 	strb.w	r3, [ip]
  usb.send(reply);
    2266:	f00a f9d1 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \treboot \tReboot the Teensy processor.\r\n");
    226a:	f10d 0c08 	add.w	ip, sp, #8
    226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2270:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    227a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    227e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
  usb.send(reply);
    2282:	a902      	add	r1, sp, #8
    2284:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \treboot \tReboot the Teensy processor.\r\n");
    2286:	f88c 3000 	strb.w	r3, [ip]
  usb.send(reply);
    228a:	f00a f9bf 	bl	c60c <UUSB::send(char const*)>
}
    228e:	b052      	add	sp, #328	; 0x148
    2290:	bd70      	pop	{r4, r5, r6, pc}
    2292:	bf00      	nop
    2294:	2000f691 	.word	0x2000f691
    2298:	200072fc 	.word	0x200072fc
    229c:	2000fac4 	.word	0x2000fac4
    22a0:	20007328 	.word	0x20007328
    22a4:	20007348 	.word	0x20007348
    22a8:	20007370 	.word	0x20007370

000022ac <UCommand::~UCommand()>:
#endif
#include <mutex>
#include "usubss.h"


class UCommand : public USubss
    22ac:	b510      	push	{r4, lr}
    22ae:	4b05      	ldr	r3, [pc, #20]	; (22c4 <UCommand::~UCommand()+0x18>)
    22b0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    22b2:	6840      	ldr	r0, [r0, #4]
    22b4:	6023      	str	r3, [r4, #0]
	if (__p)
    22b6:	b118      	cbz	r0, 22c0 <UCommand::~UCommand()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    22b8:	68e1      	ldr	r1, [r4, #12]
    22ba:	1a09      	subs	r1, r1, r0
    22bc:	f014 fa8e 	bl	167dc <operator delete(void*, unsigned int)>
    22c0:	4620      	mov	r0, r4
    22c2:	bd10      	pop	{r4, pc}
    22c4:	200080a0 	.word	0x200080a0

000022c8 <UCommand::decode(char const*)>:
{
    22c8:	b510      	push	{r4, lr}
    22ca:	460c      	mov	r4, r1
  if (strncmp(buf, "help", 4) == 0)
    22cc:	2204      	movs	r2, #4
    22ce:	4914      	ldr	r1, [pc, #80]	; (2320 <UCommand::decode(char const*)+0x58>)
    22d0:	4620      	mov	r0, r4
    22d2:	f019 fd27 	bl	1bd24 <strncmp>
    22d6:	b1e0      	cbz	r0, 2312 <UCommand::decode(char const*)+0x4a>
  else if (strncmp(buf, "leave", 5) == 0)
    22d8:	2205      	movs	r2, #5
    22da:	4912      	ldr	r1, [pc, #72]	; (2324 <UCommand::decode(char const*)+0x5c>)
    22dc:	4620      	mov	r0, r4
    22de:	f019 fd21 	bl	1bd24 <strncmp>
    22e2:	4603      	mov	r3, r0
    22e4:	b170      	cbz	r0, 2304 <UCommand::decode(char const*)+0x3c>
  else if (strncmp(buf, "reboot", 6) == 0)
    22e6:	2206      	movs	r2, #6
    22e8:	490f      	ldr	r1, [pc, #60]	; (2328 <UCommand::decode(char const*)+0x60>)
    22ea:	4620      	mov	r0, r4
    22ec:	f019 fd1a 	bl	1bd24 <strncmp>
    22f0:	b9a0      	cbnz	r0, 231c <UCommand::decode(char const*)+0x54>
    SRC_GPR5 = 0x0BAD00F1;
    22f2:	490e      	ldr	r1, [pc, #56]	; (232c <UCommand::decode(char const*)+0x64>)
    SCB_AIRCR = 0x05FA0004;
    22f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SRC_GPR5 = 0x0BAD00F1;
    22f8:	480d      	ldr	r0, [pc, #52]	; (2330 <UCommand::decode(char const*)+0x68>)
    SCB_AIRCR = 0x05FA0004;
    22fa:	4a0e      	ldr	r2, [pc, #56]	; (2334 <UCommand::decode(char const*)+0x6c>)
    SRC_GPR5 = 0x0BAD00F1;
    22fc:	6308      	str	r0, [r1, #48]	; 0x30
    SCB_AIRCR = 0x05FA0004;
    22fe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
    while (1) ;
    2302:	e7fe      	b.n	2302 <UCommand::decode(char const*)+0x3a>
    usb.usbIsUp = false;
    2304:	480c      	ldr	r0, [pc, #48]	; (2338 <UCommand::decode(char const*)+0x70>)
    2306:	f880 3120 	strb.w	r3, [r0, #288]	; 0x120
    usb.stopAllSubscriptions();
    230a:	f00a fc7d 	bl	cc08 <UUSB::stopAllSubscriptions()>
  bool used = true;
    230e:	2001      	movs	r0, #1
}
    2310:	bd10      	pop	{r4, pc}
    usb.sendAllHelp();
    2312:	4809      	ldr	r0, [pc, #36]	; (2338 <UCommand::decode(char const*)+0x70>)
    2314:	f00a fc8c 	bl	cc30 <UUSB::sendAllHelp()>
  bool used = true;
    2318:	2001      	movs	r0, #1
}
    231a:	bd10      	pop	{r4, pc}
    231c:	2000      	movs	r0, #0
    231e:	bd10      	pop	{r4, pc}
    2320:	200072e4 	.word	0x200072e4
    2324:	200072ec 	.word	0x200072ec
    2328:	200072f4 	.word	0x200072f4
    232c:	400f8000 	.word	0x400f8000
    2330:	0bad00f1 	.word	0x0bad00f1
    2334:	05fa0004 	.word	0x05fa0004
    2338:	2000fac4 	.word	0x2000fac4

0000233c <UCommand::setup()>:
{
    233c:	b510      	push	{r4, lr}
    233e:	4604      	mov	r4, r0
  addPublistItem("ver", "get version 'version SVN_rev.x date time'");
    2340:	4904      	ldr	r1, [pc, #16]	; (2354 <UCommand::setup()+0x18>)
    2342:	4a05      	ldr	r2, [pc, #20]	; (2358 <UCommand::setup()+0x1c>)
    2344:	f00a f894 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    2348:	4621      	mov	r1, r4
    234a:	4804      	ldr	r0, [pc, #16]	; (235c <UCommand::setup()+0x20>)
}
    234c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    2350:	f00a bda0 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    2354:	200072e0 	.word	0x200072e0
    2358:	200072b4 	.word	0x200072b4
    235c:	2000fac4 	.word	0x2000fac4

00002360 <UCommand::getRevisionNumber()>:
{
    2360:	b508      	push	{r3, lr}
  const char * p1 = getRevisionString();
    2362:	f7fd ff01 	bl	168 <getRevisionString()>
  p1 = strstr(p1, ".ino");
    2366:	4909      	ldr	r1, [pc, #36]	; (238c <UCommand::getRevisionNumber()+0x2c>)
    2368:	f019 ff74 	bl	1c254 <strstr>
  if (p1 == nullptr)
    236c:	b150      	cbz	r0, 2384 <UCommand::getRevisionNumber()+0x24>
    return strtol(&p1[4], NULL, 10) * 10 + REV_MINOR;
    236e:	220a      	movs	r2, #10
    2370:	2100      	movs	r1, #0
    2372:	3004      	adds	r0, #4
    2374:	f019 f82e 	bl	1b3d4 <strtol>
    2378:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    237c:	0040      	lsls	r0, r0, #1
    237e:	3005      	adds	r0, #5
    2380:	b280      	uxth	r0, r0
}
    2382:	bd08      	pop	{r3, pc}
    return 888;
    2384:	f44f 705e 	mov.w	r0, #888	; 0x378
}
    2388:	bd08      	pop	{r3, pc}
    238a:	bf00      	nop
    238c:	20007208 	.word	0x20007208

00002390 <UCommand::getCompileDate()>:
{
    2390:	b510      	push	{r4, lr}
    2392:	b082      	sub	sp, #8
    2394:	4604      	mov	r4, r0
  const char * p1 = getRevisionString();
    2396:	f7fd fee7 	bl	168 <getRevisionString()>
  p1 = strstr(p1, ".ino");
    239a:	490f      	ldr	r1, [pc, #60]	; (23d8 <UCommand::getCompileDate()+0x48>)
  const char * p1 = getRevisionString();
    239c:	9001      	str	r0, [sp, #4]
  p1 = strstr(p1, ".ino");
    239e:	f019 ff59 	bl	1c254 <strstr>
  if (p1 != nullptr)
    23a2:	b1a8      	cbz	r0, 23d0 <UCommand::getCompileDate()+0x40>
    p1+=4; // skip the '.cpp'
    23a4:	3004      	adds	r0, #4
    strtol(p1, (char**)&p1, 10); // skip the version number
    23a6:	a901      	add	r1, sp, #4
    23a8:	220a      	movs	r2, #10
    p1+=4; // skip the '.cpp'
    23aa:	9001      	str	r0, [sp, #4]
    strtol(p1, (char**)&p1, 10); // skip the version number
    23ac:	f019 f812 	bl	1b3d4 <strtol>
    p1++; // next is the date
    23b0:	9901      	ldr	r1, [sp, #4]
    strncpy(compileDate, p1, 20);
    23b2:	f104 0314 	add.w	r3, r4, #20
    23b6:	2214      	movs	r2, #20
    p1++; // next is the date
    23b8:	3101      	adds	r1, #1
    strncpy(compileDate, p1, 20);
    23ba:	4618      	mov	r0, r3
    p1++; // next is the date
    23bc:	9101      	str	r1, [sp, #4]
    strncpy(compileDate, p1, 20);
    23be:	f019 fcf7 	bl	1bdb0 <strncpy>
    23c2:	4603      	mov	r3, r0
    compileDate[20] = '\0';
    23c4:	2200      	movs	r2, #0
}
    23c6:	4618      	mov	r0, r3
    compileDate[20] = '\0';
    23c8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
    23cc:	b002      	add	sp, #8
    23ce:	bd10      	pop	{r4, pc}
    return "no date";
    23d0:	4b02      	ldr	r3, [pc, #8]	; (23dc <UCommand::getCompileDate()+0x4c>)
}
    23d2:	4618      	mov	r0, r3
    23d4:	b002      	add	sp, #8
    23d6:	bd10      	pop	{r4, pc}
    23d8:	20007208 	.word	0x20007208
    23dc:	20007200 	.word	0x20007200

000023e0 <UCommand::sendStatusVersion()>:
{
    23e0:	b510      	push	{r4, lr}
    23e2:	ed2d 8b02 	vpush	{d8}
    23e6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    23ea:	4604      	mov	r4, r0
  const char * p1 = getRevisionString();
    23ec:	f7fd febc 	bl	168 <getRevisionString()>
  p1 = strstr(p1, ".ino");
    23f0:	491b      	ldr	r1, [pc, #108]	; (2460 <UCommand::sendStatusVersion()+0x80>)
    23f2:	f019 ff2f 	bl	1c254 <strstr>
  if (p1 == nullptr)
    23f6:	b350      	cbz	r0, 244e <UCommand::sendStatusVersion()+0x6e>
    return strtol(&p1[4], NULL, 10) * 10 + REV_MINOR;
    23f8:	220a      	movs	r2, #10
    23fa:	2100      	movs	r1, #0
    23fc:	3004      	adds	r0, #4
    23fe:	f018 ffe9 	bl	1b3d4 <strtol>
  snprintf(reply, MRL, "version %.1f %d %s\r\n", (float)getRevisionNumber() / 10.0, robot.robotHWversion, getCompileDate());
    2402:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    return strtol(&p1[4], NULL, 10) * 10 + REV_MINOR;
    2406:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    240a:	005b      	lsls	r3, r3, #1
    240c:	3305      	adds	r3, #5
  snprintf(reply, MRL, "version %.1f %d %s\r\n", (float)getRevisionNumber() / 10.0, robot.robotHWversion, getCompileDate());
    240e:	b29b      	uxth	r3, r3
    2410:	ee07 3a90 	vmov	s15, r3
    2414:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    2418:	ee87 8b06 	vdiv.f64	d8, d7, d6
    241c:	4b11      	ldr	r3, [pc, #68]	; (2464 <UCommand::sendStatusVersion()+0x84>)
    241e:	4620      	mov	r0, r4
    2420:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    2424:	f7ff ffb4 	bl	2390 <UCommand::getCompileDate()>
    2428:	4a0f      	ldr	r2, [pc, #60]	; (2468 <UCommand::sendStatusVersion()+0x88>)
    242a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    242e:	e9cd 4002 	strd	r4, r0, [sp, #8]
    2432:	ed8d 8b00 	vstr	d8, [sp]
    2436:	a805      	add	r0, sp, #20
    2438:	f019 f9bc 	bl	1b7b4 <snprintf>
  usb.send(reply);
    243c:	a905      	add	r1, sp, #20
    243e:	480b      	ldr	r0, [pc, #44]	; (246c <UCommand::sendStatusVersion()+0x8c>)
    2440:	f00a f8e4 	bl	c60c <UUSB::send(char const*)>
}
    2444:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    2448:	ecbd 8b02 	vpop	{d8}
    244c:	bd10      	pop	{r4, pc}
    244e:	ed9f 8b02 	vldr	d8, [pc, #8]	; 2458 <UCommand::sendStatusVersion()+0x78>
    2452:	e7e3      	b.n	241c <UCommand::sendStatusVersion()+0x3c>
    2454:	f3af 8000 	nop.w
    2458:	33333333 	.word	0x33333333
    245c:	40563333 	.word	0x40563333
    2460:	20007208 	.word	0x20007208
    2464:	2000f660 	.word	0x2000f660
    2468:	20007210 	.word	0x20007210
    246c:	2000fac4 	.word	0x2000fac4

00002470 <UCommand::sendData(int)>:
  if (item == 0)
    2470:	b101      	cbz	r1, 2474 <UCommand::sendData(int)+0x4>
}
    2472:	4770      	bx	lr
    sendStatusVersion();
    2474:	f7ff bfb4 	b.w	23e0 <UCommand::sendStatusVersion()>

00002478 <UCommand::parse_and_execute_command(char*)>:
{ // command may be preceded by 'robot' or 'teensy' or robot type
    2478:	b510      	push	{r4, lr}
    247a:	460c      	mov	r4, r1
  if (strncmp(buf, "robot ", 6) == 0)
    247c:	2206      	movs	r2, #6
    247e:	4925      	ldr	r1, [pc, #148]	; (2514 <UCommand::parse_and_execute_command(char*)+0x9c>)
    2480:	4620      	mov	r0, r4
    2482:	f019 fc4f 	bl	1bd24 <strncmp>
    2486:	2800      	cmp	r0, #0
    2488:	d037      	beq.n	24fa <UCommand::parse_and_execute_command(char*)+0x82>
  else if (strncmp(buf, "teensy ", 7) == 0)
    248a:	2207      	movs	r2, #7
    248c:	4922      	ldr	r1, [pc, #136]	; (2518 <UCommand::parse_and_execute_command(char*)+0xa0>)
    248e:	4620      	mov	r0, r4
    2490:	f019 fc48 	bl	1bd24 <strncmp>
    2494:	b988      	cbnz	r0, 24ba <UCommand::parse_and_execute_command(char*)+0x42>
    while (*buf == ' ')
    2496:	79e3      	ldrb	r3, [r4, #7]
    buf += 7; // move pointer 7 characters forward
    2498:	3407      	adds	r4, #7
    while (*buf == ' ')
    249a:	2b20      	cmp	r3, #32
    249c:	d103      	bne.n	24a6 <UCommand::parse_and_execute_command(char*)+0x2e>
    249e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    24a2:	2b20      	cmp	r3, #32
    24a4:	d0fb      	beq.n	249e <UCommand::parse_and_execute_command(char*)+0x26>
    usb.send("# discarding the 'teensy' part\n");
    24a6:	491d      	ldr	r1, [pc, #116]	; (251c <UCommand::parse_and_execute_command(char*)+0xa4>)
    24a8:	481d      	ldr	r0, [pc, #116]	; (2520 <UCommand::parse_and_execute_command(char*)+0xa8>)
    24aa:	f00a f8af 	bl	c60c <UUSB::send(char const*)>
  bool used = usb.decodeAll(buf);
    24ae:	4621      	mov	r1, r4
    24b0:	481b      	ldr	r0, [pc, #108]	; (2520 <UCommand::parse_and_execute_command(char*)+0xa8>)
    24b2:	f00a fbf1 	bl	cc98 <UUSB::decodeAll(char const*)>
  if (not used)
    24b6:	b1c8      	cbz	r0, 24ec <UCommand::parse_and_execute_command(char*)+0x74>
}
    24b8:	bd10      	pop	{r4, pc}
  else if (strncmp(buf, "regbot ", 7) == 0)
    24ba:	2207      	movs	r2, #7
    24bc:	4919      	ldr	r1, [pc, #100]	; (2524 <UCommand::parse_and_execute_command(char*)+0xac>)
    24be:	4620      	mov	r0, r4
    24c0:	f019 fc30 	bl	1bd24 <strncmp>
    24c4:	2800      	cmp	r0, #0
    24c6:	d1f2      	bne.n	24ae <UCommand::parse_and_execute_command(char*)+0x36>
    while (*buf == ' ')
    24c8:	79e3      	ldrb	r3, [r4, #7]
    buf += 7; // move pointer 7 characters forward
    24ca:	3407      	adds	r4, #7
    while (*buf == ' ')
    24cc:	2b20      	cmp	r3, #32
    24ce:	d103      	bne.n	24d8 <UCommand::parse_and_execute_command(char*)+0x60>
    24d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    24d4:	2b20      	cmp	r3, #32
    24d6:	d0fb      	beq.n	24d0 <UCommand::parse_and_execute_command(char*)+0x58>
    usb.send("# discarding the 'regbot' part\n");
    24d8:	4913      	ldr	r1, [pc, #76]	; (2528 <UCommand::parse_and_execute_command(char*)+0xb0>)
    24da:	4811      	ldr	r0, [pc, #68]	; (2520 <UCommand::parse_and_execute_command(char*)+0xa8>)
    24dc:	f00a f896 	bl	c60c <UUSB::send(char const*)>
  bool used = usb.decodeAll(buf);
    24e0:	4621      	mov	r1, r4
    24e2:	480f      	ldr	r0, [pc, #60]	; (2520 <UCommand::parse_and_execute_command(char*)+0xa8>)
    24e4:	f00a fbd8 	bl	cc98 <UUSB::decodeAll(char const*)>
  if (not used)
    24e8:	2800      	cmp	r0, #0
    24ea:	d1e5      	bne.n	24b8 <UCommand::parse_and_execute_command(char*)+0x40>
    usb.sendInfoAsCommentWithTime("Unhandled message", buf);
    24ec:	4622      	mov	r2, r4
    24ee:	490f      	ldr	r1, [pc, #60]	; (252c <UCommand::parse_and_execute_command(char*)+0xb4>)
    24f0:	480b      	ldr	r0, [pc, #44]	; (2520 <UCommand::parse_and_execute_command(char*)+0xa8>)
}
    24f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usb.sendInfoAsCommentWithTime("Unhandled message", buf);
    24f6:	f00a b947 	b.w	c788 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)>
    usb.send("# discarding the 'robot' part\n");
    24fa:	490d      	ldr	r1, [pc, #52]	; (2530 <UCommand::parse_and_execute_command(char*)+0xb8>)
    buf += 6; // move pointer 6 characters forward
    24fc:	3406      	adds	r4, #6
    usb.send("# discarding the 'robot' part\n");
    24fe:	4808      	ldr	r0, [pc, #32]	; (2520 <UCommand::parse_and_execute_command(char*)+0xa8>)
    2500:	f00a f884 	bl	c60c <UUSB::send(char const*)>
    while (*buf == ' ')
    2504:	7823      	ldrb	r3, [r4, #0]
    2506:	2b20      	cmp	r3, #32
    2508:	d1d1      	bne.n	24ae <UCommand::parse_and_execute_command(char*)+0x36>
    250a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    250e:	2b20      	cmp	r3, #32
    2510:	d0fb      	beq.n	250a <UCommand::parse_and_execute_command(char*)+0x92>
    2512:	e7cc      	b.n	24ae <UCommand::parse_and_execute_command(char*)+0x36>
    2514:	20007228 	.word	0x20007228
    2518:	20007250 	.word	0x20007250
    251c:	20007258 	.word	0x20007258
    2520:	2000fac4 	.word	0x2000fac4
    2524:	20007278 	.word	0x20007278
    2528:	20007280 	.word	0x20007280
    252c:	200072a0 	.word	0x200072a0
    2530:	20007230 	.word	0x20007230

00002534 <_GLOBAL__sub_I_command>:
}
    2534:	b510      	push	{r4, lr}
    2536:	4c06      	ldr	r4, [pc, #24]	; (2550 <_GLOBAL__sub_I_command+0x1c>)
    2538:	4620      	mov	r0, r4
    253a:	f009 fe75 	bl	c228 <USubss::USubss()>
    253e:	4b05      	ldr	r3, [pc, #20]	; (2554 <_GLOBAL__sub_I_command+0x20>)
UCommand command;
    2540:	4620      	mov	r0, r4
    2542:	4a05      	ldr	r2, [pc, #20]	; (2558 <_GLOBAL__sub_I_command+0x24>)
    2544:	6023      	str	r3, [r4, #0]
    2546:	4905      	ldr	r1, [pc, #20]	; (255c <_GLOBAL__sub_I_command+0x28>)
}
    2548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UCommand command;
    254c:	f016 bd64 	b.w	19018 <__aeabi_atexit>
    2550:	2000ea18 	.word	0x2000ea18
    2554:	20008100 	.word	0x20008100
    2558:	20008f80 	.word	0x20008f80
    255c:	000022ad 	.word	0x000022ad

00002560 <UCurrent::decode(char const*)>:
}
    2560:	2000      	movs	r0, #0
    2562:	4770      	bx	lr

00002564 <UCurrent::sendHelp()>:
  usb.send("# Motor current -------\r\n");
    2564:	4901      	ldr	r1, [pc, #4]	; (256c <UCurrent::sendHelp()+0x8>)
    2566:	4802      	ldr	r0, [pc, #8]	; (2570 <UCurrent::sendHelp()+0xc>)
    2568:	f00a b850 	b.w	c60c <UUSB::send(char const*)>
    256c:	200074b8 	.word	0x200074b8
    2570:	2000fac4 	.word	0x2000fac4

00002574 <UCurrent::~UCurrent()>:
#include <stdint.h>
#include "main.h"
// #include "ucontrol.h"
#include "usubss.h"

class UCurrent : public USubss
    2574:	b510      	push	{r4, lr}
    2576:	4b05      	ldr	r3, [pc, #20]	; (258c <UCurrent::~UCurrent()+0x18>)
    2578:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    257a:	6840      	ldr	r0, [r0, #4]
    257c:	6023      	str	r3, [r4, #0]
	if (__p)
    257e:	b118      	cbz	r0, 2588 <UCurrent::~UCurrent()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    2580:	68e1      	ldr	r1, [r4, #12]
    2582:	1a09      	subs	r1, r1, r0
    2584:	f014 f92a 	bl	167dc <operator delete(void*, unsigned int)>
    2588:	4620      	mov	r0, r4
    258a:	bd10      	pop	{r4, pc}
    258c:	200080a0 	.word	0x200080a0

00002590 <UCurrent::setup()>:
{
    2590:	b510      	push	{r4, lr}
    2592:	4604      	mov	r4, r0
  addPublistItem("mca", "Get motor current 'mca m1 m2' [Amps]");
    2594:	4a28      	ldr	r2, [pc, #160]	; (2638 <UCurrent::setup()+0xa8>)
    2596:	4929      	ldr	r1, [pc, #164]	; (263c <UCurrent::setup()+0xac>)
    2598:	f009 ff6a 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("mco", "Get motor current offset (AD: 0..4096) 'mco o1 o2 ad1 ad2'");
    259c:	4a28      	ldr	r2, [pc, #160]	; (2640 <UCurrent::setup()+0xb0>)
    259e:	4929      	ldr	r1, [pc, #164]	; (2644 <UCurrent::setup()+0xb4>)
    25a0:	4620      	mov	r0, r4
    25a2:	f009 ff65 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("sca", "Get supply current in 'sca a n' a in amps, averaged over n samples");
    25a6:	4a28      	ldr	r2, [pc, #160]	; (2648 <UCurrent::setup()+0xb8>)
    25a8:	4620      	mov	r0, r4
    25aa:	4928      	ldr	r1, [pc, #160]	; (264c <UCurrent::setup()+0xbc>)
    25ac:	f009 ff60 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    25b0:	4621      	mov	r1, r4
    25b2:	4827      	ldr	r0, [pc, #156]	; (2650 <UCurrent::setup()+0xc0>)
    25b4:	f00a fc6e 	bl	ce94 <UUSB::addSubscriptionService(USubss*)>
  const float lpFilteredMaxADC = pow(2, ad.useADCresolution) * 2;
    25b8:	4b26      	ldr	r3, [pc, #152]	; (2654 <UCurrent::setup()+0xc4>)
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    25ba:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    25be:	ed93 1a05 	vldr	s2, [r3, #20]
    25c2:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
    25c6:	f015 fe43 	bl	18250 <pow>
    25ca:	ee30 0b00 	vadd.f64	d0, d0, d0
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    25ce:	eeb3 4b04 	vmov.f64	d4, #52	; 0x41a00000  20.0
  const float lpFilteredMaxADC = pow(2, ad.useADCresolution) * 2;
    25d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    25d6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 2618 <UCurrent::setup()+0x88>
    25da:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    25de:	ed9f 2b10 	vldr	d2, [pc, #64]	; 2620 <UCurrent::setup()+0x90>
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    25e2:	ee86 3b00 	vdiv.f64	d3, d6, d0
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    25e6:	ee20 0b02 	vmul.f64	d0, d0, d2
    25ea:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 2628 <UCurrent::setup()+0x98>
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    25ee:	ed9f 5b10 	vldr	d5, [pc, #64]	; 2630 <UCurrent::setup()+0xa0>
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    25f2:	ee20 0b07 	vmul.f64	d0, d0, d7
    25f6:	ee86 7b00 	vdiv.f64	d7, d6, d0
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    25fa:	ee83 6b04 	vdiv.f64	d6, d3, d4
  scale = 3.3/(1.8 * 0.455 * lpFilteredMaxADC * 300);
    25fe:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2602:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
  scaleSupplyCurrent = (3.3 / lpFilteredMaxADC) / 20.0 / 0.027;
    2606:	ee86 7b05 	vdiv.f64	d7, d6, d5
    260a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    260e:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
}
    2612:	bd10      	pop	{r4, pc}
    2614:	f3af 8000 	nop.w
    2618:	66666666 	.word	0x66666666
    261c:	400a6666 	.word	0x400a6666
    2620:	7ced9169 	.word	0x7ced9169
    2624:	3fea353f 	.word	0x3fea353f
    2628:	00000000 	.word	0x00000000
    262c:	4072c000 	.word	0x4072c000
    2630:	53f7ced9 	.word	0x53f7ced9
    2634:	3f9ba5e3 	.word	0x3f9ba5e3
    2638:	20007404 	.word	0x20007404
    263c:	2000742c 	.word	0x2000742c
    2640:	20007430 	.word	0x20007430
    2644:	2000746c 	.word	0x2000746c
    2648:	20007470 	.word	0x20007470
    264c:	200074b4 	.word	0x200074b4
    2650:	2000fac4 	.word	0x2000fac4
    2654:	2000e89c 	.word	0x2000e89c

00002658 <UCurrent::tick()>:
{ //
    2658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

void UCurrent::logIntervalChanged()
{ // average value is always a factor 300 more than AD value
  // Low pass filter for motor and supply current
  // based on actual logging sample interval (in ms)
  if (logger.logInterval_ms <= 2)
    265a:	4b84      	ldr	r3, [pc, #528]	; (286c <UCurrent::tick()+0x214>)
{ //
    265c:	4604      	mov	r4, r0
  if (logger.logInterval_ms <= 2)
    265e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  tickCnt++;
    2660:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  if (logger.logInterval_ms <= 2)
    2662:	2a02      	cmp	r2, #2
  tickCnt++;
    2664:	f103 0301 	add.w	r3, r3, #1
    2668:	65c3      	str	r3, [r0, #92]	; 0x5c
  if (logger.logInterval_ms <= 2)
    266a:	f240 8094 	bls.w	2796 <UCurrent::tick()+0x13e>
    lowPassFactor = 300/1; // use new value only
  else if (logger.logInterval_ms > 300)
    266e:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
    2672:	f240 80d4 	bls.w	281e <UCurrent::tick()+0x1c6>
    2676:	2002      	movs	r0, #2
  if (currentOffsetting and not motor.motorPreEnabled)
    2678:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    lowPassFactor = 300/1; // use new value only
    267c:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  if (currentOffsetting and not motor.motorPreEnabled)
    2680:	2b00      	cmp	r3, #0
    2682:	f040 8091 	bne.w	27a8 <UCurrent::tick()+0x150>
  else if (motor.motorPreEnabled and not currentOffsetting)
    2686:	4b7a      	ldr	r3, [pc, #488]	; (2870 <UCurrent::tick()+0x218>)
    2688:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    268c:	2a00      	cmp	r2, #0
    268e:	f040 80ce 	bne.w	282e <UCurrent::tick()+0x1d6>
  if (postpondCalibration > 0)
    2692:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2694:	2b00      	cmp	r3, #0
    2696:	dd01      	ble.n	269c <UCurrent::tick()+0x44>
    postpondCalibration--;
    2698:	3b01      	subs	r3, #1
    269a:	65a3      	str	r3, [r4, #88]	; 0x58
    motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 
    269c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                               (300 - lowPassFactor))/300 +
    269e:	f5c0 7196 	rsb	r1, r0, #300	; 0x12c
    26a2:	4e74      	ldr	r6, [pc, #464]	; (2874 <UCurrent::tick()+0x21c>)
    motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 
    26a4:	fb01 f303 	mul.w	r3, r1, r3
    motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 
    26a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                               ad.motorCurrentRawAD[0] * lowPassFactor;
    26aa:	4d73      	ldr	r5, [pc, #460]	; (2878 <UCurrent::tick()+0x220>)
                               (300 - lowPassFactor))/300 +
    26ac:	fb86 7c03 	smull	r7, ip, r6, r3
    26b0:	17db      	asrs	r3, r3, #31
    motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 
    26b2:	fb01 f202 	mul.w	r2, r1, r2
                               ad.motorCurrentRawAD[1] * lowPassFactor;
    26b6:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
                               (300 - lowPassFactor))/300 +
    26ba:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                               ad.motorCurrentRawAD[0] * lowPassFactor;
    26be:	f8b5 c020 	ldrh.w	ip, [r5, #32]
                               (300 - lowPassFactor))/300 +
    26c2:	fb86 7602 	smull	r7, r6, r6, r2
    26c6:	17d2      	asrs	r2, r2, #31
                               (300 - lowPassFactor))/300 +
    26c8:	fb0c 3300 	mla	r3, ip, r0, r3
                               (300 - lowPassFactor))/300 +
    26cc:	ebc2 1266 	rsb	r2, r2, r6, asr #5
    26d0:	6a26      	ldr	r6, [r4, #32]
    motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 
    26d2:	62a3      	str	r3, [r4, #40]	; 0x28
    return float(value - motorCurrentMOffset[0]) * scale;
    26d4:	1b9b      	subs	r3, r3, r6
                               (300 - lowPassFactor))/300 +
    26d6:	fb0e 2200 	mla	r2, lr, r0, r2
    return float(value - motorCurrentMOffset[0]) * scale;
    26da:	ee07 3a90 	vmov	s15, r3
    return float(value - motorCurrentMOffset[1]) * scale;
    26de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 
    26e0:	62e2      	str	r2, [r4, #44]	; 0x2c
    return float(value - motorCurrentMOffset[1]) * scale;
    26e2:	1ad2      	subs	r2, r2, r3
    return float(value - motorCurrentMOffset[0]) * scale;
    26e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return float(value - motorCurrentMOffset[1]) * scale;
    26e8:	ee07 2a10 	vmov	s14, r2
    26ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] *
    26f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    26f2:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    26f6:	fb02 f101 	mul.w	r1, r2, r1
                             (300 - lowPassFactor))/300 +
    26fa:	4a5e      	ldr	r2, [pc, #376]	; (2874 <UCurrent::tick()+0x21c>)
                             ad.supplyCurrent * lowPassFactor;
    26fc:	8bed      	ldrh	r5, [r5, #30]
    return float(value - motorCurrentMOffset[0]) * scale;
    26fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
                             (300 - lowPassFactor))/300 +
    2702:	fb82 7201 	smull	r7, r2, r2, r1
    2706:	17c9      	asrs	r1, r1, #31
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    2708:	edd4 5a14 	vldr	s11, [r4, #80]	; 0x50
    return float(value - motorCurrentMOffset[1]) * scale;
    270c:	ee26 7a87 	vmul.f32	s14, s13, s14
                             (300 - lowPassFactor))/300 +
    2710:	ebc1 1162 	rsb	r1, r1, r2, asr #5
  motorCurrentA[0] = getMotorCurrentM(0, motorCurrentMLowPass[0]);
    2714:	edc4 7a05 	vstr	s15, [r4, #20]
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    2718:	ed9f 6a58 	vldr	s12, [pc, #352]	; 287c <UCurrent::tick()+0x224>
                             (300 - lowPassFactor))/300 +
    271c:	fb00 1105 	mla	r1, r0, r5, r1
  if (supplyAvgCnt > 3000)
    2720:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  motorCurrentA[1] = getMotorCurrentM(1, motorCurrentMLowPass[1]);
    2722:	ed84 7a06 	vstr	s14, [r4, #24]
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    2726:	ee07 1a90 	vmov	s15, r1
  motorCurrentMLowPass[2] = (motorCurrentMLowPass[2] *
    272a:	6321      	str	r1, [r4, #48]	; 0x30
  if (supplyAvgCnt > 3000)
    272c:	f640 31b8 	movw	r1, #3000	; 0xbb8
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    2730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (supplyAvgCnt > 3000)
    2734:	428a      	cmp	r2, r1
  motorCurrentA[2] = float(motorCurrentMLowPass[2]) * scaleSupplyCurrent / 300;
    2736:	ee67 7aa5 	vmul.f32	s15, s15, s11
    273a:	ee87 7a86 	vdiv.f32	s14, s15, s12
    273e:	ed84 7a07 	vstr	s14, [r4, #28]
  if (supplyAvgCnt > 3000)
    2742:	dc72      	bgt.n	282a <UCurrent::tick()+0x1d2>
  supplyCurrentAvg += ad.supplyCurrent;
    2744:	6b61      	ldr	r1, [r4, #52]	; 0x34
  supplyAvgCnt++;
    2746:	3201      	adds	r2, #1
  supplyCurrentAvg += ad.supplyCurrent;
    2748:	440d      	add	r5, r1
  motorCurrentAvg[0] += getMotorCurrentM(0, ad.motorCurrentRawAD[0] * 300);
    274a:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
  motorCurrentAvg[1] += getMotorCurrentM(1, ad.motorCurrentRawAD[1] * 300);
    274e:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
  supplyAvgCnt++;
    2752:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
  motorCurrentAvg[0] += getMotorCurrentM(0, ad.motorCurrentRawAD[0] * 300);
    2756:	f44f 7296 	mov.w	r2, #300	; 0x12c
    275a:	fb02 fc0c 	mul.w	ip, r2, ip
  motorCurrentAvg[1] += getMotorCurrentM(1, ad.motorCurrentRawAD[1] * 300);
    275e:	fb02 fe0e 	mul.w	lr, r2, lr
    return float(value - motorCurrentMOffset[0]) * scale;
    2762:	ebac 0c06 	sub.w	ip, ip, r6
    return float(value - motorCurrentMOffset[1]) * scale;
    2766:	ebae 0e03 	sub.w	lr, lr, r3
  motorAvgCnt++;
    276a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    return float(value - motorCurrentMOffset[0]) * scale;
    276c:	ee07 ca90 	vmov	s15, ip
  motorAvgCnt++;
    2770:	3301      	adds	r3, #1
    return float(value - motorCurrentMOffset[0]) * scale;
    2772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    return float(value - motorCurrentMOffset[1]) * scale;
    2776:	ee07 ea90 	vmov	s15, lr
  motorAvgCnt++;
    277a:	6463      	str	r3, [r4, #68]	; 0x44
    return float(value - motorCurrentMOffset[1]) * scale;
    277c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motorCurrentAvg[0] += getMotorCurrentM(0, ad.motorCurrentRawAD[0] * 300);
    2780:	eee6 5a87 	vfma.f32	s11, s13, s14
  motorCurrentAvg[1] += getMotorCurrentM(1, ad.motorCurrentRawAD[1] * 300);
    2784:	eeb0 7a46 	vmov.f32	s14, s12
    2788:	eea7 7aa6 	vfma.f32	s14, s15, s13
  motorCurrentAvg[0] += getMotorCurrentM(0, ad.motorCurrentRawAD[0] * 300);
    278c:	edc4 5a0f 	vstr	s11, [r4, #60]	; 0x3c
  motorCurrentAvg[1] += getMotorCurrentM(1, ad.motorCurrentRawAD[1] * 300);
    2790:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
}
    2794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2796:	f44f 7096 	mov.w	r0, #300	; 0x12c
  if (currentOffsetting and not motor.motorPreEnabled)
    279a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    lowPassFactor = 300/1; // use new value only
    279e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  if (currentOffsetting and not motor.motorPreEnabled)
    27a2:	2b00      	cmp	r3, #0
    27a4:	f43f af6f 	beq.w	2686 <UCurrent::tick()+0x2e>
  currentOffsetting = motor.motorPreEnabled;
    27a8:	4b31      	ldr	r3, [pc, #196]	; (2870 <UCurrent::tick()+0x218>)
  if (postpondCalibration > 0)
    27aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
  currentOffsetting = motor.motorPreEnabled;
    27ac:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
  if (postpondCalibration > 0)
    27b0:	2a00      	cmp	r2, #0
  currentOffsetting = motor.motorPreEnabled;
    27b2:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
  if (postpondCalibration > 0)
    27b6:	dd01      	ble.n	27bc <UCurrent::tick()+0x164>
    postpondCalibration--;
    27b8:	3a01      	subs	r2, #1
    27ba:	65a2      	str	r2, [r4, #88]	; 0x58
  if (motor.motorPreEnabled and postpondCalibration == 0)
    27bc:	2900      	cmp	r1, #0
    27be:	f43f af6d 	beq.w	269c <UCurrent::tick()+0x44>
    27c2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    27c4:	2a00      	cmp	r2, #0
    27c6:	f47f af69 	bne.w	269c <UCurrent::tick()+0x44>
    if (motor.motorPreEnabledRestart)
    27ca:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
    27ce:	bba9      	cbnz	r1, 283c <UCurrent::tick()+0x1e4>
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    27d0:	f240 112b 	movw	r1, #299	; 0x12b
    27d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    27d6:	4a27      	ldr	r2, [pc, #156]	; (2874 <UCurrent::tick()+0x21c>)
    27d8:	fb01 f606 	mul.w	r6, r1, r6
      motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 299)/300 + ad.motorCurrentRawAD[1];
    27dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    27de:	4d26      	ldr	r5, [pc, #152]	; (2878 <UCurrent::tick()+0x220>)
      motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 299)/300 + ad.motorCurrentRawAD[1];
    27e0:	fb01 f303 	mul.w	r3, r1, r3
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    27e4:	fb82 0106 	smull	r0, r1, r2, r6
    27e8:	17f6      	asrs	r6, r6, #31
    27ea:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    27ee:	ebc6 1661 	rsb	r6, r6, r1, asr #5
      motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 299)/300 + ad.motorCurrentRawAD[1];
    27f2:	fb82 1203 	smull	r1, r2, r2, r3
    27f6:	17db      	asrs	r3, r3, #31
    27f8:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    27fc:	4466      	add	r6, ip
      motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 299)/300 + ad.motorCurrentRawAD[1];
    27fe:	ebc3 1362 	rsb	r3, r3, r2, asr #5
      motorCurrentMLowPass[0] = (motorCurrentMLowPass[0] * 299)/300 + ad.motorCurrentRawAD[0];
    2802:	62a6      	str	r6, [r4, #40]	; 0x28
      motorCurrentMLowPass[1] = (motorCurrentMLowPass[1] * 299)/300 + ad.motorCurrentRawAD[1];
    2804:	4473      	add	r3, lr
    2806:	62e3      	str	r3, [r4, #44]	; 0x2c
    motorCurrentMOffset[1] = motorCurrentMLowPass[1];
    2808:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2880 <UCurrent::tick()+0x228>
                             (300 - lowPassFactor))/300 +
    280c:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    motorCurrentMOffset[1] = motorCurrentMLowPass[1];
    2810:	eeb0 7a67 	vmov.f32	s14, s15
                             (300 - lowPassFactor))/300 +
    2814:	f5c0 7196 	rsb	r1, r0, #300	; 0x12c
    motorCurrentMOffset[1] = motorCurrentMLowPass[1];
    2818:	e9c4 6308 	strd	r6, r3, [r4, #32]
    281c:	e768      	b.n	26f0 <UCurrent::tick()+0x98>
    lowPassFactor = 300/150; // time constant about 150ms
  else
    // use twice the sample interval
    lowPassFactor = 300/(logger.logInterval_ms*2);
    281e:	0052      	lsls	r2, r2, #1
    2820:	f44f 7096 	mov.w	r0, #300	; 0x12c
    2824:	fbb0 f0f2 	udiv	r0, r0, r2
    2828:	e7b7      	b.n	279a <UCurrent::tick()+0x142>
    282a:	2201      	movs	r2, #1
    282c:	e78d      	b.n	274a <UCurrent::tick()+0xf2>
  currentOffsetting = motor.motorPreEnabled;
    282e:	2101      	movs	r1, #1
    postpondCalibration--;
    2830:	f240 122b 	movw	r2, #299	; 0x12b
  currentOffsetting = motor.motorPreEnabled;
    2834:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    postpondCalibration--;
    2838:	65a2      	str	r2, [r4, #88]	; 0x58
  if (motor.motorPreEnabled and postpondCalibration == 0)
    283a:	e7c2      	b.n	27c2 <UCurrent::tick()+0x16a>
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    283c:	4d0e      	ldr	r5, [pc, #56]	; (2878 <UCurrent::tick()+0x220>)
      motor.motorPreEnabledRestart = false;
    283e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    2842:	f44f 7296 	mov.w	r2, #300	; 0x12c
    2846:	8c2b      	ldrh	r3, [r5, #32]
      usb.send("# motor.motorPreEnabledRestart=true\n");
    2848:	490e      	ldr	r1, [pc, #56]	; (2884 <UCurrent::tick()+0x22c>)
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    284a:	fb02 f303 	mul.w	r3, r2, r3
      usb.send("# motor.motorPreEnabledRestart=true\n");
    284e:	480e      	ldr	r0, [pc, #56]	; (2888 <UCurrent::tick()+0x230>)
      motorCurrentMLowPass[0] = ad.motorCurrentRawAD[0] * 300;
    2850:	62a3      	str	r3, [r4, #40]	; 0x28
      motorCurrentMLowPass[1] = ad.motorCurrentRawAD[1] * 300;
    2852:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    2854:	fb02 f303 	mul.w	r3, r2, r3
    2858:	62e3      	str	r3, [r4, #44]	; 0x2c
      usb.send("# motor.motorPreEnabledRestart=true\n");
    285a:	f009 fed7 	bl	c60c <UUSB::send(char const*)>
  motorCurrentAvg[0] += getMotorCurrentM(0, ad.motorCurrentRawAD[0] * 300);
    285e:	f8b5 c020 	ldrh.w	ip, [r5, #32]
  motorCurrentAvg[1] += getMotorCurrentM(1, ad.motorCurrentRawAD[1] * 300);
    2862:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
    motorCurrentMOffset[1] = motorCurrentMLowPass[1];
    2866:	e9d4 630a 	ldrd	r6, r3, [r4, #40]	; 0x28
    286a:	e7cd      	b.n	2808 <UCurrent::tick()+0x1b0>
    286c:	2000f24c 	.word	0x2000f24c
    2870:	2000f4c8 	.word	0x2000f4c8
    2874:	1b4e81b5 	.word	0x1b4e81b5
    2878:	2000e89c 	.word	0x2000e89c
    287c:	43960000 	.word	0x43960000
    2880:	00000000 	.word	0x00000000
    2884:	200073dc 	.word	0x200073dc
    2888:	2000fac4 	.word	0x2000fac4

0000288c <UCurrent::sendMotorCurrent()>:
  if (motorAvgCnt == 0)
    288c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    288e:	b510      	push	{r4, lr}
    2890:	4604      	mov	r4, r0
    2892:	b096      	sub	sp, #88	; 0x58
  if (motorAvgCnt == 0)
    2894:	b323      	cbz	r3, 28e0 <UCurrent::sendMotorCurrent()+0x54>
  snprintf(reply, MRL,"mca %.3f %.3f %d\r\n", motorCurrentAvg[0]/motorAvgCnt, motorCurrentAvg[1]/motorAvgCnt, motorAvgCnt);
    2896:	ee07 3a90 	vmov	s15, r3
    289a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    289e:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
    28a2:	2140      	movs	r1, #64	; 0x40
    28a4:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    28a8:	a806      	add	r0, sp, #24
    28aa:	ee87 6a27 	vdiv.f32	s12, s14, s15
    28ae:	9304      	str	r3, [sp, #16]
    28b0:	4a0e      	ldr	r2, [pc, #56]	; (28ec <UCurrent::sendMotorCurrent()+0x60>)
    28b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    28b6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    28ba:	ed8d 6b02 	vstr	d6, [sp, #8]
    28be:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    28c2:	ed8d 7b00 	vstr	d7, [sp]
    28c6:	f018 ff75 	bl	1b7b4 <snprintf>
  motorCurrentAvg[0] = 0;
    28ca:	2300      	movs	r3, #0
  motorAvgCnt = 0;
    28cc:	2200      	movs	r2, #0
  usb.send(reply);
    28ce:	a906      	add	r1, sp, #24
  motorCurrentAvg[0] = 0;
    28d0:	63e3      	str	r3, [r4, #60]	; 0x3c
  motorCurrentAvg[1] = 0;
    28d2:	6423      	str	r3, [r4, #64]	; 0x40
  motorAvgCnt = 0;
    28d4:	6462      	str	r2, [r4, #68]	; 0x44
  usb.send(reply);
    28d6:	4806      	ldr	r0, [pc, #24]	; (28f0 <UCurrent::sendMotorCurrent()+0x64>)
    28d8:	f009 fe98 	bl	c60c <UUSB::send(char const*)>
}
    28dc:	b016      	add	sp, #88	; 0x58
    28de:	bd10      	pop	{r4, pc}
    motorAvgCnt = 1;
    28e0:	2201      	movs	r2, #1
    28e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    28e6:	4613      	mov	r3, r2
    28e8:	6442      	str	r2, [r0, #68]	; 0x44
    28ea:	e7d8      	b.n	289e <UCurrent::sendMotorCurrent()+0x12>
    28ec:	200073a0 	.word	0x200073a0
    28f0:	2000fac4 	.word	0x2000fac4

000028f4 <UCurrent::sendSupplyCurrent()>:
  if (supplyAvgCnt < 1)
    28f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    28f6:	2b00      	cmp	r3, #0
{
    28f8:	b510      	push	{r4, lr}
    28fa:	4604      	mov	r4, r0
    28fc:	b094      	sub	sp, #80	; 0x50
  if (supplyAvgCnt < 1)
    28fe:	dd20      	ble.n	2942 <UCurrent::sendSupplyCurrent()+0x4e>
  snprintf(reply, MRL,"sca %.2f %d\r\n", float(supplyCurrentAvg) * scaleSupplyCurrent/supplyAvgCnt, supplyAvgCnt);
    2900:	ee07 3a90 	vmov	s15, r3
    2904:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2908:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    290c:	2140      	movs	r1, #64	; 0x40
    290e:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
    2912:	a804      	add	r0, sp, #16
    2914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2918:	4a0d      	ldr	r2, [pc, #52]	; (2950 <UCurrent::sendSupplyCurrent()+0x5c>)
    291a:	9302      	str	r3, [sp, #8]
    291c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2920:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2924:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2928:	ed8d 7b00 	vstr	d7, [sp]
    292c:	f018 ff42 	bl	1b7b4 <snprintf>
  supplyCurrentAvg = 0;
    2930:	2300      	movs	r3, #0
  usb.send(reply);
    2932:	a904      	add	r1, sp, #16
    2934:	4807      	ldr	r0, [pc, #28]	; (2954 <UCurrent::sendSupplyCurrent()+0x60>)
  supplyAvgCnt = 0;
    2936:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  usb.send(reply);
    293a:	f009 fe67 	bl	c60c <UUSB::send(char const*)>
}
    293e:	b014      	add	sp, #80	; 0x50
    2940:	bd10      	pop	{r4, pc}
    supplyAvgCnt = 1;
    2942:	2201      	movs	r2, #1
    2944:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    2948:	4613      	mov	r3, r2
    294a:	6382      	str	r2, [r0, #56]	; 0x38
    294c:	e7dc      	b.n	2908 <UCurrent::sendSupplyCurrent()+0x14>
    294e:	bf00      	nop
    2950:	200073b4 	.word	0x200073b4
    2954:	2000fac4 	.word	0x2000fac4

00002958 <UCurrent::sendData(int)>:
  if (item == 0)
    2958:	b121      	cbz	r1, 2964 <UCurrent::sendData(int)+0xc>
  else if (item == 1)
    295a:	2901      	cmp	r1, #1
    295c:	d006      	beq.n	296c <UCurrent::sendData(int)+0x14>
  else if (item == 2)
    295e:	2902      	cmp	r1, #2
    2960:	d002      	beq.n	2968 <UCurrent::sendData(int)+0x10>
    2962:	4770      	bx	lr
    sendMotorCurrent();
    2964:	f7ff bf92 	b.w	288c <UCurrent::sendMotorCurrent()>
    sendSupplyCurrent();
    2968:	f7ff bfc4 	b.w	28f4 <UCurrent::sendSupplyCurrent()>
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
    296c:	e9d0 0208 	ldrd	r0, r2, [r0, #32]
    2970:	490e      	ldr	r1, [pc, #56]	; (29ac <UCurrent::sendData(int)+0x54>)
{
    2972:	b510      	push	{r4, lr}
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
    2974:	fb81 4300 	smull	r4, r3, r1, r0
    2978:	17c0      	asrs	r0, r0, #31
{
    297a:	b094      	sub	sp, #80	; 0x50
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
    297c:	ebc0 1363 	rsb	r3, r0, r3, asr #5
    2980:	fb81 0102 	smull	r0, r1, r1, r2
    2984:	17d2      	asrs	r2, r2, #31
    2986:	ebc2 1061 	rsb	r0, r2, r1, asr #5
    298a:	4a09      	ldr	r2, [pc, #36]	; (29b0 <UCurrent::sendData(int)+0x58>)
    298c:	2140      	movs	r1, #64	; 0x40
    298e:	9000      	str	r0, [sp, #0]
           ad.motorCurrentRawAD[0], ad.motorCurrentRawAD[1]);
    2990:	4808      	ldr	r0, [pc, #32]	; (29b4 <UCurrent::sendData(int)+0x5c>)
  snprintf(reply, MRL,"mco %ld %ld  %d %d\r\n", 
    2992:	8c44      	ldrh	r4, [r0, #34]	; 0x22
    2994:	8c00      	ldrh	r0, [r0, #32]
    2996:	e9cd 0401 	strd	r0, r4, [sp, #4]
    299a:	a804      	add	r0, sp, #16
    299c:	f018 ff0a 	bl	1b7b4 <snprintf>
  usb.send(reply);
    29a0:	a904      	add	r1, sp, #16
    29a2:	4805      	ldr	r0, [pc, #20]	; (29b8 <UCurrent::sendData(int)+0x60>)
    29a4:	f009 fe32 	bl	c60c <UUSB::send(char const*)>
}
    29a8:	b014      	add	sp, #80	; 0x50
    29aa:	bd10      	pop	{r4, pc}
    29ac:	1b4e81b5 	.word	0x1b4e81b5
    29b0:	200073c4 	.word	0x200073c4
    29b4:	2000e89c 	.word	0x2000e89c
    29b8:	2000fac4 	.word	0x2000fac4

000029bc <UCurrent::getSupplyCurrent()>:
  return motorCurrentMLowPass[2] * scaleSupplyCurrent / 300.0;
    29bc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    29c0:	ed90 7a14 	vldr	s14, [r0, #80]	; 0x50
    29c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29c8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 29d8 <UCurrent::getSupplyCurrent()+0x1c>
    29cc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
    29d0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    29d4:	4770      	bx	lr
    29d6:	bf00      	nop
    29d8:	43960000 	.word	0x43960000

000029dc <UCurrent::logIntervalChanged()>:
  if (logger.logInterval_ms <= 2)
    29dc:	4b0b      	ldr	r3, [pc, #44]	; (2a0c <UCurrent::logIntervalChanged()+0x30>)
    29de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    29e0:	2b02      	cmp	r3, #2
    29e2:	d906      	bls.n	29f2 <UCurrent::logIntervalChanged()+0x16>
  else if (logger.logInterval_ms > 300)
    29e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    29e8:	d908      	bls.n	29fc <UCurrent::logIntervalChanged()+0x20>
    29ea:	2302      	movs	r3, #2
    lowPassFactor = 300/1; // use new value only
    29ec:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
}
    29f0:	4770      	bx	lr
    29f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
    lowPassFactor = 300/1; // use new value only
    29f6:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
}
    29fa:	4770      	bx	lr
    lowPassFactor = 300/(logger.logInterval_ms*2);
    29fc:	005b      	lsls	r3, r3, #1
    29fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
    2a02:	fbb2 f3f3 	udiv	r3, r2, r3
    lowPassFactor = 300/1; // use new value only
    2a06:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
}
    2a0a:	4770      	bx	lr
    2a0c:	2000f24c 	.word	0x2000f24c

00002a10 <_GLOBAL__sub_I_current>:
}

void UCurrent::eePromSave()
{
  // eeConfig.pushWord(deviceID);
}
    2a10:	b510      	push	{r4, lr}
    2a12:	4c0f      	ldr	r4, [pc, #60]	; (2a50 <_GLOBAL__sub_I_current+0x40>)
    2a14:	4620      	mov	r0, r4
    2a16:	f009 fc07 	bl	c228 <USubss::USubss()>
    2a1a:	2300      	movs	r3, #0
    2a1c:	4622      	mov	r2, r4
    2a1e:	480d      	ldr	r0, [pc, #52]	; (2a54 <_GLOBAL__sub_I_current+0x44>)
    2a20:	6223      	str	r3, [r4, #32]
    2a22:	f842 0b20 	str.w	r0, [r2], #32
UCurrent current;
    2a26:	4620      	mov	r0, r4
    2a28:	6423      	str	r3, [r4, #64]	; 0x40
    2a2a:	62a3      	str	r3, [r4, #40]	; 0x28
    2a2c:	6053      	str	r3, [r2, #4]
    2a2e:	63e3      	str	r3, [r4, #60]	; 0x3c
    2a30:	6463      	str	r3, [r4, #68]	; 0x44
    2a32:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    2a36:	4a08      	ldr	r2, [pc, #32]	; (2a58 <_GLOBAL__sub_I_current+0x48>)
    2a38:	4908      	ldr	r1, [pc, #32]	; (2a5c <_GLOBAL__sub_I_current+0x4c>)
    2a3a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    2a3e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
    2a42:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
}
    2a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UCurrent current;
    2a4a:	f016 bae5 	b.w	19018 <__aeabi_atexit>
    2a4e:	bf00      	nop
    2a50:	2000ea90 	.word	0x2000ea90
    2a54:	20008114 	.word	0x20008114
    2a58:	20008f80 	.word	0x20008f80
    2a5c:	00002575 	.word	0x00002575

00002a60 <UDisplay::sendHelp()>:
{
    2a60:	b510      	push	{r4, lr}
  usb.send("# Display -------\r\n");
    2a62:	4c07      	ldr	r4, [pc, #28]	; (2a80 <UDisplay::sendHelp()+0x20>)
    2a64:	4907      	ldr	r1, [pc, #28]	; (2a84 <UDisplay::sendHelp()+0x24>)
    2a66:	4620      	mov	r0, r4
    2a68:	f009 fdd0 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tdisp text \tSet a display line text\r\n");
    2a6c:	4906      	ldr	r1, [pc, #24]	; (2a88 <UDisplay::sendHelp()+0x28>)
    2a6e:	4620      	mov	r0, r4
    2a70:	f009 fdcc 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tdispon V \tenable (1) or disable (0) display\r\n");
    2a74:	4620      	mov	r0, r4
    2a76:	4905      	ldr	r1, [pc, #20]	; (2a8c <UDisplay::sendHelp()+0x2c>)
}
    2a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tdispon V \tenable (1) or disable (0) display\r\n");
    2a7c:	f009 bdc6 	b.w	c60c <UUSB::send(char const*)>
    2a80:	2000fac4 	.word	0x2000fac4
    2a84:	20007574 	.word	0x20007574
    2a88:	20007588 	.word	0x20007588
    2a8c:	200075b4 	.word	0x200075b4

00002a90 <UDisplay::~UDisplay()>:
// #endif
#include "usubss.h"



class UDisplay : public USubss
    2a90:	b510      	push	{r4, lr}
    2a92:	4b05      	ldr	r3, [pc, #20]	; (2aa8 <UDisplay::~UDisplay()+0x18>)
    2a94:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    2a96:	6840      	ldr	r0, [r0, #4]
    2a98:	6023      	str	r3, [r4, #0]
	if (__p)
    2a9a:	b118      	cbz	r0, 2aa4 <UDisplay::~UDisplay()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    2a9c:	68e1      	ldr	r1, [r4, #12]
    2a9e:	1a09      	subs	r1, r1, r0
    2aa0:	f013 fe9c 	bl	167dc <operator delete(void*, unsigned int)>
    2aa4:	4620      	mov	r0, r4
    2aa6:	bd10      	pop	{r4, pc}
    2aa8:	200080a0 	.word	0x200080a0

00002aac <UDisplay::decode(char const*)>:
{
    2aac:	b570      	push	{r4, r5, r6, lr}
    2aae:	460c      	mov	r4, r1
    2ab0:	4606      	mov	r6, r0
  if (strncmp(buf, "disp ", 5) == 0)
    2ab2:	2205      	movs	r2, #5
    2ab4:	4912      	ldr	r1, [pc, #72]	; (2b00 <UDisplay::decode(char const*)+0x54>)
    2ab6:	4620      	mov	r0, r4
    2ab8:	f019 f934 	bl	1bd24 <strncmp>
    2abc:	b1a8      	cbz	r0, 2aea <UDisplay::decode(char const*)+0x3e>
  else if (strncmp(buf, "dispon ", 7) == 0)
    2abe:	2207      	movs	r2, #7
    2ac0:	4910      	ldr	r1, [pc, #64]	; (2b04 <UDisplay::decode(char const*)+0x58>)
    2ac2:	4620      	mov	r0, r4
    2ac4:	f019 f92e 	bl	1bd24 <strncmp>
    2ac8:	b108      	cbz	r0, 2ace <UDisplay::decode(char const*)+0x22>
    used = false;
    2aca:	2000      	movs	r0, #0
}
    2acc:	bd70      	pop	{r4, r5, r6, pc}
    int v = strtol(p1, nullptr, 10);
    2ace:	4601      	mov	r1, r0
    2ad0:	220a      	movs	r2, #10
    2ad2:	1de0      	adds	r0, r4, #7
    2ad4:	f018 fc7e 	bl	1b3d4 <strtol>
    2ad8:	4603      	mov	r3, r0
  bool used = true;
    2ada:	2001      	movs	r0, #1
    useDisplay = v == 1;
    2adc:	1a1b      	subs	r3, r3, r0
    2ade:	fab3 f383 	clz	r3, r3
    2ae2:	095b      	lsrs	r3, r3, #5
    2ae4:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
    2ae8:	bd70      	pop	{r4, r5, r6, pc}

void UDisplay::setLine(const char* line)
{
  strncpy(lineFree, line, MAX_LINE_LENGTH);
    2aea:	4605      	mov	r5, r0
    2aec:	2227      	movs	r2, #39	; 0x27
    2aee:	1d61      	adds	r1, r4, #5
    2af0:	f106 0044 	add.w	r0, r6, #68	; 0x44
    2af4:	f019 f95c 	bl	1bdb0 <strncpy>
  bool used = true;
    2af8:	2001      	movs	r0, #1
  lineFree[MAX_LINE_LENGTH-1] = '\0';
    2afa:	f886 506b 	strb.w	r5, [r6, #107]	; 0x6b
}
    2afe:	bd70      	pop	{r4, r5, r6, pc}
    2b00:	20007550 	.word	0x20007550
    2b04:	20007558 	.word	0x20007558

00002b08 <UDisplay::sendData(int)>:
  if (item == 0)
    2b08:	b101      	cbz	r1, 2b0c <UDisplay::sendData(int)+0x4>
    2b0a:	4770      	bx	lr
{
    2b0c:	b510      	push	{r4, lr}
  snprintf(s, MSL, "# '%s';'%s';'%s'\r\n", lineName, lineState, lineFree);
    2b0e:	f100 016c 	add.w	r1, r0, #108	; 0x6c
{
    2b12:	b0a8      	sub	sp, #160	; 0xa0
  snprintf(s, MSL, "# '%s';'%s';'%s'\r\n", lineName, lineState, lineFree);
    2b14:	f100 0444 	add.w	r4, r0, #68	; 0x44
    2b18:	f100 031c 	add.w	r3, r0, #28
    2b1c:	4a06      	ldr	r2, [pc, #24]	; (2b38 <UDisplay::sendData(int)+0x30>)
    2b1e:	a802      	add	r0, sp, #8
    2b20:	e9cd 1400 	strd	r1, r4, [sp]
    2b24:	2196      	movs	r1, #150	; 0x96
    2b26:	f018 fe45 	bl	1b7b4 <snprintf>
  usb.send(s);
    2b2a:	a902      	add	r1, sp, #8
    2b2c:	4803      	ldr	r0, [pc, #12]	; (2b3c <UDisplay::sendData(int)+0x34>)
    2b2e:	f009 fd6d 	bl	c60c <UUSB::send(char const*)>
}
    2b32:	b028      	add	sp, #160	; 0xa0
    2b34:	bd10      	pop	{r4, pc}
    2b36:	bf00      	nop
    2b38:	20007560 	.word	0x20007560
    2b3c:	2000fac4 	.word	0x2000fac4

00002b40 <UDisplay::setup()>:
{
    2b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (dss == nullptr)
    2b42:	6984      	ldr	r4, [r0, #24]
{
    2b44:	b085      	sub	sp, #20
    2b46:	4605      	mov	r5, r0
  if (dss == nullptr)
    2b48:	b374      	cbz	r4, 2ba8 <UDisplay::setup()+0x68>
  if(!dss->begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
    2b4a:	2301      	movs	r3, #1
    2b4c:	223c      	movs	r2, #60	; 0x3c
    2b4e:	2102      	movs	r1, #2
    2b50:	4620      	mov	r0, r4
    2b52:	9300      	str	r3, [sp, #0]
    2b54:	f7fe fbd8 	bl	1308 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>
    2b58:	b308      	cbz	r0, 2b9e <UDisplay::setup()+0x5e>
  Wire.setClock(1000000);
    2b5a:	491c      	ldr	r1, [pc, #112]	; (2bcc <UDisplay::setup()+0x8c>)
  for (int i=0; i < 4; i++)
    2b5c:	2700      	movs	r7, #0
  Wire.setClock(1000000);
    2b5e:	481c      	ldr	r0, [pc, #112]	; (2bd0 <UDisplay::setup()+0x90>)
    2b60:	f00c f958 	bl	ee14 <TwoWire::setClock(unsigned long)>
    for (int c = 0; c < 8; c++) // send in smaller chunks (16 bytes)
    2b64:	b2fe      	uxtb	r6, r7
    2b66:	2400      	movs	r4, #0
      dss->display(i, c);
    2b68:	b2e2      	uxtb	r2, r4
    for (int c = 0; c < 8; c++) // send in smaller chunks (16 bytes)
    2b6a:	3401      	adds	r4, #1
      dss->display(i, c);
    2b6c:	4631      	mov	r1, r6
    2b6e:	69a8      	ldr	r0, [r5, #24]
    2b70:	f7fe fda8 	bl	16c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>
    for (int c = 0; c < 8; c++) // send in smaller chunks (16 bytes)
    2b74:	2c08      	cmp	r4, #8
    2b76:	d1f7      	bne.n	2b68 <UDisplay::setup()+0x28>
  for (int i=0; i < 4; i++)
    2b78:	3701      	adds	r7, #1
    2b7a:	2f04      	cmp	r7, #4
    2b7c:	d1f2      	bne.n	2b64 <UDisplay::setup()+0x24>
  delay(400); // Pause for 400 ms seconds
    2b7e:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2b82:	f013 f9bd 	bl	15f00 <delay>
  addPublistItem("display", "Get current display text");
    2b86:	4628      	mov	r0, r5
    2b88:	4a12      	ldr	r2, [pc, #72]	; (2bd4 <UDisplay::setup()+0x94>)
    2b8a:	4913      	ldr	r1, [pc, #76]	; (2bd8 <UDisplay::setup()+0x98>)
    2b8c:	f009 fc70 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    2b90:	4629      	mov	r1, r5
    2b92:	4812      	ldr	r0, [pc, #72]	; (2bdc <UDisplay::setup()+0x9c>)
}
    2b94:	b005      	add	sp, #20
    2b96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  usb.addSubscriptionService(this);
    2b9a:	f00a b97b 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    usb.send("# UDisplay::setup: SSD1306 allocation failed\n");
    2b9e:	4910      	ldr	r1, [pc, #64]	; (2be0 <UDisplay::setup()+0xa0>)
    2ba0:	480e      	ldr	r0, [pc, #56]	; (2bdc <UDisplay::setup()+0x9c>)
    2ba2:	f009 fd33 	bl	c60c <UUSB::send(char const*)>
    2ba6:	e7d8      	b.n	2b5a <UDisplay::setup()+0x1a>
      dss = new Adafruit_SSD1306(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire1, OLED_RESET, I2C_CLOCK); //, 1000000, 1000000);
    2ba8:	206c      	movs	r0, #108	; 0x6c
    2baa:	f013 fe15 	bl	167d8 <operator new(unsigned int)>
    2bae:	4a0d      	ldr	r2, [pc, #52]	; (2be4 <UDisplay::setup()+0xa4>)
    2bb0:	4b06      	ldr	r3, [pc, #24]	; (2bcc <UDisplay::setup()+0x8c>)
    2bb2:	4604      	mov	r4, r0
    2bb4:	2180      	movs	r1, #128	; 0x80
    2bb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2bbe:	4b0a      	ldr	r3, [pc, #40]	; (2be8 <UDisplay::setup()+0xa8>)
    2bc0:	9200      	str	r2, [sp, #0]
    2bc2:	2220      	movs	r2, #32
    2bc4:	f7fe fa5c 	bl	1080 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>
    2bc8:	61ac      	str	r4, [r5, #24]
    2bca:	e7be      	b.n	2b4a <UDisplay::setup()+0xa>
    2bcc:	000f4240 	.word	0x000f4240
    2bd0:	2000959c 	.word	0x2000959c
    2bd4:	2000752c 	.word	0x2000752c
    2bd8:	20007548 	.word	0x20007548
    2bdc:	2000fac4 	.word	0x2000fac4
    2be0:	200074fc 	.word	0x200074fc
    2be4:	000186a0 	.word	0x000186a0
    2be8:	200096dc 	.word	0x200096dc
#define SENSE_CODE_KEYED(_asc_, _fmt_)
#define SENSE_CODE(_asc_, _ascq_, _msg_) case _asc_<<8 | _ascq_: return _msg_;
	ASC_NUM_LIST
    2bec:	00000000 	.word	0x00000000

00002bf0 <UDisplay::tick()>:
  tickCnt++;
    2bf0:	6943      	ldr	r3, [r0, #20]
  if (useDisplay)
    2bf2:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
  tickCnt++;
    2bf6:	3301      	adds	r3, #1
    2bf8:	6143      	str	r3, [r0, #20]
  if (useDisplay)
    2bfa:	b1ba      	cbz	r2, 2c2c <UDisplay::tick()+0x3c>
    bool fast = tickCnt % 26 == 0;
    2bfc:	4a88      	ldr	r2, [pc, #544]	; (2e20 <UDisplay::tick()+0x230>)
    bool slow = tickCnt % 155 == 0;
    2bfe:	4989      	ldr	r1, [pc, #548]	; (2e24 <UDisplay::tick()+0x234>)
{
    2c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bool fast = tickCnt % 26 == 0;
    2c04:	fb82 6203 	smull	r6, r2, r2, r3
    2c08:	17dd      	asrs	r5, r3, #31
    2c0a:	4604      	mov	r4, r0
    2c0c:	201a      	movs	r0, #26
    2c0e:	ebc5 05e2 	rsb	r5, r5, r2, asr #3
    bool slow = tickCnt % 155 == 0;
    2c12:	4a85      	ldr	r2, [pc, #532]	; (2e28 <UDisplay::tick()+0x238>)
{
    2c14:	b08e      	sub	sp, #56	; 0x38
    bool fast = tickCnt % 26 == 0;
    2c16:	fb00 3515 	mls	r5, r0, r5, r3
    bool slow = tickCnt % 155 == 0;
    2c1a:	fb01 2303 	mla	r3, r1, r3, r2
    2c1e:	4a83      	ldr	r2, [pc, #524]	; (2e2c <UDisplay::tick()+0x23c>)
    if (fast or slow)
    2c20:	4293      	cmp	r3, r2
    2c22:	d904      	bls.n	2c2e <UDisplay::tick()+0x3e>
    2c24:	b11d      	cbz	r5, 2c2e <UDisplay::tick()+0x3e>
}
    2c26:	b00e      	add	sp, #56	; 0x38
    2c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c2c:	4770      	bx	lr
      dss->clearDisplay();
    2c2e:	69a0      	ldr	r0, [r4, #24]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2c30:	f04f 1901 	mov.w	r9, #65537	; 0x10001
    2c34:	f7fe fd36 	bl	16a4 <Adafruit_SSD1306::clearDisplay()>
      dss->setCursor(42,16);             // Start at row 8 (line 2), 16 = row 3
    2c38:	69a0      	ldr	r0, [r4, #24]
    cursor_x = x;
    2c3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      snprintf(lineName, MAX_LINE_LENGTH, "%d %s\n", robot.deviceID, robot.getRobotName());
    2c3e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2e58 <UDisplay::tick()+0x268>
      dss->setTextSize(2);             // Draw 1x or 2X-scale text
    2c42:	2102      	movs	r1, #2
      snprintf(lineName, MAX_LINE_LENGTH, "%d %s\n", robot.deviceID, robot.getRobotName());
    2c44:	f104 061c 	add.w	r6, r4, #28
    2c48:	6103      	str	r3, [r0, #16]
      lineName[10] = '\0';
    2c4a:	2700      	movs	r7, #0
      dss->setTextSize(2);             // Draw 1x or 2X-scale text
    2c4c:	f00c fe6e 	bl	f92c <Adafruit_GFX::setTextSize(unsigned char)>
      snprintf(lineName, MAX_LINE_LENGTH, "%d %s\n", robot.deviceID, robot.getRobotName());
    2c50:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2c54:	69a2      	ldr	r2, [r4, #24]
    2c56:	4630      	mov	r0, r6
    2c58:	2128      	movs	r1, #40	; 0x28
    2c5a:	f8c2 9014 	str.w	r9, [r2, #20]
    2c5e:	f103 0226 	add.w	r2, r3, #38	; 0x26
    2c62:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
    2c66:	9200      	str	r2, [sp, #0]
    2c68:	4a71      	ldr	r2, [pc, #452]	; (2e30 <UDisplay::tick()+0x240>)
    2c6a:	f018 fda3 	bl	1b7b4 <snprintf>
      dss->print(F(lineName));
    2c6e:	f8d4 a018 	ldr.w	sl, [r4, #24]
							  return write((const uint8_t *)str, strlen(str)); }
    2c72:	4630      	mov	r0, r6
      lineName[10] = '\0';
    2c74:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
    2c78:	f01a fb22 	bl	1d2c0 <strlen>
    2c7c:	f8da 3000 	ldr.w	r3, [sl]
    2c80:	4631      	mov	r1, r6
    2c82:	4602      	mov	r2, r0
    2c84:	685b      	ldr	r3, [r3, #4]
    2c86:	4650      	mov	r0, sl
    2c88:	4798      	blx	r3
      dss->setTextSize(1);             // Normal 1:1 pixel scale
    2c8a:	69a0      	ldr	r0, [r4, #24]
    2c8c:	2101      	movs	r1, #1
    2c8e:	f00c fe4d 	bl	f92c <Adafruit_GFX::setTextSize(unsigned char)>
      if (irdist.useDistSensor)
    2c92:	4b68      	ldr	r3, [pc, #416]	; (2e34 <UDisplay::tick()+0x244>)
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c94:	ed98 7a05 	vldr	s14, [r8, #20]
      if (irdist.useDistSensor)
    2c98:	7f1b      	ldrb	r3, [r3, #28]
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2c9a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      if (irdist.useDistSensor)
    2c9e:	42bb      	cmp	r3, r7
      if (imu2.imuAvailable > 0)
    2ca0:	4b65      	ldr	r3, [pc, #404]	; (2e38 <UDisplay::tick()+0x248>)
    2ca2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      if (irdist.useDistSensor)
    2ca4:	bf08      	it	eq
    2ca6:	f04f 0e44 	moveq.w	lr, #68	; 0x44
      if (not motor.m1ok)
    2caa:	4b64      	ldr	r3, [pc, #400]	; (2e3c <UDisplay::tick()+0x24c>)
      if (irdist.useDistSensor)
    2cac:	bf18      	it	ne
    2cae:	f04f 0e64 	movne.w	lr, #100	; 0x64
      if (imu2.imuAvailable > 0)
    2cb2:	42ba      	cmp	r2, r7
      if (not motor.m1ok)
    2cb4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
      if (not motor.m2ok)
    2cb8:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
      if (imu2.imuAvailable > 0)
    2cbc:	bfd4      	ite	le
    2cbe:	f04f 0c49 	movle.w	ip, #73	; 0x49
    2cc2:	f04f 0c69 	movgt.w	ip, #105	; 0x69
      if (usb.usbIsUp)
    2cc6:	4b5e      	ldr	r3, [pc, #376]	; (2e40 <UDisplay::tick()+0x250>)
      if (not motor.m1ok)
    2cc8:	42ba      	cmp	r2, r7
      if (usbhost.manOverride)
    2cca:	4a5e      	ldr	r2, [pc, #376]	; (2e44 <UDisplay::tick()+0x254>)
      if (usb.usbIsUp)
    2ccc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
      if (usbhost.manOverride)
    2cd0:	f892 a014 	ldrb.w	sl, [r2, #20]
      if (not motor.m1ok)
    2cd4:	bf14      	ite	ne
    2cd6:	226d      	movne	r2, #109	; 0x6d
    2cd8:	224d      	moveq	r2, #77	; 0x4d
      if (not motor.m2ok)
    2cda:	42b9      	cmp	r1, r7
      if (asenc.asencValid[0])
    2cdc:	495a      	ldr	r1, [pc, #360]	; (2e48 <UDisplay::tick()+0x258>)
      if (not motor.m2ok)
    2cde:	bf14      	ite	ne
    2ce0:	206d      	movne	r0, #109	; 0x6d
    2ce2:	204d      	moveq	r0, #77	; 0x4d
      if (usb.usbIsUp)
    2ce4:	42bb      	cmp	r3, r7
      dss->setTextColor(SSD1306_WHITE);        // Draw white text
    2ce6:	69a3      	ldr	r3, [r4, #24]
      if (asenc.asencValid[0])
    2ce8:	7f09      	ldrb	r1, [r1, #28]
      if (usb.usbIsUp)
    2cea:	bf18      	it	ne
    2cec:	2675      	movne	r6, #117	; 0x75
    2cee:	f8c3 9014 	str.w	r9, [r3, #20]
    2cf2:	bf08      	it	eq
    2cf4:	2655      	moveq	r6, #85	; 0x55
    cursor_x = x;
    2cf6:	f44f 19c0 	mov.w	r9, #1572864	; 0x180000
      if (usbhost.manOverride)
    2cfa:	45ba      	cmp	sl, r7
    2cfc:	f8c3 9010 	str.w	r9, [r3, #16]
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2d00:	9205      	str	r2, [sp, #20]
      if (usbhost.manOverride)
    2d02:	bf14      	ite	ne
    2d04:	2267      	movne	r2, #103	; 0x67
    2d06:	2247      	moveq	r2, #71	; 0x47
      if (asenc.asencValid[0])
    2d08:	42b9      	cmp	r1, r7
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2d0a:	e9cd ce08 	strd	ip, lr, [sp, #32]
    2d0e:	e9cd 0606 	strd	r0, r6, [sp, #24]
    2d12:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
    2d16:	f104 066c 	add.w	r6, r4, #108	; 0x6c
    2d1a:	920a      	str	r2, [sp, #40]	; 0x28
      if (asenc.asencValid[0])
    2d1c:	bf0c      	ite	eq
    2d1e:	2241      	moveq	r2, #65	; 0x41
    2d20:	2261      	movne	r2, #97	; 0x61
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2d22:	9304      	str	r3, [sp, #16]
               float(service.time_us % 100000000) * 1e-6,
    2d24:	4b49      	ldr	r3, [pc, #292]	; (2e4c <UDisplay::tick()+0x25c>)
      dss->println(F(lineFree));
    2d26:	f104 0844 	add.w	r8, r4, #68	; 0x44
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2d2a:	920b      	str	r2, [sp, #44]	; 0x2c
    2d2c:	ed8d 7b02 	vstr	d7, [sp, #8]
               float(service.time_us % 100000000) * 1e-6,
    2d30:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    2d34:	a336      	add	r3, pc, #216	; (adr r3, 2e10 <UDisplay::tick()+0x220>)
    2d36:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d3a:	f016 fc3d 	bl	195b8 <__aeabi_uldivmod>
    2d3e:	ee07 2a90 	vmov	s15, r2
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2d42:	2128      	movs	r1, #40	; 0x28
    2d44:	4a42      	ldr	r2, [pc, #264]	; (2e50 <UDisplay::tick()+0x260>)
               float(service.time_us % 100000000) * 1e-6,
    2d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2d4a:	4630      	mov	r0, r6
    2d4c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 2e18 <UDisplay::tick()+0x228>
               float(service.time_us % 100000000) * 1e-6,
    2d50:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      snprintf(lineState, MAX_LINE_LENGTH, "%4.1f %4.1fV %d %c%c%c%c%c%c%c",
    2d54:	ee27 7b06 	vmul.f64	d7, d7, d6
    2d58:	ed8d 7b00 	vstr	d7, [sp]
    2d5c:	f018 fd2a 	bl	1b7b4 <snprintf>
      dss->println(F(lineState));    
    2d60:	f8d4 9018 	ldr.w	r9, [r4, #24]
    2d64:	4630      	mov	r0, r6
      lineState[MAX_LINE_LENGTH-1] = '\0';
    2d66:	f884 7093 	strb.w	r7, [r4, #147]	; 0x93
    2d6a:	f01a faa9 	bl	1d2c0 <strlen>
    2d6e:	f8d9 3000 	ldr.w	r3, [r9]
    2d72:	4602      	mov	r2, r0
    2d74:	4631      	mov	r1, r6
    2d76:	685b      	ldr	r3, [r3, #4]
    2d78:	4648      	mov	r0, r9
    2d7a:	4798      	blx	r3
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2d7c:	4648      	mov	r0, r9
    2d7e:	f012 ff1d 	bl	15bbc <Print::println()>
      dss->setCursor(0,0);             // Start at top-left corner
    2d82:	69a6      	ldr	r6, [r4, #24]
							  return write((const uint8_t *)str, strlen(str)); }
    2d84:	4640      	mov	r0, r8
    2d86:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    2d8a:	6137      	str	r7, [r6, #16]
    2d8c:	f01a fa98 	bl	1d2c0 <strlen>
    2d90:	6833      	ldr	r3, [r6, #0]
    2d92:	4602      	mov	r2, r0
    2d94:	4641      	mov	r1, r8
    2d96:	685b      	ldr	r3, [r3, #4]
    2d98:	4630      	mov	r0, r6
    2d9a:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2d9c:	4630      	mov	r0, r6
    2d9e:	f012 ff0d 	bl	15bbc <Print::println()>
      if (fast)
    2da2:	b1fd      	cbz	r5, 2de4 <UDisplay::tick()+0x1f4>
        dss->display(updSlowLine, updSlowCol++);
    2da4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    2da8:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    2dac:	1c53      	adds	r3, r2, #1
    2dae:	69a0      	ldr	r0, [r4, #24]
    2db0:	b2d2      	uxtb	r2, r2
    2db2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    2db6:	f7fe fc85 	bl	16c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>
        if (updSlowCol >= 8)
    2dba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    2dbe:	2b07      	cmp	r3, #7
    2dc0:	f77f af31 	ble.w	2c26 <UDisplay::tick()+0x36>
          updSlowLine = (updSlowLine + 1) % 3; // slow is first 3 lines only
    2dc4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    2dc8:	4b22      	ldr	r3, [pc, #136]	; (2e54 <UDisplay::tick()+0x264>)
    2dca:	3201      	adds	r2, #1
          updSlowCol = 0;
    2dcc:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
          updSlowLine = (updSlowLine + 1) % 3; // slow is first 3 lines only
    2dd0:	fb83 1302 	smull	r1, r3, r3, r2
    2dd4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    2dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2ddc:	1ad2      	subs	r2, r2, r3
    2dde:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
}
    2de2:	e720      	b.n	2c26 <UDisplay::tick()+0x36>
        dss->display(3, updFastCol);
    2de4:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    2de8:	2103      	movs	r1, #3
    2dea:	69a0      	ldr	r0, [r4, #24]
    2dec:	f7fe fc6a 	bl	16c4 <Adafruit_SSD1306::display(unsigned char, unsigned char)>
        updFastCol = (updFastCol + 1) % 8; // send 16 bytes in one burst
    2df0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    2df4:	3301      	adds	r3, #1
    2df6:	1afa      	subs	r2, r7, r3
    2df8:	f003 0307 	and.w	r3, r3, #7
    2dfc:	f002 0207 	and.w	r2, r2, #7
    2e00:	bf58      	it	pl
    2e02:	4253      	negpl	r3, r2
    2e04:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    2e08:	e70d      	b.n	2c26 <UDisplay::tick()+0x36>
    2e0a:	bf00      	nop
    2e0c:	f3af 8000 	nop.w
    2e10:	05f5e100 	.word	0x05f5e100
    2e14:	00000000 	.word	0x00000000
    2e18:	a0b5ed8d 	.word	0xa0b5ed8d
    2e1c:	3eb0c6f7 	.word	0x3eb0c6f7
    2e20:	4ec4ec4f 	.word	0x4ec4ec4f
    2e24:	592fe593 	.word	0x592fe593
    2e28:	00d3680d 	.word	0x00d3680d
    2e2c:	01a6d01a 	.word	0x01a6d01a
    2e30:	200074d4 	.word	0x200074d4
    2e34:	2000f19c 	.word	0x2000f19c
    2e38:	2000dfd0 	.word	0x2000dfd0
    2e3c:	2000f4c8 	.word	0x2000f4c8
    2e40:	2000fac4 	.word	0x2000fac4
    2e44:	2000b400 	.word	0x2000b400
    2e48:	2000e9dc 	.word	0x2000e9dc
    2e4c:	2000e0c8 	.word	0x2000e0c8
    2e50:	200074dc 	.word	0x200074dc
    2e54:	55555556 	.word	0x55555556
    2e58:	2000f660 	.word	0x2000f660

00002e5c <UDisplay::setLine(char const*)>:
{
    2e5c:	b510      	push	{r4, lr}
  strncpy(lineFree, line, MAX_LINE_LENGTH);
    2e5e:	2227      	movs	r2, #39	; 0x27
{
    2e60:	4604      	mov	r4, r0
  strncpy(lineFree, line, MAX_LINE_LENGTH);
    2e62:	3044      	adds	r0, #68	; 0x44
    2e64:	f018 ffa4 	bl	1bdb0 <strncpy>
  lineFree[MAX_LINE_LENGTH-1] = '\0';
    2e68:	2300      	movs	r3, #0
    2e6a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
}
    2e6e:	bd10      	pop	{r4, pc}

00002e70 <UDisplay::eePromSave()>:


/////////////////////////////////////

void UDisplay::eePromSave()
{
    2e70:	4603      	mov	r3, r0
  uint8_t v = useDisplay == 1;
  eeConfig.pushByte(v);
    2e72:	4802      	ldr	r0, [pc, #8]	; (2e7c <UDisplay::eePromSave()+0xc>)
    2e74:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
    2e78:	f000 b94a 	b.w	3110 <EEConfig::pushByte(unsigned char)>
    2e7c:	2000ebf4 	.word	0x2000ebf4

00002e80 <UDisplay::eePromLoad()>:
    return stringConfig;
    2e80:	4b0b      	ldr	r3, [pc, #44]	; (2eb0 <UDisplay::eePromLoad()+0x30>)

/////////////////////////////////////

void UDisplay::eePromLoad()
{
  if (not eeConfig.isStringConfig())
    2e82:	f893 2020 	ldrb.w	r2, [r3, #32]
    2e86:	b11a      	cbz	r2, 2e90 <UDisplay::eePromLoad()+0x10>
  }
  /** skip some bytes from the configuration stack
   * \param bytes is the number of bytes to skib. */
  void skipAddr(int bytes)
  {
    configAddr+=bytes;
    2e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2e8a:	3201      	adds	r2, #1
    2e8c:	625a      	str	r2, [r3, #36]	; 0x24
    2e8e:	4770      	bx	lr
{
    2e90:	b510      	push	{r4, lr}
    2e92:	4604      	mov	r4, r0
  {
    int f = eeConfig.readByte();
    2e94:	4618      	mov	r0, r3
    2e96:	f000 f987 	bl	31a8 <EEConfig::readByte()>
    if (f & 0x01)
    2e9a:	f010 0001 	ands.w	r0, r0, #1
    2e9e:	d003      	beq.n	2ea8 <UDisplay::eePromLoad()+0x28>
      useDisplay = true;
    2ea0:	2301      	movs	r3, #1
    2ea2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      useDisplay = false;
  }
  else
    // display is robot specific
    eeConfig.skipAddr(1);
}
    2ea6:	bd10      	pop	{r4, pc}
      useDisplay = false;
    2ea8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
    2eac:	bd10      	pop	{r4, pc}
    2eae:	bf00      	nop
    2eb0:	2000ebf4 	.word	0x2000ebf4

00002eb4 <_GLOBAL__sub_I_display>:
    2eb4:	b510      	push	{r4, lr}
    2eb6:	4c0b      	ldr	r4, [pc, #44]	; (2ee4 <_GLOBAL__sub_I_display+0x30>)
    2eb8:	4620      	mov	r0, r4
    2eba:	f009 f9b5 	bl	c228 <USubss::USubss()>
    2ebe:	2300      	movs	r3, #0
    2ec0:	4909      	ldr	r1, [pc, #36]	; (2ee8 <_GLOBAL__sub_I_display+0x34>)
    2ec2:	f04f 0c01 	mov.w	ip, #1
UDisplay display;
    2ec6:	4620      	mov	r0, r4
    2ec8:	61a3      	str	r3, [r4, #24]
    2eca:	6021      	str	r1, [r4, #0]
    2ecc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    2ed0:	f884 c0a0 	strb.w	ip, [r4, #160]	; 0xa0
    2ed4:	4a05      	ldr	r2, [pc, #20]	; (2eec <_GLOBAL__sub_I_display+0x38>)
    2ed6:	4906      	ldr	r1, [pc, #24]	; (2ef0 <_GLOBAL__sub_I_display+0x3c>)
    2ed8:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
}
    2edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UDisplay display;
    2ee0:	f016 b89a 	b.w	19018 <__aeabi_atexit>
    2ee4:	2000eb18 	.word	0x2000eb18
    2ee8:	20008128 	.word	0x20008128
    2eec:	20008f80 	.word	0x20008f80
    2ef0:	00002a91 	.word	0x00002a91

00002ef4 <EEConfig::sendHelp()>:
    used = false;
  return used;
}

void EEConfig::sendHelp()
{
    2ef4:	b570      	push	{r4, r5, r6, lr}
  const int MRL = 250;
  char reply[MRL];
  usb.send("# EE (configuration flash) --------\r\n");
    2ef6:	4e1d      	ldr	r6, [pc, #116]	; (2f6c <EEConfig::sendHelp()+0x78>)
{
    2ef8:	b0c0      	sub	sp, #256	; 0x100
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2efa:	4c1d      	ldr	r4, [pc, #116]	; (2f70 <EEConfig::sendHelp()+0x7c>)
  usb.send("# EE (configuration flash) --------\r\n");
    2efc:	491d      	ldr	r1, [pc, #116]	; (2f74 <EEConfig::sendHelp()+0x80>)
    2efe:	4630      	mov	r0, r6
    2f00:	f009 fb84 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2f04:	f10d 0c04 	add.w	ip, sp, #4
  usb.send(reply);
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2f08:	4d1b      	ldr	r5, [pc, #108]	; (2f78 <EEConfig::sendHelp()+0x84>)
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2f0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2f12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2f18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2f1c:	6823      	ldr	r3, [r4, #0]
  usb.send(reply);
    2f1e:	a901      	add	r1, sp, #4
    2f20:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2f22:	ac01      	add	r4, sp, #4
  snprintf(reply, MRL, "# -- \teew \tSave configuration to EE-Prom (flash)\r\n");
    2f24:	0c1a      	lsrs	r2, r3, #16
    2f26:	f82c 3b02 	strh.w	r3, [ip], #2
    2f2a:	f88c 2000 	strb.w	r2, [ip]
  usb.send(reply);
    2f2e:	f009 fb6d 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  usb.send(reply);
  snprintf(reply, MRL, "# -- \teeusb \tGet current configuration to USB\r\n");
    2f3e:	4d0f      	ldr	r5, [pc, #60]	; (2f7c <EEConfig::sendHelp()+0x88>)
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2f40:	c407      	stmia	r4!, {r0, r1, r2}
  usb.send(reply);
    2f42:	a901      	add	r1, sp, #4
  snprintf(reply, MRL, "# -- \teer \tRead configuration from EE-Prom\r\n");
    2f44:	7023      	strb	r3, [r4, #0]
  usb.send(reply);
    2f46:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \teeusb \tGet current configuration to USB\r\n");
    2f48:	ac01      	add	r4, sp, #4
  usb.send(reply);
    2f4a:	f009 fb5f 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \teeusb \tGet current configuration to USB\r\n");
    2f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usb.send(reply);
    2f5e:	a901      	add	r1, sp, #4
    2f60:	4630      	mov	r0, r6
    2f62:	f009 fb53 	bl	c60c <UUSB::send(char const*)>
}
    2f66:	b040      	add	sp, #256	; 0x100
    2f68:	bd70      	pop	{r4, r5, r6, pc}
    2f6a:	bf00      	nop
    2f6c:	2000fac4 	.word	0x2000fac4
    2f70:	20006420 	.word	0x20006420
    2f74:	200063f8 	.word	0x200063f8
    2f78:	20006454 	.word	0x20006454
    2f7c:	20006484 	.word	0x20006484

00002f80 <EEConfig::~EEConfig()>:
class EEConfig : public USubss
    2f80:	b510      	push	{r4, lr}
    2f82:	4b05      	ldr	r3, [pc, #20]	; (2f98 <EEConfig::~EEConfig()+0x18>)
    2f84:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    2f86:	6840      	ldr	r0, [r0, #4]
    2f88:	6023      	str	r3, [r4, #0]
	if (__p)
    2f8a:	b118      	cbz	r0, 2f94 <EEConfig::~EEConfig()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    2f8c:	68e1      	ldr	r1, [r4, #12]
    2f8e:	1a09      	subs	r1, r1, r0
    2f90:	f013 fc24 	bl	167dc <operator delete(void*, unsigned int)>
    2f94:	4620      	mov	r0, r4
    2f96:	bd10      	pop	{r4, pc}
    2f98:	200080a0 	.word	0x200080a0

00002f9c <EEConfig::EEConfig()>:
EEConfig::EEConfig()
    2f9c:	b538      	push	{r3, r4, r5, lr}
    2f9e:	4604      	mov	r4, r0
    2fa0:	f009 f942 	bl	c228 <USubss::USubss()>
  sbufCnt = 0;
    2fa4:	2300      	movs	r3, #0
EEConfig::EEConfig()
    2fa6:	480a      	ldr	r0, [pc, #40]	; (2fd0 <EEConfig::EEConfig()+0x34>)
    2fa8:	4a0a      	ldr	r2, [pc, #40]	; (2fd4 <EEConfig::EEConfig()+0x38>)
    2faa:	490b      	ldr	r1, [pc, #44]	; (2fd8 <EEConfig::EEConfig()+0x3c>)
    2fac:	4d0b      	ldr	r5, [pc, #44]	; (2fdc <EEConfig::EEConfig()+0x40>)
  sbufCnt = 0;
    2fae:	61e3      	str	r3, [r4, #28]
  stringConfig = false;
    2fb0:	f884 3020 	strb.w	r3, [r4, #32]
  config = NULL;
    2fb4:	61a3      	str	r3, [r4, #24]
EEConfig::EEConfig()
    2fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2fba:	62e0      	str	r0, [r4, #44]	; 0x2c
    2fbc:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    2fbe:	4620      	mov	r0, r4
EEConfig::EEConfig()
    2fc0:	6025      	str	r5, [r4, #0]
    2fc2:	63a1      	str	r1, [r4, #56]	; 0x38
    2fc4:	6422      	str	r2, [r4, #64]	; 0x40
    2fc6:	6163      	str	r3, [r4, #20]
    2fc8:	e9c4 210c 	strd	r2, r1, [r4, #48]	; 0x30
}
    2fcc:	bd38      	pop	{r3, r4, r5, pc}
    2fce:	bf00      	nop
    2fd0:	200064b4 	.word	0x200064b4
    2fd4:	20006ae8 	.word	0x20006ae8
    2fd8:	20007180 	.word	0x20007180
    2fdc:	200080ec 	.word	0x200080ec

00002fe0 <EEConfig::stringConfigToUSB(unsigned char const*, int)>:



void EEConfig::stringConfigToUSB(const uint8_t * configBuffer, int configBufferLength)
{
    2fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fe4:	b09f      	sub	sp, #124	; 0x7c
  int length = configBufferLength;
  const uint8_t * cfg = configBuffer;
  if (cfg == NULL)
    2fe6:	9101      	str	r1, [sp, #4]
    2fe8:	2900      	cmp	r1, #0
    2fea:	d05d      	beq.n	30a8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xc8>
    2fec:	4690      	mov	r8, r2
    char s[MSL];
    char * p1 = s;
    int n = 0;
    int line = 0;
    int i = 0;
    while (i < length)
    2fee:	f1b8 0f00 	cmp.w	r8, #0
    2ff2:	dd41      	ble.n	3078 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x98>
    int i = 0;
    2ff4:	2500      	movs	r5, #0
      snprintf(s, MSL, "#cfg%02d", line++);
      n += strlen(p1);
      p1 = &s[n];
      for (int j = 0; j < 32; j++)
      {
        snprintf(p1, MSL-n, " %02x", cfg[i]);
    2ff6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 30d4 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xf4>
    int line = 0;
    2ffa:	46ab      	mov	fp, r5
      snprintf(s, MSL, "#cfg%02d", line++);
    2ffc:	465b      	mov	r3, fp
    2ffe:	4a31      	ldr	r2, [pc, #196]	; (30c4 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe4>)
    3000:	216e      	movs	r1, #110	; 0x6e
    3002:	a802      	add	r0, sp, #8
    3004:	f018 fbd6 	bl	1b7b4 <snprintf>
      n += strlen(p1);
    3008:	a802      	add	r0, sp, #8
    300a:	f01a f959 	bl	1d2c0 <strlen>
    300e:	1e6f      	subs	r7, r5, #1
    3010:	9b01      	ldr	r3, [sp, #4]
      snprintf(s, MSL, "#cfg%02d", line++);
    3012:	f10b 0b01 	add.w	fp, fp, #1
      n += strlen(p1);
    3016:	f105 0920 	add.w	r9, r5, #32
    301a:	4604      	mov	r4, r0
      p1 = &s[n];
    301c:	441f      	add	r7, r3
    301e:	f100 0308 	add.w	r3, r0, #8
    3022:	eb0d 0603 	add.w	r6, sp, r3
      for (int j = 0; j < 32; j++)
    3026:	e001      	b.n	302c <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x4c>
    3028:	454d      	cmp	r5, r9
    302a:	d028      	beq.n	307e <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x9e>
        snprintf(p1, MSL-n, " %02x", cfg[i]);
    302c:	f1c4 016e 	rsb	r1, r4, #110	; 0x6e
    3030:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    3034:	4652      	mov	r2, sl
    3036:	4630      	mov	r0, r6
    3038:	f018 fbbc 	bl	1b7b4 <snprintf>
        n += strlen(p1);
    303c:	4630      	mov	r0, r6
    303e:	f01a f93f 	bl	1d2c0 <strlen>
        p1 = &s[n];
        i++;
    3042:	3501      	adds	r5, #1
        n += strlen(p1);
    3044:	4404      	add	r4, r0
        if (i >= length)
    3046:	4545      	cmp	r5, r8
        p1 = &s[n];
    3048:	f104 0308 	add.w	r3, r4, #8
    304c:	eb0d 0603 	add.w	r6, sp, r3
        if (i >= length)
    3050:	dbea      	blt.n	3028 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x48>
      if (i < length)
      { // not finished, so add a linefeed escape character
        // to make it easier to copy-paste into code
        *p1++ = '\\';
      }
      *p1++ = '\n';
    3052:	f104 0378 	add.w	r3, r4, #120	; 0x78
    3056:	250a      	movs	r5, #10
      *p1++ = '\0';
      usb.send(s);
    3058:	a902      	add	r1, sp, #8
    305a:	481b      	ldr	r0, [pc, #108]	; (30c8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
      *p1++ = '\n';
    305c:	eb0d 0203 	add.w	r2, sp, r3
      *p1++ = '\0';
    3060:	2300      	movs	r3, #0
      *p1++ = '\n';
    3062:	f802 5c70 	strb.w	r5, [r2, #-112]
      *p1++ = '\0';
    3066:	7073      	strb	r3, [r6, #1]
      usb.send(s);
    3068:	f009 fad0 	bl	c60c <UUSB::send(char const*)>
      if (n > MSL - 4)
    306c:	2c6a      	cmp	r4, #106	; 0x6a
    306e:	dd03      	ble.n	3078 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x98>
        usb.send("# stringConfigToUSB error\n");
    3070:	4916      	ldr	r1, [pc, #88]	; (30cc <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xec>)
    3072:	4815      	ldr	r0, [pc, #84]	; (30c8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
    3074:	f009 faca 	bl	c60c <UUSB::send(char const*)>
      p1 = s;
      n = 0;
    }
  }
}
    3078:	b01f      	add	sp, #124	; 0x7c
    307a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *p1++ = '\\';
    307e:	f104 0378 	add.w	r3, r4, #120	; 0x78
    3082:	225c      	movs	r2, #92	; 0x5c
      usb.send(s);
    3084:	a902      	add	r1, sp, #8
    3086:	4810      	ldr	r0, [pc, #64]	; (30c8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
        *p1++ = '\\';
    3088:	446b      	add	r3, sp
    308a:	f803 2c70 	strb.w	r2, [r3, #-112]
      *p1++ = '\n';
    308e:	230a      	movs	r3, #10
    3090:	7073      	strb	r3, [r6, #1]
      *p1++ = '\0';
    3092:	2300      	movs	r3, #0
    3094:	70b3      	strb	r3, [r6, #2]
      usb.send(s);
    3096:	f009 fab9 	bl	c60c <UUSB::send(char const*)>
      if (n > MSL - 4)
    309a:	2c6a      	cmp	r4, #106	; 0x6a
    309c:	ddae      	ble.n	2ffc <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x1c>
        usb.send("# stringConfigToUSB error\n");
    309e:	490b      	ldr	r1, [pc, #44]	; (30cc <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xec>)
    30a0:	4809      	ldr	r0, [pc, #36]	; (30c8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
    30a2:	f009 fab3 	bl	c60c <UUSB::send(char const*)>
    while (i < length)
    30a6:	e7a9      	b.n	2ffc <EEConfig::stringConfigToUSB(unsigned char const*, int)+0x1c>
    cfg = config;
    30a8:	6983      	ldr	r3, [r0, #24]
    length = configAddrMax;
    30aa:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    cfg = config;
    30ae:	9301      	str	r3, [sp, #4]
  if (cfg == NULL)
    30b0:	2b00      	cmp	r3, #0
    30b2:	d19c      	bne.n	2fee <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe>
    usb.send("# error: configuration not generated as string\n");
    30b4:	4906      	ldr	r1, [pc, #24]	; (30d0 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xf0>)
    30b6:	4804      	ldr	r0, [pc, #16]	; (30c8 <EEConfig::stringConfigToUSB(unsigned char const*, int)+0xe8>)
}
    30b8:	b01f      	add	sp, #124	; 0x7c
    30ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usb.send("# error: configuration not generated as string\n");
    30be:	f009 baa5 	b.w	c60c <UUSB::send(char const*)>
    30c2:	bf00      	nop
    30c4:	200063c0 	.word	0x200063c0
    30c8:	2000fac4 	.word	0x2000fac4
    30cc:	200063d4 	.word	0x200063d4
    30d0:	20006390 	.word	0x20006390
    30d4:	200063cc 	.word	0x200063cc

000030d8 <EEConfig::push32(unsigned long)>:
  
void EEConfig::push32(uint32_t value)
{
    30d8:	b538      	push	{r3, r4, r5, lr}
  //   const int MSL = 100;
  //   char s[MSL];
  //   snprintf(s, MSL, "# ee saved: at %lu, value %lu\r\n", eePushAdr, value);
  //   usb.send(s);
  //
  if (stringConfig)
    30da:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    30de:	4604      	mov	r4, r0
    30e0:	460d      	mov	r5, r1
  if (stringConfig)
    30e2:	b123      	cbz	r3, 30ee <EEConfig::push32(unsigned long)+0x16>
  {
    if (config != NULL)
    30e4:	6983      	ldr	r3, [r0, #24]
    30e6:	b153      	cbz	r3, 30fe <EEConfig::push32(unsigned long)+0x26>
      memcpy(&config[configAddr], &value, 4);
    30e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
    30ea:	5099      	str	r1, [r3, r2]
    30ec:	e007      	b.n	30fe <EEConfig::push32(unsigned long)+0x26>
  }
  else
  {
    eeprom_busy_wait();
    30ee:	f013 f8ad 	bl	1624c <eeprom_is_ready>
    30f2:	2800      	cmp	r0, #0
    30f4:	d0fb      	beq.n	30ee <EEConfig::push32(unsigned long)+0x16>
    eeprom_write_dword((uint32_t*)configAddr, value);
    30f6:	4629      	mov	r1, r5
    30f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    30fa:	f013 fa21 	bl	16540 <eeprom_write_dword>
  }
  configAddr += 4;
  if (configAddr > configAddrMax)
    30fe:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
  configAddr += 4;
    3102:	3304      	adds	r3, #4
  if (configAddr > configAddrMax)
    3104:	4293      	cmp	r3, r2
  configAddr += 4;
    3106:	6263      	str	r3, [r4, #36]	; 0x24
    configAddrMax = configAddr;
    3108:	bfc8      	it	gt
    310a:	62a3      	strgt	r3, [r4, #40]	; 0x28
}
    310c:	bd38      	pop	{r3, r4, r5, pc}
    310e:	bf00      	nop

00003110 <EEConfig::pushByte(unsigned char)>:

////////////////////////////////////////////////

void EEConfig::pushByte(uint8_t value)
{ // save one byte
    3110:	b538      	push	{r3, r4, r5, lr}
  if (stringConfig)
    3112:	f890 3020 	ldrb.w	r3, [r0, #32]
{ // save one byte
    3116:	4604      	mov	r4, r0
    3118:	460d      	mov	r5, r1
  if (stringConfig)
    311a:	b123      	cbz	r3, 3126 <EEConfig::pushByte(unsigned char)+0x16>
  {
    if (config != NULL)
    311c:	6983      	ldr	r3, [r0, #24]
    311e:	b153      	cbz	r3, 3136 <EEConfig::pushByte(unsigned char)+0x26>
      config[configAddr] = value;
    3120:	6a42      	ldr	r2, [r0, #36]	; 0x24
    3122:	5499      	strb	r1, [r3, r2]
    3124:	e007      	b.n	3136 <EEConfig::pushByte(unsigned char)+0x26>
  }
  else
  {
    eeprom_busy_wait();
    3126:	f013 f891 	bl	1624c <eeprom_is_ready>
    312a:	2800      	cmp	r0, #0
    312c:	d0fb      	beq.n	3126 <EEConfig::pushByte(unsigned char)+0x16>
    eeprom_write_byte((uint8_t*)configAddr, value);
    312e:	4629      	mov	r1, r5
    3130:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3132:	f013 f95f 	bl	163f4 <eeprom_write_byte>
  }
  configAddr++;
  if (configAddr > configAddrMax)
    3136:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
  configAddr++;
    313a:	3301      	adds	r3, #1
  if (configAddr > configAddrMax)
    313c:	4293      	cmp	r3, r2
  configAddr++;
    313e:	6263      	str	r3, [r4, #36]	; 0x24
    configAddrMax = configAddr;
    3140:	bfc8      	it	gt
    3142:	62a3      	strgt	r3, [r4, #40]	; 0x28
}
    3144:	bd38      	pop	{r3, r4, r5, pc}
    3146:	bf00      	nop

00003148 <EEConfig::pushWord(unsigned short)>:

////////////////////////////////////////////////

void EEConfig::pushWord(uint16_t value)
{ // save one byte
    3148:	b538      	push	{r3, r4, r5, lr}
  if (stringConfig)
    314a:	f890 3020 	ldrb.w	r3, [r0, #32]
{ // save one byte
    314e:	4604      	mov	r4, r0
    3150:	460d      	mov	r5, r1
  if (stringConfig)
    3152:	b123      	cbz	r3, 315e <EEConfig::pushWord(unsigned short)+0x16>
  {
    if (config != NULL)
    3154:	6983      	ldr	r3, [r0, #24]
    3156:	b153      	cbz	r3, 316e <EEConfig::pushWord(unsigned short)+0x26>
      memcpy(&config[configAddr], &value, 2);
    3158:	6a42      	ldr	r2, [r0, #36]	; 0x24
    315a:	5299      	strh	r1, [r3, r2]
    315c:	e007      	b.n	316e <EEConfig::pushWord(unsigned short)+0x26>
  }
  else
  {
    eeprom_busy_wait();
    315e:	f013 f875 	bl	1624c <eeprom_is_ready>
    3162:	2800      	cmp	r0, #0
    3164:	d0fb      	beq.n	315e <EEConfig::pushWord(unsigned short)+0x16>
    eeprom_write_word((uint16_t*)configAddr, value);
    3166:	4629      	mov	r1, r5
    3168:	6a60      	ldr	r0, [r4, #36]	; 0x24
    316a:	f013 f9dd 	bl	16528 <eeprom_write_word>
  }
  configAddr += 2;
  if (configAddr > configAddrMax)
    316e:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
  configAddr += 2;
    3172:	3302      	adds	r3, #2
  if (configAddr > configAddrMax)
    3174:	4293      	cmp	r3, r2
  configAddr += 2;
    3176:	6263      	str	r3, [r4, #36]	; 0x24
    configAddrMax = configAddr;
    3178:	bfc8      	it	gt
    317a:	62a3      	strgt	r3, [r4, #40]	; 0x28
}
    317c:	bd38      	pop	{r3, r4, r5, pc}
    317e:	bf00      	nop

00003180 <EEConfig::read32()>:

//////////////////////////////////////////////

uint32_t EEConfig::read32()
{
    3180:	b538      	push	{r3, r4, r5, lr}
  uint32_t b;
  if (stringConfig)
    3182:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    3186:	4604      	mov	r4, r0
  if (stringConfig)
    3188:	b133      	cbz	r3, 3198 <EEConfig::read32()+0x18>
  {
    if (config != NULL)
    318a:	6980      	ldr	r0, [r0, #24]
      b = *(uint32_t *)&config[configAddr];
    318c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if (config != NULL)
    318e:	b100      	cbz	r0, 3192 <EEConfig::read32()+0x12>
      b = *(uint32_t *)&config[configAddr];
    3190:	5940      	ldr	r0, [r0, r5]
  }
  else
  {
    b = eeprom_read_dword((uint32_t*)configAddr);
  }
  configAddr += 4;
    3192:	3504      	adds	r5, #4
    3194:	6265      	str	r5, [r4, #36]	; 0x24
  return b;
}
    3196:	bd38      	pop	{r3, r4, r5, pc}
    b = eeprom_read_dword((uint32_t*)configAddr);
    3198:	6a45      	ldr	r5, [r0, #36]	; 0x24
    319a:	4628      	mov	r0, r5
  configAddr += 4;
    319c:	3504      	adds	r5, #4
    b = eeprom_read_dword((uint32_t*)configAddr);
    319e:	f013 f83d 	bl	1621c <eeprom_read_dword>
  configAddr += 4;
    31a2:	6265      	str	r5, [r4, #36]	; 0x24
}
    31a4:	bd38      	pop	{r3, r4, r5, pc}
    31a6:	bf00      	nop

000031a8 <EEConfig::readByte()>:

/////////////////////////////////////////////////

uint8_t EEConfig::readByte()
{
    31a8:	b538      	push	{r3, r4, r5, lr}
  uint8_t b;
  if (stringConfig)
    31aa:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    31ae:	4604      	mov	r4, r0
  if (stringConfig)
    31b0:	b133      	cbz	r3, 31c0 <EEConfig::readByte()+0x18>
  {
    if (config != NULL)
    31b2:	6980      	ldr	r0, [r0, #24]
      b = config[configAddr];
    31b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if (config != NULL)
    31b6:	b100      	cbz	r0, 31ba <EEConfig::readByte()+0x12>
      b = config[configAddr];
    31b8:	5d40      	ldrb	r0, [r0, r5]
  }
  else
  {
    b = eeprom_read_byte((uint8_t*)configAddr);
  }
  configAddr++;
    31ba:	3501      	adds	r5, #1
    31bc:	6265      	str	r5, [r4, #36]	; 0x24
  return b;
}
    31be:	bd38      	pop	{r3, r4, r5, pc}
    b = eeprom_read_byte((uint8_t*)configAddr);
    31c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    31c2:	4628      	mov	r0, r5
  configAddr++;
    31c4:	3501      	adds	r5, #1
    b = eeprom_read_byte((uint8_t*)configAddr);
    31c6:	f012 ffdf 	bl	16188 <eeprom_read_byte>
  configAddr++;
    31ca:	6265      	str	r5, [r4, #36]	; 0x24
}
    31cc:	bd38      	pop	{r3, r4, r5, pc}
    31ce:	bf00      	nop

000031d0 <EEConfig::readWord()>:

/////////////////////////////////////////////////

uint16_t EEConfig::readWord()
{
    31d0:	b538      	push	{r3, r4, r5, lr}
  uint16_t b;
  if (stringConfig)
    31d2:	f890 3020 	ldrb.w	r3, [r0, #32]
{
    31d6:	4604      	mov	r4, r0
  if (stringConfig)
    31d8:	b133      	cbz	r3, 31e8 <EEConfig::readWord()+0x18>
  {
    if (config != NULL)
    31da:	6980      	ldr	r0, [r0, #24]
      b = *(uint16_t *)&config[configAddr];
    31dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if (config != NULL)
    31de:	b100      	cbz	r0, 31e2 <EEConfig::readWord()+0x12>
      b = *(uint16_t *)&config[configAddr];
    31e0:	5b40      	ldrh	r0, [r0, r5]
  }
  else
  {
    b = eeprom_read_word((uint16_t*)configAddr);
  }
  configAddr += 2;
    31e2:	3502      	adds	r5, #2
    31e4:	6265      	str	r5, [r4, #36]	; 0x24
  return b;
}
    31e6:	bd38      	pop	{r3, r4, r5, pc}
    b = eeprom_read_word((uint16_t*)configAddr);
    31e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    31ea:	4628      	mov	r0, r5
  configAddr += 2;
    31ec:	3502      	adds	r5, #2
    b = eeprom_read_word((uint16_t*)configAddr);
    31ee:	f013 f809 	bl	16204 <eeprom_read_word>
  configAddr += 2;
    31f2:	6265      	str	r5, [r4, #36]	; 0x24
}
    31f4:	bd38      	pop	{r3, r4, r5, pc}
    31f6:	bf00      	nop

000031f8 <EEConfig::eePromSaveStatus(bool)>:
  
///////////////////////////////////////////////////

void EEConfig::eePromSaveStatus(bool toUSB)
{ // reserve first 4 bytes for dword count
    31f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  char s[MSL];
  // debug
  // debug end
  stringConfig = toUSB;
  // save space for used bytes in configuration
  configAddr = 4;
    31fa:	2304      	movs	r3, #4
{ // reserve first 4 bytes for dword count
    31fc:	4604      	mov	r4, r0
    31fe:	b09d      	sub	sp, #116	; 0x74
  configAddrMax = 4;
  // save revision number
  push32(command.getRevisionNumber());
  // main values
  robot.eePromSave();
    3200:	4f33      	ldr	r7, [pc, #204]	; (32d0 <EEConfig::eePromSaveStatus(bool)+0xd8>)
  configAddr = 4;
    3202:	6263      	str	r3, [r4, #36]	; 0x24
{ // reserve first 4 bytes for dword count
    3204:	460d      	mov	r5, r1
  configAddrMax = 4;
    3206:	62a3      	str	r3, [r4, #40]	; 0x28
  stringConfig = toUSB;
    3208:	f884 1020 	strb.w	r1, [r4, #32]
  push32(command.getRevisionNumber());
    320c:	4831      	ldr	r0, [pc, #196]	; (32d4 <EEConfig::eePromSaveStatus(bool)+0xdc>)
    320e:	f7ff f8a7 	bl	2360 <UCommand::getRevisionNumber()>
    3212:	4601      	mov	r1, r0
    3214:	4620      	mov	r0, r4
    3216:	f7ff ff5f 	bl	30d8 <EEConfig::push32(unsigned long)>
  robot.eePromSave();
    321a:	4638      	mov	r0, r7
    321c:	f008 fa1e 	bl	b65c <URobot::eePromSave()>
  // save gyro zero offset
  imu2.eePromSave();
    3220:	482d      	ldr	r0, [pc, #180]	; (32d8 <EEConfig::eePromSaveStatus(bool)+0xe0>)
    3222:	f001 fbcf 	bl	49c4 <UImu2::eePromSave()>
  // logger values
  logger.eePromSaveStatusLog();
    3226:	482d      	ldr	r0, [pc, #180]	; (32dc <EEConfig::eePromSaveStatus(bool)+0xe4>)
    3228:	f005 f90e 	bl	8448 <ULog::eePromSaveStatusLog()>
  // save line sensor calibration
  ls.eePromSaveLinesensor();
    322c:	482c      	ldr	r0, [pc, #176]	; (32e0 <EEConfig::eePromSaveStatus(bool)+0xe8>)
    322e:	f003 fd27 	bl	6c80 <ULineSensor::eePromSaveLinesensor()>
  // and IR distance sensor
  irdist.eePromSave();
    3232:	482c      	ldr	r0, [pc, #176]	; (32e4 <EEConfig::eePromSaveStatus(bool)+0xec>)
    3234:	f002 fa10 	bl	5658 <UIrDist::eePromSave()>
  // save servo configuration
  servo.eePromSave();
    3238:	482b      	ldr	r0, [pc, #172]	; (32e8 <EEConfig::eePromSaveStatus(bool)+0xf0>)
    323a:	f008 ff0f 	bl	c05c <UServo::eePromSave()>
  // encoder calibration values
  encoder.eePromSave();
    323e:	482b      	ldr	r0, [pc, #172]	; (32ec <EEConfig::eePromSaveStatus(bool)+0xf4>)
    3240:	f000 fdcc 	bl	3ddc <UEncoder::eePromSave()>
  display.eePromSave();
    3244:	482a      	ldr	r0, [pc, #168]	; (32f0 <EEConfig::eePromSaveStatus(bool)+0xf8>)
    3246:	f7ff fe13 	bl	2e70 <UDisplay::eePromSave()>
  motor.eePromSave();
    324a:	482a      	ldr	r0, [pc, #168]	; (32f4 <EEConfig::eePromSaveStatus(bool)+0xfc>)
    324c:	f005 fe28 	bl	8ea0 <UMotor::eePromSave()>
  asenc.eePromSave();
    3250:	4829      	ldr	r0, [pc, #164]	; (32f8 <EEConfig::eePromSaveStatus(bool)+0x100>)
    3252:	f7fe ff87 	bl	2164 <UAsEnc::eePromSave()>
  motortest.eePromSave();
    3256:	4829      	ldr	r0, [pc, #164]	; (32fc <EEConfig::eePromSaveStatus(bool)+0x104>)
    3258:	f006 f86a 	bl	9330 <UMotorTest::eePromSave()>
  
//   eePromSaveEncoderCalibrateInfo();
  // then save length
  uint32_t cnt = configAddr;
  configAddr = 0;
    325c:	2100      	movs	r1, #0
  uint32_t cnt = configAddr;
    325e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  configAddr = 0;
    3260:	6261      	str	r1, [r4, #36]	; 0x24
    return deviceID > 0 and deviceID < MAX_ROBOT_NAMES;
    3262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3264:	3b01      	subs	r3, #1
  if (not robot.robotIDvalid())
    3266:	2b95      	cmp	r3, #149	; 0x95
    3268:	d91b      	bls.n	32a2 <EEConfig::eePromSaveStatus(bool)+0xaa>
  {
    // ignore ee-prom at next reboot
    push32(0);
    snprintf(s, MSL, "# EE-prom D set to default values at next reboot\r\n");
    326a:	af03      	add	r7, sp, #12
    326c:	4d24      	ldr	r5, [pc, #144]	; (3300 <EEConfig::eePromSaveStatus(bool)+0x108>)
    push32(0);
    326e:	4620      	mov	r0, r4
    3270:	f7ff ff32 	bl	30d8 <EEConfig::push32(unsigned long)>
    snprintf(s, MSL, "# EE-prom D set to default values at next reboot\r\n");
    3274:	46bc      	mov	ip, r7
    3276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3278:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    327c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    327e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3288:	682b      	ldr	r3, [r5, #0]
    328a:	f82c 3b02 	strh.w	r3, [ip], #2
    328e:	0c1b      	lsrs	r3, r3, #16
    3290:	f88c 3000 	strb.w	r3, [ip]
    else
      snprintf(s, MSL, "# Saved %lu bytes (of %d) to EE-prom D\r\n", cnt, EEPROM_SIZE);
  }
  configAddr = cnt;
  // tell user
  usb.send(s);
    3294:	4639      	mov	r1, r7
  configAddr = cnt;
    3296:	6266      	str	r6, [r4, #36]	; 0x24
  usb.send(s);
    3298:	481a      	ldr	r0, [pc, #104]	; (3304 <EEConfig::eePromSaveStatus(bool)+0x10c>)
    329a:	f009 f9b7 	bl	c60c <UUSB::send(char const*)>
}
    329e:	b01d      	add	sp, #116	; 0x74
    32a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    push32(cnt);
    32a2:	4631      	mov	r1, r6
    32a4:	4620      	mov	r0, r4
    32a6:	f7ff ff17 	bl	30d8 <EEConfig::push32(unsigned long)>
      snprintf(s, MSL, "# Send %lu config bytes (of %d) to USB\r\n", cnt, EEPROM_SIZE);
    32aa:	f241 02bc 	movw	r2, #4284	; 0x10bc
    32ae:	af03      	add	r7, sp, #12
    32b0:	4633      	mov	r3, r6
    32b2:	9200      	str	r2, [sp, #0]
    if (toUSB)
    32b4:	b12d      	cbz	r5, 32c2 <EEConfig::eePromSaveStatus(bool)+0xca>
      snprintf(s, MSL, "# Send %lu config bytes (of %d) to USB\r\n", cnt, EEPROM_SIZE);
    32b6:	4a14      	ldr	r2, [pc, #80]	; (3308 <EEConfig::eePromSaveStatus(bool)+0x110>)
    32b8:	2164      	movs	r1, #100	; 0x64
    32ba:	4638      	mov	r0, r7
    32bc:	f018 fa7a 	bl	1b7b4 <snprintf>
    32c0:	e7e8      	b.n	3294 <EEConfig::eePromSaveStatus(bool)+0x9c>
      snprintf(s, MSL, "# Saved %lu bytes (of %d) to EE-prom D\r\n", cnt, EEPROM_SIZE);
    32c2:	4a12      	ldr	r2, [pc, #72]	; (330c <EEConfig::eePromSaveStatus(bool)+0x114>)
    32c4:	2164      	movs	r1, #100	; 0x64
    32c6:	4638      	mov	r0, r7
    32c8:	f018 fa74 	bl	1b7b4 <snprintf>
    32cc:	e7e2      	b.n	3294 <EEConfig::eePromSaveStatus(bool)+0x9c>
    32ce:	bf00      	nop
    32d0:	2000f660 	.word	0x2000f660
    32d4:	2000ea18 	.word	0x2000ea18
    32d8:	2000dfd0 	.word	0x2000dfd0
    32dc:	2000f24c 	.word	0x2000f24c
    32e0:	2000f390 	.word	0x2000f390
    32e4:	2000f19c 	.word	0x2000f19c
    32e8:	2000fa64 	.word	0x2000fa64
    32ec:	2000ec40 	.word	0x2000ec40
    32f0:	2000eb18 	.word	0x2000eb18
    32f4:	2000f4c8 	.word	0x2000f4c8
    32f8:	2000e9dc 	.word	0x2000e9dc
    32fc:	2000f524 	.word	0x2000f524
    3300:	20006304 	.word	0x20006304
    3304:	2000fac4 	.word	0x2000fac4
    3308:	20006338 	.word	0x20006338
    330c:	20006364 	.word	0x20006364

00003310 <EEConfig::decode(char const*) [clone .part.0]>:
bool EEConfig::decode(const char* buf)
    3310:	b530      	push	{r4, r5, lr}
  else if (strncmp(buf, "eew", 3) == 0)
    3312:	780a      	ldrb	r2, [r1, #0]
bool EEConfig::decode(const char* buf)
    3314:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
    3318:	460b      	mov	r3, r1
    331a:	4604      	mov	r4, r0
  else if (strncmp(buf, "eew", 3) == 0)
    331c:	2a65      	cmp	r2, #101	; 0x65
    331e:	d10b      	bne.n	3338 <EEConfig::decode(char const*) [clone .part.0]+0x28>
    3320:	784a      	ldrb	r2, [r1, #1]
    3322:	2a65      	cmp	r2, #101	; 0x65
    3324:	d108      	bne.n	3338 <EEConfig::decode(char const*) [clone .part.0]+0x28>
    3326:	7889      	ldrb	r1, [r1, #2]
    3328:	3977      	subs	r1, #119	; 0x77
    332a:	d105      	bne.n	3338 <EEConfig::decode(char const*) [clone .part.0]+0x28>
    eePromSaveStatus(false);
    332c:	f7ff ff64 	bl	31f8 <EEConfig::eePromSaveStatus(bool)>
  bool used = true;
    3330:	2001      	movs	r0, #1
}
    3332:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
    3336:	bd30      	pop	{r4, r5, pc}
  else if (strncmp(buf, "eeusb", 5) == 0)
    3338:	2205      	movs	r2, #5
    333a:	490e      	ldr	r1, [pc, #56]	; (3374 <EEConfig::decode(char const*) [clone .part.0]+0x64>)
    333c:	4618      	mov	r0, r3
    333e:	f018 fcf1 	bl	1bd24 <strncmp>
    3342:	4605      	mov	r5, r0
    3344:	b118      	cbz	r0, 334e <EEConfig::decode(char const*) [clone .part.0]+0x3e>
    used = false;
    3346:	2000      	movs	r0, #0
}
    3348:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
    334c:	bd30      	pop	{r4, r5, pc}
    eePromSaveStatus(true);
    334e:	4620      	mov	r0, r4
    3350:	2101      	movs	r1, #1
    configAddr = 0;
    3352:	6265      	str	r5, [r4, #36]	; 0x24
    config = string2kBuffer;
    3354:	f8c4 d018 	str.w	sp, [r4, #24]
    configAddrMax = 0;
    3358:	62a5      	str	r5, [r4, #40]	; 0x28
    335a:	f7ff ff4d 	bl	31f8 <EEConfig::eePromSaveStatus(bool)>
    stringConfigToUSB(nullptr, 0);
    335e:	4620      	mov	r0, r4
    3360:	462a      	mov	r2, r5
    3362:	4629      	mov	r1, r5
    3364:	f7ff fe3c 	bl	2fe0 <EEConfig::stringConfigToUSB(unsigned char const*, int)>
  bool used = true;
    3368:	2001      	movs	r0, #1
    config = NULL;
    336a:	61a5      	str	r5, [r4, #24]
}
    336c:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
    3370:	bd30      	pop	{r4, r5, pc}
    3372:	bf00      	nop
    3374:	200063f0 	.word	0x200063f0

00003378 <EEConfig::eePromLoadStatus(bool)>:
{ 
  const int MSL = 1000;
  char s[MSL]; 
  //eePushAdr = 0;
  stringConfig = from2Kbuffer;  
  configAddr = 0;
    3378:	2300      	movs	r3, #0
{ 
    337a:	b5f0      	push	{r4, r5, r6, r7, lr}
    337c:	4604      	mov	r4, r0
    337e:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
  configAddr = 0;
    3382:	6243      	str	r3, [r0, #36]	; 0x24
  stringConfig = from2Kbuffer;  
    3384:	f880 1020 	strb.w	r1, [r0, #32]
  if (stringConfig)
    3388:	2900      	cmp	r1, #0
    338a:	f000 8081 	beq.w	3490 <EEConfig::eePromLoadStatus(bool)+0x118>
    if (config != NULL)
    338e:	6987      	ldr	r7, [r0, #24]
    3390:	2f00      	cmp	r7, #0
    3392:	d05a      	beq.n	344a <EEConfig::eePromLoadStatus(bool)+0xd2>
      b = *(uint32_t *)&config[configAddr];
    3394:	e9d7 5700 	ldrd	r5, r7, [r7]
  configAddr += 4;
    3398:	2308      	movs	r3, #8
  uint32_t cnt = read32();
  uint32_t rev = read32();
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    339a:	ae04      	add	r6, sp, #16
    339c:	485c      	ldr	r0, [pc, #368]	; (3510 <EEConfig::eePromLoadStatus(bool)+0x198>)
  configAddr += 4;
    339e:	6263      	str	r3, [r4, #36]	; 0x24
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    33a0:	f7fe ffde 	bl	2360 <UCommand::getRevisionNumber()>
    33a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    33a8:	9001      	str	r0, [sp, #4]
    33aa:	462b      	mov	r3, r5
    33ac:	4a59      	ldr	r2, [pc, #356]	; (3514 <EEConfig::eePromLoadStatus(bool)+0x19c>)
    33ae:	4630      	mov	r0, r6
    33b0:	9700      	str	r7, [sp, #0]
    33b2:	f018 f9ff 	bl	1b7b4 <snprintf>
  usb.send(s);
    33b6:	4631      	mov	r1, r6
    33b8:	4857      	ldr	r0, [pc, #348]	; (3518 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    33ba:	f009 f927 	bl	c60c <UUSB::send(char const*)>
  if (cnt == 0 or cnt >= uint32_t(maxEESize) or rev == 0)
    33be:	2d00      	cmp	r5, #0
    33c0:	d057      	beq.n	3472 <EEConfig::eePromLoadStatus(bool)+0xfa>
    33c2:	6963      	ldr	r3, [r4, #20]
    33c4:	42ab      	cmp	r3, r5
    33c6:	d954      	bls.n	3472 <EEConfig::eePromLoadStatus(bool)+0xfa>
    33c8:	2f00      	cmp	r7, #0
    33ca:	d052      	beq.n	3472 <EEConfig::eePromLoadStatus(bool)+0xfa>
  {
    snprintf(s, MSL, "# No saved configuration - save a configuration first (config size=%lu, rev=%lu)\r\n", cnt, rev);
    usb.send(s);
    return;
  }
  if (rev != command.getRevisionNumber())
    33cc:	4850      	ldr	r0, [pc, #320]	; (3510 <EEConfig::eePromLoadStatus(bool)+0x198>)
    33ce:	f7fe ffc7 	bl	2360 <UCommand::getRevisionNumber()>
    33d2:	42b8      	cmp	r0, r7
    33d4:	d173      	bne.n	34be <EEConfig::eePromLoadStatus(bool)+0x146>
  {
    snprintf(s, MSL, "# configuration from old SW version now:%g != ee:%g - continues\r\n", command.getRevisionNumber()/100.0, rev/100.0);
    usb.send(s);
  }
  robot.eePromLoad();
    33d6:	4f51      	ldr	r7, [pc, #324]	; (351c <EEConfig::eePromLoadStatus(bool)+0x1a4>)
    33d8:	4638      	mov	r0, r7
    33da:	f008 f8ad 	bl	b538 <URobot::eePromLoad()>
    33de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33e0:	3b01      	subs	r3, #1
  if (robot.robotIDvalid())
    33e2:	2b95      	cmp	r3, #149	; 0x95
    33e4:	d85f      	bhi.n	34a6 <EEConfig::eePromLoadStatus(bool)+0x12e>
  { // gyro zero value
    imu2.eePromLoad();
    33e6:	484e      	ldr	r0, [pc, #312]	; (3520 <EEConfig::eePromLoadStatus(bool)+0x1a8>)
    33e8:	f001 fb04 	bl	49f4 <UImu2::eePromLoad()>
    // values to logger
    logger.eePromLoadStatusLog();
    33ec:	484d      	ldr	r0, [pc, #308]	; (3524 <EEConfig::eePromLoadStatus(bool)+0x1ac>)
    33ee:	f005 f84d 	bl	848c <ULog::eePromLoadStatusLog()>
    // line sensor
    ls.eePromLoadLinesensor();
    33f2:	484d      	ldr	r0, [pc, #308]	; (3528 <EEConfig::eePromLoadStatus(bool)+0x1b0>)
    33f4:	f003 fcca 	bl	6d8c <ULineSensor::eePromLoadLinesensor()>
    // load data from IR sensor
    irdist.eePromLoad();
    33f8:	484c      	ldr	r0, [pc, #304]	; (352c <EEConfig::eePromLoadStatus(bool)+0x1b4>)
    33fa:	f002 f947 	bl	568c <UIrDist::eePromLoad()>
    // load servo settings (mostly steering parameters)
    servo.eePromLoad();
    33fe:	484c      	ldr	r0, [pc, #304]	; (3530 <EEConfig::eePromLoadStatus(bool)+0x1b8>)
    3400:	f008 fe42 	bl	c088 <UServo::eePromLoad()>
    encoder.eePromLoad();
    3404:	484b      	ldr	r0, [pc, #300]	; (3534 <EEConfig::eePromLoadStatus(bool)+0x1bc>)
    3406:	f000 fd0b 	bl	3e20 <UEncoder::eePromLoad()>
    display.eePromLoad();
    340a:	484b      	ldr	r0, [pc, #300]	; (3538 <EEConfig::eePromLoadStatus(bool)+0x1c0>)
    340c:	f7ff fd38 	bl	2e80 <UDisplay::eePromLoad()>
    motor.eePromLoad();
    3410:	484a      	ldr	r0, [pc, #296]	; (353c <EEConfig::eePromLoadStatus(bool)+0x1c4>)
    3412:	f005 fd5d 	bl	8ed0 <UMotor::eePromLoad()>
    asenc.eePromLoad();
    3416:	484a      	ldr	r0, [pc, #296]	; (3540 <EEConfig::eePromLoadStatus(bool)+0x1c8>)
    3418:	f7fe feb8 	bl	218c <UAsEnc::eePromLoad()>
    motortest.eePromLoad();
    341c:	4849      	ldr	r0, [pc, #292]	; (3544 <EEConfig::eePromLoadStatus(bool)+0x1cc>)
    341e:	f005 ffc7 	bl	93b0 <UMotorTest::eePromLoad()>
    // motor pins depend on HW-version, so re-setup (reboot is better)
    if (not isStringConfig())
    3422:	f894 3020 	ldrb.w	r3, [r4, #32]
    3426:	2b00      	cmp	r3, #0
    3428:	d069      	beq.n	34fe <EEConfig::eePromLoadStatus(bool)+0x186>
      motor.setup();
    // note changes in ee-prom size
    if (cnt != (uint32_t)configAddr)
    342a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    342c:	42a9      	cmp	r1, r5
    342e:	d03e      	beq.n	34ae <EEConfig::eePromLoadStatus(bool)+0x136>
    {
      snprintf(s, MSL, "# configuration size has changed! %lu != %d bytes\r\n", cnt, configAddr);
    3430:	9100      	str	r1, [sp, #0]
    3432:	462b      	mov	r3, r5
    3434:	4a44      	ldr	r2, [pc, #272]	; (3548 <EEConfig::eePromLoadStatus(bool)+0x1d0>)
    3436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    343a:	4630      	mov	r0, r6
    343c:	f018 f9ba 	bl	1b7b4 <snprintf>
      usb.send(s);
    3440:	4631      	mov	r1, r6
    3442:	4835      	ldr	r0, [pc, #212]	; (3518 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    3444:	f009 f8e2 	bl	c60c <UUSB::send(char const*)>
    3448:	e031      	b.n	34ae <EEConfig::eePromLoadStatus(bool)+0x136>
  configAddr += 4;
    344a:	2308      	movs	r3, #8
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    344c:	ae04      	add	r6, sp, #16
    344e:	4830      	ldr	r0, [pc, #192]	; (3510 <EEConfig::eePromLoadStatus(bool)+0x198>)
      b = 0;
    3450:	463d      	mov	r5, r7
  configAddr += 4;
    3452:	6263      	str	r3, [r4, #36]	; 0x24
  snprintf(s, MSL, "# Reading configuration - in flash cnt=%lu, rev=%lu, this is rev=%d\r\n", cnt, rev, command.getRevisionNumber());
    3454:	f7fe ff84 	bl	2360 <UCommand::getRevisionNumber()>
    3458:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    345c:	463b      	mov	r3, r7
    345e:	4a2d      	ldr	r2, [pc, #180]	; (3514 <EEConfig::eePromLoadStatus(bool)+0x19c>)
    3460:	e9cd 7000 	strd	r7, r0, [sp]
    3464:	4630      	mov	r0, r6
    3466:	f018 f9a5 	bl	1b7b4 <snprintf>
  usb.send(s);
    346a:	4631      	mov	r1, r6
    346c:	482a      	ldr	r0, [pc, #168]	; (3518 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    346e:	f009 f8cd 	bl	c60c <UUSB::send(char const*)>
    snprintf(s, MSL, "# No saved configuration - save a configuration first (config size=%lu, rev=%lu)\r\n", cnt, rev);
    3472:	462b      	mov	r3, r5
    3474:	4a35      	ldr	r2, [pc, #212]	; (354c <EEConfig::eePromLoadStatus(bool)+0x1d4>)
    3476:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    347a:	4630      	mov	r0, r6
    347c:	9700      	str	r7, [sp, #0]
    347e:	f018 f999 	bl	1b7b4 <snprintf>
    usb.send(s);
    3482:	4631      	mov	r1, r6
    3484:	4824      	ldr	r0, [pc, #144]	; (3518 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    3486:	f009 f8c1 	bl	c60c <UUSB::send(char const*)>
  {
    usb.send("# skipped major part of ee-load, as ID == 0\n");
  }
  // pin position may have changed, so reinit
  motor.motorSetEnable(0,0);
}
    348a:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
    348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = eeprom_read_dword((uint32_t*)configAddr);
    3490:	4608      	mov	r0, r1
    3492:	f012 fec3 	bl	1621c <eeprom_read_dword>
  configAddr += 4;
    3496:	2304      	movs	r3, #4
    b = eeprom_read_dword((uint32_t*)configAddr);
    3498:	4605      	mov	r5, r0
  configAddr += 4;
    349a:	6263      	str	r3, [r4, #36]	; 0x24
    b = eeprom_read_dword((uint32_t*)configAddr);
    349c:	4618      	mov	r0, r3
    349e:	f012 febd 	bl	1621c <eeprom_read_dword>
    34a2:	4607      	mov	r7, r0
    34a4:	e778      	b.n	3398 <EEConfig::eePromLoadStatus(bool)+0x20>
    usb.send("# skipped major part of ee-load, as ID == 0\n");
    34a6:	492a      	ldr	r1, [pc, #168]	; (3550 <EEConfig::eePromLoadStatus(bool)+0x1d8>)
    34a8:	481b      	ldr	r0, [pc, #108]	; (3518 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    34aa:	f009 f8af 	bl	c60c <UUSB::send(char const*)>
  motor.motorSetEnable(0,0);
    34ae:	2200      	movs	r2, #0
    34b0:	4822      	ldr	r0, [pc, #136]	; (353c <EEConfig::eePromLoadStatus(bool)+0x1c4>)
    34b2:	4611      	mov	r1, r2
    34b4:	f005 f98a 	bl	87cc <UMotor::motorSetEnable(bool, bool)>
}
    34b8:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
    34bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    snprintf(s, MSL, "# configuration from old SW version now:%g != ee:%g - continues\r\n", command.getRevisionNumber()/100.0, rev/100.0);
    34be:	4814      	ldr	r0, [pc, #80]	; (3510 <EEConfig::eePromLoadStatus(bool)+0x198>)
    34c0:	f7fe ff4e 	bl	2360 <UCommand::getRevisionNumber()>
    34c4:	ee07 7a90 	vmov	s15, r7
    34c8:	ee06 0a90 	vmov	s13, r0
    34cc:	4a21      	ldr	r2, [pc, #132]	; (3554 <EEConfig::eePromLoadStatus(bool)+0x1dc>)
    34ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    34d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    34d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    34da:	4630      	mov	r0, r6
    34dc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 3508 <EEConfig::eePromLoadStatus(bool)+0x190>
    34e0:	ee87 4b05 	vdiv.f64	d4, d7, d5
    34e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
    34e8:	ed8d 4b02 	vstr	d4, [sp, #8]
    34ec:	ed8d 7b00 	vstr	d7, [sp]
    34f0:	f018 f960 	bl	1b7b4 <snprintf>
    usb.send(s);
    34f4:	4631      	mov	r1, r6
    34f6:	4808      	ldr	r0, [pc, #32]	; (3518 <EEConfig::eePromLoadStatus(bool)+0x1a0>)
    34f8:	f009 f888 	bl	c60c <UUSB::send(char const*)>
    34fc:	e76b      	b.n	33d6 <EEConfig::eePromLoadStatus(bool)+0x5e>
      motor.setup();
    34fe:	480f      	ldr	r0, [pc, #60]	; (353c <EEConfig::eePromLoadStatus(bool)+0x1c4>)
    3500:	f005 f89c 	bl	863c <UMotor::setup()>
    3504:	e791      	b.n	342a <EEConfig::eePromLoadStatus(bool)+0xb2>
    3506:	bf00      	nop
    3508:	00000000 	.word	0x00000000
    350c:	40590000 	.word	0x40590000
    3510:	2000ea18 	.word	0x2000ea18
    3514:	200061c0 	.word	0x200061c0
    3518:	2000fac4 	.word	0x2000fac4
    351c:	2000f660 	.word	0x2000f660
    3520:	2000dfd0 	.word	0x2000dfd0
    3524:	2000f24c 	.word	0x2000f24c
    3528:	2000f390 	.word	0x2000f390
    352c:	2000f19c 	.word	0x2000f19c
    3530:	2000fa64 	.word	0x2000fa64
    3534:	2000ec40 	.word	0x2000ec40
    3538:	2000eb18 	.word	0x2000eb18
    353c:	2000f4c8 	.word	0x2000f4c8
    3540:	2000e9dc 	.word	0x2000e9dc
    3544:	2000f524 	.word	0x2000f524
    3548:	200062a0 	.word	0x200062a0
    354c:	20006208 	.word	0x20006208
    3550:	200062d4 	.word	0x200062d4
    3554:	2000625c 	.word	0x2000625c

00003558 <EEConfig::setup()>:
{
    3558:	b510      	push	{r4, lr}
    355a:	4604      	mov	r4, r0
  usb.addSubscriptionService(this);
    355c:	4804      	ldr	r0, [pc, #16]	; (3570 <EEConfig::setup()+0x18>)
    355e:	4621      	mov	r1, r4
    3560:	f009 fc98 	bl	ce94 <UUSB::addSubscriptionService(USubss*)>
  eePromLoadStatus (false);
    3564:	4620      	mov	r0, r4
    3566:	2100      	movs	r1, #0
}
    3568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eePromLoadStatus (false);
    356c:	f7ff bf04 	b.w	3378 <EEConfig::eePromLoadStatus(bool)>
    3570:	2000fac4 	.word	0x2000fac4

00003574 <EEConfig::decode(char const*)>:
{
    3574:	b508      	push	{r3, lr}
    3576:	460b      	mov	r3, r1
  if (strncmp(buf, "eer", 3) == 0)
    3578:	7809      	ldrb	r1, [r1, #0]
{
    357a:	4602      	mov	r2, r0
  if (strncmp(buf, "eer", 3) == 0)
    357c:	2965      	cmp	r1, #101	; 0x65
    357e:	d109      	bne.n	3594 <EEConfig::decode(char const*)+0x20>
    3580:	7859      	ldrb	r1, [r3, #1]
    3582:	2965      	cmp	r1, #101	; 0x65
    3584:	d106      	bne.n	3594 <EEConfig::decode(char const*)+0x20>
    3586:	7899      	ldrb	r1, [r3, #2]
    3588:	3972      	subs	r1, #114	; 0x72
    358a:	d103      	bne.n	3594 <EEConfig::decode(char const*)+0x20>
    eePromLoadStatus(false);
    358c:	f7ff fef4 	bl	3378 <EEConfig::eePromLoadStatus(bool)>
}
    3590:	2001      	movs	r0, #1
    3592:	bd08      	pop	{r3, pc}
    3594:	4619      	mov	r1, r3
    3596:	4610      	mov	r0, r2
    3598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    359c:	f7ff beb8 	b.w	3310 <EEConfig::decode(char const*) [clone .part.0]>

000035a0 <EEConfig::pushBlock(char const*, int)>:
    // debug end
  }
  /** get the address of the next push or read operation on the configuration stack */
  int getAddr()
  {
    return configAddr;
    35a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
/////////////////////////////////////////////////

bool EEConfig::pushBlock(const char * data, int dataCnt)
{
    35a2:	b570      	push	{r4, r5, r6, lr}
  if (getAddr() + dataCnt < 2048 - 2)
    35a4:	eb03 0c02 	add.w	ip, r3, r2
{
    35a8:	4615      	mov	r5, r2
  if (getAddr() + dataCnt < 2048 - 2)
    35aa:	f240 72fd 	movw	r2, #2045	; 0x7fd
    35ae:	4594      	cmp	ip, r2
    35b0:	dc15      	bgt.n	35de <EEConfig::pushBlock(char const*, int)+0x3e>
    if (not stringConfig)
    35b2:	f890 2020 	ldrb.w	r2, [r0, #32]
    35b6:	4604      	mov	r4, r0
    35b8:	460e      	mov	r6, r1
    35ba:	b99a      	cbnz	r2, 35e4 <EEConfig::pushBlock(char const*, int)+0x44>
      eeprom_busy_wait();
    35bc:	f012 fe46 	bl	1624c <eeprom_is_ready>
    35c0:	2800      	cmp	r0, #0
    35c2:	d0fb      	beq.n	35bc <EEConfig::pushBlock(char const*, int)+0x1c>
    if (not stringConfig)
    35c4:	f894 3020 	ldrb.w	r3, [r4, #32]
    35c8:	b95b      	cbnz	r3, 35e2 <EEConfig::pushBlock(char const*, int)+0x42>
      eeprom_write_block(data, (void*)configAddr, n);
    35ca:	462a      	mov	r2, r5
    35cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    35ce:	4630      	mov	r0, r6
    35d0:	f012 ffcc 	bl	1656c <eeprom_write_block>
    configAddr += n;
    35d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  {
    busy_wait();
    write_block(data, dataCnt);
    return true;
    35d6:	2001      	movs	r0, #1
    35d8:	442b      	add	r3, r5
    35da:	6263      	str	r3, [r4, #36]	; 0x24
  }
  else
    return false;
}
    35dc:	bd70      	pop	{r4, r5, r6, pc}
    return false;
    35de:	2000      	movs	r0, #0
}
    35e0:	bd70      	pop	{r4, r5, r6, pc}
      eeprom_write_block(data, (void*)configAddr, n);
    35e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      memcpy(&config[configAddr], data, n);
    35e4:	69a0      	ldr	r0, [r4, #24]
    35e6:	4631      	mov	r1, r6
    35e8:	462a      	mov	r2, r5
    35ea:	4418      	add	r0, r3
    35ec:	f013 f85a 	bl	166a4 <memcpy>
    35f0:	e7f0      	b.n	35d4 <EEConfig::pushBlock(char const*, int)+0x34>
    35f2:	bf00      	nop

000035f4 <EEConfig::readBlock(char*, int)>:

bool EEConfig::readBlock(char * data, int dataCnt)
{
    35f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (getAddr() + dataCnt < 2048 - 2)
    35f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    35f8:	f240 74fd 	movw	r4, #2045	; 0x7fd
    35fc:	4413      	add	r3, r2
    35fe:	42a3      	cmp	r3, r4
    3600:	dc28      	bgt.n	3654 <EEConfig::readBlock(char*, int)+0x60>
    if (not stringConfig)
    3602:	f890 3020 	ldrb.w	r3, [r0, #32]
    3606:	4605      	mov	r5, r0
    3608:	4617      	mov	r7, r2
    360a:	460e      	mov	r6, r1
    360c:	b91b      	cbnz	r3, 3616 <EEConfig::readBlock(char*, int)+0x22>
      eeprom_busy_wait();
    360e:	f012 fe1d 	bl	1624c <eeprom_is_ready>
    3612:	2800      	cmp	r0, #0
    3614:	d0fb      	beq.n	360e <EEConfig::readBlock(char*, int)+0x1a>
  {
    busy_wait();
    for (int n = 0; n < dataCnt; n++)
    3616:	2f00      	cmp	r7, #0
    3618:	dd1a      	ble.n	3650 <EEConfig::readBlock(char*, int)+0x5c>
    361a:	3e01      	subs	r6, #1
    361c:	4437      	add	r7, r6
    361e:	e009      	b.n	3634 <EEConfig::readBlock(char*, int)+0x40>
    if (config != NULL)
    3620:	69a8      	ldr	r0, [r5, #24]
      b = config[configAddr];
    3622:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if (config != NULL)
    3624:	b100      	cbz	r0, 3628 <EEConfig::readBlock(char*, int)+0x34>
      b = config[configAddr];
    3626:	5d00      	ldrb	r0, [r0, r4]
  configAddr++;
    3628:	3401      	adds	r4, #1
    362a:	626c      	str	r4, [r5, #36]	; 0x24
    {
      data[n] = readByte();
    362c:	f806 0f01 	strb.w	r0, [r6, #1]!
    for (int n = 0; n < dataCnt; n++)
    3630:	42be      	cmp	r6, r7
    3632:	d00d      	beq.n	3650 <EEConfig::readBlock(char*, int)+0x5c>
  if (stringConfig)
    3634:	f895 3020 	ldrb.w	r3, [r5, #32]
    3638:	2b00      	cmp	r3, #0
    363a:	d1f1      	bne.n	3620 <EEConfig::readBlock(char*, int)+0x2c>
    b = eeprom_read_byte((uint8_t*)configAddr);
    363c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    363e:	4620      	mov	r0, r4
  configAddr++;
    3640:	3401      	adds	r4, #1
    b = eeprom_read_byte((uint8_t*)configAddr);
    3642:	f012 fda1 	bl	16188 <eeprom_read_byte>
  configAddr++;
    3646:	626c      	str	r4, [r5, #36]	; 0x24
      data[n] = readByte();
    3648:	f806 0f01 	strb.w	r0, [r6, #1]!
    for (int n = 0; n < dataCnt; n++)
    364c:	42be      	cmp	r6, r7
    364e:	d1f1      	bne.n	3634 <EEConfig::readBlock(char*, int)+0x40>
    }
    return true;
    3650:	2001      	movs	r0, #1
  }
  else
    return false;
}
    3652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return false;
    3654:	2000      	movs	r0, #0
}
    3656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003658 <_GLOBAL__sub_I_eeConfig>:
    3658:	b510      	push	{r4, lr}
EEConfig eeConfig;
    365a:	4c05      	ldr	r4, [pc, #20]	; (3670 <_GLOBAL__sub_I_eeConfig+0x18>)
    365c:	4620      	mov	r0, r4
    365e:	f7ff fc9d 	bl	2f9c <EEConfig::EEConfig()>
    3662:	4620      	mov	r0, r4
    3664:	4a03      	ldr	r2, [pc, #12]	; (3674 <_GLOBAL__sub_I_eeConfig+0x1c>)
    3666:	4904      	ldr	r1, [pc, #16]	; (3678 <_GLOBAL__sub_I_eeConfig+0x20>)
}
    3668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
EEConfig eeConfig;
    366c:	f015 bcd4 	b.w	19018 <__aeabi_atexit>
    3670:	2000ebf4 	.word	0x2000ebf4
    3674:	20008f80 	.word	0x20008f80
    3678:	00002f81 	.word	0x00002f81

0000367c <UEncoder::sendHelp()>:
{
    367c:	b530      	push	{r4, r5, lr}
  usb.send("# Encoder settings -------\r\n");
    367e:	4d19      	ldr	r5, [pc, #100]	; (36e4 <UEncoder::sendHelp()+0x68>)
{
    3680:	b0cd      	sub	sp, #308	; 0x134
  snprintf(reply, MRL, "# -- \tenc0 \tReset pose to (0,0,0)\r\n");
    3682:	4c19      	ldr	r4, [pc, #100]	; (36e8 <UEncoder::sendHelp()+0x6c>)
  usb.send("# Encoder settings -------\r\n");
    3684:	4919      	ldr	r1, [pc, #100]	; (36ec <UEncoder::sendHelp()+0x70>)
    3686:	4628      	mov	r0, r5
    3688:	f008 ffc0 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tenc0 \tReset pose to (0,0,0)\r\n");
    368c:	f10d 0c04 	add.w	ip, sp, #4
    3690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3692:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3698:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    369c:	6823      	ldr	r3, [r4, #0]
  usb.send(reply);
    369e:	a901      	add	r1, sp, #4
    36a0:	4628      	mov	r0, r5
  snprintf(reply, MRL, "# -- \tenc0 \tReset pose to (0,0,0)\r\n");
    36a2:	f8cc 3000 	str.w	r3, [ip]
  usb.send(reply);
    36a6:	f008 ffb1 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tconfw rl rr g t wb \tSet configuration (radius gear encTick wheelbase)\r\n");
    36aa:	224e      	movs	r2, #78	; 0x4e
    36ac:	4910      	ldr	r1, [pc, #64]	; (36f0 <UEncoder::sendHelp()+0x74>)
    36ae:	a801      	add	r0, sp, #4
    36b0:	f012 fff8 	bl	166a4 <memcpy>
  usb.send(reply);
    36b4:	a901      	add	r1, sp, #4
    36b6:	4628      	mov	r0, r5
    36b8:	f008 ffa8 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tencrev R \tSet motortest reversed encoder (R=0 normal, R=1 reversed)\r\n");
    36bc:	224c      	movs	r2, #76	; 0x4c
    36be:	490d      	ldr	r1, [pc, #52]	; (36f4 <UEncoder::sendHelp()+0x78>)
    36c0:	a801      	add	r0, sp, #4
    36c2:	f012 ffef 	bl	166a4 <memcpy>
  usb.send(reply);
    36c6:	a901      	add	r1, sp, #4
    36c8:	4628      	mov	r0, r5
    36ca:	f008 ff9f 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \t         \tNormal: motv 3 3 => left enc decrease, right enc increase.\r\n");
    36ce:	224d      	movs	r2, #77	; 0x4d
    36d0:	4909      	ldr	r1, [pc, #36]	; (36f8 <UEncoder::sendHelp()+0x7c>)
    36d2:	a801      	add	r0, sp, #4
    36d4:	f012 ffe6 	bl	166a4 <memcpy>
  usb.send(reply);
    36d8:	a901      	add	r1, sp, #4
    36da:	4628      	mov	r0, r5
    36dc:	f008 ff96 	bl	c60c <UUSB::send(char const*)>
}
    36e0:	b04d      	add	sp, #308	; 0x134
    36e2:	bd30      	pop	{r4, r5, pc}
    36e4:	2000fac4 	.word	0x2000fac4
    36e8:	20007898 	.word	0x20007898
    36ec:	20007878 	.word	0x20007878
    36f0:	200078bc 	.word	0x200078bc
    36f4:	2000790c 	.word	0x2000790c
    36f8:	20007958 	.word	0x20007958
    36fc:	00000000 	.word	0x00000000

00003700 <UEncoder::decode(char const*)>:
{
    3700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3704:	460d      	mov	r5, r1
    3706:	b0bf      	sub	sp, #252	; 0xfc
    3708:	4604      	mov	r4, r0
  if (strncmp(buf, "enc0", 4) == 0)
    370a:	2204      	movs	r2, #4
    370c:	497c      	ldr	r1, [pc, #496]	; (3900 <UEncoder::decode(char const*)+0x200>)
    370e:	4628      	mov	r0, r5
    3710:	f018 fb08 	bl	1bd24 <strncmp>
    3714:	b998      	cbnz	r0, 373e <UEncoder::decode(char const*)+0x3e>
  }
}

void UEncoder::clearPose()
{
  pose[0] = 0;
    3716:	2200      	movs	r2, #0
    3718:	4603      	mov	r3, r0
  bool used = true;
    371a:	2001      	movs	r0, #1
  pose[0] = 0;
    371c:	64e2      	str	r2, [r4, #76]	; 0x4c
  pose[1] = 0;
    371e:	6522      	str	r2, [r4, #80]	; 0x50
  pose[2] = 0;
    3720:	6562      	str	r2, [r4, #84]	; 0x54
  // pose[3] = 0; NB! tilt should NOT be reset
  encoder[0] = 0;
  encoder[1] = 0;
  encoderLast[0] = 0;
  encoderLast[1] = 0;
  distance = 0.0;
    3722:	65e2      	str	r2, [r4, #92]	; 0x5c
    tripA = 0;
    3724:	6622      	str	r2, [r4, #96]	; 0x60
    tripAh = 0;
    3726:	66a2      	str	r2, [r4, #104]	; 0x68
    tripAtime = 0;
    3728:	6722      	str	r2, [r4, #112]	; 0x70
    tripB = 0;
    372a:	6662      	str	r2, [r4, #100]	; 0x64
    tripBh = 0;
    372c:	66e2      	str	r2, [r4, #108]	; 0x6c
    tripBtime = 0;
    372e:	6762      	str	r2, [r4, #116]	; 0x74
  encoder[1] = 0;
    3730:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  encoderLast[1] = 0;
    3734:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
}
    3738:	b03f      	add	sp, #252	; 0xfc
    373a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (strncmp(buf, "encd", 4) == 0)
    373e:	2204      	movs	r2, #4
    3740:	4970      	ldr	r1, [pc, #448]	; (3904 <UEncoder::decode(char const*)+0x204>)
    3742:	4628      	mov	r0, r5
    3744:	f018 faee 	bl	1bd24 <strncmp>
    3748:	4606      	mov	r6, r0
    374a:	b188      	cbz	r0, 3770 <UEncoder::decode(char const*)+0x70>
  else if (strncmp(buf, "confw ", 5) == 0)
    374c:	2205      	movs	r2, #5
    374e:	496e      	ldr	r1, [pc, #440]	; (3908 <UEncoder::decode(char const*)+0x208>)
    3750:	4628      	mov	r0, r5
    3752:	f018 fae7 	bl	1bd24 <strncmp>
    3756:	2800      	cmp	r0, #0
    3758:	d052      	beq.n	3800 <UEncoder::decode(char const*)+0x100>
  else if (strncmp(buf, "encrev ", 6) == 0)
    375a:	2206      	movs	r2, #6
    375c:	496b      	ldr	r1, [pc, #428]	; (390c <UEncoder::decode(char const*)+0x20c>)
    375e:	4628      	mov	r0, r5
    3760:	f018 fae0 	bl	1bd24 <strncmp>
    3764:	2800      	cmp	r0, #0
    3766:	d03d      	beq.n	37e4 <UEncoder::decode(char const*)+0xe4>
    used = false;
    3768:	2000      	movs	r0, #0
}
    376a:	b03f      	add	sp, #252	; 0xfc
    376c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int n = eportCnt;
    3770:	f8d4 74ec 	ldr.w	r7, [r4, #1260]	; 0x4ec
    snprintf(s, MSL, "encp %d\n", n);
    3774:	21c8      	movs	r1, #200	; 0xc8
    3776:	4a66      	ldr	r2, [pc, #408]	; (3910 <UEncoder::decode(char const*)+0x210>)
    3778:	a80c      	add	r0, sp, #48	; 0x30
    377a:	463b      	mov	r3, r7
    377c:	f018 f81a 	bl	1b7b4 <snprintf>
    usb.send(s);
    3780:	a90c      	add	r1, sp, #48	; 0x30
    3782:	4864      	ldr	r0, [pc, #400]	; (3914 <UEncoder::decode(char const*)+0x214>)
    3784:	f008 ff42 	bl	c60c <UUSB::send(char const*)>
    for (int i = 0; i < n; i++)    
    3788:	2f00      	cmp	r7, #0
    378a:	dd24      	ble.n	37d6 <UEncoder::decode(char const*)+0xd6>
    378c:	4625      	mov	r5, r4
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    378e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 3928 <UEncoder::decode(char const*)+0x228>
      usb.send(s);
    3792:	f8df 8180 	ldr.w	r8, [pc, #384]	; 3914 <UEncoder::decode(char const*)+0x214>
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    3796:	ed95 7ad7 	vldr	s14, [r5, #860]	; 0x35c
    379a:	464a      	mov	r2, r9
    379c:	21c8      	movs	r1, #200	; 0xc8
    379e:	a80c      	add	r0, sp, #48	; 0x30
    37a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    for (int i = 0; i < n; i++)    
    37a4:	3504      	adds	r5, #4
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    37a6:	ed8d 7b04 	vstr	d7, [sp, #16]
    37aa:	f895 31ca 	ldrb.w	r3, [r5, #458]	; 0x1ca
    37ae:	9303      	str	r3, [sp, #12]
    37b0:	f895 31c9 	ldrb.w	r3, [r5, #457]	; 0x1c9
    37b4:	9302      	str	r3, [sp, #8]
    37b6:	f895 31c8 	ldrb.w	r3, [r5, #456]	; 0x1c8
    37ba:	9301      	str	r3, [sp, #4]
    37bc:	f895 31cb 	ldrb.w	r3, [r5, #459]	; 0x1cb
    37c0:	9300      	str	r3, [sp, #0]
    37c2:	4633      	mov	r3, r6
    for (int i = 0; i < n; i++)    
    37c4:	3601      	adds	r6, #1
      snprintf(s, MSL, "enct %d %d %d %d %d %f\n", i, eport[i][3], eport[i][0], eport[i][1], eport[i][2], edt[i]);
    37c6:	f017 fff5 	bl	1b7b4 <snprintf>
      usb.send(s);
    37ca:	a90c      	add	r1, sp, #48	; 0x30
    37cc:	4640      	mov	r0, r8
    37ce:	f008 ff1d 	bl	c60c <UUSB::send(char const*)>
    for (int i = 0; i < n; i++)    
    37d2:	42b7      	cmp	r7, r6
    37d4:	d1df      	bne.n	3796 <UEncoder::decode(char const*)+0x96>
    eportCnt = 0;
    37d6:	2300      	movs	r3, #0
  bool used = true;
    37d8:	2001      	movs	r0, #1
    eportCnt = 0;
    37da:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
}
    37de:	b03f      	add	sp, #252	; 0xfc
    37e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    const char * p1 = &buf[6];
    37e4:	1da8      	adds	r0, r5, #6
    motortest.encoderReversed = strtol(p1, (char**) &p1, 10);
    37e6:	220a      	movs	r2, #10
    37e8:	a90c      	add	r1, sp, #48	; 0x30
    const char * p1 = &buf[6];
    37ea:	900c      	str	r0, [sp, #48]	; 0x30
    motortest.encoderReversed = strtol(p1, (char**) &p1, 10);
    37ec:	f017 fdf2 	bl	1b3d4 <strtol>
    37f0:	4603      	mov	r3, r0
    37f2:	4a49      	ldr	r2, [pc, #292]	; (3918 <UEncoder::decode(char const*)+0x218>)
  bool used = true;
    37f4:	2001      	movs	r0, #1
    motortest.encoderReversed = strtol(p1, (char**) &p1, 10);
    37f6:	3b00      	subs	r3, #0
    37f8:	bf18      	it	ne
    37fa:	2301      	movne	r3, #1
    37fc:	7713      	strb	r3, [r2, #28]
    37fe:	e79b      	b.n	3738 <UEncoder::decode(char const*)+0x38>
    const char * p1 = &buf[5];
    3800:	1d68      	adds	r0, r5, #5
    odoWheelRadius[0] = strtof(p1, (char**) &p1);
    3802:	a90b      	add	r1, sp, #44	; 0x2c
    const char * p1 = &buf[5];
    3804:	900b      	str	r0, [sp, #44]	; 0x2c
    odoWheelRadius[0] = strtof(p1, (char**) &p1);
    3806:	f017 fce1 	bl	1b1cc <strtof>
    odoWheelRadius[1] = strtof(p1, (char**) &p1);
    380a:	a90b      	add	r1, sp, #44	; 0x2c
    380c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    odoWheelRadius[0] = strtof(p1, (char**) &p1);
    380e:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
    odoWheelRadius[1] = strtof(p1, (char**) &p1);
    3812:	f017 fcdb 	bl	1b1cc <strtof>
    gear = strtof(p1, (char**) &p1);
    3816:	a90b      	add	r1, sp, #44	; 0x2c
    3818:	980b      	ldr	r0, [sp, #44]	; 0x2c
    odoWheelRadius[1] = strtof(p1, (char**) &p1);
    381a:	ed84 0a21 	vstr	s0, [r4, #132]	; 0x84
    gear = strtof(p1, (char**) &p1);
    381e:	f017 fcd5 	bl	1b1cc <strtof>
    pulsPerRev = strtol(p1, (char**) &p1, 10);
    3822:	220a      	movs	r2, #10
    3824:	a90b      	add	r1, sp, #44	; 0x2c
    gear = strtof(p1, (char**) &p1);
    3826:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
    pulsPerRev = strtol(p1, (char**) &p1, 10);
    382a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    382c:	f017 fdd2 	bl	1b3d4 <strtol>
    3830:	4603      	mov	r3, r0
    odoWheelBase = strtof(p1, (char**) &p1);
    3832:	a90b      	add	r1, sp, #44	; 0x2c
    3834:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pulsPerRev = strtol(p1, (char**) &p1, 10);
    3836:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    odoWheelBase = strtof(p1, (char**) &p1);
    383a:	f017 fcc7 	bl	1b1cc <strtof>
    snprintf(s, MSL, "# got confw: r1=%g, r2=%g, G=%g, PPR=%d, WB=%g\n", odoWheelRadius[0],
    383e:	ed94 5a22 	vldr	s10, [r4, #136]	; 0x88
    3842:	ed94 6a21 	vldr	s12, [r4, #132]	; 0x84
    3846:	eeb7 4ac0 	vcvt.f64.f32	d4, s0
    384a:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    384e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3852:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3856:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    385a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    odoWheelBase = strtof(p1, (char**) &p1);
    385e:	ed84 0a23 	vstr	s0, [r4, #140]	; 0x8c
    snprintf(s, MSL, "# got confw: r1=%g, r2=%g, G=%g, PPR=%d, WB=%g\n", odoWheelRadius[0],
    3862:	4a2e      	ldr	r2, [pc, #184]	; (391c <UEncoder::decode(char const*)+0x21c>)
    3864:	21c8      	movs	r1, #200	; 0xc8
    3866:	9306      	str	r3, [sp, #24]
    3868:	a80c      	add	r0, sp, #48	; 0x30
    386a:	ed8d 4b08 	vstr	d4, [sp, #32]
    386e:	ed8d 5b04 	vstr	d5, [sp, #16]
    3872:	ed8d 6b02 	vstr	d6, [sp, #8]
    3876:	ed8d 7b00 	vstr	d7, [sp]
    387a:	f017 ff9b 	bl	1b7b4 <snprintf>
    usb.send(s);
    387e:	a90c      	add	r1, sp, #48	; 0x30
    3880:	4824      	ldr	r0, [pc, #144]	; (3914 <UEncoder::decode(char const*)+0x214>)
    3882:	f008 fec3 	bl	c60c <UUSB::send(char const*)>
    if (pulsPerRev < 1)
    3886:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    388a:	b343      	cbz	r3, 38de <UEncoder::decode(char const*)+0x1de>
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    388c:	ee07 3a90 	vmov	s15, r3
    3890:	ed9f 5b17 	vldr	d5, [pc, #92]	; 38f0 <UEncoder::decode(char const*)+0x1f0>
    3894:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    3898:	ee85 6b07 	vdiv.f64	d6, d5, d7
    389c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    if (gear < 1)
    38a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    38a4:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
    if (odoWheelBase < 0.02)
    38a8:	ed9f 5b13 	vldr	d5, [pc, #76]	; 38f8 <UEncoder::decode(char const*)+0x1f8>
    if (gear < 1)
    38ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
    if (odoWheelBase < 0.02)
    38b0:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
    if (gear < 1)
    38b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      gear = 1;
    38b8:	bf48      	it	mi
    38ba:	edc4 7a22 	vstrmi	s15, [r4, #136]	; 0x88
    if (odoWheelBase < 0.02)
    38be:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    38c2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    38c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38ca:	d502      	bpl.n	38d2 <UEncoder::decode(char const*)+0x1d2>
      odoWheelBase = 0.02;
    38cc:	4b14      	ldr	r3, [pc, #80]	; (3920 <UEncoder::decode(char const*)+0x220>)
    38ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  bool used = true;
    38d2:	2001      	movs	r0, #1
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    38d4:	ed84 6a72 	vstr	s12, [r4, #456]	; 0x1c8
}
    38d8:	b03f      	add	sp, #252	; 0xfc
    38da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pulsPerRev = 1;
    38de:	2301      	movs	r3, #1
    38e0:	ed9f 6a10 	vldr	s12, [pc, #64]	; 3924 <UEncoder::decode(char const*)+0x224>
    38e4:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    38e8:	e7da      	b.n	38a0 <UEncoder::decode(char const*)+0x1a0>
    38ea:	bf00      	nop
    38ec:	f3af 8000 	nop.w
    38f0:	54442d18 	.word	0x54442d18
    38f4:	401921fb 	.word	0x401921fb
    38f8:	47ae147b 	.word	0x47ae147b
    38fc:	3f947ae1 	.word	0x3f947ae1
    3900:	20007804 	.word	0x20007804
    3904:	2000780c 	.word	0x2000780c
    3908:	20007838 	.word	0x20007838
    390c:	20007870 	.word	0x20007870
    3910:	20007814 	.word	0x20007814
    3914:	2000fac4 	.word	0x2000fac4
    3918:	2000f524 	.word	0x2000f524
    391c:	20007840 	.word	0x20007840
    3920:	3ca3d70a 	.word	0x3ca3d70a
    3924:	40c90fdb 	.word	0x40c90fdb
    3928:	20007820 	.word	0x20007820

0000392c <UEncoder::~UEncoder()>:
class UEncoder : public USubss
    392c:	b510      	push	{r4, lr}
    392e:	4b05      	ldr	r3, [pc, #20]	; (3944 <UEncoder::~UEncoder()+0x18>)
    3930:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    3932:	6840      	ldr	r0, [r0, #4]
    3934:	6023      	str	r3, [r4, #0]
	if (__p)
    3936:	b118      	cbz	r0, 3940 <UEncoder::~UEncoder()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    3938:	68e1      	ldr	r1, [r4, #12]
    393a:	1a09      	subs	r1, r1, r0
    393c:	f012 ff4e 	bl	167dc <operator delete(void*, unsigned int)>
    3940:	4620      	mov	r0, r4
    3942:	bd10      	pop	{r4, pc}
    3944:	200080a0 	.word	0x200080a0

00003948 <UEncoder::setup()>:
{ // input should be default, but pin PIN_RIGHT_ENCODER_B on HW41 fails
    3948:	b538      	push	{r3, r4, r5, lr}
  pinMode(M1ENC_A, INPUT_PULLUP);
    394a:	2102      	movs	r1, #2
{ // input should be default, but pin PIN_RIGHT_ENCODER_B on HW41 fails
    394c:	4604      	mov	r4, r0
  pinMode(M1ENC_A, INPUT_PULLUP);
    394e:	201d      	movs	r0, #29
    3950:	f012 fb90 	bl	16074 <pinMode>
  pinMode(M1ENC_B, INPUT_PULLUP);
    3954:	2102      	movs	r1, #2
    3956:	201c      	movs	r0, #28
    3958:	f012 fb8c 	bl	16074 <pinMode>
  pinMode(M2ENC_A, INPUT_PULLUP);
    395c:	2102      	movs	r1, #2
    395e:	201f      	movs	r0, #31
    3960:	f012 fb88 	bl	16074 <pinMode>
  pinMode(M2ENC_B, INPUT_PULLUP);
    3964:	2102      	movs	r1, #2
    3966:	201e      	movs	r0, #30
    3968:	f012 fb84 	bl	16074 <pinMode>
  *digital_pin_to_info_PGM[M1ENC_A].pad |= IOMUXC_PAD_HYS;
    396c:	4b2e      	ldr	r3, [pc, #184]	; (3a28 <UEncoder::setup()+0xe0>)
    396e:	f8d3 01d8 	ldr.w	r0, [r3, #472]	; 0x1d8
  *digital_pin_to_info_PGM[M1ENC_B].pad |= IOMUXC_PAD_HYS;
    3972:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
  *digital_pin_to_info_PGM[M1ENC_A].pad |= IOMUXC_PAD_HYS;
    3976:	6802      	ldr	r2, [r0, #0]
  *digital_pin_to_info_PGM[M2ENC_A].pad |= IOMUXC_PAD_HYS;
    3978:	f8d3 51f8 	ldr.w	r5, [r3, #504]	; 0x1f8
  *digital_pin_to_info_PGM[M1ENC_A].pad |= IOMUXC_PAD_HYS;
    397c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    3980:	6002      	str	r2, [r0, #0]
  *digital_pin_to_info_PGM[M1ENC_B].pad |= IOMUXC_PAD_HYS;
    3982:	680a      	ldr	r2, [r1, #0]
  *digital_pin_to_info_PGM[M2ENC_B].pad |= IOMUXC_PAD_HYS;
    3984:	f8d3 01e8 	ldr.w	r0, [r3, #488]	; 0x1e8
  *digital_pin_to_info_PGM[M1ENC_B].pad |= IOMUXC_PAD_HYS;
    3988:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    398c:	600a      	str	r2, [r1, #0]
  pinMode(7, OUTPUT); // CS
    398e:	2101      	movs	r1, #1
  *digital_pin_to_info_PGM[M2ENC_A].pad |= IOMUXC_PAD_HYS;
    3990:	682b      	ldr	r3, [r5, #0]
    3992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3996:	602b      	str	r3, [r5, #0]
  *digital_pin_to_info_PGM[M2ENC_B].pad |= IOMUXC_PAD_HYS;
    3998:	6803      	ldr	r3, [r0, #0]
    399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    399e:	6003      	str	r3, [r0, #0]
  pinMode(7, OUTPUT); // CS
    39a0:	2007      	movs	r0, #7
    39a2:	f012 fb67 	bl	16074 <pinMode>
  pinMode(11, OUTPUT);//MOSI
    39a6:	2101      	movs	r1, #1
    39a8:	200b      	movs	r0, #11
    39aa:	f012 fb63 	bl	16074 <pinMode>
  pinMode(12, OUTPUT);//MISO
    39ae:	2101      	movs	r1, #1
    39b0:	200c      	movs	r0, #12
    39b2:	f012 fb5f 	bl	16074 <pinMode>
  attachInterrupt ( M1ENC_A, m1EncoderA, CHANGE );
    39b6:	2204      	movs	r2, #4
    39b8:	491c      	ldr	r1, [pc, #112]	; (3a2c <UEncoder::setup()+0xe4>)
    39ba:	201d      	movs	r0, #29
    39bc:	f012 fde8 	bl	16590 <attachInterrupt>
  attachInterrupt ( M2ENC_A, m2EncoderA, CHANGE );
    39c0:	2204      	movs	r2, #4
    39c2:	491b      	ldr	r1, [pc, #108]	; (3a30 <UEncoder::setup()+0xe8>)
    39c4:	201f      	movs	r0, #31
    39c6:	f012 fde3 	bl	16590 <attachInterrupt>
  attachInterrupt ( M1ENC_B, m1EncoderB, CHANGE );
    39ca:	2204      	movs	r2, #4
    39cc:	4919      	ldr	r1, [pc, #100]	; (3a34 <UEncoder::setup()+0xec>)
    39ce:	201c      	movs	r0, #28
    39d0:	f012 fdde 	bl	16590 <attachInterrupt>
  attachInterrupt ( M2ENC_B, m2EncoderB, CHANGE );
    39d4:	2204      	movs	r2, #4
    39d6:	4918      	ldr	r1, [pc, #96]	; (3a38 <UEncoder::setup()+0xf0>)
    39d8:	201e      	movs	r0, #30
    39da:	f012 fdd9 	bl	16590 <attachInterrupt>
  addPublistItem("enc", "Get encoder value 'enc M1 M2' (int32)");
    39de:	4620      	mov	r0, r4
    39e0:	4a16      	ldr	r2, [pc, #88]	; (3a3c <UEncoder::setup()+0xf4>)
    39e2:	4917      	ldr	r1, [pc, #92]	; (3a40 <UEncoder::setup()+0xf8>)
    39e4:	f008 fd44 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("pose", "Get current pose 'pose t x y h tilt' (sec,m,m,rad, rad)");
    39e8:	4620      	mov	r0, r4
    39ea:	4a16      	ldr	r2, [pc, #88]	; (3a44 <UEncoder::setup()+0xfc>)
    39ec:	4916      	ldr	r1, [pc, #88]	; (3a48 <UEncoder::setup()+0x100>)
    39ee:	f008 fd3f 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("vel", "Get velocity 'left right' (m/s)");
    39f2:	4620      	mov	r0, r4
    39f4:	4a15      	ldr	r2, [pc, #84]	; (3a4c <UEncoder::setup()+0x104>)
    39f6:	4916      	ldr	r1, [pc, #88]	; (3a50 <UEncoder::setup()+0x108>)
    39f8:	f008 fd3a 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("conf", "Get robot conf (radius, radius, gear, pulsPerRev, wheelbase, sample-time, reversed)");
    39fc:	4620      	mov	r0, r4
    39fe:	4a15      	ldr	r2, [pc, #84]	; (3a54 <UEncoder::setup()+0x10c>)
    3a00:	4915      	ldr	r1, [pc, #84]	; (3a58 <UEncoder::setup()+0x110>)
    3a02:	f008 fd35 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("vem", "Get motor and wheel velocity 'left right left right' (rad/s)");
    3a06:	4620      	mov	r0, r4
    3a08:	4a14      	ldr	r2, [pc, #80]	; (3a5c <UEncoder::setup()+0x114>)
    3a0a:	4915      	ldr	r1, [pc, #84]	; (3a60 <UEncoder::setup()+0x118>)
    3a0c:	f008 fd30 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ene", "Get encoder error 'enc NANcount reversed M1err M2err' (int32)");
    3a10:	4620      	mov	r0, r4
    3a12:	4914      	ldr	r1, [pc, #80]	; (3a64 <UEncoder::setup()+0x11c>)
    3a14:	4a14      	ldr	r2, [pc, #80]	; (3a68 <UEncoder::setup()+0x120>)
    3a16:	f008 fd2b 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    3a1a:	4621      	mov	r1, r4
    3a1c:	4813      	ldr	r0, [pc, #76]	; (3a6c <UEncoder::setup()+0x124>)
}
    3a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    3a22:	f009 ba37 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    3a26:	bf00      	nop
    3a28:	200081bc 	.word	0x200081bc
    3a2c:	000045d5 	.word	0x000045d5
    3a30:	000045f5 	.word	0x000045f5
    3a34:	00004615 	.word	0x00004615
    3a38:	00004635 	.word	0x00004635
    3a3c:	20007690 	.word	0x20007690
    3a40:	200076b8 	.word	0x200076b8
    3a44:	200076bc 	.word	0x200076bc
    3a48:	200076f4 	.word	0x200076f4
    3a4c:	200076fc 	.word	0x200076fc
    3a50:	2000771c 	.word	0x2000771c
    3a54:	20007720 	.word	0x20007720
    3a58:	20007774 	.word	0x20007774
    3a5c:	2000777c 	.word	0x2000777c
    3a60:	200077bc 	.word	0x200077bc
    3a64:	20007800 	.word	0x20007800
    3a68:	200077c0 	.word	0x200077c0
    3a6c:	2000fac4 	.word	0x2000fac4

00003a70 <UEncoder::sendEncoderErrors()>:
           motortest.encoderReversed,
    3a70:	4b15      	ldr	r3, [pc, #84]	; (3ac8 <UEncoder::sendEncoderErrors()+0x58>)
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    3a72:	f8d0 1528 	ldr.w	r1, [r0, #1320]	; 0x528
    3a76:	f8d0 2524 	ldr.w	r2, [r0, #1316]	; 0x524
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3a7a:	7f1b      	ldrb	r3, [r3, #28]
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    3a7c:	440a      	add	r2, r1
{ // return esc status
    3a7e:	b500      	push	{lr}
    3a80:	b09f      	sub	sp, #124	; 0x7c
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3a82:	9300      	str	r3, [sp, #0]
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    3a84:	f8d0 1534 	ldr.w	r1, [r0, #1332]	; 0x534
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3a88:	f8d0 34f0 	ldr.w	r3, [r0, #1264]	; 0x4f0
           errCntA[1][0] + errCntA[1][1] + errCntB[1][0] + errCntB[1][1]);
    3a8c:	440a      	add	r2, r1
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3a8e:	f8d0 1538 	ldr.w	r1, [r0, #1336]	; 0x538
    3a92:	440a      	add	r2, r1
           errCntA[0][0] + errCntA[0][1] + errCntB[0][0] + errCntB[0][1],
    3a94:	f8d0 151c 	ldr.w	r1, [r0, #1308]	; 0x51c
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3a98:	9202      	str	r2, [sp, #8]
           errCntA[0][0] + errCntA[0][1] + errCntB[0][0] + errCntB[0][1],
    3a9a:	f8d0 2520 	ldr.w	r2, [r0, #1312]	; 0x520
    3a9e:	4411      	add	r1, r2
    3aa0:	f8d0 252c 	ldr.w	r2, [r0, #1324]	; 0x52c
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3aa4:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
           errCntA[0][0] + errCntA[0][1] + errCntB[0][0] + errCntB[0][1],
    3aa8:	4411      	add	r1, r2
  snprintf(s, MSL, "ene %d %d %d %d\r\n",
    3aaa:	4a08      	ldr	r2, [pc, #32]	; (3acc <UEncoder::sendEncoderErrors()+0x5c>)
    3aac:	4401      	add	r1, r0
    3aae:	a805      	add	r0, sp, #20
    3ab0:	9101      	str	r1, [sp, #4]
    3ab2:	2164      	movs	r1, #100	; 0x64
    3ab4:	f017 fe7e 	bl	1b7b4 <snprintf>
  usb.send(s);
    3ab8:	a905      	add	r1, sp, #20
    3aba:	4805      	ldr	r0, [pc, #20]	; (3ad0 <UEncoder::sendEncoderErrors()+0x60>)
    3abc:	f008 fda6 	bl	c60c <UUSB::send(char const*)>
}
    3ac0:	b01f      	add	sp, #124	; 0x7c
    3ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ac6:	bf00      	nop
    3ac8:	2000f524 	.word	0x2000f524
    3acc:	20007644 	.word	0x20007644
    3ad0:	2000fac4 	.word	0x2000fac4
    3ad4:	00000000 	.word	0x00000000

00003ad8 <UEncoder::sendRobotConfig()>:
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    3ad8:	4a1f      	ldr	r2, [pc, #124]	; (3b58 <UEncoder::sendRobotConfig()+0x80>)
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3ada:	2164      	movs	r1, #100	; 0x64
    3adc:	ed90 3a23 	vldr	s6, [r0, #140]	; 0x8c
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    3ae0:	ed92 7a00 	vldr	s14, [r2]
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3ae4:	ed90 4a22 	vldr	s8, [r0, #136]	; 0x88
    3ae8:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    3aec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3af0:	ed90 5a21 	vldr	s10, [r0, #132]	; 0x84
    3af4:	ed90 6a20 	vldr	s12, [r0, #128]	; 0x80
    3af8:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    3afc:	4b17      	ldr	r3, [pc, #92]	; (3b5c <UEncoder::sendRobotConfig()+0x84>)
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3afe:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    gear, pulsPerRev, odoWheelBase, float(service.sampleTime_us)/1e6, motor.motorReversed
    3b02:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3b06:	4a16      	ldr	r2, [pc, #88]	; (3b60 <UEncoder::sendRobotConfig()+0x88>)
    3b08:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3b0c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 3b50 <UEncoder::sendRobotConfig()+0x78>
{ // return esc status
    3b10:	b510      	push	{r4, lr}
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3b12:	ee87 2b01 	vdiv.f64	d2, d7, d1
{ // return esc status
    3b16:	b0a8      	sub	sp, #160	; 0xa0
  snprintf(s, MSL, "conf %.4f %.4f %.3f %u %.4f %.4f %d\r\n", odoWheelRadius[0], odoWheelRadius[1], 
    3b18:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    3b1c:	f8b0 3094 	ldrh.w	r3, [r0, #148]	; 0x94
    3b20:	a80f      	add	r0, sp, #60	; 0x3c
    3b22:	940c      	str	r4, [sp, #48]	; 0x30
    3b24:	9306      	str	r3, [sp, #24]
    3b26:	ed8d 3b08 	vstr	d3, [sp, #32]
    3b2a:	ed8d 4b04 	vstr	d4, [sp, #16]
    3b2e:	ed8d 5b02 	vstr	d5, [sp, #8]
    3b32:	ed8d 6b00 	vstr	d6, [sp]
    3b36:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
    3b3a:	f017 fe3b 	bl	1b7b4 <snprintf>
  usb.send(s);
    3b3e:	a90f      	add	r1, sp, #60	; 0x3c
    3b40:	4808      	ldr	r0, [pc, #32]	; (3b64 <UEncoder::sendRobotConfig()+0x8c>)
    3b42:	f008 fd63 	bl	c60c <UUSB::send(char const*)>
}
    3b46:	b028      	add	sp, #160	; 0xa0
    3b48:	bd10      	pop	{r4, pc}
    3b4a:	bf00      	nop
    3b4c:	f3af 8000 	nop.w
    3b50:	00000000 	.word	0x00000000
    3b54:	412e8480 	.word	0x412e8480
    3b58:	2000e0c8 	.word	0x2000e0c8
    3b5c:	2000f4c8 	.word	0x2000f4c8
    3b60:	2000761c 	.word	0x2000761c
    3b64:	2000fac4 	.word	0x2000fac4

00003b68 <UEncoder::sendPose()>:
{
    3b68:	4603      	mov	r3, r0
    3b6a:	4a1f      	ldr	r2, [pc, #124]	; (3be8 <UEncoder::sendPose()+0x80>)
  snprintf(s, MSL, "pose %.4f %.3f %.3f %.4f %.4f\n",
    3b6c:	ed93 4a16 	vldr	s8, [r3, #88]	; 0x58
    3b70:	ed93 5a15 	vldr	s10, [r3, #84]	; 0x54
    3b74:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
    3b78:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    3b7c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    3b80:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3b84:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3b88:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    3b8c:	b500      	push	{lr}
    3b8e:	b0bd      	sub	sp, #244	; 0xf4
    3b90:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
  snprintf(s, MSL, "pose %.4f %.3f %.3f %.4f %.4f\n",
    3b94:	ed8d 4b08 	vstr	d4, [sp, #32]
    3b98:	ed8d 5b06 	vstr	d5, [sp, #24]
    3b9c:	ed8d 7b02 	vstr	d7, [sp, #8]
    3ba0:	ed8d 6b04 	vstr	d6, [sp, #16]
    3ba4:	f015 fcc2 	bl	1952c <__aeabi_ul2f>
    3ba8:	ee07 0a90 	vmov	s15, r0
    3bac:	4a0f      	ldr	r2, [pc, #60]	; (3bec <UEncoder::sendPose()+0x84>)
    3bae:	21c8      	movs	r1, #200	; 0xc8
    3bb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    3bb4:	a80a      	add	r0, sp, #40	; 0x28
    3bb6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 3be0 <UEncoder::sendPose()+0x78>
    3bba:	ee27 7b06 	vmul.f64	d7, d7, d6
    3bbe:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3bc2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3bc6:	ed8d 7b00 	vstr	d7, [sp]
    3bca:	f017 fdf3 	bl	1b7b4 <snprintf>
  usb.send(s);
    3bce:	a90a      	add	r1, sp, #40	; 0x28
    3bd0:	4807      	ldr	r0, [pc, #28]	; (3bf0 <UEncoder::sendPose()+0x88>)
    3bd2:	f008 fd1b 	bl	c60c <UUSB::send(char const*)>
}
    3bd6:	b03d      	add	sp, #244	; 0xf4
    3bd8:	f85d fb04 	ldr.w	pc, [sp], #4
    3bdc:	f3af 8000 	nop.w
    3be0:	a0b5ed8d 	.word	0xa0b5ed8d
    3be4:	3eb0c6f7 	.word	0x3eb0c6f7
    3be8:	2000e0c8 	.word	0x2000e0c8
    3bec:	200079a8 	.word	0x200079a8
    3bf0:	2000fac4 	.word	0x2000fac4
    3bf4:	00000000 	.word	0x00000000

00003bf8 <UEncoder::sendVelocity()>:
  if (velSubscribeCnt > 0)
    3bf8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	dc00      	bgt.n	3c02 <UEncoder::sendVelocity()+0xa>
    3c00:	4770      	bx	lr
{
    3c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3c06:	ee07 3a90 	vmov	s15, r3
{
    3c0a:	b0ae      	sub	sp, #184	; 0xb8
             robotVelocitySum/velSubscribeCnt,
    3c0c:	f200 550c 	addw	r5, r0, #1292	; 0x50c
             robotTurnrateSum/velSubscribeCnt,
    3c10:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
             wheelVelocityEstSum[1]/velSubscribeCnt,
    3c14:	f200 5704 	addw	r7, r0, #1284	; 0x504
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3c18:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
    snprintf(s, MSL, "vel %.4f %.3f %.3f %.4f %.3f %d\n",
    3c1c:	930a      	str	r3, [sp, #40]	; 0x28
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
             robotVelocitySum/velSubscribeCnt,
    3c22:	edd5 5a00 	vldr	s11, [r5]
    3c26:	4604      	mov	r4, r0
             robotTurnrateSum/velSubscribeCnt,
    3c28:	ed96 6a00 	vldr	s12, [r6]
             wheelVelocityEstSum[1]/velSubscribeCnt,
    3c2c:	ed97 7a00 	vldr	s14, [r7]
             robotVelocitySum/velSubscribeCnt,
    3c30:	ee85 4aa7 	vdiv.f32	s8, s11, s15
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3c34:	edd8 6a00 	vldr	s13, [r8]
    3c38:	4b21      	ldr	r3, [pc, #132]	; (3cc0 <UEncoder::sendVelocity()+0xc8>)
             robotTurnrateSum/velSubscribeCnt,
    3c3a:	ee86 5a27 	vdiv.f32	s10, s12, s15
             wheelVelocityEstSum[1]/velSubscribeCnt,
    3c3e:	ee87 6a27 	vdiv.f32	s12, s14, s15
             wheelVelocityEstSum[0]/velSubscribeCnt,
    3c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    snprintf(s, MSL, "vel %.4f %.3f %.3f %.4f %.3f %d\n",
    3c46:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    3c4a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3c4e:	ed8d 4b08 	vstr	d4, [sp, #32]
    3c52:	ed8d 5b06 	vstr	d5, [sp, #24]
    3c56:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3c5a:	ed8d 6b04 	vstr	d6, [sp, #16]
    3c5e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3c62:	ed8d 7b02 	vstr	d7, [sp, #8]
    3c66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    3c6a:	f015 fc5f 	bl	1952c <__aeabi_ul2f>
    3c6e:	ee07 0a90 	vmov	s15, r0
    3c72:	4a14      	ldr	r2, [pc, #80]	; (3cc4 <UEncoder::sendVelocity()+0xcc>)
    3c74:	2182      	movs	r1, #130	; 0x82
    3c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    3c7a:	a80d      	add	r0, sp, #52	; 0x34
    3c7c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 3cb8 <UEncoder::sendVelocity()+0xc0>
    3c80:	ee27 7b06 	vmul.f64	d7, d7, d6
    3c84:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3c88:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3c8c:	ed8d 7b00 	vstr	d7, [sp]
    3c90:	f017 fd90 	bl	1b7b4 <snprintf>
    usb.send(s);
    3c94:	a90d      	add	r1, sp, #52	; 0x34
    3c96:	480c      	ldr	r0, [pc, #48]	; (3cc8 <UEncoder::sendVelocity()+0xd0>)
    3c98:	f008 fcb8 	bl	c60c <UUSB::send(char const*)>
    wheelVelocityEstSum[0] = 0;
    3c9c:	2300      	movs	r3, #0
    velSubscribeCnt = 0;
    3c9e:	2200      	movs	r2, #0
    wheelVelocityEstSum[0] = 0;
    3ca0:	f8c8 3000 	str.w	r3, [r8]
    wheelVelocityEstSum[1] = 0;
    3ca4:	603b      	str	r3, [r7, #0]
    robotTurnrateSum = 0.0;
    3ca6:	6033      	str	r3, [r6, #0]
    robotVelocitySum = 0.0;
    3ca8:	602b      	str	r3, [r5, #0]
    velSubscribeCnt = 0;
    3caa:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
}
    3cae:	b02e      	add	sp, #184	; 0xb8
    3cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cb4:	f3af 8000 	nop.w
    3cb8:	a0b5ed8d 	.word	0xa0b5ed8d
    3cbc:	3eb0c6f7 	.word	0x3eb0c6f7
    3cc0:	2000e0c8 	.word	0x2000e0c8
    3cc4:	200075e8 	.word	0x200075e8
    3cc8:	2000fac4 	.word	0x2000fac4
    3ccc:	00000000 	.word	0x00000000

00003cd0 <UEncoder::sendMotorVelocity()>:
{
    3cd0:	4603      	mov	r3, r0
    3cd2:	4a2b      	ldr	r2, [pc, #172]	; (3d80 <UEncoder::sendMotorVelocity()+0xb0>)
  snprintf(s, MSL, "vem %.4f %.1f %.1f %.2f %.2f %d %d %d %d %d %d %d %d\n",
    3cd4:	ed93 4a27 	vldr	s8, [r3, #156]	; 0x9c
    3cd8:	ed93 5a26 	vldr	s10, [r3, #152]	; 0x98
    3cdc:	ed93 6a29 	vldr	s12, [r3, #164]	; 0xa4
    3ce0:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    3ce4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    3ce8:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    3cec:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3cf0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    3cf4:	b500      	push	{lr}
    3cf6:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    3cfa:	b0b5      	sub	sp, #212	; 0xd4
  snprintf(s, MSL, "vem %.4f %.1f %.1f %.2f %.2f %d %d %d %d %d %d %d %d\n",
    3cfc:	f8d3 2538 	ldr.w	r2, [r3, #1336]	; 0x538
    3d00:	ed8d 4b08 	vstr	d4, [sp, #32]
    3d04:	ed8d 5b06 	vstr	d5, [sp, #24]
    3d08:	9211      	str	r2, [sp, #68]	; 0x44
    3d0a:	f8d3 2534 	ldr.w	r2, [r3, #1332]	; 0x534
    3d0e:	ed8d 7b02 	vstr	d7, [sp, #8]
    3d12:	ed8d 6b04 	vstr	d6, [sp, #16]
    3d16:	9210      	str	r2, [sp, #64]	; 0x40
    3d18:	f8d3 2530 	ldr.w	r2, [r3, #1328]	; 0x530
    3d1c:	920f      	str	r2, [sp, #60]	; 0x3c
    3d1e:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    3d22:	920e      	str	r2, [sp, #56]	; 0x38
    3d24:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
    3d28:	920d      	str	r2, [sp, #52]	; 0x34
    3d2a:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
    3d2e:	920c      	str	r2, [sp, #48]	; 0x30
    3d30:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3d34:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
    3d38:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    3d3c:	f015 fbf6 	bl	1952c <__aeabi_ul2f>
    3d40:	ee07 0a90 	vmov	s15, r0
    3d44:	4a0f      	ldr	r2, [pc, #60]	; (3d84 <UEncoder::sendMotorVelocity()+0xb4>)
    3d46:	2182      	movs	r1, #130	; 0x82
    3d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    3d4c:	a813      	add	r0, sp, #76	; 0x4c
    3d4e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 3d78 <UEncoder::sendMotorVelocity()+0xa8>
    3d52:	ee27 7b06 	vmul.f64	d7, d7, d6
    3d56:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3d5a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3d5e:	ed8d 7b00 	vstr	d7, [sp]
    3d62:	f017 fd27 	bl	1b7b4 <snprintf>
  usb.send(s);
    3d66:	a913      	add	r1, sp, #76	; 0x4c
    3d68:	4807      	ldr	r0, [pc, #28]	; (3d88 <UEncoder::sendMotorVelocity()+0xb8>)
    3d6a:	f008 fc4f 	bl	c60c <UUSB::send(char const*)>
}
    3d6e:	b035      	add	sp, #212	; 0xd4
    3d70:	f85d fb04 	ldr.w	pc, [sp], #4
    3d74:	f3af 8000 	nop.w
    3d78:	a0b5ed8d 	.word	0xa0b5ed8d
    3d7c:	3eb0c6f7 	.word	0x3eb0c6f7
    3d80:	2000e0c8 	.word	0x2000e0c8
    3d84:	20007658 	.word	0x20007658
    3d88:	2000fac4 	.word	0x2000fac4

00003d8c <UEncoder::sendData(int)>:
  if (item == 0)
    3d8c:	2905      	cmp	r1, #5
    3d8e:	d804      	bhi.n	3d9a <UEncoder::sendData(int)+0xe>
    3d90:	e8df f001 	tbb	[pc, r1]
    3d94:	1b191706 	.word	0x1b191706
    3d98:	041d      	.short	0x041d
    3d9a:	4770      	bx	lr
    sendEncoderErrors();
    3d9c:	f7ff be68 	b.w	3a70 <UEncoder::sendEncoderErrors()>
{
    3da0:	b500      	push	{lr}
  snprintf(s, MSL, "enc %lu %lu\r\n", encoder[0], encoder[1]);
    3da2:	e9d0 310d 	ldrd	r3, r1, [r0, #52]	; 0x34
{
    3da6:	b09d      	sub	sp, #116	; 0x74
  snprintf(s, MSL, "enc %lu %lu\r\n", encoder[0], encoder[1]);
    3da8:	4a0a      	ldr	r2, [pc, #40]	; (3dd4 <UEncoder::sendData(int)+0x48>)
    3daa:	9100      	str	r1, [sp, #0]
    3dac:	a803      	add	r0, sp, #12
    3dae:	2164      	movs	r1, #100	; 0x64
    3db0:	f017 fd00 	bl	1b7b4 <snprintf>
  usb.send(s);
    3db4:	a903      	add	r1, sp, #12
    3db6:	4808      	ldr	r0, [pc, #32]	; (3dd8 <UEncoder::sendData(int)+0x4c>)
    3db8:	f008 fc28 	bl	c60c <UUSB::send(char const*)>
}
    3dbc:	b01d      	add	sp, #116	; 0x74
    3dbe:	f85d fb04 	ldr.w	pc, [sp], #4
    sendPose();
    3dc2:	f7ff bed1 	b.w	3b68 <UEncoder::sendPose()>
    sendVelocity();
    3dc6:	f7ff bf17 	b.w	3bf8 <UEncoder::sendVelocity()>
    sendRobotConfig();
    3dca:	f7ff be85 	b.w	3ad8 <UEncoder::sendRobotConfig()>
    sendMotorVelocity();
    3dce:	f7ff bf7f 	b.w	3cd0 <UEncoder::sendMotorVelocity()>
    3dd2:	bf00      	nop
    3dd4:	2000760c 	.word	0x2000760c
    3dd8:	2000fac4 	.word	0x2000fac4

00003ddc <UEncoder::eePromSave()>:
{
    3ddc:	b510      	push	{r4, lr}
    3dde:	4604      	mov	r4, r0
    push32(u.u32);
    3de0:	480d      	ldr	r0, [pc, #52]	; (3e18 <UEncoder::eePromSave()+0x3c>)
    3de2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    3de6:	f7ff f977 	bl	30d8 <EEConfig::push32(unsigned long)>
    3dea:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    3dee:	480a      	ldr	r0, [pc, #40]	; (3e18 <UEncoder::eePromSave()+0x3c>)
    3df0:	f7ff f972 	bl	30d8 <EEConfig::push32(unsigned long)>
    3df4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    3df8:	4807      	ldr	r0, [pc, #28]	; (3e18 <UEncoder::eePromSave()+0x3c>)
    3dfa:	f7ff f96d 	bl	30d8 <EEConfig::push32(unsigned long)>
  eeConfig.pushWord(pulsPerRev);
    3dfe:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    3e02:	4805      	ldr	r0, [pc, #20]	; (3e18 <UEncoder::eePromSave()+0x3c>)
    3e04:	f7ff f9a0 	bl	3148 <EEConfig::pushWord(unsigned short)>
    3e08:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    3e0c:	4802      	ldr	r0, [pc, #8]	; (3e18 <UEncoder::eePromSave()+0x3c>)
}
    3e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e12:	f7ff b961 	b.w	30d8 <EEConfig::push32(unsigned long)>
    3e16:	bf00      	nop
    3e18:	2000ebf4 	.word	0x2000ebf4
    3e1c:	00000000 	.word	0x00000000

00003e20 <UEncoder::eePromLoad()>:
{
    3e20:	b538      	push	{r3, r4, r5, lr}
    return stringConfig;
    3e22:	4d3f      	ldr	r5, [pc, #252]	; (3f20 <UEncoder::eePromLoad()+0x100>)
  if (not eeConfig.isStringConfig())
    3e24:	f895 3020 	ldrb.w	r3, [r5, #32]
    3e28:	b11b      	cbz	r3, 3e32 <UEncoder::eePromLoad()+0x12>
    configAddr+=bytes;
    3e2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3e2c:	3312      	adds	r3, #18
    3e2e:	626b      	str	r3, [r5, #36]	; 0x24
}
    3e30:	bd38      	pop	{r3, r4, r5, pc}
    u.u32 = read32();
    3e32:	4604      	mov	r4, r0
    3e34:	4628      	mov	r0, r5
    3e36:	f7ff f9a3 	bl	3180 <EEConfig::read32()>
    3e3a:	4603      	mov	r3, r0
    3e3c:	4628      	mov	r0, r5
    odoWheelRadius[0] =  eeConfig.readFloat();
    3e3e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    3e42:	f7ff f99d 	bl	3180 <EEConfig::read32()>
    3e46:	4603      	mov	r3, r0
    3e48:	4628      	mov	r0, r5
    odoWheelRadius[1] =  eeConfig.readFloat();
    3e4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    3e4e:	f7ff f997 	bl	3180 <EEConfig::read32()>
    3e52:	4603      	mov	r3, r0
    pulsPerRev = eeConfig.readWord();
    3e54:	4628      	mov	r0, r5
    gear = eeConfig.readFloat();
    3e56:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    pulsPerRev = eeConfig.readWord();
    3e5a:	f7ff f9b9 	bl	31d0 <EEConfig::readWord()>
    3e5e:	4603      	mov	r3, r0
    3e60:	4628      	mov	r0, r5
    3e62:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    3e66:	f7ff f98b 	bl	3180 <EEConfig::read32()>
    if (pulsPerRev < 1)
    3e6a:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    return u.f;  
    3e6e:	ee07 0a90 	vmov	s15, r0
    3e72:	2b00      	cmp	r3, #0
    3e74:	d042      	beq.n	3efc <UEncoder::eePromLoad()+0xdc>
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    3e76:	ee07 3a10 	vmov	s14, r3
    3e7a:	ed9f 4b23 	vldr	d4, [pc, #140]	; 3f08 <UEncoder::eePromLoad()+0xe8>
    3e7e:	eeb8 6bc7 	vcvt.f64.s32	d6, s14
    3e82:	ee84 5b06 	vdiv.f64	d5, d4, d6
    3e86:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    if (gear < 1)
    3e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3e8e:	edd4 6a22 	vldr	s13, [r4, #136]	; 0x88
    if (odoWheelRadius[0] < 0.001)
    3e92:	ed94 6a20 	vldr	s12, [r4, #128]	; 0x80
    if (gear < 1)
    3e96:	eef4 6ac7 	vcmpe.f32	s13, s14
    if (odoWheelRadius[0] < 0.001)
    3e9a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3e9e:	ed9f 4b1c 	vldr	d4, [pc, #112]	; 3f10 <UEncoder::eePromLoad()+0xf0>
    if (gear < 1)
    3ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (odoWheelRadius[0] < 0.001)
    3ea6:	eeb4 6bc4 	vcmpe.f64	d6, d4
      gear = 1;
    3eaa:	bf48      	it	mi
    3eac:	ed84 7a22 	vstrmi	s14, [r4, #136]	; 0x88
    if (odoWheelRadius[0] < 0.001)
    3eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3eb4:	d502      	bpl.n	3ebc <UEncoder::eePromLoad()+0x9c>
      odoWheelRadius[0] = 0.001;
    3eb6:	4b1b      	ldr	r3, [pc, #108]	; (3f24 <UEncoder::eePromLoad()+0x104>)
    3eb8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (odoWheelRadius[1] < 0.001)
    3ebc:	ed94 6a21 	vldr	s12, [r4, #132]	; 0x84
    3ec0:	ed9f 4b13 	vldr	d4, [pc, #76]	; 3f10 <UEncoder::eePromLoad()+0xf0>
    3ec4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3ec8:	eeb4 6bc4 	vcmpe.f64	d6, d4
    3ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ed0:	d502      	bpl.n	3ed8 <UEncoder::eePromLoad()+0xb8>
      odoWheelRadius[1] = 0.001;
    3ed2:	4b14      	ldr	r3, [pc, #80]	; (3f24 <UEncoder::eePromLoad()+0x104>)
    3ed4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (odoWheelBase < 0.01)
    3ed8:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
      odoWheelBase = 0.01;
    3edc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 3f28 <UEncoder::eePromLoad()+0x108>
    anglePerPuls = 2.0 * M_PI / (pulsPerRev);
    3ee0:	ed84 5a72 	vstr	s10, [r4, #456]	; 0x1c8
    if (odoWheelBase < 0.01)
    3ee4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 3f18 <UEncoder::eePromLoad()+0xf8>
      odoWheelBase = 0.01;
    3ee8:	eeb4 4b46 	vcmp.f64	d4, d6
    3eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ef0:	bf48      	it	mi
    3ef2:	eef0 7a47 	vmovmi.f32	s15, s14
    3ef6:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
}
    3efa:	bd38      	pop	{r3, r4, r5, pc}
      pulsPerRev = 1;
    3efc:	2301      	movs	r3, #1
    3efe:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 3f2c <UEncoder::eePromLoad()+0x10c>
    3f02:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    3f06:	e7c0      	b.n	3e8a <UEncoder::eePromLoad()+0x6a>
    3f08:	54442d18 	.word	0x54442d18
    3f0c:	401921fb 	.word	0x401921fb
    3f10:	d2f1a9fc 	.word	0xd2f1a9fc
    3f14:	3f50624d 	.word	0x3f50624d
    3f18:	47ae147b 	.word	0x47ae147b
    3f1c:	3f847ae1 	.word	0x3f847ae1
    3f20:	2000ebf4 	.word	0x2000ebf4
    3f24:	3a83126f 	.word	0x3a83126f
    3f28:	3c23d70a 	.word	0x3c23d70a
    3f2c:	40c90fdb 	.word	0x40c90fdb

00003f30 <UEncoder::clearPose()>:
  pose[0] = 0;
    3f30:	2300      	movs	r3, #0
  encoder[0] = 0;
    3f32:	2200      	movs	r2, #0
  pose[0] = 0;
    3f34:	64c3      	str	r3, [r0, #76]	; 0x4c
  pose[1] = 0;
    3f36:	6503      	str	r3, [r0, #80]	; 0x50
  pose[2] = 0;
    3f38:	6543      	str	r3, [r0, #84]	; 0x54
  distance = 0.0;
    3f3a:	65c3      	str	r3, [r0, #92]	; 0x5c
    tripA = 0;
    3f3c:	6603      	str	r3, [r0, #96]	; 0x60
    tripAh = 0;
    3f3e:	6683      	str	r3, [r0, #104]	; 0x68
    tripAtime = 0;
    3f40:	6703      	str	r3, [r0, #112]	; 0x70
    tripB = 0;
    3f42:	6643      	str	r3, [r0, #100]	; 0x64
    tripBh = 0;
    3f44:	66c3      	str	r3, [r0, #108]	; 0x6c
    tripBtime = 0;
    3f46:	6743      	str	r3, [r0, #116]	; 0x74
  encoder[1] = 0;
    3f48:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  encoderLast[1] = 0;
    3f4c:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
  tripAreset();
  tripBreset();
}
    3f50:	4770      	bx	lr
    3f52:	bf00      	nop
    3f54:	0000      	movs	r0, r0
	...

00003f58 <UEncoder::updatePose(unsigned long)>:


void UEncoder::updatePose(uint32_t loop)
{
  // wheel velocity on radians per second
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3f58:	edd0 7a28 	vldr	s15, [r0, #160]	; 0xa0
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
  // Turnrate in rad/sec
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
  // Velocity in m/s
  robotVelocity = (wheelVelocityEst[0] + wheelVelocityEst[0])/2.0;
    3f5c:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3f60:	edd0 6a22 	vldr	s13, [r0, #136]	; 0x88
  //
  // sum for subscriber
  wheelVelocityEstSum[0] += wheelVelocityEst[0];
    3f64:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3f68:	eef1 7a67 	vneg.f32	s15, s15
  wheelVelocity[1] =  motorVelocity[1] /gear;
    3f6c:	ed90 7a29 	vldr	s14, [r0, #164]	; 0xa4
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
    3f70:	ed90 5a20 	vldr	s10, [r0, #128]	; 0x80
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3f74:	f200 5104 	addw	r1, r0, #1284	; 0x504
  wheelVelocity[1] =  motorVelocity[1] /gear;
    3f78:	eec7 5a26 	vdiv.f32	s11, s14, s13
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
    3f7c:	edd0 3a21 	vldr	s7, [r0, #132]	; 0x84
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3f80:	ed90 4a23 	vldr	s8, [r0, #140]	; 0x8c
  robotTurnrateSum += robotTurnrate;
    3f84:	f500 6ca1 	add.w	ip, r0, #1288	; 0x508
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
{
    3f8c:	b510      	push	{r4, lr}
    3f8e:	4604      	mov	r4, r0
  robotVelocitySum += robotVelocity;
    3f90:	f200 500c 	addw	r0, r0, #1292	; 0x50c
{
    3f94:	ed2d 8b06 	vpush	{d8-d10}
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
    3f98:	ee25 6aa3 	vmul.f32	s12, s11, s7
  wheelVelocity[1] =  motorVelocity[1] /gear;
    3f9c:	edc4 5a27 	vstr	s11, [r4, #156]	; 0x9c
  tripAh += dh;
  tripB += ds;
  tripBh += dh;

  // add half the angle
  pose[2] += dh/2.0;
    3fa0:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
  wheelVelocityEst[1] = wheelVelocity[1] * odoWheelRadius[1];
    3fa4:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
    3fa8:	ee67 7a05 	vmul.f32	s15, s14, s10
  wheelVelocity[0] = -motorVelocity[0] /gear;
    3fac:	ed84 7a26 	vstr	s14, [r4, #152]	; 0x98
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3fb0:	ee76 5a67 	vsub.f32	s11, s12, s15
  wheelVelocityEst[0] = wheelVelocity[0] * odoWheelRadius[0];
    3fb4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
  robotVelocity = (wheelVelocityEst[0] + wheelVelocityEst[0])/2.0;
    3fb8:	ee37 7aa7 	vadd.f32	s14, s15, s15
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3fbc:	ee85 3a84 	vdiv.f32	s6, s11, s8
  robotVelocity = (wheelVelocityEst[0] + wheelVelocityEst[0])/2.0;
    3fc0:	ee27 7a24 	vmul.f32	s14, s14, s9
    3fc4:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
  robotTurnrate = (wheelVelocityEst[1] - wheelVelocityEst[0])/odoWheelBase ;
    3fc8:	ed84 3a1e 	vstr	s6, [r4, #120]	; 0x78
  wheelVelocityEstSum[0] += wheelVelocityEst[0];
    3fcc:	edd3 5a00 	vldr	s11, [r3]
    3fd0:	ee75 7aa7 	vadd.f32	s15, s11, s15
    3fd4:	edc3 7a00 	vstr	s15, [r3]
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3fd8:	edd1 7a00 	vldr	s15, [r1]
  velSubscribeCnt++;
    3fdc:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3fe0:	ee77 7a86 	vadd.f32	s15, s15, s12
  velSubscribeCnt++;
    3fe4:	1c5a      	adds	r2, r3, #1
  wheelVelocityEstSum[1] += wheelVelocityEst[1];
    3fe6:	edc1 7a00 	vstr	s15, [r1]
  robotTurnrateSum += robotTurnrate;
    3fea:	eddc 7a00 	vldr	s15, [ip]
    3fee:	ee77 7a83 	vadd.f32	s15, s15, s6
  uint32_t p1 = encoder[0];
    3ff2:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
  robotTurnrateSum += robotTurnrate;
    3ff6:	edcc 7a00 	vstr	s15, [ip]
  robotVelocitySum += robotVelocity;
    3ffa:	edd0 7a00 	vldr	s15, [r0]
    3ffe:	ee77 7a87 	vadd.f32	s15, s15, s14
    4002:	edc0 7a00 	vstr	s15, [r0]
  velSubscribeCnt++;
    4006:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    400a:	ed94 3a72 	vldr	s6, [r4, #456]	; 0x1c8
  distance += ds;
    400e:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
  tripA += ds;
    4012:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
  int dp1 = (int32_t)p1 - (int32_t)encoderLast[0];
    4016:	e9d4 202d 	ldrd	r2, r0, [r4, #180]	; 0xb4
  encoderLast[1] = p2;
    401a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  int dp2 = (int32_t)p2 - (int32_t)encoderLast[1];
    401e:	1a1b      	subs	r3, r3, r0
  encoderLast[0] = p1;
    4020:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  pose[2] += dh/2.0;
    4024:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
  int dp2 = (int32_t)p2 - (int32_t)encoderLast[1];
    4028:	ee07 3a90 	vmov	s15, r3
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    402c:	1a53      	subs	r3, r2, r1
  pose[2] += dh/2.0;
    402e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    4032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    4036:	ee07 3a10 	vmov	s14, r3
    403a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    403e:	ee67 7a83 	vmul.f32	s15, s15, s6
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    4042:	ee27 7a03 	vmul.f32	s14, s14, s6
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    4046:	eec7 8aa6 	vdiv.f32	s17, s15, s13
  float d1 =  -dp1 * anglePerPuls / gear * odoWheelRadius[0];
    404a:	eec7 7a26 	vdiv.f32	s15, s14, s13
  float d2 =   dp2 * anglePerPuls / gear * odoWheelRadius[1];
    404e:	ee68 8aa3 	vmul.f32	s17, s17, s7
  float dh = (d2 - d1) / odoWheelBase;
    4052:	eeb0 7a68 	vmov.f32	s14, s17
  float ds = (d1 + d2) / 2.0;
    4056:	eee5 8a27 	vfma.f32	s17, s10, s15
  float dh = (d2 - d1) / odoWheelBase;
    405a:	eea5 7a67 	vfms.f32	s14, s10, s15
  float ds = (d1 + d2) / 2.0;
    405e:	ee68 8aa4 	vmul.f32	s17, s17, s9
  float dh = (d2 - d1) / odoWheelBase;
    4062:	eec7 6a04 	vdiv.f32	s13, s14, s8
  tripA += ds;
    4066:	ee76 7a28 	vadd.f32	s15, s12, s17
  tripB += ds;
    406a:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
  distance += ds;
    406e:	ee35 7aa8 	vadd.f32	s14, s11, s17
  tripB += ds;
    4072:	ee36 6a28 	vadd.f32	s12, s12, s17
  tripA += ds;
    4076:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
  distance += ds;
    407a:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
  tripBh += dh;
    407e:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
  tripAh += dh;
    4082:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
  tripB += ds;
    4086:	ed84 6a19 	vstr	s12, [r4, #100]	; 0x64
  pose[2] += dh/2.0;
    408a:	eeb7 aae6 	vcvt.f64.f32	d10, s13
  tripAh += dh;
    408e:	ee37 7a26 	vadd.f32	s14, s14, s13
  tripBh += dh;
    4092:	ee77 7aa6 	vadd.f32	s15, s15, s13
  pose[2] += dh/2.0;
    4096:	eeaa 0b09 	vfma.f64	d0, d10, d9
  tripAh += dh;
    409a:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
  tripBh += dh;
    409e:	edc4 7a1b 	vstr	s15, [r4, #108]	; 0x6c
  pose[2] += dh/2.0;
    40a2:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
  // update pose position
  pose[0] += cosf(pose[2]) * ds;
    40a6:	eeb0 0a48 	vmov.f32	s0, s16
    40aa:	f014 fc95 	bl	189d8 <cosf>
    40ae:	eeb0 7a40 	vmov.f32	s14, s0
    40b2:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
  pose[1] += sinf(pose[2]) * ds;
    40b6:	eeb0 0a48 	vmov.f32	s0, s16
  pose[0] += cosf(pose[2]) * ds;
    40ba:	eee7 7a28 	vfma.f32	s15, s14, s17
    40be:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
  pose[1] += sinf(pose[2]) * ds;
    40c2:	f014 fb85 	bl	187d0 <sinf>
  // add other half angle
  pose[2] += dh/2.0;
    40c6:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
  pose[1] += sinf(pose[2]) * ds;
    40ca:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
  pose[2] += dh/2.0;
    40ce:	eeaa 7b09 	vfma.f64	d7, d10, d9
  pose[1] += sinf(pose[2]) * ds;
    40d2:	eee0 6a28 	vfma.f32	s13, s0, s17
  // fold angle
  if (pose[2] > M_PI)
    40d6:	ed9f 5b18 	vldr	d5, [pc, #96]	; 4138 <UEncoder::updatePose(unsigned long)+0x1e0>
  pose[2] += dh/2.0;
    40da:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  pose[1] += sinf(pose[2]) * ds;
    40de:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
  if (pose[2] > M_PI)
    40e2:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
    40e6:	eeb4 6bc5 	vcmpe.f64	d6, d5
    40ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40ee:	dd0a      	ble.n	4106 <UEncoder::updatePose(unsigned long)+0x1ae>
    pose[2] -= M_PI * 2;
    40f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 4140 <UEncoder::updatePose(unsigned long)+0x1e8>
  else if (pose[2] < -M_PI)
    pose[2] += M_PI * 2;

}
    40f4:	ecbd 8b06 	vpop	{d8-d10}
    pose[2] -= M_PI * 2;
    40f8:	ee36 6b47 	vsub.f64	d6, d6, d7
    40fc:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    4100:	ed84 6a15 	vstr	s12, [r4, #84]	; 0x54
}
    4104:	bd10      	pop	{r4, pc}
  else if (pose[2] < -M_PI)
    4106:	ed9f 5b10 	vldr	d5, [pc, #64]	; 4148 <UEncoder::updatePose(unsigned long)+0x1f0>
    410a:	eeb4 6bc5 	vcmpe.f64	d6, d5
    410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4112:	d50a      	bpl.n	412a <UEncoder::updatePose(unsigned long)+0x1d2>
    pose[2] += M_PI * 2;
    4114:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 4140 <UEncoder::updatePose(unsigned long)+0x1e8>
}
    4118:	ecbd 8b06 	vpop	{d8-d10}
    pose[2] += M_PI * 2;
    411c:	ee36 6b07 	vadd.f64	d6, d6, d7
    4120:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    4124:	ed84 6a15 	vstr	s12, [r4, #84]	; 0x54
}
    4128:	bd10      	pop	{r4, pc}
    412a:	ecbd 8b06 	vpop	{d8-d10}
  pose[2] += dh/2.0;
    412e:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
}
    4132:	bd10      	pop	{r4, pc}
    4134:	f3af 8000 	nop.w
    4138:	54442d18 	.word	0x54442d18
    413c:	400921fb 	.word	0x400921fb
    4140:	54442d18 	.word	0x54442d18
    4144:	401921fb 	.word	0x401921fb
    4148:	54442d18 	.word	0x54442d18
    414c:	c00921fb 	.word	0xc00921fb

00004150 <UEncoder::updateVelocityEstimate()>:

void UEncoder::updateVelocityEstimate()
{
    4150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4154:	b08d      	sub	sp, #52	; 0x34
  const float    one_sec_in_cpu  = F_CPU;
  const uint32_t half_sec_in_cpu = F_CPU/2;
  // motor 1 velocity
  int j = active;
    4156:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
  float velSum[MOTOR_CNT] = {0};
  int velSumCnt[MOTOR_CNT] = {0};
  float velSlowSum[MOTOR_CNT] = {0};
  int velSlowSumCnt[MOTOR_CNT] = {0};
  // angle for full period of encoder
  const float app = anglePerPuls * 4;
    415a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    415e:	ed90 6a72 	vldr	s12, [r0, #456]	; 0x1c8
    4162:	ab06      	add	r3, sp, #24
  float velSum[MOTOR_CNT] = {0};
    4164:	2200      	movs	r2, #0
        velSlowSumCnt[m]++;
      }
      else
      { // use time since saved transition
        uint32_t dt_cpu = transitionTime_cpu[m][j][ab4] - lastTransitionTime_cpu[m][ab4];
        float v = 0;
    4166:	ed9f 5a5f 	vldr	s10, [pc, #380]	; 42e4 <UEncoder::updateVelocityEstimate()+0x194>
    416a:	f10d 0c10 	add.w	ip, sp, #16
    416e:	9302      	str	r3, [sp, #8]
  active = (j + 1) % 2;
    4170:	1c4b      	adds	r3, r1, #1
    4172:	f101 010e 	add.w	r1, r1, #14
  const float app = anglePerPuls * 4;
    4176:	ee26 6a27 	vmul.f32	s12, s12, s15
  active = (j + 1) % 2;
    417a:	f003 0301 	and.w	r3, r3, #1
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
        { // no overload, and valid timing
          v = one_sec_in_cpu / dt_cpu * incrEncoder[m][j][ab4] * app;
    417e:	eddf 5a5a 	vldr	s11, [pc, #360]	; 42e8 <UEncoder::updateVelocityEstimate()+0x198>
    4182:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    4186:	f10d 0e20 	add.w	lr, sp, #32
  active = (j + 1) % 2;
    418a:	bf48      	it	mi
    418c:	425b      	negmi	r3, r3
    418e:	ac0a      	add	r4, sp, #40	; 0x28
    4190:	9101      	str	r1, [sp, #4]
    4192:	f100 08a0 	add.w	r8, r0, #160	; 0xa0
    4196:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
    419a:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
    419e:	4f53      	ldr	r7, [pc, #332]	; (42ec <UEncoder::updateVelocityEstimate()+0x19c>)
    41a0:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
        // save new transition time as last
        lastTransitionTime_cpu[m][ab4] = transitionTime_cpu[m][j][ab4];
        // edges used in this sample
        incrEnc[m][ab4] = incrEncoder[m][j][ab4];
        // prepare for next period
        incrEncoder[m][j][ab4] = 0;
    41a4:	4616      	mov	r6, r2
  float velSum[MOTOR_CNT] = {0};
    41a6:	9204      	str	r2, [sp, #16]
  int velSumCnt[MOTOR_CNT] = {0};
    41a8:	9206      	str	r2, [sp, #24]
  float velSlowSum[MOTOR_CNT] = {0};
    41aa:	9208      	str	r2, [sp, #32]
  int velSlowSumCnt[MOTOR_CNT] = {0};
    41ac:	920a      	str	r2, [sp, #40]	; 0x28
  float velSum[MOTOR_CNT] = {0};
    41ae:	9205      	str	r2, [sp, #20]
  int velSumCnt[MOTOR_CNT] = {0};
    41b0:	9207      	str	r2, [sp, #28]
  float velSlowSum[MOTOR_CNT] = {0};
    41b2:	9209      	str	r2, [sp, #36]	; 0x24
  int velSlowSumCnt[MOTOR_CNT] = {0};
    41b4:	920b      	str	r2, [sp, #44]	; 0x2c
    41b6:	9103      	str	r1, [sp, #12]
{
    41b8:	9801      	ldr	r0, [sp, #4]
    41ba:	f103 0910 	add.w	r9, r3, #16
      dEncoder[m][ab4] = incrEncoder[m][j][ab4];
    41be:	f850 1f04 	ldr.w	r1, [r0, #4]!
    41c2:	f843 1f04 	str.w	r1, [r3, #4]!
      if (incrEncoder[m][j][ab4] == 0)
    41c6:	2900      	cmp	r1, #0
    41c8:	d143      	bne.n	4252 <UEncoder::updateVelocityEstimate()+0x102>
        uint32_t dt_cpu = ARM_DWT_CYCCNT - lastTransitionTime_cpu[m][ab4];
    41ca:	4949      	ldr	r1, [pc, #292]	; (42f0 <UEncoder::updateVelocityEstimate()+0x1a0>)
    41cc:	684d      	ldr	r5, [r1, #4]
    41ce:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
    41d2:	1a69      	subs	r1, r5, r1
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
    41d4:	1e4d      	subs	r5, r1, #1
    41d6:	42bd      	cmp	r5, r7
    41d8:	d863      	bhi.n	42a2 <UEncoder::updateVelocityEstimate()+0x152>
          v = one_sec_in_cpu/dt_cpu;
    41da:	ee07 1a90 	vmov	s15, r1
          if (fabsf(v) * app < fabsf(motorVelocity[m]))
    41de:	edd8 6a00 	vldr	s13, [r8]
          v = one_sec_in_cpu/dt_cpu;
    41e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
          if (fabsf(v) * app < fabsf(motorVelocity[m]))
    41e6:	eef0 6ae6 	vabs.f32	s13, s13
          v = one_sec_in_cpu/dt_cpu;
    41ea:	eec5 7a87 	vdiv.f32	s15, s11, s14
          if (fabsf(v) * app < fabsf(motorVelocity[m]))
    41ee:	ee67 7a86 	vmul.f32	s15, s15, s12
    41f2:	eef4 7ae6 	vcmpe.f32	s15, s13
    41f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41fa:	d45a      	bmi.n	42b2 <UEncoder::updateVelocityEstimate()+0x162>
            if (velocityPart[m][ab4] > 0)
    41fc:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
        velSlowSum[m] +=  velocityPart[m][ab4];
    4200:	ed9e 7a00 	vldr	s14, [lr]
        velSlowSumCnt[m]++;
    4204:	6821      	ldr	r1, [r4, #0]
        velSlowSum[m] +=  velocityPart[m][ab4];
    4206:	ee77 7a27 	vadd.f32	s15, s14, s15
        incrEnc[m][ab4] = 0;
    420a:	669e      	str	r6, [r3, #104]	; 0x68
        velSlowSumCnt[m]++;
    420c:	3101      	adds	r1, #1
        velSlowSum[m] +=  velocityPart[m][ab4];
    420e:	edce 7a00 	vstr	s15, [lr]
        velSlowSumCnt[m]++;
    4212:	6021      	str	r1, [r4, #0]
    for (int ab4 = 0; ab4 < 4; ab4++)
    4214:	454b      	cmp	r3, r9
    4216:	d1d2      	bne.n	41be <UEncoder::updateVelocityEstimate()+0x6e>
        // use this velocity
        velSum[m] += v;
        velSumCnt[m]++;
      }
    }
    if (velSumCnt[m] > 0)
    4218:	2a00      	cmp	r2, #0
    421a:	dd59      	ble.n	42d0 <UEncoder::updateVelocityEstimate()+0x180>
      motorVelocity[m] = velSum[m] / velSumCnt[m];
    421c:	ee07 2a90 	vmov	s15, r2
    4220:	eddc 6a00 	vldr	s13, [ip]
    4224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    4228:	eec6 7a87 	vdiv.f32	s15, s13, s14
  for (int m = 0; m < MOTOR_CNT; m++)
    422c:	9b01      	ldr	r3, [sp, #4]
    422e:	f10c 0c04 	add.w	ip, ip, #4
    4232:	ece8 7a01 	vstmia	r8!, {s15}
    4236:	f10e 0e04 	add.w	lr, lr, #4
    423a:	3320      	adds	r3, #32
    423c:	3404      	adds	r4, #4
    423e:	9301      	str	r3, [sp, #4]
    4240:	9b03      	ldr	r3, [sp, #12]
    4242:	4598      	cmp	r8, r3
    4244:	d041      	beq.n	42ca <UEncoder::updateVelocityEstimate()+0x17a>
        velSumCnt[m]++;
    4246:	9902      	ldr	r1, [sp, #8]
    4248:	464b      	mov	r3, r9
    424a:	f851 2f04 	ldr.w	r2, [r1, #4]!
    424e:	9102      	str	r1, [sp, #8]
    4250:	e7b2      	b.n	41b8 <UEncoder::updateVelocityEstimate()+0x68>
        uint32_t dt_cpu = transitionTime_cpu[m][j][ab4] - lastTransitionTime_cpu[m][ab4];
    4252:	f8d0 a060 	ldr.w	sl, [r0, #96]	; 0x60
    4256:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    425a:	ebaa 0505 	sub.w	r5, sl, r5
        if (dt_cpu > 0 and dt_cpu < half_sec_in_cpu)
    425e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
    4262:	45bb      	cmp	fp, r7
    4264:	d822      	bhi.n	42ac <UEncoder::updateVelocityEstimate()+0x15c>
          v = one_sec_in_cpu / dt_cpu * incrEncoder[m][j][ab4] * app;
    4266:	ee07 5a90 	vmov	s15, r5
    426a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    426e:	eec5 7a87 	vdiv.f32	s15, s11, s14
    4272:	ee07 1a10 	vmov	s14, r1
    4276:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    427a:	ee67 7a87 	vmul.f32	s15, s15, s14
    427e:	ee67 7a86 	vmul.f32	s15, s15, s12
          velocityPart[m][ab4] = v;
    4282:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        velSum[m] += v;
    4286:	ed9c 7a00 	vldr	s14, [ip]
        velSumCnt[m]++;
    428a:	3201      	adds	r2, #1
        incrEnc[m][ab4] = incrEncoder[m][j][ab4];
    428c:	6699      	str	r1, [r3, #104]	; 0x68
        velSum[m] += v;
    428e:	ee77 7a27 	vadd.f32	s15, s14, s15
        velSumCnt[m]++;
    4292:	9902      	ldr	r1, [sp, #8]
        lastTransitionTime_cpu[m][ab4] = transitionTime_cpu[m][j][ab4];
    4294:	f8c3 a0cc 	str.w	sl, [r3, #204]	; 0xcc
        velSumCnt[m]++;
    4298:	600a      	str	r2, [r1, #0]
        incrEncoder[m][j][ab4] = 0;
    429a:	6006      	str	r6, [r0, #0]
        velSum[m] += v;
    429c:	edcc 7a00 	vstr	s15, [ip]
        velSumCnt[m]++;
    42a0:	e7b8      	b.n	4214 <UEncoder::updateVelocityEstimate()+0xc4>
          velocityPart[m][ab4] = 0;
    42a2:	eddf 7a10 	vldr	s15, [pc, #64]	; 42e4 <UEncoder::updateVelocityEstimate()+0x194>
    42a6:	ed83 5a3b 	vstr	s10, [r3, #236]	; 0xec
    42aa:	e7a9      	b.n	4200 <UEncoder::updateVelocityEstimate()+0xb0>
        float v = 0;
    42ac:	eef0 7a45 	vmov.f32	s15, s10
    42b0:	e7e9      	b.n	4286 <UEncoder::updateVelocityEstimate()+0x136>
            if (velocityPart[m][ab4] > 0)
    42b2:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
    42b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    42ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              velocityPart[m][ab4] = -v * app;
    42be:	bfd8      	it	le
    42c0:	eef1 7a67 	vnegle.f32	s15, s15
    42c4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    42c8:	e79a      	b.n	4200 <UEncoder::updateVelocityEstimate()+0xb0>
    // char s[MSL];
    // snprintf(s, MSL, "# UpdateVel:: %g %g\r\n", motorVelocity[0], motorVelocity[1]);
    // usb.send(s);
    // debug end
  }
}
    42ca:	b00d      	add	sp, #52	; 0x34
    42cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      motorVelocity[m] = velSlowSum[m] / velSlowSumCnt[m];
    42d0:	edd4 7a00 	vldr	s15, [r4]
    42d4:	edde 6a00 	vldr	s13, [lr]
    42d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    42dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    42e0:	e7a4      	b.n	422c <UEncoder::updateVelocityEstimate()+0xdc>
    42e2:	bf00      	nop
    42e4:	00000000 	.word	0x00000000
    42e8:	4e0f0d18 	.word	0x4e0f0d18
    42ec:	11e1a2fe 	.word	0x11e1a2fe
    42f0:	e0001000 	.word	0xe0001000
    42f4:	00000000 	.word	0x00000000

000042f8 <UEncoder::tick()>:
{ // Update pose estimates
    42f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t t_CPU = ARM_DWT_CYCCNT;
    42fa:	4b3f      	ldr	r3, [pc, #252]	; (43f8 <UEncoder::tick()+0x100>)
  uint32_t dt_us = dt * CPU_us;
    42fc:	f200 41f4 	addw	r1, r0, #1268	; 0x4f4
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4300:	eddf 7a3e 	vldr	s15, [pc, #248]	; 43fc <UEncoder::tick()+0x104>
{ // Update pose estimates
    4304:	4604      	mov	r4, r0
  uint32_t t_CPU = ARM_DWT_CYCCNT;
    4306:	685a      	ldr	r2, [r3, #4]
  uint32_t dt = t_CPU - lastSample_CPU;
    4308:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
  uint32_t dt_us = dt * CPU_us;
    430c:	ed91 6a00 	vldr	s12, [r1]
  uint32_t dt = t_CPU - lastSample_CPU;
    4310:	1ad3      	subs	r3, r2, r3
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4312:	eddf 6a3b 	vldr	s13, [pc, #236]	; 4400 <UEncoder::tick()+0x108>
  tickCnt++;
    4316:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
  uint32_t dt = t_CPU - lastSample_CPU;
    431a:	ee07 3a10 	vmov	s14, r3
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    431e:	f500 639f 	add.w	r3, r0, #1272	; 0x4f8
  tickCnt++;
    4322:	3501      	adds	r5, #1
  uint32_t dt_us = dt * CPU_us;
    4324:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{ // Update pose estimates
    4328:	ed2d 8b02 	vpush	{d8}
  uint32_t dt_us = dt * CPU_us;
    432c:	ee27 7a06 	vmul.f32	s14, s14, s12
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4330:	ed93 6a00 	vldr	s12, [r3]
  lastSample_CPU = t_CPU;
    4334:	f8c0 24fc 	str.w	r2, [r0, #1276]	; 0x4fc
  tickCnt++;
    4338:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
  uint32_t dt_us = dt * CPU_us;
    433c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  sampleTime_us = (sampleTime_us * 49 + dt_us)/50.0;
    4340:	eeb8 8a47 	vcvt.f32.u32	s16, s14
    4344:	eeb0 7a48 	vmov.f32	s14, s16
    4348:	eea6 7a27 	vfma.f32	s14, s12, s15
    434c:	eec7 7a26 	vdiv.f32	s15, s14, s13
    4350:	edc3 7a00 	vstr	s15, [r3]
  updateVelocityEstimate();
    4354:	f7ff fefc 	bl	4150 <UEncoder::updateVelocityEstimate()>
  if (isnan(pose[0]) or isnan(pose[1]) or isnan(pose[2]))
    4358:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
    435c:	eef4 7a67 	vcmp.f32	s15, s15
    4360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4364:	d62c      	bvs.n	43c0 <UEncoder::tick()+0xc8>
    4366:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
    436a:	eef4 7a67 	vcmp.f32	s15, s15
    436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4372:	d625      	bvs.n	43c0 <UEncoder::tick()+0xc8>
    4374:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
    4378:	eef4 7a67 	vcmp.f32	s15, s15
    437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4380:	d61e      	bvs.n	43c0 <UEncoder::tick()+0xc8>
  updatePose(tickCnt);
    4382:	4629      	mov	r1, r5
    4384:	4620      	mov	r0, r4
    4386:	f7ff fde7 	bl	3f58 <UEncoder::updatePose(unsigned long)>
  tripAtime += float(dt_us) * 1e-6;
    438a:	ed94 5a1c 	vldr	s10, [r4, #112]	; 0x70
  tripBtime += float(dt_us) * 1e-6;
    438e:	ed94 6a1d 	vldr	s12, [r4, #116]	; 0x74
  tripAtime += float(dt_us) * 1e-6;
    4392:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    4396:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  tripBtime += float(dt_us) * 1e-6;
    439a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
  tripAtime += float(dt_us) * 1e-6;
    439e:	ed9f 4b14 	vldr	d4, [pc, #80]	; 43f0 <UEncoder::tick()+0xf8>
    43a2:	eea8 5b04 	vfma.f64	d5, d8, d4
  tripBtime += float(dt_us) * 1e-6;
    43a6:	eea8 6b04 	vfma.f64	d6, d8, d4
}
    43aa:	ecbd 8b02 	vpop	{d8}
  tripAtime += float(dt_us) * 1e-6;
    43ae:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  tripBtime += float(dt_us) * 1e-6;
    43b2:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  tripAtime += float(dt_us) * 1e-6;
    43b6:	ed84 5a1c 	vstr	s10, [r4, #112]	; 0x70
  tripBtime += float(dt_us) * 1e-6;
    43ba:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
}
    43be:	bd38      	pop	{r3, r4, r5, pc}
    nanCnt++;
    43c0:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
  pose[0] = 0;
    43c4:	2300      	movs	r3, #0
  encoder[0] = 0;
    43c6:	2200      	movs	r2, #0
    nanCnt++;
    43c8:	3101      	adds	r1, #1
  pose[0] = 0;
    43ca:	64e3      	str	r3, [r4, #76]	; 0x4c
  pose[1] = 0;
    43cc:	6523      	str	r3, [r4, #80]	; 0x50
  pose[2] = 0;
    43ce:	6563      	str	r3, [r4, #84]	; 0x54
  distance = 0.0;
    43d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    tripA = 0;
    43d2:	6623      	str	r3, [r4, #96]	; 0x60
    tripAh = 0;
    43d4:	66a3      	str	r3, [r4, #104]	; 0x68
    tripAtime = 0;
    43d6:	6723      	str	r3, [r4, #112]	; 0x70
    tripB = 0;
    43d8:	6663      	str	r3, [r4, #100]	; 0x64
    tripBh = 0;
    43da:	66e3      	str	r3, [r4, #108]	; 0x6c
    tripBtime = 0;
    43dc:	6763      	str	r3, [r4, #116]	; 0x74
    nanCnt++;
    43de:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
  encoder[1] = 0;
    43e2:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
  encoderLast[1] = 0;
    43e6:	e9c4 222d 	strd	r2, r2, [r4, #180]	; 0xb4
    nanCnt++;
    43ea:	e7ca      	b.n	4382 <UEncoder::tick()+0x8a>
    43ec:	f3af 8000 	nop.w
    43f0:	a0b5ed8d 	.word	0xa0b5ed8d
    43f4:	3eb0c6f7 	.word	0x3eb0c6f7
    43f8:	e0001000 	.word	0xe0001000
    43fc:	42440000 	.word	0x42440000
    4400:	42480000 	.word	0x42480000

00004404 <UEncoder::encoderInterrupt(int, bool)>:
int p12a = 0;
int p12b = 0;
#endif

void UEncoder::encoderInterrupt(int m, bool encA)
{ // get interrupt timing
    4404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4408:	eb00 0681 	add.w	r6, r0, r1, lsl #2
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    440c:	4d6b      	ldr	r5, [pc, #428]	; (45bc <UEncoder::encoderInterrupt(int, bool)+0x1b8>)
  uint32_t edge_cpu = ARM_DWT_CYCCNT;
    440e:	4b6c      	ldr	r3, [pc, #432]	; (45c0 <UEncoder::encoderInterrupt(int, bool)+0x1bc>)
    4410:	f896 c014 	ldrb.w	ip, [r6, #20]
    4414:	685c      	ldr	r4, [r3, #4]
    4416:	ea4f 170c 	mov.w	r7, ip, lsl #4
    441a:	7f33      	ldrb	r3, [r6, #28]
    441c:	eb05 1c0c 	add.w	ip, r5, ip, lsl #4
    4420:	f855 e007 	ldr.w	lr, [r5, r7]
    4424:	f8dc 700c 	ldr.w	r7, [ip, #12]
    4428:	f8de e008 	ldr.w	lr, [lr, #8]
    442c:	ea1e 0e07 	ands.w	lr, lr, r7
    4430:	ea4f 1703 	mov.w	r7, r3, lsl #4
    4434:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    4438:	59ef      	ldr	r7, [r5, r7]
    443a:	68dd      	ldr	r5, [r3, #12]
    443c:	bf18      	it	ne
    443e:	2301      	movne	r3, #1
    4440:	68bf      	ldr	r7, [r7, #8]
    4442:	bf08      	it	eq
    4444:	2300      	moveq	r3, #0
    4446:	422f      	tst	r7, r5
    4448:	bf14      	ite	ne
    444a:	f04f 0c01 	movne.w	ip, #1
    444e:	f04f 0c00 	moveq.w	ip, #0
  bool ccv;
  bool err = false;
  // edge index: A-up = 0, A-down = 1, B-up = 2, B-down = 3
  int ab4;
#ifdef USE_SPI_PINS
  if (m == 0)
    4452:	2900      	cmp	r1, #0
    4454:	d160      	bne.n	4518 <UEncoder::encoderInterrupt(int, bool)+0x114>
    digitalWriteFast(11, p11++ % 2);
    4456:	f8df 8178 	ldr.w	r8, [pc, #376]	; 45d0 <UEncoder::encoderInterrupt(int, bool)+0x1cc>
    445a:	f8d8 7000 	ldr.w	r7, [r8]
    445e:	f007 0501 	and.w	r5, r7, #1
    4462:	2f00      	cmp	r7, #0
    4464:	f107 0701 	add.w	r7, r7, #1
    4468:	bfb8      	it	lt
    446a:	426d      	neglt	r5, r5
    446c:	f8c8 7000 	str.w	r7, [r8]
		if (val) {
    4470:	b2ed      	uxtb	r5, r5
    4472:	b375      	cbz	r5, 44d2 <UEncoder::encoderInterrupt(int, bool)+0xce>
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    4474:	4d53      	ldr	r5, [pc, #332]	; (45c4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    4476:	2704      	movs	r7, #4
    4478:	f8c5 7084 	str.w	r7, [r5, #132]	; 0x84
      digitalWriteFast(12, p12a++ % 2);
    else
      digitalWriteFast(7, p12b++ % 2);
  }
#endif
  if (encA)
    447c:	b37a      	cbz	r2, 44de <UEncoder::encoderInterrupt(int, bool)+0xda>
  { // encode pin A interrupt
    ccv = pA == pB;
    err = pA == lastA[m];
    447e:	1842      	adds	r2, r0, r1
    4480:	f892 5518 	ldrb.w	r5, [r2, #1304]	; 0x518
    lastA[m] = pA;
    4484:	f882 3518 	strb.w	r3, [r2, #1304]	; 0x518
    if (err)
    4488:	42ab      	cmp	r3, r5
    448a:	d05e      	beq.n	454a <UEncoder::encoderInterrupt(int, bool)+0x146>
    ccv = pA == pB;
    448c:	ebac 0203 	sub.w	r2, ip, r3
      errCntA[m][pA]++;
    if (pA)
      ab4 = 0;
    else
      ab4 = 1;
    4490:	fabe f38e 	clz	r3, lr
  { // this was a spurious interrupt, ignore
    // encoder value didn't change
    return;
  }
  // use this set of data to save values
  int j = active;
    4494:	f8d0 5184 	ldr.w	r5, [r0, #388]	; 0x184
    ccv = pA == pB;
    4498:	fab2 f282 	clz	r2, r2
      ab4 = 1;
    449c:	095b      	lsrs	r3, r3, #5
    ccv = pA == pB;
    449e:	0952      	lsrs	r2, r2, #5
  if (ccv)
    44a0:	b362      	cbz	r2, 44fc <UEncoder::encoderInterrupt(int, bool)+0xf8>
  {
    encoder[m]--;
    // and within sample period
    incrEncoder[m][j][ab4]--;
    44a2:	eb05 0241 	add.w	r2, r5, r1, lsl #1
    encoder[m]--;
    44a6:	6b77      	ldr	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]--;
    44a8:	0049      	lsls	r1, r1, #1
    44aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    encoder[m]--;
    44ae:	3f01      	subs	r7, #1
    incrEncoder[m][j][ab4]--;
    44b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    encoder[m]--;
    44b4:	6377      	str	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]--;
    44b6:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    44ba:	3a01      	subs	r2, #1
    44bc:	4429      	add	r1, r5
    44be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    44c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    44c6:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  {
    encoder[m]++;
    // and within sample period
    incrEncoder[m][j][ab4]++;
  }
  transitionTime_cpu[m][j][ab4] = edge_cpu;
    44ca:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
}
    44ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    44d2:	4d3c      	ldr	r5, [pc, #240]	; (45c4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    44d4:	2704      	movs	r7, #4
    44d6:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
  if (encA)
    44da:	2a00      	cmp	r2, #0
    44dc:	d1cf      	bne.n	447e <UEncoder::encoderInterrupt(int, bool)+0x7a>
    err = pB == lastB[m];
    44de:	1842      	adds	r2, r0, r1
    44e0:	f892 551a 	ldrb.w	r5, [r2, #1306]	; 0x51a
    lastB[m] = pB;
    44e4:	f882 c51a 	strb.w	ip, [r2, #1306]	; 0x51a
    if (err)
    44e8:	4565      	cmp	r5, ip
    44ea:	d051      	beq.n	4590 <UEncoder::encoderInterrupt(int, bool)+0x18c>
    44ec:	ea83 020c 	eor.w	r2, r3, ip
  int j = active;
    44f0:	f8d0 5184 	ldr.w	r5, [r0, #388]	; 0x184
    if (pA)
    44f4:	f1c3 0303 	rsb	r3, r3, #3
  if (ccv)
    44f8:	2a00      	cmp	r2, #0
    44fa:	d1d2      	bne.n	44a2 <UEncoder::encoderInterrupt(int, bool)+0x9e>
    incrEncoder[m][j][ab4]++;
    44fc:	eb05 0241 	add.w	r2, r5, r1, lsl #1
    encoder[m]++;
    4500:	6b77      	ldr	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]++;
    4502:	0049      	lsls	r1, r1, #1
    4504:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    encoder[m]++;
    4508:	3701      	adds	r7, #1
    incrEncoder[m][j][ab4]++;
    450a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    encoder[m]++;
    450e:	6377      	str	r7, [r6, #52]	; 0x34
    incrEncoder[m][j][ab4]++;
    4510:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    4514:	3201      	adds	r2, #1
    4516:	e7d1      	b.n	44bc <UEncoder::encoderInterrupt(int, bool)+0xb8>
    if (encA)
    4518:	b312      	cbz	r2, 4560 <UEncoder::encoderInterrupt(int, bool)+0x15c>
      digitalWriteFast(12, p12a++ % 2);
    451a:	4f2b      	ldr	r7, [pc, #172]	; (45c8 <UEncoder::encoderInterrupt(int, bool)+0x1c4>)
    451c:	683d      	ldr	r5, [r7, #0]
    451e:	f005 0201 	and.w	r2, r5, #1
    4522:	2d00      	cmp	r5, #0
    4524:	f105 0501 	add.w	r5, r5, #1
    4528:	bfb8      	it	lt
    452a:	4252      	neglt	r2, r2
    452c:	603d      	str	r5, [r7, #0]
		if (val) {
    452e:	b2d2      	uxtb	r2, r2
    4530:	2a00      	cmp	r2, #0
    4532:	d03e      	beq.n	45b2 <UEncoder::encoderInterrupt(int, bool)+0x1ae>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4534:	4a23      	ldr	r2, [pc, #140]	; (45c4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    4536:	2502      	movs	r5, #2
    4538:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
    err = pA == lastA[m];
    453c:	1842      	adds	r2, r0, r1
    453e:	f892 5518 	ldrb.w	r5, [r2, #1304]	; 0x518
    lastA[m] = pA;
    4542:	f882 3518 	strb.w	r3, [r2, #1304]	; 0x518
    if (err)
    4546:	42ab      	cmp	r3, r5
    4548:	d1a0      	bne.n	448c <UEncoder::encoderInterrupt(int, bool)+0x88>
      errCntA[m][pA]++;
    454a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    454e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    4552:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    4556:	3201      	adds	r2, #1
    4558:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
}
    455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWriteFast(7, p12b++ % 2);
    4560:	4f1a      	ldr	r7, [pc, #104]	; (45cc <UEncoder::encoderInterrupt(int, bool)+0x1c8>)
    4562:	683d      	ldr	r5, [r7, #0]
    4564:	f005 0201 	and.w	r2, r5, #1
    4568:	2d00      	cmp	r5, #0
    456a:	f105 0501 	add.w	r5, r5, #1
    456e:	bfb8      	it	lt
    4570:	4252      	neglt	r2, r2
    4572:	603d      	str	r5, [r7, #0]
		if (val) {
    4574:	b2d2      	uxtb	r2, r2
    4576:	b1b2      	cbz	r2, 45a6 <UEncoder::encoderInterrupt(int, bool)+0x1a2>
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    4578:	4a12      	ldr	r2, [pc, #72]	; (45c4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    457a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    457e:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
    err = pB == lastB[m];
    4582:	1842      	adds	r2, r0, r1
    4584:	f892 551a 	ldrb.w	r5, [r2, #1306]	; 0x51a
    lastB[m] = pB;
    4588:	f882 c51a 	strb.w	ip, [r2, #1306]	; 0x51a
    if (err)
    458c:	4565      	cmp	r5, ip
    458e:	d1ad      	bne.n	44ec <UEncoder::encoderInterrupt(int, bool)+0xe8>
      errCntB[m][pB]++;
    4590:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    4594:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    4598:	f8dc 352c 	ldr.w	r3, [ip, #1324]	; 0x52c
    459c:	3301      	adds	r3, #1
    459e:	f8cc 352c 	str.w	r3, [ip, #1324]	; 0x52c
}
    45a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    45a6:	4a07      	ldr	r2, [pc, #28]	; (45c4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    45a8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    45ac:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
    45b0:	e795      	b.n	44de <UEncoder::encoderInterrupt(int, bool)+0xda>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    45b2:	4a04      	ldr	r2, [pc, #16]	; (45c4 <UEncoder::encoderInterrupt(int, bool)+0x1c0>)
    45b4:	2502      	movs	r5, #2
    45b6:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
    45ba:	e760      	b.n	447e <UEncoder::encoderInterrupt(int, bool)+0x7a>
    45bc:	200081bc 	.word	0x200081bc
    45c0:	e0001000 	.word	0xe0001000
    45c4:	42004000 	.word	0x42004000
    45c8:	2000f650 	.word	0x2000f650
    45cc:	2000f654 	.word	0x2000f654
    45d0:	2000f64c 	.word	0x2000f64c

000045d4 <m1EncoderA()>:


//////////////////////////////////////////////////////////////

void m1EncoderA()
{ // motor 1 encoder A change
    45d4:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(0,true);
    45d6:	4c06      	ldr	r4, [pc, #24]	; (45f0 <m1EncoderA()+0x1c>)
    45d8:	2201      	movs	r2, #1
    45da:	2100      	movs	r1, #0
    45dc:	4620      	mov	r0, r4
    45de:	f7ff ff11 	bl	4404 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    45e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    45e6:	3301      	adds	r3, #1
    45e8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
//   // get timestamp now
}
    45ec:	bd10      	pop	{r4, pc}
    45ee:	bf00      	nop
    45f0:	2000ec40 	.word	0x2000ec40

000045f4 <m2EncoderA()>:

void m2EncoderA()
{ // motor 2 encoder A
    encoder.encoderInterrupt(1, true);
    45f4:	2201      	movs	r2, #1
{ // motor 2 encoder A
    45f6:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(1, true);
    45f8:	4c05      	ldr	r4, [pc, #20]	; (4610 <m2EncoderA()+0x1c>)
    45fa:	4611      	mov	r1, r2
    45fc:	4620      	mov	r0, r4
    45fe:	f7ff ff01 	bl	4404 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    4602:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4606:	3301      	adds	r3, #1
    4608:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
    460c:	bd10      	pop	{r4, pc}
    460e:	bf00      	nop
    4610:	2000ec40 	.word	0x2000ec40

00004614 <m1EncoderB()>:

void m1EncoderB()
{ // motor 1 encoder pin B
    encoder.encoderInterrupt(0, false);
    4614:	2200      	movs	r2, #0
{ // motor 1 encoder pin B
    4616:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(0, false);
    4618:	4c05      	ldr	r4, [pc, #20]	; (4630 <m1EncoderB()+0x1c>)
    461a:	4611      	mov	r1, r2
    461c:	4620      	mov	r0, r4
    461e:	f7ff fef1 	bl	4404 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    4622:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4626:	3301      	adds	r3, #1
    4628:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
    462c:	bd10      	pop	{r4, pc}
    462e:	bf00      	nop
    4630:	2000ec40 	.word	0x2000ec40

00004634 <m2EncoderB()>:

void m2EncoderB()
{ // motor 2 encoder pin B
    4634:	b510      	push	{r4, lr}
    encoder.encoderInterrupt(1, false);
    4636:	4c06      	ldr	r4, [pc, #24]	; (4650 <m2EncoderB()+0x1c>)
    4638:	2200      	movs	r2, #0
    463a:	2101      	movs	r1, #1
    463c:	4620      	mov	r0, r4
    463e:	f7ff fee1 	bl	4404 <UEncoder::encoderInterrupt(int, bool)>
    encoder.intCnt++;
    4642:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4646:	3301      	adds	r3, #1
    4648:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
    464c:	bd10      	pop	{r4, pc}
    464e:	bf00      	nop
    4650:	2000ec40 	.word	0x2000ec40

00004654 <_GLOBAL__sub_I_encoder>:
    4654:	b510      	push	{r4, lr}
class UEncoder : public USubss
    4656:	4c41      	ldr	r4, [pc, #260]	; (475c <_GLOBAL__sub_I_encoder+0x108>)
    4658:	4620      	mov	r0, r4
    465a:	f007 fde5 	bl	c228 <USubss::USubss()>
    465e:	4b40      	ldr	r3, [pc, #256]	; (4760 <_GLOBAL__sub_I_encoder+0x10c>)
    4660:	4622      	mov	r2, r4
    4662:	4940      	ldr	r1, [pc, #256]	; (4764 <_GLOBAL__sub_I_encoder+0x110>)
    4664:	f104 0c1c 	add.w	ip, r4, #28
    4668:	f8df e10c 	ldr.w	lr, [pc, #268]	; 4778 <_GLOBAL__sub_I_encoder+0x124>
    466c:	f842 1b14 	str.w	r1, [r2], #20
    4670:	f8c4 e088 	str.w	lr, [r4, #136]	; 0x88
    4674:	f8df e104 	ldr.w	lr, [pc, #260]	; 477c <_GLOBAL__sub_I_encoder+0x128>
    4678:	e893 0003 	ldmia.w	r3, {r0, r1}
    467c:	e882 0003 	stmia.w	r2, {r0, r1}
    4680:	f103 0108 	add.w	r1, r3, #8
    4684:	f103 0210 	add.w	r2, r3, #16
    4688:	2300      	movs	r3, #0
    468a:	c903      	ldmia	r1, {r0, r1}
    468c:	64e3      	str	r3, [r4, #76]	; 0x4c
    468e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    4692:	65a3      	str	r3, [r4, #88]	; 0x58
    4694:	e88c 0003 	stmia.w	ip, {r0, r1}
    4698:	e892 0003 	ldmia.w	r2, {r0, r1}
    469c:	f104 0280 	add.w	r2, r4, #128	; 0x80
    46a0:	f04f 0c00 	mov.w	ip, #0
    46a4:	e882 0003 	stmia.w	r2, {r0, r1}
    46a8:	492f      	ldr	r1, [pc, #188]	; (4768 <_GLOBAL__sub_I_encoder+0x114>)
    46aa:	2044      	movs	r0, #68	; 0x44
    46ac:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
    46b0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    46b4:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
UEncoder encoder;
    46b8:	4620      	mov	r0, r4
    46ba:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
    46be:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
    46c2:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
    46c6:	f8c4 c064 	str.w	ip, [r4, #100]	; 0x64
    46ca:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    46ce:	f8c4 c06c 	str.w	ip, [r4, #108]	; 0x6c
    46d2:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    46d6:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
    46da:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    46de:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    46e2:	4a22      	ldr	r2, [pc, #136]	; (476c <_GLOBAL__sub_I_encoder+0x118>)
    46e4:	4922      	ldr	r1, [pc, #136]	; (4770 <_GLOBAL__sub_I_encoder+0x11c>)
    46e6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    46ea:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    46ee:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    46f2:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    46f6:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    46fa:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    46fe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4702:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    4706:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    470a:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    470e:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    4712:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
    4716:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
    471a:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
    471e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    4722:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    4726:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    472a:	4b12      	ldr	r3, [pc, #72]	; (4774 <_GLOBAL__sub_I_encoder+0x120>)
    472c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    4730:	f204 43f4 	addw	r3, r4, #1268	; 0x4f4
    4734:	f8c3 e000 	str.w	lr, [r3]
    4738:	f504 639f 	add.w	r3, r4, #1272	; 0x4f8
    473c:	f8df e040 	ldr.w	lr, [pc, #64]	; 4780 <_GLOBAL__sub_I_encoder+0x12c>
    4740:	f8c3 e000 	str.w	lr, [r3]
    4744:	f504 63a1 	add.w	r3, r4, #1288	; 0x508
    4748:	f204 540c 	addw	r4, r4, #1292	; 0x50c
    474c:	f8c3 c000 	str.w	ip, [r3]
    4750:	f8c4 c000 	str.w	ip, [r4]
}
    4754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UEncoder encoder;
    4758:	f014 bc5e 	b.w	19018 <__aeabi_atexit>
    475c:	2000ec40 	.word	0x2000ec40
    4760:	20001e28 	.word	0x20001e28
    4764:	2000813c 	.word	0x2000813c
    4768:	3e6f9db2 	.word	0x3e6f9db2
    476c:	20008f80 	.word	0x20008f80
    4770:	0000392d 	.word	0x0000392d
    4774:	3dbd3c19 	.word	0x3dbd3c19
    4778:	41980000 	.word	0x41980000
    477c:	3ada740e 	.word	0x3ada740e
    4780:	447a0000 	.word	0x447a0000

00004784 <UImu2::sendHelp()>:
{
    4784:	b530      	push	{r4, r5, lr}
  usb.send("# IMU -------\r\n");
    4786:	4c0e      	ldr	r4, [pc, #56]	; (47c0 <UImu2::sendHelp()+0x3c>)
{
    4788:	b0cd      	sub	sp, #308	; 0x134
    478a:	4605      	mov	r5, r0
  usb.send("# IMU -------\r\n");
    478c:	490d      	ldr	r1, [pc, #52]	; (47c4 <UImu2::sendHelp()+0x40>)
    478e:	4620      	mov	r0, r4
    4790:	f007 ff3c 	bl	c60c <UUSB::send(char const*)>
  usb.send(            "# -- \tgyrocal \tSet gyro calibration values (offset[3])\n");
    4794:	490c      	ldr	r1, [pc, #48]	; (47c8 <UImu2::sendHelp()+0x44>)
    4796:	4620      	mov	r0, r4
    4798:	f007 ff38 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tgyroc \tStart gyro calibration (finished=%d)\r\n", gyroOffsetDone);
    479c:	7e2b      	ldrb	r3, [r5, #24]
    479e:	4a0b      	ldr	r2, [pc, #44]	; (47cc <UImu2::sendHelp()+0x48>)
    47a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
    47a4:	a801      	add	r0, sp, #4
    47a6:	f017 f805 	bl	1b7b4 <snprintf>
  usb.send(reply);
    47aa:	a901      	add	r1, sp, #4
    47ac:	4620      	mov	r0, r4
    47ae:	f007 ff2d 	bl	c60c <UUSB::send(char const*)>
  usb.send(            "# -- \timuon E F M \tEnable IMU (E=1), Madgwick (F=1), use magnetometer (M=1) \r\n");
    47b2:	4907      	ldr	r1, [pc, #28]	; (47d0 <UImu2::sendHelp()+0x4c>)
    47b4:	4620      	mov	r0, r4
    47b6:	f007 ff29 	bl	c60c <UUSB::send(char const*)>
}
    47ba:	b04d      	add	sp, #308	; 0x134
    47bc:	bd30      	pop	{r4, r5, pc}
    47be:	bf00      	nop
    47c0:	2000fac4 	.word	0x2000fac4
    47c4:	20004c54 	.word	0x20004c54
    47c8:	20004c64 	.word	0x20004c64
    47cc:	20004c9c 	.word	0x20004c9c
    47d0:	20004cd0 	.word	0x20004cd0

000047d4 <UImu2::~UImu2()>:
#define ADDRESS_MPU				   0x68
// #define ADDRESS_COM          0x0C // not used (Magnetometer)

class ULog;

class UImu2 : public USubss
    47d4:	b510      	push	{r4, lr}
    47d6:	4b05      	ldr	r3, [pc, #20]	; (47ec <UImu2::~UImu2()+0x18>)
    47d8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    47da:	6840      	ldr	r0, [r0, #4]
    47dc:	6023      	str	r3, [r4, #0]
	if (__p)
    47de:	b118      	cbz	r0, 47e8 <UImu2::~UImu2()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    47e0:	68e1      	ldr	r1, [r4, #12]
    47e2:	1a09      	subs	r1, r1, r0
    47e4:	f011 fffa 	bl	167dc <operator delete(void*, unsigned int)>
    47e8:	4620      	mov	r0, r4
    47ea:	bd10      	pop	{r4, pc}
    47ec:	200080a0 	.word	0x200080a0

000047f0 <UImu2::initMpu()>:
{
    47f0:	b570      	push	{r4, r5, r6, lr}
    47f2:	4604      	mov	r4, r0
    47f4:	b09c      	sub	sp, #112	; 0x70
  Wire.begin();
    47f6:	481d      	ldr	r0, [pc, #116]	; (486c <UImu2::initMpu()+0x7c>)
  uint8_t id = 0;
    47f8:	2600      	movs	r6, #0
  mpu.setWire(&Wire);
    47fa:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
  Wire.begin();
    47fe:	f020 f843 	bl	24888 <___ZN7TwoWire5beginEv_veneer>
  Wire.setClock(400000);
    4802:	491b      	ldr	r1, [pc, #108]	; (4870 <UImu2::initMpu()+0x80>)
    4804:	4819      	ldr	r0, [pc, #100]	; (486c <UImu2::initMpu()+0x7c>)
    4806:	f00a fb05 	bl	ee14 <TwoWire::setClock(unsigned long)>
  mpu.setWire(&Wire);
    480a:	4918      	ldr	r1, [pc, #96]	; (486c <UImu2::initMpu()+0x7c>)
    480c:	4628      	mov	r0, r5
    480e:	f009 feff 	bl	e610 <MPU9250_asukiaaa::setWire(TwoWire*)>
  uint8_t retval = mpu.readId(&id);
    4812:	f10d 010b 	add.w	r1, sp, #11
    4816:	4628      	mov	r0, r5
  uint8_t id = 0;
    4818:	f88d 600b 	strb.w	r6, [sp, #11]
  uint8_t retval = mpu.readId(&id);
    481c:	f009 fefa 	bl	e614 <MPU9250_asukiaaa::readId(unsigned char*)>
  if (retval != 0)
    4820:	b130      	cbz	r0, 4830 <UImu2::initMpu()+0x40>
    usb.send("# Error initializing communication with IMU\n");
    4822:	4914      	ldr	r1, [pc, #80]	; (4874 <UImu2::initMpu()+0x84>)
    4824:	4814      	ldr	r0, [pc, #80]	; (4878 <UImu2::initMpu()+0x88>)
    4826:	f007 fef1 	bl	c60c <UUSB::send(char const*)>
    imuAvailable = 0;
    482a:	6766      	str	r6, [r4, #116]	; 0x74
}
    482c:	b01c      	add	sp, #112	; 0x70
    482e:	bd70      	pop	{r4, r5, r6, pc}
    snprintf(s, MSL, "# MPU9250 'who_am_i'=%d (0x%x)\n", id, id);
    4830:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4834:	2164      	movs	r1, #100	; 0x64
    4836:	4a11      	ldr	r2, [pc, #68]	; (487c <UImu2::initMpu()+0x8c>)
    4838:	a803      	add	r0, sp, #12
    483a:	9300      	str	r3, [sp, #0]
    483c:	f016 ffba 	bl	1b7b4 <snprintf>
    usb.send(s);
    4840:	a903      	add	r1, sp, #12
    4842:	480d      	ldr	r0, [pc, #52]	; (4878 <UImu2::initMpu()+0x88>)
    4844:	f007 fee2 	bl	c60c <UUSB::send(char const*)>
    mpu.beginAccel(ACC_FULL_SCALE_4_G);
    4848:	2108      	movs	r1, #8
    484a:	4628      	mov	r0, r5
    484c:	f009 fef8 	bl	e640 <MPU9250_asukiaaa::beginAccel(unsigned char)>
    mpu.beginGyro(GYRO_FULL_SCALE_1000_DPS);
    4850:	2110      	movs	r1, #16
    4852:	4628      	mov	r0, r5
    4854:	f009 ffe4 	bl	e820 <MPU9250_asukiaaa::beginGyro(unsigned char)>
    if (useMag)
    4858:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    485c:	2b00      	cmp	r3, #0
    485e:	d0e5      	beq.n	482c <UImu2::initMpu()+0x3c>
      mpu.beginMag(MAG_MODE_CONTINUOUS_100HZ);
    4860:	2106      	movs	r1, #6
    4862:	4628      	mov	r0, r5
    4864:	f009 ff48 	bl	e6f8 <MPU9250_asukiaaa::beginMag(unsigned char)>
}
    4868:	b01c      	add	sp, #112	; 0x70
    486a:	bd70      	pop	{r4, r5, r6, pc}
    486c:	2000959c 	.word	0x2000959c
    4870:	00061a80 	.word	0x00061a80
    4874:	20004c04 	.word	0x20004c04
    4878:	2000fac4 	.word	0x2000fac4
    487c:	20004c34 	.word	0x20004c34

00004880 <UImu2::setup()>:
{
    4880:	b510      	push	{r4, lr}
    4882:	4604      	mov	r4, r0
  initMpu();
    4884:	f7ff ffb4 	bl	47f0 <UImu2::initMpu()>
  addPublistItem("gyro",  "Get calibrated gyro value as 'gyro gx gy gz' (deg/s)");
    4888:	4a0f      	ldr	r2, [pc, #60]	; (48c8 <UImu2::setup()+0x48>)
    488a:	4620      	mov	r0, r4
    488c:	490f      	ldr	r1, [pc, #60]	; (48cc <UImu2::setup()+0x4c>)
    488e:	f007 fdef 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("gyroo", "Get gyro offset 'gyroo ox oy oz'");
    4892:	4620      	mov	r0, r4
    4894:	4a0e      	ldr	r2, [pc, #56]	; (48d0 <UImu2::setup()+0x50>)
    4896:	490f      	ldr	r1, [pc, #60]	; (48d4 <UImu2::setup()+0x54>)
    4898:	f007 fdea 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("acc",   "Get accelerometer values 'acc ax ay az' (m/s^2)");
    489c:	4620      	mov	r0, r4
    489e:	4a0e      	ldr	r2, [pc, #56]	; (48d8 <UImu2::setup()+0x58>)
    48a0:	490e      	ldr	r1, [pc, #56]	; (48dc <UImu2::setup()+0x5c>)
    48a2:	f007 fde5 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("gyro0",  "Get calibrated gyro value as 'gyro0 gx gy gz' (deg/s) averaged for subscriber");
    48a6:	4620      	mov	r0, r4
    48a8:	4a0d      	ldr	r2, [pc, #52]	; (48e0 <UImu2::setup()+0x60>)
    48aa:	490e      	ldr	r1, [pc, #56]	; (48e4 <UImu2::setup()+0x64>)
    48ac:	f007 fde0 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("acc0",   "Get calibrated acc  value as 'acc0 ax ay az' (m/s^2) averaged for subscriber");
    48b0:	4620      	mov	r0, r4
    48b2:	490d      	ldr	r1, [pc, #52]	; (48e8 <UImu2::setup()+0x68>)
    48b4:	4a0d      	ldr	r2, [pc, #52]	; (48ec <UImu2::setup()+0x6c>)
    48b6:	f007 fddb 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    48ba:	4621      	mov	r1, r4
    48bc:	480c      	ldr	r0, [pc, #48]	; (48f0 <UImu2::setup()+0x70>)
}
    48be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    48c2:	f008 bae7 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    48c6:	bf00      	nop
    48c8:	20004a64 	.word	0x20004a64
    48cc:	20004a9c 	.word	0x20004a9c
    48d0:	20004aa4 	.word	0x20004aa4
    48d4:	20004ac8 	.word	0x20004ac8
    48d8:	20004ad0 	.word	0x20004ad0
    48dc:	20004b00 	.word	0x20004b00
    48e0:	20004b04 	.word	0x20004b04
    48e4:	20004b54 	.word	0x20004b54
    48e8:	20004bac 	.word	0x20004bac
    48ec:	20004b5c 	.word	0x20004b5c
    48f0:	2000fac4 	.word	0x2000fac4

000048f4 <UImu2::decode(char const*)>:
{
    48f4:	b570      	push	{r4, r5, r6, lr}
    48f6:	460c      	mov	r4, r1
    48f8:	b082      	sub	sp, #8
    48fa:	4605      	mov	r5, r0
  if (strncmp(cmd, "gyrocal ", 8) == 0)
    48fc:	2208      	movs	r2, #8
    48fe:	492b      	ldr	r1, [pc, #172]	; (49ac <UImu2::decode(char const*)+0xb8>)
    4900:	4620      	mov	r0, r4
    4902:	f017 fa0f 	bl	1bd24 <strncmp>
    4906:	b1a0      	cbz	r0, 4932 <UImu2::decode(char const*)+0x3e>
  else if (strncmp(cmd, "gyroc", 5) == 0)
    4908:	2205      	movs	r2, #5
    490a:	4929      	ldr	r1, [pc, #164]	; (49b0 <UImu2::decode(char const*)+0xbc>)
    490c:	4620      	mov	r0, r4
    490e:	f017 fa09 	bl	1bd24 <strncmp>
    4912:	4603      	mov	r3, r0
    4914:	b148      	cbz	r0, 492a <UImu2::decode(char const*)+0x36>
  else if (strncmp(cmd, "imuon ", 6) == 0)
    4916:	2206      	movs	r2, #6
    4918:	4926      	ldr	r1, [pc, #152]	; (49b4 <UImu2::decode(char const*)+0xc0>)
    491a:	4620      	mov	r0, r4
    491c:	f017 fa02 	bl	1bd24 <strncmp>
    4920:	4606      	mov	r6, r0
    4922:	b1e8      	cbz	r0, 4960 <UImu2::decode(char const*)+0x6c>
    found = false;
    4924:	2000      	movs	r0, #0
}
    4926:	b002      	add	sp, #8
    4928:	bd70      	pop	{r4, r5, r6, pc}
  bool found = true;
    492a:	2001      	movs	r0, #1
    gyroOffsetDone = false;
    492c:	762b      	strb	r3, [r5, #24]
}
    492e:	b002      	add	sp, #8
    4930:	bd70      	pop	{r4, r5, r6, pc}
    const char * p1 = &cmd[8];
    4932:	f104 0008 	add.w	r0, r4, #8
    offsetGyro[0] = strtof(p1, (char**)&p1);
    4936:	a901      	add	r1, sp, #4
    const char * p1 = &cmd[8];
    4938:	9001      	str	r0, [sp, #4]
    offsetGyro[0] = strtof(p1, (char**)&p1);
    493a:	f016 fc47 	bl	1b1cc <strtof>
    offsetGyro[1] = strtof(p1, (char**)&p1);
    493e:	a901      	add	r1, sp, #4
    4940:	9801      	ldr	r0, [sp, #4]
    offsetGyro[0] = strtof(p1, (char**)&p1);
    4942:	ed85 0a1e 	vstr	s0, [r5, #120]	; 0x78
    offsetGyro[1] = strtof(p1, (char**)&p1);
    4946:	f016 fc41 	bl	1b1cc <strtof>
    offsetGyro[2] = strtof(p1, (char**)&p1);
    494a:	9801      	ldr	r0, [sp, #4]
    494c:	a901      	add	r1, sp, #4
    offsetGyro[1] = strtof(p1, (char**)&p1);
    494e:	ed85 0a1f 	vstr	s0, [r5, #124]	; 0x7c
    offsetGyro[2] = strtof(p1, (char**)&p1);
    4952:	f016 fc3b 	bl	1b1cc <strtof>
  bool found = true;
    4956:	2001      	movs	r0, #1
    offsetGyro[2] = strtof(p1, (char**)&p1);
    4958:	ed85 0a20 	vstr	s0, [r5, #128]	; 0x80
}
    495c:	b002      	add	sp, #8
    495e:	bd70      	pop	{r4, r5, r6, pc}
    char * p1 = (char*)&cmd[6];
    4960:	1da0      	adds	r0, r4, #6
    int e = strtol(p1, &p1, 10);
    4962:	220a      	movs	r2, #10
    4964:	a901      	add	r1, sp, #4
    char * p1 = (char*)&cmd[6];
    4966:	9001      	str	r0, [sp, #4]
    int e = strtol(p1, &p1, 10);
    4968:	f016 fd34 	bl	1b3d4 <strtol>
    496c:	4604      	mov	r4, r0
    /*int m =*/ strtol(p1, &p1, 10);
    496e:	220a      	movs	r2, #10
    4970:	a901      	add	r1, sp, #4
    4972:	9801      	ldr	r0, [sp, #4]
    4974:	f016 fd2e 	bl	1b3d4 <strtol>
    if (e == 1)
    4978:	2c01      	cmp	r4, #1
    497a:	d104      	bne.n	4986 <UImu2::decode(char const*)+0x92>
      if (imuAvailable == 0)
    497c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
    497e:	b144      	cbz	r4, 4992 <UImu2::decode(char const*)+0x9e>
  bool found = true;
    4980:	2001      	movs	r0, #1
}
    4982:	b002      	add	sp, #8
    4984:	bd70      	pop	{r4, r5, r6, pc}
      usb.send("# Stopped using MPU9250\n");
    4986:	490c      	ldr	r1, [pc, #48]	; (49b8 <UImu2::decode(char const*)+0xc4>)
      imuAvailable = 0;
    4988:	676e      	str	r6, [r5, #116]	; 0x74
      usb.send("# Stopped using MPU9250\n");
    498a:	480c      	ldr	r0, [pc, #48]	; (49bc <UImu2::decode(char const*)+0xc8>)
    498c:	f007 fe3e 	bl	c60c <UUSB::send(char const*)>
    4990:	e7f6      	b.n	4980 <UImu2::decode(char const*)+0x8c>
        initMpu();
    4992:	4628      	mov	r0, r5
    4994:	f7ff ff2c 	bl	47f0 <UImu2::initMpu()>
        imuAvailable = 10;
    4998:	230a      	movs	r3, #10
        usb.send("# initializing MPU9250\n");
    499a:	4909      	ldr	r1, [pc, #36]	; (49c0 <UImu2::decode(char const*)+0xcc>)
        tickCnt = 0;
    499c:	f8c5 40e0 	str.w	r4, [r5, #224]	; 0xe0
        imuAvailable = 10;
    49a0:	676b      	str	r3, [r5, #116]	; 0x74
        usb.send("# initializing MPU9250\n");
    49a2:	4806      	ldr	r0, [pc, #24]	; (49bc <UImu2::decode(char const*)+0xc8>)
    49a4:	f007 fe32 	bl	c60c <UUSB::send(char const*)>
    49a8:	e7ea      	b.n	4980 <UImu2::decode(char const*)+0x8c>
    49aa:	bf00      	nop
    49ac:	20004bb4 	.word	0x20004bb4
    49b0:	20004bc0 	.word	0x20004bc0
    49b4:	20004bc8 	.word	0x20004bc8
    49b8:	20004be8 	.word	0x20004be8
    49bc:	2000fac4 	.word	0x2000fac4
    49c0:	20004bd0 	.word	0x20004bd0

000049c4 <UImu2::eePromSave()>:
{
    49c4:	b510      	push	{r4, lr}
    49c6:	4604      	mov	r4, r0
  eeConfig.pushByte(f);
    49c8:	2101      	movs	r1, #1
    49ca:	4809      	ldr	r0, [pc, #36]	; (49f0 <UImu2::eePromSave()+0x2c>)
    49cc:	f7fe fba0 	bl	3110 <EEConfig::pushByte(unsigned char)>
    push32(u.u32);
    49d0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    49d2:	4807      	ldr	r0, [pc, #28]	; (49f0 <UImu2::eePromSave()+0x2c>)
    49d4:	f7fe fb80 	bl	30d8 <EEConfig::push32(unsigned long)>
    49d8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    49da:	4805      	ldr	r0, [pc, #20]	; (49f0 <UImu2::eePromSave()+0x2c>)
    49dc:	f7fe fb7c 	bl	30d8 <EEConfig::push32(unsigned long)>
    49e0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    49e4:	4802      	ldr	r0, [pc, #8]	; (49f0 <UImu2::eePromSave()+0x2c>)
}
    49e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49ea:	f7fe bb75 	b.w	30d8 <EEConfig::push32(unsigned long)>
    49ee:	bf00      	nop
    49f0:	2000ebf4 	.word	0x2000ebf4

000049f4 <UImu2::eePromLoad()>:
{
    49f4:	b538      	push	{r3, r4, r5, lr}
  /*uint8_t f =*/ eeConfig.readByte();
    49f6:	4d0b      	ldr	r5, [pc, #44]	; (4a24 <UImu2::eePromLoad()+0x30>)
{
    49f8:	4604      	mov	r4, r0
  /*uint8_t f =*/ eeConfig.readByte();
    49fa:	4628      	mov	r0, r5
    49fc:	f7fe fbd4 	bl	31a8 <EEConfig::readByte()>
    u.u32 = read32();
    4a00:	4628      	mov	r0, r5
    4a02:	f7fe fbbd 	bl	3180 <EEConfig::read32()>
    4a06:	4603      	mov	r3, r0
    4a08:	4628      	mov	r0, r5
  offsetGyro[0] = eeConfig.readFloat();
    4a0a:	67a3      	str	r3, [r4, #120]	; 0x78
    4a0c:	f7fe fbb8 	bl	3180 <EEConfig::read32()>
    4a10:	4603      	mov	r3, r0
    4a12:	4628      	mov	r0, r5
  offsetGyro[1] = eeConfig.readFloat();
    4a14:	67e3      	str	r3, [r4, #124]	; 0x7c
    4a16:	f7fe fbb3 	bl	3180 <EEConfig::read32()>
  gyroOffsetDone = true;
    4a1a:	2301      	movs	r3, #1
  offsetGyro[2] = eeConfig.readFloat();
    4a1c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  gyroOffsetDone = true;
    4a20:	7623      	strb	r3, [r4, #24]
}
    4a22:	bd38      	pop	{r3, r4, r5, pc}
    4a24:	2000ebf4 	.word	0x2000ebf4

00004a28 <UImu2::sendStatusGyro()>:
    4a28:	4b1b      	ldr	r3, [pc, #108]	; (4a98 <UImu2::sendStatusGyro()+0x70>)
{
    4a2a:	b510      	push	{r4, lr}
    4a2c:	4604      	mov	r4, r0
    4a2e:	b0c8      	sub	sp, #288	; 0x120
    4a30:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    4a34:	f014 fd7a 	bl	1952c <__aeabi_ul2f>
    4a38:	ee07 0a90 	vmov	s15, r0
  snprintf(reply, MRL, "gyro %f %f %f %.3f\r\n",
    4a3c:	ed94 4a09 	vldr	s8, [r4, #36]	; 0x24
    4a40:	21fa      	movs	r1, #250	; 0xfa
    4a42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    4a46:	ed94 5a08 	vldr	s10, [r4, #32]
    4a4a:	ed94 6a07 	vldr	s12, [r4, #28]
    4a4e:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    4a52:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4a56:	4a11      	ldr	r2, [pc, #68]	; (4a9c <UImu2::sendStatusGyro()+0x74>)
    4a58:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4a5c:	a809      	add	r0, sp, #36	; 0x24
    4a5e:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 4a90 <UImu2::sendStatusGyro()+0x68>
    4a62:	ed8d 4b04 	vstr	d4, [sp, #16]
    4a66:	ed8d 5b02 	vstr	d5, [sp, #8]
    4a6a:	ee27 7b03 	vmul.f64	d7, d7, d3
    4a6e:	ed8d 6b00 	vstr	d6, [sp]
    4a72:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    4a76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4a7a:	ed8d 7b06 	vstr	d7, [sp, #24]
    4a7e:	f016 fe99 	bl	1b7b4 <snprintf>
  usb.send(reply);
    4a82:	a909      	add	r1, sp, #36	; 0x24
    4a84:	4806      	ldr	r0, [pc, #24]	; (4aa0 <UImu2::sendStatusGyro()+0x78>)
    4a86:	f007 fdc1 	bl	c60c <UUSB::send(char const*)>
}
    4a8a:	b048      	add	sp, #288	; 0x120
    4a8c:	bd10      	pop	{r4, pc}
    4a8e:	bf00      	nop
    4a90:	a0b5ed8d 	.word	0xa0b5ed8d
    4a94:	3eb0c6f7 	.word	0x3eb0c6f7
    4a98:	2000e0c8 	.word	0x2000e0c8
    4a9c:	20004984 	.word	0x20004984
    4aa0:	2000fac4 	.word	0x2000fac4
    4aa4:	00000000 	.word	0x00000000

00004aa8 <UImu2::sendStatusAcc()>:
    4aa8:	4b1b      	ldr	r3, [pc, #108]	; (4b18 <UImu2::sendStatusAcc()+0x70>)
{
    4aaa:	b510      	push	{r4, lr}
    4aac:	4604      	mov	r4, r0
    4aae:	b0c8      	sub	sp, #288	; 0x120
    4ab0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    4ab4:	f014 fd3a 	bl	1952c <__aeabi_ul2f>
    4ab8:	ee07 0a90 	vmov	s15, r0
  snprintf(reply, MRL, "acc %f %f %f %.3f\r\n",
    4abc:	ed94 4a10 	vldr	s8, [r4, #64]	; 0x40
    4ac0:	21fa      	movs	r1, #250	; 0xfa
    4ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    4ac6:	ed94 5a0f 	vldr	s10, [r4, #60]	; 0x3c
    4aca:	ed94 6a0e 	vldr	s12, [r4, #56]	; 0x38
    4ace:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    4ad2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4ad6:	4a11      	ldr	r2, [pc, #68]	; (4b1c <UImu2::sendStatusAcc()+0x74>)
    4ad8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4adc:	a809      	add	r0, sp, #36	; 0x24
    4ade:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 4b10 <UImu2::sendStatusAcc()+0x68>
    4ae2:	ed8d 4b04 	vstr	d4, [sp, #16]
    4ae6:	ed8d 5b02 	vstr	d5, [sp, #8]
    4aea:	ee27 7b03 	vmul.f64	d7, d7, d3
    4aee:	ed8d 6b00 	vstr	d6, [sp]
    4af2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    4af6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4afa:	ed8d 7b06 	vstr	d7, [sp, #24]
    4afe:	f016 fe59 	bl	1b7b4 <snprintf>
  usb.send(reply);
    4b02:	a909      	add	r1, sp, #36	; 0x24
    4b04:	4806      	ldr	r0, [pc, #24]	; (4b20 <UImu2::sendStatusAcc()+0x78>)
    4b06:	f007 fd81 	bl	c60c <UUSB::send(char const*)>
}
    4b0a:	b048      	add	sp, #288	; 0x120
    4b0c:	bd10      	pop	{r4, pc}
    4b0e:	bf00      	nop
    4b10:	a0b5ed8d 	.word	0xa0b5ed8d
    4b14:	3eb0c6f7 	.word	0x3eb0c6f7
    4b18:	2000e0c8 	.word	0x2000e0c8
    4b1c:	2000495c 	.word	0x2000495c
    4b20:	2000fac4 	.word	0x2000fac4

00004b24 <UImu2::sendRawAcc()>:
  usb.send(reply);
}

void UImu2::sendRawAcc()
{
  float div = acc0Cnt;
    4b24:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    4b26:	b530      	push	{r4, r5, lr}
    4b28:	4604      	mov	r4, r0
    4b2a:	ed2d 8b02 	vpush	{d8}
    4b2e:	b0cb      	sub	sp, #300	; 0x12c
  const int MSL = 250;
  char s[MSL];
  if (acc0Cnt == 0)
    4b30:	bb7b      	cbnz	r3, 4b92 <UImu2::sendRawAcc()+0x6e>
    snprintf(s, MSL, "acc0 %g %g %g %d\n", mpu.accelX(), mpu.accelY(), mpu.accelZ(), acc0Cnt);
    4b32:	30a0      	adds	r0, #160	; 0xa0
    4b34:	ad0b      	add	r5, sp, #44	; 0x2c
    4b36:	9009      	str	r0, [sp, #36]	; 0x24
    4b38:	f009 fe3c 	bl	e7b4 <MPU9250_asukiaaa::accelX()>
    4b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
    4b3e:	eeb0 8a40 	vmov.f32	s16, s0
    4b42:	f009 fe49 	bl	e7d8 <MPU9250_asukiaaa::accelY()>
    4b46:	eef0 8a40 	vmov.f32	s17, s0
    4b4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    4b4c:	f009 fe56 	bl	e7fc <MPU9250_asukiaaa::accelZ()>
    4b50:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
    4b54:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
    4b58:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4b5a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4b5e:	4a1f      	ldr	r2, [pc, #124]	; (4bdc <UImu2::sendRawAcc()+0xb8>)
    4b60:	21fa      	movs	r1, #250	; 0xfa
    4b62:	4628      	mov	r0, r5
    4b64:	9306      	str	r3, [sp, #24]
    4b66:	ed8d 6b02 	vstr	d6, [sp, #8]
    4b6a:	ed8d 0b04 	vstr	d0, [sp, #16]
    4b6e:	ed8d 7b00 	vstr	d7, [sp]
    4b72:	f016 fe1f 	bl	1b7b4 <snprintf>
  else
    snprintf(s, MSL, "acc0 %g %g %g %d\n", acc0[0]/div, acc0[1]/div, acc0[2]/div, acc0Cnt);
  usb.send(s);
    4b76:	4629      	mov	r1, r5
    4b78:	4819      	ldr	r0, [pc, #100]	; (4be0 <UImu2::sendRawAcc()+0xbc>)
    4b7a:	f007 fd47 	bl	c60c <UUSB::send(char const*)>
  acc0[0] = 0;
    4b7e:	2300      	movs	r3, #0
  acc0[1] = 0;
  acc0[2] = 0;
  acc0Cnt = 0;
    4b80:	2200      	movs	r2, #0
  acc0[0] = 0;
    4b82:	6463      	str	r3, [r4, #68]	; 0x44
  acc0[1] = 0;
    4b84:	64a3      	str	r3, [r4, #72]	; 0x48
  acc0[2] = 0;
    4b86:	64e3      	str	r3, [r4, #76]	; 0x4c
  acc0Cnt = 0;
    4b88:	6522      	str	r2, [r4, #80]	; 0x50
}
    4b8a:	b04b      	add	sp, #300	; 0x12c
    4b8c:	ecbd 8b02 	vpop	{d8}
    4b90:	bd30      	pop	{r4, r5, pc}
  float div = acc0Cnt;
    4b92:	ee07 3a90 	vmov	s15, r3
    snprintf(s, MSL, "acc0 %g %g %g %d\n", acc0[0]/div, acc0[1]/div, acc0[2]/div, acc0Cnt);
    4b96:	ed90 6a13 	vldr	s12, [r0, #76]	; 0x4c
    4b9a:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
    4b9e:	ad0b      	add	r5, sp, #44	; 0x2c
  float div = acc0Cnt;
    4ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    snprintf(s, MSL, "acc0 %g %g %g %d\n", acc0[0]/div, acc0[1]/div, acc0[2]/div, acc0Cnt);
    4ba4:	edd0 6a11 	vldr	s13, [r0, #68]	; 0x44
    4ba8:	4a0c      	ldr	r2, [pc, #48]	; (4bdc <UImu2::sendRawAcc()+0xb8>)
    4baa:	21fa      	movs	r1, #250	; 0xfa
    4bac:	4628      	mov	r0, r5
    4bae:	9306      	str	r3, [sp, #24]
    4bb0:	ee86 5a27 	vdiv.f32	s10, s12, s15
    4bb4:	ee87 6a27 	vdiv.f32	s12, s14, s15
    4bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    4bbc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4bc0:	ed8d 5b04 	vstr	d5, [sp, #16]
    4bc4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4bc8:	ed8d 6b02 	vstr	d6, [sp, #8]
    4bcc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4bd0:	ed8d 7b00 	vstr	d7, [sp]
    4bd4:	f016 fdee 	bl	1b7b4 <snprintf>
    4bd8:	e7cd      	b.n	4b76 <UImu2::sendRawAcc()+0x52>
    4bda:	bf00      	nop
    4bdc:	20004934 	.word	0x20004934
    4be0:	2000fac4 	.word	0x2000fac4

00004be4 <UImu2::sendRawGyro()>:

void UImu2::sendRawGyro()
{
  float div = gyro0Cnt;
    4be4:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
    4be6:	b530      	push	{r4, r5, lr}
    4be8:	4604      	mov	r4, r0
    4bea:	ed2d 8b02 	vpush	{d8}
    4bee:	b0cb      	sub	sp, #300	; 0x12c
  const int MSL = 250;
  char s[MSL];
  if (gyro0Cnt == 0)
    4bf0:	bb7b      	cbnz	r3, 4c52 <UImu2::sendRawGyro()+0x6e>
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", mpu.gyroX(), mpu.gyroY(), mpu.gyroZ(), gyro0Cnt);
    4bf2:	30a0      	adds	r0, #160	; 0xa0
    4bf4:	ad0b      	add	r5, sp, #44	; 0x2c
    4bf6:	9009      	str	r0, [sp, #36]	; 0x24
    4bf8:	f009 fe58 	bl	e8ac <MPU9250_asukiaaa::gyroX()>
    4bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
    4bfe:	eeb0 8a40 	vmov.f32	s16, s0
    4c02:	f009 fe65 	bl	e8d0 <MPU9250_asukiaaa::gyroY()>
    4c06:	eef0 8a40 	vmov.f32	s17, s0
    4c0a:	9809      	ldr	r0, [sp, #36]	; 0x24
    4c0c:	f009 fe72 	bl	e8f4 <MPU9250_asukiaaa::gyroZ()>
    4c10:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
    4c14:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
    4c18:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4c1a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4c1e:	4a1f      	ldr	r2, [pc, #124]	; (4c9c <UImu2::sendRawGyro()+0xb8>)
    4c20:	21fa      	movs	r1, #250	; 0xfa
    4c22:	4628      	mov	r0, r5
    4c24:	9306      	str	r3, [sp, #24]
    4c26:	ed8d 6b02 	vstr	d6, [sp, #8]
    4c2a:	ed8d 0b04 	vstr	d0, [sp, #16]
    4c2e:	ed8d 7b00 	vstr	d7, [sp]
    4c32:	f016 fdbf 	bl	1b7b4 <snprintf>
  else
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", gyro0[0]/div, gyro0[1]/div, gyro0[2]/div, gyro0Cnt);
  usb.send(s);
    4c36:	4629      	mov	r1, r5
    4c38:	4819      	ldr	r0, [pc, #100]	; (4ca0 <UImu2::sendRawGyro()+0xbc>)
    4c3a:	f007 fce7 	bl	c60c <UUSB::send(char const*)>
  gyro0[0] = 0;
    4c3e:	2300      	movs	r3, #0
  gyro0[1] = 0;
  gyro0[2] = 0;
  gyro0Cnt = 0;
    4c40:	2200      	movs	r2, #0
  gyro0[0] = 0;
    4c42:	62a3      	str	r3, [r4, #40]	; 0x28
  gyro0[1] = 0;
    4c44:	62e3      	str	r3, [r4, #44]	; 0x2c
  gyro0[2] = 0;
    4c46:	6323      	str	r3, [r4, #48]	; 0x30
  gyro0Cnt = 0;
    4c48:	6362      	str	r2, [r4, #52]	; 0x34
}
    4c4a:	b04b      	add	sp, #300	; 0x12c
    4c4c:	ecbd 8b02 	vpop	{d8}
    4c50:	bd30      	pop	{r4, r5, pc}
  float div = gyro0Cnt;
    4c52:	ee07 3a90 	vmov	s15, r3
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", gyro0[0]/div, gyro0[1]/div, gyro0[2]/div, gyro0Cnt);
    4c56:	ed90 6a0c 	vldr	s12, [r0, #48]	; 0x30
    4c5a:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
    4c5e:	ad0b      	add	r5, sp, #44	; 0x2c
  float div = gyro0Cnt;
    4c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    snprintf(s, MSL, "gyro0 %g %g %g %d\n", gyro0[0]/div, gyro0[1]/div, gyro0[2]/div, gyro0Cnt);
    4c64:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
    4c68:	4a0c      	ldr	r2, [pc, #48]	; (4c9c <UImu2::sendRawGyro()+0xb8>)
    4c6a:	21fa      	movs	r1, #250	; 0xfa
    4c6c:	4628      	mov	r0, r5
    4c6e:	9306      	str	r3, [sp, #24]
    4c70:	ee86 5a27 	vdiv.f32	s10, s12, s15
    4c74:	ee87 6a27 	vdiv.f32	s12, s14, s15
    4c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    4c7c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4c80:	ed8d 5b04 	vstr	d5, [sp, #16]
    4c84:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4c88:	ed8d 6b02 	vstr	d6, [sp, #8]
    4c8c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4c90:	ed8d 7b00 	vstr	d7, [sp]
    4c94:	f016 fd8e 	bl	1b7b4 <snprintf>
    4c98:	e7cd      	b.n	4c36 <UImu2::sendRawGyro()+0x52>
    4c9a:	bf00      	nop
    4c9c:	20004948 	.word	0x20004948
    4ca0:	2000fac4 	.word	0x2000fac4

00004ca4 <UImu2::sendData(int)>:
  if (item == 0)
    4ca4:	2904      	cmp	r1, #4
    4ca6:	d804      	bhi.n	4cb2 <UImu2::sendData(int)+0xe>
    4ca8:	e8df f001 	tbb	[pc, r1]
    4cac:	2a280806 	.word	0x2a280806
    4cb0:	04          	.byte	0x04
    4cb1:	00          	.byte	0x00
    4cb2:	4770      	bx	lr
    sendRawAcc();
    4cb4:	f7ff bf36 	b.w	4b24 <UImu2::sendRawAcc()>
    sendStatusGyro();
    4cb8:	f7ff beb6 	b.w	4a28 <UImu2::sendStatusGyro()>
  snprintf(reply, MRL, "gyroo %f %f %f\r\n",
    4cbc:	ed90 5a20 	vldr	s10, [r0, #128]	; 0x80
    4cc0:	21fa      	movs	r1, #250	; 0xfa
    4cc2:	ed90 6a1f 	vldr	s12, [r0, #124]	; 0x7c
    4cc6:	ed90 7a1e 	vldr	s14, [r0, #120]	; 0x78
    4cca:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    4cce:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4cd2:	4a0c      	ldr	r2, [pc, #48]	; (4d04 <UImu2::sendData(int)+0x60>)
    4cd4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    4cd8:	b500      	push	{lr}
    4cda:	b0c7      	sub	sp, #284	; 0x11c
  snprintf(reply, MRL, "gyroo %f %f %f\r\n",
    4cdc:	ed8d 5b04 	vstr	d5, [sp, #16]
    4ce0:	ed8d 6b02 	vstr	d6, [sp, #8]
    4ce4:	ed8d 7b00 	vstr	d7, [sp]
    4ce8:	a807      	add	r0, sp, #28
    4cea:	f016 fd63 	bl	1b7b4 <snprintf>
  usb.send(reply);
    4cee:	a907      	add	r1, sp, #28
    4cf0:	4805      	ldr	r0, [pc, #20]	; (4d08 <UImu2::sendData(int)+0x64>)
    4cf2:	f007 fc8b 	bl	c60c <UUSB::send(char const*)>
}
    4cf6:	b047      	add	sp, #284	; 0x11c
    4cf8:	f85d fb04 	ldr.w	pc, [sp], #4
    sendStatusAcc();
    4cfc:	f7ff bed4 	b.w	4aa8 <UImu2::sendStatusAcc()>
    sendRawGyro();
    4d00:	f7ff bf70 	b.w	4be4 <UImu2::sendRawGyro()>
    4d04:	20004970 	.word	0x20004970
    4d08:	2000fac4 	.word	0x2000fac4
    4d0c:	00000000 	.word	0x00000000

00004d10 <UImu2::estimateTilt()>:
// float tiltu1  = 0; // old value for complementary filter
// float accAng;   // for debug
// float gyroTiltRate;
void UImu2::estimateTilt()
{ // use actual sample time
  float T = sampleTime_us * 1e-6;
    4d10:	edd0 7a39 	vldr	s15, [r0, #228]	; 0xe4
  float tau = 1.0; // seems to give good response
  float b = T/(T + 2 * tau);
    4d14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  float a = -(T - 2 * tau)/(T + 2 * tau);
  float u; // input to filter
  float est; // estimated angle
  // gyro mounted on top plate!
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4d18:	edd0 0a10 	vldr	s1, [r0, #64]	; 0x40
  float T = sampleTime_us * 1e-6;
    4d1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4d20:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
    4d24:	eef1 0a60 	vneg.f32	s1, s1
    4d28:	eeb1 0a40 	vneg.f32	s0, s0
  float T = sampleTime_us * 1e-6;
    4d2c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 4ee0 <UImu2::estimateTilt()+0x1d0>
{ // use actual sample time
    4d30:	b510      	push	{r4, lr}
  float T = sampleTime_us * 1e-6;
    4d32:	ee27 7b05 	vmul.f64	d7, d7, d5
{ // use actual sample time
    4d36:	4604      	mov	r4, r0
    4d38:	ed2d 8b02 	vpush	{d8}
  float T = sampleTime_us * 1e-6;
    4d3c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  float a = -(T - 2 * tau)/(T + 2 * tau);
    4d40:	ee77 7a66 	vsub.f32	s15, s14, s13
  float b = T/(T + 2 * tau);
    4d44:	ee77 6a26 	vadd.f32	s13, s14, s13
  float a = -(T - 2 * tau)/(T + 2 * tau);
    4d48:	eef1 7a67 	vneg.f32	s15, s15
  float b = T/(T + 2 * tau);
    4d4c:	eec7 8a26 	vdiv.f32	s17, s14, s13
  float a = -(T - 2 * tau)/(T + 2 * tau);
    4d50:	ee87 8aa6 	vdiv.f32	s16, s15, s13
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4d54:	f013 fa56 	bl	18204 <atan2f>
  // offset with value that makes the robot balance
  // accAng -= rY; // rY is board rotation on yAxis (tilt offset)
  // New and old angle must be in same revolution
  if ((accAng - encoder.pose[3]) > M_PI)
    4d58:	4b6f      	ldr	r3, [pc, #444]	; (4f18 <UImu2::estimateTilt()+0x208>)
  accAng = atan2f(-float(acc[0]),-float(acc[2]));
    4d5a:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
  if ((accAng - encoder.pose[3]) > M_PI)
    4d5e:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
    4d62:	ee30 7a46 	vsub.f32	s14, s0, s12
    4d66:	ed9f 5b60 	vldr	d5, [pc, #384]	; 4ee8 <UImu2::estimateTilt()+0x1d8>
    4d6a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4d6e:	eeb4 7bc5 	vcmpe.f64	d7, d5
    4d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d76:	f340 80a0 	ble.w	4eba <UImu2::estimateTilt()+0x1aa>
    accAng -= 2*M_PI;
    4d7a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4d7e:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 4ef0 <UImu2::estimateTilt()+0x1e0>
    4d82:	ee30 0b47 	vsub.f64	d0, d0, d7
    4d86:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    4d8a:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
  else if ((accAng - encoder.pose[3]) < -M_PI)
    accAng += 2*M_PI;
  // gyro is running in mode 2 (0= 250 grader/sek, 1 = 500 deg/s, 2=1000 deg/s 3=2000 deg/s)
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4d8e:	ed94 7a08 	vldr	s14, [r4, #32]
  // add gyro and accelerometer reading
  u = accAng + gyroTiltRate * tau;
  if (true) // imuGyro[0] < 245 and imuGyro[0] > -245)
  { // gyro not saturated
    // filter
    if (accAng > 0.0 and encoder.pose[3] < -M_PI/2.0)
    4d92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4d96:	ed9f 5b54 	vldr	d5, [pc, #336]	; 4ee8 <UImu2::estimateTilt()+0x1d8>
    4d9a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    if (accAng > 0.0 and encoder.pose[3] < -M_PI/2.0)
    4d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4da2:	ee27 7b05 	vmul.f64	d7, d7, d5
    4da6:	ed9f 4b54 	vldr	d4, [pc, #336]	; 4ef8 <UImu2::estimateTilt()+0x1e8>
    4daa:	ee87 5b04 	vdiv.f64	d5, d7, d4
    4dae:	eef7 6bc5 	vcvt.f32.f64	s13, d5
  u = accAng + gyroTiltRate * tau;
    4db2:	ee76 4a80 	vadd.f32	s9, s13, s0
  gyroTiltRate = gyro[1] * M_PI / 180.0; // radianer pr sekund
    4db6:	edc4 6a1c 	vstr	s13, [r4, #112]	; 0x70
    if (accAng > 0.0 and encoder.pose[3] < -M_PI/2.0)
    4dba:	dd1f      	ble.n	4dfc <UImu2::estimateTilt()+0xec>
    4dbc:	eeb7 5ac6 	vcvt.f64.f32	d5, s12
    4dc0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 4f00 <UImu2::estimateTilt()+0x1f0>
    4dc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
    4dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dcc:	d516      	bpl.n	4dfc <UImu2::estimateTilt()+0xec>
      est = a * (encoder.pose[3] + 2 * M_PI) + b * u + b * tiltu1;
    4dce:	ee28 3aa4 	vmul.f32	s6, s17, s9
    4dd2:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
    4dd6:	eeb7 2ac8 	vcvt.f64.f32	d2, s16
    4dda:	ed9f 1b45 	vldr	d1, [pc, #276]	; 4ef0 <UImu2::estimateTilt()+0x1e0>
    4dde:	ee35 5b01 	vadd.f64	d5, d5, d1
    else if (accAng < 0.0 and encoder.pose[3] > M_PI/2.0)
      est = a * (encoder.pose[3] - 2 * M_PI) + b * u + b * tiltu1;
    4de2:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    4de6:	ee28 7a87 	vmul.f32	s14, s17, s14
    4dea:	eea2 3b05 	vfma.f64	d3, d2, d5
    4dee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4df2:	ee37 7b03 	vadd.f64	d7, d7, d3
    4df6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    4dfa:	e00c      	b.n	4e16 <UImu2::estimateTilt()+0x106>
    else if (accAng < 0.0 and encoder.pose[3] > M_PI/2.0)
    4dfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    4e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e04:	d445      	bmi.n	4e92 <UImu2::estimateTilt()+0x182>
    else
      est = a * encoder.pose[3] + b * u + b * tiltu1;
    4e06:	ee28 7aa4 	vmul.f32	s14, s17, s9
    4e0a:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
    4e0e:	eea6 7a08 	vfma.f32	s14, s12, s16
    4e12:	eea7 7aa8 	vfma.f32	s14, s15, s17
             accAng, gyroTiltRate, u, est, tiltu1, a, b, T);
    usb.send(s);
  }
  // debug end
  //
  if (est > M_PI)
    4e16:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
    4e1a:	ed9f 3b33 	vldr	d3, [pc, #204]	; 4ee8 <UImu2::estimateTilt()+0x1d8>
    4e1e:	eeb4 5bc3 	vcmpe.f64	d5, d3
    4e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e26:	dd16      	ble.n	4e56 <UImu2::estimateTilt()+0x146>
  { // folded
    est -= 2 * M_PI;
    // save last value of u in right angle space
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e28:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4e2c:	eeb7 3ae6 	vcvt.f64.f32	d3, s13
    est -= 2 * M_PI;
    4e30:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 4ef0 <UImu2::estimateTilt()+0x1e0>
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e34:	ee30 6b47 	vsub.f64	d6, d0, d7
    est -= 2 * M_PI;
    4e38:	ee35 7b47 	vsub.f64	d7, d5, d7
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e3c:	ee36 6b03 	vadd.f64	d6, d6, d3
    est -= 2 * M_PI;
    4e40:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e44:	eef7 4bc6 	vcvt.f32.f64	s9, d6
    4e48:	edc4 4a1a 	vstr	s9, [r4, #104]	; 0x68
  else
  { // no folding
    tiltu1 = u;
  }
  //
  encoder.pose[3] = est;
    4e4c:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
}
    4e50:	ecbd 8b02 	vpop	{d8}
    4e54:	bd10      	pop	{r4, pc}
  else if (est < -M_PI)
    4e56:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 4f08 <UImu2::estimateTilt()+0x1f8>
    4e5a:	eeb4 5bc3 	vcmpe.f64	d5, d3
    4e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e62:	d5f1      	bpl.n	4e48 <UImu2::estimateTilt()+0x138>
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e64:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4e68:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
    est += 2 * M_PI;
    4e6c:	ed9f 4b20 	vldr	d4, [pc, #128]	; 4ef0 <UImu2::estimateTilt()+0x1e0>
}
    4e70:	ecbd 8b02 	vpop	{d8}
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e74:	ee30 0b44 	vsub.f64	d0, d0, d4
    est += 2 * M_PI;
    4e78:	ee35 5b04 	vadd.f64	d5, d5, d4
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e7c:	ee30 0b07 	vadd.f64	d0, d0, d7
    est += 2 * M_PI;
    4e80:	eeb7 7bc5 	vcvt.f32.f64	s14, d5
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e84:	eef7 4bc0 	vcvt.f32.f64	s9, d0
  encoder.pose[3] = est;
    4e88:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
    tiltu1 = accAng - 2 * M_PI + gyroTiltRate * tau;
    4e8c:	edc4 4a1a 	vstr	s9, [r4, #104]	; 0x68
}
    4e90:	bd10      	pop	{r4, pc}
    else if (accAng < 0.0 and encoder.pose[3] > M_PI/2.0)
    4e92:	eeb7 5ac6 	vcvt.f64.f32	d5, s12
    4e96:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 4f10 <UImu2::estimateTilt()+0x200>
    4e9a:	eeb4 5bc7 	vcmpe.f64	d5, d7
    4e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ea2:	ddb0      	ble.n	4e06 <UImu2::estimateTilt()+0xf6>
      est = a * (encoder.pose[3] - 2 * M_PI) + b * u + b * tiltu1;
    4ea4:	ee28 3aa4 	vmul.f32	s6, s17, s9
    4ea8:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
    4eac:	eeb7 2ac8 	vcvt.f64.f32	d2, s16
    4eb0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 4ef0 <UImu2::estimateTilt()+0x1e0>
    4eb4:	ee35 5b41 	vsub.f64	d5, d5, d1
    4eb8:	e793      	b.n	4de2 <UImu2::estimateTilt()+0xd2>
  else if ((accAng - encoder.pose[3]) < -M_PI)
    4eba:	ed9f 5b13 	vldr	d5, [pc, #76]	; 4f08 <UImu2::estimateTilt()+0x1f8>
    4ebe:	eeb4 7bc5 	vcmpe.f64	d7, d5
    4ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ec6:	f57f af62 	bpl.w	4d8e <UImu2::estimateTilt()+0x7e>
    accAng += 2*M_PI;
    4eca:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4ece:	ed9f 7b08 	vldr	d7, [pc, #32]	; 4ef0 <UImu2::estimateTilt()+0x1e0>
    4ed2:	ee30 0b07 	vadd.f64	d0, d0, d7
    4ed6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    4eda:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    4ede:	e756      	b.n	4d8e <UImu2::estimateTilt()+0x7e>
    4ee0:	a0b5ed8d 	.word	0xa0b5ed8d
    4ee4:	3eb0c6f7 	.word	0x3eb0c6f7
    4ee8:	54442d18 	.word	0x54442d18
    4eec:	400921fb 	.word	0x400921fb
    4ef0:	54442d18 	.word	0x54442d18
    4ef4:	401921fb 	.word	0x401921fb
    4ef8:	00000000 	.word	0x00000000
    4efc:	40668000 	.word	0x40668000
    4f00:	54442d18 	.word	0x54442d18
    4f04:	bff921fb 	.word	0xbff921fb
    4f08:	54442d18 	.word	0x54442d18
    4f0c:	c00921fb 	.word	0xc00921fb
    4f10:	54442d18 	.word	0x54442d18
    4f14:	3ff921fb 	.word	0x3ff921fb
    4f18:	2000ec40 	.word	0x2000ec40

00004f1c <UImu2::tick()>:
  tickCnt++;
    4f1c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
    4f20:	3301      	adds	r3, #1
  if (tickCnt < 20)
    4f22:	2b13      	cmp	r3, #19
{ // read data - first time will fail
    4f24:	b530      	push	{r4, r5, lr}
    4f26:	4604      	mov	r4, r0
    4f28:	ed2d 8b02 	vpush	{d8}
  tickCnt++;
    4f2c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
{ // read data - first time will fail
    4f30:	b0ab      	sub	sp, #172	; 0xac
  if (tickCnt < 20)
    4f32:	d94f      	bls.n	4fd4 <UImu2::tick()+0xb8>
  if (imuAvailable > 0)
    4f34:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4f36:	2b00      	cmp	r3, #0
    4f38:	dc03      	bgt.n	4f42 <UImu2::tick()+0x26>
}
    4f3a:	b02b      	add	sp, #172	; 0xac
    4f3c:	ecbd 8b02 	vpop	{d8}
    4f40:	bd30      	pop	{r4, r5, pc}
    uint32_t nt = micros();
    4f42:	f011 f831 	bl	15fa8 <micros>
      imuuSec = service.time_us;
    4f46:	4a9c      	ldr	r2, [pc, #624]	; (51b8 <UImu2::tick()+0x29c>)
    int dt = nt - lastRead;
    4f48:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
      if (mpu.accelUpdate() == 0)
    4f4c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
      lastRead = nt;
    4f50:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    int dt = nt - lastRead;
    4f54:	1ac3      	subs	r3, r0, r3
      if (mpu.accelUpdate() == 0)
    4f56:	4628      	mov	r0, r5
      imuuSec = service.time_us;
    4f58:	ed92 7b02 	vldr	d7, [r2, #8]
      sampleTime_us = dt;
    4f5c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
      imuuSec = service.time_us;
    4f60:	ed84 7b3a 	vstr	d7, [r4, #232]	; 0xe8
      if (mpu.accelUpdate() == 0)
    4f64:	f009 fc1a 	bl	e79c <MPU9250_asukiaaa::accelUpdate()>
    4f68:	2800      	cmp	r0, #0
    4f6a:	f000 8095 	beq.w	5098 <UImu2::tick()+0x17c>
      if (mpu.gyroUpdate() == 0)
    4f6e:	4628      	mov	r0, r5
    4f70:	f009 fc90 	bl	e894 <MPU9250_asukiaaa::gyroUpdate()>
    4f74:	2800      	cmp	r0, #0
    4f76:	d13c      	bne.n	4ff2 <UImu2::tick()+0xd6>
        if (gyroOffsetDone)
    4f78:	7e23      	ldrb	r3, [r4, #24]
          gyro[0] = mpu.gyroX() - offsetGyro[0];
    4f7a:	4628      	mov	r0, r5
        if (gyroOffsetDone)
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d142      	bne.n	5006 <UImu2::tick()+0xea>
          gyro[0] = mpu.gyroX();
    4f80:	f009 fc94 	bl	e8ac <MPU9250_asukiaaa::gyroX()>
          gyro[1] = mpu.gyroY();
    4f84:	4628      	mov	r0, r5
          gyro[0] = mpu.gyroX();
    4f86:	ed84 0a07 	vstr	s0, [r4, #28]
          gyro[1] = mpu.gyroY();
    4f8a:	f009 fca1 	bl	e8d0 <MPU9250_asukiaaa::gyroY()>
          gyro[2] = -mpu.gyroZ();
    4f8e:	4628      	mov	r0, r5
          gyro[1] = mpu.gyroY();
    4f90:	ed84 0a08 	vstr	s0, [r4, #32]
          gyro[2] = -mpu.gyroZ();
    4f94:	f009 fcae 	bl	e8f4 <MPU9250_asukiaaa::gyroZ()>
          if (tickCnt < gyroOffsetStartCnt)
    4f98:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    4f9c:	6963      	ldr	r3, [r4, #20]
          gyro[2] = -mpu.gyroZ();
    4f9e:	eef1 7a40 	vneg.f32	s15, s0
          if (tickCnt < gyroOffsetStartCnt)
    4fa2:	429a      	cmp	r2, r3
          gyro[2] = -mpu.gyroZ();
    4fa4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
          if (tickCnt < gyroOffsetStartCnt)
    4fa8:	f080 80ab 	bcs.w	5102 <UImu2::tick()+0x1e6>
            offsetGyro[0] = 0;
    4fac:	2300      	movs	r3, #0
    4fae:	67a3      	str	r3, [r4, #120]	; 0x78
            offsetGyro[1] = 0;
    4fb0:	67e3      	str	r3, [r4, #124]	; 0x7c
            offsetGyro[2] = 0;
    4fb2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        if (imuAvailable < 10)
    4fb6:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4fb8:	2b09      	cmp	r3, #9
    4fba:	dc01      	bgt.n	4fc0 <UImu2::tick()+0xa4>
          imuAvailable++;
    4fbc:	3301      	adds	r3, #1
    4fbe:	6763      	str	r3, [r4, #116]	; 0x74
      estimateTilt();
    4fc0:	4620      	mov	r0, r4
    4fc2:	f7ff fea5 	bl	4d10 <UImu2::estimateTilt()>
      tiltOnly = true;
    4fc6:	2301      	movs	r3, #1
    4fc8:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
}
    4fcc:	b02b      	add	sp, #172	; 0xac
    4fce:	ecbd 8b02 	vpop	{d8}
    4fd2:	bd30      	pop	{r4, r5, pc}
    snprintf(s, MSL,"# UImu2::tick %lu, sampleTime = %dus, imuavail=%d\n", tickCnt, sampleTime_us, imuAvailable);
    4fd4:	6f41      	ldr	r1, [r0, #116]	; 0x74
    4fd6:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
    4fda:	a804      	add	r0, sp, #16
    4fdc:	e9cd 2100 	strd	r2, r1, [sp]
    4fe0:	4a76      	ldr	r2, [pc, #472]	; (51bc <UImu2::tick()+0x2a0>)
    4fe2:	2164      	movs	r1, #100	; 0x64
    4fe4:	f016 fbe6 	bl	1b7b4 <snprintf>
    usb.send(s);
    4fe8:	a904      	add	r1, sp, #16
    4fea:	4875      	ldr	r0, [pc, #468]	; (51c0 <UImu2::tick()+0x2a4>)
    4fec:	f007 fb0e 	bl	c60c <UUSB::send(char const*)>
    4ff0:	e7a0      	b.n	4f34 <UImu2::tick()+0x18>
        imuAvailable--;
    4ff2:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4ff4:	3b01      	subs	r3, #1
    4ff6:	6763      	str	r3, [r4, #116]	; 0x74
        if (imuAvailable == 0)
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d1e1      	bne.n	4fc0 <UImu2::tick()+0xa4>
          usb.send("# message failed to read from MPU9250 10 times in a row, stopped trying\n");
    4ffc:	4971      	ldr	r1, [pc, #452]	; (51c4 <UImu2::tick()+0x2a8>)
    4ffe:	4870      	ldr	r0, [pc, #448]	; (51c0 <UImu2::tick()+0x2a4>)
    5000:	f007 fb04 	bl	c60c <UUSB::send(char const*)>
    5004:	e7dc      	b.n	4fc0 <UImu2::tick()+0xa4>
          gyro[0] = mpu.gyroX() - offsetGyro[0];
    5006:	f009 fc51 	bl	e8ac <MPU9250_asukiaaa::gyroX()>
    500a:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
          gyro[1] = mpu.gyroY() - offsetGyro[1];
    500e:	4628      	mov	r0, r5
          gyro[0] = mpu.gyroX() - offsetGyro[0];
    5010:	ee30 0a67 	vsub.f32	s0, s0, s15
    5014:	ed84 0a07 	vstr	s0, [r4, #28]
          gyro[1] = mpu.gyroY() - offsetGyro[1];
    5018:	f009 fc5a 	bl	e8d0 <MPU9250_asukiaaa::gyroY()>
    501c:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
          gyro[2] = -mpu.gyroZ() - offsetGyro[2];
    5020:	4628      	mov	r0, r5
          gyro[1] = mpu.gyroY() - offsetGyro[1];
    5022:	ee30 0a67 	vsub.f32	s0, s0, s15
    5026:	ed84 0a08 	vstr	s0, [r4, #32]
          gyro[2] = -mpu.gyroZ() - offsetGyro[2];
    502a:	f009 fc63 	bl	e8f4 <MPU9250_asukiaaa::gyroZ()>
    502e:	eeb1 0a40 	vneg.f32	s0, s0
    5032:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
          gyro0[0] += mpu.gyroX()  - offsetGyro[0];
    5036:	4628      	mov	r0, r5
          gyro[2] = -mpu.gyroZ() - offsetGyro[2];
    5038:	ee30 0a67 	vsub.f32	s0, s0, s15
    503c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
          gyro0[0] += mpu.gyroX()  - offsetGyro[0];
    5040:	f009 fc34 	bl	e8ac <MPU9250_asukiaaa::gyroX()>
    5044:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
    5048:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
          gyro0[1] += mpu.gyroY()  - offsetGyro[1];
    504c:	4628      	mov	r0, r5
          gyro0[0] += mpu.gyroX()  - offsetGyro[0];
    504e:	ee30 0a47 	vsub.f32	s0, s0, s14
    5052:	ee77 7a80 	vadd.f32	s15, s15, s0
    5056:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
          gyro0[1] += mpu.gyroY()  - offsetGyro[1];
    505a:	f009 fc39 	bl	e8d0 <MPU9250_asukiaaa::gyroY()>
    505e:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
    5062:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    5066:	4628      	mov	r0, r5
          gyro0[1] += mpu.gyroY()  - offsetGyro[1];
    5068:	ee30 0a47 	vsub.f32	s0, s0, s14
    506c:	ee77 7a80 	vadd.f32	s15, s15, s0
    5070:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    5074:	f009 fc3e 	bl	e8f4 <MPU9250_asukiaaa::gyroZ()>
    5078:	eeb1 0a40 	vneg.f32	s0, s0
    507c:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    5080:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    5084:	ee30 0a47 	vsub.f32	s0, s0, s14
          gyro0Cnt++;
    5088:	6b63      	ldr	r3, [r4, #52]	; 0x34
    508a:	3301      	adds	r3, #1
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    508c:	ee77 7a80 	vadd.f32	s15, s15, s0
          gyro0Cnt++;
    5090:	6363      	str	r3, [r4, #52]	; 0x34
          gyro0[2] += -mpu.gyroZ() - offsetGyro[2];
    5092:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
          gyro0Cnt++;
    5096:	e78e      	b.n	4fb6 <UImu2::tick()+0x9a>
        accw[0] = mpu.accelX();
    5098:	4628      	mov	r0, r5
    509a:	f009 fb8b 	bl	e7b4 <MPU9250_asukiaaa::accelX()>
        accw[1] = mpu.accelY();
    509e:	4628      	mov	r0, r5
        accw[0] = mpu.accelX();
    50a0:	eef0 8a40 	vmov.f32	s17, s0
        accw[1] = mpu.accelY();
    50a4:	f009 fb98 	bl	e7d8 <MPU9250_asukiaaa::accelY()>
        accw[2] = -mpu.accelZ();
    50a8:	4628      	mov	r0, r5
        accw[1] = mpu.accelY();
    50aa:	eeb0 8a40 	vmov.f32	s16, s0
        accw[2] = -mpu.accelZ();
    50ae:	f009 fba5 	bl	e7fc <MPU9250_asukiaaa::accelZ()>
        acc0[0] += accw[0];
    50b2:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
        acc0[1] += accw[1];
    50b6:	edd4 5a12 	vldr	s11, [r4, #72]	; 0x48
        acc0[2] += accw[2];
    50ba:	ed94 6a13 	vldr	s12, [r4, #76]	; 0x4c
        acc0[0] += accw[0];
    50be:	ee35 5a28 	vadd.f32	s10, s10, s17
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    50c2:	edd4 6a24 	vldr	s13, [r4, #144]	; 0x90
        acc0[1] += accw[1];
    50c6:	ee75 5a88 	vadd.f32	s11, s11, s16
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    50ca:	ed94 7a25 	vldr	s14, [r4, #148]	; 0x94
        acc0[2] += accw[2];
    50ce:	ee36 6a40 	vsub.f32	s12, s12, s0
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    50d2:	edd4 4a26 	vldr	s9, [r4, #152]	; 0x98
    50d6:	ee66 6aa8 	vmul.f32	s13, s13, s17
        acc0Cnt++;
    50da:	6d23      	ldr	r3, [r4, #80]	; 0x50
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    50dc:	ee27 7a08 	vmul.f32	s14, s14, s16
    50e0:	ee60 7a64 	vnmul.f32	s15, s0, s9
        acc0[0] += accw[0];
    50e4:	ed84 5a11 	vstr	s10, [r4, #68]	; 0x44
        acc0Cnt++;
    50e8:	3301      	adds	r3, #1
        acc0[1] += accw[1];
    50ea:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
        acc0[2] += accw[2];
    50ee:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
        acc0Cnt++;
    50f2:	6523      	str	r3, [r4, #80]	; 0x50
          acc[i] = accw[i] * accScale[i]; // - accOffset[i];
    50f4:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    50f8:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    50fc:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
        for (int i = 0; i < 3; i++)
    5100:	e735      	b.n	4f6e <UImu2::tick()+0x52>
          else if (tickCnt <= gyroOffsetStartCnt + 1000)
    5102:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
    5106:	428a      	cmp	r2, r1
    5108:	d83b      	bhi.n	5182 <UImu2::tick()+0x266>
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    510a:	1ad3      	subs	r3, r2, r3
    510c:	482e      	ldr	r0, [pc, #184]	; (51c8 <UImu2::tick()+0x2ac>)
            offsetGyro[0] += gyro[0];
    510e:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
            offsetGyro[1] += gyro[1];
    5112:	edd4 6a1f 	vldr	s13, [r4, #124]	; 0x7c
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    5116:	fb03 f000 	mul.w	r0, r3, r0
            offsetGyro[2] += gyro[2];
    511a:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
            offsetGyro[0] += gyro[0];
    511e:	ed94 6a07 	vldr	s12, [r4, #28]
            offsetGyro[1] += gyro[1];
    5122:	edd4 5a08 	vldr	s11, [r4, #32]
            offsetGyro[2] += gyro[2];
    5126:	ee77 7ac0 	vsub.f32	s15, s15, s0
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    512a:	4d28      	ldr	r5, [pc, #160]	; (51cc <UImu2::tick()+0x2b0>)
            offsetGyro[0] += gyro[0];
    512c:	ee36 7a07 	vadd.f32	s14, s12, s14
            offsetGyro[1] += gyro[1];
    5130:	ee76 6aa5 	vadd.f32	s13, s13, s11
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    5134:	ebb5 0fb0 	cmp.w	r5, r0, ror #2
            offsetGyro[2] += gyro[2];
    5138:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
            offsetGyro[0] += gyro[0];
    513c:	ed84 7a1e 	vstr	s14, [r4, #120]	; 0x78
            offsetGyro[1] += gyro[1];
    5140:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
            if ((tickCnt - gyroOffsetStartCnt) % 100 == 0)
    5144:	d220      	bcs.n	5188 <UImu2::tick()+0x26c>
            if (tickCnt == gyroOffsetStartCnt + 1000)
    5146:	4291      	cmp	r1, r2
    5148:	f47f af35 	bne.w	4fb6 <UImu2::tick()+0x9a>
              offsetGyro[0] /= 1000;
    514c:	edd4 6a1e 	vldr	s13, [r4, #120]	; 0x78
    5150:	eddf 7a1f 	vldr	s15, [pc, #124]	; 51d0 <UImu2::tick()+0x2b4>
              offsetGyro[1] /= 1000;
    5154:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
              offsetGyro[2] /= 1000;
    5158:	edd4 5a20 	vldr	s11, [r4, #128]	; 0x80
              offsetGyro[0] /= 1000;
    515c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
              usb.send("# gyro offset finished\r\n");
    5160:	491c      	ldr	r1, [pc, #112]	; (51d4 <UImu2::tick()+0x2b8>)
    5162:	4817      	ldr	r0, [pc, #92]	; (51c0 <UImu2::tick()+0x2a4>)
              offsetGyro[1] /= 1000;
    5164:	eec7 6a27 	vdiv.f32	s13, s14, s15
              offsetGyro[2] /= 1000;
    5168:	ee85 7aa7 	vdiv.f32	s14, s11, s15
              offsetGyro[0] /= 1000;
    516c:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
              offsetGyro[1] /= 1000;
    5170:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
              offsetGyro[2] /= 1000;
    5174:	ed84 7a20 	vstr	s14, [r4, #128]	; 0x80
              usb.send("# gyro offset finished\r\n");
    5178:	f007 fa48 	bl	c60c <UUSB::send(char const*)>
              gyroOffsetDone  = true;
    517c:	2301      	movs	r3, #1
    517e:	7623      	strb	r3, [r4, #24]
    5180:	e719      	b.n	4fb6 <UImu2::tick()+0x9a>
            gyroOffsetStartCnt = tickCnt + 10;
    5182:	320a      	adds	r2, #10
    5184:	6162      	str	r2, [r4, #20]
    5186:	e716      	b.n	4fb6 <UImu2::tick()+0x9a>
              snprintf(s, MSL,"# UImu2::gyrooffset n=%lu, gx=%g sumgx=%g\n", tickCnt - gyroOffsetStartCnt, gyro[0], offsetGyro[0]);
    5188:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    518c:	4a12      	ldr	r2, [pc, #72]	; (51d8 <UImu2::tick()+0x2bc>)
    518e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    5192:	2196      	movs	r1, #150	; 0x96
    5194:	a804      	add	r0, sp, #16
    5196:	ed8d 7b02 	vstr	d7, [sp, #8]
    519a:	ed8d 6b00 	vstr	d6, [sp]
    519e:	f016 fb09 	bl	1b7b4 <snprintf>
              usb.send(s);
    51a2:	a904      	add	r1, sp, #16
    51a4:	4806      	ldr	r0, [pc, #24]	; (51c0 <UImu2::tick()+0x2a4>)
    51a6:	f007 fa31 	bl	c60c <UUSB::send(char const*)>
            if (tickCnt == gyroOffsetStartCnt + 1000)
    51aa:	6961      	ldr	r1, [r4, #20]
    51ac:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    51b0:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    51b4:	e7c7      	b.n	5146 <UImu2::tick()+0x22a>
    51b6:	bf00      	nop
    51b8:	2000e0c8 	.word	0x2000e0c8
    51bc:	2000499c 	.word	0x2000499c
    51c0:	2000fac4 	.word	0x2000fac4
    51c4:	20004a18 	.word	0x20004a18
    51c8:	c28f5c29 	.word	0xc28f5c29
    51cc:	028f5c28 	.word	0x028f5c28
    51d0:	447a0000 	.word	0x447a0000
    51d4:	200049fc 	.word	0x200049fc
    51d8:	200049d0 	.word	0x200049d0

000051dc <_GLOBAL__sub_I_imu2>:
}
    51dc:	b570      	push	{r4, r5, r6, lr}
    51de:	4c23      	ldr	r4, [pc, #140]	; (526c <_GLOBAL__sub_I_imu2+0x90>)
    51e0:	2500      	movs	r5, #0
    51e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    51e6:	4620      	mov	r0, r4
    51e8:	f007 f81e 	bl	c228 <USubss::USubss()>
    51ec:	4b20      	ldr	r3, [pc, #128]	; (5270 <_GLOBAL__sub_I_imu2+0x94>)
    51ee:	4a21      	ldr	r2, [pc, #132]	; (5274 <_GLOBAL__sub_I_imu2+0x98>)
    51f0:	6023      	str	r3, [r4, #0]
    51f2:	2300      	movs	r3, #0
    51f4:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    51f8:	66a3      	str	r3, [r4, #104]	; 0x68
    51fa:	230a      	movs	r3, #10
    51fc:	62e5      	str	r5, [r4, #44]	; 0x2c
    51fe:	6763      	str	r3, [r4, #116]	; 0x74
    5200:	f104 0390 	add.w	r3, r4, #144	; 0x90
    5204:	6325      	str	r5, [r4, #48]	; 0x30
    5206:	6166      	str	r6, [r4, #20]
    5208:	61e5      	str	r5, [r4, #28]
    520a:	62a5      	str	r5, [r4, #40]	; 0x28
    520c:	6465      	str	r5, [r4, #68]	; 0x44
    520e:	65e5      	str	r5, [r4, #92]	; 0x5c
    5210:	67a5      	str	r5, [r4, #120]	; 0x78
    5212:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    5216:	ca07      	ldmia	r2, {r0, r1, r2}
    5218:	e9c4 5508 	strd	r5, r5, [r4, #32]
    521c:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
    5220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    5224:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    5228:	e9c4 551f 	strd	r5, r5, [r4, #124]	; 0x7c
    522c:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
    5230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    5234:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    5238:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    523c:	2168      	movs	r1, #104	; 0x68
    523e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    5242:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
    5246:	f009 f9d7 	bl	e5f8 <MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)>
UImu2 imu2;
    524a:	4620      	mov	r0, r4
    524c:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    5250:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
    5254:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    5258:	4a07      	ldr	r2, [pc, #28]	; (5278 <_GLOBAL__sub_I_imu2+0x9c>)
    525a:	4908      	ldr	r1, [pc, #32]	; (527c <_GLOBAL__sub_I_imu2+0xa0>)
    525c:	e9c4 5533 	strd	r5, r5, [r4, #204]	; 0xcc
    5260:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
}
    5264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
UImu2 imu2;
    5268:	f013 bed6 	b.w	19018 <__aeabi_atexit>
    526c:	2000dfd0 	.word	0x2000dfd0
    5270:	20008020 	.word	0x20008020
    5274:	20001e40 	.word	0x20001e40
    5278:	20008f80 	.word	0x20008f80
    527c:	000047d5 	.word	0x000047d5

00005280 <UIrDist::sendHelp()>:
    sendStatusDistIR2();
}


void UIrDist::sendHelp()
{
    5280:	b510      	push	{r4, lr}
  const int MRL = 300;
  char reply[MRL];
  usb.send("# IR distance -------\r\n");
    5282:	4c0a      	ldr	r4, [pc, #40]	; (52ac <UIrDist::sendHelp()+0x2c>)
{
    5284:	b0cc      	sub	sp, #304	; 0x130
  usb.send("# IR distance -------\r\n");
    5286:	490a      	ldr	r1, [pc, #40]	; (52b0 <UIrDist::sendHelp()+0x30>)
    5288:	4620      	mov	r0, r4
    528a:	f007 f9bf 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tirc A13 A50 B13 B50 V\tSet calibration values: Axx=sensor 1 (side), xx=distance in cm; Bxx=Sensor 2 (front); V=1 in on\r\n");
    528e:	227e      	movs	r2, #126	; 0x7e
    5290:	4908      	ldr	r1, [pc, #32]	; (52b4 <UIrDist::sendHelp()+0x34>)
    5292:	a801      	add	r0, sp, #4
    5294:	f011 fa06 	bl	166a4 <memcpy>
  usb.send(reply);
    5298:	a901      	add	r1, sp, #4
    529a:	4620      	mov	r0, r4
    529c:	f007 f9b6 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tiron V \tTurn IR sensor on or off V=1 for on (0=off)\r\n");
    52a0:	4905      	ldr	r1, [pc, #20]	; (52b8 <UIrDist::sendHelp()+0x38>)
    52a2:	4620      	mov	r0, r4
    52a4:	f007 f9b2 	bl	c60c <UUSB::send(char const*)>
}
    52a8:	b04c      	add	sp, #304	; 0x130
    52aa:	bd10      	pop	{r4, pc}
    52ac:	2000fac4 	.word	0x2000fac4
    52b0:	200060ec 	.word	0x200060ec
    52b4:	20006104 	.word	0x20006104
    52b8:	20006184 	.word	0x20006184

000052bc <UIrDist::~UIrDist()>:
#ifndef IR_DIST_H
#define IR_DIST_H

#include "usubss.h"

class UIrDist : public USubss
    52bc:	b510      	push	{r4, lr}
    52be:	4b05      	ldr	r3, [pc, #20]	; (52d4 <UIrDist::~UIrDist()+0x18>)
    52c0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    52c2:	6840      	ldr	r0, [r0, #4]
    52c4:	6023      	str	r3, [r4, #0]
	if (__p)
    52c6:	b118      	cbz	r0, 52d0 <UIrDist::~UIrDist()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    52c8:	68e1      	ldr	r1, [r4, #12]
    52ca:	1a09      	subs	r1, r1, r0
    52cc:	f011 fa86 	bl	167dc <operator delete(void*, unsigned int)>
    52d0:	4620      	mov	r0, r4
    52d2:	bd10      	pop	{r4, pc}
    52d4:	200080a0 	.word	0x200080a0

000052d8 <UIrDist::estimateIrDistance() [clone .part.0]>:
{
  if (useDistSensor)
  { // dist sensor has power, so estimate
    // sensor uses 28ms, AD every 1ms, so filter over 10 samples
    // removes some noise from wire
    if (initIrFilter)
    52d8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void UIrDist::estimateIrDistance()
    52dc:	b430      	push	{r4, r5}
    if (initIrFilter)
    52de:	2b00      	cmp	r3, #0
    52e0:	d054      	beq.n	538c <UIrDist::estimateIrDistance() [clone .part.0]+0xb4>
    { // when IR is first turned on
      irRaw[0] = ad.irRawAD[0] * 10;
    52e2:	4b37      	ldr	r3, [pc, #220]	; (53c0 <UIrDist::estimateIrDistance() [clone .part.0]+0xe8>)
      irRaw[1] = ad.irRawAD[1] * 10;
      initIrFilter = false;
    52e4:	2100      	movs	r1, #0
      irRaw[0] = ad.irRawAD[0] * 10;
    52e6:	8b1a      	ldrh	r2, [r3, #24]
      irRaw[1] = ad.irRawAD[1] * 10;
    52e8:	8b5b      	ldrh	r3, [r3, #26]
      irRaw[0] = ad.irRawAD[0] * 10;
    52ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      initIrFilter = false;
    52ee:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
      irRaw[1] = ad.irRawAD[1] * 10;
    52f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      irRaw[0] = ad.irRawAD[0] * 10;
    52f6:	0052      	lsls	r2, r2, #1
      irRaw[1] = ad.irRawAD[1] * 10;
    52f8:	005b      	lsls	r3, r3, #1
    52fa:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
    else
    {
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    }
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    52fe:	ee07 2a90 	vmov	s15, r2
    5302:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
    5306:	edd0 5a11 	vldr	s11, [r0, #68]	; 0x44
    530a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    530e:	ee07 3a90 	vmov	s15, r3
    5312:	ed90 6a10 	vldr	s12, [r0, #64]	; 0x40
    5316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    531a:	edd0 6a12 	vldr	s13, [r0, #72]	; 0x48
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    531e:	eed7 5a05 	vfnms.f32	s11, s14, s10
    5322:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    5326:	eed7 6a86 	vfnms.f32	s13, s15, s12
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    532a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    532e:	ee85 6a25 	vdiv.f32	s12, s10, s11
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    5332:	ee85 7a26 	vdiv.f32	s14, s10, s13
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    5336:	eeb4 6ae7 	vcmpe.f32	s12, s15
    irDistance[0] = 1.0/(float(irRaw[0]) * irA[0] - irB[0]);
    533a:	ed80 6a05 	vstr	s12, [r0, #20]
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    irDistance[1] = 1.0/(float(irRaw[1]) * irA[1] - irB[1]);
    5342:	ed80 7a06 	vstr	s14, [r0, #24]
    if (irDistance[0] > 1.5 or irDistance[0] < 0.05)
    5346:	dc1d      	bgt.n	5384 <UIrDist::estimateIrDistance() [clone .part.0]+0xac>
    5348:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    534c:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 53b8 <UIrDist::estimateIrDistance() [clone .part.0]+0xe0>
    5350:	eeb4 6bc5 	vcmpe.f64	d6, d5
    5354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5358:	d414      	bmi.n	5384 <UIrDist::estimateIrDistance() [clone .part.0]+0xac>
      irDistance[0] = 1.5;
    if (irDistance[1] > 1.5 or irDistance[1] < 0.05)
    535a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    535e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5366:	dc08      	bgt.n	537a <UIrDist::estimateIrDistance() [clone .part.0]+0xa2>
    5368:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    536c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 53b8 <UIrDist::estimateIrDistance() [clone .part.0]+0xe0>
    5370:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5378:	d502      	bpl.n	5380 <UIrDist::estimateIrDistance() [clone .part.0]+0xa8>
      irDistance[1] = 1.5;
    537a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    537e:	6183      	str	r3, [r0, #24]
  else
  { // not installed or not on (set to far away 10m)
    irDistance[0] = 10.0;
    irDistance[1] = 10.0;
  }
}
    5380:	bc30      	pop	{r4, r5}
    5382:	4770      	bx	lr
      irDistance[0] = 1.5;
    5384:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    5388:	6143      	str	r3, [r0, #20]
    538a:	e7e6      	b.n	535a <UIrDist::estimateIrDistance() [clone .part.0]+0x82>
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
    538c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    538e:	4d0c      	ldr	r5, [pc, #48]	; (53c0 <UIrDist::estimateIrDistance() [clone .part.0]+0xe8>)
    5390:	4c0c      	ldr	r4, [pc, #48]	; (53c4 <UIrDist::estimateIrDistance() [clone .part.0]+0xec>)
    5392:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    5396:	8b2a      	ldrh	r2, [r5, #24]
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    5398:	8b6b      	ldrh	r3, [r5, #26]
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
    539a:	fba4 5101 	umull	r5, r1, r4, r1
    539e:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    53a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    53a4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
      irRaw[0] = (irRaw[0]*9)/10 + ad.irRawAD[0];
    53a8:	6342      	str	r2, [r0, #52]	; 0x34
      irRaw[1] = (irRaw[1]*9)/10 + ad.irRawAD[1];
    53aa:	fba4 4101 	umull	r4, r1, r4, r1
    53ae:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
    53b2:	6383      	str	r3, [r0, #56]	; 0x38
    53b4:	e7a3      	b.n	52fe <UIrDist::estimateIrDistance() [clone .part.0]+0x26>
    53b6:	bf00      	nop
    53b8:	9999999a 	.word	0x9999999a
    53bc:	3fa99999 	.word	0x3fa99999
    53c0:	2000e89c 	.word	0x2000e89c
    53c4:	cccccccd 	.word	0xcccccccd

000053c8 <UIrDist::setup()>:
{
    53c8:	b510      	push	{r4, lr}
  pinMode ( PIN_POWER_IR, OUTPUT ); // line sensor LED half power (HW2) - or power to IR (with new power board) (output anyhow)
    53ca:	2101      	movs	r1, #1
{
    53cc:	4604      	mov	r4, r0
  pinMode ( PIN_POWER_IR, OUTPUT ); // line sensor LED half power (HW2) - or power to IR (with new power board) (output anyhow)
    53ce:	2024      	movs	r0, #36	; 0x24
    53d0:	f010 fe50 	bl	16074 <pinMode>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
    53d4:	4b0a      	ldr	r3, [pc, #40]	; (5400 <UIrDist::setup()+0x38>)
    53d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  addPublistItem("ir", "Get IR and calibration data 'ir dist1(m) dist2(m) raw1 raw2 cal1-13 cal1-50 cal2-13 cal2-50 use");
    53da:	4a0a      	ldr	r2, [pc, #40]	; (5404 <UIrDist::setup()+0x3c>)
    53dc:	490a      	ldr	r1, [pc, #40]	; (5408 <UIrDist::setup()+0x40>)
    53de:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    53e2:	4620      	mov	r0, r4
    53e4:	f007 f844 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ird", "Get IR distance 'ird dist1(m) dist2(m) sensorOn");
    53e8:	4620      	mov	r0, r4
    53ea:	4908      	ldr	r1, [pc, #32]	; (540c <UIrDist::setup()+0x44>)
    53ec:	4a08      	ldr	r2, [pc, #32]	; (5410 <UIrDist::setup()+0x48>)
    53ee:	f007 f83f 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    53f2:	4621      	mov	r1, r4
    53f4:	4807      	ldr	r0, [pc, #28]	; (5414 <UIrDist::setup()+0x4c>)
}
    53f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService(this);
    53fa:	f007 bd4b 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    53fe:	bf00      	nop
    5400:	42004000 	.word	0x42004000
    5404:	20006028 	.word	0x20006028
    5408:	20006088 	.word	0x20006088
    540c:	200060bc 	.word	0x200060bc
    5410:	2000608c 	.word	0x2000608c
    5414:	2000fac4 	.word	0x2000fac4

00005418 <UIrDist::tick()>:
  if (useDistSensor)
    5418:	7f02      	ldrb	r2, [r0, #28]
    541a:	b10a      	cbz	r2, 5420 <UIrDist::tick()+0x8>
    541c:	f7ff bf5c 	b.w	52d8 <UIrDist::estimateIrDistance() [clone .part.0]>
    irDistance[0] = 10.0;
    5420:	4a01      	ldr	r2, [pc, #4]	; (5428 <UIrDist::tick()+0x10>)
    5422:	6142      	str	r2, [r0, #20]
    irDistance[1] = 10.0;
    5424:	6182      	str	r2, [r0, #24]
}
    5426:	4770      	bx	lr
    5428:	41200000 	.word	0x41200000

0000542c <UIrDist::sendStatusDistIR()>:
{
    542c:	4603      	mov	r3, r0
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %lu %lu %lu %lu %d \r\n" ,
    542e:	4a13      	ldr	r2, [pc, #76]	; (547c <UIrDist::sendStatusDistIR()+0x50>)
    5430:	2140      	movs	r1, #64	; 0x40
    5432:	ed93 6a06 	vldr	s12, [r3, #24]
    5436:	ed93 7a05 	vldr	s14, [r3, #20]
    543a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    543e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    5442:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %lu %lu %lu %lu %d \r\n" ,
    5444:	7f1c      	ldrb	r4, [r3, #28]
{
    5446:	b09c      	sub	sp, #112	; 0x70
  snprintf(reply, MRL, "ir %.3f %.3f %lu %lu %lu %lu %lu %lu %d \r\n" ,
    5448:	ed8d 6b02 	vstr	d6, [sp, #8]
    544c:	ed8d 7b00 	vstr	d7, [sp]
    5450:	940a      	str	r4, [sp, #40]	; 0x28
    5452:	a80c      	add	r0, sp, #48	; 0x30
    5454:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    5456:	9409      	str	r4, [sp, #36]	; 0x24
    5458:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    545a:	9408      	str	r4, [sp, #32]
    545c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    545e:	9407      	str	r4, [sp, #28]
    5460:	6a1c      	ldr	r4, [r3, #32]
    5462:	9406      	str	r4, [sp, #24]
    5464:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    5466:	9405      	str	r4, [sp, #20]
    5468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    546a:	9304      	str	r3, [sp, #16]
    546c:	f016 f9a2 	bl	1b7b4 <snprintf>
  usb.send(reply);
    5470:	a90c      	add	r1, sp, #48	; 0x30
    5472:	4803      	ldr	r0, [pc, #12]	; (5480 <UIrDist::sendStatusDistIR()+0x54>)
    5474:	f007 f8ca 	bl	c60c <UUSB::send(char const*)>
}
    5478:	b01c      	add	sp, #112	; 0x70
    547a:	bd10      	pop	{r4, pc}
    547c:	20005fe0 	.word	0x20005fe0
    5480:	2000fac4 	.word	0x2000fac4

00005484 <UIrDist::sendStatusDistIR2()>:
{
    5484:	4603      	mov	r3, r0
  snprintf(reply, MRL, "ird %.3f %.3f %lu %lu %d\r\n" ,
    5486:	4a0f      	ldr	r2, [pc, #60]	; (54c4 <UIrDist::sendStatusDistIR2()+0x40>)
    5488:	2140      	movs	r1, #64	; 0x40
    548a:	ed93 6a06 	vldr	s12, [r3, #24]
    548e:	ed93 7a05 	vldr	s14, [r3, #20]
    5492:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    5496:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    549a:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "ird %.3f %.3f %lu %lu %d\r\n" ,
    549c:	7f1c      	ldrb	r4, [r3, #28]
{
    549e:	b098      	sub	sp, #96	; 0x60
  snprintf(reply, MRL, "ird %.3f %.3f %lu %lu %d\r\n" ,
    54a0:	ed8d 6b02 	vstr	d6, [sp, #8]
    54a4:	ed8d 7b00 	vstr	d7, [sp]
    54a8:	9406      	str	r4, [sp, #24]
    54aa:	a808      	add	r0, sp, #32
    54ac:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    54ae:	9405      	str	r4, [sp, #20]
    54b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    54b2:	9304      	str	r3, [sp, #16]
    54b4:	f016 f97e 	bl	1b7b4 <snprintf>
  usb.send(reply);
    54b8:	a908      	add	r1, sp, #32
    54ba:	4803      	ldr	r0, [pc, #12]	; (54c8 <UIrDist::sendStatusDistIR2()+0x44>)
    54bc:	f007 f8a6 	bl	c60c <UUSB::send(char const*)>
}
    54c0:	b018      	add	sp, #96	; 0x60
    54c2:	bd10      	pop	{r4, pc}
    54c4:	2000600c 	.word	0x2000600c
    54c8:	2000fac4 	.word	0x2000fac4

000054cc <UIrDist::sendData(int)>:
  if (item == 0)
    54cc:	b111      	cbz	r1, 54d4 <UIrDist::sendData(int)+0x8>
  else if (item == 1)
    54ce:	2901      	cmp	r1, #1
    54d0:	d002      	beq.n	54d8 <UIrDist::sendData(int)+0xc>
}
    54d2:	4770      	bx	lr
    sendStatusDistIR();
    54d4:	f7ff bfaa 	b.w	542c <UIrDist::sendStatusDistIR()>
    sendStatusDistIR2();
    54d8:	f7ff bfd4 	b.w	5484 <UIrDist::sendStatusDistIR2()>

000054dc <UIrDist::calibrateIr()>:
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    54dc:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
    float dri = float(d1-d2)/float(v1-v2);
    54e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    54e2:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
    54e6:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
    float dri = float(d1-d2)/float(v1-v2);
    54ea:	ed9f 5a18 	vldr	s10, [pc, #96]	; 554c <UIrDist::calibrateIr()+0x70>
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    54ee:	eef8 4ae7 	vcvt.f32.s32	s9, s15
    54f2:	ed9f 6a17 	vldr	s12, [pc, #92]	; 5550 <UIrDist::calibrateIr()+0x74>
    irA[i] = dri / 100.0; // inclination
    54f6:	eddf 6a17 	vldr	s13, [pc, #92]	; 5554 <UIrDist::calibrateIr()+0x78>
    float dri = float(d1-d2)/float(v1-v2);
    54fa:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    54fe:	1a52      	subs	r2, r2, r1
    5500:	ee17 1a90 	vmov	r1, s15
    5504:	ee07 2a90 	vmov	s15, r2
    5508:	1a5b      	subs	r3, r3, r1
    550a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    550e:	ee07 3a90 	vmov	s15, r3
    5512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5516:	eec5 5a07 	vdiv.f32	s11, s10, s14
    551a:	ee85 7a27 	vdiv.f32	s14, s10, s15
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    551e:	eef0 7a46 	vmov.f32	s15, s12
    5522:	eee4 7a25 	vfma.f32	s15, s8, s11
    irA[i] = dri / 100.0; // inclination
    5526:	ee85 5aa6 	vdiv.f32	s10, s11, s13
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    552a:	eea4 6a87 	vfma.f32	s12, s9, s14
    irA[i] = dri / 100.0; // inclination
    552e:	eec7 5a26 	vdiv.f32	s11, s14, s13
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    5532:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    5536:	eec6 7a26 	vdiv.f32	s15, s12, s13
    irA[i] = dri / 100.0; // inclination
    553a:	ed80 5a0f 	vstr	s10, [r0, #60]	; 0x3c
    553e:	edc0 5a10 	vstr	s11, [r0, #64]	; 0x40
    irB[i] = (dri * v2 - d2) / 100.0; // offset
    5542:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    5546:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
}
    554a:	4770      	bx	lr
    554c:	440e4000 	.word	0x440e4000
    5550:	c3480000 	.word	0xc3480000
    5554:	42c80000 	.word	0x42c80000

00005558 <UIrDist::decode(char const*)>:
{
    5558:	b530      	push	{r4, r5, lr}
    555a:	460c      	mov	r4, r1
    555c:	b083      	sub	sp, #12
    555e:	4605      	mov	r5, r0
  if (strncmp(buf, "iron ", 5) == 0)
    5560:	2205      	movs	r2, #5
    5562:	4937      	ldr	r1, [pc, #220]	; (5640 <UIrDist::decode(char const*)+0xe8>)
    5564:	4620      	mov	r0, r4
    5566:	f016 fbdd 	bl	1bd24 <strncmp>
    556a:	2800      	cmp	r0, #0
    556c:	d035      	beq.n	55da <UIrDist::decode(char const*)+0x82>
  else if (strncmp(buf, "irc ", 4) == 0)
    556e:	2204      	movs	r2, #4
    5570:	4934      	ldr	r1, [pc, #208]	; (5644 <UIrDist::decode(char const*)+0xec>)
    5572:	4620      	mov	r0, r4
    5574:	f016 fbd6 	bl	1bd24 <strncmp>
    5578:	b110      	cbz	r0, 5580 <UIrDist::decode(char const*)+0x28>
    used = false;
    557a:	2000      	movs	r0, #0
}
    557c:	b003      	add	sp, #12
    557e:	bd30      	pop	{r4, r5, pc}
    char * p1 = (char *)&buf[4];
    5580:	1d20      	adds	r0, r4, #4
    irCal13cm[0] = strtol(p1, &p1, 10);
    5582:	220a      	movs	r2, #10
    5584:	a901      	add	r1, sp, #4
    char * p1 = (char *)&buf[4];
    5586:	9001      	str	r0, [sp, #4]
    irCal13cm[0] = strtol(p1, &p1, 10);
    5588:	f015 ff24 	bl	1b3d4 <strtol>
    irCal50cm[0] = strtol(p1, &p1, 10);
    558c:	220a      	movs	r2, #10
    558e:	a901      	add	r1, sp, #4
    irCal13cm[0] = strtol(p1, &p1, 10);
    5590:	6228      	str	r0, [r5, #32]
    irCal50cm[0] = strtol(p1, &p1, 10);
    5592:	9801      	ldr	r0, [sp, #4]
    5594:	f015 ff1e 	bl	1b3d4 <strtol>
    irCal13cm[1] = strtol(p1, &p1, 10);
    5598:	220a      	movs	r2, #10
    559a:	a901      	add	r1, sp, #4
    irCal50cm[0] = strtol(p1, &p1, 10);
    559c:	62a8      	str	r0, [r5, #40]	; 0x28
    irCal13cm[1] = strtol(p1, &p1, 10);
    559e:	9801      	ldr	r0, [sp, #4]
    55a0:	f015 ff18 	bl	1b3d4 <strtol>
    irCal50cm[1] = strtol(p1, &p1, 10);
    55a4:	220a      	movs	r2, #10
    55a6:	a901      	add	r1, sp, #4
    irCal13cm[1] = strtol(p1, &p1, 10);
    55a8:	6268      	str	r0, [r5, #36]	; 0x24
    irCal50cm[1] = strtol(p1, &p1, 10);
    55aa:	9801      	ldr	r0, [sp, #4]
    55ac:	f015 ff12 	bl	1b3d4 <strtol>
    55b0:	4603      	mov	r3, r0
    setIRpower(strtol(p1, &p1, 10));
    55b2:	220a      	movs	r2, #10
    55b4:	a901      	add	r1, sp, #4
    55b6:	9801      	ldr	r0, [sp, #4]
    irCal50cm[1] = strtol(p1, &p1, 10);
    55b8:	62eb      	str	r3, [r5, #44]	; 0x2c
    setIRpower(strtol(p1, &p1, 10));
    55ba:	f015 ff0b 	bl	1b3d4 <strtol>



void UIrDist::setIRpower(bool power)
{
  if (power and not useDistSensor)
    55be:	b378      	cbz	r0, 5620 <UIrDist::decode(char const*)+0xc8>
    55c0:	7f2b      	ldrb	r3, [r5, #28]
    55c2:	b913      	cbnz	r3, 55ca <UIrDist::decode(char const*)+0x72>
  { // initialize average filter
    initIrFilter = true;
    55c4:	2301      	movs	r3, #1
    55c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  }
  useDistSensor = power;
    55ca:	2101      	movs	r1, #1
				CORE_PIN36_PORTSET = CORE_PIN36_BITMASK;
    55cc:	4b1e      	ldr	r3, [pc, #120]	; (5648 <UIrDist::decode(char const*)+0xf0>)
    55ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    55d2:	7729      	strb	r1, [r5, #28]
    55d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    55d8:	e028      	b.n	562c <UIrDist::decode(char const*)+0xd4>
    const char * p1 = &buf[5];
    55da:	1d60      	adds	r0, r4, #5
    uint8_t v = strtol(p1, (char**)&p1, 10);
    55dc:	220a      	movs	r2, #10
    55de:	a901      	add	r1, sp, #4
    const char * p1 = &buf[5];
    55e0:	9001      	str	r0, [sp, #4]
    uint8_t v = strtol(p1, (char**)&p1, 10);
    55e2:	f015 fef7 	bl	1b3d4 <strtol>
  if (power and not useDistSensor)
    55e6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    55ea:	d00c      	beq.n	5606 <UIrDist::decode(char const*)+0xae>
    55ec:	7f2b      	ldrb	r3, [r5, #28]
    55ee:	b913      	cbnz	r3, 55f6 <UIrDist::decode(char const*)+0x9e>
    initIrFilter = true;
    55f0:	2301      	movs	r3, #1
    55f2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  useDistSensor = power;
    55f6:	2101      	movs	r1, #1
    55f8:	4b13      	ldr	r3, [pc, #76]	; (5648 <UIrDist::decode(char const*)+0xf0>)
    55fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    55fe:	7729      	strb	r1, [r5, #28]
    5600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    5604:	e005      	b.n	5612 <UIrDist::decode(char const*)+0xba>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
    5606:	4b10      	ldr	r3, [pc, #64]	; (5648 <UIrDist::decode(char const*)+0xf0>)
    5608:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    560c:	7728      	strb	r0, [r5, #28]
    560e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    usb.send("# ir set\n");
    5612:	490e      	ldr	r1, [pc, #56]	; (564c <UIrDist::decode(char const*)+0xf4>)
    5614:	480e      	ldr	r0, [pc, #56]	; (5650 <UIrDist::decode(char const*)+0xf8>)
    5616:	f006 fff9 	bl	c60c <UUSB::send(char const*)>
  bool used = true;
    561a:	2001      	movs	r0, #1
}
    561c:	b003      	add	sp, #12
    561e:	bd30      	pop	{r4, r5, pc}
    5620:	4b09      	ldr	r3, [pc, #36]	; (5648 <UIrDist::decode(char const*)+0xf0>)
    5622:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  useDistSensor = power;
    5626:	7728      	strb	r0, [r5, #28]
    5628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    usb.send("# ir calibrate\n");      
    562c:	4909      	ldr	r1, [pc, #36]	; (5654 <UIrDist::decode(char const*)+0xfc>)
    562e:	4808      	ldr	r0, [pc, #32]	; (5650 <UIrDist::decode(char const*)+0xf8>)
    5630:	f006 ffec 	bl	c60c <UUSB::send(char const*)>
    calibrateIr();
    5634:	4628      	mov	r0, r5
    5636:	f7ff ff51 	bl	54dc <UIrDist::calibrateIr()>
  bool used = true;
    563a:	2001      	movs	r0, #1
}
    563c:	b003      	add	sp, #12
    563e:	bd30      	pop	{r4, r5, pc}
    5640:	200060c0 	.word	0x200060c0
    5644:	200060d4 	.word	0x200060d4
    5648:	42004000 	.word	0x42004000
    564c:	200060c8 	.word	0x200060c8
    5650:	2000fac4 	.word	0x2000fac4
    5654:	200060dc 	.word	0x200060dc

00005658 <UIrDist::eePromSave()>:


/////////////////////////////////////

void UIrDist::eePromSave()
{
    5658:	b510      	push	{r4, lr}
    565a:	4604      	mov	r4, r0
  uint8_t f = 0;
  if (useDistSensor) f = 1 << 0;
  eeConfig.pushByte(f);
    565c:	480a      	ldr	r0, [pc, #40]	; (5688 <UIrDist::eePromSave()+0x30>)
    565e:	7f21      	ldrb	r1, [r4, #28]
    5660:	f7fd fd56 	bl	3110 <EEConfig::pushByte(unsigned char)>
  eeConfig.pushWord(irCal13cm[0]);
    5664:	8c21      	ldrh	r1, [r4, #32]
    5666:	4808      	ldr	r0, [pc, #32]	; (5688 <UIrDist::eePromSave()+0x30>)
    5668:	f7fd fd6e 	bl	3148 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(irCal13cm[1]);
    566c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    566e:	4806      	ldr	r0, [pc, #24]	; (5688 <UIrDist::eePromSave()+0x30>)
    5670:	f7fd fd6a 	bl	3148 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(irCal50cm[0]);
    5674:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    5676:	4804      	ldr	r0, [pc, #16]	; (5688 <UIrDist::eePromSave()+0x30>)
    5678:	f7fd fd66 	bl	3148 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(irCal50cm[1]);
    567c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    567e:	4802      	ldr	r0, [pc, #8]	; (5688 <UIrDist::eePromSave()+0x30>)
}
    5680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eeConfig.pushWord(irCal50cm[1]);
    5684:	f7fd bd60 	b.w	3148 <EEConfig::pushWord(unsigned short)>
    5688:	2000ebf4 	.word	0x2000ebf4

0000568c <UIrDist::eePromLoad()>:
    return stringConfig;
    568c:	4b1d      	ldr	r3, [pc, #116]	; (5704 <UIrDist::eePromLoad()+0x78>)

/////////////////////////////////////

void UIrDist::eePromLoad()
{
  if (not eeConfig.isStringConfig())
    568e:	f893 2020 	ldrb.w	r2, [r3, #32]
    5692:	b11a      	cbz	r2, 569c <UIrDist::eePromLoad()+0x10>
    configAddr+=bytes;
    5694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5696:	3209      	adds	r2, #9
    5698:	625a      	str	r2, [r3, #36]	; 0x24
    569a:	4770      	bx	lr
{
    569c:	b510      	push	{r4, lr}
    569e:	4604      	mov	r4, r0
  {
    int f = eeConfig.readByte();
    56a0:	4618      	mov	r0, r3
    56a2:	f7fd fd81 	bl	31a8 <EEConfig::readByte()>
  if (power and not useDistSensor)
    56a6:	f010 0001 	ands.w	r0, r0, #1
    56aa:	d00c      	beq.n	56c6 <UIrDist::eePromLoad()+0x3a>
    56ac:	7f23      	ldrb	r3, [r4, #28]
    56ae:	b913      	cbnz	r3, 56b6 <UIrDist::eePromLoad()+0x2a>
    initIrFilter = true;
    56b0:	2301      	movs	r3, #1
    56b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  useDistSensor = power;
    56b6:	2101      	movs	r1, #1
				CORE_PIN36_PORTSET = CORE_PIN36_BITMASK;
    56b8:	4b13      	ldr	r3, [pc, #76]	; (5708 <UIrDist::eePromLoad()+0x7c>)
    56ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    56be:	7721      	strb	r1, [r4, #28]
    56c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    56c4:	e005      	b.n	56d2 <UIrDist::eePromLoad()+0x46>
				CORE_PIN36_PORTCLEAR = CORE_PIN36_BITMASK;
    56c6:	4b10      	ldr	r3, [pc, #64]	; (5708 <UIrDist::eePromLoad()+0x7c>)
    56c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    56cc:	7720      	strb	r0, [r4, #28]
    56ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    bool use = f & (1 << 0);
    setIRpower(use);
    // old calibration values - set default
    irCal13cm[0] = eeConfig.readWord();
    56d2:	480c      	ldr	r0, [pc, #48]	; (5704 <UIrDist::eePromLoad()+0x78>)
    56d4:	f7fd fd7c 	bl	31d0 <EEConfig::readWord()>
    56d8:	4603      	mov	r3, r0
    irCal13cm[1] = eeConfig.readWord();
    56da:	480a      	ldr	r0, [pc, #40]	; (5704 <UIrDist::eePromLoad()+0x78>)
    irCal13cm[0] = eeConfig.readWord();
    56dc:	6223      	str	r3, [r4, #32]
    irCal13cm[1] = eeConfig.readWord();
    56de:	f7fd fd77 	bl	31d0 <EEConfig::readWord()>
    56e2:	4603      	mov	r3, r0
    irCal50cm[0] = eeConfig.readWord();
    56e4:	4807      	ldr	r0, [pc, #28]	; (5704 <UIrDist::eePromLoad()+0x78>)
    irCal13cm[1] = eeConfig.readWord();
    56e6:	6263      	str	r3, [r4, #36]	; 0x24
    irCal50cm[0] = eeConfig.readWord();
    56e8:	f7fd fd72 	bl	31d0 <EEConfig::readWord()>
    56ec:	4603      	mov	r3, r0
    irCal50cm[1] = eeConfig.readWord();
    56ee:	4805      	ldr	r0, [pc, #20]	; (5704 <UIrDist::eePromLoad()+0x78>)
    irCal50cm[0] = eeConfig.readWord();
    56f0:	62a3      	str	r3, [r4, #40]	; 0x28
    irCal50cm[1] = eeConfig.readWord();
    56f2:	f7fd fd6d 	bl	31d0 <EEConfig::readWord()>
    56f6:	4603      	mov	r3, r0
    calibrateIr();
    56f8:	4620      	mov	r0, r4
    irCal50cm[1] = eeConfig.readWord();
    56fa:	62e3      	str	r3, [r4, #44]	; 0x2c
  else
  { // skip the same number of bytes
    int skip = 1 + 4 * 2;
    eeConfig.skipAddr(skip);
  }
}
    56fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calibrateIr();
    5700:	f7ff beec 	b.w	54dc <UIrDist::calibrateIr()>
    5704:	2000ebf4 	.word	0x2000ebf4
    5708:	42004000 	.word	0x42004000

0000570c <_GLOBAL__sub_I_irdist>:
}
    570c:	b510      	push	{r4, lr}
    570e:	4c10      	ldr	r4, [pc, #64]	; (5750 <_GLOBAL__sub_I_irdist+0x44>)
    5710:	4620      	mov	r0, r4
    5712:	f006 fd89 	bl	c228 <USubss::USubss()>
    5716:	4b0f      	ldr	r3, [pc, #60]	; (5754 <_GLOBAL__sub_I_irdist+0x48>)
    5718:	490f      	ldr	r1, [pc, #60]	; (5758 <_GLOBAL__sub_I_irdist+0x4c>)
    571a:	f104 0e20 	add.w	lr, r4, #32
    571e:	f103 0c08 	add.w	ip, r3, #8
    5722:	2201      	movs	r2, #1
    5724:	6021      	str	r1, [r4, #0]
    5726:	7722      	strb	r2, [r4, #28]
    5728:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
UIrDist irdist;
    572c:	4a0b      	ldr	r2, [pc, #44]	; (575c <_GLOBAL__sub_I_irdist+0x50>)
    572e:	e893 0003 	ldmia.w	r3, {r0, r1}
    5732:	f104 0328 	add.w	r3, r4, #40	; 0x28
    5736:	e88e 0003 	stmia.w	lr, {r0, r1}
    573a:	e89c 0003 	ldmia.w	ip, {r0, r1}
    573e:	e883 0003 	stmia.w	r3, {r0, r1}
    5742:	4620      	mov	r0, r4
    5744:	4906      	ldr	r1, [pc, #24]	; (5760 <_GLOBAL__sub_I_irdist+0x54>)
}
    5746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UIrDist irdist;
    574a:	f013 bc65 	b.w	19018 <__aeabi_atexit>
    574e:	bf00      	nop
    5750:	2000f19c 	.word	0x2000f19c
    5754:	20001e4c 	.word	0x20001e4c
    5758:	200080d8 	.word	0x200080d8
    575c:	20008f80 	.word	0x20008f80
    5760:	000052bd 	.word	0x000052bd

00005764 <ULedBand::sendHelp()>:
  }
}


void ULedBand::sendHelp()
{
    5764:	b510      	push	{r4, lr}
  usb.send("# Leds -------\r\n");
    5766:	4c07      	ldr	r4, [pc, #28]	; (5784 <ULedBand::sendHelp()+0x20>)
    5768:	4907      	ldr	r1, [pc, #28]	; (5788 <ULedBand::sendHelp()+0x24>)
    576a:	4620      	mov	r0, r4
    576c:	f006 ff4e 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tleds N R G B\tSet LED N to this value (e.g. 14 128 25 254 (LED 14 to purple)\r\n");
    5770:	4906      	ldr	r1, [pc, #24]	; (578c <ULedBand::sendHelp()+0x28>)
    5772:	4620      	mov	r0, r4
    5774:	f006 ff4a 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tleda N M R G B\tSet LEDs from N through M to value (e.g. 14 16 128 25 254 (LED 14,15,16 to purple)\r\n");
    5778:	4620      	mov	r0, r4
    577a:	4905      	ldr	r1, [pc, #20]	; (5790 <ULedBand::sendHelp()+0x2c>)
}
    577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tleda N M R G B\tSet LEDs from N through M to value (e.g. 14 16 128 25 254 (LED 14,15,16 to purple)\r\n");
    5780:	f006 bf44 	b.w	c60c <UUSB::send(char const*)>
    5784:	2000fac4 	.word	0x2000fac4
    5788:	20007a40 	.word	0x20007a40
    578c:	20007a54 	.word	0x20007a54
    5790:	20007aa8 	.word	0x20007aa8

00005794 <ULedBand::~ULedBand()>:
#include "usubss.h"
#include "main.h"



class ULedBand : public USubss
    5794:	b510      	push	{r4, lr}
    5796:	4b05      	ldr	r3, [pc, #20]	; (57ac <ULedBand::~ULedBand()+0x18>)
    5798:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    579a:	6840      	ldr	r0, [r0, #4]
    579c:	6023      	str	r3, [r4, #0]
	if (__p)
    579e:	b118      	cbz	r0, 57a8 <ULedBand::~ULedBand()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    57a0:	68e1      	ldr	r1, [r4, #12]
    57a2:	1a09      	subs	r1, r1, r0
    57a4:	f011 f81a 	bl	167dc <operator delete(void*, unsigned int)>
    57a8:	4620      	mov	r0, r4
    57aa:	bd10      	pop	{r4, pc}
    57ac:	200080a0 	.word	0x200080a0

000057b0 <ULedBand::decode(char const*)>:

bool ULedBand::decode(const char* cmd)
{ // no current commands
    57b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57b4:	460c      	mov	r4, r1
    57b6:	b082      	sub	sp, #8
  bool found = true;
  if (strncmp(cmd, "leds ", 5) == 0)
    57b8:	2205      	movs	r2, #5
    57ba:	4959      	ldr	r1, [pc, #356]	; (5920 <ULedBand::decode(char const*)+0x170>)
    57bc:	4620      	mov	r0, r4
    57be:	f016 fab1 	bl	1bd24 <strncmp>
    57c2:	2800      	cmp	r0, #0
    57c4:	d060      	beq.n	5888 <ULedBand::decode(char const*)+0xd8>
    // const int MSL = 100;
    // char s[MSL];
    // snprintf(s, MSL, "# set LED %d to %d %d %d\r\n", n, r, g, b);
    // usb.send(s);
  }
  else if (strncmp(cmd, "leda ", 5) == 0)
    57c6:	2205      	movs	r2, #5
    57c8:	4956      	ldr	r1, [pc, #344]	; (5924 <ULedBand::decode(char const*)+0x174>)
    57ca:	4620      	mov	r0, r4
    57cc:	f016 faaa 	bl	1bd24 <strncmp>
    57d0:	4605      	mov	r5, r0
    57d2:	b118      	cbz	r0, 57dc <ULedBand::decode(char const*)+0x2c>
    b = strtol(p1, (char**)&p1, 10);
    for (int i = n; i <= m; i++)
      leds.setPixel(i, r, g, b);
  }
  else
    found = false;
    57d4:	2000      	movs	r0, #0
  return found;
}
    57d6:	b002      	add	sp, #8
    57d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char * p1 = &cmd[5];
    57dc:	1d60      	adds	r0, r4, #5
    n = strtol(p1, (char**)&p1, 10);
    57de:	220a      	movs	r2, #10
    57e0:	a901      	add	r1, sp, #4
    const char * p1 = &cmd[5];
    57e2:	9001      	str	r0, [sp, #4]
    n = strtol(p1, (char**)&p1, 10);
    57e4:	f015 fdf6 	bl	1b3d4 <strtol>
    m = strtol(p1, (char**)&p1, 10);
    57e8:	220a      	movs	r2, #10
    57ea:	a901      	add	r1, sp, #4
    n = strtol(p1, (char**)&p1, 10);
    57ec:	4604      	mov	r4, r0
    m = strtol(p1, (char**)&p1, 10);
    57ee:	9801      	ldr	r0, [sp, #4]
    57f0:	f015 fdf0 	bl	1b3d4 <strtol>
    r = strtol(p1, (char**)&p1, 10);
    57f4:	220a      	movs	r2, #10
    m = strtol(p1, (char**)&p1, 10);
    57f6:	4607      	mov	r7, r0
    r = strtol(p1, (char**)&p1, 10);
    57f8:	a901      	add	r1, sp, #4
    57fa:	9801      	ldr	r0, [sp, #4]
    57fc:	f015 fdea 	bl	1b3d4 <strtol>
    g = strtol(p1, (char**)&p1, 10);
    5800:	220a      	movs	r2, #10
    5802:	a901      	add	r1, sp, #4
    r = strtol(p1, (char**)&p1, 10);
    5804:	4606      	mov	r6, r0
    g = strtol(p1, (char**)&p1, 10);
    5806:	9801      	ldr	r0, [sp, #4]
    5808:	f015 fde4 	bl	1b3d4 <strtol>
    b = strtol(p1, (char**)&p1, 10);
    580c:	a901      	add	r1, sp, #4
    g = strtol(p1, (char**)&p1, 10);
    580e:	4680      	mov	r8, r0
    b = strtol(p1, (char**)&p1, 10);
    5810:	220a      	movs	r2, #10
    5812:	9801      	ldr	r0, [sp, #4]
    5814:	f015 fdde 	bl	1b3d4 <strtol>
    for (int i = n; i <= m; i++)
    5818:	42bc      	cmp	r4, r7
    581a:	dc31      	bgt.n	5880 <ULedBand::decode(char const*)+0xd0>
			drawBuffer[num+0] = color & 255;
			drawBuffer[num+1] = (color >> 8) & 255;
			drawBuffer[num+2] = (color >> 16) & 255;
		} else {
			num *= 4;
			drawBuffer[num+0] = color & 255;
    581c:	fa5f fc80 	uxtb.w	ip, r0
    5820:	4b41      	ldr	r3, [pc, #260]	; (5928 <ULedBand::decode(char const*)+0x178>)
			drawBuffer[num+1] = (color >> 8) & 255;
    5822:	fa5f fe88 	uxtb.w	lr, r8
    5826:	1c78      	adds	r0, r7, #1
			drawBuffer[num+2] = (color >> 16) & 255;
    5828:	b2f6      	uxtb	r6, r6
    582a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    582e:	00a2      	lsls	r2, r4, #2
    5830:	e00d      	b.n	584e <ULedBand::decode(char const*)+0x9e>
			drawBuffer[num+0] = color & 255;
    5832:	f807 c001 	strb.w	ip, [r7, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5836:	689f      	ldr	r7, [r3, #8]
    5838:	440f      	add	r7, r1
    583a:	f887 e001 	strb.w	lr, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    583e:	689f      	ldr	r7, [r3, #8]
    5840:	440f      	add	r7, r1
    5842:	70be      	strb	r6, [r7, #2]
    5844:	3401      	adds	r4, #1
    5846:	3103      	adds	r1, #3
    5848:	3204      	adds	r2, #4
    584a:	4284      	cmp	r4, r0
    584c:	d018      	beq.n	5880 <ULedBand::decode(char const*)+0xd0>
		if (num >= numled) return;
    584e:	881f      	ldrh	r7, [r3, #0]
    5850:	42bc      	cmp	r4, r7
    5852:	d2f7      	bcs.n	5844 <ULedBand::decode(char const*)+0x94>
		if (config < 6) {
    5854:	78df      	ldrb	r7, [r3, #3]
    5856:	2f05      	cmp	r7, #5
			drawBuffer[num+0] = color & 255;
    5858:	689f      	ldr	r7, [r3, #8]
		if (config < 6) {
    585a:	d9ea      	bls.n	5832 <ULedBand::decode(char const*)+0x82>
			drawBuffer[num+0] = color & 255;
    585c:	f807 c002 	strb.w	ip, [r7, r2]
    5860:	3401      	adds	r4, #1
			drawBuffer[num+1] = (color >> 8) & 255;
    5862:	689f      	ldr	r7, [r3, #8]
    5864:	3103      	adds	r1, #3
    5866:	4284      	cmp	r4, r0
    5868:	4417      	add	r7, r2
    586a:	f887 e001 	strb.w	lr, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    586e:	689f      	ldr	r7, [r3, #8]
    5870:	4417      	add	r7, r2
    5872:	70be      	strb	r6, [r7, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5874:	689f      	ldr	r7, [r3, #8]
    5876:	4417      	add	r7, r2
    5878:	f102 0204 	add.w	r2, r2, #4
    587c:	70fd      	strb	r5, [r7, #3]
    587e:	d1e6      	bne.n	584e <ULedBand::decode(char const*)+0x9e>
  bool found = true;
    5880:	2001      	movs	r0, #1
}
    5882:	b002      	add	sp, #8
    5884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char * p1 = &cmd[5];
    5888:	4605      	mov	r5, r0
    588a:	1d60      	adds	r0, r4, #5
    n = strtol(p1, (char**)&p1, 10);
    588c:	220a      	movs	r2, #10
    588e:	a901      	add	r1, sp, #4
    const char * p1 = &cmd[5];
    5890:	9001      	str	r0, [sp, #4]
    n = strtol(p1, (char**)&p1, 10);
    5892:	f015 fd9f 	bl	1b3d4 <strtol>
    r = strtol(p1, (char**)&p1, 10);
    5896:	220a      	movs	r2, #10
    5898:	a901      	add	r1, sp, #4
    n = strtol(p1, (char**)&p1, 10);
    589a:	4606      	mov	r6, r0
    r = strtol(p1, (char**)&p1, 10);
    589c:	9801      	ldr	r0, [sp, #4]
    589e:	f015 fd99 	bl	1b3d4 <strtol>
    g = strtol(p1, (char**)&p1, 10);
    58a2:	220a      	movs	r2, #10
    58a4:	a901      	add	r1, sp, #4
    r = strtol(p1, (char**)&p1, 10);
    58a6:	4604      	mov	r4, r0
    g = strtol(p1, (char**)&p1, 10);
    58a8:	9801      	ldr	r0, [sp, #4]
    58aa:	f015 fd93 	bl	1b3d4 <strtol>
    b = strtol(p1, (char**)&p1, 10);
    58ae:	220a      	movs	r2, #10
    58b0:	a901      	add	r1, sp, #4
    g = strtol(p1, (char**)&p1, 10);
    58b2:	4607      	mov	r7, r0
    b = strtol(p1, (char**)&p1, 10);
    58b4:	9801      	ldr	r0, [sp, #4]
    58b6:	f015 fd8d 	bl	1b3d4 <strtol>
		if (num >= numled) return;
    58ba:	4a1b      	ldr	r2, [pc, #108]	; (5928 <ULedBand::decode(char const*)+0x178>)
    58bc:	8813      	ldrh	r3, [r2, #0]
    58be:	429e      	cmp	r6, r3
    58c0:	d2de      	bcs.n	5880 <ULedBand::decode(char const*)+0xd0>
	}
	uint8_t getBrightness() {
		return brightness;
	}
	uint32_t Color(uint8_t red, uint8_t green, uint8_t blue) {
		return (red << 16) | (green << 8) | blue;
    58c2:	0423      	lsls	r3, r4, #16
		if (config < 6) {
    58c4:	78d1      	ldrb	r1, [r2, #3]
		return (red << 16) | (green << 8) | blue;
    58c6:	023f      	lsls	r7, r7, #8
    58c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    58cc:	b2c0      	uxtb	r0, r0
    58ce:	b2bf      	uxth	r7, r7
		if (config < 6) {
    58d0:	2905      	cmp	r1, #5
		return (red << 16) | (green << 8) | blue;
    58d2:	ea43 0307 	orr.w	r3, r3, r7
    58d6:	ea43 0300 	orr.w	r3, r3, r0
		if (config < 6) {
    58da:	d80d      	bhi.n	58f8 <ULedBand::decode(char const*)+0x148>
			drawBuffer[num+0] = color & 255;
    58dc:	6891      	ldr	r1, [r2, #8]
			num *= 3;
    58de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
			drawBuffer[num+1] = (color >> 8) & 255;
    58e2:	0a18      	lsrs	r0, r3, #8
			drawBuffer[num+0] = color & 255;
    58e4:	558b      	strb	r3, [r1, r6]
			drawBuffer[num+2] = (color >> 16) & 255;
    58e6:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    58e8:	6891      	ldr	r1, [r2, #8]
    58ea:	4431      	add	r1, r6
    58ec:	7048      	strb	r0, [r1, #1]
  bool found = true;
    58ee:	2001      	movs	r0, #1
			drawBuffer[num+2] = (color >> 16) & 255;
    58f0:	6892      	ldr	r2, [r2, #8]
    58f2:	4432      	add	r2, r6
    58f4:	7093      	strb	r3, [r2, #2]
    58f6:	e7c4      	b.n	5882 <ULedBand::decode(char const*)+0xd2>
			drawBuffer[num+0] = color & 255;
    58f8:	6891      	ldr	r1, [r2, #8]
			drawBuffer[num+1] = (color >> 8) & 255;
    58fa:	0a18      	lsrs	r0, r3, #8
			drawBuffer[num+0] = color & 255;
    58fc:	f801 3026 	strb.w	r3, [r1, r6, lsl #2]
			drawBuffer[num+2] = (color >> 16) & 255;
    5900:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5902:	6891      	ldr	r1, [r2, #8]
    5904:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    5908:	7048      	strb	r0, [r1, #1]
    590a:	2001      	movs	r0, #1
			drawBuffer[num+2] = (color >> 16) & 255;
    590c:	6891      	ldr	r1, [r2, #8]
    590e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    5912:	708b      	strb	r3, [r1, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5914:	6893      	ldr	r3, [r2, #8]
    5916:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    591a:	70dd      	strb	r5, [r3, #3]
    591c:	e7b1      	b.n	5882 <ULedBand::decode(char const*)+0xd2>
    591e:	bf00      	nop
    5920:	20007a30 	.word	0x20007a30
    5924:	20007a38 	.word	0x20007a38
    5928:	20009bf0 	.word	0x20009bf0

0000592c <ULedBand::setup()>:
{
    592c:	b538      	push	{r3, r4, r5, lr}
  leds.begin();
    592e:	4c25      	ldr	r4, [pc, #148]	; (59c4 <ULedBand::setup()+0x98>)
{
    5930:	4605      	mov	r5, r0
  leds.begin();
    5932:	4620      	mov	r0, r4
    5934:	f00f fbf2 	bl	1511c <WS2812Serial::begin()>
		brightness = n;
    5938:	23ff      	movs	r3, #255	; 0xff
  addPublistItem("leds", "get leds status 'leds N r g b r g b ...' (N=leds, r,g,b in hex)");
    593a:	4a23      	ldr	r2, [pc, #140]	; (59c8 <ULedBand::setup()+0x9c>)
    593c:	4628      	mov	r0, r5
    593e:	4923      	ldr	r1, [pc, #140]	; (59cc <ULedBand::setup()+0xa0>)
    5940:	7523      	strb	r3, [r4, #20]
    5942:	f006 fd95 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    5946:	4629      	mov	r1, r5
    5948:	4821      	ldr	r0, [pc, #132]	; (59d0 <ULedBand::setup()+0xa4>)
    594a:	f007 faa3 	bl	ce94 <UUSB::addSubscriptionService(USubss*)>
    594e:	2200      	movs	r2, #0
    5950:	4611      	mov	r1, r2
  for(int i = 0; i < numled; i++)
    5952:	4613      	mov	r3, r2
			drawBuffer[num+0] = color & 255;
    5954:	4610      	mov	r0, r2
    5956:	e00f      	b.n	5978 <ULedBand::setup()+0x4c>
			drawBuffer[num+0] = color & 255;
    5958:	5468      	strb	r0, [r5, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    595a:	68a5      	ldr	r5, [r4, #8]
    595c:	eb05 0c01 	add.w	ip, r5, r1
    5960:	f88c 0001 	strb.w	r0, [ip, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5964:	68a5      	ldr	r5, [r4, #8]
    5966:	eb05 0c01 	add.w	ip, r5, r1
    596a:	f88c 0002 	strb.w	r0, [ip, #2]
    596e:	3301      	adds	r3, #1
    5970:	3103      	adds	r1, #3
    5972:	3204      	adds	r2, #4
    5974:	2b12      	cmp	r3, #18
    5976:	d01f      	beq.n	59b8 <ULedBand::setup()+0x8c>
		if (num >= numled) return;
    5978:	f8b4 c000 	ldrh.w	ip, [r4]
    597c:	459c      	cmp	ip, r3
    597e:	d9f6      	bls.n	596e <ULedBand::setup()+0x42>
		if (config < 6) {
    5980:	f894 c003 	ldrb.w	ip, [r4, #3]
			drawBuffer[num+0] = color & 255;
    5984:	68a5      	ldr	r5, [r4, #8]
		if (config < 6) {
    5986:	f1bc 0f05 	cmp.w	ip, #5
    598a:	d9e5      	bls.n	5958 <ULedBand::setup()+0x2c>
			drawBuffer[num+0] = color & 255;
    598c:	54a8      	strb	r0, [r5, r2]
    598e:	3301      	adds	r3, #1
			drawBuffer[num+1] = (color >> 8) & 255;
    5990:	68a5      	ldr	r5, [r4, #8]
    5992:	3103      	adds	r1, #3
    5994:	2b12      	cmp	r3, #18
    5996:	eb05 0c02 	add.w	ip, r5, r2
    599a:	f88c 0001 	strb.w	r0, [ip, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    599e:	68a5      	ldr	r5, [r4, #8]
    59a0:	eb05 0c02 	add.w	ip, r5, r2
    59a4:	f88c 0002 	strb.w	r0, [ip, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    59a8:	68a5      	ldr	r5, [r4, #8]
    59aa:	eb05 0c02 	add.w	ip, r5, r2
    59ae:	f102 0204 	add.w	r2, r2, #4
    59b2:	f88c 0003 	strb.w	r0, [ip, #3]
    59b6:	d1df      	bne.n	5978 <ULedBand::setup()+0x4c>
  leds.show();
    59b8:	4802      	ldr	r0, [pc, #8]	; (59c4 <ULedBand::setup()+0x98>)
}
    59ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  leds.show();
    59be:	f00f bc9d 	b.w	152fc <WS2812Serial::show()>
    59c2:	bf00      	nop
    59c4:	20009bf0 	.word	0x20009bf0
    59c8:	200079e8 	.word	0x200079e8
    59cc:	20007a28 	.word	0x20007a28
    59d0:	2000fac4 	.word	0x2000fac4
    59d4:	00000000 	.word	0x00000000

000059d8 <ULedBand::tick()>:
  for (int i = 0; i < 8; i++)
    59d8:	f100 0c24 	add.w	ip, r0, #36	; 0x24
    59dc:	4a86      	ldr	r2, [pc, #536]	; (5bf8 <ULedBand::tick()+0x220>)
    59de:	f100 0144 	add.w	r1, r0, #68	; 0x44
{ //
    59e2:	4663      	mov	r3, ip
    59e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59e8:	b083      	sub	sp, #12
    line[i] += ls.lineSensorValue[i];
    59ea:	edd3 7a00 	vldr	s15, [r3]
    59ee:	ecb2 7a01 	vldmia	r2!, {s14}
    59f2:	ee77 7a87 	vadd.f32	s15, s15, s14
    59f6:	ece3 7a01 	vstmia	r3!, {s15}
  for (int i = 0; i < 8; i++)
    59fa:	4299      	cmp	r1, r3
    59fc:	d1f5      	bne.n	59ea <ULedBand::tick()+0x12>
  lineCnt++;
    59fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
  gyroSumCnt++;
    5a00:	6d41      	ldr	r1, [r0, #84]	; 0x54
    gyroSum[i] = imu2.gyro[i];
    5a02:	4b7e      	ldr	r3, [pc, #504]	; (5bfc <ULedBand::tick()+0x224>)
  lineCnt++;
    5a04:	3201      	adds	r2, #1
  gyroSumCnt++;
    5a06:	3101      	adds	r1, #1
    gyroSum[i] = imu2.gyro[i];
    5a08:	69dc      	ldr	r4, [r3, #28]
  gyroSumCnt++;
    5a0a:	6541      	str	r1, [r0, #84]	; 0x54
  lineCnt++;
    5a0c:	6442      	str	r2, [r0, #68]	; 0x44
	return systick_millis_count;
    5a0e:	497c      	ldr	r1, [pc, #496]	; (5c00 <ULedBand::tick()+0x228>)
    gyroSum[i] = imu2.gyro[i];
    5a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5a12:	6484      	str	r4, [r0, #72]	; 0x48
    5a14:	6502      	str	r2, [r0, #80]	; 0x50
    5a16:	6a1c      	ldr	r4, [r3, #32]
  if (millis() > nextDisplayTime)
    5a18:	69c2      	ldr	r2, [r0, #28]
    5a1a:	680b      	ldr	r3, [r1, #0]
    gyroSum[i] = imu2.gyro[i];
    5a1c:	64c4      	str	r4, [r0, #76]	; 0x4c
  if (millis() > nextDisplayTime)
    5a1e:	429a      	cmp	r2, r3
    5a20:	d319      	bcc.n	5a56 <ULedBand::tick()+0x7e>
      if (irdist.irDistance[i] < minIR[i])
    5a22:	4b78      	ldr	r3, [pc, #480]	; (5c04 <ULedBand::tick()+0x22c>)
    5a24:	ed90 7a16 	vldr	s14, [r0, #88]	; 0x58
    5a28:	edd3 7a05 	vldr	s15, [r3, #20]
    5a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
    5a30:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
    5a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        minIR[i] = irdist.irDistance[i];
    5a38:	bf48      	it	mi
    5a3a:	edc0 7a16 	vstrmi	s15, [r0, #88]	; 0x58
      if (irdist.irDistance[i] < minIR[i])
    5a3e:	edd3 7a06 	vldr	s15, [r3, #24]
    5a42:	eef4 7ac7 	vcmpe.f32	s15, s14
    5a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a4a:	d501      	bpl.n	5a50 <ULedBand::tick()+0x78>
        minIR[i] = irdist.irDistance[i];
    5a4c:	edc0 7a17 	vstr	s15, [r0, #92]	; 0x5c
}
    5a50:	b003      	add	sp, #12
    5a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a56:	680b      	ldr	r3, [r1, #0]
    nextDisplayTime += 80;
    5a58:	3250      	adds	r2, #80	; 0x50
    int a = abs(int((millis() % 2000) - 1000))/10; // 0..100 in 2 seconds
    5a5a:	496b      	ldr	r1, [pc, #428]	; (5c08 <ULedBand::tick()+0x230>)
    nextDisplayTime += 80;
    5a5c:	61c2      	str	r2, [r0, #28]
    int a = abs(int((millis() % 2000) - 1000))/10; // 0..100 in 2 seconds
    5a5e:	fba1 4103 	umull	r4, r1, r1, r3
    5a62:	09ca      	lsrs	r2, r1, #7
    5a64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    5a68:	fb01 3212 	mls	r2, r1, r2, r3
    5a6c:	4b67      	ldr	r3, [pc, #412]	; (5c0c <ULedBand::tick()+0x234>)
  void stopLogging(void);
  /**
  * Returns true if logger is logging and not full */
  inline bool loggerLogging() 
  {
    return toLog and not logFull;
    5a6e:	4968      	ldr	r1, [pc, #416]	; (5c10 <ULedBand::tick()+0x238>)
    5a70:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
    5a74:	2a00      	cmp	r2, #0
    5a76:	bfb8      	it	lt
    5a78:	4252      	neglt	r2, r2
    5a7a:	fba3 3202 	umull	r3, r2, r3, r2
    5a7e:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
    5a82:	08d2      	lsrs	r2, r2, #3
    5a84:	2b00      	cmp	r3, #0
    5a86:	f040 8084 	bne.w	5b92 <ULedBand::tick()+0x1ba>
		if (num >= numled) return;
    5a8a:	4b62      	ldr	r3, [pc, #392]	; (5c14 <ULedBand::tick()+0x23c>)
    5a8c:	f8b3 a000 	ldrh.w	sl, [r3]
    5a90:	f1ba 0f00 	cmp.w	sl, #0
    5a94:	d013      	beq.n	5abe <ULedBand::tick()+0xe6>
		return (red << 16) | (green << 8) | blue;
    5a96:	0211      	lsls	r1, r2, #8
    5a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    5a9c:	430a      	orrs	r2, r1
		if (config < 6) {
    5a9e:	78d9      	ldrb	r1, [r3, #3]
    5aa0:	2905      	cmp	r1, #5
			drawBuffer[num+0] = color & 255;
    5aa2:	6899      	ldr	r1, [r3, #8]
			drawBuffer[num+1] = (color >> 8) & 255;
    5aa4:	ea4f 2412 	mov.w	r4, r2, lsr #8
			drawBuffer[num+0] = color & 255;
    5aa8:	700a      	strb	r2, [r1, #0]
			drawBuffer[num+2] = (color >> 16) & 255;
    5aaa:	ea4f 4212 	mov.w	r2, r2, lsr #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5aae:	6899      	ldr	r1, [r3, #8]
    5ab0:	704c      	strb	r4, [r1, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5ab2:	6899      	ldr	r1, [r3, #8]
    5ab4:	708a      	strb	r2, [r1, #2]
		if (config < 6) {
    5ab6:	f200 8183 	bhi.w	5dc0 <ULedBand::tick()+0x3e8>
		if (num >= numled) return;
    5aba:	f8b3 a000 	ldrh.w	sl, [r3]
{ //
    5abe:	2505      	movs	r5, #5
    5ac0:	2104      	movs	r1, #4
          leds.setPixel(i + 1, 0, 0, v *100);
    5ac2:	ed9f 5a55 	vldr	s10, [pc, #340]	; 5c18 <ULedBand::tick()+0x240>
{ //
    5ac6:	2203      	movs	r2, #3
    5ac8:	46ab      	mov	fp, r5
    5aca:	460f      	mov	r7, r1
    5acc:	f04f 0e01 	mov.w	lr, #1
    5ad0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 5c20 <ULedBand::tick()+0x248>
			drawBuffer[num+1] = (color >> 8) & 255;
    5ad4:	f04f 0800 	mov.w	r8, #0
      line[i] = 0;
    5ad8:	eddf 5a50 	vldr	s11, [pc, #320]	; 5c1c <ULedBand::tick()+0x244>
        if (v > 0.8)
    5adc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 5bf0 <ULedBand::tick()+0x218>
    5ae0:	e02c      	b.n	5b3c <ULedBand::tick()+0x164>
		if (num >= numled) return;
    5ae2:	45f2      	cmp	sl, lr
    5ae4:	d91a      	bls.n	5b1c <ULedBand::tick()+0x144>
          leds.setPixel(i + 1, 0, v * 100, 0);
    5ae6:	ee27 7a05 	vmul.f32	s14, s14, s10
		if (config < 6) {
    5aea:	f893 a003 	ldrb.w	sl, [r3, #3]
    5aee:	f1ba 0f05 	cmp.w	sl, #5
    5af2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    5af6:	edcd 7a01 	vstr	s15, [sp, #4]
		return (red << 16) | (green << 8) | blue;
    5afa:	f89d 4004 	ldrb.w	r4, [sp, #4]
    5afe:	ea4f 2404 	mov.w	r4, r4, lsl #8
			drawBuffer[num+1] = (color >> 8) & 255;
    5b02:	ea4f 2a14 	mov.w	sl, r4, lsr #8
			drawBuffer[num+0] = color & 255;
    5b06:	689c      	ldr	r4, [r3, #8]
		if (config < 6) {
    5b08:	f200 8134 	bhi.w	5d74 <ULedBand::tick()+0x39c>
			drawBuffer[num+0] = color & 255;
    5b0c:	f804 8002 	strb.w	r8, [r4, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5b10:	689c      	ldr	r4, [r3, #8]
    5b12:	f804 a007 	strb.w	sl, [r4, r7]
			drawBuffer[num+2] = (color >> 16) & 255;
    5b16:	689c      	ldr	r4, [r3, #8]
    5b18:	f804 800b 	strb.w	r8, [r4, fp]
    for (int i = 0; i < 8; i++)
    5b1c:	3203      	adds	r2, #3
    5b1e:	f10e 0e01 	add.w	lr, lr, #1
    5b22:	3703      	adds	r7, #3
    5b24:	f10b 0b03 	add.w	fp, fp, #3
    5b28:	2a1b      	cmp	r2, #27
    5b2a:	f101 0104 	add.w	r1, r1, #4
    5b2e:	f105 0504 	add.w	r5, r5, #4
      line[i] = 0;
    5b32:	ecec 5a01 	vstmia	ip!, {s11}
    for (int i = 0; i < 8; i++)
    5b36:	d075      	beq.n	5c24 <ULedBand::tick()+0x24c>
		if (num >= numled) return;
    5b38:	f8b3 a000 	ldrh.w	sl, [r3]
      if (ls.lineSensorOn)
    5b3c:	f899 403c 	ldrb.w	r4, [r9, #60]	; 0x3c
    5b40:	2c00      	cmp	r4, #0
    5b42:	d042      	beq.n	5bca <ULedBand::tick()+0x1f2>
        float v = line[i] / lineCnt;
    5b44:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
    5b48:	eddc 6a00 	vldr	s13, [ip]
    5b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        if (v > 0.8)
    5b54:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
    5b58:	eeb4 6bc4 	vcmpe.f64	d6, d4
    5b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b60:	dcbf      	bgt.n	5ae2 <ULedBand::tick()+0x10a>
    5b62:	45f2      	cmp	sl, lr
    5b64:	d9da      	bls.n	5b1c <ULedBand::tick()+0x144>
          leds.setPixel(i + 1, 0, 0, v *100);
    5b66:	ee27 7a05 	vmul.f32	s14, s14, s10
		if (config < 6) {
    5b6a:	78dc      	ldrb	r4, [r3, #3]
    5b6c:	2c05      	cmp	r4, #5
			drawBuffer[num+0] = color & 255;
    5b6e:	689c      	ldr	r4, [r3, #8]
    5b70:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    5b74:	edcd 7a01 	vstr	s15, [sp, #4]
    5b78:	f89d a004 	ldrb.w	sl, [sp, #4]
		if (config < 6) {
    5b7c:	f200 8108 	bhi.w	5d90 <ULedBand::tick()+0x3b8>
			drawBuffer[num+0] = color & 255;
    5b80:	f804 a002 	strb.w	sl, [r4, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5b84:	689c      	ldr	r4, [r3, #8]
    5b86:	f804 8007 	strb.w	r8, [r4, r7]
			drawBuffer[num+2] = (color >> 16) & 255;
    5b8a:	689c      	ldr	r4, [r3, #8]
    5b8c:	f804 800b 	strb.w	r8, [r4, fp]
    5b90:	e7c4      	b.n	5b1c <ULedBand::tick()+0x144>
    5b92:	f891 1055 	ldrb.w	r1, [r1, #85]	; 0x55
    5b96:	2900      	cmp	r1, #0
    5b98:	f47f af77 	bne.w	5a8a <ULedBand::tick()+0xb2>
		if (num >= numled) return;
    5b9c:	4b1d      	ldr	r3, [pc, #116]	; (5c14 <ULedBand::tick()+0x23c>)
    5b9e:	f8b3 a000 	ldrh.w	sl, [r3]
    5ba2:	f1ba 0f00 	cmp.w	sl, #0
    5ba6:	d08a      	beq.n	5abe <ULedBand::tick()+0xe6>
		if (config < 6) {
    5ba8:	78dc      	ldrb	r4, [r3, #3]
		return (red << 16) | (green << 8) | blue;
    5baa:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
		if (config < 6) {
    5bae:	2c05      	cmp	r4, #5
			drawBuffer[num+0] = color & 255;
    5bb0:	689c      	ldr	r4, [r3, #8]
    5bb2:	7022      	strb	r2, [r4, #0]
			drawBuffer[num+2] = (color >> 16) & 255;
    5bb4:	ea4f 4212 	mov.w	r2, r2, lsr #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5bb8:	689c      	ldr	r4, [r3, #8]
    5bba:	7061      	strb	r1, [r4, #1]
		if (config < 6) {
    5bbc:	f200 816e 	bhi.w	5e9c <ULedBand::tick()+0x4c4>
			drawBuffer[num+2] = (color >> 16) & 255;
    5bc0:	6899      	ldr	r1, [r3, #8]
		if (num >= numled) return;
    5bc2:	f8b3 a000 	ldrh.w	sl, [r3]
			drawBuffer[num+2] = (color >> 16) & 255;
    5bc6:	708a      	strb	r2, [r1, #2]
    5bc8:	e779      	b.n	5abe <ULedBand::tick()+0xe6>
		if (num >= numled) return;
    5bca:	45f2      	cmp	sl, lr
    5bcc:	d9a6      	bls.n	5b1c <ULedBand::tick()+0x144>
		if (config < 6) {
    5bce:	f893 a003 	ldrb.w	sl, [r3, #3]
			drawBuffer[num+0] = color & 255;
    5bd2:	689e      	ldr	r6, [r3, #8]
		if (config < 6) {
    5bd4:	f1ba 0f05 	cmp.w	sl, #5
    5bd8:	f200 80e0 	bhi.w	5d9c <ULedBand::tick()+0x3c4>
			drawBuffer[num+0] = color & 255;
    5bdc:	54b4      	strb	r4, [r6, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5bde:	689e      	ldr	r6, [r3, #8]
    5be0:	55f4      	strb	r4, [r6, r7]
			drawBuffer[num+2] = (color >> 16) & 255;
    5be2:	689e      	ldr	r6, [r3, #8]
    5be4:	f806 400b 	strb.w	r4, [r6, fp]
    5be8:	e798      	b.n	5b1c <ULedBand::tick()+0x144>
    5bea:	bf00      	nop
    5bec:	f3af 8000 	nop.w
    5bf0:	9999999a 	.word	0x9999999a
    5bf4:	3fe99999 	.word	0x3fe99999
    5bf8:	2000f418 	.word	0x2000f418
    5bfc:	2000dfd0 	.word	0x2000dfd0
    5c00:	2000fab8 	.word	0x2000fab8
    5c04:	2000f19c 	.word	0x2000f19c
    5c08:	10624dd3 	.word	0x10624dd3
    5c0c:	cccccccd 	.word	0xcccccccd
    5c10:	2000f24c 	.word	0x2000f24c
    5c14:	20009bf0 	.word	0x20009bf0
    5c18:	42c80000 	.word	0x42c80000
    5c1c:	00000000 	.word	0x00000000
    5c20:	2000f390 	.word	0x2000f390
      int v = int(gyroSum[i]/gyroSumCnt*30.0);
    5c24:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
    lineCnt = 0;
    5c28:	f04f 0c00 	mov.w	ip, #0
		if (num >= numled) return;
    5c2c:	881f      	ldrh	r7, [r3, #0]
    5c2e:	f100 0648 	add.w	r6, r0, #72	; 0x48
    5c32:	2524      	movs	r5, #36	; 0x24
    5c34:	2409      	movs	r4, #9
      gyroSum[i] = 0;
    5c36:	f04f 0e00 	mov.w	lr, #0
    lineCnt = 0;
    5c3a:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
      int v = int(gyroSum[i]/gyroSumCnt*30.0);
    5c3e:	edd0 7a15 	vldr	s15, [r0, #84]	; 0x54
    5c42:	ecf6 6a01 	vldmia	r6!, {s13}
    5c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      gyroSum[i] = 0;
    5c4a:	f846 ec04 	str.w	lr, [r6, #-4]
      int v = int(gyroSum[i]/gyroSumCnt*30.0);
    5c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    5c52:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    5c56:	ee27 7b05 	vmul.f64	d7, d7, d5
    5c5a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    5c5e:	ee17 1a90 	vmov	r1, s15
      if (v > 255)
    5c62:	29ff      	cmp	r1, #255	; 0xff
    5c64:	dc71      	bgt.n	5d4a <ULedBand::tick()+0x372>
      else if (v < -255)
    5c66:	f111 0fff 	cmn.w	r1, #255	; 0xff
    5c6a:	f280 80a5 	bge.w	5db8 <ULedBand::tick()+0x3e0>
      gyroSum[i] = 0;
    5c6e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5c72:	42a7      	cmp	r7, r4
    5c74:	d910      	bls.n	5c98 <ULedBand::tick()+0x2c0>
		if (config < 6) {
    5c76:	78df      	ldrb	r7, [r3, #3]
    5c78:	2f05      	cmp	r7, #5
			drawBuffer[num+0] = color & 255;
    5c7a:	689f      	ldr	r7, [r3, #8]
		if (config < 6) {
    5c7c:	d868      	bhi.n	5d50 <ULedBand::tick()+0x378>
			drawBuffer[num+0] = color & 255;
    5c7e:	f807 c002 	strb.w	ip, [r7, r2]
			drawBuffer[num+1] = (color >> 8) & 255;
    5c82:	ea4f 2811 	mov.w	r8, r1, lsr #8
    5c86:	689f      	ldr	r7, [r3, #8]
			drawBuffer[num+2] = (color >> 16) & 255;
    5c88:	0c09      	lsrs	r1, r1, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5c8a:	4417      	add	r7, r2
    5c8c:	f887 8001 	strb.w	r8, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5c90:	689f      	ldr	r7, [r3, #8]
    5c92:	4417      	add	r7, r2
    5c94:	70b9      	strb	r1, [r7, #2]
		if (num >= numled) return;
    5c96:	881f      	ldrh	r7, [r3, #0]
    for (int i = 0; i < 3; i++)
    5c98:	3401      	adds	r4, #1
    5c9a:	3203      	adds	r2, #3
    5c9c:	3504      	adds	r5, #4
    5c9e:	2c0c      	cmp	r4, #12
    5ca0:	d1cd      	bne.n	5c3e <ULedBand::tick()+0x266>
    if (irdist.useDistSensor)
    5ca2:	4a9e      	ldr	r2, [pc, #632]	; (5f1c <ULedBand::tick()+0x544>)
    gyroSumCnt = 0;
    5ca4:	2100      	movs	r1, #0
    if (irdist.useDistSensor)
    5ca6:	7f12      	ldrb	r2, [r2, #28]
    gyroSumCnt = 0;
    5ca8:	6541      	str	r1, [r0, #84]	; 0x54
    if (irdist.useDistSensor)
    5caa:	2a00      	cmp	r2, #0
    5cac:	f000 809b 	beq.w	5de6 <ULedBand::tick()+0x40e>
        if (a > greenDist)
    5cb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        float a = minIR[i];
    5cb4:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
        if (a > greenDist)
    5cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
    5cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5cc0:	f300 80b8 	bgt.w	5e34 <ULedBand::tick()+0x45c>
        else if (a < redDist)
    5cc4:	ed9f 7a96 	vldr	s14, [pc, #600]	; 5f20 <ULedBand::tick()+0x548>
    5cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
    5ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5cd0:	d57a      	bpl.n	5dc8 <ULedBand::tick()+0x3f0>
    5cd2:	2f0c      	cmp	r7, #12
    5cd4:	d90b      	bls.n	5cee <ULedBand::tick()+0x316>
		if (config < 6) {
    5cd6:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+2] = (color >> 16) & 255;
    5cd8:	2428      	movs	r4, #40	; 0x28
		if (config < 6) {
    5cda:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5cdc:	689a      	ldr	r2, [r3, #8]
		if (config < 6) {
    5cde:	f200 810a 	bhi.w	5ef6 <ULedBand::tick()+0x51e>
			drawBuffer[num+0] = color & 255;
    5ce2:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5ce6:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5cea:	f882 4026 	strb.w	r4, [r2, #38]	; 0x26
        if (a > greenDist)
    5cee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        float a = minIR[i];
    5cf2:	edd0 7a17 	vldr	s15, [r0, #92]	; 0x5c
        minIR[i] = 2.0;
    5cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
		if (num >= numled) return;
    5cfa:	8819      	ldrh	r1, [r3, #0]
        if (a > greenDist)
    5cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
        minIR[i] = 2.0;
    5d00:	6582      	str	r2, [r0, #88]	; 0x58
        if (a > greenDist)
    5d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d06:	f300 80a4 	bgt.w	5e52 <ULedBand::tick()+0x47a>
        else if (a < redDist)
    5d0a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 5f20 <ULedBand::tick()+0x548>
    5d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d16:	d57e      	bpl.n	5e16 <ULedBand::tick()+0x43e>
    5d18:	290d      	cmp	r1, #13
    5d1a:	d90d      	bls.n	5d38 <ULedBand::tick()+0x360>
		if (config < 6) {
    5d1c:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+2] = (color >> 16) & 255;
    5d1e:	2128      	movs	r1, #40	; 0x28
			drawBuffer[num+0] = color & 255;
    5d20:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5d22:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5d24:	f04f 0200 	mov.w	r2, #0
		if (config < 6) {
    5d28:	f200 80dc 	bhi.w	5ee4 <ULedBand::tick()+0x50c>
			drawBuffer[num+0] = color & 255;
    5d2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			drawBuffer[num+1] = (color >> 8) & 255;
    5d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5d34:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
        minIR[i] = 2.0;
    5d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d3c:	65c3      	str	r3, [r0, #92]	; 0x5c
    leds.show();
    5d3e:	4879      	ldr	r0, [pc, #484]	; (5f24 <ULedBand::tick()+0x54c>)
}
    5d40:	b003      	add	sp, #12
    5d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    leds.show();
    5d46:	f00f bad9 	b.w	152fc <WS2812Serial::show()>
      gyroSum[i] = 0;
    5d4a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    5d4e:	e790      	b.n	5c72 <ULedBand::tick()+0x29a>
			drawBuffer[num+0] = color & 255;
    5d50:	f807 c005 	strb.w	ip, [r7, r5]
			drawBuffer[num+1] = (color >> 8) & 255;
    5d54:	ea4f 2811 	mov.w	r8, r1, lsr #8
    5d58:	689f      	ldr	r7, [r3, #8]
			drawBuffer[num+2] = (color >> 16) & 255;
    5d5a:	0c09      	lsrs	r1, r1, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5d5c:	442f      	add	r7, r5
    5d5e:	f887 8001 	strb.w	r8, [r7, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5d62:	689f      	ldr	r7, [r3, #8]
    5d64:	442f      	add	r7, r5
    5d66:	70b9      	strb	r1, [r7, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5d68:	6899      	ldr	r1, [r3, #8]
    5d6a:	4429      	add	r1, r5
    5d6c:	f881 c003 	strb.w	ip, [r1, #3]
		if (num >= numled) return;
    5d70:	881f      	ldrh	r7, [r3, #0]
    5d72:	e791      	b.n	5c98 <ULedBand::tick()+0x2c0>
			drawBuffer[num+0] = color & 255;
    5d74:	f804 8001 	strb.w	r8, [r4, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5d78:	689c      	ldr	r4, [r3, #8]
    5d7a:	f804 a005 	strb.w	sl, [r4, r5]
			drawBuffer[num+2] = (color >> 16) & 255;
    5d7e:	689c      	ldr	r4, [r3, #8]
    5d80:	440c      	add	r4, r1
    5d82:	f884 8002 	strb.w	r8, [r4, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5d86:	689c      	ldr	r4, [r3, #8]
    5d88:	440c      	add	r4, r1
    5d8a:	f884 8003 	strb.w	r8, [r4, #3]
    5d8e:	e6c5      	b.n	5b1c <ULedBand::tick()+0x144>
			drawBuffer[num+0] = color & 255;
    5d90:	f804 a001 	strb.w	sl, [r4, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5d94:	689c      	ldr	r4, [r3, #8]
    5d96:	f804 8005 	strb.w	r8, [r4, r5]
    5d9a:	e7f0      	b.n	5d7e <ULedBand::tick()+0x3a6>
			drawBuffer[num+0] = color & 255;
    5d9c:	5474      	strb	r4, [r6, r1]
			drawBuffer[num+1] = (color >> 8) & 255;
    5d9e:	689e      	ldr	r6, [r3, #8]
    5da0:	5574      	strb	r4, [r6, r5]
			drawBuffer[num+2] = (color >> 16) & 255;
    5da2:	689e      	ldr	r6, [r3, #8]
    5da4:	eb06 0a01 	add.w	sl, r6, r1
    5da8:	f88a 4002 	strb.w	r4, [sl, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5dac:	689e      	ldr	r6, [r3, #8]
    5dae:	eb06 0a01 	add.w	sl, r6, r1
    5db2:	f88a 4003 	strb.w	r4, [sl, #3]
    5db6:	e6b1      	b.n	5b1c <ULedBand::tick()+0x144>
      if (v < 0)
    5db8:	2900      	cmp	r1, #0
    5dba:	db29      	blt.n	5e10 <ULedBand::tick()+0x438>
		return (red << 16) | (green << 8) | blue;
    5dbc:	0209      	lsls	r1, r1, #8
    5dbe:	e758      	b.n	5c72 <ULedBand::tick()+0x29a>
			drawBuffer[num+3] = (color >> 24) & 255;
    5dc0:	2100      	movs	r1, #0
    5dc2:	689a      	ldr	r2, [r3, #8]
    5dc4:	70d1      	strb	r1, [r2, #3]
    5dc6:	e678      	b.n	5aba <ULedBand::tick()+0xe2>
		if (num >= numled) return;
    5dc8:	2f0c      	cmp	r7, #12
    5dca:	d990      	bls.n	5cee <ULedBand::tick()+0x316>
		if (config < 6) {
    5dcc:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+1] = (color >> 8) & 255;
    5dce:	2414      	movs	r4, #20
		if (config < 6) {
    5dd0:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5dd2:	689a      	ldr	r2, [r3, #8]
		if (config < 6) {
    5dd4:	f200 8098 	bhi.w	5f08 <ULedBand::tick()+0x530>
			drawBuffer[num+0] = color & 255;
    5dd8:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5ddc:	f882 4025 	strb.w	r4, [r2, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5de0:	f882 4026 	strb.w	r4, [r2, #38]	; 0x26
    5de4:	e783      	b.n	5cee <ULedBand::tick()+0x316>
		if (num >= numled) return;
    5de6:	2f0c      	cmp	r7, #12
    5de8:	d9a9      	bls.n	5d3e <ULedBand::tick()+0x366>
		if (config < 6) {
    5dea:	78d9      	ldrb	r1, [r3, #3]
			drawBuffer[num+0] = color & 255;
    5dec:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5dee:	2905      	cmp	r1, #5
    5df0:	d840      	bhi.n	5e74 <ULedBand::tick()+0x49c>
		if (num >= numled) return;
    5df2:	2f0d      	cmp	r7, #13
			drawBuffer[num+0] = color & 255;
    5df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5dfc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		if (num >= numled) return;
    5e00:	d09d      	beq.n	5d3e <ULedBand::tick()+0x366>
			drawBuffer[num+0] = color & 255;
    5e02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			drawBuffer[num+1] = (color >> 8) & 255;
    5e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5e0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    5e0e:	e796      	b.n	5d3e <ULedBand::tick()+0x366>
        g = -v;
    5e10:	4249      	negs	r1, r1
		return (red << 16) | (green << 8) | blue;
    5e12:	0409      	lsls	r1, r1, #16
        v = 0;
    5e14:	e72d      	b.n	5c72 <ULedBand::tick()+0x29a>
		if (num >= numled) return;
    5e16:	290d      	cmp	r1, #13
    5e18:	d98e      	bls.n	5d38 <ULedBand::tick()+0x360>
		if (config < 6) {
    5e1a:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+0] = color & 255;
    5e1c:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5e1e:	2a05      	cmp	r2, #5
    5e20:	d855      	bhi.n	5ece <ULedBand::tick()+0x4f6>
			drawBuffer[num+1] = (color >> 8) & 255;
    5e22:	2214      	movs	r2, #20
			drawBuffer[num+0] = color & 255;
    5e24:	2100      	movs	r1, #0
			drawBuffer[num+1] = (color >> 8) & 255;
    5e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5e2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			drawBuffer[num+0] = color & 255;
    5e2e:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
			drawBuffer[num+2] = (color >> 16) & 255;
    5e32:	e781      	b.n	5d38 <ULedBand::tick()+0x360>
		if (num >= numled) return;
    5e34:	2f0c      	cmp	r7, #12
    5e36:	f67f af5a 	bls.w	5cee <ULedBand::tick()+0x316>
		if (config < 6) {
    5e3a:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+1] = (color >> 8) & 255;
    5e3c:	2414      	movs	r4, #20
		if (config < 6) {
    5e3e:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5e40:	689a      	ldr	r2, [r3, #8]
		if (config < 6) {
    5e42:	d83b      	bhi.n	5ebc <ULedBand::tick()+0x4e4>
			drawBuffer[num+0] = color & 255;
    5e44:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
			drawBuffer[num+1] = (color >> 8) & 255;
    5e48:	f882 4025 	strb.w	r4, [r2, #37]	; 0x25
			drawBuffer[num+2] = (color >> 16) & 255;
    5e4c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    5e50:	e74d      	b.n	5cee <ULedBand::tick()+0x316>
		if (num >= numled) return;
    5e52:	290d      	cmp	r1, #13
    5e54:	f67f af70 	bls.w	5d38 <ULedBand::tick()+0x360>
		if (config < 6) {
    5e58:	78da      	ldrb	r2, [r3, #3]
			drawBuffer[num+1] = (color >> 8) & 255;
    5e5a:	2114      	movs	r1, #20
			drawBuffer[num+0] = color & 255;
    5e5c:	689b      	ldr	r3, [r3, #8]
		if (config < 6) {
    5e5e:	2a05      	cmp	r2, #5
			drawBuffer[num+0] = color & 255;
    5e60:	f04f 0200 	mov.w	r2, #0
		if (config < 6) {
    5e64:	d821      	bhi.n	5eaa <ULedBand::tick()+0x4d2>
			drawBuffer[num+0] = color & 255;
    5e66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			drawBuffer[num+2] = (color >> 16) & 255;
    5e6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			drawBuffer[num+1] = (color >> 8) & 255;
    5e6e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
			drawBuffer[num+2] = (color >> 16) & 255;
    5e72:	e761      	b.n	5d38 <ULedBand::tick()+0x360>
		if (num >= numled) return;
    5e74:	2f0d      	cmp	r7, #13
			drawBuffer[num+0] = color & 255;
    5e76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5e7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5e7e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5e82:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		if (num >= numled) return;
    5e86:	f43f af5a 	beq.w	5d3e <ULedBand::tick()+0x366>
			drawBuffer[num+0] = color & 255;
    5e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			drawBuffer[num+1] = (color >> 8) & 255;
    5e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			drawBuffer[num+2] = (color >> 16) & 255;
    5e92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			drawBuffer[num+3] = (color >> 24) & 255;
    5e96:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    5e9a:	e750      	b.n	5d3e <ULedBand::tick()+0x366>
			drawBuffer[num+2] = (color >> 16) & 255;
    5e9c:	689c      	ldr	r4, [r3, #8]
    5e9e:	70a2      	strb	r2, [r4, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5ea0:	689a      	ldr	r2, [r3, #8]
    5ea2:	70d1      	strb	r1, [r2, #3]
		if (num >= numled) return;
    5ea4:	f8b3 a000 	ldrh.w	sl, [r3]
    5ea8:	e609      	b.n	5abe <ULedBand::tick()+0xe6>
			drawBuffer[num+0] = color & 255;
    5eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			drawBuffer[num+2] = (color >> 16) & 255;
    5eae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			drawBuffer[num+1] = (color >> 8) & 255;
    5eb2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
			drawBuffer[num+3] = (color >> 24) & 255;
    5eb6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    5eba:	e73d      	b.n	5d38 <ULedBand::tick()+0x360>
			drawBuffer[num+0] = color & 255;
    5ebc:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5ec0:	f882 4031 	strb.w	r4, [r2, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5ec4:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5ec8:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    5ecc:	e70f      	b.n	5cee <ULedBand::tick()+0x316>
			drawBuffer[num+0] = color & 255;
    5ece:	2100      	movs	r1, #0
			drawBuffer[num+1] = (color >> 8) & 255;
    5ed0:	2214      	movs	r2, #20
			drawBuffer[num+0] = color & 255;
    5ed2:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			drawBuffer[num+3] = (color >> 24) & 255;
    5ed6:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
			drawBuffer[num+1] = (color >> 8) & 255;
    5eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			drawBuffer[num+2] = (color >> 16) & 255;
    5ede:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			drawBuffer[num+3] = (color >> 24) & 255;
    5ee2:	e729      	b.n	5d38 <ULedBand::tick()+0x360>
			drawBuffer[num+0] = color & 255;
    5ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			drawBuffer[num+1] = (color >> 8) & 255;
    5ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			drawBuffer[num+2] = (color >> 16) & 255;
    5eec:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
			drawBuffer[num+3] = (color >> 24) & 255;
    5ef0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    5ef4:	e720      	b.n	5d38 <ULedBand::tick()+0x360>
			drawBuffer[num+0] = color & 255;
    5ef6:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5efa:	f882 1031 	strb.w	r1, [r2, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5efe:	f882 4032 	strb.w	r4, [r2, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5f02:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    5f06:	e6f2      	b.n	5cee <ULedBand::tick()+0x316>
			drawBuffer[num+0] = color & 255;
    5f08:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			drawBuffer[num+1] = (color >> 8) & 255;
    5f0c:	f882 4031 	strb.w	r4, [r2, #49]	; 0x31
			drawBuffer[num+2] = (color >> 16) & 255;
    5f10:	f882 4032 	strb.w	r4, [r2, #50]	; 0x32
			drawBuffer[num+3] = (color >> 24) & 255;
    5f14:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    5f18:	e6e9      	b.n	5cee <ULedBand::tick()+0x316>
    5f1a:	bf00      	nop
    5f1c:	2000f19c 	.word	0x2000f19c
    5f20:	3e051eb8 	.word	0x3e051eb8
    5f24:	20009bf0 	.word	0x20009bf0

00005f28 <ULedBand::setPixel(int, int, int, int)>:
		if (num >= numled) return;
    5f28:	481c      	ldr	r0, [pc, #112]	; (5f9c <ULedBand::setPixel(int, int, int, int)+0x74>)
    5f2a:	f8b0 c000 	ldrh.w	ip, [r0]
    5f2e:	4561      	cmp	r1, ip
    5f30:	d233      	bcs.n	5f9a <ULedBand::setPixel(int, int, int, int)+0x72>
		return (red << 16) | (green << 8) | blue;
    5f32:	021b      	lsls	r3, r3, #8
    5f34:	f8dd c000 	ldr.w	ip, [sp]
    5f38:	0412      	lsls	r2, r2, #16
    5f3a:	fa5f fc8c 	uxtb.w	ip, ip
    5f3e:	b29b      	uxth	r3, r3
    5f40:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    5f44:	ea43 030c 	orr.w	r3, r3, ip
    5f48:	4313      	orrs	r3, r2
		if (config < 6) {
    5f4a:	78c2      	ldrb	r2, [r0, #3]
    5f4c:	2a05      	cmp	r2, #5
    5f4e:	d80e      	bhi.n	5f6e <ULedBand::setPixel(int, int, int, int)+0x46>
			drawBuffer[num+0] = color & 255;
    5f50:	6882      	ldr	r2, [r0, #8]
			num *= 3;
    5f52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
			drawBuffer[num+1] = (color >> 8) & 255;
    5f56:	ea4f 2c13 	mov.w	ip, r3, lsr #8
			drawBuffer[num+0] = color & 255;
    5f5a:	5453      	strb	r3, [r2, r1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5f5c:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5f5e:	6882      	ldr	r2, [r0, #8]
    5f60:	440a      	add	r2, r1
    5f62:	f882 c001 	strb.w	ip, [r2, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
    5f66:	6882      	ldr	r2, [r0, #8]
    5f68:	4411      	add	r1, r2
    5f6a:	708b      	strb	r3, [r1, #2]
    5f6c:	4770      	bx	lr
			drawBuffer[num+0] = color & 255;
    5f6e:	6882      	ldr	r2, [r0, #8]
			drawBuffer[num+1] = (color >> 8) & 255;
    5f70:	ea4f 2c13 	mov.w	ip, r3, lsr #8
			drawBuffer[num+0] = color & 255;
    5f74:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
			drawBuffer[num+2] = (color >> 16) & 255;
    5f78:	0c1b      	lsrs	r3, r3, #16
			drawBuffer[num+1] = (color >> 8) & 255;
    5f7a:	6882      	ldr	r2, [r0, #8]
    5f7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5f80:	f882 c001 	strb.w	ip, [r2, #1]
			drawBuffer[num+3] = (color >> 24) & 255;
    5f84:	f04f 0c00 	mov.w	ip, #0
			drawBuffer[num+2] = (color >> 16) & 255;
    5f88:	6882      	ldr	r2, [r0, #8]
    5f8a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5f8e:	7093      	strb	r3, [r2, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
    5f90:	6883      	ldr	r3, [r0, #8]
    5f92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5f96:	f883 c003 	strb.w	ip, [r3, #3]
}

void ULedBand::setPixel(int n, int r, int g, int b)
{
  leds.setPixel(n, r, g, b);
}
    5f9a:	4770      	bx	lr
    5f9c:	20009bf0 	.word	0x20009bf0

00005fa0 <ULedBand::sendLedsData()>:


void ULedBand::sendLedsData()
{
    5fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fa4:	f5ad 6dbd 	sub.w	sp, sp, #1512	; 0x5e8
  const int MRL = 1500;
  char reply[MRL];
  snprintf(reply, MRL, "leds %d ", numled);
    5fa8:	2312      	movs	r3, #18
    5faa:	4a1b      	ldr	r2, [pc, #108]	; (6018 <ULedBand::sendLedsData()+0x78>)
    5fac:	f240 51dc 	movw	r1, #1500	; 0x5dc
    5fb0:	a803      	add	r0, sp, #12
    5fb2:	4c1a      	ldr	r4, [pc, #104]	; (601c <ULedBand::sendLedsData()+0x7c>)
    5fb4:	f015 fbfe 	bl	1b7b4 <snprintf>
  int n = strlen(reply);
    5fb8:	a803      	add	r0, sp, #12
    5fba:	f017 f981 	bl	1d2c0 <strlen>
  char * p1 = &reply[n];
    5fbe:	ab03      	add	r3, sp, #12
  for (int l = 0; l < numled; l++)
  {
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5fc0:	f240 58dc 	movw	r8, #1500	; 0x5dc
  int n = strlen(reply);
    5fc4:	4605      	mov	r5, r0
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5fc6:	f8df a060 	ldr.w	sl, [pc, #96]	; 6028 <ULedBand::sendLedsData()+0x88>
    5fca:	f104 0936 	add.w	r9, r4, #54	; 0x36
  char * p1 = &reply[n];
    5fce:	181e      	adds	r6, r3, r0
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5fd0:	f894 c000 	ldrb.w	ip, [r4]
    5fd4:	eba8 0105 	sub.w	r1, r8, r5
    5fd8:	7867      	ldrb	r7, [r4, #1]
    5fda:	4652      	mov	r2, sl
    5fdc:	78a3      	ldrb	r3, [r4, #2]
    5fde:	4630      	mov	r0, r6
  for (int l = 0; l < numled; l++)
    5fe0:	3403      	adds	r4, #3
    snprintf(p1, MRL - n, " %02x %02x %02x ",
    5fe2:	e9cd 7c00 	strd	r7, ip, [sp]
    5fe6:	f015 fbe5 	bl	1b7b4 <snprintf>
             drawingMemory[l*BytePerLed+BytePerLed-1],
             drawingMemory[l*BytePerLed+BytePerLed-2],
             drawingMemory[l*BytePerLed+BytePerLed-3]);
    n += strlen(p1);
    5fea:	4630      	mov	r0, r6
    5fec:	f017 f968 	bl	1d2c0 <strlen>
    p1 = &reply[n];
    5ff0:	ab03      	add	r3, sp, #12
    n += strlen(p1);
    5ff2:	4405      	add	r5, r0
  for (int l = 0; l < numled; l++)
    5ff4:	45a1      	cmp	r9, r4
    p1 = &reply[n];
    5ff6:	eb03 0605 	add.w	r6, r3, r5
  for (int l = 0; l < numled; l++)
    5ffa:	d1e9      	bne.n	5fd0 <ULedBand::sendLedsData()+0x30>
  }
  snprintf(p1, MRL - n, "\r\n");
    5ffc:	4a08      	ldr	r2, [pc, #32]	; (6020 <ULedBand::sendLedsData()+0x80>)
    5ffe:	eba8 0105 	sub.w	r1, r8, r5
    6002:	4630      	mov	r0, r6
    6004:	f015 fbd6 	bl	1b7b4 <snprintf>
  usb.send(reply);
    6008:	a903      	add	r1, sp, #12
    600a:	4806      	ldr	r0, [pc, #24]	; (6024 <ULedBand::sendLedsData()+0x84>)
    600c:	f006 fafe 	bl	c60c <UUSB::send(char const*)>
}
    6010:	f50d 6dbd 	add.w	sp, sp, #1512	; 0x5e8
    6014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6018:	200079c8 	.word	0x200079c8
    601c:	2000ebbc 	.word	0x2000ebbc
    6020:	20004d1c 	.word	0x20004d1c
    6024:	2000fac4 	.word	0x2000fac4
    6028:	200079d4 	.word	0x200079d4

0000602c <ULedBand::sendData(int)>:
  if (item == 0)
    602c:	b101      	cbz	r1, 6030 <ULedBand::sendData(int)+0x4>
}
    602e:	4770      	bx	lr
    sendLedsData();
    6030:	f7ff bfb6 	b.w	5fa0 <ULedBand::sendLedsData()>

00006034 <_GLOBAL__sub_I_ledband>:
}

void ULedBand::eePromSave()
{
  // eeConfig.pushWord(deviceID);
}
    6034:	b538      	push	{r3, r4, r5, lr}
    6036:	4c0e      	ldr	r4, [pc, #56]	; (6070 <_GLOBAL__sub_I_ledband+0x3c>)
    6038:	2500      	movs	r5, #0
    603a:	4620      	mov	r0, r4
    603c:	f006 f8f4 	bl	c228 <USubss::USubss()>
    6040:	4b0c      	ldr	r3, [pc, #48]	; (6074 <_GLOBAL__sub_I_ledband+0x40>)
    6042:	4629      	mov	r1, r5
    6044:	2220      	movs	r2, #32
    6046:	f104 0024 	add.w	r0, r4, #36	; 0x24
    604a:	6023      	str	r3, [r4, #0]
    604c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    6050:	e9c4 5507 	strd	r5, r5, [r4, #28]
    6054:	f015 fd80 	bl	1bb58 <memset>
ULedBand ledband;
    6058:	4620      	mov	r0, r4
    605a:	6565      	str	r5, [r4, #84]	; 0x54
    605c:	4a06      	ldr	r2, [pc, #24]	; (6078 <_GLOBAL__sub_I_ledband+0x44>)
    605e:	4907      	ldr	r1, [pc, #28]	; (607c <_GLOBAL__sub_I_ledband+0x48>)
    6060:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    6064:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
}
    6068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
ULedBand ledband;
    606c:	f012 bfd4 	b.w	19018 <__aeabi_atexit>
    6070:	2000f1ec 	.word	0x2000f1ec
    6074:	20008150 	.word	0x20008150
    6078:	20008f80 	.word	0x20008f80
    607c:	00005795 	.word	0x00005795

00006080 <ULineSensor::decode(char const*)>:
  addPublistItem("lip", "Get line-sensor position 'lip left right valid validCnt crossing crossingCnt'");
  usb.addSubscriptionService(this);
}

bool ULineSensor::decode(const char* buf)
{
    6080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6084:	460c      	mov	r4, r1
    6086:	4605      	mov	r5, r0
  bool used = true;
  // is for the line sensor
  if (strncmp(buf, "lip ", 4) == 0)
    6088:	2204      	movs	r2, #4
    608a:	499e      	ldr	r1, [pc, #632]	; (6304 <ULineSensor::decode(char const*)+0x284>)
    608c:	4620      	mov	r0, r4
{
    608e:	ed2d 8b02 	vpush	{d8}
    6092:	b082      	sub	sp, #8
  if (strncmp(buf, "lip ", 4) == 0)
    6094:	f015 fe46 	bl	1bd24 <strncmp>
    6098:	2800      	cmp	r0, #0
    609a:	f000 80a4 	beq.w	61e6 <ULineSensor::decode(char const*)+0x166>
      lineValidThreshold = strtof(p1, &p1);
    if (strlen(p1) > 2)
      crossingThreshold = strtof(p1, &p1);
    //usb.send("# got a lip\n");
  }
  else if (strncmp(buf, "litw ", 5) == 0 and strlen(buf) > 19)
    609e:	2205      	movs	r2, #5
    60a0:	4999      	ldr	r1, [pc, #612]	; (6308 <ULineSensor::decode(char const*)+0x288>)
    60a2:	4620      	mov	r0, r4
    60a4:	f015 fe3e 	bl	1bd24 <strncmp>
    60a8:	bba0      	cbnz	r0, 6114 <ULineSensor::decode(char const*)+0x94>
    60aa:	4620      	mov	r0, r4
    60ac:	f017 f908 	bl	1d2c0 <strlen>
    60b0:	2813      	cmp	r0, #19
    60b2:	d92f      	bls.n	6114 <ULineSensor::decode(char const*)+0x94>
  { // calibrate white from provided values
    const char * p1 = &buf[5];
    60b4:	1d60      	adds	r0, r4, #5
    60b6:	f105 073e 	add.w	r7, r5, #62	; 0x3e
    60ba:	f105 0860 	add.w	r8, r5, #96	; 0x60
    {
      int16_t v = strtol(p1, (char **)&p1, 10);
      if (blackLevel[i] >= v)
        v = blackLevel[i] + 1;
      whiteLevel[i] = v;
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    60be:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
    60c2:	354e      	adds	r5, #78	; 0x4e
    60c4:	ae01      	add	r6, sp, #4
    const char * p1 = &buf[5];
    60c6:	9001      	str	r0, [sp, #4]
    for (int i = 0; i < 8; i++)
    60c8:	e000      	b.n	60cc <ULineSensor::decode(char const*)+0x4c>
      int16_t v = strtol(p1, (char **)&p1, 10);
    60ca:	9801      	ldr	r0, [sp, #4]
    60cc:	220a      	movs	r2, #10
    60ce:	4631      	mov	r1, r6
    60d0:	f015 f980 	bl	1b3d4 <strtol>
      if (blackLevel[i] >= v)
    60d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
      int16_t v = strtol(p1, (char **)&p1, 10);
    60d8:	b202      	sxth	r2, r0
        v = blackLevel[i] + 1;
    60da:	1c59      	adds	r1, r3, #1
      if (blackLevel[i] >= v)
    60dc:	4293      	cmp	r3, r2
        v = blackLevel[i] + 1;
    60de:	bfa8      	it	ge
    60e0:	b20a      	sxthge	r2, r1
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    60e2:	1ad3      	subs	r3, r2, r3
      whiteLevel[i] = v;
    60e4:	f827 2f02 	strh.w	r2, [r7, #2]!
    for (int i = 0; i < 8; i++)
    60e8:	42bd      	cmp	r5, r7
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    60ea:	ee07 3a90 	vmov	s15, r3
    60ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    60f2:	ee88 6b07 	vdiv.f64	d6, d8, d7
    60f6:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    60fa:	eca8 6a01 	vstmia	r8!, {s12}
    for (int i = 0; i < 8; i++)
    60fe:	d1e4      	bne.n	60ca <ULineSensor::decode(char const*)+0x4a>
    }
    usb.send("# ULineSensor:: white level set from values\n");
    6100:	4982      	ldr	r1, [pc, #520]	; (630c <ULineSensor::decode(char const*)+0x28c>)
    6102:	4883      	ldr	r0, [pc, #524]	; (6310 <ULineSensor::decode(char const*)+0x290>)
    6104:	f006 fa82 	bl	c60c <UUSB::send(char const*)>
  bool used = true;
    6108:	2001      	movs	r0, #1
    }
  }
  else
    used = false;
  return used;
}
    610a:	b002      	add	sp, #8
    610c:	ecbd 8b02 	vpop	{d8}
    6110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (strncmp(buf, "licw", 4) == 0)
    6114:	2204      	movs	r2, #4
    6116:	497f      	ldr	r1, [pc, #508]	; (6314 <ULineSensor::decode(char const*)+0x294>)
    6118:	4620      	mov	r0, r4
    611a:	f015 fe03 	bl	1bd24 <strncmp>
    611e:	2800      	cmp	r0, #0
    6120:	d078      	beq.n	6214 <ULineSensor::decode(char const*)+0x194>
  else if (strncmp(buf, "litb ", 5) == 0 and strlen(buf) > 19)
    6122:	2205      	movs	r2, #5
    6124:	497c      	ldr	r1, [pc, #496]	; (6318 <ULineSensor::decode(char const*)+0x298>)
    6126:	4620      	mov	r0, r4
    6128:	f015 fdfc 	bl	1bd24 <strncmp>
    612c:	bb80      	cbnz	r0, 6190 <ULineSensor::decode(char const*)+0x110>
    612e:	4620      	mov	r0, r4
    6130:	f017 f8c6 	bl	1d2c0 <strlen>
    6134:	2813      	cmp	r0, #19
    6136:	d92b      	bls.n	6190 <ULineSensor::decode(char const*)+0x110>
    const char * p1 = &buf[5];
    6138:	1d60      	adds	r0, r4, #5
    613a:	f105 0760 	add.w	r7, r5, #96	; 0x60
    613e:	f105 043e 	add.w	r4, r5, #62	; 0x3e
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6142:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
    6146:	354e      	adds	r5, #78	; 0x4e
    6148:	ae01      	add	r6, sp, #4
    const char * p1 = &buf[5];
    614a:	9001      	str	r0, [sp, #4]
    for (int i = 0; i < 8; i++)
    614c:	e000      	b.n	6150 <ULineSensor::decode(char const*)+0xd0>
      int16_t v = strtol(p1, (char **)&p1, 10);
    614e:	9801      	ldr	r0, [sp, #4]
    6150:	220a      	movs	r2, #10
    6152:	4631      	mov	r1, r6
    6154:	f015 f93e 	bl	1b3d4 <strtol>
      if (whiteLevel[i] == v)
    6158:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
    615c:	b200      	sxth	r0, r0
    615e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6162:	4298      	cmp	r0, r3
    6164:	d101      	bne.n	616a <ULineSensor::decode(char const*)+0xea>
        v--;
    6166:	3801      	subs	r0, #1
    6168:	b200      	sxth	r0, r0
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    616a:	1a1b      	subs	r3, r3, r0
    for (int i = 0; i < 8; i++)
    616c:	42a5      	cmp	r5, r4
      blackLevel[i] = v;
    616e:	8220      	strh	r0, [r4, #16]
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6170:	ee07 3a90 	vmov	s15, r3
    6174:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6178:	ee88 6b07 	vdiv.f64	d6, d8, d7
    617c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    6180:	eca7 6a01 	vstmia	r7!, {s12}
    for (int i = 0; i < 8; i++)
    6184:	d1e3      	bne.n	614e <ULineSensor::decode(char const*)+0xce>
    usb.send("# ULineSensor:: black level set from values\n");
    6186:	4965      	ldr	r1, [pc, #404]	; (631c <ULineSensor::decode(char const*)+0x29c>)
    6188:	4861      	ldr	r0, [pc, #388]	; (6310 <ULineSensor::decode(char const*)+0x290>)
    618a:	f006 fa3f 	bl	c60c <UUSB::send(char const*)>
    618e:	e03b      	b.n	6208 <ULineSensor::decode(char const*)+0x188>
  else if (strncmp(buf, "licb", 4) == 0)
    6190:	2204      	movs	r2, #4
    6192:	4963      	ldr	r1, [pc, #396]	; (6320 <ULineSensor::decode(char const*)+0x2a0>)
    6194:	4620      	mov	r0, r4
    6196:	f015 fdc5 	bl	1bd24 <strncmp>
    619a:	2800      	cmp	r0, #0
    619c:	d14b      	bne.n	6236 <ULineSensor::decode(char const*)+0x1b6>
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    619e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    61a2:	f105 013e 	add.w	r1, r5, #62	; 0x3e
    61a6:	f105 0460 	add.w	r4, r5, #96	; 0x60
    61aa:	485e      	ldr	r0, [pc, #376]	; (6324 <ULineSensor::decode(char const*)+0x2a4>)
    61ac:	354e      	adds	r5, #78	; 0x4e
      int16_t v = ad.adcLSH[i] - ad.adcLSL[i];
    61ae:	8a43      	ldrh	r3, [r0, #18]
    61b0:	f830 2f02 	ldrh.w	r2, [r0, #2]!
    61b4:	1a9b      	subs	r3, r3, r2
      if (whiteLevel[i] == v)
    61b6:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
    61ba:	b21b      	sxth	r3, r3
    61bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    61c0:	4293      	cmp	r3, r2
    61c2:	d101      	bne.n	61c8 <ULineSensor::decode(char const*)+0x148>
        v--;
    61c4:	3b01      	subs	r3, #1
    61c6:	b21b      	sxth	r3, r3
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    61c8:	1ad2      	subs	r2, r2, r3
    for (int i = 0; i < 8; i++)
    61ca:	42a9      	cmp	r1, r5
      blackLevel[i] = v;
    61cc:	820b      	strh	r3, [r1, #16]
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    61ce:	ee07 2a90 	vmov	s15, r2
    61d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    61d6:	ee85 6b07 	vdiv.f64	d6, d5, d7
    61da:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    61de:	eca4 6a01 	vstmia	r4!, {s12}
    for (int i = 0; i < 8; i++)
    61e2:	d1e4      	bne.n	61ae <ULineSensor::decode(char const*)+0x12e>
    61e4:	e010      	b.n	6208 <ULineSensor::decode(char const*)+0x188>
    char * p1 = (char *)&buf[4];
    61e6:	1d20      	adds	r0, r4, #4
    lineSensorOn = strtol(p1, &p1, 10);
    61e8:	220a      	movs	r2, #10
    61ea:	a901      	add	r1, sp, #4
    char * p1 = (char *)&buf[4];
    61ec:	9001      	str	r0, [sp, #4]
    lineSensorOn = strtol(p1, &p1, 10);
    61ee:	f015 f8f1 	bl	1b3d4 <strtol>
    61f2:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    61f4:	9c01      	ldr	r4, [sp, #4]
    lineSensorOn = strtol(p1, &p1, 10);
    61f6:	bf18      	it	ne
    61f8:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    61fa:	4620      	mov	r0, r4
    lineSensorOn = strtol(p1, &p1, 10);
    61fc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if (strlen(p1) > 2)
    6200:	f017 f85e 	bl	1d2c0 <strlen>
    6204:	2802      	cmp	r0, #2
    6206:	d81c      	bhi.n	6242 <ULineSensor::decode(char const*)+0x1c2>
  bool used = true;
    6208:	2001      	movs	r0, #1
}
    620a:	b002      	add	sp, #8
    620c:	ecbd 8b02 	vpop	{d8}
    6210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int n = strtol(p1, nullptr, 10);
    6214:	4601      	mov	r1, r0
    6216:	220a      	movs	r2, #10
    6218:	1d20      	adds	r0, r4, #4
    621a:	f015 f8db 	bl	1b3d4 <strtol>
    621e:	4603      	mov	r3, r0
  bool used = true;
    6220:	2001      	movs	r0, #1
      n = 10;
    6222:	2b00      	cmp	r3, #0
    6224:	bf08      	it	eq
    6226:	230a      	moveq	r3, #10
      calibrateWhite = n;
    6228:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
}
    622c:	b002      	add	sp, #8
    622e:	ecbd 8b02 	vpop	{d8}
    6232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    used = false;
    6236:	2000      	movs	r0, #0
}
    6238:	b002      	add	sp, #8
    623a:	ecbd 8b02 	vpop	{d8}
    623e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      lsIsWhite = strtol(p1, &p1, 10);
    6242:	220a      	movs	r2, #10
    6244:	a901      	add	r1, sp, #4
    6246:	4620      	mov	r0, r4
    6248:	f015 f8c4 	bl	1b3d4 <strtol>
    624c:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    624e:	9c01      	ldr	r4, [sp, #4]
      lsIsWhite = strtol(p1, &p1, 10);
    6250:	bf18      	it	ne
    6252:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    6254:	4620      	mov	r0, r4
      lsIsWhite = strtol(p1, &p1, 10);
    6256:	752b      	strb	r3, [r5, #20]
    if (strlen(p1) > 2)
    6258:	f017 f832 	bl	1d2c0 <strlen>
    625c:	2802      	cmp	r0, #2
    625e:	d9d3      	bls.n	6208 <ULineSensor::decode(char const*)+0x188>
      lsPowerHigh = strtol(p1, &p1, 10);
    6260:	220a      	movs	r2, #10
    6262:	a901      	add	r1, sp, #4
    6264:	4620      	mov	r0, r4
    6266:	f015 f8b5 	bl	1b3d4 <strtol>
    626a:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    626c:	9c01      	ldr	r4, [sp, #4]
      lsPowerHigh = strtol(p1, &p1, 10);
    626e:	bf18      	it	ne
    6270:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    6272:	4620      	mov	r0, r4
      lsPowerHigh = strtol(p1, &p1, 10);
    6274:	756b      	strb	r3, [r5, #21]
    if (strlen(p1) > 2)
    6276:	f017 f823 	bl	1d2c0 <strlen>
    627a:	2802      	cmp	r0, #2
    627c:	d9c4      	bls.n	6208 <ULineSensor::decode(char const*)+0x188>
      lsTiltCompensate = strtol(p1, &p1, 10);
    627e:	220a      	movs	r2, #10
    6280:	a901      	add	r1, sp, #4
    6282:	4620      	mov	r0, r4
    6284:	f015 f8a6 	bl	1b3d4 <strtol>
    6288:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    628a:	9c01      	ldr	r4, [sp, #4]
      lsTiltCompensate = strtol(p1, &p1, 10);
    628c:	bf18      	it	ne
    628e:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    6290:	4620      	mov	r0, r4
      lsTiltCompensate = strtol(p1, &p1, 10);
    6292:	75ab      	strb	r3, [r5, #22]
    if (strlen(p1) > 2)
    6294:	f017 f814 	bl	1d2c0 <strlen>
    6298:	2802      	cmp	r0, #2
    629a:	d9b5      	bls.n	6208 <ULineSensor::decode(char const*)+0x188>
      wideSensor = strtol(p1, &p1, 10);
    629c:	220a      	movs	r2, #10
    629e:	a901      	add	r1, sp, #4
    62a0:	4620      	mov	r0, r4
    62a2:	f015 f897 	bl	1b3d4 <strtol>
    62a6:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    62a8:	9c01      	ldr	r4, [sp, #4]
      wideSensor = strtol(p1, &p1, 10);
    62aa:	bf18      	it	ne
    62ac:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    62ae:	4620      	mov	r0, r4
      wideSensor = strtol(p1, &p1, 10);
    62b0:	f885 3101 	strb.w	r3, [r5, #257]	; 0x101
    if (strlen(p1) > 2)
    62b4:	f017 f804 	bl	1d2c0 <strlen>
    62b8:	2802      	cmp	r0, #2
    62ba:	d9a5      	bls.n	6208 <ULineSensor::decode(char const*)+0x188>
      swapLeftRight = strtol(p1, &p1, 10);
    62bc:	220a      	movs	r2, #10
    62be:	a901      	add	r1, sp, #4
    62c0:	4620      	mov	r0, r4
    62c2:	f015 f887 	bl	1b3d4 <strtol>
    62c6:	1e03      	subs	r3, r0, #0
    if (strlen(p1) > 2)
    62c8:	9c01      	ldr	r4, [sp, #4]
      swapLeftRight = strtol(p1, &p1, 10);
    62ca:	bf18      	it	ne
    62cc:	2301      	movne	r3, #1
    if (strlen(p1) > 2)
    62ce:	4620      	mov	r0, r4
      swapLeftRight = strtol(p1, &p1, 10);
    62d0:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
    if (strlen(p1) > 2)
    62d4:	f016 fff4 	bl	1d2c0 <strlen>
    62d8:	2802      	cmp	r0, #2
    62da:	d995      	bls.n	6208 <ULineSensor::decode(char const*)+0x188>
      lineValidThreshold = strtof(p1, &p1);
    62dc:	4620      	mov	r0, r4
    62de:	a901      	add	r1, sp, #4
    62e0:	f014 ff74 	bl	1b1cc <strtof>
    if (strlen(p1) > 2)
    62e4:	9c01      	ldr	r4, [sp, #4]
      lineValidThreshold = strtof(p1, &p1);
    62e6:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    if (strlen(p1) > 2)
    62ea:	4620      	mov	r0, r4
    62ec:	f016 ffe8 	bl	1d2c0 <strlen>
    62f0:	2802      	cmp	r0, #2
    62f2:	d989      	bls.n	6208 <ULineSensor::decode(char const*)+0x188>
      crossingThreshold = strtof(p1, &p1);
    62f4:	a901      	add	r1, sp, #4
    62f6:	4620      	mov	r0, r4
    62f8:	f014 ff68 	bl	1b1cc <strtof>
    62fc:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    6300:	e782      	b.n	6208 <ULineSensor::decode(char const*)+0x188>
    6302:	bf00      	nop
    6304:	20003698 	.word	0x20003698
    6308:	200036a0 	.word	0x200036a0
    630c:	200036a8 	.word	0x200036a8
    6310:	2000fac4 	.word	0x2000fac4
    6314:	200036d8 	.word	0x200036d8
    6318:	200036e0 	.word	0x200036e0
    631c:	200036e8 	.word	0x200036e8
    6320:	20003718 	.word	0x20003718
    6324:	2000e8be 	.word	0x2000e8be

00006328 <ULineSensor::sendHelp()>:


void ULineSensor::sendHelp()
{
    6328:	b510      	push	{r4, lr}
//   const int MRL = 150;
//   char reply[MRL];
  usb.send("# Line sensor -------\r\n");
    632a:	4c0d      	ldr	r4, [pc, #52]	; (6360 <ULineSensor::sendHelp()+0x38>)
    632c:	490d      	ldr	r1, [pc, #52]	; (6364 <ULineSensor::sendHelp()+0x3c>)
    632e:	4620      	mov	r0, r4
    6330:	f006 f96c 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlip p [w h t wi s lth xth] \tSettings: p=on, w=white, h=high power, t=tilt comp, wi=wide, s=swap, lth=line thresh (0..1), xth=cross_th (0..1), all but first parameter are optional.\r\n");
    6334:	490c      	ldr	r1, [pc, #48]	; (6368 <ULineSensor::sendHelp()+0x40>)
    6336:	4620      	mov	r0, r4
    6338:	f006 f968 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlicw N\tUse current value as white, average over N samples\r\n");
    633c:	490b      	ldr	r1, [pc, #44]	; (636c <ULineSensor::sendHelp()+0x44>)
    633e:	4620      	mov	r0, r4
    6340:	f006 f964 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlicb \tUse current value as black (should be zero)\r\n");
    6344:	490a      	ldr	r1, [pc, #40]	; (6370 <ULineSensor::sendHelp()+0x48>)
    6346:	4620      	mov	r0, r4
    6348:	f006 f960 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlitw w w w w w w w w \tUse these values as white\r\n");
    634c:	4909      	ldr	r1, [pc, #36]	; (6374 <ULineSensor::sendHelp()+0x4c>)
    634e:	4620      	mov	r0, r4
    6350:	f006 f95c 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlitb b b b b b b b b \tUse these values as black (should be zero)\r\n");
    6354:	4620      	mov	r0, r4
    6356:	4908      	ldr	r1, [pc, #32]	; (6378 <ULineSensor::sendHelp()+0x50>)
}
    6358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tlitb b b b b b b b b \tUse these values as black (should be zero)\r\n");
    635c:	f006 b956 	b.w	c60c <UUSB::send(char const*)>
    6360:	2000fac4 	.word	0x2000fac4
    6364:	20003738 	.word	0x20003738
    6368:	20003750 	.word	0x20003750
    636c:	2000380c 	.word	0x2000380c
    6370:	20003850 	.word	0x20003850
    6374:	2000388c 	.word	0x2000388c
    6378:	200038c4 	.word	0x200038c4

0000637c <ULineSensor::~ULineSensor()>:
#ifndef ULINESENSOR_H
#define ULINESENSOR_H

#include "usubss.h"

class ULineSensor : public USubss
    637c:	b510      	push	{r4, lr}
    637e:	4b05      	ldr	r3, [pc, #20]	; (6394 <ULineSensor::~ULineSensor()+0x18>)
    6380:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    6382:	6840      	ldr	r0, [r0, #4]
    6384:	6023      	str	r3, [r4, #0]
	if (__p)
    6386:	b118      	cbz	r0, 6390 <ULineSensor::~ULineSensor()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6388:	68e1      	ldr	r1, [r4, #12]
    638a:	1a09      	subs	r1, r1, r0
    638c:	f010 fa26 	bl	167dc <operator delete(void*, unsigned int)>
    6390:	4620      	mov	r0, r4
    6392:	bd10      	pop	{r4, pc}
    6394:	200080a0 	.word	0x200080a0

00006398 <ULineSensor::setup()>:
{
    6398:	b538      	push	{r3, r4, r5, lr}
    639a:	4604      	mov	r4, r0
  highPowerPin = PIN_LINE_LED_HIGH; // can be changed by HW config load (eePromLoadLinesensor)
    639c:	2322      	movs	r3, #34	; 0x22
  pinModeLed = OUTPUT; // switch to input for half power
    639e:	2501      	movs	r5, #1
  pinMode ( highPowerPin, OUTPUT ); // line sensor LED full power
    63a0:	4618      	mov	r0, r3
  highPowerPin = PIN_LINE_LED_HIGH; // can be changed by HW config load (eePromLoadLinesensor)
    63a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  pinMode ( highPowerPin, OUTPUT ); // line sensor LED full power
    63a6:	4629      	mov	r1, r5
  pinModeLed = OUTPUT; // switch to input for half power
    63a8:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
  pinMode ( highPowerPin, OUTPUT ); // line sensor LED full power
    63ac:	f00f fe62 	bl	16074 <pinMode>
  pinMode ( PIN_LINE_LED_LOW, OUTPUT ); // LED line sensor - half power (HW3)
    63b0:	4629      	mov	r1, r5
    63b2:	2021      	movs	r0, #33	; 0x21
    63b4:	f00f fe5e 	bl	16074 <pinMode>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    63b8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    63bc:	4a19      	ldr	r2, [pc, #100]	; (6424 <ULineSensor::setup()+0x8c>)
  lineSensorOn = false;
    63be:	2000      	movs	r0, #0
    63c0:	0119      	lsls	r1, r3, #4
    63c2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    63c6:	5851      	ldr	r1, [r2, r1]
    63c8:	68db      	ldr	r3, [r3, #12]
  addPublistItem("liv", "Get line-sensor raw AD value 'liv ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8'");
    63ca:	4a17      	ldr	r2, [pc, #92]	; (6428 <ULineSensor::setup()+0x90>)
  lineSensorOn = false;
    63cc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  addPublistItem("liv", "Get line-sensor raw AD value 'liv ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8'");
    63d0:	4620      	mov	r0, r4
    63d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    63d6:	4915      	ldr	r1, [pc, #84]	; (642c <ULineSensor::setup()+0x94>)
    63d8:	f006 f84a 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("liw", "Get line-sensor white (AD) level 'liw w1 w2 w3 w4 w5 w6 w7 w8'");
    63dc:	4620      	mov	r0, r4
    63de:	4a14      	ldr	r2, [pc, #80]	; (6430 <ULineSensor::setup()+0x98>)
    63e0:	4914      	ldr	r1, [pc, #80]	; (6434 <ULineSensor::setup()+0x9c>)
    63e2:	f006 f845 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lib", "Get line-sensor black (AD) level 'lib b1 b2 b3 b4 b5 b6 b7 b8'");
    63e6:	4620      	mov	r0, r4
    63e8:	4a13      	ldr	r2, [pc, #76]	; (6438 <ULineSensor::setup()+0xa0>)
    63ea:	4914      	ldr	r1, [pc, #80]	; (643c <ULineSensor::setup()+0xa4>)
    63ec:	f006 f840 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lig", "Get line-sensor channel gain 'lig g1 g2 g3 g4 g5 g6 g7 g8'");
    63f0:	4620      	mov	r0, r4
    63f2:	4a13      	ldr	r2, [pc, #76]	; (6440 <ULineSensor::setup()+0xa8>)
    63f4:	4913      	ldr	r1, [pc, #76]	; (6444 <ULineSensor::setup()+0xac>)
    63f6:	f006 f83b 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("livn", "Get line-sensor normalized value 'livn ls1 ls2 ls3 ls4 ls5 ls6 ls7 ls8' values x 1000");
    63fa:	4620      	mov	r0, r4
    63fc:	4a12      	ldr	r2, [pc, #72]	; (6448 <ULineSensor::setup()+0xb0>)
    63fe:	4913      	ldr	r1, [pc, #76]	; (644c <ULineSensor::setup()+0xb4>)
    6400:	f006 f836 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lis", "Get line-sensor settings 'lis on white high tilt crossTh wide swap'");
    6404:	4620      	mov	r0, r4
    6406:	4a12      	ldr	r2, [pc, #72]	; (6450 <ULineSensor::setup()+0xb8>)
    6408:	4912      	ldr	r1, [pc, #72]	; (6454 <ULineSensor::setup()+0xbc>)
    640a:	f006 f831 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lip", "Get line-sensor position 'lip left right valid validCnt crossing crossingCnt'");
    640e:	4620      	mov	r0, r4
    6410:	4911      	ldr	r1, [pc, #68]	; (6458 <ULineSensor::setup()+0xc0>)
    6412:	4a12      	ldr	r2, [pc, #72]	; (645c <ULineSensor::setup()+0xc4>)
    6414:	f006 f82c 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    6418:	4621      	mov	r1, r4
    641a:	4811      	ldr	r0, [pc, #68]	; (6460 <ULineSensor::setup()+0xc8>)
}
    641c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    6420:	f006 bd38 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    6424:	200081bc 	.word	0x200081bc
    6428:	2000348c 	.word	0x2000348c
    642c:	200034d0 	.word	0x200034d0
    6430:	200034d4 	.word	0x200034d4
    6434:	20003514 	.word	0x20003514
    6438:	20003518 	.word	0x20003518
    643c:	20003558 	.word	0x20003558
    6440:	2000355c 	.word	0x2000355c
    6444:	20003598 	.word	0x20003598
    6448:	2000359c 	.word	0x2000359c
    644c:	200035f4 	.word	0x200035f4
    6450:	200035fc 	.word	0x200035fc
    6454:	20003640 	.word	0x20003640
    6458:	20003694 	.word	0x20003694
    645c:	20003644 	.word	0x20003644
    6460:	2000fac4 	.word	0x2000fac4
    6464:	00000000 	.word	0x00000000

00006468 <ULineSensor::lineDetect()>:
void ULineSensor::lineDetect()
{
  float sum = 0;
  float posSum = 0;
  float low = 2.0;
  float high = 0.0;
    6468:	ed9f 7a57 	vldr	s14, [pc, #348]	; 65c8 <ULineSensor::lineDetect()+0x160>
    646c:	f100 0288 	add.w	r2, r0, #136	; 0x88
    6470:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
  float sum = 0;
    6474:	eef0 6a47 	vmov.f32	s13, s14
{
    6478:	4613      	mov	r3, r2
  // # find levels (and average)
  // # using normalised readings (0.0 (no reflection) to 1.0 (calibrated white)))
  for (int i = 0; i < 8; i++)
  {
    sum += lineSensorValue[i]; // for average
    647a:	ecf3 7a01 	vldmia	r3!, {s15}
    if (lineSensorValue[i] > high)
      high = lineSensorValue[i]; // # most bright value (like line)
    647e:	eef4 7a47 	vcmp.f32	s15, s14
    sum += lineSensorValue[i]; // for average
    6482:	ee76 6aa7 	vadd.f32	s13, s13, s15
      high = lineSensorValue[i]; // # most bright value (like line)
    6486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    648a:	fe37 7a87 	vselgt.f32	s14, s15, s14
  for (int i = 0; i < 8; i++)
    648e:	4299      	cmp	r1, r3
    6490:	d1f3      	bne.n	647a <ULineSensor::lineDetect()+0x12>
  }
  reflectAverage = sum / 8.0;
    6492:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
  // use average for crossing detect
  crossing = reflectAverage >= crossingThreshold;
    6496:	ed90 3a0b 	vldr	s6, [r0, #44]	; 0x2c
  // use high for line valid
  lineValid = high >= lineValidThreshold;
    649a:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
  // # find line position
  // # using COG method from lowest value
  sum = 0;
  // discard anything below this value
  low = lineValidThreshold - 0.1;
    649e:	2301      	movs	r3, #1
  float posSum = 0;
    64a0:	ed9f 4a49 	vldr	s8, [pc, #292]	; 65c8 <ULineSensor::lineDetect()+0x160>
  reflectAverage = sum / 8.0;
    64a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
  low = lineValidThreshold - 0.1;
    64a8:	eeb7 5ae3 	vcvt.f64.f32	d5, s7
  sum = 0;
    64ac:	eef0 4a44 	vmov.f32	s9, s8
  crossing = reflectAverage >= crossingThreshold;
    64b0:	eef4 6ac3 	vcmpe.f32	s13, s6
  reflectAverage = sum / 8.0;
    64b4:	edc0 6a0e 	vstr	s13, [r0, #56]	; 0x38
  low = lineValidThreshold - 0.1;
    64b8:	ed9f 2b41 	vldr	d2, [pc, #260]	; 65c0 <ULineSensor::lineDetect()+0x158>
  crossing = reflectAverage >= crossingThreshold;
    64bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  lineValid = high >= lineValidThreshold;
    64c0:	eef4 3ac7 	vcmpe.f32	s7, s14
  low = lineValidThreshold - 0.1;
    64c4:	ee35 5b42 	vsub.f64	d5, d5, d2
  crossing = reflectAverage >= crossingThreshold;
    64c8:	bfac      	ite	ge
    64ca:	4619      	movge	r1, r3
    64cc:	2100      	movlt	r1, #0
  lineValid = high >= lineValidThreshold;
    64ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  low = lineValidThreshold - 0.1;
    64d2:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  crossing = reflectAverage >= crossingThreshold;
    64d6:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
  lineValid = high >= lineValidThreshold;
    64da:	bf94      	ite	ls
    64dc:	4619      	movls	r1, r3
    64de:	2100      	movhi	r1, #0
    64e0:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
  for (int i = 0; i < 8; i++)
  {
    float v = lineSensorValue[i] - low;
    64e4:	ecf2 7a01 	vldmia	r2!, {s15}
    64e8:	ee77 7ac5 	vsub.f32	s15, s15, s10
    if (v > 0)
    64ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    64f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    64f4:	dd07      	ble.n	6506 <ULineSensor::lineDetect()+0x9e>
    { // probably a line
      sum += v;
      posSum += (i+1) * v;
    64f6:	ee06 3a10 	vmov	s12, r3
      sum += v;
    64fa:	ee74 4aa7 	vadd.f32	s9, s9, s15
      posSum += (i+1) * v;
    64fe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    6502:	eea6 4a27 	vfma.f32	s8, s12, s15
  for (int i = 0; i < 8; i++)
    6506:	3301      	adds	r3, #1
    6508:	2b09      	cmp	r3, #9
    650a:	d1eb      	bne.n	64e4 <ULineSensor::lineDetect()+0x7c>
    }
  }
  if (sum > 0 and lineValidCnt > 0)
    650c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
    6510:	2200      	movs	r2, #0
    6512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6516:	dd3d      	ble.n	6594 <ULineSensor::lineDetect()+0x12c>
    6518:	f990 3021 	ldrsb.w	r3, [r0, #33]	; 0x21
    651c:	2b00      	cmp	r3, #0
    651e:	dd21      	ble.n	6564 <ULineSensor::lineDetect()+0xfc>
  { // get COG for line part.
    linePosition = posSum/sum - 4.5;
    6520:	eec4 7a24 	vdiv.f32	s15, s8, s9
    6524:	eeb1 6a02 	vmov.f32	s12, #18	; 0x40900000  4.5
    linePosition = 0;
  //
  // make compatible with logging and old code
  lsLeftSide = linePosition;
  lsRightSide = linePosition;
  if (lineValid and lineValidCnt < 20)
    6528:	eef4 3ac7 	vcmpe.f32	s7, s14
    652c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    linePosition = posSum/sum - 4.5;
    6530:	ee77 7ac6 	vsub.f32	s15, s15, s12
    6534:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
  lsLeftSide = linePosition;
    6538:	edc0 7a06 	vstr	s15, [r0, #24]
  lsRightSide = linePosition;
    653c:	edc0 7a07 	vstr	s15, [r0, #28]
  if (lineValid and lineValidCnt < 20)
    6540:	d834      	bhi.n	65ac <ULineSensor::lineDetect()+0x144>
    6542:	2b13      	cmp	r3, #19
    6544:	dd16      	ble.n	6574 <ULineSensor::lineDetect()+0x10c>
    if (lineValidCnt > 0)
      lineValidCnt --;
    else
      lineValidCnt = 0;
  }
  if (crossing and crossingLineCnt < 20)
    6546:	eef4 6ac3 	vcmpe.f32	s13, s6
    654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    654e:	da19      	bge.n	6584 <ULineSensor::lineDetect()+0x11c>
    crossingLineCnt++;
  else if (not crossing)
  {
    crossingLineCnt --;
    6550:	f890 3020 	ldrb.w	r3, [r0, #32]
    6554:	3b01      	subs	r3, #1
    6556:	b25b      	sxtb	r3, r3
    if (crossingLineCnt < 0)
    6558:	2b00      	cmp	r3, #0
      crossingLineCnt = 0;
    655a:	bfb8      	it	lt
    655c:	2300      	movlt	r3, #0
    655e:	f880 3020 	strb.w	r3, [r0, #32]
  }
}
    6562:	4770      	bx	lr
  if (lineValid and lineValidCnt < 20)
    6564:	eef4 3ac7 	vcmpe.f32	s7, s14
    6568:	6242      	str	r2, [r0, #36]	; 0x24
  lsLeftSide = linePosition;
    656a:	6182      	str	r2, [r0, #24]
  lsRightSide = linePosition;
    656c:	61c2      	str	r2, [r0, #28]
  if (lineValid and lineValidCnt < 20)
    656e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6572:	d820      	bhi.n	65b6 <ULineSensor::lineDetect()+0x14e>
  if (crossing and crossingLineCnt < 20)
    6574:	eef4 6ac3 	vcmpe.f32	s13, s6
    lineValidCnt++;
    6578:	3301      	adds	r3, #1
    657a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if (crossing and crossingLineCnt < 20)
    657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6582:	dbe5      	blt.n	6550 <ULineSensor::lineDetect()+0xe8>
    6584:	f990 3020 	ldrsb.w	r3, [r0, #32]
    6588:	2b13      	cmp	r3, #19
    658a:	dc13      	bgt.n	65b4 <ULineSensor::lineDetect()+0x14c>
    crossingLineCnt++;
    658c:	3301      	adds	r3, #1
    658e:	f880 3020 	strb.w	r3, [r0, #32]
    6592:	4770      	bx	lr
  if (lineValid and lineValidCnt < 20)
    6594:	eef4 3ac7 	vcmpe.f32	s7, s14
  if (sum > 0 and lineValidCnt > 0)
    6598:	f990 3021 	ldrsb.w	r3, [r0, #33]	; 0x21
    659c:	6242      	str	r2, [r0, #36]	; 0x24
  lsLeftSide = linePosition;
    659e:	6182      	str	r2, [r0, #24]
  if (lineValid and lineValidCnt < 20)
    65a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  lsRightSide = linePosition;
    65a4:	61c2      	str	r2, [r0, #28]
  if (lineValid and lineValidCnt < 20)
    65a6:	d9cc      	bls.n	6542 <ULineSensor::lineDetect()+0xda>
    if (lineValidCnt > 0)
    65a8:	2b00      	cmp	r3, #0
    65aa:	dd04      	ble.n	65b6 <ULineSensor::lineDetect()+0x14e>
      lineValidCnt --;
    65ac:	3b01      	subs	r3, #1
    65ae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    65b2:	e7c8      	b.n	6546 <ULineSensor::lineDetect()+0xde>
}
    65b4:	4770      	bx	lr
      lineValidCnt = 0;
    65b6:	2300      	movs	r3, #0
    65b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    65bc:	e7c3      	b.n	6546 <ULineSensor::lineDetect()+0xde>
    65be:	bf00      	nop
    65c0:	9999999a 	.word	0x9999999a
    65c4:	3fb99999 	.word	0x3fb99999
    65c8:	00000000 	.word	0x00000000

000065cc <ULineSensor::calibrateWhiteNow()>:


void ULineSensor::calibrateWhiteNow()
{
  if (calibrateWhite <= 0 or lineSensorOnCnt > 0)
    65cc:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    65d0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    65d4:	2a00      	cmp	r2, #0
{
    65d6:	b570      	push	{r4, r5, r6, lr}
    65d8:	4604      	mov	r4, r0
    65da:	b0ba      	sub	sp, #232	; 0xe8
  if (calibrateWhite <= 0 or lineSensorOnCnt > 0)
    65dc:	dd1b      	ble.n	6616 <ULineSensor::calibrateWhiteNow()+0x4a>
    65de:	2b00      	cmp	r3, #0
    65e0:	dc19      	bgt.n	6616 <ULineSensor::calibrateWhiteNow()+0x4a>
  { // no calibration or just turned on
    // wait a bit after turn on
    lineSensorOnCnt--;
    return;
  }
  if (calibrateWhiteSumCnt < calibrateWhite)
    65e2:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    65e6:	429a      	cmp	r2, r3
    65e8:	dd1a      	ble.n	6620 <ULineSensor::calibrateWhiteNow()+0x54>
    65ea:	f500 7282 	add.w	r2, r0, #260	; 0x104
    65ee:	4d28      	ldr	r5, [pc, #160]	; (6690 <ULineSensor::calibrateWhiteNow()+0xc4>)
    65f0:	f500 7692 	add.w	r6, r0, #292	; 0x124
  {
    for (int i = 0; i < 8; i++)
    { // sum value from this measurement
      calibrateWhiteSum[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    65f4:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
    65f8:	f935 cf02 	ldrsh.w	ip, [r5, #2]!
    65fc:	f852 1f04 	ldr.w	r1, [r2, #4]!
    6600:	eba0 000c 	sub.w	r0, r0, ip
    for (int i = 0; i < 8; i++)
    6604:	4296      	cmp	r6, r2
      calibrateWhiteSum[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    6606:	4401      	add	r1, r0
    6608:	6011      	str	r1, [r2, #0]
    for (int i = 0; i < 8; i++)
    660a:	d1f3      	bne.n	65f4 <ULineSensor::calibrateWhiteNow()+0x28>
    }
    calibrateWhiteSumCnt++;
    660c:	3301      	adds	r3, #1
    660e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    snprintf(s, MSL, "# ULineSensor::calibrateWhiteNow: set white from %d measurements\n", calibrateWhiteSumCnt);
    usb.send(s);
    calibrateWhiteSumCnt = 0;
    calibrateWhite = 0;
  }
}
    6612:	b03a      	add	sp, #232	; 0xe8
    6614:	bd70      	pop	{r4, r5, r6, pc}
    lineSensorOnCnt--;
    6616:	3b01      	subs	r3, #1
    6618:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
}
    661c:	b03a      	add	sp, #232	; 0xe8
    661e:	bd70      	pop	{r4, r5, r6, pc}
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6620:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    6624:	303e      	adds	r0, #62	; 0x3e
    6626:	f504 7182 	add.w	r1, r4, #260	; 0x104
    662a:	f504 7e92 	add.w	lr, r4, #292	; 0x124
      calibrateWhiteSum[i] = 0; // reset
    662e:	2600      	movs	r6, #0
      whiteLevel[i] = calibrateWhiteSum[i]/calibrateWhiteSumCnt;
    6630:	f851 2f04 	ldr.w	r2, [r1, #4]!
    6634:	fb92 fcf3 	sdiv	ip, r2, r3
    6638:	fa0f f28c 	sxth.w	r2, ip
    663c:	f820 2f02 	strh.w	r2, [r0, #2]!
      if (whiteLevel[i] == blackLevel[i])
    6640:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
      calibrateWhiteSum[i] = 0; // reset
    6644:	600e      	str	r6, [r1, #0]
      if (whiteLevel[i] == blackLevel[i])
    6646:	42aa      	cmp	r2, r5
    6648:	d104      	bne.n	6654 <ULineSensor::calibrateWhiteNow()+0x88>
        whiteLevel[i]++; // avoid divide by zero
    664a:	f10c 0c01 	add.w	ip, ip, #1
    664e:	fa0f f28c 	sxth.w	r2, ip
    6652:	8002      	strh	r2, [r0, #0]
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6654:	1b52      	subs	r2, r2, r5
    for (int i = 0; i < 8; i++)
    6656:	4571      	cmp	r1, lr
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6658:	ee07 2a90 	vmov	s15, r2
    665c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6660:	ee85 6b07 	vdiv.f64	d6, d5, d7
    6664:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    6668:	ed01 6a2a 	vstr	s12, [r1, #-168]	; 0xffffff58
    for (int i = 0; i < 8; i++)
    666c:	d1e0      	bne.n	6630 <ULineSensor::calibrateWhiteNow()+0x64>
    snprintf(s, MSL, "# ULineSensor::calibrateWhiteNow: set white from %d measurements\n", calibrateWhiteSumCnt);
    666e:	4a09      	ldr	r2, [pc, #36]	; (6694 <ULineSensor::calibrateWhiteNow()+0xc8>)
    6670:	21e6      	movs	r1, #230	; 0xe6
    6672:	4668      	mov	r0, sp
    6674:	f015 f89e 	bl	1b7b4 <snprintf>
    usb.send(s);
    6678:	4669      	mov	r1, sp
    667a:	4807      	ldr	r0, [pc, #28]	; (6698 <ULineSensor::calibrateWhiteNow()+0xcc>)
    667c:	f005 ffc6 	bl	c60c <UUSB::send(char const*)>
    calibrateWhiteSumCnt = 0;
    6680:	2300      	movs	r3, #0
    6682:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    calibrateWhite = 0;
    6686:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
}
    668a:	b03a      	add	sp, #232	; 0xe8
    668c:	bd70      	pop	{r4, r5, r6, pc}
    668e:	bf00      	nop
    6690:	2000e8be 	.word	0x2000e8be
    6694:	20003358 	.word	0x20003358
    6698:	2000fac4 	.word	0x2000fac4

0000669c <ULineSensor::sendLineSensorStatus()>:
      break;
  }
}

void ULineSensor::sendLineSensorStatus()
{
    669c:	4603      	mov	r3, r0
  const int MRL = 150;
  char reply[MRL];
  snprintf(reply, MRL, "lis %d %d %d %d %d %d %.2f %.2f\r\n",
    669e:	4a13      	ldr	r2, [pc, #76]	; (66ec <ULineSensor::sendLineSensorStatus()+0x50>)
    66a0:	2196      	movs	r1, #150	; 0x96
    66a2:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
    66a6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
    66aa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    66ae:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    66b2:	b510      	push	{r4, lr}
    66b4:	b0b0      	sub	sp, #192	; 0xc0
  snprintf(reply, MRL, "lis %d %d %d %d %d %d %.2f %.2f\r\n",
    66b6:	ed8d 6b08 	vstr	d6, [sp, #32]
    66ba:	ed8d 7b06 	vstr	d7, [sp, #24]
    66be:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    66c2:	a80a      	add	r0, sp, #40	; 0x28
    66c4:	9404      	str	r4, [sp, #16]
    66c6:	f893 4101 	ldrb.w	r4, [r3, #257]	; 0x101
    66ca:	9403      	str	r4, [sp, #12]
    66cc:	7d9c      	ldrb	r4, [r3, #22]
    66ce:	9402      	str	r4, [sp, #8]
    66d0:	7d5c      	ldrb	r4, [r3, #21]
    66d2:	9401      	str	r4, [sp, #4]
    66d4:	7d1c      	ldrb	r4, [r3, #20]
    66d6:	9400      	str	r4, [sp, #0]
    66d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    66dc:	f015 f86a 	bl	1b7b4 <snprintf>
           lineSensorOn, 
           lsIsWhite,
           lsPowerHigh, lsTiltCompensate,
           wideSensor, swapLeftRight, lineValidThreshold, crossingThreshold
  );
  usb.send(reply);
    66e0:	a90a      	add	r1, sp, #40	; 0x28
    66e2:	4803      	ldr	r0, [pc, #12]	; (66f0 <ULineSensor::sendLineSensorStatus()+0x54>)
    66e4:	f005 ff92 	bl	c60c <UUSB::send(char const*)>
}
    66e8:	b030      	add	sp, #192	; 0xc0
    66ea:	bd10      	pop	{r4, pc}
    66ec:	200033bc 	.word	0x200033bc
    66f0:	2000fac4 	.word	0x2000fac4

000066f4 <ULineSensor::sendLineSensorPosition()>:

void ULineSensor::sendLineSensorPosition()
{
    66f4:	4603      	mov	r3, r0
  const int MRL = 150;
  char reply[MRL];
  snprintf(reply, MRL, "lip %.2f %.2f %d %d %d %d\r\n",
    66f6:	4a12      	ldr	r2, [pc, #72]	; (6740 <ULineSensor::sendLineSensorPosition()+0x4c>)
    66f8:	2196      	movs	r1, #150	; 0x96
    66fa:	ed93 6a07 	vldr	s12, [r3, #28]
    66fe:	ed93 7a06 	vldr	s14, [r3, #24]
    6702:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    6706:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    670a:	b510      	push	{r4, lr}
    670c:	b0ae      	sub	sp, #184	; 0xb8
  snprintf(reply, MRL, "lip %.2f %.2f %d %d %d %d\r\n",
    670e:	f993 4020 	ldrsb.w	r4, [r3, #32]
    6712:	ed8d 6b02 	vstr	d6, [sp, #8]
    6716:	ed8d 7b00 	vstr	d7, [sp]
    671a:	9407      	str	r4, [sp, #28]
    671c:	a808      	add	r0, sp, #32
    671e:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    6722:	9406      	str	r4, [sp, #24]
    6724:	f993 4021 	ldrsb.w	r4, [r3, #33]	; 0x21
    6728:	9405      	str	r4, [sp, #20]
    672a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    672e:	9304      	str	r3, [sp, #16]
    6730:	f015 f840 	bl	1b7b4 <snprintf>
           lsLeftSide, lsRightSide,
           lineValid, lineValidCnt,
           crossing, crossingLineCnt
  );
  usb.send(reply);
    6734:	a908      	add	r1, sp, #32
    6736:	4803      	ldr	r0, [pc, #12]	; (6744 <ULineSensor::sendLineSensorPosition()+0x50>)
    6738:	f005 ff68 	bl	c60c <UUSB::send(char const*)>
}
    673c:	b02e      	add	sp, #184	; 0xb8
    673e:	bd10      	pop	{r4, pc}
    6740:	20003430 	.word	0x20003430
    6744:	2000fac4 	.word	0x2000fac4

00006748 <ULineSensor::sendStatusLineSensorLimitsWhite()>:
//////////////////////////////////////////////

void ULineSensor::sendStatusLineSensorLimitsWhite()
{
    6748:	4603      	mov	r3, r0
  const int MRL = 70;
  char reply[MRL];
  snprintf(reply, MRL, "liw %d %d %d %d %d %d %d %d\r\n" ,
    674a:	4a12      	ldr	r2, [pc, #72]	; (6794 <ULineSensor::sendStatusLineSensorLimitsWhite()+0x4c>)
    674c:	2146      	movs	r1, #70	; 0x46
{
    674e:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "liw %d %d %d %d %d %d %d %d\r\n" ,
    6750:	f9b3 404e 	ldrsh.w	r4, [r3, #78]	; 0x4e
{
    6754:	b09a      	sub	sp, #104	; 0x68
  snprintf(reply, MRL, "liw %d %d %d %d %d %d %d %d\r\n" ,
    6756:	9406      	str	r4, [sp, #24]
    6758:	a808      	add	r0, sp, #32
    675a:	f9b3 404c 	ldrsh.w	r4, [r3, #76]	; 0x4c
    675e:	9405      	str	r4, [sp, #20]
    6760:	f9b3 404a 	ldrsh.w	r4, [r3, #74]	; 0x4a
    6764:	9404      	str	r4, [sp, #16]
    6766:	f9b3 4048 	ldrsh.w	r4, [r3, #72]	; 0x48
    676a:	9403      	str	r4, [sp, #12]
    676c:	f9b3 4046 	ldrsh.w	r4, [r3, #70]	; 0x46
    6770:	9402      	str	r4, [sp, #8]
    6772:	f9b3 4044 	ldrsh.w	r4, [r3, #68]	; 0x44
    6776:	9401      	str	r4, [sp, #4]
    6778:	f9b3 4042 	ldrsh.w	r4, [r3, #66]	; 0x42
    677c:	9400      	str	r4, [sp, #0]
    677e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
    6782:	f015 f817 	bl	1b7b4 <snprintf>
           whiteLevel[4],
           whiteLevel[5],
           whiteLevel[6],
           whiteLevel[7]
  );
  usb.send(reply);
    6786:	a908      	add	r1, sp, #32
    6788:	4803      	ldr	r0, [pc, #12]	; (6798 <ULineSensor::sendStatusLineSensorLimitsWhite()+0x50>)
    678a:	f005 ff3f 	bl	c60c <UUSB::send(char const*)>
}
    678e:	b01a      	add	sp, #104	; 0x68
    6790:	bd10      	pop	{r4, pc}
    6792:	bf00      	nop
    6794:	2000346c 	.word	0x2000346c
    6798:	2000fac4 	.word	0x2000fac4

0000679c <ULineSensor::sendStatusLineSensorLimitsBlack()>:

void ULineSensor::sendStatusLineSensorLimitsBlack()
{
    679c:	4603      	mov	r3, r0
  const int MRL = 70;
  char reply[MRL];
  snprintf(reply, MRL, "lib %d %d %d %d %d %d %d %d\r\n" ,
    679e:	4a12      	ldr	r2, [pc, #72]	; (67e8 <ULineSensor::sendStatusLineSensorLimitsBlack()+0x4c>)
    67a0:	2146      	movs	r1, #70	; 0x46
{
    67a2:	b510      	push	{r4, lr}
  snprintf(reply, MRL, "lib %d %d %d %d %d %d %d %d\r\n" ,
    67a4:	f9b3 405e 	ldrsh.w	r4, [r3, #94]	; 0x5e
{
    67a8:	b09a      	sub	sp, #104	; 0x68
  snprintf(reply, MRL, "lib %d %d %d %d %d %d %d %d\r\n" ,
    67aa:	9406      	str	r4, [sp, #24]
    67ac:	a808      	add	r0, sp, #32
    67ae:	f9b3 405c 	ldrsh.w	r4, [r3, #92]	; 0x5c
    67b2:	9405      	str	r4, [sp, #20]
    67b4:	f9b3 405a 	ldrsh.w	r4, [r3, #90]	; 0x5a
    67b8:	9404      	str	r4, [sp, #16]
    67ba:	f9b3 4058 	ldrsh.w	r4, [r3, #88]	; 0x58
    67be:	9403      	str	r4, [sp, #12]
    67c0:	f9b3 4056 	ldrsh.w	r4, [r3, #86]	; 0x56
    67c4:	9402      	str	r4, [sp, #8]
    67c6:	f9b3 4054 	ldrsh.w	r4, [r3, #84]	; 0x54
    67ca:	9401      	str	r4, [sp, #4]
    67cc:	f9b3 4052 	ldrsh.w	r4, [r3, #82]	; 0x52
    67d0:	9400      	str	r4, [sp, #0]
    67d2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
    67d6:	f014 ffed 	bl	1b7b4 <snprintf>
           blackLevel[4],
           blackLevel[5],
           blackLevel[6],
           blackLevel[7]
  );
  usb.send(reply);
    67da:	a908      	add	r1, sp, #32
    67dc:	4803      	ldr	r0, [pc, #12]	; (67ec <ULineSensor::sendStatusLineSensorLimitsBlack()+0x50>)
    67de:	f005 ff15 	bl	c60c <UUSB::send(char const*)>
}
    67e2:	b01a      	add	sp, #104	; 0x68
    67e4:	bd10      	pop	{r4, pc}
    67e6:	bf00      	nop
    67e8:	2000344c 	.word	0x2000344c
    67ec:	2000fac4 	.word	0x2000fac4

000067f0 <ULineSensor::sendStatusLineSensor(bool)>:

//////////////////////////////////////////////

void ULineSensor::sendStatusLineSensor(bool normalized)
{
    67f0:	b570      	push	{r4, r5, r6, lr}
    67f2:	4604      	mov	r4, r0
    67f4:	b0b4      	sub	sp, #208	; 0xd0
  const int MRL = 170;
  char reply[MRL];
//   sendLineSensorPosition();
  if (normalized)
    67f6:	2900      	cmp	r1, #0
    67f8:	d067      	beq.n	68ca <ULineSensor::sendStatusLineSensor(bool)+0xda>
  { // compensated for calibration and tilt,
    // value in range 0..1
    int n = lineSensorValueSumCnt;
    if (n < 1)
    67fa:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
      n = 1;
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    67fe:	ae09      	add	r6, sp, #36	; 0x24
             int(lineSensorValueSum[0]/n * 1000),
    6800:	edd0 2a2a 	vldr	s5, [r0, #168]	; 0xa8
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    6804:	21aa      	movs	r1, #170	; 0xaa
    6806:	2b01      	cmp	r3, #1
             int(lineSensorValueSum[2]/n * 1000),
             int(lineSensorValueSum[3]/n * 1000),
             int(lineSensorValueSum[4]/n * 1000),
             int(lineSensorValueSum[5]/n * 1000),
             int(lineSensorValueSum[6]/n * 1000),
             int(lineSensorValueSum[7]/n * 1000), n
    6808:	ed90 4a31 	vldr	s8, [r0, #196]	; 0xc4
             int(lineSensorValueSum[6]/n * 1000),
    680c:	edd0 4a30 	vldr	s9, [r0, #192]	; 0xc0
    6810:	bfb8      	it	lt
    6812:	2301      	movlt	r3, #1
             int(lineSensorValueSum[5]/n * 1000),
    6814:	ed90 5a2f 	vldr	s10, [r0, #188]	; 0xbc
             int(lineSensorValueSum[4]/n * 1000),
    6818:	edd0 5a2e 	vldr	s11, [r0, #184]	; 0xb8
             int(lineSensorValueSum[0]/n * 1000),
    681c:	ee07 3a90 	vmov	s15, r3
             int(lineSensorValueSum[3]/n * 1000),
    6820:	ed90 6a2d 	vldr	s12, [r0, #180]	; 0xb4
             int(lineSensorValueSum[2]/n * 1000),
    6824:	edd0 6a2c 	vldr	s13, [r0, #176]	; 0xb0
             int(lineSensorValueSum[0]/n * 1000),
    6828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
             int(lineSensorValueSum[1]/n * 1000),
    682c:	ed90 3a2b 	vldr	s6, [r0, #172]	; 0xac
             int(lineSensorValueSum[0]/n * 1000),
    6830:	eddf 7a47 	vldr	s15, [pc, #284]	; 6950 <ULineSensor::sendStatusLineSensor(bool)+0x160>
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    6834:	4630      	mov	r0, r6
    6836:	4a47      	ldr	r2, [pc, #284]	; (6954 <ULineSensor::sendStatusLineSensor(bool)+0x164>)
             int(lineSensorValueSum[7]/n * 1000), n
    6838:	eec4 3a07 	vdiv.f32	s7, s8, s14
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    683c:	9307      	str	r3, [sp, #28]
             int(lineSensorValueSum[6]/n * 1000),
    683e:	ee84 4a87 	vdiv.f32	s8, s9, s14
             int(lineSensorValueSum[5]/n * 1000),
    6842:	eec5 4a07 	vdiv.f32	s9, s10, s14
             int(lineSensorValueSum[4]/n * 1000),
    6846:	ee85 5a87 	vdiv.f32	s10, s11, s14
             int(lineSensorValueSum[3]/n * 1000),
    684a:	eec6 5a07 	vdiv.f32	s11, s12, s14
             int(lineSensorValueSum[2]/n * 1000),
    684e:	ee86 6a87 	vdiv.f32	s12, s13, s14
             int(lineSensorValueSum[1]/n * 1000),
    6852:	eec3 6a07 	vdiv.f32	s13, s6, s14
             int(lineSensorValueSum[0]/n * 1000),
    6856:	ee82 3a87 	vdiv.f32	s6, s5, s14
             int(lineSensorValueSum[7]/n * 1000), n
    685a:	ee63 3aa7 	vmul.f32	s7, s7, s15
             int(lineSensorValueSum[6]/n * 1000),
    685e:	ee24 4a27 	vmul.f32	s8, s8, s15
             int(lineSensorValueSum[5]/n * 1000),
    6862:	ee64 4aa7 	vmul.f32	s9, s9, s15
             int(lineSensorValueSum[4]/n * 1000),
    6866:	ee25 5a27 	vmul.f32	s10, s10, s15
             int(lineSensorValueSum[3]/n * 1000),
    686a:	ee65 5aa7 	vmul.f32	s11, s11, s15
             int(lineSensorValueSum[2]/n * 1000),
    686e:	ee26 6a27 	vmul.f32	s12, s12, s15
             int(lineSensorValueSum[1]/n * 1000),
    6872:	ee26 7aa7 	vmul.f32	s14, s13, s15
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    6876:	eefd 3ae3 	vcvt.s32.f32	s7, s7
    687a:	eebd 4ac4 	vcvt.s32.f32	s8, s8
    687e:	eefd 4ae4 	vcvt.s32.f32	s9, s9
    6882:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    6886:	edcd 3a06 	vstr	s7, [sp, #24]
             int(lineSensorValueSum[0]/n * 1000),
    688a:	ee63 7a27 	vmul.f32	s15, s6, s15
    snprintf(reply, MRL, "livn %d %d %d %d %d %d %d %d %d\r\n" ,
    688e:	ed8d 4a05 	vstr	s8, [sp, #20]
    6892:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    6896:	edcd 4a04 	vstr	s9, [sp, #16]
    689a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    689e:	ed8d 5a03 	vstr	s10, [sp, #12]
    68a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    68a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    68aa:	edcd 5a02 	vstr	s11, [sp, #8]
    68ae:	ed8d 6a01 	vstr	s12, [sp, #4]
    68b2:	ed8d 7a00 	vstr	s14, [sp]
    68b6:	ee17 3a90 	vmov	r3, s15
    68ba:	f014 ff7b 	bl	1b7b4 <snprintf>
    );
    adcLSDACnt = 0;
    for (int i = 0; i < 8; i++)
      adcLSDA[i] = 0;
  }
  usb.send(reply);
    68be:	4631      	mov	r1, r6
    68c0:	4825      	ldr	r0, [pc, #148]	; (6958 <ULineSensor::sendStatusLineSensor(bool)+0x168>)
    68c2:	f005 fea3 	bl	c60c <UUSB::send(char const*)>
    // send also position
}
    68c6:	b034      	add	sp, #208	; 0xd0
    68c8:	bd70      	pop	{r4, r5, r6, pc}
    if (adcLSDACnt < 1)
    68ca:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
    68ce:	460d      	mov	r5, r1
    snprintf(reply, MRL, "liv %ld %ld %ld %ld %ld %ld %ld %ld %d\r\n" ,
    68d0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
    68d4:	ae09      	add	r6, sp, #36	; 0x24
    68d6:	2a01      	cmp	r2, #1
    68d8:	bfb8      	it	lt
    68da:	2201      	movlt	r2, #1
    68dc:	9207      	str	r2, [sp, #28]
    68de:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    68e2:	fb91 f1f2 	sdiv	r1, r1, r2
    68e6:	9106      	str	r1, [sp, #24]
    68e8:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
    68ec:	fb91 f1f2 	sdiv	r1, r1, r2
    68f0:	9105      	str	r1, [sp, #20]
    68f2:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    68f6:	fb91 f1f2 	sdiv	r1, r1, r2
    68fa:	9104      	str	r1, [sp, #16]
    68fc:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    6900:	fb91 f1f2 	sdiv	r1, r1, r2
    6904:	9103      	str	r1, [sp, #12]
    6906:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
    690a:	fb91 f1f2 	sdiv	r1, r1, r2
    690e:	9102      	str	r1, [sp, #8]
    6910:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
    6914:	fb91 f1f2 	sdiv	r1, r1, r2
    6918:	9101      	str	r1, [sp, #4]
    691a:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    691e:	4630      	mov	r0, r6
    6920:	fb91 f1f2 	sdiv	r1, r1, r2
    6924:	fb93 f3f2 	sdiv	r3, r3, r2
    6928:	9100      	str	r1, [sp, #0]
    692a:	21aa      	movs	r1, #170	; 0xaa
    692c:	4a0b      	ldr	r2, [pc, #44]	; (695c <ULineSensor::sendStatusLineSensor(bool)+0x16c>)
    692e:	f014 ff41 	bl	1b7b4 <snprintf>
      adcLSDA[i] = 0;
    6932:	2220      	movs	r2, #32
    6934:	4629      	mov	r1, r5
    6936:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    adcLSDACnt = 0;
    693a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
      adcLSDA[i] = 0;
    693e:	f015 f90b 	bl	1bb58 <memset>
  usb.send(reply);
    6942:	4631      	mov	r1, r6
    6944:	4804      	ldr	r0, [pc, #16]	; (6958 <ULineSensor::sendStatusLineSensor(bool)+0x168>)
    6946:	f005 fe61 	bl	c60c <UUSB::send(char const*)>
}
    694a:	b034      	add	sp, #208	; 0xd0
    694c:	bd70      	pop	{r4, r5, r6, pc}
    694e:	bf00      	nop
    6950:	447a0000 	.word	0x447a0000
    6954:	200033e0 	.word	0x200033e0
    6958:	2000fac4 	.word	0x2000fac4
    695c:	20003404 	.word	0x20003404

00006960 <ULineSensor::sendLineSensorGain()>:


void ULineSensor::sendLineSensorGain()
{
    6960:	4603      	mov	r3, r0
  const int MRL = 120;
  char reply[MRL];
  //   sendLineSensorPosition();
  //if (useLineSensor)
  snprintf(reply, MRL, "#lig %g %g %g %g %g %g %g %g\r\n" ,
    6962:	4a1f      	ldr	r2, [pc, #124]	; (69e0 <ULineSensor::sendLineSensorGain()+0x80>)
    6964:	2178      	movs	r1, #120	; 0x78
    6966:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
    696a:	ed93 1a1e 	vldr	s2, [r3, #120]	; 0x78
    696e:	ed93 2a1d 	vldr	s4, [r3, #116]	; 0x74
    6972:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    6976:	ed93 3a1c 	vldr	s6, [r3, #112]	; 0x70
    697a:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    697e:	ed93 4a1b 	vldr	s8, [r3, #108]	; 0x6c
    6982:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    6986:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
    698a:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    698e:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
    6992:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    6996:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    699a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    699e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    69a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    69a6:	b500      	push	{lr}
    69a8:	b0af      	sub	sp, #188	; 0xbc
  snprintf(reply, MRL, "#lig %g %g %g %g %g %g %g %g\r\n" ,
    69aa:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
    69ae:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
    69b2:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
    69b6:	ed8d 3b08 	vstr	d3, [sp, #32]
    69ba:	ed8d 4b06 	vstr	d4, [sp, #24]
    69be:	ed8d 5b04 	vstr	d5, [sp, #16]
    69c2:	ed8d 6b02 	vstr	d6, [sp, #8]
    69c6:	ed8d 7b00 	vstr	d7, [sp]
    69ca:	a810      	add	r0, sp, #64	; 0x40
    69cc:	f014 fef2 	bl	1b7b4 <snprintf>
           lsGain[4],
           lsGain[5],
           lsGain[6],
           lsGain[7]
  );
  usb.send(reply);
    69d0:	a910      	add	r1, sp, #64	; 0x40
    69d2:	4804      	ldr	r0, [pc, #16]	; (69e4 <ULineSensor::sendLineSensorGain()+0x84>)
    69d4:	f005 fe1a 	bl	c60c <UUSB::send(char const*)>
}
    69d8:	b02f      	add	sp, #188	; 0xbc
    69da:	f85d fb04 	ldr.w	pc, [sp], #4
    69de:	bf00      	nop
    69e0:	2000339c 	.word	0x2000339c
    69e4:	2000fac4 	.word	0x2000fac4

000069e8 <ULineSensor::sendData(int)>:
  switch (item)
    69e8:	2906      	cmp	r1, #6
    69ea:	d815      	bhi.n	6a18 <ULineSensor::sendData(int)+0x30>
    69ec:	e8df f001 	tbb	[pc, r1]
    69f0:	0d0b0906 	.word	0x0d0b0906
    69f4:	120f      	.short	0x120f
    69f6:	04          	.byte	0x04
    69f7:	00          	.byte	0x00
      sendLineSensorPosition();
    69f8:	f7ff be7c 	b.w	66f4 <ULineSensor::sendLineSensorPosition()>
      sendStatusLineSensor(false);
    69fc:	2100      	movs	r1, #0
    69fe:	f7ff bef7 	b.w	67f0 <ULineSensor::sendStatusLineSensor(bool)>
      sendStatusLineSensorLimitsWhite();
    6a02:	f7ff bea1 	b.w	6748 <ULineSensor::sendStatusLineSensorLimitsWhite()>
      sendStatusLineSensorLimitsBlack();
    6a06:	f7ff bec9 	b.w	679c <ULineSensor::sendStatusLineSensorLimitsBlack()>
      sendLineSensorGain();
    6a0a:	f7ff bfa9 	b.w	6960 <ULineSensor::sendLineSensorGain()>
      sendStatusLineSensor(true);
    6a0e:	2101      	movs	r1, #1
    6a10:	f7ff beee 	b.w	67f0 <ULineSensor::sendStatusLineSensor(bool)>
      sendLineSensorStatus();
    6a14:	f7ff be42 	b.w	669c <ULineSensor::sendLineSensorStatus()>
      usb.send("# line sensor error\n");
    6a18:	4901      	ldr	r1, [pc, #4]	; (6a20 <ULineSensor::sendData(int)+0x38>)
    6a1a:	4802      	ldr	r0, [pc, #8]	; (6a24 <ULineSensor::sendData(int)+0x3c>)
    6a1c:	f005 bdf6 	b.w	c60c <UUSB::send(char const*)>
    6a20:	20003720 	.word	0x20003720
    6a24:	2000fac4 	.word	0x2000fac4

00006a28 <ULineSensor::normalize()>:

//////////////////////////////////////////////


void ULineSensor::normalize(void)
{
    6a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // float lineValMin = 1.0;
  // float lineValMax = 0.0;
  float lsv;
  if (lineSensorValueSumCnt > 300)
    6a2c:	f8d0 70c8 	ldr.w	r7, [r0, #200]	; 0xc8
{
    6a30:	4604      	mov	r4, r0
  if (lineSensorValueSumCnt > 300)
    6a32:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
{
    6a36:	ed2d 8b04 	vpush	{d8-d9}
  if (lineSensorValueSumCnt > 300)
    6a3a:	f300 8087 	bgt.w	6b4c <ULineSensor::normalize()+0x124>
    // save normalized value
    lineSensorValue[i] = lsv;
    // also average for subscriptions
    lineSensorValueSum[i] += lsv;
  }
  lineSensorValueSumCnt += 1;
    6a3e:	3701      	adds	r7, #1
      if (encoder.pose[3] >= 0)
    6a40:	4b4b      	ldr	r3, [pc, #300]	; (6b70 <ULineSensor::normalize()+0x148>)
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6a42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
          lsv /= (1.0 + 2.0 * encoder.pose[3]);
    6a46:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
    if (lsTiltCompensate)
    6a4a:	7da6      	ldrb	r6, [r4, #22]
          lsv /= (1.0 + 1.5 * encoder.pose[3]);
    6a4c:	eeb7 4b08 	vmov.f64	d4, #120	; 0x3fc00000  1.5
      if (encoder.pose[3] >= 0)
    6a50:	edd3 0a16 	vldr	s1, [r3, #88]	; 0x58
          lsv /= (1.0 + 2.5 * encoder.pose[3]);
    6a54:	eeb0 5b04 	vmov.f64	d5, #4	; 0x40200000  2.5
    6a58:	4d46      	ldr	r5, [pc, #280]	; (6b74 <ULineSensor::normalize()+0x14c>)
    6a5a:	f104 014e 	add.w	r1, r4, #78	; 0x4e
    6a5e:	f104 0260 	add.w	r2, r4, #96	; 0x60
      if (encoder.pose[3] >= 0)
    6a62:	2000      	movs	r0, #0
        if (i == 0 or i == 7)
    6a64:	f04f 0c81 	mov.w	ip, #129	; 0x81
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6a68:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 6b60 <ULineSensor::normalize()+0x138>
          lsv /= (1.0 + 1.8 * encoder.pose[3]);
    6a6c:	ed9f 2b3e 	vldr	d2, [pc, #248]	; 6b68 <ULineSensor::normalize()+0x140>
    6a70:	e01c      	b.n	6aac <ULineSensor::normalize()+0x84>
        if (i == 0 or i == 7)
    6a72:	fa2c f300 	lsr.w	r3, ip, r0
          lsv /= (1.0 + 2.5 * encoder.pose[3]);
    6a76:	eeb7 8ae0 	vcvt.f64.f32	d8, s1
    6a7a:	eeb0 9b46 	vmov.f64	d9, d6
        if (i == 0 or i == 7)
    6a7e:	07db      	lsls	r3, r3, #31
          lsv /= (1.0 + 2.5 * encoder.pose[3]);
    6a80:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6a84:	bf4c      	ite	mi
    6a86:	eea8 9b05 	vfmami.f64	d9, d8, d5
          lsv /= (1.0 + 1.5 * encoder.pose[3]);
    6a8a:	eea8 9b04 	vfmapl.f64	d9, d8, d4
    6a8e:	ee87 8b09 	vdiv.f64	d8, d7, d9
    6a92:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    lineSensorValueSum[i] += lsv;
    6a96:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
  for (int i = 0; i < 8; i++)
    6a9a:	3001      	adds	r0, #1
    lineSensorValue[i] = lsv;
    6a9c:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
    lineSensorValueSum[i] += lsv;
    6aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i = 0; i < 8; i++)
    6aa4:	2808      	cmp	r0, #8
    lineSensorValueSum[i] += lsv;
    6aa6:	edc2 7a11 	vstr	s15, [r2, #68]	; 0x44
  for (int i = 0; i < 8; i++)
    6aaa:	d049      	beq.n	6b40 <ULineSensor::normalize()+0x118>
    int16_t v = ad.adcLSH[i] - ad.adcLSL[i];
    6aac:	8a6b      	ldrh	r3, [r5, #18]
    6aae:	f835 8f02 	ldrh.w	r8, [r5, #2]!
    adcLSD[i] = (v + adcLSD[i])/2;
    6ab2:	f9b1 e07e 	ldrsh.w	lr, [r1, #126]	; 0x7e
    int16_t v = ad.adcLSH[i] - ad.adcLSL[i];
    6ab6:	eba3 0308 	sub.w	r3, r3, r8
    lsv = v * lsGain[i];
    6aba:	ecf2 7a01 	vldmia	r2!, {s15}
    adcLSD[i] = (v + adcLSD[i])/2;
    6abe:	fa0e f383 	sxtah	r3, lr, r3
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	bfb8      	it	lt
    6ac6:	3301      	addlt	r3, #1
    6ac8:	105b      	asrs	r3, r3, #1
    6aca:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
    v = adcLSD[i] - blackLevel[i];
    6ace:	f831 ef02 	ldrh.w	lr, [r1, #2]!
    6ad2:	eba3 030e 	sub.w	r3, r3, lr
    lsv = v * lsGain[i];
    6ad6:	b21b      	sxth	r3, r3
    6ad8:	ee07 3a10 	vmov	s14, r3
    6adc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    6ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
    if (lsTiltCompensate)
    6ae4:	2e00      	cmp	r6, #0
    6ae6:	d0d6      	beq.n	6a96 <ULineSensor::normalize()+0x6e>
      if (encoder.pose[3] >= 0)
    6ae8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    6aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6af0:	dabf      	bge.n	6a72 <ULineSensor::normalize()+0x4a>
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6af2:	eeb7 8ae0 	vcvt.f64.f32	d8, s1
    6af6:	eeb0 9b46 	vmov.f64	d9, d6
    6afa:	2807      	cmp	r0, #7
    6afc:	d817      	bhi.n	6b2e <ULineSensor::normalize()+0x106>
    6afe:	e8df f000 	tbb	[pc, r0]
    6b02:	040d      	.short	0x040d
    6b04:	16161616 	.word	0x16161616
    6b08:	0d04      	.short	0x0d04
          lsv /= (1.0 + 1.8 * encoder.pose[3]);
    6b0a:	eea8 9b02 	vfma.f64	d9, d8, d2
    6b0e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6b12:	ee87 8b09 	vdiv.f64	d8, d7, d9
    6b16:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    6b1a:	e7bc      	b.n	6a96 <ULineSensor::normalize()+0x6e>
          lsv /= (1.0 + 2.0 * encoder.pose[3]);
    6b1c:	eea8 9b03 	vfma.f64	d9, d8, d3
    6b20:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6b24:	ee87 8b09 	vdiv.f64	d8, d7, d9
    6b28:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    6b2c:	e7b3      	b.n	6a96 <ULineSensor::normalize()+0x6e>
          lsv /= (1.0 + 1.6 * encoder.pose[3]);
    6b2e:	eea8 9b01 	vfma.f64	d9, d8, d1
    6b32:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6b36:	ee87 8b09 	vdiv.f64	d8, d7, d9
    6b3a:	eeb7 7bc8 	vcvt.f32.f64	s14, d8
    6b3e:	e7aa      	b.n	6a96 <ULineSensor::normalize()+0x6e>
}
    6b40:	ecbd 8b04 	vpop	{d8-d9}
  lineSensorValueSumCnt += 1;
    6b44:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
}
    6b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      lineSensorValueSum[i] = 0;
    6b4c:	2220      	movs	r2, #32
    6b4e:	2100      	movs	r1, #0
    6b50:	30a8      	adds	r0, #168	; 0xa8
    6b52:	2701      	movs	r7, #1
    6b54:	f015 f800 	bl	1bb58 <memset>
    6b58:	e772      	b.n	6a40 <ULineSensor::normalize()+0x18>
    6b5a:	bf00      	nop
    6b5c:	f3af 8000 	nop.w
    6b60:	9999999a 	.word	0x9999999a
    6b64:	3ff99999 	.word	0x3ff99999
    6b68:	cccccccd 	.word	0xcccccccd
    6b6c:	3ffccccc 	.word	0x3ffccccc
    6b70:	2000ec40 	.word	0x2000ec40
    6b74:	2000e8be 	.word	0x2000e8be

00006b78 <ULineSensor::tick()>:
  tickCnt++;
    6b78:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{ //
    6b7c:	b570      	push	{r4, r5, r6, lr}
  tickCnt++;
    6b7e:	3301      	adds	r3, #1
  bool toOn = lineSensorOn and not lineSensorIsOn;
    6b80:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
{ //
    6b84:	4604      	mov	r4, r0
  tickCnt++;
    6b86:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  bool toOn = lineSensorOn and not lineSensorIsOn;
    6b8a:	b3bd      	cbz	r5, 6bfc <ULineSensor::tick()+0x84>
    6b8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    6b90:	bba3      	cbnz	r3, 6bfc <ULineSensor::tick()+0x84>
  if (ls.lsPowerHigh and (pinModeLed == INPUT or toOn))
    6b92:	4b38      	ldr	r3, [pc, #224]	; (6c74 <ULineSensor::tick()+0xfc>)
    6b94:	7d5b      	ldrb	r3, [r3, #21]
    6b96:	2b00      	cmp	r3, #0
    6b98:	d05e      	beq.n	6c58 <ULineSensor::tick()+0xe0>
    pinMode(highPowerPin, OUTPUT); // Line sensor power control
    6b9a:	2101      	movs	r1, #1
    6b9c:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    6ba0:	f00f fa68 	bl	16074 <pinMode>
  if (adcLSDACnt > 1000)
    6ba4:	f8d4 60fc 	ldr.w	r6, [r4, #252]	; 0xfc
    pinModeLed = OUTPUT;
    6ba8:	2301      	movs	r3, #1
    lineSensorIsOn = lineSensorOn;
    6baa:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
  if (adcLSDACnt > 1000)
    6bae:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    pinModeLed = OUTPUT;
    6bb2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    lineSensorIsOn = lineSensorOn;
    6bb6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  if (adcLSDACnt > 1000)
    6bba:	dc2b      	bgt.n	6c14 <ULineSensor::tick()+0x9c>
    6bbc:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
    6bc0:	482d      	ldr	r0, [pc, #180]	; (6c78 <ULineSensor::tick()+0x100>)
    6bc2:	f104 0ef8 	add.w	lr, r4, #248	; 0xf8
      adcLSDA[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    6bc6:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    6bca:	f930 cf02 	ldrsh.w	ip, [r0, #2]!
    6bce:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6bd2:	eba1 010c 	sub.w	r1, r1, ip
    for (int i = 0; i < 8; i++)
    6bd6:	459e      	cmp	lr, r3
      adcLSDA[i] += ad.adcLSH[i] - ad.adcLSL[i];;
    6bd8:	440a      	add	r2, r1
    6bda:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
    6bdc:	d1f3      	bne.n	6bc6 <ULineSensor::tick()+0x4e>
    adcLSDACnt++;
    6bde:	3601      	adds	r6, #1
    adcLSDACnt = 1;
    6be0:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
  if (lineSensorOn)
    6be4:	b34d      	cbz	r5, 6c3a <ULineSensor::tick()+0xc2>
    calibrateWhiteNow();
    6be6:	4620      	mov	r0, r4
    6be8:	f7ff fcf0 	bl	65cc <ULineSensor::calibrateWhiteNow()>
    normalize();
    6bec:	4620      	mov	r0, r4
    6bee:	f7ff ff1b 	bl	6a28 <ULineSensor::normalize()>
    lineDetect();
    6bf2:	4620      	mov	r0, r4
}
    6bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lineDetect();
    6bf8:	f7ff bc36 	b.w	6468 <ULineSensor::lineDetect()>
  if (ls.lsPowerHigh and (pinModeLed == INPUT or toOn))
    6bfc:	4b1d      	ldr	r3, [pc, #116]	; (6c74 <ULineSensor::tick()+0xfc>)
    6bfe:	7d5b      	ldrb	r3, [r3, #21]
    6c00:	b333      	cbz	r3, 6c50 <ULineSensor::tick()+0xd8>
    6c02:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    6c06:	2b00      	cmp	r3, #0
    6c08:	d0c7      	beq.n	6b9a <ULineSensor::tick()+0x22>
  if (adcLSDACnt > 1000)
    6c0a:	f8d4 60fc 	ldr.w	r6, [r4, #252]	; 0xfc
    6c0e:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    6c12:	ddd3      	ble.n	6bbc <ULineSensor::tick()+0x44>
    6c14:	4918      	ldr	r1, [pc, #96]	; (6c78 <ULineSensor::tick()+0x100>)
    6c16:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
    6c1a:	f104 06f8 	add.w	r6, r4, #248	; 0xf8
      adcLSDA[i] = ad.adcLSH[i] - ad.adcLSL[i];;
    6c1e:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
    6c22:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
    6c26:	1a1b      	subs	r3, r3, r0
    6c28:	f842 3f04 	str.w	r3, [r2, #4]!
    for (int i = 0; i < 8; i++)
    6c2c:	4296      	cmp	r6, r2
    6c2e:	d1f6      	bne.n	6c1e <ULineSensor::tick()+0xa6>
    6c30:	2601      	movs	r6, #1
    adcLSDACnt = 1;
    6c32:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
  if (lineSensorOn)
    6c36:	2d00      	cmp	r5, #0
    6c38:	d1d5      	bne.n	6be6 <ULineSensor::tick()+0x6e>
  else if (calibrateWhite > 0)
    6c3a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6c3e:	2b00      	cmp	r3, #0
    6c40:	dd05      	ble.n	6c4e <ULineSensor::tick()+0xd6>
    lineSensorOn = true;
    6c42:	2201      	movs	r2, #1
    lineSensorOnCnt = 7;
    6c44:	2307      	movs	r3, #7
    lineSensorOn = true;
    6c46:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    lineSensorOnCnt = 7;
    6c4a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
}
    6c4e:	bd70      	pop	{r4, r5, r6, pc}
  else if (not ls.lsPowerHigh and (pinModeLed == OUTPUT or toOn))
    6c50:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    6c54:	2b00      	cmp	r3, #0
    6c56:	d0d8      	beq.n	6c0a <ULineSensor::tick()+0x92>
    pinMode(highPowerPin, INPUT); // Line sensor power control
    6c58:	2100      	movs	r1, #0
    6c5a:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    6c5e:	f00f fa09 	bl	16074 <pinMode>
    pinModeLed = INPUT;
    6c62:	2300      	movs	r3, #0
    lineSensorIsOn = lineSensorOn;
    6c64:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
    pinModeLed = INPUT;
    6c68:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    lineSensorIsOn = lineSensorOn;
    6c6c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    6c70:	e7cb      	b.n	6c0a <ULineSensor::tick()+0x92>
    6c72:	bf00      	nop
    6c74:	2000f390 	.word	0x2000f390
    6c78:	2000e8be 	.word	0x2000e8be
    6c7c:	00000000 	.word	0x00000000

00006c80 <ULineSensor::eePromSaveLinesensor()>:
void ULineSensor::eePromSaveLinesensor()
{
  char v = 0x00;
  if (lineSensorOn)
    v |= 0x01;
  if (lsIsWhite)
    6c80:	7d03      	ldrb	r3, [r0, #20]
  char v = 0x00;
    6c82:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
{
    6c86:	b570      	push	{r4, r5, r6, lr}
    6c88:	4605      	mov	r5, r0
    6c8a:	b082      	sub	sp, #8
  if (lsIsWhite)
    6c8c:	b10b      	cbz	r3, 6c92 <ULineSensor::eePromSaveLinesensor()+0x12>
    v |= 0x02;
    6c8e:	f041 0102 	orr.w	r1, r1, #2
  if (lsPowerHigh)
    6c92:	7d6b      	ldrb	r3, [r5, #21]
    6c94:	b10b      	cbz	r3, 6c9a <ULineSensor::eePromSaveLinesensor()+0x1a>
    v |= 0x04;
    6c96:	f041 0104 	orr.w	r1, r1, #4
  if (lsTiltCompensate)
    6c9a:	7dab      	ldrb	r3, [r5, #22]
    6c9c:	b10b      	cbz	r3, 6ca2 <ULineSensor::eePromSaveLinesensor()+0x22>
    v |= 0x08;
    6c9e:	f041 0108 	orr.w	r1, r1, #8
  if (wideSensor)
    6ca2:	f895 3101 	ldrb.w	r3, [r5, #257]	; 0x101
    6ca6:	b10b      	cbz	r3, 6cac <ULineSensor::eePromSaveLinesensor()+0x2c>
    v |= 0x10;
    6ca8:	f041 0110 	orr.w	r1, r1, #16
  if (swapLeftRight)
    6cac:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
    6cb0:	b10b      	cbz	r3, 6cb6 <ULineSensor::eePromSaveLinesensor()+0x36>
    v |= 0x20;
    6cb2:	f041 0120 	orr.w	r1, r1, #32
  eeConfig.pushByte(v);
    6cb6:	4832      	ldr	r0, [pc, #200]	; (6d80 <ULineSensor::eePromSaveLinesensor()+0x100>)
    6cb8:	f7fc fa2a 	bl	3110 <EEConfig::pushByte(unsigned char)>
  // limit value space (error values)
  if (crossingThreshold >= 1 or crossingThreshold < 0.3)
    6cbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6cc0:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
    6cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ccc:	db32      	blt.n	6d34 <ULineSensor::eePromSaveLinesensor()+0xb4>
    crossingThreshold = 0.8;
    6cce:	4b2d      	ldr	r3, [pc, #180]	; (6d84 <ULineSensor::eePromSaveLinesensor()+0x104>)
    6cd0:	21a0      	movs	r1, #160	; 0xa0
    6cd2:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (lineValidThreshold >= 1 or lineValidThreshold < 0.3)
    6cd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6cd8:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
    6cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ce4:	db3a      	blt.n	6d5c <ULineSensor::eePromSaveLinesensor()+0xdc>
    lineValidThreshold = 0.85;
    6ce6:	4b28      	ldr	r3, [pc, #160]	; (6d88 <ULineSensor::eePromSaveLinesensor()+0x108>)
    6ce8:	636b      	str	r3, [r5, #52]	; 0x34
  eeConfig.pushByte(int(crossingThreshold*200.0));
    6cea:	4825      	ldr	r0, [pc, #148]	; (6d80 <ULineSensor::eePromSaveLinesensor()+0x100>)
    6cec:	f105 043e 	add.w	r4, r5, #62	; 0x3e
    6cf0:	f7fc fa0e 	bl	3110 <EEConfig::pushByte(unsigned char)>
  eeConfig.pushByte(int(lineValidThreshold*200.0));
    6cf4:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
  for (int i = 0; i < 8; i++)
  {
    eeConfig.pushWord(blackLevel[i]);
    6cf8:	4e21      	ldr	r6, [pc, #132]	; (6d80 <ULineSensor::eePromSaveLinesensor()+0x100>)
    6cfa:	354e      	adds	r5, #78	; 0x4e
  eeConfig.pushByte(int(lineValidThreshold*200.0));
    6cfc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6d00:	4630      	mov	r0, r6
    6d02:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 6d70 <ULineSensor::eePromSaveLinesensor()+0xf0>
    6d06:	ee27 7b06 	vmul.f64	d7, d7, d6
    6d0a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    6d0e:	edcd 7a01 	vstr	s15, [sp, #4]
    6d12:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6d16:	f7fc f9fb 	bl	3110 <EEConfig::pushByte(unsigned char)>
    eeConfig.pushWord(blackLevel[i]);
    6d1a:	8a61      	ldrh	r1, [r4, #18]
    6d1c:	4630      	mov	r0, r6
    6d1e:	f7fc fa13 	bl	3148 <EEConfig::pushWord(unsigned short)>
    eeConfig.pushWord(whiteLevel[i]);
    6d22:	f834 1f02 	ldrh.w	r1, [r4, #2]!
    6d26:	4630      	mov	r0, r6
    6d28:	f7fc fa0e 	bl	3148 <EEConfig::pushWord(unsigned short)>
  for (int i = 0; i < 8; i++)
    6d2c:	42a5      	cmp	r5, r4
    6d2e:	d1f4      	bne.n	6d1a <ULineSensor::eePromSaveLinesensor()+0x9a>
  }
}
    6d30:	b002      	add	sp, #8
    6d32:	bd70      	pop	{r4, r5, r6, pc}
  if (crossingThreshold >= 1 or crossingThreshold < 0.3)
    6d34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6d38:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 6d78 <ULineSensor::eePromSaveLinesensor()+0xf8>
    6d3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    6d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d44:	d4c3      	bmi.n	6cce <ULineSensor::eePromSaveLinesensor()+0x4e>
  eeConfig.pushByte(int(crossingThreshold*200.0));
    6d46:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 6d70 <ULineSensor::eePromSaveLinesensor()+0xf0>
    6d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
    6d4e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    6d52:	edcd 7a01 	vstr	s15, [sp, #4]
    6d56:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6d5a:	e7bb      	b.n	6cd4 <ULineSensor::eePromSaveLinesensor()+0x54>
  if (lineValidThreshold >= 1 or lineValidThreshold < 0.3)
    6d5c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6d60:	ed9f 6b05 	vldr	d6, [pc, #20]	; 6d78 <ULineSensor::eePromSaveLinesensor()+0xf8>
    6d64:	eeb4 7bc6 	vcmpe.f64	d7, d6
    6d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d6c:	d5bd      	bpl.n	6cea <ULineSensor::eePromSaveLinesensor()+0x6a>
    6d6e:	e7ba      	b.n	6ce6 <ULineSensor::eePromSaveLinesensor()+0x66>
    6d70:	00000000 	.word	0x00000000
    6d74:	40690000 	.word	0x40690000
    6d78:	33333333 	.word	0x33333333
    6d7c:	3fd33333 	.word	0x3fd33333
    6d80:	2000ebf4 	.word	0x2000ebf4
    6d84:	3f4ccccd 	.word	0x3f4ccccd
    6d88:	3f59999a 	.word	0x3f59999a

00006d8c <ULineSensor::eePromLoadLinesensor()>:

/////////////////////////////////////////////////////

void ULineSensor::eePromLoadLinesensor()
{
    6d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char v = eeConfig.readByte();
    6d90:	4e3b      	ldr	r6, [pc, #236]	; (6e80 <ULineSensor::eePromLoadLinesensor()+0xf4>)
{
    6d92:	4607      	mov	r7, r0
    6d94:	ed2d 8b02 	vpush	{d8}
  char v = eeConfig.readByte();
    6d98:	4630      	mov	r0, r6
  lsPowerHigh = (v & 0x04) == 0x04;
  lsTiltCompensate = (v & 0x08) == 0x08;
  wideSensor = (v & 0x10) == 0x10;
  swapLeftRight = (v & 0x20) == 0x20;
  // limit 4 crossing detect
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6d9a:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 6e84 <ULineSensor::eePromLoadLinesensor()+0xf8>
  char v = eeConfig.readByte();
    6d9e:	f7fc fa03 	bl	31a8 <EEConfig::readByte()>
    6da2:	4603      	mov	r3, r0
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6da4:	4630      	mov	r0, r6
  lineSensorOn = (v & 0x01) == 0x01;
    6da6:	f003 0201 	and.w	r2, r3, #1
    6daa:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
  lsIsWhite = (v & 0x02) == 0x02;
    6dae:	f3c3 0240 	ubfx	r2, r3, #1, #1
    6db2:	753a      	strb	r2, [r7, #20]
  lsPowerHigh = (v & 0x04) == 0x04;
    6db4:	f3c3 0280 	ubfx	r2, r3, #2, #1
    6db8:	757a      	strb	r2, [r7, #21]
  lsTiltCompensate = (v & 0x08) == 0x08;
    6dba:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    6dbe:	75ba      	strb	r2, [r7, #22]
  wideSensor = (v & 0x10) == 0x10;
    6dc0:	f3c3 1200 	ubfx	r2, r3, #4, #1
  swapLeftRight = (v & 0x20) == 0x20;
    6dc4:	f3c3 1340 	ubfx	r3, r3, #5, #1
  wideSensor = (v & 0x10) == 0x10;
    6dc8:	f887 2101 	strb.w	r2, [r7, #257]	; 0x101
  swapLeftRight = (v & 0x20) == 0x20;
    6dcc:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6dd0:	f7fc f9ea 	bl	31a8 <EEConfig::readByte()>
    6dd4:	ee07 0a90 	vmov	s15, r0
  lineValidThreshold = float(eeConfig.readByte()) / 200.0;
    6dd8:	4630      	mov	r0, r6
  crossingThreshold = float(eeConfig.readByte()) / 200.0;
    6dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
    6dde:	ee87 7a88 	vdiv.f32	s14, s15, s16
    6de2:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
  lineValidThreshold = float(eeConfig.readByte()) / 200.0;
    6de6:	f7fc f9df 	bl	31a8 <EEConfig::readByte()>
    6dea:	ee07 0a90 	vmov	s15, r0
  // number of bytes to skip if not robot-specific configuration
  int skipCount = 8*(2 + 2);
  if (not eeConfig.isStringConfig())
    6dee:	f896 3020 	ldrb.w	r3, [r6, #32]
  lineValidThreshold = float(eeConfig.readByte()) / 200.0;
    6df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    6df6:	ee87 7a88 	vdiv.f32	s14, s15, s16
    6dfa:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
  if (not eeConfig.isStringConfig())
    6dfe:	bb7b      	cbnz	r3, 6e60 <ULineSensor::eePromLoadLinesensor()+0xd4>
    6e00:	f107 043e 	add.w	r4, r7, #62	; 0x3e
    6e04:	f107 084e 	add.w	r8, r7, #78	; 0x4e
    6e08:	4625      	mov	r5, r4
  { // load from flash
    for (int i = 0; i < 8; i++)
    {
      blackLevel[i] = eeConfig.readWord();
    6e0a:	4630      	mov	r0, r6
    6e0c:	f7fc f9e0 	bl	31d0 <EEConfig::readWord()>
    6e10:	4603      	mov	r3, r0
      whiteLevel[i] = eeConfig.readWord();
    6e12:	4630      	mov	r0, r6
      blackLevel[i] = eeConfig.readWord();
    6e14:	826b      	strh	r3, [r5, #18]
      whiteLevel[i] = eeConfig.readWord();
    6e16:	f7fc f9db 	bl	31d0 <EEConfig::readWord()>
    6e1a:	f825 0f02 	strh.w	r0, [r5, #2]!
    for (int i = 0; i < 8; i++)
    6e1e:	4545      	cmp	r5, r8
    6e20:	d1f3      	bne.n	6e0a <ULineSensor::eePromLoadLinesensor()+0x7e>
    }
    for (int i = 0; i < 8; i++)
    { // set gains from new values
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6e22:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    6e26:	f107 0260 	add.w	r2, r7, #96	; 0x60
    6e2a:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
    6e2e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
    for (int i = 0; i < 8; i++)
    6e32:	4544      	cmp	r4, r8
      lsGain[i] = 1.0/(whiteLevel[i] - blackLevel[i]);
    6e34:	eba3 0301 	sub.w	r3, r3, r1
    6e38:	ee07 3a90 	vmov	s15, r3
    6e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6e40:	ee85 6b07 	vdiv.f64	d6, d5, d7
    6e44:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    6e48:	eca2 6a01 	vstmia	r2!, {s12}
    for (int i = 0; i < 8; i++)
    6e4c:	d1ed      	bne.n	6e2a <ULineSensor::eePromLoadLinesensor()+0x9e>
  }
  else
    // load from hard-coded mission
    eeConfig.skipAddr(skipCount);
  #ifdef REGBOT_HW41
  if (robot.robotHWversion == 9)
    6e4e:	4b0e      	ldr	r3, [pc, #56]	; (6e88 <ULineSensor::eePromLoadLinesensor()+0xfc>)
    6e50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    6e54:	2b09      	cmp	r3, #9
    6e56:	d00b      	beq.n	6e70 <ULineSensor::eePromLoadLinesensor()+0xe4>
    highPowerPin = PIN_LINE_LED_HIGH;
  #endif
}
    6e58:	ecbd 8b02 	vpop	{d8}
    6e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e60:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6e62:	3320      	adds	r3, #32
    6e64:	6273      	str	r3, [r6, #36]	; 0x24
  if (robot.robotHWversion == 9)
    6e66:	4b08      	ldr	r3, [pc, #32]	; (6e88 <ULineSensor::eePromLoadLinesensor()+0xfc>)
    6e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    6e6c:	2b09      	cmp	r3, #9
    6e6e:	d1f3      	bne.n	6e58 <ULineSensor::eePromLoadLinesensor()+0xcc>
    highPowerPin = PIN_LINE_LED_HIGH;
    6e70:	2322      	movs	r3, #34	; 0x22
    6e72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
}
    6e76:	ecbd 8b02 	vpop	{d8}
    6e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e7e:	bf00      	nop
    6e80:	2000ebf4 	.word	0x2000ebf4
    6e84:	43480000 	.word	0x43480000
    6e88:	2000f660 	.word	0x2000f660

00006e8c <_GLOBAL__sub_I_ls>:
    6e8c:	b570      	push	{r4, r5, r6, lr}
    6e8e:	4c2e      	ldr	r4, [pc, #184]	; (6f48 <_GLOBAL__sub_I_ls+0xbc>)
    6e90:	2500      	movs	r5, #0
    6e92:	f44f 7680 	mov.w	r6, #256	; 0x100
    6e96:	4620      	mov	r0, r4
    6e98:	f005 f9c6 	bl	c228 <USubss::USubss()>
    6e9c:	492b      	ldr	r1, [pc, #172]	; (6f4c <_GLOBAL__sub_I_ls+0xc0>)
    6e9e:	f240 1201 	movw	r2, #257	; 0x101
    6ea2:	2300      	movs	r3, #0
    6ea4:	6021      	str	r1, [r4, #0]
    6ea6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    6eaa:	4929      	ldr	r1, [pc, #164]	; (6f50 <_GLOBAL__sub_I_ls+0xc4>)
    6eac:	82a2      	strh	r2, [r4, #20]
    6eae:	62e1      	str	r1, [r4, #44]	; 0x2c
    6eb0:	2122      	movs	r1, #34	; 0x22
    6eb2:	4a28      	ldr	r2, [pc, #160]	; (6f54 <_GLOBAL__sub_I_ls+0xc8>)
    6eb4:	6263      	str	r3, [r4, #36]	; 0x24
    6eb6:	63a3      	str	r3, [r4, #56]	; 0x38
    6eb8:	f44f 7316 	mov.w	r3, #600	; 0x258
    6ebc:	6362      	str	r2, [r4, #52]	; 0x34
    6ebe:	2220      	movs	r2, #32
    6ec0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    6ec4:	4629      	mov	r1, r5
    6ec6:	6425      	str	r5, [r4, #64]	; 0x40
    6ec8:	75a5      	strb	r5, [r4, #22]
    6eca:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    6ece:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    6ed2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    6ed6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    6eda:	6525      	str	r5, [r4, #80]	; 0x50
    6edc:	64e5      	str	r5, [r4, #76]	; 0x4c
    6ede:	65e5      	str	r5, [r4, #92]	; 0x5c
    6ee0:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    6ee4:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    6ee8:	f014 fe36 	bl	1bb58 <memset>
    6eec:	4629      	mov	r1, r5
    6eee:	2220      	movs	r2, #32
    6ef0:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    6ef4:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    6ef8:	f014 fe2e 	bl	1bb58 <memset>
    6efc:	4b16      	ldr	r3, [pc, #88]	; (6f58 <_GLOBAL__sub_I_ls+0xcc>)
    6efe:	f104 0ecc 	add.w	lr, r4, #204	; 0xcc
    6f02:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    6f06:	f103 0c10 	add.w	ip, r3, #16
    6f0a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    6f0e:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    6f12:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    6f16:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    6f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6f1c:	e9c4 554c 	strd	r5, r5, [r4, #304]	; 0x130
    6f20:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    6f24:	f104 05dc 	add.w	r5, r4, #220	; 0xdc
    6f28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6f2e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    6f32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
ULineSensor ls;
    6f36:	4620      	mov	r0, r4
    6f38:	f8a4 6100 	strh.w	r6, [r4, #256]	; 0x100
    6f3c:	4a07      	ldr	r2, [pc, #28]	; (6f5c <_GLOBAL__sub_I_ls+0xd0>)
    6f3e:	4908      	ldr	r1, [pc, #32]	; (6f60 <_GLOBAL__sub_I_ls+0xd4>)
}
    6f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ULineSensor ls;
    6f44:	f012 b868 	b.w	19018 <__aeabi_atexit>
    6f48:	2000f390 	.word	0x2000f390
    6f4c:	20007e08 	.word	0x20007e08
    6f50:	3f4ccccd 	.word	0x3f4ccccd
    6f54:	3f59999a 	.word	0x3f59999a
    6f58:	20001e5c 	.word	0x20001e5c
    6f5c:	20008f80 	.word	0x20008f80
    6f60:	0000637d 	.word	0x0000637d

00006f64 <ULog::sendHelp()>:
    logRowCnt = 0; // reset normal logging too
  }
}

void ULog::sendHelp()
{
    6f64:	b510      	push	{r4, lr}
  usb.send("# logger ------\n");
    6f66:	4c0d      	ldr	r4, [pc, #52]	; (6f9c <ULog::sendHelp()+0x38>)
    6f68:	490d      	ldr	r1, [pc, #52]	; (6fa0 <ULog::sendHelp()+0x3c>)
    6f6a:	4620      	mov	r0, r4
    6f6c:	f005 fb4e 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlognow I\tstart logging now with I interval in ms\r\n");
    6f70:	490c      	ldr	r1, [pc, #48]	; (6fa4 <ULog::sendHelp()+0x40>)
    6f72:	4620      	mov	r0, r4
    6f74:	f005 fb4a 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlog \tGet current log, if any\r\n");
    6f78:	490b      	ldr	r1, [pc, #44]	; (6fa8 <ULog::sendHelp()+0x44>)
    6f7a:	4620      	mov	r0, r4
    6f7c:	f005 fb46 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlfls \tSet log flags - same order as lfl\r\n");
    6f80:	490a      	ldr	r1, [pc, #40]	; (6fac <ULog::sendHelp()+0x48>)
    6f82:	4620      	mov	r0, r4
    6f84:	f005 fb42 	bl	c60c <UUSB::send(char const*)>
//   usb.send("# -- \tlfcs \tSet log control log flags - same order as lfc\n");
  usb.send("# -- \tlsts \tSet log interval (for timing info only)\r\n");
    6f88:	4909      	ldr	r1, [pc, #36]	; (6fb0 <ULog::sendHelp()+0x4c>)
    6f8a:	4620      	mov	r0, r4
    6f8c:	f005 fb3e 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tlogmsg \tStart log of (all) streamed messages (e.g. subscriptions)\r\n");
    6f90:	4620      	mov	r0, r4
    6f92:	4908      	ldr	r1, [pc, #32]	; (6fb4 <ULog::sendHelp()+0x50>)
}
    6f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tlogmsg \tStart log of (all) streamed messages (e.g. subscriptions)\r\n");
    6f98:	f005 bb38 	b.w	c60c <UUSB::send(char const*)>
    6f9c:	2000fac4 	.word	0x2000fac4
    6fa0:	200042a0 	.word	0x200042a0
    6fa4:	200042b4 	.word	0x200042b4
    6fa8:	200042f0 	.word	0x200042f0
    6fac:	20004318 	.word	0x20004318
    6fb0:	20004348 	.word	0x20004348
    6fb4:	20004380 	.word	0x20004380

00006fb8 <ULog::~ULog()>:
class ULog : public USubss
    6fb8:	b510      	push	{r4, lr}
    6fba:	4b05      	ldr	r3, [pc, #20]	; (6fd0 <ULog::~ULog()+0x18>)
    6fbc:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    6fbe:	6840      	ldr	r0, [r0, #4]
    6fc0:	6023      	str	r3, [r4, #0]
	if (__p)
    6fc2:	b118      	cbz	r0, 6fcc <ULog::~ULog()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6fc4:	68e1      	ldr	r1, [r4, #12]
    6fc6:	1a09      	subs	r1, r1, r0
    6fc8:	f00f fc08 	bl	167dc <operator delete(void*, unsigned int)>
    6fcc:	4620      	mov	r0, r4
    6fce:	bd10      	pop	{r4, pc}
    6fd0:	200080a0 	.word	0x200080a0

00006fd4 <ULog::setup()>:
  if (logBuffer == nullptr)
    6fd4:	6d83      	ldr	r3, [r0, #88]	; 0x58
{ // allocate buffer space on heap (better on Teensy 4.1)
    6fd6:	b510      	push	{r4, lr}
    6fd8:	4604      	mov	r4, r0
  if (logBuffer == nullptr)
    6fda:	b17b      	cbz	r3, 6ffc <ULog::setup()+0x28>
  addPublistItem("lfl", "Get log flags 'lfl mis acc gyro mag motref motv mota enc vel turnrate pose line dist batt timing extra chirp'");
    6fdc:	4620      	mov	r0, r4
    6fde:	4a0a      	ldr	r2, [pc, #40]	; (7008 <ULog::setup()+0x34>)
    6fe0:	490a      	ldr	r1, [pc, #40]	; (700c <ULog::setup()+0x38>)
    6fe2:	f005 fa45 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("lst", "Get log status 'lst interval rows rowsMax logSize'");
    6fe6:	4620      	mov	r0, r4
    6fe8:	4909      	ldr	r1, [pc, #36]	; (7010 <ULog::setup()+0x3c>)
    6fea:	4a0a      	ldr	r2, [pc, #40]	; (7014 <ULog::setup()+0x40>)
    6fec:	f005 fa40 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService((USubss*)this);
    6ff0:	4621      	mov	r1, r4
    6ff2:	4809      	ldr	r0, [pc, #36]	; (7018 <ULog::setup()+0x44>)
}
    6ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.addSubscriptionService((USubss*)this);
    6ff8:	f005 bf4c 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    logBuffer = (int8_t *) malloc(LOG_BUFFER_MAX);
    6ffc:	4807      	ldr	r0, [pc, #28]	; (701c <ULog::setup()+0x48>)
    6ffe:	f012 fc95 	bl	1992c <malloc>
    7002:	65a0      	str	r0, [r4, #88]	; 0x58
    7004:	e7ea      	b.n	6fdc <ULog::setup()+0x8>
    7006:	bf00      	nop
    7008:	200041c0 	.word	0x200041c0
    700c:	20004230 	.word	0x20004230
    7010:	20004268 	.word	0x20004268
    7014:	20004234 	.word	0x20004234
    7018:	2000fac4 	.word	0x2000fac4
    701c:	0003d090 	.word	0x0003d090

00007020 <ULog::sendLogFlagsOther()>:
//   );
//   usb.send(s);
// }

void ULog::sendLogFlagsOther()
{
    7020:	4603      	mov	r3, r0
  const int MSL = 150;
  char s[MSL];
  snprintf(s, MSL, "lfl %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
    7022:	4a1e      	ldr	r2, [pc, #120]	; (709c <ULog::sendLogFlagsOther()+0x7c>)
    7024:	2196      	movs	r1, #150	; 0x96
{
    7026:	b510      	push	{r4, lr}
  snprintf(s, MSL, "lfl %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
    7028:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
{
    702c:	b0b6      	sub	sp, #216	; 0xd8
  snprintf(s, MSL, "lfl %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
    702e:	940f      	str	r4, [sp, #60]	; 0x3c
    7030:	a810      	add	r0, sp, #64	; 0x40
    7032:	f893 4037 	ldrb.w	r4, [r3, #55]	; 0x37
    7036:	940e      	str	r4, [sp, #56]	; 0x38
    7038:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
    703c:	940d      	str	r4, [sp, #52]	; 0x34
    703e:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
    7042:	940c      	str	r4, [sp, #48]	; 0x30
    7044:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
    7048:	940b      	str	r4, [sp, #44]	; 0x2c
    704a:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    704e:	940a      	str	r4, [sp, #40]	; 0x28
    7050:	f893 4027 	ldrb.w	r4, [r3, #39]	; 0x27
    7054:	9409      	str	r4, [sp, #36]	; 0x24
    7056:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
    705a:	9408      	str	r4, [sp, #32]
    705c:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
    7060:	9407      	str	r4, [sp, #28]
    7062:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    7066:	9406      	str	r4, [sp, #24]
    7068:	f893 4023 	ldrb.w	r4, [r3, #35]	; 0x23
    706c:	9405      	str	r4, [sp, #20]
    706e:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
    7072:	9404      	str	r4, [sp, #16]
    7074:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
    7078:	9403      	str	r4, [sp, #12]
    707a:	f893 4020 	ldrb.w	r4, [r3, #32]
    707e:	9402      	str	r4, [sp, #8]
    7080:	7fdc      	ldrb	r4, [r3, #31]
    7082:	9401      	str	r4, [sp, #4]
    7084:	7f9c      	ldrb	r4, [r3, #30]
    7086:	9400      	str	r4, [sp, #0]
    7088:	7f5b      	ldrb	r3, [r3, #29]
    708a:	f014 fb93 	bl	1b7b4 <snprintf>
           logRowFlags[LOG_BATT],
           logRowFlags[LOG_TIMING],
           logRowFlags[LOG_EXTRA],
           logRowFlags[LOG_CHIRP]
  );
  usb.send(s);
    708e:	a910      	add	r1, sp, #64	; 0x40
    7090:	4803      	ldr	r0, [pc, #12]	; (70a0 <ULog::sendLogFlagsOther()+0x80>)
    7092:	f005 fabb 	bl	c60c <UUSB::send(char const*)>
}
    7096:	b036      	add	sp, #216	; 0xd8
    7098:	bd10      	pop	{r4, pc}
    709a:	bf00      	nop
    709c:	2000415c 	.word	0x2000415c
    70a0:	2000fac4 	.word	0x2000fac4

000070a4 <ULog::sendData(int)>:
  if (item == 0)
    70a4:	b111      	cbz	r1, 70ac <ULog::sendData(int)+0x8>
  else if (item==1)
    70a6:	2901      	cmp	r1, #1
    70a8:	d002      	beq.n	70b0 <ULog::sendData(int)+0xc>
    70aa:	4770      	bx	lr
    sendLogFlagsOther();
    70ac:	f7ff bfb8 	b.w	7020 <ULog::sendLogFlagsOther()>
{
    70b0:	b500      	push	{lr}
  snprintf(s, MSL, "lst %lu %d %d %d\r\n",
    70b2:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
{
    70b6:	b0ab      	sub	sp, #172	; 0xac
    70b8:	4603      	mov	r3, r0
  snprintf(s, MSL, "lst %lu %d %d %d\r\n",
    70ba:	4808      	ldr	r0, [pc, #32]	; (70dc <ULog::sendData(int)+0x38>)
    70bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    70be:	9201      	str	r2, [sp, #4]
    70c0:	9002      	str	r0, [sp, #8]
    70c2:	a804      	add	r0, sp, #16
    70c4:	4a06      	ldr	r2, [pc, #24]	; (70e0 <ULog::sendData(int)+0x3c>)
    70c6:	9100      	str	r1, [sp, #0]
    70c8:	2196      	movs	r1, #150	; 0x96
    70ca:	f014 fb73 	bl	1b7b4 <snprintf>
  usb.send(s);
    70ce:	a904      	add	r1, sp, #16
    70d0:	4804      	ldr	r0, [pc, #16]	; (70e4 <ULog::sendData(int)+0x40>)
    70d2:	f005 fa9b 	bl	c60c <UUSB::send(char const*)>
}
    70d6:	b02b      	add	sp, #172	; 0xac
    70d8:	f85d fb04 	ldr.w	pc, [sp], #4
    70dc:	0003d090 	.word	0x0003d090
    70e0:	20003e10 	.word	0x20003e10
    70e4:	2000fac4 	.word	0x2000fac4

000070e8 <ULog::stopLogging()>:
  toLog = true;
}

void ULog::stopLogging(void)
{
  toLog = false;
    70e8:	2300      	movs	r3, #0
    70ea:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
    70ee:	4770      	bx	lr

000070f0 <ULog::stateToLog()>:
  //   char s[MSL];
  // //  snprintf(s, MSL, "# state to log, flags, time=%d, mission=%d,...\n", logRowFlags[LOG_TIME], logRowFlags[LOG_MISSION]);
  //   snprintf(s, MSL, "#time %.3f mission %d, state %d.%d, logger line %d/%d\r\n", 
  //            time, mission, missionState, misLineNum, logRowCnt, logRowsCntMax);
  //   usb.send(s);
  if (not logFull)
    70f0:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    70f4:	b103      	cbz	r3, 70f8 <ULog::stateToLog()+0x8>
    70f6:	4770      	bx	lr

//////////////////////////////////////////////////////

bool ULog::addNewRowToLog()
{ // logRowCnt is next log entry - uses (logRowCnt-1)
  if (logRowCnt >= logRowsCntMax)
    70f8:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
{ 
    70fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (logRowCnt >= logRowsCntMax)
    70fe:	4293      	cmp	r3, r2
{ 
    7100:	b089      	sub	sp, #36	; 0x24
    7102:	4604      	mov	r4, r0
  if (logRowCnt >= logRowsCntMax)
    7104:	f280 80d6 	bge.w	72b4 <ULog::stateToLog()+0x1c4>
    return false;
  int8_t * pd = logBuffer + logRowCnt * logRowSize;
    7108:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    710c:	6d86      	ldr	r6, [r0, #88]	; 0x58
    710e:	fb01 f003 	mul.w	r0, r1, r3
    7112:	1835      	adds	r5, r6, r0
  if (uint32_t(0x20000000) > (uint32_t)pd and (uint32_t(0x20000000) < ((uint32_t)pd + (uint32_t)logRowSize))) 
    7114:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    7118:	f0c0 80c2 	bcc.w	72a0 <ULog::stateToLog()+0x1b0>
//     usb.send(s);
    logRowCnt++;
    if (logRowCnt >= logRowsCntMax)
      return false;    
  }
  logRowCnt++;
    711c:	3301      	adds	r3, #1
    711e:	4ac0      	ldr	r2, [pc, #768]	; (7420 <ULog::stateToLog()+0x330>)
    logFull = not addNewRowToLog();
    7120:	2100      	movs	r1, #0
  logRowCnt++;
    7122:	6163      	str	r3, [r4, #20]
    logFull = not addNewRowToLog();
    7124:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
    7128:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    712c:	f012 f9fe 	bl	1952c <__aeabi_ul2f>
    7130:	ee07 0a90 	vmov	s15, r0
      float t = service.time_sec() - log_start_time_sec;
    7134:	edd4 6a2d 	vldr	s13, [r4, #180]	; 0xb4
    7138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    713c:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
    7140:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 7418 <ULog::stateToLog()+0x328>
    7144:	ee27 7b05 	vmul.f64	d7, d7, d5
    7148:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      float t = service.time_sec() - log_start_time_sec;
    714c:	ee37 7a66 	vsub.f32	s14, s14, s13
  memcpy(pd, data, dataCnt);
    7150:	ee17 2a10 	vmov	r2, s14
    7154:	50ea      	str	r2, [r5, r3]
      if (logRowFlags[LOG_ACC])
    7156:	7fa3      	ldrb	r3, [r4, #30]
    7158:	2b00      	cmp	r3, #0
    715a:	f040 817d 	bne.w	7458 <ULog::stateToLog()+0x368>
      if (logRowFlags[LOG_GYRO])
    715e:	7fe3      	ldrb	r3, [r4, #31]
    7160:	2b00      	cmp	r3, #0
    7162:	f040 8149 	bne.w	73f8 <ULog::stateToLog()+0x308>
      if (logRowFlags[LOG_MOTV])
    7166:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    716a:	2b00      	cmp	r3, #0
    716c:	f040 8135 	bne.w	73da <ULog::stateToLog()+0x2ea>
      if (logRowFlags[LOG_ENC])
    7170:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    7174:	2b00      	cmp	r3, #0
    7176:	f040 8121 	bne.w	73bc <ULog::stateToLog()+0x2cc>
      if (logRowFlags[LOG_MOTA])
    717a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    717e:	2b00      	cmp	r3, #0
    7180:	f040 810c 	bne.w	739c <ULog::stateToLog()+0x2ac>
      if (logRowFlags[LOG_WHEELVEL])
    7184:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    7188:	2b00      	cmp	r3, #0
    718a:	f040 80f8 	bne.w	737e <ULog::stateToLog()+0x28e>
      if (logRowFlags[LOG_TURNRATE])
    718e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    7192:	2b00      	cmp	r3, #0
    7194:	f040 80e6 	bne.w	7364 <ULog::stateToLog()+0x274>
      if (logRowFlags[LOG_POSE])
    7198:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    719c:	2b00      	cmp	r3, #0
    719e:	f040 80cd 	bne.w	733c <ULog::stateToLog()+0x24c>
      if (logRowFlags[LOG_LINE])
    71a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    71a6:	2b00      	cmp	r3, #0
    71a8:	d05a      	beq.n	7260 <ULog::stateToLog()+0x170>
    71aa:	4b9e      	ldr	r3, [pc, #632]	; (7424 <ULog::stateToLog()+0x334>)
    71ac:	f1ad 0202 	sub.w	r2, sp, #2
          ldv[i] = int16_t(ls.lineSensorValue[i] * 1000); // ad.adcLSH[0] - ad.adcLSL[0];
    71b0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 7428 <ULog::stateToLog()+0x338>
    71b4:	f103 0120 	add.w	r1, r3, #32
    71b8:	ecf3 7a01 	vldmia	r3!, {s15}
    71bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (int i = 0; i < 8; i++)
    71c0:	428b      	cmp	r3, r1
          ldv[i] = int16_t(ls.lineSensorValue[i] * 1000); // ad.adcLSH[0] - ad.adcLSL[0];
    71c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    71c6:	ee17 0a90 	vmov	r0, s15
    71ca:	f822 0f02 	strh.w	r0, [r2, #2]!
        for (int i = 0; i < 8; i++)
    71ce:	d1f3      	bne.n	71b8 <ULog::stateToLog()+0xc8>
        fdv[0] = ls.lsLeftSide;  // word  8 and  9 (32 bit float) [cm]
    71d0:	4b96      	ldr	r3, [pc, #600]	; (742c <ULog::stateToLog()+0x33c>)
    71d2:	6999      	ldr	r1, [r3, #24]
        fdv[1] = ls.lsRightSide; // word 10 and 11 (32 bit float)
    71d4:	69da      	ldr	r2, [r3, #28]
        fdv[0] = ls.lsLeftSide;  // word  8 and  9 (32 bit float) [cm]
    71d6:	9104      	str	r1, [sp, #16]
        lsc[0] = ls.crossingLineCnt; // word 14
    71d8:	8c19      	ldrh	r1, [r3, #32]
        fdv[2] = ls.reflectAverage; // findCrossingLineVal; // word 12 og 13
    71da:	6b98      	ldr	r0, [r3, #56]	; 0x38
        fdv[1] = ls.lsRightSide; // word 10 and 11 (32 bit float)
    71dc:	9205      	str	r2, [sp, #20]
        lsc[0] = ls.crossingLineCnt; // word 14
    71de:	f8ad 101c 	strh.w	r1, [sp, #28]
          *flags = 1;
    71e2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
        if (ls.lsIsWhite)
    71e6:	7d19      	ldrb	r1, [r3, #20]
        fdv[2] = ls.reflectAverage; // findCrossingLineVal; // word 12 og 13
    71e8:	9006      	str	r0, [sp, #24]
        if (ls.lineSensorOn)
    71ea:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lsIsWhite)
    71ee:	b119      	cbz	r1, 71f8 <ULog::stateToLog()+0x108>
          *flags |= 2;
    71f0:	f042 0202 	orr.w	r2, r2, #2
    71f4:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lineValid)
    71f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    71fc:	b12a      	cbz	r2, 720a <ULog::stateToLog()+0x11a>
          *flags |= 4;
    71fe:	f89d 201e 	ldrb.w	r2, [sp, #30]
    7202:	f042 0204 	orr.w	r2, r2, #4
    7206:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.crossing)
    720a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    720e:	b12a      	cbz	r2, 721c <ULog::stateToLog()+0x12c>
          *flags |= 8;
    7210:	f89d 201e 	ldrb.w	r2, [sp, #30]
    7214:	f042 0208 	orr.w	r2, r2, #8
    7218:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lsPowerHigh)
    721c:	7d5a      	ldrb	r2, [r3, #21]
    721e:	b12a      	cbz	r2, 722c <ULog::stateToLog()+0x13c>
          *flags |= 0x10;
    7220:	f89d 201e 	ldrb.w	r2, [sp, #30]
    7224:	f042 0210 	orr.w	r2, r2, #16
    7228:	f88d 201e 	strb.w	r2, [sp, #30]
        if (ls.lsTiltCompensate)
    722c:	7d9b      	ldrb	r3, [r3, #22]
    722e:	2b00      	cmp	r3, #0
    7230:	d149      	bne.n	72c6 <ULog::stateToLog()+0x1d6>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7232:	6963      	ldr	r3, [r4, #20]
  memcpy(pd, data, dataCnt);
    7234:	466d      	mov	r5, sp
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7236:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    723a:	f8b4 c0d0 	ldrh.w	ip, [r4, #208]	; 0xd0
    723e:	3b01      	subs	r3, #1
    7240:	6da7      	ldr	r7, [r4, #88]	; 0x58
    7242:	fb02 cc03 	mla	ip, r2, r3, ip
  memcpy(pd, data, dataCnt);
    7246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7248:	eb07 060c 	add.w	r6, r7, ip
  memcpy(pd, data, dataCnt);
    724c:	f847 000c 	str.w	r0, [r7, ip]
    7250:	6071      	str	r1, [r6, #4]
    7252:	60b2      	str	r2, [r6, #8]
    7254:	60f3      	str	r3, [r6, #12]
    7256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7258:	6130      	str	r0, [r6, #16]
    725a:	6171      	str	r1, [r6, #20]
    725c:	61b2      	str	r2, [r6, #24]
    725e:	61f3      	str	r3, [r6, #28]
      if (logRowFlags[LOG_DIST])
    7260:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    7264:	2b00      	cmp	r3, #0
    7266:	d15a      	bne.n	731e <ULog::stateToLog()+0x22e>
      if (logRowFlags[LOG_BATT])
    7268:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    726c:	2b00      	cmp	r3, #0
    726e:	d149      	bne.n	7304 <ULog::stateToLog()+0x214>
      if (logRowFlags[LOG_TIMING])
    7270:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    7274:	bb73      	cbnz	r3, 72d4 <ULog::stateToLog()+0x1e4>
      if (logRowFlags[LOG_EXTRA])
    7276:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    727a:	b1fb      	cbz	r3, 72bc <ULog::stateToLog()+0x1cc>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    727c:	6962      	ldr	r2, [r4, #20]
  memcpy(pd, data, dataCnt);
    727e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7282:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    7286:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    728a:	3a01      	subs	r2, #1
    728c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    728e:	fb05 3302 	mla	r3, r5, r2, r3
  memcpy(pd, data, dataCnt);
    7292:	2250      	movs	r2, #80	; 0x50
    7294:	4418      	add	r0, r3
}
    7296:	b009      	add	sp, #36	; 0x24
    7298:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  memcpy(pd, data, dataCnt);
    729c:	f00f ba02 	b.w	166a4 <memcpy>
  if (uint32_t(0x20000000) > (uint32_t)pd and (uint32_t(0x20000000) < ((uint32_t)pd + (uint32_t)logRowSize))) 
    72a0:	eb01 0c05 	add.w	ip, r1, r5
    72a4:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
    72a8:	f67f af38 	bls.w	711c <ULog::stateToLog()+0x2c>
    logRowCnt++;
    72ac:	3301      	adds	r3, #1
    if (logRowCnt >= logRowsCntMax)
    72ae:	429a      	cmp	r2, r3
    logRowCnt++;
    72b0:	6163      	str	r3, [r4, #20]
    if (logRowCnt >= logRowsCntMax)
    72b2:	dc05      	bgt.n	72c0 <ULog::stateToLog()+0x1d0>
  toLog = false;
    72b4:	f44f 7380 	mov.w	r3, #256	; 0x100
    72b8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
}
    72bc:	b009      	add	sp, #36	; 0x24
    72be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72c0:	4408      	add	r0, r1
    72c2:	1835      	adds	r5, r6, r0
    72c4:	e72a      	b.n	711c <ULog::stateToLog()+0x2c>
          *flags |= 0x20;
    72c6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    72ca:	f043 0320 	orr.w	r3, r3, #32
    72ce:	f88d 301e 	strb.w	r3, [sp, #30]
    72d2:	e7ae      	b.n	7232 <ULog::stateToLog()+0x142>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72d4:	6963      	ldr	r3, [r4, #20]
    72d6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    72da:	f8b4 c0d6 	ldrh.w	ip, [r4, #214]	; 0xd6
    72de:	3b01      	subs	r3, #1
    72e0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    72e2:	fb02 cc03 	mla	ip, r2, r3, ip
  memcpy(pd, data, dataCnt);
    72e6:	4d52      	ldr	r5, [pc, #328]	; (7430 <ULog::stateToLog()+0x340>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    72e8:	eb07 060c 	add.w	r6, r7, ip
  memcpy(pd, data, dataCnt);
    72ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    72ee:	f847 000c 	str.w	r0, [r7, ip]
    72f2:	6071      	str	r1, [r6, #4]
    72f4:	60b2      	str	r2, [r6, #8]
    72f6:	60f3      	str	r3, [r6, #12]
    72f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    72fa:	6130      	str	r0, [r6, #16]
    72fc:	6171      	str	r1, [r6, #20]
    72fe:	61b2      	str	r2, [r6, #24]
    7300:	61f3      	str	r3, [r6, #28]
}
    7302:	e7b8      	b.n	7276 <ULog::stateToLog()+0x186>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7304:	6962      	ldr	r2, [r4, #20]
    7306:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
  memcpy(pd, data, dataCnt);
    730a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    730c:	3a01      	subs	r2, #1
    730e:	4949      	ldr	r1, [pc, #292]	; (7434 <ULog::stateToLog()+0x344>)
  memcpy(pd, data, dataCnt);
    7310:	fb00 3302 	mla	r3, r0, r2, r3
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7314:	f8b4 20d4 	ldrh.w	r2, [r4, #212]	; 0xd4
    7318:	6949      	ldr	r1, [r1, #20]
  memcpy(pd, data, dataCnt);
    731a:	5099      	str	r1, [r3, r2]
}
    731c:	e7a8      	b.n	7270 <ULog::stateToLog()+0x180>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    731e:	6962      	ldr	r2, [r4, #20]
    7320:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    7324:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    7328:	3a01      	subs	r2, #1
    732a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    732c:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    7330:	4a41      	ldr	r2, [pc, #260]	; (7438 <ULog::stateToLog()+0x348>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7332:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    7334:	ca03      	ldmia	r2!, {r0, r1}
    7336:	50e8      	str	r0, [r5, r3]
    7338:	6071      	str	r1, [r6, #4]
}
    733a:	e795      	b.n	7268 <ULog::stateToLog()+0x178>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    733c:	6963      	ldr	r3, [r4, #20]
    733e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    7342:	f8b4 60ce 	ldrh.w	r6, [r4, #206]	; 0xce
    7346:	3b01      	subs	r3, #1
    7348:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    734c:	fb02 6603 	mla	r6, r2, r3, r6
  memcpy(pd, data, dataCnt);
    7350:	4d3a      	ldr	r5, [pc, #232]	; (743c <ULog::stateToLog()+0x34c>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7352:	eb0c 0706 	add.w	r7, ip, r6
  memcpy(pd, data, dataCnt);
    7356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7358:	f84c 0006 	str.w	r0, [ip, r6]
    735c:	6079      	str	r1, [r7, #4]
    735e:	60ba      	str	r2, [r7, #8]
    7360:	60fb      	str	r3, [r7, #12]
}
    7362:	e71e      	b.n	71a2 <ULog::stateToLog()+0xb2>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7364:	6962      	ldr	r2, [r4, #20]
    7366:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
  memcpy(pd, data, dataCnt);
    736a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    736c:	3a01      	subs	r2, #1
        float v = encoder.robotTurnrate;
    736e:	4934      	ldr	r1, [pc, #208]	; (7440 <ULog::stateToLog()+0x350>)
  memcpy(pd, data, dataCnt);
    7370:	fb00 3302 	mla	r3, r0, r2, r3
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7374:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
  memcpy(pd, data, dataCnt);
    7378:	6f89      	ldr	r1, [r1, #120]	; 0x78
    737a:	5099      	str	r1, [r3, r2]
    737c:	e70c      	b.n	7198 <ULog::stateToLog()+0xa8>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    737e:	6962      	ldr	r2, [r4, #20]
    7380:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    7384:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    7388:	3a01      	subs	r2, #1
    738a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    738c:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    7390:	4a2c      	ldr	r2, [pc, #176]	; (7444 <ULog::stateToLog()+0x354>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7392:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    7394:	ca03      	ldmia	r2!, {r0, r1}
    7396:	50e8      	str	r0, [r5, r3]
    7398:	6071      	str	r1, [r6, #4]
}
    739a:	e6f8      	b.n	718e <ULog::stateToLog()+0x9e>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    739c:	6963      	ldr	r3, [r4, #20]
    739e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    73a2:	f8b4 50c6 	ldrh.w	r5, [r4, #198]	; 0xc6
    73a6:	3b01      	subs	r3, #1
    73a8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    73aa:	fb02 5503 	mla	r5, r2, r3, r5
  memcpy(pd, data, dataCnt);
    73ae:	4b26      	ldr	r3, [pc, #152]	; (7448 <ULog::stateToLog()+0x358>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    73b0:	197e      	adds	r6, r7, r5
  memcpy(pd, data, dataCnt);
    73b2:	cb07      	ldmia	r3!, {r0, r1, r2}
    73b4:	5178      	str	r0, [r7, r5]
    73b6:	6071      	str	r1, [r6, #4]
    73b8:	60b2      	str	r2, [r6, #8]
}
    73ba:	e6e3      	b.n	7184 <ULog::stateToLog()+0x94>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    73bc:	6962      	ldr	r2, [r4, #20]
    73be:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    73c2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    73c6:	3a01      	subs	r2, #1
    73c8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73ca:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    73ce:	4a1f      	ldr	r2, [pc, #124]	; (744c <ULog::stateToLog()+0x35c>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    73d0:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    73d2:	ca03      	ldmia	r2!, {r0, r1}
    73d4:	50e8      	str	r0, [r5, r3]
    73d6:	6071      	str	r1, [r6, #4]
}
    73d8:	e6cf      	b.n	717a <ULog::stateToLog()+0x8a>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    73da:	6962      	ldr	r2, [r4, #20]
    73dc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    73e0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    73e4:	3a01      	subs	r2, #1
    73e6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73e8:	fb01 3302 	mla	r3, r1, r2, r3
  memcpy(pd, data, dataCnt);
    73ec:	4a18      	ldr	r2, [pc, #96]	; (7450 <ULog::stateToLog()+0x360>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    73ee:	18ee      	adds	r6, r5, r3
  memcpy(pd, data, dataCnt);
    73f0:	ca03      	ldmia	r2!, {r0, r1}
    73f2:	50e8      	str	r0, [r5, r3]
    73f4:	6071      	str	r1, [r6, #4]
}
    73f6:	e6bb      	b.n	7170 <ULog::stateToLog()+0x80>
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    73f8:	6963      	ldr	r3, [r4, #20]
    73fa:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    73fe:	f8b4 50be 	ldrh.w	r5, [r4, #190]	; 0xbe
    7402:	3b01      	subs	r3, #1
    7404:	6da7      	ldr	r7, [r4, #88]	; 0x58
    7406:	fb02 5503 	mla	r5, r2, r3, r5
  memcpy(pd, data, dataCnt);
    740a:	4b12      	ldr	r3, [pc, #72]	; (7454 <ULog::stateToLog()+0x364>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    740c:	197e      	adds	r6, r7, r5
  memcpy(pd, data, dataCnt);
    740e:	cb07      	ldmia	r3!, {r0, r1, r2}
    7410:	5178      	str	r0, [r7, r5]
    7412:	6071      	str	r1, [r6, #4]
    7414:	60b2      	str	r2, [r6, #8]
}
    7416:	e6a6      	b.n	7166 <ULog::stateToLog()+0x76>
    7418:	a0b5ed8d 	.word	0xa0b5ed8d
    741c:	3eb0c6f7 	.word	0x3eb0c6f7
    7420:	2000e0c8 	.word	0x2000e0c8
    7424:	2000f418 	.word	0x2000f418
    7428:	447a0000 	.word	0x447a0000
    742c:	2000f390 	.word	0x2000f390
    7430:	2000f6d4 	.word	0x2000f6d4
    7434:	2000f660 	.word	0x2000f660
    7438:	2000f1d0 	.word	0x2000f1d0
    743c:	2000ec8c 	.word	0x2000ec8c
    7440:	2000ec40 	.word	0x2000ec40
    7444:	2000ec84 	.word	0x2000ec84
    7448:	2000eaa4 	.word	0x2000eaa4
    744c:	2000ec74 	.word	0x2000ec74
    7450:	2000f4e0 	.word	0x2000f4e0
    7454:	2000dfec 	.word	0x2000dfec
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    7458:	6963      	ldr	r3, [r4, #20]
    745a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    745e:	f8b4 50bc 	ldrh.w	r5, [r4, #188]	; 0xbc
    7462:	3b01      	subs	r3, #1
    7464:	6da7      	ldr	r7, [r4, #88]	; 0x58
    7466:	fb02 5503 	mla	r5, r2, r3, r5
  memcpy(pd, data, dataCnt);
    746a:	4b03      	ldr	r3, [pc, #12]	; (7478 <ULog::stateToLog()+0x388>)
  int8_t * pd = logBuffer + (logRowCnt - 1) * logRowSize + logRowPos[item];
    746c:	197e      	adds	r6, r7, r5
  memcpy(pd, data, dataCnt);
    746e:	cb07      	ldmia	r3!, {r0, r1, r2}
    7470:	5178      	str	r0, [r7, r5]
    7472:	6071      	str	r1, [r6, #4]
    7474:	60b2      	str	r2, [r6, #8]
}
    7476:	e672      	b.n	715e <ULog::stateToLog()+0x6e>
    7478:	2000e008 	.word	0x2000e008

0000747c <ULog::writeTime(signed char*, int, char*, int)>:
  if (row < 0)
    747c:	2a00      	cmp	r2, #0
{ // write time in seconds to string
    747e:	4684      	mov	ip, r0
  float v = *(float*)data;
    7480:	ed91 7a00 	vldr	s14, [r1]
{ // write time in seconds to string
    7484:	4618      	mov	r0, r3
    7486:	b510      	push	{r4, lr}
    7488:	b084      	sub	sp, #16
  if (row < 0)
    748a:	db09      	blt.n	74a0 <ULog::writeTime(signed char*, int, char*, int)+0x24>
    snprintf(p1, maxLength, "%.4f ", v);
    748c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7490:	4a0f      	ldr	r2, [pc, #60]	; (74d0 <ULog::writeTime(signed char*, int, char*, int)+0x54>)
    7492:	9906      	ldr	r1, [sp, #24]
    7494:	ed8d 7b00 	vstr	d7, [sp]
    7498:	f014 f98c 	bl	1b7b4 <snprintf>
}
    749c:	b004      	add	sp, #16
    749e:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d    time %.4f sec, from %s (%d)\r\n", col++, v, robot.getRobotName(), robot.deviceID);
    74a0:	f8dc 30ac 	ldr.w	r3, [ip, #172]	; 0xac
    74a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    return robotname[deviceID];
    74a8:	4c0a      	ldr	r4, [pc, #40]	; (74d4 <ULog::writeTime(signed char*, int, char*, int)+0x58>)
    74aa:	1c5a      	adds	r2, r3, #1
    74ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    74ae:	f8cc 20ac 	str.w	r2, [ip, #172]	; 0xac
    74b2:	f101 0c26 	add.w	ip, r1, #38	; 0x26
    74b6:	4a08      	ldr	r2, [pc, #32]	; (74d8 <ULog::writeTime(signed char*, int, char*, int)+0x5c>)
    74b8:	ed8d 7b00 	vstr	d7, [sp]
    74bc:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    74c0:	e9cd 4102 	strd	r4, r1, [sp, #8]
    74c4:	9906      	ldr	r1, [sp, #24]
    74c6:	f014 f975 	bl	1b7b4 <snprintf>
}
    74ca:	b004      	add	sp, #16
    74cc:	bd10      	pop	{r4, pc}
    74ce:	bf00      	nop
    74d0:	20004594 	.word	0x20004594
    74d4:	2000f660 	.word	0x2000f660
    74d8:	2000456c 	.word	0x2000456c

000074dc <ULog::writeAcc(signed char*, int, char*, int)>:
  if (row < 0)
    74dc:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d %2d Acc x,y,z [m/s2]: %g %g %g\r\n", col, col+1, col+2, v[0], v[1], v[2]);
    74de:	ed91 5a02 	vldr	s10, [r1, #8]
    74e2:	ed91 6a01 	vldr	s12, [r1, #4]
    74e6:	ed91 7a00 	vldr	s14, [r1]
{
    74ea:	b510      	push	{r4, lr}
    74ec:	4604      	mov	r4, r0
    74ee:	b088      	sub	sp, #32
    74f0:	4618      	mov	r0, r3
  if (row < 0)
    74f2:	db11      	blt.n	7518 <ULog::writeAcc(signed char*, int, char*, int)+0x3c>
    snprintf(p1, maxLength, "%f %f %f ", v[0], v[1], v[2]);
    74f4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    74f8:	4a16      	ldr	r2, [pc, #88]	; (7554 <ULog::writeAcc(signed char*, int, char*, int)+0x78>)
    74fa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    74fe:	990a      	ldr	r1, [sp, #40]	; 0x28
    7500:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7504:	ed8d 5b04 	vstr	d5, [sp, #16]
    7508:	ed8d 6b02 	vstr	d6, [sp, #8]
    750c:	ed8d 7b00 	vstr	d7, [sp]
    7510:	f014 f950 	bl	1b7b4 <snprintf>
}
    7514:	b008      	add	sp, #32
    7516:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d %2d Acc x,y,z [m/s2]: %g %g %g\r\n", col, col+1, col+2, v[0], v[1], v[2]);
    7518:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    751c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7520:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7524:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7528:	1c9a      	adds	r2, r3, #2
    752a:	1c59      	adds	r1, r3, #1
    752c:	9201      	str	r2, [sp, #4]
    752e:	9100      	str	r1, [sp, #0]
    7530:	4a09      	ldr	r2, [pc, #36]	; (7558 <ULog::writeAcc(signed char*, int, char*, int)+0x7c>)
    7532:	990a      	ldr	r1, [sp, #40]	; 0x28
    7534:	ed8d 5b06 	vstr	d5, [sp, #24]
    7538:	ed8d 6b04 	vstr	d6, [sp, #16]
    753c:	ed8d 7b02 	vstr	d7, [sp, #8]
    7540:	f014 f938 	bl	1b7b4 <snprintf>
    col += 3;
    7544:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7548:	3303      	adds	r3, #3
    754a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    754e:	b008      	add	sp, #32
    7550:	bd10      	pop	{r4, pc}
    7552:	bf00      	nop
    7554:	200043f8 	.word	0x200043f8
    7558:	200043cc 	.word	0x200043cc

0000755c <ULog::writeGyro(signed char*, int, char*, int)>:
  if (row < 0)
    755c:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d %2d Gyro x,y,z [deg/s]: %g %g %g\r\n", 
    755e:	ed91 5a02 	vldr	s10, [r1, #8]
    7562:	ed91 6a01 	vldr	s12, [r1, #4]
    7566:	ed91 7a00 	vldr	s14, [r1]
{
    756a:	b510      	push	{r4, lr}
    756c:	4604      	mov	r4, r0
    756e:	b088      	sub	sp, #32
    7570:	4618      	mov	r0, r3
  if (row < 0)
    7572:	db11      	blt.n	7598 <ULog::writeGyro(signed char*, int, char*, int)+0x3c>
    snprintf(p1, maxLength, "%.4f %.4f %.4f ", v[0], v[1], v[2]);
    7574:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7578:	4a16      	ldr	r2, [pc, #88]	; (75d4 <ULog::writeGyro(signed char*, int, char*, int)+0x78>)
    757a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    757e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7580:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7584:	ed8d 5b04 	vstr	d5, [sp, #16]
    7588:	ed8d 6b02 	vstr	d6, [sp, #8]
    758c:	ed8d 7b00 	vstr	d7, [sp]
    7590:	f014 f910 	bl	1b7b4 <snprintf>
}
    7594:	b008      	add	sp, #32
    7596:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d %2d Gyro x,y,z [deg/s]: %g %g %g\r\n", 
    7598:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    759c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    75a0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    75a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    75a8:	1c9a      	adds	r2, r3, #2
    75aa:	1c59      	adds	r1, r3, #1
    75ac:	9201      	str	r2, [sp, #4]
    75ae:	9100      	str	r1, [sp, #0]
    75b0:	4a09      	ldr	r2, [pc, #36]	; (75d8 <ULog::writeGyro(signed char*, int, char*, int)+0x7c>)
    75b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    75b4:	ed8d 5b06 	vstr	d5, [sp, #24]
    75b8:	ed8d 6b04 	vstr	d6, [sp, #16]
    75bc:	ed8d 7b02 	vstr	d7, [sp, #8]
    75c0:	f014 f8f8 	bl	1b7b4 <snprintf>
    col += 3;
    75c4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    75c8:	3303      	adds	r3, #3
    75ca:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    75ce:	b008      	add	sp, #32
    75d0:	bd10      	pop	{r4, pc}
    75d2:	bf00      	nop
    75d4:	200044fc 	.word	0x200044fc
    75d8:	200044cc 	.word	0x200044cc

000075dc <ULog::writeCurrent(signed char*, int, char*, int)>:
  if (row < 0)
    75dc:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d Motor current left, right, supply [A]: %.3f %.3f %.3f\r\n", col, col+2, v[0], v[1], v[2]);
    75de:	ed91 5a02 	vldr	s10, [r1, #8]
    75e2:	ed91 6a01 	vldr	s12, [r1, #4]
    75e6:	ed91 7a00 	vldr	s14, [r1]
{
    75ea:	b510      	push	{r4, lr}
    75ec:	4604      	mov	r4, r0
    75ee:	b088      	sub	sp, #32
    75f0:	4618      	mov	r0, r3
  if (row < 0)
    75f2:	db11      	blt.n	7618 <ULog::writeCurrent(signed char*, int, char*, int)+0x3c>
    snprintf(p1, maxLength, "%.3f %.3f %.3f ", v[0], v[1], v[2]);
    75f4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    75f8:	4a15      	ldr	r2, [pc, #84]	; (7650 <ULog::writeCurrent(signed char*, int, char*, int)+0x74>)
    75fa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    75fe:	990a      	ldr	r1, [sp, #40]	; 0x28
    7600:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7604:	ed8d 5b04 	vstr	d5, [sp, #16]
    7608:	ed8d 6b02 	vstr	d6, [sp, #8]
    760c:	ed8d 7b00 	vstr	d7, [sp]
    7610:	f014 f8d0 	bl	1b7b4 <snprintf>
}
    7614:	b008      	add	sp, #32
    7616:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d Motor current left, right, supply [A]: %.3f %.3f %.3f\r\n", col, col+2, v[0], v[1], v[2]);
    7618:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    761c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7620:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7624:	4a0b      	ldr	r2, [pc, #44]	; (7654 <ULog::writeCurrent(signed char*, int, char*, int)+0x78>)
    7626:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    762a:	1c99      	adds	r1, r3, #2
    762c:	ed8d 5b06 	vstr	d5, [sp, #24]
    7630:	9100      	str	r1, [sp, #0]
    7632:	990a      	ldr	r1, [sp, #40]	; 0x28
    7634:	ed8d 6b04 	vstr	d6, [sp, #16]
    7638:	ed8d 7b02 	vstr	d7, [sp, #8]
    763c:	f014 f8ba 	bl	1b7b4 <snprintf>
    col += 3;
    7640:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7644:	3303      	adds	r3, #3
    7646:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    764a:	b008      	add	sp, #32
    764c:	bd10      	pop	{r4, pc}
    764e:	bf00      	nop
    7650:	20003edc 	.word	0x20003edc
    7654:	20003e98 	.word	0x20003e98

00007658 <ULog::writeVel(signed char*, int, char*, int)>:
  if (row < 0)
    7658:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d Wheel velocity (m/s) left, right: %.4f %.4f\r\n", col, col +1, v[0], v[1]);
    765a:	ed91 6a01 	vldr	s12, [r1, #4]
    765e:	ed91 7a00 	vldr	s14, [r1]
{
    7662:	b510      	push	{r4, lr}
    7664:	4604      	mov	r4, r0
    7666:	b086      	sub	sp, #24
    7668:	4618      	mov	r0, r3
  if (row < 0)
    766a:	db0d      	blt.n	7688 <ULog::writeVel(signed char*, int, char*, int)+0x30>
    snprintf(p1, maxLength, "%.4f %.4f ", v[0], v[1]);
    766c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7670:	4a11      	ldr	r2, [pc, #68]	; (76b8 <ULog::writeVel(signed char*, int, char*, int)+0x60>)
    7672:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7676:	9908      	ldr	r1, [sp, #32]
    7678:	ed8d 6b02 	vstr	d6, [sp, #8]
    767c:	ed8d 7b00 	vstr	d7, [sp]
    7680:	f014 f898 	bl	1b7b4 <snprintf>
}
    7684:	b006      	add	sp, #24
    7686:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d Wheel velocity (m/s) left, right: %.4f %.4f\r\n", col, col +1, v[0], v[1]);
    7688:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    768c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7690:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7694:	4a09      	ldr	r2, [pc, #36]	; (76bc <ULog::writeVel(signed char*, int, char*, int)+0x64>)
    7696:	1c59      	adds	r1, r3, #1
    7698:	ed8d 6b04 	vstr	d6, [sp, #16]
    769c:	9100      	str	r1, [sp, #0]
    769e:	9908      	ldr	r1, [sp, #32]
    76a0:	ed8d 7b02 	vstr	d7, [sp, #8]
    76a4:	f014 f886 	bl	1b7b4 <snprintf>
    col += 2;
    76a8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    76ac:	3302      	adds	r3, #2
    76ae:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    76b2:	b006      	add	sp, #24
    76b4:	bd10      	pop	{r4, pc}
    76b6:	bf00      	nop
    76b8:	2000446c 	.word	0x2000446c
    76bc:	20004430 	.word	0x20004430

000076c0 <ULog::writeEnc(signed char*, int, char*, int)>:
{
    76c0:	b510      	push	{r4, lr}
  if (row < 0)
    76c2:	2a00      	cmp	r2, #0
{
    76c4:	b084      	sub	sp, #16
    76c6:	4604      	mov	r4, r0
    76c8:	468c      	mov	ip, r1
    76ca:	4618      	mov	r0, r3
    76cc:	9906      	ldr	r1, [sp, #24]
  if (row < 0)
    76ce:	db08      	blt.n	76e2 <ULog::writeEnc(signed char*, int, char*, int)+0x22>
    snprintf(p1, maxLength, "%ld %ld ", v[0], v[1]);
    76d0:	4a0e      	ldr	r2, [pc, #56]	; (770c <ULog::writeEnc(signed char*, int, char*, int)+0x4c>)
    76d2:	e9dc 3400 	ldrd	r3, r4, [ip]
    76d6:	9406      	str	r4, [sp, #24]
}
    76d8:	b004      	add	sp, #16
    76da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(p1, maxLength, "%ld %ld ", v[0], v[1]);
    76de:	f014 b869 	b.w	1b7b4 <snprintf>
    snprintf(p1, maxLength, "%% %2d %2d Encoder left, right: %ld %ld\r\n", col, col+1, v[0], v[1]);
    76e2:	f8dc 2004 	ldr.w	r2, [ip, #4]
    76e6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    76ea:	9202      	str	r2, [sp, #8]
    76ec:	f8dc 2000 	ldr.w	r2, [ip]
    76f0:	9201      	str	r2, [sp, #4]
    76f2:	1c5a      	adds	r2, r3, #1
    76f4:	9200      	str	r2, [sp, #0]
    76f6:	4a06      	ldr	r2, [pc, #24]	; (7710 <ULog::writeEnc(signed char*, int, char*, int)+0x50>)
    76f8:	f014 f85c 	bl	1b7b4 <snprintf>
    col += 2;
    76fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7700:	3302      	adds	r3, #2
    7702:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7706:	b004      	add	sp, #16
    7708:	bd10      	pop	{r4, pc}
    770a:	bf00      	nop
    770c:	20003e8c 	.word	0x20003e8c
    7710:	20004404 	.word	0x20004404

00007714 <ULog::writeMotVolt(signed char*, int, char*, int)>:
  if (row < 0)
    7714:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d Motor voltage (V) left, right: %.2f %.2f\r\n", col, col+1, v[0], v[1]);
    7716:	ed91 6a01 	vldr	s12, [r1, #4]
    771a:	ed91 7a00 	vldr	s14, [r1]
{
    771e:	b510      	push	{r4, lr}
    7720:	4604      	mov	r4, r0
    7722:	b086      	sub	sp, #24
    7724:	4618      	mov	r0, r3
  if (row < 0)
    7726:	db0d      	blt.n	7744 <ULog::writeMotVolt(signed char*, int, char*, int)+0x30>
    snprintf(p1, maxLength, "%.2f %.2f ", v[0], v[1]);
    7728:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    772c:	4a11      	ldr	r2, [pc, #68]	; (7774 <ULog::writeMotVolt(signed char*, int, char*, int)+0x60>)
    772e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7732:	9908      	ldr	r1, [sp, #32]
    7734:	ed8d 6b02 	vstr	d6, [sp, #8]
    7738:	ed8d 7b00 	vstr	d7, [sp]
    773c:	f014 f83a 	bl	1b7b4 <snprintf>
}
    7740:	b006      	add	sp, #24
    7742:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d Motor voltage (V) left, right: %.2f %.2f\r\n", col, col+1, v[0], v[1]);
    7744:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7748:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    774c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7750:	4a09      	ldr	r2, [pc, #36]	; (7778 <ULog::writeMotVolt(signed char*, int, char*, int)+0x64>)
    7752:	1c59      	adds	r1, r3, #1
    7754:	ed8d 6b04 	vstr	d6, [sp, #16]
    7758:	9100      	str	r1, [sp, #0]
    775a:	9908      	ldr	r1, [sp, #32]
    775c:	ed8d 7b02 	vstr	d7, [sp, #8]
    7760:	f014 f828 	bl	1b7b4 <snprintf>
    col += 2;
    7764:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7768:	3302      	adds	r3, #2
    776a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    776e:	b006      	add	sp, #24
    7770:	bd10      	pop	{r4, pc}
    7772:	bf00      	nop
    7774:	20003f24 	.word	0x20003f24
    7778:	20003eec 	.word	0x20003eec

0000777c <ULog::writePose(signed char*, int, char*, int)>:
  if (row < 0)
    777c:	2a00      	cmp	r2, #0
    snprintf(p1, maxLength, "%% %2d %2d %2d %2d Pose x,y,h,tilt (m,m,rad,rad): %.4f %.4f %.4f %.4f\r\n", col, col+1, col+2, col+3, v[0], v[1], v[2], v[3]);
    777e:	ed91 4a03 	vldr	s8, [r1, #12]
    7782:	ed91 5a02 	vldr	s10, [r1, #8]
    7786:	ed91 6a01 	vldr	s12, [r1, #4]
    778a:	ed91 7a00 	vldr	s14, [r1]
{
    778e:	b510      	push	{r4, lr}
    7790:	4604      	mov	r4, r0
    7792:	b08c      	sub	sp, #48	; 0x30
    7794:	4618      	mov	r0, r3
  if (row < 0)
    7796:	db15      	blt.n	77c4 <ULog::writePose(signed char*, int, char*, int)+0x48>
    snprintf(p1, maxLength, "%.4f %.4f %.5f %.5f ", v[0], v[1], v[2], v[3]);
    7798:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    779c:	4a1b      	ldr	r2, [pc, #108]	; (780c <ULog::writePose(signed char*, int, char*, int)+0x90>)
    779e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    77a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    77a4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    77a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    77ac:	ed8d 4b06 	vstr	d4, [sp, #24]
    77b0:	ed8d 5b04 	vstr	d5, [sp, #16]
    77b4:	ed8d 6b02 	vstr	d6, [sp, #8]
    77b8:	ed8d 7b00 	vstr	d7, [sp]
    77bc:	f013 fffa 	bl	1b7b4 <snprintf>
}
    77c0:	b00c      	add	sp, #48	; 0x30
    77c2:	bd10      	pop	{r4, pc}
    snprintf(p1, maxLength, "%% %2d %2d %2d %2d Pose x,y,h,tilt (m,m,rad,rad): %.4f %.4f %.4f %.4f\r\n", col, col+1, col+2, col+3, v[0], v[1], v[2], v[3]);
    77c4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    77c8:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    77cc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    77d0:	1cda      	adds	r2, r3, #3
    77d2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    77d6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    77da:	1c99      	adds	r1, r3, #2
    77dc:	9202      	str	r2, [sp, #8]
    77de:	1c5a      	adds	r2, r3, #1
    77e0:	ed8d 4b0a 	vstr	d4, [sp, #40]	; 0x28
    77e4:	e9cd 2100 	strd	r2, r1, [sp]
    77e8:	ed8d 5b08 	vstr	d5, [sp, #32]
    77ec:	4a08      	ldr	r2, [pc, #32]	; (7810 <ULog::writePose(signed char*, int, char*, int)+0x94>)
    77ee:	990e      	ldr	r1, [sp, #56]	; 0x38
    77f0:	ed8d 6b06 	vstr	d6, [sp, #24]
    77f4:	ed8d 7b04 	vstr	d7, [sp, #16]
    77f8:	f013 ffdc 	bl	1b7b4 <snprintf>
    col += 4;
    77fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7800:	3304      	adds	r3, #4
    7802:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7806:	b00c      	add	sp, #48	; 0x30
    7808:	bd10      	pop	{r4, pc}
    780a:	bf00      	nop
    780c:	20004554 	.word	0x20004554
    7810:	2000450c 	.word	0x2000450c

00007814 <ULog::writeTiming(signed char*, int, char*, int)>:
  if (row < 0)
    7814:	2a00      	cmp	r2, #0
{
    7816:	b530      	push	{r4, r5, lr}
    7818:	4604      	mov	r4, r0
    781a:	b087      	sub	sp, #28
    781c:	4618      	mov	r0, r3
  if (row < 0)
    781e:	db28      	blt.n	7872 <ULog::writeTiming(signed char*, int, char*, int)+0x5e>
    v2[3] = v[3];
    7820:	68cb      	ldr	r3, [r1, #12]
    if (v2[1] > 3000)
    7822:	f640 3cb8 	movw	ip, #3000	; 0xbb8
    v2[2] = v[2];
    7826:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
      v2[3] = -1;
    782a:	4563      	cmp	r3, ip
    782c:	bfc8      	it	gt
    782e:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
      v2[1] = -1;
    7832:	4564      	cmp	r4, ip
    7834:	bfc8      	it	gt
    7836:	f04f 34ff 	movgt.w	r4, #4294967295	; 0xffffffff
      v2[2] = -1;
    783a:	4562      	cmp	r2, ip
    783c:	bfc8      	it	gt
    783e:	f04f 32ff 	movgt.w	r2, #4294967295	; 0xffffffff
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    7842:	9302      	str	r3, [sp, #8]
    7844:	9201      	str	r2, [sp, #4]
    7846:	9400      	str	r4, [sp, #0]
    v2[4] = v[4];
    7848:	690c      	ldr	r4, [r1, #16]
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    784a:	680b      	ldr	r3, [r1, #0]
      v2[4] = -1;
    784c:	4564      	cmp	r4, ip
    784e:	bfc8      	it	gt
    7850:	f04f 34ff 	movgt.w	r4, #4294967295	; 0xffffffff
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    7854:	4a0e      	ldr	r2, [pc, #56]	; (7890 <ULog::writeTiming(signed char*, int, char*, int)+0x7c>)
    7856:	9403      	str	r4, [sp, #12]
    v2[6] = v[6];
    7858:	698c      	ldr	r4, [r1, #24]
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    785a:	694d      	ldr	r5, [r1, #20]
      v2[6] = -1;
    785c:	4564      	cmp	r4, ip
    785e:	bfc8      	it	gt
    7860:	f04f 34ff 	movgt.w	r4, #4294967295	; 0xffffffff
    snprintf(p1, maxLength, "%lu %ld %ld %ld %ld %ld %ld ", uint32_t(v[0]), v2[1], v2[2], v2[3], v2[4], v[5], v2[6]);
    7864:	990a      	ldr	r1, [sp, #40]	; 0x28
    7866:	9504      	str	r5, [sp, #16]
    7868:	9405      	str	r4, [sp, #20]
    786a:	f013 ffa3 	bl	1b7b4 <snprintf>
}
    786e:	b007      	add	sp, #28
    7870:	bd30      	pop	{r4, r5, pc}
    snprintf(p1, maxLength, "%% %2d %2d timing (CPU_clock(us), ad, sensor, control, end, T-sample, load o/oo)\r\n",
    7872:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7876:	4a07      	ldr	r2, [pc, #28]	; (7894 <ULog::writeTiming(signed char*, int, char*, int)+0x80>)
    7878:	1d9d      	adds	r5, r3, #6
    787a:	990a      	ldr	r1, [sp, #40]	; 0x28
    787c:	9500      	str	r5, [sp, #0]
    787e:	f013 ff99 	bl	1b7b4 <snprintf>
    col += 7;
    7882:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7886:	3307      	adds	r3, #7
    7888:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    788c:	b007      	add	sp, #28
    788e:	bd30      	pop	{r4, r5, pc}
    7890:	20003e78 	.word	0x20003e78
    7894:	20003e24 	.word	0x20003e24

00007898 <ULog::writeExtra(signed char*, int, char*, int)>:
{
    7898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (row < 0)
    789c:	2a00      	cmp	r2, #0
{
    789e:	b083      	sub	sp, #12
    78a0:	460d      	mov	r5, r1
    78a2:	461c      	mov	r4, r3
    78a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if (row < 0)
    78a6:	db19      	blt.n	78dc <ULog::writeExtra(signed char*, int, char*, int)+0x44>
      m = 0;
    78a8:	2600      	movs	r6, #0
        snprintf(p1, maxLength - m, "%g ", v[i]);
    78aa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 7948 <ULog::writeExtra(signed char*, int, char*, int)+0xb0>
    78ae:	f101 0850 	add.w	r8, r1, #80	; 0x50
    78b2:	ecb5 7a01 	vldmia	r5!, {s14}
    78b6:	1bb9      	subs	r1, r7, r6
    78b8:	464a      	mov	r2, r9
    78ba:	4620      	mov	r0, r4
    78bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    78c0:	ed8d 7b00 	vstr	d7, [sp]
    78c4:	f013 ff76 	bl	1b7b4 <snprintf>
        n = strlen(p1);
    78c8:	4620      	mov	r0, r4
    78ca:	f015 fcf9 	bl	1d2c0 <strlen>
      for (int i = 0; i < dataloggerExtraSize; i++)
    78ce:	4545      	cmp	r5, r8
        m += n;
    78d0:	4406      	add	r6, r0
        p1 += n;
    78d2:	4404      	add	r4, r0
      for (int i = 0; i < dataloggerExtraSize; i++)
    78d4:	d1ed      	bne.n	78b2 <ULog::writeExtra(signed char*, int, char*, int)+0x1a>
}
    78d6:	b003      	add	sp, #12
    78d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      snprintf(p1, maxLength, "%% %2d %2d linesensorExtra ", col, col+dataloggerExtraSize-1);
    78dc:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
    78e0:	4606      	mov	r6, r0
    78e2:	4a17      	ldr	r2, [pc, #92]	; (7940 <ULog::writeExtra(signed char*, int, char*, int)+0xa8>)
    78e4:	4639      	mov	r1, r7
    78e6:	f103 0013 	add.w	r0, r3, #19
    78ea:	f105 0850 	add.w	r8, r5, #80	; 0x50
        snprintf(p1, maxLength - m, "%g ", v[i]);
    78ee:	f8df 9058 	ldr.w	r9, [pc, #88]	; 7948 <ULog::writeExtra(signed char*, int, char*, int)+0xb0>
      snprintf(p1, maxLength, "%% %2d %2d linesensorExtra ", col, col+dataloggerExtraSize-1);
    78f2:	9000      	str	r0, [sp, #0]
    78f4:	4620      	mov	r0, r4
    78f6:	f013 ff5d 	bl	1b7b4 <snprintf>
      col += dataloggerExtraSize;
    78fa:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
      n = strlen(p1);
    78fe:	4620      	mov	r0, r4
      col += dataloggerExtraSize;
    7900:	3314      	adds	r3, #20
    7902:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
      n = strlen(p1);
    7906:	f015 fcdb 	bl	1d2c0 <strlen>
      m = n;
    790a:	4606      	mov	r6, r0
        snprintf(p1, maxLength - m, "%g ", v[i]);
    790c:	ecb5 7a01 	vldmia	r5!, {s14}
        p1 += n;
    7910:	4404      	add	r4, r0
        snprintf(p1, maxLength - m, "%g ", v[i]);
    7912:	1bb9      	subs	r1, r7, r6
    7914:	464a      	mov	r2, r9
    7916:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    791a:	4620      	mov	r0, r4
    791c:	ed8d 7b00 	vstr	d7, [sp]
    7920:	f013 ff48 	bl	1b7b4 <snprintf>
        n = strlen(p1);
    7924:	4620      	mov	r0, r4
    7926:	f015 fccb 	bl	1d2c0 <strlen>
      for (int i = 0; i < dataloggerExtraSize; i++)
    792a:	45a8      	cmp	r8, r5
        m += n;
    792c:	4406      	add	r6, r0
      for (int i = 0; i < dataloggerExtraSize; i++)
    792e:	d1ed      	bne.n	790c <ULog::writeExtra(signed char*, int, char*, int)+0x74>
      snprintf(p1, maxLength - m, "\r\n");
    7930:	4a04      	ldr	r2, [pc, #16]	; (7944 <ULog::writeExtra(signed char*, int, char*, int)+0xac>)
    7932:	1bb9      	subs	r1, r7, r6
    7934:	4420      	add	r0, r4
}
    7936:	b003      	add	sp, #12
    7938:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      snprintf(p1, maxLength - m, "\r\n");
    793c:	f013 bf3a 	b.w	1b7b4 <snprintf>
    7940:	20003df0 	.word	0x20003df0
    7944:	20004d1c 	.word	0x20004d1c
    7948:	20003e0c 	.word	0x20003e0c

0000794c <ULog::writeLineSensor(signed char*, int, char*, int)>:
  if (row < 0)
    794c:	2a00      	cmp	r2, #0
  uint8_t flags = v[15];
    794e:	f9b1 c01e 	ldrsh.w	ip, [r1, #30]
{
    7952:	b530      	push	{r4, r5, lr}
    7954:	4604      	mov	r4, r0
    7956:	b097      	sub	sp, #92	; 0x5c
    7958:	4618      	mov	r0, r3
  if (row < 0)
    795a:	db44      	blt.n	79e6 <ULog::writeLineSensor(signed char*, int, char*, int)+0x9a>
    snprintf(p1, maxLength, "%.2f %.2f %x %x %d %d %d %d %d %d %d %d  %d %d %d %.2f %d %d ",
    795c:	f991 301d 	ldrsb.w	r3, [r1, #29]
    7960:	ed91 5a04 	vldr	s10, [r1, #16]
    7964:	ed91 6a06 	vldr	s12, [r1, #24]
    7968:	ed91 7a05 	vldr	s14, [r1, #20]
    796c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    7970:	f991 201c 	ldrsb.w	r2, [r1, #28]
    7974:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7978:	9315      	str	r3, [sp, #84]	; 0x54
    797a:	f3cc 1300 	ubfx	r3, ip, #4, #1
    797e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7982:	9214      	str	r2, [sp, #80]	; 0x50
    7984:	9310      	str	r3, [sp, #64]	; 0x40
    7986:	f00c 0201 	and.w	r2, ip, #1
    798a:	f3cc 0340 	ubfx	r3, ip, #1, #1
    798e:	920f      	str	r2, [sp, #60]	; 0x3c
    7990:	930e      	str	r3, [sp, #56]	; 0x38
    7992:	4a1d      	ldr	r2, [pc, #116]	; (7a08 <ULog::writeLineSensor(signed char*, int, char*, int)+0xbc>)
    7994:	ed8d 5b00 	vstr	d5, [sp]
    7998:	ed8d 6b12 	vstr	d6, [sp, #72]	; 0x48
    799c:	ed8d 7b02 	vstr	d7, [sp, #8]
    79a0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    79a4:	930d      	str	r3, [sp, #52]	; 0x34
    79a6:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    79aa:	930c      	str	r3, [sp, #48]	; 0x30
    79ac:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
    79b0:	930b      	str	r3, [sp, #44]	; 0x2c
    79b2:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
    79b6:	930a      	str	r3, [sp, #40]	; 0x28
    79b8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    79bc:	9309      	str	r3, [sp, #36]	; 0x24
    79be:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    79c2:	9308      	str	r3, [sp, #32]
    79c4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    79c8:	f9b1 4000 	ldrsh.w	r4, [r1]
    79cc:	f3cc 01c0 	ubfx	r1, ip, #3, #1
    79d0:	9307      	str	r3, [sp, #28]
    79d2:	f3cc 0380 	ubfx	r3, ip, #2, #1
    79d6:	e9cd 1405 	strd	r1, r4, [sp, #20]
    79da:	991a      	ldr	r1, [sp, #104]	; 0x68
    79dc:	9304      	str	r3, [sp, #16]
    79de:	f013 fee9 	bl	1b7b4 <snprintf>
}
    79e2:	b017      	add	sp, #92	; 0x5c
    79e4:	bd30      	pop	{r4, r5, pc}
    snprintf(p1, maxLength, "%% %2d .. %2d Edge sensor: left pos, right pos, "
    79e6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    79ea:	4a08      	ldr	r2, [pc, #32]	; (7a0c <ULog::writeLineSensor(signed char*, int, char*, int)+0xc0>)
    79ec:	f103 0512 	add.w	r5, r3, #18
    79f0:	991a      	ldr	r1, [sp, #104]	; 0x68
    79f2:	9500      	str	r5, [sp, #0]
    79f4:	f013 fede 	bl	1b7b4 <snprintf>
    col += 19;
    79f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    79fc:	3313      	adds	r3, #19
    79fe:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7a02:	b017      	add	sp, #92	; 0x5c
    7a04:	bd30      	pop	{r4, r5, pc}
    7a06:	bf00      	nop
    7a08:	200040c8 	.word	0x200040c8
    7a0c:	20004018 	.word	0x20004018

00007a10 <ULog::writeDistSensor(signed char*, int, char*, int)>:
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7a10:	ed91 6a00 	vldr	s12, [r1]
    7a14:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7a18:	ed91 7a01 	vldr	s14, [r1, #4]
  if (d1 > 1.5 or d1 < 0.05)
    7a1c:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7a20:	4937      	ldr	r1, [pc, #220]	; (7b00 <ULog::writeDistSensor(signed char*, int, char*, int)+0xf0>)
    7a22:	eeb8 6a46 	vcvt.f32.u32	s12, s12
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7a26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7a2a:	edd1 6a11 	vldr	s13, [r1, #68]	; 0x44
    7a2e:	ed91 4a0f 	vldr	s8, [r1, #60]	; 0x3c
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7a32:	edd1 7a12 	vldr	s15, [r1, #72]	; 0x48
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7a36:	eed6 6a04 	vfnms.f32	s13, s12, s8
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7a3a:	edd1 4a10 	vldr	s9, [r1, #64]	; 0x40
    7a3e:	eed7 7a24 	vfnms.f32	s15, s14, s9
{
    7a42:	b530      	push	{r4, r5, lr}
  float d1 = 1.0/(v[0] * irdist.irA[0] - irdist.irB[0]);
    7a44:	ee85 7aa6 	vdiv.f32	s14, s11, s13
{
    7a48:	4604      	mov	r4, r0
    7a4a:	b087      	sub	sp, #28
    7a4c:	4618      	mov	r0, r3
  float d2 = 1.0/(v[1] * irdist.irA[1] - irdist.irB[1]);
    7a4e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  if (d1 > 1.5 or d1 < 0.05)
    7a52:	eeb4 7ac5 	vcmpe.f32	s14, s10
    7a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a5a:	dc2c      	bgt.n	7ab6 <ULog::writeDistSensor(signed char*, int, char*, int)+0xa6>
    7a5c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  if (d2 > 1.5 or d2 < 0.05)
    7a60:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
  if (d1 > 1.5 or d1 < 0.05)
    7a64:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
    7a68:	ed9f 4b23 	vldr	d4, [pc, #140]	; 7af8 <ULog::writeDistSensor(signed char*, int, char*, int)+0xe8>
    7a6c:	eeb4 7b44 	vcmp.f64	d7, d4
    7a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (d2 > 1.5 or d2 < 0.05)
    7a74:	eeb4 6ae6 	vcmpe.f32	s12, s13
  if (d1 > 1.5 or d1 < 0.05)
    7a78:	bf48      	it	mi
    7a7a:	eeb0 7b45 	vmovmi.f64	d7, d5
  if (d2 > 1.5 or d2 < 0.05)
    7a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a82:	dc21      	bgt.n	7ac8 <ULog::writeDistSensor(signed char*, int, char*, int)+0xb8>
    7a84:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7a88:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
    7a8c:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 7af8 <ULog::writeDistSensor(signed char*, int, char*, int)+0xe8>
    7a90:	eeb4 6b44 	vcmp.f64	d6, d4
    7a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a98:	bf48      	it	mi
    7a9a:	eeb0 6b45 	vmovmi.f64	d6, d5
  if (row < 0)
    7a9e:	2a00      	cmp	r2, #0
    7aa0:	db16      	blt.n	7ad0 <ULog::writeDistSensor(signed char*, int, char*, int)+0xc0>
      snprintf(p1, maxLength, "%.3f %.3f ", d1, d2);
    7aa2:	4a18      	ldr	r2, [pc, #96]	; (7b04 <ULog::writeDistSensor(signed char*, int, char*, int)+0xf4>)
    7aa4:	990a      	ldr	r1, [sp, #40]	; 0x28
    7aa6:	ed8d 6b02 	vstr	d6, [sp, #8]
    7aaa:	ed8d 7b00 	vstr	d7, [sp]
    7aae:	f013 fe81 	bl	1b7b4 <snprintf>
}
    7ab2:	b007      	add	sp, #28
    7ab4:	bd30      	pop	{r4, r5, pc}
  if (d2 > 1.5 or d2 < 0.05)
    7ab6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    7aba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
    7abe:	eeb4 6ae6 	vcmpe.f32	s12, s13
    7ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ac6:	dddd      	ble.n	7a84 <ULog::writeDistSensor(signed char*, int, char*, int)+0x74>
  if (row < 0)
    7ac8:	2a00      	cmp	r2, #0
    7aca:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    7ace:	dae8      	bge.n	7aa2 <ULog::writeDistSensor(signed char*, int, char*, int)+0x92>
      snprintf(p1, maxLength, "%% %2d %2d Distance sensor (m): %.3f %.3f\r\n", col, col+1, d1, d2);
    7ad0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7ad4:	4a0c      	ldr	r2, [pc, #48]	; (7b08 <ULog::writeDistSensor(signed char*, int, char*, int)+0xf8>)
    7ad6:	1c5d      	adds	r5, r3, #1
    7ad8:	990a      	ldr	r1, [sp, #40]	; 0x28
    7ada:	9500      	str	r5, [sp, #0]
    7adc:	ed8d 6b04 	vstr	d6, [sp, #16]
    7ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
    7ae4:	f013 fe66 	bl	1b7b4 <snprintf>
    col += 2;
    7ae8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7aec:	3302      	adds	r3, #2
    7aee:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
    7af2:	b007      	add	sp, #28
    7af4:	bd30      	pop	{r4, r5, pc}
    7af6:	bf00      	nop
    7af8:	9999999a 	.word	0x9999999a
    7afc:	3fa99999 	.word	0x3fa99999
    7b00:	2000f19c 	.word	0x2000f19c
    7b04:	2000400c 	.word	0x2000400c
    7b08:	20003fe0 	.word	0x20003fe0

00007b0c <ULog::writeBufferMsg()>:
  if (logStreamedMsgOutPos == 0)
    7b0c:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
    7b0e:	b530      	push	{r4, r5, lr}
    7b10:	4604      	mov	r4, r0
    7b12:	b083      	sub	sp, #12
  if (logStreamedMsgOutPos == 0)
    7b14:	b123      	cbz	r3, 7b20 <ULog::writeBufferMsg()+0x14>
  if (logStreamedMsgOutPos < logStreamedMsgPos)
    7b16:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7b18:	429a      	cmp	r2, r3
    7b1a:	d814      	bhi.n	7b46 <ULog::writeBufferMsg()+0x3a>
}
    7b1c:	b003      	add	sp, #12
    7b1e:	bd30      	pop	{r4, r5, pc}
  * \param n is number of bytes to send
  * \param blocking if false, then send if space only, else don't return until send
  */
  inline bool send_block(const char * str, int n) //, bool blocking)
  {
    return client_send_str(str, n); //, blocking);
    7b20:	2234      	movs	r2, #52	; 0x34
    7b22:	4912      	ldr	r1, [pc, #72]	; (7b6c <ULog::writeBufferMsg()+0x60>)
    7b24:	4812      	ldr	r0, [pc, #72]	; (7b70 <ULog::writeBufferMsg()+0x64>)
    7b26:	f004 fd29 	bl	c57c <UUSB::client_send_str(char const*, int)>
    7b2a:	2231      	movs	r2, #49	; 0x31
    7b2c:	4911      	ldr	r1, [pc, #68]	; (7b74 <ULog::writeBufferMsg()+0x68>)
    7b2e:	4810      	ldr	r0, [pc, #64]	; (7b70 <ULog::writeBufferMsg()+0x64>)
    7b30:	f004 fd24 	bl	c57c <UUSB::client_send_str(char const*, int)>
    7b34:	221f      	movs	r2, #31
    7b36:	4910      	ldr	r1, [pc, #64]	; (7b78 <ULog::writeBufferMsg()+0x6c>)
    7b38:	480d      	ldr	r0, [pc, #52]	; (7b70 <ULog::writeBufferMsg()+0x64>)
    7b3a:	f004 fd1f 	bl	c57c <UUSB::client_send_str(char const*, int)>
  if (logStreamedMsgOutPos < logStreamedMsgPos)
    7b3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7b40:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7b42:	429a      	cmp	r2, r3
    7b44:	d9ea      	bls.n	7b1c <ULog::writeBufferMsg()+0x10>
    const char * p1 = (char*)logBuffer + logStreamedMsgOutPos;
    7b46:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7b48:	4419      	add	r1, r3
    int n = strlen(p1);
    7b4a:	4608      	mov	r0, r1
    7b4c:	9101      	str	r1, [sp, #4]
    7b4e:	f015 fbb7 	bl	1d2c0 <strlen>
    7b52:	9901      	ldr	r1, [sp, #4]
    7b54:	4605      	mov	r5, r0
    7b56:	4602      	mov	r2, r0
    7b58:	4805      	ldr	r0, [pc, #20]	; (7b70 <ULog::writeBufferMsg()+0x64>)
    7b5a:	f004 fd0f 	bl	c57c <UUSB::client_send_str(char const*, int)>
    logStreamedMsgOutPos += n + 1;
    7b5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7b60:	3301      	adds	r3, #1
    7b62:	442b      	add	r3, r5
    7b64:	64a3      	str	r3, [r4, #72]	; 0x48
}
    7b66:	b003      	add	sp, #12
    7b68:	bd30      	pop	{r4, r5, pc}
    7b6a:	bf00      	nop
    7b6c:	20003f54 	.word	0x20003f54
    7b70:	2000fac4 	.word	0x2000fac4
    7b74:	20003f8c 	.word	0x20003f8c
    7b78:	20003fc0 	.word	0x20003fc0

00007b7c <ULog::initLogStructure()>:
{ // stop logging of messages
    7b7c:	b530      	push	{r4, r5, lr}
  logRowFlags[LOG_TIME] = true;
    7b7e:	2201      	movs	r2, #1
  logStreamedMsg = false;
    7b80:	2400      	movs	r4, #0
  logRowFlags[LOG_TIME] = true;
    7b82:	4601      	mov	r1, r0
    7b84:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
    7b88:	f100 0e38 	add.w	lr, r0, #56	; 0x38
    7b8c:	4d17      	ldr	r5, [pc, #92]	; (7bec <ULog::initLogStructure()+0x70>)
  logStreamedMsg = false;
    7b8e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  logRowSize = 0;
    7b92:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
  logRowFlags[LOG_TIME] = true;
    7b96:	f801 2f1c 	strb.w	r2, [r1, #28]!
    if (logRowFlags[i])
    7b9a:	b192      	cbz	r2, 7bc2 <ULog::initLogStructure()+0x46>
    7b9c:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
      switch (logRowItemSize[i * 2 + 1])
    7ba0:	f04f 0c01 	mov.w	ip, #1
      logRowPos[i] = logRowSize;
    7ba4:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
    7ba8:	3a49      	subs	r2, #73	; 0x49
    7baa:	801c      	strh	r4, [r3, #0]
      switch (logRowItemSize[i * 2 + 1])
    7bac:	b2d2      	uxtb	r2, r2
    7bae:	2a22      	cmp	r2, #34	; 0x22
    7bb0:	bf98      	it	ls
    7bb2:	f915 c002 	ldrsbls.w	ip, [r5, r2]
      logRowSize += bz * logRowItemSize[i * 2];
    7bb6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    7bba:	fb0c 4402 	mla	r4, ip, r2, r4
    7bbe:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
  for (int i = 0; i <  LOG_MAX_CNT; i++)
    7bc2:	4571      	cmp	r1, lr
    7bc4:	f103 0302 	add.w	r3, r3, #2
    7bc8:	d002      	beq.n	7bd0 <ULog::initLogStructure()+0x54>
    if (logRowFlags[i])
    7bca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7bce:	e7e4      	b.n	7b9a <ULog::initLogStructure()+0x1e>
  if (logBuffer == nullptr)
    7bd0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    7bd2:	b123      	cbz	r3, 7bde <ULog::initLogStructure()+0x62>
    logRowsCntMax = LOG_BUFFER_MAX / logRowSize;
    7bd4:	4b06      	ldr	r3, [pc, #24]	; (7bf0 <ULog::initLogStructure()+0x74>)
    7bd6:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    7bda:	fb93 f3f2 	sdiv	r3, r3, r2
  logRowCnt = 0;
    7bde:	2200      	movs	r2, #0
    7be0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  logFull = false;
    7be4:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
}
    7be8:	bd30      	pop	{r4, r5, pc}
    7bea:	bf00      	nop
    7bec:	2000264c 	.word	0x2000264c
    7bf0:	0003d090 	.word	0x0003d090

00007bf4 <ULog::setLogFlagsOther(char const*)>:
{
    7bf4:	b510      	push	{r4, lr}
  logRowFlags[LOG_TIME] = true; //strtol(p1, (char **) &p1, 10);
    7bf6:	2301      	movs	r3, #1
{
    7bf8:	b082      	sub	sp, #8
    7bfa:	4604      	mov	r4, r0
  const char * p1 = &buf[5];
    7bfc:	1d48      	adds	r0, r1, #5
  logRowFlags[LOG_MISSION] = strtol(p1, (char **) &p1, 10); // not available
    7bfe:	220a      	movs	r2, #10
    7c00:	a901      	add	r1, sp, #4
  logRowFlags[LOG_TIME] = true; //strtol(p1, (char **) &p1, 10);
    7c02:	7723      	strb	r3, [r4, #28]
  const char * p1 = &buf[5];
    7c04:	9001      	str	r0, [sp, #4]
  logRowFlags[LOG_MISSION] = strtol(p1, (char **) &p1, 10); // not available
    7c06:	f013 fbe5 	bl	1b3d4 <strtol>
    7c0a:	3800      	subs	r0, #0
  logRowFlags[LOG_ACC] = strtol(p1, (char **) &p1, 10);
    7c0c:	a901      	add	r1, sp, #4
    7c0e:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MISSION] = strtol(p1, (char **) &p1, 10); // not available
    7c12:	bf18      	it	ne
    7c14:	2001      	movne	r0, #1
    7c16:	7760      	strb	r0, [r4, #29]
  logRowFlags[LOG_ACC] = strtol(p1, (char **) &p1, 10);
    7c18:	9801      	ldr	r0, [sp, #4]
    7c1a:	f013 fbdb 	bl	1b3d4 <strtol>
    7c1e:	3800      	subs	r0, #0
  logRowFlags[LOG_GYRO] = strtol(p1, (char **) &p1, 10);
    7c20:	a901      	add	r1, sp, #4
    7c22:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_ACC] = strtol(p1, (char **) &p1, 10);
    7c26:	bf18      	it	ne
    7c28:	2001      	movne	r0, #1
    7c2a:	77a0      	strb	r0, [r4, #30]
  logRowFlags[LOG_GYRO] = strtol(p1, (char **) &p1, 10);
    7c2c:	9801      	ldr	r0, [sp, #4]
    7c2e:	f013 fbd1 	bl	1b3d4 <strtol>
    7c32:	3800      	subs	r0, #0
  logRowFlags[LOG_MAG] = strtol(p1, (char **) &p1, 10); // not enabled
    7c34:	a901      	add	r1, sp, #4
    7c36:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_GYRO] = strtol(p1, (char **) &p1, 10);
    7c3a:	bf18      	it	ne
    7c3c:	2001      	movne	r0, #1
    7c3e:	77e0      	strb	r0, [r4, #31]
  logRowFlags[LOG_MAG] = strtol(p1, (char **) &p1, 10); // not enabled
    7c40:	9801      	ldr	r0, [sp, #4]
    7c42:	f013 fbc7 	bl	1b3d4 <strtol>
    7c46:	3800      	subs	r0, #0
  logRowFlags[LOG_MOTV_REF] = strtol(p1, (char **) &p1, 10); // not available
    7c48:	a901      	add	r1, sp, #4
    7c4a:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MAG] = strtol(p1, (char **) &p1, 10); // not enabled
    7c4e:	bf18      	it	ne
    7c50:	2001      	movne	r0, #1
    7c52:	f884 0020 	strb.w	r0, [r4, #32]
  logRowFlags[LOG_MOTV_REF] = strtol(p1, (char **) &p1, 10); // not available
    7c56:	9801      	ldr	r0, [sp, #4]
    7c58:	f013 fbbc 	bl	1b3d4 <strtol>
    7c5c:	3800      	subs	r0, #0
  logRowFlags[LOG_MOTV]  = strtol(p1, (char **) &p1, 10);
    7c5e:	a901      	add	r1, sp, #4
    7c60:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MOTV_REF] = strtol(p1, (char **) &p1, 10); // not available
    7c64:	bf18      	it	ne
    7c66:	2001      	movne	r0, #1
    7c68:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  logRowFlags[LOG_MOTV]  = strtol(p1, (char **) &p1, 10);
    7c6c:	9801      	ldr	r0, [sp, #4]
    7c6e:	f013 fbb1 	bl	1b3d4 <strtol>
    7c72:	3800      	subs	r0, #0
  logRowFlags[LOG_MOTA]  = strtol(p1, (char **) &p1, 10);
    7c74:	a901      	add	r1, sp, #4
    7c76:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MOTV]  = strtol(p1, (char **) &p1, 10);
    7c7a:	bf18      	it	ne
    7c7c:	2001      	movne	r0, #1
    7c7e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  logRowFlags[LOG_MOTA]  = strtol(p1, (char **) &p1, 10);
    7c82:	9801      	ldr	r0, [sp, #4]
    7c84:	f013 fba6 	bl	1b3d4 <strtol>
    7c88:	3800      	subs	r0, #0
  logRowFlags[LOG_ENC]  = strtol(p1, (char **) &p1, 10);
    7c8a:	a901      	add	r1, sp, #4
    7c8c:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_MOTA]  = strtol(p1, (char **) &p1, 10);
    7c90:	bf18      	it	ne
    7c92:	2001      	movne	r0, #1
    7c94:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  logRowFlags[LOG_ENC]  = strtol(p1, (char **) &p1, 10);
    7c98:	9801      	ldr	r0, [sp, #4]
    7c9a:	f013 fb9b 	bl	1b3d4 <strtol>
    7c9e:	3800      	subs	r0, #0
  logRowFlags[LOG_WHEELVEL]  = strtol(p1, (char **) &p1, 10);
    7ca0:	a901      	add	r1, sp, #4
    7ca2:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_ENC]  = strtol(p1, (char **) &p1, 10);
    7ca6:	bf18      	it	ne
    7ca8:	2001      	movne	r0, #1
    7caa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  logRowFlags[LOG_WHEELVEL]  = strtol(p1, (char **) &p1, 10);
    7cae:	9801      	ldr	r0, [sp, #4]
    7cb0:	f013 fb90 	bl	1b3d4 <strtol>
    7cb4:	3800      	subs	r0, #0
  logRowFlags[LOG_TURNRATE]  = strtol(p1, (char **) &p1, 10);
    7cb6:	a901      	add	r1, sp, #4
    7cb8:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_WHEELVEL]  = strtol(p1, (char **) &p1, 10);
    7cbc:	bf18      	it	ne
    7cbe:	2001      	movne	r0, #1
    7cc0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  logRowFlags[LOG_TURNRATE]  = strtol(p1, (char **) &p1, 10);
    7cc4:	9801      	ldr	r0, [sp, #4]
    7cc6:	f013 fb85 	bl	1b3d4 <strtol>
    7cca:	3800      	subs	r0, #0
  logRowFlags[LOG_POSE]  = strtol(p1, (char **) &p1, 10);
    7ccc:	a901      	add	r1, sp, #4
    7cce:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_TURNRATE]  = strtol(p1, (char **) &p1, 10);
    7cd2:	bf18      	it	ne
    7cd4:	2001      	movne	r0, #1
    7cd6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  logRowFlags[LOG_POSE]  = strtol(p1, (char **) &p1, 10);
    7cda:	9801      	ldr	r0, [sp, #4]
    7cdc:	f013 fb7a 	bl	1b3d4 <strtol>
    7ce0:	3800      	subs	r0, #0
  logRowFlags[LOG_LINE]  = strtol(p1, (char **) &p1, 10);
    7ce2:	a901      	add	r1, sp, #4
    7ce4:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_POSE]  = strtol(p1, (char **) &p1, 10);
    7ce8:	bf18      	it	ne
    7cea:	2001      	movne	r0, #1
    7cec:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
  logRowFlags[LOG_LINE]  = strtol(p1, (char **) &p1, 10);
    7cf0:	9801      	ldr	r0, [sp, #4]
    7cf2:	f013 fb6f 	bl	1b3d4 <strtol>
    7cf6:	3800      	subs	r0, #0
  logRowFlags[LOG_DIST]  = strtol(p1, (char **) &p1, 10);
    7cf8:	a901      	add	r1, sp, #4
    7cfa:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_LINE]  = strtol(p1, (char **) &p1, 10);
    7cfe:	bf18      	it	ne
    7d00:	2001      	movne	r0, #1
    7d02:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  logRowFlags[LOG_DIST]  = strtol(p1, (char **) &p1, 10);
    7d06:	9801      	ldr	r0, [sp, #4]
    7d08:	f013 fb64 	bl	1b3d4 <strtol>
    7d0c:	3800      	subs	r0, #0
  logRowFlags[LOG_BATT]  = strtol(p1, (char **) &p1, 10);
    7d0e:	a901      	add	r1, sp, #4
    7d10:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_DIST]  = strtol(p1, (char **) &p1, 10);
    7d14:	bf18      	it	ne
    7d16:	2001      	movne	r0, #1
    7d18:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  logRowFlags[LOG_BATT]  = strtol(p1, (char **) &p1, 10);
    7d1c:	9801      	ldr	r0, [sp, #4]
    7d1e:	f013 fb59 	bl	1b3d4 <strtol>
    7d22:	3800      	subs	r0, #0
  logRowFlags[LOG_TIMING]  = strtol(p1, (char **) &p1, 10);
    7d24:	a901      	add	r1, sp, #4
    7d26:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_BATT]  = strtol(p1, (char **) &p1, 10);
    7d2a:	bf18      	it	ne
    7d2c:	2001      	movne	r0, #1
    7d2e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  logRowFlags[LOG_TIMING]  = strtol(p1, (char **) &p1, 10);
    7d32:	9801      	ldr	r0, [sp, #4]
    7d34:	f013 fb4e 	bl	1b3d4 <strtol>
    7d38:	3800      	subs	r0, #0
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7d3a:	a901      	add	r1, sp, #4
    7d3c:	f04f 020a 	mov.w	r2, #10
  logRowFlags[LOG_TIMING]  = strtol(p1, (char **) &p1, 10);
    7d40:	bf18      	it	ne
    7d42:	2001      	movne	r0, #1
    7d44:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7d48:	9801      	ldr	r0, [sp, #4]
    7d4a:	f013 fb43 	bl	1b3d4 <strtol>
    7d4e:	1e03      	subs	r3, r0, #0
  logRowFlags[LOG_CHIRP]  = strtol(p1, (char **) &p1, 10); // not available
    7d50:	f04f 020a 	mov.w	r2, #10
    7d54:	a901      	add	r1, sp, #4
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7d56:	bf18      	it	ne
    7d58:	2301      	movne	r3, #1
  logRowFlags[LOG_CHIRP]  = strtol(p1, (char **) &p1, 10); // not available
    7d5a:	9801      	ldr	r0, [sp, #4]
  logRowFlags[LOG_EXTRA]  = strtol(p1, (char **) &p1, 10); // for debug
    7d5c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  logRowFlags[LOG_CHIRP]  = strtol(p1, (char **) &p1, 10); // not available
    7d60:	f013 fb38 	bl	1b3d4 <strtol>
  logRowFlags[LOG_MISSION] = false;
    7d64:	2300      	movs	r3, #0
  initLogStructure();
    7d66:	4620      	mov	r0, r4
  logRowFlags[LOG_MISSION] = false;
    7d68:	7763      	strb	r3, [r4, #29]
  logRowFlags[LOG_MAG] = false;
    7d6a:	8423      	strh	r3, [r4, #32]
  logRowFlags[LOG_CHIRP] = false;
    7d6c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  initLogStructure();
    7d70:	f7ff ff04 	bl	7b7c <ULog::initLogStructure()>
}
    7d74:	b002      	add	sp, #8
    7d76:	bd10      	pop	{r4, pc}

00007d78 <ULog::startLogging(int, bool)>:
  if (loginterval > 0)
    7d78:	2900      	cmp	r1, #0
{
    7d7a:	b538      	push	{r3, r4, r5, lr}
    7d7c:	4604      	mov	r4, r0
    7d7e:	4615      	mov	r5, r2
  if (loginterval > 0)
    7d80:	dc04      	bgt.n	7d8c <ULog::startLogging(int, bool)+0x14>
  if (restart)
    7d82:	b94d      	cbnz	r5, 7d98 <ULog::startLogging(int, bool)+0x20>
  toLog = true;
    7d84:	2301      	movs	r3, #1
    7d86:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
    7d8a:	bd38      	pop	{r3, r4, r5, pc}
    current.logIntervalChanged();
    7d8c:	4810      	ldr	r0, [pc, #64]	; (7dd0 <ULog::startLogging(int, bool)+0x58>)
        logInterval_ms = loginterval;
    7d8e:	63e1      	str	r1, [r4, #60]	; 0x3c
    current.logIntervalChanged();
    7d90:	f7fa fe24 	bl	29dc <UCurrent::logIntervalChanged()>
  if (restart)
    7d94:	2d00      	cmp	r5, #0
    7d96:	d0f5      	beq.n	7d84 <ULog::startLogging(int, bool)+0xc>
    initLogStructure();
    7d98:	4620      	mov	r0, r4
    7d9a:	f7ff feef 	bl	7b7c <ULog::initLogStructure()>
    7d9e:	4b0d      	ldr	r3, [pc, #52]	; (7dd4 <ULog::startLogging(int, bool)+0x5c>)
    7da0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    7da4:	f011 fbc2 	bl	1952c <__aeabi_ul2f>
    7da8:	ee07 0a90 	vmov	s15, r0
  toLog = true;
    7dac:	2301      	movs	r3, #1
    7dae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    7db2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    7db6:	ed9f 6b04 	vldr	d6, [pc, #16]	; 7dc8 <ULog::startLogging(int, bool)+0x50>
    7dba:	ee27 7b06 	vmul.f64	d7, d7, d6
    7dbe:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    7dc2:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
}
    7dc6:	bd38      	pop	{r3, r4, r5, pc}
    7dc8:	a0b5ed8d 	.word	0xa0b5ed8d
    7dcc:	3eb0c6f7 	.word	0x3eb0c6f7
    7dd0:	2000ea90 	.word	0x2000ea90
    7dd4:	2000e0c8 	.word	0x2000e0c8

00007dd8 <ULog::decode(char const*)>:
{
    7dd8:	b538      	push	{r3, r4, r5, lr}
    7dda:	460c      	mov	r4, r1
    7ddc:	4605      	mov	r5, r0
  if (strncmp(buf, "lfls ", 5) == 0)
    7dde:	2205      	movs	r2, #5
    7de0:	494f      	ldr	r1, [pc, #316]	; (7f20 <ULog::decode(char const*)+0x148>)
    7de2:	4620      	mov	r0, r4
    7de4:	f013 ff9e 	bl	1bd24 <strncmp>
    7de8:	2800      	cmp	r0, #0
    7dea:	d045      	beq.n	7e78 <ULog::decode(char const*)+0xa0>
  else if (strncmp(buf, "lognow ", 6) == 0)
    7dec:	2206      	movs	r2, #6
    7dee:	494d      	ldr	r1, [pc, #308]	; (7f24 <ULog::decode(char const*)+0x14c>)
    7df0:	4620      	mov	r0, r4
    7df2:	f013 ff97 	bl	1bd24 <strncmp>
    7df6:	b1f0      	cbz	r0, 7e36 <ULog::decode(char const*)+0x5e>
  else if (strncmp(buf, "lsts ", 5) == 0)
    7df8:	2205      	movs	r2, #5
    7dfa:	494b      	ldr	r1, [pc, #300]	; (7f28 <ULog::decode(char const*)+0x150>)
    7dfc:	4620      	mov	r0, r4
    7dfe:	f013 ff91 	bl	1bd24 <strncmp>
    7e02:	2800      	cmp	r0, #0
    7e04:	d058      	beq.n	7eb8 <ULog::decode(char const*)+0xe0>
  else if (strncmp(buf, "logmsg ", 6) == 0)
    7e06:	2206      	movs	r2, #6
    7e08:	4948      	ldr	r1, [pc, #288]	; (7f2c <ULog::decode(char const*)+0x154>)
    7e0a:	4620      	mov	r0, r4
    7e0c:	f013 ff8a 	bl	1bd24 <strncmp>
    7e10:	b3c0      	cbz	r0, 7e84 <ULog::decode(char const*)+0xac>
  else if (strncmp(buf, "log ", 3) == 0)
    7e12:	7823      	ldrb	r3, [r4, #0]
    7e14:	2b6c      	cmp	r3, #108	; 0x6c
    7e16:	d14d      	bne.n	7eb4 <ULog::decode(char const*)+0xdc>
    7e18:	7863      	ldrb	r3, [r4, #1]
    7e1a:	2b6f      	cmp	r3, #111	; 0x6f
    7e1c:	d14a      	bne.n	7eb4 <ULog::decode(char const*)+0xdc>
    7e1e:	78a3      	ldrb	r3, [r4, #2]
    7e20:	3b67      	subs	r3, #103	; 0x67
    7e22:	d147      	bne.n	7eb4 <ULog::decode(char const*)+0xdc>
    if (logRowCnt > 0)
    7e24:	696a      	ldr	r2, [r5, #20]
    7e26:	2a00      	cmp	r2, #0
    7e28:	dd66      	ble.n	7ef8 <ULog::decode(char const*)+0x120>
      logToUSB = true;
    7e2a:	2201      	movs	r2, #1
      logStreamedMsgOutPos = 0;
    7e2c:	64ab      	str	r3, [r5, #72]	; 0x48
  bool used = true;
    7e2e:	4610      	mov	r0, r2
      logToUSB = true;
    7e30:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
}
    7e34:	bd38      	pop	{r3, r4, r5, pc}
        logInterval_ms = strtol(p1, nullptr, 10);
    7e36:	4601      	mov	r1, r0
    7e38:	220a      	movs	r2, #10
    7e3a:	1da0      	adds	r0, r4, #6
    7e3c:	f013 faca 	bl	1b3d4 <strtol>
  if (loginterval > 0)
    7e40:	2800      	cmp	r0, #0
        logInterval_ms = strtol(p1, nullptr, 10);
    7e42:	63e8      	str	r0, [r5, #60]	; 0x3c
  if (loginterval > 0)
    7e44:	dc32      	bgt.n	7eac <ULog::decode(char const*)+0xd4>
    initLogStructure();
    7e46:	4628      	mov	r0, r5
    7e48:	f7ff fe98 	bl	7b7c <ULog::initLogStructure()>
    7e4c:	4b38      	ldr	r3, [pc, #224]	; (7f30 <ULog::decode(char const*)+0x158>)
    7e4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    7e52:	f011 fb6b 	bl	1952c <__aeabi_ul2f>
    7e56:	ee07 0a90 	vmov	s15, r0
  toLog = true;
    7e5a:	2301      	movs	r3, #1
    7e5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  bool used = true;
    7e60:	4618      	mov	r0, r3
  toLog = true;
    7e62:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    7e66:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 7f18 <ULog::decode(char const*)+0x140>
    7e6a:	ee27 7b06 	vmul.f64	d7, d7, d6
    7e6e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    7e72:	ed85 7a2d 	vstr	s14, [r5, #180]	; 0xb4
}
    7e76:	bd38      	pop	{r3, r4, r5, pc}
    setLogFlagsOther(buf);
    7e78:	4628      	mov	r0, r5
    7e7a:	4621      	mov	r1, r4
    7e7c:	f7ff feba 	bl	7bf4 <ULog::setLogFlagsOther(char const*)>
  bool used = true;
    7e80:	2001      	movs	r0, #1
}
    7e82:	bd38      	pop	{r3, r4, r5, pc}
    while (not isDigit(*p1) and *p1 != '\0')
    7e84:	79a3      	ldrb	r3, [r4, #6]
    const char * p1 = &buf[6];
    7e86:	3406      	adds	r4, #6


// Checks for a digit (0 through 9).
inline boolean isDigit(int c)
{
  return ( isdigit (c) == 0 ? false : true);
    7e88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while (not isDigit(*p1) and *p1 != '\0')
    7e8c:	2a09      	cmp	r2, #9
    7e8e:	d906      	bls.n	7e9e <ULog::decode(char const*)+0xc6>
    7e90:	b333      	cbz	r3, 7ee0 <ULog::decode(char const*)+0x108>
    7e92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7e96:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7e9a:	2a09      	cmp	r2, #9
    7e9c:	d8f8      	bhi.n	7e90 <ULog::decode(char const*)+0xb8>
    if (*p1 == '0')
    7e9e:	2b30      	cmp	r3, #48	; 0x30
    7ea0:	d11e      	bne.n	7ee0 <ULog::decode(char const*)+0x108>
      logStreamedMsgFull = true;
    7ea2:	2301      	movs	r3, #1
  bool used = true;
    7ea4:	4618      	mov	r0, r3
      logStreamedMsgFull = true;
    7ea6:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
    7eaa:	bd38      	pop	{r3, r4, r5, pc}
    current.logIntervalChanged();
    7eac:	4821      	ldr	r0, [pc, #132]	; (7f34 <ULog::decode(char const*)+0x15c>)
    7eae:	f7fa fd95 	bl	29dc <UCurrent::logIntervalChanged()>
    7eb2:	e7c8      	b.n	7e46 <ULog::decode(char const*)+0x6e>
    used = false;
    7eb4:	2000      	movs	r0, #0
}
    7eb6:	bd38      	pop	{r3, r4, r5, pc}
        logInterval_ms = strtol(p1, nullptr, 10);
    7eb8:	4601      	mov	r1, r0
    7eba:	220a      	movs	r2, #10
    7ebc:	1d60      	adds	r0, r4, #5
    7ebe:	f013 fa89 	bl	1b3d4 <strtol>
        logInterval_ms = (logInterval_ms*1000)/service.sampleTime_us;
    7ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        logInterval_ms = strtol(p1, nullptr, 10);
    7ec6:	4603      	mov	r3, r0
        logInterval_ms = (logInterval_ms*1000)/service.sampleTime_us;
    7ec8:	4a19      	ldr	r2, [pc, #100]	; (7f30 <ULog::decode(char const*)+0x158>)
    current.logIntervalChanged();
    7eca:	481a      	ldr	r0, [pc, #104]	; (7f34 <ULog::decode(char const*)+0x15c>)
        logInterval_ms = (logInterval_ms*1000)/service.sampleTime_us;
    7ecc:	fb01 f303 	mul.w	r3, r1, r3
    7ed0:	6812      	ldr	r2, [r2, #0]
    7ed2:	fbb3 f3f2 	udiv	r3, r3, r2
    7ed6:	63eb      	str	r3, [r5, #60]	; 0x3c
    current.logIntervalChanged();
    7ed8:	f7fa fd80 	bl	29dc <UCurrent::logIntervalChanged()>
  bool used = true;
    7edc:	2001      	movs	r0, #1
}
    7ede:	bd38      	pop	{r3, r4, r5, pc}
  if ((char*)logBuffer != nullptr)
    7ee0:	6dab      	ldr	r3, [r5, #88]	; 0x58
    7ee2:	b18b      	cbz	r3, 7f08 <ULog::decode(char const*)+0x130>
    logStreamedMsgPos = 0;
    7ee4:	2300      	movs	r3, #0
    logStreamedMsg = true;
    7ee6:	2201      	movs	r2, #1
    logStreamedMsgPos = 0;
    7ee8:	646b      	str	r3, [r5, #68]	; 0x44
  bool used = true;
    7eea:	4610      	mov	r0, r2
    logStreamedMsg = true;
    7eec:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
    logStreamedMsgFull = false;
    7ef0:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    logRowCnt = 0; // reset normal logging too
    7ef4:	616b      	str	r3, [r5, #20]
}
    7ef6:	bd38      	pop	{r3, r4, r5, pc}
    else if (motortest.mLogIndex > 0)
    7ef8:	480f      	ldr	r0, [pc, #60]	; (7f38 <ULog::decode(char const*)+0x160>)
    7efa:	6983      	ldr	r3, [r0, #24]
    7efc:	2b00      	cmp	r3, #0
    7efe:	dd05      	ble.n	7f0c <ULog::decode(char const*)+0x134>
      motortest.getMotorTestLog();
    7f00:	f001 ffd8 	bl	9eb4 <UMotorTest::getMotorTestLog()>
  bool used = true;
    7f04:	2001      	movs	r0, #1
}
    7f06:	bd38      	pop	{r3, r4, r5, pc}
  bool used = true;
    7f08:	2001      	movs	r0, #1
}
    7f0a:	bd38      	pop	{r3, r4, r5, pc}
      usb.send("%% log is empty\n");
    7f0c:	490b      	ldr	r1, [pc, #44]	; (7f3c <ULog::decode(char const*)+0x164>)
    7f0e:	480c      	ldr	r0, [pc, #48]	; (7f40 <ULog::decode(char const*)+0x168>)
    7f10:	f004 fb7c 	bl	c60c <UUSB::send(char const*)>
  bool used = true;
    7f14:	2001      	movs	r0, #1
}
    7f16:	bd38      	pop	{r3, r4, r5, pc}
    7f18:	a0b5ed8d 	.word	0xa0b5ed8d
    7f1c:	3eb0c6f7 	.word	0x3eb0c6f7
    7f20:	2000426c 	.word	0x2000426c
    7f24:	20004274 	.word	0x20004274
    7f28:	2000427c 	.word	0x2000427c
    7f2c:	20004284 	.word	0x20004284
    7f30:	2000e0c8 	.word	0x2000e0c8
    7f34:	2000ea90 	.word	0x2000ea90
    7f38:	2000f524 	.word	0x2000f524
    7f3c:	2000428c 	.word	0x2000428c
    7f40:	2000fac4 	.word	0x2000fac4
    7f44:	00000000 	.word	0x00000000

00007f48 <ULog::addMsgLog(char const*)>:
{
    7f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (logStreamedMsgFull or not logStreamedMsg)
    7f4c:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
{
    7f50:	b082      	sub	sp, #8
  if (logStreamedMsgFull or not logStreamedMsg)
    7f52:	2d00      	cmp	r5, #0
    7f54:	d13a      	bne.n	7fcc <ULog::addMsgLog(char const*)+0x84>
    7f56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7f5a:	4604      	mov	r4, r0
    7f5c:	b3b3      	cbz	r3, 7fcc <ULog::addMsgLog(char const*)+0x84>
    int n = strlen(data);
    7f5e:	4608      	mov	r0, r1
    7f60:	460e      	mov	r6, r1
    7f62:	f015 f9ad 	bl	1d2c0 <strlen>
    if (n + MSL + logStreamedMsgPos < LOG_BUFFER_MAX)
    7f66:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7f68:	4921      	ldr	r1, [pc, #132]	; (7ff0 <ULog::addMsgLog(char const*)+0xa8>)
    int n = strlen(data);
    7f6a:	4607      	mov	r7, r0
    if (n + MSL + logStreamedMsgPos < LOG_BUFFER_MAX)
    7f6c:	f102 0320 	add.w	r3, r2, #32
    7f70:	4403      	add	r3, r0
    7f72:	428b      	cmp	r3, r1
    7f74:	d82d      	bhi.n	7fd2 <ULog::addMsgLog(char const*)+0x8a>
    7f76:	491f      	ldr	r1, [pc, #124]	; (7ff4 <ULog::addMsgLog(char const*)+0xac>)
      char * pd = (char*)logBuffer + logStreamedMsgPos;
    7f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7f7a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7f7e:	eb03 0802 	add.w	r8, r3, r2
    7f82:	f011 fad3 	bl	1952c <__aeabi_ul2f>
    7f86:	ee07 0a90 	vmov	s15, r0
      snprintf(pd, MSL, "%.3f ", service.time_sec());
    7f8a:	4a1b      	ldr	r2, [pc, #108]	; (7ff8 <ULog::addMsgLog(char const*)+0xb0>)
    7f8c:	2120      	movs	r1, #32
    7f8e:	4640      	mov	r0, r8
    7f90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    7f94:	ed9f 6b14 	vldr	d6, [pc, #80]	; 7fe8 <ULog::addMsgLog(char const*)+0xa0>
    7f98:	ee27 7b06 	vmul.f64	d7, d7, d6
    7f9c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    7fa0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7fa4:	ed8d 7b00 	vstr	d7, [sp]
    7fa8:	f013 fc04 	bl	1b7b4 <snprintf>
      pd[32] = '\0'; // just in case
    7fac:	f888 5020 	strb.w	r5, [r8, #32]
      int m = strlen(pd);
    7fb0:	4640      	mov	r0, r8
    7fb2:	f015 f985 	bl	1d2c0 <strlen>
      strncpy(pd, data, n+1);
    7fb6:	4631      	mov	r1, r6
      int m = strlen(pd);
    7fb8:	4605      	mov	r5, r0
      strncpy(pd, data, n+1);
    7fba:	1c7a      	adds	r2, r7, #1
    7fbc:	4440      	add	r0, r8
    7fbe:	f013 fef7 	bl	1bdb0 <strncpy>
      logStreamedMsgPos += n + m + 1;
    7fc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7fc4:	443d      	add	r5, r7
    7fc6:	3301      	adds	r3, #1
    7fc8:	442b      	add	r3, r5
    7fca:	6463      	str	r3, [r4, #68]	; 0x44
}
    7fcc:	b002      	add	sp, #8
    7fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      logStreamedMsgFull = true;
    7fd2:	2301      	movs	r3, #1
      usb.send("# log message buffer full\n");
    7fd4:	4909      	ldr	r1, [pc, #36]	; (7ffc <ULog::addMsgLog(char const*)+0xb4>)
    7fd6:	480a      	ldr	r0, [pc, #40]	; (8000 <ULog::addMsgLog(char const*)+0xb8>)
      logStreamedMsgFull = true;
    7fd8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
    7fdc:	b002      	add	sp, #8
    7fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb.send("# log message buffer full\n");
    7fe2:	f004 bb13 	b.w	c60c <UUSB::send(char const*)>
    7fe6:	bf00      	nop
    7fe8:	a0b5ed8d 	.word	0xa0b5ed8d
    7fec:	3eb0c6f7 	.word	0x3eb0c6f7
    7ff0:	0003d08f 	.word	0x0003d08f
    7ff4:	2000e0c8 	.word	0x2000e0c8
    7ff8:	20004478 	.word	0x20004478
    7ffc:	20004480 	.word	0x20004480
    8000:	2000fac4 	.word	0x2000fac4

00008004 <ULog::logWriteBufferTo(int)>:
//////////////////////////////////////////////////

int tried = 0;

int ULog::logWriteBufferTo(int row)
{
    8004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char logline[MLL + 3];
  char * p1 = logline;
  int n = 0; // used number of characters
  // write all recorded rows
  // row -1 is flag to get matlab text
  if (row <= 0)
    8008:	f1b1 0900 	subs.w	r9, r1, #0
{
    800c:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
    8010:	4680      	mov	r8, r0
  if (row <= 0)
    8012:	f340 8121 	ble.w	8258 <ULog::logWriteBufferTo(int)+0x254>
    // used by text printout in all write functions
    col = 1;
  }
  else
    // find position for this row
    bp = logBuffer + row * logRowSize;
    8016:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    801a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    801c:	fb02 3a09 	mla	sl, r2, r9, r3
  //     // it was last usable row
  //     return row;
  //   bp += logRowSize;
  // }
  // send all recorded data types
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    8020:	f108 061b 	add.w	r6, r8, #27
{
    8024:	2401      	movs	r4, #1
  int n = 0; // used number of characters
    8026:	2500      	movs	r5, #0
      if (row == -1)
      { // first log line is send as MATLAB individual comment lines
        if (logToUSB)
        { // send one headline at a time
          logline[n] = '\0';
          rowSendOK = usb.send(logline);
    8028:	f8df b290 	ldr.w	fp, [pc, #656]	; 82bc <ULog::logWriteBufferTo(int)+0x2b8>
  char * p1 = logline;
    802c:	af03      	add	r7, sp, #12
    802e:	1e63      	subs	r3, r4, #1
    if (logRowFlags[item])
    8030:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    8034:	b2db      	uxtb	r3, r3
    8036:	b1c2      	cbz	r2, 806a <ULog::logWriteBufferTo(int)+0x66>
      switch (item)
    8038:	2b1b      	cmp	r3, #27
    803a:	d80f      	bhi.n	805c <ULog::logWriteBufferTo(int)+0x58>
    803c:	e8df f003 	tbb	[pc, r3]
    8040:	c8d40ee0 	.word	0xc8d40ee0
    8044:	b0bc0e0e 	.word	0xb0bc0e0e
    8048:	798598a4 	.word	0x798598a4
    804c:	414d616d 	.word	0x414d616d
    8050:	0e0e0e0e 	.word	0x0e0e0e0e
    8054:	0e0e0e0e 	.word	0x0e0e0e0e
    8058:	1a0e0e0e 	.word	0x1a0e0e0e
          usb.send("# ULog::WriteBufferTo: flag do not exist - get log will fail!\n");
    805c:	4994      	ldr	r1, [pc, #592]	; (82b0 <ULog::logWriteBufferTo(int)+0x2ac>)
    805e:	4658      	mov	r0, fp
    8060:	f004 fad4 	bl	c60c <UUSB::send(char const*)>
      if (row == -1)
    8064:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    8068:	d019      	beq.n	809e <ULog::logWriteBufferTo(int)+0x9a>
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    806a:	2c1d      	cmp	r4, #29
    806c:	d020      	beq.n	80b0 <ULog::logWriteBufferTo(int)+0xac>
    806e:	3401      	adds	r4, #1
    8070:	b2e4      	uxtb	r4, r4
    8072:	e7dc      	b.n	802e <ULog::logWriteBufferTo(int)+0x2a>
        case LOG_EXTRA: writeExtra(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8074:	f8b8 10ee 	ldrh.w	r1, [r8, #238]	; 0xee
    8078:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    807c:	464a      	mov	r2, r9
    807e:	4640      	mov	r0, r8
    8080:	9300      	str	r3, [sp, #0]
    8082:	4451      	add	r1, sl
    8084:	463b      	mov	r3, r7
    8086:	f7ff fc07 	bl	7898 <ULog::writeExtra(signed char*, int, char*, int)>
    808a:	4638      	mov	r0, r7
    808c:	f015 f918 	bl	1d2c0 <strlen>
    8090:	ab03      	add	r3, sp, #12
    8092:	4405      	add	r5, r0
      if (row == -1)
    8094:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
        case LOG_EXTRA: writeExtra(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8098:	eb03 0705 	add.w	r7, r3, r5
      if (row == -1)
    809c:	d1e7      	bne.n	806e <ULog::logWriteBufferTo(int)+0x6a>
        if (logToUSB)
    809e:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
    80a2:	2b00      	cmp	r3, #0
    80a4:	f040 80b8 	bne.w	8218 <ULog::logWriteBufferTo(int)+0x214>
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    80a8:	2c1d      	cmp	r4, #29
        }
        // reset result string for new headline.
        n = 0;
    80aa:	461d      	mov	r5, r3
        p1 = logline;
    80ac:	af03      	add	r7, sp, #12
  for (item = LOG_TIME; item < LOG_MAX_CNT; item = logItem(int(item) + 1))
    80ae:	d1de      	bne.n	806e <ULog::logWriteBufferTo(int)+0x6a>
      }
    }
  }
  //add a new line after a full data-line
  if (row >= 0)
    80b0:	f1b9 0f00 	cmp.w	r9, #0
    80b4:	f280 80bc 	bge.w	8230 <ULog::logWriteBufferTo(int)+0x22c>
    {
      tried = 0;
    }
  }
  return row;
}
    80b8:	4648      	mov	r0, r9
    80ba:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
    80be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writeTiming(&bp[logRowPos[item]], row, p1, MLL - n);
    80c2:	f8b8 10d6 	ldrh.w	r1, [r8, #214]	; 0xd6
    80c6:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    80ca:	464a      	mov	r2, r9
    80cc:	4640      	mov	r0, r8
    80ce:	9300      	str	r3, [sp, #0]
    80d0:	4451      	add	r1, sl
    80d2:	463b      	mov	r3, r7
    80d4:	f7ff fb9e 	bl	7814 <ULog::writeTiming(signed char*, int, char*, int)>
            n += strlen(p1);
    80d8:	e7d7      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
          writeBatt(&bp[logRowPos[item]], row, p1, MLL - n);
    80da:	f8b8 30d4 	ldrh.w	r3, [r8, #212]	; 0xd4
  if (row < 0)
    80de:	f1b9 0f00 	cmp.w	r9, #0
          writeBatt(&bp[logRowPos[item]], row, p1, MLL - n);
    80e2:	f5c5 61fa 	rsb	r1, r5, #2000	; 0x7d0
    80e6:	4453      	add	r3, sl
    snprintf(p1, maxLength, "%% %2d    Battery voltage (%.2f V)\r\n", col++, *v);
    80e8:	ed93 7a00 	vldr	s14, [r3]
    80ec:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    80f0:	ed8d 7b00 	vstr	d7, [sp]
  if (row < 0)
    80f4:	f2c0 80c2 	blt.w	827c <ULog::logWriteBufferTo(int)+0x278>
    snprintf(p1, maxLength, "%.2f ", *v);
    80f8:	4a6e      	ldr	r2, [pc, #440]	; (82b4 <ULog::logWriteBufferTo(int)+0x2b0>)
    80fa:	4638      	mov	r0, r7
    80fc:	f013 fb5a 	bl	1b7b4 <snprintf>
    8100:	e7c3      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_DIST:  writeDistSensor(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8102:	f8b8 10d2 	ldrh.w	r1, [r8, #210]	; 0xd2
    8106:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    810a:	464a      	mov	r2, r9
    810c:	4640      	mov	r0, r8
    810e:	9300      	str	r3, [sp, #0]
    8110:	4451      	add	r1, sl
    8112:	463b      	mov	r3, r7
    8114:	f7ff fc7c 	bl	7a10 <ULog::writeDistSensor(signed char*, int, char*, int)>
    8118:	e7b7      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
            writeLineSensor(&bp[logRowPos[item]], row, p1, MLL - n);
    811a:	f8b8 10d0 	ldrh.w	r1, [r8, #208]	; 0xd0
    811e:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8122:	464a      	mov	r2, r9
    8124:	4640      	mov	r0, r8
    8126:	9300      	str	r3, [sp, #0]
    8128:	4451      	add	r1, sl
    812a:	463b      	mov	r3, r7
    812c:	f7ff fc0e 	bl	794c <ULog::writeLineSensor(signed char*, int, char*, int)>
            n += strlen(p1);
    8130:	e7ab      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_POSE:  writePose(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8132:	f8b8 10ce 	ldrh.w	r1, [r8, #206]	; 0xce
    8136:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    813a:	464a      	mov	r2, r9
    813c:	4640      	mov	r0, r8
    813e:	9300      	str	r3, [sp, #0]
    8140:	4451      	add	r1, sl
    8142:	463b      	mov	r3, r7
    8144:	f7ff fb1a 	bl	777c <ULog::writePose(signed char*, int, char*, int)>
    8148:	e79f      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_TURNRATE:   writeTurnrate(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    814a:	f8b8 30cc 	ldrh.w	r3, [r8, #204]	; 0xcc
  if (row < 0)
    814e:	f1b9 0f00 	cmp.w	r9, #0
        case LOG_TURNRATE:   writeTurnrate(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8152:	f5c5 61fa 	rsb	r1, r5, #2000	; 0x7d0
    8156:	4453      	add	r3, sl
    snprintf(p1, maxLength, "%%  %d    Turnrate (rad/s): %.4f\r\n", col, v[0]);
    8158:	ed93 7a00 	vldr	s14, [r3]
    815c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8160:	ed8d 7b00 	vstr	d7, [sp]
  if (row < 0)
    8164:	db7e      	blt.n	8264 <ULog::logWriteBufferTo(int)+0x260>
    snprintf(p1, maxLength, "%.4f ", v[0]);
    8166:	4a54      	ldr	r2, [pc, #336]	; (82b8 <ULog::logWriteBufferTo(int)+0x2b4>)
    8168:	4638      	mov	r0, r7
    816a:	f013 fb23 	bl	1b7b4 <snprintf>
    816e:	e78c      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_WHEELVEL:   writeVel(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8170:	f8b8 10ca 	ldrh.w	r1, [r8, #202]	; 0xca
    8174:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8178:	464a      	mov	r2, r9
    817a:	4640      	mov	r0, r8
    817c:	9300      	str	r3, [sp, #0]
    817e:	4451      	add	r1, sl
    8180:	463b      	mov	r3, r7
    8182:	f7ff fa69 	bl	7658 <ULog::writeVel(signed char*, int, char*, int)>
    8186:	e780      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_ENC:   writeEnc(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8188:	f8b8 10c8 	ldrh.w	r1, [r8, #200]	; 0xc8
    818c:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8190:	464a      	mov	r2, r9
    8192:	4640      	mov	r0, r8
    8194:	9300      	str	r3, [sp, #0]
    8196:	4451      	add	r1, sl
    8198:	463b      	mov	r3, r7
    819a:	f7ff fa91 	bl	76c0 <ULog::writeEnc(signed char*, int, char*, int)>
    819e:	e774      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_MOTA:  writeCurrent(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    81a0:	f8b8 10c6 	ldrh.w	r1, [r8, #198]	; 0xc6
    81a4:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    81a8:	464a      	mov	r2, r9
    81aa:	4640      	mov	r0, r8
    81ac:	9300      	str	r3, [sp, #0]
    81ae:	4451      	add	r1, sl
    81b0:	463b      	mov	r3, r7
    81b2:	f7ff fa13 	bl	75dc <ULog::writeCurrent(signed char*, int, char*, int)>
    81b6:	e768      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_MOTV:  writeMotVolt(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    81b8:	f8b8 10c4 	ldrh.w	r1, [r8, #196]	; 0xc4
    81bc:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    81c0:	464a      	mov	r2, r9
    81c2:	4640      	mov	r0, r8
    81c4:	9300      	str	r3, [sp, #0]
    81c6:	4451      	add	r1, sl
    81c8:	463b      	mov	r3, r7
    81ca:	f7ff faa3 	bl	7714 <ULog::writeMotVolt(signed char*, int, char*, int)>
    81ce:	e75c      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_GYRO:  writeGyro(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    81d0:	f8b8 10be 	ldrh.w	r1, [r8, #190]	; 0xbe
    81d4:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    81d8:	464a      	mov	r2, r9
    81da:	4640      	mov	r0, r8
    81dc:	9300      	str	r3, [sp, #0]
    81de:	4451      	add	r1, sl
    81e0:	463b      	mov	r3, r7
    81e2:	f7ff f9bb 	bl	755c <ULog::writeGyro(signed char*, int, char*, int)>
    81e6:	e750      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_ACC:   writeAcc(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    81e8:	f8b8 10bc 	ldrh.w	r1, [r8, #188]	; 0xbc
    81ec:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    81f0:	464a      	mov	r2, r9
    81f2:	4640      	mov	r0, r8
    81f4:	9300      	str	r3, [sp, #0]
    81f6:	4451      	add	r1, sl
    81f8:	463b      	mov	r3, r7
    81fa:	f7ff f96f 	bl	74dc <ULog::writeAcc(signed char*, int, char*, int)>
    81fe:	e744      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
        case LOG_TIME:  writeTime(&bp[logRowPos[item]], row, p1, MLL - n); n += strlen(p1); p1 = &logline[n]; break;
    8200:	f8b8 10b8 	ldrh.w	r1, [r8, #184]	; 0xb8
    8204:	f5c5 63fa 	rsb	r3, r5, #2000	; 0x7d0
    8208:	464a      	mov	r2, r9
    820a:	4640      	mov	r0, r8
    820c:	9300      	str	r3, [sp, #0]
    820e:	4451      	add	r1, sl
    8210:	463b      	mov	r3, r7
    8212:	f7ff f933 	bl	747c <ULog::writeTime(signed char*, int, char*, int)>
    8216:	e738      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
          logline[n] = '\0';
    8218:	2300      	movs	r3, #0
    821a:	aa03      	add	r2, sp, #12
          rowSendOK = usb.send(logline);
    821c:	4658      	mov	r0, fp
        p1 = logline;
    821e:	af03      	add	r7, sp, #12
          logline[n] = '\0';
    8220:	5553      	strb	r3, [r2, r5]
          rowSendOK = usb.send(logline);
    8222:	4611      	mov	r1, r2
        n = 0;
    8224:	461d      	mov	r5, r3
          rowSendOK = usb.send(logline);
    8226:	f004 f9f1 	bl	c60c <UUSB::send(char const*)>
    822a:	f888 012c 	strb.w	r0, [r8, #300]	; 0x12c
    822e:	e71c      	b.n	806a <ULog::logWriteBufferTo(int)+0x66>
    *p1++ = '\r';
    8230:	230d      	movs	r3, #13
    *p1++ = '\0';
    8232:	2400      	movs	r4, #0
    rowSendOK = usb.send(logline); //, rowSendOK, true);
    8234:	a903      	add	r1, sp, #12
    8236:	4821      	ldr	r0, [pc, #132]	; (82bc <ULog::logWriteBufferTo(int)+0x2b8>)
    *p1++ = '\r';
    8238:	703b      	strb	r3, [r7, #0]
    *p1++ = '\n';
    823a:	230a      	movs	r3, #10
    *p1++ = '\0';
    823c:	70bc      	strb	r4, [r7, #2]
    *p1++ = '\n';
    823e:	707b      	strb	r3, [r7, #1]
    rowSendOK = usb.send(logline); //, rowSendOK, true);
    8240:	f004 f9e4 	bl	c60c <UUSB::send(char const*)>
    8244:	f888 012c 	strb.w	r0, [r8, #300]	; 0x12c
    if (not rowSendOK)
    8248:	b318      	cbz	r0, 8292 <ULog::logWriteBufferTo(int)+0x28e>
      tried = 0;
    824a:	4b1d      	ldr	r3, [pc, #116]	; (82c0 <ULog::logWriteBufferTo(int)+0x2bc>)
}
    824c:	4648      	mov	r0, r9
      tried = 0;
    824e:	601c      	str	r4, [r3, #0]
}
    8250:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
    8254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    col = 1;
    8258:	2301      	movs	r3, #1
    bp = logBuffer;
    825a:	f8d0 a058 	ldr.w	sl, [r0, #88]	; 0x58
    col = 1;
    825e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    8262:	e6dd      	b.n	8020 <ULog::logWriteBufferTo(int)+0x1c>
    snprintf(p1, maxLength, "%%  %d    Turnrate (rad/s): %.4f\r\n", col, v[0]);
    8264:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
    8268:	4638      	mov	r0, r7
    826a:	4a16      	ldr	r2, [pc, #88]	; (82c4 <ULog::logWriteBufferTo(int)+0x2c0>)
    826c:	f013 faa2 	bl	1b7b4 <snprintf>
    col += 1;
    8270:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
    8274:	3301      	adds	r3, #1
    8276:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
}
    827a:	e706      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
    snprintf(p1, maxLength, "%% %2d    Battery voltage (%.2f V)\r\n", col++, *v);
    827c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
    8280:	4638      	mov	r0, r7
    8282:	4a11      	ldr	r2, [pc, #68]	; (82c8 <ULog::logWriteBufferTo(int)+0x2c4>)
    8284:	f103 0c01 	add.w	ip, r3, #1
    8288:	f8c8 c0ac 	str.w	ip, [r8, #172]	; 0xac
    828c:	f013 fa92 	bl	1b7b4 <snprintf>
}
    8290:	e6fb      	b.n	808a <ULog::logWriteBufferTo(int)+0x86>
      tried++;
    8292:	4a0b      	ldr	r2, [pc, #44]	; (82c0 <ULog::logWriteBufferTo(int)+0x2bc>)
      row--;
    8294:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      usb.send("# UUsb::re-try\r\n");
    8298:	490c      	ldr	r1, [pc, #48]	; (82cc <ULog::logWriteBufferTo(int)+0x2c8>)
      tried++;
    829a:	6813      	ldr	r3, [r2, #0]
      usb.send("# UUsb::re-try\r\n");
    829c:	4807      	ldr	r0, [pc, #28]	; (82bc <ULog::logWriteBufferTo(int)+0x2b8>)
      tried++;
    829e:	3301      	adds	r3, #1
    82a0:	6013      	str	r3, [r2, #0]
      usb.send("# UUsb::re-try\r\n");
    82a2:	f004 f9b3 	bl	c60c <UUSB::send(char const*)>
}
    82a6:	4648      	mov	r0, r9
    82a8:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
    82ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82b0:	20004108 	.word	0x20004108
    82b4:	200044c4 	.word	0x200044c4
    82b8:	20004594 	.word	0x20004594
    82bc:	2000fac4 	.word	0x2000fac4
    82c0:	2000fac0 	.word	0x2000fac0
    82c4:	20003f30 	.word	0x20003f30
    82c8:	2000449c 	.word	0x2000449c
    82cc:	20004148 	.word	0x20004148

000082d0 <ULog::tick()>:
	return systick_millis_count;
    82d0:	4b33      	ldr	r3, [pc, #204]	; (83a0 <ULog::tick()+0xd0>)
  if ((ltc - lastTimerCnt ) >= logInterval_ms /*or control.chirpRun*/)
    82d2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    82d4:	681a      	ldr	r2, [r3, #0]
    82d6:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    82da:	1ad3      	subs	r3, r2, r3
    82dc:	428b      	cmp	r3, r1
{
    82de:	b570      	push	{r4, r5, r6, lr}
    82e0:	4604      	mov	r4, r0
  ltc = millis(); // counts tick
    82e2:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
  if ((ltc - lastTimerCnt ) >= logInterval_ms /*or control.chirpRun*/)
    82e6:	d30e      	bcc.n	8306 <ULog::tick()+0x36>
      m++;
    82e8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    return toLog and not logFull;
    82ec:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
    82f0:	3301      	adds	r3, #1
      lastTimerCnt = ltc;
    82f2:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
      m++;
    82f6:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    82fa:	b121      	cbz	r1, 8306 <ULog::tick()+0x36>
    82fc:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    8300:	b90b      	cbnz	r3, 8306 <ULog::tick()+0x36>
        stateToLog();
    8302:	f7fe fef5 	bl	70f0 <ULog::stateToLog()>
  if (logToUSB) // send log to USB or wifi
    8306:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    830a:	b903      	cbnz	r3, 830e <ULog::tick()+0x3e>
}
    830c:	bd70      	pop	{r4, r5, r6, pc}
    if (robotHWversion == 9)
    830e:	4d25      	ldr	r5, [pc, #148]	; (83a4 <ULog::tick()+0xd4>)
      analogWrite(pin, 4095);
    8310:	f640 71ff 	movw	r1, #4095	; 0xfff
    if (logger.logRowCnt > 0)
    8314:	4e24      	ldr	r6, [pc, #144]	; (83a8 <ULog::tick()+0xd8>)
    if (robotHWversion == 9)
    8316:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    831a:	2b09      	cmp	r3, #9
      analogWrite(pin, 4095);
    831c:	bf14      	ite	ne
    831e:	2006      	movne	r0, #6
    8320:	2000      	moveq	r0, #0
    8322:	f00e fb9d 	bl	16a60 <analogWrite>
    8326:	6973      	ldr	r3, [r6, #20]
    8328:	2b00      	cmp	r3, #0
    832a:	dc0d      	bgt.n	8348 <ULog::tick()+0x78>
    else if (logStreamedMsg)
    832c:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
    8330:	b37e      	cbz	r6, 8392 <ULog::tick()+0xc2>
      writeBufferMsg();
    8332:	4620      	mov	r0, r4
    8334:	f7ff fbea 	bl	7b0c <ULog::writeBufferMsg()>
      if (logStreamedMsgOutPos >= logStreamedMsgPos)
    8338:	e9d4 3211 	ldrd	r3, r2, [r4, #68]	; 0x44
    833c:	429a      	cmp	r2, r3
    833e:	d315      	bcc.n	836c <ULog::tick()+0x9c>
        logToUSB = false;
    8340:	2300      	movs	r3, #0
    8342:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    8346:	e011      	b.n	836c <ULog::tick()+0x9c>
      row = logger.logWriteBufferTo (row);
    8348:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    834c:	4630      	mov	r0, r6
    834e:	f7ff fe59 	bl	8004 <ULog::logWriteBufferTo(int)>
      if ( row >= logger.logRowCnt ) // finished
    8352:	6973      	ldr	r3, [r6, #20]
      row++;
    8354:	3001      	adds	r0, #1
      if ( row >= logger.logRowCnt ) // finished
    8356:	4298      	cmp	r0, r3
      row++;
    8358:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
      if ( row >= logger.logRowCnt ) // finished
    835c:	db06      	blt.n	836c <ULog::tick()+0x9c>
        logToUSB = false;
    835e:	2200      	movs	r2, #0
        row = -1;
    8360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        logToUSB = false;
    8364:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        row = -1;
    8368:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    if (robotHWversion == 9)
    836c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
      analogWrite(pin, value << 3);
    8370:	2100      	movs	r1, #0
    if (robotHWversion == 9)
    8372:	2b09      	cmp	r3, #9
      analogWrite(pin, value << 3);
    8374:	bf14      	ite	ne
    8376:	2006      	movne	r0, #6
    8378:	4608      	moveq	r0, r1
    837a:	f00e fb71 	bl	16a60 <analogWrite>
    if (not logToUSB)
    837e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    8382:	2b00      	cmp	r3, #0
    8384:	d1c2      	bne.n	830c <ULog::tick()+0x3c>
      usb.send("%% logend\n");
    8386:	4909      	ldr	r1, [pc, #36]	; (83ac <ULog::tick()+0xdc>)
    8388:	4809      	ldr	r0, [pc, #36]	; (83b0 <ULog::tick()+0xe0>)
}
    838a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      usb.send("%% logend\n");
    838e:	f004 b93d 	b.w	c60c <UUSB::send(char const*)>
      usb.send("%% Log buffer is empty\r\n");
    8392:	4908      	ldr	r1, [pc, #32]	; (83b4 <ULog::tick()+0xe4>)
    8394:	4806      	ldr	r0, [pc, #24]	; (83b0 <ULog::tick()+0xe0>)
    8396:	f004 f939 	bl	c60c <UUSB::send(char const*)>
      logToUSB = false;
    839a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    839e:	e7e5      	b.n	836c <ULog::tick()+0x9c>
    83a0:	2000fab8 	.word	0x2000fab8
    83a4:	2000f660 	.word	0x2000f660
    83a8:	2000f24c 	.word	0x2000f24c
    83ac:	200041b4 	.word	0x200041b4
    83b0:	2000fac4 	.word	0x2000fac4
    83b4:	20004198 	.word	0x20004198

000083b8 <ULog::setLogFlagDefault()>:
 * Mission init is called before any control is attempted,
 * this can be used to initialize ant variables dependent on measured values, i.e.
 * battery voltage or gyro.
 * and to set data logger options */
void ULog::setLogFlagDefault()
{
    83b8:	b430      	push	{r4, r5}
  logRowItemSize[item * 2] = count;
    83ba:	f246 6401 	movw	r4, #26113	; 0x6601
  //
  logRowFlags[LOG_TIME] = 1; // not tested - time always on
  //
  // log flags (default)
//   control.missionState = 0;
  logRowFlags[LOG_TIME] = true; // state number in mission
    83be:	2201      	movs	r2, #1
  logRowItemSize[item * 2] = count;
    83c0:	491b      	ldr	r1, [pc, #108]	; (8430 <ULog::setLogFlagDefault()+0x78>)
  logRowFlags[LOG_POSE] = true;    // calculated pose x,y,th
  logRowFlags[LOG_LINE] = true;    // line sensor
  logRowFlags[LOG_DIST] = false;    // distance sensor
  logRowFlags[LOG_BATT] = true;    // battery oltage in Volts
  logRowFlags[LOG_TIMING] = false;    // battery oltage in Volts
  logRowFlags[LOG_CTRL_VELL] = false;  // All relevant values in controller
    83c2:	2300      	movs	r3, #0
  logRowItemSize[item * 2] = count;
    83c4:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    83c8:	f246 6402 	movw	r4, #26114	; 0x6602
  logRowFlags[LOG_TIME] = true; // state number in mission
    83cc:	61c2      	str	r2, [r0, #28]
  logRowFlags[LOG_POSE] = true;    // calculated pose x,y,th
    83ce:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
  logRowItemSize[item * 2] = count;
    83d2:	f8a0 40fe 	strh.w	r4, [r0, #254]	; 0xfe
    83d6:	f104 44cc 	add.w	r4, r4, #1711276032	; 0x66000000
    83da:	4a16      	ldr	r2, [pc, #88]	; (8434 <ULog::setLogFlagDefault()+0x7c>)
    83dc:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
    83e0:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
    83e4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  logRowFlags[LOG_LINE] = true;    // line sensor
    83e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  logRowItemSize[item * 2] = count;
    83ec:	4a12      	ldr	r2, [pc, #72]	; (8438 <ULog::setLogFlagDefault()+0x80>)
  logRowFlags[LOG_LINE] = true;    // line sensor
    83ee:	6281      	str	r1, [r0, #40]	; 0x28
  logRowItemSize[item * 2] = count;
    83f0:	4912      	ldr	r1, [pc, #72]	; (843c <ULog::setLogFlagDefault()+0x84>)
    83f2:	4d13      	ldr	r5, [pc, #76]	; (8440 <ULog::setLogFlagDefault()+0x88>)
  logRowFlags[LOG_CTRL_VELL] = false;  // All relevant values in controller
    83f4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  logRowItemSize[item * 2] = count;
    83f8:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
  logRowFlags[LOG_CTRL_VELR] = false;   
    83fc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  logRowFlags[LOG_CTRL_TURN] = false;   
  logRowFlags[LOG_CTRL_POS] = false;    
    83fe:	6303      	str	r3, [r0, #48]	; 0x30
  logRowFlags[LOG_CTRL_EDGE] = false;    
  logRowFlags[LOG_CTRL_WALL] = false;    
  logRowFlags[LOG_CTRL_FWD_DIST] = false;    
  logRowFlags[LOG_CTRL_BAL] = false;    // 
    8400:	8683      	strh	r3, [r0, #52]	; 0x34
  logRowFlags[LOG_CTRL_BAL_VEL] = false;  // 
  logRowFlags[LOG_CTRL_BAL_POS] = false;  // control of in balance position
    8402:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  logRowFlags[LOG_CHIRP] = false;    // chirp log not default
    8406:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  logRowItemSize[item * 2] = count;
    840a:	e9c0 4241 	strd	r4, r2, [r0, #260]	; 0x104
    840e:	4a0d      	ldr	r2, [pc, #52]	; (8444 <ULog::setLogFlagDefault()+0x8c>)
    8410:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
    8414:	e9c0 1243 	strd	r1, r2, [r0, #268]	; 0x10c
    8418:	3412      	adds	r4, #18
  logRowFlags[LOG_MAG] = false;    // not used
    841a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  logRowFlags[LOG_ENC] = false;    // raw encoder counter
    841e:	f44f 7280 	mov.w	r2, #256	; 0x100
  logRowItemSize[item * 2] = count;
    8422:	f8c0 4128 	str.w	r4, [r0, #296]	; 0x128
  logRowFlags[LOG_MAG] = false;    // not used
    8426:	6201      	str	r1, [r0, #32]
  logRowFlags[LOG_ENC] = false;    // raw encoder counter
    8428:	8482      	strh	r2, [r0, #36]	; 0x24

}
    842a:	bc30      	pop	{r4, r5}
    842c:	4770      	bx	lr
    842e:	bf00      	nop
    8430:	66036a04 	.word	0x66036a04
    8434:	4b026603 	.word	0x4b026603
    8438:	4a166604 	.word	0x4a166604
    843c:	66014b02 	.word	0x66014b02
    8440:	66036603 	.word	0x66036603
    8444:	6b034b07 	.word	0x6b034b07

00008448 <ULog::eePromSaveStatusLog()>:


void ULog::eePromSaveStatusLog()
{
  uint32_t flags = 0;
  for (int i = 0; i < LOG_MAX_CNT; i++)
    8448:	f06f 0c1a 	mvn.w	ip, #26
  uint32_t flags = 0;
    844c:	2100      	movs	r1, #0
    844e:	f100 031b 	add.w	r3, r0, #27
    8452:	ebac 0c00 	sub.w	ip, ip, r0
{
    8456:	b570      	push	{r4, r5, r6, lr}
  { // LOG_MAX_CNT is about 16 and less than 32
    if (logRowFlags[i])
      flags += 1 << i;
    8458:	2501      	movs	r5, #1
{
    845a:	4606      	mov	r6, r0
    845c:	f100 0e38 	add.w	lr, r0, #56	; 0x38
      flags += 1 << i;
    8460:	eb0c 0203 	add.w	r2, ip, r3
    if (logRowFlags[i])
    8464:	f813 4f01 	ldrb.w	r4, [r3, #1]!
      flags += 1 << i;
    8468:	fa05 f202 	lsl.w	r2, r5, r2
    if (logRowFlags[i])
    846c:	b104      	cbz	r4, 8470 <ULog::eePromSaveStatusLog()+0x28>
      flags += 1 << i;
    846e:	4411      	add	r1, r2
  for (int i = 0; i < LOG_MAX_CNT; i++)
    8470:	4573      	cmp	r3, lr
    8472:	d1f5      	bne.n	8460 <ULog::eePromSaveStatusLog()+0x18>
  }
  eeConfig.push32(flags);
    8474:	4804      	ldr	r0, [pc, #16]	; (8488 <ULog::eePromSaveStatusLog()+0x40>)
    8476:	f7fa fe2f 	bl	30d8 <EEConfig::push32(unsigned long)>
  eeConfig.push32(logInterval_ms);
    847a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    847c:	4802      	ldr	r0, [pc, #8]	; (8488 <ULog::eePromSaveStatusLog()+0x40>)
}
    847e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  eeConfig.push32(logInterval_ms);
    8482:	f7fa be29 	b.w	30d8 <EEConfig::push32(unsigned long)>
    8486:	bf00      	nop
    8488:	2000ebf4 	.word	0x2000ebf4

0000848c <ULog::eePromLoadStatusLog()>:

void ULog::eePromLoadStatusLog()
{
    848c:	b538      	push	{r3, r4, r5, lr}
    return deviceID > 0 and deviceID < MAX_ROBOT_NAMES;
    848e:	4b1b      	ldr	r3, [pc, #108]	; (84fc <ULog::eePromLoadStatusLog()+0x70>)
    8490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8492:	3b01      	subs	r3, #1
  uint32_t flags;
  int skipCount = 4 + 4;
  if (robot.robotIDvalid() and not eeConfig.isStringConfig())
    8494:	2b95      	cmp	r3, #149	; 0x95
    8496:	d904      	bls.n	84a2 <ULog::eePromLoadStatusLog()+0x16>
    8498:	4819      	ldr	r0, [pc, #100]	; (8500 <ULog::eePromLoadStatusLog()+0x74>)
    849a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    849c:	3308      	adds	r3, #8
    849e:	6243      	str	r3, [r0, #36]	; 0x24
  }
  else
  { // just skip, leaving default settings
    eeConfig.skipAddr(skipCount);
  }
}
    84a0:	bd38      	pop	{r3, r4, r5, pc}
    return stringConfig;
    84a2:	4605      	mov	r5, r0
    84a4:	4816      	ldr	r0, [pc, #88]	; (8500 <ULog::eePromLoadStatusLog()+0x74>)
  if (robot.robotIDvalid() and not eeConfig.isStringConfig())
    84a6:	f890 4020 	ldrb.w	r4, [r0, #32]
    84aa:	2c00      	cmp	r4, #0
    84ac:	d1f5      	bne.n	849a <ULog::eePromLoadStatusLog()+0xe>
    flags = eeConfig.read32();
    84ae:	f7fa fe67 	bl	3180 <EEConfig::read32()>
    for (int i = 0; i < LOG_MAX_CNT; i++)
    84b2:	4623      	mov	r3, r4
    84b4:	f105 021b 	add.w	r2, r5, #27
    flags = eeConfig.read32();
    84b8:	4604      	mov	r4, r0
      logRowFlags[i] = (flags & (1 << i)) != 0;
    84ba:	f04f 0c01 	mov.w	ip, #1
    84be:	fa0c f103 	lsl.w	r1, ip, r3
    for (int i = 0; i < LOG_MAX_CNT; i++)
    84c2:	3301      	adds	r3, #1
      logRowFlags[i] = (flags & (1 << i)) != 0;
    84c4:	4221      	tst	r1, r4
    84c6:	bf14      	ite	ne
    84c8:	2101      	movne	r1, #1
    84ca:	2100      	moveq	r1, #0
    for (int i = 0; i < LOG_MAX_CNT; i++)
    84cc:	2b1d      	cmp	r3, #29
      logRowFlags[i] = (flags & (1 << i)) != 0;
    84ce:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (int i = 0; i < LOG_MAX_CNT; i++)
    84d2:	d1f4      	bne.n	84be <ULog::eePromLoadStatusLog()+0x32>
    logRowFlags[LOG_MISSION] = false;
    84d4:	2300      	movs	r3, #0
    logInterval_ms = eeConfig.read32();
    84d6:	480a      	ldr	r0, [pc, #40]	; (8500 <ULog::eePromLoadStatusLog()+0x74>)
      logRowFlags[j] = false;
    84d8:	632b      	str	r3, [r5, #48]	; 0x30
    logRowFlags[LOG_MISSION] = false;
    84da:	776b      	strb	r3, [r5, #29]
    logRowFlags[LOG_MAG] = false;
    84dc:	842b      	strh	r3, [r5, #32]
    logRowFlags[LOG_CHIRP] = false;
    84de:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
      logRowFlags[j] = false;
    84e2:	62eb      	str	r3, [r5, #44]	; 0x2c
    84e4:	f8c5 3033 	str.w	r3, [r5, #51]	; 0x33
    logInterval_ms = eeConfig.read32();
    84e8:	f7fa fe4a 	bl	3180 <EEConfig::read32()>
    84ec:	4603      	mov	r3, r0
    current.logIntervalChanged();
    84ee:	4805      	ldr	r0, [pc, #20]	; (8504 <ULog::eePromLoadStatusLog()+0x78>)
    logInterval_ms = eeConfig.read32();
    84f0:	63eb      	str	r3, [r5, #60]	; 0x3c
}
    84f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    current.logIntervalChanged();
    84f6:	f7fa ba71 	b.w	29dc <UCurrent::logIntervalChanged()>
    84fa:	bf00      	nop
    84fc:	2000f660 	.word	0x2000f660
    8500:	2000ebf4 	.word	0x2000ebf4
    8504:	2000ea90 	.word	0x2000ea90

00008508 <_GLOBAL__sub_I_logger>:
}
    8508:	b510      	push	{r4, lr}
class ULog : public USubss
    850a:	4c11      	ldr	r4, [pc, #68]	; (8550 <_GLOBAL__sub_I_logger+0x48>)
    850c:	4620      	mov	r0, r4
    850e:	f003 fe8b 	bl	c228 <USubss::USubss()>
    8512:	4910      	ldr	r1, [pc, #64]	; (8554 <_GLOBAL__sub_I_logger+0x4c>)
    8514:	2300      	movs	r3, #0
    8516:	2201      	movs	r2, #1
    8518:	2000      	movs	r0, #0
    851a:	6021      	str	r1, [r4, #0]
    851c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8520:	63e2      	str	r2, [r4, #60]	; 0x3c
    8522:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
ULog logger;
    8526:	4620      	mov	r0, r4
    8528:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    852c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    8530:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    8534:	65a3      	str	r3, [r4, #88]	; 0x58
    8536:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    853a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    853e:	4906      	ldr	r1, [pc, #24]	; (8558 <_GLOBAL__sub_I_logger+0x50>)
    8540:	e9c4 322b 	strd	r3, r2, [r4, #172]	; 0xac
    8544:	4a05      	ldr	r2, [pc, #20]	; (855c <_GLOBAL__sub_I_logger+0x54>)
}
    8546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ULog logger;
    854a:	f010 bd65 	b.w	19018 <__aeabi_atexit>
    854e:	bf00      	nop
    8550:	2000f24c 	.word	0x2000f24c
    8554:	20007ff8 	.word	0x20007ff8
    8558:	00006fb9 	.word	0x00006fb9
    855c:	20008f80 	.word	0x20008f80

00008560 <UMotor::sendHelp()>:
{
    8560:	b530      	push	{r4, r5, lr}
  usb.send("# Motor -------\r\n");
    8562:	4d29      	ldr	r5, [pc, #164]	; (8608 <UMotor::sendHelp()+0xa8>)
{
    8564:	b0d1      	sub	sp, #324	; 0x144
    8566:	4604      	mov	r4, r0
  usb.send("# Motor -------\r\n");
    8568:	4928      	ldr	r1, [pc, #160]	; (860c <UMotor::sendHelp()+0xac>)
    856a:	4628      	mov	r0, r5
    856c:	f004 f84e 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotr V \tSet motor reversed; V=0 for small motors, V=1 for some big motors\r\n");
    8570:	2252      	movs	r2, #82	; 0x52
    8572:	4927      	ldr	r1, [pc, #156]	; (8610 <UMotor::sendHelp()+0xb0>)
    8574:	a805      	add	r0, sp, #20
    8576:	f00e f895 	bl	166a4 <memcpy>
  usb.send(reply);
    857a:	a905      	add	r1, sp, #20
    857c:	4628      	mov	r0, r5
    857e:	f004 f845 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotv m1 m2 \tSet motor voltage -24.0..24.0 - and enable motors\r\n");
    8582:	2246      	movs	r2, #70	; 0x46
    8584:	4923      	ldr	r1, [pc, #140]	; (8614 <UMotor::sendHelp()+0xb4>)
    8586:	a805      	add	r0, sp, #20
    8588:	f00e f88c 	bl	166a4 <memcpy>
  usb.send(reply);
    858c:	a905      	add	r1, sp, #20
    858e:	4628      	mov	r0, r5
    8590:	f004 f83c 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotfrq \tSet motor PWM frequency [100..50000], is %d\r\n", PWMfrq);
    8594:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8596:	4a20      	ldr	r2, [pc, #128]	; (8618 <UMotor::sendHelp()+0xb8>)
    8598:	f44f 7196 	mov.w	r1, #300	; 0x12c
    859c:	a805      	add	r0, sp, #20
    859e:	f013 f909 	bl	1b7b4 <snprintf>
  usb.send(reply);
    85a2:	a905      	add	r1, sp, #20
    85a4:	4628      	mov	r0, r5
    85a6:	f004 f831 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tdeadband L R\tSet PWM deadband ([0..100%%], is left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    85aa:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
    85ae:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
    85b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    85b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    85ba:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
    85be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    85c2:	4a16      	ldr	r2, [pc, #88]	; (861c <UMotor::sendHelp()+0xbc>)
    85c4:	a805      	add	r0, sp, #20
    85c6:	ee87 6a26 	vdiv.f32	s12, s14, s13
    85ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    85ce:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8600 <UMotor::sendHelp()+0xa0>
    85d2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    85d6:	ee26 6b05 	vmul.f64	d6, d6, d5
    85da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    85de:	ee27 7b05 	vmul.f64	d7, d7, d5
    85e2:	ed8d 6b02 	vstr	d6, [sp, #8]
    85e6:	ed8d 7b00 	vstr	d7, [sp]
    85ea:	f013 f8e3 	bl	1b7b4 <snprintf>
  usb.send(reply);
    85ee:	a905      	add	r1, sp, #20
    85f0:	4628      	mov	r0, r5
    85f2:	f004 f80b 	bl	c60c <UUSB::send(char const*)>
}
    85f6:	b051      	add	sp, #324	; 0x144
    85f8:	bd30      	pop	{r4, r5, pc}
    85fa:	bf00      	nop
    85fc:	f3af 8000 	nop.w
    8600:	00000000 	.word	0x00000000
    8604:	40590000 	.word	0x40590000
    8608:	2000fac4 	.word	0x2000fac4
    860c:	2000558c 	.word	0x2000558c
    8610:	200055a0 	.word	0x200055a0
    8614:	200055f4 	.word	0x200055f4
    8618:	2000563c 	.word	0x2000563c
    861c:	20005678 	.word	0x20005678

00008620 <UMotor::~UMotor()>:

#include <stdint.h>
#include "main.h"
#include "usubss.h"

class UMotor : public USubss
    8620:	b510      	push	{r4, lr}
    8622:	4b05      	ldr	r3, [pc, #20]	; (8638 <UMotor::~UMotor()+0x18>)
    8624:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    8626:	6840      	ldr	r0, [r0, #4]
    8628:	6023      	str	r3, [r4, #0]
	if (__p)
    862a:	b118      	cbz	r0, 8634 <UMotor::~UMotor()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    862c:	68e1      	ldr	r1, [r4, #12]
    862e:	1a09      	subs	r1, r1, r0
    8630:	f00e f8d4 	bl	167dc <operator delete(void*, unsigned int)>
    8634:	4620      	mov	r0, r4
    8636:	bd10      	pop	{r4, pc}
    8638:	200080a0 	.word	0x200080a0

0000863c <UMotor::setup()>:
{
    863c:	b538      	push	{r3, r4, r5, lr}
    863e:	4604      	mov	r4, r0
  motorPreEnabled = true;
    8640:	2501      	movs	r5, #1
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    8642:	200c      	movs	r0, #12
    8644:	f00e fb62 	bl	16d0c <analogWriteRes>
  pinMode(PIN_LEFT_IN2,OUTPUT); // motor 1 IN1 ()
    8648:	2003      	movs	r0, #3
    864a:	4629      	mov	r1, r5
  motorPreEnabled = true;
    864c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  pinMode(PIN_LEFT_IN2,OUTPUT); // motor 1 IN1 ()
    8650:	f00d fd10 	bl	16074 <pinMode>
  pinMode(PIN_RIGHT_IN2,OUTPUT); // motor 2 IN1 ()
    8654:	4629      	mov	r1, r5
    8656:	2005      	movs	r0, #5
    8658:	f00d fd0c 	bl	16074 <pinMode>
  pinMode(PIN_LEFT_IN1,OUTPUT); // motor 1 IN2 ()
    865c:	4629      	mov	r1, r5
    865e:	2002      	movs	r0, #2
    8660:	f00d fd08 	bl	16074 <pinMode>
  pinMode(PIN_RIGHT_IN1,OUTPUT); //motor 2 IN2 ()
    8664:	4629      	mov	r1, r5
    8666:	2004      	movs	r0, #4
    8668:	f00d fd04 	bl	16074 <pinMode>
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    866c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    8670:	f44f 3284 	mov.w	r2, #67584	; 0x10800
		if (val) {
    8674:	f894 3020 	ldrb.w	r3, [r4, #32]
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    8678:	8661      	strh	r1, [r4, #50]	; 0x32
  motorAnkerDir[1] = m2PWM >= 0;
    867a:	8725      	strh	r5, [r4, #56]	; 0x38
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    867c:	6362      	str	r2, [r4, #52]	; 0x34
    867e:	2b00      	cmp	r3, #0
    8680:	d052      	beq.n	8728 <UMotor::setup()+0xec>
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    8682:	4b47      	ldr	r3, [pc, #284]	; (87a0 <UMotor::setup()+0x164>)
    8684:	2210      	movs	r2, #16
    8686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    868a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    868e:	2003      	movs	r0, #3
    8690:	f00e f9e6 	bl	16a60 <analogWrite>
		if (val) {
    8694:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    8698:	2b00      	cmp	r3, #0
    869a:	d05b      	beq.n	8754 <UMotor::setup()+0x118>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    869c:	4b40      	ldr	r3, [pc, #256]	; (87a0 <UMotor::setup()+0x164>)
    869e:	2240      	movs	r2, #64	; 0x40
    86a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    86a4:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    86a8:	2005      	movs	r0, #5
    86aa:	f00e f9d9 	bl	16a60 <analogWrite>
  switch (robot.robotHWversion)
    86ae:	4b3d      	ldr	r3, [pc, #244]	; (87a4 <UMotor::setup()+0x168>)
    86b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    86b4:	2b08      	cmp	r3, #8
    86b6:	d069      	beq.n	878c <UMotor::setup()+0x150>
  setPWMfrq(PWMfrq);
    86b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (frq > 150000) // limit'ish of motor driver
    86ba:	4a3b      	ldr	r2, [pc, #236]	; (87a8 <UMotor::setup()+0x16c>)
    86bc:	4293      	cmp	r3, r2
    86be:	dd42      	ble.n	8746 <UMotor::setup()+0x10a>
    PWMfrq=
    86c0:	f64f 53e8 	movw	r3, #65000	; 0xfde8
    86c4:	ed9f 0a39 	vldr	s0, [pc, #228]	; 87ac <UMotor::setup()+0x170>
    86c8:	6263      	str	r3, [r4, #36]	; 0x24
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
    86ca:	2003      	movs	r0, #3
    86cc:	f00e fa2e 	bl	16b2c <analogWriteFrequency>
  analogWriteFrequency(PIN_RIGHT_IN2, PWMfrq); /// frequency (Hz)
    86d0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    86d4:	2005      	movs	r0, #5
    86d6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    86da:	f00e fa27 	bl	16b2c <analogWriteFrequency>
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    86de:	f44f 6000 	mov.w	r0, #2048	; 0x800
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    86e2:	f44f 3184 	mov.w	r1, #67584	; 0x10800
  motorAnkerDir[1] = m2PWM >= 0;
    86e6:	2201      	movs	r2, #1
		if (val) {
    86e8:	f894 3020 	ldrb.w	r3, [r4, #32]
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    86ec:	8660      	strh	r0, [r4, #50]	; 0x32
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    86ee:	6361      	str	r1, [r4, #52]	; 0x34
  motorAnkerDir[1] = m2PWM >= 0;
    86f0:	8722      	strh	r2, [r4, #56]	; 0x38
    86f2:	b31b      	cbz	r3, 873c <UMotor::setup()+0x100>
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    86f4:	4b2a      	ldr	r3, [pc, #168]	; (87a0 <UMotor::setup()+0x164>)
    86f6:	2210      	movs	r2, #16
    86f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    86fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8700:	2003      	movs	r0, #3
    8702:	f00e f9ad 	bl	16a60 <analogWrite>
		if (val) {
    8706:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    870a:	b193      	cbz	r3, 8732 <UMotor::setup()+0xf6>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    870c:	4b24      	ldr	r3, [pc, #144]	; (87a0 <UMotor::setup()+0x164>)
    870e:	2240      	movs	r2, #64	; 0x40
    8710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    8714:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    8718:	2005      	movs	r0, #5
    871a:	f00e f9a1 	bl	16a60 <analogWrite>
  if (setupCnt == 0)
    871e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8720:	b313      	cbz	r3, 8768 <UMotor::setup()+0x12c>
  setupCnt++;
    8722:	3301      	adds	r3, #1
    8724:	64e3      	str	r3, [r4, #76]	; 0x4c
}
    8726:	bd38      	pop	{r3, r4, r5, pc}
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8728:	4b1d      	ldr	r3, [pc, #116]	; (87a0 <UMotor::setup()+0x164>)
    872a:	2210      	movs	r2, #16
    872c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    8730:	e7ab      	b.n	868a <UMotor::setup()+0x4e>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8732:	4b1b      	ldr	r3, [pc, #108]	; (87a0 <UMotor::setup()+0x164>)
    8734:	2240      	movs	r2, #64	; 0x40
    8736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    873a:	e7eb      	b.n	8714 <UMotor::setup()+0xd8>
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    873c:	4b18      	ldr	r3, [pc, #96]	; (87a0 <UMotor::setup()+0x164>)
    873e:	2210      	movs	r2, #16
    8740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    8744:	e7da      	b.n	86fc <UMotor::setup()+0xc0>
  else if (frq < 100)
    8746:	2b63      	cmp	r3, #99	; 0x63
    8748:	dc09      	bgt.n	875e <UMotor::setup()+0x122>
    PWMfrq = 100;
    874a:	2364      	movs	r3, #100	; 0x64
    874c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 87b0 <UMotor::setup()+0x174>
    8750:	6263      	str	r3, [r4, #36]	; 0x24
    8752:	e7ba      	b.n	86ca <UMotor::setup()+0x8e>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8754:	4b12      	ldr	r3, [pc, #72]	; (87a0 <UMotor::setup()+0x164>)
    8756:	2240      	movs	r2, #64	; 0x40
    8758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    875c:	e7a2      	b.n	86a4 <UMotor::setup()+0x68>
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
    875e:	ee07 3a90 	vmov	s15, r3
    8762:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8766:	e7b0      	b.n	86ca <UMotor::setup()+0x8e>
    addPublistItem("mot", "Get motor voltage 'mot m1(V) m2(V) vel_ref1(m/s) vel_ref2(m/s) reversed'");
    8768:	4a12      	ldr	r2, [pc, #72]	; (87b4 <UMotor::setup()+0x178>)
    876a:	4620      	mov	r0, r4
    876c:	4912      	ldr	r1, [pc, #72]	; (87b8 <UMotor::setup()+0x17c>)
    876e:	f003 fe7f 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
    addPublistItem("motpwm", "Get motor direction and PWM 'motpwm dir1 pwm1 dir2 pwm2'");
    8772:	4a12      	ldr	r2, [pc, #72]	; (87bc <UMotor::setup()+0x180>)
    8774:	4620      	mov	r0, r4
    8776:	4912      	ldr	r1, [pc, #72]	; (87c0 <UMotor::setup()+0x184>)
    8778:	f003 fe7a 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
    usb.addSubscriptionService(this);
    877c:	4621      	mov	r1, r4
    877e:	4811      	ldr	r0, [pc, #68]	; (87c4 <UMotor::setup()+0x188>)
    8780:	f004 fb88 	bl	ce94 <UUSB::addSubscriptionService(USubss*)>
  setupCnt++;
    8784:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8786:	3301      	adds	r3, #1
    8788:	64e3      	str	r3, [r4, #76]	; 0x4c
}
    878a:	bd38      	pop	{r3, r4, r5, pc}
      pinMode(PIN_MOTORS_ENABLE,OUTPUT); // hardware 8 has common enable
    878c:	2101      	movs	r1, #1
    878e:	2020      	movs	r0, #32
    8790:	f00d fc70 	bl	16074 <pinMode>
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8794:	4b0c      	ldr	r3, [pc, #48]	; (87c8 <UMotor::setup()+0x18c>)
    8796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    879a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    879e:	e78b      	b.n	86b8 <UMotor::setup()+0x7c>
    87a0:	4200c000 	.word	0x4200c000
    87a4:	2000f660 	.word	0x2000f660
    87a8:	000249f0 	.word	0x000249f0
    87ac:	477de800 	.word	0x477de800
    87b0:	42c80000 	.word	0x42c80000
    87b4:	2000545c 	.word	0x2000545c
    87b8:	200054a8 	.word	0x200054a8
    87bc:	200054ac 	.word	0x200054ac
    87c0:	200054e8 	.word	0x200054e8
    87c4:	2000fac4 	.word	0x2000fac4
    87c8:	42004000 	.word	0x42004000

000087cc <UMotor::motorSetEnable(bool, bool)>:
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    87cc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
    87d0:	b410      	push	{r4}
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    87d2:	2b00      	cmp	r3, #0
    87d4:	d046      	beq.n	8864 <UMotor::motorSetEnable(bool, bool)+0x98>
    87d6:	b9f9      	cbnz	r1, 8818 <UMotor::motorSetEnable(bool, bool)+0x4c>
    87d8:	b9f2      	cbnz	r2, 8818 <UMotor::motorSetEnable(bool, bool)+0x4c>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    87da:	4b28      	ldr	r3, [pc, #160]	; (887c <UMotor::motorSetEnable(bool, bool)+0xb0>)
  motorEnable[0] = e1;
    87dc:	2400      	movs	r4, #0
    87de:	2120      	movs	r1, #32
  motorEnable[1] = e2;
    87e0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  motorEnable[0] = e1;
    87e4:	f880 4020 	strb.w	r4, [r0, #32]
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    87e8:	2410      	movs	r4, #16
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    87ea:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    motorSleeping[0] = true;
    87ee:	2101      	movs	r1, #1
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    87f0:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
    87f4:	8741      	strh	r1, [r0, #58]	; 0x3a
  if (not motorEnable[1])
    87f6:	bb6a      	cbnz	r2, 8854 <UMotor::motorSetEnable(bool, bool)+0x88>
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    87f8:	f44f 7480 	mov.w	r4, #256	; 0x100
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    87fc:	2240      	movs	r2, #64	; 0x40
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    87fe:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    motorSleeping[1] = true;
    8806:	8781      	strh	r1, [r0, #60]	; 0x3c
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8808:	4b1d      	ldr	r3, [pc, #116]	; (8880 <UMotor::motorSetEnable(bool, bool)+0xb4>)
    880a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
}
    880e:	f85d 4b04 	ldr.w	r4, [sp], #4
    8812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    8816:	4770      	bx	lr
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    8818:	f890 3020 	ldrb.w	r3, [r0, #32]
    881c:	bb5b      	cbnz	r3, 8876 <UMotor::motorSetEnable(bool, bool)+0xaa>
    881e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    8822:	b913      	cbnz	r3, 882a <UMotor::motorSetEnable(bool, bool)+0x5e>
    motorPreEnabled = false;
    8824:	f44f 7380 	mov.w	r3, #256	; 0x100
    8828:	8583      	strh	r3, [r0, #44]	; 0x2c
  if (e1 and not motorEnable[0])
    882a:	2900      	cmp	r1, #0
    882c:	d0d5      	beq.n	87da <UMotor::motorSetEnable(bool, bool)+0xe>
    overloadCount = 0;
    882e:	2300      	movs	r3, #0
    8830:	6283      	str	r3, [r0, #40]	; 0x28
  motorEnable[0] = e1;
    8832:	2301      	movs	r3, #1
  motorEnable[1] = e2;
    8834:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  motorEnable[0] = e1;
    8838:	f880 3020 	strb.w	r3, [r0, #32]
  if (not motorEnable[1])
    883c:	b952      	cbnz	r2, 8854 <UMotor::motorSetEnable(bool, bool)+0x88>
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    883e:	4a0f      	ldr	r2, [pc, #60]	; (887c <UMotor::motorSetEnable(bool, bool)+0xb0>)
    8840:	f44f 7480 	mov.w	r4, #256	; 0x100
    8844:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8848:	2440      	movs	r4, #64	; 0x40
    884a:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
    motorSleeping[1] = true;
    884e:	8783      	strh	r3, [r0, #60]	; 0x3c
		if (val) {
    8850:	2900      	cmp	r1, #0
    8852:	d0d9      	beq.n	8808 <UMotor::motorSetEnable(bool, bool)+0x3c>
				CORE_PIN32_PORTSET = CORE_PIN32_BITMASK;
    8854:	4b0a      	ldr	r3, [pc, #40]	; (8880 <UMotor::motorSetEnable(bool, bool)+0xb4>)
    8856:	f44f 5280 	mov.w	r2, #4096	; 0x1000
}
    885a:	f85d 4b04 	ldr.w	r4, [sp], #4
    885e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    8862:	4770      	bx	lr
  if (e1 and not motorEnable[0])
    8864:	2900      	cmp	r1, #0
    8866:	d0b8      	beq.n	87da <UMotor::motorSetEnable(bool, bool)+0xe>
    8868:	f890 3020 	ldrb.w	r3, [r0, #32]
    886c:	2b00      	cmp	r3, #0
    886e:	d1e0      	bne.n	8832 <UMotor::motorSetEnable(bool, bool)+0x66>
    overloadCount = 0;
    8870:	2300      	movs	r3, #0
    8872:	6283      	str	r3, [r0, #40]	; 0x28
    8874:	e7dd      	b.n	8832 <UMotor::motorSetEnable(bool, bool)+0x66>
  if (e1 and not motorEnable[0])
    8876:	2900      	cmp	r1, #0
    8878:	d1db      	bne.n	8832 <UMotor::motorSetEnable(bool, bool)+0x66>
    887a:	e7ae      	b.n	87da <UMotor::motorSetEnable(bool, bool)+0xe>
    887c:	4200c000 	.word	0x4200c000
    8880:	42004000 	.word	0x42004000

00008884 <UMotor::motorSetPWM(int, int)>:
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    8884:	2900      	cmp	r1, #0
    8886:	bfb4      	ite	lt
    8888:	1c4b      	addlt	r3, r1, #1
    888a:	460b      	movge	r3, r1
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    888c:	2a00      	cmp	r2, #0
  motorAnkerDir[0] = m1PWM >= 0; // just for debug/log
    888e:	ea6f 0101 	mvn.w	r1, r1
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    8892:	ea4f 0363 	mov.w	r3, r3, asr #1
  motorAnkerDir[0] = m1PWM >= 0; // just for debug/log
    8896:	ea4f 71d1 	mov.w	r1, r1, lsr #31
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    889a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{ // PWM is 12 bit
    889e:	b510      	push	{r4, lr}
    88a0:	4604      	mov	r4, r0
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    88a2:	4610      	mov	r0, r2
    88a4:	bfb8      	it	lt
    88a6:	1c50      	addlt	r0, r2, #1
  motorAnkerDir[1] = m2PWM >= 0;
    88a8:	43d2      	mvns	r2, r2
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    88aa:	b21b      	sxth	r3, r3
  motorAnkerDir[0] = m1PWM >= 0; // just for debug/log
    88ac:	86e1      	strh	r1, [r4, #54]	; 0x36
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    88ae:	1040      	asrs	r0, r0, #1
		if (val) {
    88b0:	f894 1020 	ldrb.w	r1, [r4, #32]
  motorAnkerDir[1] = m2PWM >= 0;
    88b4:	0fd2      	lsrs	r2, r2, #31
  motorAnkerPWM[0] = max_pwm/2 + m1PWM/2;
    88b6:	8663      	strh	r3, [r4, #50]	; 0x32
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    88b8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  motorAnkerDir[1] = m2PWM >= 0;
    88bc:	8722      	strh	r2, [r4, #56]	; 0x38
  motorAnkerPWM[1] = max_pwm/2 + m2PWM/2;
    88be:	86a0      	strh	r0, [r4, #52]	; 0x34
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    88c0:	4a16      	ldr	r2, [pc, #88]	; (891c <UMotor::motorSetPWM(int, int)+0x98>)
		if (val) {
    88c2:	b1a1      	cbz	r1, 88ee <UMotor::motorSetPWM(int, int)+0x6a>
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
    88c4:	2110      	movs	r1, #16
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    88c6:	2003      	movs	r0, #3
    88c8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    88cc:	4619      	mov	r1, r3
    88ce:	f00e f8c7 	bl	16a60 <analogWrite>
		if (val) {
    88d2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    88d6:	b1ab      	cbz	r3, 8904 <UMotor::motorSetPWM(int, int)+0x80>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    88d8:	4b10      	ldr	r3, [pc, #64]	; (891c <UMotor::motorSetPWM(int, int)+0x98>)
    88da:	2240      	movs	r2, #64	; 0x40
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    88dc:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    88e0:	2005      	movs	r0, #5
    88e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    88e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    88ea:	f00e b8b9 	b.w	16a60 <analogWrite>
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    88ee:	2110      	movs	r1, #16
  analogWrite(PIN_LEFT_IN2, motorAnkerPWM[0]);
    88f0:	2003      	movs	r0, #3
    88f2:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    88f6:	4619      	mov	r1, r3
    88f8:	f00e f8b2 	bl	16a60 <analogWrite>
		if (val) {
    88fc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    8900:	2b00      	cmp	r3, #0
    8902:	d1e9      	bne.n	88d8 <UMotor::motorSetPWM(int, int)+0x54>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8904:	4b05      	ldr	r3, [pc, #20]	; (891c <UMotor::motorSetPWM(int, int)+0x98>)
    8906:	2240      	movs	r2, #64	; 0x40
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    8908:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    890c:	2005      	movs	r0, #5
    890e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    8912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(PIN_RIGHT_IN2, motorAnkerPWM[1]);
    8916:	f00e b8a3 	b.w	16a60 <analogWrite>
    891a:	bf00      	nop
    891c:	4200c000 	.word	0x4200c000

00008920 <UMotor::motorSetAnchorVoltage()>:
{
    8920:	b538      	push	{r3, r4, r5, lr}
  float batteryNominalVoltage = robot.batteryVoltage;
    8922:	4b4f      	ldr	r3, [pc, #316]	; (8a60 <UMotor::motorSetAnchorVoltage()+0x140>)
  if (batteryNominalVoltage < 5.0)
    8924:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
{
    8928:	4604      	mov	r4, r0
  float batteryNominalVoltage = robot.batteryVoltage;
    892a:	edd3 7a05 	vldr	s15, [r3, #20]
  if (batteryNominalVoltage < 5.0)
    892e:	eef4 7ac7 	vcmpe.f32	s15, s14
{
    8932:	ed2d 8b02 	vpush	{d8}
  if (batteryNominalVoltage < 5.0)
    8936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    893a:	d463      	bmi.n	8a04 <UMotor::motorSetAnchorVoltage()+0xe4>
  float scaleFactor = MAX_PWM / (batteryNominalVoltage - voltageLoss);
    893c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    8940:	ee77 7ac7 	vsub.f32	s15, s15, s14
  if (overloadCount > 500 and motorEnable[0])
    8944:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  float scaleFactor = MAX_PWM / (batteryNominalVoltage - voltageLoss);
    8946:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
  if (overloadCount > 500 and motorEnable[0])
    894a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  float scaleFactor = MAX_PWM / (batteryNominalVoltage - voltageLoss);
    894e:	ee87 8a27 	vdiv.f32	s16, s14, s15
  if (overloadCount > 500 and motorEnable[0])
    8952:	dd03      	ble.n	895c <UMotor::motorSetAnchorVoltage()+0x3c>
    8954:	f894 3020 	ldrb.w	r3, [r4, #32]
    8958:	2b00      	cmp	r3, #0
    895a:	d15c      	bne.n	8a16 <UMotor::motorSetAnchorVoltage()+0xf6>
  if (motorVoltage[0] > 0.001)
    895c:	edd4 7a06 	vldr	s15, [r4, #24]
    8960:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8a50 <UMotor::motorSetAnchorVoltage()+0x130>
    8964:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    8968:	eeb4 6bc5 	vcmpe.f64	d6, d5
    896c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8970:	dd3c      	ble.n	89ec <UMotor::motorSetAnchorVoltage()+0xcc>
    v1 = motorVoltage[0] + minV;
    8972:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8a64 <UMotor::motorSetAnchorVoltage()+0x144>
    8976:	ee37 7a87 	vadd.f32	s14, s15, s14
  if (motorVoltage[1] > 0.001)
    897a:	edd4 7a07 	vldr	s15, [r4, #28]
    897e:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8a50 <UMotor::motorSetAnchorVoltage()+0x130>
    8982:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    8986:	eeb4 6bc5 	vcmpe.f64	d6, d5
    898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    898e:	dd1f      	ble.n	89d0 <UMotor::motorSetAnchorVoltage()+0xb0>
    v2 = motorVoltage[1] + minV;
    8990:	eddf 6a34 	vldr	s13, [pc, #208]	; 8a64 <UMotor::motorSetAnchorVoltage()+0x144>
    8994:	ee77 7aa6 	vadd.f32	s15, s15, s13
  w2 = int16_t(-v2 * scaleFactor);
    8998:	eef1 7a67 	vneg.f32	s15, s15
  if (motorReversed)
    899c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    89a0:	b10b      	cbz	r3, 89a6 <UMotor::motorSetAnchorVoltage()+0x86>
    scaleFactor *= -1.0;
    89a2:	eeb1 8a48 	vneg.f32	s16, s16
  w2 = int16_t(-v2 * scaleFactor);
    89a6:	ee68 7a27 	vmul.f32	s15, s16, s15
  motorSetPWM(w1, w2);
    89aa:	4620      	mov	r0, r4
  w1 = int16_t(v1 * scaleFactor);
    89ac:	ee28 8a07 	vmul.f32	s16, s16, s14
  w2 = int16_t(-v2 * scaleFactor);
    89b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  w1 = int16_t(v1 * scaleFactor);
    89b4:	eebd 8ac8 	vcvt.s32.f32	s16, s16
  motorSetPWM(w1, w2);
    89b8:	ee17 3a90 	vmov	r3, s15
    89bc:	b21a      	sxth	r2, r3
    89be:	ee18 3a10 	vmov	r3, s16
}
    89c2:	ecbd 8b02 	vpop	{d8}
  motorSetPWM(w1, w2);
    89c6:	b219      	sxth	r1, r3
}
    89c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  motorSetPWM(w1, w2);
    89cc:	f7ff bf5a 	b.w	8884 <UMotor::motorSetPWM(int, int)>
  else if (motorVoltage[1] < -0.001)
    89d0:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8a58 <UMotor::motorSetAnchorVoltage()+0x138>
    89d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
    89d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89dc:	d518      	bpl.n	8a10 <UMotor::motorSetAnchorVoltage()+0xf0>
    v2 = motorVoltage[1] - minV;
    89de:	eddf 6a21 	vldr	s13, [pc, #132]	; 8a64 <UMotor::motorSetAnchorVoltage()+0x144>
    89e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
  w2 = int16_t(-v2 * scaleFactor);
    89e6:	eef1 7a67 	vneg.f32	s15, s15
    89ea:	e7d7      	b.n	899c <UMotor::motorSetAnchorVoltage()+0x7c>
  else if (motorVoltage[0] < -0.001)
    89ec:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8a58 <UMotor::motorSetAnchorVoltage()+0x138>
    89f0:	eeb4 6bc5 	vcmpe.f64	d6, d5
    89f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89f8:	d507      	bpl.n	8a0a <UMotor::motorSetAnchorVoltage()+0xea>
    v1 = motorVoltage[0] - minV;
    89fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8a64 <UMotor::motorSetAnchorVoltage()+0x144>
    89fe:	ee37 7ac7 	vsub.f32	s14, s15, s14
    8a02:	e7ba      	b.n	897a <UMotor::motorSetAnchorVoltage()+0x5a>
    8a04:	eddf 7a18 	vldr	s15, [pc, #96]	; 8a68 <UMotor::motorSetAnchorVoltage()+0x148>
    8a08:	e79c      	b.n	8944 <UMotor::motorSetAnchorVoltage()+0x24>
    v1 = 0;
    8a0a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8a6c <UMotor::motorSetAnchorVoltage()+0x14c>
    8a0e:	e7b4      	b.n	897a <UMotor::motorSetAnchorVoltage()+0x5a>
    8a10:	eddf 7a17 	vldr	s15, [pc, #92]	; 8a70 <UMotor::motorSetAnchorVoltage()+0x150>
    8a14:	e7c2      	b.n	899c <UMotor::motorSetAnchorVoltage()+0x7c>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8a16:	4b17      	ldr	r3, [pc, #92]	; (8a74 <UMotor::motorSetAnchorVoltage()+0x154>)
  motorEnable[0] = e1;
    8a18:	2000      	movs	r0, #0
    8a1a:	2120      	movs	r1, #32
    motorSleeping[0] = true;
    8a1c:	2201      	movs	r2, #1
  motorEnable[0] = e1;
    8a1e:	8420      	strh	r0, [r4, #32]
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8a20:	2010      	movs	r0, #16
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8a22:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8a26:	f44f 7180 	mov.w	r1, #256	; 0x100
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8a2a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    motorSleeping[0] = true;
    8a2e:	8762      	strh	r2, [r4, #58]	; 0x3a
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8a30:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8a34:	2140      	movs	r1, #64	; 0x40
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8a36:	4d10      	ldr	r5, [pc, #64]	; (8a78 <UMotor::motorSetAnchorVoltage()+0x158>)
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8a38:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    motorSleeping[1] = true;
    8a40:	87a2      	strh	r2, [r4, #60]	; 0x3c
    usb.send("# UMotor::motorSetAnchorVoltage: overload, disabled motors\n");
    8a42:	490e      	ldr	r1, [pc, #56]	; (8a7c <UMotor::motorSetAnchorVoltage()+0x15c>)
    8a44:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    8a48:	480d      	ldr	r0, [pc, #52]	; (8a80 <UMotor::motorSetAnchorVoltage()+0x160>)
    8a4a:	f003 fddf 	bl	c60c <UUSB::send(char const*)>
    8a4e:	e785      	b.n	895c <UMotor::motorSetAnchorVoltage()+0x3c>
    8a50:	d2f1a9fc 	.word	0xd2f1a9fc
    8a54:	3f50624d 	.word	0x3f50624d
    8a58:	d2f1a9fc 	.word	0xd2f1a9fc
    8a5c:	bf50624d 	.word	0xbf50624d
    8a60:	2000f660 	.word	0x2000f660
    8a64:	3ecccccd 	.word	0x3ecccccd
    8a68:	4121999a 	.word	0x4121999a
    8a6c:	00000000 	.word	0x00000000
    8a70:	80000000 	.word	0x80000000
    8a74:	4200c000 	.word	0x4200c000
    8a78:	42004000 	.word	0x42004000
    8a7c:	20005420 	.word	0x20005420
    8a80:	2000fac4 	.word	0x2000fac4
    8a84:	00000000 	.word	0x00000000

00008a88 <UMotor::decode(char const*)>:
{
    8a88:	b570      	push	{r4, r5, r6, lr}
    8a8a:	460c      	mov	r4, r1
    8a8c:	4605      	mov	r5, r0
  if (strncmp(buf, "motr", 4) == 0)
    8a8e:	2204      	movs	r2, #4
    8a90:	4993      	ldr	r1, [pc, #588]	; (8ce0 <UMotor::decode(char const*)+0x258>)
    8a92:	4620      	mov	r0, r4
{
    8a94:	ed2d 8b02 	vpush	{d8}
    8a98:	b0b8      	sub	sp, #224	; 0xe0
  if (strncmp(buf, "motr", 4) == 0)
    8a9a:	f013 f943 	bl	1bd24 <strncmp>
    8a9e:	2800      	cmp	r0, #0
    8aa0:	d04b      	beq.n	8b3a <UMotor::decode(char const*)+0xb2>
  else if (strncmp(buf, "motv", 4) == 0)
    8aa2:	2204      	movs	r2, #4
    8aa4:	498f      	ldr	r1, [pc, #572]	; (8ce4 <UMotor::decode(char const*)+0x25c>)
    8aa6:	4620      	mov	r0, r4
    8aa8:	f013 f93c 	bl	1bd24 <strncmp>
    8aac:	4606      	mov	r6, r0
    8aae:	b198      	cbz	r0, 8ad8 <UMotor::decode(char const*)+0x50>
  else if (strncmp(buf, "motfrq ", 7) == 0)
    8ab0:	2207      	movs	r2, #7
    8ab2:	498d      	ldr	r1, [pc, #564]	; (8ce8 <UMotor::decode(char const*)+0x260>)
    8ab4:	4620      	mov	r0, r4
    8ab6:	f013 f935 	bl	1bd24 <strncmp>
    8aba:	2800      	cmp	r0, #0
    8abc:	d069      	beq.n	8b92 <UMotor::decode(char const*)+0x10a>
  else if (strncmp(buf, "deadband ", 9) == 0)
    8abe:	2209      	movs	r2, #9
    8ac0:	498a      	ldr	r1, [pc, #552]	; (8cec <UMotor::decode(char const*)+0x264>)
    8ac2:	4620      	mov	r0, r4
    8ac4:	f013 f92e 	bl	1bd24 <strncmp>
    8ac8:	2800      	cmp	r0, #0
    8aca:	f000 8082 	beq.w	8bd2 <UMotor::decode(char const*)+0x14a>
    used = false;
    8ace:	2000      	movs	r0, #0
}
    8ad0:	b038      	add	sp, #224	; 0xe0
    8ad2:	ecbd 8b02 	vpop	{d8}
    8ad6:	bd70      	pop	{r4, r5, r6, pc}
    const char * p1 = &buf[4];
    8ad8:	1d20      	adds	r0, r4, #4
    m1 = strtof(p1, (char**)&p1);
    8ada:	a906      	add	r1, sp, #24
    const char * p1 = &buf[4];
    8adc:	9006      	str	r0, [sp, #24]
    m1 = strtof(p1, (char**)&p1);
    8ade:	f012 fb75 	bl	1b1cc <strtof>
    8ae2:	eeb0 8a40 	vmov.f32	s16, s0
    m2 = strtof(p1, (char**)&p1);
    8ae6:	a906      	add	r1, sp, #24
    8ae8:	9806      	ldr	r0, [sp, #24]
    8aea:	f012 fb6f 	bl	1b1cc <strtof>
    motorVoltage[1] = m2;
    8aee:	ed85 0a07 	vstr	s0, [r5, #28]
  { return __builtin_fabsf(__x); }
    8af2:	eeb0 7ac8 	vabs.f32	s14, s16
    motorVoltage[0] = m1;
    8af6:	ed85 8a06 	vstr	s16, [r5, #24]
    if ((fabs(m1) < 0.01) and (fabs(m2) < 0.01))
    8afa:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8cd0 <UMotor::decode(char const*)+0x248>
    8afe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8b02:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b0a:	d509      	bpl.n	8b20 <UMotor::decode(char const*)+0x98>
    8b0c:	eeb0 0ac0 	vabs.f32	s0, s0
    8b10:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    8b14:	eeb4 0bc6 	vcmpe.f64	d0, d6
    8b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b1c:	f100 80b4 	bmi.w	8c88 <UMotor::decode(char const*)+0x200>
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    8b20:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    8b24:	b303      	cbz	r3, 8b68 <UMotor::decode(char const*)+0xe0>
    8b26:	f895 3020 	ldrb.w	r3, [r5, #32]
    8b2a:	bb13      	cbnz	r3, 8b72 <UMotor::decode(char const*)+0xea>
    8b2c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    8b30:	b9eb      	cbnz	r3, 8b6e <UMotor::decode(char const*)+0xe6>
    motorPreEnabled = false;
    8b32:	f44f 7380 	mov.w	r3, #256	; 0x100
    8b36:	85ab      	strh	r3, [r5, #44]	; 0x2c
    8b38:	e019      	b.n	8b6e <UMotor::decode(char const*)+0xe6>
    const char * p1 = &buf[4];
    8b3a:	3404      	adds	r4, #4
    bool rev = strtol(p1, (char**)&p1, 10);
    8b3c:	220a      	movs	r2, #10
    8b3e:	a906      	add	r1, sp, #24
    8b40:	4620      	mov	r0, r4
    const char * p1 = &buf[4];
    8b42:	9406      	str	r4, [sp, #24]
    bool rev = strtol(p1, (char**)&p1, 10);
    8b44:	f012 fc46 	bl	1b3d4 <strtol>
    8b48:	4603      	mov	r3, r0
    if (p1 == &buf[4] or rev)
    8b4a:	9a06      	ldr	r2, [sp, #24]
  bool used = true;
    8b4c:	2001      	movs	r0, #1
    if (p1 == &buf[4] or rev)
    8b4e:	3b00      	subs	r3, #0
    8b50:	bf18      	it	ne
    8b52:	2301      	movne	r3, #1
    8b54:	42a2      	cmp	r2, r4
    8b56:	bf08      	it	eq
    8b58:	f043 0301 	orreq.w	r3, r3, #1
    8b5c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
    8b60:	b038      	add	sp, #224	; 0xe0
    8b62:	ecbd 8b02 	vpop	{d8}
    8b66:	bd70      	pop	{r4, r5, r6, pc}
  if (e1 and not motorEnable[0])
    8b68:	f895 3020 	ldrb.w	r3, [r5, #32]
    8b6c:	b90b      	cbnz	r3, 8b72 <UMotor::decode(char const*)+0xea>
    overloadCount = 0;
    8b6e:	2300      	movs	r3, #0
    8b70:	62ab      	str	r3, [r5, #40]	; 0x28
  motorEnable[0] = e1;
    8b72:	f240 1101 	movw	r1, #257	; 0x101
				CORE_PIN32_PORTSET = CORE_PIN32_BITMASK;
    8b76:	4b5e      	ldr	r3, [pc, #376]	; (8cf0 <UMotor::decode(char const*)+0x268>)
    8b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8b7c:	8429      	strh	r1, [r5, #32]
    8b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    motorSetAnchorVoltage();
    8b82:	4628      	mov	r0, r5
    8b84:	f7ff fecc 	bl	8920 <UMotor::motorSetAnchorVoltage()>
  bool used = true;
    8b88:	2001      	movs	r0, #1
}
    8b8a:	b038      	add	sp, #224	; 0xe0
    8b8c:	ecbd 8b02 	vpop	{d8}
    8b90:	bd70      	pop	{r4, r5, r6, pc}
    int frq = strtol(p1, nullptr, 10);
    8b92:	4601      	mov	r1, r0
    8b94:	220a      	movs	r2, #10
    8b96:	1de0      	adds	r0, r4, #7
    8b98:	f012 fc1c 	bl	1b3d4 <strtol>
  if (frq > 150000) // limit'ish of motor driver
    8b9c:	4b55      	ldr	r3, [pc, #340]	; (8cf4 <UMotor::decode(char const*)+0x26c>)
    8b9e:	4298      	cmp	r0, r3
    8ba0:	dc6d      	bgt.n	8c7e <UMotor::decode(char const*)+0x1f6>
    8ba2:	2864      	cmp	r0, #100	; 0x64
    8ba4:	4603      	mov	r3, r0
    8ba6:	bfb8      	it	lt
    8ba8:	2364      	movlt	r3, #100	; 0x64
  analogWriteFrequency(PIN_LEFT_IN2, PWMfrq); /// frequency (Hz)
    8baa:	ee07 3a90 	vmov	s15, r3
    8bae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8bb2:	626b      	str	r3, [r5, #36]	; 0x24
    8bb4:	2003      	movs	r0, #3
    8bb6:	f00d ffb9 	bl	16b2c <analogWriteFrequency>
  analogWriteFrequency(PIN_RIGHT_IN2, PWMfrq); /// frequency (Hz)
    8bba:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
    8bbe:	2005      	movs	r0, #5
    8bc0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    8bc4:	f00d ffb2 	bl	16b2c <analogWriteFrequency>
  bool used = true;
    8bc8:	2001      	movs	r0, #1
}
    8bca:	b038      	add	sp, #224	; 0xe0
    8bcc:	ecbd 8b02 	vpop	{d8}
    8bd0:	bd70      	pop	{r4, r5, r6, pc}
    const char * p1 = &buf[9];
    8bd2:	3409      	adds	r4, #9
    float deadbandLeft = strtof(p1, &p2);
    8bd4:	a904      	add	r1, sp, #16
    8bd6:	4620      	mov	r0, r4
    8bd8:	f012 faf8 	bl	1b1cc <strtof>
    float deadbandRight = strtof(p2, &p3);
    8bdc:	a905      	add	r1, sp, #20
    8bde:	9804      	ldr	r0, [sp, #16]
    float deadbandLeft = strtof(p1, &p2);
    8be0:	eeb0 8a40 	vmov.f32	s16, s0
    float deadbandRight = strtof(p2, &p3);
    8be4:	f012 faf2 	bl	1b1cc <strtof>
    if (p2 != p1)
    8be8:	9b04      	ldr	r3, [sp, #16]
    float deadbandRight = strtof(p2, &p3);
    8bea:	eef0 6a40 	vmov.f32	s13, s0
    if (p2 != p1)
    8bee:	42a3      	cmp	r3, r4
    8bf0:	d066      	beq.n	8cc0 <UMotor::decode(char const*)+0x238>
      pwmDeadband[0] = int(deadbandLeft / 100.0 * MAX_PWM);
    8bf2:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    8bf6:	edd5 5a14 	vldr	s11, [r5, #80]	; 0x50
    8bfa:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8cd8 <UMotor::decode(char const*)+0x250>
    8bfe:	ee88 7b04 	vdiv.f64	d7, d8, d4
    8c02:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
    8c06:	ee27 7b04 	vmul.f64	d7, d7, d4
    8c0a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    8c0e:	ed85 7a15 	vstr	s14, [r5, #84]	; 0x54
    if (p2 != p3)
    8c12:	9a05      	ldr	r2, [sp, #20]
    8c14:	4293      	cmp	r3, r2
    8c16:	d050      	beq.n	8cba <UMotor::decode(char const*)+0x232>
      pwmDeadband[1] = int(deadbandRight / 100.0 * MAX_PWM);
    8c18:	eeb7 0ae6 	vcvt.f64.f32	d0, s13
    8c1c:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
    8c20:	ed9f 3b2d 	vldr	d3, [pc, #180]	; 8cd8 <UMotor::decode(char const*)+0x250>
    8c24:	ee80 6b03 	vdiv.f64	d6, d0, d3
    8c28:	ee26 6b04 	vmul.f64	d6, d6, d4
    8c2c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    8c30:	ed85 6a16 	vstr	s12, [r5, #88]	; 0x58
    snprintf(s, MSL, "# PWM dead-band set to left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    8c34:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    8c38:	4a2f      	ldr	r2, [pc, #188]	; (8cf8 <UMotor::decode(char const*)+0x270>)
    8c3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    8c3e:	21c8      	movs	r1, #200	; 0xc8
    8c40:	a806      	add	r0, sp, #24
    8c42:	eec6 6a25 	vdiv.f32	s13, s12, s11
    8c46:	eec7 7a25 	vdiv.f32	s15, s14, s11
    8c4a:	ed9f 4b23 	vldr	d4, [pc, #140]	; 8cd8 <UMotor::decode(char const*)+0x250>
    8c4e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
    8c52:	ee26 6b04 	vmul.f64	d6, d6, d4
    8c56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    8c5a:	ee27 7b04 	vmul.f64	d7, d7, d4
    8c5e:	ed8d 6b02 	vstr	d6, [sp, #8]
    8c62:	ed8d 7b00 	vstr	d7, [sp]
    8c66:	f012 fda5 	bl	1b7b4 <snprintf>
    usb.send(s);
    8c6a:	a906      	add	r1, sp, #24
    8c6c:	4823      	ldr	r0, [pc, #140]	; (8cfc <UMotor::decode(char const*)+0x274>)
    8c6e:	f003 fccd 	bl	c60c <UUSB::send(char const*)>
    usb.send("# NB! dead-band setting is not saved to flash (lost after reboot)\n");
    8c72:	4923      	ldr	r1, [pc, #140]	; (8d00 <UMotor::decode(char const*)+0x278>)
    8c74:	4821      	ldr	r0, [pc, #132]	; (8cfc <UMotor::decode(char const*)+0x274>)
    8c76:	f003 fcc9 	bl	c60c <UUSB::send(char const*)>
  bool used = true;
    8c7a:	2001      	movs	r0, #1
    8c7c:	e728      	b.n	8ad0 <UMotor::decode(char const*)+0x48>
    8c7e:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8d04 <UMotor::decode(char const*)+0x27c>
    PWMfrq=
    8c82:	f64f 53e8 	movw	r3, #65000	; 0xfde8
    8c86:	e794      	b.n	8bb2 <UMotor::decode(char const*)+0x12a>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8c88:	4b1f      	ldr	r3, [pc, #124]	; (8d08 <UMotor::decode(char const*)+0x280>)
    8c8a:	2020      	movs	r0, #32
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8c8c:	2110      	movs	r1, #16
  motorEnable[0] = e1;
    8c8e:	842e      	strh	r6, [r5, #32]
    motorSleeping[0] = true;
    8c90:	2201      	movs	r2, #1
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8c92:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8c96:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8c9a:	f44f 7080 	mov.w	r0, #256	; 0x100
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8c9e:	2140      	movs	r1, #64	; 0x40
    8ca0:	876a      	strh	r2, [r5, #58]	; 0x3a
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8ca2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8ca6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8caa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    8cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    motorSleeping[1] = true;
    8cb2:	87aa      	strh	r2, [r5, #60]	; 0x3c
    8cb4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
}
    8cb8:	e763      	b.n	8b82 <UMotor::decode(char const*)+0xfa>
    snprintf(s, MSL, "# PWM dead-band set to left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    8cba:	ed95 6a16 	vldr	s12, [r5, #88]	; 0x58
    8cbe:	e7b9      	b.n	8c34 <UMotor::decode(char const*)+0x1ac>
      pwmDeadband[0] = int(deadbandLeft / 100.0 * MAX_PWM);
    8cc0:	edd5 5a14 	vldr	s11, [r5, #80]	; 0x50
    snprintf(s, MSL, "# PWM dead-band set to left=%.1f%%, right=%.1f%%\r\n", float(pwmDeadband[0])/MAX_PWM*100.0, float(pwmDeadband[1])/MAX_PWM*100.0);
    8cc4:	ed95 7a15 	vldr	s14, [r5, #84]	; 0x54
    8cc8:	e7a3      	b.n	8c12 <UMotor::decode(char const*)+0x18a>
    8cca:	bf00      	nop
    8ccc:	f3af 8000 	nop.w
    8cd0:	47ae147b 	.word	0x47ae147b
    8cd4:	3f847ae1 	.word	0x3f847ae1
    8cd8:	00000000 	.word	0x00000000
    8cdc:	40590000 	.word	0x40590000
    8ce0:	200054f0 	.word	0x200054f0
    8ce4:	200054f8 	.word	0x200054f8
    8ce8:	20005500 	.word	0x20005500
    8cec:	20005508 	.word	0x20005508
    8cf0:	42004000 	.word	0x42004000
    8cf4:	000249f0 	.word	0x000249f0
    8cf8:	20005514 	.word	0x20005514
    8cfc:	2000fac4 	.word	0x2000fac4
    8d00:	20005548 	.word	0x20005548
    8d04:	477de800 	.word	0x477de800
    8d08:	4200c000 	.word	0x4200c000
    8d0c:	00000000 	.word	0x00000000

00008d10 <UMotor::sendMotorValues()>:
{
    8d10:	b500      	push	{lr}
  snprintf(s, MSL, "mot %.2g %.2g %.3g %.4g %d\r\n", 
    8d12:	a313      	add	r3, pc, #76	; (adr r3, 8d60 <UMotor::sendMotorValues()+0x50>)
    8d14:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    8d18:	b0b1      	sub	sp, #196	; 0xc4
  snprintf(s, MSL, "mot %.2g %.2g %.3g %.4g %d\r\n", 
    8d1a:	2196      	movs	r1, #150	; 0x96
    8d1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8d20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    8d24:	ed90 6a07 	vldr	s12, [r0, #28]
    8d28:	ed90 7a06 	vldr	s14, [r0, #24]
    8d2c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    8d30:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    8d34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8d38:	4a07      	ldr	r2, [pc, #28]	; (8d58 <UMotor::sendMotorValues()+0x48>)
    8d3a:	9308      	str	r3, [sp, #32]
    8d3c:	a80a      	add	r0, sp, #40	; 0x28
    8d3e:	ed8d 6b02 	vstr	d6, [sp, #8]
    8d42:	ed8d 7b00 	vstr	d7, [sp]
    8d46:	f012 fd35 	bl	1b7b4 <snprintf>
  usb.send(s);
    8d4a:	a90a      	add	r1, sp, #40	; 0x28
    8d4c:	4803      	ldr	r0, [pc, #12]	; (8d5c <UMotor::sendMotorValues()+0x4c>)
    8d4e:	f003 fc5d 	bl	c60c <UUSB::send(char const*)>
}
    8d52:	b031      	add	sp, #196	; 0xc4
    8d54:	f85d fb04 	ldr.w	pc, [sp], #4
    8d58:	20005400 	.word	0x20005400
    8d5c:	2000fac4 	.word	0x2000fac4
    8d60:	9999999a 	.word	0x9999999a
    8d64:	3fb99999 	.word	0x3fb99999

00008d68 <UMotor::sendMotorPWM()>:
{
    8d68:	4603      	mov	r3, r0
  snprintf(s, MSL, "motpwm %d %d %d %d %d %d %d\r\n", 
    8d6a:	4a10      	ldr	r2, [pc, #64]	; (8dac <UMotor::sendMotorPWM()+0x44>)
    8d6c:	2196      	movs	r1, #150	; 0x96
{
    8d6e:	b510      	push	{r4, lr}
  snprintf(s, MSL, "motpwm %d %d %d %d %d %d %d\r\n", 
    8d70:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
{
    8d74:	b0ac      	sub	sp, #176	; 0xb0
  snprintf(s, MSL, "motpwm %d %d %d %d %d %d %d\r\n", 
    8d76:	9405      	str	r4, [sp, #20]
    8d78:	a806      	add	r0, sp, #24
    8d7a:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
    8d7e:	9404      	str	r4, [sp, #16]
    8d80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8d82:	9403      	str	r4, [sp, #12]
    8d84:	f9b3 4034 	ldrsh.w	r4, [r3, #52]	; 0x34
    8d88:	9402      	str	r4, [sp, #8]
    8d8a:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
    8d8e:	9401      	str	r4, [sp, #4]
    8d90:	f9b3 4032 	ldrsh.w	r4, [r3, #50]	; 0x32
    8d94:	9400      	str	r4, [sp, #0]
    8d96:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
    8d9a:	f012 fd0b 	bl	1b7b4 <snprintf>
  usb.send(s);
    8d9e:	a906      	add	r1, sp, #24
    8da0:	4803      	ldr	r0, [pc, #12]	; (8db0 <UMotor::sendMotorPWM()+0x48>)
    8da2:	f003 fc33 	bl	c60c <UUSB::send(char const*)>
}
    8da6:	b02c      	add	sp, #176	; 0xb0
    8da8:	bd10      	pop	{r4, pc}
    8daa:	bf00      	nop
    8dac:	200053e0 	.word	0x200053e0
    8db0:	2000fac4 	.word	0x2000fac4

00008db4 <UMotor::sendData(int)>:
  if (item == 0)
    8db4:	b121      	cbz	r1, 8dc0 <UMotor::sendData(int)+0xc>
  if (item == 1)
    8db6:	2901      	cmp	r1, #1
    8db8:	d000      	beq.n	8dbc <UMotor::sendData(int)+0x8>
}
    8dba:	4770      	bx	lr
    sendMotorPWM();
    8dbc:	f7ff bfd4 	b.w	8d68 <UMotor::sendMotorPWM()>
    sendMotorValues();
    8dc0:	f7ff bfa6 	b.w	8d10 <UMotor::sendMotorValues()>
    8dc4:	0000      	movs	r0, r0
	...

00008dc8 <UMotor::tick()>:
}

void UMotor::tick()
{ //
  tickCnt++;
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8dc8:	ed90 7a06 	vldr	s14, [r0, #24]
  tickCnt++;
    8dcc:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8dce:	eeb0 7ac7 	vabs.f32	s14, s14
  tickCnt++;
    8dd2:	3301      	adds	r3, #1
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8dd4:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8e88 <UMotor::tick()+0xc0>
    8dd8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{ //
    8ddc:	b510      	push	{r4, lr}
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8dde:	eeb4 7bc6 	vcmpe.f64	d7, d6
{ //
    8de2:	4604      	mov	r4, r0
  tickCnt++;
    8de4:	6483      	str	r3, [r0, #72]	; 0x48
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dea:	d80a      	bhi.n	8e02 <UMotor::tick()+0x3a>
      fabsf(motorVoltage[1]) <= 0.01 and
    8dec:	ed90 7a07 	vldr	s14, [r0, #28]
    8df0:	eeb0 7ac7 	vabs.f32	s14, s14
    8df4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  if (fabsf(motorVoltage[0]) <= 0.01 and
    8df8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e00:	d90b      	bls.n	8e1a <UMotor::tick()+0x52>
      fabsf(encoder.motorVelocity[1]) < 0.1)
  { // saves a bit of current
    motorSetEnable(false, false);
  }
  else
    motorSetAnchorVoltage();
    8e02:	4620      	mov	r0, r4
    8e04:	f7ff fd8c 	bl	8920 <UMotor::motorSetAnchorVoltage()>
  // set flags for o-led display
  m1ok = motorEnable[0];
    8e08:	f894 2020 	ldrb.w	r2, [r4, #32]
  m2ok = motorEnable[1];
    8e0c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  m1ok = motorEnable[0];
    8e10:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  m2ok = motorEnable[1];
    8e14:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
    8e18:	bd10      	pop	{r4, pc}
      fabsf(encoder.motorVelocity[0]) < 0.1 and
    8e1a:	4b1f      	ldr	r3, [pc, #124]	; (8e98 <UMotor::tick()+0xd0>)
    8e1c:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    8e20:	eeb0 7ac7 	vabs.f32	s14, s14
      fabsf(motorVoltage[1]) <= 0.01 and
    8e24:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8e90 <UMotor::tick()+0xc8>
      fabsf(encoder.motorVelocity[0]) < 0.1 and
    8e28:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      fabsf(motorVoltage[1]) <= 0.01 and
    8e2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e34:	d5e5      	bpl.n	8e02 <UMotor::tick()+0x3a>
      fabsf(encoder.motorVelocity[1]) < 0.1)
    8e36:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
    8e3a:	eeb0 7ac7 	vabs.f32	s14, s14
    8e3e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      fabsf(encoder.motorVelocity[0]) < 0.1 and
    8e42:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e4a:	d5da      	bpl.n	8e02 <UMotor::tick()+0x3a>
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8e4c:	4a13      	ldr	r2, [pc, #76]	; (8e9c <UMotor::tick()+0xd4>)
  motorEnable[0] = e1;
    8e4e:	2300      	movs	r3, #0
    8e50:	2020      	movs	r0, #32
    motorSleeping[0] = true;
    8e52:	2101      	movs	r1, #1
  motorEnable[0] = e1;
    8e54:	8423      	strh	r3, [r4, #32]
    8e56:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8e5a:	2010      	movs	r0, #16
    8e5c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8e60:	f44f 7080 	mov.w	r0, #256	; 0x100
    motorSleeping[0] = true;
    8e64:	8761      	strh	r1, [r4, #58]	; 0x3a
    8e66:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8e6a:	2040      	movs	r0, #64	; 0x40
    8e6c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    8e70:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    8e74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    motorSleeping[1] = true;
    8e78:	87a1      	strh	r1, [r4, #60]	; 0x3c
    8e7a:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
}
    8e7e:	461a      	mov	r2, r3
    8e80:	e7c6      	b.n	8e10 <UMotor::tick()+0x48>
    8e82:	bf00      	nop
    8e84:	f3af 8000 	nop.w
    8e88:	47ae147b 	.word	0x47ae147b
    8e8c:	3f847ae1 	.word	0x3f847ae1
    8e90:	9999999a 	.word	0x9999999a
    8e94:	3fb99999 	.word	0x3fb99999
    8e98:	2000ec40 	.word	0x2000ec40
    8e9c:	4200c000 	.word	0x4200c000

00008ea0 <UMotor::eePromSave()>:

///////////////////////////////////////////////////////

void UMotor::eePromSave()
{
    8ea0:	b510      	push	{r4, lr}
    8ea2:	4604      	mov	r4, r0
  // save desired PWM FRQ
  uint16_t flags = 0;
  flags |= motorReversed << 0;
  eeConfig.pushWord(flags);
    8ea4:	4808      	ldr	r0, [pc, #32]	; (8ec8 <UMotor::eePromSave()+0x28>)
    8ea6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    8eaa:	f7fa f94d 	bl	3148 <EEConfig::pushWord(unsigned short)>
  // save in kHz
  eeConfig.pushWord(PWMfrq/1000);
    8eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8eb0:	4a06      	ldr	r2, [pc, #24]	; (8ecc <UMotor::eePromSave()+0x2c>)
    8eb2:	17d9      	asrs	r1, r3, #31
    8eb4:	4804      	ldr	r0, [pc, #16]	; (8ec8 <UMotor::eePromSave()+0x28>)
    8eb6:	fb82 2303 	smull	r2, r3, r2, r3
    8eba:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
}
    8ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eeConfig.pushWord(PWMfrq/1000);
    8ec2:	b289      	uxth	r1, r1
    8ec4:	f7fa b940 	b.w	3148 <EEConfig::pushWord(unsigned short)>
    8ec8:	2000ebf4 	.word	0x2000ebf4
    8ecc:	10624dd3 	.word	0x10624dd3

00008ed0 <UMotor::eePromLoad()>:

void UMotor::eePromLoad()
{
    8ed0:	b538      	push	{r3, r4, r5, lr}
    8ed2:	4c0f      	ldr	r4, [pc, #60]	; (8f10 <UMotor::eePromLoad()+0x40>)
  if (not eeConfig.isStringConfig())
    8ed4:	f894 3020 	ldrb.w	r3, [r4, #32]
    8ed8:	b11b      	cbz	r3, 8ee2 <UMotor::eePromLoad()+0x12>
    configAddr+=bytes;
    8eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8edc:	3304      	adds	r3, #4
    8ede:	6263      	str	r3, [r4, #36]	; 0x24
  else
  { // skip robot specific items
    int skip = 2 + 2;
    eeConfig.skipAddr(skip);
  }
}
    8ee0:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t flags = eeConfig.readWord();
    8ee2:	4605      	mov	r5, r0
    8ee4:	4620      	mov	r0, r4
    8ee6:	f7fa f973 	bl	31d0 <EEConfig::readWord()>
    8eea:	4603      	mov	r3, r0
    PWMfrq = eeConfig.readWord() * 1000;
    8eec:	4620      	mov	r0, r4
    motorReversed = (flags & 0x01) > 0; 
    8eee:	f003 0301 	and.w	r3, r3, #1
    8ef2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    PWMfrq = eeConfig.readWord() * 1000;
    8ef6:	f7fa f96b 	bl	31d0 <EEConfig::readWord()>
    8efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8efe:	4603      	mov	r3, r0
    setup();
    8f00:	4628      	mov	r0, r5
    PWMfrq = eeConfig.readWord() * 1000;
    8f02:	fb02 f303 	mul.w	r3, r2, r3
    8f06:	626b      	str	r3, [r5, #36]	; 0x24
}
    8f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setup();
    8f0c:	f7ff bb96 	b.w	863c <UMotor::setup()>
    8f10:	2000ebf4 	.word	0x2000ebf4
    8f14:	00000000 	.word	0x00000000

00008f18 <UMotor::setMotorVoltage(float, float)>:

void UMotor::setMotorVoltage(float left, float right)
{ // left
  if (left > maxMotorVoltage)
    8f18:	edd0 7a05 	vldr	s15, [r0, #20]
{ // left
    8f1c:	eeb0 7a60 	vmov.f32	s14, s1
  if (left > maxMotorVoltage)
    8f20:	eef4 7ac0 	vcmpe.f32	s15, s0
    8f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f28:	d42d      	bmi.n	8f86 <UMotor::setMotorVoltage(float, float)+0x6e>
    motorVoltage[0] = maxMotorVoltage;
  else if (left < -maxMotorVoltage)
    8f2a:	eef1 6a67 	vneg.f32	s13, s15
    8f2e:	eef4 6ac0 	vcmpe.f32	s13, s0
    8f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f36:	fe76 6a80 	vselgt.f32	s13, s13, s0
    motorVoltage[0] = -maxMotorVoltage;
  else
    motorVoltage[0] = left;
  // right
  if (right > maxMotorVoltage)
    8f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
    motorVoltage[0] = maxMotorVoltage;
    8f3e:	edc0 6a06 	vstr	s13, [r0, #24]
  if (right > maxMotorVoltage)
    8f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f46:	d407      	bmi.n	8f58 <UMotor::setMotorVoltage(float, float)+0x40>
    motorVoltage[1] = maxMotorVoltage;
  else if (right < -maxMotorVoltage)
    8f48:	eef1 7a67 	vneg.f32	s15, s15
    8f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
    8f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f54:	fe77 7a87 	vselgt.f32	s15, s15, s14
    motorVoltage[1] = -maxMotorVoltage;
  else
    motorVoltage[1] = right;
  // enable ?
  if (fabsf(left) > 0.01 and fabsf(right) > 0.01)
    8f58:	eeb0 0ac0 	vabs.f32	s0, s0
    motorVoltage[1] = maxMotorVoltage;
    8f5c:	edc0 7a07 	vstr	s15, [r0, #28]
  if (fabsf(left) > 0.01 and fabsf(right) > 0.01)
    8f60:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8fc8 <UMotor::setMotorVoltage(float, float)+0xb0>
    8f64:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    8f68:	eeb4 0bc6 	vcmpe.f64	d0, d6
    8f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f70:	dd08      	ble.n	8f84 <UMotor::setMotorVoltage(float, float)+0x6c>
    8f72:	eeb0 7ac7 	vabs.f32	s14, s14
    8f76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8f7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f82:	dc03      	bgt.n	8f8c <UMotor::setMotorVoltage(float, float)+0x74>
    motorSetEnable(true, true);
}
    8f84:	4770      	bx	lr
    8f86:	eef0 6a67 	vmov.f32	s13, s15
    8f8a:	e7d6      	b.n	8f3a <UMotor::setMotorVoltage(float, float)+0x22>
  if (motorPreEnabled and (e1 or e2) and not (motorEnable[0] or motorEnable[1]))
    8f8c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    8f90:	b14b      	cbz	r3, 8fa6 <UMotor::setMotorVoltage(float, float)+0x8e>
    8f92:	f890 3020 	ldrb.w	r3, [r0, #32]
    8f96:	b95b      	cbnz	r3, 8fb0 <UMotor::setMotorVoltage(float, float)+0x98>
    8f98:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    8f9c:	b933      	cbnz	r3, 8fac <UMotor::setMotorVoltage(float, float)+0x94>
    motorPreEnabled = false;
    8f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
    8fa2:	8583      	strh	r3, [r0, #44]	; 0x2c
    8fa4:	e002      	b.n	8fac <UMotor::setMotorVoltage(float, float)+0x94>
  if (e1 and not motorEnable[0])
    8fa6:	f890 3020 	ldrb.w	r3, [r0, #32]
    8faa:	b90b      	cbnz	r3, 8fb0 <UMotor::setMotorVoltage(float, float)+0x98>
    overloadCount = 0;
    8fac:	2300      	movs	r3, #0
    8fae:	6283      	str	r3, [r0, #40]	; 0x28
  motorEnable[0] = e1;
    8fb0:	f240 1101 	movw	r1, #257	; 0x101
				CORE_PIN32_PORTSET = CORE_PIN32_BITMASK;
    8fb4:	4b06      	ldr	r3, [pc, #24]	; (8fd0 <UMotor::setMotorVoltage(float, float)+0xb8>)
    8fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8fba:	8401      	strh	r1, [r0, #32]
    8fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    8fc0:	4770      	bx	lr
    8fc2:	bf00      	nop
    8fc4:	f3af 8000 	nop.w
    8fc8:	47ae147b 	.word	0x47ae147b
    8fcc:	3f847ae1 	.word	0x3f847ae1
    8fd0:	42004000 	.word	0x42004000

00008fd4 <UMotor::stopAllMotors()>:


void UMotor::stopAllMotors()
{ // 
    8fd4:	b410      	push	{r4}
  motorVoltage[0] = 0;
    8fd6:	2100      	movs	r1, #0
  motorEnable[0] = e1;
    8fd8:	2400      	movs	r4, #0
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8fda:	4b0e      	ldr	r3, [pc, #56]	; (9014 <UMotor::stopAllMotors()+0x40>)
    motorSleeping[0] = true;
    8fdc:	2201      	movs	r2, #1
  motorVoltage[0] = 0;
    8fde:	6181      	str	r1, [r0, #24]
  motorVoltage[1] = 0;
    8fe0:	61c1      	str	r1, [r0, #28]
    8fe2:	2120      	movs	r1, #32
  motorEnable[0] = e1;
    8fe4:	8404      	strh	r4, [r0, #32]
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8fe6:	2410      	movs	r4, #16
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    8fe8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8fec:	f44f 7180 	mov.w	r1, #256	; 0x100
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
    8ff0:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8ff4:	2440      	movs	r4, #64	; 0x40
    motorSleeping[0] = true;
    8ff6:	8742      	strh	r2, [r0, #58]	; 0x3a
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    8ff8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    8ffc:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
				CORE_PIN32_PORTCLEAR = CORE_PIN32_BITMASK;
    9000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    9004:	4904      	ldr	r1, [pc, #16]	; (9018 <UMotor::stopAllMotors()+0x44>)
    motorSleeping[1] = true;
    9006:	8782      	strh	r2, [r0, #60]	; 0x3c
  motorSetEnable(false, false);
}
    9008:	f85d 4b04 	ldr.w	r4, [sp], #4
    900c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    9010:	4770      	bx	lr
    9012:	bf00      	nop
    9014:	4200c000 	.word	0x4200c000
    9018:	42004000 	.word	0x42004000

0000901c <_GLOBAL__sub_I_motor>:
    901c:	b510      	push	{r4, lr}
    901e:	4c0f      	ldr	r4, [pc, #60]	; (905c <_GLOBAL__sub_I_motor+0x40>)
    9020:	4620      	mov	r0, r4
    9022:	f003 f901 	bl	c228 <USubss::USubss()>
    9026:	4a0e      	ldr	r2, [pc, #56]	; (9060 <_GLOBAL__sub_I_motor+0x44>)
    9028:	480e      	ldr	r0, [pc, #56]	; (9064 <_GLOBAL__sub_I_motor+0x48>)
    902a:	2300      	movs	r3, #0
    902c:	490e      	ldr	r1, [pc, #56]	; (9068 <_GLOBAL__sub_I_motor+0x4c>)
    902e:	6020      	str	r0, [r4, #0]
    9030:	f04f 408b 	mov.w	r0, #1166016512	; 0x45800000
    9034:	6162      	str	r2, [r4, #20]
    9036:	f240 1201 	movw	r2, #257	; 0x101
    903a:	6261      	str	r1, [r4, #36]	; 0x24
    903c:	85e2      	strh	r2, [r4, #46]	; 0x2e
    903e:	6520      	str	r0, [r4, #80]	; 0x50
UMotor motor;
    9040:	4620      	mov	r0, r4
    9042:	8423      	strh	r3, [r4, #32]
    9044:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    9048:	6563      	str	r3, [r4, #84]	; 0x54
    904a:	65a3      	str	r3, [r4, #88]	; 0x58
    904c:	4a07      	ldr	r2, [pc, #28]	; (906c <_GLOBAL__sub_I_motor+0x50>)
    904e:	4908      	ldr	r1, [pc, #32]	; (9070 <_GLOBAL__sub_I_motor+0x54>)
    9050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
}
    9054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UMotor motor;
    9058:	f00f bfde 	b.w	19018 <__aeabi_atexit>
    905c:	2000f4c8 	.word	0x2000f4c8
    9060:	41200000 	.word	0x41200000
    9064:	20008048 	.word	0x20008048
    9068:	000109a0 	.word	0x000109a0
    906c:	20008f80 	.word	0x20008f80
    9070:	00008621 	.word	0x00008621

00009074 <UMotorTest::sendHelp()>:
{
    9074:	b510      	push	{r4, lr}
  usb.send("# Motor test -------\r\n");
    9076:	4c0d      	ldr	r4, [pc, #52]	; (90ac <UMotorTest::sendHelp()+0x38>)
{
    9078:	b0cc      	sub	sp, #304	; 0x130
  usb.send("# Motor test -------\r\n");
    907a:	490d      	ldr	r1, [pc, #52]	; (90b0 <UMotorTest::sendHelp()+0x3c>)
    907c:	4620      	mov	r0, r4
    907e:	f003 fac5 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmottest C M\tStart motor test C=0:CV, C=1:CCV, C=-1:stop; M is motor (0..3)\r\n");
    9082:	2253      	movs	r2, #83	; 0x53
    9084:	490b      	ldr	r1, [pc, #44]	; (90b4 <UMotorTest::sendHelp()+0x40>)
    9086:	a801      	add	r0, sp, #4
    9088:	f00d fb0c 	bl	166a4 <memcpy>
  usb.send(reply);
    908c:	a901      	add	r1, sp, #4
    908e:	4620      	mov	r0, r4
    9090:	f003 fabc 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tmotset Vlow Vhigh\tMotortest voltage Vlow 3-6 Volt, Vhigh > VLow, samples per state (ms).\r\n");
    9094:	2261      	movs	r2, #97	; 0x61
    9096:	4908      	ldr	r1, [pc, #32]	; (90b8 <UMotorTest::sendHelp()+0x44>)
    9098:	a801      	add	r0, sp, #4
    909a:	f00d fb03 	bl	166a4 <memcpy>
  usb.send(reply);
    909e:	a901      	add	r1, sp, #4
    90a0:	4620      	mov	r0, r4
    90a2:	f003 fab3 	bl	c60c <UUSB::send(char const*)>
}
    90a6:	b04c      	add	sp, #304	; 0x130
    90a8:	bd10      	pop	{r4, pc}
    90aa:	bf00      	nop
    90ac:	2000fac4 	.word	0x2000fac4
    90b0:	20003164 	.word	0x20003164
    90b4:	2000317c 	.word	0x2000317c
    90b8:	200031d0 	.word	0x200031d0
    90bc:	00000000 	.word	0x00000000

000090c0 <UMotorTest::decode(char const*)>:
{
    90c0:	b530      	push	{r4, r5, lr}
    90c2:	460c      	mov	r4, r1
    90c4:	b085      	sub	sp, #20
    90c6:	4605      	mov	r5, r0
  if (strncmp(buf, "motset ", 7) == 0)
    90c8:	2207      	movs	r2, #7
    90ca:	494d      	ldr	r1, [pc, #308]	; (9200 <UMotorTest::decode(char const*)+0x140>)
    90cc:	4620      	mov	r0, r4
    90ce:	f012 fe29 	bl	1bd24 <strncmp>
    90d2:	2800      	cmp	r0, #0
    90d4:	d040      	beq.n	9158 <UMotorTest::decode(char const*)+0x98>
  else if (strncmp(buf, "mottest", 7) == 0)
    90d6:	2207      	movs	r2, #7
    90d8:	494a      	ldr	r1, [pc, #296]	; (9204 <UMotorTest::decode(char const*)+0x144>)
    90da:	4620      	mov	r0, r4
    90dc:	f012 fe22 	bl	1bd24 <strncmp>
    90e0:	b110      	cbz	r0, 90e8 <UMotorTest::decode(char const*)+0x28>
    used = false;
    90e2:	2000      	movs	r0, #0
}
    90e4:	b005      	add	sp, #20
    90e6:	bd30      	pop	{r4, r5, pc}
    if (voltageLow < 0.5)
    90e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    90ec:	ed95 7a19 	vldr	s14, [r5, #100]	; 0x64
    90f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    90f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90f8:	d501      	bpl.n	90fe <UMotorTest::decode(char const*)+0x3e>
      voltageLow = 3;
    90fa:	4b43      	ldr	r3, [pc, #268]	; (9208 <UMotorTest::decode(char const*)+0x148>)
    90fc:	666b      	str	r3, [r5, #100]	; 0x64
    if (voltageHigh < 0.6)
    90fe:	ed95 7a1a 	vldr	s14, [r5, #104]	; 0x68
    9102:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 91f8 <UMotorTest::decode(char const*)+0x138>
    9106:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    910a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    910e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9112:	d459      	bmi.n	91c8 <UMotorTest::decode(char const*)+0x108>
    switch (strtol(p1, (char**)&p1, 10))
    9114:	a903      	add	r1, sp, #12
    const char * p1 = &buf[7];
    9116:	1de0      	adds	r0, r4, #7
    switch (strtol(p1, (char**)&p1, 10))
    9118:	220a      	movs	r2, #10
    911a:	9101      	str	r1, [sp, #4]
    const char * p1 = &buf[7];
    911c:	9003      	str	r0, [sp, #12]
    switch (strtol(p1, (char**)&p1, 10))
    911e:	f012 f959 	bl	1b3d4 <strtol>
    9122:	9901      	ldr	r1, [sp, #4]
    9124:	2800      	cmp	r0, #0
    9126:	d05e      	beq.n	91e6 <UMotorTest::decode(char const*)+0x126>
    9128:	2801      	cmp	r0, #1
    912a:	d150      	bne.n	91ce <UMotorTest::decode(char const*)+0x10e>
        voltageCCV = -1;
    912c:	4b37      	ldr	r3, [pc, #220]	; (920c <UMotorTest::decode(char const*)+0x14c>)
        mLogIndex = 0;
    912e:	2200      	movs	r2, #0
        motorTestRunning = true;
    9130:	7528      	strb	r0, [r5, #20]
        mLogIndex = 0;
    9132:	61aa      	str	r2, [r5, #24]
        voltageCCV = -1;
    9134:	66eb      	str	r3, [r5, #108]	; 0x6c
    testMotor = strtol(p1, (char**)&p1, 10);
    9136:	220a      	movs	r2, #10
    9138:	9803      	ldr	r0, [sp, #12]
    913a:	f012 f94b 	bl	1b3d4 <strtol>
    if (testMotor < 0)
    913e:	2800      	cmp	r0, #0
    9140:	db4e      	blt.n	91e0 <UMotorTest::decode(char const*)+0x120>
    else if (testMotor > motor.MOTOR_CNT - 1)
    9142:	2801      	cmp	r0, #1
    9144:	dd56      	ble.n	91f4 <UMotorTest::decode(char const*)+0x134>
      testMotor = motor.MOTOR_CNT - 1;
    9146:	2301      	movs	r3, #1
    9148:	62ab      	str	r3, [r5, #40]	; 0x28
    usb.send("# ----- starting motor test (in 1 second) ------\n");
    914a:	4931      	ldr	r1, [pc, #196]	; (9210 <UMotorTest::decode(char const*)+0x150>)
    914c:	4831      	ldr	r0, [pc, #196]	; (9214 <UMotorTest::decode(char const*)+0x154>)
    914e:	f003 fa5d 	bl	c60c <UUSB::send(char const*)>
  bool used = true;
    9152:	2001      	movs	r0, #1
}
    9154:	b005      	add	sp, #20
    9156:	bd30      	pop	{r4, r5, pc}
    const char * p1 = &buf[7];
    9158:	1de0      	adds	r0, r4, #7
    voltageLow = strtof(p1, (char**)&p1);
    915a:	a903      	add	r1, sp, #12
    const char * p1 = &buf[7];
    915c:	9003      	str	r0, [sp, #12]
    voltageLow = strtof(p1, (char**)&p1);
    915e:	9101      	str	r1, [sp, #4]
    9160:	f012 f834 	bl	1b1cc <strtof>
    voltageHigh = strtof(p1, (char**)&p1);
    9164:	9901      	ldr	r1, [sp, #4]
    9166:	9803      	ldr	r0, [sp, #12]
    voltageLow = strtof(p1, (char**)&p1);
    9168:	ed85 0a19 	vstr	s0, [r5, #100]	; 0x64
    voltageHigh = strtof(p1, (char**)&p1);
    916c:	f012 f82e 	bl	1b1cc <strtof>
    if (voltageLow < 0.5)
    9170:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    9174:	ed95 7a19 	vldr	s14, [r5, #100]	; 0x64
    9178:	9901      	ldr	r1, [sp, #4]
    917a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    917e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9182:	d501      	bpl.n	9188 <UMotorTest::decode(char const*)+0xc8>
      voltageLow = 3;
    9184:	4b20      	ldr	r3, [pc, #128]	; (9208 <UMotorTest::decode(char const*)+0x148>)
    9186:	666b      	str	r3, [r5, #100]	; 0x64
    if (voltageHigh < 0.6)
    9188:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    int state_ms = strtol(p1, (char**)&p1, 10);
    918c:	220a      	movs	r2, #10
      voltageHigh = 6;
    918e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    int state_ms = strtol(p1, (char**)&p1, 10);
    9192:	9803      	ldr	r0, [sp, #12]
    if (voltageHigh < 0.6)
    9194:	ed9f 6b18 	vldr	d6, [pc, #96]	; 91f8 <UMotorTest::decode(char const*)+0x138>
      voltageHigh = 6;
    9198:	eeb4 5b46 	vcmp.f64	d5, d6
    919c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91a0:	bf48      	it	mi
    91a2:	eeb0 0a67 	vmovmi.f32	s0, s15
    91a6:	ed85 0a1a 	vstr	s0, [r5, #104]	; 0x68
    int state_ms = strtol(p1, (char**)&p1, 10);
    91aa:	f012 f913 	bl	1b3d4 <strtol>
    91ae:	4603      	mov	r3, r0
    if (state_ms * 7 > max)
    91b0:	f640 625b 	movw	r2, #3675	; 0xe5b
  bool used = true;
    91b4:	2001      	movs	r0, #1
    if (state_ms * 7 > max)
    91b6:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
      state_ms = max/7 -1;
    91ba:	4291      	cmp	r1, r2
    91bc:	bfc8      	it	gt
    91be:	f44f 7303 	movgt.w	r3, #524	; 0x20c
    stateLength = state_ms;
    91c2:	65eb      	str	r3, [r5, #92]	; 0x5c
}
    91c4:	b005      	add	sp, #20
    91c6:	bd30      	pop	{r4, r5, pc}
      voltageHigh = 6;
    91c8:	4b13      	ldr	r3, [pc, #76]	; (9218 <UMotorTest::decode(char const*)+0x158>)
    91ca:	66ab      	str	r3, [r5, #104]	; 0x68
    91cc:	e7a2      	b.n	9114 <UMotorTest::decode(char const*)+0x54>
        motorTestEnd = true;
    91ce:	2301      	movs	r3, #1
    testMotor = strtol(p1, (char**)&p1, 10);
    91d0:	220a      	movs	r2, #10
    91d2:	9803      	ldr	r0, [sp, #12]
        motorTestEnd = true;
    91d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    testMotor = strtol(p1, (char**)&p1, 10);
    91d8:	f012 f8fc 	bl	1b3d4 <strtol>
    if (testMotor < 0)
    91dc:	2800      	cmp	r0, #0
    91de:	dab0      	bge.n	9142 <UMotorTest::decode(char const*)+0x82>
      testMotor = 0;
    91e0:	2300      	movs	r3, #0
    91e2:	62ab      	str	r3, [r5, #40]	; 0x28
    91e4:	e7b1      	b.n	914a <UMotorTest::decode(char const*)+0x8a>
        voltageCCV = 1;
    91e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        motorTestRunning = true;
    91ea:	2201      	movs	r2, #1
        mLogIndex = 0;
    91ec:	61a8      	str	r0, [r5, #24]
        motorTestRunning = true;
    91ee:	752a      	strb	r2, [r5, #20]
        voltageCCV = 1;
    91f0:	66eb      	str	r3, [r5, #108]	; 0x6c
        break;
    91f2:	e7a0      	b.n	9136 <UMotorTest::decode(char const*)+0x76>
    testMotor = strtol(p1, (char**)&p1, 10);
    91f4:	62a8      	str	r0, [r5, #40]	; 0x28
    91f6:	e7a8      	b.n	914a <UMotorTest::decode(char const*)+0x8a>
    91f8:	33333333 	.word	0x33333333
    91fc:	3fe33333 	.word	0x3fe33333
    9200:	2000310c 	.word	0x2000310c
    9204:	20003114 	.word	0x20003114
    9208:	40400000 	.word	0x40400000
    920c:	bf800000 	.word	0xbf800000
    9210:	2000311c 	.word	0x2000311c
    9214:	2000fac4 	.word	0x2000fac4
    9218:	40c00000 	.word	0x40c00000

0000921c <UMotorTest::~UMotorTest()>:


///////////////////////////////////////////////////////////////////


class UMotorTest : public USubss
    921c:	b510      	push	{r4, lr}
    921e:	4b05      	ldr	r3, [pc, #20]	; (9234 <UMotorTest::~UMotorTest()+0x18>)
    9220:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    9222:	6840      	ldr	r0, [r0, #4]
    9224:	6023      	str	r3, [r4, #0]
	if (__p)
    9226:	b118      	cbz	r0, 9230 <UMotorTest::~UMotorTest()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9228:	68e1      	ldr	r1, [r4, #12]
    922a:	1a09      	subs	r1, r1, r0
    922c:	f00d fad6 	bl	167dc <operator delete(void*, unsigned int)>
    9230:	4620      	mov	r0, r4
    9232:	bd10      	pop	{r4, pc}
    9234:	200080a0 	.word	0x200080a0

00009238 <UMotorTest::sendMotorParameters()>:
{
    9238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    923c:	2600      	movs	r6, #0
{
    923e:	b0b7      	sub	sp, #220	; 0xdc
    snprintf(s, MSL, "motest %d %f %g %g %g %g %g %g %d\r\n",
    9240:	f8df 908c 	ldr.w	r9, [pc, #140]	; 92d0 <UMotorTest::sendMotorParameters()+0x98>
{
    9244:	4605      	mov	r5, r0
    usb.send(s);
    9246:	f8df 808c 	ldr.w	r8, [pc, #140]	; 92d4 <UMotorTest::sendMotorParameters()+0x9c>
    924a:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
    924e:	f100 0740 	add.w	r7, r0, #64	; 0x40
    snprintf(s, MSL, "motest %d %f %g %g %g %g %g %g %d\r\n",
    9252:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    9256:	4623      	mov	r3, r4
    9258:	3404      	adds	r4, #4
    925a:	ed95 6a1b 	vldr	s12, [r5, #108]	; 0x6c
    925e:	910e      	str	r1, [sp, #56]	; 0x38
    9260:	464a      	mov	r2, r9
    9262:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
    9266:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    926a:	ed93 4a00 	vldr	s8, [r3]
    926e:	2196      	movs	r1, #150	; 0x96
    9270:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9274:	ed93 5a08 	vldr	s10, [r3, #32]
    9278:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    927c:	4633      	mov	r3, r6
    927e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9282:	a810      	add	r0, sp, #64	; 0x40
    9284:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    9288:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    928c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9290:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    9294:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    9298:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    929c:	ed8d 7b08 	vstr	d7, [sp, #32]
    92a0:	ed94 7a03 	vldr	s14, [r4, #12]
    92a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    92a8:	ed8d 4b04 	vstr	d4, [sp, #16]
    92ac:	ed8d 5b02 	vstr	d5, [sp, #8]
    92b0:	ed8d 6b00 	vstr	d6, [sp]
    92b4:	ed8d 7b06 	vstr	d7, [sp, #24]
    92b8:	f012 fa7c 	bl	1b7b4 <snprintf>
    usb.send(s);
    92bc:	a910      	add	r1, sp, #64	; 0x40
    92be:	4640      	mov	r0, r8
    92c0:	f003 f9a4 	bl	c60c <UUSB::send(char const*)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    92c4:	b116      	cbz	r6, 92cc <UMotorTest::sendMotorParameters()+0x94>
}
    92c6:	b037      	add	sp, #220	; 0xdc
    92c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    92cc:	2601      	movs	r6, #1
    92ce:	e7c0      	b.n	9252 <UMotorTest::sendMotorParameters()+0x1a>
    92d0:	20002fd8 	.word	0x20002fd8
    92d4:	2000fac4 	.word	0x2000fac4

000092d8 <UMotorTest::sendData(int)>:
  if (item == 0)
    92d8:	b111      	cbz	r1, 92e0 <UMotorTest::sendData(int)+0x8>
  else if (item == 1)
    92da:	2901      	cmp	r1, #1
    92dc:	d002      	beq.n	92e4 <UMotorTest::sendData(int)+0xc>
    92de:	4770      	bx	lr
    sendMotorParameters();
    92e0:	f7ff bfaa 	b.w	9238 <UMotorTest::sendMotorParameters()>
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    92e4:	ed90 7a1b 	vldr	s14, [r0, #108]	; 0x6c
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    92e8:	2196      	movs	r1, #150	; 0x96
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    92ea:	edd0 7a19 	vldr	s15, [r0, #100]	; 0x64
    92ee:	ed90 6a1a 	vldr	s12, [r0, #104]	; 0x68
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    92f2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    92f4:	ee27 6a06 	vmul.f32	s12, s14, s12
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    92f8:	4a0b      	ldr	r2, [pc, #44]	; (9328 <UMotorTest::sendData(int)+0x50>)
           voltageLow * voltageCCV, voltageHigh * voltageCCV, stateLength);
    92fa:	ee27 7a27 	vmul.f32	s14, s14, s15
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    92fe:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9302:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    9306:	b500      	push	{lr}
    9308:	b0ad      	sub	sp, #180	; 0xb4
  snprintf(s, MSL, "motpar %f %f %d\r\n",
    930a:	9304      	str	r3, [sp, #16]
    930c:	a806      	add	r0, sp, #24
    930e:	ed8d 6b02 	vstr	d6, [sp, #8]
    9312:	ed8d 7b00 	vstr	d7, [sp]
    9316:	f012 fa4d 	bl	1b7b4 <snprintf>
  usb.send(s);
    931a:	a906      	add	r1, sp, #24
    931c:	4803      	ldr	r0, [pc, #12]	; (932c <UMotorTest::sendData(int)+0x54>)
    931e:	f003 f975 	bl	c60c <UUSB::send(char const*)>
}
    9322:	b02d      	add	sp, #180	; 0xb4
    9324:	f85d fb04 	ldr.w	pc, [sp], #4
    9328:	20003150 	.word	0x20003150
    932c:	2000fac4 	.word	0x2000fac4

00009330 <UMotorTest::eePromSave()>:
{
    9330:	b570      	push	{r4, r5, r6, lr}
    9332:	4605      	mov	r5, r0
  eeConfig.pushWord(flags);
    9334:	481d      	ldr	r0, [pc, #116]	; (93ac <UMotorTest::eePromSave()+0x7c>)
    flags |= testValid[i] << i;
    9336:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
    push32(u.u32);
    933a:	4606      	mov	r6, r0
  flags |= encoderReversed << 4;
    933c:	7f2a      	ldrb	r2, [r5, #28]
    933e:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
    flags |= testValid[i] << i;
    9342:	005b      	lsls	r3, r3, #1
  flags |= encoderReversed << 4;
    9344:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
    9348:	35d0      	adds	r5, #208	; 0xd0
    934a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  eeConfig.pushWord(flags);
    934e:	4319      	orrs	r1, r3
    9350:	f7f9 fefa 	bl	3148 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushWord(stateLength);
    9354:	f835 1c74 	ldrh.w	r1, [r5, #-116]
    9358:	4630      	mov	r0, r6
    935a:	f7f9 fef5 	bl	3148 <EEConfig::pushWord(unsigned short)>
    935e:	f855 1c6c 	ldr.w	r1, [r5, #-108]
    9362:	4630      	mov	r0, r6
    9364:	f7f9 feb8 	bl	30d8 <EEConfig::push32(unsigned long)>
    9368:	f855 1c68 	ldr.w	r1, [r5, #-104]
    936c:	4630      	mov	r0, r6
    936e:	f7f9 feb3 	bl	30d8 <EEConfig::push32(unsigned long)>
    eeConfig.pushFloat(mResistance[i]);
    9372:	f854 1b04 	ldr.w	r1, [r4], #4
    9376:	4630      	mov	r0, r6
    9378:	f7f9 feae 	bl	30d8 <EEConfig::push32(unsigned long)>
    937c:	4630      	mov	r0, r6
    937e:	68e1      	ldr	r1, [r4, #12]
    9380:	f7f9 feaa 	bl	30d8 <EEConfig::push32(unsigned long)>
    9384:	69e1      	ldr	r1, [r4, #28]
    9386:	4630      	mov	r0, r6
    9388:	f7f9 fea6 	bl	30d8 <EEConfig::push32(unsigned long)>
    938c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    938e:	4630      	mov	r0, r6
    9390:	f7f9 fea2 	bl	30d8 <EEConfig::push32(unsigned long)>
    9394:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    9396:	4630      	mov	r0, r6
    9398:	f7f9 fe9e 	bl	30d8 <EEConfig::push32(unsigned long)>
    939c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    939e:	4630      	mov	r0, r6
    93a0:	f7f9 fe9a 	bl	30d8 <EEConfig::push32(unsigned long)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    93a4:	42a5      	cmp	r5, r4
    93a6:	d1e4      	bne.n	9372 <UMotorTest::eePromSave()+0x42>
}
    93a8:	bd70      	pop	{r4, r5, r6, pc}
    93aa:	bf00      	nop
    93ac:	2000ebf4 	.word	0x2000ebf4

000093b0 <UMotorTest::eePromLoad()>:
{
    93b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return stringConfig;
    93b2:	4d47      	ldr	r5, [pc, #284]	; (94d0 <UMotorTest::eePromLoad()+0x120>)
  if (not eeConfig.isStringConfig())
    93b4:	f895 3020 	ldrb.w	r3, [r5, #32]
    93b8:	b11b      	cbz	r3, 93c2 <UMotorTest::eePromLoad()+0x12>
    configAddr+=bytes;
    93ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    93bc:	336c      	adds	r3, #108	; 0x6c
    93be:	626b      	str	r3, [r5, #36]	; 0x24
}
    93c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t flags = eeConfig.readWord();
    93c2:	4604      	mov	r4, r0
    93c4:	4628      	mov	r0, r5
    93c6:	f7f9 ff03 	bl	31d0 <EEConfig::readWord()>
    93ca:	4603      	mov	r3, r0
    stateLength = eeConfig.readWord();
    93cc:	4628      	mov	r0, r5
    testValid[0] = (flags & 0x01) > 0;
    93ce:	f003 0201 	and.w	r2, r3, #1
    93d2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    testValid[1] = (flags & 0x02) > 0;
    93d6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    encoderReversed = (flags & 0x10) > 0;
    93da:	f3c3 1300 	ubfx	r3, r3, #4, #1
    testValid[1] = (flags & 0x02) > 0;
    93de:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    encoderReversed = (flags & 0x10) > 0;
    93e2:	7723      	strb	r3, [r4, #28]
    stateLength = eeConfig.readWord();
    93e4:	f7f9 fef4 	bl	31d0 <EEConfig::readWord()>
    93e8:	4603      	mov	r3, r0
    u.u32 = read32();
    93ea:	4628      	mov	r0, r5
    93ec:	65e3      	str	r3, [r4, #92]	; 0x5c
    93ee:	f7f9 fec7 	bl	3180 <EEConfig::read32()>
    93f2:	4603      	mov	r3, r0
    93f4:	4628      	mov	r0, r5
    voltageLow = eeConfig.readFloat();
    93f6:	6663      	str	r3, [r4, #100]	; 0x64
    93f8:	f7f9 fec2 	bl	3180 <EEConfig::read32()>
    if (stateLength < 300 or stateLength > 2000)
    93fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    93fe:	f240 62a4 	movw	r2, #1700	; 0x6a4
    return u.f;  
    9402:	ee07 0a90 	vmov	s15, r0
    9406:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    voltageHigh = eeConfig.readFloat();
    940a:	66a0      	str	r0, [r4, #104]	; 0x68
    if (stateLength < 300 or stateLength > 2000)
    940c:	4293      	cmp	r3, r2
    940e:	d902      	bls.n	9416 <UMotorTest::eePromLoad()+0x66>
      stateLength = 1000;
    9410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9414:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (voltageLow < 0.5 or isnanf(voltageLow))
    9416:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    941a:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
    941e:	eeb4 7ae6 	vcmpe.f32	s14, s13
    9422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9426:	d534      	bpl.n	9492 <UMotorTest::eePromLoad()+0xe2>
      voltageLow = 3;
    9428:	4b2a      	ldr	r3, [pc, #168]	; (94d4 <UMotorTest::eePromLoad()+0x124>)
    942a:	6663      	str	r3, [r4, #100]	; 0x64
    if (voltageHigh < 0.6 or isnanf(voltageHigh))
    942c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    9430:	ed9f 5b25 	vldr	d5, [pc, #148]	; 94c8 <UMotorTest::eePromLoad()+0x118>
    9434:	eeb4 6bc5 	vcmpe.f64	d6, d5
    9438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    943c:	d42f      	bmi.n	949e <UMotorTest::eePromLoad()+0xee>
    943e:	eef4 7a67 	vcmp.f32	s15, s15
    9442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9446:	d62a      	bvs.n	949e <UMotorTest::eePromLoad()+0xee>
    9448:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    944c:	f104 07d0 	add.w	r7, r4, #208	; 0xd0
    u.u32 = read32();
    9450:	4e1f      	ldr	r6, [pc, #124]	; (94d0 <UMotorTest::eePromLoad()+0x120>)
    9452:	4630      	mov	r0, r6
    9454:	f7f9 fe94 	bl	3180 <EEConfig::read32()>
      mResistance[i] = eeConfig.readFloat();
    9458:	f845 0b04 	str.w	r0, [r5], #4
    945c:	4630      	mov	r0, r6
    945e:	f7f9 fe8f 	bl	3180 <EEConfig::read32()>
      mInductance[i] = eeConfig.readFloat();
    9462:	60e8      	str	r0, [r5, #12]
    9464:	4630      	mov	r0, r6
    9466:	f7f9 fe8b 	bl	3180 <EEConfig::read32()>
      mKonstant[i] = eeConfig.readFloat();
    946a:	61e8      	str	r0, [r5, #28]
    946c:	4630      	mov	r0, r6
    946e:	f7f9 fe87 	bl	3180 <EEConfig::read32()>
      mFricDyn[i] = eeConfig.readFloat();
    9472:	62e8      	str	r0, [r5, #44]	; 0x2c
    9474:	4630      	mov	r0, r6
    9476:	f7f9 fe83 	bl	3180 <EEConfig::read32()>
      mFricStat[i] = eeConfig.readFloat();
    947a:	63e8      	str	r0, [r5, #60]	; 0x3c
    947c:	4630      	mov	r0, r6
    947e:	f7f9 fe7f 	bl	3180 <EEConfig::read32()>
    for (int i = 0; i < motor.MOTOR_CNT; i++)
    9482:	42bd      	cmp	r5, r7
      mInertia[i] = eeConfig.readFloat();
    9484:	64e8      	str	r0, [r5, #76]	; 0x4c
    for (int i = 0; i < motor.MOTOR_CNT; i++)
    9486:	d1e4      	bne.n	9452 <UMotorTest::eePromLoad()+0xa2>
  if (setupCnt == 0)
    9488:	6a63      	ldr	r3, [r4, #36]	; 0x24
    948a:	b15b      	cbz	r3, 94a4 <UMotorTest::eePromLoad()+0xf4>
  setupCnt++;
    948c:	3301      	adds	r3, #1
    948e:	6263      	str	r3, [r4, #36]	; 0x24
}
    9490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (voltageLow < 0.5 or isnanf(voltageLow))
    9492:	eeb4 7a47 	vcmp.f32	s14, s14
    9496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    949a:	d7c7      	bvc.n	942c <UMotorTest::eePromLoad()+0x7c>
    949c:	e7c4      	b.n	9428 <UMotorTest::eePromLoad()+0x78>
      voltageHigh = 6;
    949e:	4b0e      	ldr	r3, [pc, #56]	; (94d8 <UMotorTest::eePromLoad()+0x128>)
    94a0:	66a3      	str	r3, [r4, #104]	; 0x68
    94a2:	e7d1      	b.n	9448 <UMotorTest::eePromLoad()+0x98>
    addPublistItem("motest", "Get estimated parameters 'motest mot[0,1] cv=0/ccv=1 Km R L B S I");
    94a4:	4a0d      	ldr	r2, [pc, #52]	; (94dc <UMotorTest::eePromLoad()+0x12c>)
    94a6:	4620      	mov	r0, r4
    94a8:	490d      	ldr	r1, [pc, #52]	; (94e0 <UMotorTest::eePromLoad()+0x130>)
    94aa:	f002 ffe1 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
    addPublistItem("motpar", "Get test parameters 'motpars lowVolt highVolt state-time'");
    94ae:	4a0d      	ldr	r2, [pc, #52]	; (94e4 <UMotorTest::eePromLoad()+0x134>)
    94b0:	4620      	mov	r0, r4
    94b2:	490d      	ldr	r1, [pc, #52]	; (94e8 <UMotorTest::eePromLoad()+0x138>)
    94b4:	f002 ffdc 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
    usb.addSubscriptionService(this);
    94b8:	4621      	mov	r1, r4
    94ba:	480c      	ldr	r0, [pc, #48]	; (94ec <UMotorTest::eePromLoad()+0x13c>)
    94bc:	f003 fcea 	bl	ce94 <UUSB::addSubscriptionService(USubss*)>
  setupCnt++;
    94c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    94c2:	e7e3      	b.n	948c <UMotorTest::eePromLoad()+0xdc>
    94c4:	f3af 8000 	nop.w
    94c8:	33333333 	.word	0x33333333
    94cc:	3fe33333 	.word	0x3fe33333
    94d0:	2000ebf4 	.word	0x2000ebf4
    94d4:	40400000 	.word	0x40400000
    94d8:	40c00000 	.word	0x40c00000
    94dc:	2000307c 	.word	0x2000307c
    94e0:	200030c0 	.word	0x200030c0
    94e4:	200030c8 	.word	0x200030c8
    94e8:	20003104 	.word	0x20003104
    94ec:	2000fac4 	.word	0x2000fac4

000094f0 <UMotorTest::testCurrent(float, float, float, float&)>:
           testMotor, mInertia[testMotor]);
  usb.send(s);
}

float UMotorTest::testCurrent(float mK, float mR, float mInduc, float & kerr)
{
    94f0:	b430      	push	{r4, r5}
  char s[MSL];
//   snprintf(s, MSL, "# testCurrent: - has %d samples (%d bytes) mK=%g, mR=%g, mL=%g\n",
//            mLogIndex, mLogIndex * sizeof(UMotorTestMeasurementData),
//            mK, mR, mInduc);
//   usb.send(s);
  for (int j = 1; j < mLogIndex; j++)
    94f2:	6985      	ldr	r5, [r0, #24]
  UMotorTestMeasurementData * dd = mLog;
    94f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
  for (int j = 1; j < mLogIndex; j++)
    94f6:	2d01      	cmp	r5, #1
  int32_t t0 = dd[0].mTime10us;
    94f8:	681a      	ldr	r2, [r3, #0]
  float dv = dd[0].mVoltage;
    94fa:	ed93 4a01 	vldr	s8, [r3, #4]
{
    94fe:	ed2d 8b0c 	vpush	{d8-d13}
  for (int j = 1; j < mLogIndex; j++)
    9502:	f340 80c1 	ble.w	9688 <UMotorTest::testCurrent(float, float, float, float&)+0x198>
  {
    //dd[j].clearEsimate(); // remove all previous estimates
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    9506:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 96b8 <UMotorTest::testCurrent(float, float, float, float&)+0x1c8>
    if (dt > 0 and fabsf(dd->mVoltage) > 0.5)
    { // next sample will have a motor voltage.
      // using odometry estimated velocity (a bit filtered)
      float vel0 = fabsf(dd->velocity);
      Vm = fabsf(dd[-1].mVoltage); // actual motor voltage (from previous sample)
      Vdif = Vm - vel0 * Km; // anker coil voltage
    950a:	eeb1 3a40 	vneg.f32	s6, s0
  float w = 0.1;
    950e:	eddf 6a6b 	vldr	s13, [pc, #428]	; 96bc <UMotorTest::testCurrent(float, float, float, float&)+0x1cc>
    if (dt > 0 and fabsf(dd->mVoltage) > 0.5)
    9512:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
  float kerrSum = 0;
    9516:	eeb0 aa47 	vmov.f32	s20, s14
  for (int j = 1; j < mLogIndex; j++)
    951a:	2001      	movs	r0, #1
  float Vdif = 0;
    951c:	eef0 5a47 	vmov.f32	s11, s14
  int kCnt = 0;
    9520:	f04f 0c00 	mov.w	ip, #0
  float iL = 0;
    9524:	eeb0 6a47 	vmov.f32	s12, s14
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    9528:	ed9f 5a65 	vldr	s10, [pc, #404]	; 96c0 <UMotorTest::testCurrent(float, float, float, float&)+0x1d0>
  float diffSum = 0.0;
    952c:	eeb0 0a47 	vmov.f32	s0, s14
        dv = Vm;
        w += dwi;
        if (w > 1.0)
        {
          w = 1.0;
          dwi = -0.005;
    9530:	ed9f ba64 	vldr	s22, [pc, #400]	; 96c4 <UMotorTest::testCurrent(float, float, float, float&)+0x1d4>
  float wsum = 0.0;
    9534:	eef0 1a47 	vmov.f32	s3, s14
  float dwi = 0.0;
    9538:	eef0 aa47 	vmov.f32	s21, s14
          dwi = 0.1;
    953c:	eef0 ba66 	vmov.f32	s23, s13
        }
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
        {
          w = 0.03;
          dwi = 0.0;
    9540:	eeb0 ca47 	vmov.f32	s24, s14
        if (fabsf(dv - Vm) > 0.3)
    9544:	ed9f 2b56 	vldr	d2, [pc, #344]	; 96a0 <UMotorTest::testCurrent(float, float, float, float&)+0x1b0>
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
    9548:	ed9f 9b57 	vldr	d9, [pc, #348]	; 96a8 <UMotorTest::testCurrent(float, float, float, float&)+0x1b8>
    954c:	ed9f 8b58 	vldr	d8, [pc, #352]	; 96b0 <UMotorTest::testCurrent(float, float, float, float&)+0x1c0>
    9550:	e025      	b.n	959e <UMotorTest::testCurrent(float, float, float, float&)+0xae>
        if (fabsf(dv - Vm) > 0.3)
    9552:	ee34 4a67 	vsub.f32	s8, s8, s15
    9556:	eeb0 4ac4 	vabs.f32	s8, s8
    955a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    955e:	eeb4 4bc2 	vcmpe.f64	d4, d2
    9562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9566:	dd69      	ble.n	963c <UMotorTest::testCurrent(float, float, float, float&)+0x14c>
        dv = Vm;
    9568:	eeb0 4a67 	vmov.f32	s8, s15
        w += dwi;
    956c:	eddf 6a56 	vldr	s13, [pc, #344]	; 96c8 <UMotorTest::testCurrent(float, float, float, float&)+0x1d8>
          dwi = 0.1;
    9570:	eef0 aa6b 	vmov.f32	s21, s23
                  j, w, dwi, wsum, diffSum, dd->mCurrent, iL, dt, Vl, Vdif);
          usb.send(s);
        }
      }
      wsum += w;
      float di = iL - dd->mCurrent; // current is always positive
    9574:	edd3 4a13 	vldr	s9, [r3, #76]	; 0x4c
      diffSum += w * di * di;
      if (fabsf(Vm) > 0.5)
    9578:	eef4 7ae3 	vcmpe.f32	s15, s7
      wsum += w;
    957c:	ee71 1aa6 	vadd.f32	s3, s3, s13
      float di = iL - dd->mCurrent; // current is always positive
    9580:	ee76 4a64 	vsub.f32	s9, s12, s9
      if (fabsf(Vm) > 0.5)
    9584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      diffSum += w * di * di;
    9588:	ee66 caa4 	vmul.f32	s25, s13, s9
    958c:	eeac 0aa4 	vfma.f32	s0, s25, s9
      if (fabsf(Vm) > 0.5)
    9590:	dd03      	ble.n	959a <UMotorTest::testCurrent(float, float, float, float&)+0xaa>
      {
        kerrSum += di * di;
    9592:	eea4 aaa4 	vfma.f32	s20, s9, s9
        kCnt++;
    9596:	f10c 0c01 	add.w	ip, ip, #1
    959a:	3344      	adds	r3, #68	; 0x44
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    959c:	4622      	mov	r2, r4
  for (int j = 1; j < mLogIndex; j++)
    959e:	3001      	adds	r0, #1
      }
    }
    if (toLog)
    {
      dd->weightCurrent = w;
    95a0:	edc3 6a07 	vstr	s13, [r3, #28]
      dd->e_dt = dt;
    95a4:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
  for (int j = 1; j < mLogIndex; j++)
    95a8:	42a8      	cmp	r0, r5
      dd->e_current = iL;
    95aa:	ed83 6a0c 	vstr	s12, [r3, #48]	; 0x30
      dd->e_dif = Vdif;
    95ae:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
  for (int j = 1; j < mLogIndex; j++)
    95b2:	d035      	beq.n	9620 <UMotorTest::testCurrent(float, float, float, float&)+0x130>
    dt = float(int32_t(dd->mTime10us) - t0) / 100000.0;
    95b4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    95b6:	1aa2      	subs	r2, r4, r2
    95b8:	ee07 2a90 	vmov	s15, r2
    95bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    95c0:	ee87 7a85 	vdiv.f32	s14, s15, s10
    if (dt > 0 and fabsf(dd->mVoltage) > 0.5)
    95c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    95c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    95cc:	dde5      	ble.n	959a <UMotorTest::testCurrent(float, float, float, float&)+0xaa>
    95ce:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    95d2:	eef0 7ae7 	vabs.f32	s15, s15
    95d6:	eef4 7ae3 	vcmpe.f32	s15, s7
    95da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    95de:	dddc      	ble.n	959a <UMotorTest::testCurrent(float, float, float, float&)+0xaa>
      Vm = fabsf(dd[-1].mVoltage); // actual motor voltage (from previous sample)
    95e0:	edd3 7a01 	vldr	s15, [r3, #4]
      if (fabsf(Vm) < 1.0)
    95e4:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
      float vel0 = fabsf(dd->velocity);
    95e8:	edd3 4a15 	vldr	s9, [r3, #84]	; 0x54
      Vm = fabsf(dd[-1].mVoltage); // actual motor voltage (from previous sample)
    95ec:	eef0 7ae7 	vabs.f32	s15, s15
      float vel0 = fabsf(dd->velocity);
    95f0:	eef0 4ae4 	vabs.f32	s9, s9
      Vdif = Vm - vel0 * Km; // anker coil voltage
    95f4:	eef0 5a67 	vmov.f32	s11, s15
      if (fabsf(Vm) < 1.0)
    95f8:	eef4 7aec 	vcmpe.f32	s15, s25
      Vdif = Vm - vel0 * Km; // anker coil voltage
    95fc:	eee3 5a24 	vfma.f32	s11, s6, s9
      if (fabsf(Vm) < 1.0)
    9600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      float Vl = Vdif - iL * Ra; // voltage over inductor
    9604:	eef0 4a65 	vmov.f32	s9, s11
    9608:	eee6 4a60 	vfms.f32	s9, s12, s1
      iL += Vl * dt / L; // motor current
    960c:	ee67 4a24 	vmul.f32	s9, s14, s9
    9610:	ee84 da81 	vdiv.f32	s26, s9, s2
    9614:	ee36 6a0d 	vadd.f32	s12, s12, s26
      if (fabsf(Vm) < 1.0)
    9618:	d59b      	bpl.n	9552 <UMotorTest::testCurrent(float, float, float, float&)+0x62>
        w = 0.0;
    961a:	eddf 6a27 	vldr	s13, [pc, #156]	; 96b8 <UMotorTest::testCurrent(float, float, float, float&)+0x1c8>
    961e:	e7a9      	b.n	9574 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
    }
    t0 = dd->mTime10us;
    dd++;
  }
  kerr = kerrSum/kCnt;
    9620:	ee07 ca90 	vmov	s15, ip
    9624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9628:	ee8a 7a27 	vdiv.f32	s14, s20, s15
  return diffSum/wsum;
}
    962c:	ee80 0a21 	vdiv.f32	s0, s0, s3
    9630:	ecbd 8b0c 	vpop	{d8-d13}
    9634:	bc30      	pop	{r4, r5}
  kerr = kerrSum/kCnt;
    9636:	ed81 7a00 	vstr	s14, [r1]
}
    963a:	4770      	bx	lr
        w += dwi;
    963c:	ee76 6aaa 	vadd.f32	s13, s13, s21
        if (w > 1.0)
    9640:	eef4 6aec 	vcmpe.f32	s13, s25
    9644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9648:	dd06      	ble.n	9658 <UMotorTest::testCurrent(float, float, float, float&)+0x168>
          w = 1.0;
    964a:	eef0 6a6c 	vmov.f32	s13, s25
        dv = Vm;
    964e:	eeb0 4a67 	vmov.f32	s8, s15
          dwi = -0.005;
    9652:	eef0 aa4b 	vmov.f32	s21, s22
    9656:	e78d      	b.n	9574 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
    9658:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
    965c:	eeb4 4bc9 	vcmpe.f64	d4, d9
    9660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9664:	d519      	bpl.n	969a <UMotorTest::testCurrent(float, float, float, float&)+0x1aa>
    9666:	eeb0 4aea 	vabs.f32	s8, s21
    966a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    966e:	eeb4 4bc8 	vcmpe.f64	d4, d8
        dv = Vm;
    9672:	eeb0 4a67 	vmov.f32	s8, s15
        else if (w < 0.01 and fabsf(dwi) > 0.00001)
    9676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    967a:	f77f af7b 	ble.w	9574 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
          dwi = 0.0;
    967e:	eef0 aa4c 	vmov.f32	s21, s24
          w = 0.03;
    9682:	eddf 6a12 	vldr	s13, [pc, #72]	; 96cc <UMotorTest::testCurrent(float, float, float, float&)+0x1dc>
    9686:	e775      	b.n	9574 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
  for (int j = 1; j < mLogIndex; j++)
    9688:	eddf 7a0b 	vldr	s15, [pc, #44]	; 96b8 <UMotorTest::testCurrent(float, float, float, float&)+0x1c8>
  float kerrSum = 0;
    968c:	eeb0 aa67 	vmov.f32	s20, s15
  float diffSum = 0.0;
    9690:	eeb0 0a67 	vmov.f32	s0, s15
  float wsum = 0.0;
    9694:	eef0 1a67 	vmov.f32	s3, s15
    9698:	e7c6      	b.n	9628 <UMotorTest::testCurrent(float, float, float, float&)+0x138>
        dv = Vm;
    969a:	eeb0 4a67 	vmov.f32	s8, s15
    969e:	e769      	b.n	9574 <UMotorTest::testCurrent(float, float, float, float&)+0x84>
    96a0:	33333333 	.word	0x33333333
    96a4:	3fd33333 	.word	0x3fd33333
    96a8:	47ae147b 	.word	0x47ae147b
    96ac:	3f847ae1 	.word	0x3f847ae1
    96b0:	88e368f1 	.word	0x88e368f1
    96b4:	3ee4f8b5 	.word	0x3ee4f8b5
    96b8:	00000000 	.word	0x00000000
    96bc:	3dcccccd 	.word	0x3dcccccd
    96c0:	47c35000 	.word	0x47c35000
    96c4:	bba3d70a 	.word	0xbba3d70a
    96c8:	3e99999a 	.word	0x3e99999a
    96cc:	3cf5c28f 	.word	0x3cf5c28f

000096d0 <UMotorTest::estimateFriction(float, float, float, float&)>:


float UMotorTest::estimateFriction(float b, float s, float j, float & jerr)
{
    96d0:	b570      	push	{r4, r5, r6, lr}
  dd->e_tau1 = 0;
  dd->e_tau2 = 0;
  dd->e_vel = 0;
  dd->weightInertia = 0;
  bool step = false;
  for (int i = 1; i < mLogIndex; i++)
    96d2:	6985      	ldr	r5, [r0, #24]
  dd->e_current = 0;
    96d4:	eddf 7a78 	vldr	s15, [pc, #480]	; 98b8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1e8>
  UMotorTestMeasurementData * dd = mLog;
    96d8:	6c83      	ldr	r3, [r0, #72]	; 0x48
  for (int i = 1; i < mLogIndex; i++)
    96da:	2d01      	cmp	r5, #1
{
    96dc:	ed2d 8b0c 	vpush	{d8-d13}
  dd->e_current = 0;
    96e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  dd->e_tau0 = 0;
    96e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  dd->e_tau1 = 0;
    96e8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  dd->e_tau2 = 0;
    96ec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  dd->e_vel = 0;
    96f0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  dd->weightInertia = 0;
    96f4:	edc3 7a08 	vstr	s15, [r3, #32]
  for (int i = 1; i < mLogIndex; i++)
    96f8:	f340 80c9 	ble.w	988e <UMotorTest::estimateFriction(float, float, float, float&)+0x1be>
  bool step = false;
    96fc:	2400      	movs	r4, #0
    float acc = 0;
    float Vm1 = fabsf(dd[-1].mVoltage);
    if (not step)
      step = (Vm1 - Vm) > 0.1;
    Vm = Vm1;
    if (Vm1 > 0.5 and vel > 1.0)
    96fe:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
  float dwj = 0;
    9702:	eeb0 ba67 	vmov.f32	s22, s15
  for (int i = 1; i < mLogIndex; i++)
    9706:	2201      	movs	r2, #1
  float w = 0;
    9708:	eef0 5a67 	vmov.f32	s11, s15
  int sumCnt = 0;
    970c:	46a6      	mov	lr, r4
  float sumJerr = 0;
    970e:	eef0 9a67 	vmov.f32	s19, s15
    }
    else
    {
      w = 0;
      tau0 = 0.0077;
      tau1 = 0.0088;
    9712:	eddf aa6a 	vldr	s21, [pc, #424]	; 98bc <UMotorTest::estimateFriction(float, float, float, float&)+0x1ec>
  float sumJweight = 0;
    9716:	eeb0 9a67 	vmov.f32	s18, s15
      tau0 = 0.0077;
    971a:	ed9f aa69 	vldr	s20, [pc, #420]	; 98c0 <UMotorTest::estimateFriction(float, float, float, float&)+0x1f0>
  float sumErr = 0.0;
    971e:	eef0 1a67 	vmov.f32	s3, s15
        dwj = 0.15;
    9722:	ed9f ca68 	vldr	s24, [pc, #416]	; 98c4 <UMotorTest::estimateFriction(float, float, float, float&)+0x1f4>
  float estVel = 0;
    9726:	eeb0 5a67 	vmov.f32	s10, s15
        dwj = -0.0075;
    972a:	eddf ba67 	vldr	s23, [pc, #412]	; 98c8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1f8>
      tau2 = 0;
    972e:	eeb0 4a67 	vmov.f32	s8, s15
      step = (Vm1 - Vm) > 0.1;
    9732:	ed9f 3b5b 	vldr	d3, [pc, #364]	; 98a0 <UMotorTest::estimateFriction(float, float, float, float&)+0x1d0>
      else if (w < 0.01 and fabsf(dwj) > 0.00001)
    9736:	ed9f 8b5c 	vldr	d8, [pc, #368]	; 98a8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1d8>
    973a:	ed9f 2b5d 	vldr	d2, [pc, #372]	; 98b0 <UMotorTest::estimateFriction(float, float, float, float&)+0x1e0>
    973e:	e048      	b.n	97d2 <UMotorTest::estimateFriction(float, float, float, float&)+0x102>
    float vel = fabsf(dd->velocity); // actual velocity
    9740:	eeb0 7ac7 	vabs.f32	s14, s14
    if (Vm1 > 0.5 and vel > 1.0)
    9744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    9748:	eeb4 7ae6 	vcmpe.f32	s14, s13
    974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9750:	dd58      	ble.n	9804 <UMotorTest::estimateFriction(float, float, float, float&)+0x134>
      tau0 = dd->mCurrent * mKonstant[testMotor]; // generated torque
    9752:	6a86      	ldr	r6, [r0, #40]	; 0x28
    9754:	edd3 6a02 	vldr	s13, [r3, #8]
    9758:	eb00 0c86 	add.w	ip, r0, r6, lsl #2
      float dt = dd->e_dt; // time since last sample
    975c:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
      tau0 = dd->mCurrent * mKonstant[testMotor]; // generated torque
    9760:	eddc ca3a 	vldr	s25, [ip, #232]	; 0xe8
    9764:	ee6c caa6 	vmul.f32	s25, s25, s13
      if (tau0 > 0 and tau0 > s)
    9768:	eef5 cac0 	vcmpe.f32	s25, #0.0
    976c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9770:	dd51      	ble.n	9816 <UMotorTest::estimateFriction(float, float, float, float&)+0x146>
    9772:	eef4 cae0 	vcmpe.f32	s25, s1
    9776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    977a:	dd4c      	ble.n	9816 <UMotorTest::estimateFriction(float, float, float, float&)+0x146>
        tau1 = tau0 - s;
    977c:	ee7c dae0 	vsub.f32	s27, s25, s1
      tau2 = tau1 - b * vel;
    9780:	eeb0 da6d 	vmov.f32	s26, s27
    9784:	eea7 da40 	vfms.f32	s26, s14, s0
      float acc = tau2 / j;
    9788:	eecd 6a01 	vdiv.f32	s13, s26, s2
      estVel += acc*dt; // estimated velocity
    978c:	eea6 5a26 	vfma.f32	s10, s12, s13
      if (step)
    9790:	2c00      	cmp	r4, #0
    9792:	d04c      	beq.n	982e <UMotorTest::estimateFriction(float, float, float, float&)+0x15e>
      w += dwj;
    9794:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
        dwj = 0.15;
    9798:	eeb0 ba4c 	vmov.f32	s22, s24
      float verr = vel - estVel;
    979c:	ee37 7a45 	vsub.f32	s14, s14, s10
      sumCnt++;
    97a0:	f10e 0e01 	add.w	lr, lr, #1
      sumJweight += w;
    97a4:	ee39 9a25 	vadd.f32	s18, s18, s11
    }
    97a8:	2400      	movs	r4, #0
      sumJerr += w * verr * verr;
    97aa:	ee65 6a87 	vmul.f32	s13, s11, s14
      sumErr += verr * verr;
    97ae:	eee7 1a07 	vfma.f32	s3, s14, s14
      sumJerr += w * verr * verr;
    97b2:	eee6 9a87 	vfma.f32	s19, s13, s14
  for (int i = 1; i < mLogIndex; i++)
    97b6:	3201      	adds	r2, #1
      ddd++;
    }
    if (toLog)
    {
      // save to log
      dd->e_tau0 = tau0;
    97b8:	edc3 ca0d 	vstr	s25, [r3, #52]	; 0x34
      dd->e_tau1 = tau1;
    97bc:	edc3 da0e 	vstr	s27, [r3, #56]	; 0x38
      dd->e_tau2 = tau2;
      dd->e_vel = estVel;
      dd->weightInertia = w;
    }
    //
    dd++;
    97c0:	3344      	adds	r3, #68	; 0x44
  for (int i = 1; i < mLogIndex; i++)
    97c2:	42aa      	cmp	r2, r5
      dd->e_tau2 = tau2;
    97c4:	ed03 da02 	vstr	s26, [r3, #-8]
      dd->e_vel = estVel;
    97c8:	ed03 5a01 	vstr	s10, [r3, #-4]
      dd->weightInertia = w;
    97cc:	ed43 5a09 	vstr	s11, [r3, #-36]	; 0xffffffdc
  for (int i = 1; i < mLogIndex; i++)
    97d0:	d03b      	beq.n	984a <UMotorTest::estimateFriction(float, float, float, float&)+0x17a>
    float Vm1 = fabsf(dd[-1].mVoltage);
    97d2:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
    97d6:	eeb0 6a67 	vmov.f32	s12, s15
    float vel = fabsf(dd->velocity); // actual velocity
    97da:	ed93 7a04 	vldr	s14, [r3, #16]
    float Vm1 = fabsf(dd[-1].mVoltage);
    97de:	eef0 7ae6 	vabs.f32	s15, s13
    if (not step)
    97e2:	b954      	cbnz	r4, 97fa <UMotorTest::estimateFriction(float, float, float, float&)+0x12a>
      step = (Vm1 - Vm) > 0.1;
    97e4:	ee37 6ac6 	vsub.f32	s12, s15, s12
    97e8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    97ec:	eeb4 6bc3 	vcmpe.f64	d6, d3
    97f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97f4:	bfcc      	ite	gt
    97f6:	2401      	movgt	r4, #1
    97f8:	2400      	movle	r4, #0
    if (Vm1 > 0.5 and vel > 1.0)
    97fa:	eef4 7ae4 	vcmpe.f32	s15, s9
    97fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9802:	dc9d      	bgt.n	9740 <UMotorTest::estimateFriction(float, float, float, float&)+0x70>
      tau2 = 0;
    9804:	eeb0 da44 	vmov.f32	s26, s8
      w = 0;
    9808:	eddf 5a2b 	vldr	s11, [pc, #172]	; 98b8 <UMotorTest::estimateFriction(float, float, float, float&)+0x1e8>
      tau1 = 0.0088;
    980c:	eef0 da6a 	vmov.f32	s27, s21
      tau0 = 0.0077;
    9810:	eef0 ca4a 	vmov.f32	s25, s20
    9814:	e7cf      	b.n	97b6 <UMotorTest::estimateFriction(float, float, float, float&)+0xe6>
      else if (tau0 < -s)
    9816:	eef1 6a60 	vneg.f32	s13, s1
    981a:	eef4 6aec 	vcmpe.f32	s13, s25
    981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        tau1 = tau0 + s;
    9822:	bfcc      	ite	gt
    9824:	ee7c daa0 	vaddgt.f32	s27, s25, s1
        tau1 = 0;
    9828:	eef0 da44 	vmovle.f32	s27, s8
    982c:	e7a8      	b.n	9780 <UMotorTest::estimateFriction(float, float, float, float&)+0xb0>
      w += dwj;
    982e:	ee75 5a8b 	vadd.f32	s11, s11, s22
      if (w > 1.0)
    9832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    9836:	eef4 5ae6 	vcmpe.f32	s11, s13
    983a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    983e:	dd11      	ble.n	9864 <UMotorTest::estimateFriction(float, float, float, float&)+0x194>
        w = 1.0;
    9840:	eef0 5a66 	vmov.f32	s11, s13
        dwj = -0.0075;
    9844:	eeb0 ba6b 	vmov.f32	s22, s23
    9848:	e7a8      	b.n	979c <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
  }  // go to next value.
  jerr = sumJerr / sumJweight;
  return sumErr / sumCnt;
    984a:	ee07 ea90 	vmov	s15, lr
    984e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  jerr = sumJerr / sumJweight;
    9852:	ee89 7a89 	vdiv.f32	s14, s19, s18
}
    9856:	ee81 0a80 	vdiv.f32	s0, s3, s0
    985a:	ecbd 8b0c 	vpop	{d8-d13}
  jerr = sumJerr / sumJweight;
    985e:	ed81 7a00 	vstr	s14, [r1]
}
    9862:	bd70      	pop	{r4, r5, r6, pc}
      else if (w < 0.01 and fabsf(dwj) > 0.00001)
    9864:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
    9868:	eeb4 6bc8 	vcmpe.f64	d6, d8
    986c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9870:	d594      	bpl.n	979c <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
    9872:	eeb0 6acb 	vabs.f32	s12, s22
    9876:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    987a:	eeb4 6bc2 	vcmpe.f64	d6, d2
    987e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9882:	dd8b      	ble.n	979c <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
        dwj = 0.0;
    9884:	eeb0 ba44 	vmov.f32	s22, s8
        w = 0.01;
    9888:	eddf 5a10 	vldr	s11, [pc, #64]	; 98cc <UMotorTest::estimateFriction(float, float, float, float&)+0x1fc>
    988c:	e786      	b.n	979c <UMotorTest::estimateFriction(float, float, float, float&)+0xcc>
  for (int i = 1; i < mLogIndex; i++)
    988e:	eeb0 0a67 	vmov.f32	s0, s15
  float sumJerr = 0;
    9892:	eef0 9a67 	vmov.f32	s19, s15
  float sumJweight = 0;
    9896:	eeb0 9a67 	vmov.f32	s18, s15
  float sumErr = 0.0;
    989a:	eef0 1a67 	vmov.f32	s3, s15
    989e:	e7d8      	b.n	9852 <UMotorTest::estimateFriction(float, float, float, float&)+0x182>
    98a0:	9999999a 	.word	0x9999999a
    98a4:	3fb99999 	.word	0x3fb99999
    98a8:	47ae147b 	.word	0x47ae147b
    98ac:	3f847ae1 	.word	0x3f847ae1
    98b0:	88e368f1 	.word	0x88e368f1
    98b4:	3ee4f8b5 	.word	0x3ee4f8b5
    98b8:	00000000 	.word	0x00000000
    98bc:	3c102de0 	.word	0x3c102de0
    98c0:	3bfc5048 	.word	0x3bfc5048
    98c4:	3e19999a 	.word	0x3e19999a
    98c8:	bbf5c28f 	.word	0xbbf5c28f
    98cc:	3c23d70a 	.word	0x3c23d70a

000098d0 <UMotorTest::testModel()>:


bool UMotorTest::testModel()
{
    98d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool dKs = false;
  bool dLs = false;
  bool isOK = false;
  float e1;
  //
  for (int i = 0; i < 30; i++)
    98d4:	2400      	movs	r4, #0
{
    98d6:	4607      	mov	r7, r0
    e2k = testCurrent(km2, r1, l1, k2e);
    float l2 = l1 + dL; // Henry
    e2l = testCurrent(km1, r1, l2, dummy);
    if (true)
    {
      snprintf(s, MSL, "# motor %d current %d r1=%.4f Ohm, K1=%.5f Nm/A, L=%.5f Henry, e1=%g, e2r=%g, e2k=%g, e2L=%g, k2e=%g\n",
    98d8:	f8df 928c 	ldr.w	r9, [pc, #652]	; 9b68 <UMotorTest::testModel()+0x298>
  bool dLs = false;
    98dc:	4626      	mov	r6, r4
  bool dKs = false;
    98de:	46a2      	mov	sl, r4
  bool dRs = false;
    98e0:	4625      	mov	r5, r4
                testMotor, i, r2, km2, l2, e1, e2r, e2k, e2l, k2e);
      usb.send(s);
    98e2:	f8df 8264 	ldr.w	r8, [pc, #612]	; 9b48 <UMotorTest::testModel()+0x278>
{
    98e6:	ed2d 8b10 	vpush	{d8-d15}
  float dL = 0.0001;
    98ea:	eddf 8a91 	vldr	s17, [pc, #580]	; 9b30 <UMotorTest::testModel()+0x260>
{
    98ee:	b0d1      	sub	sp, #324	; 0x144
  float dR = 0.01;
    98f0:	ed9f 9a90 	vldr	s18, [pc, #576]	; 9b34 <UMotorTest::testModel()+0x264>
  float dK = 0.0001;
    98f4:	eef0 9a68 	vmov.f32	s19, s17
  float l1 = 0.003; // Henry
    98f8:	ed9f fa8f 	vldr	s30, [pc, #572]	; 9b38 <UMotorTest::testModel()+0x268>
  float r1 = 1.1; // Ohm
    98fc:	eddf ea8f 	vldr	s29, [pc, #572]	; 9b3c <UMotorTest::testModel()+0x26c>
  float km1 = 0.0188; // Nm/A
    9900:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 9b40 <UMotorTest::testModel()+0x270>
    9904:	e001      	b.n	990a <UMotorTest::testModel()+0x3a>
    {
      if (i > 3)
        dK *= 0.8;
      dKs = sign;
    }
    sign = e2l < e1;
    9906:	4616      	mov	r6, r2
    sign = (k2e < k1e);
    9908:	469a      	mov	sl, r3
    e1 = testCurrent(km1, r1, l1, k1e);
    990a:	eeb0 1a4f 	vmov.f32	s2, s30
    990e:	a919      	add	r1, sp, #100	; 0x64
    9910:	eef0 0a6e 	vmov.f32	s1, s29
    9914:	4638      	mov	r0, r7
    9916:	eeb0 0a48 	vmov.f32	s0, s16
    991a:	f7ff fde9 	bl	94f0 <UMotorTest::testCurrent(float, float, float, float&)>
    float r2 = r1 + dR;
    991e:	ee7e da89 	vadd.f32	s27, s29, s18
    e1 = testCurrent(km1, r1, l1, k1e);
    9922:	eef0 aa40 	vmov.f32	s21, s0
    e2r = testCurrent(km1, r2, l1, dummy);
    9926:	a91b      	add	r1, sp, #108	; 0x6c
    9928:	4638      	mov	r0, r7
    992a:	eeb0 0a48 	vmov.f32	s0, s16
    992e:	eef0 0a6d 	vmov.f32	s1, s27
    9932:	f7ff fddd 	bl	94f0 <UMotorTest::testCurrent(float, float, float, float&)>
    float km2 = km1 + dK; // Nm/A
    9936:	ee78 fa29 	vadd.f32	s31, s16, s19
    e2k = testCurrent(km2, r1, l1, k2e);
    993a:	eef0 0a6e 	vmov.f32	s1, s29
    993e:	a91a      	add	r1, sp, #104	; 0x68
    e2r = testCurrent(km1, r2, l1, dummy);
    9940:	eeb0 aa40 	vmov.f32	s20, s0
    e2k = testCurrent(km2, r1, l1, k2e);
    9944:	4638      	mov	r0, r7
    9946:	eeb0 0a6f 	vmov.f32	s0, s31
    994a:	f7ff fdd1 	bl	94f0 <UMotorTest::testCurrent(float, float, float, float&)>
    float l2 = l1 + dL; // Henry
    994e:	ee3f da28 	vadd.f32	s26, s30, s17
    e2k = testCurrent(km2, r1, l1, k2e);
    9952:	eeb0 ca40 	vmov.f32	s24, s0
    e2l = testCurrent(km1, r1, l2, dummy);
    9956:	a91b      	add	r1, sp, #108	; 0x6c
    9958:	4638      	mov	r0, r7
    995a:	eeb0 0a48 	vmov.f32	s0, s16
    995e:	eeb0 1a4d 	vmov.f32	s2, s26
    9962:	f7ff fdc5 	bl	94f0 <UMotorTest::testCurrent(float, float, float, float&)>
      snprintf(s, MSL, "# motor %d current %d r1=%.4f Ohm, K1=%.5f Nm/A, L=%.5f Henry, e1=%g, e2r=%g, e2k=%g, e2L=%g, k2e=%g\n",
    9966:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
    996a:	eeb7 3aca 	vcvt.f64.f32	d3, s20
    996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9970:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9974:	464a      	mov	r2, r9
    9976:	eeb7 2ac0 	vcvt.f64.f32	d2, s0
    997a:	21c8      	movs	r1, #200	; 0xc8
    997c:	eeb7 4acd 	vcvt.f64.f32	d4, s26
    9980:	a81e      	add	r0, sp, #120	; 0x78
    9982:	eeb7 5aef 	vcvt.f64.f32	d5, s31
    9986:	9400      	str	r4, [sp, #0]
    9988:	eeb7 6aed 	vcvt.f64.f32	d6, s27
    998c:	eeb7 baea 	vcvt.f64.f32	d11, s21
    9990:	eeb7 cacc 	vcvt.f64.f32	d12, s24
    e2l = testCurrent(km1, r1, l2, dummy);
    9994:	eeb0 ea40 	vmov.f32	s28, s0
      snprintf(s, MSL, "# motor %d current %d r1=%.4f Ohm, K1=%.5f Nm/A, L=%.5f Henry, e1=%g, e2r=%g, e2k=%g, e2L=%g, k2e=%g\n",
    9998:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    999c:	ed8d 2b0e 	vstr	d2, [sp, #56]	; 0x38
    99a0:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
    99a4:	ed8d 4b06 	vstr	d4, [sp, #24]
    99a8:	ed8d 5b04 	vstr	d5, [sp, #16]
    99ac:	ed8d 6b02 	vstr	d6, [sp, #8]
    99b0:	ed8d cb0c 	vstr	d12, [sp, #48]	; 0x30
    99b4:	ed8d bb08 	vstr	d11, [sp, #32]
    99b8:	f011 fefc 	bl	1b7b4 <snprintf>
      usb.send(s);
    99bc:	a91e      	add	r1, sp, #120	; 0x78
    99be:	4640      	mov	r0, r8
    99c0:	f002 fe24 	bl	c60c <UUSB::send(char const*)>
    bool sign = (e2r < e1);
    99c4:	eef4 aaca 	vcmpe.f32	s21, s20
    99c8:	462b      	mov	r3, r5
    99ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    99ce:	bfcd      	iteet	gt
    99d0:	2501      	movgt	r5, #1
    99d2:	2500      	movle	r5, #0
      r1 -= dR;
    99d4:	ee7e eac9 	vsuble.f32	s29, s29, s18
      r1 += dR;
    99d8:	eef0 ea6d 	vmovgt.f32	s29, s27
    if (sign != dRs)
    99dc:	429d      	cmp	r5, r3
    99de:	d009      	beq.n	99f4 <UMotorTest::testModel()+0x124>
      if (i > 3)
    99e0:	2c03      	cmp	r4, #3
    99e2:	dd07      	ble.n	99f4 <UMotorTest::testModel()+0x124>
        dR *= 0.8;
    99e4:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
    99e8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 9af8 <UMotorTest::testModel()+0x228>
    99ec:	ee27 7b06 	vmul.f64	d7, d7, d6
    99f0:	eeb7 9bc7 	vcvt.f32.f64	s18, d7
    sign = (k2e < k1e);
    99f4:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
    99f8:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
    99fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a04:	bf4d      	iteet	mi
    9a06:	2301      	movmi	r3, #1
    9a08:	2300      	movpl	r3, #0
      km1 -= dK;
    9a0a:	ee38 8a69 	vsubpl.f32	s16, s16, s19
      km1 += dK;
    9a0e:	eeb0 8a6f 	vmovmi.f32	s16, s31
    if (sign != dKs)
    9a12:	4553      	cmp	r3, sl
    9a14:	d009      	beq.n	9a2a <UMotorTest::testModel()+0x15a>
      if (i > 3)
    9a16:	2c03      	cmp	r4, #3
    9a18:	dd07      	ble.n	9a2a <UMotorTest::testModel()+0x15a>
        dK *= 0.8;
    9a1a:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    9a1e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 9af8 <UMotorTest::testModel()+0x228>
    9a22:	ee27 7b06 	vmul.f64	d7, d7, d6
    9a26:	eef7 9bc7 	vcvt.f32.f64	s19, d7
    sign = e2l < e1;
    9a2a:	eef4 aace 	vcmpe.f32	s21, s28
    9a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a32:	bfcd      	iteet	gt
    9a34:	2201      	movgt	r2, #1
    9a36:	2200      	movle	r2, #0
    if (sign)
      l1 += dL;
    else
      l1 -= dL;
    9a38:	ee3f fa68 	vsuble.f32	s30, s30, s17
      l1 += dL;
    9a3c:	eeb0 fa4d 	vmovgt.f32	s30, s26
    if (sign != dLs)
    9a40:	42b2      	cmp	r2, r6
    9a42:	d009      	beq.n	9a58 <UMotorTest::testModel()+0x188>
    {
      if (i > 3)
    9a44:	2c03      	cmp	r4, #3
    9a46:	dd07      	ble.n	9a58 <UMotorTest::testModel()+0x188>
        dL *=0.8;
    9a48:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
    9a4c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 9af8 <UMotorTest::testModel()+0x228>
    9a50:	ee27 7b06 	vmul.f64	d7, d7, d6
    9a54:	eef7 8bc7 	vcvt.f32.f64	s17, d7
  for (int i = 0; i < 30; i++)
    9a58:	3401      	adds	r4, #1
    9a5a:	2c1e      	cmp	r4, #30
    9a5c:	f47f af53 	bne.w	9906 <UMotorTest::testModel()+0x36>
      dLs = sign;
    }
  }
  // save result
  if (km1 > 0.001 and r1 > 0.2 and l1 > 0.0005)
    9a60:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
    9a64:	ed9f 6b26 	vldr	d6, [pc, #152]	; 9b00 <UMotorTest::testModel()+0x230>
    9a68:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a70:	dd09      	ble.n	9a86 <UMotorTest::testModel()+0x1b6>
    9a72:	eeb7 7aee 	vcvt.f64.f32	d7, s29
    9a76:	ed9f 6b24 	vldr	d6, [pc, #144]	; 9b08 <UMotorTest::testModel()+0x238>
    9a7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a82:	f300 8151 	bgt.w	9d28 <UMotorTest::testModel()+0x458>
  bool isOK = false;
    9a86:	2300      	movs	r3, #0
    9a88:	9317      	str	r3, [sp, #92]	; 0x5c
  float dj = j1 / 20.0;
  bool dbs = false;
  bool dss = false;
  bool djs = false;
  float e1j, e2j;
  usb.send("#-------\n");
    9a8a:	492e      	ldr	r1, [pc, #184]	; (9b44 <UMotorTest::testModel()+0x274>)
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
           testMotor, b1, s1, j1);
  usb.send(s);
  for (int i = 0; i < 100; i++)
    9a8c:	2400      	movs	r4, #0
  usb.send("#-------\n");
    9a8e:	482e      	ldr	r0, [pc, #184]	; (9b48 <UMotorTest::testModel()+0x278>)
    9a90:	f002 fdbc 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
    9a94:	21c8      	movs	r1, #200	; 0xc8
    9a96:	a81e      	add	r0, sp, #120	; 0x78
  float dj = j1 / 20.0;
    9a98:	ed9f aa2c 	vldr	s20, [pc, #176]	; 9b4c <UMotorTest::testModel()+0x27c>
  float ds = s1 / 20.0;
    9a9c:	eddf 9a2c 	vldr	s19, [pc, #176]	; 9b50 <UMotorTest::testModel()+0x280>
  bool djs = false;
    9aa0:	46a2      	mov	sl, r4
  float db = b1 / 10.0;
    9aa2:	ed9f 9a2c 	vldr	s18, [pc, #176]	; 9b54 <UMotorTest::testModel()+0x284>
  bool dss = false;
    9aa6:	4626      	mov	r6, r4
  float j1 = 0.0000037; // (Kg m^2)
    9aa8:	eddf aa2b 	vldr	s21, [pc, #172]	; 9b58 <UMotorTest::testModel()+0x288>
  bool dbs = false;
    9aac:	4625      	mov	r5, r4
  float s1 = 0.0037; // (Nm)
    9aae:	eddf 8a2b 	vldr	s17, [pc, #172]	; 9b5c <UMotorTest::testModel()+0x28c>
  float b1 = 7.0e-6; // (Nm s/rad)
    9ab2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 9b60 <UMotorTest::testModel()+0x290>
    {
      if (i > 3)
        dj *= 0.95;
      djs = sign;
    }
    snprintf(s, MSL, "# motor %d fric %d b1=%11.4g, dbs=%d, s1=%.5fg, j1=%11.4g,\t e1=%.0f, e2b=%.0f, e2s=%.0f, e2j=%.0f, e1j=%.0f, djs=%d\n",
    9ab6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 9b6c <UMotorTest::testModel()+0x29c>
              testMotor, i, b1, dbs, s1, j1, e1, e2b, e2s, e2j, e1j, djs);
    usb.send(s);
    9aba:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9b48 <UMotorTest::testModel()+0x278>
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
    9abe:	a314      	add	r3, pc, #80	; (adr r3, 9b10 <UMotorTest::testModel()+0x240>)
    9ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
        db *= 0.95;
    9ac4:	ed9f cb14 	vldr	d12, [pc, #80]	; 9b18 <UMotorTest::testModel()+0x248>
  snprintf(s, MSL, "# motor %d friction test using: b1=%g, s1=%g, j1=%g\n",
    9ac8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9acc:	a314      	add	r3, pc, #80	; (adr r3, 9b20 <UMotorTest::testModel()+0x250>)
    9ace:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    9ad6:	a314      	add	r3, pc, #80	; (adr r3, 9b28 <UMotorTest::testModel()+0x258>)
    9ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9adc:	e9cd 2300 	strd	r2, r3, [sp]
    9ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ae2:	4a20      	ldr	r2, [pc, #128]	; (9b64 <UMotorTest::testModel()+0x294>)
    9ae4:	f011 fe66 	bl	1b7b4 <snprintf>
  usb.send(s);
    9ae8:	a91e      	add	r1, sp, #120	; 0x78
    9aea:	4817      	ldr	r0, [pc, #92]	; (9b48 <UMotorTest::testModel()+0x278>)
    9aec:	f002 fd8e 	bl	c60c <UUSB::send(char const*)>
  for (int i = 0; i < 100; i++)
    9af0:	e042      	b.n	9b78 <UMotorTest::testModel()+0x2a8>
    9af2:	bf00      	nop
    9af4:	f3af 8000 	nop.w
    9af8:	9999999a 	.word	0x9999999a
    9afc:	3fe99999 	.word	0x3fe99999
    9b00:	d2f1a9fc 	.word	0xd2f1a9fc
    9b04:	3f50624d 	.word	0x3f50624d
    9b08:	9999999a 	.word	0x9999999a
    9b0c:	3fc99999 	.word	0x3fc99999
    9b10:	80000000 	.word	0x80000000
    9b14:	3ecf09b0 	.word	0x3ecf09b0
    9b18:	66666666 	.word	0x66666666
    9b1c:	3fee6666 	.word	0x3fee6666
    9b20:	60000000 	.word	0x60000000
    9b24:	3f6e4f76 	.word	0x3f6e4f76
    9b28:	60000000 	.word	0x60000000
    9b2c:	3edd5c31 	.word	0x3edd5c31
    9b30:	38d1b717 	.word	0x38d1b717
    9b34:	3c23d70a 	.word	0x3c23d70a
    9b38:	3b449ba6 	.word	0x3b449ba6
    9b3c:	3f8ccccd 	.word	0x3f8ccccd
    9b40:	3c9a0275 	.word	0x3c9a0275
    9b44:	2000329c 	.word	0x2000329c
    9b48:	2000fac4 	.word	0x2000fac4
    9b4c:	3446a46a 	.word	0x3446a46a
    9b50:	3941fc8f 	.word	0x3941fc8f
    9b54:	353be7a2 	.word	0x353be7a2
    9b58:	36784d84 	.word	0x36784d84
    9b5c:	3b727bb3 	.word	0x3b727bb3
    9b60:	36eae18b 	.word	0x36eae18b
    9b64:	200032a8 	.word	0x200032a8
    9b68:	20003234 	.word	0x20003234
    9b6c:	200032e0 	.word	0x200032e0
    9b70:	43960000 	.word	0x43960000
    sign = e2j < e1j;
    9b74:	46b2      	mov	sl, r6
      sign = e2s < e1;
    9b76:	4646      	mov	r6, r8
    e1 = estimateFriction(b1, s1, j1, e1j);
    9b78:	eeb0 1a6a 	vmov.f32	s2, s21
    9b7c:	4638      	mov	r0, r7
    9b7e:	eef0 0a68 	vmov.f32	s1, s17
    9b82:	a91c      	add	r1, sp, #112	; 0x70
    9b84:	eeb0 0a48 	vmov.f32	s0, s16
    9b88:	f7ff fda2 	bl	96d0 <UMotorTest::estimateFriction(float, float, float, float&)>
    float e2b = estimateFriction(b1 + db, s1, j1, dummy);
    9b8c:	ee38 ea09 	vadd.f32	s28, s16, s18
    9b90:	a91b      	add	r1, sp, #108	; 0x6c
    e1 = estimateFriction(b1, s1, j1, e1j);
    9b92:	eeb0 da40 	vmov.f32	s26, s0
    float e2b = estimateFriction(b1 + db, s1, j1, dummy);
    9b96:	eeb0 0a4e 	vmov.f32	s0, s28
    9b9a:	f7ff fd99 	bl	96d0 <UMotorTest::estimateFriction(float, float, float, float&)>
    float e2s = estimateFriction(b1, s1 + ds, j1, dummy);
    9b9e:	ee78 daa9 	vadd.f32	s27, s17, s19
    float e2b = estimateFriction(b1 + db, s1, j1, dummy);
    9ba2:	eeb0 ba40 	vmov.f32	s22, s0
    float e2s = estimateFriction(b1, s1 + ds, j1, dummy);
    9ba6:	eeb0 0a48 	vmov.f32	s0, s16
    9baa:	eef0 0a6d 	vmov.f32	s1, s27
    9bae:	f7ff fd8f 	bl	96d0 <UMotorTest::estimateFriction(float, float, float, float&)>
    dummy = estimateFriction(b1, s1, j1 + dj, e2j);
    9bb2:	ee3a 1a8a 	vadd.f32	s2, s21, s20
    float e2s = estimateFriction(b1, s1 + ds, j1, dummy);
    9bb6:	eef0 ba40 	vmov.f32	s23, s0
    dummy = estimateFriction(b1, s1, j1 + dj, e2j);
    9bba:	a91d      	add	r1, sp, #116	; 0x74
    9bbc:	eeb0 0a48 	vmov.f32	s0, s16
    9bc0:	eef0 0a68 	vmov.f32	s1, s17
    9bc4:	f7ff fd84 	bl	96d0 <UMotorTest::estimateFriction(float, float, float, float&)>
    bool sign = e2b < e1;
    9bc8:	eeb4 dacb 	vcmpe.f32	s26, s22
    9bcc:	462a      	mov	r2, r5
    dummy = estimateFriction(b1, s1, j1 + dj, e2j);
    9bce:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
    bool sign = e2b < e1;
    9bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9bd6:	bfcd      	iteet	gt
    9bd8:	2501      	movgt	r5, #1
    9bda:	2500      	movle	r5, #0
      b1 -= db;
    9bdc:	ee38 8a49 	vsuble.f32	s16, s16, s18
      b1 += db;
    9be0:	eeb0 8a4e 	vmovgt.f32	s16, s28
    if (sign != dbs)
    9be4:	4295      	cmp	r5, r2
    9be6:	d007      	beq.n	9bf8 <UMotorTest::testModel()+0x328>
      if (i > 3)
    9be8:	2c03      	cmp	r4, #3
    9bea:	dd05      	ble.n	9bf8 <UMotorTest::testModel()+0x328>
        db *= 0.95;
    9bec:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
    9bf0:	ee27 7b0c 	vmul.f64	d7, d7, d12
    9bf4:	eeb7 9bc7 	vcvt.f32.f64	s18, d7
      sign = e2s < e1;
    9bf8:	eeb4 daeb 	vcmpe.f32	s26, s23
    9bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c00:	bfcd      	iteet	gt
    9c02:	f04f 0801 	movgt.w	r8, #1
    9c06:	f04f 0800 	movle.w	r8, #0
        s1 -= ds;
    9c0a:	ee78 8ae9 	vsuble.f32	s17, s17, s19
        s1 += ds;
    9c0e:	eef0 8a6d 	vmovgt.f32	s17, s27
      if (sign != dss)
    9c12:	45b0      	cmp	r8, r6
    9c14:	d007      	beq.n	9c26 <UMotorTest::testModel()+0x356>
        if (i > 3)
    9c16:	2c03      	cmp	r4, #3
    9c18:	dd05      	ble.n	9c26 <UMotorTest::testModel()+0x356>
          ds *= 0.95;
    9c1a:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    9c1e:	ee27 7b0c 	vmul.f64	d7, d7, d12
    9c22:	eef7 9bc7 	vcvt.f32.f64	s19, d7
    sign = e2j < e1j;
    9c26:	ed9d 5a1d 	vldr	s10, [sp, #116]	; 0x74
    9c2a:	ed9d 4a1c 	vldr	s8, [sp, #112]	; 0x70
    9c2e:	eeb4 5ac4 	vcmpe.f32	s10, s8
    9c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c36:	bf4d      	iteet	mi
    9c38:	2601      	movmi	r6, #1
    9c3a:	2600      	movpl	r6, #0
       j1 -= dj;
    9c3c:	ee7a aaca 	vsubpl.f32	s21, s21, s20
       j1 += dj;
    9c40:	eef0 aa41 	vmovmi.f32	s21, s2
    if (sign != djs)
    9c44:	4556      	cmp	r6, sl
    9c46:	d007      	beq.n	9c58 <UMotorTest::testModel()+0x388>
      if (i > 3)
    9c48:	2c03      	cmp	r4, #3
    9c4a:	dd05      	ble.n	9c58 <UMotorTest::testModel()+0x388>
        dj *= 0.95;
    9c4c:	eeb7 7aca 	vcvt.f64.f32	d7, s20
    9c50:	ee27 7b0c 	vmul.f64	d7, d7, d12
    9c54:	eeb7 abc7 	vcvt.f32.f64	s20, d7
    snprintf(s, MSL, "# motor %d fric %d b1=%11.4g, dbs=%d, s1=%.5fg, j1=%11.4g,\t e1=%.0f, e2b=%.0f, e2s=%.0f, e2j=%.0f, e1j=%.0f, djs=%d\n",
    9c58:	eeb7 6aeb 	vcvt.f64.f32	d6, s23
    9c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c5e:	eeb7 7acb 	vcvt.f64.f32	d7, s22
    9c62:	465a      	mov	r2, fp
    9c64:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    9c68:	21c8      	movs	r1, #200	; 0xc8
    9c6a:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9c6e:	9400      	str	r4, [sp, #0]
    9c70:	eeb7 1acd 	vcvt.f64.f32	d1, s26
  for (int i = 0; i < 100; i++)
    9c74:	3401      	adds	r4, #1
    snprintf(s, MSL, "# motor %d fric %d b1=%11.4g, dbs=%d, s1=%.5fg, j1=%11.4g,\t e1=%.0f, e2b=%.0f, e2s=%.0f, e2j=%.0f, e1j=%.0f, djs=%d\n",
    9c76:	eeb7 2aea 	vcvt.f64.f32	d2, s21
    9c7a:	a81e      	add	r0, sp, #120	; 0x78
    9c7c:	eeb7 3ae8 	vcvt.f64.f32	d3, s17
    9c80:	9614      	str	r6, [sp, #80]	; 0x50
    9c82:	eeb7 bac8 	vcvt.f64.f32	d11, s16
    9c86:	9504      	str	r5, [sp, #16]
    9c88:	ed8d 4b12 	vstr	d4, [sp, #72]	; 0x48
    9c8c:	ed8d 5b10 	vstr	d5, [sp, #64]	; 0x40
    9c90:	ed8d 6b0e 	vstr	d6, [sp, #56]	; 0x38
    9c94:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    9c98:	ed8d 1b0a 	vstr	d1, [sp, #40]	; 0x28
    9c9c:	ed8d 2b08 	vstr	d2, [sp, #32]
    9ca0:	ed8d 3b06 	vstr	d3, [sp, #24]
    9ca4:	ed8d bb02 	vstr	d11, [sp, #8]
    9ca8:	f011 fd84 	bl	1b7b4 <snprintf>
    usb.send(s);
    9cac:	a91e      	add	r1, sp, #120	; 0x78
    9cae:	4648      	mov	r0, r9
    9cb0:	f002 fcac 	bl	c60c <UUSB::send(char const*)>
  for (int i = 0; i < 100; i++)
    9cb4:	2c64      	cmp	r4, #100	; 0x64
    9cb6:	f47f af5d 	bne.w	9b74 <UMotorTest::testModel()+0x2a4>
  }
  if (b1 > 0 and s1 > 0 and j1 > 0 and e1 < 300)
    9cba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    9cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9cc2:	dd21      	ble.n	9d08 <UMotorTest::testModel()+0x438>
    9cc4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    9cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ccc:	dd1c      	ble.n	9d08 <UMotorTest::testModel()+0x438>
    9cce:	eef5 aac0 	vcmpe.f32	s21, #0.0
    9cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9cd6:	dd17      	ble.n	9d08 <UMotorTest::testModel()+0x438>
    9cd8:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 9b70 <UMotorTest::testModel()+0x2a0>
    9cdc:	eeb4 dae7 	vcmpe.f32	s26, s15
    9ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ce4:	d510      	bpl.n	9d08 <UMotorTest::testModel()+0x438>
  {
    mFricStat[testMotor] = s1;
    9ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ce8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    mFricDyn[testMotor] = b1;
    mInertia[testMotor] = j1;
  }
  return isOK and e1 < 300;
    9cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    mFricStat[testMotor] = s1;
    9cee:	edc7 8a42 	vstr	s17, [r7, #264]	; 0x108
    mFricDyn[testMotor] = b1;
    9cf2:	ed87 8a3e 	vstr	s16, [r7, #248]	; 0xf8
    mInertia[testMotor] = j1;
    9cf6:	edc7 aa46 	vstr	s21, [r7, #280]	; 0x118
  return isOK and e1 < 300;
    9cfa:	b97b      	cbnz	r3, 9d1c <UMotorTest::testModel()+0x44c>
    9cfc:	2000      	movs	r0, #0
}
    9cfe:	b051      	add	sp, #324	; 0x144
    9d00:	ecbd 8b10 	vpop	{d8-d15}
    9d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return isOK and e1 < 300;
    9d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d0f6      	beq.n	9cfc <UMotorTest::testModel()+0x42c>
    9d0e:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 9b70 <UMotorTest::testModel()+0x2a0>
    9d12:	eeb4 dae7 	vcmpe.f32	s26, s15
    9d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d1a:	d5ef      	bpl.n	9cfc <UMotorTest::testModel()+0x42c>
    9d1c:	2001      	movs	r0, #1
}
    9d1e:	b051      	add	sp, #324	; 0x144
    9d20:	ecbd 8b10 	vpop	{d8-d15}
    9d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (km1 > 0.001 and r1 > 0.2 and l1 > 0.0005)
    9d28:	eeb7 7acf 	vcvt.f64.f32	d7, s30
    9d2c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 9d68 <UMotorTest::testModel()+0x498>
    9d30:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d38:	f77f aea5 	ble.w	9a86 <UMotorTest::testModel()+0x1b6>
    mKonstant[testMotor] = km1;
    9d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    isOK = e1 < 0.02;;
    9d3e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 9d70 <UMotorTest::testModel()+0x4a0>
    9d42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    9d46:	eeb4 bbc7 	vcmpe.f64	d11, d7
    mKonstant[testMotor] = km1;
    9d4a:	ed83 8a3a 	vstr	s16, [r3, #232]	; 0xe8
    mInductance[testMotor] = l1;
    9d4e:	ed83 fa36 	vstr	s30, [r3, #216]	; 0xd8
    mResistance[testMotor] = r1;
    9d52:	edc3 ea32 	vstr	s29, [r3, #200]	; 0xc8
    isOK = e1 < 0.02;;
    9d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d5a:	bf4c      	ite	mi
    9d5c:	2301      	movmi	r3, #1
    9d5e:	2300      	movpl	r3, #0
    9d60:	9317      	str	r3, [sp, #92]	; 0x5c
    if (false)
    9d62:	e692      	b.n	9a8a <UMotorTest::testModel()+0x1ba>
    9d64:	f3af 8000 	nop.w
    9d68:	d2f1a9fc 	.word	0xd2f1a9fc
    9d6c:	3f40624d 	.word	0x3f40624d
    9d70:	47ae147b 	.word	0x47ae147b
    9d74:	3f947ae1 	.word	0x3f947ae1

00009d78 <UMotorTest::estimateMotorParams()>:
  if (mLog == nullptr or mLogIndex == 0)
    9d78:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	f000 808b 	beq.w	9e96 <UMotorTest::estimateMotorParams()+0x11e>
    9d80:	6982      	ldr	r2, [r0, #24]
{
    9d82:	b530      	push	{r4, r5, lr}
    9d84:	4604      	mov	r4, r0
    9d86:	b0d3      	sub	sp, #332	; 0x14c
  if (mLog == nullptr or mLogIndex == 0)
    9d88:	2a00      	cmp	r2, #0
    9d8a:	f000 8082 	beq.w	9e92 <UMotorTest::estimateMotorParams()+0x11a>
    mKonstant[testMotor] = 1.0;
    9d8e:	6a85      	ldr	r5, [r0, #40]	; 0x28
    9d90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  logStartTime = mLog[0].mTime10us;
    9d94:	6819      	ldr	r1, [r3, #0]
    9d96:	eb00 0385 	add.w	r3, r0, r5, lsl #2
  testValid[testMotor] = testModel(); // left motor
    9d9a:	4425      	add	r5, r4
    mKonstant[testMotor] = 1.0;
    9d9c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    mFricDyn[testMotor] = 1.0;
    9da0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    mFricStat[testMotor] = 1.0;
    9da4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    mInertia[testMotor] = 1.0;
    9da8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    mResistance[testMotor] = 0.1;
    9dac:	4a3a      	ldr	r2, [pc, #232]	; (9e98 <UMotorTest::estimateMotorParams()+0x120>)
    9dae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    mInductance[testMotor] = 0.001;
    9db2:	4a3a      	ldr	r2, [pc, #232]	; (9e9c <UMotorTest::estimateMotorParams()+0x124>)
    9db4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  logStartTime = mLog[0].mTime10us;
    9db8:	62c1      	str	r1, [r0, #44]	; 0x2c
  testValid[testMotor] = testModel(); // left motor
    9dba:	f7ff fd89 	bl	98d0 <UMotorTest::testModel()>
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9dbe:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
    9dc2:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
  snprintf(s, MSL, "# UMotorTest:: encoder reversed=%d, Low voltage=%g, High voltage=%g\r\n",
    9dc6:	f44f 7196 	mov.w	r1, #300	; 0x12c
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9dca:	ed94 6a1a 	vldr	s12, [r4, #104]	; 0x68
  snprintf(s, MSL, "# UMotorTest:: encoder reversed=%d, Low voltage=%g, High voltage=%g\r\n",
    9dce:	7f23      	ldrb	r3, [r4, #28]
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9dd0:	ee27 6a06 	vmul.f32	s12, s14, s12
  testValid[testMotor] = testModel(); // left motor
    9dd4:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
           encoderReversed, voltageLow * voltageCCV, voltageHigh * voltageCCV);
    9dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
  snprintf(s, MSL, "# UMotorTest:: encoder reversed=%d, Low voltage=%g, High voltage=%g\r\n",
    9ddc:	4a30      	ldr	r2, [pc, #192]	; (9ea0 <UMotorTest::estimateMotorParams()+0x128>)
    9dde:	a807      	add	r0, sp, #28
    9de0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9de4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9de8:	ed8d 6b02 	vstr	d6, [sp, #8]
    9dec:	ed8d 7b00 	vstr	d7, [sp]
    9df0:	f011 fce0 	bl	1b7b4 <snprintf>
  usb.send(s);
    9df4:	a907      	add	r1, sp, #28
    9df6:	482b      	ldr	r0, [pc, #172]	; (9ea4 <UMotorTest::estimateMotorParams()+0x12c>)
    9df8:	f002 fc08 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "# UMotorTest:: motor %d, R=%.4f Ohm, K=%.5f V/(rad/s) or Nm/A, L=%.5f Henry.\r\n",
    9dfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9dfe:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9e02:	a807      	add	r0, sp, #28
    9e04:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    9e08:	ed92 5a36 	vldr	s10, [r2, #216]	; 0xd8
    9e0c:	ed92 6a3a 	vldr	s12, [r2, #232]	; 0xe8
    9e10:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
    9e14:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9e18:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9e1c:	4a22      	ldr	r2, [pc, #136]	; (9ea8 <UMotorTest::estimateMotorParams()+0x130>)
    9e1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9e22:	ed8d 5b04 	vstr	d5, [sp, #16]
    9e26:	ed8d 6b02 	vstr	d6, [sp, #8]
    9e2a:	ed8d 7b00 	vstr	d7, [sp]
    9e2e:	f011 fcc1 	bl	1b7b4 <snprintf>
  usb.send(s);
    9e32:	a907      	add	r1, sp, #28
    9e34:	481b      	ldr	r0, [pc, #108]	; (9ea4 <UMotorTest::estimateMotorParams()+0x12c>)
    9e36:	f002 fbe9 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "# UMotorTest:: motor %d, friction: static=%g Nm, dynamic=%g Nm/(rad/sec).\r\n",
    9e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9e3c:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9e40:	a807      	add	r0, sp, #28
    9e42:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    9e46:	ed92 6a3e 	vldr	s12, [r2, #248]	; 0xf8
    9e4a:	ed92 7a42 	vldr	s14, [r2, #264]	; 0x108
    9e4e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9e52:	4a16      	ldr	r2, [pc, #88]	; (9eac <UMotorTest::estimateMotorParams()+0x134>)
    9e54:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9e58:	ed8d 6b02 	vstr	d6, [sp, #8]
    9e5c:	ed8d 7b00 	vstr	d7, [sp]
    9e60:	f011 fca8 	bl	1b7b4 <snprintf>
  usb.send(s);
    9e64:	a907      	add	r1, sp, #28
    9e66:	480f      	ldr	r0, [pc, #60]	; (9ea4 <UMotorTest::estimateMotorParams()+0x12c>)
    9e68:	f002 fbd0 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "# UMotorTest:: motor %d, inertia=%g kg m^2.\r\n",
    9e6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9e6e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9e72:	4a0f      	ldr	r2, [pc, #60]	; (9eb0 <UMotorTest::estimateMotorParams()+0x138>)
           testMotor, mInertia[testMotor]);
    9e74:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  snprintf(s, MSL, "# UMotorTest:: motor %d, inertia=%g kg m^2.\r\n",
    9e78:	a807      	add	r0, sp, #28
    9e7a:	ed94 7a46 	vldr	s14, [r4, #280]	; 0x118
    9e7e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9e82:	ed8d 7b00 	vstr	d7, [sp]
    9e86:	f011 fc95 	bl	1b7b4 <snprintf>
  usb.send(s);
    9e8a:	a907      	add	r1, sp, #28
    9e8c:	4805      	ldr	r0, [pc, #20]	; (9ea4 <UMotorTest::estimateMotorParams()+0x12c>)
    9e8e:	f002 fbbd 	bl	c60c <UUSB::send(char const*)>
}
    9e92:	b053      	add	sp, #332	; 0x14c
    9e94:	bd30      	pop	{r4, r5, pc}
    9e96:	4770      	bx	lr
    9e98:	3dcccccd 	.word	0x3dcccccd
    9e9c:	3a83126f 	.word	0x3a83126f
    9ea0:	20002ec4 	.word	0x20002ec4
    9ea4:	2000fac4 	.word	0x2000fac4
    9ea8:	20002f0c 	.word	0x20002f0c
    9eac:	20002f5c 	.word	0x20002f5c
    9eb0:	20002fa8 	.word	0x20002fa8

00009eb4 <UMotorTest::getMotorTestLog()>:


void UMotorTest::getMotorTestLog()
{
    9eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const int MSL = 200;
  char s[MSL];
  usb.send("% Motor test log\r\n");
    9eb8:	4971      	ldr	r1, [pc, #452]	; (a080 <UMotorTest::getMotorTestLog()+0x1cc>)
{
    9eba:	b0bf      	sub	sp, #252	; 0xfc
    9ebc:	4605      	mov	r5, r0
  usb.send("% Motor test log\r\n");
    9ebe:	4871      	ldr	r0, [pc, #452]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9ec0:	f002 fba4 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 1 time stamp (sec)\r\n");
    9ec4:	4970      	ldr	r1, [pc, #448]	; (a088 <UMotorTest::getMotorTestLog()+0x1d4>)
    9ec6:	486f      	ldr	r0, [pc, #444]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
  usb.send("% 14 estimated generated torque (Nm) after static friction\r\n");
  usb.send("% 15 estimated generated torque (Nm) after friction\r\n");
  usb.send("% 16 weight for J estimate\r\n");
  usb.send("% 17 estimated velocity\r\n");
  usb.send("% 18 motor index\r\n");
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9ec8:	2600      	movs	r6, #0
  usb.send("% 1 time stamp (sec)\r\n");
    9eca:	f002 fb9f 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 2 sample number\r\n");
    9ece:	496f      	ldr	r1, [pc, #444]	; (a08c <UMotorTest::getMotorTestLog()+0x1d8>)
    9ed0:	486c      	ldr	r0, [pc, #432]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9ed2:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
    9ed6:	f002 fb99 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 3 motor voltage (V)\r\n");
    9eda:	496d      	ldr	r1, [pc, #436]	; (a090 <UMotorTest::getMotorTestLog()+0x1dc>)
    9edc:	4869      	ldr	r0, [pc, #420]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9ede:	f002 fb95 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 4 motor current (Amps)\r\n");
    9ee2:	496c      	ldr	r1, [pc, #432]	; (a094 <UMotorTest::getMotorTestLog()+0x1e0>)
    9ee4:	4867      	ldr	r0, [pc, #412]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9ee6:	f002 fb91 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 5 encoder position (ticks)\r\n");
    9eea:	496b      	ldr	r1, [pc, #428]	; (a098 <UMotorTest::getMotorTestLog()+0x1e4>)
    9eec:	4865      	ldr	r0, [pc, #404]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9eee:	f002 fb8d 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 6 velocity (rad/s)\r\n");
    9ef2:	496a      	ldr	r1, [pc, #424]	; (a09c <UMotorTest::getMotorTestLog()+0x1e8>)
    9ef4:	4863      	ldr	r0, [pc, #396]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9ef6:	f002 fb89 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 7 Battery voltage (Volt)\r\n");
    9efa:	4969      	ldr	r1, [pc, #420]	; (a0a0 <UMotorTest::getMotorTestLog()+0x1ec>)
    9efc:	4861      	ldr	r0, [pc, #388]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9efe:	f002 fb85 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 8 System current (Amps)\r\n");
    9f02:	4968      	ldr	r1, [pc, #416]	; (a0a4 <UMotorTest::getMotorTestLog()+0x1f0>)
    9f04:	485f      	ldr	r0, [pc, #380]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f06:	f002 fb81 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 9 sample time (ms)\r\n");
    9f0a:	4967      	ldr	r1, [pc, #412]	; (a0a8 <UMotorTest::getMotorTestLog()+0x1f4>)
    9f0c:	485d      	ldr	r0, [pc, #372]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f0e:	f002 fb7d 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 10 Vm - Vemf\r\n");
    9f12:	4966      	ldr	r1, [pc, #408]	; (a0ac <UMotorTest::getMotorTestLog()+0x1f8>)
    9f14:	485b      	ldr	r0, [pc, #364]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f16:	f002 fb79 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 11 estmated current\r\n");
    9f1a:	4965      	ldr	r1, [pc, #404]	; (a0b0 <UMotorTest::getMotorTestLog()+0x1fc>)
    9f1c:	4859      	ldr	r0, [pc, #356]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f1e:	f002 fb75 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 12 Weight for R and L estimate\r\n");
    9f22:	4964      	ldr	r1, [pc, #400]	; (a0b4 <UMotorTest::getMotorTestLog()+0x200>)
    9f24:	4857      	ldr	r0, [pc, #348]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f26:	f002 fb71 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 13 estimated generated torque (Nm)\r\n");
    9f2a:	4963      	ldr	r1, [pc, #396]	; (a0b8 <UMotorTest::getMotorTestLog()+0x204>)
    9f2c:	4855      	ldr	r0, [pc, #340]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f2e:	f002 fb6d 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 14 estimated generated torque (Nm) after static friction\r\n");
    9f32:	4962      	ldr	r1, [pc, #392]	; (a0bc <UMotorTest::getMotorTestLog()+0x208>)
    9f34:	4853      	ldr	r0, [pc, #332]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f36:	f002 fb69 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 15 estimated generated torque (Nm) after friction\r\n");
    9f3a:	4961      	ldr	r1, [pc, #388]	; (a0c0 <UMotorTest::getMotorTestLog()+0x20c>)
    9f3c:	4851      	ldr	r0, [pc, #324]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f3e:	f002 fb65 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 16 weight for J estimate\r\n");
    9f42:	4960      	ldr	r1, [pc, #384]	; (a0c4 <UMotorTest::getMotorTestLog()+0x210>)
    9f44:	484f      	ldr	r0, [pc, #316]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f46:	f002 fb61 	bl	c60c <UUSB::send(char const*)>
  {
    snprintf(s, MSL, "%% M=%d,  Km = %g, Ra = %g, B = %g, S = %g, J = %g, L = %g\r\n",
    9f4a:	f8df 8198 	ldr.w	r8, [pc, #408]	; a0e4 <UMotorTest::getMotorTestLog()+0x230>
  usb.send("% 17 estimated velocity\r\n");
    9f4e:	495e      	ldr	r1, [pc, #376]	; (a0c8 <UMotorTest::getMotorTestLog()+0x214>)
    9f50:	484c      	ldr	r0, [pc, #304]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
            i, mKonstant[i], mResistance[i], mFricDyn[i], mFricStat[i], mInertia[i], mInductance[i]);
    usb.send(s);
    9f52:	4f4c      	ldr	r7, [pc, #304]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
  usb.send("% 17 estimated velocity\r\n");
    9f54:	f002 fb5a 	bl	c60c <UUSB::send(char const*)>
  usb.send("% 18 motor index\r\n");
    9f58:	495c      	ldr	r1, [pc, #368]	; (a0cc <UMotorTest::getMotorTestLog()+0x218>)
    9f5a:	484a      	ldr	r0, [pc, #296]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    9f5c:	f002 fb56 	bl	c60c <UUSB::send(char const*)>
    snprintf(s, MSL, "%% M=%d,  Km = %g, Ra = %g, B = %g, S = %g, J = %g, L = %g\r\n",
    9f60:	ed94 7a04 	vldr	s14, [r4, #16]
    9f64:	3404      	adds	r4, #4
    9f66:	ed14 5a01 	vldr	s10, [r4, #-4]
    9f6a:	21c8      	movs	r1, #200	; 0xc8
    9f6c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9f70:	ed94 6a07 	vldr	s12, [r4, #28]
    9f74:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9f78:	4633      	mov	r3, r6
    9f7a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9f7e:	4642      	mov	r2, r8
    9f80:	a80c      	add	r0, sp, #48	; 0x30
    9f82:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    9f86:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
    9f8a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9f8e:	ed8d 7b08 	vstr	d7, [sp, #32]
    9f92:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    9f96:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9f9a:	ed8d 7b06 	vstr	d7, [sp, #24]
    9f9e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    9fa2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9fa6:	ed8d 5b02 	vstr	d5, [sp, #8]
    9faa:	ed8d 6b00 	vstr	d6, [sp]
    9fae:	ed8d 7b04 	vstr	d7, [sp, #16]
    9fb2:	f011 fbff 	bl	1b7b4 <snprintf>
    usb.send(s);
    9fb6:	a90c      	add	r1, sp, #48	; 0x30
    9fb8:	4638      	mov	r0, r7
    9fba:	f002 fb27 	bl	c60c <UUSB::send(char const*)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9fbe:	2e00      	cmp	r6, #0
    9fc0:	d05c      	beq.n	a07c <UMotorTest::getMotorTestLog()+0x1c8>
  }
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9fc2:	2600      	movs	r6, #0
  {
    snprintf(s, MSL, "%% M=%d, enc0 = %lu, encEnd = %lu\n", i, mLog[0].mEncoder, mLog[mLogIndex-1].mEncoder);
    9fc4:	f8df 9120 	ldr.w	r9, [pc, #288]	; a0e8 <UMotorTest::getMotorTestLog()+0x234>
    usb.send(s);
    9fc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a084 <UMotorTest::getMotorTestLog()+0x1d0>
    snprintf(s, MSL, "%% M=%d, enc0 = %lu, encEnd = %lu\n", i, mLog[0].mEncoder, mLog[mLogIndex-1].mEncoder);
    9fcc:	69ac      	ldr	r4, [r5, #24]
    9fce:	21c8      	movs	r1, #200	; 0xc8
    9fd0:	6caf      	ldr	r7, [r5, #72]	; 0x48
    9fd2:	4633      	mov	r3, r6
    9fd4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    9fd8:	464a      	mov	r2, r9
    9fda:	a80c      	add	r0, sp, #48	; 0x30
    9fdc:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    9fe0:	f854 4c38 	ldr.w	r4, [r4, #-56]
    9fe4:	9401      	str	r4, [sp, #4]
    9fe6:	68fc      	ldr	r4, [r7, #12]
    9fe8:	9400      	str	r4, [sp, #0]
    9fea:	f011 fbe3 	bl	1b7b4 <snprintf>
    usb.send(s);
    9fee:	a90c      	add	r1, sp, #48	; 0x30
    9ff0:	4640      	mov	r0, r8
    9ff2:	f002 fb0b 	bl	c60c <UUSB::send(char const*)>
  for (int i = 0; i < motor.MOTOR_CNT; i++)
    9ff6:	2e00      	cmp	r6, #0
    9ff8:	d03e      	beq.n	a078 <UMotorTest::getMotorTestLog()+0x1c4>
  }
  snprintf(s, MSL, "%% Time = %lu ms, Time End = %lu ms\n", mLog[0].mTime10us / 100, mLog[mLogIndex-1].mTime10us / 100);
    9ffa:	69a9      	ldr	r1, [r5, #24]
    9ffc:	6caa      	ldr	r2, [r5, #72]	; 0x48
    9ffe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    a002:	6813      	ldr	r3, [r2, #0]
    a004:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    a008:	4931      	ldr	r1, [pc, #196]	; (a0d0 <UMotorTest::getMotorTestLog()+0x21c>)
    a00a:	f852 2c44 	ldr.w	r2, [r2, #-68]
    a00e:	fba1 0202 	umull	r0, r2, r1, r2
    a012:	a80c      	add	r0, sp, #48	; 0x30
    a014:	fba1 1303 	umull	r1, r3, r1, r3
    a018:	21c8      	movs	r1, #200	; 0xc8
    a01a:	0952      	lsrs	r2, r2, #5
    a01c:	095b      	lsrs	r3, r3, #5
    a01e:	9200      	str	r2, [sp, #0]
    a020:	4a2c      	ldr	r2, [pc, #176]	; (a0d4 <UMotorTest::getMotorTestLog()+0x220>)
    a022:	f011 fbc7 	bl	1b7b4 <snprintf>
  usb.send(s);
    a026:	a90c      	add	r1, sp, #48	; 0x30
    a028:	4816      	ldr	r0, [pc, #88]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    a02a:	f002 faef 	bl	c60c <UUSB::send(char const*)>
  snprintf(s, MSL, "%% Pulses per revolution=%d\n", encoder.pulsPerRev);
    a02e:	4b2a      	ldr	r3, [pc, #168]	; (a0d8 <UMotorTest::getMotorTestLog()+0x224>)
    a030:	4a2a      	ldr	r2, [pc, #168]	; (a0dc <UMotorTest::getMotorTestLog()+0x228>)
    a032:	21c8      	movs	r1, #200	; 0xc8
    a034:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
    a038:	a80c      	add	r0, sp, #48	; 0x30
    a03a:	f011 fbbb 	bl	1b7b4 <snprintf>
  usb.send(s);
    a03e:	a90c      	add	r1, sp, #48	; 0x30
    a040:	4810      	ldr	r0, [pc, #64]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    a042:	f002 fae3 	bl	c60c <UUSB::send(char const*)>
  if (mLogIndex == 0 or mLog == nullptr)
    a046:	69ab      	ldr	r3, [r5, #24]
    a048:	b17b      	cbz	r3, a06a <UMotorTest::getMotorTestLog()+0x1b6>
    a04a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    a04c:	b16b      	cbz	r3, a06a <UMotorTest::getMotorTestLog()+0x1b6>
  }
  else
  {
    motorTestGetIndex = 0;
    motorTestGetLog = true;
    logStartTime = mLog[0].mTime10us;
    a04e:	6819      	ldr	r1, [r3, #0]
    motorTestGetIndex = 0;
    a050:	2200      	movs	r2, #0
    valL = 0;
    a052:	2300      	movs	r3, #0
    motorTestGetLog = true;
    a054:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
    logStartTime = mLog[0].mTime10us;
    a058:	62e9      	str	r1, [r5, #44]	; 0x2c
    valL = 0;
    a05a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
    motorTestGetIndex = 0;
    a05e:	656a      	str	r2, [r5, #84]	; 0x54
    valR = 0;
    a060:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
  }
}
    a064:	b03f      	add	sp, #252	; 0xfc
    a066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    usb.send("%\n% Log empty\n");
    a06a:	491d      	ldr	r1, [pc, #116]	; (a0e0 <UMotorTest::getMotorTestLog()+0x22c>)
    a06c:	4805      	ldr	r0, [pc, #20]	; (a084 <UMotorTest::getMotorTestLog()+0x1d0>)
    a06e:	f002 facd 	bl	c60c <UUSB::send(char const*)>
}
    a072:	b03f      	add	sp, #252	; 0xfc
    a074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a078:	2601      	movs	r6, #1
    a07a:	e7a7      	b.n	9fcc <UMotorTest::getMotorTestLog()+0x118>
    a07c:	2601      	movs	r6, #1
    a07e:	e76f      	b.n	9f60 <UMotorTest::getMotorTestLog()+0xac>
    a080:	20002bc8 	.word	0x20002bc8
    a084:	2000fac4 	.word	0x2000fac4
    a088:	20002bdc 	.word	0x20002bdc
    a08c:	20002bf4 	.word	0x20002bf4
    a090:	20002c08 	.word	0x20002c08
    a094:	20002c20 	.word	0x20002c20
    a098:	20002c3c 	.word	0x20002c3c
    a09c:	20002c5c 	.word	0x20002c5c
    a0a0:	20002c74 	.word	0x20002c74
    a0a4:	20002c94 	.word	0x20002c94
    a0a8:	20002cb0 	.word	0x20002cb0
    a0ac:	20002cc8 	.word	0x20002cc8
    a0b0:	20002cdc 	.word	0x20002cdc
    a0b4:	20002cf4 	.word	0x20002cf4
    a0b8:	20002d18 	.word	0x20002d18
    a0bc:	20002d40 	.word	0x20002d40
    a0c0:	20002d80 	.word	0x20002d80
    a0c4:	20002db8 	.word	0x20002db8
    a0c8:	20002dd8 	.word	0x20002dd8
    a0cc:	20002df4 	.word	0x20002df4
    a0d0:	51eb851f 	.word	0x51eb851f
    a0d4:	20002e6c 	.word	0x20002e6c
    a0d8:	2000ec40 	.word	0x2000ec40
    a0dc:	20002e94 	.word	0x20002e94
    a0e0:	20002eb4 	.word	0x20002eb4
    a0e4:	20002e08 	.word	0x20002e08
    a0e8:	20002e48 	.word	0x20002e48
    a0ec:	00000000 	.word	0x00000000

0000a0f0 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)>:

void UMotorTest::send(UMotorTestMeasurementData * d, int j, uint32_t logStart)
{
  const int MSL = 400;
  char s[MSL];
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a0f0:	ed91 6a10 	vldr	s12, [r1, #64]	; 0x40
            float(d->mTime10us - logStart) / 100000.0, j,
            d->mVoltage, d->mCurrent, int32_t(d->mEncoder), d->velocity,
            d->batVolt, d->sysCurrent,
            d->e_dt*1000, d->e_dif, d->e_current, d->weightCurrent, d->e_tau0, d->e_tau1, d->e_tau2, d->weightInertia, d->e_vel, testMotor);
    a0f4:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a0f8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
            d->e_dt*1000, d->e_dif, d->e_current, d->weightCurrent, d->e_tau0, d->e_tau1, d->e_tau2, d->weightInertia, d->e_vel, testMotor);
    a0fc:	eddf 7a3e 	vldr	s15, [pc, #248]	; a1f8 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x108>
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a100:	ed91 0a0b 	vldr	s0, [r1, #44]	; 0x2c
            d->e_dt*1000, d->e_dif, d->e_current, d->weightCurrent, d->e_tau0, d->e_tau1, d->e_tau2, d->weightInertia, d->e_vel, testMotor);
    a104:	ee27 7a27 	vmul.f32	s14, s14, s15
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a108:	ed91 1a06 	vldr	s2, [r1, #24]
    a10c:	ed91 3a05 	vldr	s6, [r1, #20]
    a110:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    a114:	ed91 4a04 	vldr	s8, [r1, #16]
    a118:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    a11c:	ed91 5a02 	vldr	s10, [r1, #8]
    a120:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    a124:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    a128:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    a12c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    a130:	b510      	push	{r4, lr}
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a132:	6a84      	ldr	r4, [r0, #40]	; 0x28
    a134:	68c8      	ldr	r0, [r1, #12]
{
    a136:	ed2d 8b0c 	vpush	{d8-d13}
    a13a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a13e:	ed91 da08 	vldr	s26, [r1, #32]
    a142:	ed91 ca0f 	vldr	s24, [r1, #60]	; 0x3c
    a146:	ed91 ba0e 	vldr	s22, [r1, #56]	; 0x38
    a14a:	eeb7 dacd 	vcvt.f64.f32	d13, s26
    a14e:	ed91 aa0d 	vldr	s20, [r1, #52]	; 0x34
    a152:	eeb7 cacc 	vcvt.f64.f32	d12, s24
    a156:	ed91 9a07 	vldr	s18, [r1, #28]
    a15a:	eeb7 bacb 	vcvt.f64.f32	d11, s22
    a15e:	ed91 8a0c 	vldr	s16, [r1, #48]	; 0x30
    a162:	eeb7 aaca 	vcvt.f64.f32	d10, s20
    a166:	9422      	str	r4, [sp, #136]	; 0x88
    a168:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
    a16c:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    a170:	ed8d 6b20 	vstr	d6, [sp, #128]	; 0x80
    a174:	ed91 6a01 	vldr	s12, [r1, #4]
    a178:	9008      	str	r0, [sp, #32]
    a17a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a17e:	ed8d 0b12 	vstr	d0, [sp, #72]	; 0x48
    a182:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    a186:	ed8d 1b0e 	vstr	d1, [sp, #56]	; 0x38
    a18a:	ed8d 3b0c 	vstr	d3, [sp, #48]	; 0x30
    a18e:	ed8d 4b0a 	vstr	d4, [sp, #40]	; 0x28
    a192:	ed8d db1e 	vstr	d13, [sp, #120]	; 0x78
    a196:	ed8d cb1c 	vstr	d12, [sp, #112]	; 0x70
    a19a:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
    a19e:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
    a1a2:	ed8d 9b16 	vstr	d9, [sp, #88]	; 0x58
    a1a6:	ed8d 8b14 	vstr	d8, [sp, #80]	; 0x50
    a1aa:	ed8d 5b06 	vstr	d5, [sp, #24]
    a1ae:	ed8d 6b04 	vstr	d6, [sp, #16]
    a1b2:	9202      	str	r2, [sp, #8]
            float(d->mTime10us - logStart) / 100000.0, j,
    a1b4:	6808      	ldr	r0, [r1, #0]
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a1b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
    a1ba:	4a10      	ldr	r2, [pc, #64]	; (a1fc <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x10c>)
            float(d->mTime10us - logStart) / 100000.0, j,
    a1bc:	1ac3      	subs	r3, r0, r3
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a1be:	a824      	add	r0, sp, #144	; 0x90
            float(d->mTime10us - logStart) / 100000.0, j,
    a1c0:	ee07 3a10 	vmov	s14, r3
    a1c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a1c8:	ed9f 2b09 	vldr	d2, [pc, #36]	; a1f0 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x100>
            float(d->mTime10us - logStart) / 100000.0, j,
    a1cc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  snprintf(s, MSL, "%.5f %d  %.1f %.3f %ld %.1f %.2f %.3f %g %g %g %.3f %g %g %g %.3f %g %d\n",
    a1d0:	ee87 6b02 	vdiv.f64	d6, d7, d2
    a1d4:	ed8d 6b00 	vstr	d6, [sp]
    a1d8:	f011 faec 	bl	1b7b4 <snprintf>
  usb.send(s);
    a1dc:	a924      	add	r1, sp, #144	; 0x90
    a1de:	4808      	ldr	r0, [pc, #32]	; (a200 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)+0x110>)
    a1e0:	f002 fa14 	bl	c60c <UUSB::send(char const*)>
}
    a1e4:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
    a1e8:	ecbd 8b0c 	vpop	{d8-d13}
    a1ec:	bd10      	pop	{r4, pc}
    a1ee:	bf00      	nop
    a1f0:	00000000 	.word	0x00000000
    a1f4:	40f86a00 	.word	0x40f86a00
    a1f8:	447a0000 	.word	0x447a0000
    a1fc:	20002ffc 	.word	0x20002ffc
    a200:	2000fac4 	.word	0x2000fac4

0000a204 <UMotorTest::tick()>:
{ //
    a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (mLogIndex == 0 and motorTestRunning)
    a206:	6985      	ldr	r5, [r0, #24]
{ //
    a208:	4604      	mov	r4, r0
  if (mLogIndex == 0 and motorTestRunning)
    a20a:	2d00      	cmp	r5, #0
    a20c:	d141      	bne.n	a292 <UMotorTest::tick()+0x8e>
    a20e:	7d03      	ldrb	r3, [r0, #20]
    a210:	b99b      	cbnz	r3, a23a <UMotorTest::tick()+0x36>
  else if (motorTestGetLog)
    a212:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    a216:	b163      	cbz	r3, a232 <UMotorTest::tick()+0x2e>
    if (motorTestGetIndex >= (mLogIndex - 35))
    a218:	69a3      	ldr	r3, [r4, #24]
    a21a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    a21c:	3b23      	subs	r3, #35	; 0x23
    a21e:	429a      	cmp	r2, r3
    a220:	f2c0 80bf 	blt.w	a3a2 <UMotorTest::tick()+0x19e>
      motorTestGetLog = false;
    a224:	2300      	movs	r3, #0
      usb.send("logend\n");
    a226:	4990      	ldr	r1, [pc, #576]	; (a468 <UMotorTest::tick()+0x264>)
    a228:	4890      	ldr	r0, [pc, #576]	; (a46c <UMotorTest::tick()+0x268>)
      motorTestGetLog = false;
    a22a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      usb.send("logend\n");
    a22e:	f002 f9ed 	bl	c60c <UUSB::send(char const*)>
  tickCnt++;
    a232:	6a23      	ldr	r3, [r4, #32]
    a234:	3301      	adds	r3, #1
    a236:	6223      	str	r3, [r4, #32]
}
    a238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    logger.stopLogging();
    a23a:	4f8d      	ldr	r7, [pc, #564]	; (a470 <UMotorTest::tick()+0x26c>)
}

void UMotorTest::clear(UMotorTestMeasurementData * d)
{
  d->mTime10us = 0;
  d->mVoltage = 0;
    a23c:	2600      	movs	r6, #0
    logger.stopLogging();
    a23e:	4638      	mov	r0, r7
    a240:	f7fc ff52 	bl	70e8 <ULog::stopLogging()>
    mLog = (UMotorTestMeasurementData *)logger.logBuffer;
    a244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    logger.logRowCnt = 0;
    a246:	617d      	str	r5, [r7, #20]
    motor.motorSetEnable(1,1);
    a248:	2201      	movs	r2, #1
    mLog = (UMotorTestMeasurementData *)logger.logBuffer;
    a24a:	64a3      	str	r3, [r4, #72]	; 0x48
    motor.motorSetEnable(1,1);
    a24c:	4f89      	ldr	r7, [pc, #548]	; (a474 <UMotorTest::tick()+0x270>)
    a24e:	4611      	mov	r1, r2
  d->mTime10us = 0;
    a250:	601d      	str	r5, [r3, #0]
  d->mVoltage = 0;
    a252:	605e      	str	r6, [r3, #4]
    motor.motorSetEnable(1,1);
    a254:	4638      	mov	r0, r7
  d->mCurrent = 0;
    a256:	609e      	str	r6, [r3, #8]
  d->mEncoder = 0;
    a258:	60dd      	str	r5, [r3, #12]
  d->velocity = 0;
    a25a:	611e      	str	r6, [r3, #16]
  d->batVolt = 0;
    a25c:	615e      	str	r6, [r3, #20]
  d->sysCurrent = 0;
    a25e:	619e      	str	r6, [r3, #24]
  d->e_dt = 0;
    a260:	625e      	str	r6, [r3, #36]	; 0x24
  d->e_denc = 0;
    a262:	629d      	str	r5, [r3, #40]	; 0x28
  d->e_dif = 0; // Voltage - emf
    a264:	62de      	str	r6, [r3, #44]	; 0x2c
  d->e_current = 0; // estimated current
    a266:	631e      	str	r6, [r3, #48]	; 0x30
  d->e_tau0 = 0; // generated
    a268:	635e      	str	r6, [r3, #52]	; 0x34
  d->e_tau1 = 0; // after static friction
    a26a:	639e      	str	r6, [r3, #56]	; 0x38
  d->e_tau2 = 0; // after dyn friction
    a26c:	63de      	str	r6, [r3, #60]	; 0x3c
  d->e_vel = 0;  // estimate velocity
    a26e:	641e      	str	r6, [r3, #64]	; 0x40
    mLogIndexMax = LOG_BUFFER_MAX / sizeof(UMotorTestMeasurementData) - 1;
    a270:	f640 635b 	movw	r3, #3675	; 0xe5b
    motorTestEnd = false;
    a274:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    mLogIndexMax = LOG_BUFFER_MAX / sizeof(UMotorTestMeasurementData) - 1;
    a278:	64e3      	str	r3, [r4, #76]	; 0x4c
    tickCnt = 0;
    a27a:	6225      	str	r5, [r4, #32]
    testState = MS_OFFSET;
    a27c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    motor.motorSetEnable(1,1);
    a280:	f7fe faa4 	bl	87cc <UMotor::motorSetEnable(bool, bool)>
      encoderStart[i] = encoder.encoder[i];
    a284:	4b7c      	ldr	r3, [pc, #496]	; (a478 <UMotorTest::tick()+0x274>)
      motor.motorVoltage[i] = 0;
    a286:	61be      	str	r6, [r7, #24]
      encoderStart[i] = encoder.encoder[i];
    a288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      motor.motorVoltage[i] = 0;
    a28a:	61fe      	str	r6, [r7, #28]
      encoderStart[i] = encoder.encoder[i];
    a28c:	6322      	str	r2, [r4, #48]	; 0x30
    a28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a290:	6363      	str	r3, [r4, #52]	; 0x34
  if (motorTestRunning)
    a292:	7d23      	ldrb	r3, [r4, #20]
    a294:	2b00      	cmp	r3, #0
    a296:	d0bc      	beq.n	a212 <UMotorTest::tick()+0xe>
    if (testState == MS_OFFSET)
    a298:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    a29c:	b913      	cbnz	r3, a2a4 <UMotorTest::tick()+0xa0>
      testState = MS_OFF;
    a29e:	2301      	movs	r3, #1
    a2a0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (mLogIndex < mLogIndexMax and mLog != nullptr)
    a2a4:	69a3      	ldr	r3, [r4, #24]
    a2a6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    a2a8:	4293      	cmp	r3, r2
    a2aa:	da54      	bge.n	a356 <UMotorTest::tick()+0x152>
    a2ac:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    a2ae:	2e00      	cmp	r6, #0
    a2b0:	d051      	beq.n	a356 <UMotorTest::tick()+0x152>
      mLog[mLogIndex].mTime10us = micros();
    a2b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    a2b6:	009d      	lsls	r5, r3, #2
    a2b8:	f00b fe76 	bl	15fa8 <micros>
      mLog[mLogIndex].mCurrent  = current.motorCurrentA[testMotor];
    a2bc:	69a3      	ldr	r3, [r4, #24]
    a2be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a2c0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
      mLog[mLogIndex].mTime10us = micros();
    a2c4:	5170      	str	r0, [r6, r5]
      mLog[mLogIndex].mCurrent  = current.motorCurrentA[testMotor];
    a2c6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    a2c8:	486c      	ldr	r0, [pc, #432]	; (a47c <UMotorTest::tick()+0x278>)
    a2ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    a2ce:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    a2d2:	695b      	ldr	r3, [r3, #20]
    a2d4:	60ab      	str	r3, [r5, #8]
      mLog[mLogIndex].mVoltage = motor.motorVoltage[testMotor];
    a2d6:	4b67      	ldr	r3, [pc, #412]	; (a474 <UMotorTest::tick()+0x270>)
    a2d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a2dc:	699b      	ldr	r3, [r3, #24]
    a2de:	606b      	str	r3, [r5, #4]
      mLog[mLogIndex].mEncoder = encoder.encoder[testMotor];
    a2e0:	4b65      	ldr	r3, [pc, #404]	; (a478 <UMotorTest::tick()+0x274>)
    a2e2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    a2e6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
      mLog[mLogIndex].velocity = encoder.motorVelocity[testMotor];
    a2e8:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
      mLog[mLogIndex].mEncoder = encoder.encoder[testMotor];
    a2ec:	60ea      	str	r2, [r5, #12]
      mLog[mLogIndex].velocity = encoder.motorVelocity[testMotor];
    a2ee:	612b      	str	r3, [r5, #16]
      mLog[mLogIndex].sysCurrent = current.getSupplyCurrent();
    a2f0:	f7f8 fb64 	bl	29bc <UCurrent::getSupplyCurrent()>
      mLog[mLogIndex].batVolt = robot.batteryVoltage;
    a2f4:	69a3      	ldr	r3, [r4, #24]
    a2f6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    a2f8:	eb03 1003 	add.w	r0, r3, r3, lsl #4
    a2fc:	4a60      	ldr	r2, [pc, #384]	; (a480 <UMotorTest::tick()+0x27c>)
      mLog[mLogIndex].sysCurrent = current.getSupplyCurrent();
    a2fe:	ed85 0a06 	vstr	s0, [r5, #24]
      mLogIndex++;
    a302:	3301      	adds	r3, #1
      mLog[mLogIndex].batVolt = robot.batteryVoltage;
    a304:	0081      	lsls	r1, r0, #2
    a306:	6955      	ldr	r5, [r2, #20]
    a308:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  d->mVoltage = 0;
    a30c:	2200      	movs	r2, #0
      clear(&mLog[mLogIndex]);
    a30e:	3144      	adds	r1, #68	; 0x44
      mLog[mLogIndex].batVolt = robot.batteryVoltage;
    a310:	6145      	str	r5, [r0, #20]
  d->mTime10us = 0;
    a312:	2000      	movs	r0, #0
      mLogIndex++;
    a314:	61a3      	str	r3, [r4, #24]
      clear(&mLog[mLogIndex]);
    a316:	1873      	adds	r3, r6, r1
  d->mTime10us = 0;
    a318:	5070      	str	r0, [r6, r1]
  d->mVoltage = 0;
    a31a:	605a      	str	r2, [r3, #4]
  d->mCurrent = 0;
    a31c:	609a      	str	r2, [r3, #8]
  d->velocity = 0;
    a31e:	611a      	str	r2, [r3, #16]
  d->batVolt = 0;
    a320:	615a      	str	r2, [r3, #20]
  d->sysCurrent = 0;
    a322:	619a      	str	r2, [r3, #24]
  d->e_dt = 0;
    a324:	625a      	str	r2, [r3, #36]	; 0x24
  d->e_dif = 0; // Voltage - emf
    a326:	62da      	str	r2, [r3, #44]	; 0x2c
  d->e_current = 0; // estimated current
    a328:	631a      	str	r2, [r3, #48]	; 0x30
  d->e_tau0 = 0; // generated
    a32a:	635a      	str	r2, [r3, #52]	; 0x34
  d->e_tau1 = 0; // after static friction
    a32c:	639a      	str	r2, [r3, #56]	; 0x38
  d->e_tau2 = 0; // after dyn friction
    a32e:	63da      	str	r2, [r3, #60]	; 0x3c
  d->e_vel = 0;  // estimate velocity
    a330:	641a      	str	r2, [r3, #64]	; 0x40
  d->mEncoder = 0;
    a332:	60d8      	str	r0, [r3, #12]
    if (tickCnt > stateLength or (testState == MS_OFF and tickCnt > 120))
    a334:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  d->e_denc = 0;
    a336:	6298      	str	r0, [r3, #40]	; 0x28
    if (tickCnt > stateLength or (testState == MS_OFF and tickCnt > 120))
    a338:	6a23      	ldr	r3, [r4, #32]
    a33a:	4293      	cmp	r3, r2
    a33c:	dd16      	ble.n	a36c <UMotorTest::tick()+0x168>
      switch (testState)
    a33e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
      tickCnt = 0;
    a342:	2200      	movs	r2, #0
      switch (testState)
    a344:	3b01      	subs	r3, #1
      tickCnt = 0;
    a346:	6222      	str	r2, [r4, #32]
      switch (testState)
    a348:	2b03      	cmp	r3, #3
    a34a:	f200 8086 	bhi.w	a45a <UMotorTest::tick()+0x256>
    a34e:	e8df f003 	tbb	[pc, r3]
    a352:	556f      	.short	0x556f
    a354:	3847      	.short	0x3847
      motorTestEnd = true;
    a356:	2301      	movs	r3, #1
      usb.send("# motor test log is full (or no buffer)\n");
    a358:	494a      	ldr	r1, [pc, #296]	; (a484 <UMotorTest::tick()+0x280>)
    a35a:	4844      	ldr	r0, [pc, #272]	; (a46c <UMotorTest::tick()+0x268>)
      motorTestEnd = true;
    a35c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      usb.send("# motor test log is full (or no buffer)\n");
    a360:	f002 f954 	bl	c60c <UUSB::send(char const*)>
    if (tickCnt > stateLength or (testState == MS_OFF and tickCnt > 120))
    a364:	6a23      	ldr	r3, [r4, #32]
    a366:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    a368:	4293      	cmp	r3, r2
    a36a:	dce8      	bgt.n	a33e <UMotorTest::tick()+0x13a>
    a36c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
    a370:	2a01      	cmp	r2, #1
    a372:	d101      	bne.n	a378 <UMotorTest::tick()+0x174>
    a374:	2b78      	cmp	r3, #120	; 0x78
    a376:	dc59      	bgt.n	a42c <UMotorTest::tick()+0x228>
    if (motorTestEnd)
    a378:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    a37c:	2b00      	cmp	r3, #0
    a37e:	f43f af58 	beq.w	a232 <UMotorTest::tick()+0x2e>
      motor.motorVoltage[0] = 0;
    a382:	2300      	movs	r3, #0
      motorTestRunning = false;
    a384:	2200      	movs	r2, #0
      motor.motorVoltage[0] = 0;
    a386:	483b      	ldr	r0, [pc, #236]	; (a474 <UMotorTest::tick()+0x270>)
      motorTestRunning = false;
    a388:	7522      	strb	r2, [r4, #20]
      motor.motorSetEnable(0,0);
    a38a:	4611      	mov	r1, r2
      motor.motorVoltage[0] = 0;
    a38c:	6183      	str	r3, [r0, #24]
      motor.motorVoltage[1] = 0;
    a38e:	61c3      	str	r3, [r0, #28]
      motor.motorSetEnable(0,0);
    a390:	f7fe fa1c 	bl	87cc <UMotor::motorSetEnable(bool, bool)>
      estimateMotorParams();
    a394:	4620      	mov	r0, r4
    a396:	f7ff fcef 	bl	9d78 <UMotorTest::estimateMotorParams()>
  tickCnt++;
    a39a:	6a23      	ldr	r3, [r4, #32]
    a39c:	3301      	adds	r3, #1
    a39e:	6223      	str	r3, [r4, #32]
}
    a3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    send(&mLog[motorTestGetIndex], motorTestGetIndex, logStartTime);
    a3a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a3a4:	eb02 1102 	add.w	r1, r2, r2, lsl #4
    a3a8:	4620      	mov	r0, r4
    a3aa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a3ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a3b0:	f7ff fe9e 	bl	a0f0 <UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)>
      motorTestGetIndex++;
    a3b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a3b6:	3301      	adds	r3, #1
    a3b8:	6563      	str	r3, [r4, #84]	; 0x54
  tickCnt++;
    a3ba:	6a23      	ldr	r3, [r4, #32]
    a3bc:	3301      	adds	r3, #1
    a3be:	6223      	str	r3, [r4, #32]
}
    a3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          rightTestIndex[5] = mLogIndex - 1; // end of high
    a3c2:	69a2      	ldr	r2, [r4, #24]
          testState = MS_ROLL_OFF;
    a3c4:	2005      	movs	r0, #5
          motor.motorVoltage[0 + testMotor] = 0;
    a3c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          rightTestIndex[5] = mLogIndex - 1; // end of high
    a3c8:	3a01      	subs	r2, #1
          motor.motorVoltage[0 + testMotor] = 0;
    a3ca:	4b2a      	ldr	r3, [pc, #168]	; (a474 <UMotorTest::tick()+0x270>)
          testState = MS_ROLL_OFF;
    a3cc:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          rightTestIndex[5] = mLogIndex - 1; // end of high
    a3d0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
          motor.motorVoltage[0 + testMotor] = 0;
    a3d4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a3d8:	2200      	movs	r2, #0
    a3da:	6182      	str	r2, [r0, #24]
          motor.motorVoltage[1 + testMotor] = 0;
    a3dc:	61c2      	str	r2, [r0, #28]
          break;
    a3de:	e7cb      	b.n	a378 <UMotorTest::tick()+0x174>
          leftTestIndex[5] = mLogIndex - 1; // end of low
    a3e0:	69a2      	ldr	r2, [r4, #24]
          testState = MS_LEND;
    a3e2:	2004      	movs	r0, #4
          motor.motorVoltage[testMotor] = 0;
    a3e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    a3e6:	4b23      	ldr	r3, [pc, #140]	; (a474 <UMotorTest::tick()+0x270>)
          leftTestIndex[5] = mLogIndex - 1; // end of low
    a3e8:	3a01      	subs	r2, #1
          testState = MS_LEND;
    a3ea:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          motor.motorVoltage[testMotor] = 0;
    a3ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    a3f2:	2100      	movs	r1, #0
          leftTestIndex[5] = mLogIndex - 1; // end of low
    a3f4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          motor.motorVoltage[testMotor] = 0;
    a3f8:	6199      	str	r1, [r3, #24]
          break;
    a3fa:	e7bd      	b.n	a378 <UMotorTest::tick()+0x174>
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a3fc:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
          testState = MS_LHIGH;
    a400:	2003      	movs	r0, #3
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a402:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
          leftTestIndex[2] = mLogIndex - 1; // end of low
    a406:	69a1      	ldr	r1, [r4, #24]
          leftTestIndex[4] = mLogIndex + steadyStateTime; // start of SS
    a408:	6e23      	ldr	r3, [r4, #96]	; 0x60
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a40a:	ee67 7a87 	vmul.f32	s15, s15, s14
    a40e:	4a19      	ldr	r2, [pc, #100]	; (a474 <UMotorTest::tick()+0x270>)
    a410:	6aa5      	ldr	r5, [r4, #40]	; 0x28
          leftTestIndex[4] = mLogIndex + steadyStateTime; // start of SS
    a412:	440b      	add	r3, r1
          testState = MS_LHIGH;
    a414:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          leftTestIndex[2] = mLogIndex - 1; // end of low
    a418:	1e48      	subs	r0, r1, #1
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a41a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
          leftTestIndex[4] = mLogIndex + steadyStateTime; // start of SS
    a41e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          leftTestIndex[2] = mLogIndex - 1; // end of low
    a422:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
          motor.motorVoltage[testMotor] = voltageHigh * voltageCCV;
    a426:	edc2 7a06 	vstr	s15, [r2, #24]
          break;
    a42a:	e7a5      	b.n	a378 <UMotorTest::tick()+0x174>
      tickCnt = 0;
    a42c:	2300      	movs	r3, #0
    a42e:	6223      	str	r3, [r4, #32]
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a430:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
          testState = MS_LLOW;
    a434:	2002      	movs	r0, #2
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a436:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
          leftTestIndex[0] = mLogIndex;
    a43a:	69a1      	ldr	r1, [r4, #24]
          leftTestIndex[1] = mLogIndex + steadyStateTime;
    a43c:	6e23      	ldr	r3, [r4, #96]	; 0x60
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a43e:	ee67 7a87 	vmul.f32	s15, s15, s14
    a442:	4a0c      	ldr	r2, [pc, #48]	; (a474 <UMotorTest::tick()+0x270>)
    a444:	6aa5      	ldr	r5, [r4, #40]	; 0x28
          leftTestIndex[1] = mLogIndex + steadyStateTime;
    a446:	440b      	add	r3, r1
          testState = MS_LLOW;
    a448:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a44c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
          leftTestIndex[0] = mLogIndex;
    a450:	6721      	str	r1, [r4, #112]	; 0x70
          leftTestIndex[1] = mLogIndex + steadyStateTime;
    a452:	6763      	str	r3, [r4, #116]	; 0x74
          motor.motorVoltage[testMotor] = voltageLow * voltageCCV;
    a454:	edc2 7a06 	vstr	s15, [r2, #24]
          break;
    a458:	e78e      	b.n	a378 <UMotorTest::tick()+0x174>
          motorTestEnd = true;
    a45a:	2201      	movs	r2, #1
          testState = MS_END;
    a45c:	2306      	movs	r3, #6
          motorTestEnd = true;
    a45e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          testState = MS_END;
    a462:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (motorTestEnd)
    a466:	e78c      	b.n	a382 <UMotorTest::tick()+0x17e>
    a468:	20003074 	.word	0x20003074
    a46c:	2000fac4 	.word	0x2000fac4
    a470:	2000f24c 	.word	0x2000f24c
    a474:	2000f4c8 	.word	0x2000f4c8
    a478:	2000ec40 	.word	0x2000ec40
    a47c:	2000ea90 	.word	0x2000ea90
    a480:	2000f660 	.word	0x2000f660
    a484:	20003048 	.word	0x20003048

0000a488 <_GLOBAL__sub_I_motortest>:
  clearEsimate(d);
}
    a488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a48c:	4c36      	ldr	r4, [pc, #216]	; (a568 <_GLOBAL__sub_I_motortest+0xe0>)
    a48e:	f04f 0832 	mov.w	r8, #50	; 0x32
    a492:	4d36      	ldr	r5, [pc, #216]	; (a56c <_GLOBAL__sub_I_motortest+0xe4>)
    a494:	4620      	mov	r0, r4
    a496:	f001 fec7 	bl	c228 <USubss::USubss()>
    a49a:	f8a4 801e 	strh.w	r8, [r4, #30]
    a49e:	4a34      	ldr	r2, [pc, #208]	; (a570 <_GLOBAL__sub_I_motortest+0xe8>)
    a4a0:	f04f 0801 	mov.w	r8, #1
    a4a4:	2300      	movs	r3, #0
    a4a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    a4aa:	6662      	str	r2, [r4, #100]	; 0x64
    a4ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a4b0:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
    a4b4:	f04f 08c8 	mov.w	r8, #200	; 0xc8
    a4b8:	492e      	ldr	r1, [pc, #184]	; (a574 <_GLOBAL__sub_I_motortest+0xec>)
    a4ba:	66e0      	str	r0, [r4, #108]	; 0x6c
UMotorTest motortest;
    a4bc:	4620      	mov	r0, r4
    a4be:	6021      	str	r1, [r4, #0]
    a4c0:	7523      	strb	r3, [r4, #20]
    a4c2:	61a3      	str	r3, [r4, #24]
    a4c4:	7723      	strb	r3, [r4, #28]
    a4c6:	6323      	str	r3, [r4, #48]	; 0x30
    a4c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    a4cc:	f8c4 3041 	str.w	r3, [r4, #65]	; 0x41
    a4d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    a4d4:	6563      	str	r3, [r4, #84]	; 0x54
    a4d6:	66a5      	str	r5, [r4, #104]	; 0x68
    a4d8:	6723      	str	r3, [r4, #112]	; 0x70
    a4da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    a4de:	63e3      	str	r3, [r4, #60]	; 0x3c
    a4e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    a4e4:	4924      	ldr	r1, [pc, #144]	; (a578 <_GLOBAL__sub_I_motortest+0xf0>)
    a4e6:	e9c4 2817 	strd	r2, r8, [r4, #92]	; 0x5c
    a4ea:	e9c4 3308 	strd	r3, r3, [r4, #32]
    a4ee:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    a4f2:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    a4f6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    a4fa:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
    a4fe:	e9c4 331f 	strd	r3, r3, [r4, #124]	; 0x7c
    a502:	4a1e      	ldr	r2, [pc, #120]	; (a57c <_GLOBAL__sub_I_motortest+0xf4>)
    a504:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    a508:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    a50c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    a510:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    a514:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    a518:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    a51c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    a520:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    a524:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    a528:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
    a52c:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
    a530:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
    a534:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
    a538:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
    a53c:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
    a540:	e9c4 333a 	strd	r3, r3, [r4, #232]	; 0xe8
    a544:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
    a548:	e9c4 333e 	strd	r3, r3, [r4, #248]	; 0xf8
    a54c:	e9c4 3340 	strd	r3, r3, [r4, #256]	; 0x100
    a550:	e9c4 3342 	strd	r3, r3, [r4, #264]	; 0x108
    a554:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
    a558:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
    a55c:	e9c4 3348 	strd	r3, r3, [r4, #288]	; 0x120
}
    a560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
UMotorTest motortest;
    a564:	f00e bd58 	b.w	19018 <__aeabi_atexit>
    a568:	2000f524 	.word	0x2000f524
    a56c:	41100000 	.word	0x41100000
    a570:	40400000 	.word	0x40400000
    a574:	20007df4 	.word	0x20007df4
    a578:	0000921d 	.word	0x0000921d
    a57c:	20008f80 	.word	0x20008f80

0000a580 <URobot::sendHelp()>:
  usb.send(reply);
}


void URobot::sendHelp()
{
    a580:	b570      	push	{r4, r5, r6, lr}
  const int MRL = 150;
  char reply[MRL];
  usb.send("# Robot settings -------\r\n");
    a582:	4e3a      	ldr	r6, [pc, #232]	; (a66c <URobot::sendHelp()+0xec>)
{
    a584:	b0a6      	sub	sp, #152	; 0x98
    a586:	4604      	mov	r4, r0
  usb.send("# Robot settings -------\r\n");
    a588:	4939      	ldr	r1, [pc, #228]	; (a670 <URobot::sendHelp()+0xf0>)
    a58a:	4630      	mov	r0, r6
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tsetid string \tSet device type to string (< 32 chars, is=%s).\r\n", deviceName);
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tsethw N \tSet hardware version (is = %d, part of hbt).\r\n", robotHWversion);
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a58c:	4d39      	ldr	r5, [pc, #228]	; (a674 <URobot::sendHelp()+0xf4>)
  usb.send("# Robot settings -------\r\n");
    a58e:	f002 f83d 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsetidx N \tSet ID to N (sets robot name) (id=%d, part of hbt).\r\n", deviceID);
    a592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a594:	4a38      	ldr	r2, [pc, #224]	; (a678 <URobot::sendHelp()+0xf8>)
    a596:	2196      	movs	r1, #150	; 0x96
    a598:	4668      	mov	r0, sp
    a59a:	f011 f90b 	bl	1b7b4 <snprintf>
  usb.send(reply);
    a59e:	4669      	mov	r1, sp
    a5a0:	4630      	mov	r0, r6
    a5a2:	f002 f833 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsetid string \tSet device type to string (< 32 chars, is=%s).\r\n", deviceName);
    a5a6:	f104 0331 	add.w	r3, r4, #49	; 0x31
    a5aa:	4a34      	ldr	r2, [pc, #208]	; (a67c <URobot::sendHelp()+0xfc>)
    a5ac:	2196      	movs	r1, #150	; 0x96
    a5ae:	4668      	mov	r0, sp
    a5b0:	f011 f900 	bl	1b7b4 <snprintf>
  usb.send(reply);
    a5b4:	4669      	mov	r1, sp
    a5b6:	4630      	mov	r0, r6
    a5b8:	f002 f828 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsethw N \tSet hardware version (is = %d, part of hbt).\r\n", robotHWversion);
    a5bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    a5c0:	4a2f      	ldr	r2, [pc, #188]	; (a680 <URobot::sendHelp()+0x100>)
    a5c2:	2196      	movs	r1, #150	; 0x96
    a5c4:	4668      	mov	r0, sp
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a5c6:	466c      	mov	r4, sp
  snprintf(reply, MRL, "# -- \tsethw N \tSet hardware version (is = %d, part of hbt).\r\n", robotHWversion);
    a5c8:	f011 f8f4 	bl	1b7b4 <snprintf>
  usb.send(reply);
    a5cc:	4669      	mov	r1, sp
    a5ce:	4630      	mov	r0, r6
    a5d0:	f002 f81c 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a5d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a5d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a5d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a5dc:	e895 0003 	ldmia.w	r5, {r0, r1}
  usb.send(reply);
  snprintf(reply, MRL, "# -- \tstart \tStart (activate something)\r\n");
    a5e0:	4d28      	ldr	r5, [pc, #160]	; (a684 <URobot::sendHelp()+0x104>)
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a5e2:	0c0b      	lsrs	r3, r1, #16
    a5e4:	f844 0b04 	str.w	r0, [r4], #4
  usb.send(reply);
    a5e8:	4630      	mov	r0, r6
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a5ea:	f824 1b02 	strh.w	r1, [r4], #2
  usb.send(reply);
    a5ee:	4669      	mov	r1, sp
  snprintf(reply, MRL, "# -- \tstop \tStop and set manual mode\r\n");
    a5f0:	7023      	strb	r3, [r4, #0]
  usb.send(reply);
    a5f2:	f002 f80b 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tstart \tStart (activate something)\r\n");
    a5f6:	466c      	mov	r4, sp
    a5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a5fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a5fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    a604:	c403      	stmia	r4!, {r0, r1}
    a606:	8022      	strh	r2, [r4, #0]
  usb.send(reply);
    a608:	4669      	mov	r1, sp
  snprintf(reply, MRL, "# -- \toff T\tTurn off power (cuts power after T seconds)\r\n");
    a60a:	4c1f      	ldr	r4, [pc, #124]	; (a688 <URobot::sendHelp()+0x108>)
  usb.send(reply);
    a60c:	4630      	mov	r0, r6
    a60e:	f001 fffd 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \toff T\tTurn off power (cuts power after T seconds)\r\n");
    a612:	46ec      	mov	ip, sp
    a614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a616:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a61a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a61c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a626:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    a62a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
  usb.send(reply);
    a62e:	4669      	mov	r1, sp
  snprintf(reply, MRL, "# -- \toff T\tTurn off power (cuts power after T seconds)\r\n");
    a630:	f8ac 2000 	strh.w	r2, [ip]
  usb.send(reply);
    a634:	4630      	mov	r0, r6
    a636:	f001 ffe9 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tstime us\tSet sample time typically around 1000 (> 20) is %ld\r\n", service.sampleTime_us);
    a63a:	4b14      	ldr	r3, [pc, #80]	; (a68c <URobot::sendHelp()+0x10c>)
    a63c:	4a14      	ldr	r2, [pc, #80]	; (a690 <URobot::sendHelp()+0x110>)
    a63e:	2196      	movs	r1, #150	; 0x96
    a640:	681b      	ldr	r3, [r3, #0]
    a642:	4668      	mov	r0, sp
    a644:	f011 f8b6 	bl	1b7b4 <snprintf>
  usb.send(reply);
    a648:	4669      	mov	r1, sp
    a64a:	4630      	mov	r0, r6
    a64c:	f001 ffde 	bl	c60c <UUSB::send(char const*)>
  usb.send(            "# -- \tpind pin v [p]\tSet pin direction v=1 output, p=1 pull up, p=-1 pull down\r\n");
    a650:	4910      	ldr	r1, [pc, #64]	; (a694 <URobot::sendHelp()+0x114>)
    a652:	4630      	mov	r0, r6
    a654:	f001 ffda 	bl	c60c <UUSB::send(char const*)>
  usb.send(            "# -- \tpinv pin v\tSet pin to v [0..1]\r\n");
    a658:	490f      	ldr	r1, [pc, #60]	; (a698 <URobot::sendHelp()+0x118>)
    a65a:	4630      	mov	r0, r6
    a65c:	f001 ffd6 	bl	c60c <UUSB::send(char const*)>
  usb.send(            "# -- \tFor all subscriptions ('sub' commands) below, 'N' is the interval in ms\r\n");
    a660:	490e      	ldr	r1, [pc, #56]	; (a69c <URobot::sendHelp()+0x11c>)
    a662:	4630      	mov	r0, r6
    a664:	f001 ffd2 	bl	c60c <UUSB::send(char const*)>
}
    a668:	b026      	add	sp, #152	; 0x98
    a66a:	bd70      	pop	{r4, r5, r6, pc}
    a66c:	2000fac4 	.word	0x2000fac4
    a670:	20005ac4 	.word	0x20005ac4
    a674:	20005bb0 	.word	0x20005bb0
    a678:	20005ae0 	.word	0x20005ae0
    a67c:	20005b28 	.word	0x20005b28
    a680:	20005b70 	.word	0x20005b70
    a684:	20005bd8 	.word	0x20005bd8
    a688:	20005c04 	.word	0x20005c04
    a68c:	2000e0c8 	.word	0x2000e0c8
    a690:	20005c40 	.word	0x20005c40
    a694:	20005c88 	.word	0x20005c88
    a698:	20005cdc 	.word	0x20005cdc
    a69c:	20005d04 	.word	0x20005d04

0000a6a0 <URobot::~URobot()>:
class URobot : public USubss
    a6a0:	b510      	push	{r4, lr}
    a6a2:	4b05      	ldr	r3, [pc, #20]	; (a6b8 <URobot::~URobot()+0x18>)
    a6a4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    a6a6:	6840      	ldr	r0, [r0, #4]
    a6a8:	6023      	str	r3, [r4, #0]
	if (__p)
    a6aa:	b118      	cbz	r0, a6b4 <URobot::~URobot()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a6ac:	68e1      	ldr	r1, [r4, #12]
    a6ae:	1a09      	subs	r1, r1, r0
    a6b0:	f00c f894 	bl	167dc <operator delete(void*, unsigned int)>
    a6b4:	4620      	mov	r0, r4
    a6b6:	bd10      	pop	{r4, pc}
    a6b8:	200080a0 	.word	0x200080a0
    a6bc:	00000000 	.word	0x00000000

0000a6c0 <URobot::setup()>:
{ // hold power on
    a6c0:	b538      	push	{r3, r4, r5, lr}
  pinMode ( PIN_POWER_ROBOT, OUTPUT );
    a6c2:	2101      	movs	r1, #1
{ // hold power on
    a6c4:	4604      	mov	r4, r0
  pinMode ( PIN_POWER_ROBOT, OUTPUT );
    a6c6:	2023      	movs	r0, #35	; 0x23
{ // no warning, just on
  digitalWriteFast(PIN_POWER_ROBOT, HIGH);
  batteryOff = false;
  batteryGone = false;
  display.setLine(deviceName);
  usb.send("# URobot:: power on\r\n");
    a6c8:	4d33      	ldr	r5, [pc, #204]	; (a798 <URobot::setup()+0xd8>)
  pinMode ( PIN_POWER_ROBOT, OUTPUT );
    a6ca:	f00b fcd3 	bl	16074 <pinMode>
  batteryOff = false;
    a6ce:	2300      	movs	r3, #0
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    a6d0:	4a32      	ldr	r2, [pc, #200]	; (a79c <URobot::setup()+0xdc>)
    a6d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  display.setLine(deviceName);
    a6d6:	4832      	ldr	r0, [pc, #200]	; (a7a0 <URobot::setup()+0xe0>)
    a6d8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    a6dc:	f104 0131 	add.w	r1, r4, #49	; 0x31
  batteryOff = false;
    a6e0:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    a6e4:	f7f8 fbba 	bl	2e5c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    a6e8:	492e      	ldr	r1, [pc, #184]	; (a7a4 <URobot::setup()+0xe4>)
    a6ea:	4628      	mov	r0, r5
    a6ec:	f001 ff8e 	bl	c60c <UUSB::send(char const*)>
  pinMode ( PIN_START_BUTTON, INPUT_PULLUP ); // start switch - version 2B
    a6f0:	2102      	movs	r1, #2
    a6f2:	2025      	movs	r0, #37	; 0x25
    a6f4:	f00b fcbe 	bl	16074 <pinMode>
  pinMode ( PIN_LED_DEBUG, OUTPUT );
    a6f8:	2101      	movs	r1, #1
    a6fa:	200d      	movs	r0, #13
    a6fc:	f00b fcba 	bl	16074 <pinMode>
  addPublistItem("hbt", "Get time and state 'hbt time idx revision batVolt state hw'");
    a700:	4a29      	ldr	r2, [pc, #164]	; (a7a8 <URobot::setup()+0xe8>)
    a702:	492a      	ldr	r1, [pc, #168]	; (a7ac <URobot::setup()+0xec>)
    a704:	4620      	mov	r0, r4
    a706:	f001 feb3 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("id",  "Get device type and name 'name type name'");
    a70a:	4a29      	ldr	r2, [pc, #164]	; (a7b0 <URobot::setup()+0xf0>)
    a70c:	4929      	ldr	r1, [pc, #164]	; (a7b4 <URobot::setup()+0xf4>)
    a70e:	4620      	mov	r0, r4
    a710:	f001 feae 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("time",  "sample timing [us] 'time CPU_clk ad_us sensor_us control_us done_us T_us load_o/o'");
    a714:	4a28      	ldr	r2, [pc, #160]	; (a7b8 <URobot::setup()+0xf8>)
    a716:	4929      	ldr	r1, [pc, #164]	; (a7bc <URobot::setup()+0xfc>)
    a718:	4620      	mov	r0, r4
    a71a:	f001 fea9 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("pin",  "Get pin value (pin is set by 'pind') 'pin pin value'");
    a71e:	4a28      	ldr	r2, [pc, #160]	; (a7c0 <URobot::setup()+0x100>)
    a720:	4928      	ldr	r1, [pc, #160]	; (a7c4 <URobot::setup()+0x104>)
    a722:	4620      	mov	r0, r4
    a724:	f001 fea4 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("auto",  "Get value of auto mission  start flag 'start value' value=[0,1].");
    a728:	4a27      	ldr	r2, [pc, #156]	; (a7c8 <URobot::setup()+0x108>)
    a72a:	4928      	ldr	r1, [pc, #160]	; (a7cc <URobot::setup()+0x10c>)
    a72c:	4620      	mov	r0, r4
    a72e:	f001 fe9f 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    a732:	4621      	mov	r1, r4
    a734:	4628      	mov	r0, r5
    a736:	f002 fbad 	bl	ce94 <UUSB::addSubscriptionService(USubss*)>
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a73a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a73e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a742:	4a23      	ldr	r2, [pc, #140]	; (a7d0 <URobot::setup()+0x110>)
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a744:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a748:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a74c:	ed9f 3b0c 	vldr	d3, [pc, #48]	; a780 <URobot::setup()+0xc0>
    a750:	ed9f 4b0d 	vldr	d4, [pc, #52]	; a788 <URobot::setup()+0xc8>
    a754:	ed9f 5b0e 	vldr	d5, [pc, #56]	; a790 <URobot::setup()+0xd0>
    a758:	ee83 6b07 	vdiv.f64	d6, d3, d7
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a75c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    a760:	ee26 6b04 	vmul.f64	d6, d6, d4
    a764:	ee86 7b05 	vdiv.f64	d7, d6, d5
    a768:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a76c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
  ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a770:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a774:	6813      	ldr	r3, [r2, #0]
    a776:	f043 0301 	orr.w	r3, r3, #1
    a77a:	6013      	str	r3, [r2, #0]
}
    a77c:	bd38      	pop	{r3, r4, r5, pc}
    a77e:	bf00      	nop
    a780:	66666666 	.word	0x66666666
    a784:	400a6666 	.word	0x400a6666
    a788:	9999999a 	.word	0x9999999a
    a78c:	4049d999 	.word	0x4049d999
    a790:	cccccccd 	.word	0xcccccccd
    a794:	4012cccc 	.word	0x4012cccc
    a798:	2000fac4 	.word	0x2000fac4
    a79c:	42004000 	.word	0x42004000
    a7a0:	2000eb18 	.word	0x2000eb18
    a7a4:	20005820 	.word	0x20005820
    a7a8:	20005838 	.word	0x20005838
    a7ac:	20005874 	.word	0x20005874
    a7b0:	20005878 	.word	0x20005878
    a7b4:	2000882c 	.word	0x2000882c
    a7b8:	200058a4 	.word	0x200058a4
    a7bc:	200058f8 	.word	0x200058f8
    a7c0:	20005900 	.word	0x20005900
    a7c4:	20005938 	.word	0x20005938
    a7c8:	2000593c 	.word	0x2000593c
    a7cc:	20005980 	.word	0x20005980
    a7d0:	e0001000 	.word	0xe0001000
    a7d4:	00000000 	.word	0x00000000

0000a7d8 <URobot::sendState()>:
    a7d8:	4b2b      	ldr	r3, [pc, #172]	; (a888 <URobot::sendState()+0xb0>)
{
    a7da:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7dc:	4605      	mov	r5, r0
    a7de:	ed2d 8b06 	vpush	{d8-d10}
    a7e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    a7e6:	b0a9      	sub	sp, #164	; 0xa4
    a7e8:	f00e fea0 	bl	1952c <__aeabi_ul2f>
    a7ec:	ee08 0a10 	vmov	s16, r0
           command.getRevisionNumber()/10, 
    a7f0:	4826      	ldr	r0, [pc, #152]	; (a88c <URobot::sendState()+0xb4>)
    a7f2:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a7f6:	6aee      	ldr	r6, [r5, #44]	; 0x2c
    a7f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; a880 <URobot::sendState()+0xa8>
    a7fc:	ee28 8b07 	vmul.f64	d8, d8, d7
           command.getRevisionNumber()/10, 
    a800:	f7f7 fdae 	bl	2360 <UCommand::getRevisionNumber()>
           load * 100,
    a804:	eddf 7a22 	vldr	s15, [pc, #136]	; a890 <URobot::sendState()+0xb8>
           command.getRevisionNumber()/10, 
    a808:	4604      	mov	r4, r0
           load * 100,
    a80a:	ed95 9a08 	vldr	s18, [r5, #32]
           robot.batteryVoltage, //sensor.batteryVoltagef,
    a80e:	4b21      	ldr	r3, [pc, #132]	; (a894 <URobot::sendState()+0xbc>)
           current.getSupplyCurrent(),
    a810:	4821      	ldr	r0, [pc, #132]	; (a898 <URobot::sendState()+0xc0>)
           load * 100,
    a812:	ee29 9a27 	vmul.f32	s18, s18, s15
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a816:	ed93 aa05 	vldr	s20, [r3, #20]
    a81a:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    a81e:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
           current.getSupplyCurrent(),
    a822:	f7f8 f8cb 	bl	29bc <UCurrent::getSupplyCurrent()>
           command.getRevisionNumber()/10, 
    a826:	4b1d      	ldr	r3, [pc, #116]	; (a89c <URobot::sendState()+0xc4>)
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a828:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    a82c:	9707      	str	r7, [sp, #28]
           command.getRevisionNumber()/10, 
    a82e:	fba3 3404 	umull	r3, r4, r3, r4
  snprintf(reply, MRL,  "hbt %.4f %d %d %.2f %d %d %.1f %.2f %d\r\n",
    a832:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    a836:	eeb7 aaca 	vcvt.f64.f32	d10, s20
    a83a:	f8d5 2338 	ldr.w	r2, [r5, #824]	; 0x338
    a83e:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
    a842:	2304      	movs	r3, #4
    a844:	f3c4 04cf 	ubfx	r4, r4, #3, #16
    a848:	920c      	str	r2, [sp, #48]	; 0x30
    a84a:	9306      	str	r3, [sp, #24]
    a84c:	2164      	movs	r1, #100	; 0x64
    a84e:	4a14      	ldr	r2, [pc, #80]	; (a8a0 <URobot::sendState()+0xc8>)
    a850:	a80f      	add	r0, sp, #60	; 0x3c
    a852:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
    a856:	ed8d 9b08 	vstr	d9, [sp, #32]
    a85a:	ed8d ab04 	vstr	d10, [sp, #16]
    a85e:	e9cd 6402 	strd	r6, r4, [sp, #8]
    a862:	ed8d 8b00 	vstr	d8, [sp]
    a866:	f010 ffa5 	bl	1b7b4 <snprintf>
  usb.send(reply);
    a86a:	a90f      	add	r1, sp, #60	; 0x3c
    a86c:	480d      	ldr	r0, [pc, #52]	; (a8a4 <URobot::sendState()+0xcc>)
    a86e:	f001 fecd 	bl	c60c <UUSB::send(char const*)>
}
    a872:	b029      	add	sp, #164	; 0xa4
    a874:	ecbd 8b06 	vpop	{d8-d10}
    a878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a87a:	bf00      	nop
    a87c:	f3af 8000 	nop.w
    a880:	a0b5ed8d 	.word	0xa0b5ed8d
    a884:	3eb0c6f7 	.word	0x3eb0c6f7
    a888:	2000e0c8 	.word	0x2000e0c8
    a88c:	2000ea18 	.word	0x2000ea18
    a890:	42c80000 	.word	0x42c80000
    a894:	2000f660 	.word	0x2000f660
    a898:	2000ea90 	.word	0x2000ea90
    a89c:	cccccccd 	.word	0xcccccccd
    a8a0:	20005d54 	.word	0x20005d54
    a8a4:	2000fac4 	.word	0x2000fac4

0000a8a8 <URobot::sendPinValue()>:
  int v = digitalReadFast(debugPin);
    a8a8:	f8d0 32fc 	ldr.w	r3, [r0, #764]	; 0x2fc
  snprintf(s, MSL, "pin %d %d\r\n", debugPin, v);
    a8ac:	211e      	movs	r1, #30
    a8ae:	4a0e      	ldr	r2, [pc, #56]	; (a8e8 <URobot::sendPinValue()+0x40>)
    a8b0:	fa5f fc83 	uxtb.w	ip, r3
{
    a8b4:	b530      	push	{r4, r5, lr}
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    a8b6:	4c0d      	ldr	r4, [pc, #52]	; (a8ec <URobot::sendPinValue()+0x44>)
    a8b8:	ea4f 150c 	mov.w	r5, ip, lsl #4
    a8bc:	b08b      	sub	sp, #44	; 0x2c
    a8be:	eb04 1c0c 	add.w	ip, r4, ip, lsl #4
    a8c2:	5965      	ldr	r5, [r4, r5]
  snprintf(s, MSL, "pin %d %d\r\n", debugPin, v);
    a8c4:	a802      	add	r0, sp, #8
    a8c6:	f8dc 400c 	ldr.w	r4, [ip, #12]
    a8ca:	68ad      	ldr	r5, [r5, #8]
    a8cc:	4225      	tst	r5, r4
    a8ce:	bf14      	ite	ne
    a8d0:	2401      	movne	r4, #1
    a8d2:	2400      	moveq	r4, #0
    a8d4:	9400      	str	r4, [sp, #0]
    a8d6:	f010 ff6d 	bl	1b7b4 <snprintf>
  usb.send(s);
    a8da:	a902      	add	r1, sp, #8
    a8dc:	4804      	ldr	r0, [pc, #16]	; (a8f0 <URobot::sendPinValue()+0x48>)
    a8de:	f001 fe95 	bl	c60c <UUSB::send(char const*)>
}
    a8e2:	b00b      	add	sp, #44	; 0x2c
    a8e4:	bd30      	pop	{r4, r5, pc}
    a8e6:	bf00      	nop
    a8e8:	20005704 	.word	0x20005704
    a8ec:	200081bc 	.word	0x200081bc
    a8f0:	2000fac4 	.word	0x2000fac4

0000a8f4 <URobot::sendTiming()>:
{
    a8f4:	4603      	mov	r3, r0
    snprintf(s, MSL, "time %ld %ld %ld %ld %ld %ld %ld %.1f\r\n",
    a8f6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    a8fa:	4a14      	ldr	r2, [pc, #80]	; (a94c <URobot::sendTiming()+0x58>)
    a8fc:	2164      	movs	r1, #100	; 0x64
           float(cycleTime2[6]) / 10.0
    a8fe:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
    a902:	eeb8 7a67 	vcvt.f32.u32	s14, s15
{
    a906:	b510      	push	{r4, lr}
           float(cycleTime2[6]) / 10.0
    a908:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
{
    a90c:	b0a2      	sub	sp, #136	; 0x88
    snprintf(s, MSL, "time %ld %ld %ld %ld %ld %ld %ld %.1f\r\n",
    a90e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
    a912:	a809      	add	r0, sp, #36	; 0x24
    a914:	ee87 6b05 	vdiv.f64	d6, d7, d5
    a918:	9405      	str	r4, [sp, #20]
    a91a:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
    a91e:	9404      	str	r4, [sp, #16]
    a920:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
    a924:	9403      	str	r4, [sp, #12]
    a926:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    a92a:	9402      	str	r4, [sp, #8]
    a92c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    a92e:	9401      	str	r4, [sp, #4]
    a930:	6f9c      	ldr	r4, [r3, #120]	; 0x78
    a932:	9400      	str	r4, [sp, #0]
    a934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    a936:	ed8d 6b06 	vstr	d6, [sp, #24]
    a93a:	f010 ff3b 	bl	1b7b4 <snprintf>
  usb.send(s);
    a93e:	a909      	add	r1, sp, #36	; 0x24
    a940:	4803      	ldr	r0, [pc, #12]	; (a950 <URobot::sendTiming()+0x5c>)
    a942:	f001 fe63 	bl	c60c <UUSB::send(char const*)>
}
    a946:	b022      	add	sp, #136	; 0x88
    a948:	bd10      	pop	{r4, pc}
    a94a:	bf00      	nop
    a94c:	200056d0 	.word	0x200056d0
    a950:	2000fac4 	.word	0x2000fac4

0000a954 <URobot::sendData(int)>:
{
    a954:	b500      	push	{lr}
    a956:	b09d      	sub	sp, #116	; 0x74
    a958:	2904      	cmp	r1, #4
    a95a:	d814      	bhi.n	a986 <URobot::sendData(int)+0x32>
    a95c:	e8df f001 	tbb	[pc, r1]
    a960:	2d280323 	.word	0x2d280323
    a964:	16          	.byte	0x16
    a965:	00          	.byte	0x00
    return robotname[deviceID];
    a966:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  snprintf(reply, MRL, "dname %s %s\r\n", deviceName, getRobotName());
    a968:	f100 0331 	add.w	r3, r0, #49	; 0x31
    a96c:	4a15      	ldr	r2, [pc, #84]	; (a9c4 <URobot::sendData(int)+0x70>)
    a96e:	3126      	adds	r1, #38	; 0x26
    a970:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    a974:	a803      	add	r0, sp, #12
    a976:	9100      	str	r1, [sp, #0]
    a978:	2164      	movs	r1, #100	; 0x64
    a97a:	f010 ff1b 	bl	1b7b4 <snprintf>
  usb.send(reply);
    a97e:	a903      	add	r1, sp, #12
    a980:	4811      	ldr	r0, [pc, #68]	; (a9c8 <URobot::sendData(int)+0x74>)
    a982:	f001 fe43 	bl	c60c <UUSB::send(char const*)>
}
    a986:	b01d      	add	sp, #116	; 0x74
    a988:	f85d fb04 	ldr.w	pc, [sp], #4
  snprintf(s, MSL, "start %d\r\n", missionAutoStart);
    a98c:	7e43      	ldrb	r3, [r0, #25]
    a98e:	211e      	movs	r1, #30
    a990:	4a0e      	ldr	r2, [pc, #56]	; (a9cc <URobot::sendData(int)+0x78>)
    a992:	a803      	add	r0, sp, #12
    a994:	f010 ff0e 	bl	1b7b4 <snprintf>
  usb.send(s);
    a998:	a903      	add	r1, sp, #12
    a99a:	480b      	ldr	r0, [pc, #44]	; (a9c8 <URobot::sendData(int)+0x74>)
    a99c:	f001 fe36 	bl	c60c <UUSB::send(char const*)>
}
    a9a0:	b01d      	add	sp, #116	; 0x74
    a9a2:	f85d fb04 	ldr.w	pc, [sp], #4
    a9a6:	b01d      	add	sp, #116	; 0x74
    a9a8:	f85d eb04 	ldr.w	lr, [sp], #4
    sendState();
    a9ac:	f7ff bf14 	b.w	a7d8 <URobot::sendState()>
}
    a9b0:	b01d      	add	sp, #116	; 0x74
    a9b2:	f85d eb04 	ldr.w	lr, [sp], #4
    sendTiming();
    a9b6:	f7ff bf9d 	b.w	a8f4 <URobot::sendTiming()>
}
    a9ba:	b01d      	add	sp, #116	; 0x74
    a9bc:	f85d eb04 	ldr.w	lr, [sp], #4
    sendPinValue();
    a9c0:	f7ff bf72 	b.w	a8a8 <URobot::sendPinValue()>
    a9c4:	20005aa0 	.word	0x20005aa0
    a9c8:	2000fac4 	.word	0x2000fac4
    a9cc:	200056f8 	.word	0x200056f8

0000a9d0 <URobot::saveCycleTime()>:
  uint32_t t0 = cycleTime[0];
    a9d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
  cycleTimeInterval = t0 - cycleTime2[0];
    a9d2:	6f42      	ldr	r2, [r0, #116]	; 0x74
  cycleTime2[4] = (cycleTime[4] - t0)/us;
    a9d4:	6e41      	ldr	r1, [r0, #100]	; 0x64
  cycleTimeInterval = t0 - cycleTime2[0];
    a9d6:	1a9a      	subs	r2, r3, r2
  cycleTime2[0] = t0;
    a9d8:	6743      	str	r3, [r0, #116]	; 0x74
  cycleTime2[4] = (cycleTime[4] - t0)/us;
    a9da:	1ac9      	subs	r1, r1, r3
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a9dc:	ee07 2a90 	vmov	s15, r2
  cycleTimeInterval = t0 - cycleTime2[0];
    a9e0:	66c2      	str	r2, [r0, #108]	; 0x6c
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a9e2:	ee07 1a10 	vmov	s14, r1
  cycleTime2[5] = cycleTimeInterval / us;
    a9e6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
  cycleTime2[2] = (cycleTime[2] - t0)/us;
    a9ee:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a9f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  cycleTime2[4] = (cycleTime[4] - t0)/us;
    a9f4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  cycleTime2[2] = (cycleTime[2] - t0)/us;
    a9f8:	1ad2      	subs	r2, r2, r3
  cycleTime2[7] = (t0 - cycleTime[5])/us; // half cycle time is in previous sample
    a9fa:	6e81      	ldr	r1, [r0, #104]	; 0x68
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    a9fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  cycleTime2[2] = (cycleTime[2] - t0)/us;
    aa00:	67c2      	str	r2, [r0, #124]	; 0x7c
  cycleTime2[3] = (cycleTime[3] - t0)/us;
    aa02:	6e02      	ldr	r2, [r0, #96]	; 0x60
  cycleTime2[7] = (t0 - cycleTime[5])/us; // half cycle time is in previous sample
    aa04:	1a59      	subs	r1, r3, r1
  cycleTime2[3] = (cycleTime[3] - t0)/us;
    aa06:	1ad2      	subs	r2, r2, r3
  cycleTime2[7] = (t0 - cycleTime[5])/us; // half cycle time is in previous sample
    aa08:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  cycleTime2[3] = (cycleTime[3] - t0)/us;
    aa0c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  cycleTime2[6] = int(load * 1000.0);
    aa10:	ed9f 5b09 	vldr	d5, [pc, #36]	; aa38 <URobot::saveCycleTime()+0x68>
{
    aa14:	b410      	push	{r4}
  cycleTime2[1] = (cycleTime[1] - t0)/us;
    aa16:	6d84      	ldr	r4, [r0, #88]	; 0x58
    aa18:	1ae4      	subs	r4, r4, r3
    aa1a:	6784      	str	r4, [r0, #120]	; 0x78
}
    aa1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  cycleTime2[6] = int(load * 1000.0);
    aa20:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
  load = float(cycleTime[4] - t0) / float(cycleTimeInterval);
    aa24:	edc0 6a08 	vstr	s13, [r0, #32]
  cycleTime2[6] = int(load * 1000.0);
    aa28:	ee27 7b05 	vmul.f64	d7, d7, d5
    aa2c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    aa30:	ed80 7a23 	vstr	s14, [r0, #140]	; 0x8c
}
    aa34:	4770      	bx	lr
    aa36:	bf00      	nop
    aa38:	00000000 	.word	0x00000000
    aa3c:	408f4000 	.word	0x408f4000

0000aa40 <URobot::batteryMonitoring()>:
  if (batteryOff)
    aa40:	f890 3334 	ldrb.w	r3, [r0, #820]	; 0x334
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    aa44:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
{ // keep an eye on battery voltage 
    aa48:	b570      	push	{r4, r5, r6, lr}
    aa4a:	4604      	mov	r4, r0
    aa4c:	b09c      	sub	sp, #112	; 0x70
  if (batteryOff)
    aa4e:	b36b      	cbz	r3, aaac <URobot::batteryMonitoring()+0x6c>
  const uint16_t batteryGoneInt = int(7 / batVoltIntToFloat);
    aa50:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    if (batteryGone)
    aa54:	f890 2335 	ldrb.w	r2, [r0, #821]	; 0x335
  const uint16_t batteryGoneInt = int(7 / batVoltIntToFloat);
    aa58:	eec6 7a87 	vdiv.f32	s15, s13, s14
    aa5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    aa60:	ee17 3a90 	vmov	r3, s15
    aa64:	b29b      	uxth	r3, r3
    if (batteryGone)
    aa66:	b94a      	cbnz	r2, aa7c <URobot::batteryMonitoring()+0x3c>
      batteryGone = ad.batVoltRawAD < batteryGoneInt;
    aa68:	4a73      	ldr	r2, [pc, #460]	; (ac38 <URobot::batteryMonitoring()+0x1f8>)
    aa6a:	8b92      	ldrh	r2, [r2, #28]
    aa6c:	429a      	cmp	r2, r3
    aa6e:	bf2c      	ite	cs
    aa70:	2300      	movcs	r3, #0
    aa72:	2301      	movcc	r3, #1
    aa74:	f880 3335 	strb.w	r3, [r0, #821]	; 0x335
}
    aa78:	b01c      	add	sp, #112	; 0x70
    aa7a:	bd70      	pop	{r4, r5, r6, pc}
      if (ad.batVoltRawAD > batteryGoneInt)
    aa7c:	4a6e      	ldr	r2, [pc, #440]	; (ac38 <URobot::batteryMonitoring()+0x1f8>)
    aa7e:	8b92      	ldrh	r2, [r2, #28]
    aa80:	429a      	cmp	r2, r3
    aa82:	d9f9      	bls.n	aa78 <URobot::batteryMonitoring()+0x38>
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    aa84:	4a6d      	ldr	r2, [pc, #436]	; (ac3c <URobot::batteryMonitoring()+0x1fc>)
  batteryOff = false;
    aa86:	2300      	movs	r3, #0
    aa88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine(deviceName);
    aa8c:	f104 0131 	add.w	r1, r4, #49	; 0x31
    aa90:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    aa94:	486a      	ldr	r0, [pc, #424]	; (ac40 <URobot::batteryMonitoring()+0x200>)
  batteryOff = false;
    aa96:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    aa9a:	f7f8 f9df 	bl	2e5c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    aa9e:	4969      	ldr	r1, [pc, #420]	; (ac44 <URobot::batteryMonitoring()+0x204>)
    aaa0:	4869      	ldr	r0, [pc, #420]	; (ac48 <URobot::batteryMonitoring()+0x208>)
}
    aaa2:	b01c      	add	sp, #112	; 0x70
    aaa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb.send("# URobot:: power on\r\n");
    aaa8:	f001 bdb0 	b.w	c60c <UUSB::send(char const*)>
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    aaac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    aab0:	4b61      	ldr	r3, [pc, #388]	; (ac38 <URobot::batteryMonitoring()+0x1f8>)
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    aab2:	ed9f 5b5d 	vldr	d5, [pc, #372]	; ac28 <URobot::batteryMonitoring()+0x1e8>
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    aab6:	8b9a      	ldrh	r2, [r3, #28]
  const uint16_t batteryIdleVoltageInt = int(10.2 / batVoltIntToFloat);
    aab8:	ee85 6b07 	vdiv.f64	d6, d5, d7
    aabc:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    aac0:	ee16 3a10 	vmov	r3, s12
    aac4:	b29b      	uxth	r3, r3
    aac6:	429a      	cmp	r2, r3
    aac8:	d260      	bcs.n	ab8c <URobot::batteryMonitoring()+0x14c>
    aaca:	ed9f 5b59 	vldr	d5, [pc, #356]	; ac30 <URobot::batteryMonitoring()+0x1f0>
    aace:	ee85 6b07 	vdiv.f64	d6, d5, d7
    aad2:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    aad6:	ee16 3a10 	vmov	r3, s12
    aada:	429a      	cmp	r2, r3
    aadc:	dd56      	ble.n	ab8c <URobot::batteryMonitoring()+0x14c>
    return float(sampleTime_us)/1e6;
    aade:	4a5b      	ldr	r2, [pc, #364]	; (ac4c <URobot::batteryMonitoring()+0x20c>)
    const int shutDownSamples = int(shutDownDelaySec/service.sampleTime_sec());
    aae0:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
    aae4:	ed9f 6a5a 	vldr	s12, [pc, #360]	; ac50 <URobot::batteryMonitoring()+0x210>
    aae8:	edd2 7a00 	vldr	s15, [r2]
    batLowCnt++;
    aaec:	f8d4 3338 	ldr.w	r3, [r4, #824]	; 0x338
    aaf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    aaf4:	4a57      	ldr	r2, [pc, #348]	; (ac54 <URobot::batteryMonitoring()+0x214>)
    batLowCnt++;
    aaf6:	1c58      	adds	r0, r3, #1
    aaf8:	ee87 7a86 	vdiv.f32	s14, s15, s12
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    aafc:	fb82 1200 	smull	r1, r2, r2, r0
    ab00:	17c3      	asrs	r3, r0, #31
    ab02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    batLowCnt++;
    ab06:	f8c4 0338 	str.w	r0, [r4, #824]	; 0x338
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    ab0a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    ab0e:	fb01 0313 	mls	r3, r1, r3, r0
    ab12:	2b64      	cmp	r3, #100	; 0x64
    const int shutDownSamples = int(shutDownDelaySec/service.sampleTime_sec());
    ab14:	eec6 7a87 	vdiv.f32	s15, s13, s14
    ab18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    ab1c:	ee17 5a90 	vmov	r5, s15
    if (batLowCnt % 1000 == 100 and batLowCnt < shutDownSamples )
    ab20:	d101      	bne.n	ab26 <URobot::batteryMonitoring()+0xe6>
    ab22:	42a8      	cmp	r0, r5
    ab24:	db45      	blt.n	abb2 <URobot::batteryMonitoring()+0x172>
    if (batLowCnt > shutDownSamples or batteryHalt)
    ab26:	4285      	cmp	r5, r0
    ab28:	da38      	bge.n	ab9c <URobot::batteryMonitoring()+0x15c>
      if (servo.servoEnabled[0] or servo.servoEnabled[1] or servo.servoEnabled[2])
    ab2a:	4e4b      	ldr	r6, [pc, #300]	; (ac58 <URobot::batteryMonitoring()+0x218>)
    ab2c:	7d33      	ldrb	r3, [r6, #20]
    ab2e:	b91b      	cbnz	r3, ab38 <URobot::batteryMonitoring()+0xf8>
    ab30:	7d73      	ldrb	r3, [r6, #21]
    ab32:	b90b      	cbnz	r3, ab38 <URobot::batteryMonitoring()+0xf8>
    ab34:	7db3      	ldrb	r3, [r6, #22]
    ab36:	b1ab      	cbz	r3, ab64 <URobot::batteryMonitoring()+0x124>
        usb.send("# disabling servo!\r\n");
    ab38:	4948      	ldr	r1, [pc, #288]	; (ac5c <URobot::batteryMonitoring()+0x21c>)
    ab3a:	4843      	ldr	r0, [pc, #268]	; (ac48 <URobot::batteryMonitoring()+0x208>)
    ab3c:	f001 fd66 	bl	c60c <UUSB::send(char const*)>
  * */  
  inline void setServoPWM(int serviIdx, int16_t pwm, bool enable, int16_t vel)
  {
    if (serviIdx >= 0 and serviIdx < MAX_SERVO_CNT)
    {
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab40:	4a47      	ldr	r2, [pc, #284]	; (ac60 <URobot::batteryMonitoring()+0x220>)
      { // hardware 9 (version 6.x PCB) has 4 servos only
        servoRef[serviIdx] = pwm;
    ab42:	2300      	movs	r3, #0
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab44:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
        servoRef[serviIdx] = pwm;
    ab48:	8773      	strh	r3, [r6, #58]	; 0x3a
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab4a:	2a09      	cmp	r2, #9
        servoRef[serviIdx] = pwm;
    ab4c:	63f3      	str	r3, [r6, #60]	; 0x3c
    ab4e:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
        servoEnaRef[serviIdx] = enable;
    ab52:	6473      	str	r3, [r6, #68]	; 0x44
        servoVel[serviIdx] = vel;
    ab54:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ab58:	d004      	beq.n	ab64 <URobot::batteryMonitoring()+0x124>
        servoRef[serviIdx] = pwm;
    ab5a:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
        servoEnaRef[serviIdx] = enable;
    ab5e:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
        servoVel[serviIdx] = vel;
    ab62:	8733      	strh	r3, [r6, #56]	; 0x38
      if (not batteryHalt)
    ab64:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    ab68:	b1f3      	cbz	r3, aba8 <URobot::batteryMonitoring()+0x168>
				CORE_PIN35_PORTCLEAR = CORE_PIN35_BITMASK;
    ab6a:	4a34      	ldr	r2, [pc, #208]	; (ac3c <URobot::batteryMonitoring()+0x1fc>)
}

void URobot::powerOff()
{ // no warning, just off
  digitalWriteFast(PIN_POWER_ROBOT, LOW);
  batteryOff = true;
    ab6c:	2301      	movs	r3, #1
    ab6e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine("Power off");
    ab72:	493c      	ldr	r1, [pc, #240]	; (ac64 <URobot::batteryMonitoring()+0x224>)
    ab74:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  batteryOff = true;
    ab78:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  display.setLine("Power off");
    ab7c:	4830      	ldr	r0, [pc, #192]	; (ac40 <URobot::batteryMonitoring()+0x200>)
    ab7e:	f7f8 f96d 	bl	2e5c <UDisplay::setLine(char const*)>
      batLowCnt = -800;
    ab82:	4b39      	ldr	r3, [pc, #228]	; (ac68 <URobot::batteryMonitoring()+0x228>)
    ab84:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
}
    ab88:	b01c      	add	sp, #112	; 0x70
    ab8a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((ad.batVoltRawAD < batteryIdleVoltageInt and ad.batVoltRawAD > int(5.3 / batVoltIntToFloat)) or batteryHalt)
    ab8c:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    ab90:	2b00      	cmp	r3, #0
    ab92:	d1a4      	bne.n	aade <URobot::batteryMonitoring()+0x9e>
    batLowCnt = 0;
    ab94:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
}
    ab98:	b01c      	add	sp, #112	; 0x70
    ab9a:	bd70      	pop	{r4, r5, r6, pc}
    if (batLowCnt > shutDownSamples or batteryHalt)
    ab9c:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    aba0:	2b00      	cmp	r3, #0
    aba2:	f43f af69 	beq.w	aa78 <URobot::batteryMonitoring()+0x38>
    aba6:	e7c0      	b.n	ab2a <URobot::batteryMonitoring()+0xea>
        usb.send("# Battery low! (shut down all (but USB) power!)\r\n");
    aba8:	4930      	ldr	r1, [pc, #192]	; (ac6c <URobot::batteryMonitoring()+0x22c>)
    abaa:	4827      	ldr	r0, [pc, #156]	; (ac48 <URobot::batteryMonitoring()+0x208>)
    abac:	f001 fd2e 	bl	c60c <UUSB::send(char const*)>
    abb0:	e7db      	b.n	ab6a <URobot::batteryMonitoring()+0x12a>
      snprintf(s, MSL, "# Battery low - going POWER OFF in %.0f second!\r\n", (shutDownSamples - batLowCnt) * service.sampleTime_sec());
    abb2:	1a2b      	subs	r3, r5, r0
    abb4:	4a2e      	ldr	r2, [pc, #184]	; (ac70 <URobot::batteryMonitoring()+0x230>)
    abb6:	2164      	movs	r1, #100	; 0x64
    abb8:	a803      	add	r0, sp, #12
    abba:	ee07 3a90 	vmov	s15, r3
    abbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    abc2:	ee27 7a87 	vmul.f32	s14, s15, s14
    abc6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    abca:	ed8d 7b00 	vstr	d7, [sp]
    abce:	f010 fdf1 	bl	1b7b4 <snprintf>
      usb.send(s);
    abd2:	a903      	add	r1, sp, #12
    abd4:	481c      	ldr	r0, [pc, #112]	; (ac48 <URobot::batteryMonitoring()+0x208>)
    abd6:	f001 fd19 	bl	c60c <UUSB::send(char const*)>
      if (batLowCnt >= 5000)
    abda:	f8d4 0338 	ldr.w	r0, [r4, #824]	; 0x338
    abde:	f241 3387 	movw	r3, #4999	; 0x1387
    abe2:	4298      	cmp	r0, r3
    abe4:	dd9f      	ble.n	ab26 <URobot::batteryMonitoring()+0xe6>
        if (servo.servoEnabled[0] or servo.servoEnabled[1] or servo.servoEnabled[2])
    abe6:	4e1c      	ldr	r6, [pc, #112]	; (ac58 <URobot::batteryMonitoring()+0x218>)
    abe8:	7d33      	ldrb	r3, [r6, #20]
    abea:	b923      	cbnz	r3, abf6 <URobot::batteryMonitoring()+0x1b6>
    abec:	7d73      	ldrb	r3, [r6, #21]
    abee:	b913      	cbnz	r3, abf6 <URobot::batteryMonitoring()+0x1b6>
    abf0:	7db3      	ldrb	r3, [r6, #22]
    abf2:	2b00      	cmp	r3, #0
    abf4:	d097      	beq.n	ab26 <URobot::batteryMonitoring()+0xe6>
          usb.send("# Battery low - disabling servo!\r\n");
    abf6:	491f      	ldr	r1, [pc, #124]	; (ac74 <URobot::batteryMonitoring()+0x234>)
    abf8:	4813      	ldr	r0, [pc, #76]	; (ac48 <URobot::batteryMonitoring()+0x208>)
    abfa:	f001 fd07 	bl	c60c <UUSB::send(char const*)>
      if (serviIdx < 4 or robot.robotHWversion != 9)
    abfe:	4a18      	ldr	r2, [pc, #96]	; (ac60 <URobot::batteryMonitoring()+0x220>)
        servoRef[serviIdx] = pwm;
    ac00:	2300      	movs	r3, #0
    if (batLowCnt > shutDownSamples or batteryHalt)
    ac02:	f8d4 0338 	ldr.w	r0, [r4, #824]	; 0x338
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ac06:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
        servoRef[serviIdx] = pwm;
    ac0a:	8773      	strh	r3, [r6, #58]	; 0x3a
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ac0c:	2a09      	cmp	r2, #9
        servoRef[serviIdx] = pwm;
    ac0e:	63f3      	str	r3, [r6, #60]	; 0x3c
    ac10:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
        servoEnaRef[serviIdx] = enable;
    ac14:	6473      	str	r3, [r6, #68]	; 0x44
        servoVel[serviIdx] = vel;
    ac16:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
      if (serviIdx < 4 or robot.robotHWversion != 9)
    ac1a:	d084      	beq.n	ab26 <URobot::batteryMonitoring()+0xe6>
        servoRef[serviIdx] = pwm;
    ac1c:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
        servoEnaRef[serviIdx] = enable;
    ac20:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
        servoVel[serviIdx] = vel;
    ac24:	8733      	strh	r3, [r6, #56]	; 0x38
    ac26:	e77e      	b.n	ab26 <URobot::batteryMonitoring()+0xe6>
    ac28:	66666666 	.word	0x66666666
    ac2c:	40246666 	.word	0x40246666
    ac30:	33333333 	.word	0x33333333
    ac34:	40153333 	.word	0x40153333
    ac38:	2000e89c 	.word	0x2000e89c
    ac3c:	42004000 	.word	0x42004000
    ac40:	2000eb18 	.word	0x2000eb18
    ac44:	20005820 	.word	0x20005820
    ac48:	2000fac4 	.word	0x2000fac4
    ac4c:	2000e0c8 	.word	0x2000e0c8
    ac50:	49742400 	.word	0x49742400
    ac54:	10624dd3 	.word	0x10624dd3
    ac58:	2000fa64 	.word	0x2000fa64
    ac5c:	20005768 	.word	0x20005768
    ac60:	2000f660 	.word	0x2000f660
    ac64:	200057b4 	.word	0x200057b4
    ac68:	fffffce0 	.word	0xfffffce0
    ac6c:	20005780 	.word	0x20005780
    ac70:	20005710 	.word	0x20005710
    ac74:	20005744 	.word	0x20005744

0000ac78 <URobot::powerOff(float)>:
}

void URobot::powerOff(float after)
{ // no warning, just off
  powerOffCntDown = 1000;
  if (after < -0.5)
    ac78:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
  powerOffCntDown = 1000;
    ac7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{ // no warning, just off
    ac80:	b510      	push	{r4, lr}
  if (after < -0.5)
    ac82:	eeb4 0ae7 	vcmpe.f32	s0, s15
{ // no warning, just off
    ac86:	4604      	mov	r4, r0
    ac88:	ed2d 8b02 	vpush	{d8}
  if (after < -0.5)
    ac8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{ // no warning, just off
    ac90:	b090      	sub	sp, #64	; 0x40
  powerOffCntDown = 1000;
    ac92:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
  if (after < -0.5)
    ac96:	d51a      	bpl.n	acce <URobot::powerOff(float)+0x56>
    // stop count down
    poweringOff = false;
  else 
  {
    if (after > 0.001)
    ac98:	eeb7 8ac0 	vcvt.f64.f32	d8, s0
    poweringOff = false;
    ac9c:	2300      	movs	r3, #0
    ac9e:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
    ledband.setPixel(14, 200, 200, 200);
  }
  // alarm the PC, that we are powering off
  const int MSL = 50;
  char s[MSL];
  snprintf(s, MSL, "power off %.2f\r\n", after);
    aca2:	4a33      	ldr	r2, [pc, #204]	; (ad70 <URobot::powerOff(float)+0xf8>)
    aca4:	2132      	movs	r1, #50	; 0x32
    aca6:	a803      	add	r0, sp, #12
    aca8:	ed8d 8b00 	vstr	d8, [sp]
    acac:	f010 fd82 	bl	1b7b4 <snprintf>
  usb.send(s);
    acb0:	a903      	add	r1, sp, #12
    acb2:	4830      	ldr	r0, [pc, #192]	; (ad74 <URobot::powerOff(float)+0xfc>)
    acb4:	f001 fcaa 	bl	c60c <UUSB::send(char const*)>
  if (poweringOff)
    acb8:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    acbc:	b383      	cbz	r3, ad20 <URobot::powerOff(float)+0xa8>
    display.setLine(s);
    acbe:	a903      	add	r1, sp, #12
    acc0:	482d      	ldr	r0, [pc, #180]	; (ad78 <URobot::powerOff(float)+0x100>)
    acc2:	f7f8 f8cb 	bl	2e5c <UDisplay::setLine(char const*)>
  else
  { // canceled
    powerOn();
  }
}
    acc6:	b010      	add	sp, #64	; 0x40
    acc8:	ecbd 8b02 	vpop	{d8}
    accc:	bd10      	pop	{r4, pc}
    if (after > 0.001)
    acce:	ed9f 7b26 	vldr	d7, [pc, #152]	; ad68 <URobot::powerOff(float)+0xf0>
    acd2:	eeb7 8ac0 	vcvt.f64.f32	d8, s0
    acd6:	4b29      	ldr	r3, [pc, #164]	; (ad7c <URobot::powerOff(float)+0x104>)
    acd8:	eeb4 8bc7 	vcmpe.f64	d8, d7
    acdc:	ed9f 7a28 	vldr	s14, [pc, #160]	; ad80 <URobot::powerOff(float)+0x108>
    ace0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ace4:	dc30      	bgt.n	ad48 <URobot::powerOff(float)+0xd0>
    ace6:	edd3 7a00 	vldr	s15, [r3]
      powerOffCntDown = int(1.0/service.sampleTime_sec());
    acea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
    acf2:	ee87 6a87 	vdiv.f32	s12, s15, s14
    acf6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    acfa:	ee85 7b06 	vdiv.f64	d7, d5, d6
    acfe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    ad02:	ee17 2a90 	vmov	r2, s15
    ledband.setPixel(14, 200, 200, 200);
    ad06:	23c8      	movs	r3, #200	; 0xc8
    poweringOff = true;
    ad08:	2101      	movs	r1, #1
    ledband.setPixel(14, 200, 200, 200);
    ad0a:	481e      	ldr	r0, [pc, #120]	; (ad84 <URobot::powerOff(float)+0x10c>)
    poweringOff = true;
    ad0c:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
    ledband.setPixel(14, 200, 200, 200);
    ad10:	210e      	movs	r1, #14
    powerOffCntMax = powerOffCntDown;
    ad12:	e9c4 22c2 	strd	r2, r2, [r4, #776]	; 0x308
    ledband.setPixel(14, 200, 200, 200);
    ad16:	461a      	mov	r2, r3
    ad18:	9300      	str	r3, [sp, #0]
    ad1a:	f7fb f905 	bl	5f28 <ULedBand::setPixel(int, int, int, int)>
    ad1e:	e7c0      	b.n	aca2 <URobot::powerOff(float)+0x2a>
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    ad20:	4a19      	ldr	r2, [pc, #100]	; (ad88 <URobot::powerOff(float)+0x110>)
    ad22:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine(deviceName);
    ad26:	f104 0131 	add.w	r1, r4, #49	; 0x31
    ad2a:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
  batteryOff = false;
    ad2e:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    ad32:	4811      	ldr	r0, [pc, #68]	; (ad78 <URobot::powerOff(float)+0x100>)
    ad34:	f7f8 f892 	bl	2e5c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    ad38:	4914      	ldr	r1, [pc, #80]	; (ad8c <URobot::powerOff(float)+0x114>)
    ad3a:	480e      	ldr	r0, [pc, #56]	; (ad74 <URobot::powerOff(float)+0xfc>)
    ad3c:	f001 fc66 	bl	c60c <UUSB::send(char const*)>
}
    ad40:	b010      	add	sp, #64	; 0x40
    ad42:	ecbd 8b02 	vpop	{d8}
    ad46:	bd10      	pop	{r4, pc}
    ad48:	edd3 7a00 	vldr	s15, [r3]
    ad4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ad50:	eec7 6a87 	vdiv.f32	s13, s15, s14
      powerOffCntDown = int(after/service.sampleTime_sec());
    ad54:	ee80 7a26 	vdiv.f32	s14, s0, s13
    ad58:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    ad5c:	ee17 2a90 	vmov	r2, s15
    ad60:	e7d1      	b.n	ad06 <URobot::powerOff(float)+0x8e>
    ad62:	bf00      	nop
    ad64:	f3af 8000 	nop.w
    ad68:	d2f1a9fc 	.word	0xd2f1a9fc
    ad6c:	3f50624d 	.word	0x3f50624d
    ad70:	20005ab0 	.word	0x20005ab0
    ad74:	2000fac4 	.word	0x2000fac4
    ad78:	2000eb18 	.word	0x2000eb18
    ad7c:	2000e0c8 	.word	0x2000e0c8
    ad80:	49742400 	.word	0x49742400
    ad84:	2000f1ec 	.word	0x2000f1ec
    ad88:	42004000 	.word	0x42004000
    ad8c:	20005820 	.word	0x20005820

0000ad90 <URobot::tick()>:
  batteryVoltage = getBatteryVoltage(ad.batVoltRawAD);
    ad90:	4bb9      	ldr	r3, [pc, #740]	; (b078 <URobot::tick()+0x2e8>)
  return adValue * batVoltIntToFloat;
    ad92:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
    ad96:	8b9b      	ldrh	r3, [r3, #28]
    ad98:	ee07 3a90 	vmov	s15, r3
  tickCnt++;
    ad9c:	f8d0 32f8 	ldr.w	r3, [r0, #760]	; 0x2f8
  return adValue * batVoltIntToFloat;
    ada0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  tickCnt++;
    ada4:	3301      	adds	r3, #1
{ // safety things and timing
    ada6:	b570      	push	{r4, r5, r6, lr}
  return adValue * batVoltIntToFloat;
    ada8:	ee67 7a87 	vmul.f32	s15, s15, s14
{ // safety things and timing
    adac:	4604      	mov	r4, r0
    adae:	ed2d 8b02 	vpush	{d8}
  tickCnt++;
    adb2:	f8c0 32f8 	str.w	r3, [r0, #760]	; 0x2f8
{ // safety things and timing
    adb6:	b0d0      	sub	sp, #320	; 0x140
  batteryVoltage = getBatteryVoltage(ad.batVoltRawAD);
    adb8:	edc0 7a05 	vstr	s15, [r0, #20]
  batteryMonitoring();
    adbc:	f7ff fe40 	bl	aa40 <URobot::batteryMonitoring()>
  bool b = not digitalRead(PIN_START_BUTTON);
    adc0:	2025      	movs	r0, #37	; 0x25
    adc2:	f00b f945 	bl	16050 <digitalRead>
    if (buttonCnt == 0)
    adc6:	69e3      	ldr	r3, [r4, #28]
  if (b)
    adc8:	2800      	cmp	r0, #0
    adca:	f040 80cc 	bne.w	af66 <URobot::tick()+0x1d6>
    if (buttonCnt == 0)
    adce:	2b00      	cmp	r3, #0
    add0:	d156      	bne.n	ae80 <URobot::tick()+0xf0>
    return float(time_us)*1e-6;
    add2:	4baa      	ldr	r3, [pc, #680]	; (b07c <URobot::tick()+0x2ec>)
    add4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    add8:	f00e fba8 	bl	1952c <__aeabi_ul2f>
    addc:	ee07 0a90 	vmov	s15, r0
      buttonCnt = 50;
    ade0:	2332      	movs	r3, #50	; 0x32
    ade2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    ade6:	61e3      	str	r3, [r4, #28]
    ade8:	ed9f 6b9f 	vldr	d6, [pc, #636]	; b068 <URobot::tick()+0x2d8>
    adec:	ee27 7b06 	vmul.f64	d7, d7, d6
    adf0:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
    adf4:	eeb0 7a48 	vmov.f32	s14, s16
      pressTime = service.time_sec();
    adf8:	ed84 8a1c 	vstr	s16, [r4, #112]	; 0x70
    if ((service.time_sec() - pressTime) > 5.0)
    adfc:	ee37 7a48 	vsub.f32	s14, s14, s16
    ae00:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    ae04:	eeb4 7ae7 	vcmpe.f32	s14, s15
    ae08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae0c:	dd0a      	ble.n	ae24 <URobot::tick()+0x94>
      if (usb.usbIsUp)
    ae0e:	4b9c      	ldr	r3, [pc, #624]	; (b080 <URobot::tick()+0x2f0>)
    ae10:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
    ae14:	2b00      	cmp	r3, #0
    ae16:	f000 80b0 	beq.w	af7a <URobot::tick()+0x1ea>
        powerOff(40.0);
    ae1a:	ed9f 0a9a 	vldr	s0, [pc, #616]	; b084 <URobot::tick()+0x2f4>
    ae1e:	4620      	mov	r0, r4
    ae20:	f7ff ff2a 	bl	ac78 <URobot::powerOff(float)>
  if (poweringOff)
    ae24:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    ae28:	2a00      	cmp	r2, #0
    ae2a:	d166      	bne.n	aefa <URobot::tick()+0x16a>
	return systick_millis_count;
    ae2c:	4b96      	ldr	r3, [pc, #600]	; (b088 <URobot::tick()+0x2f8>)
  int a = millis() % 1000;
    ae2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ae32:	4996      	ldr	r1, [pc, #600]	; (b08c <URobot::tick()+0x2fc>)
    ae34:	681b      	ldr	r3, [r3, #0]
    return toLog and not logFull;
    ae36:	4a96      	ldr	r2, [pc, #600]	; (b090 <URobot::tick()+0x300>)
    ae38:	fba1 5103 	umull	r5, r1, r1, r3
    ae3c:	0989      	lsrs	r1, r1, #6
    ae3e:	fb00 3111 	mls	r1, r0, r1, r3
    ae42:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
    ae46:	2b00      	cmp	r3, #0
    ae48:	d041      	beq.n	aece <URobot::tick()+0x13e>
    ae4a:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d13d      	bne.n	aece <URobot::tick()+0x13e>
    if (robotHWversion == 9)
    ae52:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ae56:	2b09      	cmp	r3, #9
    ae58:	bf14      	ite	ne
    ae5a:	2006      	movne	r0, #6
    ae5c:	2000      	moveq	r0, #0
    if (value == 1)
    ae5e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    ae62:	d322      	bcc.n	aeaa <URobot::tick()+0x11a>
    setStatusLed ( a < 500 );
    ae64:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    ae68:	bfac      	ite	ge
    ae6a:	2100      	movge	r1, #0
    ae6c:	2101      	movlt	r1, #1
      analogWrite(pin, value << 3);
    ae6e:	00c9      	lsls	r1, r1, #3
    ae70:	f00b fdf6 	bl	16a60 <analogWrite>
  if (missionAutoStart and tickCnt == 300)
    ae74:	7e63      	ldrb	r3, [r4, #25]
    ae76:	b9fb      	cbnz	r3, aeb8 <URobot::tick()+0x128>
}
    ae78:	b050      	add	sp, #320	; 0x140
    ae7a:	ecbd 8b02 	vpop	{d8}
    ae7e:	bd70      	pop	{r4, r5, r6, pc}
    else if (buttonCnt < 20)
    ae80:	2b13      	cmp	r3, #19
    ae82:	f340 8082 	ble.w	af8a <URobot::tick()+0x1fa>
    ae86:	4b7d      	ldr	r3, [pc, #500]	; (b07c <URobot::tick()+0x2ec>)
    if ((service.time_sec() - pressTime) > 5.0)
    ae88:	ed94 8a1c 	vldr	s16, [r4, #112]	; 0x70
    ae8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    ae90:	f00e fb4c 	bl	1952c <__aeabi_ul2f>
    ae94:	ee07 0a90 	vmov	s15, r0
    ae98:	ed9f 6b73 	vldr	d6, [pc, #460]	; b068 <URobot::tick()+0x2d8>
    ae9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    aea0:	ee27 7b06 	vmul.f64	d7, d7, d6
    aea4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    aea8:	e7a8      	b.n	adfc <URobot::tick()+0x6c>
      analogWrite(pin, 4095);
    aeaa:	f640 71ff 	movw	r1, #4095	; 0xfff
    aeae:	f00b fdd7 	bl	16a60 <analogWrite>
  if (missionAutoStart and tickCnt == 300)
    aeb2:	7e63      	ldrb	r3, [r4, #25]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	d0df      	beq.n	ae78 <URobot::tick()+0xe8>
    aeb8:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
    aebc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    aec0:	d1da      	bne.n	ae78 <URobot::tick()+0xe8>
    missionStart = true;
    aec2:	2301      	movs	r3, #1
    aec4:	7623      	strb	r3, [r4, #24]
}
    aec6:	b050      	add	sp, #320	; 0x140
    aec8:	ecbd 8b02 	vpop	{d8}
    aecc:	bd70      	pop	{r4, r5, r6, pc}
    if (robotHWversion == 9)
    aece:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    aed2:	2b09      	cmp	r3, #9
    aed4:	bf14      	ite	ne
    aed6:	2006      	movne	r0, #6
    aed8:	2000      	moveq	r0, #0
    if (value == 1)
    aeda:	2963      	cmp	r1, #99	; 0x63
    aedc:	d9e5      	bls.n	aeaa <URobot::tick()+0x11a>
    setStatusLed ( a < 100 );
    aede:	bfd4      	ite	le
    aee0:	2101      	movle	r1, #1
    aee2:	2100      	movgt	r1, #0
      analogWrite(pin, value << 3);
    aee4:	00c9      	lsls	r1, r1, #3
    aee6:	f00b fdbb 	bl	16a60 <analogWrite>
    aeea:	e7e2      	b.n	aeb2 <URobot::tick()+0x122>
    if (buttonCnt == 1 and not poweringOff)
    aeec:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    aef0:	2b00      	cmp	r3, #0
    aef2:	f000 80af 	beq.w	b054 <URobot::tick()+0x2c4>
      buttonCnt--;
    aef6:	2300      	movs	r3, #0
    aef8:	61e3      	str	r3, [r4, #28]
    int tickPerSec = 1e6 / service.sampleTime_us;
    aefa:	4960      	ldr	r1, [pc, #384]	; (b07c <URobot::tick()+0x2ec>)
    if (powerOffCntDown == powerOffCntMax)
    aefc:	e9d4 23c2 	ldrd	r2, r3, [r4, #776]	; 0x308
    int tickPerSec = 1e6 / service.sampleTime_us;
    af00:	680d      	ldr	r5, [r1, #0]
    if (powerOffCntDown == powerOffCntMax)
    af02:	4293      	cmp	r3, r2
    af04:	d049      	beq.n	af9a <URobot::tick()+0x20a>
    int n = powerOffCntMax / 900;
    af06:	4963      	ldr	r1, [pc, #396]	; (b094 <URobot::tick()+0x304>)
    af08:	fb81 0103 	smull	r0, r1, r1, r3
    af0c:	4419      	add	r1, r3
    af0e:	17db      	asrs	r3, r3, #31
    af10:	ebc3 2361 	rsb	r3, r3, r1, asr #9
    else if (powerOffCntDown % n == 0)
    af14:	fb92 f1f3 	sdiv	r1, r2, r3
    af18:	fb03 2311 	mls	r3, r3, r1, r2
    af1c:	2b00      	cmp	r3, #0
    af1e:	d064      	beq.n	afea <URobot::tick()+0x25a>
    powerOffCntDown--;
    af20:	3a01      	subs	r2, #1
    if (powerOffCntDown <= 0)
    af22:	2a00      	cmp	r2, #0
    powerOffCntDown--;
    af24:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    if (powerOffCntDown <= 0)
    af28:	dd4f      	ble.n	afca <URobot::tick()+0x23a>
    int tickPerSec = 1e6 / service.sampleTime_us;
    af2a:	ee07 5a90 	vmov	s15, r5
    af2e:	ed9f 5b50 	vldr	d5, [pc, #320]	; b070 <URobot::tick()+0x2e0>
    af32:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    af36:	ee85 7b06 	vdiv.f64	d7, d5, d6
    af3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    af3e:	ee17 1a90 	vmov	r1, s15
    else if (powerOffCntDown % tickPerSec == 1)
    af42:	fb92 f3f1 	sdiv	r3, r2, r1
    af46:	fb01 2213 	mls	r2, r1, r3, r2
    af4a:	2a01      	cmp	r2, #1
    af4c:	f47f af6e 	bne.w	ae2c <URobot::tick()+0x9c>
      snprintf(s, MSL, "power off %d sec\n", powerOffCntDown / tickPerSec);
    af50:	4a51      	ldr	r2, [pc, #324]	; (b098 <URobot::tick()+0x308>)
    af52:	f44f 7196 	mov.w	r1, #300	; 0x12c
    af56:	a805      	add	r0, sp, #20
    af58:	f010 fc2c 	bl	1b7b4 <snprintf>
      display.setLine(s);
    af5c:	a905      	add	r1, sp, #20
    af5e:	484f      	ldr	r0, [pc, #316]	; (b09c <URobot::tick()+0x30c>)
    af60:	f7f7 ff7c 	bl	2e5c <UDisplay::setLine(char const*)>
    af64:	e762      	b.n	ae2c <URobot::tick()+0x9c>
    if (buttonCnt == 1 and not poweringOff)
    af66:	2b01      	cmp	r3, #1
    af68:	d0c0      	beq.n	aeec <URobot::tick()+0x15c>
    if (buttonCnt > 0)
    af6a:	2b00      	cmp	r3, #0
    af6c:	f77f af5a 	ble.w	ae24 <URobot::tick()+0x94>
      buttonCnt--;
    af70:	3b01      	subs	r3, #1
  if (poweringOff)
    af72:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
      buttonCnt--;
    af76:	61e3      	str	r3, [r4, #28]
    af78:	e756      	b.n	ae28 <URobot::tick()+0x98>
        powerOff(0.00003);
    af7a:	ed9f 0a49 	vldr	s0, [pc, #292]	; b0a0 <URobot::tick()+0x310>
    af7e:	4620      	mov	r0, r4
    af80:	f7ff fe7a 	bl	ac78 <URobot::powerOff(float)>
  if (poweringOff)
    af84:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    af88:	e74e      	b.n	ae28 <URobot::tick()+0x98>
      buttonCnt++;
    af8a:	3301      	adds	r3, #1
    af8c:	4a3b      	ldr	r2, [pc, #236]	; (b07c <URobot::tick()+0x2ec>)
    if ((service.time_sec() - pressTime) > 5.0)
    af8e:	ed94 8a1c 	vldr	s16, [r4, #112]	; 0x70
      buttonCnt++;
    af92:	61e3      	str	r3, [r4, #28]
    af94:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    af98:	e77a      	b.n	ae90 <URobot::tick()+0x100>
    powerOffCntDown--;
    af9a:	3a01      	subs	r2, #1
        r1[i] = 100;
    af9c:	2364      	movs	r3, #100	; 0x64
    if (powerOffCntDown <= 0)
    af9e:	2a00      	cmp	r2, #0
        r1[i] = 100;
    afa0:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
        r2[i] = 100;
    afa4:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
        r3[i] = 100;
    afa8:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
        r1[i] = 100;
    afac:	f8c4 3314 	str.w	r3, [r4, #788]	; 0x314
        r2[i] = 100;
    afb0:	f8c4 3320 	str.w	r3, [r4, #800]	; 0x320
        r3[i] = 100;
    afb4:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
        r1[i] = 100;
    afb8:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
        r2[i] = 100;
    afbc:	f8c4 3324 	str.w	r3, [r4, #804]	; 0x324
        r3[i] = 100;
    afc0:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
    powerOffCntDown--;
    afc4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    if (powerOffCntDown <= 0)
    afc8:	dcaf      	bgt.n	af2a <URobot::tick()+0x19a>
  batteryOff = true;
    afca:	2301      	movs	r3, #1
				CORE_PIN35_PORTCLEAR = CORE_PIN35_BITMASK;
    afcc:	4a35      	ldr	r2, [pc, #212]	; (b0a4 <URobot::tick()+0x314>)
    afce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  display.setLine("Power off");
    afd2:	4935      	ldr	r1, [pc, #212]	; (b0a8 <URobot::tick()+0x318>)
    afd4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  batteryOff = true;
    afd8:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  display.setLine("Power off");
    afdc:	482f      	ldr	r0, [pc, #188]	; (b09c <URobot::tick()+0x30c>)
    afde:	f7f7 ff3d 	bl	2e5c <UDisplay::setLine(char const*)>
      poweringOff = false;
    afe2:	2300      	movs	r3, #0
    afe4:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    afe8:	e720      	b.n	ae2c <URobot::tick()+0x9c>
  if (v[0] > 0)
    afea:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
    afee:	2900      	cmp	r1, #0
    aff0:	dd7e      	ble.n	b0f0 <URobot::tick()+0x360>
    v[0]--;
    aff2:	3901      	subs	r1, #1
  if (v[0] > 0)
    aff4:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    aff8:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    v[0]--;
    affc:	f8c4 1328 	str.w	r1, [r4, #808]	; 0x328
        snprintf(s, MSL, "# Shut down %d %d %d (count=%d)\n", r1[0], r2[0], r3[0], powerOffCntDown);
    b000:	9000      	str	r0, [sp, #0]
    b002:	a805      	add	r0, sp, #20
    b004:	e9cd 1201 	strd	r1, r2, [sp, #4]
    b008:	4a28      	ldr	r2, [pc, #160]	; (b0ac <URobot::tick()+0x31c>)
    b00a:	2196      	movs	r1, #150	; 0x96
    b00c:	f010 fbd2 	bl	1b7b4 <snprintf>
        usb.send(s);
    b010:	a905      	add	r1, sp, #20
    b012:	481b      	ldr	r0, [pc, #108]	; (b080 <URobot::tick()+0x2f0>)
    b014:	f001 fafa 	bl	c60c <UUSB::send(char const*)>
      ledband.setPixel(14, r1[0], r1[1] , r1[2]);
    b018:	f8d4 2310 	ldr.w	r2, [r4, #784]	; 0x310
    b01c:	4824      	ldr	r0, [pc, #144]	; (b0b0 <URobot::tick()+0x320>)
    b01e:	e9d4 31c5 	ldrd	r3, r1, [r4, #788]	; 0x314
    b022:	9100      	str	r1, [sp, #0]
    b024:	210e      	movs	r1, #14
    b026:	f7fa ff7f 	bl	5f28 <ULedBand::setPixel(int, int, int, int)>
      ledband.setPixel(15, r2[0], r2[1] , r2[2]);
    b02a:	f8d4 231c 	ldr.w	r2, [r4, #796]	; 0x31c
    b02e:	4820      	ldr	r0, [pc, #128]	; (b0b0 <URobot::tick()+0x320>)
    b030:	e9d4 31c8 	ldrd	r3, r1, [r4, #800]	; 0x320
    b034:	9100      	str	r1, [sp, #0]
    b036:	210f      	movs	r1, #15
    b038:	f7fa ff76 	bl	5f28 <ULedBand::setPixel(int, int, int, int)>
      ledband.setPixel(16, r3[0], r3[1] , r3[2]);
    b03c:	f8d4 2328 	ldr.w	r2, [r4, #808]	; 0x328
    b040:	481b      	ldr	r0, [pc, #108]	; (b0b0 <URobot::tick()+0x320>)
    b042:	e9d4 31cb 	ldrd	r3, r1, [r4, #812]	; 0x32c
    b046:	9100      	str	r1, [sp, #0]
    b048:	2110      	movs	r1, #16
    b04a:	f7fa ff6d 	bl	5f28 <ULedBand::setPixel(int, int, int, int)>
    powerOffCntDown--;
    b04e:	f8d4 2308 	ldr.w	r2, [r4, #776]	; 0x308
    b052:	e765      	b.n	af20 <URobot::tick()+0x190>
      if (usb.use_CRC)
    b054:	4d0a      	ldr	r5, [pc, #40]	; (b080 <URobot::tick()+0x2f0>)
    b056:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    b05a:	bb5b      	cbnz	r3, b0b4 <URobot::tick()+0x324>
      if (batteryOff)
    b05c:	f894 3334 	ldrb.w	r3, [r4, #820]	; 0x334
    b060:	bb9b      	cbnz	r3, b0ca <URobot::tick()+0x33a>
      buttonCnt--;
    b062:	61e3      	str	r3, [r4, #28]
  if (poweringOff)
    b064:	e6e2      	b.n	ae2c <URobot::tick()+0x9c>
    b066:	bf00      	nop
    b068:	a0b5ed8d 	.word	0xa0b5ed8d
    b06c:	3eb0c6f7 	.word	0x3eb0c6f7
    b070:	00000000 	.word	0x00000000
    b074:	412e8480 	.word	0x412e8480
    b078:	2000e89c 	.word	0x2000e89c
    b07c:	2000e0c8 	.word	0x2000e0c8
    b080:	2000fac4 	.word	0x2000fac4
    b084:	42200000 	.word	0x42200000
    b088:	2000fab8 	.word	0x2000fab8
    b08c:	10624dd3 	.word	0x10624dd3
    b090:	2000f24c 	.word	0x2000f24c
    b094:	91a2b3c5 	.word	0x91a2b3c5
    b098:	2000580c 	.word	0x2000580c
    b09c:	2000eb18 	.word	0x2000eb18
    b0a0:	37fba882 	.word	0x37fba882
    b0a4:	42004000 	.word	0x42004000
    b0a8:	200057b4 	.word	0x200057b4
    b0ac:	200057e8 	.word	0x200057e8
    b0b0:	2000f1ec 	.word	0x2000f1ec
        usb.send("start\r\n");
    b0b4:	4936      	ldr	r1, [pc, #216]	; (b190 <URobot::tick()+0x400>)
    b0b6:	4628      	mov	r0, r5
    b0b8:	f001 faa8 	bl	c60c <UUSB::send(char const*)>
        usb.send("# sent start (button release)\r\n");
    b0bc:	4935      	ldr	r1, [pc, #212]	; (b194 <URobot::tick()+0x404>)
    b0be:	4628      	mov	r0, r5
    b0c0:	f001 faa4 	bl	c60c <UUSB::send(char const*)>
      if (batteryOff)
    b0c4:	f894 3334 	ldrb.w	r3, [r4, #820]	; 0x334
    b0c8:	b183      	cbz	r3, b0ec <URobot::tick()+0x35c>
				CORE_PIN35_PORTSET = CORE_PIN35_BITMASK;
    b0ca:	4a33      	ldr	r2, [pc, #204]	; (b198 <URobot::tick()+0x408>)
    b0cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  batteryOff = false;
    b0d0:	2300      	movs	r3, #0
  display.setLine(deviceName);
    b0d2:	f104 0131 	add.w	r1, r4, #49	; 0x31
    b0d6:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    b0da:	4830      	ldr	r0, [pc, #192]	; (b19c <URobot::tick()+0x40c>)
  batteryOff = false;
    b0dc:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
  display.setLine(deviceName);
    b0e0:	f7f7 febc 	bl	2e5c <UDisplay::setLine(char const*)>
  usb.send("# URobot:: power on\r\n");
    b0e4:	492e      	ldr	r1, [pc, #184]	; (b1a0 <URobot::tick()+0x410>)
    b0e6:	482f      	ldr	r0, [pc, #188]	; (b1a4 <URobot::tick()+0x414>)
    b0e8:	f001 fa90 	bl	c60c <UUSB::send(char const*)>
    if (buttonCnt > 0)
    b0ec:	69e3      	ldr	r3, [r4, #28]
}
    b0ee:	e73c      	b.n	af6a <URobot::tick()+0x1da>
  else if (v[1] > 0)
    b0f0:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	dd07      	ble.n	b108 <URobot::tick()+0x378>
    v[1]--;
    b0f8:	3b01      	subs	r3, #1
  if (v[0] > 0)
    b0fa:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    v[1]--;
    b0fe:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
  if (v[0] > 0)
    b102:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b106:	e77b      	b.n	b000 <URobot::tick()+0x270>
  else if (v[2] > 0)
    b108:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
    b10c:	2b00      	cmp	r3, #0
    b10e:	dd07      	ble.n	b120 <URobot::tick()+0x390>
    v[2]--;
    b110:	3b01      	subs	r3, #1
  if (v[0] > 0)
    b112:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    v[2]--;
    b116:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
  if (v[0] > 0)
    b11a:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b11e:	e76f      	b.n	b000 <URobot::tick()+0x270>
    b120:	f8d4 031c 	ldr.w	r0, [r4, #796]	; 0x31c
    b124:	2800      	cmp	r0, #0
    b126:	dd05      	ble.n	b134 <URobot::tick()+0x3a4>
    v[0]--;
    b128:	3801      	subs	r0, #1
  if (v[0] > 0)
    b12a:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    v[0]--;
    b12e:	f8c4 031c 	str.w	r0, [r4, #796]	; 0x31c
  return counting;
    b132:	e765      	b.n	b000 <URobot::tick()+0x270>
  else if (v[1] > 0)
    b134:	f8d4 3320 	ldr.w	r3, [r4, #800]	; 0x320
    b138:	2b00      	cmp	r3, #0
    b13a:	dd05      	ble.n	b148 <URobot::tick()+0x3b8>
    v[1]--;
    b13c:	3b01      	subs	r3, #1
    b13e:	f8c4 3320 	str.w	r3, [r4, #800]	; 0x320
  if (v[0] > 0)
    b142:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b146:	e75b      	b.n	b000 <URobot::tick()+0x270>
  else if (v[2] > 0)
    b148:	f8d4 3324 	ldr.w	r3, [r4, #804]	; 0x324
    b14c:	2b00      	cmp	r3, #0
    b14e:	dd05      	ble.n	b15c <URobot::tick()+0x3cc>
    v[2]--;
    b150:	3b01      	subs	r3, #1
    b152:	f8c4 3324 	str.w	r3, [r4, #804]	; 0x324
  if (v[0] > 0)
    b156:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b15a:	e751      	b.n	b000 <URobot::tick()+0x270>
    b15c:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    b160:	2b00      	cmp	r3, #0
    b162:	dd03      	ble.n	b16c <URobot::tick()+0x3dc>
    v[0]--;
    b164:	3b01      	subs	r3, #1
    b166:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
    b16a:	e749      	b.n	b000 <URobot::tick()+0x270>
  else if (v[1] > 0)
    b16c:	f8d4 6314 	ldr.w	r6, [r4, #788]	; 0x314
    b170:	2e00      	cmp	r6, #0
    b172:	dd03      	ble.n	b17c <URobot::tick()+0x3ec>
    v[1]--;
    b174:	3e01      	subs	r6, #1
    b176:	f8c4 6314 	str.w	r6, [r4, #788]	; 0x314
    b17a:	e741      	b.n	b000 <URobot::tick()+0x270>
  else if (v[2] > 0)
    b17c:	f8d4 6318 	ldr.w	r6, [r4, #792]	; 0x318
    b180:	2e00      	cmp	r6, #0
    b182:	f77f af3d 	ble.w	b000 <URobot::tick()+0x270>
    v[2]--;
    b186:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    b18a:	f8c4 c318 	str.w	ip, [r4, #792]	; 0x318
    b18e:	e737      	b.n	b000 <URobot::tick()+0x270>
    b190:	200057c0 	.word	0x200057c0
    b194:	200057c8 	.word	0x200057c8
    b198:	42004000 	.word	0x42004000
    b19c:	2000eb18 	.word	0x2000eb18
    b1a0:	20005820 	.word	0x20005820
    b1a4:	2000fac4 	.word	0x2000fac4

0000b1a8 <URobot::decode(char const*)>:
{
    b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1ac:	460d      	mov	r5, r1
    b1ae:	b09c      	sub	sp, #112	; 0x70
    b1b0:	4606      	mov	r6, r0
  if (strncmp(buf, "setidx ", 7) == 0)
    b1b2:	2207      	movs	r2, #7
    b1b4:	49ba      	ldr	r1, [pc, #744]	; (b4a0 <URobot::decode(char const*)+0x2f8>)
    b1b6:	4628      	mov	r0, r5
    b1b8:	f010 fdb4 	bl	1bd24 <strncmp>
    b1bc:	2800      	cmp	r0, #0
    b1be:	d05d      	beq.n	b27c <URobot::decode(char const*)+0xd4>
  else if (strncmp(buf, "sethw ", 6) == 0)
    b1c0:	2206      	movs	r2, #6
    b1c2:	49b8      	ldr	r1, [pc, #736]	; (b4a4 <URobot::decode(char const*)+0x2fc>)
    b1c4:	4628      	mov	r0, r5
    b1c6:	f010 fdad 	bl	1bd24 <strncmp>
    b1ca:	b360      	cbz	r0, b226 <URobot::decode(char const*)+0x7e>
  else if (strncmp(buf, "setid ", 6) == 0)
    b1cc:	2206      	movs	r2, #6
    b1ce:	49b6      	ldr	r1, [pc, #728]	; (b4a8 <URobot::decode(char const*)+0x300>)
    b1d0:	4628      	mov	r0, r5
    b1d2:	f010 fda7 	bl	1bd24 <strncmp>
    b1d6:	2800      	cmp	r0, #0
    b1d8:	d15e      	bne.n	b298 <URobot::decode(char const*)+0xf0>
    const char * p1 = &buf[6];
    b1da:	3506      	adds	r5, #6
    b1dc:	462f      	mov	r7, r5
    while (isSpace(*p1))
    b1de:	f815 8b01 	ldrb.w	r8, [r5], #1
// Checks for white-space characters. For the avr-libc library,
// these are: space, formfeed ('\f'), newline ('\n'), carriage
// return ('\r'), horizontal tab ('\t'), and vertical tab ('\v').
inline boolean isSpace(int c)
{
  return ( isspace (c) == 0 ? false : true);
    b1e2:	4640      	mov	r0, r8
    b1e4:	f010 f916 	bl	1b414 <isspace>
    b1e8:	4604      	mov	r4, r0
    b1ea:	2800      	cmp	r0, #0
    b1ec:	d1f6      	bne.n	b1dc <URobot::decode(char const*)+0x34>
    if (*p1 < ' ')
    b1ee:	f1b8 0f1f 	cmp.w	r8, #31
    b1f2:	d86e      	bhi.n	b2d2 <URobot::decode(char const*)+0x12a>
            deviceName[0] = '_';
    b1f4:	235f      	movs	r3, #95	; 0x5f
            deviceName[1] = '\0';
    b1f6:	f886 0032 	strb.w	r0, [r6, #50]	; 0x32
      usb.send("# set name to nothing ('_')\r\n");
    b1fa:	49ac      	ldr	r1, [pc, #688]	; (b4ac <URobot::decode(char const*)+0x304>)
    b1fc:	48ac      	ldr	r0, [pc, #688]	; (b4b0 <URobot::decode(char const*)+0x308>)
            deviceName[0] = '_';
    b1fe:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
      usb.send("# set name to nothing ('_')\r\n");
    b202:	f001 fa03 	bl	c60c <UUSB::send(char const*)>
    if (strncasecmp(deviceName, "robobot", 7) == 0)
    b206:	2207      	movs	r2, #7
    b208:	49aa      	ldr	r1, [pc, #680]	; (b4b4 <URobot::decode(char const*)+0x30c>)
    b20a:	f106 0031 	add.w	r0, r6, #49	; 0x31
    b20e:	f010 fd5b 	bl	1bcc8 <strncasecmp>
    b212:	2800      	cmp	r0, #0
    b214:	f040 809f 	bne.w	b356 <URobot::decode(char const*)+0x1ae>
      robobot = true;
    b218:	2301      	movs	r3, #1
}
    b21a:	2001      	movs	r0, #1
      robobot = true;
    b21c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
}
    b220:	b01c      	add	sp, #112	; 0x70
    b222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char * p1 = &buf[6];
    b226:	3506      	adds	r5, #6
    robotHWversion = strtol(p1, NULL, 10);
    b228:	4601      	mov	r1, r0
    b22a:	220a      	movs	r2, #10
    b22c:	4628      	mov	r0, r5
    b22e:	f010 f8d1 	bl	1b3d4 <strtol>
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b232:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
    robotHWversion = strtol(p1, NULL, 10);
    b236:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
    snprintf(s, MSL, "# URobot:decode  hw=%d from sethw '%s'\r\n", robotHWversion, p1);
    b23a:	b2c3      	uxtb	r3, r0
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b23c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    snprintf(s, MSL, "# URobot:decode  hw=%d from sethw '%s'\r\n", robotHWversion, p1);
    b240:	2164      	movs	r1, #100	; 0x64
    b242:	9500      	str	r5, [sp, #0]
    b244:	a803      	add	r0, sp, #12
    b246:	4a9c      	ldr	r2, [pc, #624]	; (b4b8 <URobot::decode(char const*)+0x310>)
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b248:	ed9f 3b8f 	vldr	d3, [pc, #572]	; b488 <URobot::decode(char const*)+0x2e0>
    b24c:	ed9f 4b90 	vldr	d4, [pc, #576]	; b490 <URobot::decode(char const*)+0x2e8>
    b250:	ed9f 5b91 	vldr	d5, [pc, #580]	; b498 <URobot::decode(char const*)+0x2f0>
    b254:	ee83 6b07 	vdiv.f64	d6, d3, d7
    b258:	ee26 6b04 	vmul.f64	d6, d6, d4
    b25c:	ee86 7b05 	vdiv.f64	d7, d6, d5
    b260:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    b264:	ed86 7a0a 	vstr	s14, [r6, #40]	; 0x28
    snprintf(s, MSL, "# URobot:decode  hw=%d from sethw '%s'\r\n", robotHWversion, p1);
    b268:	f010 faa4 	bl	1b7b4 <snprintf>
    usb.send(s);
    b26c:	a903      	add	r1, sp, #12
    b26e:	4890      	ldr	r0, [pc, #576]	; (b4b0 <URobot::decode(char const*)+0x308>)
    b270:	f001 f9cc 	bl	c60c <UUSB::send(char const*)>
}
    b274:	2001      	movs	r0, #1
    b276:	b01c      	add	sp, #112	; 0x70
    b278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    deviceID = strtol(p1, NULL, 10);
    b27c:	4604      	mov	r4, r0
    b27e:	4601      	mov	r1, r0
    b280:	220a      	movs	r2, #10
    b282:	1de8      	adds	r0, r5, #7
    b284:	f010 f8a6 	bl	1b3d4 <strtol>
    b288:	2896      	cmp	r0, #150	; 0x96
    b28a:	bf98      	it	ls
    b28c:	4604      	movls	r4, r0
}
    b28e:	2001      	movs	r0, #1
    deviceID = strtol(p1, NULL, 10);
    b290:	62f4      	str	r4, [r6, #44]	; 0x2c
}
    b292:	b01c      	add	sp, #112	; 0x70
    b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (strncmp(buf, "pind ", 5) == 0)
    b298:	2205      	movs	r2, #5
    b29a:	4988      	ldr	r1, [pc, #544]	; (b4bc <URobot::decode(char const*)+0x314>)
    b29c:	4628      	mov	r0, r5
    b29e:	f010 fd41 	bl	1bd24 <strncmp>
    b2a2:	b3a8      	cbz	r0, b310 <URobot::decode(char const*)+0x168>
  else if (strncmp(buf, "pinv ", 5) == 0)
    b2a4:	2205      	movs	r2, #5
    b2a6:	4986      	ldr	r1, [pc, #536]	; (b4c0 <URobot::decode(char const*)+0x318>)
    b2a8:	4628      	mov	r0, r5
    b2aa:	f010 fd3b 	bl	1bd24 <strncmp>
    b2ae:	2800      	cmp	r0, #0
    b2b0:	f000 80a2 	beq.w	b3f8 <URobot::decode(char const*)+0x250>
  else if (strncmp(buf, "halt", 4) == 0)
    b2b4:	2204      	movs	r2, #4
    b2b6:	4983      	ldr	r1, [pc, #524]	; (b4c4 <URobot::decode(char const*)+0x31c>)
    b2b8:	4628      	mov	r0, r5
    b2ba:	f010 fd33 	bl	1bd24 <strncmp>
    b2be:	2800      	cmp	r0, #0
    b2c0:	d150      	bne.n	b364 <URobot::decode(char const*)+0x1bc>
    if (buf[4] >= ' ')
    b2c2:	792b      	ldrb	r3, [r5, #4]
    b2c4:	2b1f      	cmp	r3, #31
    b2c6:	f200 8081 	bhi.w	b3cc <URobot::decode(char const*)+0x224>
      batteryHalt = true;
    b2ca:	2301      	movs	r3, #1
    b2cc:	f886 333c 	strb.w	r3, [r6, #828]	; 0x33c
    b2d0:	e7d0      	b.n	b274 <URobot::decode(char const*)+0xcc>
      usb.send("# got new name (get with 'id')\r\n");
    b2d2:	497d      	ldr	r1, [pc, #500]	; (b4c8 <URobot::decode(char const*)+0x320>)
    b2d4:	3f01      	subs	r7, #1
    b2d6:	4876      	ldr	r0, [pc, #472]	; (b4b0 <URobot::decode(char const*)+0x308>)
    b2d8:	f106 0830 	add.w	r8, r6, #48	; 0x30
    b2dc:	f001 f996 	bl	c60c <UUSB::send(char const*)>
      for (int i = 0; i < MAX_NAME_LENGTH-1; i++)
    b2e0:	e009      	b.n	b2f6 <URobot::decode(char const*)+0x14e>
        if (isalnum(*p1))
    b2e2:	f010 f88f 	bl	1b404 <isalnum>
      for (int i = 0; i < MAX_NAME_LENGTH-1; i++)
    b2e6:	3401      	adds	r4, #1
                    deviceName[i] = '_';
    b2e8:	2800      	cmp	r0, #0
    b2ea:	bf08      	it	eq
    b2ec:	255f      	moveq	r5, #95	; 0x5f
      for (int i = 0; i < MAX_NAME_LENGTH-1; i++)
    b2ee:	2c1f      	cmp	r4, #31
    b2f0:	f808 5f01 	strb.w	r5, [r8, #1]!
    b2f4:	d008      	beq.n	b308 <URobot::decode(char const*)+0x160>
        if (*p1 <= ' ')
    b2f6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
    b2fa:	2d20      	cmp	r5, #32
        if (isalnum(*p1))
    b2fc:	4628      	mov	r0, r5
        if (*p1 <= ' ')
    b2fe:	d8f0      	bhi.n	b2e2 <URobot::decode(char const*)+0x13a>
                    deviceName[i] = '\0';
    b300:	4434      	add	r4, r6
    b302:	2300      	movs	r3, #0
    b304:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
            deviceName[MAX_NAME_LENGTH-1] = '\0';
    b308:	2300      	movs	r3, #0
    b30a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    b30e:	e77a      	b.n	b206 <URobot::decode(char const*)+0x5e>
    const char * p1 = &buf[5];
    b310:	1d68      	adds	r0, r5, #5
    debugPin = strtol(p1, (char**)&p1, 10);
    b312:	220a      	movs	r2, #10
    b314:	a903      	add	r1, sp, #12
    const char * p1 = &buf[5];
    b316:	9003      	str	r0, [sp, #12]
    debugPin = strtol(p1, (char**)&p1, 10);
    b318:	f010 f85c 	bl	1b3d4 <strtol>
    int dir = strtol(p1, (char**)&p1, 10);
    b31c:	220a      	movs	r2, #10
    b31e:	a903      	add	r1, sp, #12
    debugPin = strtol(p1, (char**)&p1, 10);
    b320:	f8c6 02fc 	str.w	r0, [r6, #764]	; 0x2fc
    int dir = strtol(p1, (char**)&p1, 10);
    b324:	9803      	ldr	r0, [sp, #12]
    b326:	f010 f855 	bl	1b3d4 <strtol>
    int pud = strtol(p1, (char**)&p1, 10);
    b32a:	220a      	movs	r2, #10
    int dir = strtol(p1, (char**)&p1, 10);
    b32c:	4604      	mov	r4, r0
    int pud = strtol(p1, (char**)&p1, 10);
    b32e:	a903      	add	r1, sp, #12
    b330:	9803      	ldr	r0, [sp, #12]
    b332:	f010 f84f 	bl	1b3d4 <strtol>
    switch (pud)
    b336:	1c43      	adds	r3, r0, #1
    b338:	d041      	beq.n	b3be <URobot::decode(char const*)+0x216>
    b33a:	2801      	cmp	r0, #1
    b33c:	d138      	bne.n	b3b0 <URobot::decode(char const*)+0x208>
      case 1:  pinMode(debugPin, INPUT_PULLUP); break;
    b33e:	2102      	movs	r1, #2
    b340:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
      default: pinMode(debugPin, dir); break;
    b344:	b2e4      	uxtb	r4, r4
      case 1:  pinMode(debugPin, INPUT_PULLUP); break;
    b346:	f00a fe95 	bl	16074 <pinMode>
    pinMode(debugPin, dir);
    b34a:	4621      	mov	r1, r4
    b34c:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
    b350:	f00a fe90 	bl	16074 <pinMode>
    b354:	e78e      	b.n	b274 <URobot::decode(char const*)+0xcc>
      robobot = false;
    b356:	2300      	movs	r3, #0
}
    b358:	2001      	movs	r0, #1
      robobot = false;
    b35a:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
}
    b35e:	b01c      	add	sp, #112	; 0x70
    b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (strncmp(buf, "stop", 4) == 0)
    b364:	2204      	movs	r2, #4
    b366:	4959      	ldr	r1, [pc, #356]	; (b4cc <URobot::decode(char const*)+0x324>)
    b368:	4628      	mov	r0, r5
    b36a:	f010 fcdb 	bl	1bd24 <strncmp>
    b36e:	4604      	mov	r4, r0
    b370:	2800      	cmp	r0, #0
    b372:	d036      	beq.n	b3e2 <URobot::decode(char const*)+0x23a>
  else if (strncmp(buf, "start", 5) == 0)
    b374:	2205      	movs	r2, #5
    b376:	4956      	ldr	r1, [pc, #344]	; (b4d0 <URobot::decode(char const*)+0x328>)
    b378:	4628      	mov	r0, r5
    b37a:	f010 fcd3 	bl	1bd24 <strncmp>
    b37e:	2800      	cmp	r0, #0
    b380:	d055      	beq.n	b42e <URobot::decode(char const*)+0x286>
  else if (strncmp(buf, "auto", 4) == 0)
    b382:	2204      	movs	r2, #4
    b384:	4953      	ldr	r1, [pc, #332]	; (b4d4 <URobot::decode(char const*)+0x32c>)
    b386:	4628      	mov	r0, r5
    b388:	f010 fccc 	bl	1bd24 <strncmp>
    b38c:	2800      	cmp	r0, #0
    b38e:	d06b      	beq.n	b468 <URobot::decode(char const*)+0x2c0>
  else if (strncmp(buf, "off", 3) == 0)
    b390:	782b      	ldrb	r3, [r5, #0]
    b392:	2b6f      	cmp	r3, #111	; 0x6f
    b394:	d152      	bne.n	b43c <URobot::decode(char const*)+0x294>
    b396:	786b      	ldrb	r3, [r5, #1]
    b398:	2b66      	cmp	r3, #102	; 0x66
    b39a:	d14f      	bne.n	b43c <URobot::decode(char const*)+0x294>
    b39c:	78a9      	ldrb	r1, [r5, #2]
    b39e:	3966      	subs	r1, #102	; 0x66
    b3a0:	d14c      	bne.n	b43c <URobot::decode(char const*)+0x294>
    float ts = strtof(p1, nullptr);
    b3a2:	1d28      	adds	r0, r5, #4
    b3a4:	f00f ff12 	bl	1b1cc <strtof>
    powerOff(ts);
    b3a8:	4630      	mov	r0, r6
    b3aa:	f7ff fc65 	bl	ac78 <URobot::powerOff(float)>
    b3ae:	e761      	b.n	b274 <URobot::decode(char const*)+0xcc>
      default: pinMode(debugPin, dir); break;
    b3b0:	b2e4      	uxtb	r4, r4
    b3b2:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
    b3b6:	4621      	mov	r1, r4
    b3b8:	f00a fe5c 	bl	16074 <pinMode>
    b3bc:	e7c5      	b.n	b34a <URobot::decode(char const*)+0x1a2>
      case -1: pinMode(debugPin, INPUT_PULLDOWN); break;
    b3be:	2103      	movs	r1, #3
    b3c0:	f896 02fc 	ldrb.w	r0, [r6, #764]	; 0x2fc
      default: pinMode(debugPin, dir); break;
    b3c4:	b2e4      	uxtb	r4, r4
      case -1: pinMode(debugPin, INPUT_PULLDOWN); break;
    b3c6:	f00a fe55 	bl	16074 <pinMode>
    b3ca:	e7be      	b.n	b34a <URobot::decode(char const*)+0x1a2>
      batteryHalt = strtol(&buf[5], NULL, 10);
    b3cc:	4601      	mov	r1, r0
    b3ce:	220a      	movs	r2, #10
    b3d0:	1d68      	adds	r0, r5, #5
    b3d2:	f00f ffff 	bl	1b3d4 <strtol>
    b3d6:	3800      	subs	r0, #0
    b3d8:	bf18      	it	ne
    b3da:	2001      	movne	r0, #1
    b3dc:	f886 033c 	strb.w	r0, [r6, #828]	; 0x33c
    b3e0:	e748      	b.n	b274 <URobot::decode(char const*)+0xcc>

void URobot::stop()
{ // command motors to stop
  // and set state to manual
  usb.send("# stopping\r\n");
    b3e2:	493d      	ldr	r1, [pc, #244]	; (b4d8 <URobot::decode(char const*)+0x330>)
    b3e4:	4832      	ldr	r0, [pc, #200]	; (b4b0 <URobot::decode(char const*)+0x308>)
    missionStart = false;
    b3e6:	7634      	strb	r4, [r6, #24]
  usb.send("# stopping\r\n");
    b3e8:	f001 f910 	bl	c60c <UUSB::send(char const*)>
  motor.stopAllMotors();
    b3ec:	483b      	ldr	r0, [pc, #236]	; (b4dc <URobot::decode(char const*)+0x334>)
    b3ee:	f7fd fdf1 	bl	8fd4 <UMotor::stopAllMotors()>
  motortest.motorTestRunning = false;
    b3f2:	4b3b      	ldr	r3, [pc, #236]	; (b4e0 <URobot::decode(char const*)+0x338>)
    b3f4:	751c      	strb	r4, [r3, #20]
}
    b3f6:	e73d      	b.n	b274 <URobot::decode(char const*)+0xcc>
    const char * p1 = &buf[5];
    b3f8:	1d68      	adds	r0, r5, #5
    int pin = strtol(p1, (char**)&p1, 10);
    b3fa:	220a      	movs	r2, #10
    b3fc:	a903      	add	r1, sp, #12
    const char * p1 = &buf[5];
    b3fe:	9003      	str	r0, [sp, #12]
    int pin = strtol(p1, (char**)&p1, 10);
    b400:	f00f ffe8 	bl	1b3d4 <strtol>
    b404:	4604      	mov	r4, r0
    int val = strtol(p1, (char**)&p1, 10);
    b406:	220a      	movs	r2, #10
    b408:	a903      	add	r1, sp, #12
    b40a:	9803      	ldr	r0, [sp, #12]
    b40c:	f00f ffe2 	bl	1b3d4 <strtol>
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    b410:	4a34      	ldr	r2, [pc, #208]	; (b4e4 <URobot::decode(char const*)+0x33c>)
    b412:	b2e3      	uxtb	r3, r4
    b414:	b2c0      	uxtb	r0, r0
    b416:	0119      	lsls	r1, r3, #4
    b418:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    b41c:	5852      	ldr	r2, [r2, r1]
    b41e:	68db      	ldr	r3, [r3, #12]
    b420:	b110      	cbz	r0, b428 <URobot::decode(char const*)+0x280>
    b422:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    b426:	e725      	b.n	b274 <URobot::decode(char const*)+0xcc>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    b428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    b42c:	e722      	b.n	b274 <URobot::decode(char const*)+0xcc>
    missionStart = true;
    b42e:	2301      	movs	r3, #1
    usb.send("# starting\r\n");
    b430:	492d      	ldr	r1, [pc, #180]	; (b4e8 <URobot::decode(char const*)+0x340>)
    b432:	481f      	ldr	r0, [pc, #124]	; (b4b0 <URobot::decode(char const*)+0x308>)
    missionStart = true;
    b434:	7633      	strb	r3, [r6, #24]
    usb.send("# starting\r\n");
    b436:	f001 f8e9 	bl	c60c <UUSB::send(char const*)>
    b43a:	e71b      	b.n	b274 <URobot::decode(char const*)+0xcc>
  else if (strncmp(buf, "stime ", 6) == 0)
    b43c:	2206      	movs	r2, #6
    b43e:	492b      	ldr	r1, [pc, #172]	; (b4ec <URobot::decode(char const*)+0x344>)
    b440:	4628      	mov	r0, r5
    b442:	f010 fc6f 	bl	1bd24 <strncmp>
    b446:	2800      	cmp	r0, #0
    b448:	d156      	bne.n	b4f8 <URobot::decode(char const*)+0x350>
    int32_t ts = strtol(p1, nullptr, 10);
    b44a:	220a      	movs	r2, #10
    b44c:	4601      	mov	r1, r0
    b44e:	1da8      	adds	r0, r5, #6
    b450:	f00f ffc0 	bl	1b3d4 <strtol>
    if (ts >= 20 and ts <= 500000)
    b454:	4b26      	ldr	r3, [pc, #152]	; (b4f0 <URobot::decode(char const*)+0x348>)
    b456:	f1a0 0214 	sub.w	r2, r0, #20
    b45a:	429a      	cmp	r2, r3
    b45c:	d853      	bhi.n	b506 <URobot::decode(char const*)+0x35e>
      service.setSampleTime(ts);
    b45e:	4601      	mov	r1, r0
    b460:	4824      	ldr	r0, [pc, #144]	; (b4f4 <URobot::decode(char const*)+0x34c>)
    b462:	f000 faa1 	bl	b9a8 <UService::setSampleTime(long)>
    b466:	e705      	b.n	b274 <URobot::decode(char const*)+0xcc>
    const char * p1 = &buf[4];
    b468:	3504      	adds	r5, #4
    int a = strtol(p1, &p2, 10);
    b46a:	220a      	movs	r2, #10
    b46c:	a902      	add	r1, sp, #8
    b46e:	4628      	mov	r0, r5
    b470:	f00f ffb0 	bl	1b3d4 <strtol>
    if (p2 == p1)
    b474:	9b02      	ldr	r3, [sp, #8]
    b476:	42ab      	cmp	r3, r5
    b478:	d04a      	beq.n	b510 <URobot::decode(char const*)+0x368>
      missionAutoStart = a != 0;
    b47a:	1e03      	subs	r3, r0, #0
    b47c:	bf18      	it	ne
    b47e:	2301      	movne	r3, #1
    b480:	7673      	strb	r3, [r6, #25]
    b482:	e6f7      	b.n	b274 <URobot::decode(char const*)+0xcc>
    b484:	f3af 8000 	nop.w
    b488:	66666666 	.word	0x66666666
    b48c:	400a6666 	.word	0x400a6666
    b490:	9999999a 	.word	0x9999999a
    b494:	4049d999 	.word	0x4049d999
    b498:	cccccccd 	.word	0xcccccccd
    b49c:	4012cccc 	.word	0x4012cccc
    b4a0:	20005988 	.word	0x20005988
    b4a4:	20005990 	.word	0x20005990
    b4a8:	200059c4 	.word	0x200059c4
    b4ac:	200059cc 	.word	0x200059cc
    b4b0:	2000fac4 	.word	0x2000fac4
    b4b4:	20005a10 	.word	0x20005a10
    b4b8:	20005998 	.word	0x20005998
    b4bc:	20005a18 	.word	0x20005a18
    b4c0:	20005a20 	.word	0x20005a20
    b4c4:	20005a28 	.word	0x20005a28
    b4c8:	200059ec 	.word	0x200059ec
    b4cc:	20005a30 	.word	0x20005a30
    b4d0:	20005a48 	.word	0x20005a48
    b4d4:	20005980 	.word	0x20005980
    b4d8:	20005a38 	.word	0x20005a38
    b4dc:	2000f4c8 	.word	0x2000f4c8
    b4e0:	2000f524 	.word	0x2000f524
    b4e4:	200081bc 	.word	0x200081bc
    b4e8:	20005a50 	.word	0x20005a50
    b4ec:	20005a60 	.word	0x20005a60
    b4f0:	0007a10c 	.word	0x0007a10c
    b4f4:	2000e0c8 	.word	0x2000e0c8
  else if (subscribeDecode(buf)) {}
    b4f8:	4629      	mov	r1, r5
    b4fa:	4630      	mov	r0, r6
}
    b4fc:	b01c      	add	sp, #112	; 0x70
    b4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else if (subscribeDecode(buf)) {}
    b502:	f000 be9b 	b.w	c23c <USubss::subscribeDecode(char const*)>
      usb.send("# sample time T out of bounds (19<=T<=500000 (us))\r\n");
    b506:	4908      	ldr	r1, [pc, #32]	; (b528 <URobot::decode(char const*)+0x380>)
    b508:	4808      	ldr	r0, [pc, #32]	; (b52c <URobot::decode(char const*)+0x384>)
    b50a:	f001 f87f 	bl	c60c <UUSB::send(char const*)>
    b50e:	e6b1      	b.n	b274 <URobot::decode(char const*)+0xcc>
  snprintf(s, MSL, "start %d\r\n", missionAutoStart);
    b510:	7e73      	ldrb	r3, [r6, #25]
    b512:	211e      	movs	r1, #30
    b514:	4a06      	ldr	r2, [pc, #24]	; (b530 <URobot::decode(char const*)+0x388>)
    b516:	a803      	add	r0, sp, #12
    b518:	f010 f94c 	bl	1b7b4 <snprintf>
  usb.send(s);
    b51c:	a903      	add	r1, sp, #12
    b51e:	4803      	ldr	r0, [pc, #12]	; (b52c <URobot::decode(char const*)+0x384>)
    b520:	f001 f874 	bl	c60c <UUSB::send(char const*)>
}
    b524:	e6a6      	b.n	b274 <URobot::decode(char const*)+0xcc>
    b526:	bf00      	nop
    b528:	20005a68 	.word	0x20005a68
    b52c:	2000fac4 	.word	0x2000fac4
    b530:	200056f8 	.word	0x200056f8
    b534:	00000000 	.word	0x00000000

0000b538 <URobot::eePromLoad()>:


void URobot::eePromLoad()
{
    b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return stringConfig;
    b53c:	4c42      	ldr	r4, [pc, #264]	; (b648 <URobot::eePromLoad()+0x110>)
    b53e:	f894 6020 	ldrb.w	r6, [r4, #32]
  if (not eeConfig.isStringConfig())
    b542:	b126      	cbz	r6, b54e <URobot::eePromLoad()+0x16>
    configAddr+=bytes;
    b544:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b546:	3325      	adds	r3, #37	; 0x25
    b548:	6263      	str	r3, [r4, #36]	; 0x24
  else
  { // hard coded mission should not change name and ID
    int skip = 2 + 2 + 1 + MAX_NAME_LENGTH;
    eeConfig.skipAddr(skip);
  }
}
    b54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ts = eeConfig.read32(); // in 10 us unit
    b54e:	4605      	mov	r5, r0
    b550:	4620      	mov	r0, r4
    b552:	f7f7 fe15 	bl	3180 <EEConfig::read32()>
    b556:	4601      	mov	r1, r0
    service.setSampleTime(ts); // param in us
    b558:	483c      	ldr	r0, [pc, #240]	; (b64c <URobot::eePromLoad()+0x114>)
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b55a:	f105 0831 	add.w	r8, r5, #49	; 0x31
    service.setSampleTime(ts); // param in us
    b55e:	f000 fa23 	bl	b9a8 <UService::setSampleTime(long)>
    deviceID = eeConfig.readWord();
    b562:	4620      	mov	r0, r4
    b564:	f7f7 fe34 	bl	31d0 <EEConfig::readWord()>
    b568:	4603      	mov	r3, r0
    robotHWversion = eeConfig.readByte();
    b56a:	4620      	mov	r0, r4
    deviceID = eeConfig.readWord();
    b56c:	2b96      	cmp	r3, #150	; 0x96
    b56e:	bf94      	ite	ls
    b570:	461a      	movls	r2, r3
    b572:	4632      	movhi	r2, r6
    b574:	62ea      	str	r2, [r5, #44]	; 0x2c
    robotHWversion = eeConfig.readByte();
    b576:	f7f7 fe17 	bl	31a8 <EEConfig::readByte()>
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b57a:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
    robotHWversion = eeConfig.readByte();
    b57e:	4603      	mov	r3, r0
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b580:	2220      	movs	r2, #32
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b582:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b586:	4620      	mov	r0, r4
    robotHWversion = eeConfig.readByte();
    b588:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b58c:	4641      	mov	r1, r8
    batVoltIntToFloat = 3.3 / lpFilteredMaxADC * (47.0 + 4.7)/4.7;
    b58e:	ed9f 3b28 	vldr	d3, [pc, #160]	; b630 <URobot::eePromLoad()+0xf8>
    b592:	ed9f 4b29 	vldr	d4, [pc, #164]	; b638 <URobot::eePromLoad()+0x100>
    b596:	ed9f 5b2a 	vldr	d5, [pc, #168]	; b640 <URobot::eePromLoad()+0x108>
    b59a:	ee83 6b07 	vdiv.f64	d6, d3, d7
    b59e:	ee26 6b04 	vmul.f64	d6, d6, d4
    b5a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
    b5a6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    b5aa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
    eeConfig.readBlock(deviceName, MAX_NAME_LENGTH);
    b5ae:	f7f8 f821 	bl	35f4 <EEConfig::readBlock(char*, int)>
    if (deviceName[0] == '\0')
    b5b2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    deviceName[MAX_NAME_LENGTH-1] = '\0';
    b5b6:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
    if (deviceName[0] == '\0')
    b5ba:	b34b      	cbz	r3, b610 <URobot::eePromLoad()+0xd8>
    else if (strncasecmp(deviceName, "robobot", 7) == 0)
    b5bc:	2207      	movs	r2, #7
    b5be:	4924      	ldr	r1, [pc, #144]	; (b650 <URobot::eePromLoad()+0x118>)
    b5c0:	4640      	mov	r0, r8
    b5c2:	f010 fb81 	bl	1bcc8 <strncasecmp>
    b5c6:	b1c8      	cbz	r0, b5fc <URobot::eePromLoad()+0xc4>
      robobot = false;
    b5c8:	f885 6051 	strb.w	r6, [r5, #81]	; 0x51
      for (int i = 1; i < MAX_NAME_LENGTH; i++)
    b5cc:	4644      	mov	r4, r8
    b5ce:	f105 0750 	add.w	r7, r5, #80	; 0x50
                deviceName[i] = '_';
    b5d2:	265f      	movs	r6, #95	; 0x5f
        if (deviceName[i] != '\0' and not isalnum(deviceName[i]))
    b5d4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    b5d8:	b118      	cbz	r0, b5e2 <URobot::eePromLoad()+0xaa>
    b5da:	f00f ff13 	bl	1b404 <isalnum>
    b5de:	b900      	cbnz	r0, b5e2 <URobot::eePromLoad()+0xaa>
                deviceName[i] = '_';
    b5e0:	7026      	strb	r6, [r4, #0]
      for (int i = 1; i < MAX_NAME_LENGTH; i++)
    b5e2:	42bc      	cmp	r4, r7
    b5e4:	d1f6      	bne.n	b5d4 <URobot::eePromLoad()+0x9c>
    missionAutoStart = (flags & 0x01) > 0;
    b5e6:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
    display.setLine(deviceName);
    b5ea:	4641      	mov	r1, r8
    b5ec:	4819      	ldr	r0, [pc, #100]	; (b654 <URobot::eePromLoad()+0x11c>)
    missionAutoStart = (flags & 0x01) > 0;
    b5ee:	f006 0601 	and.w	r6, r6, #1
    b5f2:	766e      	strb	r6, [r5, #25]
}
    b5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    display.setLine(deviceName);
    b5f8:	f7f7 bc30 	b.w	2e5c <UDisplay::setLine(char const*)>
      robobot = true;
    b5fc:	2301      	movs	r3, #1
    display.setLine(deviceName);
    b5fe:	4641      	mov	r1, r8
    missionAutoStart = (flags & 0x01) > 0;
    b600:	766e      	strb	r6, [r5, #25]
      robobot = true;
    b602:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
    display.setLine(deviceName);
    b606:	4813      	ldr	r0, [pc, #76]	; (b654 <URobot::eePromLoad()+0x11c>)
}
    b608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    display.setLine(deviceName);
    b60c:	f7f7 bc26 	b.w	2e5c <UDisplay::setLine(char const*)>
      strncpy(deviceName, "unknown", MAX_NAME_LENGTH);
    b610:	4911      	ldr	r1, [pc, #68]	; (b658 <URobot::eePromLoad()+0x120>)
    b612:	4640      	mov	r0, r8
    b614:	2220      	movs	r2, #32
    b616:	f010 fbcb 	bl	1bdb0 <strncpy>
    missionAutoStart = (flags & 0x01) > 0;
    b61a:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
    display.setLine(deviceName);
    b61e:	4641      	mov	r1, r8
    b620:	480c      	ldr	r0, [pc, #48]	; (b654 <URobot::eePromLoad()+0x11c>)
    missionAutoStart = (flags & 0x01) > 0;
    b622:	f006 0601 	and.w	r6, r6, #1
    b626:	766e      	strb	r6, [r5, #25]
}
    b628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    display.setLine(deviceName);
    b62c:	f7f7 bc16 	b.w	2e5c <UDisplay::setLine(char const*)>
    b630:	66666666 	.word	0x66666666
    b634:	400a6666 	.word	0x400a6666
    b638:	9999999a 	.word	0x9999999a
    b63c:	4049d999 	.word	0x4049d999
    b640:	cccccccd 	.word	0xcccccccd
    b644:	4012cccc 	.word	0x4012cccc
    b648:	2000ebf4 	.word	0x2000ebf4
    b64c:	2000e0c8 	.word	0x2000e0c8
    b650:	20005a10 	.word	0x20005a10
    b654:	2000eb18 	.word	0x2000eb18
    b658:	200056c8 	.word	0x200056c8

0000b65c <URobot::eePromSave()>:

void URobot::eePromSave()
{
  eeConfig.push32(service.sampleTime_us);
    b65c:	4b0d      	ldr	r3, [pc, #52]	; (b694 <URobot::eePromSave()+0x38>)
{
    b65e:	b510      	push	{r4, lr}
    b660:	4604      	mov	r4, r0
  eeConfig.push32(service.sampleTime_us);
    b662:	6819      	ldr	r1, [r3, #0]
    b664:	480c      	ldr	r0, [pc, #48]	; (b698 <URobot::eePromSave()+0x3c>)
    b666:	f7f7 fd37 	bl	30d8 <EEConfig::push32(unsigned long)>
  eeConfig.pushWord(deviceID);
    b66a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    b66c:	480a      	ldr	r0, [pc, #40]	; (b698 <URobot::eePromSave()+0x3c>)
    b66e:	f7f7 fd6b 	bl	3148 <EEConfig::pushWord(unsigned short)>
  eeConfig.pushByte(robotHWversion);
    b672:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    b676:	4808      	ldr	r0, [pc, #32]	; (b698 <URobot::eePromSave()+0x3c>)
    b678:	f7f7 fd4a 	bl	3110 <EEConfig::pushByte(unsigned char)>
  // flags introduced as last character in device name without changing ee-flash layout.
  // limits the name length to 30 chars (rather than 31)
  uint8_t flags = missionAutoStart & 0x01;
  deviceName[MAX_NAME_LENGTH-1] = flags;
    b67c:	7e63      	ldrb	r3, [r4, #25]
  eeConfig.pushBlock(deviceName, MAX_NAME_LENGTH);
    b67e:	f104 0131 	add.w	r1, r4, #49	; 0x31
    b682:	2220      	movs	r2, #32
  deviceName[MAX_NAME_LENGTH-1] = flags;
    b684:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  eeConfig.pushBlock(deviceName, MAX_NAME_LENGTH);
    b688:	4803      	ldr	r0, [pc, #12]	; (b698 <URobot::eePromSave()+0x3c>)
}
    b68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  eeConfig.pushBlock(deviceName, MAX_NAME_LENGTH);
    b68e:	f7f7 bf87 	b.w	35a0 <EEConfig::pushBlock(char const*, int)>
    b692:	bf00      	nop
    b694:	2000e0c8 	.word	0x2000e0c8
    b698:	2000ebf4 	.word	0x2000ebf4

0000b69c <_GLOBAL__sub_I_robot>:
}
    b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
class URobot : public USubss
    b69e:	4c33      	ldr	r4, [pc, #204]	; (b76c <_GLOBAL__sub_I_robot+0xd0>)
    b6a0:	2500      	movs	r5, #0
    b6a2:	4f33      	ldr	r7, [pc, #204]	; (b770 <_GLOBAL__sub_I_robot+0xd4>)
    b6a4:	4620      	mov	r0, r4
    b6a6:	f000 fdbf 	bl	c228 <USubss::USubss()>
    b6aa:	4a32      	ldr	r2, [pc, #200]	; (b774 <_GLOBAL__sub_I_robot+0xd8>)
    b6ac:	4b32      	ldr	r3, [pc, #200]	; (b778 <_GLOBAL__sub_I_robot+0xdc>)
      return pow(__type(__x), __type(__y));
    b6ae:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    b6b2:	ed92 1a05 	vldr	s2, [r2, #20]
    b6b6:	f107 0620 	add.w	r6, r7, #32
    b6ba:	6023      	str	r3, [r4, #0]
    b6bc:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
    b6c0:	8325      	strh	r5, [r4, #24]
    b6c2:	61e5      	str	r5, [r4, #28]
    b6c4:	f00c fdc4 	bl	18250 <pow>
    b6c8:	ee30 0b00 	vadd.f64	d0, d0, d0
    b6cc:	2308      	movs	r3, #8
    b6ce:	f104 0c31 	add.w	ip, r4, #49	; 0x31
    b6d2:	62e5      	str	r5, [r4, #44]	; 0x2c
    b6d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    b6d8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    b6dc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    b6e0:	463d      	mov	r5, r7
    b6e2:	f10c 0c10 	add.w	ip, ip, #16
    b6e6:	3710      	adds	r7, #16
    b6e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b6ea:	42b5      	cmp	r5, r6
    b6ec:	f84c 0c10 	str.w	r0, [ip, #-16]
    b6f0:	f84c 1c0c 	str.w	r1, [ip, #-12]
    b6f4:	f84c 2c08 	str.w	r2, [ip, #-8]
    b6f8:	f84c 3c04 	str.w	r3, [ip, #-4]
    b6fc:	d1f0      	bne.n	b6e0 <_GLOBAL__sub_I_robot+0x44>
    b6fe:	783b      	ldrb	r3, [r7, #0]
    b700:	2500      	movs	r5, #0
    b702:	4e1e      	ldr	r6, [pc, #120]	; (b77c <_GLOBAL__sub_I_robot+0xe0>)
    b704:	2220      	movs	r2, #32
    b706:	f88c 3000 	strb.w	r3, [ip]
    b70a:	2300      	movs	r3, #0
    b70c:	6565      	str	r5, [r4, #84]	; 0x54
    b70e:	4629      	mov	r1, r5
    b710:	18b0      	adds	r0, r6, r2
    b712:	6175      	str	r5, [r6, #20]
    b714:	6723      	str	r3, [r4, #112]	; 0x70
    b716:	66e5      	str	r5, [r4, #108]	; 0x6c
    b718:	e9c6 5501 	strd	r5, r5, [r6, #4]
    b71c:	e9c6 5503 	strd	r5, r5, [r6, #12]
    b720:	f010 fa1a 	bl	1bb58 <memset>
    b724:	f44f 7217 	mov.w	r2, #604	; 0x25c
    b728:	4915      	ldr	r1, [pc, #84]	; (b780 <_GLOBAL__sub_I_robot+0xe4>)
    b72a:	f106 0044 	add.w	r0, r6, #68	; 0x44
    b72e:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    b732:	f00a ffb7 	bl	166a4 <memcpy>
    b736:	2102      	movs	r1, #2
    b738:	f44f 7380 	mov.w	r3, #256	; 0x100
    b73c:	f8c6 52b0 	str.w	r5, [r6, #688]	; 0x2b0
URobot robot;
    b740:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
    b744:	f8c4 130c 	str.w	r1, [r4, #780]	; 0x30c
    b748:	f884 52f4 	strb.w	r5, [r4, #756]	; 0x2f4
    b74c:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    b750:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
    b754:	f8c4 5338 	str.w	r5, [r4, #824]	; 0x338
    b758:	f884 533c 	strb.w	r5, [r4, #828]	; 0x33c
    b75c:	4a09      	ldr	r2, [pc, #36]	; (b784 <_GLOBAL__sub_I_robot+0xe8>)
    b75e:	490a      	ldr	r1, [pc, #40]	; (b788 <_GLOBAL__sub_I_robot+0xec>)
    b760:	e9c4 55bf 	strd	r5, r5, [r4, #764]	; 0x2fc
}
    b764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
URobot robot;
    b768:	f00d bc56 	b.w	19018 <__aeabi_atexit>
    b76c:	2000f660 	.word	0x2000f660
    b770:	20001e8c 	.word	0x20001e8c
    b774:	2000e89c 	.word	0x2000e89c
    b778:	2000805c 	.word	0x2000805c
    b77c:	2000f6b4 	.word	0x2000f6b4
    b780:	20001eb0 	.word	0x20001eb0
    b784:	20008f80 	.word	0x20008f80
    b788:	0000a6a1 	.word	0x0000a6a1
    b78c:	00000000 	.word	0x00000000

0000b790 <UService::sampleTimeInterrupt()>:
}

void UService::sampleTimeInterrupt()
{ // interrupt at half sample time
  // advance system time in micro seconds
  service.time_us += service.sampleTime_us/2;
    b790:	4b17      	ldr	r3, [pc, #92]	; (b7f0 <UService::sampleTimeInterrupt()+0x60>)
    b792:	f04f 0c00 	mov.w	ip, #0
    b796:	681a      	ldr	r2, [r3, #0]
    b798:	e9d3 1002 	ldrd	r1, r0, [r3, #8]
    b79c:	0852      	lsrs	r2, r2, #1
    b79e:	1889      	adds	r1, r1, r2
    b7a0:	f140 0000 	adc.w	r0, r0, #0
    b7a4:	6099      	str	r1, [r3, #8]
  if (service.nextIsHalf)
    b7a6:	7e59      	ldrb	r1, [r3, #25]
  service.time_us += service.sampleTime_us/2;
    b7a8:	60d8      	str	r0, [r3, #12]
  if (service.nextIsHalf)
    b7aa:	b1b1      	cbz	r1, b7da <UService::sampleTimeInterrupt()+0x4a>
  { // flip half sample time flag
    service.nextIsHalf = false;
    service.sampleTimeHalfNow = true;
    b7ac:	2101      	movs	r1, #1
    service.nextIsHalf = false;
    b7ae:	f883 c019 	strb.w	ip, [r3, #25]
    service.sampleTimeHalfNow = true;
    b7b2:	7459      	strb	r1, [r3, #17]
}


void UService::timePassed_us(uint32_t dt)
{
  time += float(dt)*1e-6;
    b7b4:	ee07 2a90 	vmov	s15, r2
    b7b8:	ed93 6a05 	vldr	s12, [r3, #20]
    b7bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    b7c0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    b7c4:	ed9f 5b08 	vldr	d5, [pc, #32]	; b7e8 <UService::sampleTimeInterrupt()+0x58>
    b7c8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    b7cc:	eea7 6b05 	vfma.f64	d6, d7, d5
    b7d0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    b7d4:	ed83 6a05 	vstr	s12, [r3, #20]
}
    b7d8:	4770      	bx	lr
    service.nextIsHalf = true;
    b7da:	2101      	movs	r1, #1
    b7dc:	7659      	strb	r1, [r3, #25]
    service.sampleTimeNow = true;
    b7de:	7419      	strb	r1, [r3, #16]
    b7e0:	e7e8      	b.n	b7b4 <UService::sampleTimeInterrupt()+0x24>
    b7e2:	bf00      	nop
    b7e4:	f3af 8000 	nop.w
    b7e8:	a0b5ed8d 	.word	0xa0b5ed8d
    b7ec:	3eb0c6f7 	.word	0x3eb0c6f7
    b7f0:	2000e0c8 	.word	0x2000e0c8

0000b7f4 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
    b7f4:	6803      	ldr	r3, [r0, #0]
    b7f6:	4718      	bx	r3

0000b7f8 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
    b7f8:	680b      	ldr	r3, [r1, #0]
    b7fa:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    b7fc:	4770      	bx	lr
    b7fe:	bf00      	nop

0000b800 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
    b800:	680b      	ldr	r3, [r1, #0]
    b802:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    b804:	4770      	bx	lr
    b806:	bf00      	nop

0000b808 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
    b808:	4770      	bx	lr
    b80a:	bf00      	nop

0000b80c <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    b80c:	b510      	push	{r4, lr}
    b80e:	4604      	mov	r4, r0
		end();
    b810:	f00a f95a 	bl	15ac8 <IntervalTimer::end()>
	}
    b814:	4620      	mov	r0, r4
    b816:	bd10      	pop	{r4, pc}

0000b818 <UService::setup()>:
  sampleTime_us = 2000;
    b818:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  time_us = 0;
    b81c:	2200      	movs	r2, #0
{ // system sample time
    b81e:	b510      	push	{r4, lr}
  sampleTime_us = 2000;
    b820:	6003      	str	r3, [r0, #0]
  time_us = 0;
    b822:	2300      	movs	r3, #0
{ // system sample time
    b824:	b08c      	sub	sp, #48	; 0x30
  robot.setup();
    b826:	4c31      	ldr	r4, [pc, #196]	; (b8ec <UService::setup()+0xd4>)
  time_us = 0;
    b828:	e9c0 2302 	strd	r2, r3, [r0, #8]
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
    b82c:	4b30      	ldr	r3, [pc, #192]	; (b8f0 <UService::setup()+0xd8>)
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
    b82e:	a902      	add	r1, sp, #8
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    b830:	4a30      	ldr	r2, [pc, #192]	; (b8f4 <UService::setup()+0xdc>)
        vtable_ptr_->copy_ptr(
    b832:	a808      	add	r0, sp, #32
        vtable_ptr_ = std::addressof(vt);
    b834:	9300      	str	r3, [sp, #0]
        vtable_ptr_{other.vtable_ptr_}
    b836:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    b838:	9202      	str	r2, [sp, #8]
        vtable_ptr_->copy_ptr(
    b83a:	f7ff ffdd 	bl	b7f8 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    b83e:	a906      	add	r1, sp, #24
    b840:	f645 52bf 	movw	r2, #23999	; 0x5dbf
    b844:	482c      	ldr	r0, [pc, #176]	; (b8f8 <UService::setup()+0xe0>)
    b846:	f00a f8bd 	bl	159c4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    b84a:	9b06      	ldr	r3, [sp, #24]
    b84c:	a808      	add	r0, sp, #32
    b84e:	68db      	ldr	r3, [r3, #12]
    b850:	4798      	blx	r3
    b852:	9b00      	ldr	r3, [sp, #0]
    b854:	a802      	add	r0, sp, #8
    b856:	68db      	ldr	r3, [r3, #12]
    b858:	4798      	blx	r3
  robot.setup();
    b85a:	4620      	mov	r0, r4
    b85c:	f7fe ff30 	bl	a6c0 <URobot::setup()>
  ad.setup();
    b860:	4826      	ldr	r0, [pc, #152]	; (b8fc <UService::setup()+0xe4>)
    b862:	f7f6 f851 	bl	1908 <UAd::setup()>
  usb.setup();
    b866:	4826      	ldr	r0, [pc, #152]	; (b900 <UService::setup()+0xe8>)
    b868:	f001 fab8 	bl	cddc <UUSB::setup()>
  command.setup();
    b86c:	4825      	ldr	r0, [pc, #148]	; (b904 <UService::setup()+0xec>)
    b86e:	f7f6 fd65 	bl	233c <UCommand::setup()>
  asenc.setup();
    b872:	4825      	ldr	r0, [pc, #148]	; (b908 <UService::setup()+0xf0>)
    b874:	f7f6 fc0e 	bl	2094 <UAsEnc::setup()>
  encoder.setup();
    b878:	4824      	ldr	r0, [pc, #144]	; (b90c <UService::setup()+0xf4>)
    b87a:	f7f8 f865 	bl	3948 <UEncoder::setup()>
  ls.setup();
    b87e:	4824      	ldr	r0, [pc, #144]	; (b910 <UService::setup()+0xf8>)
    b880:	f7fa fd8a 	bl	6398 <ULineSensor::setup()>
  irdist.setup();
    b884:	4823      	ldr	r0, [pc, #140]	; (b914 <UService::setup()+0xfc>)
    b886:	f7f9 fd9f 	bl	53c8 <UIrDist::setup()>
  imu2.setup();
    b88a:	4823      	ldr	r0, [pc, #140]	; (b918 <UService::setup()+0x100>)
    b88c:	f7f8 fff8 	bl	4880 <UImu2::setup()>
  logger.setup();
    b890:	4822      	ldr	r0, [pc, #136]	; (b91c <UService::setup()+0x104>)
    b892:	f7fb fb9f 	bl	6fd4 <ULog::setup()>
  logger.setLogFlagDefault();
    b896:	4821      	ldr	r0, [pc, #132]	; (b91c <UService::setup()+0x104>)
    b898:	f7fc fd8e 	bl	83b8 <ULog::setLogFlagDefault()>
  logger.initLogStructure ();
    b89c:	481f      	ldr	r0, [pc, #124]	; (b91c <UService::setup()+0x104>)
    b89e:	f7fc f96d 	bl	7b7c <ULog::initLogStructure()>
  eeConfig.setup();
    b8a2:	481f      	ldr	r0, [pc, #124]	; (b920 <UService::setup()+0x108>)
    b8a4:	f7f7 fe58 	bl	3558 <EEConfig::setup()>
  current.setup();
    b8a8:	481e      	ldr	r0, [pc, #120]	; (b924 <UService::setup()+0x10c>)
    b8aa:	f7f6 fe71 	bl	2590 <UCurrent::setup()>
  servo.setup();  // set PWM for available servo pins
    b8ae:	481e      	ldr	r0, [pc, #120]	; (b928 <UService::setup()+0x110>)
    b8b0:	f000 f952 	bl	bb58 <UServo::setup()>
  motor.setup();  // set motor pins
    b8b4:	481d      	ldr	r0, [pc, #116]	; (b92c <UService::setup()+0x114>)
    b8b6:	f7fc fec1 	bl	863c <UMotor::setup()>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    b8ba:	4b1d      	ldr	r3, [pc, #116]	; (b930 <UService::setup()+0x118>)
    b8bc:	2208      	movs	r2, #8
  display.setup();
    b8be:	481d      	ldr	r0, [pc, #116]	; (b934 <UService::setup()+0x11c>)
    b8c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    b8c4:	f7f7 f93c 	bl	2b40 <UDisplay::setup()>
  ledband.setup();
    b8c8:	481b      	ldr	r0, [pc, #108]	; (b938 <UService::setup()+0x120>)
    b8ca:	f7fa f82f 	bl	592c <ULedBand::setup()>
  usbhost.setup();
    b8ce:	481b      	ldr	r0, [pc, #108]	; (b93c <UService::setup()+0x124>)
    b8d0:	f001 fd92 	bl	d3f8 <UUsbHost::setup()>
    if (robotHWversion == 9)
    b8d4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      analogWrite(pin, value << 3);
    b8d8:	2100      	movs	r1, #0
    if (robotHWversion == 9)
    b8da:	2b09      	cmp	r3, #9
      analogWrite(pin, value << 3);
    b8dc:	bf14      	ite	ne
    b8de:	2006      	movne	r0, #6
    b8e0:	4608      	moveq	r0, r1
}
    b8e2:	b00c      	add	sp, #48	; 0x30
    b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8e8:	f00b b8ba 	b.w	16a60 <analogWrite>
    b8ec:	2000f660 	.word	0x2000f660
    b8f0:	2000819c 	.word	0x2000819c
    b8f4:	0000b791 	.word	0x0000b791
    b8f8:	20009c48 	.word	0x20009c48
    b8fc:	2000e89c 	.word	0x2000e89c
    b900:	2000fac4 	.word	0x2000fac4
    b904:	2000ea18 	.word	0x2000ea18
    b908:	2000e9dc 	.word	0x2000e9dc
    b90c:	2000ec40 	.word	0x2000ec40
    b910:	2000f390 	.word	0x2000f390
    b914:	2000f19c 	.word	0x2000f19c
    b918:	2000dfd0 	.word	0x2000dfd0
    b91c:	2000f24c 	.word	0x2000f24c
    b920:	2000ebf4 	.word	0x2000ebf4
    b924:	2000ea90 	.word	0x2000ea90
    b928:	2000fa64 	.word	0x2000fa64
    b92c:	2000f4c8 	.word	0x2000f4c8
    b930:	42004000 	.word	0x42004000
    b934:	2000eb18 	.word	0x2000eb18
    b938:	2000f1ec 	.word	0x2000f1ec
    b93c:	2000b400 	.word	0x2000b400

0000b940 <UService::isSampleTime()>:
{
    b940:	b538      	push	{r3, r4, r5, lr}
  if (cycleStarted)
    b942:	7e03      	ldrb	r3, [r0, #24]
{
    b944:	4604      	mov	r4, r0
  if (cycleStarted)
    b946:	b9eb      	cbnz	r3, b984 <UService::isSampleTime()+0x44>
  if (service.sampleTimeNow)
    b948:	4b13      	ldr	r3, [pc, #76]	; (b998 <UService::isSampleTime()+0x58>)
    b94a:	7c1d      	ldrb	r5, [r3, #16]
    b94c:	b985      	cbnz	r5, b970 <UService::isSampleTime()+0x30>
  else if (service.sampleTimeHalfNow)
    b94e:	7c5a      	ldrb	r2, [r3, #17]
    b950:	b922      	cbnz	r2, b95c <UService::isSampleTime()+0x1c>
    usb.tick(); // service commands from USB
    b952:	4812      	ldr	r0, [pc, #72]	; (b99c <UService::isSampleTime()+0x5c>)
    b954:	f001 f89e 	bl	ca94 <UUSB::tick()>
}
    b958:	4628      	mov	r0, r5
    b95a:	bd38      	pop	{r3, r4, r5, pc}
    ad.tickHalfTime();
    b95c:	4810      	ldr	r0, [pc, #64]	; (b9a0 <UService::isSampleTime()+0x60>)
    service.sampleTimeHalfNow = false;
    b95e:	745d      	strb	r5, [r3, #17]
    ad.tickHalfTime();
    b960:	f7f6 f8ce 	bl	1b00 <UAd::tickHalfTime()>
    cycleTime[item] = micros();
    b964:	f00a fb20 	bl	15fa8 <micros>
    b968:	4b0e      	ldr	r3, [pc, #56]	; (b9a4 <UService::isSampleTime()+0x64>)
    b96a:	6698      	str	r0, [r3, #104]	; 0x68
}
    b96c:	4628      	mov	r0, r5
    b96e:	bd38      	pop	{r3, r4, r5, pc}
    cycleStarted = true;
    b970:	2101      	movs	r1, #1
    service.sampleTimeNow = false;
    b972:	2200      	movs	r2, #0
    cycleStarted = true;
    b974:	7621      	strb	r1, [r4, #24]
    service.sampleTimeNow = false;
    b976:	741a      	strb	r2, [r3, #16]
    b978:	f00a fb16 	bl	15fa8 <micros>
    b97c:	4b09      	ldr	r3, [pc, #36]	; (b9a4 <UService::isSampleTime()+0x64>)
    b97e:	6558      	str	r0, [r3, #84]	; 0x54
}
    b980:	4628      	mov	r0, r5
    b982:	bd38      	pop	{r3, r4, r5, pc}
    b984:	f00a fb10 	bl	15fa8 <micros>
    b988:	4603      	mov	r3, r0
    b98a:	4806      	ldr	r0, [pc, #24]	; (b9a4 <UService::isSampleTime()+0x64>)
    b98c:	6643      	str	r3, [r0, #100]	; 0x64
    robot.saveCycleTime();
    b98e:	f7ff f81f 	bl	a9d0 <URobot::saveCycleTime()>
    cycleStarted = false;
    b992:	2300      	movs	r3, #0
    b994:	7623      	strb	r3, [r4, #24]
    b996:	e7d7      	b.n	b948 <UService::isSampleTime()+0x8>
    b998:	2000e0c8 	.word	0x2000e0c8
    b99c:	2000fac4 	.word	0x2000fac4
    b9a0:	2000e89c 	.word	0x2000e89c
    b9a4:	2000f660 	.word	0x2000f660

0000b9a8 <UService::setSampleTime(long)>:
  if (sampleTimeus < 20 or sampleTimeus > 500000)
    b9a8:	4b0b      	ldr	r3, [pc, #44]	; (b9d8 <UService::setSampleTime(long)+0x30>)
    b9aa:	f1a1 0214 	sub.w	r2, r1, #20
    b9ae:	429a      	cmp	r2, r3
    b9b0:	d903      	bls.n	b9ba <UService::setSampleTime(long)+0x12>
    usb.send("# sample time T out of bounds (19<=T<=500000 (us))\r\n");
    b9b2:	490a      	ldr	r1, [pc, #40]	; (b9dc <UService::setSampleTime(long)+0x34>)
    b9b4:	480a      	ldr	r0, [pc, #40]	; (b9e0 <UService::setSampleTime(long)+0x38>)
    b9b6:	f000 be29 	b.w	c60c <UUSB::send(char const*)>
	// with this new setting.
	template <typename period_t>
	void update(period_t period){
		uint32_t cycles = cyclesFromPeriod(period);
		if (cycles < 17) return;
		if (channel) channel->LDVAL = cycles;
    b9ba:	4b0a      	ldr	r3, [pc, #40]	; (b9e4 <UService::setSampleTime(long)+0x3c>)
    sampleTime_us = sampleTimeus;
    b9bc:	6001      	str	r1, [r0, #0]
    b9be:	681a      	ldr	r2, [r3, #0]
    b9c0:	b132      	cbz	r2, b9d0 <UService::setSampleTime(long)+0x28>
		static_assert(std::is_arithmetic_v<period_t>, "Period must be arithmetic");

		if (period < 0 || period > MAX_PERIOD)
			return 0;
		if constexpr (std::is_integral_v<period_t>)       // handles all integral types
			return (24000000 / 1000000) * period - 1;
    b9c2:	f021 0301 	bic.w	r3, r1, #1
    b9c6:	eb03 0361 	add.w	r3, r3, r1, asr #1
    b9ca:	00db      	lsls	r3, r3, #3
    b9cc:	3b01      	subs	r3, #1
		if (channel) channel->LDVAL = cycles;
    b9ce:	6013      	str	r3, [r2, #0]
    imu2.imuAvailable = 10;
    b9d0:	4b05      	ldr	r3, [pc, #20]	; (b9e8 <UService::setSampleTime(long)+0x40>)
    b9d2:	220a      	movs	r2, #10
    b9d4:	675a      	str	r2, [r3, #116]	; 0x74
}
    b9d6:	4770      	bx	lr
    b9d8:	0007a10c 	.word	0x0007a10c
    b9dc:	20005a68 	.word	0x20005a68
    b9e0:	2000fac4 	.word	0x2000fac4
    b9e4:	20009c48 	.word	0x20009c48
    b9e8:	2000dfd0 	.word	0x2000dfd0

0000b9ec <UService::updateSensors()>:
{
    b9ec:	b510      	push	{r4, lr}
  ad.tick();
    b9ee:	4813      	ldr	r0, [pc, #76]	; (ba3c <UService::updateSensors()+0x50>)
    b9f0:	f7f6 f82a 	bl	1a48 <UAd::tick()>
    b9f4:	4c12      	ldr	r4, [pc, #72]	; (ba40 <UService::updateSensors()+0x54>)
    b9f6:	f00a fad7 	bl	15fa8 <micros>
    b9fa:	4603      	mov	r3, r0
  encoder.tick();
    b9fc:	4811      	ldr	r0, [pc, #68]	; (ba44 <UService::updateSensors()+0x58>)
    b9fe:	65a3      	str	r3, [r4, #88]	; 0x58
    ba00:	f7f8 fc7a 	bl	42f8 <UEncoder::tick()>
  current.tick();
    ba04:	4810      	ldr	r0, [pc, #64]	; (ba48 <UService::updateSensors()+0x5c>)
    ba06:	f7f6 fe27 	bl	2658 <UCurrent::tick()>
  if (not motortest.motorTestRunning)
    ba0a:	4b10      	ldr	r3, [pc, #64]	; (ba4c <UService::updateSensors()+0x60>)
    ba0c:	7d1b      	ldrb	r3, [r3, #20]
    ba0e:	b173      	cbz	r3, ba2e <UService::updateSensors()+0x42>
    ba10:	f00a faca 	bl	15fa8 <micros>
    ba14:	4603      	mov	r3, r0
  ls.tick();
    ba16:	480e      	ldr	r0, [pc, #56]	; (ba50 <UService::updateSensors()+0x64>)
    ba18:	65e3      	str	r3, [r4, #92]	; 0x5c
    ba1a:	f7fb f8ad 	bl	6b78 <ULineSensor::tick()>
  irdist.tick();
    ba1e:	480d      	ldr	r0, [pc, #52]	; (ba54 <UService::updateSensors()+0x68>)
    ba20:	f7f9 fcfa 	bl	5418 <UIrDist::tick()>
  usbhost.tick();
    ba24:	480c      	ldr	r0, [pc, #48]	; (ba58 <UService::updateSensors()+0x6c>)
}
    ba26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbhost.tick();
    ba2a:	f001 bd15 	b.w	d458 <UUsbHost::tick()>
    imu2.tick();
    ba2e:	480b      	ldr	r0, [pc, #44]	; (ba5c <UService::updateSensors()+0x70>)
    ba30:	f7f9 fa74 	bl	4f1c <UImu2::tick()>
    asenc.tick();
    ba34:	480a      	ldr	r0, [pc, #40]	; (ba60 <UService::updateSensors()+0x74>)
    ba36:	f7f6 fb6f 	bl	2118 <UAsEnc::tick()>
    ba3a:	e7e9      	b.n	ba10 <UService::updateSensors()+0x24>
    ba3c:	2000e89c 	.word	0x2000e89c
    ba40:	2000f660 	.word	0x2000f660
    ba44:	2000ec40 	.word	0x2000ec40
    ba48:	2000ea90 	.word	0x2000ea90
    ba4c:	2000f524 	.word	0x2000f524
    ba50:	2000f390 	.word	0x2000f390
    ba54:	2000f19c 	.word	0x2000f19c
    ba58:	2000b400 	.word	0x2000b400
    ba5c:	2000dfd0 	.word	0x2000dfd0
    ba60:	2000e9dc 	.word	0x2000e9dc

0000ba64 <UService::updateActuators()>:
{
    ba64:	b538      	push	{r3, r4, r5, lr}
  servo.tick();
    ba66:	4812      	ldr	r0, [pc, #72]	; (bab0 <UService::updateActuators()+0x4c>)
  motortest.tick();
    ba68:	4c12      	ldr	r4, [pc, #72]	; (bab4 <UService::updateActuators()+0x50>)
  servo.tick();
    ba6a:	f000 fa27 	bl	bebc <UServo::tick()>
  robot.tick();
    ba6e:	4d12      	ldr	r5, [pc, #72]	; (bab8 <UService::updateActuators()+0x54>)
  motor.tick();
    ba70:	4812      	ldr	r0, [pc, #72]	; (babc <UService::updateActuators()+0x58>)
    ba72:	f7fd f9a9 	bl	8dc8 <UMotor::tick()>
  motortest.tick();
    ba76:	4620      	mov	r0, r4
    ba78:	f7fe fbc4 	bl	a204 <UMotorTest::tick()>
  robot.tick();
    ba7c:	4628      	mov	r0, r5
    ba7e:	f7ff f987 	bl	ad90 <URobot::tick()>
    ba82:	f00a fa91 	bl	15fa8 <micros>
    ba86:	4603      	mov	r3, r0
  logger.tick();
    ba88:	480d      	ldr	r0, [pc, #52]	; (bac0 <UService::updateActuators()+0x5c>)
    ba8a:	662b      	str	r3, [r5, #96]	; 0x60
    ba8c:	f7fc fc20 	bl	82d0 <ULog::tick()>
  if (not motortest.motorTestRunning)
    ba90:	7d23      	ldrb	r3, [r4, #20]
    ba92:	b123      	cbz	r3, ba9e <UService::updateActuators()+0x3a>
  ledband.tick();
    ba94:	480b      	ldr	r0, [pc, #44]	; (bac4 <UService::updateActuators()+0x60>)
}
    ba96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ledband.tick();
    ba9a:	f7f9 bf9d 	b.w	59d8 <ULedBand::tick()>
    display.tick();
    ba9e:	480a      	ldr	r0, [pc, #40]	; (bac8 <UService::updateActuators()+0x64>)
    baa0:	f7f7 f8a6 	bl	2bf0 <UDisplay::tick()>
  ledband.tick();
    baa4:	4807      	ldr	r0, [pc, #28]	; (bac4 <UService::updateActuators()+0x60>)
}
    baa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ledband.tick();
    baaa:	f7f9 bf95 	b.w	59d8 <ULedBand::tick()>
    baae:	bf00      	nop
    bab0:	2000fa64 	.word	0x2000fa64
    bab4:	2000f524 	.word	0x2000f524
    bab8:	2000f660 	.word	0x2000f660
    babc:	2000f4c8 	.word	0x2000f4c8
    bac0:	2000f24c 	.word	0x2000f24c
    bac4:	2000f1ec 	.word	0x2000f1ec
    bac8:	2000eb18 	.word	0x2000eb18

0000bacc <_GLOBAL__sub_I_service>:
class UService
    bacc:	4b06      	ldr	r3, [pc, #24]	; (bae8 <_GLOBAL__sub_I_service+0x1c>)
    bace:	2000      	movs	r0, #0
    bad0:	f04f 0c00 	mov.w	ip, #0
IntervalTimer sampleTimer;
    bad4:	4a05      	ldr	r2, [pc, #20]	; (baec <_GLOBAL__sub_I_service+0x20>)
    bad6:	8218      	strh	r0, [r3, #16]
    bad8:	8318      	strh	r0, [r3, #24]
    bada:	4905      	ldr	r1, [pc, #20]	; (baf0 <_GLOBAL__sub_I_service+0x24>)
    badc:	4805      	ldr	r0, [pc, #20]	; (baf4 <_GLOBAL__sub_I_service+0x28>)
    bade:	f8c3 c014 	str.w	ip, [r3, #20]
    bae2:	f00d ba99 	b.w	19018 <__aeabi_atexit>
    bae6:	bf00      	nop
    bae8:	2000e0c8 	.word	0x2000e0c8
    baec:	20008f80 	.word	0x20008f80
    baf0:	0000b80d 	.word	0x0000b80d
    baf4:	20009c48 	.word	0x20009c48

0000baf8 <UServo::~UServo()>:
class UServo : public USubss
    baf8:	b510      	push	{r4, lr}
    bafa:	4b05      	ldr	r3, [pc, #20]	; (bb10 <UServo::~UServo()+0x18>)
    bafc:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    bafe:	6840      	ldr	r0, [r0, #4]
    bb00:	6023      	str	r3, [r4, #0]
	if (__p)
    bb02:	b118      	cbz	r0, bb0c <UServo::~UServo()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bb04:	68e1      	ldr	r1, [r4, #12]
    bb06:	1a09      	subs	r1, r1, r0
    bb08:	f00a fe68 	bl	167dc <operator delete(void*, unsigned int)>
    bb0c:	4620      	mov	r0, r4
    bb0e:	bd10      	pop	{r4, pc}
    bb10:	200080a0 	.word	0x200080a0

0000bb14 <UServo::sendHelp()>:
  else
    return false;
}

void UServo::sendHelp()
{
    bb14:	b508      	push	{r3, lr}
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    bb16:	4b0b      	ldr	r3, [pc, #44]	; (bb44 <UServo::sendHelp()+0x30>)
    bb18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    bb1c:	2b02      	cmp	r3, #2
    bb1e:	d901      	bls.n	bb24 <UServo::sendHelp()+0x10>
    bb20:	2b05      	cmp	r3, #5
    bb22:	d100      	bne.n	bb26 <UServo::sendHelp()+0x12>
  {
    usb.send("# Servo ------\n");
    usb.send("# -- \tsvos  e p v  e p v ... \tset all servos e=enable, p=position +/-1024, v=velocity.\r\n");
    usb.send("# -- \tservo i p v\tset one servo i=index 1..5, pos ~ +/-800 (us), v=velocity 0..4000 (val/s), 0=max, 1=sloooow\r\n");
  }
}
    bb24:	bd08      	pop	{r3, pc}
    usb.send("# Servo ------\n");
    bb26:	4908      	ldr	r1, [pc, #32]	; (bb48 <UServo::sendHelp()+0x34>)
    bb28:	4808      	ldr	r0, [pc, #32]	; (bb4c <UServo::sendHelp()+0x38>)
    bb2a:	f000 fd6f 	bl	c60c <UUSB::send(char const*)>
    usb.send("# -- \tsvos  e p v  e p v ... \tset all servos e=enable, p=position +/-1024, v=velocity.\r\n");
    bb2e:	4908      	ldr	r1, [pc, #32]	; (bb50 <UServo::sendHelp()+0x3c>)
    bb30:	4806      	ldr	r0, [pc, #24]	; (bb4c <UServo::sendHelp()+0x38>)
    bb32:	f000 fd6b 	bl	c60c <UUSB::send(char const*)>
    usb.send("# -- \tservo i p v\tset one servo i=index 1..5, pos ~ +/-800 (us), v=velocity 0..4000 (val/s), 0=max, 1=sloooow\r\n");
    bb36:	4907      	ldr	r1, [pc, #28]	; (bb54 <UServo::sendHelp()+0x40>)
    bb38:	4804      	ldr	r0, [pc, #16]	; (bb4c <UServo::sendHelp()+0x38>)
}
    bb3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usb.send("# -- \tservo i p v\tset one servo i=index 1..5, pos ~ +/-800 (us), v=velocity 0..4000 (val/s), 0=max, 1=sloooow\r\n");
    bb3e:	f000 bd65 	b.w	c60c <UUSB::send(char const*)>
    bb42:	bf00      	nop
    bb44:	2000f660 	.word	0x2000f660
    bb48:	20005ec8 	.word	0x20005ec8
    bb4c:	2000fac4 	.word	0x2000fac4
    bb50:	20005ed8 	.word	0x20005ed8
    bb54:	20005f34 	.word	0x20005f34

0000bb58 <UServo::setup()>:
{
    bb58:	b538      	push	{r3, r4, r5, lr}
    bb5a:	2401      	movs	r4, #1
    bb5c:	4605      	mov	r5, r0
    bb5e:	ed2d 8b02 	vpush	{d8}
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    bb62:	ed9f 8a26 	vldr	s16, [pc, #152]	; bbfc <UServo::setup()+0xa4>


int UServo::getServoPin(int i)
{
  int pin;
  switch (i)
    bb66:	2c02      	cmp	r4, #2
    bb68:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    bb6c:	d027      	beq.n	bbbe <UServo::setup()+0x66>
    bb6e:	2b02      	cmp	r3, #2
    pinMode(pin, OUTPUT);
    bb70:	f04f 0101 	mov.w	r1, #1
    bb74:	f04f 000a 	mov.w	r0, #10
  switch (i)
    bb78:	d030      	beq.n	bbdc <UServo::setup()+0x84>
    pinMode(pin, OUTPUT);
    bb7a:	f00a fa7b 	bl	16074 <pinMode>
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    bb7e:	eeb0 0a48 	vmov.f32	s0, s16
    bb82:	200a      	movs	r0, #10
    bb84:	f00a ffd2 	bl	16b2c <analogWriteFrequency>
    analogWrite(pin, 0);
    bb88:	2100      	movs	r1, #0
    bb8a:	200a      	movs	r0, #10
    bb8c:	f00a ff68 	bl	16a60 <analogWrite>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    bb90:	2c05      	cmp	r4, #5
    bb92:	d121      	bne.n	bbd8 <UServo::setup()+0x80>
    servoEnabled[i] = false;
    bb94:	2100      	movs	r1, #0
    servoValue[i] = 0;
    bb96:	222d      	movs	r2, #45	; 0x2d
    bb98:	f105 001c 	add.w	r0, r5, #28
    servoEnabled[i] = false;
    bb9c:	6169      	str	r1, [r5, #20]
    bb9e:	7629      	strb	r1, [r5, #24]
    servoValue[i] = 0;
    bba0:	f00f ffda 	bl	1bb58 <memset>
  addPublistItem("svo", "get servo configuration 'svo {enabeled pos[0...1000] vel}*5'");
    bba4:	4628      	mov	r0, r5
    bba6:	4916      	ldr	r1, [pc, #88]	; (bc00 <UServo::setup()+0xa8>)
    bba8:	4a16      	ldr	r2, [pc, #88]	; (bc04 <UServo::setup()+0xac>)
    bbaa:	f000 fc61 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    bbae:	4629      	mov	r1, r5
    bbb0:	4815      	ldr	r0, [pc, #84]	; (bc08 <UServo::setup()+0xb0>)
}
    bbb2:	ecbd 8b02 	vpop	{d8}
    bbb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb.addSubscriptionService(this);
    bbba:	f001 b96b 	b.w	ce94 <UUSB::addSubscriptionService(USubss*)>
    pinMode(pin, OUTPUT);
    bbbe:	4619      	mov	r1, r3
    bbc0:	2009      	movs	r0, #9
    bbc2:	f00a fa57 	bl	16074 <pinMode>
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    bbc6:	2009      	movs	r0, #9
    bbc8:	eeb0 0a48 	vmov.f32	s0, s16
    bbcc:	f00a ffae 	bl	16b2c <analogWriteFrequency>
    analogWrite(pin, 0);
    bbd0:	2100      	movs	r1, #0
    bbd2:	2009      	movs	r0, #9
    bbd4:	f00a ff44 	bl	16a60 <analogWrite>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    bbd8:	3401      	adds	r4, #1
    bbda:	e7c4      	b.n	bb66 <UServo::setup()+0xe>
    pinMode(pin, OUTPUT);
    bbdc:	2101      	movs	r1, #1
    bbde:	2008      	movs	r0, #8
    bbe0:	f00a fa48 	bl	16074 <pinMode>
    analogWriteFrequency(pin, PWMfrq); /// frequency (Hz)
    bbe4:	eeb0 0a48 	vmov.f32	s0, s16
    bbe8:	2008      	movs	r0, #8
    bbea:	3401      	adds	r4, #1
    bbec:	f00a ff9e 	bl	16b2c <analogWriteFrequency>
    analogWrite(pin, 0);
    bbf0:	2100      	movs	r1, #0
    bbf2:	2008      	movs	r0, #8
    bbf4:	f00a ff34 	bl	16a60 <analogWrite>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    bbf8:	e7b5      	b.n	bb66 <UServo::setup()+0xe>
    bbfa:	bf00      	nop
    bbfc:	43a68000 	.word	0x43a68000
    bc00:	20005eb4 	.word	0x20005eb4
    bc04:	20005e74 	.word	0x20005e74
    bc08:	2000fac4 	.word	0x2000fac4

0000bc0c <UServo::setServo(signed char, short, bool, signed char)>:
  setServoPWM(idx-1, value, enable, vel);
    bc0c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    if (serviIdx >= 0 and serviIdx < MAX_SERVO_CNT)
    bc10:	f1bc 0f04 	cmp.w	ip, #4
{
    bc14:	b510      	push	{r4, lr}
    bc16:	f99d e008 	ldrsb.w	lr, [sp, #8]
    bc1a:	d808      	bhi.n	bc2e <UServo::setServo(signed char, short, bool, signed char)+0x22>
      if (serviIdx < 4 or robot.robotHWversion != 9)
    bc1c:	d008      	beq.n	bc30 <UServo::setServo(signed char, short, bool, signed char)+0x24>
        servoRef[serviIdx] = pwm;
    bc1e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
        servoEnaRef[serviIdx] = enable;
    bc22:	4460      	add	r0, ip
        servoRef[serviIdx] = pwm;
    bc24:	870a      	strh	r2, [r1, #56]	; 0x38
        servoEnaRef[serviIdx] = enable;
    bc26:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  setServoPWM(idx-1, value, enable, vel);
    bc2a:	f8a1 e02e 	strh.w	lr, [r1, #46]	; 0x2e
}
    bc2e:	bd10      	pop	{r4, pc}
      if (serviIdx < 4 or robot.robotHWversion != 9)
    bc30:	4c02      	ldr	r4, [pc, #8]	; (bc3c <UServo::setServo(signed char, short, bool, signed char)+0x30>)
    bc32:	f894 4030 	ldrb.w	r4, [r4, #48]	; 0x30
    bc36:	2c09      	cmp	r4, #9
    bc38:	d1f1      	bne.n	bc1e <UServo::setServo(signed char, short, bool, signed char)+0x12>
    bc3a:	e7f8      	b.n	bc2e <UServo::setServo(signed char, short, bool, signed char)+0x22>
    bc3c:	2000f660 	.word	0x2000f660

0000bc40 <UServo::sendServoStatus()>:
           servo.servoEnabled[0], int(servo.servoValue[0]/100), servo.servoVel[0],
    bc40:	4824      	ldr	r0, [pc, #144]	; (bcd4 <UServo::sendServoStatus()+0x94>)
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bc42:	4b25      	ldr	r3, [pc, #148]	; (bcd8 <UServo::sendServoStatus()+0x98>)
    bc44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc46:	f9b0 1038 	ldrsh.w	r1, [r0, #56]	; 0x38
{ // return servo status
    bc4a:	b530      	push	{r4, r5, lr}
    bc4c:	b0b1      	sub	sp, #196	; 0xc4
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc4e:	910d      	str	r1, [sp, #52]	; 0x34
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bc50:	fb83 4102 	smull	r4, r1, r3, r2
           servo.servoEnabled[3], int(servo.servoValue[3]/100), servo.servoVel[3],
    bc54:	6a85      	ldr	r5, [r0, #40]	; 0x28
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bc56:	17d2      	asrs	r2, r2, #31
           servo.servoEnabled[3], int(servo.servoValue[3]/100), servo.servoVel[3],
    bc58:	fb83 ec05 	smull	lr, ip, r3, r5
    bc5c:	17ed      	asrs	r5, r5, #31
           servo.servoEnabled[4], int(servo.servoValue[4]/100), servo.servoVel[4]
    bc5e:	ebc2 1261 	rsb	r2, r2, r1, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc62:	7e01      	ldrb	r1, [r0, #24]
           servo.servoEnabled[3], int(servo.servoValue[3]/100), servo.servoVel[3],
    bc64:	ebc5 156c 	rsb	r5, r5, ip, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc68:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
           servo.servoEnabled[0], int(servo.servoValue[0]/100), servo.servoVel[0],
    bc6c:	69c4      	ldr	r4, [r0, #28]
           servo.servoEnabled[1], int(servo.servoValue[1]/100), servo.servoVel[1],
    bc6e:	e9d0 2108 	ldrd	r2, r1, [r0, #32]
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc72:	9509      	str	r5, [sp, #36]	; 0x24
           servo.servoEnabled[0], int(servo.servoValue[0]/100), servo.servoVel[0],
    bc74:	fb83 c504 	smull	ip, r5, r3, r4
    bc78:	17e4      	asrs	r4, r4, #31
    bc7a:	ebc4 1465 	rsb	r4, r4, r5, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc7e:	9400      	str	r4, [sp, #0]
           servo.servoEnabled[2], int(servo.servoValue[2]/100), servo.servoVel[2],
    bc80:	fb83 5401 	smull	r5, r4, r3, r1
    bc84:	17c9      	asrs	r1, r1, #31
    bc86:	ebc1 1164 	rsb	r1, r1, r4, asr #5
           servo.servoEnabled[1], int(servo.servoValue[1]/100), servo.servoVel[1],
    bc8a:	fb83 4302 	smull	r4, r3, r3, r2
    bc8e:	17d2      	asrs	r2, r2, #31
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc90:	9106      	str	r1, [sp, #24]
           servo.servoEnabled[1], int(servo.servoValue[1]/100), servo.servoVel[1],
    bc92:	ebc2 1263 	rsb	r2, r2, r3, asr #5
  snprintf(s, MSL, "svo %d %d %d  %d %d %d  %d %d %d  %d %d %d  %d %d %d"
    bc96:	7d81      	ldrb	r1, [r0, #22]
    bc98:	7d43      	ldrb	r3, [r0, #21]
    bc9a:	9105      	str	r1, [sp, #20]
    bc9c:	f9b0 1032 	ldrsh.w	r1, [r0, #50]	; 0x32
    bca0:	9302      	str	r3, [sp, #8]
    bca2:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
    bca6:	e9cd 2103 	strd	r2, r1, [sp, #12]
    bcaa:	9301      	str	r3, [sp, #4]
    bcac:	2182      	movs	r1, #130	; 0x82
    bcae:	f9b0 4036 	ldrsh.w	r4, [r0, #54]	; 0x36
    bcb2:	7d03      	ldrb	r3, [r0, #20]
    bcb4:	940a      	str	r4, [sp, #40]	; 0x28
    bcb6:	7dc4      	ldrb	r4, [r0, #23]
    bcb8:	4a08      	ldr	r2, [pc, #32]	; (bcdc <UServo::sendServoStatus()+0x9c>)
    bcba:	9408      	str	r4, [sp, #32]
    bcbc:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
    bcc0:	9007      	str	r0, [sp, #28]
    bcc2:	a80f      	add	r0, sp, #60	; 0x3c
    bcc4:	f00f fd76 	bl	1b7b4 <snprintf>
  usb.send(s);
    bcc8:	a90f      	add	r1, sp, #60	; 0x3c
    bcca:	4805      	ldr	r0, [pc, #20]	; (bce0 <UServo::sendServoStatus()+0xa0>)
    bccc:	f000 fc9e 	bl	c60c <UUSB::send(char const*)>
}
    bcd0:	b031      	add	sp, #196	; 0xc4
    bcd2:	bd30      	pop	{r4, r5, pc}
    bcd4:	2000fa64 	.word	0x2000fa64
    bcd8:	51eb851f 	.word	0x51eb851f
    bcdc:	20005df8 	.word	0x20005df8
    bce0:	2000fac4 	.word	0x2000fac4

0000bce4 <UServo::sendData(int)>:
  switch (item)
    bce4:	b101      	cbz	r1, bce8 <UServo::sendData(int)+0x4>
}
    bce6:	4770      	bx	lr
    case 0: sendServoStatus(); break;
    bce8:	f7ff bfaa 	b.w	bc40 <UServo::sendServoStatus()>

0000bcec <UServo::setServoConfig(char const*)>:
{
    bcec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bcf0:	b083      	sub	sp, #12
    bcf2:	4608      	mov	r0, r1
    e = strtol(p1, (char**)&p1, 10);
    bcf4:	220a      	movs	r2, #10
    bcf6:	4f22      	ldr	r7, [pc, #136]	; (bd80 <UServo::setServoConfig(char const*)+0x94>)
    bcf8:	a901      	add	r1, sp, #4
  const char * p1 = line;
    bcfa:	9001      	str	r0, [sp, #4]
    e = strtol(p1, (char**)&p1, 10);
    bcfc:	f00f fb6a 	bl	1b3d4 <strtol>
    v = strtol(p1, (char**)&p1, 10);
    bd00:	220a      	movs	r2, #10
    e = strtol(p1, (char**)&p1, 10);
    bd02:	4604      	mov	r4, r0
    v = strtol(p1, (char**)&p1, 10);
    bd04:	a901      	add	r1, sp, #4
    bd06:	9801      	ldr	r0, [sp, #4]
    bd08:	f107 0915 	add.w	r9, r7, #21
    bd0c:	f00f fb62 	bl	1b3d4 <strtol>
    a = strtol(p1, (char**)&p1, 10);
    bd10:	220a      	movs	r2, #10
    bd12:	a901      	add	r1, sp, #4
    v = strtol(p1, (char**)&p1, 10);
    bd14:	b205      	sxth	r5, r0
    a = strtol(p1, (char**)&p1, 10);
    bd16:	9801      	ldr	r0, [sp, #4]
  setServoPWM(idx-1, value, enable, vel);
    bd18:	2601      	movs	r6, #1
    a = strtol(p1, (char**)&p1, 10);
    bd1a:	f00f fb5b 	bl	1b3d4 <strtol>
    bd1e:	f8df 8064 	ldr.w	r8, [pc, #100]	; bd84 <UServo::setServoConfig(char const*)+0x98>
    servo.setServo(i, v, e != 0, a);
    bd22:	b223      	sxth	r3, r4
  setServoPWM(idx-1, value, enable, vel);
    bd24:	b240      	sxtb	r0, r0
    servo.setServo(i, v, e != 0, a);
    bd26:	3b00      	subs	r3, #0
    bd28:	bf18      	it	ne
    bd2a:	2301      	movne	r3, #1
  for (int i = 1; i <= 5; i++)
    bd2c:	2e05      	cmp	r6, #5
        servoRef[serviIdx] = pwm;
    bd2e:	81bd      	strh	r5, [r7, #12]
    e = strtol(p1, (char**)&p1, 10);
    bd30:	f04f 020a 	mov.w	r2, #10
        servoEnaRef[serviIdx] = enable;
    bd34:	f809 3f01 	strb.w	r3, [r9, #1]!
    bd38:	a901      	add	r1, sp, #4
        servoVel[serviIdx] = vel;
    bd3a:	f827 0f02 	strh.w	r0, [r7, #2]!
  for (int i = 1; i <= 5; i++)
    bd3e:	d01c      	beq.n	bd7a <UServo::setServoConfig(char const*)+0x8e>
    e = strtol(p1, (char**)&p1, 10);
    bd40:	9801      	ldr	r0, [sp, #4]
    bd42:	f00f fb47 	bl	1b3d4 <strtol>
    v = strtol(p1, (char**)&p1, 10);
    bd46:	220a      	movs	r2, #10
    e = strtol(p1, (char**)&p1, 10);
    bd48:	4604      	mov	r4, r0
    v = strtol(p1, (char**)&p1, 10);
    bd4a:	a901      	add	r1, sp, #4
    bd4c:	9801      	ldr	r0, [sp, #4]
    bd4e:	f00f fb41 	bl	1b3d4 <strtol>
    a = strtol(p1, (char**)&p1, 10);
    bd52:	220a      	movs	r2, #10
    v = strtol(p1, (char**)&p1, 10);
    bd54:	4605      	mov	r5, r0
    a = strtol(p1, (char**)&p1, 10);
    bd56:	a901      	add	r1, sp, #4
    bd58:	9801      	ldr	r0, [sp, #4]
    bd5a:	f00f fb3b 	bl	1b3d4 <strtol>
    servo.setServo(i, v, e != 0, a);
    bd5e:	b223      	sxth	r3, r4
    v = strtol(p1, (char**)&p1, 10);
    bd60:	b22d      	sxth	r5, r5
    servo.setServo(i, v, e != 0, a);
    bd62:	3b00      	subs	r3, #0
  setServoPWM(idx-1, value, enable, vel);
    bd64:	b240      	sxtb	r0, r0
    servo.setServo(i, v, e != 0, a);
    bd66:	bf18      	it	ne
    bd68:	2301      	movne	r3, #1
      if (serviIdx < 4 or robot.robotHWversion != 9)
    bd6a:	2e04      	cmp	r6, #4
    bd6c:	f106 0601 	add.w	r6, r6, #1
    bd70:	d1dc      	bne.n	bd2c <UServo::setServoConfig(char const*)+0x40>
    bd72:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
    bd76:	2a09      	cmp	r2, #9
    bd78:	d1d8      	bne.n	bd2c <UServo::setServoConfig(char const*)+0x40>
}
    bd7a:	b003      	add	sp, #12
    bd7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bd80:	2000fa92 	.word	0x2000fa92
    bd84:	2000f660 	.word	0x2000f660

0000bd88 <UServo::setOneServo(char const*)>:
{
    bd88:	b570      	push	{r4, r5, r6, lr}
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    bd8a:	4d2f      	ldr	r5, [pc, #188]	; (be48 <UServo::setOneServo(char const*)+0xc0>)
{
    bd8c:	b082      	sub	sp, #8
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    bd8e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    bd92:	2b02      	cmp	r3, #2
    bd94:	d912      	bls.n	bdbc <UServo::setOneServo(char const*)+0x34>
    bd96:	2b05      	cmp	r3, #5
    bd98:	d010      	beq.n	bdbc <UServo::setOneServo(char const*)+0x34>
    int8_t idx = strtol(p1, (char**)&p1, 10);
    bd9a:	4608      	mov	r0, r1
    const char * p1 = line;
    bd9c:	9101      	str	r1, [sp, #4]
    int8_t idx = strtol(p1, (char**)&p1, 10);
    bd9e:	220a      	movs	r2, #10
    bda0:	a901      	add	r1, sp, #4
    bda2:	f00f fb17 	bl	1b3d4 <strtol>
    if (idx >= 1 and idx <= 6)
    bda6:	1e43      	subs	r3, r0, #1
    int8_t idx = strtol(p1, (char**)&p1, 10);
    bda8:	4604      	mov	r4, r0
    if (idx >= 1 and idx <= 6)
    bdaa:	b2db      	uxtb	r3, r3
    bdac:	2b05      	cmp	r3, #5
    bdae:	d90c      	bls.n	bdca <UServo::setOneServo(char const*)+0x42>
      usb.send("# unknown servo: 1-3 is servo 4,5 is pins\r\n");
    bdb0:	4926      	ldr	r1, [pc, #152]	; (be4c <UServo::setOneServo(char const*)+0xc4>)
    bdb2:	4827      	ldr	r0, [pc, #156]	; (be50 <UServo::setOneServo(char const*)+0xc8>)
    bdb4:	f000 fc2a 	bl	c60c <UUSB::send(char const*)>
}
    bdb8:	b002      	add	sp, #8
    bdba:	bd70      	pop	{r4, r5, r6, pc}
    usb.send("# supported on hardware version 3\r\n");
    bdbc:	4925      	ldr	r1, [pc, #148]	; (be54 <UServo::setOneServo(char const*)+0xcc>)
    bdbe:	4824      	ldr	r0, [pc, #144]	; (be50 <UServo::setOneServo(char const*)+0xc8>)
}
    bdc0:	b002      	add	sp, #8
    bdc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    usb.send("# supported on hardware version 3\r\n");
    bdc6:	f000 bc21 	b.w	c60c <UUSB::send(char const*)>
      int us = strtol(p1, (char**)&p1, 10);
    bdca:	220a      	movs	r2, #10
    bdcc:	a901      	add	r1, sp, #4
    bdce:	9801      	ldr	r0, [sp, #4]
      switch (idx)
    bdd0:	b264      	sxtb	r4, r4
      int us = strtol(p1, (char**)&p1, 10);
    bdd2:	f00f faff 	bl	1b3d4 <strtol>
    bdd6:	4606      	mov	r6, r0
      int vel = strtol(p1, (char**)&p1, 10);
    bdd8:	220a      	movs	r2, #10
    bdda:	a901      	add	r1, sp, #4
    bddc:	9801      	ldr	r0, [sp, #4]
      switch (idx)
    bdde:	3c01      	subs	r4, #1
      int vel = strtol(p1, (char**)&p1, 10);
    bde0:	f00f faf8 	bl	1b3d4 <strtol>
      enable = us >= -1024 and us <= 1024;
    bde4:	f506 6380 	add.w	r3, r6, #1024	; 0x400
    bde8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bdec:	bf8c      	ite	hi
    bdee:	2300      	movhi	r3, #0
    bdf0:	2301      	movls	r3, #1
      switch (idx)
    bdf2:	2c04      	cmp	r4, #4
    bdf4:	d8e0      	bhi.n	bdb8 <UServo::setOneServo(char const*)+0x30>
    bdf6:	e8df f004 	tbb	[pc, r4]
    bdfa:	140e      	.short	0x140e
    bdfc:	201a      	.short	0x201a
    bdfe:	03          	.byte	0x03
    bdff:	00          	.byte	0x00
    be00:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    be04:	2a09      	cmp	r2, #9
    be06:	d0d7      	beq.n	bdb8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    be08:	4a13      	ldr	r2, [pc, #76]	; (be58 <UServo::setOneServo(char const*)+0xd0>)
        case 5: servo.setServoPWM(4, us, enable, vel); break; 
    be0a:	f8a2 6042 	strh.w	r6, [r2, #66]	; 0x42
        servoEnaRef[serviIdx] = enable;
    be0e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    be12:	8710      	strh	r0, [r2, #56]	; 0x38
    be14:	e7d0      	b.n	bdb8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    be16:	4a10      	ldr	r2, [pc, #64]	; (be58 <UServo::setOneServo(char const*)+0xd0>)
          servo.setServoPWM(0, us, enable, vel); 
    be18:	8756      	strh	r6, [r2, #58]	; 0x3a
        servoEnaRef[serviIdx] = enable;
    be1a:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
    be1e:	8610      	strh	r0, [r2, #48]	; 0x30
    be20:	e7ca      	b.n	bdb8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    be22:	4a0d      	ldr	r2, [pc, #52]	; (be58 <UServo::setOneServo(char const*)+0xd0>)
        case 2: servo.setServoPWM(1, us, enable, vel); break;
    be24:	8796      	strh	r6, [r2, #60]	; 0x3c
        servoEnaRef[serviIdx] = enable;
    be26:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    be2a:	8650      	strh	r0, [r2, #50]	; 0x32
    be2c:	e7c4      	b.n	bdb8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    be2e:	4a0a      	ldr	r2, [pc, #40]	; (be58 <UServo::setOneServo(char const*)+0xd0>)
        case 3: servo.setServoPWM(2, us, enable, vel); break;
    be30:	87d6      	strh	r6, [r2, #62]	; 0x3e
        servoEnaRef[serviIdx] = enable;
    be32:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    be36:	8690      	strh	r0, [r2, #52]	; 0x34
    be38:	e7be      	b.n	bdb8 <UServo::setOneServo(char const*)+0x30>
        servoRef[serviIdx] = pwm;
    be3a:	4a07      	ldr	r2, [pc, #28]	; (be58 <UServo::setOneServo(char const*)+0xd0>)
        case 4: servo.setServoPWM(3, us, enable, vel); break;
    be3c:	f8a2 6040 	strh.w	r6, [r2, #64]	; 0x40
        servoEnaRef[serviIdx] = enable;
    be40:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
    be44:	86d0      	strh	r0, [r2, #54]	; 0x36
    be46:	e7b7      	b.n	bdb8 <UServo::setOneServo(char const*)+0x30>
    be48:	2000f660 	.word	0x2000f660
    be4c:	20005da8 	.word	0x20005da8
    be50:	2000fac4 	.word	0x2000fac4
    be54:	20005dd4 	.word	0x20005dd4
    be58:	2000fa64 	.word	0x2000fa64

0000be5c <UServo::decode(char const*)>:
{
    be5c:	b538      	push	{r3, r4, r5, lr}
  if (robot.robotHWversion >= 3 and robot.robotHWversion != 5)
    be5e:	4b13      	ldr	r3, [pc, #76]	; (beac <UServo::decode(char const*)+0x50>)
    be60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    be64:	2b05      	cmp	r3, #5
    be66:	bf18      	it	ne
    be68:	2b02      	cmpne	r3, #2
    be6a:	bf8c      	ite	hi
    be6c:	2401      	movhi	r4, #1
    be6e:	2400      	movls	r4, #0
    be70:	d90d      	bls.n	be8e <UServo::decode(char const*)+0x32>
    be72:	460d      	mov	r5, r1
    if (strncmp(buf, "svos ", 5) == 0)
    be74:	2205      	movs	r2, #5
    be76:	490e      	ldr	r1, [pc, #56]	; (beb0 <UServo::decode(char const*)+0x54>)
    be78:	4628      	mov	r0, r5
    be7a:	f00f ff53 	bl	1bd24 <strncmp>
    be7e:	b140      	cbz	r0, be92 <UServo::decode(char const*)+0x36>
    else if (strncmp(buf, "servo ", 6) == 0)
    be80:	2206      	movs	r2, #6
    be82:	490c      	ldr	r1, [pc, #48]	; (beb4 <UServo::decode(char const*)+0x58>)
    be84:	4628      	mov	r0, r5
    be86:	f00f ff4d 	bl	1bd24 <strncmp>
    be8a:	b140      	cbz	r0, be9e <UServo::decode(char const*)+0x42>
    return false;
    be8c:	2400      	movs	r4, #0
}
    be8e:	4620      	mov	r0, r4
    be90:	bd38      	pop	{r3, r4, r5, pc}
      servo.setServoConfig(&buf[5]);
    be92:	1d69      	adds	r1, r5, #5
    be94:	4808      	ldr	r0, [pc, #32]	; (beb8 <UServo::decode(char const*)+0x5c>)
    be96:	f7ff ff29 	bl	bcec <UServo::setServoConfig(char const*)>
}
    be9a:	4620      	mov	r0, r4
    be9c:	bd38      	pop	{r3, r4, r5, pc}
      servo.setOneServo(&buf[6]);
    be9e:	1da9      	adds	r1, r5, #6
    bea0:	4805      	ldr	r0, [pc, #20]	; (beb8 <UServo::decode(char const*)+0x5c>)
    bea2:	f7ff ff71 	bl	bd88 <UServo::setOneServo(char const*)>
}
    bea6:	4620      	mov	r0, r4
    bea8:	bd38      	pop	{r3, r4, r5, pc}
    beaa:	bf00      	nop
    beac:	2000f660 	.word	0x2000f660
    beb0:	20005eb8 	.word	0x20005eb8
    beb4:	20005ec0 	.word	0x20005ec0
    beb8:	2000fa64 	.word	0x2000fa64

0000bebc <UServo::tick()>:
  return pin;
}


void UServo::tick()
{ // speed limit on servo
    bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bec0:	2400      	movs	r4, #0
    bec2:	f04f 0801 	mov.w	r8, #1
    bec6:	b0a5      	sub	sp, #148	; 0x94
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    bec8:	f8df 9180 	ldr.w	r9, [pc, #384]	; c04c <UServo::tick()+0x190>
  // pt. servo 2 (index 1) handled only 
  //
  // disable servo nicely
  for (int i = 0; i < MAX_SERVO_CNT; i++)
  {
    if (i == 4 and robot.robotHWversion == 9)
    becc:	2c04      	cmp	r4, #4
{ // speed limit on servo
    bece:	4606      	mov	r6, r0
          analogWrite(pin, 0);
          servoEnabled[i] = false;
        }
      }
      else
        servoEnabled[i] = true;
    bed0:	46c2      	mov	sl, r8
    bed2:	f100 0514 	add.w	r5, r0, #20
    if (i == 4 and robot.robotHWversion == 9)
    bed6:	f8df b178 	ldr.w	fp, [pc, #376]	; c050 <UServo::tick()+0x194>
    beda:	d01d      	beq.n	bf18 <UServo::tick()+0x5c>
  switch (i)
    bedc:	2c01      	cmp	r4, #1
    bede:	d062      	beq.n	bfa6 <UServo::tick()+0xea>
    bee0:	2c02      	cmp	r4, #2
    bee2:	d11d      	bne.n	bf20 <UServo::tick()+0x64>
    if (servoEnabled[i] != servoEnaRef[i])
    bee4:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    bee8:	782b      	ldrb	r3, [r5, #0]
    beea:	42bb      	cmp	r3, r7
    beec:	d00e      	beq.n	bf0c <UServo::tick()+0x50>
    case 2: pin = PIN_SERVO3; break;
    beee:	2008      	movs	r0, #8
      if (not servoEnaRef[i])
    bef0:	b9f7      	cbnz	r7, bf30 <UServo::tick()+0x74>
    bef2:	0103      	lsls	r3, r0, #4
    bef4:	f859 3003 	ldr.w	r3, [r9, r3]
    bef8:	689a      	ldr	r2, [r3, #8]
    befa:	eb09 1300 	add.w	r3, r9, r0, lsl #4
    befe:	68db      	ldr	r3, [r3, #12]
    bf00:	421a      	tst	r2, r3
    bf02:	f000 8099 	beq.w	c038 <UServo::tick()+0x17c>
  for (int i = 0; i < MAX_SERVO_CNT; i++)
    bf06:	f1b8 0f05 	cmp.w	r8, #5
    bf0a:	d016      	beq.n	bf3a <UServo::tick()+0x7e>
    bf0c:	3401      	adds	r4, #1
    bf0e:	f108 0801 	add.w	r8, r8, #1
    bf12:	3501      	adds	r5, #1
    if (i == 4 and robot.robotHWversion == 9)
    bf14:	2c04      	cmp	r4, #4
    bf16:	d1e1      	bne.n	bedc <UServo::tick()+0x20>
    bf18:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
    bf1c:	2b09      	cmp	r3, #9
    bf1e:	d00c      	beq.n	bf3a <UServo::tick()+0x7e>
  switch (i)
    bf20:	200a      	movs	r0, #10
    if (servoEnabled[i] != servoEnaRef[i])
    bf22:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    bf26:	782b      	ldrb	r3, [r5, #0]
    bf28:	42bb      	cmp	r3, r7
    bf2a:	d0ec      	beq.n	bf06 <UServo::tick()+0x4a>
      if (not servoEnaRef[i])
    bf2c:	2f00      	cmp	r7, #0
    bf2e:	d0e0      	beq.n	bef2 <UServo::tick()+0x36>
  for (int i = 0; i < MAX_SERVO_CNT; i++)
    bf30:	f1b8 0f05 	cmp.w	r8, #5
        servoEnabled[i] = true;
    bf34:	f885 a000 	strb.w	sl, [r5]
  for (int i = 0; i < MAX_SERVO_CNT; i++)
    bf38:	d1e8      	bne.n	bf0c <UServo::tick()+0x50>
    bf3a:	f106 081c 	add.w	r8, r6, #28
    bf3e:	f106 0730 	add.w	r7, r6, #48	; 0x30
    case 2: pin = PIN_SERVO3; break;
    bf42:	2400      	movs	r4, #0
    bf44:	3613      	adds	r6, #19
    }
  }
  //
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
  {
    if (i == 4 and robot.robotHWversion == 9)
    bf46:	f8df 9108 	ldr.w	r9, [pc, #264]	; c050 <UServo::tick()+0x194>
      { // implement new value
          servoValue[i] += dw;
        // midt v= 2040, min=1240, max= 2840
        // valid for HiTec HS7235-MH in high angle mode
        // v is pulsewidth in us
        int v = ((servoValue[i]/100) * msPulse/2) / 512 + midt;
    bf4a:	f8df b108 	ldr.w	fp, [pc, #264]	; c054 <UServo::tick()+0x198>
	return systick_millis_count;
    bf4e:	f8df a108 	ldr.w	sl, [pc, #264]	; c058 <UServo::tick()+0x19c>
    if (i == 4 and robot.robotHWversion == 9)
    bf52:	2c04      	cmp	r4, #4
    bf54:	d02b      	beq.n	bfae <UServo::tick()+0xf2>
  switch (i)
    bf56:	2c01      	cmp	r4, #1
    bf58:	d027      	beq.n	bfaa <UServo::tick()+0xee>
    case 0: pin = PIN_SERVO1; break;
    bf5a:	2c02      	cmp	r4, #2
    bf5c:	bf0c      	ite	eq
    bf5e:	2008      	moveq	r0, #8
    bf60:	200a      	movne	r0, #10
    if (servoEnabled[i] /*and (millis() % 10 == i)*/)
    bf62:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    bf66:	b1ab      	cbz	r3, bf94 <UServo::tick()+0xd8>
      int e = servoRef[i]*100 - servoValue[i];
    bf68:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
    bf6c:	f8d8 3000 	ldr.w	r3, [r8]
    bf70:	eb05 0585 	add.w	r5, r5, r5, lsl #2
      if (abs(dw) > servoVel[i] and servoVel[i] > 0)
    bf74:	f9b7 2000 	ldrsh.w	r2, [r7]
      int e = servoRef[i]*100 - servoValue[i];
    bf78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    bf7c:	ebc3 0585 	rsb	r5, r3, r5, lsl #2
      if (abs(dw) > servoVel[i] and servoVel[i] > 0)
    bf80:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
    bf84:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
    bf88:	4291      	cmp	r1, r2
    bf8a:	dd01      	ble.n	bf90 <UServo::tick()+0xd4>
    bf8c:	2a00      	cmp	r2, #0
    bf8e:	dc14      	bgt.n	bfba <UServo::tick()+0xfe>
      int e = servoRef[i]*100 - servoValue[i];
    bf90:	462a      	mov	r2, r5
      if (dw != 0)
    bf92:	b9ba      	cbnz	r2, bfc4 <UServo::tick()+0x108>
  for (unsigned int i = 0; i < MAX_SERVO_CNT; i++)
    bf94:	3401      	adds	r4, #1
    bf96:	f108 0804 	add.w	r8, r8, #4
    bf9a:	3702      	adds	r7, #2
    bf9c:	2c05      	cmp	r4, #5
    bf9e:	d1d8      	bne.n	bf52 <UServo::tick()+0x96>
                 i, servoRef[i], e, servoValue[i], servoVel[i], dw, v);
        usb.send(s);
      }
    }
  }
}
    bfa0:	b025      	add	sp, #148	; 0x94
    bfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case 1: pin = PIN_SERVO2; break;
    bfa6:	2009      	movs	r0, #9
    bfa8:	e7bb      	b.n	bf22 <UServo::tick()+0x66>
    bfaa:	2009      	movs	r0, #9
    bfac:	e7d9      	b.n	bf62 <UServo::tick()+0xa6>
    if (i == 4 and robot.robotHWversion == 9)
    bfae:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    bfb2:	2b09      	cmp	r3, #9
    bfb4:	d0f4      	beq.n	bfa0 <UServo::tick()+0xe4>
    case 0: pin = PIN_SERVO1; break;
    bfb6:	200a      	movs	r0, #10
    bfb8:	e7d3      	b.n	bf62 <UServo::tick()+0xa6>
        if (dw > 0)
    bfba:	2d00      	cmp	r5, #0
    bfbc:	dce9      	bgt.n	bf92 <UServo::tick()+0xd6>
          dw = -servoVel[i];
    bfbe:	4252      	negs	r2, r2
      if (dw != 0)
    bfc0:	2a00      	cmp	r2, #0
    bfc2:	d0e7      	beq.n	bf94 <UServo::tick()+0xd8>
          servoValue[i] += dw;
    bfc4:	4413      	add	r3, r2
    bfc6:	9209      	str	r2, [sp, #36]	; 0x24
        int v = ((servoValue[i]/100) * msPulse/2) / 512 + midt;
    bfc8:	fb8b c103 	smull	ip, r1, fp, r3
          servoValue[i] += dw;
    bfcc:	f8c8 3000 	str.w	r3, [r8]
        int v = ((servoValue[i]/100) * msPulse/2) / 512 + midt;
    bfd0:	17db      	asrs	r3, r3, #31
    bfd2:	ebc3 1161 	rsb	r1, r3, r1, asr #5
    bfd6:	f240 5353 	movw	r3, #1363	; 0x553
    bfda:	fb03 f101 	mul.w	r1, r3, r1
    bfde:	f640 43b2 	movw	r3, #3250	; 0xcb2
    bfe2:	2900      	cmp	r1, #0
    bfe4:	bfb8      	it	lt
    bfe6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
    bfea:	1289      	asrs	r1, r1, #10
    bfec:	f201 71fc 	addw	r1, r1, #2044	; 0x7fc
    bff0:	4299      	cmp	r1, r3
    bff2:	bfa8      	it	ge
    bff4:	4619      	movge	r1, r3
    bff6:	29c8      	cmp	r1, #200	; 0xc8
    bff8:	bfb8      	it	lt
    bffa:	21c8      	movlt	r1, #200	; 0xc8
        analogWrite(pin, v);
    bffc:	9108      	str	r1, [sp, #32]
    bffe:	f00a fd2f 	bl	16a60 <analogWrite>
        snprintf(s, MSL, "# setvo t=%lu, %d, ref=%d, e=%d, value=%ld, vel=%d, dw=%d, v=%d\n",
    c002:	9908      	ldr	r1, [sp, #32]
    c004:	a80b      	add	r0, sp, #44	; 0x2c
    c006:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c008:	9106      	str	r1, [sp, #24]
    c00a:	2164      	movs	r1, #100	; 0x64
    c00c:	9205      	str	r2, [sp, #20]
    c00e:	9502      	str	r5, [sp, #8]
    c010:	f9b7 3000 	ldrsh.w	r3, [r7]
    c014:	9304      	str	r3, [sp, #16]
    c016:	f8d8 3000 	ldr.w	r3, [r8]
    c01a:	9303      	str	r3, [sp, #12]
    c01c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
    c020:	f8da 3000 	ldr.w	r3, [sl]
    c024:	e9cd 4200 	strd	r4, r2, [sp]
    c028:	4a06      	ldr	r2, [pc, #24]	; (c044 <UServo::tick()+0x188>)
    c02a:	f00f fbc3 	bl	1b7b4 <snprintf>
        usb.send(s);
    c02e:	a90b      	add	r1, sp, #44	; 0x2c
    c030:	4805      	ldr	r0, [pc, #20]	; (c048 <UServo::tick()+0x18c>)
    c032:	f000 faeb 	bl	c60c <UUSB::send(char const*)>
    c036:	e7ad      	b.n	bf94 <UServo::tick()+0xd8>
          analogWrite(pin, 0);
    c038:	4639      	mov	r1, r7
    c03a:	f00a fd11 	bl	16a60 <analogWrite>
          servoEnabled[i] = false;
    c03e:	702f      	strb	r7, [r5, #0]
    c040:	e761      	b.n	bf06 <UServo::tick()+0x4a>
    c042:	bf00      	nop
    c044:	20005e30 	.word	0x20005e30
    c048:	2000fac4 	.word	0x2000fac4
    c04c:	200081bc 	.word	0x200081bc
    c050:	2000f660 	.word	0x2000f660
    c054:	51eb851f 	.word	0x51eb851f
    c058:	2000fab8 	.word	0x2000fab8

0000c05c <UServo::eePromSave()>:

///////////////////////////////////////////////////////

void UServo::eePromSave()
{
    c05c:	b508      	push	{r3, lr}
  uint8_t flag = 0;
  // flags - no flags to save here
  if (false)
    flag +=  1 << 0;
  eeConfig.pushByte(flag);
    c05e:	4809      	ldr	r0, [pc, #36]	; (c084 <UServo::eePromSave()+0x28>)
    c060:	2100      	movs	r1, #0
    c062:	f7f7 f855 	bl	3110 <EEConfig::pushByte(unsigned char)>
  eeConfig.pushWord(0); // not used anymore (steering servo)
    c066:	2100      	movs	r1, #0
    c068:	4806      	ldr	r0, [pc, #24]	; (c084 <UServo::eePromSave()+0x28>)
    c06a:	f7f7 f86d 	bl	3148 <EEConfig::pushWord(unsigned short)>
    push32(u.u32);
    c06e:	2100      	movs	r1, #0
    c070:	4804      	ldr	r0, [pc, #16]	; (c084 <UServo::eePromSave()+0x28>)
    c072:	f7f7 f831 	bl	30d8 <EEConfig::push32(unsigned long)>
    c076:	2100      	movs	r1, #0
    c078:	4802      	ldr	r0, [pc, #8]	; (c084 <UServo::eePromSave()+0x28>)
  eeConfig.pushFloat(0.0);
  eeConfig.pushFloat(0.0);
}
    c07a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c07e:	f7f7 b82b 	b.w	30d8 <EEConfig::push32(unsigned long)>
    c082:	bf00      	nop
    c084:	2000ebf4 	.word	0x2000ebf4

0000c088 <UServo::eePromLoad()>:

void UServo::eePromLoad()
{ // not used, but has reserved space for servo calibration
    c088:	b510      	push	{r4, lr}
    return stringConfig;
    c08a:	4c0b      	ldr	r4, [pc, #44]	; (c0b8 <UServo::eePromLoad()+0x30>)
  if (eeConfig.isStringConfig())
    c08c:	f894 3020 	ldrb.w	r3, [r4, #32]
    c090:	b11b      	cbz	r3, c09a <UServo::eePromLoad()+0x12>
    configAddr+=bytes;
    c092:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c094:	330b      	adds	r3, #11
    c096:	6263      	str	r3, [r4, #36]	; 0x24
    // distance to front wheel
    eeConfig.readFloat();
    // angle servo turns when PW change from 1 to 2 ms
    eeConfig.readFloat();
  }
}
    c098:	bd10      	pop	{r4, pc}
    /*uint8_t flag =*/ eeConfig.readByte();
    c09a:	4620      	mov	r0, r4
    c09c:	f7f7 f884 	bl	31a8 <EEConfig::readByte()>
    eeConfig.readWord();
    c0a0:	4620      	mov	r0, r4
    c0a2:	f7f7 f895 	bl	31d0 <EEConfig::readWord()>
    u.u32 = read32();
    c0a6:	4620      	mov	r0, r4
    c0a8:	f7f7 f86a 	bl	3180 <EEConfig::read32()>
    c0ac:	4620      	mov	r0, r4
}
    c0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0b2:	f7f7 b865 	b.w	3180 <EEConfig::read32()>
    c0b6:	bf00      	nop
    c0b8:	2000ebf4 	.word	0x2000ebf4

0000c0bc <_GLOBAL__sub_I_servo>:
    c0bc:	b510      	push	{r4, lr}
UServo::UServo()
    c0be:	4c06      	ldr	r4, [pc, #24]	; (c0d8 <_GLOBAL__sub_I_servo+0x1c>)
    c0c0:	4620      	mov	r0, r4
    c0c2:	f000 f8b1 	bl	c228 <USubss::USubss()>
    c0c6:	4b05      	ldr	r3, [pc, #20]	; (c0dc <_GLOBAL__sub_I_servo+0x20>)
UServo servo;
    c0c8:	4620      	mov	r0, r4
    c0ca:	4a05      	ldr	r2, [pc, #20]	; (c0e0 <_GLOBAL__sub_I_servo+0x24>)
UServo::UServo()
    c0cc:	6023      	str	r3, [r4, #0]
UServo servo;
    c0ce:	4905      	ldr	r1, [pc, #20]	; (c0e4 <_GLOBAL__sub_I_servo+0x28>)
}
    c0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UServo servo;
    c0d4:	f00c bfa0 	b.w	19018 <__aeabi_atexit>
    c0d8:	2000fa64 	.word	0x2000fa64
    c0dc:	2000808c 	.word	0x2000808c
    c0e0:	20008f80 	.word	0x20008f80
    c0e4:	0000baf9 	.word	0x0000baf9

0000c0e8 <USubs::USubs(char const*, char const*)>:
USubs::USubs(const char * key, const char * help)
    c0e8:	b510      	push	{r4, lr}
    c0ea:	2300      	movs	r3, #0
    c0ec:	4604      	mov	r4, r0
    c0ee:	60c3      	str	r3, [r0, #12]
  keySize = strlen(msgKey);
    c0f0:	4608      	mov	r0, r1
USubs::USubs(const char * key, const char * help)
    c0f2:	7623      	strb	r3, [r4, #24]
    c0f4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  helpText = help;
    c0f8:	e9c4 1200 	strd	r1, r2, [r4]
  keySize = strlen(msgKey);
    c0fc:	f011 f8e0 	bl	1d2c0 <strlen>
    c100:	4603      	mov	r3, r0
}
    c102:	4620      	mov	r0, r4
  keySize = strlen(msgKey);
    c104:	60a3      	str	r3, [r4, #8]
}
    c106:	bd10      	pop	{r4, pc}

0000c108 <USubs::decode(char const*, bool)>:
{
    c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c10a:	4605      	mov	r5, r0
    if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == ' ')
    c10c:	6887      	ldr	r7, [r0, #8]
{
    c10e:	460e      	mov	r6, r1
  if (newSubscription)
    c110:	4614      	mov	r4, r2
    if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == ' ')
    c112:	6800      	ldr	r0, [r0, #0]
  if (newSubscription)
    c114:	b152      	cbz	r2, c12c <USubs::decode(char const*, bool)+0x24>
    if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == ' ')
    c116:	463a      	mov	r2, r7
    c118:	f00f fe04 	bl	1bd24 <strncmp>
    c11c:	4601      	mov	r1, r0
    c11e:	b918      	cbnz	r0, c128 <USubs::decode(char const*, bool)+0x20>
    c120:	5df2      	ldrb	r2, [r6, r7]
    c122:	19f0      	adds	r0, r6, r7
    c124:	2a20      	cmp	r2, #32
    c126:	d00d      	beq.n	c144 <USubs::decode(char const*, bool)+0x3c>
  bool used = false;
    c128:	2000      	movs	r0, #0
}
    c12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (strncmp(msgKey, keyLine, keySize) == 0  and keyLine[keySize] == 'i')
    c12c:	463a      	mov	r2, r7
    c12e:	f00f fdf9 	bl	1bd24 <strncmp>
    c132:	2800      	cmp	r0, #0
    c134:	d1f8      	bne.n	c128 <USubs::decode(char const*, bool)+0x20>
    c136:	5df2      	ldrb	r2, [r6, r7]
    c138:	2a69      	cmp	r2, #105	; 0x69
    c13a:	d1f6      	bne.n	c12a <USubs::decode(char const*, bool)+0x22>
    dataRequest = true;
    c13c:	2301      	movs	r3, #1
    used = true;
    c13e:	4618      	mov	r0, r3
    dataRequest = true;
    c140:	762b      	strb	r3, [r5, #24]
}
    c142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      int n = strtol(p1,nullptr, 10);
    c144:	220a      	movs	r2, #10
    c146:	f00f f945 	bl	1b3d4 <strtol>
    c14a:	4603      	mov	r3, r0
      used = true;
    c14c:	4620      	mov	r0, r4
      subN = n; //int(n/(float(service.sampleTime_us) / 1000.0));
    c14e:	616b      	str	r3, [r5, #20]
}
    c150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c152:	bf00      	nop

0000c154 <USubs::tick()>:
{
    c154:	b538      	push	{r3, r4, r5, lr}
  bool isTime = dataRequest;
    c156:	7e05      	ldrb	r5, [r0, #24]
{
    c158:	4604      	mov	r4, r0
  if (dataRequest)
    c15a:	b11d      	cbz	r5, c164 <USubs::tick()+0x10>
    dataRequest = false;
    c15c:	2300      	movs	r3, #0
    c15e:	7603      	strb	r3, [r0, #24]
}
    c160:	4628      	mov	r0, r5
    c162:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t us = micros();
    c164:	f009 ff20 	bl	15fa8 <micros>
    int32_t dt = us - sendTime;
    c168:	68e3      	ldr	r3, [r4, #12]
    if (dt < 0)
    c16a:	1ac3      	subs	r3, r0, r3
    c16c:	d40f      	bmi.n	c18e <USubs::tick()+0x3a>
    if (subN > 0 and (dt >= subN * 1000 or dt < 0))
    c16e:	6962      	ldr	r2, [r4, #20]
    c170:	2a00      	cmp	r2, #0
    c172:	ddf5      	ble.n	c160 <USubs::tick()+0xc>
    c174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c178:	fb01 f202 	mul.w	r2, r1, r2
    c17c:	429a      	cmp	r2, r3
    c17e:	dcef      	bgt.n	c160 <USubs::tick()+0xc>
      sendCnt++;
    c180:	6923      	ldr	r3, [r4, #16]
      isTime = true;
    c182:	2501      	movs	r5, #1
      sendTime = us;
    c184:	60e0      	str	r0, [r4, #12]
      sendCnt++;
    c186:	442b      	add	r3, r5
}
    c188:	4628      	mov	r0, r5
      sendCnt++;
    c18a:	6123      	str	r3, [r4, #16]
}
    c18c:	bd38      	pop	{r3, r4, r5, pc}
    if (subN > 0 and (dt >= subN * 1000 or dt < 0))
    c18e:	6963      	ldr	r3, [r4, #20]
      sendTime = us;
    c190:	60e0      	str	r0, [r4, #12]
    if (subN > 0 and (dt >= subN * 1000 or dt < 0))
    c192:	2b00      	cmp	r3, #0
    c194:	dcf4      	bgt.n	c180 <USubs::tick()+0x2c>
    c196:	e7e3      	b.n	c160 <USubs::tick()+0xc>

0000c198 <USubs::serviceStatus(int)>:
{
    c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (subN > 0)
    c19c:	6946      	ldr	r6, [r0, #20]
{
    c19e:	b0b6      	sub	sp, #216	; 0xd8
  if (subN > 0)
    c1a0:	2e00      	cmp	r6, #0
    c1a2:	dd1d      	ble.n	c1e0 <USubs::serviceStatus(int)+0x48>
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c1a4:	4604      	mov	r4, r0
    c1a6:	460d      	mov	r5, r1
    c1a8:	6807      	ldr	r7, [r0, #0]
    c1aa:	f8d0 8010 	ldr.w	r8, [r0, #16]
            me, msgKey, sendCnt, subN, (int32_t(micros() - sendTime)/1000));
    c1ae:	f009 fefb 	bl	15fa8 <micros>
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c1b2:	9602      	str	r6, [sp, #8]
    c1b4:	21c8      	movs	r1, #200	; 0xc8
            me, msgKey, sendCnt, subN, (int32_t(micros() - sendTime)/1000));
    c1b6:	68e3      	ldr	r3, [r4, #12]
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c1b8:	4a0b      	ldr	r2, [pc, #44]	; (c1e8 <USubs::serviceStatus(int)+0x50>)
            me, msgKey, sendCnt, subN, (int32_t(micros() - sendTime)/1000));
    c1ba:	1ac0      	subs	r0, r0, r3
    snprintf(s, MSL, "# USubs::serviceStatus: %d: %s: sendCnt=%d, subN=%d, dt=%ld\n",
    c1bc:	f8cd 8004 	str.w	r8, [sp, #4]
    c1c0:	462b      	mov	r3, r5
    c1c2:	9700      	str	r7, [sp, #0]
    c1c4:	17c4      	asrs	r4, r0, #31
    c1c6:	fb82 2000 	smull	r2, r0, r2, r0
    c1ca:	4a08      	ldr	r2, [pc, #32]	; (c1ec <USubs::serviceStatus(int)+0x54>)
    c1cc:	ebc4 10a0 	rsb	r0, r4, r0, asr #6
    c1d0:	9003      	str	r0, [sp, #12]
    c1d2:	a804      	add	r0, sp, #16
    c1d4:	f00f faee 	bl	1b7b4 <snprintf>
    usb.send(s);
    c1d8:	a904      	add	r1, sp, #16
    c1da:	4805      	ldr	r0, [pc, #20]	; (c1f0 <USubs::serviceStatus(int)+0x58>)
    c1dc:	f000 fa16 	bl	c60c <UUSB::send(char const*)>
}
    c1e0:	b036      	add	sp, #216	; 0xd8
    c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1e6:	bf00      	nop
    c1e8:	10624dd3 	.word	0x10624dd3
    c1ec:	20004db8 	.word	0x20004db8
    c1f0:	2000fac4 	.word	0x2000fac4

0000c1f4 <USubs::sendHelpLine()>:
{
    c1f4:	4684      	mov	ip, r0
  snprintf(s, MSL, "# -- \t%si and 'sub %s N' \t%s\r\n", msgKey, msgKey, helpText);
    c1f6:	4a0a      	ldr	r2, [pc, #40]	; (c220 <USubs::sendHelpLine()+0x2c>)
    c1f8:	f44f 7116 	mov.w	r1, #600	; 0x258
{
    c1fc:	b510      	push	{r4, lr}
  snprintf(s, MSL, "# -- \t%si and 'sub %s N' \t%s\r\n", msgKey, msgKey, helpText);
    c1fe:	e9dc 3400 	ldrd	r3, r4, [ip]
{
    c202:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
  snprintf(s, MSL, "# -- \t%si and 'sub %s N' \t%s\r\n", msgKey, msgKey, helpText);
    c206:	e9cd 3400 	strd	r3, r4, [sp]
    c20a:	a802      	add	r0, sp, #8
    c20c:	f00f fad2 	bl	1b7b4 <snprintf>
  usb.send(s);
    c210:	a902      	add	r1, sp, #8
    c212:	4804      	ldr	r0, [pc, #16]	; (c224 <USubs::sendHelpLine()+0x30>)
    c214:	f000 f9fa 	bl	c60c <UUSB::send(char const*)>
}
    c218:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
    c21c:	bd10      	pop	{r4, pc}
    c21e:	bf00      	nop
    c220:	20004d98 	.word	0x20004d98
    c224:	2000fac4 	.word	0x2000fac4

0000c228 <USubss::USubss()>:
	: _M_start(), _M_finish(), _M_end_of_storage()
    c228:	2200      	movs	r2, #0
USubss::USubss()
    c22a:	4903      	ldr	r1, [pc, #12]	; (c238 <USubss::USubss()+0x10>)
    c22c:	e9c0 2202 	strd	r2, r2, [r0, #8]
    c230:	e9c0 1200 	strd	r1, r2, [r0]
    c234:	6102      	str	r2, [r0, #16]
}
    c236:	4770      	bx	lr
    c238:	200080a0 	.word	0x200080a0

0000c23c <USubss::subscribeDecode(char const*)>:
{ // if the subscribe command is for any of my data, then return true.
    c23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c240:	460f      	mov	r7, r1
    c242:	4606      	mov	r6, r0
  bool newSubscription = strncmp(p1, "sub ", 4) == 0;
    c244:	2204      	movs	r2, #4
    c246:	4914      	ldr	r1, [pc, #80]	; (c298 <USubss::subscribeDecode(char const*)+0x5c>)
    c248:	4638      	mov	r0, r7
    c24a:	f00f fd6b 	bl	1bd24 <strncmp>
    c24e:	2800      	cmp	r0, #0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c250:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
    c254:	bf0c      	ite	eq
    c256:	f04f 0801 	moveq.w	r8, #1
    c25a:	f04f 0800 	movne.w	r8, #0
    c25e:	eba3 0305 	sub.w	r3, r3, r5
    p1 += 4;
    c262:	bf08      	it	eq
    c264:	3704      	addeq	r7, #4
  for (int i = 0; i < (int)subs.size(); i++)
    c266:	2b00      	cmp	r3, #0
    c268:	dd12      	ble.n	c290 <USubss::subscribeDecode(char const*)+0x54>
    c26a:	2400      	movs	r4, #0
    c26c:	e005      	b.n	c27a <USubss::subscribeDecode(char const*)+0x3e>
    c26e:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
    c272:	1b5b      	subs	r3, r3, r5
    c274:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c278:	da0a      	bge.n	c290 <USubss::subscribeDecode(char const*)+0x54>
    used = subs[i]->decode(p1, newSubscription);
    c27a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    c27e:	4642      	mov	r2, r8
    c280:	4639      	mov	r1, r7
  for (int i = 0; i < (int)subs.size(); i++)
    c282:	3401      	adds	r4, #1
    used = subs[i]->decode(p1, newSubscription);
    c284:	f7ff ff40 	bl	c108 <USubs::decode(char const*, bool)>
    if (used)
    c288:	2800      	cmp	r0, #0
    c28a:	d0f0      	beq.n	c26e <USubss::subscribeDecode(char const*)+0x32>
}
    c28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < (int)subs.size(); i++)
    c290:	2000      	movs	r0, #0
}
    c292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c296:	bf00      	nop
    c298:	20005fc8 	.word	0x20005fc8

0000c29c <USubss::subscribeService()>:
{
    c29c:	b538      	push	{r3, r4, r5, lr}
    c29e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
  for (int i = subscribeState; i < (int)subs.size(); i++)
    c2a2:	6905      	ldr	r5, [r0, #16]
    c2a4:	1a9b      	subs	r3, r3, r2
    c2a6:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
    c2aa:	da1f      	bge.n	c2ec <USubss::subscribeService()+0x50>
    c2ac:	1099      	asrs	r1, r3, #2
    c2ae:	4604      	mov	r4, r0
    c2b0:	462b      	mov	r3, r5
    c2b2:	e009      	b.n	c2c8 <USubss::subscribeService()+0x2c>
    c2b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    c2b8:	3501      	adds	r5, #1
    c2ba:	1a9b      	subs	r3, r3, r2
    c2bc:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
    c2c0:	ea4f 01a3 	mov.w	r1, r3, asr #2
    c2c4:	da12      	bge.n	c2ec <USubss::subscribeService()+0x50>
    subscribeState++;
    c2c6:	6923      	ldr	r3, [r4, #16]
    c2c8:	3301      	adds	r3, #1
      subscribeState = 0;
    c2ca:	428b      	cmp	r3, r1
    c2cc:	bfa8      	it	ge
    c2ce:	2300      	movge	r3, #0
    c2d0:	6123      	str	r3, [r4, #16]
    if (subs[i]->tick())
    c2d2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
    c2d6:	f7ff ff3d 	bl	c154 <USubs::tick()>
    c2da:	2800      	cmp	r0, #0
    c2dc:	d0ea      	beq.n	c2b4 <USubss::subscribeService()+0x18>
      sendData(i);
    c2de:	6823      	ldr	r3, [r4, #0]
    c2e0:	4a06      	ldr	r2, [pc, #24]	; (c2fc <USubss::subscribeService()+0x60>)
    c2e2:	681b      	ldr	r3, [r3, #0]
    c2e4:	4293      	cmp	r3, r2
    c2e6:	d103      	bne.n	c2f0 <USubss::subscribeService()+0x54>
      finished = false;
    c2e8:	2000      	movs	r0, #0
}
    c2ea:	bd38      	pop	{r3, r4, r5, pc}
  bool finished = true;
    c2ec:	2001      	movs	r0, #1
}
    c2ee:	bd38      	pop	{r3, r4, r5, pc}
      sendData(i);
    c2f0:	4620      	mov	r0, r4
    c2f2:	4629      	mov	r1, r5
    c2f4:	4798      	blx	r3
      finished = false;
    c2f6:	2000      	movs	r0, #0
}
    c2f8:	bd38      	pop	{r3, r4, r5, pc}
    c2fa:	bf00      	nop
    c2fc:	000018cd 	.word	0x000018cd

0000c300 <USubss::serviceStatus(int)>:
{
    c300:	b530      	push	{r4, r5, lr}
    c302:	b0cd      	sub	sp, #308	; 0x134
    c304:	460b      	mov	r3, r1
  snprintf(s, MSL, "# USubss::serviceStatus: idx=%d:\n", me);
    c306:	4a0f      	ldr	r2, [pc, #60]	; (c344 <USubss::serviceStatus(int)+0x44>)
{
    c308:	4605      	mov	r5, r0
  snprintf(s, MSL, "# USubss::serviceStatus: idx=%d:\n", me);
    c30a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    c30e:	a801      	add	r0, sp, #4
    c310:	f00f fa50 	bl	1b7b4 <snprintf>
  usb.send(s);
    c314:	a901      	add	r1, sp, #4
    c316:	480c      	ldr	r0, [pc, #48]	; (c348 <USubss::serviceStatus(int)+0x48>)
    c318:	f000 f978 	bl	c60c <UUSB::send(char const*)>
    c31c:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    c320:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c322:	2b00      	cmp	r3, #0
    c324:	dd0c      	ble.n	c340 <USubss::serviceStatus(int)+0x40>
    c326:	2400      	movs	r4, #0
    subs[i]->serviceStatus(i);
    c328:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    c32c:	4621      	mov	r1, r4
    c32e:	f7ff ff33 	bl	c198 <USubs::serviceStatus(int)>
  for (int i = 0; i < (int)subs.size(); i++)
    c332:	3401      	adds	r4, #1
    c334:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    c338:	1a9b      	subs	r3, r3, r2
    c33a:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c33e:	dbf3      	blt.n	c328 <USubss::serviceStatus(int)+0x28>
}
    c340:	b04d      	add	sp, #308	; 0x134
    c342:	bd30      	pop	{r4, r5, pc}
    c344:	20005fa4 	.word	0x20005fa4
    c348:	2000fac4 	.word	0x2000fac4

0000c34c <USubss::stopSubscriptions()>:
    c34c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c350:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c352:	2b00      	cmp	r3, #0
    c354:	dd0d      	ble.n	c372 <USubss::stopSubscriptions()+0x26>
    c356:	1098      	asrs	r0, r3, #2
    c358:	2300      	movs	r3, #0
    c35a:	3a04      	subs	r2, #4
{
    c35c:	b410      	push	{r4}
  void sendPublishList(int & listNum);
  /**
   * Stop all pulished items */
  void stopSubscription()
  {
    subN = 0;
    c35e:	461c      	mov	r4, r3
  for (int i = 0; i < (int)subs.size(); i++)
    c360:	3301      	adds	r3, #1
    c362:	f852 1f04 	ldr.w	r1, [r2, #4]!
    c366:	4283      	cmp	r3, r0
    c368:	614c      	str	r4, [r1, #20]
    c36a:	dbf9      	blt.n	c360 <USubss::stopSubscriptions()+0x14>
}
    c36c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c370:	4770      	bx	lr
    c372:	4770      	bx	lr

0000c374 <USubss::subscribeSendHelp()>:
{
    c374:	b538      	push	{r3, r4, r5, lr}
    c376:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c37a:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c37c:	2b00      	cmp	r3, #0
    c37e:	dd0c      	ble.n	c39a <USubss::subscribeSendHelp()+0x26>
    c380:	4605      	mov	r5, r0
    c382:	2400      	movs	r4, #0
    subs[i]->sendHelpLine();
    c384:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  for (int i = 0; i < (int)subs.size(); i++)
    c388:	3401      	adds	r4, #1
    subs[i]->sendHelpLine();
    c38a:	f7ff ff33 	bl	c1f4 <USubs::sendHelpLine()>
    c38e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    c392:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subs.size(); i++)
    c394:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c398:	dbf4      	blt.n	c384 <USubss::subscribeSendHelp()+0x10>
}
    c39a:	bd38      	pop	{r3, r4, r5, pc}

0000c39c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    c39c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3a0:	e9d0 8900 	ldrd	r8, r9, [r0]
    c3a4:	460f      	mov	r7, r1
    c3a6:	4692      	mov	sl, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    c3a8:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c3ac:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
    c3b0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    c3b4:	d054      	beq.n	c460 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xc4>
    c3b6:	1093      	asrs	r3, r2, #2
    c3b8:	4606      	mov	r6, r0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    c3ba:	eba7 0508 	sub.w	r5, r7, r8
    c3be:	2b01      	cmp	r3, #1
    c3c0:	461a      	mov	r2, r3
    c3c2:	bf38      	it	cc
    c3c4:	2201      	movcc	r2, #1
    c3c6:	189c      	adds	r4, r3, r2
    c3c8:	d248      	bcs.n	c45c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c3ca:	2c00      	cmp	r4, #0
    c3cc:	d13c      	bne.n	c448 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xac>
    c3ce:	46a3      	mov	fp, r4
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    c3d0:	f8da 3000 	ldr.w	r3, [sl]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    c3d4:	2d00      	cmp	r5, #0
    c3d6:	f84b 3005 	str.w	r3, [fp, r5]
    c3da:	dc24      	bgt.n	c426 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x8a>
      ptrdiff_t __count = __last - __first;
    c3dc:	eba9 0907 	sub.w	r9, r9, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    c3e0:	3504      	adds	r5, #4
      if (__count > 0)
    c3e2:	f1b9 0f00 	cmp.w	r9, #0
    c3e6:	445d      	add	r5, fp
    c3e8:	dc13      	bgt.n	c412 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
    c3ea:	444d      	add	r5, r9
	if (__p)
    c3ec:	f1b8 0f00 	cmp.w	r8, #0
    c3f0:	d104      	bne.n	c3fc <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x60>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c3f2:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    c3f4:	e9c6 b500 	strd	fp, r5, [r6]
    }
    c3f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
    c3fc:	68b1      	ldr	r1, [r6, #8]
    c3fe:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    c402:	4640      	mov	r0, r8
    c404:	f00a f9ea 	bl	167dc <operator delete(void*, unsigned int)>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c408:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    c40a:	e9c6 b500 	strd	fp, r5, [r6]
    }
    c40e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c412:	4628      	mov	r0, r5
    c414:	4639      	mov	r1, r7
    c416:	464a      	mov	r2, r9
      return __result + __count;
    c418:	444d      	add	r5, r9
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c41a:	f00a f943 	bl	166a4 <memcpy>
    c41e:	f1b8 0f00 	cmp.w	r8, #0
    c422:	d0e6      	beq.n	c3f2 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x56>
    c424:	e7ea      	b.n	c3fc <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x60>
      ptrdiff_t __count = __last - __first;
    c426:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c42a:	462a      	mov	r2, r5
    c42c:	4641      	mov	r1, r8
    c42e:	4658      	mov	r0, fp
	      ++__new_finish;
    c430:	3504      	adds	r5, #4
    c432:	f00f fb15 	bl	1ba60 <memmove>
      if (__count > 0)
    c436:	f1b9 0f00 	cmp.w	r9, #0
    c43a:	445d      	add	r5, fp
    c43c:	dce9      	bgt.n	c412 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
    c43e:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
    c440:	444d      	add	r5, r9
    c442:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    c446:	e7dc      	b.n	c402 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x66>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    c448:	428c      	cmp	r4, r1
    c44a:	bf28      	it	cs
    c44c:	460c      	movcs	r4, r1
    c44e:	00a4      	lsls	r4, r4, #2
    c450:	4620      	mov	r0, r4
    c452:	f00a f9c1 	bl	167d8 <operator new(unsigned int)>
    c456:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c458:	4404      	add	r4, r0
    c45a:	e7b9      	b.n	c3d0 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0x34>
    c45c:	4c02      	ldr	r4, [pc, #8]	; (c468 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xcc>)
    c45e:	e7f7      	b.n	c450 <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xb4>
	  __throw_length_error(__N(__s));
    c460:	4802      	ldr	r0, [pc, #8]	; (c46c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)+0xd0>)
    c462:	f7ff fe41 	bl	c0e8 <USubs::USubs(char const*, char const*)>
    c466:	bf00      	nop
    c468:	7ffffffc 	.word	0x7ffffffc
    c46c:	20007dd0 	.word	0x20007dd0

0000c470 <USubss::addPublistItem(char const*, char const*)>:

void USubss::addPublistItem(const char* key, const char * helpLine)
{
    c470:	b530      	push	{r4, r5, lr}
    c472:	b085      	sub	sp, #20
    c474:	4604      	mov	r4, r0
  subs.push_back(new USubs(key, helpLine));
    c476:	201c      	movs	r0, #28
{
    c478:	e9cd 2100 	strd	r2, r1, [sp]
  subs.push_back(new USubs(key, helpLine));
    c47c:	f00a f9ac 	bl	167d8 <operator new(unsigned int)>
    c480:	4605      	mov	r5, r0
    c482:	e9dd 2100 	ldrd	r2, r1, [sp]
    c486:	f7ff fe2f 	bl	c0e8 <USubs::USubs(char const*, char const*)>
    c48a:	9503      	str	r5, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    c48c:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
    c490:	4299      	cmp	r1, r3
    c492:	d004      	beq.n	c49e <USubss::addPublistItem(char const*, char const*)+0x2e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    c494:	f841 5b04 	str.w	r5, [r1], #4
	    ++this->_M_impl._M_finish;
    c498:	60a1      	str	r1, [r4, #8]
}
    c49a:	b005      	add	sp, #20
    c49c:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    c49e:	aa03      	add	r2, sp, #12
    c4a0:	1d20      	adds	r0, r4, #4
    c4a2:	f7ff ff7b 	bl	c39c <void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)>
    c4a6:	b005      	add	sp, #20
    c4a8:	bd30      	pop	{r4, r5, pc}
    c4aa:	bf00      	nop

0000c4ac <UUSB::~UUSB()>:
class UUSB : public USubss
    c4ac:	b510      	push	{r4, lr}
    c4ae:	4b0a      	ldr	r3, [pc, #40]	; (c4d8 <UUSB::~UUSB()+0x2c>)
    c4b0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    c4b2:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
    c4b6:	6023      	str	r3, [r4, #0]
	if (__p)
    c4b8:	b120      	cbz	r0, c4c4 <UUSB::~UUSB()+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    c4ba:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
	::operator delete(__p
    c4be:	1a09      	subs	r1, r1, r0
    c4c0:	f00a f98c 	bl	167dc <operator delete(void*, unsigned int)>
    c4c4:	4b05      	ldr	r3, [pc, #20]	; (c4dc <UUSB::~UUSB()+0x30>)
	_M_deallocate(_M_impl._M_start,
    c4c6:	6860      	ldr	r0, [r4, #4]
    c4c8:	6023      	str	r3, [r4, #0]
	if (__p)
    c4ca:	b118      	cbz	r0, c4d4 <UUSB::~UUSB()+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    c4cc:	68e1      	ldr	r1, [r4, #12]
    c4ce:	1a09      	subs	r1, r1, r0
    c4d0:	f00a f984 	bl	167dc <operator delete(void*, unsigned int)>
    c4d4:	4620      	mov	r0, r4
    c4d6:	bd10      	pop	{r4, pc}
    c4d8:	2000800c 	.word	0x2000800c
    c4dc:	200080a0 	.word	0x200080a0

0000c4e0 <UUSB::decode(char const*)>:
  send(reply);
  send(                "# -- \talive \tIgnorred, but used to keep communication alive (once a sec is fine)\r\n");
}

bool UUSB::decode(const char* buf)
{
    c4e0:	b538      	push	{r3, r4, r5, lr}
  bool used = true;
  if (strncmp(buf, "i ", 2) == 0)
    c4e2:	780b      	ldrb	r3, [r1, #0]
{
    c4e4:	460c      	mov	r4, r1
    c4e6:	4605      	mov	r5, r0
  if (strncmp(buf, "i ", 2) == 0)
    c4e8:	2b69      	cmp	r3, #105	; 0x69
    c4ea:	d10f      	bne.n	c50c <UUSB::decode(char const*)+0x2c>
    c4ec:	784b      	ldrb	r3, [r1, #1]
    c4ee:	2b20      	cmp	r3, #32
    c4f0:	d10c      	bne.n	c50c <UUSB::decode(char const*)+0x2c>
  {
    const char * p1 = &buf[2];
    localEcho = *p1 == '1';
    c4f2:	788a      	ldrb	r2, [r1, #2]
  bool used = true;
    c4f4:	2301      	movs	r3, #1
    localEcho = *p1 == '1';
    c4f6:	2a31      	cmp	r2, #49	; 0x31
    c4f8:	bf0d      	iteet	eq
    c4fa:	4619      	moveq	r1, r3
    c4fc:	2100      	movne	r1, #0
    // when local echo, there is no need for CRC, so turn it off
    use_CRC = not localEcho;
    c4fe:	461a      	movne	r2, r3
    c500:	2200      	moveq	r2, #0
    localEcho = *p1 == '1';
    c502:	7701      	strb	r1, [r0, #28]
    use_CRC = not localEcho;
    c504:	f880 2121 	strb.w	r2, [r0, #289]	; 0x121
    // accepted, but ignored
  }
  else
    used = false;
  return used;
}
    c508:	4618      	mov	r0, r3
    c50a:	bd38      	pop	{r3, r4, r5, pc}
  else if (strncmp(buf, "silent ", 7) == 0)
    c50c:	2207      	movs	r2, #7
    c50e:	4918      	ldr	r1, [pc, #96]	; (c570 <UUSB::decode(char const*)+0x90>)
    c510:	4620      	mov	r0, r4
    c512:	f00f fc07 	bl	1bd24 <strncmp>
    c516:	b170      	cbz	r0, c536 <UUSB::decode(char const*)+0x56>
  else if (strncmp(buf, "nocrc ", 8) == 0)
    c518:	4916      	ldr	r1, [pc, #88]	; (c574 <UUSB::decode(char const*)+0x94>)
    c51a:	4620      	mov	r0, r4
    c51c:	f010 fca4 	bl	1ce68 <strcmp>
    c520:	b1b0      	cbz	r0, c550 <UUSB::decode(char const*)+0x70>
  else if (strncmp(buf, "alive", 5) == 0)
    c522:	2205      	movs	r2, #5
    c524:	4914      	ldr	r1, [pc, #80]	; (c578 <UUSB::decode(char const*)+0x98>)
    c526:	4620      	mov	r0, r4
    c528:	f00f fbfc 	bl	1bd24 <strncmp>
    c52c:	fab0 f380 	clz	r3, r0
    c530:	095b      	lsrs	r3, r3, #5
}
    c532:	4618      	mov	r0, r3
    c534:	bd38      	pop	{r3, r4, r5, pc}
    silenceUSBauto = strtol(p1, nullptr, 10);
    c536:	4601      	mov	r1, r0
    c538:	220a      	movs	r2, #10
    c53a:	1de0      	adds	r0, r4, #7
    c53c:	f00e ff4a 	bl	1b3d4 <strtol>
    c540:	3800      	subs	r0, #0
  bool used = true;
    c542:	f04f 0301 	mov.w	r3, #1
    silenceUSBauto = strtol(p1, nullptr, 10);
    c546:	bf18      	it	ne
    c548:	2001      	movne	r0, #1
    c54a:	7528      	strb	r0, [r5, #20]
}
    c54c:	4618      	mov	r0, r3
    c54e:	bd38      	pop	{r3, r4, r5, pc}
        allowNoCRC = strtol(p1, nullptr, 10);
    c550:	4601      	mov	r1, r0
    c552:	220a      	movs	r2, #10
    c554:	f104 0008 	add.w	r0, r4, #8
    c558:	f00e ff3c 	bl	1b3d4 <strtol>
    c55c:	3800      	subs	r0, #0
  bool used = true;
    c55e:	f04f 0301 	mov.w	r3, #1
        allowNoCRC = strtol(p1, nullptr, 10);
    c562:	bf18      	it	ne
    c564:	2001      	movne	r0, #1
    c566:	f885 014c 	strb.w	r0, [r5, #332]	; 0x14c
}
    c56a:	4618      	mov	r0, r3
    c56c:	bd38      	pop	{r3, r4, r5, pc}
    c56e:	bf00      	nop
    c570:	200047bc 	.word	0x200047bc
    c574:	200047c4 	.word	0x200047c4
    c578:	200047cc 	.word	0x200047cc

0000c57c <UUSB::client_send_str(char const*, int)>:

bool UUSB::client_send_str(const char * str, int m) // , bool blocking) //, bool toUSB, bool toWifi)
{
  //int n = strlen(str);
  bool okSend = true;
  if (use_CRC)
    c57c:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
{
    c580:	b530      	push	{r4, r5, lr}
    c582:	460d      	mov	r5, r1
    c584:	b083      	sub	sp, #12
    c586:	4614      	mov	r4, r2
  if (use_CRC)
    c588:	b343      	cbz	r3, c5dc <UUSB::client_send_str(char const*, int)+0x60>
  { // generate q-code first
    int sum = 0;
    const char * p1 = str;
    for (int i = 0; i < m; i++)
    c58a:	2a00      	cmp	r2, #0
    c58c:	dd38      	ble.n	c600 <UUSB::client_send_str(char const*, int)+0x84>
    c58e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    int sum = 0;
    c592:	2300      	movs	r3, #0
    c594:	4462      	add	r2, ip
    {
      if (*p1 >= ' ')
    c596:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    c59a:	f1be 0f1f 	cmp.w	lr, #31
        sum += *p1;
    c59e:	bf88      	it	hi
    c5a0:	4473      	addhi	r3, lr
    for (int i = 0; i < m; i++)
    c5a2:	4594      	cmp	ip, r2
    c5a4:	d1f7      	bne.n	c596 <UUSB::client_send_str(char const*, int)+0x1a>
      p1++;
    } 
    const int MQL = 4;
    char q[MQL];
    snprintf(q, MQL, ";%02d", (sum % 99) + 1);
    c5a6:	4a17      	ldr	r2, [pc, #92]	; (c604 <UUSB::client_send_str(char const*, int)+0x88>)
    c5a8:	fba2 2c03 	umull	r2, ip, r2, r3
    c5ac:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
    c5b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    c5b4:	eb0c 1c4c 	add.w	ip, ip, ip, lsl #5
    c5b8:	eba3 030c 	sub.w	r3, r3, ip
    c5bc:	3301      	adds	r3, #1
    c5be:	2104      	movs	r1, #4
    c5c0:	4a11      	ldr	r2, [pc, #68]	; (c608 <UUSB::client_send_str(char const*, int)+0x8c>)
    c5c2:	eb0d 0001 	add.w	r0, sp, r1
    c5c6:	f00f f8f5 	bl	1b7b4 <snprintf>
    int a = usb_serial_write(q, 3);
    c5ca:	2103      	movs	r1, #3
    c5cc:	a801      	add	r0, sp, #4
    c5ce:	f00b fcb5 	bl	17f3c <usb_serial_write>
    if (a == 3)
    c5d2:	2803      	cmp	r0, #3
    c5d4:	d00b      	beq.n	c5ee <UUSB::client_send_str(char const*, int)+0x72>
    {
      a = usb_serial_write(str, m);
      okSend += a + 2;
    }
    else
      okSend = false;
    c5d6:	2000      	movs	r0, #0
  else
  { // just send as is
    okSend = usb_serial_write(str, m);
  }
  return okSend;
}
    c5d8:	b003      	add	sp, #12
    c5da:	bd30      	pop	{r4, r5, pc}
    okSend = usb_serial_write(str, m);
    c5dc:	4611      	mov	r1, r2
    c5de:	4628      	mov	r0, r5
    c5e0:	f00b fcac 	bl	17f3c <usb_serial_write>
    c5e4:	3800      	subs	r0, #0
    c5e6:	bf18      	it	ne
    c5e8:	2001      	movne	r0, #1
}
    c5ea:	b003      	add	sp, #12
    c5ec:	bd30      	pop	{r4, r5, pc}
      a = usb_serial_write(str, m);
    c5ee:	4621      	mov	r1, r4
    c5f0:	4628      	mov	r0, r5
    c5f2:	f00b fca3 	bl	17f3c <usb_serial_write>
      okSend += a + 2;
    c5f6:	3003      	adds	r0, #3
    c5f8:	bf18      	it	ne
    c5fa:	2001      	movne	r0, #1
}
    c5fc:	b003      	add	sp, #12
    c5fe:	bd30      	pop	{r4, r5, pc}
    for (int i = 0; i < m; i++)
    c600:	2301      	movs	r3, #1
    c602:	e7dc      	b.n	c5be <UUSB::client_send_str(char const*, int)+0x42>
    c604:	a57eb503 	.word	0xa57eb503
    c608:	200045e8 	.word	0x200045e8

0000c60c <UUSB::send(char const*)>:
  if (localEcho == 1 and justSendPrompt)
    c60c:	7f03      	ldrb	r3, [r0, #28]
{
    c60e:	b570      	push	{r4, r5, r6, lr}
    c610:	4604      	mov	r4, r0
    c612:	460d      	mov	r5, r1
  if (localEcho == 1 and justSendPrompt)
    c614:	b10b      	cbz	r3, c61a <UUSB::send(char const*)+0xe>
    c616:	7f43      	ldrb	r3, [r0, #29]
    c618:	bb13      	cbnz	r3, c660 <UUSB::send(char const*)+0x54>
  if (usbIsUp)
    c61a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    c61e:	b973      	cbnz	r3, c63e <UUSB::send(char const*)+0x32>
    usbSendFail++;
    c620:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    c624:	2600      	movs	r6, #0
    c626:	3301      	adds	r3, #1
    c628:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (logger.logStreamedMsg and not logger.logStreamedMsgFull)
    c62c:	4812      	ldr	r0, [pc, #72]	; (c678 <UUSB::send(char const*)+0x6c>)
    c62e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    c632:	b113      	cbz	r3, c63a <UUSB::send(char const*)+0x2e>
    c634:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
    c638:	b1cb      	cbz	r3, c66e <UUSB::send(char const*)+0x62>
}
    c63a:	4630      	mov	r0, r6
    c63c:	bd70      	pop	{r4, r5, r6, pc}
    int n = strlen(str);
    c63e:	4628      	mov	r0, r5
    c640:	f010 fe3e 	bl	1d2c0 <strlen>
    sendOK = client_send_str(str, n);
    c644:	4629      	mov	r1, r5
    int n = strlen(str);
    c646:	4602      	mov	r2, r0
    sendOK = client_send_str(str, n);
    c648:	4620      	mov	r0, r4
    c64a:	f7ff ff97 	bl	c57c <UUSB::client_send_str(char const*, int)>
  if (sendOK == false)
    c64e:	4606      	mov	r6, r0
    c650:	2800      	cmp	r0, #0
    c652:	d0e5      	beq.n	c620 <UUSB::send(char const*)+0x14>
    usbSendCnt++;
    c654:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c658:	3301      	adds	r3, #1
    c65a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    c65e:	e7e5      	b.n	c62c <UUSB::send(char const*)+0x20>
    client_send_str("\n\r", 2);
    c660:	2202      	movs	r2, #2
    c662:	4906      	ldr	r1, [pc, #24]	; (c67c <UUSB::send(char const*)+0x70>)
    c664:	f7ff ff8a 	bl	c57c <UUSB::client_send_str(char const*, int)>
    justSendPrompt = false;
    c668:	2300      	movs	r3, #0
    c66a:	7763      	strb	r3, [r4, #29]
    c66c:	e7d5      	b.n	c61a <UUSB::send(char const*)+0xe>
    logger.addMsgLog(str);
    c66e:	4629      	mov	r1, r5
    c670:	f7fb fc6a 	bl	7f48 <ULog::addMsgLog(char const*)>
}
    c674:	4630      	mov	r0, r6
    c676:	bd70      	pop	{r4, r5, r6, pc}
    c678:	2000f24c 	.word	0x2000f24c
    c67c:	200046dc 	.word	0x200046dc

0000c680 <UUSB::sendUSBstatus()>:
{
    c680:	4603      	mov	r3, r0
    return float(time_us)*1e-6;
    c682:	4a1d      	ldr	r2, [pc, #116]	; (c6f8 <UUSB::sendUSBstatus()+0x78>)
    c684:	b500      	push	{lr}
    c686:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    c68a:	b0a9      	sub	sp, #164	; 0xa4
  snprintf(s, MSL, "# usb %.3f %d %d %d %d %d %d %d\r\n",
    c68c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    c690:	9208      	str	r2, [sp, #32]
    c692:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    c696:	9207      	str	r2, [sp, #28]
    c698:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    c69c:	9206      	str	r2, [sp, #24]
    c69e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    c6a2:	9205      	str	r2, [sp, #20]
    c6a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c6a8:	9204      	str	r2, [sp, #16]
    c6aa:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    c6ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
    c6b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c6b6:	f00c ff39 	bl	1952c <__aeabi_ul2f>
    c6ba:	ee07 0a90 	vmov	s15, r0
    c6be:	4a0f      	ldr	r2, [pc, #60]	; (c6fc <UUSB::sendUSBstatus()+0x7c>)
    c6c0:	2178      	movs	r1, #120	; 0x78
    c6c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    c6c6:	a80a      	add	r0, sp, #40	; 0x28
    c6c8:	ed9f 6b09 	vldr	d6, [pc, #36]	; c6f0 <UUSB::sendUSBstatus()+0x70>
    c6cc:	ee27 7b06 	vmul.f64	d7, d7, d6
    c6d0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c6d4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c6d8:	ed8d 7b00 	vstr	d7, [sp]
    c6dc:	f00f f86a 	bl	1b7b4 <snprintf>
  usb.send(s);
    c6e0:	a90a      	add	r1, sp, #40	; 0x28
    c6e2:	4807      	ldr	r0, [pc, #28]	; (c700 <UUSB::sendUSBstatus()+0x80>)
    c6e4:	f7ff ff92 	bl	c60c <UUSB::send(char const*)>
}
    c6e8:	b029      	add	sp, #164	; 0xa4
    c6ea:	f85d fb04 	ldr.w	pc, [sp], #4
    c6ee:	bf00      	nop
    c6f0:	a0b5ed8d 	.word	0xa0b5ed8d
    c6f4:	3eb0c6f7 	.word	0x3eb0c6f7
    c6f8:	2000e0c8 	.word	0x2000e0c8
    c6fc:	200045c4 	.word	0x200045c4
    c700:	2000fac4 	.word	0x2000fac4

0000c704 <UUSB::sendHelp()>:
{
    c704:	b530      	push	{r4, r5, lr}
  snprintf(reply, MRL, "# USB connection ------- \r\n");
    c706:	4d1b      	ldr	r5, [pc, #108]	; (c774 <UUSB::sendHelp()+0x70>)
{
    c708:	b0d1      	sub	sp, #324	; 0x144
    c70a:	4604      	mov	r4, r0
  snprintf(reply, MRL, "# USB connection ------- \r\n");
    c70c:	46ec      	mov	ip, sp
    c70e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c710:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    c718:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  send(reply);
    c71c:	4669      	mov	r1, sp
    c71e:	4620      	mov	r0, r4
    c720:	f7ff ff74 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \ti V \tInteractive: V=1: local echo (is=%d) (for use with telnet)\r\n", localEcho);
    c724:	7f23      	ldrb	r3, [r4, #28]
    c726:	4a14      	ldr	r2, [pc, #80]	; (c778 <UUSB::sendHelp()+0x74>)
    c728:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c72c:	4668      	mov	r0, sp
    c72e:	f00f f841 	bl	1b7b4 <snprintf>
  send(reply);
    c732:	4669      	mov	r1, sp
    c734:	4620      	mov	r0, r4
    c736:	f7ff ff69 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tnocrc V \tAllow messages without CRC: V=1: allow (is=%d)\r\n", allowNoCRC );
    c73a:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
    c73e:	4a0f      	ldr	r2, [pc, #60]	; (c77c <UUSB::sendHelp()+0x78>)
    c740:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c744:	4668      	mov	r0, sp
    c746:	f00f f835 	bl	1b7b4 <snprintf>
  send(reply);
    c74a:	4669      	mov	r1, sp
    c74c:	4620      	mov	r0, r4
    c74e:	f7ff ff5d 	bl	c60c <UUSB::send(char const*)>
  snprintf(reply, MRL, "# -- \tsilent V \tShould USB be silent, if no communication (1=auto silent) silent=%d (pt no effect)\r\n", silenceUSBauto);
    c752:	7d23      	ldrb	r3, [r4, #20]
    c754:	4a0a      	ldr	r2, [pc, #40]	; (c780 <UUSB::sendHelp()+0x7c>)
    c756:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c75a:	4668      	mov	r0, sp
    c75c:	f00f f82a 	bl	1b7b4 <snprintf>
  send(reply);
    c760:	4669      	mov	r1, sp
    c762:	4620      	mov	r0, r4
    c764:	f7ff ff52 	bl	c60c <UUSB::send(char const*)>
  send(                "# -- \talive \tIgnorred, but used to keep communication alive (once a sec is fine)\r\n");
    c768:	4906      	ldr	r1, [pc, #24]	; (c784 <UUSB::sendHelp()+0x80>)
    c76a:	4620      	mov	r0, r4
    c76c:	f7ff ff4e 	bl	c60c <UUSB::send(char const*)>
}
    c770:	b051      	add	sp, #324	; 0x144
    c772:	bd30      	pop	{r4, r5, pc}
    c774:	200047d4 	.word	0x200047d4
    c778:	200047f0 	.word	0x200047f0
    c77c:	20004838 	.word	0x20004838
    c780:	20004878 	.word	0x20004878
    c784:	200048e0 	.word	0x200048e0

0000c788 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)>:
{
    c788:	b530      	push	{r4, r5, lr}
    c78a:	4d15      	ldr	r5, [pc, #84]	; (c7e0 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)+0x58>)
    c78c:	b0e9      	sub	sp, #420	; 0x1a4
    c78e:	460b      	mov	r3, r1
    c790:	4604      	mov	r4, r0
    c792:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
  snprintf(s, MSL, "# %.3f %s: %s\r\n", service.time_sec(), info, msg);
    c796:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c79a:	f00c fec7 	bl	1952c <__aeabi_ul2f>
    c79e:	ee07 0a90 	vmov	s15, r0
    c7a2:	4a10      	ldr	r2, [pc, #64]	; (c7e4 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)+0x5c>)
    c7a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c7a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    c7ac:	a804      	add	r0, sp, #16
    c7ae:	ed9f 6b0a 	vldr	d6, [pc, #40]	; c7d8 <UUSB::sendInfoAsCommentWithTime(char const*, char const*)+0x50>
    c7b2:	ee27 7b06 	vmul.f64	d7, d7, d6
    c7b6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c7ba:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c7be:	ed8d 7b00 	vstr	d7, [sp]
    c7c2:	f00e fff7 	bl	1b7b4 <snprintf>
  isOK = send(s);
    c7c6:	a904      	add	r1, sp, #16
    c7c8:	4620      	mov	r0, r4
    c7ca:	f7ff ff1f 	bl	c60c <UUSB::send(char const*)>
}
    c7ce:	b069      	add	sp, #420	; 0x1a4
    c7d0:	bd30      	pop	{r4, r5, pc}
    c7d2:	bf00      	nop
    c7d4:	f3af 8000 	nop.w
    c7d8:	a0b5ed8d 	.word	0xa0b5ed8d
    c7dc:	3eb0c6f7 	.word	0x3eb0c6f7
    c7e0:	2000e0c8 	.word	0x2000e0c8
    c7e4:	200046cc 	.word	0x200046cc

0000c7e8 <UUSB::sendSubscriptionStatus()>:
{
    c7e8:	b530      	push	{r4, r5, lr}
    c7ea:	4605      	mov	r5, r0
    c7ec:	b0b3      	sub	sp, #204	; 0xcc
  snprintf(s, MSL, "# UUSB::tick: (sec) size=%d\n", subscriptions.size());
    c7ee:	4a10      	ldr	r2, [pc, #64]	; (c830 <UUSB::sendSubscriptionStatus()+0x48>)
    c7f0:	21c8      	movs	r1, #200	; 0xc8
    c7f2:	4668      	mov	r0, sp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c7f4:	e9d5 4349 	ldrd	r4, r3, [r5, #292]	; 0x124
    c7f8:	1b1b      	subs	r3, r3, r4
    c7fa:	109b      	asrs	r3, r3, #2
    c7fc:	f00e ffda 	bl	1b7b4 <snprintf>
  usb.send(s);
    c800:	4669      	mov	r1, sp
    c802:	480c      	ldr	r0, [pc, #48]	; (c834 <UUSB::sendSubscriptionStatus()+0x4c>)
    c804:	f7ff ff02 	bl	c60c <UUSB::send(char const*)>
    c808:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    c80c:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    c80e:	2b00      	cmp	r3, #0
    c810:	dd0c      	ble.n	c82c <UUSB::sendSubscriptionStatus()+0x44>
    c812:	2400      	movs	r4, #0
    subscriptions[i]->serviceStatus(i);
    c814:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    c818:	4621      	mov	r1, r4
    c81a:	f7ff fd71 	bl	c300 <USubss::serviceStatus(int)>
  for (int i = 0; i < (int)subscriptions.size(); i++)
    c81e:	3401      	adds	r4, #1
    c820:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    c824:	1a9b      	subs	r3, r3, r2
    c826:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    c82a:	dbf3      	blt.n	c814 <UUSB::sendSubscriptionStatus()+0x2c>
}
    c82c:	b033      	add	sp, #204	; 0xcc
    c82e:	bd30      	pop	{r4, r5, pc}
    c830:	200046ac 	.word	0x200046ac
    c834:	2000fac4 	.word	0x2000fac4

0000c838 <UUSB::sendData(int)>:
  if (item == 0)
    c838:	b111      	cbz	r1, c840 <UUSB::sendData(int)+0x8>
  else if (item == 1)
    c83a:	2901      	cmp	r1, #1
    c83c:	d002      	beq.n	c844 <UUSB::sendData(int)+0xc>
}
    c83e:	4770      	bx	lr
    sendUSBstatus();
    c840:	f7ff bf1e 	b.w	c680 <UUSB::sendUSBstatus()>
    sendSubscriptionStatus();
    c844:	f7ff bfd0 	b.w	c7e8 <UUSB::sendSubscriptionStatus()>

0000c848 <UUSB::receivedCharFromUSB(unsigned char)>:
 * Put it into buffer, and if a full line, then intrepid the result.
 * \param n is the new character */
bool UUSB::receivedCharFromUSB(uint8_t n)
{ // got another character from USB (command)
  bool fullMsg = false;
  if (n >= ' ')
    c848:	291f      	cmp	r1, #31
{ // got another character from USB (command)
    c84a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c84c:	460d      	mov	r5, r1
    c84e:	b0d1      	sub	sp, #324	; 0x144
    c850:	4604      	mov	r4, r0
  if (n >= ' ')
    c852:	d952      	bls.n	c8fa <UUSB::receivedCharFromUSB(unsigned char)+0xb2>
  {
    usbRxBuf[usbRxBufCnt] = n;
    c854:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    c858:	18c2      	adds	r2, r0, r3
    if (usbRxBufCnt < RX_BUF_SIZE - 1)
    c85a:	2bc6      	cmp	r3, #198	; 0xc6
    usbRxBuf[usbRxBufCnt] = n;
    c85c:	7791      	strb	r1, [r2, #30]
    if (usbRxBufCnt < RX_BUF_SIZE - 1)
    c85e:	dc0c      	bgt.n	c87a <UUSB::receivedCharFromUSB(unsigned char)+0x32>
      usbRxBufCnt++;
    c860:	3301      	adds	r3, #1
      usbRxBufCnt = 0;
      usbRxBuf[usbRxBufCnt] = '\0';
    }
  }
  //
  if (localEcho) // and not silentUSB)
    c862:	7f02      	ldrb	r2, [r0, #28]
      usbRxBufCnt++;
    c864:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  if (localEcho) // and not silentUSB)
    c868:	b98a      	cbnz	r2, c88e <UUSB::receivedCharFromUSB(unsigned char)+0x46>
      }
    }
    // flush remaining input
    usbRxBufCnt = 0;
  }
  else if (usbRxBufCnt >= RX_BUF_SIZE - 1)
    c86a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    c86e:	2bc6      	cmp	r3, #198	; 0xc6
    c870:	dc47      	bgt.n	c902 <UUSB::receivedCharFromUSB(unsigned char)+0xba>
  bool fullMsg = false;
    c872:	2600      	movs	r6, #0
    const char * msg = "** Discarded (missing \\n)\r\n";
    send(msg);
    usbRxBufCnt = 0;
  }
  return fullMsg;
}
    c874:	4630      	mov	r0, r6
    c876:	b051      	add	sp, #324	; 0x144
    c878:	bdf0      	pop	{r4, r5, r6, r7, pc}
      usbRxBufCnt = 0;
    c87a:	2300      	movs	r3, #0
      usbRxBufOverflow = true;
    c87c:	2201      	movs	r2, #1
  if (localEcho) // and not silentUSB)
    c87e:	7f06      	ldrb	r6, [r0, #28]
      usbRxBufOverflow = true;
    c880:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
      usbRxBufCnt = 0;
    c884:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
      usbRxBuf[usbRxBufCnt] = '\0';
    c888:	7783      	strb	r3, [r0, #30]
  if (localEcho) // and not silentUSB)
    c88a:	2e00      	cmp	r6, #0
    c88c:	d0f2      	beq.n	c874 <UUSB::receivedCharFromUSB(unsigned char)+0x2c>
    usb_serial_putchar(n);
    c88e:	4628      	mov	r0, r5
    c890:	f00b fb3e 	bl	17f10 <usb_serial_putchar>
  if (n == '\n' or n=='\r')
    c894:	2d0d      	cmp	r5, #13
    c896:	bf18      	it	ne
    c898:	2d0a      	cmpne	r5, #10
    c89a:	bf0c      	ite	eq
    c89c:	2501      	moveq	r5, #1
    c89e:	2500      	movne	r5, #0
    c8a0:	d1e3      	bne.n	c86a <UUSB::receivedCharFromUSB(unsigned char)+0x22>
    if (usbRxBufOverflow)
    c8a2:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
    c8a6:	2e00      	cmp	r6, #0
    c8a8:	d138      	bne.n	c91c <UUSB::receivedCharFromUSB(unsigned char)+0xd4>
      if (usbRxBufCnt > 0)
    c8aa:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
    c8ae:	2a00      	cmp	r2, #0
    c8b0:	dd1b      	ble.n	c8ea <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
        usbRxBuf[usbRxBufCnt] = '\0';
    c8b2:	18a3      	adds	r3, r4, r2
    c8b4:	779e      	strb	r6, [r3, #30]
        if (usbRxBuf[0] == ';')
    c8b6:	7fa3      	ldrb	r3, [r4, #30]
    c8b8:	2b3b      	cmp	r3, #59	; 0x3b
    c8ba:	d03e      	beq.n	c93a <UUSB::receivedCharFromUSB(unsigned char)+0xf2>
        else if (not allowNoCRC or not use_CRC)
    c8bc:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
    c8c0:	2b00      	cmp	r3, #0
    c8c2:	f000 809e 	beq.w	ca02 <UUSB::receivedCharFromUSB(unsigned char)+0x1ba>
    c8c6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    c8ca:	b973      	cbnz	r3, c8ea <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
                     crc, (sum % 99) + 1, sum, sumCnt, usbRxBuf);
    c8cc:	f104 061e 	add.w	r6, r4, #30
          command.parse_and_execute_command(usbRxBuf);
    c8d0:	4631      	mov	r1, r6
    c8d2:	4857      	ldr	r0, [pc, #348]	; (ca30 <UUSB::receivedCharFromUSB(unsigned char)+0x1e8>)
    c8d4:	f7f5 fdd0 	bl	2478 <UCommand::parse_and_execute_command(char*)>
          usbInMsgCnt++;
    c8d8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
          debugCnt = 0;
    c8dc:	2200      	movs	r2, #0
          fullMsg = true;
    c8de:	462e      	mov	r6, r5
          usbInMsgCnt++;
    c8e0:	3301      	adds	r3, #1
          debugCnt = 0;
    c8e2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
          usbInMsgCnt++;
    c8e6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
      if (localEcho == 1)
    c8ea:	7f23      	ldrb	r3, [r4, #28]
    c8ec:	b9f3      	cbnz	r3, c92c <UUSB::receivedCharFromUSB(unsigned char)+0xe4>
    usbRxBufCnt = 0;
    c8ee:	2300      	movs	r3, #0
}
    c8f0:	4630      	mov	r0, r6
    usbRxBufCnt = 0;
    c8f2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
}
    c8f6:	b051      	add	sp, #324	; 0x144
    c8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (localEcho) // and not silentUSB)
    c8fa:	7f03      	ldrb	r3, [r0, #28]
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d0c9      	beq.n	c894 <UUSB::receivedCharFromUSB(unsigned char)+0x4c>
    c900:	e7c5      	b.n	c88e <UUSB::receivedCharFromUSB(unsigned char)+0x46>
    usbRxBuf[usbRxBufCnt] = 0;
    c902:	2500      	movs	r5, #0
    c904:	4423      	add	r3, r4
    send(msg);
    c906:	494b      	ldr	r1, [pc, #300]	; (ca34 <UUSB::receivedCharFromUSB(unsigned char)+0x1ec>)
    c908:	4620      	mov	r0, r4
  bool fullMsg = false;
    c90a:	462e      	mov	r6, r5
    usbRxBuf[usbRxBufCnt] = 0;
    c90c:	779d      	strb	r5, [r3, #30]
    send(msg);
    c90e:	f7ff fe7d 	bl	c60c <UUSB::send(char const*)>
    usbRxBufCnt = 0;
    c912:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
}
    c916:	4630      	mov	r0, r6
    c918:	b051      	add	sp, #324	; 0x144
    c91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      usbRxBufOverflow = false;
    c91c:	2600      	movs	r6, #0
      send("# USB rx-buffer overflow\r\n");
    c91e:	4946      	ldr	r1, [pc, #280]	; (ca38 <UUSB::receivedCharFromUSB(unsigned char)+0x1f0>)
    c920:	4620      	mov	r0, r4
      usbRxBufOverflow = false;
    c922:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
      send("# USB rx-buffer overflow\r\n");
    c926:	f7ff fe71 	bl	c60c <UUSB::send(char const*)>
    c92a:	e7e0      	b.n	c8ee <UUSB::receivedCharFromUSB(unsigned char)+0xa6>
        send("\r\n>>");
    c92c:	4943      	ldr	r1, [pc, #268]	; (ca3c <UUSB::receivedCharFromUSB(unsigned char)+0x1f4>)
    c92e:	4620      	mov	r0, r4
    c930:	f7ff fe6c 	bl	c60c <UUSB::send(char const*)>
        justSendPrompt = true;
    c934:	2301      	movs	r3, #1
    c936:	7763      	strb	r3, [r4, #29]
    c938:	e7d9      	b.n	c8ee <UUSB::receivedCharFromUSB(unsigned char)+0xa6>
          int crc = int(p1[1] - '0') * 10 + int(p1[2] - '0');
    c93a:	7fe3      	ldrb	r3, [r4, #31]
          for (int i = 3; i < usbRxBufCnt; i++)
    c93c:	2a03      	cmp	r2, #3
          int crc = int(p1[1] - '0') * 10 + int(p1[2] - '0');
    c93e:	f894 1020 	ldrb.w	r1, [r4, #32]
          int sumCnt = 0;
    c942:	4637      	mov	r7, r6
          int crc = int(p1[1] - '0') * 10 + int(p1[2] - '0');
    c944:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    c948:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    c94c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c950:	eb01 0343 	add.w	r3, r1, r3, lsl #1
          for (int i = 3; i < usbRxBufCnt; i++)
    c954:	dd68      	ble.n	ca28 <UUSB::receivedCharFromUSB(unsigned char)+0x1e0>
    c956:	f104 061d 	add.w	r6, r4, #29
          int sum = 0;
    c95a:	4638      	mov	r0, r7
    c95c:	4416      	add	r6, r2
    c95e:	f104 0220 	add.w	r2, r4, #32
            if (usbRxBuf[i] >= ' ')
    c962:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c966:	291f      	cmp	r1, #31
    c968:	d901      	bls.n	c96e <UUSB::receivedCharFromUSB(unsigned char)+0x126>
              sum += usbRxBuf[i];
    c96a:	4408      	add	r0, r1
              sumCnt++;
    c96c:	3701      	adds	r7, #1
          for (int i = 3; i < usbRxBufCnt; i++)
    c96e:	42b2      	cmp	r2, r6
    c970:	d1f7      	bne.n	c962 <UUSB::receivedCharFromUSB(unsigned char)+0x11a>
          crcOK = (sum % 99) + 1 == crc;
    c972:	4a33      	ldr	r2, [pc, #204]	; (ca40 <UUSB::receivedCharFromUSB(unsigned char)+0x1f8>)
    c974:	fba2 1200 	umull	r1, r2, r2, r0
    c978:	0992      	lsrs	r2, r2, #6
    c97a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c97e:	eb02 1242 	add.w	r2, r2, r2, lsl #5
    c982:	1a81      	subs	r1, r0, r2
    c984:	3101      	adds	r1, #1
          if (crcOK or localEcho)
    c986:	428b      	cmp	r3, r1
    c988:	d017      	beq.n	c9ba <UUSB::receivedCharFromUSB(unsigned char)+0x172>
    c98a:	7f26      	ldrb	r6, [r4, #28]
    c98c:	b9ae      	cbnz	r6, c9ba <UUSB::receivedCharFromUSB(unsigned char)+0x172>
            snprintf(s, MSL, "# CRC failed (crc=%d, found to be %d, sum=%d, %d chars), for '%s'\r\n",
    c98e:	9100      	str	r1, [sp, #0]
    c990:	f104 011e 	add.w	r1, r4, #30
    c994:	4a2b      	ldr	r2, [pc, #172]	; (ca44 <UUSB::receivedCharFromUSB(unsigned char)+0x1fc>)
    c996:	9103      	str	r1, [sp, #12]
    c998:	f240 111d 	movw	r1, #285	; 0x11d
    c99c:	e9cd 0701 	strd	r0, r7, [sp, #4]
    c9a0:	a805      	add	r0, sp, #20
    c9a2:	f00e ff07 	bl	1b7b4 <snprintf>
            send(s);
    c9a6:	a905      	add	r1, sp, #20
    c9a8:	4620      	mov	r0, r4
    c9aa:	f7ff fe2f 	bl	c60c <UUSB::send(char const*)>
            usbInErrCnt++;
    c9ae:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    c9b2:	3301      	adds	r3, #1
    c9b4:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    c9b8:	e797      	b.n	c8ea <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
            if (confirm)
    c9ba:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
            char * msg = &usbRxBuf[3];
    c9be:	f104 0621 	add.w	r6, r4, #33	; 0x21
            if (confirm)
    c9c2:	2a21      	cmp	r2, #33	; 0x21
    c9c4:	d184      	bne.n	c8d0 <UUSB::receivedCharFromUSB(unsigned char)+0x88>
            command.parse_and_execute_command(msg);
    c9c6:	f104 0122 	add.w	r1, r4, #34	; 0x22
    c9ca:	4819      	ldr	r0, [pc, #100]	; (ca30 <UUSB::receivedCharFromUSB(unsigned char)+0x1e8>)
    c9cc:	f7f5 fd54 	bl	2478 <UCommand::parse_and_execute_command(char*)>
            usbInMsgCnt++;
    c9d0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
            debugCnt = 0;
    c9d4:	2700      	movs	r7, #0
              snprintf(s, MSL, "confirm %s\n", &usbRxBuf[3]);
    c9d6:	21fa      	movs	r1, #250	; 0xfa
            usbInMsgCnt++;
    c9d8:	1c5a      	adds	r2, r3, #1
              snprintf(s, MSL, "confirm %s\n", &usbRxBuf[3]);
    c9da:	a805      	add	r0, sp, #20
    c9dc:	4633      	mov	r3, r6
            debugCnt = 0;
    c9de:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
            usbInMsgCnt++;
    c9e2:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
            fullMsg = true;
    c9e6:	462e      	mov	r6, r5
              snprintf(s, MSL, "confirm %s\n", &usbRxBuf[3]);
    c9e8:	4a17      	ldr	r2, [pc, #92]	; (ca48 <UUSB::receivedCharFromUSB(unsigned char)+0x200>)
    c9ea:	f00e fee3 	bl	1b7b4 <snprintf>
              s[MSL-1] = '\n';
    c9ee:	230a      	movs	r3, #10
              send(s);
    c9f0:	a905      	add	r1, sp, #20
    c9f2:	4620      	mov	r0, r4
              s[MSL] = '\0';
    c9f4:	f88d 710e 	strb.w	r7, [sp, #270]	; 0x10e
              s[MSL-1] = '\n';
    c9f8:	f88d 310d 	strb.w	r3, [sp, #269]	; 0x10d
              send(s);
    c9fc:	f7ff fe06 	bl	c60c <UUSB::send(char const*)>
    ca00:	e773      	b.n	c8ea <UUSB::receivedCharFromUSB(unsigned char)+0xa2>
          if (use_CRC)
    ca02:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    ca06:	2b00      	cmp	r3, #0
    ca08:	f43f af60 	beq.w	c8cc <UUSB::receivedCharFromUSB(unsigned char)+0x84>
            snprintf(s, MSL, "# processing under protest - no CRC '%s'\r\n", usbRxBuf);
    ca0c:	f104 061e 	add.w	r6, r4, #30
    ca10:	4a0e      	ldr	r2, [pc, #56]	; (ca4c <UUSB::receivedCharFromUSB(unsigned char)+0x204>)
    ca12:	f44f 7196 	mov.w	r1, #300	; 0x12c
    ca16:	a805      	add	r0, sp, #20
    ca18:	4633      	mov	r3, r6
    ca1a:	f00e fecb 	bl	1b7b4 <snprintf>
            send(s);
    ca1e:	a905      	add	r1, sp, #20
    ca20:	4620      	mov	r0, r4
    ca22:	f7ff fdf3 	bl	c60c <UUSB::send(char const*)>
    ca26:	e753      	b.n	c8d0 <UUSB::receivedCharFromUSB(unsigned char)+0x88>
          for (int i = 3; i < usbRxBufCnt; i++)
    ca28:	2101      	movs	r1, #1
          int sum = 0;
    ca2a:	4630      	mov	r0, r6
    ca2c:	e7ab      	b.n	c986 <UUSB::receivedCharFromUSB(unsigned char)+0x13e>
    ca2e:	bf00      	nop
    ca30:	2000ea18 	.word	0x2000ea18
    ca34:	20004690 	.word	0x20004690
    ca38:	200045f0 	.word	0x200045f0
    ca3c:	20004688 	.word	0x20004688
    ca40:	a57eb503 	.word	0xa57eb503
    ca44:	20004618 	.word	0x20004618
    ca48:	2000460c 	.word	0x2000460c
    ca4c:	2000465c 	.word	0x2000465c

0000ca50 <UUSB::handleIncoming()>:
{
    ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca52:	4607      	mov	r7, r0
  m = usb_serial_available();
    ca54:	f00b fa08 	bl	17e68 <usb_serial_available>
  if (m > 0)
    ca58:	1e05      	subs	r5, r0, #0
    ca5a:	dd17      	ble.n	ca8c <UUSB::handleIncoming()+0x3c>
    for (int i = 0; i < m; i++)
    ca5c:	2400      	movs	r4, #0
  bool dataReceived = false;
    ca5e:	4626      	mov	r6, r4
    ca60:	e001      	b.n	ca66 <UUSB::handleIncoming()+0x16>
    for (int i = 0; i < m; i++)
    ca62:	42a5      	cmp	r5, r4
    ca64:	d010      	beq.n	ca88 <UUSB::handleIncoming()+0x38>
      n = usb_serial_getchar();
    ca66:	f00b fa43 	bl	17ef0 <usb_serial_getchar>
      if (n < 0)
    ca6a:	2800      	cmp	r0, #0
    for (int i = 0; i < m; i++)
    ca6c:	f104 0401 	add.w	r4, r4, #1
      if (n >= '\n' and n < 0x80)
    ca70:	f1a0 030a 	sub.w	r3, r0, #10
      if (n < 0)
    ca74:	db08      	blt.n	ca88 <UUSB::handleIncoming()+0x38>
      if (n >= '\n' and n < 0x80)
    ca76:	2b75      	cmp	r3, #117	; 0x75
    ca78:	d8f3      	bhi.n	ca62 <UUSB::handleIncoming()+0x12>
        dataReceived = receivedCharFromUSB(n) ;
    ca7a:	b2c1      	uxtb	r1, r0
    ca7c:	4638      	mov	r0, r7
    ca7e:	f7ff fee3 	bl	c848 <UUSB::receivedCharFromUSB(unsigned char)>
    for (int i = 0; i < m; i++)
    ca82:	42a5      	cmp	r5, r4
        dataReceived = receivedCharFromUSB(n) ;
    ca84:	4606      	mov	r6, r0
    for (int i = 0; i < m; i++)
    ca86:	d1ee      	bne.n	ca66 <UUSB::handleIncoming()+0x16>
}
    ca88:	4630      	mov	r0, r6
    ca8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool dataReceived = false;
    ca8c:	2600      	movs	r6, #0
}
    ca8e:	4630      	mov	r0, r6
    ca90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca92:	bf00      	nop

0000ca94 <UUSB::tick()>:
{ // check for messages
    ca94:	b570      	push	{r4, r5, r6, lr}
    ca96:	4604      	mov	r4, r0
  bool done = handleIncoming();
    ca98:	f7ff ffda 	bl	ca50 <UUSB::handleIncoming()>
  if (not done)
    ca9c:	bb58      	cbnz	r0, caf6 <UUSB::tick()+0x62>
    ca9e:	e9d4 1349 	ldrd	r1, r3, [r4, #292]	; 0x124
    caa2:	1a5b      	subs	r3, r3, r1
    for (int i = 0; i < (int)subscriptions.size(); i++)
    caa4:	2b00      	cmp	r3, #0
    caa6:	dd26      	ble.n	caf6 <UUSB::tick()+0x62>
    caa8:	4605      	mov	r5, r0
          subscribeServiceState = 0;
    caaa:	4606      	mov	r6, r0
    caac:	e016      	b.n	cadc <UUSB::tick()+0x48>
        subscribeServiceState++;
    caae:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    cab2:	e9d4 1249 	ldrd	r1, r2, [r4, #292]	; 0x124
    cab6:	3301      	adds	r3, #1
    cab8:	1a52      	subs	r2, r2, r1
    caba:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
        if (subscribeServiceState >= (int)subscriptions.size())
    cabe:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    cac2:	ea4f 00a2 	mov.w	r0, r2, asr #2
    cac6:	db06      	blt.n	cad6 <UUSB::tick()+0x42>
          subServiceLoops++;
    cac8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
          subscribeServiceState = 0;
    cacc:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
          subServiceLoops++;
    cad0:	3301      	adds	r3, #1
    cad2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    for (int i = 0; i < (int)subscriptions.size(); i++)
    cad6:	3501      	adds	r5, #1
    cad8:	4285      	cmp	r5, r0
    cada:	da0c      	bge.n	caf6 <UUSB::tick()+0x62>
	return *(this->_M_impl._M_start + __n);
    cadc:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
      done = subscriptions[subscribeServiceState]->subscribeService();
    cae0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    cae4:	f7ff fbda 	bl	c29c <USubss::subscribeService()>
      if (done)
    cae8:	2800      	cmp	r0, #0
    caea:	d1e0      	bne.n	caae <UUSB::tick()+0x1a>
        subServicedCnt++;
    caec:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    caf0:	3301      	adds	r3, #1
    caf2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    caf6:	4a41      	ldr	r2, [pc, #260]	; (cbfc <UUSB::tick()+0x168>)
  if (millis() > lastSec)
    caf8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    cafc:	6812      	ldr	r2, [r2, #0]
    cafe:	4293      	cmp	r3, r2
    cb00:	d22c      	bcs.n	cb5c <UUSB::tick()+0xc8>
    if (usbInMsgCnt > 0)
    cb02:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
    lastSec += 1000;
    cb06:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    if (usbInMsgCnt > 0)
    cb0a:	2d00      	cmp	r5, #0
    lastSec += 1000;
    cb0c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    if (usbInMsgCnt > 0)
    cb10:	dd25      	ble.n	cb5e <UUSB::tick()+0xca>
      usbSendFailSumLast = usbSendFailSum;
    cb12:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
      if (not usbIsUp)
    cb16:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
      usbSendFailSumLast = usbSendFailSum;
    cb1a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
      if (not usbIsUp)
    cb1e:	b3bb      	cbz	r3, cb90 <UUSB::tick()+0xfc>
      usbIsUp = true;
    cb20:	2301      	movs	r3, #1
    cb22:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
    if (usbInMsgCnt > 0)
    cb26:	2d00      	cmp	r5, #0
    cb28:	dd3b      	ble.n	cba2 <UUSB::tick()+0x10e>
    cb2a:	2000      	movs	r0, #0
    usbSendFailSum += usbSendFail;
    cb2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    usbInMsgCnt = 0;
    cb30:	2300      	movs	r3, #0
    usbSendFailSum += usbSendFail;
    cb32:	440a      	add	r2, r1
    usbInMsgCnt = 0;
    cb34:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
      usbInMsg0CntSecs = 0;
    cb38:	e9c4 503d 	strd	r5, r0, [r4, #244]	; 0xf4
    subServiceLoopsSec = subServiceLoops;
    cb3c:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    usbSendFailSum += usbSendFail;
    cb40:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    usbSendCntSec = usbSendCnt;
    cb44:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    subServiceLoopsSec = subServiceLoops;
    cb48:	e9c4 304d 	strd	r3, r0, [r4, #308]	; 0x134
    subServicedCntSec = subServicedCnt;
    cb4c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    usbSendFail = 0;
    cb50:	e9c4 3140 	strd	r3, r1, [r4, #256]	; 0x100
    subServicedCnt = 0;
    cb54:	e9c4 304f 	strd	r3, r0, [r4, #316]	; 0x13c
    usbSendCnt = 0;
    cb58:	e9c4 3251 	strd	r3, r2, [r4, #324]	; 0x144
}
    cb5c:	bd70      	pop	{r4, r5, r6, pc}
    else if (usbIsUp)
    cb5e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    cb62:	b17b      	cbz	r3, cb84 <UUSB::tick()+0xf0>
      if ((usbSendFailSum - usbSendFailSumLast) > N)
    cb64:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
    cb68:	1ad3      	subs	r3, r2, r3
    cb6a:	2b0a      	cmp	r3, #10
    cb6c:	dc1d      	bgt.n	cbaa <UUSB::tick()+0x116>
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cb6e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    cb72:	2b3c      	cmp	r3, #60	; 0x3c
    cb74:	4618      	mov	r0, r3
    cb76:	dd09      	ble.n	cb8c <UUSB::tick()+0xf8>
    cb78:	7f21      	ldrb	r1, [r4, #28]
    cb7a:	b9a1      	cbnz	r1, cba6 <UUSB::tick()+0x112>
        usbIsUp = false;
    cb7c:	2300      	movs	r3, #0
    cb7e:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
    cb82:	e7d0      	b.n	cb26 <UUSB::tick()+0x92>
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cb84:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
      usbSendFailSumLast = usbSendFailSum;
    cb88:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
      usbInMsg0CntSecs++;
    cb8c:	3001      	adds	r0, #1
    cb8e:	e7cd      	b.n	cb2c <UUSB::tick()+0x98>
        usb.send("# USB is up\n");
    cb90:	491b      	ldr	r1, [pc, #108]	; (cc00 <UUSB::tick()+0x16c>)
    cb92:	481c      	ldr	r0, [pc, #112]	; (cc04 <UUSB::tick()+0x170>)
    cb94:	f7ff fd3a 	bl	c60c <UUSB::send(char const*)>
    if (usbInMsgCnt > 0)
    cb98:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
    usbSendFailSum += usbSendFail;
    cb9c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    cba0:	e7be      	b.n	cb20 <UUSB::tick()+0x8c>
    cba2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
      usbInMsg0CntSecs++;
    cba6:	4618      	mov	r0, r3
    cba8:	e7f0      	b.n	cb8c <UUSB::tick()+0xf8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cbaa:	e9d4 1349 	ldrd	r1, r3, [r4, #292]	; 0x124
    cbae:	1a5b      	subs	r3, r3, r1
  subscriptions.push_back(newToBeServiced);
}

void UUSB::stopAllSubscriptions()
{
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	dd1a      	ble.n	cbea <UUSB::tick()+0x156>
    cbb4:	2500      	movs	r5, #0
  {
    subscriptions[i]->stopSubscriptions();
    cbb6:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cbba:	3501      	adds	r5, #1
    subscriptions[i]->stopSubscriptions();
    cbbc:	f7ff fbc6 	bl	c34c <USubss::stopSubscriptions()>
    cbc0:	e9d4 1349 	ldrd	r1, r3, [r4, #292]	; 0x124
    cbc4:	1a5b      	subs	r3, r3, r1
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cbc6:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
    cbca:	dbf4      	blt.n	cbb6 <UUSB::tick()+0x122>
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cbcc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
        usbIsUp = false;
    cbd0:	2100      	movs	r1, #0
    if (usbInMsgCnt > 0)
    cbd2:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cbd6:	2b3c      	cmp	r3, #60	; 0x3c
    usbSendFailSum += usbSendFail;
    cbd8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        usbIsUp = false;
    cbdc:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cbe0:	dda1      	ble.n	cb26 <UUSB::tick()+0x92>
    cbe2:	7f23      	ldrb	r3, [r4, #28]
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	d19e      	bne.n	cb26 <UUSB::tick()+0x92>
    cbe8:	e7c8      	b.n	cb7c <UUSB::tick()+0xe8>
    cbea:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
        usbIsUp = false;
    cbee:	2100      	movs	r1, #0
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cbf0:	2b3c      	cmp	r3, #60	; 0x3c
        usbIsUp = false;
    cbf2:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
      if (usbInMsg0CntSecs > 60 and localEcho == false)
    cbf6:	dcbf      	bgt.n	cb78 <UUSB::tick()+0xe4>
      usbInMsg0CntSecs++;
    cbf8:	4618      	mov	r0, r3
    cbfa:	e7c7      	b.n	cb8c <UUSB::tick()+0xf8>
    cbfc:	2000fab8 	.word	0x2000fab8
    cc00:	200046e0 	.word	0x200046e0
    cc04:	2000fac4 	.word	0x2000fac4

0000cc08 <UUSB::stopAllSubscriptions()>:
{
    cc08:	b538      	push	{r3, r4, r5, lr}
    cc0a:	e9d0 2349 	ldrd	r2, r3, [r0, #292]	; 0x124
    cc0e:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cc10:	2b00      	cmp	r3, #0
    cc12:	dd0c      	ble.n	cc2e <UUSB::stopAllSubscriptions()+0x26>
    cc14:	4605      	mov	r5, r0
    cc16:	2400      	movs	r4, #0
    subscriptions[i]->stopSubscriptions();
    cc18:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cc1c:	3401      	adds	r4, #1
    subscriptions[i]->stopSubscriptions();
    cc1e:	f7ff fb95 	bl	c34c <USubss::stopSubscriptions()>
    cc22:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    cc26:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cc28:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    cc2c:	dbf4      	blt.n	cc18 <UUSB::stopAllSubscriptions()+0x10>
  }
}
    cc2e:	bd38      	pop	{r3, r4, r5, pc}

0000cc30 <UUSB::sendAllHelp()>:
    return robotname[deviceID];
    cc30:	4b16      	ldr	r3, [pc, #88]	; (cc8c <UUSB::sendAllHelp()+0x5c>)

void UUSB::sendAllHelp()
{
  const int MRL = 200;
  char reply[MRL];
  snprintf(reply, MRL, "# Command list (host %s %s) ------- \r\n", robot.deviceName, robot.getRobotName());
    cc32:	4a17      	ldr	r2, [pc, #92]	; (cc90 <UUSB::sendAllHelp()+0x60>)
    cc34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    cc36:	3126      	adds	r1, #38	; 0x26
{
    cc38:	b530      	push	{r4, r5, lr}
  snprintf(reply, MRL, "# Command list (host %s %s) ------- \r\n", robot.deviceName, robot.getRobotName());
    cc3a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
{
    cc3e:	b0b5      	sub	sp, #212	; 0xd4
  snprintf(reply, MRL, "# Command list (host %s %s) ------- \r\n", robot.deviceName, robot.getRobotName());
    cc40:	3331      	adds	r3, #49	; 0x31
{
    cc42:	4605      	mov	r5, r0
  snprintf(reply, MRL, "# Command list (host %s %s) ------- \r\n", robot.deviceName, robot.getRobotName());
    cc44:	9100      	str	r1, [sp, #0]
    cc46:	a802      	add	r0, sp, #8
    cc48:	21c8      	movs	r1, #200	; 0xc8
    cc4a:	f00e fdb3 	bl	1b7b4 <snprintf>
  usb.send(reply);
    cc4e:	a902      	add	r1, sp, #8
    cc50:	4810      	ldr	r0, [pc, #64]	; (cc94 <UUSB::sendAllHelp()+0x64>)
    cc52:	f7ff fcdb 	bl	c60c <UUSB::send(char const*)>
    cc56:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    cc5a:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	dd12      	ble.n	cc86 <UUSB::sendAllHelp()+0x56>
    cc60:	2400      	movs	r4, #0
  {
    subscriptions[i]->sendHelp();
    cc62:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    cc66:	6803      	ldr	r3, [r0, #0]
    cc68:	685b      	ldr	r3, [r3, #4]
    cc6a:	4798      	blx	r3
    subscriptions[i]->subscribeSendHelp();
    cc6c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    cc70:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cc74:	3401      	adds	r4, #1
    subscriptions[i]->subscribeSendHelp();
    cc76:	f7ff fb7d 	bl	c374 <USubss::subscribeSendHelp()>
    cc7a:	e9d5 2349 	ldrd	r2, r3, [r5, #292]	; 0x124
    cc7e:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cc80:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    cc84:	dbed      	blt.n	cc62 <UUSB::sendAllHelp()+0x32>
  }
}
    cc86:	b035      	add	sp, #212	; 0xd4
    cc88:	bd30      	pop	{r4, r5, pc}
    cc8a:	bf00      	nop
    cc8c:	2000f660 	.word	0x2000f660
    cc90:	2000459c 	.word	0x2000459c
    cc94:	2000fac4 	.word	0x2000fac4

0000cc98 <UUSB::decodeAll(char const*)>:

bool UUSB::decodeAll(const char* buf)
{
    cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc9a:	e9d0 2349 	ldrd	r2, r3, [r0, #292]	; 0x124
    cc9e:	1a9b      	subs	r3, r3, r2
  bool used = false;
  for (int i = 0; i < (int)subscriptions.size(); i++)
    cca0:	2b00      	cmp	r3, #0
    cca2:	dd22      	ble.n	ccea <UUSB::decodeAll(char const*)+0x52>
    cca4:	4606      	mov	r6, r0
    cca6:	460f      	mov	r7, r1
    cca8:	2400      	movs	r4, #0
    ccaa:	e00d      	b.n	ccc8 <UUSB::decodeAll(char const*)+0x30>
      if (i == ctrlVel1)
        subscriptions[ctrlVel2]->decode(buf);
      // non-subscribe command found, stop here
      break;
    }
    used = subscriptions[i]->subscribeDecode(buf);
    ccac:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
    ccb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  for (int i = 0; i < (int)subscriptions.size(); i++)
    ccb4:	3401      	adds	r4, #1
    used = subscriptions[i]->subscribeDecode(buf);
    ccb6:	f7ff fac1 	bl	c23c <USubss::subscribeDecode(char const*)>
    if (used)
    ccba:	b998      	cbnz	r0, cce4 <UUSB::decodeAll(char const*)+0x4c>
    ccbc:	e9d6 2349 	ldrd	r2, r3, [r6, #292]	; 0x124
    ccc0:	1a9b      	subs	r3, r3, r2
  for (int i = 0; i < (int)subscriptions.size(); i++)
    ccc2:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
    ccc6:	da10      	bge.n	ccea <UUSB::decodeAll(char const*)+0x52>
    used = subscriptions[i]->decode(buf);
    ccc8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    cccc:	4639      	mov	r1, r7
    ccce:	6803      	ldr	r3, [r0, #0]
    ccd0:	689b      	ldr	r3, [r3, #8]
    ccd2:	4798      	blx	r3
    used = subscriptions[i]->subscribeDecode(buf);
    ccd4:	4639      	mov	r1, r7
    if (used)
    ccd6:	4605      	mov	r5, r0
    ccd8:	2800      	cmp	r0, #0
    ccda:	d0e7      	beq.n	ccac <UUSB::decodeAll(char const*)+0x14>
      if (i == ctrlVel1)
    ccdc:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
    cce0:	42a3      	cmp	r3, r4
    cce2:	d005      	beq.n	ccf0 <UUSB::decodeAll(char const*)+0x58>
    used = subscriptions[i]->decode(buf);
    cce4:	2501      	movs	r5, #1
      // debug end
      break;
    }
  }
  return used;
}
    cce6:	4628      	mov	r0, r5
    cce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    used = subscriptions[i]->decode(buf);
    ccea:	2500      	movs	r5, #0
}
    ccec:	4628      	mov	r0, r5
    ccee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        subscriptions[ctrlVel2]->decode(buf);
    ccf0:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
	return *(this->_M_impl._M_start + __n);
    ccf4:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
    ccf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ccfc:	6803      	ldr	r3, [r0, #0]
    ccfe:	689b      	ldr	r3, [r3, #8]
    cd00:	4798      	blx	r3
}
    cd02:	4628      	mov	r0, r5
    cd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd06:	bf00      	nop

0000cd08 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)>:
      vector<_Tp, _Alloc>::
    cd08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd0c:	e9d0 8900 	ldrd	r8, r9, [r0]
    cd10:	460f      	mov	r7, r1
    cd12:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
    cd14:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cd18:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
    cd1c:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    cd20:	d054      	beq.n	cdcc <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xc4>
    cd22:	1093      	asrs	r3, r2, #2
    cd24:	4606      	mov	r6, r0
    cd26:	eba7 0508 	sub.w	r5, r7, r8
    cd2a:	2b01      	cmp	r3, #1
    cd2c:	461a      	mov	r2, r3
    cd2e:	bf38      	it	cc
    cd30:	2201      	movcc	r2, #1
    cd32:	189c      	adds	r4, r3, r2
    cd34:	d248      	bcs.n	cdc8 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cd36:	2c00      	cmp	r4, #0
    cd38:	d13c      	bne.n	cdb4 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xac>
    cd3a:	46a3      	mov	fp, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    cd3c:	f8da 3000 	ldr.w	r3, [sl]
      if (__count > 0)
    cd40:	2d00      	cmp	r5, #0
    cd42:	f84b 3005 	str.w	r3, [fp, r5]
    cd46:	dc24      	bgt.n	cd92 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x8a>
      ptrdiff_t __count = __last - __first;
    cd48:	eba9 0907 	sub.w	r9, r9, r7
	      ++__new_finish;
    cd4c:	3504      	adds	r5, #4
      if (__count > 0)
    cd4e:	f1b9 0f00 	cmp.w	r9, #0
    cd52:	445d      	add	r5, fp
    cd54:	dc13      	bgt.n	cd7e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x76>
      return __result + __count;
    cd56:	444d      	add	r5, r9
	if (__p)
    cd58:	f1b8 0f00 	cmp.w	r8, #0
    cd5c:	d104      	bne.n	cd68 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x60>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cd5e:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    cd60:	e9c6 b500 	strd	fp, r5, [r6]
    }
    cd64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
    cd68:	68b1      	ldr	r1, [r6, #8]
    cd6a:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    cd6e:	4640      	mov	r0, r8
    cd70:	f009 fd34 	bl	167dc <operator delete(void*, unsigned int)>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cd74:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    cd76:	e9c6 b500 	strd	fp, r5, [r6]
    }
    cd7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    cd7e:	4628      	mov	r0, r5
    cd80:	4639      	mov	r1, r7
    cd82:	464a      	mov	r2, r9
      return __result + __count;
    cd84:	444d      	add	r5, r9
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    cd86:	f009 fc8d 	bl	166a4 <memcpy>
    cd8a:	f1b8 0f00 	cmp.w	r8, #0
    cd8e:	d0e6      	beq.n	cd5e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x56>
    cd90:	e7ea      	b.n	cd68 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x60>
      ptrdiff_t __count = __last - __first;
    cd92:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    cd96:	462a      	mov	r2, r5
    cd98:	4641      	mov	r1, r8
    cd9a:	4658      	mov	r0, fp
	      ++__new_finish;
    cd9c:	3504      	adds	r5, #4
    cd9e:	f00e fe5f 	bl	1ba60 <memmove>
      if (__count > 0)
    cda2:	f1b9 0f00 	cmp.w	r9, #0
    cda6:	445d      	add	r5, fp
    cda8:	dce9      	bgt.n	cd7e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
    cdaa:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
    cdac:	444d      	add	r5, r9
    cdae:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    cdb2:	e7dc      	b.n	cd6e <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x66>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    cdb4:	428c      	cmp	r4, r1
    cdb6:	bf28      	it	cs
    cdb8:	460c      	movcs	r4, r1
    cdba:	00a4      	lsls	r4, r4, #2
    cdbc:	4620      	mov	r0, r4
    cdbe:	f009 fd0b 	bl	167d8 <operator new(unsigned int)>
    cdc2:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cdc4:	4404      	add	r4, r0
    cdc6:	e7b9      	b.n	cd3c <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0x34>
    cdc8:	4c02      	ldr	r4, [pc, #8]	; (cdd4 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xcc>)
    cdca:	e7f7      	b.n	cdbc <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xb4>
	  __throw_length_error(__N(__s));
    cdcc:	4802      	ldr	r0, [pc, #8]	; (cdd8 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)+0xd0>)
    cdce:	f7ff f98b 	bl	c0e8 <USubs::USubs(char const*, char const*)>
    cdd2:	bf00      	nop
    cdd4:	7ffffffc 	.word	0x7ffffffc
    cdd8:	20007dd0 	.word	0x20007dd0

0000cddc <UUSB::setup()>:
{ // init USB connection (parameter is not used - always 12MB/s)
    cddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    cde0:	4d23      	ldr	r5, [pc, #140]	; (ce70 <UUSB::setup()+0x94>)
    cde2:	b082      	sub	sp, #8
    cde4:	4c23      	ldr	r4, [pc, #140]	; (ce74 <UUSB::setup()+0x98>)
    cde6:	4607      	mov	r7, r0
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    cde8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; ce8c <UUSB::setup()+0xb0>
				if (elapsed > 750) break;
    cdec:	f240 29ee 	movw	r9, #750	; 0x2ee
		uint32_t millis_begin = systick_millis_count;
    cdf0:	682e      	ldr	r6, [r5, #0]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    cdf2:	f8df a09c 	ldr.w	sl, [pc, #156]	; ce90 <UUSB::setup()+0xb4>
		yield();
    cdf6:	f00b f91f 	bl	18038 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    cdfa:	7823      	ldrb	r3, [r4, #0]
    cdfc:	b31b      	cbz	r3, ce46 <UUSB::setup()+0x6a>
    cdfe:	f898 3000 	ldrb.w	r3, [r8]
    ce02:	07db      	lsls	r3, r3, #31
    ce04:	d51f      	bpl.n	ce46 <UUSB::setup()+0x6a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    ce06:	682b      	ldr	r3, [r5, #0]
    ce08:	f8da 2000 	ldr.w	r2, [sl]
    ce0c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    ce0e:	2b0e      	cmp	r3, #14
    ce10:	d919      	bls.n	ce46 <UUSB::setup()+0x6a>
  send("# welcome - ready in a moment\r\n");
    ce12:	4919      	ldr	r1, [pc, #100]	; (ce78 <UUSB::setup()+0x9c>)
    ce14:	4638      	mov	r0, r7
    ce16:	f7ff fbf9 	bl	c60c <UUSB::send(char const*)>
  addPublistItem("usb", "Get status for USB connection 'usb time inCnt inErr serviced/sec serviceLoopCnt/sec sendFail/sec'");
    ce1a:	4a18      	ldr	r2, [pc, #96]	; (ce7c <UUSB::setup()+0xa0>)
    ce1c:	4918      	ldr	r1, [pc, #96]	; (ce80 <UUSB::setup()+0xa4>)
    ce1e:	4638      	mov	r0, r7
    ce20:	f7ff fb26 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("ssv", "Get subscription status (as info with key and interval time)");
    ce24:	4917      	ldr	r1, [pc, #92]	; (ce84 <UUSB::setup()+0xa8>)
    ce26:	4a18      	ldr	r2, [pc, #96]	; (ce88 <UUSB::setup()+0xac>)
    ce28:	4638      	mov	r0, r7
    ce2a:	f7ff fb21 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addSubscriptionService(this);
    ce2e:	9701      	str	r7, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    ce30:	e9d7 134a 	ldrd	r1, r3, [r7, #296]	; 0x128
    ce34:	4299      	cmp	r1, r3
    ce36:	d013      	beq.n	ce60 <UUSB::setup()+0x84>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    ce38:	f841 7b04 	str.w	r7, [r1], #4
	    ++this->_M_impl._M_finish;
    ce3c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
}
    ce40:	b002      	add	sp, #8
    ce42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    ce46:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    ce48:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    ce4a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    ce4c:	b12a      	cbz	r2, ce5a <UUSB::setup()+0x7e>
				if (elapsed > 2000) break;
    ce4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    ce52:	d8de      	bhi.n	ce12 <UUSB::setup()+0x36>
			yield();
    ce54:	f00b f8f0 	bl	18038 <yield>
    ce58:	e7cd      	b.n	cdf6 <UUSB::setup()+0x1a>
				if (elapsed > 750) break;
    ce5a:	454b      	cmp	r3, r9
    ce5c:	d9fa      	bls.n	ce54 <UUSB::setup()+0x78>
    ce5e:	e7d8      	b.n	ce12 <UUSB::setup()+0x36>
	  _M_realloc_insert(end(), __x);
    ce60:	aa01      	add	r2, sp, #4
    ce62:	f507 7092 	add.w	r0, r7, #292	; 0x124
    ce66:	f7ff ff4f 	bl	cd08 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)>
    ce6a:	b002      	add	sp, #8
    ce6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce70:	2000fab8 	.word	0x2000fab8
    ce74:	2000fc45 	.word	0x2000fc45
    ce78:	200046f0 	.word	0x200046f0
    ce7c:	20004710 	.word	0x20004710
    ce80:	20004774 	.word	0x20004774
    ce84:	200047b8 	.word	0x200047b8
    ce88:	20004778 	.word	0x20004778
    ce8c:	2000fc44 	.word	0x2000fc44
    ce90:	2000fc1c 	.word	0x2000fc1c

0000ce94 <UUSB::addSubscriptionService(USubss*)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    ce94:	e9d0 324a 	ldrd	r3, r2, [r0, #296]	; 0x128
{
    ce98:	b500      	push	{lr}
    ce9a:	4293      	cmp	r3, r2
    ce9c:	b083      	sub	sp, #12
    ce9e:	9101      	str	r1, [sp, #4]
    cea0:	d006      	beq.n	ceb0 <UUSB::addSubscriptionService(USubss*)+0x1c>
    cea2:	f843 1b04 	str.w	r1, [r3], #4
	    ++this->_M_impl._M_finish;
    cea6:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
}
    ceaa:	b003      	add	sp, #12
    ceac:	f85d fb04 	ldr.w	pc, [sp], #4
	  _M_realloc_insert(end(), __x);
    ceb0:	aa01      	add	r2, sp, #4
    ceb2:	4619      	mov	r1, r3
    ceb4:	f500 7092 	add.w	r0, r0, #292	; 0x124
    ceb8:	f7ff ff26 	bl	cd08 <void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)>
    cebc:	b003      	add	sp, #12
    cebe:	f85d fb04 	ldr.w	pc, [sp], #4
    cec2:	bf00      	nop

0000cec4 <_GLOBAL__sub_I_usb>:
}
    cec4:	b510      	push	{r4, lr}
    cec6:	4c19      	ldr	r4, [pc, #100]	; (cf2c <_GLOBAL__sub_I_usb+0x68>)
    cec8:	4620      	mov	r0, r4
    ceca:	f7ff f9ad 	bl	c228 <USubss::USubss()>
    cece:	2300      	movs	r3, #0
    ced0:	4917      	ldr	r1, [pc, #92]	; (cf30 <_GLOBAL__sub_I_usb+0x6c>)
    ced2:	2201      	movs	r2, #1
    ced4:	f44f 7080 	mov.w	r0, #256	; 0x100
    ced8:	61a3      	str	r3, [r4, #24]
    ceda:	6021      	str	r1, [r4, #0]
    cedc:	7522      	strb	r2, [r4, #20]
    cede:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
UUSB usb;
    cee2:	4620      	mov	r0, r4
    cee4:	83a3      	strh	r3, [r4, #28]
    cee6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ceea:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    ceee:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
    cef2:	4a10      	ldr	r2, [pc, #64]	; (cf34 <_GLOBAL__sub_I_usb+0x70>)
    cef4:	4910      	ldr	r1, [pc, #64]	; (cf38 <_GLOBAL__sub_I_usb+0x74>)
    cef6:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
    cefa:	e9c4 333e 	strd	r3, r3, [r4, #248]	; 0xf8
    cefe:	e9c4 3340 	strd	r3, r3, [r4, #256]	; 0x100
    cf02:	e9c4 3342 	strd	r3, r3, [r4, #264]	; 0x108
    cf06:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
    cf0a:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	: _M_start(), _M_finish(), _M_end_of_storage()
    cf0e:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
    cf12:	e9c4 334b 	strd	r3, r3, [r4, #300]	; 0x12c
    cf16:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
    cf1a:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
    cf1e:	e9c4 3351 	strd	r3, r3, [r4, #324]	; 0x144
}
    cf22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UUSB usb;
    cf26:	f00c b877 	b.w	19018 <__aeabi_atexit>
    cf2a:	bf00      	nop
    cf2c:	2000fac4 	.word	0x2000fac4
    cf30:	2000800c 	.word	0x2000800c
    cf34:	20008f80 	.word	0x20008f80
    cf38:	0000c4ad 	.word	0x0000c4ad

0000cf3c <UUsbHost::sendHelp()>:
  }
}


void UUsbHost::sendHelp()
{
    cf3c:	b510      	push	{r4, lr}
#if defined REGBOT_HW41 && defined useUSBhost
  usb.send("# USB host -------\r\n");
    cf3e:	4c09      	ldr	r4, [pc, #36]	; (cf64 <UUsbHost::sendHelp()+0x28>)
    cf40:	4909      	ldr	r1, [pc, #36]	; (cf68 <UUsbHost::sendHelp()+0x2c>)
    cf42:	4620      	mov	r0, r4
    cf44:	f7ff fb62 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tusbhost A \tSet USB host as active or not A=1 is active\r\n");
    cf48:	4908      	ldr	r1, [pc, #32]	; (cf6c <UUsbHost::sendHelp()+0x30>)
    cf4a:	4620      	mov	r0, r4
    cf4c:	f7ff fb5e 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tjoyn A \tNotify on updates\r\n");
    cf50:	4907      	ldr	r1, [pc, #28]	; (cf70 <UUsbHost::sendHelp()+0x34>)
    cf52:	4620      	mov	r0, r4
    cf54:	f7ff fb5a 	bl	c60c <UUSB::send(char const*)>
  usb.send("# -- \tjoyc A \tChanges only\r\n");
    cf58:	4620      	mov	r0, r4
    cf5a:	4906      	ldr	r1, [pc, #24]	; (cf74 <UUsbHost::sendHelp()+0x38>)
#endif
}
    cf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb.send("# -- \tjoyc A \tChanges only\r\n");
    cf60:	f7ff bb54 	b.w	c60c <UUSB::send(char const*)>
    cf64:	2000fac4 	.word	0x2000fac4
    cf68:	20007cf4 	.word	0x20007cf4
    cf6c:	20007d0c 	.word	0x20007d0c
    cf70:	20007d4c 	.word	0x20007d4c
    cf74:	20007d70 	.word	0x20007d70

0000cf78 <UUsbHost::~UUsbHost()>:
#endif
#include "usubss.h"



class UUsbHost : public USubss
    cf78:	b510      	push	{r4, lr}
    cf7a:	4b05      	ldr	r3, [pc, #20]	; (cf90 <UUsbHost::~UUsbHost()+0x18>)
    cf7c:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    cf7e:	6840      	ldr	r0, [r0, #4]
    cf80:	6023      	str	r3, [r4, #0]
	if (__p)
    cf82:	b118      	cbz	r0, cf8c <UUsbHost::~UUsbHost()+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    cf84:	68e1      	ldr	r1, [r4, #12]
	::operator delete(__p
    cf86:	1a09      	subs	r1, r1, r0
    cf88:	f009 fc28 	bl	167dc <operator delete(void*, unsigned int)>
    cf8c:	4620      	mov	r0, r4
    cf8e:	bd10      	pop	{r4, pc}
    cf90:	200080a0 	.word	0x200080a0
    cf94:	00000000 	.word	0x00000000

0000cf98 <UUsbHost::UUsbHost()>:
    cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf9c:	4681      	mov	r9, r0
    cf9e:	2600      	movs	r6, #0

//--------------------------------------------------------------------------

class JoystickController : public USBDriver, public USBHIDInput, public BTHIDInput {
public:
    JoystickController(USBHost &host) { init(); }
    cfa0:	4ded      	ldr	r5, [pc, #948]	; (d358 <UUsbHost::UUsbHost()+0x3c0>)
    cfa2:	f44f 7880 	mov.w	r8, #256	; 0x100
    cfa6:	f04f 0401 	mov.w	r4, #1
    cfaa:	f509 6b32 	add.w	fp, r9, #2848	; 0xb20
    cfae:	f509 5ad7 	add.w	sl, r9, #6880	; 0x1ae0
    cfb2:	f509 57ad 	add.w	r7, r9, #5536	; 0x15a0
    cfb6:	ed2d 8b04 	vpush	{d8-d9}
    cfba:	b085      	sub	sp, #20
    cfbc:	f7ff f934 	bl	c228 <USubss::USubss()>
    cfc0:	f109 0320 	add.w	r3, r9, #32
    cfc4:	49e5      	ldr	r1, [pc, #916]	; (d35c <UUsbHost::UUsbHost()+0x3c4>)
    USBHub(USBHost &host) : debouncetimer(this), resettimer(this) { init(); }
    cfc6:	4ae6      	ldr	r2, [pc, #920]	; (d360 <UUsbHost::UUsbHost()+0x3c8>)
    cfc8:	4618      	mov	r0, r3
    cfca:	f8c9 1000 	str.w	r1, [r9]
    cfce:	f8c9 2020 	str.w	r2, [r9, #32]
    USBDriverTimer(USBDriver *d) : driver(d) { }
    cfd2:	f8c9 3344 	str.w	r3, [r9, #836]	; 0x344
    cfd6:	f8c9 3360 	str.w	r3, [r9, #864]	; 0x360
    cfda:	f889 6014 	strb.w	r6, [r9, #20]
    USBDriver() : next(NULL), device(NULL) {}
    cfde:	f8c9 6024 	str.w	r6, [r9, #36]	; 0x24
    cfe2:	f8c9 6028 	str.w	r6, [r9, #40]	; 0x28
    USBDriverTimer(USBDriver *d) : driver(d) { }
    cfe6:	9303      	str	r3, [sp, #12]
    USBHub(USBHost &host) : debouncetimer(this), resettimer(this) { init(); }
    cfe8:	f005 f954 	bl	12294 <USBHub::init()>
    USBHIDParser(USBHost &host) : hidTimer(this) { init(); }
    cfec:	4add      	ldr	r2, [pc, #884]	; (d364 <UUsbHost::UUsbHost()+0x3cc>)
    cfee:	f509 7378 	add.w	r3, r9, #992	; 0x3e0
    cff2:	f8c9 6738 	str.w	r6, [r9, #1848]	; 0x738
    cff6:	f8c9 23e0 	str.w	r2, [r9, #992]	; 0x3e0
    cffa:	f44f 7240 	mov.w	r2, #768	; 0x300
    cffe:	4618      	mov	r0, r3
    USBDriverTimer(USBDriver *d) : driver(d) { }
    d000:	f8c9 3768 	str.w	r3, [r9, #1896]	; 0x768
    USBHIDParser(USBHost &host) : hidTimer(this) { init(); }
    d004:	f8a9 2758 	strh.w	r2, [r9, #1880]	; 0x758
    d008:	f609 3218 	addw	r2, r9, #2840	; 0xb18
    d00c:	f8c9 673c 	str.w	r6, [r9, #1852]	; 0x73c
    d010:	f8c9 2b18 	str.w	r2, [r9, #2840]	; 0xb18
    d014:	f44f 7268 	mov.w	r2, #928	; 0x3a0
    d018:	f8c9 6740 	str.w	r6, [r9, #1856]	; 0x740
    d01c:	f8a9 2b1c 	strh.w	r2, [r9, #2844]	; 0xb1c
    d020:	f8c9 6744 	str.w	r6, [r9, #1860]	; 0x744
    d024:	f8c9 6748 	str.w	r6, [r9, #1864]	; 0x748
    d028:	f8c9 674c 	str.w	r6, [r9, #1868]	; 0x74c
    d02c:	f8c9 6750 	str.w	r6, [r9, #1872]	; 0x750
    d030:	f8c9 6754 	str.w	r6, [r9, #1876]	; 0x754
    d034:	f889 675a 	strb.w	r6, [r9, #1882]	; 0x75a
    d038:	f889 6b1e 	strb.w	r6, [r9, #2846]	; 0xb1e
    d03c:	9301      	str	r3, [sp, #4]
    USBDriver() : next(NULL), device(NULL) {}
    d03e:	e9c9 66f9 	strd	r6, r6, [r9, #996]	; 0x3e4
    USBHIDParser(USBHost &host) : hidTimer(this) { init(); }
    d042:	f004 fad7 	bl	115f4 <USBHIDParser::init()>
    JoystickController(USBHost &host) { init(); }
    d046:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    d04a:	f105 0298 	add.w	r2, r5, #152	; 0x98
    d04e:	f240 1101 	movw	r1, #257	; 0x101
    d052:	f8c9 3b2c 	str.w	r3, [r9, #2860]	; 0xb2c
    d056:	f609 3068 	addw	r0, r9, #2920	; 0xb68
    d05a:	f8c9 5b20 	str.w	r5, [r9, #2848]	; 0xb20
    d05e:	f8c9 2b38 	str.w	r2, [r9, #2872]	; 0xb38
    d062:	4642      	mov	r2, r8
    d064:	f8a9 1b58 	strh.w	r1, [r9, #2904]	; 0xb58
    d068:	4631      	mov	r1, r6
    d06a:	f889 4b5a 	strb.w	r4, [r9, #2906]	; 0xb5a
    USBDriver() : next(NULL), device(NULL) {}
    d06e:	f509 5480 	add.w	r4, r9, #4096	; 0x1000
    d072:	f8c9 6b24 	str.w	r6, [r9, #2852]	; 0xb24
    d076:	f8c9 6b28 	str.w	r6, [r9, #2856]	; 0xb28
class USBHIDInput {
    d07a:	f8c9 6b30 	str.w	r6, [r9, #2864]	; 0xb30
    d07e:	f8c9 6b34 	str.w	r6, [r9, #2868]	; 0xb34
class BTHIDInput {
    d082:	f8c9 6b3c 	str.w	r6, [r9, #2876]	; 0xb3c
    d086:	f889 6b40 	strb.w	r6, [r9, #2880]	; 0xb40
    d08a:	f8c9 6b44 	str.w	r6, [r9, #2884]	; 0xb44
    d08e:	f8c9 6b48 	str.w	r6, [r9, #2888]	; 0xb48
    JoystickController(USBHost &host) { init(); }
    d092:	f889 6b4c 	strb.w	r6, [r9, #2892]	; 0xb4c
    d096:	f8c9 6b50 	str.w	r6, [r9, #2896]	; 0xb50
    d09a:	f8c9 6b54 	str.w	r6, [r9, #2900]	; 0xb54
    d09e:	f8c9 6b5c 	str.w	r6, [r9, #2908]	; 0xb5c
    d0a2:	f8a9 6b60 	strh.w	r6, [r9, #2912]	; 0xb60
    d0a6:	f889 6b62 	strb.w	r6, [r9, #2914]	; 0xb62
    d0aa:	f8c9 6b64 	str.w	r6, [r9, #2916]	; 0xb64
    d0ae:	f00e fd53 	bl	1bb58 <memset>
    d0b2:	f509 5183 	add.w	r1, r9, #4192	; 0x1060
    d0b6:	f8cd a008 	str.w	sl, [sp, #8]
    d0ba:	f509 5a00 	add.w	sl, r9, #8192	; 0x2000
    d0be:	9100      	str	r1, [sp, #0]
    d0c0:	ed9f 8ba1 	vldr	d8, [pc, #644]	; d348 <UUsbHost::UUsbHost()+0x3b0>
    d0c4:	ed9f 9ba2 	vldr	d9, [pc, #648]	; d350 <UUsbHost::UUsbHost()+0x3b8>
    d0c8:	ed8b 8b52 	vstr	d8, [fp, #328]	; 0x148
    d0cc:	ed8b 8b54 	vstr	d8, [fp, #336]	; 0x150
    d0d0:	ed8b 9b56 	vstr	d9, [fp, #344]	; 0x158
    d0d4:	f8c9 6c80 	str.w	r6, [r9, #3200]	; 0xc80
    d0d8:	f8c9 6c84 	str.w	r6, [r9, #3204]	; 0xc84
    d0dc:	f8c9 6c88 	str.w	r6, [r9, #3208]	; 0xc88
    d0e0:	f8c9 6c8c 	str.w	r6, [r9, #3212]	; 0xc8c
class elapsedMicros
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
    d0e4:	f008 ff60 	bl	15fa8 <micros>
    d0e8:	f889 6c94 	strb.w	r6, [r9, #3220]	; 0xc94
    d0ec:	f8c9 0c90 	str.w	r0, [r9, #3216]	; 0xc90
    d0f0:	4658      	mov	r0, fp
    d0f2:	f889 6fb5 	strb.w	r6, [r9, #4021]	; 0xfb5
    d0f6:	f8a9 6fb6 	strh.w	r6, [r9, #4022]	; 0xfb6
    d0fa:	f8a9 6fb8 	strh.w	r6, [r9, #4024]	; 0xfb8
    d0fe:	f005 ff7b 	bl	12ff8 <JoystickController::init()>
    d102:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    d106:	f240 1c01 	movw	ip, #257	; 0x101
    d10a:	f04f 0e01 	mov.w	lr, #1
    d10e:	f105 0298 	add.w	r2, r5, #152	; 0x98
    d112:	4631      	mov	r1, r6
    d114:	66e3      	str	r3, [r4, #108]	; 0x6c
    d116:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    d11a:	f8a4 c098 	strh.w	ip, [r4, #152]	; 0x98
    d11e:	f884 e09a 	strb.w	lr, [r4, #154]	; 0x9a
class BTHIDInput {
    d122:	67e6      	str	r6, [r4, #124]	; 0x7c
    d124:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    JoystickController(USBHost &host) { init(); }
    d128:	6625      	str	r5, [r4, #96]	; 0x60
    d12a:	67a2      	str	r2, [r4, #120]	; 0x78
    d12c:	4642      	mov	r2, r8
    d12e:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
    d132:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
    d136:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0
    d13a:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    d13e:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    USBDriver() : next(NULL), device(NULL) {}
    d142:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
class USBHIDInput {
    d146:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
class BTHIDInput {
    d14a:	e9c4 6621 	strd	r6, r6, [r4, #132]	; 0x84
    JoystickController(USBHost &host) { init(); }
    d14e:	e9c4 6624 	strd	r6, r6, [r4, #144]	; 0x90
    d152:	f00e fd01 	bl	1bb58 <memset>
    d156:	ed84 8b6a 	vstr	d8, [r4, #424]	; 0x1a8
    d15a:	ed84 8b6c 	vstr	d8, [r4, #432]	; 0x1b0
    d15e:	ed84 9b6e 	vstr	d9, [r4, #440]	; 0x1b8
    d162:	e9c4 6670 	strd	r6, r6, [r4, #448]	; 0x1c0
    d166:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
    d16a:	f008 ff1d 	bl	15fa8 <micros>
    d16e:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
    d172:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
    d176:	f884 64f5 	strb.w	r6, [r4, #1269]	; 0x4f5
    d17a:	9800      	ldr	r0, [sp, #0]
    d17c:	f8a4 64f6 	strh.w	r6, [r4, #1270]	; 0x4f6
    d180:	f8a4 64f8 	strh.w	r6, [r4, #1272]	; 0x4f8
    d184:	f005 ff38 	bl	12ff8 <JoystickController::init()>
    d188:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    d18c:	f240 1c01 	movw	ip, #257	; 0x101
    d190:	f04f 0e01 	mov.w	lr, #1
    d194:	f105 0298 	add.w	r2, r5, #152	; 0x98
    d198:	4631      	mov	r1, r6
    d19a:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
    d19e:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
    d1a2:	f8a4 c5d8 	strh.w	ip, [r4, #1496]	; 0x5d8
    d1a6:	f884 e5da 	strb.w	lr, [r4, #1498]	; 0x5da
    USBDriver() : next(NULL), device(NULL) {}
    d1aa:	f8c4 65a4 	str.w	r6, [r4, #1444]	; 0x5a4
    d1ae:	f8c4 65a8 	str.w	r6, [r4, #1448]	; 0x5a8
class USBHIDInput {
    d1b2:	f8c4 65b0 	str.w	r6, [r4, #1456]	; 0x5b0
    d1b6:	f8c4 65b4 	str.w	r6, [r4, #1460]	; 0x5b4
class BTHIDInput {
    d1ba:	f8c4 65bc 	str.w	r6, [r4, #1468]	; 0x5bc
    d1be:	f884 65c0 	strb.w	r6, [r4, #1472]	; 0x5c0
    d1c2:	f8c4 65c4 	str.w	r6, [r4, #1476]	; 0x5c4
    d1c6:	f8c4 65c8 	str.w	r6, [r4, #1480]	; 0x5c8
    JoystickController(USBHost &host) { init(); }
    d1ca:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
    d1ce:	f8c4 25b8 	str.w	r2, [r4, #1464]	; 0x5b8
    d1d2:	4642      	mov	r2, r8
    d1d4:	f884 65cc 	strb.w	r6, [r4, #1484]	; 0x5cc
    d1d8:	f8c4 65d0 	str.w	r6, [r4, #1488]	; 0x5d0
    d1dc:	f8c4 65d4 	str.w	r6, [r4, #1492]	; 0x5d4
    d1e0:	f8c4 65dc 	str.w	r6, [r4, #1500]	; 0x5dc
    d1e4:	f8a4 65e0 	strh.w	r6, [r4, #1504]	; 0x5e0
    d1e8:	f884 65e2 	strb.w	r6, [r4, #1506]	; 0x5e2
    d1ec:	f8c4 65e4 	str.w	r6, [r4, #1508]	; 0x5e4
    d1f0:	f00e fcb2 	bl	1bb58 <memset>
    d1f4:	ed87 8b52 	vstr	d8, [r7, #328]	; 0x148
    d1f8:	ed87 8b54 	vstr	d8, [r7, #336]	; 0x150
    d1fc:	ed87 9b56 	vstr	d9, [r7, #344]	; 0x158
    d200:	f8c4 6700 	str.w	r6, [r4, #1792]	; 0x700
    d204:	f8c4 6704 	str.w	r6, [r4, #1796]	; 0x704
    d208:	f8c4 6708 	str.w	r6, [r4, #1800]	; 0x708
    d20c:	f8c4 670c 	str.w	r6, [r4, #1804]	; 0x70c
    d210:	f008 feca 	bl	15fa8 <micros>
    d214:	f884 6714 	strb.w	r6, [r4, #1812]	; 0x714
    d218:	f8c4 0710 	str.w	r0, [r4, #1808]	; 0x710
    d21c:	4638      	mov	r0, r7
    d21e:	f884 6a35 	strb.w	r6, [r4, #2613]	; 0xa35
    d222:	f8a4 6a36 	strh.w	r6, [r4, #2614]	; 0xa36
    d226:	f8a4 6a38 	strh.w	r6, [r4, #2616]	; 0xa38
    d22a:	f005 fee5 	bl	12ff8 <JoystickController::init()>
    d22e:	f04f 0e01 	mov.w	lr, #1
    d232:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    d236:	f240 1c01 	movw	ip, #257	; 0x101
    d23a:	f105 0298 	add.w	r2, r5, #152	; 0x98
    d23e:	f884 eb1a 	strb.w	lr, [r4, #2842]	; 0xb1a
    d242:	4631      	mov	r1, r6
    d244:	f8c4 3aec 	str.w	r3, [r4, #2796]	; 0xaec
    d248:	f8a4 cb18 	strh.w	ip, [r4, #2840]	; 0xb18
    d24c:	f604 3028 	addw	r0, r4, #2856	; 0xb28
    d250:	f8c4 5ae0 	str.w	r5, [r4, #2784]	; 0xae0
    d254:	f8c4 2af8 	str.w	r2, [r4, #2808]	; 0xaf8
    d258:	4642      	mov	r2, r8
    USBDriver() : next(NULL), device(NULL) {}
    d25a:	f8c4 6ae4 	str.w	r6, [r4, #2788]	; 0xae4
    d25e:	f8c4 6ae8 	str.w	r6, [r4, #2792]	; 0xae8
class USBHIDInput {
    d262:	f8c4 6af0 	str.w	r6, [r4, #2800]	; 0xaf0
    d266:	f8c4 6af4 	str.w	r6, [r4, #2804]	; 0xaf4
class BTHIDInput {
    d26a:	f8c4 6afc 	str.w	r6, [r4, #2812]	; 0xafc
    d26e:	f884 6b00 	strb.w	r6, [r4, #2816]	; 0xb00
    d272:	f8c4 6b04 	str.w	r6, [r4, #2820]	; 0xb04
    d276:	f8c4 6b08 	str.w	r6, [r4, #2824]	; 0xb08
    JoystickController(USBHost &host) { init(); }
    d27a:	f884 6b0c 	strb.w	r6, [r4, #2828]	; 0xb0c
    d27e:	f8c4 6b10 	str.w	r6, [r4, #2832]	; 0xb10
    d282:	f8c4 6b14 	str.w	r6, [r4, #2836]	; 0xb14
    d286:	f8c4 6b1c 	str.w	r6, [r4, #2844]	; 0xb1c
    d28a:	f8a4 6b20 	strh.w	r6, [r4, #2848]	; 0xb20
    d28e:	f884 6b22 	strb.w	r6, [r4, #2850]	; 0xb22
    d292:	f8c4 6b24 	str.w	r6, [r4, #2852]	; 0xb24
    d296:	f00e fc5f 	bl	1bb58 <memset>
    d29a:	9d02      	ldr	r5, [sp, #8]
    d29c:	ed85 9b56 	vstr	d9, [r5, #344]	; 0x158
    d2a0:	ed85 8b52 	vstr	d8, [r5, #328]	; 0x148
    d2a4:	ed85 8b54 	vstr	d8, [r5, #336]	; 0x150
    d2a8:	f8c4 6c40 	str.w	r6, [r4, #3136]	; 0xc40
    d2ac:	f8c4 6c44 	str.w	r6, [r4, #3140]	; 0xc44
    d2b0:	f8c4 6c48 	str.w	r6, [r4, #3144]	; 0xc48
    d2b4:	f8c4 6c4c 	str.w	r6, [r4, #3148]	; 0xc4c
    d2b8:	f008 fe76 	bl	15fa8 <micros>
    d2bc:	f884 6c54 	strb.w	r6, [r4, #3156]	; 0xc54
    d2c0:	f8c4 0c50 	str.w	r0, [r4, #3152]	; 0xc50
    d2c4:	4628      	mov	r0, r5
    d2c6:	f884 6f75 	strb.w	r6, [r4, #3957]	; 0xf75
    d2ca:	f8a4 6f76 	strh.w	r6, [r4, #3958]	; 0xf76
    d2ce:	f8a4 6f78 	strh.w	r6, [r4, #3960]	; 0xf78
    d2d2:	f005 fe91 	bl	12ff8 <JoystickController::init()>
    d2d6:	9b03      	ldr	r3, [sp, #12]
    d2d8:	9900      	ldr	r1, [sp, #0]
    d2da:	f609 302c 	addw	r0, r9, #2860	; 0xb2c
    d2de:	4c22      	ldr	r4, [pc, #136]	; (d368 <UUsbHost::UUsbHost()+0x3d0>)
    d2e0:	f50a 7c9c 	add.w	ip, sl, #312	; 0x138
    d2e4:	f8ca 5130 	str.w	r5, [sl, #304]	; 0x130
    d2e8:	f242 1590 	movw	r5, #8592	; 0x2190
    d2ec:	e9ca 3b48 	strd	r3, fp, [sl, #288]	; 0x120
    d2f0:	9b01      	ldr	r3, [sp, #4]
    d2f2:	f641 2bec 	movw	fp, #6892	; 0x1aec
    d2f6:	9001      	str	r0, [sp, #4]
    d2f8:	444d      	add	r5, r9
    d2fa:	f8ca 3134 	str.w	r3, [sl, #308]	; 0x134
    d2fe:	f241 036c 	movw	r3, #4204	; 0x106c
    d302:	44cb      	add	fp, r9
    d304:	444b      	add	r3, r9
    d306:	e9ca 174a 	strd	r1, r7, [sl, #296]	; 0x128
    d30a:	9302      	str	r3, [sp, #8]
    d30c:	f50a 71a8 	add.w	r1, sl, #336	; 0x150
    d310:	f509 5306 	add.w	r3, r9, #8576	; 0x2180
    d314:	f241 57ac 	movw	r7, #5548	; 0x15ac
    d318:	9100      	str	r1, [sp, #0]
    d31a:	9303      	str	r3, [sp, #12]
    d31c:	444f      	add	r7, r9
    d31e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    d320:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    d324:	e894 0003 	ldmia.w	r4, {r0, r1}
    d328:	9a02      	ldr	r2, [sp, #8]
    d32a:	e88c 0003 	stmia.w	ip, {r0, r1}
    d32e:	9900      	ldr	r1, [sp, #0]
    d330:	9801      	ldr	r0, [sp, #4]
    d332:	f8ca 6150 	str.w	r6, [sl, #336]	; 0x150
    d336:	808e      	strh	r6, [r1, #4]
    d338:	4631      	mov	r1, r6
    d33a:	f8ca 0158 	str.w	r0, [sl, #344]	; 0x158
    d33e:	f50a 70d2 	add.w	r0, sl, #420	; 0x1a4
    d342:	e9ca 2757 	strd	r2, r7, [sl, #348]	; 0x15c
    d346:	e011      	b.n	d36c <UUsbHost::UUsbHost()+0x3d4>
	...
    d350:	000003ff 	.word	0x000003ff
    d354:	00000000 	.word	0x00000000
    d358:	20007f10 	.word	0x20007f10
    d35c:	20008164 	.word	0x20008164
    d360:	20008070 	.word	0x20008070
    d364:	20007e74 	.word	0x20007e74
    d368:	2000210c 	.word	0x2000210c
    d36c:	4a1e      	ldr	r2, [pc, #120]	; (d3e8 <UUsbHost::UUsbHost()+0x450>)
    d36e:	9b03      	ldr	r3, [sp, #12]
    d370:	f8ca 2168 	str.w	r2, [sl, #360]	; 0x168
    d374:	4a1d      	ldr	r2, [pc, #116]	; (d3ec <UUsbHost::UUsbHost()+0x454>)
    d376:	f8ca b164 	str.w	fp, [sl, #356]	; 0x164
    d37a:	f8ca 216c 	str.w	r2, [sl, #364]	; 0x16c
    d37e:	4a1c      	ldr	r2, [pc, #112]	; (d3f0 <UUsbHost::UUsbHost()+0x458>)
    d380:	ed9f 7b17 	vldr	d7, [pc, #92]	; d3e0 <UUsbHost::UUsbHost()+0x448>
    d384:	f8ca 2170 	str.w	r2, [sl, #368]	; 0x170
    d388:	4a1a      	ldr	r2, [pc, #104]	; (d3f4 <UUsbHost::UUsbHost()+0x45c>)
    d38a:	e9ca 665e 	strd	r6, r6, [sl, #376]	; 0x178
    d38e:	f8ca 2174 	str.w	r2, [sl, #372]	; 0x174
    d392:	4642      	mov	r2, r8
    d394:	601e      	str	r6, [r3, #0]
    d396:	809e      	strh	r6, [r3, #4]
    d398:	f88a 6186 	strb.w	r6, [sl, #390]	; 0x186
    d39c:	f8ca 6187 	str.w	r6, [sl, #391]	; 0x187
    d3a0:	f8ca 618b 	str.w	r6, [sl, #395]	; 0x18b
    d3a4:	ed85 7b00 	vstr	d7, [r5]
    d3a8:	e9ca 6666 	strd	r6, r6, [sl, #408]	; 0x198
    d3ac:	f8ca 61a0 	str.w	r6, [sl, #416]	; 0x1a0
    d3b0:	f00e fbd2 	bl	1bb58 <memset>
    d3b4:	4642      	mov	r2, r8
    d3b6:	4631      	mov	r1, r6
    d3b8:	f50a 7029 	add.w	r0, sl, #676	; 0x2a4
    d3bc:	f00e fbcc 	bl	1bb58 <memset>
    d3c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    d3c4:	230b      	movs	r3, #11
    d3c6:	4648      	mov	r0, r9
    d3c8:	f8ca 63ac 	str.w	r6, [sl, #940]	; 0x3ac
    d3cc:	f8ca 23a4 	str.w	r2, [sl, #932]	; 0x3a4
    d3d0:	f8ca 33a8 	str.w	r3, [sl, #936]	; 0x3a8
    d3d4:	b005      	add	sp, #20
    d3d6:	ecbd 8b04 	vpop	{d8-d9}
    d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3de:	bf00      	nop
    d3e0:	ffffffff 	.word	0xffffffff
    d3e4:	ffffffff 	.word	0xffffffff
    d3e8:	20007d90 	.word	0x20007d90
    d3ec:	20007da0 	.word	0x20007da0
    d3f0:	20007db0 	.word	0x20007db0
    d3f4:	20007dc0 	.word	0x20007dc0

0000d3f8 <UUsbHost::setup()>:
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
  active = true;
    d3fa:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    d3fe:	2601      	movs	r6, #1
{
    d400:	4604      	mov	r4, r0
  active = true;
    d402:	f885 63a4 	strb.w	r6, [r5, #932]	; 0x3a4
  myusb.begin();
    d406:	f002 fce1 	bl	fdcc <USBHost::begin()>
  addPublistItem("joyaxis", "Get current joystick axis values");
    d40a:	4a0b      	ldr	r2, [pc, #44]	; (d438 <UUsbHost::setup()+0x40>)
    d40c:	490b      	ldr	r1, [pc, #44]	; (d43c <UUsbHost::setup()+0x44>)
    d40e:	4620      	mov	r0, r4
    d410:	f7ff f82e 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("joybut",  "Get current joystick button values");
    d414:	4a0a      	ldr	r2, [pc, #40]	; (d440 <UUsbHost::setup()+0x48>)
    d416:	490b      	ldr	r1, [pc, #44]	; (d444 <UUsbHost::setup()+0x4c>)
    d418:	4620      	mov	r0, r4
    d41a:	f7ff f829 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  addPublistItem("joy",     "Get joystick message");
    d41e:	4a0a      	ldr	r2, [pc, #40]	; (d448 <UUsbHost::setup()+0x50>)
    d420:	490a      	ldr	r1, [pc, #40]	; (d44c <UUsbHost::setup()+0x54>)
    d422:	4620      	mov	r0, r4
    d424:	f7ff f824 	bl	c470 <USubss::addPublistItem(char const*, char const*)>
  usb.addSubscriptionService(this);
    d428:	4621      	mov	r1, r4
    d42a:	4809      	ldr	r0, [pc, #36]	; (d450 <UUsbHost::setup()+0x58>)
    d42c:	f7ff fd32 	bl	ce94 <UUSB::addSubscriptionService(USubss*)>
  initialized = true;
    d430:	f885 63a5 	strb.w	r6, [r5, #933]	; 0x3a5
}
    d434:	bd70      	pop	{r4, r5, r6, pc}
    d436:	bf00      	nop
    d438:	20007c04 	.word	0x20007c04
    d43c:	20007c28 	.word	0x20007c28
    d440:	20007c30 	.word	0x20007c30
    d444:	20007c54 	.word	0x20007c54
    d448:	20007c5c 	.word	0x20007c5c
    d44c:	20007c74 	.word	0x20007c74
    d450:	2000fac4 	.word	0x2000fac4
    d454:	00000000 	.word	0x00000000

0000d458 <UUsbHost::tick()>:
{
    d458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tickCnt++;
    d45c:	6983      	ldr	r3, [r0, #24]
  if (active and tickCnt % 10 == 0)
    d45e:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
{
    d462:	b0a3      	sub	sp, #140	; 0x8c
  tickCnt++;
    d464:	3301      	adds	r3, #1
  if (active and tickCnt % 10 == 0)
    d466:	f897 23a4 	ldrb.w	r2, [r7, #932]	; 0x3a4
  tickCnt++;
    d46a:	6183      	str	r3, [r0, #24]
  if (active and tickCnt % 10 == 0)
    d46c:	2a00      	cmp	r2, #0
    d46e:	f000 80ea 	beq.w	d646 <UUsbHost::tick()+0x1ee>
    d472:	4ac9      	ldr	r2, [pc, #804]	; (d798 <UUsbHost::tick()+0x340>)
    d474:	17de      	asrs	r6, r3, #31
    d476:	fb82 1203 	smull	r1, r2, r2, r3
    d47a:	ebc6 06a2 	rsb	r6, r6, r2, asr #2
    d47e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    d482:	ebb3 0646 	subs.w	r6, r3, r6, lsl #1
    d486:	f040 80de 	bne.w	d646 <UUsbHost::tick()+0x1ee>
    if (not initialized)
    d48a:	f897 33a5 	ldrb.w	r3, [r7, #933]	; 0x3a5
    d48e:	2b00      	cmp	r3, #0
    d490:	f000 80dc 	beq.w	d64c <UUsbHost::tick()+0x1f4>
    myusb.Task();
    d494:	4605      	mov	r5, r0
    d496:	f242 1a87 	movw	sl, #8583	; 0x2187
    d49a:	f500 6932 	add.w	r9, r0, #2848	; 0xb20
    for (int joystick_index = 0; joystick_index < COUNT_JOYSTICKS; joystick_index++) {
    d49e:	46b0      	mov	r8, r6
    myusb.Task();
    d4a0:	f003 fc7a 	bl	10d98 <USBHost::Task()>
    for (int joystick_index = 0; joystick_index < COUNT_JOYSTICKS; joystick_index++) {
    d4a4:	44aa      	add	sl, r5
    int isOK = -1;
    d4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4aa:	f605 4464 	addw	r4, r5, #3172	; 0xc64
    const uint8_t *manufacturer();
    const uint8_t *product();
    const uint8_t *serialNumber();
    operator bool() { return (((device != nullptr) || (mydevice != nullptr || (btdevice != nullptr))) && connected_); } // override as in both USBDriver and in USBHIDInput

    bool    available() { return joystickEvent; }
    d4ae:	f44f 6ba8 	mov.w	fp, #1344	; 0x540
    d4b2:	9307      	str	r3, [sp, #28]
    d4b4:	fb0b 5308 	mla	r3, fp, r8, r5
    d4b8:	f893 3b62 	ldrb.w	r3, [r3, #2914]	; 0xb62
      if (joysticks[joystick_index].available()) 
    d4bc:	2b00      	cmp	r3, #0
    d4be:	f040 80e7 	bne.w	d690 <UUsbHost::tick()+0x238>
    for (int joystick_index = 0; joystick_index < COUNT_JOYSTICKS; joystick_index++) {
    d4c2:	f108 0801 	add.w	r8, r8, #1
    d4c6:	f509 69a8 	add.w	r9, r9, #1344	; 0x540
    d4ca:	f10a 0a01 	add.w	sl, sl, #1
    d4ce:	f504 64a8 	add.w	r4, r4, #1344	; 0x540
    d4d2:	f1b8 0f04 	cmp.w	r8, #4
    d4d6:	d1ed      	bne.n	d4b4 <UUsbHost::tick()+0x5c>
    if (isOK)
    d4d8:	9b07      	ldr	r3, [sp, #28]
    d4da:	2b00      	cmp	r3, #0
    d4dc:	f000 808a 	beq.w	d5f4 <UUsbHost::tick()+0x19c>
      if (buttons & (1 << 8) and not manOverride)
    d4e0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    d4e4:	05d9      	lsls	r1, r3, #23
    d4e6:	f140 80c6 	bpl.w	d676 <UUsbHost::tick()+0x21e>
    d4ea:	7d2a      	ldrb	r2, [r5, #20]
    d4ec:	2a00      	cmp	r2, #0
    d4ee:	f000 80b2 	beq.w	d656 <UUsbHost::tick()+0x1fe>
      if (buttons & (1 << 9) and manOverride)
    d4f2:	059a      	lsls	r2, r3, #22
    d4f4:	f140 8192 	bpl.w	d81c <UUsbHost::tick()+0x3c4>
        manOverride = false;
    d4f8:	2400      	movs	r4, #0
        usb.send("# gamepad back to auto\n");
    d4fa:	49a8      	ldr	r1, [pc, #672]	; (d79c <UUsbHost::tick()+0x344>)
    d4fc:	48a8      	ldr	r0, [pc, #672]	; (d7a0 <UUsbHost::tick()+0x348>)
    d4fe:	f7ff f885 	bl	c60c <UUSB::send(char const*)>
        motor.motorSetEnable(autoMotorEnabled, autoMotorEnabled);
    d502:	f8df 82a4 	ldr.w	r8, [pc, #676]	; d7a8 <UUsbHost::tick()+0x350>
        manOverride = false;
    d506:	752c      	strb	r4, [r5, #20]
        motor.motorSetEnable(autoMotorEnabled, autoMotorEnabled);
    d508:	f897 23ab 	ldrb.w	r2, [r7, #939]	; 0x3ab
    d50c:	4640      	mov	r0, r8
    d50e:	4611      	mov	r1, r2
    d510:	f7fb f95c 	bl	87cc <UMotor::motorSetEnable(bool, bool)>
        motor.motorVoltage[0] = 0;
    d514:	2300      	movs	r3, #0
        servo.setServo(1, 0, 0, 0);
    d516:	9400      	str	r4, [sp, #0]
    d518:	4622      	mov	r2, r4
        motor.motorVoltage[0] = 0;
    d51a:	f8c8 3018 	str.w	r3, [r8, #24]
        servo.setServo(1, 0, 0, 0);
    d51e:	2101      	movs	r1, #1
        motor.motorVoltage[1] = 0;
    d520:	f8c8 301c 	str.w	r3, [r8, #28]
        servo.setServo(1, 0, 0, 0);
    d524:	4623      	mov	r3, r4
    d526:	489f      	ldr	r0, [pc, #636]	; (d7a4 <UUsbHost::tick()+0x34c>)
    d528:	f7fe fb70 	bl	bc0c <UServo::setServo(signed char, short, bool, signed char)>
      if (buttons & (1 << 5)) // RB
    d52c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
      if (manOverride)
    d530:	7d2c      	ldrb	r4, [r5, #20]
      if (buttons & (1 << 5)) // RB
    d532:	0698      	lsls	r0, r3, #26
    d534:	f100 8166 	bmi.w	d804 <UUsbHost::tick()+0x3ac>
      if (manOverride)
    d538:	2c00      	cmp	r4, #0
    d53a:	f000 80a5 	beq.w	d688 <UUsbHost::tick()+0x230>
          lv =  (psAxis[5] - 127) * -0.01;
    d53e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
          hv = (psAxis[2] - 127) * -0.006;
    d542:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
          lv =  (psAxis[5] - 127) * -0.01;
    d546:	ed9f 4b90 	vldr	d4, [pc, #576]	; d788 <UUsbHost::tick()+0x330>
          hv = (psAxis[2] - 127) * -0.006;
    d54a:	ed9f 5b91 	vldr	d5, [pc, #580]	; d790 <UUsbHost::tick()+0x338>
          lv =  (psAxis[5] - 127) * -0.01;
    d54e:	3b7f      	subs	r3, #127	; 0x7f
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d550:	2164      	movs	r1, #100	; 0x64
    d552:	a809      	add	r0, sp, #36	; 0x24
          lv =  (psAxis[5] - 127) * -0.01;
    d554:	ee07 3a10 	vmov	s14, r3
          hv = (psAxis[2] - 127) * -0.006;
    d558:	f1a2 037f 	sub.w	r3, r2, #127	; 0x7f
        motor.motorVoltage[0] = lv - hv;
    d55c:	4a92      	ldr	r2, [pc, #584]	; (d7a8 <UUsbHost::tick()+0x350>)
          hv = (psAxis[2] - 127) * -0.006;
    d55e:	ee06 3a10 	vmov	s12, r3
          lv =  (psAxis[5] - 127) * -0.01;
    d562:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    d566:	4b91      	ldr	r3, [pc, #580]	; (d7ac <UUsbHost::tick()+0x354>)
          hv = (psAxis[2] - 127) * -0.006;
    d568:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
          lv =  (psAxis[5] - 127) * -0.01;
    d56c:	ee27 7b04 	vmul.f64	d7, d7, d4
    d570:	681b      	ldr	r3, [r3, #0]
          hv = (psAxis[2] - 127) * -0.006;
    d572:	ee26 6b05 	vmul.f64	d6, d6, d5
          lv =  (psAxis[5] - 127) * -0.01;
    d576:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
          hv = (psAxis[2] - 127) * -0.006;
    d57a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d57e:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
    d582:	eeb7 4ac6 	vcvt.f64.f32	d4, s12
        motor.motorVoltage[0] = lv - hv;
    d586:	ee77 7a46 	vsub.f32	s15, s14, s12
        motor.motorVoltage[1] = lv + hv;
    d58a:	ee37 7a06 	vadd.f32	s14, s14, s12
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d58e:	ed8d 4b02 	vstr	d4, [sp, #8]
    d592:	ed8d 5b00 	vstr	d5, [sp]
        motor.motorVoltage[0] = lv - hv;
    d596:	edc2 7a06 	vstr	s15, [r2, #24]
        motor.motorVoltage[1] = lv + hv;
    d59a:	ed82 7a07 	vstr	s14, [r2, #28]
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d59e:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
        servof = (psAxis[1] - 127);
    d5a2:	f8d7 61a8 	ldr.w	r6, [r7, #424]	; 0x1a8
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d5a6:	9204      	str	r2, [sp, #16]
    d5a8:	4a81      	ldr	r2, [pc, #516]	; (d7b0 <UUsbHost::tick()+0x358>)
        servof = (psAxis[1] - 127);
    d5aa:	3e7f      	subs	r6, #127	; 0x7f
          snprintf(s, MSL, "# joy::tick time=%lu rc 2 %g %g %d\n", millis(), lv, hv, servopos);
    d5ac:	f00e f902 	bl	1b7b4 <snprintf>
          usb.send(s);
    d5b0:	a909      	add	r1, sp, #36	; 0x24
    d5b2:	487b      	ldr	r0, [pc, #492]	; (d7a0 <UUsbHost::tick()+0x348>)
    d5b4:	f7ff f82a 	bl	c60c <UUSB::send(char const*)>
      if (buttons != buttons_last)
    d5b8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    if (manOverride)
    d5bc:	7d2c      	ldrb	r4, [r5, #20]
      if (buttons != buttons_last)
    d5be:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
    d5c2:	429a      	cmp	r2, r3
    d5c4:	d002      	beq.n	d5cc <UUsbHost::tick()+0x174>
        buttonChanged = true;
    d5c6:	2201      	movs	r2, #1
    d5c8:	f887 23a9 	strb.w	r2, [r7, #937]	; 0x3a9
      buttons_last = buttons;
    d5cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
      for (int i = 0; i < 8; i++)
    d5d0:	f242 23a0 	movw	r3, #8864	; 0x22a0
          axisChanged = true;
    d5d4:	2001      	movs	r0, #1
    d5d6:	442b      	add	r3, r5
    d5d8:	f505 550b 	add.w	r5, r5, #8896	; 0x22c0
        if (psAxis[i] != psAxisPrev[i])
    d5dc:	f853 2cfc 	ldr.w	r2, [r3, #-252]
    d5e0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    d5e4:	428a      	cmp	r2, r1
          axisChanged = true;
    d5e6:	bf18      	it	ne
    d5e8:	f887 03aa 	strbne.w	r0, [r7, #938]	; 0x3aa
      for (int i = 0; i < 8; i++)
    d5ec:	429d      	cmp	r5, r3
        psAxisPrev[i] = psAxis[i];
    d5ee:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 8; i++)
    d5f0:	d1f4      	bne.n	d5dc <UUsbHost::tick()+0x184>
    d5f2:	e001      	b.n	d5f8 <UUsbHost::tick()+0x1a0>
      if (buttons & (1 << 8) and not manOverride)
    d5f4:	7d2c      	ldrb	r4, [r5, #20]
    int servof = 0;
    d5f6:	9e07      	ldr	r6, [sp, #28]
    available = isOK;
    d5f8:	9b07      	ldr	r3, [sp, #28]
    d5fa:	f1b3 0b00 	subs.w	fp, r3, #0
    d5fe:	bf18      	it	ne
    d600:	f04f 0b01 	movne.w	fp, #1
    d604:	f887 b3a6 	strb.w	fp, [r7, #934]	; 0x3a6
    if (manOverride)
    d608:	b1ec      	cbz	r4, d646 <UUsbHost::tick()+0x1ee>
      servopos += servof * 10;
    d60a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    d60e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
      if (servopos > 85000)
    d612:	4968      	ldr	r1, [pc, #416]	; (d7b4 <UUsbHost::tick()+0x35c>)
      servopos += servof * 10;
    d614:	eb03 0346 	add.w	r3, r3, r6, lsl #1
      if (servopos > 85000)
    d618:	428b      	cmp	r3, r1
    d61a:	f300 80d3 	bgt.w	d7c4 <UUsbHost::tick()+0x36c>
      else if (servopos < -95000)
    d61e:	4966      	ldr	r1, [pc, #408]	; (d7b8 <UUsbHost::tick()+0x360>)
    d620:	428b      	cmp	r3, r1
    d622:	f2c0 80ea 	blt.w	d7fa <UUsbHost::tick()+0x3a2>
      servo.setServo(1, -servopos / 100, 1, 0);
    d626:	4965      	ldr	r1, [pc, #404]	; (d7bc <UUsbHost::tick()+0x364>)
    d628:	17da      	asrs	r2, r3, #31
      servopos += servof * 10;
    d62a:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      servo.setServo(1, -servopos / 100, 1, 0);
    d62e:	fb81 1303 	smull	r1, r3, r1, r3
    d632:	eba2 1263 	sub.w	r2, r2, r3, asr #5
    d636:	b212      	sxth	r2, r2
    d638:	2400      	movs	r4, #0
    d63a:	2301      	movs	r3, #1
    d63c:	4859      	ldr	r0, [pc, #356]	; (d7a4 <UUsbHost::tick()+0x34c>)
    d63e:	4619      	mov	r1, r3
    d640:	9400      	str	r4, [sp, #0]
    d642:	f7fe fae3 	bl	bc0c <UServo::setServo(signed char, short, bool, signed char)>
}
    d646:	b023      	add	sp, #140	; 0x8c
    d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d64c:	b023      	add	sp, #140	; 0x8c
    d64e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      setup();
    d652:	f7ff bed1 	b.w	d3f8 <UUsbHost::setup()>
        manOverride = true;
    d656:	2201      	movs	r2, #1
        autoMotorEnabled = motor.motorEnable[0];
    d658:	4853      	ldr	r0, [pc, #332]	; (d7a8 <UUsbHost::tick()+0x350>)
        manOverride = true;
    d65a:	752a      	strb	r2, [r5, #20]
        motor.motorSetEnable(true, true);
    d65c:	4611      	mov	r1, r2
        autoMotorEnabled = motor.motorEnable[0];
    d65e:	f890 3020 	ldrb.w	r3, [r0, #32]
    d662:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
        motor.motorSetEnable(true, true);
    d666:	f7fb f8b1 	bl	87cc <UMotor::motorSetEnable(bool, bool)>
        usb.send("# gamepad override\n");
    d66a:	4955      	ldr	r1, [pc, #340]	; (d7c0 <UUsbHost::tick()+0x368>)
    d66c:	484c      	ldr	r0, [pc, #304]	; (d7a0 <UUsbHost::tick()+0x348>)
    d66e:	f7fe ffcd 	bl	c60c <UUSB::send(char const*)>
      if (buttons & (1 << 9) and manOverride)
    d672:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    d676:	059a      	lsls	r2, r3, #22
    d678:	7d2c      	ldrb	r4, [r5, #20]
    d67a:	f57f af5a 	bpl.w	d532 <UUsbHost::tick()+0xda>
    d67e:	2c00      	cmp	r4, #0
    d680:	f47f af3a 	bne.w	d4f8 <UUsbHost::tick()+0xa0>
      if (buttons & (1 << 5)) // RB
    d684:	0699      	lsls	r1, r3, #26
    d686:	d49a      	bmi.n	d5be <UUsbHost::tick()+0x166>
      if (buttons != buttons_last)
    d688:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
    d68c:	2400      	movs	r4, #0
    d68e:	e796      	b.n	d5be <UUsbHost::tick()+0x166>
    void    joystickDataClear();

    // Returns the currently pressed buttons on the joystick
    uint32_t getButtons() { return buttons; }
    d690:	464b      	mov	r3, r9
    d692:	f242 12a0 	movw	r2, #8608	; 0x21a0
    d696:	f853 0f44 	ldr.w	r0, [r3, #68]!
    d69a:	18aa      	adds	r2, r5, r2
        buttons = joysticks[joystick_index].getButtons();
    d69c:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    // Returns the HID Report ID
    uint8_t getReportID() { return report_id_;}

    // Returns the specified axis value
    int     getAxis(uint32_t index) { return (index < (sizeof(axis) / sizeof(axis[0]))) ? axis[index] : 0; }
    d6a0:	f853 1f04 	ldr.w	r1, [r3, #4]!
        for (uint8_t i = 0; i<64; i++) {
    d6a4:	42a3      	cmp	r3, r4
            psAxis[i] = joysticks[joystick_index].getAxis(i);
    d6a6:	f842 1f04 	str.w	r1, [r2, #4]!
        for (uint8_t i = 0; i<64; i++) {
    d6aa:	d1f9      	bne.n	d6a0 <UUsbHost::tick()+0x248>
    // setLEDs on PS4(RGB), PS3 simple LED setting (only uses lb)
    bool setLEDs(uint8_t lr, uint8_t lg, uint8_t lb);  // sets Leds,
    bool inline setLEDs(uint32_t leds) {return setLEDs((leds >> 16) & 0xff, (leds >> 8) & 0xff, leds & 0xff);}  // sets Leds - passing one arg for all leds
    enum { STANDARD_AXIS_COUNT = 10, ADDITIONAL_AXIS_COUNT = 54, TOTAL_AXIS_COUNT = (STANDARD_AXIS_COUNT + ADDITIONAL_AXIS_COUNT) };
    typedef enum { UNKNOWN = 0, PS3, PS4, XBOXONE, XBOX360, PS3_MOTION, SpaceNav, SWITCH} joytype_t;
    joytype_t joystickType() {return joystickType_;}
    d6ac:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
        switch (joysticks[joystick_index].joystickType()) {
    d6b0:	2b02      	cmp	r3, #2
    d6b2:	f000 808b 	beq.w	d7cc <UUsbHost::tick()+0x374>
    d6b6:	d817      	bhi.n	d6e8 <UUsbHost::tick()+0x290>
    d6b8:	2b01      	cmp	r3, #1
    d6ba:	d14a      	bne.n	d752 <UUsbHost::tick()+0x2fa>
            ltv = joysticks[joystick_index].getAxis(18);
    d6bc:	f899 1090 	ldrb.w	r1, [r9, #144]	; 0x90
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d6c0:	f89a 3000 	ldrb.w	r3, [sl]
            rtv = joysticks[joystick_index].getAxis(19);
    d6c4:	f899 2094 	ldrb.w	r2, [r9, #148]	; 0x94
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d6c8:	428b      	cmp	r3, r1
    d6ca:	d118      	bne.n	d6fe <UUsbHost::tick()+0x2a6>
    d6cc:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d6d0:	4293      	cmp	r3, r2
    d6d2:	d114      	bne.n	d6fe <UUsbHost::tick()+0x2a6>
        if (buttons != buttons_prev) {
    d6d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    d6d8:	4298      	cmp	r0, r3
    d6da:	d122      	bne.n	d722 <UUsbHost::tick()+0x2ca>
        joysticks[joystick_index].joystickDataClear();
    d6dc:	4648      	mov	r0, r9
    d6de:	f8cd 801c 	str.w	r8, [sp, #28]
    d6e2:	f006 f829 	bl	13738 <JoystickController::joystickDataClear()>
    d6e6:	e6ec      	b.n	d4c2 <UUsbHost::tick()+0x6a>
        switch (joysticks[joystick_index].joystickType()) {
    d6e8:	3b03      	subs	r3, #3
    d6ea:	2b01      	cmp	r3, #1
    d6ec:	d831      	bhi.n	d752 <UUsbHost::tick()+0x2fa>
            ltv = joysticks[joystick_index].getAxis(3);
    d6ee:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d6f2:	f89a 3000 	ldrb.w	r3, [sl]
            rtv = joysticks[joystick_index].getAxis(4);
    d6f6:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d6fa:	428b      	cmp	r3, r1
    d6fc:	d025      	beq.n	d74a <UUsbHost::tick()+0x2f2>
              joysticks[joystick_index].setRumble(ltv, rtv,50);
    d6fe:	2332      	movs	r3, #50	; 0x32
    d700:	4648      	mov	r0, r9
              joystick_left_trigger_value[joystick_index] = ltv;
    d702:	f88a 1000 	strb.w	r1, [sl]
              joystick_right_trigger_value[joystick_index] = rtv;
    d706:	f88a 2004 	strb.w	r2, [sl, #4]
              joysticks[joystick_index].setRumble(ltv, rtv,50);
    d70a:	f005 fe6f 	bl	133ec <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>
        if (buttons != buttons_prev) {
    d70e:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
    d712:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    d716:	4283      	cmp	r3, r0
    d718:	d0e0      	beq.n	d6dc <UUsbHost::tick()+0x284>
          if (joysticks[joystick_index].joystickType() == JoystickController::PS3) {
    d71a:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
    d71e:	2b01      	cmp	r3, #1
    d720:	d11b      	bne.n	d75a <UUsbHost::tick()+0x302>
            if (buttons & 0x2000) leds = 2;   //Cir
    d722:	0483      	lsls	r3, r0, #18
    bool inline setLEDs(uint32_t leds) {return setLEDs((leds >> 16) & 0xff, (leds >> 8) & 0xff, leds & 0xff);}  // sets Leds - passing one arg for all leds
    d724:	f04f 0200 	mov.w	r2, #0
            uint8_t leds = 0;
    d728:	bf54      	ite	pl
    d72a:	f3c0 33c0 	ubfxpl	r3, r0, #15, #1
            if (buttons & 0x2000) leds = 2;   //Cir
    d72e:	2302      	movmi	r3, #2
            if (buttons & 0x1000) leds = 4;   //Tri
    d730:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    d734:	4611      	mov	r1, r2
    d736:	bf18      	it	ne
    d738:	2304      	movne	r3, #4
            if (buttons & 0x4000) leds = 8;   //X  //Tri
    d73a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    d73e:	4648      	mov	r0, r9
    d740:	bf18      	it	ne
    d742:	2308      	movne	r3, #8
    d744:	f005 fd9a 	bl	1327c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
    d748:	e013      	b.n	d772 <UUsbHost::tick()+0x31a>
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d74a:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d74e:	4293      	cmp	r3, r2
    d750:	d1d5      	bne.n	d6fe <UUsbHost::tick()+0x2a6>
        if (buttons != buttons_prev) {
    d752:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    d756:	4298      	cmp	r0, r3
    d758:	d0c0      	beq.n	d6dc <UUsbHost::tick()+0x284>
            uint8_t lb = (buttons & 4) ? 0xff : 0;
    d75a:	f340 0380 	sbfx	r3, r0, #2, #1
            uint8_t lg = (buttons & 2) ? 0xff : 0;
    d75e:	f340 0240 	sbfx	r2, r0, #1, #1
            uint8_t lr = (buttons & 1) ? 0xff : 0;
    d762:	f340 0100 	sbfx	r1, r0, #0, #1
            joysticks[joystick_index].setLEDs(lr, lg, lb);
    d766:	4648      	mov	r0, r9
    d768:	b2db      	uxtb	r3, r3
    d76a:	b2d2      	uxtb	r2, r2
    d76c:	b2c9      	uxtb	r1, r1
    d76e:	f005 fd85 	bl	1327c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
          buttons_prev = buttons;
    d772:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
        joysticks[joystick_index].joystickDataClear();
    d776:	4648      	mov	r0, r9
    d778:	f8cd 801c 	str.w	r8, [sp, #28]
          buttons_prev = buttons;
    d77c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        joysticks[joystick_index].joystickDataClear();
    d780:	f005 ffda 	bl	13738 <JoystickController::joystickDataClear()>
    d784:	e69d      	b.n	d4c2 <UUsbHost::tick()+0x6a>
    d786:	bf00      	nop
    d788:	47ae147b 	.word	0x47ae147b
    d78c:	bf847ae1 	.word	0xbf847ae1
    d790:	bc6a7efa 	.word	0xbc6a7efa
    d794:	bf789374 	.word	0xbf789374
    d798:	66666667 	.word	0x66666667
    d79c:	20007bc8 	.word	0x20007bc8
    d7a0:	2000fac4 	.word	0x2000fac4
    d7a4:	2000fa64 	.word	0x2000fa64
    d7a8:	2000f4c8 	.word	0x2000f4c8
    d7ac:	2000fab8 	.word	0x2000fab8
    d7b0:	20007be0 	.word	0x20007be0
    d7b4:	00014c08 	.word	0x00014c08
    d7b8:	fffe8ce8 	.word	0xfffe8ce8
    d7bc:	51eb851f 	.word	0x51eb851f
    d7c0:	20007bb4 	.word	0x20007bb4
        servopos = 85000;
    d7c4:	4a1c      	ldr	r2, [pc, #112]	; (d838 <UUsbHost::tick()+0x3e0>)
    d7c6:	f8c7 13ac 	str.w	r1, [r7, #940]	; 0x3ac
    d7ca:	e735      	b.n	d638 <UUsbHost::tick()+0x1e0>
            ltv = joysticks[joystick_index].getAxis(3);
    d7cc:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d7d0:	f89a 3000 	ldrb.w	r3, [sl]
            rtv = joysticks[joystick_index].getAxis(4);
    d7d4:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
            if ((ltv != joystick_left_trigger_value[joystick_index]) || (rtv != joystick_right_trigger_value[joystick_index])) {
    d7d8:	428b      	cmp	r3, r1
    d7da:	d103      	bne.n	d7e4 <UUsbHost::tick()+0x38c>
    d7dc:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d7e0:	4293      	cmp	r3, r2
    d7e2:	d0b6      	beq.n	d752 <UUsbHost::tick()+0x2fa>
              joysticks[joystick_index].setRumble(ltv, rtv);
    d7e4:	23ff      	movs	r3, #255	; 0xff
    d7e6:	4648      	mov	r0, r9
              joystick_left_trigger_value[joystick_index] = ltv;
    d7e8:	f88a 1000 	strb.w	r1, [sl]
              joystick_right_trigger_value[joystick_index] = rtv;
    d7ec:	f88a 2004 	strb.w	r2, [sl, #4]
              joysticks[joystick_index].setRumble(ltv, rtv);
    d7f0:	f005 fdfc 	bl	133ec <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>
        if (buttons != buttons_prev) {
    d7f4:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
    d7f8:	e78b      	b.n	d712 <UUsbHost::tick()+0x2ba>
        servopos = -95000;
    d7fa:	f240 32b6 	movw	r2, #950	; 0x3b6
    d7fe:	f8c7 13ac 	str.w	r1, [r7, #940]	; 0x3ac
    d802:	e719      	b.n	d638 <UUsbHost::tick()+0x1e0>
      if (manOverride)
    d804:	2c00      	cmp	r4, #0
    d806:	f43f aeda 	beq.w	d5be <UUsbHost::tick()+0x166>
          lv = (psAxis[5] - 127) * -0.05;
    d80a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
          hv = (psAxis[2] - 127) * -0.004;
    d80e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
          lv = (psAxis[5] - 127) * -0.05;
    d812:	ed9f 4b05 	vldr	d4, [pc, #20]	; d828 <UUsbHost::tick()+0x3d0>
          hv = (psAxis[2] - 127) * -0.004;
    d816:	ed9f 5b06 	vldr	d5, [pc, #24]	; d830 <UUsbHost::tick()+0x3d8>
    d81a:	e698      	b.n	d54e <UUsbHost::tick()+0xf6>
      if (buttons & (1 << 5)) // RB
    d81c:	069b      	lsls	r3, r3, #26
    d81e:	d4f4      	bmi.n	d80a <UUsbHost::tick()+0x3b2>
    d820:	e68d      	b.n	d53e <UUsbHost::tick()+0xe6>
    d822:	bf00      	nop
    d824:	f3af 8000 	nop.w
    d828:	9999999a 	.word	0x9999999a
    d82c:	bfa99999 	.word	0xbfa99999
    d830:	d2f1a9fc 	.word	0xd2f1a9fc
    d834:	bf70624d 	.word	0xbf70624d
    d838:	fffffcae 	.word	0xfffffcae

0000d83c <UUsbHost::sendAxis()>:

void UUsbHost::sendAxis()
{
    d83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d840:	4606      	mov	r6, r0
    d842:	b0cd      	sub	sp, #308	; 0x134
  const int MSL = 300;
  char s[MSL];
  snprintf(s, MSL, "joyaxis %d", available);
    d844:	4a1c      	ldr	r2, [pc, #112]	; (d8b8 <UUsbHost::sendAxis()+0x7c>)
    d846:	f44f 7196 	mov.w	r1, #300	; 0x12c
    d84a:	f506 5800 	add.w	r8, r6, #8192	; 0x2000
    d84e:	a801      	add	r0, sp, #4
    d850:	f898 33a6 	ldrb.w	r3, [r8, #934]	; 0x3a6
    d854:	f00d ffae 	bl	1b7b4 <snprintf>
  int n = strlen(s);
    d858:	a801      	add	r0, sp, #4
    d85a:	f00f fd31 	bl	1d2c0 <strlen>
  char * p1 = &s[n];
    d85e:	ab01      	add	r3, sp, #4
  int n = strlen(s);
    d860:	4604      	mov	r4, r0
  char * p1 = &s[n];
    d862:	181d      	adds	r5, r3, r0
  for (int i = 0; i < number_of_axes; i++)
    d864:	f898 33a7 	ldrb.w	r3, [r8, #935]	; 0x3a7
    d868:	b1cb      	cbz	r3, d89e <UUsbHost::sendAxis()+0x62>
    d86a:	f242 17a0 	movw	r7, #8608	; 0x21a0
  {
    snprintf(p1, MSL - n, " %d",  psAxis[i]);
    d86e:	f8df 9054 	ldr.w	r9, [pc, #84]	; d8c4 <UUsbHost::sendAxis()+0x88>
    d872:	4437      	add	r7, r6
  for (int i = 0; i < number_of_axes; i++)
    d874:	2600      	movs	r6, #0
    snprintf(p1, MSL - n, " %d",  psAxis[i]);
    d876:	f5c4 7196 	rsb	r1, r4, #300	; 0x12c
    d87a:	f857 3f04 	ldr.w	r3, [r7, #4]!
    d87e:	464a      	mov	r2, r9
    d880:	4628      	mov	r0, r5
    d882:	f00d ff97 	bl	1b7b4 <snprintf>
    n += strlen(p1);
    d886:	4628      	mov	r0, r5
    d888:	f00f fd1a 	bl	1d2c0 <strlen>
  for (int i = 0; i < number_of_axes; i++)
    d88c:	3601      	adds	r6, #1
    d88e:	f898 33a7 	ldrb.w	r3, [r8, #935]	; 0x3a7
    n += strlen(p1);
    d892:	4404      	add	r4, r0
    p1 = &s[n];
    d894:	aa01      	add	r2, sp, #4
  for (int i = 0; i < number_of_axes; i++)
    d896:	42b3      	cmp	r3, r6
    p1 = &s[n];
    d898:	eb02 0504 	add.w	r5, r2, r4
  for (int i = 0; i < number_of_axes; i++)
    d89c:	dceb      	bgt.n	d876 <UUsbHost::sendAxis()+0x3a>
  }
  snprintf(p1, MSL - n, "\r\n");
    d89e:	4a07      	ldr	r2, [pc, #28]	; (d8bc <UUsbHost::sendAxis()+0x80>)
    d8a0:	f5c4 7196 	rsb	r1, r4, #300	; 0x12c
    d8a4:	4628      	mov	r0, r5
    d8a6:	f00d ff85 	bl	1b7b4 <snprintf>
  usb.send(s);
    d8aa:	a901      	add	r1, sp, #4
    d8ac:	4804      	ldr	r0, [pc, #16]	; (d8c0 <UUsbHost::sendAxis()+0x84>)
    d8ae:	f7fe fead 	bl	c60c <UUSB::send(char const*)>
}
    d8b2:	b04d      	add	sp, #308	; 0x134
    d8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d8b8:	20007ce4 	.word	0x20007ce4
    d8bc:	20004d1c 	.word	0x20004d1c
    d8c0:	2000fac4 	.word	0x2000fac4
    d8c4:	20007cf0 	.word	0x20007cf0

0000d8c8 <UUsbHost::sendButtons()>:

void UUsbHost::sendButtons()
{
  const int MSL = 300;
  char s[MSL];
  snprintf(s, MSL, "joybut %d %lx\n", available, buttons);
    d8c8:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    d8cc:	4a09      	ldr	r2, [pc, #36]	; (d8f4 <UUsbHost::sendButtons()+0x2c>)
    d8ce:	f44f 7196 	mov.w	r1, #300	; 0x12c
{
    d8d2:	b510      	push	{r4, lr}
  snprintf(s, MSL, "joybut %d %lx\n", available, buttons);
    d8d4:	f8d3 4198 	ldr.w	r4, [r3, #408]	; 0x198
{
    d8d8:	b0ce      	sub	sp, #312	; 0x138
  snprintf(s, MSL, "joybut %d %lx\n", available, buttons);
    d8da:	9400      	str	r4, [sp, #0]
    d8dc:	a803      	add	r0, sp, #12
    d8de:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
    d8e2:	f00d ff67 	bl	1b7b4 <snprintf>
  usb.send(s);
    d8e6:	a903      	add	r1, sp, #12
    d8e8:	4803      	ldr	r0, [pc, #12]	; (d8f8 <UUsbHost::sendButtons()+0x30>)
    d8ea:	f7fe fe8f 	bl	c60c <UUSB::send(char const*)>
}
    d8ee:	b04e      	add	sp, #312	; 0x138
    d8f0:	bd10      	pop	{r4, pc}
    d8f2:	bf00      	nop
    d8f4:	20007b14 	.word	0x20007b14
    d8f8:	2000fac4 	.word	0x2000fac4

0000d8fc <UUsbHost::sendJoy()>:

void UUsbHost::sendJoy()
{
    d8fc:	b510      	push	{r4, lr}
    d8fe:	4686      	mov	lr, r0
    d900:	b0e2      	sub	sp, #392	; 0x188
  const int MSL = 300;
  char s[MSL];
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d902:	4a33      	ldr	r2, [pc, #204]	; (d9d0 <UUsbHost::sendJoy()+0xd4>)
    d904:	f44f 7196 	mov.w	r1, #300	; 0x12c
          (psAxis[2] - 127) << 7, 
          -(psAxis[5] - 127) << 7, 
          (psAxis[4] - 127) << 7, 
          (psAxis[6] - 127) << 7, 
          (psAxis[7] - 127) << 7,
          (buttons & (1 << 2)) > 0,
    d908:	f50e 5c00 	add.w	ip, lr, #8192	; 0x2000
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d90c:	a817      	add	r0, sp, #92	; 0x5c
          (psAxis[7] - 127) << 7,
    d90e:	f8dc 31c0 	ldr.w	r3, [ip, #448]	; 0x1c0
    d912:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d914:	01db      	lsls	r3, r3, #7
    d916:	930a      	str	r3, [sp, #40]	; 0x28
          (psAxis[6] - 127) << 7, 
    d918:	f8dc 31bc 	ldr.w	r3, [ip, #444]	; 0x1bc
    d91c:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d91e:	01db      	lsls	r3, r3, #7
    d920:	9309      	str	r3, [sp, #36]	; 0x24
          (psAxis[4] - 127) << 7, 
    d922:	f8dc 31b4 	ldr.w	r3, [ip, #436]	; 0x1b4
    d926:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d928:	01db      	lsls	r3, r3, #7
    d92a:	9308      	str	r3, [sp, #32]
          -(psAxis[5] - 127) << 7, 
    d92c:	f8dc 31b8 	ldr.w	r3, [ip, #440]	; 0x1b8
    d930:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d934:	01db      	lsls	r3, r3, #7
    d936:	9307      	str	r3, [sp, #28]
          (psAxis[2] - 127) << 7, 
    d938:	f8dc 31ac 	ldr.w	r3, [ip, #428]	; 0x1ac
    d93c:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d93e:	01db      	lsls	r3, r3, #7
    d940:	9306      	str	r3, [sp, #24]
          (psAxis[3] - 127) << 7, 
    d942:	f8dc 31b0 	ldr.w	r3, [ip, #432]	; 0x1b0
    d946:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d948:	01db      	lsls	r3, r3, #7
    d94a:	9305      	str	r3, [sp, #20]
          -(psAxis[1] - 127) << 7, 
    d94c:	f8dc 31a8 	ldr.w	r3, [ip, #424]	; 0x1a8
    d950:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d954:	01db      	lsls	r3, r3, #7
    d956:	9304      	str	r3, [sp, #16]
          (psAxis[0] - 127) << 7, 
    d958:	f8dc 31a4 	ldr.w	r3, [ip, #420]	; 0x1a4
    d95c:	3b7f      	subs	r3, #127	; 0x7f
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d95e:	01db      	lsls	r3, r3, #7
    d960:	9303      	str	r3, [sp, #12]
    d962:	f89c 43a8 	ldrb.w	r4, [ip, #936]	; 0x3a8
          (buttons & (1 << 2)) > 0,
    d966:	f8dc 3198 	ldr.w	r3, [ip, #408]	; 0x198
  snprintf(s, MSL, "joy %d %d %d %d  %d %d %d %d %d %d %d %d  %d %d %d %d %d %d %d %d %d %d %d\r\n", 
    d96a:	9402      	str	r4, [sp, #8]
    d96c:	f89c 43a7 	ldrb.w	r4, [ip, #935]	; 0x3a7
    d970:	9401      	str	r4, [sp, #4]
    d972:	f3c3 14c0 	ubfx	r4, r3, #7, #1
    d976:	9415      	str	r4, [sp, #84]	; 0x54
    d978:	f3c3 2480 	ubfx	r4, r3, #10, #1
    d97c:	9414      	str	r4, [sp, #80]	; 0x50
    d97e:	f3c3 2400 	ubfx	r4, r3, #8, #1
    d982:	9413      	str	r4, [sp, #76]	; 0x4c
    d984:	f3c3 2440 	ubfx	r4, r3, #9, #1
    d988:	9412      	str	r4, [sp, #72]	; 0x48
    d98a:	f3c3 1480 	ubfx	r4, r3, #6, #1
    d98e:	9411      	str	r4, [sp, #68]	; 0x44
    d990:	f3c3 1440 	ubfx	r4, r3, #5, #1
    d994:	9410      	str	r4, [sp, #64]	; 0x40
    d996:	f3c3 1400 	ubfx	r4, r3, #4, #1
    d99a:	940f      	str	r4, [sp, #60]	; 0x3c
    d99c:	f003 0401 	and.w	r4, r3, #1
    d9a0:	940e      	str	r4, [sp, #56]	; 0x38
    d9a2:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    d9a6:	940d      	str	r4, [sp, #52]	; 0x34
    d9a8:	f3c3 0440 	ubfx	r4, r3, #1, #1
    d9ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d9b0:	940c      	str	r4, [sp, #48]	; 0x30
    d9b2:	930b      	str	r3, [sp, #44]	; 0x2c
    d9b4:	f89e 3014 	ldrb.w	r3, [lr, #20]
    d9b8:	9300      	str	r3, [sp, #0]
    d9ba:	f89c 33a6 	ldrb.w	r3, [ip, #934]	; 0x3a6
    d9be:	f00d fef9 	bl	1b7b4 <snprintf>
          (buttons & (1 << 9)) > 0,
          (buttons & (1 << 8)) > 0,
          (buttons & (1 << 10)) > 0,
          (buttons & (1 << 7)) > 0
  );
  usb.send(s);
    d9c2:	a917      	add	r1, sp, #92	; 0x5c
    d9c4:	4803      	ldr	r0, [pc, #12]	; (d9d4 <UUsbHost::sendJoy()+0xd8>)
    d9c6:	f7fe fe21 	bl	c60c <UUSB::send(char const*)>
}
    d9ca:	b062      	add	sp, #392	; 0x188
    d9cc:	bd10      	pop	{r4, pc}
    d9ce:	bf00      	nop
    d9d0:	20007c94 	.word	0x20007c94
    d9d4:	2000fac4 	.word	0x2000fac4

0000d9d8 <UUsbHost::sendData(int)>:
{
    d9d8:	4603      	mov	r3, r0
  if (item == 0)
    d9da:	b1b1      	cbz	r1, da0a <UUsbHost::sendData(int)+0x32>
  if (item == 1)
    d9dc:	2901      	cmp	r1, #1
    d9de:	d011      	beq.n	da04 <UUsbHost::sendData(int)+0x2c>
  if (item == 2 and (axisChanged or buttonChanged))
    d9e0:	2902      	cmp	r1, #2
    d9e2:	d114      	bne.n	da0e <UUsbHost::sendData(int)+0x36>
    d9e4:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
    d9e8:	f892 13aa 	ldrb.w	r1, [r2, #938]	; 0x3aa
    d9ec:	b911      	cbnz	r1, d9f4 <UUsbHost::sendData(int)+0x1c>
    d9ee:	f892 13a9 	ldrb.w	r1, [r2, #937]	; 0x3a9
    d9f2:	b149      	cbz	r1, da08 <UUsbHost::sendData(int)+0x30>
    buttonChanged = false;
    d9f4:	2100      	movs	r1, #0
    sendJoy();
    d9f6:	4618      	mov	r0, r3
    buttonChanged = false;
    d9f8:	f882 13a9 	strb.w	r1, [r2, #937]	; 0x3a9
    axisChanged = false;
    d9fc:	f882 13aa 	strb.w	r1, [r2, #938]	; 0x3aa
    sendJoy();
    da00:	f7ff bf7c 	b.w	d8fc <UUsbHost::sendJoy()>
    sendButtons();
    da04:	f7ff bf60 	b.w	d8c8 <UUsbHost::sendButtons()>
}
    da08:	4770      	bx	lr
    sendAxis();
    da0a:	f7ff bf17 	b.w	d83c <UUsbHost::sendAxis()>
    da0e:	4770      	bx	lr

0000da10 <UUsbHost::PrintDeviceListChanges()>:
#if defined REGBOT_HW41 && defined useUSBhost
//=============================================================================
// Show when devices are added or removed
//=============================================================================
void UUsbHost::PrintDeviceListChanges() 
{
    da10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da14:	f242 1454 	movw	r4, #8532	; 0x2154
    da18:	2600      	movs	r6, #0
    da1a:	b09f      	sub	sp, #124	; 0x7c
//         hid_driver_active[i] = false;
      } 
      else 
      {
        anyAvailable = true;
        snprintf(s, MSL, "# *** HID Device %d type=%d, %s %x:%x - connected ***\n", i, joysticks[i].joystickType(), hid_driver_names[i], hiddrivers[i]->idVendor(), hiddrivers[i]->idProduct());
    da1c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; db18 <UUsbHost::PrintDeviceListChanges()+0x108>
        usb.send(s);
    da20:	4f39      	ldr	r7, [pc, #228]	; (db08 <UUsbHost::PrintDeviceListChanges()+0xf8>)
  bool anyAvailable = false;
    da22:	4631      	mov	r1, r6
    da24:	4404      	add	r4, r0
    da26:	4605      	mov	r5, r0
          usb.send(s);
        }
        psz = hiddrivers[i]->serialNumber();
        if (psz && *psz) 
        {
          snprintf(s, MSL, "#  Serial: %s\n", psz);
    da28:	f8df 90f0 	ldr.w	r9, [pc, #240]	; db1c <UUsbHost::PrintDeviceListChanges()+0x10c>
    operator bool() { return (mydevice != nullptr); }
    da2c:	f854 3f04 	ldr.w	r3, [r4, #4]!
    da30:	689a      	ldr	r2, [r3, #8]
      if (not *hiddrivers[i]) 
    da32:	b342      	cbz	r2, da86 <UUsbHost::PrintDeviceListChanges()+0x76>
        snprintf(s, MSL, "# *** HID Device %d type=%d, %s %x:%x - connected ***\n", i, joysticks[i].joystickType(), hid_driver_names[i], hiddrivers[i]->idVendor(), hiddrivers[i]->idProduct());
    da34:	8c11      	ldrh	r1, [r2, #32]
    da36:	4633      	mov	r3, r6
    da38:	a805      	add	r0, sp, #20
    da3a:	9103      	str	r1, [sp, #12]
    da3c:	2164      	movs	r1, #100	; 0x64
    da3e:	8bd2      	ldrh	r2, [r2, #30]
    da40:	9202      	str	r2, [sp, #8]
    da42:	6922      	ldr	r2, [r4, #16]
    da44:	9201      	str	r2, [sp, #4]
    da46:	f895 2b4c 	ldrb.w	r2, [r5, #2892]	; 0xb4c
    da4a:	9200      	str	r2, [sp, #0]
    da4c:	4642      	mov	r2, r8
    da4e:	f00d feb1 	bl	1b7b4 <snprintf>
        usb.send(s);
    da52:	a905      	add	r1, sp, #20
    da54:	4638      	mov	r0, r7
    da56:	f7fe fdd9 	bl	c60c <UUSB::send(char const*)>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_MAN]]; }
    da5a:	6821      	ldr	r1, [r4, #0]
    da5c:	688b      	ldr	r3, [r1, #8]
    da5e:	b18b      	cbz	r3, da84 <UUsbHost::PrintDeviceListChanges()+0x74>
    da60:	691a      	ldr	r2, [r3, #16]
    da62:	b142      	cbz	r2, da76 <UUsbHost::PrintDeviceListChanges()+0x66>
    da64:	7813      	ldrb	r3, [r2, #0]
        if (psz && *psz) 
    da66:	18d0      	adds	r0, r2, r3
    da68:	78c0      	ldrb	r0, [r0, #3]
    da6a:	2800      	cmp	r0, #0
    da6c:	d131      	bne.n	dad2 <UUsbHost::PrintDeviceListChanges()+0xc2>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_PROD]]; }
    da6e:	7853      	ldrb	r3, [r2, #1]
        if (psz && *psz) 
    da70:	18d0      	adds	r0, r2, r3
    da72:	78c0      	ldrb	r0, [r0, #3]
    da74:	b9e8      	cbnz	r0, dab2 <UUsbHost::PrintDeviceListChanges()+0xa2>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_SERIAL]]; }
    da76:	688b      	ldr	r3, [r1, #8]
    da78:	691a      	ldr	r2, [r3, #16]
    da7a:	b11a      	cbz	r2, da84 <UUsbHost::PrintDeviceListChanges()+0x74>
    da7c:	7893      	ldrb	r3, [r2, #2]
        if (psz && *psz) 
    da7e:	18d1      	adds	r1, r2, r3
    da80:	78c9      	ldrb	r1, [r1, #3]
    da82:	b951      	cbnz	r1, da9a <UUsbHost::PrintDeviceListChanges()+0x8a>
        anyAvailable = true;
    da84:	2101      	movs	r1, #1
  for (uint8_t i = 0; i < CNT_HIDDEVICES; i++) 
    da86:	3601      	adds	r6, #1
    da88:	f505 65a8 	add.w	r5, r5, #1344	; 0x540
    da8c:	2e04      	cmp	r6, #4
    da8e:	d1cd      	bne.n	da2c <UUsbHost::PrintDeviceListChanges()+0x1c>
          usb.send(s);
        }
      }
    }
  }
  if (not anyAvailable)
    da90:	2900      	cmp	r1, #0
    da92:	d031      	beq.n	daf8 <UUsbHost::PrintDeviceListChanges()+0xe8>
    usb.send("# No HID devices available\r\n");
}
    da94:	b01f      	add	sp, #124	; 0x7c
    da96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da9a:	3303      	adds	r3, #3
          snprintf(s, MSL, "#  Serial: %s\n", psz);
    da9c:	2164      	movs	r1, #100	; 0x64
    da9e:	a805      	add	r0, sp, #20
    daa0:	4413      	add	r3, r2
    daa2:	464a      	mov	r2, r9
    daa4:	f00d fe86 	bl	1b7b4 <snprintf>
          usb.send(s);
    daa8:	a905      	add	r1, sp, #20
    daaa:	4638      	mov	r0, r7
    daac:	f7fe fdae 	bl	c60c <UUSB::send(char const*)>
    dab0:	e7e8      	b.n	da84 <UUsbHost::PrintDeviceListChanges()+0x74>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_PROD]]; }
    dab2:	3303      	adds	r3, #3
          snprintf(s, MSL, "#  product: %s\n", psz);
    dab4:	2164      	movs	r1, #100	; 0x64
    dab6:	a805      	add	r0, sp, #20
    dab8:	4413      	add	r3, r2
    daba:	4a14      	ldr	r2, [pc, #80]	; (db0c <UUsbHost::PrintDeviceListChanges()+0xfc>)
    dabc:	f00d fe7a 	bl	1b7b4 <snprintf>
          usb.send(s);
    dac0:	a905      	add	r1, sp, #20
    dac2:	4638      	mov	r0, r7
    dac4:	f7fe fda2 	bl	c60c <UUSB::send(char const*)>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_SERIAL]]; }
    dac8:	6823      	ldr	r3, [r4, #0]
    daca:	689b      	ldr	r3, [r3, #8]
    dacc:	2b00      	cmp	r3, #0
    dace:	d1d3      	bne.n	da78 <UUsbHost::PrintDeviceListChanges()+0x68>
    dad0:	e7d8      	b.n	da84 <UUsbHost::PrintDeviceListChanges()+0x74>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_MAN]]; }
    dad2:	3303      	adds	r3, #3
          snprintf(s, MSL, "#  manufacturer: %s\n", psz);
    dad4:	2164      	movs	r1, #100	; 0x64
    dad6:	a805      	add	r0, sp, #20
    dad8:	4413      	add	r3, r2
    dada:	4a0d      	ldr	r2, [pc, #52]	; (db10 <UUsbHost::PrintDeviceListChanges()+0x100>)
    dadc:	f00d fe6a 	bl	1b7b4 <snprintf>
          usb.send(s);
    dae0:	a905      	add	r1, sp, #20
    dae2:	4638      	mov	r0, r7
    dae4:	f7fe fd92 	bl	c60c <UUSB::send(char const*)>
    {  return  ((mydevice == nullptr) || (mydevice->strbuf == nullptr)) ? nullptr : &mydevice->strbuf->buffer[mydevice->strbuf->iStrings[strbuf_t::STR_ID_PROD]]; }
    dae8:	6821      	ldr	r1, [r4, #0]
    daea:	688b      	ldr	r3, [r1, #8]
    daec:	2b00      	cmp	r3, #0
    daee:	d0c9      	beq.n	da84 <UUsbHost::PrintDeviceListChanges()+0x74>
    daf0:	691a      	ldr	r2, [r3, #16]
    daf2:	2a00      	cmp	r2, #0
    daf4:	d1bb      	bne.n	da6e <UUsbHost::PrintDeviceListChanges()+0x5e>
    daf6:	e7be      	b.n	da76 <UUsbHost::PrintDeviceListChanges()+0x66>
    usb.send("# No HID devices available\r\n");
    daf8:	4906      	ldr	r1, [pc, #24]	; (db14 <UUsbHost::PrintDeviceListChanges()+0x104>)
    dafa:	4803      	ldr	r0, [pc, #12]	; (db08 <UUsbHost::PrintDeviceListChanges()+0xf8>)
    dafc:	f7fe fd86 	bl	c60c <UUSB::send(char const*)>
}
    db00:	b01f      	add	sp, #124	; 0x7c
    db02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    db06:	bf00      	nop
    db08:	2000fac4 	.word	0x2000fac4
    db0c:	20007b74 	.word	0x20007b74
    db10:	20007b5c 	.word	0x20007b5c
    db14:	20007b94 	.word	0x20007b94
    db18:	20007b24 	.word	0x20007b24
    db1c:	20007b84 	.word	0x20007b84

0000db20 <UUsbHost::decode(char const*)>:
{
    db20:	b538      	push	{r3, r4, r5, lr}
    db22:	460d      	mov	r5, r1
    db24:	4604      	mov	r4, r0
  if (strncmp(buf, "usbhost ", 8) == 0)
    db26:	2208      	movs	r2, #8
    db28:	4927      	ldr	r1, [pc, #156]	; (dbc8 <UUsbHost::decode(char const*)+0xa8>)
    db2a:	4628      	mov	r0, r5
    db2c:	f00e f8fa 	bl	1bd24 <strncmp>
    db30:	b3a8      	cbz	r0, db9e <UUsbHost::decode(char const*)+0x7e>
  else if (strncmp(buf, "joyn", 4) == 0)
    db32:	2204      	movs	r2, #4
    db34:	4925      	ldr	r1, [pc, #148]	; (dbcc <UUsbHost::decode(char const*)+0xac>)
    db36:	4628      	mov	r0, r5
    db38:	f00e f8f4 	bl	1bd24 <strncmp>
    db3c:	b9c8      	cbnz	r0, db72 <UUsbHost::decode(char const*)+0x52>
      joysticks[joystick_index].axisChangeNotifyMask(joystick_full_notify_mask);
    db3e:	f242 1390 	movw	r3, #8592	; 0x2190
    void     axisChangeNotifyMask(uint64_t notify_mask) {axis_change_notify_mask_ = notify_mask;}
    db42:	f504 518e 	add.w	r1, r4, #4544	; 0x11c0
    db46:	f504 6548 	add.w	r5, r4, #3200	; 0xc80
    db4a:	f504 50b8 	add.w	r0, r4, #5888	; 0x1700
    db4e:	4423      	add	r3, r4
    db50:	e9d3 2300 	ldrd	r2, r3, [r3]
    db54:	e945 2302 	strd	r2, r3, [r5, #-8]
    db58:	e941 2302 	strd	r2, r3, [r1, #-8]
    db5c:	f504 51e2 	add.w	r1, r4, #7232	; 0x1c40
    db60:	e940 2302 	strd	r2, r3, [r0, #-8]
    PrintDeviceListChanges();
    db64:	4620      	mov	r0, r4
    db66:	e941 2302 	strd	r2, r3, [r1, #-8]
    db6a:	f7ff ff51 	bl	da10 <UUsbHost::PrintDeviceListChanges()>
}
    db6e:	2001      	movs	r0, #1
    db70:	bd38      	pop	{r3, r4, r5, pc}
  else if (strncmp(buf, "joyc ", 4) == 0)
    db72:	2204      	movs	r2, #4
    db74:	4916      	ldr	r1, [pc, #88]	; (dbd0 <UUsbHost::decode(char const*)+0xb0>)
    db76:	4628      	mov	r0, r5
    db78:	f00e f8d4 	bl	1bd24 <strncmp>
    db7c:	b9f0      	cbnz	r0, dbbc <UUsbHost::decode(char const*)+0x9c>
    int v = strtol(p1, nullptr, 10);
    db7e:	4601      	mov	r1, r0
    db80:	220a      	movs	r2, #10
    db82:	1d68      	adds	r0, r5, #5
    show_changed_only = v == 1;
    db84:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    int v = strtol(p1, nullptr, 10);
    db88:	f00d fc24 	bl	1b3d4 <strtol>
    show_changed_only = v == 1;
    db8c:	f1a0 0001 	sub.w	r0, r0, #1
    db90:	fab0 f080 	clz	r0, r0
    db94:	0940      	lsrs	r0, r0, #5
    db96:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
}
    db9a:	2001      	movs	r0, #1
    db9c:	bd38      	pop	{r3, r4, r5, pc}
    const char * p1 = &buf[8];
    db9e:	f105 0108 	add.w	r1, r5, #8
    int v = strtol(p1, (char **)p1, 10);
    dba2:	220a      	movs	r2, #10
    active = v;
    dba4:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    int v = strtol(p1, (char **)p1, 10);
    dba8:	4608      	mov	r0, r1
    dbaa:	f00d fc13 	bl	1b3d4 <strtol>
    active = v;
    dbae:	3800      	subs	r0, #0
    dbb0:	bf18      	it	ne
    dbb2:	2001      	movne	r0, #1
    dbb4:	f884 03a4 	strb.w	r0, [r4, #932]	; 0x3a4
}
    dbb8:	2001      	movs	r0, #1
    dbba:	bd38      	pop	{r3, r4, r5, pc}
  else if (subscribeDecode(buf)) {}
    dbbc:	4629      	mov	r1, r5
    dbbe:	4620      	mov	r0, r4
}
    dbc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  else if (subscribeDecode(buf)) {}
    dbc4:	f7fe bb3a 	b.w	c23c <USubss::subscribeDecode(char const*)>
    dbc8:	20007c78 	.word	0x20007c78
    dbcc:	20007c84 	.word	0x20007c84
    dbd0:	20007c8c 	.word	0x20007c8c

0000dbd4 <_GLOBAL__sub_I_usbhost>:
}
    dbd4:	b510      	push	{r4, lr}
UUsbHost usbhost;
    dbd6:	4c05      	ldr	r4, [pc, #20]	; (dbec <_GLOBAL__sub_I_usbhost+0x18>)
    dbd8:	4620      	mov	r0, r4
    dbda:	f7ff f9dd 	bl	cf98 <UUsbHost::UUsbHost()>
    dbde:	4620      	mov	r0, r4
    dbe0:	4a03      	ldr	r2, [pc, #12]	; (dbf0 <_GLOBAL__sub_I_usbhost+0x1c>)
    dbe2:	4904      	ldr	r1, [pc, #16]	; (dbf4 <_GLOBAL__sub_I_usbhost+0x20>)
}
    dbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
UUsbHost usbhost;
    dbe8:	f00b ba16 	b.w	19018 <__aeabi_atexit>
    dbec:	2000b400 	.word	0x2000b400
    dbf0:	20008f80 	.word	0x20008f80
    dbf4:	0000cf79 	.word	0x0000cf79

0000dbf8 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    dbf8:	b538      	push	{r3, r4, r5, lr}
    dbfa:	4604      	mov	r4, r0
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
#endif
#else
             adc0_obj(0, channel2sc1aADC0, ADC0_START)
    dbfc:	4b0a      	ldr	r3, [pc, #40]	; (dc28 <ADC::ADC()+0x30>)
    dbfe:	4a0b      	ldr	r2, [pc, #44]	; (dc2c <ADC::ADC()+0x34>)
    dc00:	2100      	movs	r1, #0
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
    dc02:	f104 0534 	add.w	r5, r4, #52	; 0x34
             adc0_obj(0, channel2sc1aADC0, ADC0_START)
    dc06:	f000 fb59 	bl	e2bc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
    dc0a:	4b09      	ldr	r3, [pc, #36]	; (dc30 <ADC::ADC()+0x38>)
    dc0c:	2101      	movs	r1, #1
    dc0e:	4a09      	ldr	r2, [pc, #36]	; (dc34 <ADC::ADC()+0x3c>)
    dc10:	4628      	mov	r0, r5
    dc12:	f000 fb53 	bl	e2bc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>
    dc16:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    dc18:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
    dc1a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    dc1e:	e9c4 451b 	strd	r4, r5, [r4, #108]	; 0x6c
    dc22:	e9c4 451d 	strd	r4, r5, [r4, #116]	; 0x74
}
    dc26:	bd38      	pop	{r3, r4, r5, pc}
    dc28:	400c4000 	.word	0x400c4000
    dc2c:	20003c4c 	.word	0x20003c4c
    dc30:	400c8000 	.word	0x400c8000
    dc34:	20003c78 	.word	0x20003c78

0000dc38 <ADC::analogRead(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->analogRead(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    dc38:	1c53      	adds	r3, r2, #1
{
    dc3a:	b570      	push	{r4, r5, r6, lr}
    dc3c:	4604      	mov	r4, r0
    if (adc_num == -1)
    dc3e:	d00c      	beq.n	dc5a <ADC::analogRead(unsigned char, signed char)+0x22>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return ADC_ERROR_VALUE; // all others are invalid
        }
    }
    else if (adc_num == 0)
    dc40:	b132      	cbz	r2, dc50 <ADC::analogRead(unsigned char, signed char)+0x18>
    { // user wants ADC0
        return adc0->analogRead(pin);
    }
    else if (adc_num == 1)
    dc42:	2a01      	cmp	r2, #1
    dc44:	d12d      	bne.n	dca2 <ADC::analogRead(unsigned char, signed char)+0x6a>
    { // user wants ADC 1
        return adc1->analogRead(pin);
    dc46:	6f00      	ldr	r0, [r0, #112]	; 0x70
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    return ADC_ERROR_VALUE;
#endif
}
    dc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->analogRead(pin);
    dc4c:	f000 bb94 	b.w	e378 <ADC_Module::analogRead(unsigned char)>
        return adc0->analogRead(pin);
    dc50:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
}
    dc52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->analogRead(pin);
    dc56:	f000 bb8f 	b.w	e378 <ADC_Module::analogRead(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    dc5a:	460d      	mov	r5, r1
    dc5c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    dc5e:	f000 fb7f 	bl	e360 <ADC_Module::checkPin(unsigned char)>
    dc62:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    dc64:	4629      	mov	r1, r5
    dc66:	6f20      	ldr	r0, [r4, #112]	; 0x70
    dc68:	f000 fb7a 	bl	e360 <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    dc6c:	b166      	cbz	r6, dc88 <ADC::analogRead(unsigned char, signed char)+0x50>
    dc6e:	b190      	cbz	r0, dc96 <ADC::analogRead(unsigned char, signed char)+0x5e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    dc70:	e9d4 301b 	ldrd	r3, r0, [r4, #108]	; 0x6c
    dc74:	7c59      	ldrb	r1, [r3, #17]
    dc76:	7c42      	ldrb	r2, [r0, #17]
    dc78:	4291      	cmp	r1, r2
                return adc1->analogRead(pin);
    dc7a:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    dc7c:	d8e4      	bhi.n	dc48 <ADC::analogRead(unsigned char, signed char)+0x10>
                return adc0->analogRead(pin);
    dc7e:	4618      	mov	r0, r3
}
    dc80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->analogRead(pin);
    dc84:	f000 bb78 	b.w	e378 <ADC_Module::analogRead(unsigned char)>
        else if (adc1Pin)
    dc88:	b198      	cbz	r0, dcb2 <ADC::analogRead(unsigned char, signed char)+0x7a>
            return adc1->analogRead(pin);
    dc8a:	4629      	mov	r1, r5
    dc8c:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    dc8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->analogRead(pin);
    dc92:	f000 bb71 	b.w	e378 <ADC_Module::analogRead(unsigned char)>
            return adc0->analogRead(pin);
    dc96:	4629      	mov	r1, r5
    dc98:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    dc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->analogRead(pin);
    dc9e:	f000 bb6b 	b.w	e378 <ADC_Module::analogRead(unsigned char)>
    adc0->fail_flag |= ADC_ERROR::OTHER;
    dca2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    return ADC_ERROR_VALUE;
    dca4:	480a      	ldr	r0, [pc, #40]	; (dcd0 <ADC::analogRead(unsigned char, signed char)+0x98>)
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    dca6:	8a53      	ldrh	r3, [r2, #18]
    dca8:	b29b      	uxth	r3, r3
    dcaa:	f043 0301 	orr.w	r3, r3, #1
    dcae:	8253      	strh	r3, [r2, #18]
}
    dcb0:	bd70      	pop	{r4, r5, r6, pc}
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    dcb2:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	; 0x6c
            return ADC_ERROR_VALUE; // all others are invalid
    dcb6:	4806      	ldr	r0, [pc, #24]	; (dcd0 <ADC::analogRead(unsigned char, signed char)+0x98>)
    dcb8:	8a4b      	ldrh	r3, [r1, #18]
    dcba:	b29b      	uxth	r3, r3
    dcbc:	f043 0304 	orr.w	r3, r3, #4
    dcc0:	824b      	strh	r3, [r1, #18]
    dcc2:	8a53      	ldrh	r3, [r2, #18]
    dcc4:	b29b      	uxth	r3, r3
    dcc6:	f043 0304 	orr.w	r3, r3, #4
    dcca:	8253      	strh	r3, [r2, #18]
}
    dccc:	bd70      	pop	{r4, r5, r6, pc}
    dcce:	bf00      	nop
    dcd0:	fffeee90 	.word	0xfffeee90

0000dcd4 <ADC::startSingleRead(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startSingleRead(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    dcd4:	1c53      	adds	r3, r2, #1
{
    dcd6:	b570      	push	{r4, r5, r6, lr}
    dcd8:	4604      	mov	r4, r0
    if (adc_num == -1)
    dcda:	d00f      	beq.n	dcfc <ADC::startSingleRead(unsigned char, signed char)+0x28>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    dcdc:	b14a      	cbz	r2, dcf2 <ADC::startSingleRead(unsigned char, signed char)+0x1e>
    { // user wants ADC0
        return adc0->startSingleRead(pin);
    }
    else if (adc_num == 1)
    dcde:	2a01      	cmp	r2, #1
    dce0:	d023      	beq.n	dd2a <ADC::startSingleRead(unsigned char, signed char)+0x56>
    { // user wants ADC 1
        return adc1->startSingleRead(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    dce2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    return false;
    dce4:	2000      	movs	r0, #0
    dce6:	8a53      	ldrh	r3, [r2, #18]
    dce8:	b29b      	uxth	r3, r3
    dcea:	f043 0301 	orr.w	r3, r3, #1
    dcee:	8253      	strh	r3, [r2, #18]
#endif
}
    dcf0:	bd70      	pop	{r4, r5, r6, pc}
        return adc0->startSingleRead(pin);
    dcf2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
}
    dcf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startSingleRead(pin);
    dcf8:	f000 bbb2 	b.w	e460 <ADC_Module::startSingleRead(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    dcfc:	460d      	mov	r5, r1
    dcfe:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    dd00:	f000 fb2e 	bl	e360 <ADC_Module::checkPin(unsigned char)>
    dd04:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    dd06:	4629      	mov	r1, r5
    dd08:	6f20      	ldr	r0, [r4, #112]	; 0x70
    dd0a:	f000 fb29 	bl	e360 <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    dd0e:	b18e      	cbz	r6, dd34 <ADC::startSingleRead(unsigned char, signed char)+0x60>
    dd10:	b1f0      	cbz	r0, dd50 <ADC::startSingleRead(unsigned char, signed char)+0x7c>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    dd12:	e9d4 301b 	ldrd	r3, r0, [r4, #108]	; 0x6c
    dd16:	7c59      	ldrb	r1, [r3, #17]
    dd18:	7c42      	ldrb	r2, [r0, #17]
    dd1a:	4291      	cmp	r1, r2
                return adc1->startSingleRead(pin);
    dd1c:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    dd1e:	d805      	bhi.n	dd2c <ADC::startSingleRead(unsigned char, signed char)+0x58>
                return adc0->startSingleRead(pin);
    dd20:	4618      	mov	r0, r3
}
    dd22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startSingleRead(pin);
    dd26:	f000 bb9b 	b.w	e460 <ADC_Module::startSingleRead(unsigned char)>
        return adc1->startSingleRead(pin);
    dd2a:	6f00      	ldr	r0, [r0, #112]	; 0x70
}
    dd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startSingleRead(pin);
    dd30:	f000 bb96 	b.w	e460 <ADC_Module::startSingleRead(unsigned char)>
        else if (adc1Pin)
    dd34:	b990      	cbnz	r0, dd5c <ADC::startSingleRead(unsigned char, signed char)+0x88>
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    dd36:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	; 0x6c
    dd3a:	8a4b      	ldrh	r3, [r1, #18]
    dd3c:	b29b      	uxth	r3, r3
    dd3e:	f043 0304 	orr.w	r3, r3, #4
    dd42:	824b      	strh	r3, [r1, #18]
    dd44:	8a53      	ldrh	r3, [r2, #18]
    dd46:	b29b      	uxth	r3, r3
    dd48:	f043 0304 	orr.w	r3, r3, #4
    dd4c:	8253      	strh	r3, [r2, #18]
}
    dd4e:	bd70      	pop	{r4, r5, r6, pc}
            return adc0->startSingleRead(pin);
    dd50:	4629      	mov	r1, r5
    dd52:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    dd54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startSingleRead(pin);
    dd58:	f000 bb82 	b.w	e460 <ADC_Module::startSingleRead(unsigned char)>
            return adc1->startSingleRead(pin);
    dd5c:	4629      	mov	r1, r5
    dd5e:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    dd60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startSingleRead(pin);
    dd64:	f000 bb7c 	b.w	e460 <ADC_Module::startSingleRead(unsigned char)>

0000dd68 <ADC::readSingle(signed char)>:
int ADC::readSingle(int8_t adc_num)
{
#ifdef ADC_SINGLE_ADC
    return adc0->readSingle();
#else
    if (adc_num == 1)
    dd68:	2901      	cmp	r1, #1
    *   otherwise values larger than 3.3/2 V are interpreted as negative!
    */
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
    dd6a:	bf0c      	ite	eq
    dd6c:	6f03      	ldreq	r3, [r0, #112]	; 0x70
    dd6e:	6ec3      	ldrne	r3, [r0, #108]	; 0x6c
    dd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd72:	6a58      	ldr	r0, [r3, #36]	; 0x24
    dd74:	b200      	sxth	r0, r0
    { // user wants ADC 1, do nothing if it's a Teensy 3.0
        return adc1->readSingle();
    }
    return adc0->readSingle();
#endif
}
    dd76:	4770      	bx	lr

0000dd78 <ADC_Module::calibrate()>:
    __disable_irq();
    dd78:	b672      	cpsid	i
    calibrating = 1;
    dd7a:	2301      	movs	r3, #1
    atomic::clearBitFlag(adc_regs.GC, ADC_GC_CAL);
    dd7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    calibrating = 1;
    dd7e:	7543      	strb	r3, [r0, #21]
    }

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
    dd80:	b672      	cpsid	i
        reg &= ~flag;
    dd82:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dd84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dd88:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dd8a:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GS, ADC_GS_CALF);
    dd8c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd8e:	b672      	cpsid	i
        reg |= flag;
    dd90:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    dd92:	f043 0302 	orr.w	r3, r3, #2
    dd96:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
    dd98:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
    dd9a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dd9c:	b672      	cpsid	i
        reg |= flag;
    dd9e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dda4:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dda6:	b662      	cpsie	i
    __enable_irq();
    dda8:	b662      	cpsie	i
}
    ddaa:	4770      	bx	lr

0000ddac <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)>:
    if (analog_reference_internal == ref_type)
    ddac:	7f43      	ldrb	r3, [r0, #29]
    ddae:	428b      	cmp	r3, r1
    ddb0:	d01b      	beq.n	ddea <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0x3e>
    if (ref_type == ADC_REF_SOURCE::REF_ALT)
    ddb2:	2901      	cmp	r1, #1
    ddb4:	d023      	beq.n	ddfe <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0x52>
    else if (ref_type == ADC_REF_SOURCE::REF_DEFAULT)
    ddb6:	b1c9      	cbz	r1, ddec <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0x40>
    __disable_irq();
    ddb8:	b672      	cpsid	i
    calibrating = 1;
    ddba:	2301      	movs	r3, #1
    atomic::clearBitFlag(adc_regs.GC, ADC_GC_CAL);
    ddbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
    calibrating = 1;
    ddbe:	7543      	strb	r3, [r0, #21]
        __disable_irq();
    ddc0:	b672      	cpsid	i
        reg &= ~flag;
    ddc2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ddc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ddc8:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    ddca:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GS, ADC_GS_CALF);
    ddcc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    ddce:	b672      	cpsid	i
        reg |= flag;
    ddd0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    ddd2:	f043 0302 	orr.w	r3, r3, #2
    ddd6:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
    ddd8:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
    ddda:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    dddc:	b672      	cpsid	i
        reg |= flag;
    ddde:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dde4:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    dde6:	b662      	cpsie	i
    __enable_irq();
    dde8:	b662      	cpsie	i
}
    ddea:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
    ddec:	6a82      	ldr	r2, [r0, #40]	; 0x28
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    ddee:	7741      	strb	r1, [r0, #29]
        __disable_irq();
    ddf0:	b672      	cpsid	i
        reg &= ~flag;
    ddf2:	6c53      	ldr	r3, [r2, #68]	; 0x44
    ddf4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    ddf8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    ddfa:	b662      	cpsie	i
    }
    ddfc:	e7dc      	b.n	ddb8 <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0xc>
        analog_reference_internal = ADC_REF_SOURCE::REF_ALT;
    ddfe:	7741      	strb	r1, [r0, #29]
    de00:	e7da      	b.n	ddb8 <ADC_Module::setReference(ADC_settings::ADC_REFERENCE)+0xc>
    de02:	bf00      	nop

0000de04 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
    if (speed == conversion_speed)
    de04:	7f83      	ldrb	r3, [r0, #30]
    de06:	428b      	cmp	r3, r1
    de08:	f000 80e0 	beq.w	dfcc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1c8>
{
    de0c:	b470      	push	{r4, r5, r6}
    switch (speed)
    de0e:	2904      	cmp	r1, #4
    de10:	f200 810c 	bhi.w	e02c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>
    de14:	e8df f011 	tbh	[pc, r1, lsl #1]
    de18:	00730025 	.word	0x00730025
    de1c:	00b50090 	.word	0x00b50090
    de20:	0005      	.short	0x0005
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    de22:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de24:	b672      	cpsid	i
        reg |= flag;
    de26:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    de2c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de2e:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);     // enable ADACK (takes max 5us to be ready)
    de30:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de32:	b672      	cpsid	i
        reg |= flag;
    de34:	6c93      	ldr	r3, [r2, #72]	; 0x48
    de36:	f043 0301 	orr.w	r3, r3, #1
    de3a:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    de3c:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3)); // select ADACK as clock source
    de3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de40:	b672      	cpsid	i
        reg |= flag;
    de42:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de44:	f043 0303 	orr.w	r3, r3, #3
    de48:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de4a:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3)); // select no dividers
    de4c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de4e:	b672      	cpsid	i
        reg &= ~flag;
    de50:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de52:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    de56:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de58:	b662      	cpsie	i
}
    de5a:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
    de5c:	7781      	strb	r1, [r0, #30]
    calibrate();
    de5e:	f7ff bf8b 	b.w	dd78 <ADC_Module::calibrate()>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    de62:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de64:	b672      	cpsid	i
        reg &= ~flag;
    de66:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    de6c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de6e:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    de70:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    de72:	b672      	cpsid	i
        reg |= flag;
    de74:	6c53      	ldr	r3, [r2, #68]	; 0x44
    de76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de7a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    de7c:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
    de7e:	4a6f      	ldr	r2, [pc, #444]	; (e03c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
    de80:	4b6f      	ldr	r3, [pc, #444]	; (e040 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    de82:	6814      	ldr	r4, [r2, #0]
    de84:	429c      	cmp	r4, r3
    de86:	f080 8084 	bcs.w	df92 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x18e>
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
    de8a:	4b6e      	ldr	r3, [pc, #440]	; (e044 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    de8c:	429c      	cmp	r4, r3
    de8e:	d274      	bcs.n	df7a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x176>
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
    de90:	4b6d      	ldr	r3, [pc, #436]	; (e048 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
    de92:	429c      	cmp	r4, r3
    de94:	f080 809b 	bcs.w	dfce <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>
        else if (f_adc_clock / 2 >= ADC_MIN_FREQ_16BITS)
    de98:	4b6c      	ldr	r3, [pc, #432]	; (e04c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x248>)
    de9a:	2200      	movs	r2, #0
    de9c:	429c      	cmp	r4, r3
    de9e:	4616      	mov	r6, r2
    dea0:	bf34      	ite	cc
    dea2:	2400      	movcc	r4, #0
    dea4:	2401      	movcs	r4, #1
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
    dea6:	6a85      	ldr	r5, [r0, #40]	; 0x28
        __disable_irq();
    dea8:	b672      	cpsid	i
        reg &= ~flag;
    deaa:	6cab      	ldr	r3, [r5, #72]	; 0x48
    deac:	f023 0301 	bic.w	r3, r3, #1
    deb0:	64ab      	str	r3, [r5, #72]	; 0x48
        __enable_irq();
    deb2:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
    deb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    deb6:	2a00      	cmp	r2, #0
    deb8:	f000 8081 	beq.w	dfbe <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ba>
        __disable_irq();
    debc:	b672      	cpsid	i
        reg |= flag;
    debe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dec0:	f042 0201 	orr.w	r2, r2, #1
    dec4:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dec6:	b662      	cpsie	i
        __disable_irq();
    dec8:	b672      	cpsid	i
        reg &= ~flag;
    deca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    decc:	f022 0202 	bic.w	r2, r2, #2
    ded0:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    ded2:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
    ded4:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    ded6:	2c00      	cmp	r4, #0
    ded8:	d05f      	beq.n	df9a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x196>
        __disable_irq();
    deda:	b672      	cpsid	i
        reg |= flag;
    dedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dede:	f042 0220 	orr.w	r2, r2, #32
    dee2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dee4:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
    dee6:	2e00      	cmp	r6, #0
    dee8:	d05f      	beq.n	dfaa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1a6>
        __disable_irq();
    deea:	b672      	cpsid	i
        reg |= flag;
    deec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    deee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    def2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    def4:	b662      	cpsie	i
}
    def6:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
    def8:	7781      	strb	r1, [r0, #30]
    calibrate();
    defa:	f7ff bf3d 	b.w	dd78 <ADC_Module::calibrate()>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    defe:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    df00:	b672      	cpsid	i
        reg &= ~flag;
    df02:	6c53      	ldr	r3, [r2, #68]	; 0x44
    df04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    df08:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    df0a:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    df0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    df0e:	b672      	cpsid	i
        reg &= ~flag;
    df10:	6c53      	ldr	r3, [r2, #68]	; 0x44
    df12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    df16:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    df18:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_MEDIUM_SPEED(ADC_F_BUS);
    df1a:	4a48      	ldr	r2, [pc, #288]	; (e03c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
    df1c:	4b48      	ldr	r3, [pc, #288]	; (e040 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
    df1e:	6812      	ldr	r2, [r2, #0]
    df20:	429a      	cmp	r2, r3
    df22:	d258      	bcs.n	dfd6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1d2>
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
    df24:	4b47      	ldr	r3, [pc, #284]	; (e044 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
    df26:	429a      	cmp	r2, r3
    df28:	d268      	bcs.n	dffc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1f8>
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
    df2a:	4b47      	ldr	r3, [pc, #284]	; (e048 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
    df2c:	429a      	cmp	r2, r3
    df2e:	d273      	bcs.n	e018 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x214>
    df30:	2200      	movs	r2, #0
    df32:	4616      	mov	r6, r2
    df34:	4614      	mov	r4, r2
    df36:	e7b6      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    df38:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    df3a:	b672      	cpsid	i
        reg |= flag;
    df3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    df3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    df42:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    df44:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
    df46:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    df48:	b672      	cpsid	i
        reg &= ~flag;
    df4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    df4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    df50:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    df52:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_HIGH_SPEED(ADC_F_BUS);
    df54:	4b39      	ldr	r3, [pc, #228]	; (e03c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock <= ADC_MAX_FREQ)
    df56:	4a3e      	ldr	r2, [pc, #248]	; (e050 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24c>)
    df58:	681b      	ldr	r3, [r3, #0]
    df5a:	4293      	cmp	r3, r2
    df5c:	d9e8      	bls.n	df30 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x12c>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ)
    df5e:	4a3d      	ldr	r2, [pc, #244]	; (e054 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x250>)
    df60:	4293      	cmp	r3, r2
    df62:	d955      	bls.n	e010 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x20c>
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
    df64:	4a3c      	ldr	r2, [pc, #240]	; (e058 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x254>)
    df66:	4293      	cmp	r3, r2
    df68:	d931      	bls.n	dfce <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
    df6a:	f102 6218 	add.w	r2, r2, #159383552	; 0x9800000
    df6e:	f502 2216 	add.w	r2, r2, #614400	; 0x96000
    df72:	f602 0204 	addw	r2, r2, #2052	; 0x804
    df76:	4293      	cmp	r3, r2
    df78:	d80b      	bhi.n	df92 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x18e>
    df7a:	2601      	movs	r6, #1
    df7c:	2200      	movs	r2, #0
    df7e:	4634      	mov	r4, r6
    df80:	e791      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
    df82:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
    df84:	b672      	cpsid	i
        reg &= ~flag;
    df86:	6c53      	ldr	r3, [r2, #68]	; 0x44
    df88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    df8c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    df8e:	b662      	cpsie	i
    if (is_adack)
    df90:	e74e      	b.n	de30 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x2c>
    df92:	2201      	movs	r2, #1
    df94:	4616      	mov	r6, r2
    df96:	4614      	mov	r4, r2
    df98:	e785      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        __disable_irq();
    df9a:	b672      	cpsid	i
        reg &= ~flag;
    df9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    df9e:	f022 0220 	bic.w	r2, r2, #32
    dfa2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dfa4:	b662      	cpsie	i
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
    dfa6:	2e00      	cmp	r6, #0
    dfa8:	d19f      	bne.n	deea <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xe6>
        __disable_irq();
    dfaa:	b672      	cpsid	i
        reg &= ~flag;
    dfac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dfae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    dfb2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dfb4:	b662      	cpsie	i
}
    dfb6:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
    dfb8:	7781      	strb	r1, [r0, #30]
    calibrate();
    dfba:	f7ff bedd 	b.w	dd78 <ADC_Module::calibrate()>
        __disable_irq();
    dfbe:	b672      	cpsid	i
        reg &= ~flag;
    dfc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dfc2:	f022 0201 	bic.w	r2, r2, #1
    dfc6:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    dfc8:	b662      	cpsie	i
    }
    dfca:	e77d      	b.n	dec8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xc4>
    dfcc:	4770      	bx	lr
    dfce:	2200      	movs	r2, #0
    dfd0:	2601      	movs	r6, #1
    dfd2:	4614      	mov	r4, r2
    dfd4:	e767      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    dfd6:	4b1f      	ldr	r3, [pc, #124]	; (e054 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x250>)
    dfd8:	429a      	cmp	r2, r3
    dfda:	d923      	bls.n	e024 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x220>
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
    dfdc:	4b1e      	ldr	r3, [pc, #120]	; (e058 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x254>)
    dfde:	429a      	cmp	r2, r3
    dfe0:	d91e      	bls.n	e020 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
    dfe2:	f103 6318 	add.w	r3, r3, #159383552	; 0x9800000
            if ((state >> __builtin_ctzl(flag)) & 0x1)
    dfe6:	2601      	movs	r6, #1
    dfe8:	f503 2316 	add.w	r3, r3, #614400	; 0x96000
    dfec:	4634      	mov	r4, r6
    dfee:	f603 0304 	addw	r3, r3, #2052	; 0x804
    dff2:	429a      	cmp	r2, r3
    dff4:	bf94      	ite	ls
    dff6:	2200      	movls	r2, #0
    dff8:	2201      	movhi	r2, #1
    dffa:	e754      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
    dffc:	4b14      	ldr	r3, [pc, #80]	; (e050 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24c>)
    dffe:	429a      	cmp	r2, r3
    e000:	d90a      	bls.n	e018 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x214>
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
    e002:	2420      	movs	r4, #32
            return ADC_CFG1_HI_SPEED_16_BITS + 0x20;
    e004:	3420      	adds	r4, #32
    e006:	2200      	movs	r2, #0
    e008:	2601      	movs	r6, #1
    e00a:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e00e:	e74a      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
    e010:	2200      	movs	r2, #0
    e012:	2401      	movs	r4, #1
    e014:	4616      	mov	r6, r2
    e016:	e746      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
    e018:	2600      	movs	r6, #0
    e01a:	2401      	movs	r4, #1
    e01c:	4632      	mov	r2, r6
    e01e:	e742      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
    e020:	2440      	movs	r4, #64	; 0x40
    e022:	e7ef      	b.n	e004 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x200>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
    e024:	2400      	movs	r4, #0
    e026:	2601      	movs	r6, #1
    e028:	4622      	mov	r2, r4
            return ADC_CFG1_HI_SPEED_16_BITS + 0x20;
    e02a:	e73c      	b.n	dea6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    e02c:	8a43      	ldrh	r3, [r0, #18]
    e02e:	b29b      	uxth	r3, r3
    e030:	f043 0301 	orr.w	r3, r3, #1
}
    e034:	bc70      	pop	{r4, r5, r6}
    e036:	8243      	strh	r3, [r0, #18]
    e038:	4770      	bx	lr
    e03a:	bf00      	nop
    e03c:	20009534 	.word	0x20009534
    e040:	03d09000 	.word	0x03d09000
    e044:	01e84800 	.word	0x01e84800
    e048:	00f42400 	.word	0x00f42400
    e04c:	007a1200 	.word	0x007a1200
    e050:	02625a00 	.word	0x02625a00
    e054:	04c4b401 	.word	0x04c4b401
    e058:	09896803 	.word	0x09896803

0000e05c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    e05c:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    e05e:	7d43      	ldrb	r3, [r0, #21]
{
    e060:	4604      	mov	r4, r0
    e062:	460d      	mov	r5, r1
    if (calibrating)
    e064:	b9eb      	cbnz	r3, e0a2 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x46>
    switch (speed)
    e066:	2d07      	cmp	r5, #7
    e068:	d819      	bhi.n	e09e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x42>
    e06a:	e8df f005 	tbb	[pc, r5]
    e06e:	331d      	.short	0x331d
    e070:	59534d40 	.word	0x59534d40
    e074:	045f      	.short	0x045f
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    e076:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e078:	b672      	cpsid	i
        reg &= ~flag;
    e07a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e07c:	f023 0310 	bic.w	r3, r3, #16
    e080:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e082:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
    e084:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    e086:	b672      	cpsid	i
        reg &= ~flag;
    e088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e08a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    e08e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e090:	b662      	cpsie	i
        __disable_irq();
    e092:	b672      	cpsid	i
        reg &= ~flag;
    e094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e096:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    e09a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e09c:	b662      	cpsie	i
    sampling_speed = speed;
    e09e:	77e5      	strb	r5, [r4, #31]
}
    e0a0:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    e0a2:	f000 f849 	bl	e138 <ADC_Module::wait_for_cal()>
    e0a6:	e7de      	b.n	e066 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    e0a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e0aa:	b672      	cpsid	i
        reg |= flag;
    e0ac:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e0ae:	f043 0310 	orr.w	r3, r3, #16
        reg &= ~flag;
    e0b2:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e0b4:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
    e0b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    e0b8:	b672      	cpsid	i
        reg |= flag;
    e0ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e0bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        reg &= ~flag;
    e0c0:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e0c2:	b662      	cpsie	i
        __disable_irq();
    e0c4:	b672      	cpsid	i
        reg |= flag;
    e0c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e0c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    e0cc:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e0ce:	b662      	cpsie	i
    sampling_speed = speed;
    e0d0:	77e5      	strb	r5, [r4, #31]
}
    e0d2:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    e0d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e0d6:	b672      	cpsid	i
        reg |= flag;
    e0d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e0da:	f043 0310 	orr.w	r3, r3, #16
    e0de:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e0e0:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
    e0e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    e0e4:	b672      	cpsid	i
        reg &= ~flag;
    e0e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e0e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    e0ec:	e7e8      	b.n	e0c0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x64>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    e0ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e0f0:	b672      	cpsid	i
        reg |= flag;
    e0f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e0f4:	f043 0310 	orr.w	r3, r3, #16
        reg &= ~flag;
    e0f8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e0fa:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
    e0fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
    e0fe:	b672      	cpsid	i
        reg |= flag;
    e100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    e106:	e7c2      	b.n	e08e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x32>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
    e108:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e10a:	b672      	cpsid	i
        reg |= flag;
    e10c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e10e:	f043 0310 	orr.w	r3, r3, #16
    e112:	e7b5      	b.n	e080 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x24>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    e114:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e116:	b672      	cpsid	i
        reg &= ~flag;
    e118:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e11a:	f023 0310 	bic.w	r3, r3, #16
    e11e:	e7c8      	b.n	e0b2 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x56>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    e120:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e122:	b672      	cpsid	i
        reg &= ~flag;
    e124:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e126:	f023 0310 	bic.w	r3, r3, #16
    e12a:	e7d8      	b.n	e0de <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x82>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
    e12c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e12e:	b672      	cpsid	i
        reg &= ~flag;
    e130:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e132:	f023 0310 	bic.w	r3, r3, #16
    e136:	e7df      	b.n	e0f8 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x9c>

0000e138 <ADC_Module::wait_for_cal()>:
{
    e138:	b538      	push	{r3, r4, r5, lr}
    e13a:	2100      	movs	r1, #0
    while (atomic::getBitFlag(adc_regs.GC, ADC_GC_CAL))
    e13c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if (init_calib)
    e13e:	7d82      	ldrb	r2, [r0, #22]
    }

    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
    e140:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    e142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    calibrating = 0;
    e144:	7541      	strb	r1, [r0, #21]
    if (init_calib)
    e146:	b902      	cbnz	r2, e14a <ADC_Module::wait_for_cal()+0x12>
}
    e148:	bd38      	pop	{r3, r4, r5, pc}
    e14a:	4604      	mov	r4, r0
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    e14c:	2101      	movs	r1, #1
    e14e:	f7ff fe59 	bl	de04 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
        setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    e152:	2103      	movs	r1, #3
    e154:	f7ff ff82 	bl	e05c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    if (calibrating)
    e158:	7d63      	ldrb	r3, [r4, #21]
    e15a:	b993      	cbnz	r3, e182 <ADC_Module::wait_for_cal()+0x4a>
        atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);
    e15c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e15e:	b672      	cpsid	i
        reg |= flag;
    e160:	6c93      	ldr	r3, [r2, #72]	; 0x48
    e162:	f043 0320 	orr.w	r3, r3, #32
    e166:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    e168:	b662      	cpsie	i
            atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    e16a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e16c:	b672      	cpsid	i
        reg &= ~flag;
    e16e:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    e174:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e176:	b662      	cpsie	i
    analog_num_average = num;
    e178:	2204      	movs	r2, #4
        init_calib = 0; // clear
    e17a:	2300      	movs	r3, #0
    analog_num_average = num;
    e17c:	7722      	strb	r2, [r4, #28]
        init_calib = 0; // clear
    e17e:	75a3      	strb	r3, [r4, #22]
}
    e180:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    e182:	4620      	mov	r0, r4
    e184:	f7ff ffd8 	bl	e138 <ADC_Module::wait_for_cal()>
    e188:	e7e8      	b.n	e15c <ADC_Module::wait_for_cal()+0x24>
    e18a:	bf00      	nop

0000e18c <ADC_Module::setResolution(unsigned char)>:
{
    e18c:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    e18e:	7dc3      	ldrb	r3, [r0, #23]
    e190:	428b      	cmp	r3, r1
    e192:	d019      	beq.n	e1c8 <ADC_Module::setResolution(unsigned char)+0x3c>
    if (calibrating)
    e194:	7d43      	ldrb	r3, [r0, #21]
    e196:	4604      	mov	r4, r0
    e198:	460d      	mov	r5, r1
    e19a:	bb03      	cbnz	r3, e1de <ADC_Module::setResolution(unsigned char)+0x52>
    if (bits <= 9)
    e19c:	2d09      	cmp	r5, #9
    e19e:	d914      	bls.n	e1ca <ADC_Module::setResolution(unsigned char)+0x3e>
    else if (bits <= 11)
    e1a0:	2d0b      	cmp	r5, #11
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
    e1a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    else if (bits <= 11)
    e1a4:	d81e      	bhi.n	e1e4 <ADC_Module::setResolution(unsigned char)+0x58>
        __disable_irq();
    e1a6:	b672      	cpsid	i
        reg |= flag;
    e1a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e1aa:	f042 0204 	orr.w	r2, r2, #4
    e1ae:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e1b0:	b662      	cpsie	i
        __disable_irq();
    e1b2:	b672      	cpsid	i
        reg &= ~flag;
    e1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e1b6:	f022 0208 	bic.w	r2, r2, #8
    e1ba:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e1bc:	b662      	cpsie	i
        analog_max_val = 1023;
    e1be:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e1c2:	230a      	movs	r3, #10
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    e1c4:	61a2      	str	r2, [r4, #24]
    analog_res_bits = config;
    e1c6:	75e3      	strb	r3, [r4, #23]
}
    e1c8:	bd38      	pop	{r3, r4, r5, pc}
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
    e1ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e1cc:	b672      	cpsid	i
        reg &= ~flag;
    e1ce:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e1d0:	f023 030c 	bic.w	r3, r3, #12
    e1d4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e1d6:	b662      	cpsie	i
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    e1d8:	22ff      	movs	r2, #255	; 0xff
    e1da:	2308      	movs	r3, #8
    e1dc:	e7f2      	b.n	e1c4 <ADC_Module::setResolution(unsigned char)+0x38>
        wait_for_cal();
    e1de:	f7ff ffab 	bl	e138 <ADC_Module::wait_for_cal()>
    e1e2:	e7db      	b.n	e19c <ADC_Module::setResolution(unsigned char)+0x10>
        __disable_irq();
    e1e4:	b672      	cpsid	i
        reg &= ~flag;
    e1e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e1e8:	f022 0204 	bic.w	r2, r2, #4
    e1ec:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e1ee:	b662      	cpsie	i
        __disable_irq();
    e1f0:	b672      	cpsid	i
        reg |= flag;
    e1f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e1f4:	f042 0208 	orr.w	r2, r2, #8
    e1f8:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
    e1fa:	b662      	cpsie	i
        analog_max_val = 4095;
    e1fc:	f640 72ff 	movw	r2, #4095	; 0xfff
    e200:	230c      	movs	r3, #12
    e202:	e7df      	b.n	e1c4 <ADC_Module::setResolution(unsigned char)+0x38>

0000e204 <ADC_Module::analog_init()>:
{
    e204:	b510      	push	{r4, lr}

    //! Switch on clock to ADC
    void startClock()
    {
#if defined(ADC_TEENSY_4)
        if (ADC_num == 0)
    e206:	7d03      	ldrb	r3, [r0, #20]
    e208:	4604      	mov	r4, r0
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
    e20a:	4a2b      	ldr	r2, [pc, #172]	; (e2b8 <ADC_Module::analog_init()+0xb4>)
        if (ADC_num == 0)
    e20c:	2b00      	cmp	r3, #0
    e20e:	d149      	bne.n	e2a4 <ADC_Module::analog_init()+0xa0>
            CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
    e210:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    e212:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    e216:	66d3      	str	r3, [r2, #108]	; 0x6c
    analog_res_bits = 0;
    e218:	2300      	movs	r3, #0
    analog_num_average = 0;
    e21a:	f44f 7200 	mov.w	r2, #512	; 0x200
    atomic::setBitFlag(adc_regs.CFG, ADC_CFG_OVWREN);
    e21e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    analog_res_bits = 0;
    e220:	75e3      	strb	r3, [r4, #23]
    analog_max_val = 0;
    e222:	61a3      	str	r3, [r4, #24]
    analog_num_average = 0;
    e224:	83a2      	strh	r2, [r4, #28]
    interrupts_enabled = false;
    e226:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        __disable_irq();
    e22a:	b672      	cpsid	i
        reg |= flag;
    e22c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    e22e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    e232:	644a      	str	r2, [r1, #68]	; 0x44
        __enable_irq();
    e234:	b662      	cpsie	i
    conversion_speed = ADC_CONVERSION_SPEED::HIGH_SPEED; // set to something different from line 139 so it gets changed there
    e236:	f240 7102 	movw	r1, #1794	; 0x702
    if (analog_reference_internal == ref_type)
    e23a:	7f62      	ldrb	r2, [r4, #29]
    calibrating = 0;
    e23c:	7563      	strb	r3, [r4, #21]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    e23e:	8263      	strh	r3, [r4, #18]
    conversion_speed = ADC_CONVERSION_SPEED::HIGH_SPEED; // set to something different from line 139 so it gets changed there
    e240:	83e1      	strh	r1, [r4, #30]
    num_measurements = 0;
    e242:	7463      	strb	r3, [r4, #17]
    if (analog_reference_internal == ref_type)
    e244:	b152      	cbz	r2, e25c <ADC_Module::analog_init()+0x58>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
    e246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    e248:	7763      	strb	r3, [r4, #29]
        __disable_irq();
    e24a:	b672      	cpsid	i
        reg &= ~flag;
    e24c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e24e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
    e252:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e254:	b662      	cpsie	i
    calibrate();
    e256:	4620      	mov	r0, r4
    e258:	f7ff fd8e 	bl	dd78 <ADC_Module::calibrate()>
    setResolution(10);
    e25c:	210a      	movs	r1, #10
    e25e:	4620      	mov	r0, r4
    e260:	f7ff ff94 	bl	e18c <ADC_Module::setResolution(unsigned char)>
    init_calib = 1;
    e264:	2201      	movs	r2, #1
    if (calibrating)
    e266:	7d63      	ldrb	r3, [r4, #21]
    init_calib = 1;
    e268:	75a2      	strb	r2, [r4, #22]
    if (calibrating)
    e26a:	bb03      	cbnz	r3, e2ae <ADC_Module::analog_init()+0xaa>
        atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);
    e26c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e26e:	b672      	cpsid	i
        reg |= flag;
    e270:	6c93      	ldr	r3, [r2, #72]	; 0x48
    e272:	f043 0320 	orr.w	r3, r3, #32
    e276:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    e278:	b662      	cpsie	i
            atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
    e27a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e27c:	b672      	cpsid	i
        reg |= flag;
    e27e:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    e284:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
    e286:	b662      	cpsie	i
    analog_num_average = num;
    e288:	2320      	movs	r3, #32
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    e28a:	4620      	mov	r0, r4
    e28c:	2100      	movs	r1, #0
    analog_num_average = num;
    e28e:	7723      	strb	r3, [r4, #28]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    e290:	f7ff fdb8 	bl	de04 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    setSamplingSpeed(ADC_SAMPLING_SPEED::LOW_SPEED);
    e294:	2101      	movs	r1, #1
    e296:	f7ff fee1 	bl	e05c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    calibrate();
    e29a:	4620      	mov	r0, r4
}
    e29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calibrate();
    e2a0:	f7ff bd6a 	b.w	dd78 <ADC_Module::calibrate()>
        }
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
    e2a4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    e2a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e2aa:	66d3      	str	r3, [r2, #108]	; 0x6c
    e2ac:	e7b4      	b.n	e218 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    e2ae:	4620      	mov	r0, r4
    e2b0:	f7ff ff42 	bl	e138 <ADC_Module::wait_for_cal()>
    e2b4:	e7da      	b.n	e26c <ADC_Module::analog_init()+0x68>
    e2b6:	bf00      	nop
    e2b8:	400fc000 	.word	0x400fc000

0000e2bc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>:
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e2bc:	2900      	cmp	r1, #0
ADC_Module::ADC_Module(uint8_t ADC_number,
    e2be:	b510      	push	{r4, lr}
                                                 adc_regs(a_adc_regs)
    e2c0:	6283      	str	r3, [r0, #40]	; 0x28
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e2c2:	bf0c      	ite	eq
    e2c4:	460b      	moveq	r3, r1
    e2c6:	2303      	movne	r3, #3
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    e2c8:	6202      	str	r2, [r0, #32]
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e2ca:	bf14      	ite	ne
    e2cc:	226b      	movne	r2, #107	; 0x6b
    e2ce:	2267      	moveq	r2, #103	; 0x67
    e2d0:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    e2d4:	bf0c      	ite	eq
    e2d6:	460b      	moveq	r3, r1
    e2d8:	2304      	movne	r3, #4
ADC_Module::ADC_Module(uint8_t ADC_number,
    e2da:	4604      	mov	r4, r0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    e2dc:	7501      	strb	r1, [r0, #20]
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
    e2de:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    e2e2:	bf14      	ite	ne
    e2e4:	2327      	movne	r3, #39	; 0x27
    e2e6:	2324      	moveq	r3, #36	; 0x24
    e2e8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    e2ec:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    e2f0:	bf14      	ite	ne
    e2f2:	2344      	movne	r3, #68	; 0x44
    e2f4:	2343      	moveq	r3, #67	; 0x43
    e2f6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    analog_init();
    e2fa:	f7ff ff83 	bl	e204 <ADC_Module::analog_init()>
}
    e2fe:	4620      	mov	r0, r4
    e300:	bd10      	pop	{r4, pc}
    e302:	bf00      	nop

0000e304 <ADC_Module::enableInterrupts(void (*)(), unsigned char)>:
{
    e304:	b570      	push	{r4, r5, r6, lr}
    if (calibrating)
    e306:	7d43      	ldrb	r3, [r0, #21]
{
    e308:	4604      	mov	r4, r0
    e30a:	460e      	mov	r6, r1
    e30c:	4615      	mov	r5, r2
    if (calibrating)
    e30e:	b9f3      	cbnz	r3, e34e <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x4a>
    atomic::setBitFlag(adc_regs.HC0, ADC_HC_AIEN);
    e310:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e312:	b672      	cpsid	i
        reg |= flag;
    e314:	6813      	ldr	r3, [r2, #0]
    e316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e31a:	6013      	str	r3, [r2, #0]
        __enable_irq();
    e31c:	b662      	cpsie	i
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    e31e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    interrupts_enabled = true;
    e322:	2001      	movs	r0, #1
    e324:	4a0b      	ldr	r2, [pc, #44]	; (e354 <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x50>)
    e326:	3310      	adds	r3, #16
    e328:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    e32c:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    NVIC_SET_PRIORITY(IRQ_ADC, priority);
    e330:	4b09      	ldr	r3, [pc, #36]	; (e358 <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x54>)
    e332:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    e336:	54d5      	strb	r5, [r2, r3]
    NVIC_ENABLE_IRQ(IRQ_ADC);
    e338:	4b08      	ldr	r3, [pc, #32]	; (e35c <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0x58>)
    e33a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    e33e:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    e342:	f002 021f 	and.w	r2, r2, #31
    e346:	009b      	lsls	r3, r3, #2
    e348:	4090      	lsls	r0, r2
    e34a:	6018      	str	r0, [r3, #0]
}
    e34c:	bd70      	pop	{r4, r5, r6, pc}
        wait_for_cal();
    e34e:	f7ff fef3 	bl	e138 <ADC_Module::wait_for_cal()>
    e352:	e7dd      	b.n	e310 <ADC_Module::enableInterrupts(void (*)(), unsigned char)+0xc>
    e354:	2000a000 	.word	0x2000a000
    e358:	e000e400 	.word	0xe000e400
    e35c:	38003840 	.word	0x38003840

0000e360 <ADC_Module::checkPin(unsigned char)>:
    if (pin > ADC_MAX_PIN)
    e360:	2929      	cmp	r1, #41	; 0x29
    e362:	d807      	bhi.n	e374 <ADC_Module::checkPin(unsigned char)+0x14>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e364:	6a03      	ldr	r3, [r0, #32]
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    e366:	5c58      	ldrb	r0, [r3, r1]
    e368:	f000 001f 	and.w	r0, r0, #31
    e36c:	381f      	subs	r0, #31
    e36e:	bf18      	it	ne
    e370:	2001      	movne	r0, #1
    e372:	4770      	bx	lr
        return false; // all others are invalid
    e374:	2000      	movs	r0, #0
}
    e376:	4770      	bx	lr

0000e378 <ADC_Module::analogRead(unsigned char)>:
    if (pin > ADC_MAX_PIN)
    e378:	2929      	cmp	r1, #41	; 0x29
{
    e37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e37e:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    e380:	d85c      	bhi.n	e43c <ADC_Module::analogRead(unsigned char)+0xc4>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e382:	6a03      	ldr	r3, [r0, #32]
    e384:	468a      	mov	sl, r1
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    e386:	5c5b      	ldrb	r3, [r3, r1]
    e388:	f003 031f 	and.w	r3, r3, #31
    e38c:	2b1f      	cmp	r3, #31
    e38e:	d055      	beq.n	e43c <ADC_Module::analogRead(unsigned char)+0xc4>
    num_measurements++;
    e390:	7c43      	ldrb	r3, [r0, #17]
    if (calibrating)
    e392:	7d42      	ldrb	r2, [r0, #21]
    num_measurements++;
    e394:	3301      	adds	r3, #1
    e396:	7443      	strb	r3, [r0, #17]
    if (calibrating)
    e398:	2a00      	cmp	r2, #0
    e39a:	d147      	bne.n	e42c <ADC_Module::analogRead(unsigned char)+0xb4>
        return atomic::getBitFlag(adc_regs.GS, ADC_GS_ADACT);
    e39c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
    e39e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    if (wasADCInUse)
    e3a0:	f015 0501 	ands.w	r5, r5, #1
    e3a4:	d137      	bne.n	e416 <ADC_Module::analogRead(unsigned char)+0x9e>
    ADC_Config old_config = {};
    e3a6:	462e      	mov	r6, r5
    e3a8:	462f      	mov	r7, r5
    e3aa:	46a8      	mov	r8, r5
    e3ac:	46a9      	mov	r9, r5
        __disable_irq();
    e3ae:	b672      	cpsid	i
        reg &= ~flag;
    e3b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e3b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e3b6:	649a      	str	r2, [r3, #72]	; 0x48
        __enable_irq();
    e3b8:	b662      	cpsie	i
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e3ba:	6a23      	ldr	r3, [r4, #32]
    e3bc:	f813 300a 	ldrb.w	r3, [r3, sl]
    __disable_irq();
    e3c0:	b672      	cpsid	i
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
    e3c2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    e3c6:	f003 031f 	and.w	r3, r3, #31
    e3ca:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    e3ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e3d0:	6013      	str	r3, [r2, #0]
    __enable_irq();
    e3d2:	b662      	cpsie	i
    e3d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
    e3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    while (isConverting())
    e3d8:	07d9      	lsls	r1, r3, #31
    e3da:	d505      	bpl.n	e3e8 <ADC_Module::analogRead(unsigned char)+0x70>
        yield();
    e3dc:	f009 fe2c 	bl	18038 <yield>
    e3e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e3e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    while (isConverting())
    e3e4:	07db      	lsls	r3, r3, #31
    e3e6:	d4f9      	bmi.n	e3dc <ADC_Module::analogRead(unsigned char)+0x64>
    __disable_irq(); // make sure nothing interrupts this part
    e3e8:	b672      	cpsid	i
        return atomic::getBitFlag(adc_regs.HS, ADC_HS_COCO0);
    e3ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e3ec:	6a1a      	ldr	r2, [r3, #32]
    if (isComplete())
    e3ee:	07d2      	lsls	r2, r2, #31
    e3f0:	d52c      	bpl.n	e44c <ADC_Module::analogRead(unsigned char)+0xd4>
        return (int16_t)(int32_t)adc_regs.R0;
    e3f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
        result = (uint16_t)readSingle();
    e3f4:	b280      	uxth	r0, r0
    __enable_irq();
    e3f6:	b662      	cpsie	i
    if (wasADCInUse)
    e3f8:	b145      	cbz	r5, e40c <ADC_Module::analogRead(unsigned char)+0x94>
        __disable_irq();
    e3fa:	b672      	cpsid	i
        adc_regs.HC0 = config->savedHC0;
    e3fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e3fe:	f8c3 9000 	str.w	r9, [r3]
        adc_regs.CFG = config->savedCFG;
    e402:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
        adc_regs.GC = config->savedGC;
    e406:	649f      	str	r7, [r3, #72]	; 0x48
        adc_regs.GS = config->savedGS;
    e408:	64de      	str	r6, [r3, #76]	; 0x4c
        __enable_irq();
    e40a:	b662      	cpsie	i
    num_measurements--;
    e40c:	7c63      	ldrb	r3, [r4, #17]
    e40e:	3b01      	subs	r3, #1
    e410:	7463      	strb	r3, [r4, #17]
} // analogRead
    e412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __disable_irq();
    e416:	b672      	cpsid	i
        config->savedHC0 = adc_regs.HC0;
    e418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e41a:	f8d3 9000 	ldr.w	r9, [r3]
        config->savedCFG = adc_regs.CFG;
    e41e:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
        config->savedGC = adc_regs.GC;
    e422:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        config->savedGS = adc_regs.GS;
    e424:	6cde      	ldr	r6, [r3, #76]	; 0x4c
        __enable_irq();
    e426:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADCO);
    e428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e42a:	e7c0      	b.n	e3ae <ADC_Module::analogRead(unsigned char)+0x36>
        wait_for_cal();
    e42c:	f7ff fe84 	bl	e138 <ADC_Module::wait_for_cal()>
        return atomic::getBitFlag(adc_regs.GS, ADC_GS_ADACT);
    e430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e432:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    if (wasADCInUse)
    e434:	f015 0501 	ands.w	r5, r5, #1
    e438:	d0b5      	beq.n	e3a6 <ADC_Module::analogRead(unsigned char)+0x2e>
    e43a:	e7ec      	b.n	e416 <ADC_Module::analogRead(unsigned char)+0x9e>
    e43c:	8a63      	ldrh	r3, [r4, #18]
        return ADC_ERROR_VALUE;
    e43e:	4807      	ldr	r0, [pc, #28]	; (e45c <ADC_Module::analogRead(unsigned char)+0xe4>)
    e440:	b29b      	uxth	r3, r3
    e442:	f043 0304 	orr.w	r3, r3, #4
    e446:	8263      	strh	r3, [r4, #18]
} // analogRead
    e448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e44c:	8a63      	ldrh	r3, [r4, #18]
        result = ADC_ERROR_VALUE;
    e44e:	4803      	ldr	r0, [pc, #12]	; (e45c <ADC_Module::analogRead(unsigned char)+0xe4>)
    e450:	b29b      	uxth	r3, r3
    e452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e456:	8263      	strh	r3, [r4, #18]
    e458:	e7cd      	b.n	e3f6 <ADC_Module::analogRead(unsigned char)+0x7e>
    e45a:	bf00      	nop
    e45c:	fffeee90 	.word	0xfffeee90

0000e460 <ADC_Module::startSingleRead(unsigned char)>:
    if (pin > ADC_MAX_PIN)
    e460:	2929      	cmp	r1, #41	; 0x29
{
    e462:	b538      	push	{r3, r4, r5, lr}
    e464:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    e466:	d82f      	bhi.n	e4c8 <ADC_Module::startSingleRead(unsigned char)+0x68>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e468:	6a03      	ldr	r3, [r0, #32]
    e46a:	460d      	mov	r5, r1
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    e46c:	5c5b      	ldrb	r3, [r3, r1]
    e46e:	f003 031f 	and.w	r3, r3, #31
    e472:	2b1f      	cmp	r3, #31
    e474:	d028      	beq.n	e4c8 <ADC_Module::startSingleRead(unsigned char)+0x68>
    if (calibrating)
    e476:	7d43      	ldrb	r3, [r0, #21]
    e478:	2b00      	cmp	r3, #0
    e47a:	d12c      	bne.n	e4d6 <ADC_Module::startSingleRead(unsigned char)+0x76>
    e47c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e47e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    e480:	f003 0301 	and.w	r3, r3, #1
    adcWasInUse = isConverting(); // is the ADC running now?
    e484:	7423      	strb	r3, [r4, #16]
    if (adcWasInUse)
    e486:	b15b      	cbz	r3, e4a0 <ADC_Module::startSingleRead(unsigned char)+0x40>
        __disable_irq();
    e488:	b672      	cpsid	i
        config->savedHC0 = adc_regs.HC0;
    e48a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e48c:	6818      	ldr	r0, [r3, #0]
        config->savedCFG = adc_regs.CFG;
    e48e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e490:	e9c4 0200 	strd	r0, r2, [r4]
        config->savedGC = adc_regs.GC;
    e494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        config->savedGS = adc_regs.GS;
    e496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e498:	e9c4 2302 	strd	r2, r3, [r4, #8]
        __enable_irq();
    e49c:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADCO);
    e49e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
    e4a0:	b672      	cpsid	i
        reg &= ~flag;
    e4a2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    e4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e4a8:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
    e4aa:	b662      	cpsie	i
    const uint8_t sc1a_pin = channel2sc1a[pin];
    e4ac:	6a23      	ldr	r3, [r4, #32]
    e4ae:	5d5b      	ldrb	r3, [r3, r5]
    __disable_irq();
    e4b0:	b672      	cpsid	i
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
    e4b2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    e4b6:	f003 031f 	and.w	r3, r3, #31
    e4ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e4bc:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    e4c0:	6013      	str	r3, [r2, #0]
    __enable_irq();
    e4c2:	b662      	cpsie	i
    return true;
    e4c4:	2001      	movs	r0, #1
}
    e4c6:	bd38      	pop	{r3, r4, r5, pc}
    e4c8:	8a63      	ldrh	r3, [r4, #18]
        return false;
    e4ca:	2000      	movs	r0, #0
    e4cc:	b29b      	uxth	r3, r3
    e4ce:	f043 0304 	orr.w	r3, r3, #4
    e4d2:	8263      	strh	r3, [r4, #18]
}
    e4d4:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    e4d6:	f7ff fe2f 	bl	e138 <ADC_Module::wait_for_cal()>
    e4da:	e7cf      	b.n	e47c <ADC_Module::startSingleRead(unsigned char)+0x1c>

0000e4dc <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    e4dc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    e4e0:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    e4e4:	1a10      	subs	r0, r2, r0
    e4e6:	4770      	bx	lr

0000e4e8 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e4e8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    e4ec:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    e4f0:	429a      	cmp	r2, r3
    e4f2:	d905      	bls.n	e500 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    e4f4:	1c5a      	adds	r2, r3, #1
    e4f6:	4403      	add	r3, r0
    e4f8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    e4fc:	7e98      	ldrb	r0, [r3, #26]
    e4fe:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    e500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    e504:	4770      	bx	lr
    e506:	bf00      	nop

0000e508 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>:
#define MPU9250_ADDR_ACCEL_XOUT_H 0x3B
#define MPU9250_ADDR_GYRO_XOUT_H  0x43
#define MPU9250_ADDR_PWR_MGMT_1   0x6B
#define MPU9250_ADDR_WHOAMI       0x75

uint8_t MPU9250_asukiaaa::i2cRead(uint8_t Address, uint8_t Register, uint8_t Nbytes, uint8_t* Data) {
    e508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		transmitting = 1;
    e50c:	f04f 0801 	mov.w	r8, #1
    e510:	460f      	mov	r7, r1
    e512:	461d      	mov	r5, r3
  myWire->beginTransmission(Address);
  myWire->write(Register);
    e514:	4611      	mov	r1, r2
  myWire->beginTransmission(Address);
    e516:	69c3      	ldr	r3, [r0, #28]
		txBuffer[0] = (address << 1);
    e518:	fa07 f208 	lsl.w	r2, r7, r8
uint8_t MPU9250_asukiaaa::i2cRead(uint8_t Address, uint8_t Register, uint8_t Nbytes, uint8_t* Data) {
    e51c:	4604      	mov	r4, r0
    e51e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    e522:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    e526:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
  myWire->write(Register);
    e52a:	69c0      	ldr	r0, [r0, #28]
    e52c:	6803      	ldr	r3, [r0, #0]
    e52e:	681b      	ldr	r3, [r3, #0]
    e530:	4798      	blx	r3
		return endTransmission(1);
    e532:	4641      	mov	r1, r8
    e534:	69e0      	ldr	r0, [r4, #28]
    e536:	f000 fad5 	bl	eae4 <TwoWire::endTransmission(unsigned char)>
  uint8_t result = myWire->endTransmission();
  if (result != 0) {
    e53a:	4606      	mov	r6, r0
    e53c:	b110      	cbz	r0, e544 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x3c>
    if (index < Nbytes) {
      Data[index++] = d;
    }
  }
  return 0;
}
    e53e:	4630      	mov	r0, r6
    e540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return requestFrom(address, quantity, (uint8_t)1);
    e544:	4639      	mov	r1, r7
    e546:	f8df 9070 	ldr.w	r9, [pc, #112]	; e5b8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xb0>
  while (myWire->available()) {
    e54a:	4637      	mov	r7, r6
    e54c:	f8df a06c 	ldr.w	sl, [pc, #108]	; e5bc <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xb4>
    e550:	4643      	mov	r3, r8
    e552:	462a      	mov	r2, r5
    e554:	69e0      	ldr	r0, [r4, #28]
    e556:	f000 fb45 	bl	ebe4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
    e55a:	fa5f f887 	uxtb.w	r8, r7
    e55e:	69e0      	ldr	r0, [r4, #28]
    e560:	6803      	ldr	r3, [r0, #0]
    e562:	691b      	ldr	r3, [r3, #16]
    e564:	454b      	cmp	r3, r9
    e566:	d11f      	bne.n	e5a8 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xa0>
		return rxBufferLength - rxBufferIndex;
    e568:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
    e56c:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
    e570:	1a98      	subs	r0, r3, r2
    e572:	2800      	cmp	r0, #0
    e574:	d0e3      	beq.n	e53e <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x36>
    uint8_t d = myWire->read();
    e576:	69e0      	ldr	r0, [r4, #28]
    e578:	6803      	ldr	r3, [r0, #0]
    e57a:	695b      	ldr	r3, [r3, #20]
    e57c:	4553      	cmp	r3, sl
    e57e:	d115      	bne.n	e5ac <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xa4>
		if (rxBufferIndex >= rxBufferLength) return -1;
    e580:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    e584:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
    e588:	4563      	cmp	r3, ip
		return rxBuffer[rxBufferIndex++];
    e58a:	f10c 0301 	add.w	r3, ip, #1
    e58e:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    e590:	d90f      	bls.n	e5b2 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0xaa>
		return rxBuffer[rxBufferIndex++];
    e592:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
    e596:	f89c 001a 	ldrb.w	r0, [ip, #26]
    if (index < Nbytes) {
    e59a:	4545      	cmp	r5, r8
    e59c:	d9df      	bls.n	e55e <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x56>
      Data[index++] = d;
    e59e:	9b08      	ldr	r3, [sp, #32]
    e5a0:	3701      	adds	r7, #1
    e5a2:	f803 0008 	strb.w	r0, [r3, r8]
    e5a6:	e7d8      	b.n	e55a <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x52>
  while (myWire->available()) {
    e5a8:	4798      	blx	r3
    e5aa:	e7e2      	b.n	e572 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x6a>
    uint8_t d = myWire->read();
    e5ac:	4798      	blx	r3
    e5ae:	b2c0      	uxtb	r0, r0
    e5b0:	e7f3      	b.n	e59a <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x92>
    e5b2:	20ff      	movs	r0, #255	; 0xff
    e5b4:	e7f1      	b.n	e59a <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)+0x92>
    e5b6:	bf00      	nop
    e5b8:	0000e4dd 	.word	0x0000e4dd
    e5bc:	0000e4e9 	.word	0x0000e4e9

0000e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>:

uint8_t MPU9250_asukiaaa::i2cWriteByte(uint8_t Address, uint8_t Register, uint8_t Data) {
    e5c0:	b570      	push	{r4, r5, r6, lr}
    e5c2:	4604      	mov	r4, r0
		transmitting = 1;
    e5c4:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
    e5c6:	0048      	lsls	r0, r1, #1
    e5c8:	461e      	mov	r6, r3
  myWire->beginTransmission(Address);
    e5ca:	69e3      	ldr	r3, [r4, #28]
  myWire->write(Register);
    e5cc:	4611      	mov	r1, r2
		transmitting = 1;
    e5ce:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    e5d2:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    e5d6:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
    e5da:	69e0      	ldr	r0, [r4, #28]
    e5dc:	6803      	ldr	r3, [r0, #0]
    e5de:	681b      	ldr	r3, [r3, #0]
    e5e0:	4798      	blx	r3
  myWire->write(Data);
    e5e2:	69e0      	ldr	r0, [r4, #28]
    e5e4:	4631      	mov	r1, r6
    e5e6:	6803      	ldr	r3, [r0, #0]
    e5e8:	681b      	ldr	r3, [r3, #0]
    e5ea:	4798      	blx	r3
		return endTransmission(1);
    e5ec:	4629      	mov	r1, r5
    e5ee:	69e0      	ldr	r0, [r4, #28]
  return myWire->endTransmission();
}
    e5f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e5f4:	f000 ba76 	b.w	eae4 <TwoWire::endTransmission(unsigned char)>

0000e5f8 <MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)>:

MPU9250_asukiaaa::MPU9250_asukiaaa(uint8_t address):
  address(address) {
  accelRange = 0;
  gyroRange  = 0;
  magXOffset = 0;
    e5f8:	2200      	movs	r2, #0
  accelRange = 0;
    e5fa:	f04f 0c00 	mov.w	ip, #0
  address(address) {
    e5fe:	7001      	strb	r1, [r0, #0]
  accelRange = 0;
    e600:	f8c0 c020 	str.w	ip, [r0, #32]
  gyroRange  = 0;
    e604:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  magXOffset = 0;
    e608:	8042      	strh	r2, [r0, #2]
  magYOffset = 0;
    e60a:	6042      	str	r2, [r0, #4]
  magZOffset = 0;
  myWire = NULL;
    e60c:	61c2      	str	r2, [r0, #28]
}
    e60e:	4770      	bx	lr

0000e610 <MPU9250_asukiaaa::setWire(TwoWire*)>:

void MPU9250_asukiaaa::setWire(TwoWire* wire) {
  myWire = wire;
    e610:	61c1      	str	r1, [r0, #28]
}
    e612:	4770      	bx	lr

0000e614 <MPU9250_asukiaaa::readId(unsigned char*)>:
  beginWireIfNull();
  return i2cRead(address, MPU9250_ADDR_WHOAMI, 1, id);
}

void MPU9250_asukiaaa::beginWireIfNull() {
  if (myWire == NULL) {
    e614:	69c3      	ldr	r3, [r0, #28]
uint8_t MPU9250_asukiaaa::readId(uint8_t *id) {
    e616:	b530      	push	{r4, r5, lr}
    e618:	4604      	mov	r4, r0
    e61a:	b083      	sub	sp, #12
    e61c:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e61e:	b143      	cbz	r3, e632 <MPU9250_asukiaaa::readId(unsigned char*)+0x1e>
  return i2cRead(address, MPU9250_ADDR_WHOAMI, 1, id);
    e620:	7821      	ldrb	r1, [r4, #0]
    e622:	2301      	movs	r3, #1
    e624:	2275      	movs	r2, #117	; 0x75
    e626:	4620      	mov	r0, r4
    e628:	9500      	str	r5, [sp, #0]
    e62a:	f7ff ff6d 	bl	e508 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    e62e:	b003      	add	sp, #12
    e630:	bd30      	pop	{r4, r5, pc}
    myWire = &Wire;
    e632:	4802      	ldr	r0, [pc, #8]	; (e63c <MPU9250_asukiaaa::readId(unsigned char*)+0x28>)
    e634:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e636:	f016 f927 	bl	24888 <___ZN7TwoWire5beginEv_veneer>
    e63a:	e7f1      	b.n	e620 <MPU9250_asukiaaa::readId(unsigned char*)+0xc>
    e63c:	2000959c 	.word	0x2000959c

0000e640 <MPU9250_asukiaaa::beginAccel(unsigned char)>:
  }
}

void MPU9250_asukiaaa::beginAccel(uint8_t mode) {
    e640:	b538      	push	{r3, r4, r5, lr}
  if (myWire == NULL) {
    e642:	69c3      	ldr	r3, [r0, #28]
void MPU9250_asukiaaa::beginAccel(uint8_t mode) {
    e644:	4604      	mov	r4, r0
    e646:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e648:	b32b      	cbz	r3, e696 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x56>
  beginWireIfNull();
  switch(mode) {
    e64a:	2d18      	cmp	r5, #24
    e64c:	d80e      	bhi.n	e66c <MPU9250_asukiaaa::beginAccel(unsigned char)+0x2c>
    e64e:	e8df f005 	tbb	[pc, r5]
    e652:	0d1f      	.short	0x0d1f
    e654:	0d0d0d0d 	.word	0x0d0d0d0d
    e658:	0d270d0d 	.word	0x0d270d0d
    e65c:	0d0d0d0d 	.word	0x0d0d0d0d
    e660:	0d1c0d0d 	.word	0x0d1c0d0d
    e664:	0d0d0d0d 	.word	0x0d0d0d0d
    e668:	0d0d      	.short	0x0d0d
    e66a:	0e          	.byte	0x0e
    e66b:	00          	.byte	0x00
  default:
    return; // Return without writing invalid mode
  }
  i2cWriteByte(address, MPU9250_ADDR_ACCELCONFIG, mode);
  delay(10);
}
    e66c:	bd38      	pop	{r3, r4, r5, pc}
    break;
    e66e:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
    accelRange = 2.0;
    e672:	6220      	str	r0, [r4, #32]
  i2cWriteByte(address, MPU9250_ADDR_ACCELCONFIG, mode);
    e674:	462b      	mov	r3, r5
    e676:	7821      	ldrb	r1, [r4, #0]
    e678:	4620      	mov	r0, r4
    e67a:	221c      	movs	r2, #28
    e67c:	f7ff ffa0 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e680:	200a      	movs	r0, #10
}
    e682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
    e686:	f007 bc3b 	b.w	15f00 <delay>
    break;
    e68a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e68e:	e7f0      	b.n	e672 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x32>
  switch(mode) {
    e690:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    e694:	e7ed      	b.n	e672 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x32>
    myWire = &Wire;
    e696:	4804      	ldr	r0, [pc, #16]	; (e6a8 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x68>)
    e698:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e69a:	f016 f8f5 	bl	24888 <___ZN7TwoWire5beginEv_veneer>
    e69e:	e7d4      	b.n	e64a <MPU9250_asukiaaa::beginAccel(unsigned char)+0xa>
  switch(mode) {
    e6a0:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
    e6a4:	e7e5      	b.n	e672 <MPU9250_asukiaaa::beginAccel(unsigned char)+0x32>
    e6a6:	bf00      	nop
    e6a8:	2000959c 	.word	0x2000959c

0000e6ac <MPU9250_asukiaaa::magReadAdjustValues()>:

void MPU9250_asukiaaa::magReadAdjustValues() {
    e6ac:	b510      	push	{r4, lr}
  magSetMode(mode);
  delay(10);
}

void MPU9250_asukiaaa::magSetMode(uint8_t mode) {
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e6ae:	2300      	movs	r3, #0
void MPU9250_asukiaaa::magReadAdjustValues() {
    e6b0:	b084      	sub	sp, #16
    e6b2:	4604      	mov	r4, r0
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e6b4:	220a      	movs	r2, #10
    e6b6:	210c      	movs	r1, #12
    e6b8:	f7ff ff82 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e6bc:	200a      	movs	r0, #10
    e6be:	f007 fc1f 	bl	15f00 <delay>
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e6c2:	230f      	movs	r3, #15
    e6c4:	220a      	movs	r2, #10
    e6c6:	210c      	movs	r1, #12
    e6c8:	4620      	mov	r0, r4
    e6ca:	f7ff ff79 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e6ce:	200a      	movs	r0, #10
    e6d0:	f007 fc16 	bl	15f00 <delay>
  i2cRead(AK8963_ADDRESS, AK8963_RA_ASAX, 3, buff);
    e6d4:	a803      	add	r0, sp, #12
    e6d6:	2303      	movs	r3, #3
    e6d8:	2210      	movs	r2, #16
    e6da:	9000      	str	r0, [sp, #0]
    e6dc:	210c      	movs	r1, #12
    e6de:	4620      	mov	r0, r4
    e6e0:	f7ff ff12 	bl	e508 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
  magZAdjust = buff[2];
    e6e4:	f89d 200e 	ldrb.w	r2, [sp, #14]
  magXAdjust = buff[0];
    e6e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  magZAdjust = buff[2];
    e6ec:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  magXAdjust = buff[0];
    e6f0:	8523      	strh	r3, [r4, #40]	; 0x28
}
    e6f2:	b004      	add	sp, #16
    e6f4:	bd10      	pop	{r4, pc}
    e6f6:	bf00      	nop

0000e6f8 <MPU9250_asukiaaa::beginMag(unsigned char)>:
  if (myWire == NULL) {
    e6f8:	69c3      	ldr	r3, [r0, #28]
void MPU9250_asukiaaa::beginMag(uint8_t mode) {
    e6fa:	b570      	push	{r4, r5, r6, lr}
    e6fc:	4604      	mov	r4, r0
    e6fe:	b084      	sub	sp, #16
    e700:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e702:	2b00      	cmp	r3, #0
    e704:	d042      	beq.n	e78c <MPU9250_asukiaaa::beginMag(unsigned char)+0x94>
}

void MPU9250_asukiaaa::magWakeup() {
  unsigned char bits;
  i2cRead(address, MPU9250_ADDR_PWR_MGMT_1, 1, &bits);
    e706:	f10d 060f 	add.w	r6, sp, #15
    e70a:	2301      	movs	r3, #1
    e70c:	226b      	movs	r2, #107	; 0x6b
    e70e:	4620      	mov	r0, r4
    e710:	9600      	str	r6, [sp, #0]
    e712:	7821      	ldrb	r1, [r4, #0]
    e714:	f7ff fef8 	bl	e508 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
  bits &= ~B01110000; // Turn off SLEEP, STANDBY, CYCLE
    e718:	f89d 300f 	ldrb.w	r3, [sp, #15]
  i2cWriteByte(address, MPU9250_ADDR_PWR_MGMT_1, bits);
    e71c:	7821      	ldrb	r1, [r4, #0]
    e71e:	226b      	movs	r2, #107	; 0x6b
    e720:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    e724:	4620      	mov	r0, r4
    e726:	f7ff ff4b 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e72a:	200a      	movs	r0, #10
    e72c:	f007 fbe8 	bl	15f00 <delay>
}

void MPU9250_asukiaaa::magEnableSlaveMode() {
  unsigned char bits;
  i2cRead(address, MPU9250_ADDR_INT_PIN_CFG, 1, &bits);
    e730:	9600      	str	r6, [sp, #0]
    e732:	2301      	movs	r3, #1
    e734:	7821      	ldrb	r1, [r4, #0]
    e736:	2237      	movs	r2, #55	; 0x37
    e738:	4620      	mov	r0, r4
    e73a:	f7ff fee5 	bl	e508 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
  bits |= B00000010; // Activate BYPASS_EN
    e73e:	f89d 300f 	ldrb.w	r3, [sp, #15]
  i2cWriteByte(address, MPU9250_ADDR_INT_PIN_CFG, bits);
    e742:	7821      	ldrb	r1, [r4, #0]
    e744:	2237      	movs	r2, #55	; 0x37
    e746:	f043 0302 	orr.w	r3, r3, #2
    e74a:	4620      	mov	r0, r4
    e74c:	f7ff ff38 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e750:	200a      	movs	r0, #10
    e752:	f007 fbd5 	bl	15f00 <delay>
  magReadAdjustValues();
    e756:	4620      	mov	r0, r4
    e758:	f7ff ffa8 	bl	e6ac <MPU9250_asukiaaa::magReadAdjustValues()>
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e75c:	220a      	movs	r2, #10
    e75e:	210c      	movs	r1, #12
    e760:	2300      	movs	r3, #0
    e762:	4620      	mov	r0, r4
    e764:	f7ff ff2c 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e768:	200a      	movs	r0, #10
    e76a:	f007 fbc9 	bl	15f00 <delay>
  i2cWriteByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
    e76e:	462b      	mov	r3, r5
    e770:	220a      	movs	r2, #10
    e772:	210c      	movs	r1, #12
    e774:	4620      	mov	r0, r4
    e776:	f7ff ff23 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e77a:	200a      	movs	r0, #10
    e77c:	f007 fbc0 	bl	15f00 <delay>
  delay(10);
    e780:	200a      	movs	r0, #10
}
    e782:	b004      	add	sp, #16
    e784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(10);
    e788:	f007 bbba 	b.w	15f00 <delay>
    myWire = &Wire;
    e78c:	4802      	ldr	r0, [pc, #8]	; (e798 <MPU9250_asukiaaa::beginMag(unsigned char)+0xa0>)
    e78e:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e790:	f016 f87a 	bl	24888 <___ZN7TwoWire5beginEv_veneer>
    e794:	e7b7      	b.n	e706 <MPU9250_asukiaaa::beginMag(unsigned char)+0xe>
    e796:	bf00      	nop
    e798:	2000959c 	.word	0x2000959c

0000e79c <MPU9250_asukiaaa::accelUpdate()>:

float MPU9250_asukiaaa::magZ() {
  return adjustMagValue(magGet(5, 4), magZAdjust) + magZOffset;
}

uint8_t MPU9250_asukiaaa::accelUpdate() {
    e79c:	b510      	push	{r4, lr}
  return i2cRead(address, MPU9250_ADDR_ACCEL_XOUT_H, 6, accelBuff);
    e79e:	4604      	mov	r4, r0
uint8_t MPU9250_asukiaaa::accelUpdate() {
    e7a0:	b082      	sub	sp, #8
  return i2cRead(address, MPU9250_ADDR_ACCEL_XOUT_H, 6, accelBuff);
    e7a2:	2306      	movs	r3, #6
    e7a4:	223b      	movs	r2, #59	; 0x3b
    e7a6:	f814 1b08 	ldrb.w	r1, [r4], #8
    e7aa:	9400      	str	r4, [sp, #0]
    e7ac:	f7ff feac 	bl	e508 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    e7b0:	b002      	add	sp, #8
    e7b2:	bd10      	pop	{r4, pc}

0000e7b4 <MPU9250_asukiaaa::accelX()>:

float MPU9250_asukiaaa::accelGet(uint8_t highIndex, uint8_t lowIndex) {
  int16_t v = ((int16_t) accelBuff[highIndex]) << 8 | accelBuff[lowIndex];
  return ((float) -v) * accelRange / (float) 0x8000; // (float) 0x8000 == 32768.0
    e7b4:	8903      	ldrh	r3, [r0, #8]
    e7b6:	ed90 7a08 	vldr	s14, [r0, #32]
    e7ba:	badb      	revsh	r3, r3
    e7bc:	ed9f 0a05 	vldr	s0, [pc, #20]	; e7d4 <MPU9250_asukiaaa::accelX()+0x20>
    e7c0:	425b      	negs	r3, r3
    e7c2:	ee07 3a90 	vmov	s15, r3
    e7c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e7ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}

float MPU9250_asukiaaa::accelX() {
  return accelGet(0, 1);
}
    e7ce:	ee27 0a80 	vmul.f32	s0, s15, s0
    e7d2:	4770      	bx	lr
    e7d4:	38000000 	.word	0x38000000

0000e7d8 <MPU9250_asukiaaa::accelY()>:
  return ((float) -v) * accelRange / (float) 0x8000; // (float) 0x8000 == 32768.0
    e7d8:	8943      	ldrh	r3, [r0, #10]
    e7da:	ed90 7a08 	vldr	s14, [r0, #32]
    e7de:	badb      	revsh	r3, r3
    e7e0:	ed9f 0a05 	vldr	s0, [pc, #20]	; e7f8 <MPU9250_asukiaaa::accelY()+0x20>
    e7e4:	425b      	negs	r3, r3
    e7e6:	ee07 3a90 	vmov	s15, r3
    e7ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e7ee:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::accelY() {
  return accelGet(2, 3);
}
    e7f2:	ee27 0a80 	vmul.f32	s0, s15, s0
    e7f6:	4770      	bx	lr
    e7f8:	38000000 	.word	0x38000000

0000e7fc <MPU9250_asukiaaa::accelZ()>:
  return ((float) -v) * accelRange / (float) 0x8000; // (float) 0x8000 == 32768.0
    e7fc:	8983      	ldrh	r3, [r0, #12]
    e7fe:	ed90 7a08 	vldr	s14, [r0, #32]
    e802:	badb      	revsh	r3, r3
    e804:	ed9f 0a05 	vldr	s0, [pc, #20]	; e81c <MPU9250_asukiaaa::accelZ()+0x20>
    e808:	425b      	negs	r3, r3
    e80a:	ee07 3a90 	vmov	s15, r3
    e80e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e812:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::accelZ() {
  return accelGet(4, 5);
}
    e816:	ee27 0a80 	vmul.f32	s0, s15, s0
    e81a:	4770      	bx	lr
    e81c:	38000000 	.word	0x38000000

0000e820 <MPU9250_asukiaaa::beginGyro(unsigned char)>:
  return sqrt(pow(accelGet(0, 1), 2) +
              pow(accelGet(2, 3), 2) +
              pow(accelGet(4, 5), 2));
}

void MPU9250_asukiaaa::beginGyro(uint8_t mode) {
    e820:	b538      	push	{r3, r4, r5, lr}
  if (myWire == NULL) {
    e822:	69c3      	ldr	r3, [r0, #28]
void MPU9250_asukiaaa::beginGyro(uint8_t mode) {
    e824:	4604      	mov	r4, r0
    e826:	460d      	mov	r5, r1
  if (myWire == NULL) {
    e828:	b313      	cbz	r3, e870 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x50>
  beginWireIfNull();
  switch (mode) {
    e82a:	2d18      	cmp	r5, #24
    e82c:	d80e      	bhi.n	e84c <MPU9250_asukiaaa::beginGyro(unsigned char)+0x2c>
    e82e:	e8df f005 	tbb	[pc, r5]
    e832:	0d1d      	.short	0x0d1d
    e834:	0d0d0d0d 	.word	0x0d0d0d0d
    e838:	0d240d0d 	.word	0x0d240d0d
    e83c:	0d0d0d0d 	.word	0x0d0d0d0d
    e840:	0d1b0d0d 	.word	0x0d1b0d0d
    e844:	0d0d0d0d 	.word	0x0d0d0d0d
    e848:	0d0d      	.short	0x0d0d
    e84a:	0e          	.byte	0x0e
    e84b:	00          	.byte	0x00
  default:
    return; // Return without writing invalid mode
  }
  i2cWriteByte(address, 27, mode);
  delay(10);
}
    e84c:	bd38      	pop	{r3, r4, r5, pc}
    break;
    e84e:	480c      	ldr	r0, [pc, #48]	; (e880 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x60>)
    gyroRange = 250.0;
    e850:	6260      	str	r0, [r4, #36]	; 0x24
  i2cWriteByte(address, 27, mode);
    e852:	462b      	mov	r3, r5
    e854:	7821      	ldrb	r1, [r4, #0]
    e856:	4620      	mov	r0, r4
    e858:	221b      	movs	r2, #27
    e85a:	f7ff feb1 	bl	e5c0 <MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    e85e:	200a      	movs	r0, #10
}
    e860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
    e864:	f007 bb4c 	b.w	15f00 <delay>
    break;
    e868:	4806      	ldr	r0, [pc, #24]	; (e884 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x64>)
    e86a:	e7f1      	b.n	e850 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x30>
  switch (mode) {
    e86c:	4806      	ldr	r0, [pc, #24]	; (e888 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x68>)
    e86e:	e7ef      	b.n	e850 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x30>
    myWire = &Wire;
    e870:	4806      	ldr	r0, [pc, #24]	; (e88c <MPU9250_asukiaaa::beginGyro(unsigned char)+0x6c>)
    e872:	61e0      	str	r0, [r4, #28]
    myWire->begin();
    e874:	f016 f808 	bl	24888 <___ZN7TwoWire5beginEv_veneer>
    e878:	e7d7      	b.n	e82a <MPU9250_asukiaaa::beginGyro(unsigned char)+0xa>
  switch (mode) {
    e87a:	4805      	ldr	r0, [pc, #20]	; (e890 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x70>)
    e87c:	e7e8      	b.n	e850 <MPU9250_asukiaaa::beginGyro(unsigned char)+0x30>
    e87e:	bf00      	nop
    e880:	44fa0000 	.word	0x44fa0000
    e884:	447a0000 	.word	0x447a0000
    e888:	437a0000 	.word	0x437a0000
    e88c:	2000959c 	.word	0x2000959c
    e890:	43fa0000 	.word	0x43fa0000

0000e894 <MPU9250_asukiaaa::gyroUpdate()>:

uint8_t MPU9250_asukiaaa::gyroUpdate() {
    e894:	b510      	push	{r4, lr}
  return i2cRead(address, MPU9250_ADDR_GYRO_XOUT_H, 6, gyroBuff);
    e896:	4604      	mov	r4, r0
uint8_t MPU9250_asukiaaa::gyroUpdate() {
    e898:	b082      	sub	sp, #8
  return i2cRead(address, MPU9250_ADDR_GYRO_XOUT_H, 6, gyroBuff);
    e89a:	2306      	movs	r3, #6
    e89c:	2243      	movs	r2, #67	; 0x43
    e89e:	f814 1b0e 	ldrb.w	r1, [r4], #14
    e8a2:	9400      	str	r4, [sp, #0]
    e8a4:	f7ff fe30 	bl	e508 <MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    e8a8:	b002      	add	sp, #8
    e8aa:	bd10      	pop	{r4, pc}

0000e8ac <MPU9250_asukiaaa::gyroX()>:

float MPU9250_asukiaaa::gyroGet(uint8_t highIndex, uint8_t lowIndex) {
  int16_t v = ((int16_t) gyroBuff[highIndex]) << 8 | gyroBuff[lowIndex];
  return ((float) -v) * gyroRange / (float) 0x8000;
    e8ac:	89c3      	ldrh	r3, [r0, #14]
    e8ae:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    e8b2:	badb      	revsh	r3, r3
    e8b4:	ed9f 0a05 	vldr	s0, [pc, #20]	; e8cc <MPU9250_asukiaaa::gyroX()+0x20>
    e8b8:	425b      	negs	r3, r3
    e8ba:	ee07 3a90 	vmov	s15, r3
    e8be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e8c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}

float MPU9250_asukiaaa::gyroX() {
  return gyroGet(0, 1);
}
    e8c6:	ee27 0a80 	vmul.f32	s0, s15, s0
    e8ca:	4770      	bx	lr
    e8cc:	38000000 	.word	0x38000000

0000e8d0 <MPU9250_asukiaaa::gyroY()>:
  return ((float) -v) * gyroRange / (float) 0x8000;
    e8d0:	8a03      	ldrh	r3, [r0, #16]
    e8d2:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    e8d6:	badb      	revsh	r3, r3
    e8d8:	ed9f 0a05 	vldr	s0, [pc, #20]	; e8f0 <MPU9250_asukiaaa::gyroY()+0x20>
    e8dc:	425b      	negs	r3, r3
    e8de:	ee07 3a90 	vmov	s15, r3
    e8e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e8e6:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::gyroY() {
  return gyroGet(2, 3);
}
    e8ea:	ee27 0a80 	vmul.f32	s0, s15, s0
    e8ee:	4770      	bx	lr
    e8f0:	38000000 	.word	0x38000000

0000e8f4 <MPU9250_asukiaaa::gyroZ()>:
  return ((float) -v) * gyroRange / (float) 0x8000;
    e8f4:	8a43      	ldrh	r3, [r0, #18]
    e8f6:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    e8fa:	badb      	revsh	r3, r3
    e8fc:	ed9f 0a05 	vldr	s0, [pc, #20]	; e914 <MPU9250_asukiaaa::gyroZ()+0x20>
    e900:	425b      	negs	r3, r3
    e902:	ee07 3a90 	vmov	s15, r3
    e906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e90a:	ee67 7a87 	vmul.f32	s15, s15, s14

float MPU9250_asukiaaa::gyroZ() {
  return gyroGet(4, 5);
}
    e90e:	ee27 0a80 	vmul.f32	s0, s15, s0
    e912:	4770      	bx	lr
    e914:	38000000 	.word	0x38000000

0000e918 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e918:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    e91c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    e920:	429a      	cmp	r2, r3
    e922:	d902      	bls.n	e92a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    e924:	4418      	add	r0, r3
    e926:	7e80      	ldrb	r0, [r0, #26]
    e928:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    e92a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    e92e:	4770      	bx	lr

0000e930 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    e930:	4770      	bx	lr
    e932:	bf00      	nop

0000e934 <TwoWire::write(unsigned char)>:
{
    e934:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    e936:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    e93a:	b178      	cbz	r0, e95c <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    e93c:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    e940:	2a88      	cmp	r2, #136	; 0x88
    e942:	d903      	bls.n	e94c <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    e944:	2201      	movs	r2, #1
			return 0;
    e946:	2000      	movs	r0, #0
    e948:	605a      	str	r2, [r3, #4]
    e94a:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    e94c:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    e950:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    e952:	441a      	add	r2, r3
    e954:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    e958:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    e95c:	4770      	bx	lr
    e95e:	bf00      	nop

0000e960 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    e960:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    e962:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    e966:	b90c      	cbnz	r4, e96c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    e968:	4620      	mov	r0, r4
    e96a:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    e96c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    e970:	4605      	mov	r5, r0
    e972:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    e976:	42a2      	cmp	r2, r4
    e978:	d80d      	bhi.n	e996 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    e97a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    e97c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    e980:	4622      	mov	r2, r4
    e982:	4418      	add	r0, r3
    e984:	f007 fe8e 	bl	166a4 <memcpy>
		txBufferLength += quantity;
    e988:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    e98c:	4620      	mov	r0, r4
		txBufferLength += quantity;
    e98e:	4423      	add	r3, r4
    e990:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    e994:	bd38      	pop	{r3, r4, r5, pc}
    e996:	2201      	movs	r2, #1
    e998:	6042      	str	r2, [r0, #4]
    e99a:	e7ef      	b.n	e97c <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000e99c <TwoWire::force_clock()>:
{
    e99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e9a0:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e9a4:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e9a6:	7e01      	ldrb	r1, [r0, #24]
{
    e9a8:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e9aa:	7e43      	ldrb	r3, [r0, #25]
{
    e9ac:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e9ae:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e9b2:	4a38      	ldr	r2, [pc, #224]	; (ea94 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e9b4:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e9b8:	4f37      	ldr	r7, [pc, #220]	; (ea98 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e9ba:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e9bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e9c0:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    e9c4:	0109      	lsls	r1, r1, #4
    e9c6:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    e9c8:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    e9cc:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e9d0:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    e9d4:	011b      	lsls	r3, r3, #4
    e9d6:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    e9d8:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e9da:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    e9de:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    e9e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e9e6:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    e9e8:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    e9ea:	492c      	ldr	r1, [pc, #176]	; (ea9c <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e9ec:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    e9ee:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e9f2:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    e9f4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    e9f8:	686b      	ldr	r3, [r5, #4]
    e9fa:	4333      	orrs	r3, r6
    e9fc:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e9fe:	4b28      	ldr	r3, [pc, #160]	; (eaa0 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    ea00:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    ea02:	683a      	ldr	r2, [r7, #0]
    ea04:	fba3 3202 	umull	r3, r2, r3, r2
    ea08:	0c92      	lsrs	r2, r2, #18
    ea0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ea0e:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    ea10:	684b      	ldr	r3, [r1, #4]
    ea12:	1b1b      	subs	r3, r3, r4
    ea14:	429a      	cmp	r2, r3
    ea16:	d8fb      	bhi.n	ea10 <TwoWire::force_clock()+0x74>
    ea18:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    ea1c:	4a1f      	ldr	r2, [pc, #124]	; (ea9c <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    ea1e:	f8df e080 	ldr.w	lr, [pc, #128]	; eaa0 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    ea22:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    ea26:	4203      	tst	r3, r0
    ea28:	d002      	beq.n	ea30 <TwoWire::force_clock()+0x94>
    ea2a:	68ab      	ldr	r3, [r5, #8]
    ea2c:	4233      	tst	r3, r6
    ea2e:	d12f      	bne.n	ea90 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    ea30:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    ea34:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    ea36:	6839      	ldr	r1, [r7, #0]
    ea38:	fbae 3101 	umull	r3, r1, lr, r1
    ea3c:	0c89      	lsrs	r1, r1, #18
    ea3e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    ea42:	6853      	ldr	r3, [r2, #4]
    ea44:	1b1b      	subs	r3, r3, r4
    ea46:	4299      	cmp	r1, r3
    ea48:	d8fb      	bhi.n	ea42 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    ea4a:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    ea4e:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    ea50:	6839      	ldr	r1, [r7, #0]
    ea52:	fbae 3101 	umull	r3, r1, lr, r1
    ea56:	0c89      	lsrs	r1, r1, #18
    ea58:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    ea5c:	6853      	ldr	r3, [r2, #4]
    ea5e:	1b1b      	subs	r3, r3, r4
    ea60:	4299      	cmp	r1, r3
    ea62:	d8fb      	bhi.n	ea5c <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    ea64:	f1bc 0c01 	subs.w	ip, ip, #1
    ea68:	d1db      	bne.n	ea22 <TwoWire::force_clock()+0x86>
	bool ret = false;
    ea6a:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    ea6c:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    ea70:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    ea72:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    ea76:	68db      	ldr	r3, [r3, #12]
    ea78:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    ea7c:	f899 3019 	ldrb.w	r3, [r9, #25]
    ea80:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    ea84:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    ea88:	6013      	str	r3, [r2, #0]
}
    ea8a:	b003      	add	sp, #12
    ea8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    ea90:	2001      	movs	r0, #1
    ea92:	e7eb      	b.n	ea6c <TwoWire::force_clock()+0xd0>
    ea94:	200081bc 	.word	0x200081bc
    ea98:	20009538 	.word	0x20009538
    ea9c:	e0001000 	.word	0xe0001000
    eaa0:	431bde83 	.word	0x431bde83

0000eaa4 <TwoWire::wait_idle()>:
	return systick_millis_count;
    eaa4:	4a0e      	ldr	r2, [pc, #56]	; (eae0 <TwoWire::wait_idle()+0x3c>)
{
    eaa6:	b510      	push	{r4, lr}
    eaa8:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    eaaa:	6904      	ldr	r4, [r0, #16]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    eaac:	e005      	b.n	eaba <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    eaae:	01db      	lsls	r3, r3, #7
    eab0:	d407      	bmi.n	eac2 <TwoWire::wait_idle()+0x1e>
    eab2:	6813      	ldr	r3, [r2, #0]
	operator unsigned long () const { return millis() - ms; }
    eab4:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    eab6:	2b10      	cmp	r3, #16
    eab8:	d808      	bhi.n	eacc <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    eaba:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    eabc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    eac0:	d1f5      	bne.n	eaae <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    eac2:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    eac6:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    eac8:	6163      	str	r3, [r4, #20]
}
    eaca:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    eacc:	f7ff ff66 	bl	e99c <TwoWire::force_clock()>
    ead0:	2800      	cmp	r0, #0
    ead2:	d0fa      	beq.n	eaca <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    ead4:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    ead8:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    eada:	6163      	str	r3, [r4, #20]
	return true;
    eadc:	e7f5      	b.n	eaca <TwoWire::wait_idle()+0x26>
    eade:	bf00      	nop
    eae0:	2000fab8 	.word	0x2000fab8

0000eae4 <TwoWire::endTransmission(unsigned char)>:
{
    eae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    eae8:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    eaec:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    eaee:	f1ba 0f00 	cmp.w	sl, #0
    eaf2:	d04f      	beq.n	eb94 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    eaf4:	4681      	mov	r9, r0
    eaf6:	4688      	mov	r8, r1
    eaf8:	f7ff ffd4 	bl	eaa4 <TwoWire::wait_idle()>
    eafc:	2800      	cmp	r0, #0
    eafe:	d049      	beq.n	eb94 <TwoWire::endTransmission(unsigned char)+0xb0>
    eb00:	4e37      	ldr	r6, [pc, #220]	; (ebe0 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    eb02:	2400      	movs	r4, #0
    eb04:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    eb06:	e018      	b.n	eb3a <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    eb08:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    eb0a:	0519      	lsls	r1, r3, #20
    eb0c:	d451      	bmi.n	ebb2 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    eb0e:	04da      	lsls	r2, r3, #19
    eb10:	d455      	bmi.n	ebbe <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    eb12:	0558      	lsls	r0, r3, #21
    eb14:	d459      	bmi.n	ebca <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    eb16:	0499      	lsls	r1, r3, #18
    eb18:	d441      	bmi.n	eb9e <TwoWire::endTransmission(unsigned char)+0xba>
    eb1a:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    eb1c:	1bd2      	subs	r2, r2, r7
    eb1e:	2a32      	cmp	r2, #50	; 0x32
    eb20:	d83d      	bhi.n	eb9e <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    eb22:	4554      	cmp	r4, sl
    eb24:	d907      	bls.n	eb36 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    eb26:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    eb28:	0752      	lsls	r2, r2, #29
    eb2a:	d104      	bne.n	eb36 <TwoWire::endTransmission(unsigned char)+0x52>
    eb2c:	059b      	lsls	r3, r3, #22
    eb2e:	d455      	bmi.n	ebdc <TwoWire::endTransmission(unsigned char)+0xf8>
    eb30:	f1b8 0f00 	cmp.w	r8, #0
    eb34:	d052      	beq.n	ebdc <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    eb36:	f009 fa7f 	bl	18038 <yield>
		if (tx_index <= tx_len) {
    eb3a:	4554      	cmp	r4, sl
    eb3c:	d8e4      	bhi.n	eb08 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    eb3e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    eb40:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    eb42:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    eb46:	d4df      	bmi.n	eb08 <TwoWire::endTransmission(unsigned char)+0x24>
    eb48:	e013      	b.n	eb72 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    eb4a:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    eb4e:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    eb50:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    eb52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    eb56:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    eb58:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    eb5a:	d01e      	beq.n	eb9a <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    eb5c:	458a      	cmp	sl, r1
				fifo_used++;
    eb5e:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    eb62:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    eb66:	d90e      	bls.n	eb86 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    eb68:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    eb6c:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    eb6e:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    eb70:	d0ca      	beq.n	eb08 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    eb72:	2101      	movs	r1, #1
				if (tx_index == 0) {
    eb74:	2c00      	cmp	r4, #0
    eb76:	d0e8      	beq.n	eb4a <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    eb78:	4621      	mov	r1, r4
				fifo_used++;
    eb7a:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    eb7c:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    eb7e:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    eb80:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    eb84:	d8f0      	bhi.n	eb68 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    eb86:	f1b8 0f00 	cmp.w	r8, #0
    eb8a:	d0bd      	beq.n	eb08 <TwoWire::endTransmission(unsigned char)+0x24>
    eb8c:	f44f 7300 	mov.w	r3, #512	; 0x200
    eb90:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    eb92:	e7b9      	b.n	eb08 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    eb94:	2004      	movs	r0, #4
}
    eb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    eb9a:	2401      	movs	r4, #1
    eb9c:	e7b4      	b.n	eb08 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    eb9e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    eba0:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    eba4:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    eba6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ebaa:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ebac:	662a      	str	r2, [r5, #96]	; 0x60
}
    ebae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebb2:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    ebb4:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebb6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ebba:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    ebbc:	e7eb      	b.n	eb96 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebbe:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    ebc0:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebc2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ebc6:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    ebc8:	e7e5      	b.n	eb96 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebca:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    ebcc:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    ebd0:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ebd2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ebd6:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    ebd8:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    ebda:	e7dc      	b.n	eb96 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    ebdc:	2000      	movs	r0, #0
    ebde:	e7da      	b.n	eb96 <TwoWire::endTransmission(unsigned char)+0xb2>
    ebe0:	2000fab8 	.word	0x2000fab8

0000ebe4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    ebe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebe8:	4683      	mov	fp, r0
    ebea:	460c      	mov	r4, r1
    ebec:	4615      	mov	r5, r2
    ebee:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    ebf0:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    ebf4:	f7ff ff56 	bl	eaa4 <TwoWire::wait_idle()>
    ebf8:	2800      	cmp	r0, #0
    ebfa:	f000 809e 	beq.w	ed3a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    ebfe:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    ec00:	2d01      	cmp	r5, #1
    ec02:	f8df 813c 	ldr.w	r8, [pc, #316]	; ed40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    ec06:	f240 4601 	movw	r6, #1025	; 0x401
    ec0a:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    ec0c:	f04f 0100 	mov.w	r1, #0
    ec10:	bf38      	it	cc
    ec12:	2501      	movcc	r5, #1
    ec14:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    ec18:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    ec1a:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    ec1c:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    ec20:	e020      	b.n	ec64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    ec22:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    ec26:	2b87      	cmp	r3, #135	; 0x87
    ec28:	d93f      	bls.n	ecaa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    ec2a:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    ec2e:	0510      	lsls	r0, r2, #20
    ec30:	d45a      	bmi.n	ece8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    ec32:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    ec36:	d170      	bne.n	ed1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    ec38:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    ec3c:	eba3 0309 	sub.w	r3, r3, r9
    ec40:	2b32      	cmp	r3, #50	; 0x32
    ec42:	d86a      	bhi.n	ed1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    ec44:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    ec48:	42ab      	cmp	r3, r5
    ec4a:	d309      	bcc.n	ec60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    ec4c:	2c02      	cmp	r4, #2
    ec4e:	d907      	bls.n	ec60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    ec50:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    ec54:	0759      	lsls	r1, r3, #29
    ec56:	d103      	bne.n	ec60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    ec58:	0593      	lsls	r3, r2, #22
    ec5a:	d44b      	bmi.n	ecf4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    ec5c:	2f00      	cmp	r7, #0
    ec5e:	d049      	beq.n	ecf4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    ec60:	f009 f9ea 	bl	18038 <yield>
		if (tx_state < 3) {
    ec64:	2c02      	cmp	r4, #2
    ec66:	d8dc      	bhi.n	ec22 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    ec68:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    ec6c:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    ec70:	075b      	lsls	r3, r3, #29
    ec72:	d4d6      	bmi.n	ec22 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    ec74:	1e68      	subs	r0, r5, #1
    ec76:	4422      	add	r2, r4
    ec78:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    ec7c:	b94c      	cbnz	r4, ec92 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    ec7e:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    ec82:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    ec84:	1b13      	subs	r3, r2, r4
    ec86:	2b03      	cmp	r3, #3
    ec88:	d8cb      	bhi.n	ec22 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    ec8a:	2c02      	cmp	r4, #2
    ec8c:	d8c9      	bhi.n	ec22 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    ec8e:	2c00      	cmp	r4, #0
    ec90:	d0f5      	beq.n	ec7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    ec92:	2c01      	cmp	r4, #1
    ec94:	d037      	beq.n	ed06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    ec96:	b11f      	cbz	r7, eca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    ec98:	f44f 7300 	mov.w	r3, #512	; 0x200
    ec9c:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    eca0:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    eca4:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    eca6:	2b87      	cmp	r3, #135	; 0x87
    eca8:	d8bf      	bhi.n	ec2a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    ecaa:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    ecae:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    ecb2:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    ecb6:	d0b8      	beq.n	ec2a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    ecb8:	1c59      	adds	r1, r3, #1
    ecba:	449c      	add	ip, r3
    ecbc:	3319      	adds	r3, #25
    ecbe:	b2c9      	uxtb	r1, r1
    ecc0:	fa5f fc8c 	uxtb.w	ip, ip
    ecc4:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    ecc8:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    eccc:	1c4a      	adds	r2, r1, #1
    ecce:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    ecd0:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    ecd4:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    ecd6:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    ecda:	d0a6      	beq.n	ec2a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    ecdc:	2989      	cmp	r1, #137	; 0x89
    ecde:	d1f3      	bne.n	ecc8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    ece0:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    ece4:	0510      	lsls	r0, r2, #20
    ece6:	d5a4      	bpl.n	ec32 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ece8:	f8da 3010 	ldr.w	r3, [sl, #16]
    ecec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ecf0:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    ecf4:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    ecf8:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    ecfc:	d106      	bne.n	ed0c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    ecfe:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    ed02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    ed06:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    ed0a:	e7ba      	b.n	ec82 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    ed0c:	f8da 3010 	ldr.w	r3, [sl, #16]
    ed10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ed14:	f8ca 3010 	str.w	r3, [sl, #16]
    ed18:	e7f1      	b.n	ecfe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ed1a:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ed1e:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ed22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ed26:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ed2a:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    ed2e:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    ed32:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    ed36:	d0e2      	beq.n	ecfe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    ed38:	e7e8      	b.n	ed0c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    ed3a:	2004      	movs	r0, #4
}
    ed3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed40:	2000fab8 	.word	0x2000fab8

0000ed44 <TwoWire::isr()>:
{
    ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    ed46:	6906      	ldr	r6, [r0, #16]
{
    ed48:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    ed4a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    ed4e:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    ed52:	d001      	beq.n	ed58 <TwoWire::isr()+0x14>
    ed54:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    ed58:	07a8      	lsls	r0, r5, #30
    ed5a:	d50b      	bpl.n	ed74 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    ed5c:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    ed60:	0411      	lsls	r1, r2, #16
    ed62:	d53d      	bpl.n	ede0 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    ed64:	2300      	movs	r3, #0
    ed66:	2101      	movs	r1, #1
    ed68:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    ed6c:	4423      	add	r3, r4
    ed6e:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    ed72:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    ed74:	07ea      	lsls	r2, r5, #31
    ed76:	d510      	bpl.n	ed9a <TwoWire::isr()+0x56>
		if (!transmitting) {
    ed78:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    ed7c:	b1f7      	cbz	r7, edbc <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    ed7e:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    ed82:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    ed86:	42bb      	cmp	r3, r7
    ed88:	d926      	bls.n	edd8 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    ed8a:	1c7b      	adds	r3, r7, #1
    ed8c:	4427      	add	r7, r4
    ed8e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    ed92:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    ed96:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    ed9a:	05ab      	lsls	r3, r5, #22
    ed9c:	d50d      	bpl.n	edba <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    ed9e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    eda2:	b118      	cbz	r0, edac <TwoWire::isr()+0x68>
    eda4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    eda8:	b103      	cbz	r3, edac <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    edaa:	4798      	blx	r3
		rxBufferIndex = 0;
    edac:	2300      	movs	r3, #0
    edae:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    edb2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    edb6:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    edba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    edbc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    edc0:	b103      	cbz	r3, edc4 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    edc2:	4798      	blx	r3
			txBufferIndex = 0;
    edc4:	2300      	movs	r3, #0
    edc6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    edca:	2301      	movs	r3, #1
    edcc:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    edd0:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    edd4:	42bb      	cmp	r3, r7
    edd6:	d8d8      	bhi.n	ed8a <TwoWire::isr()+0x46>
			port->STDR = 0;
    edd8:	2300      	movs	r3, #0
    edda:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    edde:	e7dc      	b.n	ed9a <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    ede0:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    ede4:	2b87      	cmp	r3, #135	; 0x87
    ede6:	d8c5      	bhi.n	ed74 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    ede8:	1c59      	adds	r1, r3, #1
    edea:	b2c9      	uxtb	r1, r1
    edec:	e7be      	b.n	ed6c <TwoWire::isr()+0x28>
    edee:	bf00      	nop

0000edf0 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    edf0:	4801      	ldr	r0, [pc, #4]	; (edf8 <lpi2c1_isr()+0x8>)
    edf2:	f7ff bfa7 	b.w	ed44 <TwoWire::isr()>
    edf6:	bf00      	nop
    edf8:	2000959c 	.word	0x2000959c

0000edfc <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    edfc:	4801      	ldr	r0, [pc, #4]	; (ee04 <lpi2c3_isr()+0x8>)
    edfe:	f7ff bfa1 	b.w	ed44 <TwoWire::isr()>
    ee02:	bf00      	nop
    ee04:	200096dc 	.word	0x200096dc

0000ee08 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    ee08:	4801      	ldr	r0, [pc, #4]	; (ee10 <lpi2c4_isr()+0x8>)
    ee0a:	f7ff bf9b 	b.w	ed44 <TwoWire::isr()>
    ee0e:	bf00      	nop
    ee10:	2000981c 	.word	0x2000981c

0000ee14 <TwoWire::setClock(unsigned long)>:
{
    ee14:	b410      	push	{r4}
	if (frequency < 400000) {
    ee16:	4c14      	ldr	r4, [pc, #80]	; (ee68 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    ee18:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    ee1a:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    ee1c:	42a1      	cmp	r1, r4
	port->MCR = 0;
    ee1e:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    ee20:	d814      	bhi.n	ee4c <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    ee22:	4c12      	ldr	r4, [pc, #72]	; (ee6c <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    ee24:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    ee26:	4912      	ldr	r1, [pc, #72]	; (ee70 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    ee28:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    ee2c:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    ee2e:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    ee30:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    ee32:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    ee34:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    ee36:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    ee38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    ee3c:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    ee3e:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    ee40:	6218      	str	r0, [r3, #32]
}
    ee42:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    ee46:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    ee48:	611a      	str	r2, [r3, #16]
}
    ee4a:	4770      	bx	lr
	} else if (frequency < 1000000) {
    ee4c:	4809      	ldr	r0, [pc, #36]	; (ee74 <TwoWire::setClock(unsigned long)+0x60>)
    ee4e:	4281      	cmp	r1, r0
    ee50:	d907      	bls.n	ee62 <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    ee52:	4c09      	ldr	r4, [pc, #36]	; (ee78 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    ee54:	4809      	ldr	r0, [pc, #36]	; (ee7c <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    ee56:	490a      	ldr	r1, [pc, #40]	; (ee80 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    ee58:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    ee5a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    ee5c:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    ee5e:	62d9      	str	r1, [r3, #44]	; 0x2c
    ee60:	e7e8      	b.n	ee34 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    ee62:	4c08      	ldr	r4, [pc, #32]	; (ee84 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    ee64:	4808      	ldr	r0, [pc, #32]	; (ee88 <TwoWire::setClock(unsigned long)+0x74>)
    ee66:	e7f6      	b.n	ee56 <TwoWire::setClock(unsigned long)+0x42>
    ee68:	00061a7f 	.word	0x00061a7f
    ee6c:	1928373b 	.word	0x1928373b
    ee70:	05050bb8 	.word	0x05050bb8
    ee74:	000f423f 	.word	0x000f423f
    ee78:	0407090a 	.word	0x0407090a
    ee7c:	01010960 	.word	0x01010960
    ee80:	00057f00 	.word	0x00057f00
    ee84:	0c121a1c 	.word	0x0c121a1c
    ee88:	02020e10 	.word	0x02020e10

0000ee8c <Adafruit_GFX::startWrite()>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
    ee8c:	4770      	bx	lr
    ee8e:	bf00      	nop

0000ee90 <Adafruit_GFX::writePixel(short, short, unsigned short)>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
    ee90:	b410      	push	{r4}
  drawPixel(x, y, color);
    ee92:	6804      	ldr	r4, [r0, #0]
    ee94:	6924      	ldr	r4, [r4, #16]
    ee96:	46a4      	mov	ip, r4
}
    ee98:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
    ee9c:	4760      	bx	ip
    ee9e:	bf00      	nop

0000eea0 <Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
    eea0:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
    eea2:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    eea4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
    eea8:	9502      	str	r5, [sp, #8]
    eeaa:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    eeac:	46a4      	mov	ip, r4
}
    eeae:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
    eeb0:	4760      	bx	ip
    eeb2:	bf00      	nop

0000eeb4 <Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
    eeb4:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
    eeb6:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    eeb8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
    eebc:	9502      	str	r5, [sp, #8]
    eebe:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    eec0:	46a4      	mov	ip, r4
}
    eec2:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
    eec4:	4760      	bx	ip
    eec6:	bf00      	nop

0000eec8 <Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
    eec8:	b430      	push	{r4, r5}
    eeca:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
    eece:	6804      	ldr	r4, [r0, #0]
    eed0:	9502      	str	r5, [sp, #8]
                                 uint16_t color) {
    eed2:	f8bd 500c 	ldrh.w	r5, [sp, #12]
  fillRect(x, y, w, h, color);
    eed6:	9503      	str	r5, [sp, #12]
    eed8:	6c24      	ldr	r4, [r4, #64]	; 0x40
    eeda:	46a4      	mov	ip, r4
}
    eedc:	bc30      	pop	{r4, r5}
  fillRect(x, y, w, h, color);
    eede:	4760      	bx	ip

0000eee0 <Adafruit_GFX::fillScreen(unsigned short)>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
    eee0:	b530      	push	{r4, r5, lr}
  fillRect(0, 0, _width, _height, color);
    eee2:	2200      	movs	r2, #0
void Adafruit_GFX::fillScreen(uint16_t color) {
    eee4:	b083      	sub	sp, #12
  fillRect(0, 0, _width, _height, color);
    eee6:	6804      	ldr	r4, [r0, #0]
    eee8:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    eeec:	9101      	str	r1, [sp, #4]
    eeee:	4611      	mov	r1, r2
    eef0:	9500      	str	r5, [sp, #0]
    eef2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    eef6:	6c24      	ldr	r4, [r4, #64]	; 0x40
    eef8:	47a0      	blx	r4
}
    eefa:	b003      	add	sp, #12
    eefc:	bd30      	pop	{r4, r5, pc}
    eefe:	bf00      	nop

0000ef00 <Adafruit_GFX::invertDisplay(bool)>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    ef00:	4770      	bx	lr
    ef02:	bf00      	nop

0000ef04 <Adafruit_GFX::setRotation(unsigned char)>:
  rotation = (x & 3);
    ef04:	f001 0303 	and.w	r3, r1, #3
    ef08:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
    ef0a:	07cb      	lsls	r3, r1, #31
    ef0c:	d405      	bmi.n	ef1a <Adafruit_GFX::setRotation(unsigned char)+0x16>
    _width = WIDTH;
    ef0e:	8902      	ldrh	r2, [r0, #8]
    _height = HEIGHT;
    ef10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    _width = WIDTH;
    ef14:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
    ef16:	81c3      	strh	r3, [r0, #14]
}
    ef18:	4770      	bx	lr
    _width = HEIGHT;
    ef1a:	8942      	ldrh	r2, [r0, #10]
    _height = WIDTH;
    ef1c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    _width = HEIGHT;
    ef20:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
    ef22:	81c3      	strh	r3, [r0, #14]
}
    ef24:	4770      	bx	lr
    ef26:	bf00      	nop

0000ef28 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    ef28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef2c:	461c      	mov	r4, r3
    ef2e:	460b      	mov	r3, r1
  startWrite();
    ef30:	6801      	ldr	r1, [r0, #0]
                                 uint16_t color) {
    ef32:	b084      	sub	sp, #16
    ef34:	4e11      	ldr	r6, [pc, #68]	; (ef7c <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x54>)
    ef36:	4605      	mov	r5, r0
  startWrite();
    ef38:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
    ef3a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    ef3e:	42b7      	cmp	r7, r6
    ef40:	d110      	bne.n	ef64 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x3c>
  writeLine(x, y, x, y + h - 1, color);
    ef42:	3c01      	subs	r4, #1
    ef44:	f8cd 8004 	str.w	r8, [sp, #4]
    ef48:	4628      	mov	r0, r5
    ef4a:	4414      	add	r4, r2
    ef4c:	b224      	sxth	r4, r4
    ef4e:	9400      	str	r4, [sp, #0]
    ef50:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    ef52:	4619      	mov	r1, r3
    ef54:	47a0      	blx	r4
  endWrite();
    ef56:	682b      	ldr	r3, [r5, #0]
    ef58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef5a:	42b3      	cmp	r3, r6
    ef5c:	d109      	bne.n	ef72 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x4a>
}
    ef5e:	b004      	add	sp, #16
    ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef64:	e9cd 3202 	strd	r3, r2, [sp, #8]
  startWrite();
    ef68:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
    ef6a:	6829      	ldr	r1, [r5, #0]
    ef6c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    ef70:	e7e7      	b.n	ef42 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x1a>
  endWrite();
    ef72:	4628      	mov	r0, r5
}
    ef74:	b004      	add	sp, #16
    ef76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
    ef7a:	4718      	bx	r3
    ef7c:	0000ee8d 	.word	0x0000ee8d

0000ef80 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    ef80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  startWrite();
    ef84:	6805      	ldr	r5, [r0, #0]
                                 uint16_t color) {
    ef86:	b085      	sub	sp, #20
    ef88:	4e12      	ldr	r6, [pc, #72]	; (efd4 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x54>)
    ef8a:	4604      	mov	r4, r0
  startWrite();
    ef8c:	696f      	ldr	r7, [r5, #20]
                                 uint16_t color) {
    ef8e:	4699      	mov	r9, r3
    ef90:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    ef94:	42b7      	cmp	r7, r6
    ef96:	d110      	bne.n	efba <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x3a>
  writeLine(x, y, x + w - 1, y, color);
    ef98:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    ef9c:	f8cd 8004 	str.w	r8, [sp, #4]
    efa0:	9200      	str	r2, [sp, #0]
    efa2:	4620      	mov	r0, r4
    efa4:	440b      	add	r3, r1
    efa6:	6aad      	ldr	r5, [r5, #40]	; 0x28
    efa8:	b21b      	sxth	r3, r3
    efaa:	47a8      	blx	r5
  endWrite();
    efac:	6823      	ldr	r3, [r4, #0]
    efae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    efb0:	42b3      	cmp	r3, r6
    efb2:	d109      	bne.n	efc8 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x48>
}
    efb4:	b005      	add	sp, #20
    efb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    efba:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
    efbe:	47b8      	blx	r7
  writeLine(x, y, x + w - 1, y, color);
    efc0:	6825      	ldr	r5, [r4, #0]
    efc2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    efc6:	e7e7      	b.n	ef98 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x18>
  endWrite();
    efc8:	4620      	mov	r0, r4
}
    efca:	b005      	add	sp, #20
    efcc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  endWrite();
    efd0:	4718      	bx	r3
    efd2:	bf00      	nop
    efd4:	0000ee8d 	.word	0x0000ee8d

0000efd8 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    efd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
    efdc:	4299      	cmp	r1, r3
                            uint16_t color) {
    efde:	b087      	sub	sp, #28
    efe0:	4605      	mov	r5, r0
    efe2:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
    efe6:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
  if (x0 == x1) {
    efea:	d022      	beq.n	f032 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x5a>
  } else if (y0 == y1) {
    efec:	42a2      	cmp	r2, r4
    efee:	d012      	beq.n	f016 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x3e>
    startWrite();
    eff0:	6807      	ldr	r7, [r0, #0]
    eff2:	f8df 8084 	ldr.w	r8, [pc, #132]	; f078 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0xa0>
    eff6:	f8d7 9014 	ldr.w	r9, [r7, #20]
    effa:	45c1      	cmp	r9, r8
    effc:	d133      	bne.n	f066 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x8e>
    writeLine(x0, y0, x1, y1, color);
    effe:	4628      	mov	r0, r5
    f000:	e9cd 4600 	strd	r4, r6, [sp]
    f004:	6abc      	ldr	r4, [r7, #40]	; 0x28
    f006:	47a0      	blx	r4
    endWrite();
    f008:	682b      	ldr	r3, [r5, #0]
    f00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f00c:	4543      	cmp	r3, r8
    f00e:	d125      	bne.n	f05c <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x84>
}
    f010:	b007      	add	sp, #28
    f012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (x0 > x1)
    f016:	4299      	cmp	r1, r3
    f018:	dc1c      	bgt.n	f054 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x7c>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    f01a:	960e      	str	r6, [sp, #56]	; 0x38
    f01c:	3301      	adds	r3, #1
    f01e:	682c      	ldr	r4, [r5, #0]
    f020:	4628      	mov	r0, r5
    f022:	1a5b      	subs	r3, r3, r1
    f024:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    f026:	b21b      	sxth	r3, r3
    f028:	46a4      	mov	ip, r4
}
    f02a:	b007      	add	sp, #28
    f02c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    f030:	4760      	bx	ip
    if (y0 > y1)
    f032:	42a2      	cmp	r2, r4
    f034:	dd02      	ble.n	f03c <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x64>
    f036:	4613      	mov	r3, r2
    f038:	4622      	mov	r2, r4
    f03a:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
    f03c:	960e      	str	r6, [sp, #56]	; 0x38
    f03e:	1c63      	adds	r3, r4, #1
    f040:	682c      	ldr	r4, [r5, #0]
    f042:	4628      	mov	r0, r5
    f044:	1a9b      	subs	r3, r3, r2
    f046:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    f048:	b21b      	sxth	r3, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    f04a:	46a4      	mov	ip, r4
}
    f04c:	b007      	add	sp, #28
    f04e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    f052:	4760      	bx	ip
    if (x0 > x1)
    f054:	4608      	mov	r0, r1
    f056:	4619      	mov	r1, r3
    f058:	4603      	mov	r3, r0
    f05a:	e7de      	b.n	f01a <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x42>
    endWrite();
    f05c:	4628      	mov	r0, r5
}
    f05e:	b007      	add	sp, #28
    f060:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
    f064:	4718      	bx	r3
    f066:	e9cd 2304 	strd	r2, r3, [sp, #16]
    f06a:	9103      	str	r1, [sp, #12]
    startWrite();
    f06c:	47c8      	blx	r9
    writeLine(x0, y0, x1, y1, color);
    f06e:	682f      	ldr	r7, [r5, #0]
    f070:	9903      	ldr	r1, [sp, #12]
    f072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f076:	e7c2      	b.n	effe <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x26>
    f078:	0000ee8d 	.word	0x0000ee8d

0000f07c <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>:
  startWrite();
    f07c:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
    f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f084:	4690      	mov	r8, r2
    f086:	461f      	mov	r7, r3
    f088:	4a1f      	ldr	r2, [pc, #124]	; (f108 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
    f08a:	b083      	sub	sp, #12
  startWrite();
    f08c:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
    f090:	4605      	mov	r5, r0
    f092:	460c      	mov	r4, r1
    f094:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
    f098:	4293      	cmp	r3, r2
    f09a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
    f09e:	d129      	bne.n	f0f4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x78>
  for (int16_t i = x; i < x + w; i++) {
    f0a0:	4427      	add	r7, r4
    f0a2:	42a7      	cmp	r7, r4
    f0a4:	dd1e      	ble.n	f0e4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    f0a6:	f8df b064 	ldr.w	fp, [pc, #100]	; f10c <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x90>
    f0aa:	e00a      	b.n	f0c2 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
    f0ac:	3401      	adds	r4, #1
  drawFastVLine(x, y, h, color);
    f0ae:	f8cd a000 	str.w	sl, [sp]
    f0b2:	f8dc 6038 	ldr.w	r6, [ip, #56]	; 0x38
    f0b6:	b224      	sxth	r4, r4
    f0b8:	47b0      	blx	r6
  endWrite();
    f0ba:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
    f0be:	42bc      	cmp	r4, r7
    f0c0:	da10      	bge.n	f0e4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    writeFastVLine(i, y, h, color);
    f0c2:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
    f0c6:	464b      	mov	r3, r9
    f0c8:	4642      	mov	r2, r8
    f0ca:	4621      	mov	r1, r4
    f0cc:	455e      	cmp	r6, fp
    f0ce:	4628      	mov	r0, r5
    f0d0:	d0ec      	beq.n	f0ac <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x30>
    f0d2:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
    f0d4:	f8cd a000 	str.w	sl, [sp]
    f0d8:	47b0      	blx	r6
  endWrite();
    f0da:	f8d5 c000 	ldr.w	ip, [r5]
    f0de:	b224      	sxth	r4, r4
  for (int16_t i = x; i < x + w; i++) {
    f0e0:	42bc      	cmp	r4, r7
    f0e2:	dbee      	blt.n	f0c2 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
  endWrite();
    f0e4:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    f0e8:	4a07      	ldr	r2, [pc, #28]	; (f108 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
    f0ea:	4293      	cmp	r3, r2
    f0ec:	d106      	bne.n	f0fc <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x80>
}
    f0ee:	b003      	add	sp, #12
    f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
    f0f4:	4798      	blx	r3
  endWrite();
    f0f6:	f8d5 c000 	ldr.w	ip, [r5]
    f0fa:	e7d1      	b.n	f0a0 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x24>
    f0fc:	4628      	mov	r0, r5
}
    f0fe:	b003      	add	sp, #12
    f100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    f104:	4718      	bx	r3
    f106:	bf00      	nop
    f108:	0000ee8d 	.word	0x0000ee8d
    f10c:	0000eea1 	.word	0x0000eea1

0000f110 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f114:	461d      	mov	r5, r3
  startWrite();
    f116:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
    f118:	4616      	mov	r6, r2
    f11a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; f1d8 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xc8>
  startWrite();
    f11e:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
    f120:	b085      	sub	sp, #20
    f122:	4604      	mov	r4, r0
    f124:	454a      	cmp	r2, r9
    f126:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
    f12a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
    f12e:	d143      	bne.n	f1b8 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xa8>
  writeFastHLine(x, y, w, color);
    f130:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    f134:	4632      	mov	r2, r6
    f136:	f8df a0a4 	ldr.w	sl, [pc, #164]	; f1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xcc>
    f13a:	4620      	mov	r0, r4
  drawFastHLine(x, y, w, color);
    f13c:	9700      	str	r7, [sp, #0]
    f13e:	45d3      	cmp	fp, sl
  writeFastHLine(x, y, w, color);
    f140:	9103      	str	r1, [sp, #12]
  drawFastHLine(x, y, w, color);
    f142:	bf08      	it	eq
    f144:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	; 0x3c
  writeFastHLine(x, y, w, color);
    f148:	462b      	mov	r3, r5
    f14a:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
    f14c:	6823      	ldr	r3, [r4, #0]
    f14e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
  writeFastHLine(x, y, w, color);
    f152:	9903      	ldr	r1, [sp, #12]
  writeFastHLine(x, y + h - 1, w, color);
    f154:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    f158:	4432      	add	r2, r6
  drawFastHLine(x, y, w, color);
    f15a:	9700      	str	r7, [sp, #0]
    f15c:	45d3      	cmp	fp, sl
  writeFastHLine(x, y + h - 1, w, color);
    f15e:	b212      	sxth	r2, r2
    f160:	d134      	bne.n	f1cc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xbc>
  drawFastHLine(x, y, w, color);
    f162:	f8d3 a03c 	ldr.w	sl, [r3, #60]	; 0x3c
    f166:	4620      	mov	r0, r4
    f168:	9103      	str	r1, [sp, #12]
    f16a:	462b      	mov	r3, r5
    f16c:	47d0      	blx	sl
}
    f16e:	9903      	ldr	r1, [sp, #12]
  writeFastVLine(x, y, h, color);
    f170:	6823      	ldr	r3, [r4, #0]
    f172:	4632      	mov	r2, r6
    f174:	f8df a068 	ldr.w	sl, [pc, #104]	; f1e0 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xd0>
    f178:	4620      	mov	r0, r4
    f17a:	f8d3 b020 	ldr.w	fp, [r3, #32]
  writeFastVLine(x + w - 1, y, h, color);
    f17e:	3d01      	subs	r5, #1
  drawFastVLine(x, y, h, color);
    f180:	9700      	str	r7, [sp, #0]
    f182:	45d3      	cmp	fp, sl
  writeFastVLine(x, y, h, color);
    f184:	9103      	str	r1, [sp, #12]
  drawFastVLine(x, y, h, color);
    f186:	bf08      	it	eq
    f188:	f8d3 b038 	ldreq.w	fp, [r3, #56]	; 0x38
  writeFastVLine(x, y, h, color);
    f18c:	4643      	mov	r3, r8
    f18e:	47d8      	blx	fp
    f190:	9903      	ldr	r1, [sp, #12]
  writeFastVLine(x + w - 1, y, h, color);
    f192:	6822      	ldr	r2, [r4, #0]
  drawFastVLine(x, y, h, color);
    f194:	4643      	mov	r3, r8
  writeFastVLine(x + w - 1, y, h, color);
    f196:	440d      	add	r5, r1
    f198:	4620      	mov	r0, r4
    f19a:	b229      	sxth	r1, r5
    f19c:	6a15      	ldr	r5, [r2, #32]
  drawFastVLine(x, y, h, color);
    f19e:	9700      	str	r7, [sp, #0]
    f1a0:	4555      	cmp	r5, sl
    f1a2:	bf08      	it	eq
    f1a4:	6b95      	ldreq	r5, [r2, #56]	; 0x38
  writeFastVLine(x + w - 1, y, h, color);
    f1a6:	4632      	mov	r2, r6
    f1a8:	47a8      	blx	r5
  endWrite();
    f1aa:	6823      	ldr	r3, [r4, #0]
    f1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f1ae:	454b      	cmp	r3, r9
    f1b0:	d107      	bne.n	f1c2 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xb2>
}
    f1b2:	b005      	add	sp, #20
    f1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1b8:	9103      	str	r1, [sp, #12]
  startWrite();
    f1ba:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
    f1bc:	6823      	ldr	r3, [r4, #0]
    f1be:	9903      	ldr	r1, [sp, #12]
    f1c0:	e7b6      	b.n	f130 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x20>
  endWrite();
    f1c2:	4620      	mov	r0, r4
}
    f1c4:	b005      	add	sp, #20
    f1c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    f1ca:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
    f1cc:	9103      	str	r1, [sp, #12]
    f1ce:	462b      	mov	r3, r5
    f1d0:	4620      	mov	r0, r4
    f1d2:	47d8      	blx	fp
    f1d4:	9903      	ldr	r1, [sp, #12]
    f1d6:	e7cb      	b.n	f170 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x60>
    f1d8:	0000ee8d 	.word	0x0000ee8d
    f1dc:	0000eeb5 	.word	0x0000eeb5
    f1e0:	0000eea1 	.word	0x0000eea1

0000f1e4 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)>:
                             uint16_t color) {
    f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1e8:	ed2d 8b02 	vpush	{d8}
    f1ec:	b085      	sub	sp, #20
    f1ee:	4698      	mov	r8, r3
    f1f0:	460c      	mov	r4, r1
    f1f2:	4616      	mov	r6, r2
    f1f4:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f1f8:	eba8 0a01 	sub.w	sl, r8, r1
                             uint16_t color) {
    f1fc:	4607      	mov	r7, r0
    f1fe:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f202:	ebac 0302 	sub.w	r3, ip, r2
    f206:	f1ba 0f00 	cmp.w	sl, #0
    f20a:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
    f20e:	bfb8      	it	lt
    f210:	f1ca 0a00 	rsblt	sl, sl, #0
    f214:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
  if (steep) {
    f218:	4555      	cmp	r5, sl
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f21a:	9500      	str	r5, [sp, #0]
  if (steep) {
    f21c:	dd66      	ble.n	f2ec <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x108>
    f21e:	4641      	mov	r1, r8
    f220:	4620      	mov	r0, r4
    f222:	4622      	mov	r2, r4
    f224:	4643      	mov	r3, r8
    _swap_int16_t(x0, y0);
    f226:	4634      	mov	r4, r6
    _swap_int16_t(x1, y1);
    f228:	46e0      	mov	r8, ip
    _swap_int16_t(x0, y0);
    f22a:	4606      	mov	r6, r0
    _swap_int16_t(x1, y1);
    f22c:	468c      	mov	ip, r1
  if (x0 > x1) {
    f22e:	4544      	cmp	r4, r8
    f230:	dd08      	ble.n	f244 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x60>
    f232:	4615      	mov	r5, r2
    f234:	4630      	mov	r0, r6
    f236:	4621      	mov	r1, r4
    f238:	461a      	mov	r2, r3
    _swap_int16_t(y0, y1);
    f23a:	4666      	mov	r6, ip
  if (x0 > x1) {
    f23c:	4644      	mov	r4, r8
    f23e:	462b      	mov	r3, r5
    _swap_int16_t(y0, y1);
    f240:	4684      	mov	ip, r0
  if (x0 > x1) {
    f242:	4688      	mov	r8, r1
  dy = abs(y1 - y0);
    f244:	1a9b      	subs	r3, r3, r2
  dx = x1 - x0;
    f246:	eba8 0204 	sub.w	r2, r8, r4
  dy = abs(y1 - y0);
    f24a:	2b00      	cmp	r3, #0
  int16_t err = dx / 2;
    f24c:	b215      	sxth	r5, r2
  dx = x1 - x0;
    f24e:	b292      	uxth	r2, r2
  dy = abs(y1 - y0);
    f250:	bfb8      	it	lt
    f252:	425b      	neglt	r3, r3
  int16_t err = dx / 2;
    f254:	2d00      	cmp	r5, #0
  dx = x1 - x0;
    f256:	9201      	str	r2, [sp, #4]
  int16_t err = dx / 2;
    f258:	bfb8      	it	lt
    f25a:	3501      	addlt	r5, #1
  if (y0 < y1) {
    f25c:	45b4      	cmp	ip, r6
  int16_t err = dx / 2;
    f25e:	ea4f 0565 	mov.w	r5, r5, asr #1
  if (y0 < y1) {
    f262:	dd3a      	ble.n	f2da <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xf6>
    ystep = 1;
    f264:	2201      	movs	r2, #1
    f266:	9202      	str	r2, [sp, #8]
    err -= dy;
    f268:	b29b      	uxth	r3, r3
    f26a:	ee08 7a10 	vmov	s16, r7
    f26e:	9303      	str	r3, [sp, #12]
    f270:	e01e      	b.n	f2b0 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xcc>
      writePixel(y0, x0, color);
    f272:	ee18 1a10 	vmov	r1, s16
    f276:	4f20      	ldr	r7, [pc, #128]	; (f2f8 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x114>)
  drawPixel(x, y, color);
    f278:	ee18 0a10 	vmov	r0, s16
      writePixel(y0, x0, color);
    f27c:	f8d1 c000 	ldr.w	ip, [r1]
  drawPixel(x, y, color);
    f280:	4631      	mov	r1, r6
      writePixel(y0, x0, color);
    f282:	f8dc b018 	ldr.w	fp, [ip, #24]
    f286:	45bb      	cmp	fp, r7
    f288:	d12e      	bne.n	f2e8 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x104>
  drawPixel(x, y, color);
    f28a:	f8dc b010 	ldr.w	fp, [ip, #16]
    f28e:	47d8      	blx	fp
    err -= dy;
    f290:	9b03      	ldr	r3, [sp, #12]
    f292:	3401      	adds	r4, #1
      y0 += ystep;
    f294:	9a02      	ldr	r2, [sp, #8]
    err -= dy;
    f296:	1aeb      	subs	r3, r5, r3
      err += dx;
    f298:	9901      	ldr	r1, [sp, #4]
      y0 += ystep;
    f29a:	18b2      	adds	r2, r6, r2
    f29c:	b224      	sxth	r4, r4
    err -= dy;
    f29e:	b21d      	sxth	r5, r3
    f2a0:	b29b      	uxth	r3, r3
    if (err < 0) {
    f2a2:	2d00      	cmp	r5, #0
      err += dx;
    f2a4:	440b      	add	r3, r1
    if (err < 0) {
    f2a6:	da01      	bge.n	f2ac <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xc8>
      y0 += ystep;
    f2a8:	b216      	sxth	r6, r2
      err += dx;
    f2aa:	b21d      	sxth	r5, r3
  for (; x0 <= x1; x0++) {
    f2ac:	45a0      	cmp	r8, r4
    f2ae:	db16      	blt.n	f2de <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xfa>
    if (steep) {
    f2b0:	9b00      	ldr	r3, [sp, #0]
  drawPixel(x, y, color);
    f2b2:	4622      	mov	r2, r4
    f2b4:	4621      	mov	r1, r4
    if (steep) {
    f2b6:	4553      	cmp	r3, sl
  drawPixel(x, y, color);
    f2b8:	464b      	mov	r3, r9
    if (steep) {
    f2ba:	dcda      	bgt.n	f272 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x8e>
      writePixel(x0, y0, color);
    f2bc:	ee18 3a10 	vmov	r3, s16
    f2c0:	4f0d      	ldr	r7, [pc, #52]	; (f2f8 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x114>)
  drawPixel(x, y, color);
    f2c2:	4632      	mov	r2, r6
    f2c4:	ee18 0a10 	vmov	r0, s16
      writePixel(x0, y0, color);
    f2c8:	f8d3 c000 	ldr.w	ip, [r3]
  drawPixel(x, y, color);
    f2cc:	464b      	mov	r3, r9
      writePixel(x0, y0, color);
    f2ce:	f8dc b018 	ldr.w	fp, [ip, #24]
    f2d2:	45bb      	cmp	fp, r7
    f2d4:	d0d9      	beq.n	f28a <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xa6>
    f2d6:	47d8      	blx	fp
    f2d8:	e7da      	b.n	f290 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xac>
  for (; x0 <= x1; x0++) {
    f2da:	4544      	cmp	r4, r8
    f2dc:	dd08      	ble.n	f2f0 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x10c>
}
    f2de:	b005      	add	sp, #20
    f2e0:	ecbd 8b02 	vpop	{d8}
    f2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      writePixel(y0, x0, color);
    f2e8:	47d8      	blx	fp
    f2ea:	e7d1      	b.n	f290 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xac>
    f2ec:	4663      	mov	r3, ip
    f2ee:	e79e      	b.n	f22e <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x4a>
    ystep = -1;
    f2f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f2f4:	9202      	str	r2, [sp, #8]
    f2f6:	e7b7      	b.n	f268 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x84>
    f2f8:	0000ee91 	.word	0x0000ee91

0000f2fc <Adafruit_GFX::Adafruit_GFX(short, short)>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    f2fc:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
    f2fe:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
    f300:	4a08      	ldr	r2, [pc, #32]	; (f324 <Adafruit_GFX::Adafruit_GFX(short, short)+0x28>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    f302:	8101      	strh	r1, [r0, #8]
  _width = WIDTH;
    f304:	8181      	strh	r1, [r0, #12]
  textcolor = textbgcolor = 0xFFFF;
    f306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  textsize_x = textsize_y = 1;
    f30a:	6182      	str	r2, [r0, #24]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    f30c:	4a06      	ldr	r2, [pc, #24]	; (f328 <Adafruit_GFX::Adafruit_GFX(short, short)+0x2c>)
    f30e:	b410      	push	{r4}
	constexpr Print() : write_error(0) {}
    f310:	2400      	movs	r4, #0
    f312:	6002      	str	r2, [r0, #0]
    f314:	6044      	str	r4, [r0, #4]
  _cp437 = false;
    f316:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
    f318:	6204      	str	r4, [r0, #32]
  textcolor = textbgcolor = 0xFFFF;
    f31a:	e9c0 4104 	strd	r4, r1, [r0, #16]
}
    f31e:	f85d 4b04 	ldr.w	r4, [sp], #4
    f322:	4770      	bx	lr
    f324:	01000101 	.word	0x01000101
    f328:	20007e1c 	.word	0x20007e1c

0000f32c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>:
                              int16_t w, int16_t h, uint16_t color) {
    f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f330:	b087      	sub	sp, #28
    f332:	4682      	mov	sl, r0
  startWrite();
    f334:	6800      	ldr	r0, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
    f336:	4617      	mov	r7, r2
    f338:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    f33c:	4688      	mov	r8, r1
    f33e:	9305      	str	r3, [sp, #20]
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    f340:	1df3      	adds	r3, r6, #7
    f342:	4a35      	ldr	r2, [pc, #212]	; (f418 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xec>)
                              int16_t w, int16_t h, uint16_t color) {
    f344:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    f348:	bf48      	it	mi
    f34a:	f106 030e 	addmi.w	r3, r6, #14
                              int16_t w, int16_t h, uint16_t color) {
    f34e:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    f352:	10db      	asrs	r3, r3, #3
    f354:	9303      	str	r3, [sp, #12]
  startWrite();
    f356:	6943      	ldr	r3, [r0, #20]
    f358:	4293      	cmp	r3, r2
    f35a:	d153      	bne.n	f404 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xd8>
  for (int16_t j = 0; j < h; j++, y++) {
    f35c:	2c00      	cmp	r4, #0
    f35e:	dd45      	ble.n	f3ec <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xc0>
    f360:	443c      	add	r4, r7
    f362:	4684      	mov	ip, r0
    f364:	b2a3      	uxth	r3, r4
    f366:	9304      	str	r3, [sp, #16]
    f368:	2300      	movs	r3, #0
    f36a:	461d      	mov	r5, r3
    f36c:	9302      	str	r3, [sp, #8]
    for (int16_t i = 0; i < w; i++) {
    f36e:	2e00      	cmp	r6, #0
    f370:	dd31      	ble.n	f3d6 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xaa>
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f372:	9a05      	ldr	r2, [sp, #20]
    for (int16_t i = 0; i < w; i++) {
    f374:	2300      	movs	r3, #0
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f376:	9902      	ldr	r1, [sp, #8]
    f378:	440a      	add	r2, r1
    f37a:	9201      	str	r2, [sp, #4]
    f37c:	e00a      	b.n	f394 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x68>
        b <<= 1;
    f37e:	b2ed      	uxtb	r5, r5
        writePixel(x + i, y, color);
    f380:	eb04 0108 	add.w	r1, r4, r8
      if (b & 0x80)
    f384:	f015 0f80 	tst.w	r5, #128	; 0x80
    f388:	b209      	sxth	r1, r1
    f38a:	d113      	bne.n	f3b4 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x88>
    for (int16_t i = 0; i < w; i++) {
    f38c:	3401      	adds	r4, #1
    f38e:	b223      	sxth	r3, r4
    f390:	42b3      	cmp	r3, r6
    f392:	d020      	beq.n	f3d6 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xaa>
      if (i & 7)
    f394:	f013 0f07 	tst.w	r3, #7
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f398:	ea4f 02e3 	mov.w	r2, r3, asr #3
    f39c:	b29c      	uxth	r4, r3
        b <<= 1;
    f39e:	ea4f 0545 	mov.w	r5, r5, lsl #1
      if (i & 7)
    f3a2:	d1ec      	bne.n	f37e <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x52>
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    f3a4:	9b01      	ldr	r3, [sp, #4]
    f3a6:	eb04 0108 	add.w	r1, r4, r8
    f3aa:	5c9d      	ldrb	r5, [r3, r2]
        writePixel(x + i, y, color);
    f3ac:	b209      	sxth	r1, r1
      if (b & 0x80)
    f3ae:	f015 0f80 	tst.w	r5, #128	; 0x80
    f3b2:	d0eb      	beq.n	f38c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x60>
        writePixel(x + i, y, color);
    f3b4:	f8dc 9018 	ldr.w	r9, [ip, #24]
  drawPixel(x, y, color);
    f3b8:	465b      	mov	r3, fp
    f3ba:	4818      	ldr	r0, [pc, #96]	; (f41c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xf0>)
    f3bc:	463a      	mov	r2, r7
    f3be:	4581      	cmp	r9, r0
    f3c0:	d11b      	bne.n	f3fa <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xce>
    f3c2:	3401      	adds	r4, #1
    f3c4:	f8dc 9010 	ldr.w	r9, [ip, #16]
    f3c8:	4650      	mov	r0, sl
    f3ca:	47c8      	blx	r9
  endWrite();
    f3cc:	f8da c000 	ldr.w	ip, [sl]
    for (int16_t i = 0; i < w; i++) {
    f3d0:	b223      	sxth	r3, r4
    f3d2:	42b3      	cmp	r3, r6
    f3d4:	d1de      	bne.n	f394 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x68>
  for (int16_t j = 0; j < h; j++, y++) {
    f3d6:	3701      	adds	r7, #1
    f3d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    f3dc:	4413      	add	r3, r2
    f3de:	9a04      	ldr	r2, [sp, #16]
    f3e0:	9302      	str	r3, [sp, #8]
    f3e2:	b2bb      	uxth	r3, r7
    f3e4:	b23f      	sxth	r7, r7
    f3e6:	429a      	cmp	r2, r3
    f3e8:	d1c1      	bne.n	f36e <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x42>
    f3ea:	4660      	mov	r0, ip
  endWrite();
    f3ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    f3ee:	4a0a      	ldr	r2, [pc, #40]	; (f418 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xec>)
    f3f0:	4293      	cmp	r3, r2
    f3f2:	d10c      	bne.n	f40e <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xe2>
}
    f3f4:	b007      	add	sp, #28
    f3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        writePixel(x + i, y, color);
    f3fa:	4650      	mov	r0, sl
    f3fc:	47c8      	blx	r9
  endWrite();
    f3fe:	f8da c000 	ldr.w	ip, [sl]
    f402:	e7c3      	b.n	f38c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x60>
  startWrite();
    f404:	4650      	mov	r0, sl
    f406:	4798      	blx	r3
  endWrite();
    f408:	f8da 0000 	ldr.w	r0, [sl]
    f40c:	e7a6      	b.n	f35c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x30>
    f40e:	4650      	mov	r0, sl
}
    f410:	b007      	add	sp, #28
    f412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    f416:	4718      	bx	r3
    f418:	0000ee8d 	.word	0x0000ee8d
    f41c:	0000ee91 	.word	0x0000ee91

0000f420 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>:
                            uint8_t size_y) {
    f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f424:	ed2d 8b02 	vpush	{d8}
    f428:	b091      	sub	sp, #68	; 0x44
    f42a:	4691      	mov	r9, r2
    f42c:	4682      	mov	sl, r0
    f42e:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    f432:	9104      	str	r1, [sp, #16]
    f434:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
    f438:	9205      	str	r2, [sp, #20]
    f43a:	910e      	str	r1, [sp, #56]	; 0x38
  if (!gfxFont) { // 'Classic' built-in font
    f43c:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
    f43e:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
    f442:	f8bd b074 	ldrh.w	fp, [sp, #116]	; 0x74
    f446:	9102      	str	r1, [sp, #8]
  if (!gfxFont) { // 'Classic' built-in font
    f448:	2a00      	cmp	r2, #0
    f44a:	f000 80b3 	beq.w	f5b4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x194>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    f44e:	7a11      	ldrb	r1, [r2, #8]
  return gfxFont->bitmap;
    f450:	e9d2 2400 	ldrd	r2, r4, [r2]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    f454:	1a5b      	subs	r3, r3, r1
    if (size_x > 1 || size_y > 1) {
    f456:	9902      	ldr	r1, [sp, #8]
  return gfxFont->bitmap;
    f458:	9203      	str	r2, [sp, #12]
  return gfxFont->glyph + c;
    f45a:	b2db      	uxtb	r3, r3
    if (size_x > 1 || size_y > 1) {
    f45c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f45e:	4311      	orrs	r1, r2
  return gfxFont->glyph + c;
    f460:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    f464:	f834 7033 	ldrh.w	r7, [r4, r3, lsl #3]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    f468:	f992 0005 	ldrsb.w	r0, [r2, #5]
    if (size_x > 1 || size_y > 1) {
    f46c:	2901      	cmp	r1, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    f46e:	78d3      	ldrb	r3, [r2, #3]
    f470:	f892 8002 	ldrb.w	r8, [r2, #2]
           yo = pgm_read_byte(&glyph->yOffset);
    f474:	f992 4006 	ldrsb.w	r4, [r2, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    f478:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    f47a:	9008      	str	r0, [sp, #32]
    if (size_x > 1 || size_y > 1) {
    f47c:	d85a      	bhi.n	f534 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x114>
    int16_t xo16 = 0, yo16 = 0;
    f47e:	2300      	movs	r3, #0
    f480:	930b      	str	r3, [sp, #44]	; 0x2c
    f482:	9309      	str	r3, [sp, #36]	; 0x24
    startWrite();
    f484:	4ba3      	ldr	r3, [pc, #652]	; (f714 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f4>)
    f486:	f8da 2000 	ldr.w	r2, [sl]
    f48a:	4619      	mov	r1, r3
    f48c:	930f      	str	r3, [sp, #60]	; 0x3c
    f48e:	6953      	ldr	r3, [r2, #20]
    f490:	428b      	cmp	r3, r1
    f492:	f040 817d 	bne.w	f790 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x370>
    for (yy = 0; yy < h; yy++) {
    f496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f498:	2b00      	cmp	r3, #0
    f49a:	d078      	beq.n	f58e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x16e>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f49c:	fa1f f389 	uxth.w	r3, r9
    for (yy = 0; yy < h; yy++) {
    f4a0:	46d3      	mov	fp, sl
    f4a2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f4a6:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + xo + xx, y + yo + yy, color);
    f4a8:	4423      	add	r3, r4
    f4aa:	930d      	str	r3, [sp, #52]	; 0x34
    for (yy = 0; yy < h; yy++) {
    f4ac:	2300      	movs	r3, #0
    f4ae:	461d      	mov	r5, r3
    f4b0:	9307      	str	r3, [sp, #28]
    f4b2:	9306      	str	r3, [sp, #24]
      for (xx = 0; xx < w; xx++) {
    f4b4:	f1b8 0f00 	cmp.w	r8, #0
    f4b8:	d061      	beq.n	f57e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x15e>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f4ba:	9906      	ldr	r1, [sp, #24]
    f4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4be:	9c02      	ldr	r4, [sp, #8]
    f4c0:	18cb      	adds	r3, r1, r3
    f4c2:	980c      	ldr	r0, [sp, #48]	; 0x30
    f4c4:	9e07      	ldr	r6, [sp, #28]
    f4c6:	fb03 0304 	mla	r3, r3, r4, r0
      for (xx = 0; xx < w; xx++) {
    f4ca:	2400      	movs	r4, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f4cc:	b21b      	sxth	r3, r3
    f4ce:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
    f4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f4d4:	440b      	add	r3, r1
    f4d6:	b21b      	sxth	r3, r3
    f4d8:	ee08 3a90 	vmov	s17, r3
    f4dc:	e005      	b.n	f4ea <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xca>
      for (xx = 0; xx < w; xx++) {
    f4de:	3401      	adds	r4, #1
        bits <<= 1;
    f4e0:	006d      	lsls	r5, r5, #1
      for (xx = 0; xx < w; xx++) {
    f4e2:	b2e4      	uxtb	r4, r4
        bits <<= 1;
    f4e4:	b2ed      	uxtb	r5, r5
      for (xx = 0; xx < w; xx++) {
    f4e6:	45a0      	cmp	r8, r4
    f4e8:	d945      	bls.n	f576 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x156>
        if (!(bit++ & 7)) {
    f4ea:	4633      	mov	r3, r6
    f4ec:	3601      	adds	r6, #1
    f4ee:	0759      	lsls	r1, r3, #29
    f4f0:	b2f6      	uxtb	r6, r6
    f4f2:	d103      	bne.n	f4fc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xdc>
          bits = pgm_read_byte(&bitmap[bo++]);
    f4f4:	1c7b      	adds	r3, r7, #1
    f4f6:	9903      	ldr	r1, [sp, #12]
    f4f8:	5dcd      	ldrb	r5, [r1, r7]
    f4fa:	b29f      	uxth	r7, r3
        if (bits & 0x80) {
    f4fc:	062b      	lsls	r3, r5, #24
    f4fe:	d5ee      	bpl.n	f4de <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
          if (size_x == 1 && size_y == 1) {
    f500:	f1b9 0f01 	cmp.w	r9, #1
    f504:	d11b      	bne.n	f53e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x11e>
    f506:	9b02      	ldr	r3, [sp, #8]
    f508:	2b01      	cmp	r3, #1
    f50a:	d118      	bne.n	f53e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x11e>
            writePixel(x + xo + xx, y + yo + yy, color);
    f50c:	9b08      	ldr	r3, [sp, #32]
    f50e:	4658      	mov	r0, fp
    f510:	9904      	ldr	r1, [sp, #16]
    f512:	f8d2 a018 	ldr.w	sl, [r2, #24]
    f516:	1859      	adds	r1, r3, r1
    f518:	4b7f      	ldr	r3, [pc, #508]	; (f718 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    f51a:	4421      	add	r1, r4
    f51c:	459a      	cmp	sl, r3
    f51e:	9b05      	ldr	r3, [sp, #20]
  drawPixel(x, y, color);
    f520:	bf08      	it	eq
    f522:	f8d2 a010 	ldreq.w	sl, [r2, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
    f526:	b209      	sxth	r1, r1
    f528:	ee18 2a90 	vmov	r2, s17
    f52c:	47d0      	blx	sl
    endWrite();
    f52e:	f8db 2000 	ldr.w	r2, [fp]
    f532:	e7d4      	b.n	f4de <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
      xo16 = xo;
    f534:	b203      	sxth	r3, r0
    f536:	9309      	str	r3, [sp, #36]	; 0x24
      yo16 = yo;
    f538:	b223      	sxth	r3, r4
    f53a:	930b      	str	r3, [sp, #44]	; 0x2c
    f53c:	e7a2      	b.n	f484 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x64>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f540:	f8d2 a01c 	ldr.w	sl, [r2, #28]
    f544:	1919      	adds	r1, r3, r4
    f546:	f8df e1d8 	ldr.w	lr, [pc, #472]	; f720 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>
    f54a:	9b04      	ldr	r3, [sp, #16]
    f54c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
    f550:	45f2      	cmp	sl, lr
    f552:	fb01 3109 	mla	r1, r1, r9, r3
    f556:	fa0f f389 	sxth.w	r3, r9
  fillRect(x, y, w, h, color);
    f55a:	9000      	str	r0, [sp, #0]
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f55c:	b209      	sxth	r1, r1
    f55e:	d120      	bne.n	f5a2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x182>
  fillRect(x, y, w, h, color);
    f560:	9805      	ldr	r0, [sp, #20]
    f562:	9001      	str	r0, [sp, #4]
    f564:	4658      	mov	r0, fp
    f566:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
    f56a:	ee18 2a10 	vmov	r2, s16
    f56e:	47d0      	blx	sl
    endWrite();
    f570:	f8db 2000 	ldr.w	r2, [fp]
}
    f574:	e7b3      	b.n	f4de <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
        if (!(bit++ & 7)) {
    f576:	9b07      	ldr	r3, [sp, #28]
    f578:	4443      	add	r3, r8
    f57a:	b2db      	uxtb	r3, r3
    f57c:	9307      	str	r3, [sp, #28]
    for (yy = 0; yy < h; yy++) {
    f57e:	9b06      	ldr	r3, [sp, #24]
    f580:	990a      	ldr	r1, [sp, #40]	; 0x28
    f582:	3301      	adds	r3, #1
    f584:	b2db      	uxtb	r3, r3
    f586:	4299      	cmp	r1, r3
    f588:	9306      	str	r3, [sp, #24]
    f58a:	d893      	bhi.n	f4b4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x94>
    f58c:	46da      	mov	sl, fp
    endWrite();
    f58e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    f590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f592:	4293      	cmp	r3, r2
    f594:	f040 80f5 	bne.w	f782 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x362>
}
    f598:	b011      	add	sp, #68	; 0x44
    f59a:	ecbd 8b02 	vpop	{d8}
    f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    f5a2:	9a05      	ldr	r2, [sp, #20]
    f5a4:	4658      	mov	r0, fp
    f5a6:	9201      	str	r2, [sp, #4]
    f5a8:	ee18 2a10 	vmov	r2, s16
    f5ac:	47d0      	blx	sl
    endWrite();
    f5ae:	f8db 2000 	ldr.w	r2, [fp]
    f5b2:	e794      	b.n	f4de <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
    if ((x >= _width) ||              // Clip right
    f5b4:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    f5b8:	9904      	ldr	r1, [sp, #16]
    f5ba:	428a      	cmp	r2, r1
    f5bc:	ddec      	ble.n	f598 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    f5be:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    f5c2:	454a      	cmp	r2, r9
    f5c4:	dde8      	ble.n	f598 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
        ((x + 6 * size_x - 1) < 0) || // Clip left
    f5c6:	2206      	movs	r2, #6
    f5c8:	980e      	ldr	r0, [sp, #56]	; 0x38
    f5ca:	fb12 1200 	smlabb	r2, r2, r0, r1
        (y >= _height) ||             // Clip bottom
    f5ce:	2a00      	cmp	r2, #0
    f5d0:	dde2      	ble.n	f598 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
        ((y + 8 * size_y - 1) < 0))   // Clip top
    f5d2:	9a02      	ldr	r2, [sp, #8]
    f5d4:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
    f5d8:	2a00      	cmp	r2, #0
    f5da:	dddd      	ble.n	f598 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    if (!_cp437 && (c >= 176))
    f5dc:	f89a 201c 	ldrb.w	r2, [sl, #28]
    f5e0:	2a01      	cmp	r2, #1
    f5e2:	d003      	beq.n	f5ec <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1cc>
    f5e4:	2baf      	cmp	r3, #175	; 0xaf
    f5e6:	d901      	bls.n	f5ec <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1cc>
      c++; // Handle 'classic' charset behavior
    f5e8:	3301      	adds	r3, #1
    f5ea:	b2db      	uxtb	r3, r3
    startWrite();
    f5ec:	4a49      	ldr	r2, [pc, #292]	; (f714 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f4>)
    f5ee:	f8da 0000 	ldr.w	r0, [sl]
    f5f2:	4611      	mov	r1, r2
    f5f4:	920f      	str	r2, [sp, #60]	; 0x3c
    f5f6:	6942      	ldr	r2, [r0, #20]
    f5f8:	428a      	cmp	r2, r1
    f5fa:	f040 80f0 	bne.w	f7de <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3be>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f5fe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    f602:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f606:	f8cd 900c 	str.w	r9, [sp, #12]
    f60a:	46d1      	mov	r9, sl
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f60c:	4611      	mov	r1, r2
    f60e:	920b      	str	r2, [sp, #44]	; 0x2c
    f610:	4a42      	ldr	r2, [pc, #264]	; (f71c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2fc>)
    f612:	f8cd b010 	str.w	fp, [sp, #16]
    f616:	18d3      	adds	r3, r2, r3
    f618:	460a      	mov	r2, r1
    f61a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    f61e:	9308      	str	r3, [sp, #32]
    f620:	1d4b      	adds	r3, r1, #5
    f622:	990e      	ldr	r1, [sp, #56]	; 0x38
    f624:	b29b      	uxth	r3, r3
    f626:	9f02      	ldr	r7, [sp, #8]
    f628:	468b      	mov	fp, r1
    f62a:	9309      	str	r3, [sp, #36]	; 0x24
    f62c:	b28b      	uxth	r3, r1
    f62e:	930a      	str	r3, [sp, #40]	; 0x28
    f630:	4603      	mov	r3, r0
    f632:	e9cd 2206 	strd	r2, r2, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    f636:	9a08      	ldr	r2, [sp, #32]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f638:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    f63a:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f63c:	46ca      	mov	sl, r9
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    f63e:	f812 6b01 	ldrb.w	r6, [r2], #1
    f642:	9208      	str	r2, [sp, #32]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f644:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
    f648:	ee08 2a10 	vmov	s16, r2
    f64c:	fa0f f28b 	sxth.w	r2, fp
    f650:	ee08 2a90 	vmov	s17, r2
    f654:	e01c      	b.n	f690 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x270>
          if (size_x == 1 && size_y == 1)
    f656:	f1bb 0f01 	cmp.w	fp, #1
            writePixel(x + i, y + j, color);
    f65a:	9a03      	ldr	r2, [sp, #12]
          if (size_x == 1 && size_y == 1)
    f65c:	d136      	bne.n	f6cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>
    f65e:	2f01      	cmp	r7, #1
    f660:	d134      	bne.n	f6cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>
            writePixel(x + i, y + j, color);
    f662:	f8d3 9018 	ldr.w	r9, [r3, #24]
    f666:	18aa      	adds	r2, r5, r2
    f668:	482b      	ldr	r0, [pc, #172]	; (f718 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    f66a:	b212      	sxth	r2, r2
    f66c:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
    f670:	4581      	cmp	r9, r0
    f672:	4650      	mov	r0, sl
  drawPixel(x, y, color);
    f674:	bf08      	it	eq
    f676:	f8d3 9010 	ldreq.w	r9, [r3, #16]
            writePixel(x + i, y + j, color);
    f67a:	4643      	mov	r3, r8
    f67c:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f67e:	f8da 3000 	ldr.w	r3, [sl]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    f682:	3c01      	subs	r4, #1
    f684:	3501      	adds	r5, #1
    f686:	0876      	lsrs	r6, r6, #1
    f688:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f68c:	b26d      	sxtb	r5, r5
    f68e:	d049      	beq.n	f724 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x304>
        if (line & 1) {
    f690:	07f0      	lsls	r0, r6, #31
    f692:	d4e0      	bmi.n	f656 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x236>
        } else if (bg != color) {
    f694:	9804      	ldr	r0, [sp, #16]
    f696:	4580      	cmp	r8, r0
    f698:	d0f3      	beq.n	f682 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
          if (size_x == 1 && size_y == 1)
    f69a:	f1bb 0f01 	cmp.w	fp, #1
            writePixel(x + i, y + j, bg);
    f69e:	9a03      	ldr	r2, [sp, #12]
          if (size_x == 1 && size_y == 1)
    f6a0:	d12a      	bne.n	f6f8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2d8>
    f6a2:	2f01      	cmp	r7, #1
    f6a4:	d128      	bne.n	f6f8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2d8>
            writePixel(x + i, y + j, bg);
    f6a6:	18aa      	adds	r2, r5, r2
    f6a8:	f8d3 9018 	ldr.w	r9, [r3, #24]
    f6ac:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
    f6b0:	fa0f fc82 	sxth.w	ip, r2
    f6b4:	4a18      	ldr	r2, [pc, #96]	; (f718 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    f6b6:	4591      	cmp	r9, r2
    f6b8:	d16f      	bne.n	f79a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x37a>
  drawPixel(x, y, color);
    f6ba:	f8d3 9010 	ldr.w	r9, [r3, #16]
    f6be:	4662      	mov	r2, ip
    f6c0:	4603      	mov	r3, r0
    f6c2:	4650      	mov	r0, sl
    f6c4:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f6c6:	f8da 3000 	ldr.w	r3, [sl]
}
    f6ca:	e7da      	b.n	f682 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    f6cc:	f8d3 901c 	ldr.w	r9, [r3, #28]
    f6d0:	fb05 2207 	mla	r2, r5, r7, r2
    f6d4:	4812      	ldr	r0, [pc, #72]	; (f720 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>)
    f6d6:	b239      	sxth	r1, r7
    f6d8:	b212      	sxth	r2, r2
    f6da:	4581      	cmp	r9, r0
  fillRect(x, y, w, h, color);
    f6dc:	e9cd 1800 	strd	r1, r8, [sp]
    f6e0:	d101      	bne.n	f6e6 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c6>
    f6e2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f6e6:	ee18 3a90 	vmov	r3, s17
    f6ea:	ee18 1a10 	vmov	r1, s16
    f6ee:	4650      	mov	r0, sl
    f6f0:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f6f2:	f8da 3000 	ldr.w	r3, [sl]
    f6f6:	e7c4      	b.n	f682 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f6f8:	f8d3 901c 	ldr.w	r9, [r3, #28]
    f6fc:	fb05 2207 	mla	r2, r5, r7, r2
    f700:	4807      	ldr	r0, [pc, #28]	; (f720 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>)
    f702:	b239      	sxth	r1, r7
    f704:	b212      	sxth	r2, r2
    f706:	4581      	cmp	r9, r0
  fillRect(x, y, w, h, color);
    f708:	9100      	str	r1, [sp, #0]
    f70a:	d14d      	bne.n	f7a8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x388>
    f70c:	9904      	ldr	r1, [sp, #16]
    f70e:	9101      	str	r1, [sp, #4]
    f710:	e7e7      	b.n	f6e2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c2>
    f712:	bf00      	nop
    f714:	0000ee8d 	.word	0x0000ee8d
    f718:	0000ee91 	.word	0x0000ee91
    f71c:	200026c8 	.word	0x200026c8
    f720:	0000eec9 	.word	0x0000eec9
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
    f724:	9a07      	ldr	r2, [sp, #28]
    f726:	46d1      	mov	r9, sl
    f728:	980a      	ldr	r0, [sp, #40]	; 0x28
    f72a:	9906      	ldr	r1, [sp, #24]
    f72c:	4402      	add	r2, r0
    f72e:	3101      	adds	r1, #1
    f730:	b292      	uxth	r2, r2
    f732:	b289      	uxth	r1, r1
    f734:	9207      	str	r2, [sp, #28]
    f736:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f738:	9106      	str	r1, [sp, #24]
    f73a:	428a      	cmp	r2, r1
    f73c:	f47f af7b 	bne.w	f636 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x216>
    if (bg != color) { // If opaque, draw vertical line for last column
    f740:	4618      	mov	r0, r3
    f742:	9b05      	ldr	r3, [sp, #20]
    f744:	e9dd 9b03 	ldrd	r9, fp, [sp, #12]
    f748:	455b      	cmp	r3, fp
    f74a:	d015      	beq.n	f778 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x358>
      if (size_x == 1 && size_y == 1)
    f74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f74e:	2b01      	cmp	r3, #1
    f750:	d12d      	bne.n	f7ae <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x38e>
    f752:	9b02      	ldr	r3, [sp, #8]
    f754:	2b01      	cmp	r3, #1
    f756:	d12a      	bne.n	f7ae <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x38e>
        writeFastVLine(x + 5, y, 8, bg);
    f758:	6a04      	ldr	r4, [r0, #32]
  drawFastVLine(x, y, h, color);
    f75a:	464a      	mov	r2, r9
    f75c:	4b23      	ldr	r3, [pc, #140]	; (f7ec <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3cc>)
    f75e:	f8cd b000 	str.w	fp, [sp]
    f762:	429c      	cmp	r4, r3
        writeFastVLine(x + 5, y, 8, bg);
    f764:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    f768:	f04f 0308 	mov.w	r3, #8
  drawFastVLine(x, y, h, color);
    f76c:	bf08      	it	eq
    f76e:	6b84      	ldreq	r4, [r0, #56]	; 0x38
        writeFastVLine(x + 5, y, 8, bg);
    f770:	4650      	mov	r0, sl
    f772:	47a0      	blx	r4
    endWrite();
    f774:	f8da 0000 	ldr.w	r0, [sl]
    f778:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    f77a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f77c:	4293      	cmp	r3, r2
    f77e:	f43f af0b 	beq.w	f598 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    endWrite();
    f782:	4650      	mov	r0, sl
}
    f784:	b011      	add	sp, #68	; 0x44
    f786:	ecbd 8b02 	vpop	{d8}
    f78a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
    f78e:	4718      	bx	r3
    startWrite();
    f790:	4650      	mov	r0, sl
    f792:	4798      	blx	r3
    endWrite();
    f794:	f8da 2000 	ldr.w	r2, [sl]
    f798:	e67d      	b.n	f496 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x76>
            writePixel(x + i, y + j, bg);
    f79a:	9b04      	ldr	r3, [sp, #16]
    f79c:	4662      	mov	r2, ip
    f79e:	4650      	mov	r0, sl
    f7a0:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    f7a2:	f8da 3000 	ldr.w	r3, [sl]
    f7a6:	e76c      	b.n	f682 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    f7a8:	9b04      	ldr	r3, [sp, #16]
    f7aa:	9301      	str	r3, [sp, #4]
    f7ac:	e79b      	b.n	f6e6 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c6>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    f7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7b0:	69c4      	ldr	r4, [r0, #28]
    f7b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    f7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7b8:	9a02      	ldr	r2, [sp, #8]
    f7ba:	440b      	add	r3, r1
    f7bc:	4d0c      	ldr	r5, [pc, #48]	; (f7f0 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3d0>)
    f7be:	00d2      	lsls	r2, r2, #3
    f7c0:	4619      	mov	r1, r3
    f7c2:	42ac      	cmp	r4, r5
    f7c4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    f7c8:	b209      	sxth	r1, r1
  fillRect(x, y, w, h, color);
    f7ca:	e9cd 2b00 	strd	r2, fp, [sp]
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    f7ce:	464a      	mov	r2, r9
  fillRect(x, y, w, h, color);
    f7d0:	bf08      	it	eq
    f7d2:	6c04      	ldreq	r4, [r0, #64]	; 0x40
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    f7d4:	4650      	mov	r0, sl
    f7d6:	47a0      	blx	r4
    endWrite();
    f7d8:	f8da 0000 	ldr.w	r0, [sl]
    f7dc:	e7cc      	b.n	f778 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x358>
    startWrite();
    f7de:	4650      	mov	r0, sl
    f7e0:	9303      	str	r3, [sp, #12]
    f7e2:	4790      	blx	r2
            writePixel(x + i, y + j, color);
    f7e4:	f8da 0000 	ldr.w	r0, [sl]
    f7e8:	9b03      	ldr	r3, [sp, #12]
    f7ea:	e708      	b.n	f5fe <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1de>
    f7ec:	0000eea1 	.word	0x0000eea1
    f7f0:	0000eec9 	.word	0x0000eec9

0000f7f4 <Adafruit_GFX::write(unsigned char)>:
  if (!gfxFont) { // 'Classic' built-in font
    f7f4:	6a03      	ldr	r3, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
    f7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7f8:	4607      	mov	r7, r0
    f7fa:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
    f7fc:	2b00      	cmp	r3, #0
    f7fe:	d03a      	beq.n	f876 <Adafruit_GFX::write(unsigned char)+0x82>
    if (c == '\n') {
    f800:	290a      	cmp	r1, #10
    f802:	d02b      	beq.n	f85c <Adafruit_GFX::write(unsigned char)+0x68>
    } else if (c != '\r') {
    f804:	290d      	cmp	r1, #13
    f806:	d033      	beq.n	f870 <Adafruit_GFX::write(unsigned char)+0x7c>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    f808:	7a1a      	ldrb	r2, [r3, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    f80a:	4291      	cmp	r1, r2
    f80c:	d330      	bcc.n	f870 <Adafruit_GFX::write(unsigned char)+0x7c>
    f80e:	7a9c      	ldrb	r4, [r3, #10]
    f810:	428c      	cmp	r4, r1
    f812:	d32d      	bcc.n	f870 <Adafruit_GFX::write(unsigned char)+0x7c>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    f814:	1a8a      	subs	r2, r1, r2
  return gfxFont->glyph + c;
    f816:	685c      	ldr	r4, [r3, #4]
    f818:	b2d2      	uxtb	r2, r2
    f81a:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    f81e:	78e5      	ldrb	r5, [r4, #3]
        uint8_t w = pgm_read_byte(&glyph->width),
    f820:	78a2      	ldrb	r2, [r4, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    f822:	b1a5      	cbz	r5, f84e <Adafruit_GFX::write(unsigned char)+0x5a>
    f824:	b19a      	cbz	r2, f84e <Adafruit_GFX::write(unsigned char)+0x5a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    f826:	7ec5      	ldrb	r5, [r0, #27]
    f828:	2d00      	cmp	r5, #0
    f82a:	d163      	bne.n	f8f4 <Adafruit_GFX::write(unsigned char)+0x100>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f82c:	7e06      	ldrb	r6, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
    f82e:	7e43      	ldrb	r3, [r0, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f830:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    f834:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    f838:	4638      	mov	r0, r7
    f83a:	e9cd 6302 	strd	r6, r3, [sp, #8]
    f83e:	460b      	mov	r3, r1
    f840:	4629      	mov	r1, r5
    f842:	8afd      	ldrh	r5, [r7, #22]
    f844:	9501      	str	r5, [sp, #4]
    f846:	8abd      	ldrh	r5, [r7, #20]
    f848:	9500      	str	r5, [sp, #0]
    f84a:	f7ff fde9 	bl	f420 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    f84e:	7921      	ldrb	r1, [r4, #4]
        cursor_x +=
    f850:	8a3b      	ldrh	r3, [r7, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    f852:	7e3a      	ldrb	r2, [r7, #24]
        cursor_x +=
    f854:	fb01 3302 	mla	r3, r1, r2, r3
    f858:	823b      	strh	r3, [r7, #16]
    f85a:	e009      	b.n	f870 <Adafruit_GFX::write(unsigned char)+0x7c>
      cursor_x = 0;
    f85c:	f04f 0c00 	mov.w	ip, #0
      cursor_y +=
    f860:	8a42      	ldrh	r2, [r0, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    f862:	7e41      	ldrb	r1, [r0, #25]
      cursor_x = 0;
    f864:	f8a0 c010 	strh.w	ip, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    f868:	7b1b      	ldrb	r3, [r3, #12]
      cursor_y +=
    f86a:	fb01 2303 	mla	r3, r1, r3, r2
    f86e:	8243      	strh	r3, [r0, #18]
}
    f870:	2001      	movs	r0, #1
    f872:	b005      	add	sp, #20
    f874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '\n') {              // Newline?
    f876:	290a      	cmp	r1, #10
    f878:	d01e      	beq.n	f8b8 <Adafruit_GFX::write(unsigned char)+0xc4>
    } else if (c != '\r') {       // Ignore carriage returns
    f87a:	290d      	cmp	r1, #13
    f87c:	d0f8      	beq.n	f870 <Adafruit_GFX::write(unsigned char)+0x7c>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f87e:	7ec2      	ldrb	r2, [r0, #27]
    f880:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
    f884:	bb0a      	cbnz	r2, f8ca <Adafruit_GFX::write(unsigned char)+0xd6>
      cursor_y += textsize_y * 8; // advance y one line
    f886:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f88a:	7e06      	ldrb	r6, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
    f88c:	7e45      	ldrb	r5, [r0, #25]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    f88e:	9503      	str	r5, [sp, #12]
    f890:	460b      	mov	r3, r1
    f892:	9602      	str	r6, [sp, #8]
    f894:	4621      	mov	r1, r4
    f896:	8afc      	ldrh	r4, [r7, #22]
    f898:	4638      	mov	r0, r7
    f89a:	9401      	str	r4, [sp, #4]
    f89c:	8abc      	ldrh	r4, [r7, #20]
    f89e:	9400      	str	r4, [sp, #0]
    f8a0:	f7ff fdbe 	bl	f420 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
      cursor_x += textsize_x * 6; // Advance x one char
    f8a4:	7e3b      	ldrb	r3, [r7, #24]
    f8a6:	8a3a      	ldrh	r2, [r7, #16]
}
    f8a8:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
    f8aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f8ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    f8b2:	823b      	strh	r3, [r7, #16]
}
    f8b4:	b005      	add	sp, #20
    f8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cursor_y += textsize_y * 8; // advance y one line
    f8b8:	8a42      	ldrh	r2, [r0, #18]
    f8ba:	7e41      	ldrb	r1, [r0, #25]
      cursor_x = 0;               // Reset x to zero,
    f8bc:	8203      	strh	r3, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    f8be:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    f8c2:	8243      	strh	r3, [r0, #18]
}
    f8c4:	2001      	movs	r0, #1
    f8c6:	b005      	add	sp, #20
    f8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    f8ca:	7e06      	ldrb	r6, [r0, #24]
    f8cc:	2206      	movs	r2, #6
    f8ce:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
    f8d2:	fb12 4206 	smlabb	r2, r2, r6, r4
    f8d6:	42aa      	cmp	r2, r5
    f8d8:	dd08      	ble.n	f8ec <Adafruit_GFX::write(unsigned char)+0xf8>
        cursor_y += textsize_y * 8; // advance y one line
    f8da:	8a42      	ldrh	r2, [r0, #18]
    f8dc:	461c      	mov	r4, r3
    f8de:	7e45      	ldrb	r5, [r0, #25]
        cursor_x = 0;                                       // Reset x to zero,
    f8e0:	8203      	strh	r3, [r0, #16]
        cursor_y += textsize_y * 8; // advance y one line
    f8e2:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    f8e6:	b212      	sxth	r2, r2
    f8e8:	8242      	strh	r2, [r0, #18]
    f8ea:	e7d0      	b.n	f88e <Adafruit_GFX::write(unsigned char)+0x9a>
      cursor_y += textsize_y * 8; // advance y one line
    f8ec:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    f8f0:	7e45      	ldrb	r5, [r0, #25]
    f8f2:	e7cc      	b.n	f88e <Adafruit_GFX::write(unsigned char)+0x9a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    f8f4:	f994 5005 	ldrsb.w	r5, [r4, #5]
    f8f8:	7e06      	ldrb	r6, [r0, #24]
    f8fa:	442a      	add	r2, r5
    f8fc:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
    f900:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
    f904:	fb06 5202 	mla	r2, r6, r2, r5
    f908:	4562      	cmp	r2, ip
    f90a:	dc03      	bgt.n	f914 <Adafruit_GFX::write(unsigned char)+0x120>
      cursor_y += textsize_y * 8; // advance y one line
    f90c:	7e43      	ldrb	r3, [r0, #25]
    f90e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    f912:	e791      	b.n	f838 <Adafruit_GFX::write(unsigned char)+0x44>
            cursor_x = 0;
    f914:	2500      	movs	r5, #0
            cursor_y += (int16_t)textsize_y *
    f916:	8a42      	ldrh	r2, [r0, #18]
            cursor_x = 0;
    f918:	8205      	strh	r5, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    f91a:	f893 c00c 	ldrb.w	ip, [r3, #12]
            cursor_y += (int16_t)textsize_y *
    f91e:	7e43      	ldrb	r3, [r0, #25]
    f920:	fb0c 2203 	mla	r2, ip, r3, r2
    f924:	b212      	sxth	r2, r2
    f926:	8242      	strh	r2, [r0, #18]
    f928:	e786      	b.n	f838 <Adafruit_GFX::write(unsigned char)+0x44>
    f92a:	bf00      	nop

0000f92c <Adafruit_GFX::setTextSize(unsigned char)>:
  textsize_x = (s_x > 0) ? s_x : 1;
    f92c:	2901      	cmp	r1, #1
    f92e:	bf38      	it	cc
    f930:	2101      	movcc	r1, #1
    f932:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
    f934:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    f936:	4770      	bx	lr

0000f938 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    f938:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    f93c:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    f93e:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    f942:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    f944:	d101      	bne.n	f94a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    f946:	6883      	ldr	r3, [r0, #8]
    f948:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    f94a:	f005 bf6b 	b.w	15824 <EventResponder::triggerEventNotImmediate()>
    f94e:	bf00      	nop

0000f950 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    f950:	4b32      	ldr	r3, [pc, #200]	; (fa1c <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    f952:	4933      	ldr	r1, [pc, #204]	; (fa20 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f954:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    f956:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    f95a:	7920      	ldrb	r0, [r4, #4]
    f95c:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    f95e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    f960:	f895 c004 	ldrb.w	ip, [r5, #4]
    f964:	f881 c01c 	strb.w	ip, [r1, #28]
    f968:	7708      	strb	r0, [r1, #28]
    f96a:	b152      	cbz	r2, f982 <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    f96c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    f970:	d323      	bcc.n	f9ba <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    f972:	492c      	ldr	r1, [pc, #176]	; (fa24 <_spi_dma_rxISR0()+0xd4>)
    f974:	4411      	add	r1, r2
		DMA_SERQ = channel;
    f976:	4a2a      	ldr	r2, [pc, #168]	; (fa20 <_spi_dma_rxISR0()+0xd0>)
    f978:	6419      	str	r1, [r3, #64]	; 0x40
    f97a:	76d0      	strb	r0, [r2, #27]
    f97c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f980:	bd30      	pop	{r4, r5, pc}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    f982:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    f984:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    f986:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    f988:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    f98a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    f98e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    f990:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    f992:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    f996:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    f998:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    f99a:	6804      	ldr	r4, [r0, #0]
    f99c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    f99e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    f9a2:	4b21      	ldr	r3, [pc, #132]	; (fa28 <_spi_dma_rxISR0()+0xd8>)
    f9a4:	429c      	cmp	r4, r3
    f9a6:	d126      	bne.n	f9f6 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    f9a8:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    f9aa:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    f9ac:	2b02      	cmp	r3, #2
		_data = data;
    f9ae:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    f9b0:	d126      	bne.n	fa00 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    f9b2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f9b8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    f9ba:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    f9bc:	8be9      	ldrh	r1, [r5, #30]
    f9be:	0409      	lsls	r1, r1, #16
    f9c0:	d422      	bmi.n	fa08 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    f9c2:	b292      	uxth	r2, r2
    f9c4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    f9c6:	6821      	ldr	r1, [r4, #0]
    f9c8:	8bec      	ldrh	r4, [r5, #30]
    f9ca:	b2a4      	uxth	r4, r4
    f9cc:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    f9ce:	8bcc      	ldrh	r4, [r1, #30]
    f9d0:	0424      	lsls	r4, r4, #16
    f9d2:	d505      	bpl.n	f9e0 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    f9d4:	8bcc      	ldrh	r4, [r1, #30]
    f9d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    f9da:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    f9de:	4322      	orrs	r2, r4
    f9e0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    f9e2:	8bca      	ldrh	r2, [r1, #30]
    f9e4:	b292      	uxth	r2, r2
    f9e6:	82ca      	strh	r2, [r1, #22]
    f9e8:	2100      	movs	r1, #0
    f9ea:	4a0d      	ldr	r2, [pc, #52]	; (fa20 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    f9ec:	6419      	str	r1, [r3, #64]	; 0x40
    f9ee:	76d0      	strb	r0, [r2, #27]
    f9f0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f9f4:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    f9f6:	4623      	mov	r3, r4
    f9f8:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    f9fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    f9fe:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    fa00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    fa04:	f005 bf0e 	b.w	15824 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    fa08:	8be9      	ldrh	r1, [r5, #30]
    fa0a:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    fa0e:	b292      	uxth	r2, r2
    fa10:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    fa14:	ea41 010e 	orr.w	r1, r1, lr
    fa18:	83e9      	strh	r1, [r5, #30]
    fa1a:	e7d4      	b.n	f9c6 <_spi_dma_rxISR0()+0x76>
    fa1c:	2000953c 	.word	0x2000953c
    fa20:	400e8000 	.word	0x400e8000
    fa24:	ffff8001 	.word	0xffff8001
    fa28:	0000f939 	.word	0x0000f939

0000fa2c <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    fa2c:	6843      	ldr	r3, [r0, #4]
{
    fa2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    fa32:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    fa36:	4d81      	ldr	r5, [pc, #516]	; (fc3c <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    fa38:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    fa3c:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    fa3e:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    fa42:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    fa46:	497e      	ldr	r1, [pc, #504]	; (fc40 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    fa48:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    fa4a:	69aa      	ldr	r2, [r5, #24]
    fa4c:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    fa4e:	4a7d      	ldr	r2, [pc, #500]	; (fc44 <SPIClass::begin()+0x218>)
    fa50:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    fa52:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    fa54:	f890 e010 	ldrb.w	lr, [r0, #16]
    fa58:	4a7b      	ldr	r2, [pc, #492]	; (fc48 <SPIClass::begin()+0x21c>)
    fa5a:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    fa5e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    fa62:	7c31      	ldrb	r1, [r6, #16]
    fa64:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    fa68:	6889      	ldr	r1, [r1, #8]
    fa6a:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    fa6e:	f890 c011 	ldrb.w	ip, [r0, #17]
    fa72:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    fa76:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    fa7a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    fa7e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    fa82:	6889      	ldr	r1, [r1, #8]
    fa84:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    fa88:	7c81      	ldrb	r1, [r0, #18]
    fa8a:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    fa8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    fa92:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    fa96:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    fa9a:	f8db b008 	ldr.w	fp, [fp, #8]
    fa9e:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    faa2:	f8d4 a000 	ldr.w	sl, [r4]
    faa6:	685f      	ldr	r7, [r3, #4]
    faa8:	ea4a 0a07 	orr.w	sl, sl, r7
    faac:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    fab0:	7c34      	ldrb	r4, [r6, #16]
    fab2:	f8de e014 	ldr.w	lr, [lr, #20]
    fab6:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    faba:	6864      	ldr	r4, [r4, #4]
    fabc:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    fac0:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    fac4:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    fac8:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    facc:	6864      	ldr	r4, [r4, #4]
    face:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    fad2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    fad4:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    fad8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    fadc:	6852      	ldr	r2, [r2, #4]
    fade:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    fae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    fae2:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    fae6:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    fae8:	6a1a      	ldr	r2, [r3, #32]
    faea:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    faec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    faee:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    faf0:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    faf4:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    faf6:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    faf8:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    fafa:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    fafe:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    fb00:	7cc2      	ldrb	r2, [r0, #19]
    fb02:	2a00      	cmp	r2, #0
    fb04:	d031      	beq.n	fb6a <SPIClass::begin()+0x13e>
			__disable_irq();
    fb06:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    fb08:	7cc3      	ldrb	r3, [r0, #19]
    fb0a:	07dc      	lsls	r4, r3, #31
    fb0c:	d508      	bpl.n	fb20 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    fb0e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fb12:	6944      	ldr	r4, [r0, #20]
    fb14:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    fb18:	4022      	ands	r2, r4
    fb1a:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    fb1c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    fb20:	0799      	lsls	r1, r3, #30
    fb22:	d508      	bpl.n	fb36 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    fb24:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fb28:	6984      	ldr	r4, [r0, #24]
    fb2a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    fb2e:	4022      	ands	r2, r4
    fb30:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    fb32:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    fb36:	075a      	lsls	r2, r3, #29
    fb38:	d508      	bpl.n	fb4c <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    fb3a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fb3e:	69c4      	ldr	r4, [r0, #28]
    fb40:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    fb44:	4022      	ands	r2, r4
    fb46:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    fb48:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    fb4c:	071f      	lsls	r7, r3, #28
    fb4e:	d508      	bpl.n	fb62 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    fb50:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fb54:	6a04      	ldr	r4, [r0, #32]
    fb56:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    fb5a:	4022      	ands	r2, r4
    fb5c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    fb5e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    fb62:	06de      	lsls	r6, r3, #27
    fb64:	d455      	bmi.n	fc12 <SPIClass::begin()+0x1e6>
			__enable_irq();
    fb66:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    fb68:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    fb6a:	4c38      	ldr	r4, [pc, #224]	; (fc4c <SPIClass::begin()+0x220>)
    fb6c:	6882      	ldr	r2, [r0, #8]
    fb6e:	42a2      	cmp	r2, r4
    fb70:	d059      	beq.n	fc26 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    fb72:	4a32      	ldr	r2, [pc, #200]	; (fc3c <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    fb74:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    fb76:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    fb78:	4935      	ldr	r1, [pc, #212]	; (fc50 <SPIClass::begin()+0x224>)
    fb7a:	f3c2 1601 	ubfx	r6, r2, #4, #2
    fb7e:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    fb82:	4d34      	ldr	r5, [pc, #208]	; (fc54 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    fb84:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    fb88:	3201      	adds	r2, #1
    fb8a:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    fb8e:	42aa      	cmp	r2, r5
    fb90:	d831      	bhi.n	fbf6 <SPIClass::begin()+0x1ca>
    fb92:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    fb94:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    fb96:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    fb98:	2103      	movs	r1, #3
		port().CR = 0;
    fb9a:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    fb9c:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    fb9e:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    fba0:	2101      	movs	r1, #1
		port().CCR = _ccr;
    fba2:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    fba4:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    fba6:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    fba8:	7cc3      	ldrb	r3, [r0, #19]
    fbaa:	b313      	cbz	r3, fbf2 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    fbac:	07dd      	lsls	r5, r3, #31
    fbae:	d504      	bpl.n	fbba <SPIClass::begin()+0x18e>
    fbb0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fbb2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fbb6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    fbba:	079c      	lsls	r4, r3, #30
    fbbc:	d504      	bpl.n	fbc8 <SPIClass::begin()+0x19c>
    fbbe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    fbc0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fbc4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    fbc8:	0759      	lsls	r1, r3, #29
    fbca:	d504      	bpl.n	fbd6 <SPIClass::begin()+0x1aa>
    fbcc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    fbce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fbd2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    fbd6:	071a      	lsls	r2, r3, #28
    fbd8:	d504      	bpl.n	fbe4 <SPIClass::begin()+0x1b8>
    fbda:	6b41      	ldr	r1, [r0, #52]	; 0x34
    fbdc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fbe0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    fbe4:	06db      	lsls	r3, r3, #27
    fbe6:	d504      	bpl.n	fbf2 <SPIClass::begin()+0x1c6>
    fbe8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    fbea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fbee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    fbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    fbf6:	4918      	ldr	r1, [pc, #96]	; (fc58 <SPIClass::begin()+0x22c>)
    fbf8:	fba1 5102 	umull	r5, r1, r1, r2
    fbfc:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    fbfe:	fbb2 f2f1 	udiv	r2, r2, r1
    fc02:	42a2      	cmp	r2, r4
    fc04:	bf88      	it	hi
    fc06:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    fc08:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    fc0c:	d30d      	bcc.n	fc2a <SPIClass::begin()+0x1fe>
    fc0e:	4a13      	ldr	r2, [pc, #76]	; (fc5c <SPIClass::begin()+0x230>)
				div = d-2;
    fc10:	e7c0      	b.n	fb94 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    fc12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fc16:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fc18:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    fc1c:	400b      	ands	r3, r1
    fc1e:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    fc20:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    fc24:	e79f      	b.n	fb66 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    fc26:	68c2      	ldr	r2, [r0, #12]
    fc28:	e7b5      	b.n	fb96 <SPIClass::begin()+0x16a>
			if (d > 2) {
    fc2a:	2902      	cmp	r1, #2
    fc2c:	d9b1      	bls.n	fb92 <SPIClass::begin()+0x166>
				div = d-2;
    fc2e:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    fc30:	084c      	lsrs	r4, r1, #1
    fc32:	0222      	lsls	r2, r4, #8
    fc34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    fc38:	430a      	orrs	r2, r1
    fc3a:	e7ab      	b.n	fb94 <SPIClass::begin()+0x168>
    fc3c:	400fc000 	.word	0x400fc000
    fc40:	e3ffffcf 	.word	0xe3ffffcf
    fc44:	08000010 	.word	0x08000010
    fc48:	200081bc 	.word	0x200081bc
    fc4c:	003d0900 	.word	0x003d0900
    fc50:	200081ac 	.word	0x200081ac
    fc54:	003d08ff 	.word	0x003d08ff
    fc58:	431bde83 	.word	0x431bde83
    fc5c:	007f7fff 	.word	0x007f7fff

0000fc60 <BTHIDInput::sdp_command_completed(bool)>:
    virtual void sdp_command_completed (bool success) {};
    fc60:	4770      	bx	lr
    fc62:	bf00      	nop

0000fc64 <USBDriver::timer_event(USBDriverTimer*)>:
    virtual void timer_event(USBDriverTimer *whichTimer) { }
    fc64:	4770      	bx	lr
    fc66:	bf00      	nop

0000fc68 <USBHIDInput::hid_process_control(Transfer_struct const*)>:
    virtual bool hid_process_control(const Transfer_t *transfer) {return false;}
    fc68:	2000      	movs	r0, #0
    fc6a:	4770      	bx	lr

0000fc6c <USBDriver::Task()>:
    virtual void Task() { }
    fc6c:	4770      	bx	lr
    fc6e:	bf00      	nop

0000fc70 <USBDriver::control(Transfer_struct const*)>:
    virtual void control(const Transfer_t *transfer) { }
    fc70:	4770      	bx	lr
    fc72:	bf00      	nop

0000fc74 <BTHIDInput::claim_bluetooth(BluetoothController*, unsigned long, unsigned char*)>:
    virtual bool claim_bluetooth(BluetoothController *driver, uint32_t bluetooth_class, uint8_t *remoteName) {return false;}
    fc74:	2000      	movs	r0, #0
    fc76:	4770      	bx	lr

0000fc78 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)>:


void BluetoothController::driver_ready_for_bluetooth(BTHIDInput *driver)
{
    driver->next = NULL;
    if (available_bthid_drivers_list == NULL) {
    fc78:	4a06      	ldr	r2, [pc, #24]	; (fc94 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)+0x1c>)
    driver->next = NULL;
    fc7a:	2100      	movs	r1, #0
    if (available_bthid_drivers_list == NULL) {
    fc7c:	6813      	ldr	r3, [r2, #0]
    driver->next = NULL;
    fc7e:	6041      	str	r1, [r0, #4]
    if (available_bthid_drivers_list == NULL) {
    fc80:	b12b      	cbz	r3, fc8e <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)+0x16>
        available_bthid_drivers_list = driver;
    } else {
        BTHIDInput *last = available_bthid_drivers_list;
        while (last->next) last = last->next;
    fc82:	461a      	mov	r2, r3
    fc84:	685b      	ldr	r3, [r3, #4]
    fc86:	2b00      	cmp	r3, #0
    fc88:	d1fb      	bne.n	fc82 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)+0xa>
        last->next = driver;
    fc8a:	6050      	str	r0, [r2, #4]
    }
}
    fc8c:	4770      	bx	lr
        available_bthid_drivers_list = driver;
    fc8e:	6010      	str	r0, [r2, #0]
    fc90:	4770      	bx	lr
    fc92:	bf00      	nop
    fc94:	2000e878 	.word	0x2000e878

0000fc98 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)>:

bool BluetoothController::queue_Data_Transfer_Debug(Pipe_t *pipe, void *buffer, 
    uint32_t len, USBDriver *driver, uint32_t line) 
{
    fc98:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc9a:	b083      	sub	sp, #12
    fc9c:	460f      	mov	r7, r1
    fc9e:	4616      	mov	r6, r2
    fca0:	461d      	mov	r5, r3
    fca2:	9908      	ldr	r1, [sp, #32]
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
    fca4:	4604      	mov	r4, r0
    fca6:	b110      	cbz	r0, fcae <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x16>
    fca8:	b10b      	cbz	r3, fcae <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x16>
    fcaa:	b182      	cbz	r2, fcce <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x36>
    fcac:	b97f      	cbnz	r7, fcce <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x36>
        // something wrong:
        USBHDBGSerial.printf("\n !!!!!!!!!!! BluetoothController::queue_Data_Transfer called with bad data line: %u\n", line);
    fcae:	460a      	mov	r2, r1
    fcb0:	480b      	ldr	r0, [pc, #44]	; (fce0 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x48>)
    fcb2:	490c      	ldr	r1, [pc, #48]	; (fce4 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x4c>)
    fcb4:	f005 ff9e 	bl	15bf4 <Print::printf(char const*, ...)>
        USBHDBGSerial.printf("\t pipe:%p buffer:%p len:%u driver:%p\n", pipe, buffer, len, driver);
    fcb8:	463b      	mov	r3, r7
    fcba:	4622      	mov	r2, r4
    fcbc:	490a      	ldr	r1, [pc, #40]	; (fce8 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x50>)
    fcbe:	4808      	ldr	r0, [pc, #32]	; (fce0 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)+0x48>)
    fcc0:	e9cd 6500 	strd	r6, r5, [sp]
    fcc4:	f005 ff96 	bl	15bf4 <Print::printf(char const*, ...)>
        return false;
    }
    return queue_Data_Transfer(pipe, buffer, len, driver);
}
    fcc8:	2000      	movs	r0, #0
    fcca:	b003      	add	sp, #12
    fccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return queue_Data_Transfer(pipe, buffer, len, driver);
    fcce:	462b      	mov	r3, r5
    fcd0:	4632      	mov	r2, r6
    fcd2:	4639      	mov	r1, r7
    fcd4:	4620      	mov	r0, r4
}
    fcd6:	b003      	add	sp, #12
    fcd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return queue_Data_Transfer(pipe, buffer, len, driver);
    fcdc:	f000 bad6 	b.w	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
    fce0:	2000958c 	.word	0x2000958c
    fce4:	20003bcc 	.word	0x20003bcc
    fce8:	20003c24 	.word	0x20003c24

0000fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>:

/************************************************************/
/*                    L2CAP Commands                        */

// Public wrrapper function
void BluetoothController::sendL2CapCommand(uint8_t* data, uint8_t nbytes, int channel) {
    fcec:	b530      	push	{r4, r5, lr}
    fcee:	4615      	mov	r5, r2
    uint16_t channel_out;
    switch (channel) {
    fcf0:	1c9a      	adds	r2, r3, #2
void BluetoothController::sendL2CapCommand(uint8_t* data, uint8_t nbytes, int channel) {
    fcf2:	b083      	sub	sp, #12
    fcf4:	4604      	mov	r4, r0
    switch (channel) {
    fcf6:	d042      	beq.n	fd7e <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x92>
    fcf8:	1c58      	adds	r0, r3, #1
    fcfa:	d03c      	beq.n	fd76 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x8a>
    fcfc:	1cda      	adds	r2, r3, #3
    fcfe:	d036      	beq.n	fd6e <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x82>
    case SDP_SCID:
        channel_out = current_connection_->sdp_scid_;
        DBGPrintf("@@@@@@ SDP SCID:%x DCID:%x\n", current_connection_->sdp_scid_, current_connection_->sdp_dcid_);
        break;
    default:
        channel_out = (uint16_t)channel;
    fd00:	b29b      	uxth	r3, r3
        channel_out = current_connection_->control_scid_;
    fd02:	f8d4 27c4 	ldr.w	r2, [r4, #1988]	; 0x7c4
    }
    DBGPrintf("sendL2CapCommand: %x %d %x\n", (uint32_t)data, nbytes, channel, channel_out);
    sendL2CapCommand (current_connection_->device_connection_handle_, data, nbytes, channel_out & 0xff, (channel_out >> 8) & 0xff);
    fd06:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    fd08:	f884 3ca7 	strb.w	r3, [r4, #3239]	; 0xca7
    fd0c:	0a1b      	lsrs	r3, r3, #8
}


void BluetoothController::sendL2CapCommand(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh)
{
    txbuf_[0] = handle & 0xff; // HCI handle with PB,BC flag
    fd0e:	f884 2ca1 	strb.w	r2, [r4, #3233]	; 0xca1
    txbuf_[1] = (((handle >> 8) & 0x0f) | 0x20);
    fd12:	f3c2 2203 	ubfx	r2, r2, #8, #4
    sendL2CapCommand (current_connection_->device_connection_handle_, data, nbytes, channel_out & 0xff, (channel_out >> 8) & 0xff);
    fd16:	f884 3ca8 	strb.w	r3, [r4, #3240]	; 0xca8
    txbuf_[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
    fd1a:	1d2b      	adds	r3, r5, #4
    txbuf_[1] = (((handle >> 8) & 0x0f) | 0x20);
    fd1c:	f042 0220 	orr.w	r2, r2, #32
    txbuf_[3] = (uint8_t)((4 + nbytes) >> 8);
    txbuf_[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
    fd20:	f884 5ca5 	strb.w	r5, [r4, #3237]	; 0xca5
    txbuf_[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
    fd24:	f884 3ca3 	strb.w	r3, [r4, #3235]	; 0xca3
    txbuf_[1] = (((handle >> 8) & 0x0f) | 0x20);
    fd28:	f884 2ca2 	strb.w	r2, [r4, #3234]	; 0xca2
    txbuf_[3] = (uint8_t)((4 + nbytes) >> 8);
    fd2c:	121a      	asrs	r2, r3, #8
    txbuf_[5] = (uint8_t)(nbytes >> 8);
    fd2e:	2300      	movs	r3, #0
    txbuf_[3] = (uint8_t)((4 + nbytes) >> 8);
    fd30:	f884 2ca4 	strb.w	r2, [r4, #3236]	; 0xca4
    txbuf_[5] = (uint8_t)(nbytes >> 8);
    fd34:	f884 3ca6 	strb.w	r3, [r4, #3238]	; 0xca6
    txbuf_[6] = channelLow;
    txbuf_[7] = channelHigh;
    if (nbytes) {
    fd38:	b99d      	cbnz	r5, fd62 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x76>
    fd3a:	4b13      	ldr	r3, [pc, #76]	; (fd88 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x9c>)
        memcpy(&txbuf_[8], data, nbytes);   // copy in the commands parameters.
    }
    nbytes = nbytes + 8;
    fd3c:	f105 0208 	add.w	r2, r5, #8
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    fd40:	4912      	ldr	r1, [pc, #72]	; (fd8c <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0xa0>)
    DBGPrintf(">>(02 %u):", (uint32_t)em_rx_tx2);
    em_rx_tx2 = 0;
    for (uint8_t i = 0; i < nbytes; i++) DBGPrintf("%02X ", txbuf_[i]);
    DBGPrintf("\n");

    if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, nbytes, this, __LINE__)) {
    fd42:	f640 15b2 	movw	r5, #2482	; 0x9b2
    fd46:	6818      	ldr	r0, [r3, #0]
    fd48:	b2d2      	uxtb	r2, r2
    fd4a:	6818      	ldr	r0, [r3, #0]
    fd4c:	4623      	mov	r3, r4
    fd4e:	9500      	str	r5, [sp, #0]
    fd50:	6008      	str	r0, [r1, #0]
    fd52:	f604 41a1 	addw	r1, r4, #3233	; 0xca1
    fd56:	f8d4 0b9c 	ldr.w	r0, [r4, #2972]	; 0xb9c
    fd5a:	f7ff ff9d 	bl	fc98 <BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)>
}
    fd5e:	b003      	add	sp, #12
    fd60:	bd30      	pop	{r4, r5, pc}
        memcpy(&txbuf_[8], data, nbytes);   // copy in the commands parameters.
    fd62:	462a      	mov	r2, r5
    fd64:	f604 40a9 	addw	r0, r4, #3241	; 0xca9
    fd68:	f006 fc9c 	bl	166a4 <memcpy>
    fd6c:	e7e5      	b.n	fd3a <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x4e>
        channel_out = current_connection_->sdp_scid_;
    fd6e:	f8d4 27c4 	ldr.w	r2, [r4, #1988]	; 0x7c4
    fd72:	8b93      	ldrh	r3, [r2, #28]
void inline DBGPrintf(...) {};
    fd74:	e7c7      	b.n	fd06 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x1a>
        channel_out = current_connection_->control_scid_;
    fd76:	f8d4 27c4 	ldr.w	r2, [r4, #1988]	; 0x7c4
    fd7a:	8b53      	ldrh	r3, [r2, #26]
        break;
    fd7c:	e7c3      	b.n	fd06 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x1a>
        channel_out = current_connection_->interrupt_scid_;
    fd7e:	f8d0 27c4 	ldr.w	r2, [r0, #1988]	; 0x7c4
    fd82:	8b13      	ldrh	r3, [r2, #24]
        break;
    fd84:	e7bf      	b.n	fd06 <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)+0x1a>
    fd86:	bf00      	nop
    fd88:	2000fab8 	.word	0x2000fab8
    fd8c:	2000ec3c 	.word	0x2000ec3c

0000fd90 <BluetoothController::useHIDProtocol(bool)>:
}


void BluetoothController::useHIDProtocol(bool useHID) {
    // BUGBUG hopefully set at right time.
    current_connection_->use_hid_protocol_ = useHID;
    fd90:	f8d0 37c4 	ldr.w	r3, [r0, #1988]	; 0x7c4
    fd94:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
}
    fd98:	4770      	bx	lr
    fd9a:	bf00      	nop

0000fd9c <_GLOBAL__sub_I_em_rx_tx2>:
        break;
    case EV_LE_LONG_TERM_KEY_REQUEST:
        break;
    //default:    
    }
}
    fd9c:	b508      	push	{r3, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    fd9e:	f006 f9cf 	bl	16140 <eeprom_initialize>
    fda2:	4b04      	ldr	r3, [pc, #16]	; (fdb4 <_GLOBAL__sub_I_em_rx_tx2+0x18>)
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    fda4:	4904      	ldr	r1, [pc, #16]	; (fdb8 <_GLOBAL__sub_I_em_rx_tx2+0x1c>)
    fda6:	6818      	ldr	r0, [r3, #0]
    fda8:	4a04      	ldr	r2, [pc, #16]	; (fdbc <_GLOBAL__sub_I_em_rx_tx2+0x20>)
    fdaa:	681b      	ldr	r3, [r3, #0]
    fdac:	6008      	str	r0, [r1, #0]
    fdae:	6013      	str	r3, [r2, #0]
    fdb0:	bd08      	pop	{r3, pc}
    fdb2:	bf00      	nop
    fdb4:	2000fab8 	.word	0x2000fab8
    fdb8:	2000ec3c 	.word	0x2000ec3c
    fdbc:	2000ec38 	.word	0x2000ec38

0000fdc0 <USBHIDInput::hid_process_in_data(Transfer_struct const*)>:
    virtual bool hid_process_in_data(const Transfer_t *transfer) {return false;}
    fdc0:	2000      	movs	r0, #0
    fdc2:	4770      	bx	lr

0000fdc4 <USBHIDInput::hid_process_out_data(Transfer_struct const*)>:
    virtual bool hid_process_out_data(const Transfer_t *transfer) {return false;}
    fdc4:	2000      	movs	r0, #0
    fdc6:	4770      	bx	lr

0000fdc8 <USBHIDInput::hid_timer_event(USBDriverTimer*)>:
    virtual void hid_timer_event(USBDriverTimer *whichTimer) { }
    fdc8:	4770      	bx	lr
    fdca:	bf00      	nop

0000fdcc <USBHost::begin()>:
{
    fdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB2;
    fdce:	4a50      	ldr	r2, [pc, #320]	; (ff10 <USBHost::begin()+0x144>)
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_EN_USB_CLKS; // enable
    fdd0:	f04f 0c40 	mov.w	ip, #64	; 0x40
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_BYPASS; // turn off bypass
    fdd4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_POWER; // power up
    fdd8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_ENABLE; // enable
    fddc:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB2_CLR = 0xC000; // get out of 528 MHz mode
    fde0:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_POWER |
    fde4:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB2;
    fde8:	6a13      	ldr	r3, [r2, #32]
		if (n & CCM_ANALOG_PLL_USB2_DIV_SELECT) {
    fdea:	079e      	lsls	r6, r3, #30
    fdec:	f100 8082 	bmi.w	fef4 <USBHost::begin()+0x128>
		if (!(n & CCM_ANALOG_PLL_USB2_ENABLE)) {
    fdf0:	049e      	lsls	r6, r3, #18
    fdf2:	f140 8083 	bpl.w	fefc <USBHost::begin()+0x130>
		if (!(n & CCM_ANALOG_PLL_USB2_POWER)) {
    fdf6:	04de      	lsls	r6, r3, #19
    fdf8:	f140 8082 	bpl.w	ff00 <USBHost::begin()+0x134>
		if (!(n & CCM_ANALOG_PLL_USB2_LOCK)) {
    fdfc:	2b00      	cmp	r3, #0
    fdfe:	daf3      	bge.n	fde8 <USBHost::begin()+0x1c>
		if (n & CCM_ANALOG_PLL_USB2_BYPASS) {
    fe00:	f413 3680 	ands.w	r6, r3, #65536	; 0x10000
    fe04:	d17e      	bne.n	ff04 <USBHost::begin()+0x138>
		if (!(n & CCM_ANALOG_PLL_USB2_EN_USB_CLKS)) {
    fe06:	065b      	lsls	r3, r3, #25
    fe08:	d57e      	bpl.n	ff08 <USBHost::begin()+0x13c>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fe0a:	4c42      	ldr	r4, [pc, #264]	; (ff14 <USBHost::begin()+0x148>)
	USBPHY2_CTRL_CLR = USBPHY_CTRL_SFTRST | USBPHY_CTRL_CLKGATE;
    fe0c:	4a42      	ldr	r2, [pc, #264]	; (ff18 <USBHost::begin()+0x14c>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fe0e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
	GPIO8_GDIR |= 1<<26;
    fe12:	4b42      	ldr	r3, [pc, #264]	; (ff1c <USBHost::begin()+0x150>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fe14:	f041 0103 	orr.w	r1, r1, #3
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    fe18:	4841      	ldr	r0, [pc, #260]	; (ff20 <USBHost::begin()+0x154>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON);
    fe1a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	USBPHY2_CTRL_CLR = USBPHY_CTRL_SFTRST | USBPHY_CTRL_CLKGATE;
    fe1e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    fe22:	6391      	str	r1, [r2, #56]	; 0x38
	USBPHY2_CTRL_SET = USBPHY_CTRL_ENUTMILEVEL2 | USBPHY_CTRL_ENUTMILEVEL3;
    fe24:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    fe28:	6351      	str	r1, [r2, #52]	; 0x34
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    fe2a:	2105      	movs	r1, #5
	USBPHY2_PWD = 0;
    fe2c:	6016      	str	r6, [r2, #0]
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    fe2e:	2208      	movs	r2, #8
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    fe30:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	GPIO8_DR_SET = 1<<26;
    fe34:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    fe38:	f8c0 22a4 	str.w	r2, [r0, #676]	; 0x2a4
	delay(10);
    fe3c:	200a      	movs	r0, #10
	GPIO8_GDIR |= 1<<26;
    fe3e:	685a      	ldr	r2, [r3, #4]
    fe40:	430a      	orrs	r2, r1
    fe42:	605a      	str	r2, [r3, #4]
	GPIO8_DR_SET = 1<<26;
    fe44:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	delay(10);
    fe48:	f006 f85a 	bl	15f00 <delay>
	USBHS_USBCMD |= USBHS_USBCMD_RST;
    fe4c:	4a35      	ldr	r2, [pc, #212]	; (ff24 <USBHost::begin()+0x158>)
    fe4e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    fe52:	f043 0302 	orr.w	r3, r3, #2
    fe56:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
	while (USBHS_USBCMD & USBHS_USBCMD_RST) {
    fe5a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    fe5e:	079b      	lsls	r3, r3, #30
    fe60:	d4fb      	bmi.n	fe5a <USBHost::begin()+0x8e>
	init_Device_Pipe_Transfer_memory();
    fe62:	4d31      	ldr	r5, [pc, #196]	; (ff28 <USBHost::begin()+0x15c>)
    fe64:	f005 f88a 	bl	14f7c <USBHost::init_Device_Pipe_Transfer_memory()>
		periodictable[i] = 1;
    fe68:	2401      	movs	r4, #1
    fe6a:	1f2b      	subs	r3, r5, #4
    fe6c:	f105 027c 	add.w	r2, r5, #124	; 0x7c
    fe70:	f843 4f04 	str.w	r4, [r3, #4]!
	for (int i=0; i < PERIODIC_LIST_SIZE; i++) {
    fe74:	429a      	cmp	r2, r3
    fe76:	d1fb      	bne.n	fe70 <USBHost::begin()+0xa4>
	memset(uframe_bandwidth, 0, sizeof(uframe_bandwidth));
    fe78:	f44f 7280 	mov.w	r2, #256	; 0x100
    fe7c:	2100      	movs	r1, #0
    fe7e:	482b      	ldr	r0, [pc, #172]	; (ff2c <USBHost::begin()+0x160>)
    fe80:	f00b fe6a 	bl	1bb58 <memset>
	port_state = PORT_STATE_DISCONNECTED;
    fe84:	2200      	movs	r2, #0
    fe86:	492a      	ldr	r1, [pc, #168]	; (ff30 <USBHost::begin()+0x164>)
	USBHS_USB_SBUSCFG = 1; //  System Bus Interface Configuration
    fe88:	4b26      	ldr	r3, [pc, #152]	; (ff24 <USBHost::begin()+0x158>)
	port_state = PORT_STATE_DISCONNECTED;
    fe8a:	700a      	strb	r2, [r1, #0]
	USBHS_USBMODE = USBHS_USBMODE_CM(3); // host mode
    fe8c:	2103      	movs	r1, #3
	USBHS_USB_SBUSCFG = 1; //  System Bus Interface Configuration
    fe8e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	USBHS_USBMODE = USBHS_USBMODE_CM(3); // host mode
    fe92:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	USBHS_USBCMD = USBHS_USBCMD_ITC(1) | USBHS_USBCMD_RS |
    fe96:	4927      	ldr	r1, [pc, #156]	; (ff34 <USBHost::begin()+0x168>)
	USBHS_USBINTR = 0;
    fe98:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	USBHS_PERIODICLISTBASE = (uint32_t)periodictable;
    fe9c:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
	USBHS_FRINDEX = 0;
    fea0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	USBHS_ASYNCLISTADDR = 0;
    fea4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	USBHS_USBCMD = USBHS_USBCMD_ITC(1) | USBHS_USBCMD_RS |
    fea8:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
	USBHS_PORTSC1 |= USBHS_PORTSC_PP;
    feac:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
    feb0:	4921      	ldr	r1, [pc, #132]	; (ff38 <USBHost::begin()+0x16c>)
    feb2:	4822      	ldr	r0, [pc, #136]	; (ff3c <USBHost::begin()+0x170>)
    feb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    feb8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	println("USBHS_ASYNCLISTADDR = ", USBHS_ASYNCLISTADDR, HEX);
    febc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	println("USBHS_PERIODICLISTBASE = ", USBHS_PERIODICLISTBASE, HEX);
    fec0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
    fec4:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
	USBHS_USBINTR = USBHS_USBINTR_PCE | USBHS_USBINTR_TIE0 | USBHS_USBINTR_TIE1;
    fec8:	4a1d      	ldr	r2, [pc, #116]	; (ff40 <USBHost::begin()+0x174>)
	NVIC_ENABLE_IRQ(IRQ_USBHS);
    feca:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fece:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    fed2:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
	USBHS_USBINTR = USBHS_USBINTR_PCE | USBHS_USBINTR_TIE0 | USBHS_USBINTR_TIE1;
    fed6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	USBHS_USBINTR |= USBHS_USBINTR_UEE | USBHS_USBINTR_SEE;
    feda:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    fede:	f042 0212 	orr.w	r2, r2, #18
    fee2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	USBHS_USBINTR |= USBHS_USBINTR_UPIE | USBHS_USBINTR_UAIE;
    fee6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    feea:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
    feee:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    fef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CCM_ANALOG_PLL_USB2_CLR = 0xC000; // get out of 528 MHz mode
    fef4:	6294      	str	r4, [r2, #40]	; 0x28
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_BYPASS;
    fef6:	6251      	str	r1, [r2, #36]	; 0x24
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_POWER |
    fef8:	6290      	str	r0, [r2, #40]	; 0x28
			continue;
    fefa:	e775      	b.n	fde8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_ENABLE; // enable
    fefc:	6255      	str	r5, [r2, #36]	; 0x24
			continue;
    fefe:	e773      	b.n	fde8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_POWER; // power up
    ff00:	6257      	str	r7, [r2, #36]	; 0x24
			continue;
    ff02:	e771      	b.n	fde8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_CLR = CCM_ANALOG_PLL_USB2_BYPASS; // turn off bypass
    ff04:	6291      	str	r1, [r2, #40]	; 0x28
			continue;
    ff06:	e76f      	b.n	fde8 <USBHost::begin()+0x1c>
			CCM_ANALOG_PLL_USB2_SET = CCM_ANALOG_PLL_USB2_EN_USB_CLKS; // enable
    ff08:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
			continue;
    ff0c:	e76c      	b.n	fde8 <USBHost::begin()+0x1c>
    ff0e:	bf00      	nop
    ff10:	400d8000 	.word	0x400d8000
    ff14:	400fc000 	.word	0x400fc000
    ff18:	400da000 	.word	0x400da000
    ff1c:	42008000 	.word	0x42008000
    ff20:	401f8000 	.word	0x401f8000
    ff24:	402e0200 	.word	0x402e0200
    ff28:	2000b000 	.word	0x2000b000
    ff2c:	2000e744 	.word	0x2000e744
    ff30:	2000fc32 	.word	0x2000fc32
    ff34:	00018b15 	.word	0x00018b15
    ff38:	2000a000 	.word	0x2000a000
    ff3c:	00010525 	.word	0x00010525
    ff40:	03000004 	.word	0x03000004

0000ff44 <USBDriverTimer::start(unsigned long)>:
	if (!driver) return;
    ff44:	68c3      	ldr	r3, [r0, #12]
	if (microseconds < 100) return; // minimum timer duration
    ff46:	b353      	cbz	r3, ff9e <USBDriverTimer::start(unsigned long)+0x5a>
    ff48:	2963      	cmp	r1, #99	; 0x63
{
    ff4a:	b570      	push	{r4, r5, r6, lr}
	if (microseconds < 100) return; // minimum timer duration
    ff4c:	bf8c      	ite	hi
    ff4e:	2600      	movhi	r6, #0
    ff50:	2601      	movls	r6, #1
    ff52:	460c      	mov	r4, r1
    ff54:	bb16      	cbnz	r6, ff9c <USBDriverTimer::start(unsigned long)+0x58>
	started_micros = micros();
    ff56:	4605      	mov	r5, r0
    ff58:	f006 f826 	bl	15fa8 <micros>
	if (active_timers == NULL) {
    ff5c:	4926      	ldr	r1, [pc, #152]	; (fff8 <USBDriverTimer::start(unsigned long)+0xb4>)
	started_micros = micros();
    ff5e:	60a8      	str	r0, [r5, #8]
	if (active_timers == NULL) {
    ff60:	6808      	ldr	r0, [r1, #0]
		USBHS_GPTIMER1LD = microseconds - 1;
    ff62:	4b26      	ldr	r3, [pc, #152]	; (fffc <USBDriverTimer::start(unsigned long)+0xb8>)
	if (active_timers == NULL) {
    ff64:	2800      	cmp	r0, #0
    ff66:	d03a      	beq.n	ffde <USBDriverTimer::start(unsigned long)+0x9a>
	uint32_t remain = USBHS_GPTIMER1CTL & 0xFFFFFF;
    ff68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    ff6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (microseconds < remain) {
    ff70:	4294      	cmp	r4, r2
    ff72:	d315      	bcc.n	ffa0 <USBDriverTimer::start(unsigned long)+0x5c>
	while (list->next) {
    ff74:	6943      	ldr	r3, [r0, #20]
	microseconds -= remain;
    ff76:	1aa1      	subs	r1, r4, r2
	while (list->next) {
    ff78:	b923      	cbnz	r3, ff84 <USBDriverTimer::start(unsigned long)+0x40>
    ff7a:	e029      	b.n	ffd0 <USBDriverTimer::start(unsigned long)+0x8c>
    ff7c:	695c      	ldr	r4, [r3, #20]
		microseconds -= list->usec;
    ff7e:	1a89      	subs	r1, r1, r2
	while (list->next) {
    ff80:	b33c      	cbz	r4, ffd2 <USBDriverTimer::start(unsigned long)+0x8e>
    ff82:	4623      	mov	r3, r4
		if (microseconds < list->usec) {
    ff84:	691a      	ldr	r2, [r3, #16]
    ff86:	428a      	cmp	r2, r1
    ff88:	d9f8      	bls.n	ff7c <USBDriverTimer::start(unsigned long)+0x38>
			prev = list->prev;
    ff8a:	6998      	ldr	r0, [r3, #24]
			list->usec -= microseconds;
    ff8c:	1a52      	subs	r2, r2, r1
    ff8e:	611a      	str	r2, [r3, #16]
			prev = list->prev;
    ff90:	61a8      	str	r0, [r5, #24]
			next = list;
    ff92:	e9c5 1304 	strd	r1, r3, [r5, #16]
			list->prev = this;
    ff96:	619d      	str	r5, [r3, #24]
			prev->next = this;
    ff98:	69ab      	ldr	r3, [r5, #24]
    ff9a:	615d      	str	r5, [r3, #20]
}
    ff9c:	bd70      	pop	{r4, r5, r6, pc}
    ff9e:	4770      	bx	lr
		__disable_irq();
    ffa0:	b672      	cpsid	i
		USBHS_USBSTS = USBHS_USBSTS_TI1; // TODO: UPI & UAI safety?!
    ffa2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
		USBHS_GPTIMER1CTL = 0;
    ffa6:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
		active_timers->usec = remain - microseconds;
    ffaa:	1b12      	subs	r2, r2, r4
		USBHS_USBSTS = USBHS_USBSTS_TI1; // TODO: UPI & UAI safety?!
    ffac:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
		next = active_timers;
    ffb0:	6808      	ldr	r0, [r1, #0]
		usec = microseconds;
    ffb2:	612c      	str	r4, [r5, #16]
		USBHS_GPTIMER1LD = microseconds - 1;
    ffb4:	3c01      	subs	r4, #1
		prev = NULL;
    ffb6:	61ae      	str	r6, [r5, #24]
		next = active_timers;
    ffb8:	6168      	str	r0, [r5, #20]
		active_timers->usec = remain - microseconds;
    ffba:	6102      	str	r2, [r0, #16]
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    ffbc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
		active_timers = this;
    ffc0:	600d      	str	r5, [r1, #0]
		active_timers->prev = this;
    ffc2:	6185      	str	r5, [r0, #24]
		USBHS_GPTIMER1LD = microseconds - 1;
    ffc4:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    ffc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		__enable_irq();
    ffcc:	b662      	cpsie	i
}
    ffce:	bd70      	pop	{r4, r5, r6, pc}
	while (list->next) {
    ffd0:	4603      	mov	r3, r0
	next = NULL;
    ffd2:	2200      	movs	r2, #0
	usec = microseconds;
    ffd4:	6129      	str	r1, [r5, #16]
	next = NULL;
    ffd6:	e9c5 2305 	strd	r2, r3, [r5, #20]
	list->next = this;
    ffda:	615d      	str	r5, [r3, #20]
}
    ffdc:	bd70      	pop	{r4, r5, r6, pc}
		USBHS_GPTIMER1LD = microseconds - 1;
    ffde:	1e66      	subs	r6, r4, #1
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    ffe0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
		prev = NULL;
    ffe4:	61a8      	str	r0, [r5, #24]
		active_timers = this;
    ffe6:	600d      	str	r5, [r1, #0]
		next = NULL;
    ffe8:	e9c5 4004 	strd	r4, r0, [r5, #16]
		USBHS_GPTIMER1LD = microseconds - 1;
    ffec:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
		USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
    fff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    fff4:	bd70      	pop	{r4, r5, r6, pc}
    fff6:	bf00      	nop
    fff8:	2000e710 	.word	0x2000e710
    fffc:	402e0200 	.word	0x402e0200

00010000 <USBDriverTimer::stop()>:
	__disable_irq();
   10000:	b672      	cpsid	i
	if (active_timers) {
   10002:	4a19      	ldr	r2, [pc, #100]	; (10068 <USBDriverTimer::stop()+0x68>)
   10004:	6813      	ldr	r3, [r2, #0]
   10006:	b1fb      	cbz	r3, 10048 <USBDriverTimer::stop()+0x48>
		if (active_timers == this) {
   10008:	4283      	cmp	r3, r0
   1000a:	d11a      	bne.n	10042 <USBDriverTimer::stop()+0x42>
			USBHS_GPTIMER1CTL = 0;
   1000c:	4817      	ldr	r0, [pc, #92]	; (1006c <USBDriverTimer::stop()+0x6c>)
			if (next) {
   1000e:	695b      	ldr	r3, [r3, #20]
{
   10010:	b430      	push	{r4, r5}
			USBHS_GPTIMER1CTL = 0;
   10012:	2400      	movs	r4, #0
   10014:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
			if (next) {
   10018:	b323      	cbz	r3, 10064 <USBDriverTimer::stop()+0x64>
				uint32_t usec_til_next = USBHS_GPTIMER1CTL & 0xFFFFFF;
   1001a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
				usec_til_next += next->usec;
   1001e:	691d      	ldr	r5, [r3, #16]
				uint32_t usec_til_next = USBHS_GPTIMER1CTL & 0xFFFFFF;
   10020:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
				usec_til_next += next->usec;
   10024:	4429      	add	r1, r5
				next->usec = usec_til_next;
   10026:	6119      	str	r1, [r3, #16]
				USBHS_GPTIMER1LD = usec_til_next;
   10028:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
				USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
   1002c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
   10030:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
				next->prev = NULL;
   10034:	619c      	str	r4, [r3, #24]
				active_timers = next;
   10036:	6013      	str	r3, [r2, #0]
	__enable_irq();
   10038:	b662      	cpsie	i
}
   1003a:	bc30      	pop	{r4, r5}
   1003c:	4770      	bx	lr
				if (t == this) {
   1003e:	4298      	cmp	r0, r3
   10040:	d004      	beq.n	1004c <USBDriverTimer::stop()+0x4c>
			for (USBDriverTimer *t = active_timers->next; t; t = t->next) {
   10042:	695b      	ldr	r3, [r3, #20]
   10044:	2b00      	cmp	r3, #0
   10046:	d1fa      	bne.n	1003e <USBDriverTimer::stop()+0x3e>
	__enable_irq();
   10048:	b662      	cpsie	i
   1004a:	4770      	bx	lr
					t->prev->next = t->next;
   1004c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   10050:	614a      	str	r2, [r1, #20]
					if (t->next) {
   10052:	2a00      	cmp	r2, #0
   10054:	d0f8      	beq.n	10048 <USBDriverTimer::stop()+0x48>
						t->next->usec += t->usec;
   10056:	6918      	ldr	r0, [r3, #16]
   10058:	6913      	ldr	r3, [r2, #16]
						t->next->prev = t->prev;
   1005a:	6191      	str	r1, [r2, #24]
						t->next->usec += t->usec;
   1005c:	4403      	add	r3, r0
   1005e:	6113      	str	r3, [r2, #16]
	__enable_irq();
   10060:	b662      	cpsie	i
   10062:	4770      	bx	lr
				active_timers = NULL;
   10064:	6013      	str	r3, [r2, #0]
   10066:	e7e7      	b.n	10038 <USBDriverTimer::stop()+0x38>
   10068:	2000e710 	.word	0x2000e710
   1006c:	402e0200 	.word	0x402e0200

00010070 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)>:
	Transfer_t *halt = (Transfer_t *)(pipe->qh.next);
   10070:	6903      	ldr	r3, [r0, #16]
{
   10072:	4684      	mov	ip, r0
	while (!(halt->qtd.token & 0x40)) halt = (Transfer_t *)(halt->qtd.next);
   10074:	689a      	ldr	r2, [r3, #8]
{
   10076:	b5f0      	push	{r4, r5, r6, r7, lr}
   10078:	460d      	mov	r5, r1
	while (!(halt->qtd.token & 0x40)) halt = (Transfer_t *)(halt->qtd.next);
   1007a:	0651      	lsls	r1, r2, #25
   1007c:	d403      	bmi.n	10086 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x16>
   1007e:	681b      	ldr	r3, [r3, #0]
   10080:	689a      	ldr	r2, [r3, #8]
   10082:	0652      	lsls	r2, r2, #25
   10084:	d5fb      	bpl.n	1007e <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xe>
	transfer->qtd.token = 0x40;
   10086:	2240      	movs	r2, #64	; 0x40
	uint32_t token = transfer->qtd.token;
   10088:	f8d5 e008 	ldr.w	lr, [r5, #8]
	halt->setup = transfer->setup;
   1008c:	f105 0134 	add.w	r1, r5, #52	; 0x34
	halt->driver = transfer->driver;
   10090:	6bee      	ldr	r6, [r5, #60]	; 0x3c
	transfer->qtd.token = 0x40;
   10092:	60aa      	str	r2, [r5, #8]
	halt->qtd.next = transfer->qtd.next;
   10094:	682a      	ldr	r2, [r5, #0]
   10096:	601a      	str	r2, [r3, #0]
	halt->qtd.alt_next = transfer->qtd.alt_next;
   10098:	686a      	ldr	r2, [r5, #4]
   1009a:	605a      	str	r2, [r3, #4]
	halt->qtd.buffer[0] = transfer->qtd.buffer[0]; // TODO: optimize memcpy, all
   1009c:	68ea      	ldr	r2, [r5, #12]
   1009e:	60da      	str	r2, [r3, #12]
	halt->qtd.buffer[1] = transfer->qtd.buffer[1]; //       fields except token
   100a0:	692a      	ldr	r2, [r5, #16]
   100a2:	611a      	str	r2, [r3, #16]
	halt->qtd.buffer[2] = transfer->qtd.buffer[2];
   100a4:	696a      	ldr	r2, [r5, #20]
   100a6:	615a      	str	r2, [r3, #20]
	halt->qtd.buffer[3] = transfer->qtd.buffer[3];
   100a8:	69aa      	ldr	r2, [r5, #24]
   100aa:	619a      	str	r2, [r3, #24]
	halt->qtd.buffer[4] = transfer->qtd.buffer[4];
   100ac:	69ea      	ldr	r2, [r5, #28]
	halt->pipe = pipe;
   100ae:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
	halt->qtd.buffer[4] = transfer->qtd.buffer[4];
   100b2:	61da      	str	r2, [r3, #28]
	halt->buffer = transfer->buffer;
   100b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
   100b6:	681c      	ldr	r4, [r3, #0]
	halt->buffer = transfer->buffer;
   100b8:	62da      	str	r2, [r3, #44]	; 0x2c
	halt->length = transfer->length;
   100ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
   100bc:	2c01      	cmp	r4, #1
	halt->setup = transfer->setup;
   100be:	c903      	ldmia	r1, {r0, r1}
	halt->length = transfer->length;
   100c0:	631a      	str	r2, [r3, #48]	; 0x30
	halt->setup = transfer->setup;
   100c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
   100c6:	e882 0003 	stmia.w	r2, {r0, r1}
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
   100ca:	461a      	mov	r2, r3
	halt->driver = transfer->driver;
   100cc:	63de      	str	r6, [r3, #60]	; 0x3c
	while ((uint32_t)(last->qtd.next) != 1) last = (Transfer_t *)(last->qtd.next);
   100ce:	d003      	beq.n	100d8 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x68>
   100d0:	6812      	ldr	r2, [r2, #0]
   100d2:	6811      	ldr	r1, [r2, #0]
   100d4:	2901      	cmp	r1, #1
   100d6:	d1fb      	bne.n	100d0 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x60>
	last->qtd.next = (uint32_t)transfer;
   100d8:	6015      	str	r5, [r2, #0]
	transfer->qtd.next = 1;
   100da:	2201      	movs	r2, #1
   100dc:	602a      	str	r2, [r5, #0]
	while (p->qtd.next != (uint32_t)transfer) {
   100de:	681a      	ldr	r2, [r3, #0]
   100e0:	4295      	cmp	r5, r2
   100e2:	461a      	mov	r2, r3
   100e4:	d02e      	beq.n	10144 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xd4>
	Transfer_t *prev = NULL;
   100e6:	2600      	movs	r6, #0
		Transfer_t *next = (Transfer_t *)p->qtd.next;
   100e8:	6811      	ldr	r1, [r2, #0]
   100ea:	4614      	mov	r4, r2
	while (p->qtd.next != (uint32_t)transfer) {
   100ec:	680f      	ldr	r7, [r1, #0]
		Transfer_t *next = (Transfer_t *)p->qtd.next;
   100ee:	460a      	mov	r2, r1
		p->prev_followup = prev;
   100f0:	6266      	str	r6, [r4, #36]	; 0x24
		p->next_followup = next;
   100f2:	4626      	mov	r6, r4
	while (p->qtd.next != (uint32_t)transfer) {
   100f4:	42bd      	cmp	r5, r7
		p->next_followup = next;
   100f6:	6221      	str	r1, [r4, #32]
	while (p->qtd.next != (uint32_t)transfer) {
   100f8:	d1f6      	bne.n	100e8 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x78>
	p->next_followup = NULL;
   100fa:	2100      	movs	r1, #0
	p->prev_followup = prev;
   100fc:	6254      	str	r4, [r2, #36]	; 0x24
	p->next_followup = NULL;
   100fe:	6211      	str	r1, [r2, #32]
	if (pipe->type == 0 || pipe->type == 2) {
   10100:	f89c 1034 	ldrb.w	r1, [ip, #52]	; 0x34
   10104:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   10108:	d109      	bne.n	1011e <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xae>
}

static void add_to_async_followup_list(Transfer_t *first, Transfer_t *last)
{
	last->next_followup = NULL; // always add to end of list
	if (async_followup_last == NULL) {
   1010a:	480f      	ldr	r0, [pc, #60]	; (10148 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xd8>)
   1010c:	6801      	ldr	r1, [r0, #0]
		first->prev_followup = NULL;
   1010e:	6259      	str	r1, [r3, #36]	; 0x24
	if (async_followup_last == NULL) {
   10110:	b189      	cbz	r1, 10136 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xc6>
	if (periodic_followup_last == NULL) {
		first->prev_followup = NULL;
		periodic_followup_first = first;
	} else {
		first->prev_followup = periodic_followup_last;
		periodic_followup_last->next_followup = first;
   10112:	620b      	str	r3, [r1, #32]
	}
	periodic_followup_last = last;
   10114:	6002      	str	r2, [r0, #0]
}
   10116:	2001      	movs	r0, #1
	halt->qtd.token = token;
   10118:	f8c3 e008 	str.w	lr, [r3, #8]
}
   1011c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (periodic_followup_last == NULL) {
   1011e:	480b      	ldr	r0, [pc, #44]	; (1014c <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xdc>)
   10120:	6801      	ldr	r1, [r0, #0]
		first->prev_followup = NULL;
   10122:	6259      	str	r1, [r3, #36]	; 0x24
	if (periodic_followup_last == NULL) {
   10124:	2900      	cmp	r1, #0
   10126:	d1f4      	bne.n	10112 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xa2>
		periodic_followup_first = first;
   10128:	4909      	ldr	r1, [pc, #36]	; (10150 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xe0>)
   1012a:	600b      	str	r3, [r1, #0]
	periodic_followup_last = last;
   1012c:	6002      	str	r2, [r0, #0]
}
   1012e:	2001      	movs	r0, #1
	halt->qtd.token = token;
   10130:	f8c3 e008 	str.w	lr, [r3, #8]
}
   10134:	bdf0      	pop	{r4, r5, r6, r7, pc}
		async_followup_first = first;
   10136:	4907      	ldr	r1, [pc, #28]	; (10154 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0xe4>)
   10138:	600b      	str	r3, [r1, #0]
	periodic_followup_last = last;
   1013a:	6002      	str	r2, [r0, #0]
}
   1013c:	2001      	movs	r0, #1
	halt->qtd.token = token;
   1013e:	f8c3 e008 	str.w	lr, [r3, #8]
}
   10142:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Transfer_t *prev = NULL;
   10144:	2400      	movs	r4, #0
   10146:	e7d8      	b.n	100fa <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)+0x8a>
   10148:	2000e84c 	.word	0x2000e84c
   1014c:	2000e854 	.word	0x2000e854
   10150:	2000e858 	.word	0x2000e858
   10154:	2000e850 	.word	0x2000e850

00010158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>:
{
   10158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1015c:	4698      	mov	r8, r3
	if (setup->wLength > 16384) return false; // max 16K data for control
   1015e:	88cb      	ldrh	r3, [r1, #6]
   10160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   10164:	d902      	bls.n	1016c <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x14>
}
   10166:	2000      	movs	r0, #0
   10168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	transfer = allocate_Transfer();
   1016c:	460d      	mov	r5, r1
   1016e:	4681      	mov	r9, r0
   10170:	4617      	mov	r7, r2
   10172:	f004 ff4b 	bl	1500c <USBHost::allocate_Transfer()>
	if (!transfer) {
   10176:	4606      	mov	r6, r0
   10178:	2800      	cmp	r0, #0
   1017a:	d0f4      	beq.n	10166 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xe>
	status = allocate_Transfer();
   1017c:	f004 ff46 	bl	1500c <USBHost::allocate_Transfer()>
	if (!status) {
   10180:	4604      	mov	r4, r0
   10182:	2800      	cmp	r0, #0
   10184:	d06c      	beq.n	10260 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x108>
	if (setup->wLength > 0) {
   10186:	88e9      	ldrh	r1, [r5, #6]
   10188:	2900      	cmp	r1, #0
   1018a:	d13b      	bne.n	10204 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xac>
		transfer->qtd.next = (uint32_t)status;
   1018c:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 10280 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x128>
   10190:	6030      	str	r0, [r6, #0]
	addr &= 0xFFFFF000;
   10192:	4b39      	ldr	r3, [pc, #228]	; (10278 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x120>)
	t->qtd.alt_next = 1; // 1=terminate
   10194:	2201      	movs	r2, #1
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10196:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 10284 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x12c>
	addr &= 0xFFFFF000;
   1019a:	402b      	ands	r3, r5
	status->pipe = dev->control_pipe;
   1019c:	f8d9 0000 	ldr.w	r0, [r9]
	status->setup.word2 = setup->word2;
   101a0:	f8d5 e004 	ldr.w	lr, [r5, #4]
	status->setup.word1 = setup->word1;
   101a4:	f8d5 9000 	ldr.w	r9, [r5]
	t->qtd.alt_next = 1; // 1=terminate
   101a8:	6072      	str	r2, [r6, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   101aa:	f8c6 a008 	str.w	sl, [r6, #8]
	t->qtd.buffer[0] = addr;
   101ae:	60f5      	str	r5, [r6, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   101b0:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
   101b4:	6135      	str	r5, [r6, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   101b6:	f503 5500 	add.w	r5, r3, #8192	; 0x2000
   101ba:	6175      	str	r5, [r6, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   101bc:	f503 5540 	add.w	r5, r3, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   101c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   101c4:	61b5      	str	r5, [r6, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   101c6:	61f3      	str	r3, [r6, #28]
	t->qtd.buffer[0] = addr;
   101c8:	2300      	movs	r3, #0
	t->qtd.alt_next = 1; // 1=terminate
   101ca:	6062      	str	r2, [r4, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   101cc:	f8c4 c008 	str.w	ip, [r4, #8]
	t->qtd.buffer[0] = addr;
   101d0:	60e3      	str	r3, [r4, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   101d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	status->driver = driver;
   101d6:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	t->qtd.buffer[1] = addr + 0x1000;
   101da:	6123      	str	r3, [r4, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   101dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	status->pipe = dev->control_pipe;
   101e0:	62a0      	str	r0, [r4, #40]	; 0x28
	t->qtd.buffer[2] = addr + 0x2000;
   101e2:	6163      	str	r3, [r4, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   101e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
   101e8:	61a3      	str	r3, [r4, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   101ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	status->length = setup->wLength;
   101ee:	e9c4 710b 	strd	r7, r1, [r4, #44]	; 0x2c
	t->qtd.buffer[4] = addr + 0x4000;
   101f2:	61e3      	str	r3, [r4, #28]
	return queue_Transfer(dev->control_pipe, transfer);
   101f4:	4631      	mov	r1, r6
	status->qtd.next = 1;
   101f6:	6022      	str	r2, [r4, #0]
	status->setup.word2 = setup->word2;
   101f8:	e9c4 9e0d 	strd	r9, lr, [r4, #52]	; 0x34
}
   101fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return queue_Transfer(dev->control_pipe, transfer);
   10200:	f7ff bf36 	b.w	10070 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)>
		data = allocate_Transfer();
   10204:	f004 ff02 	bl	1500c <USBHost::allocate_Transfer()>
		if (!data) {
   10208:	b370      	cbz	r0, 10268 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x110>
		uint32_t pid = (setup->bmRequestType & 0x80) ? 1 : 0;
   1020a:	782a      	ldrb	r2, [r5, #0]
		init_qTD(data, buf, setup->wLength, pid, 1, false);
   1020c:	88e9      	ldrh	r1, [r5, #6]
   1020e:	09d2      	lsrs	r2, r2, #7
	addr &= 0xFFFFF000;
   10210:	4b19      	ldr	r3, [pc, #100]	; (10278 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x120>)
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10212:	f8df c074 	ldr.w	ip, [pc, #116]	; 10288 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x130>
   10216:	ea4f 2e02 	mov.w	lr, r2, lsl #8
	addr &= 0xFFFFF000;
   1021a:	403b      	ands	r3, r7
		status_direction = pid ^ 1;
   1021c:	f082 0201 	eor.w	r2, r2, #1
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10220:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10224:	ea4e 0c0c 	orr.w	ip, lr, ip
	t->qtd.alt_next = 1; // 1=terminate
   10228:	f04f 0e01 	mov.w	lr, #1
   1022c:	f8c0 e004 	str.w	lr, [r0, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10230:	f8c0 c008 	str.w	ip, [r0, #8]
	t->qtd.buffer[1] = addr + 0x1000;
   10234:	f503 5c80 	add.w	ip, r3, #4096	; 0x1000
	t->qtd.buffer[0] = addr;
   10238:	60c7      	str	r7, [r0, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   1023a:	f8c0 c010 	str.w	ip, [r0, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   1023e:	f503 5c00 	add.w	ip, r3, #8192	; 0x2000
   10242:	f8c0 c014 	str.w	ip, [r0, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   10246:	f503 5c40 	add.w	ip, r3, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   1024a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   1024e:	f8c0 c018 	str.w	ip, [r0, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   10252:	61c3      	str	r3, [r0, #28]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10254:	4b09      	ldr	r3, [pc, #36]	; (1027c <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x124>)
		transfer->qtd.next = (uint32_t)data;
   10256:	6030      	str	r0, [r6, #0]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10258:	ea43 2c02 	orr.w	ip, r3, r2, lsl #8
		data->qtd.next = (uint32_t)status;
   1025c:	6004      	str	r4, [r0, #0]
		status_direction = pid ^ 1;
   1025e:	e798      	b.n	10192 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0x3a>
		free_Transfer(transfer);
   10260:	4630      	mov	r0, r6
   10262:	f004 fedb 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
		return false;
   10266:	e77e      	b.n	10166 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xe>
			free_Transfer(transfer);
   10268:	4630      	mov	r0, r6
   1026a:	f004 fed7 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
			free_Transfer(status);
   1026e:	4620      	mov	r0, r4
   10270:	f004 fed4 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
			return false;
   10274:	e777      	b.n	10166 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)+0xe>
   10276:	bf00      	nop
   10278:	fffff000 	.word	0xfffff000
   1027c:	80008080 	.word	0x80008080
   10280:	80008180 	.word	0x80008180
   10284:	00080280 	.word	0x00080280
   10288:	80000080 	.word	0x80000080

0001028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>:
{
   1028c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool irq_was_enabled = NVIC_IS_ENABLED(IRQ_USBHS);
   10290:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	NVIC_DISABLE_IRQ(IRQ_USBHS);
   10294:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
{
   10298:	4699      	mov	r9, r3
   1029a:	4607      	mov	r7, r0
	bool irq_was_enabled = NVIC_IS_ENABLED(IRQ_USBHS);
   1029c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
{
   102a0:	468b      	mov	fp, r1
	NVIC_DISABLE_IRQ(IRQ_USBHS);
   102a2:	f8c4 a18c 	str.w	sl, [r4, #396]	; 0x18c
{
   102a6:	4616      	mov	r6, r2
	bool irq_was_enabled = NVIC_IS_ENABLED(IRQ_USBHS);
   102a8:	ea03 080a 	and.w	r8, r3, sl
	transfer = allocate_Transfer();
   102ac:	f004 feae 	bl	1500c <USBHost::allocate_Transfer()>
	if (!transfer) {
   102b0:	4605      	mov	r5, r0
   102b2:	2800      	cmp	r0, #0
   102b4:	d07d      	beq.n	103b2 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x126>
	for (count=((len-1) >> 14); count; count--) {
   102b6:	1e73      	subs	r3, r6, #1
   102b8:	0b9c      	lsrs	r4, r3, #14
   102ba:	d008      	beq.n	102ce <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x42>
		next = allocate_Transfer();
   102bc:	4682      	mov	sl, r0
   102be:	f004 fea5 	bl	1500c <USBHost::allocate_Transfer()>
		if (!next) {
   102c2:	2800      	cmp	r0, #0
   102c4:	d060      	beq.n	10388 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xfc>
	for (count=((len-1) >> 14); count; count--) {
   102c6:	3c01      	subs	r4, #1
		data->qtd.next = (uint32_t)next;
   102c8:	f8ca 0000 	str.w	r0, [sl]
	for (count=((len-1) >> 14); count; count--) {
   102cc:	d1f6      	bne.n	102bc <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x30>
	data->setup.word1 = 0;
   102ce:	2300      	movs	r3, #0
	data->qtd.next = 1;
   102d0:	2101      	movs	r1, #1
		if (count > 16384) {
   102d2:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
	data->driver = driver;
   102d6:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
	data->length = len;
   102da:	6306      	str	r6, [r0, #48]	; 0x30
	data->driver = driver;
   102dc:	462a      	mov	r2, r5
	data->qtd.next = 1;
   102de:	6001      	str	r1, [r0, #0]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   102e0:	4c37      	ldr	r4, [pc, #220]	; (103c0 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x134>)
	data->buffer = buffer;
   102e2:	e9c0 7b0a 	strd	r7, fp, [r0, #40]	; 0x28
	data->setup.word2 = 0;
   102e6:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
	addr &= 0xFFFFF000;
   102ea:	4836      	ldr	r0, [pc, #216]	; (103c4 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x138>)
		if (count > 16384) {
   102ec:	d920      	bls.n	10330 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xa4>
		init_qTD(data, p, count, pipe->direction, 0, last);
   102ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
		len -= count;
   102f2:	f5a6 4680 	sub.w	r6, r6, #16384	; 0x4000
	t->qtd.alt_next = 1; // 1=terminate
   102f6:	6051      	str	r1, [r2, #4]
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   102f8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		if (count > 16384) {
   102fc:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10300:	6093      	str	r3, [r2, #8]
	addr &= 0xFFFFF000;
   10302:	ea0b 0300 	and.w	r3, fp, r0
	t->qtd.buffer[0] = addr;
   10306:	f8c2 b00c 	str.w	fp, [r2, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   1030a:	f50b 4b80 	add.w	fp, fp, #16384	; 0x4000
   1030e:	f503 5c80 	add.w	ip, r3, #4096	; 0x1000
   10312:	f8c2 c010 	str.w	ip, [r2, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   10316:	f503 5c00 	add.w	ip, r3, #8192	; 0x2000
   1031a:	f8c2 c014 	str.w	ip, [r2, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   1031e:	f503 5c40 	add.w	ip, r3, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   10322:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   10326:	f8c2 c018 	str.w	ip, [r2, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   1032a:	61d3      	str	r3, [r2, #28]
		data = (Transfer_t *)(data->qtd.next);
   1032c:	6812      	ldr	r2, [r2, #0]
		if (count > 16384) {
   1032e:	d8de      	bhi.n	102ee <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x62>
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10330:	0436      	lsls	r6, r6, #16
		init_qTD(data, p, count, pipe->direction, 0, last);
   10332:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
	addr &= 0xFFFFF000;
   10336:	4c23      	ldr	r4, [pc, #140]	; (103c4 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x138>)
	bool return_value = queue_Transfer(pipe, transfer);
   10338:	4629      	mov	r1, r5
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   1033a:	f446 4300 	orr.w	r3, r6, #32768	; 0x8000
	t->qtd.alt_next = 1; // 1=terminate
   1033e:	2501      	movs	r5, #1
	addr &= 0xFFFFF000;
   10340:	ea0b 0404 	and.w	r4, fp, r4
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   10344:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	t->qtd.alt_next = 1; // 1=terminate
   10348:	6055      	str	r5, [r2, #4]
	bool return_value = queue_Transfer(pipe, transfer);
   1034a:	4638      	mov	r0, r7
	t->qtd.token = data01 | (len << 16) | (irq ? 0x8000 : 0) | (pid << 8) | 0x80;
   1034c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10350:	6093      	str	r3, [r2, #8]
	t->qtd.buffer[1] = addr + 0x1000;
   10352:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
	t->qtd.buffer[0] = addr;
   10356:	f8c2 b00c 	str.w	fp, [r2, #12]
	t->qtd.buffer[1] = addr + 0x1000;
   1035a:	6113      	str	r3, [r2, #16]
	t->qtd.buffer[2] = addr + 0x2000;
   1035c:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   10360:	6153      	str	r3, [r2, #20]
	t->qtd.buffer[3] = addr + 0x3000;
   10362:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
	t->qtd.buffer[4] = addr + 0x4000;
   10366:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
	t->qtd.buffer[3] = addr + 0x3000;
   1036a:	6193      	str	r3, [r2, #24]
	t->qtd.buffer[4] = addr + 0x4000;
   1036c:	61d4      	str	r4, [r2, #28]
	bool return_value = queue_Transfer(pipe, transfer);
   1036e:	f7ff fe7f 	bl	10070 <USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)>
	if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   10372:	f1b8 0f00 	cmp.w	r8, #0
   10376:	d005      	beq.n	10384 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xf8>
   10378:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10380:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   10384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				next = (Transfer_t *)transfer->qtd.next;
   10388:	462c      	mov	r4, r5
   1038a:	682d      	ldr	r5, [r5, #0]
				free_Transfer(transfer);
   1038c:	4620      	mov	r0, r4
   1038e:	f004 fe45 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
				if (transfer == data) break;
   10392:	4554      	cmp	r4, sl
   10394:	d1f8      	bne.n	10388 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xfc>
			if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   10396:	f1b8 0f00 	cmp.w	r8, #0
   1039a:	d007      	beq.n	103ac <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x120>
   1039c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   103a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
            return false;
   103a4:	2000      	movs	r0, #0
			if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   103a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   103aa:	e7eb      	b.n	10384 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xf8>
		return false;
   103ac:	2000      	movs	r0, #0
}
   103ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (irq_was_enabled) NVIC_ENABLE_IRQ(IRQ_USBHS);
   103b2:	f1b8 0f00 	cmp.w	r8, #0
   103b6:	d0f9      	beq.n	103ac <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0x120>
   103b8:	f8c4 a10c 	str.w	sl, [r4, #268]	; 0x10c
   103bc:	e7e2      	b.n	10384 <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)+0xf8>
   103be:	bf00      	nop
   103c0:	40000080 	.word	0x40000080
   103c4:	fffff000 	.word	0xfffff000

000103c8 <USBHost::followup_Error()>:
{
   103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Transfer_t *p = async_followup_first;
   103cc:	4d53      	ldr	r5, [pc, #332]	; (1051c <USBHost::followup_Error()+0x154>)
{
   103ce:	b083      	sub	sp, #12
	Transfer_t *p = async_followup_first;
   103d0:	682f      	ldr	r7, [r5, #0]
	while (p) {
   103d2:	b137      	cbz	r7, 103e2 <USBHost::followup_Error()+0x1a>
					haltedpipe->qh.current = 0;
   103d4:	2600      	movs	r6, #0
	if (!(transfer->qtd.token & 0x80)) {
   103d6:	68bb      	ldr	r3, [r7, #8]
   103d8:	061a      	lsls	r2, r3, #24
   103da:	d505      	bpl.n	103e8 <USBHost::followup_Error()+0x20>
			p = p->next_followup;
   103dc:	6a3f      	ldr	r7, [r7, #32]
	while (p) {
   103de:	2f00      	cmp	r7, #0
   103e0:	d1f9      	bne.n	103d6 <USBHost::followup_Error()+0xe>
}
   103e2:	b003      	add	sp, #12
   103e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (transfer->qtd.token & 0x8000) {
   103e8:	68bb      	ldr	r3, [r7, #8]
   103ea:	041b      	lsls	r3, r3, #16
   103ec:	d504      	bpl.n	103f8 <USBHost::followup_Error()+0x30>
			if (transfer->pipe->callback_function) {
   103ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   103f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   103f2:	b10b      	cbz	r3, 103f8 <USBHost::followup_Error()+0x30>
				(*(transfer->pipe->callback_function))(transfer);
   103f4:	4638      	mov	r0, r7
   103f6:	4798      	blx	r3
			Transfer_t *next = p->next_followup;
   103f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
	if (prev) {
   103fc:	b163      	cbz	r3, 10418 <USBHost::followup_Error()+0x50>
		prev->next_followup = next;
   103fe:	621a      	str	r2, [r3, #32]
	if (next) {
   10400:	b16a      	cbz	r2, 1041e <USBHost::followup_Error()+0x56>
			if (p->qtd.token & 0x40) {
   10402:	68b9      	ldr	r1, [r7, #8]
		next->prev_followup = prev;
   10404:	6253      	str	r3, [r2, #36]	; 0x24
			if (p->qtd.token & 0x40) {
   10406:	064c      	lsls	r4, r1, #25
   10408:	d445      	bmi.n	10496 <USBHost::followup_Error()+0xce>
				free_Transfer(p);
   1040a:	4638      	mov	r0, r7
			Transfer_t *next = p->next_followup;
   1040c:	4617      	mov	r7, r2
				free_Transfer(p);
   1040e:	f004 fe05 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
	while (p) {
   10412:	2f00      	cmp	r7, #0
   10414:	d1df      	bne.n	103d6 <USBHost::followup_Error()+0xe>
   10416:	e7e4      	b.n	103e2 <USBHost::followup_Error()+0x1a>
		async_followup_first = next;
   10418:	602a      	str	r2, [r5, #0]
	if (next) {
   1041a:	2a00      	cmp	r2, #0
   1041c:	d1f1      	bne.n	10402 <USBHost::followup_Error()+0x3a>
		async_followup_last = prev;
   1041e:	4940      	ldr	r1, [pc, #256]	; (10520 <USBHost::followup_Error()+0x158>)
   10420:	600b      	str	r3, [r1, #0]
			if (p->qtd.token & 0x40) {
   10422:	68bb      	ldr	r3, [r7, #8]
   10424:	0658      	lsls	r0, r3, #25
   10426:	d5f0      	bpl.n	1040a <USBHost::followup_Error()+0x42>
				Pipe_t *haltedpipe = p->pipe;
   10428:	6abc      	ldr	r4, [r7, #40]	; 0x28
				free_Transfer(p);
   1042a:	4638      	mov	r0, r7
   1042c:	9201      	str	r2, [sp, #4]
   1042e:	f004 fdf5 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
				p = (Transfer_t *)(haltedpipe->qh.next & ~0x1F);
   10432:	6923      	ldr	r3, [r4, #16]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   10434:	9a01      	ldr	r2, [sp, #4]
   10436:	f033 031f 	bics.w	r3, r3, #31
   1043a:	d0d2      	beq.n	103e2 <USBHost::followup_Error()+0x1a>
			Transfer_t *next = p->next_followup;
   1043c:	4617      	mov	r7, r2
				Transfer_t *first = NULL;
   1043e:	4693      	mov	fp, r2
   10440:	e005      	b.n	1044e <USBHost::followup_Error()+0x86>
					print(", token=", (uint32_t)p->qtd.token, HEX);
   10442:	689a      	ldr	r2, [r3, #8]
					println(", next=", (uint32_t)p->qtd.next, HEX);
   10444:	681a      	ldr	r2, [r3, #0]
					p = (Transfer_t *)(p->qtd.next & ~0x1F);
   10446:	681b      	ldr	r3, [r3, #0]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   10448:	f033 031f 	bics.w	r3, r3, #31
   1044c:	d005      	beq.n	1045a <USBHost::followup_Error()+0x92>
   1044e:	689a      	ldr	r2, [r3, #8]
   10450:	0651      	lsls	r1, r2, #25
   10452:	d5f6      	bpl.n	10442 <USBHost::followup_Error()+0x7a>
					haltedpipe->qh.next = (uint32_t)p;
   10454:	6123      	str	r3, [r4, #16]
					haltedpipe->qh.current = 0;
   10456:	60e6      	str	r6, [r4, #12]
					haltedpipe->qh.token = 0;
   10458:	61a6      	str	r6, [r4, #24]
				while (p) {
   1045a:	f1bb 0f00 	cmp.w	fp, #0
   1045e:	d0be      	beq.n	103de <USBHost::followup_Error()+0x16>
					uint32_t token = p->qtd.token;
   10460:	f8db 3008 	ldr.w	r3, [fp, #8]
					if (token & 0x8000 && haltedpipe->callback_function) {
   10464:	041a      	lsls	r2, r3, #16
   10466:	d50a      	bpl.n	1047e <USBHost::followup_Error()+0xb6>
   10468:	6be2      	ldr	r2, [r4, #60]	; 0x3c
						p->qtd.token = token | 0x40;
   1046a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
						(*(p->pipe->callback_function))(p);
   1046e:	4658      	mov	r0, fp
					if (token & 0x8000 && haltedpipe->callback_function) {
   10470:	b12a      	cbz	r2, 1047e <USBHost::followup_Error()+0xb6>
						(*(p->pipe->callback_function))(p);
   10472:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						p->qtd.token = token | 0x40;
   10476:	f8cb 3008 	str.w	r3, [fp, #8]
						(*(p->pipe->callback_function))(p);
   1047a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1047c:	4798      	blx	r3
					Transfer_t *next2 = p->next_followup;
   1047e:	f8db a020 	ldr.w	sl, [fp, #32]
					free_Transfer(p);
   10482:	4658      	mov	r0, fp
   10484:	f004 fdca 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
				while (p) {
   10488:	46d3      	mov	fp, sl
   1048a:	f1ba 0f00 	cmp.w	sl, #0
   1048e:	d1e7      	bne.n	10460 <USBHost::followup_Error()+0x98>
	while (p) {
   10490:	2f00      	cmp	r7, #0
   10492:	d1a0      	bne.n	103d6 <USBHost::followup_Error()+0xe>
   10494:	e7a5      	b.n	103e2 <USBHost::followup_Error()+0x1a>
				free_Transfer(p);
   10496:	4638      	mov	r0, r7
				Pipe_t *haltedpipe = p->pipe;
   10498:	6abc      	ldr	r4, [r7, #40]	; 0x28
   1049a:	9201      	str	r2, [sp, #4]
				free_Transfer(p);
   1049c:	f004 fdbe 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
   104a0:	2000      	movs	r0, #0
   104a2:	9a01      	ldr	r2, [sp, #4]
   104a4:	4684      	mov	ip, r0
   104a6:	4617      	mov	r7, r2
   104a8:	4683      	mov	fp, r0
					Transfer_t *next2 = p->next_followup;
   104aa:	4611      	mov	r1, r2
   104ac:	6a12      	ldr	r2, [r2, #32]
					if (p->pipe == haltedpipe) {
   104ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   104b0:	42a3      	cmp	r3, r4
   104b2:	d00a      	beq.n	104ca <USBHost::followup_Error()+0x102>
				while (p) {
   104b4:	2a00      	cmp	r2, #0
   104b6:	d1f8      	bne.n	104aa <USBHost::followup_Error()+0xe2>
   104b8:	b9c0      	cbnz	r0, 104ec <USBHost::followup_Error()+0x124>
   104ba:	f1bc 0f00 	cmp.w	ip, #0
   104be:	d125      	bne.n	1050c <USBHost::followup_Error()+0x144>
				p = (Transfer_t *)(haltedpipe->qh.next & ~0x1F);
   104c0:	6923      	ldr	r3, [r4, #16]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   104c2:	f033 031f 	bics.w	r3, r3, #31
   104c6:	d1c2      	bne.n	1044e <USBHost::followup_Error()+0x86>
   104c8:	e7c7      	b.n	1045a <USBHost::followup_Error()+0x92>
	Transfer_t *prev = transfer->prev_followup;
   104ca:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	if (prev) {
   104cc:	b1d3      	cbz	r3, 10504 <USBHost::followup_Error()+0x13c>
		prev->next_followup = next;
   104ce:	621a      	str	r2, [r3, #32]
	if (next) {
   104d0:	b1aa      	cbz	r2, 104fe <USBHost::followup_Error()+0x136>
		next->prev_followup = prev;
   104d2:	6253      	str	r3, [r2, #36]	; 0x24
						if (first == NULL) {
   104d4:	f1bb 0f00 	cmp.w	fp, #0
   104d8:	d00f      	beq.n	104fa <USBHost::followup_Error()+0x132>
							last->next_followup = p;
   104da:	f8cb 1020 	str.w	r1, [fp, #32]
					Transfer_t *next2 = p->next_followup;
   104de:	428f      	cmp	r7, r1
   104e0:	bf08      	it	eq
   104e2:	4617      	moveq	r7, r2
						p->next_followup = NULL;
   104e4:	620e      	str	r6, [r1, #32]
				while (p) {
   104e6:	2a00      	cmp	r2, #0
   104e8:	d1df      	bne.n	104aa <USBHost::followup_Error()+0xe2>
   104ea:	e7e5      	b.n	104b8 <USBHost::followup_Error()+0xf0>
   104ec:	4b0c      	ldr	r3, [pc, #48]	; (10520 <USBHost::followup_Error()+0x158>)
   104ee:	f8c3 8000 	str.w	r8, [r3]
   104f2:	f1bc 0f00 	cmp.w	ip, #0
   104f6:	d0e3      	beq.n	104c0 <USBHost::followup_Error()+0xf8>
   104f8:	e008      	b.n	1050c <USBHost::followup_Error()+0x144>
   104fa:	468b      	mov	fp, r1
   104fc:	e7ef      	b.n	104de <USBHost::followup_Error()+0x116>
	Transfer_t *prev = transfer->prev_followup;
   104fe:	4698      	mov	r8, r3
   10500:	2001      	movs	r0, #1
   10502:	e7e7      	b.n	104d4 <USBHost::followup_Error()+0x10c>
					Transfer_t *next2 = p->next_followup;
   10504:	4691      	mov	r9, r2
   10506:	f04f 0c01 	mov.w	ip, #1
   1050a:	e7e1      	b.n	104d0 <USBHost::followup_Error()+0x108>
				p = (Transfer_t *)(haltedpipe->qh.next & ~0x1F);
   1050c:	6923      	ldr	r3, [r4, #16]
   1050e:	f8c5 9000 	str.w	r9, [r5]
				while (p && ((p->qtd.token & 0x40) == 0)) {
   10512:	f033 031f 	bics.w	r3, r3, #31
   10516:	d19a      	bne.n	1044e <USBHost::followup_Error()+0x86>
   10518:	e79f      	b.n	1045a <USBHost::followup_Error()+0x92>
   1051a:	bf00      	nop
   1051c:	2000e850 	.word	0x2000e850
   10520:	2000e84c 	.word	0x2000e84c

00010524 <USBHost::isr()>:
	uint32_t stat = USBHS_USBSTS;
   10524:	4b88      	ldr	r3, [pc, #544]	; (10748 <USBHost::isr()+0x224>)
{
   10526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t stat = USBHS_USBSTS;
   1052a:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
	if (stat & USBHS_USBSTS_UAI) { // completed qTD(s) from the async schedule
   1052e:	0377      	lsls	r7, r6, #13
	USBHS_USBSTS = stat; // clear pending interrupts
   10530:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
	if (stat & USBHS_USBSTS_UAI) { // completed qTD(s) from the async schedule
   10534:	d50a      	bpl.n	1054c <USBHost::isr()+0x28>
		Transfer_t *p = async_followup_first;
   10536:	4f85      	ldr	r7, [pc, #532]	; (1074c <USBHost::isr()+0x228>)
   10538:	683c      	ldr	r4, [r7, #0]
		while (p) {
   1053a:	b13c      	cbz	r4, 1054c <USBHost::isr()+0x28>
		async_followup_last = prev;
   1053c:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1076c <USBHost::isr()+0x248>
	if (!(transfer->qtd.token & 0x80)) {
   10540:	68a3      	ldr	r3, [r4, #8]
   10542:	0618      	lsls	r0, r3, #24
   10544:	d57a      	bpl.n	1063c <USBHost::isr()+0x118>
				p = p->next_followup;
   10546:	6a24      	ldr	r4, [r4, #32]
		while (p) {
   10548:	2c00      	cmp	r4, #0
   1054a:	d1f9      	bne.n	10540 <USBHost::isr()+0x1c>
	if (stat & USBHS_USBSTS_UPI) { // completed qTD(s) from the periodic schedule
   1054c:	0334      	lsls	r4, r6, #12
   1054e:	d50b      	bpl.n	10568 <USBHost::isr()+0x44>
		Transfer_t *p = periodic_followup_first;
   10550:	4f7f      	ldr	r7, [pc, #508]	; (10750 <USBHost::isr()+0x22c>)
   10552:	683c      	ldr	r4, [r7, #0]
		while (p) {
   10554:	b144      	cbz	r4, 10568 <USBHost::isr()+0x44>
		periodic_followup_first = next;
	}
	if (next) {
		next->prev_followup = prev;
	} else {
		periodic_followup_last = prev;
   10556:	f8df 8218 	ldr.w	r8, [pc, #536]	; 10770 <USBHost::isr()+0x24c>
	if (!(transfer->qtd.token & 0x80)) {
   1055a:	68a3      	ldr	r3, [r4, #8]
   1055c:	061b      	lsls	r3, r3, #24
   1055e:	f140 8083 	bpl.w	10668 <USBHost::isr()+0x144>
				p = p->next_followup;
   10562:	6a24      	ldr	r4, [r4, #32]
		while (p) {
   10564:	2c00      	cmp	r4, #0
   10566:	d1f8      	bne.n	1055a <USBHost::isr()+0x36>
	if (stat & USBHS_USBSTS_UEI) {
   10568:	07b2      	lsls	r2, r6, #30
   1056a:	f100 809e 	bmi.w	106aa <USBHost::isr()+0x186>
	if (stat & USBHS_USBSTS_PCI) { // port change detected
   1056e:	0771      	lsls	r1, r6, #29
   10570:	d50f      	bpl.n	10592 <USBHost::isr()+0x6e>
		const uint32_t portstat = USBHS_PORTSC1;
   10572:	4b75      	ldr	r3, [pc, #468]	; (10748 <USBHost::isr()+0x224>)
   10574:	f8d3 4184 	ldr.w	r4, [r3, #388]	; 0x184
		USBHS_PORTSC1 = portstat | (USBHS_PORTSC_OCC|USBHS_PORTSC_PEC|USBHS_PORTSC_CSC);
   10578:	f044 022a 	orr.w	r2, r4, #42	; 0x2a
   1057c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		if (portstat & USBHS_PORTSC_CSC) {
   10580:	07a2      	lsls	r2, r4, #30
   10582:	d444      	bmi.n	1060e <USBHost::isr()+0xea>
		if (portstat & USBHS_PORTSC_PEC) {
   10584:	0727      	lsls	r7, r4, #28
   10586:	d404      	bmi.n	10592 <USBHost::isr()+0x6e>
		} else if (port_state == PORT_STATE_RESET && portstat & USBHS_PORTSC_PE) {
   10588:	4b72      	ldr	r3, [pc, #456]	; (10754 <USBHost::isr()+0x230>)
   1058a:	781a      	ldrb	r2, [r3, #0]
   1058c:	2a02      	cmp	r2, #2
   1058e:	f000 808f 	beq.w	106b0 <USBHost::isr()+0x18c>
	if (stat & USBHS_USBSTS_TI0) { // timer 0 - used for built-in port events
   10592:	f006 7380 	and.w	r3, r6, #16777216	; 0x1000000
   10596:	b13b      	cbz	r3, 105a8 <USBHost::isr()+0x84>
		if (port_state == PORT_STATE_DEBOUNCE) {
   10598:	4b6e      	ldr	r3, [pc, #440]	; (10754 <USBHost::isr()+0x230>)
   1059a:	781a      	ldrb	r2, [r3, #0]
   1059c:	2a01      	cmp	r2, #1
   1059e:	f000 80b9 	beq.w	10714 <USBHost::isr()+0x1f0>
		} else if (port_state == PORT_STATE_RECOVERY) {
   105a2:	2a03      	cmp	r2, #3
   105a4:	f000 809b 	beq.w	106de <USBHost::isr()+0x1ba>
	if (stat & USBHS_USBSTS_TI1) { // timer 1 - used for USBDriverTimer
   105a8:	01b1      	lsls	r1, r6, #6
   105aa:	d52e      	bpl.n	1060a <USBHost::isr()+0xe6>
		USBDriverTimer *timer = active_timers;
   105ac:	4f6a      	ldr	r7, [pc, #424]	; (10758 <USBHost::isr()+0x234>)
   105ae:	683c      	ldr	r4, [r7, #0]
		while (timer) {
   105b0:	2c00      	cmp	r4, #0
   105b2:	d02a      	beq.n	1060a <USBHost::isr()+0xe6>
			USBDriverTimer *next = timer->next;
   105b4:	6963      	ldr	r3, [r4, #20]
			active_timers = next;
   105b6:	2600      	movs	r6, #0
   105b8:	4621      	mov	r1, r4
			timer->next = NULL;
   105ba:	4630      	mov	r0, r6
			active_timers = next;
   105bc:	603b      	str	r3, [r7, #0]
			if (list == NULL) {
   105be:	e006      	b.n	105ce <USBHost::isr()+0xaa>
					next->next->usec += next->usec;
   105c0:	692e      	ldr	r6, [r5, #16]
   105c2:	4416      	add	r6, r2
   105c4:	612e      	str	r6, [r5, #16]
				last->next = timer;
   105c6:	614b      	str	r3, [r1, #20]
   105c8:	2601      	movs	r6, #1
   105ca:	4619      	mov	r1, r3
   105cc:	462b      	mov	r3, r5
			timer->next = NULL;
   105ce:	6148      	str	r0, [r1, #20]
			if (!next) break;
   105d0:	2b00      	cmp	r3, #0
   105d2:	f000 80b4 	beq.w	1073e <USBHost::isr()+0x21a>
			if (next->usec >= 5) { // TODO: is 5us a safe minimum?
   105d6:	691a      	ldr	r2, [r3, #16]
			next->prev = NULL;
   105d8:	6198      	str	r0, [r3, #24]
			if (next->usec >= 5) { // TODO: is 5us a safe minimum?
   105da:	2a04      	cmp	r2, #4
   105dc:	f200 80a4 	bhi.w	10728 <USBHost::isr()+0x204>
				if (next->usec > 0 && next->next != NULL) {
   105e0:	695d      	ldr	r5, [r3, #20]
   105e2:	2a00      	cmp	r2, #0
   105e4:	d0ef      	beq.n	105c6 <USBHost::isr()+0xa2>
   105e6:	2d00      	cmp	r5, #0
   105e8:	d1ea      	bne.n	105c0 <USBHost::isr()+0x9c>
				last->next = timer;
   105ea:	614b      	str	r3, [r1, #20]
			timer->next = NULL;
   105ec:	615d      	str	r5, [r3, #20]
			if (!next) break;
   105ee:	603d      	str	r5, [r7, #0]
		while (list) {
   105f0:	4e5a      	ldr	r6, [pc, #360]	; (1075c <USBHost::isr()+0x238>)
			list->prev = NULL;
   105f2:	2500      	movs	r5, #0
			USBDriverTimer *next = list->next;
   105f4:	4621      	mov	r1, r4
   105f6:	6964      	ldr	r4, [r4, #20]
			list->driver->timer_event(list);
   105f8:	68c8      	ldr	r0, [r1, #12]
   105fa:	6803      	ldr	r3, [r0, #0]
   105fc:	689b      	ldr	r3, [r3, #8]
   105fe:	42b3      	cmp	r3, r6
			list->next = NULL;
   10600:	e9c1 5505 	strd	r5, r5, [r1, #20]
			list->driver->timer_event(list);
   10604:	d116      	bne.n	10634 <USBHost::isr()+0x110>
		while (list) {
   10606:	2c00      	cmp	r4, #0
   10608:	d1f4      	bne.n	105f4 <USBHost::isr()+0xd0>
}
   1060a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (portstat & USBHS_PORTSC_CCS) {
   1060e:	f014 0701 	ands.w	r7, r4, #1
				  || port_state == PORT_STATE_DEBOUNCE) {
   10612:	4a50      	ldr	r2, [pc, #320]	; (10754 <USBHost::isr()+0x230>)
			if (portstat & USBHS_PORTSC_CCS) {
   10614:	d071      	beq.n	106fa <USBHost::isr()+0x1d6>
				if (port_state == PORT_STATE_DISCONNECTED
   10616:	7811      	ldrb	r1, [r2, #0]
   10618:	2901      	cmp	r1, #1
   1061a:	d8b3      	bhi.n	10584 <USBHost::isr()+0x60>
					port_state = PORT_STATE_DEBOUNCE;
   1061c:	2001      	movs	r0, #1
					USBHS_GPTIMER0LD = 100000; // microseconds
   1061e:	4950      	ldr	r1, [pc, #320]	; (10760 <USBHost::isr()+0x23c>)
					stat &= ~USBHS_USBSTS_TI0;
   10620:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
					port_state = PORT_STATE_DEBOUNCE;
   10624:	7010      	strb	r0, [r2, #0]
					USBHS_GPTIMER0CTL =
   10626:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
					USBHS_GPTIMER0LD = 100000; // microseconds
   1062a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
					USBHS_GPTIMER0CTL =
   1062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (portstat & USBHS_PORTSC_PEC) {
   10632:	e7b9      	b.n	105a8 <USBHost::isr()+0x84>
			list->driver->timer_event(list);
   10634:	4798      	blx	r3
		while (list) {
   10636:	2c00      	cmp	r4, #0
   10638:	d1dc      	bne.n	105f4 <USBHost::isr()+0xd0>
   1063a:	e7e6      	b.n	1060a <USBHost::isr()+0xe6>
		if (transfer->qtd.token & 0x8000) {
   1063c:	68a3      	ldr	r3, [r4, #8]
   1063e:	0419      	lsls	r1, r3, #16
   10640:	d504      	bpl.n	1064c <USBHost::isr()+0x128>
			if (transfer->pipe->callback_function) {
   10642:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10646:	b10b      	cbz	r3, 1064c <USBHost::isr()+0x128>
				(*(transfer->pipe->callback_function))(transfer);
   10648:	4620      	mov	r0, r4
   1064a:	4798      	blx	r3
				Transfer_t *next = p->next_followup;
   1064c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
	if (prev) {
   10650:	b34a      	cbz	r2, 106a6 <USBHost::isr()+0x182>
		prev->next_followup = next;
   10652:	6213      	str	r3, [r2, #32]
	if (next) {
   10654:	b323      	cbz	r3, 106a0 <USBHost::isr()+0x17c>
		next->prev_followup = prev;
   10656:	625a      	str	r2, [r3, #36]	; 0x24
				free_Transfer(p);
   10658:	4620      	mov	r0, r4
				Transfer_t *next = p->next_followup;
   1065a:	461c      	mov	r4, r3
				free_Transfer(p);
   1065c:	f004 fcde 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
		while (p) {
   10660:	2c00      	cmp	r4, #0
   10662:	f47f af6d 	bne.w	10540 <USBHost::isr()+0x1c>
   10666:	e771      	b.n	1054c <USBHost::isr()+0x28>
		if (transfer->qtd.token & 0x8000) {
   10668:	68a3      	ldr	r3, [r4, #8]
   1066a:	0418      	lsls	r0, r3, #16
   1066c:	d504      	bpl.n	10678 <USBHost::isr()+0x154>
			if (transfer->pipe->callback_function) {
   1066e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10672:	b10b      	cbz	r3, 10678 <USBHost::isr()+0x154>
				(*(transfer->pipe->callback_function))(transfer);
   10674:	4620      	mov	r0, r4
   10676:	4798      	blx	r3
				Transfer_t *next = p->next_followup;
   10678:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
	if (prev) {
   1067c:	b152      	cbz	r2, 10694 <USBHost::isr()+0x170>
		prev->next_followup = next;
   1067e:	6213      	str	r3, [r2, #32]
	if (next) {
   10680:	b15b      	cbz	r3, 1069a <USBHost::isr()+0x176>
		next->prev_followup = prev;
   10682:	625a      	str	r2, [r3, #36]	; 0x24
				free_Transfer(p);
   10684:	4620      	mov	r0, r4
				Transfer_t *next = p->next_followup;
   10686:	461c      	mov	r4, r3
				free_Transfer(p);
   10688:	f004 fcc8 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
		while (p) {
   1068c:	2c00      	cmp	r4, #0
   1068e:	f47f af64 	bne.w	1055a <USBHost::isr()+0x36>
   10692:	e769      	b.n	10568 <USBHost::isr()+0x44>
		periodic_followup_first = next;
   10694:	603b      	str	r3, [r7, #0]
	if (next) {
   10696:	2b00      	cmp	r3, #0
   10698:	d1f3      	bne.n	10682 <USBHost::isr()+0x15e>
		periodic_followup_last = prev;
   1069a:	f8c8 2000 	str.w	r2, [r8]
   1069e:	e7f1      	b.n	10684 <USBHost::isr()+0x160>
		async_followup_last = prev;
   106a0:	f8c8 2000 	str.w	r2, [r8]
   106a4:	e7d8      	b.n	10658 <USBHost::isr()+0x134>
		async_followup_first = next;
   106a6:	603b      	str	r3, [r7, #0]
   106a8:	e7d4      	b.n	10654 <USBHost::isr()+0x130>
		followup_Error();
   106aa:	f7ff fe8d 	bl	103c8 <USBHost::followup_Error()>
   106ae:	e75e      	b.n	1056e <USBHost::isr()+0x4a>
		} else if (port_state == PORT_STATE_RESET && portstat & USBHS_PORTSC_PE) {
   106b0:	0764      	lsls	r4, r4, #29
   106b2:	f57f af79 	bpl.w	105a8 <USBHost::isr()+0x84>
			port_state = PORT_STATE_RECOVERY;
   106b6:	2003      	movs	r0, #3
			USBHS_GPTIMER0LD = 10000; // microseconds
   106b8:	4923      	ldr	r1, [pc, #140]	; (10748 <USBHost::isr()+0x224>)
			port_state = PORT_STATE_RECOVERY;
   106ba:	7018      	strb	r0, [r3, #0]
			USBHS_GPTIMER0LD = 10000; // microseconds
   106bc:	f242 7010 	movw	r0, #10000	; 0x2710
   106c0:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
			USBHS_GPTIMER0CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
   106c4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
   106c8:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
			if (USBHS_PORTSC1 & USBHS_PORTSC_HSP) {
   106cc:	f8d1 1184 	ldr.w	r1, [r1, #388]	; 0x184
   106d0:	0588      	lsls	r0, r1, #22
   106d2:	d501      	bpl.n	106d8 <USBHost::isr()+0x1b4>
				USBPHY_CTRL_SET = USBPHY_CTRL_ENHOSTDISCONDETECT;
   106d4:	4923      	ldr	r1, [pc, #140]	; (10764 <USBHost::isr()+0x240>)
   106d6:	634a      	str	r2, [r1, #52]	; 0x34
	if (stat & USBHS_USBSTS_TI0) { // timer 0 - used for built-in port events
   106d8:	01f2      	lsls	r2, r6, #7
   106da:	f57f af65 	bpl.w	105a8 <USBHost::isr()+0x84>
			port_state = PORT_STATE_ACTIVE;
   106de:	2004      	movs	r0, #4
			uint32_t speed = (USBHS_PORTSC1 >> 26) & 3;
   106e0:	4919      	ldr	r1, [pc, #100]	; (10748 <USBHost::isr()+0x224>)
			rootdev = new_Device(speed, 0, 0);
   106e2:	2200      	movs	r2, #0
			port_state = PORT_STATE_ACTIVE;
   106e4:	7018      	strb	r0, [r3, #0]
			uint32_t speed = (USBHS_PORTSC1 >> 26) & 3;
   106e6:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
			rootdev = new_Device(speed, 0, 0);
   106ea:	4611      	mov	r1, r2
   106ec:	f3c0 6081 	ubfx	r0, r0, #26, #2
   106f0:	f000 fb7e 	bl	10df0 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)>
   106f4:	4b1c      	ldr	r3, [pc, #112]	; (10768 <USBHost::isr()+0x244>)
   106f6:	6018      	str	r0, [r3, #0]
   106f8:	e756      	b.n	105a8 <USBHost::isr()+0x84>
				port_state = PORT_STATE_DISCONNECTED;
   106fa:	7017      	strb	r7, [r2, #0]
				USBPHY_CTRL_CLR = USBPHY_CTRL_ENHOSTDISCONDETECT;
   106fc:	2202      	movs	r2, #2
   106fe:	4b19      	ldr	r3, [pc, #100]	; (10764 <USBHost::isr()+0x240>)
				disconnect_Device(rootdev);
   10700:	f8df 8064 	ldr.w	r8, [pc, #100]	; 10768 <USBHost::isr()+0x244>
				USBPHY_CTRL_CLR = USBPHY_CTRL_ENHOSTDISCONDETECT;
   10704:	639a      	str	r2, [r3, #56]	; 0x38
				disconnect_Device(rootdev);
   10706:	f8d8 0000 	ldr.w	r0, [r8]
   1070a:	f000 fddb 	bl	112c4 <USBHost::disconnect_Device(Device_struct*)>
				rootdev = NULL;
   1070e:	f8c8 7000 	str.w	r7, [r8]
   10712:	e737      	b.n	10584 <USBHost::isr()+0x60>
			USBHS_PORTSC1 |= USBHS_PORTSC_PR; // begin reset sequence
   10714:	4a0c      	ldr	r2, [pc, #48]	; (10748 <USBHost::isr()+0x224>)
			port_state = PORT_STATE_RESET;
   10716:	2102      	movs	r1, #2
   10718:	7019      	strb	r1, [r3, #0]
			USBHS_PORTSC1 |= USBHS_PORTSC_PR; // begin reset sequence
   1071a:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
   1071e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10722:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
    static void println_(const char *s) {}
   10726:	e73f      	b.n	105a8 <USBHost::isr()+0x84>
   10728:	b106      	cbz	r6, 1072c <USBHost::isr()+0x208>
   1072a:	603d      	str	r5, [r7, #0]
				USBHS_GPTIMER1LD = next->usec - 1;
   1072c:	4b06      	ldr	r3, [pc, #24]	; (10748 <USBHost::isr()+0x224>)
   1072e:	3a01      	subs	r2, #1
				USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
   10730:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
				USBHS_GPTIMER1LD = next->usec - 1;
   10734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				USBHS_GPTIMER1CTL = USBHS_GPTIMERCTL_RST | USBHS_GPTIMERCTL_RUN;
   10738:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
				break;
   1073c:	e758      	b.n	105f0 <USBHost::isr()+0xcc>
   1073e:	2e00      	cmp	r6, #0
   10740:	f43f af56 	beq.w	105f0 <USBHost::isr()+0xcc>
   10744:	e753      	b.n	105ee <USBHost::isr()+0xca>
   10746:	bf00      	nop
   10748:	402e0200 	.word	0x402e0200
   1074c:	2000e850 	.word	0x2000e850
   10750:	2000e858 	.word	0x2000e858
   10754:	2000fc32 	.word	0x2000fc32
   10758:	2000e710 	.word	0x2000e710
   1075c:	0000fc65 	.word	0x0000fc65
   10760:	000186a0 	.word	0x000186a0
   10764:	400da000 	.word	0x400da000
   10768:	2000e860 	.word	0x2000e860
   1076c:	2000e84c 	.word	0x2000e84c
   10770:	2000e854 	.word	0x2000e854

00010774 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)>:
//
bool USBHost::allocate_interrupt_pipe_bandwidth(Pipe_t *pipe, uint32_t maxlen, uint32_t interval)
{
	println("allocate_interrupt_pipe_bandwidth");
	if (interval == 0) interval = 1;
	maxlen = (maxlen * 76459) >> 16; // worst case bit stuffing
   10774:	4b8d      	ldr	r3, [pc, #564]	; (109ac <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x238>)
   10776:	2a01      	cmp	r2, #1
   10778:	fb03 f101 	mul.w	r1, r3, r1
	if (pipe->device->speed == 2) {
   1077c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
   1077e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10782:	b085      	sub	sp, #20
	if (pipe->device->speed == 2) {
   10784:	7d1b      	ldrb	r3, [r3, #20]
	maxlen = (maxlen * 76459) >> 16; // worst case bit stuffing
   10786:	ea4f 4111 	mov.w	r1, r1, lsr #16
{
   1078a:	9002      	str	r0, [sp, #8]
   1078c:	4610      	mov	r0, r2
   1078e:	bf38      	it	cc
   10790:	2001      	movcc	r0, #1
	if (pipe->device->speed == 2) {
   10792:	2b02      	cmp	r3, #2
   10794:	f000 8094 	beq.w	108c0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x14c>
   10798:	2305      	movs	r3, #5
	for (uint32_t pow2num=1; pow2num < maxnum; pow2num <<= 1) {
   1079a:	f04f 0a01 	mov.w	sl, #1
		if (n <= (pow2num | (pow2num >> 1))) return pow2num;
   1079e:	ea4a 025a 	orr.w	r2, sl, sl, lsr #1
   107a2:	4282      	cmp	r2, r0
   107a4:	f080 80e4 	bcs.w	10970 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1fc>
	for (uint32_t pow2num=1; pow2num < maxnum; pow2num <<= 1) {
   107a8:	3b01      	subs	r3, #1
   107aa:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   107ae:	d1f6      	bne.n	1079e <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x2a>
   107b0:	f04f 0a20 	mov.w	sl, #32
	return maxnum;
   107b4:	f8cd a00c 	str.w	sl, [sp, #12]
	} else {
		// full speed 12 Mbit/sec or low speed 1.5 Mbit/sec
		interval = round_to_power_of_two(interval, PERIODIC_LIST_SIZE);
		pipe->periodic_interval = interval;
		uint32_t stime, ctime;
		if (pipe->direction == 0) {
   107b8:	9a02      	ldr	r2, [sp, #8]
		pipe->periodic_interval = interval;
   107ba:	9803      	ldr	r0, [sp, #12]
		if (pipe->direction == 0) {
   107bc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
		pipe->periodic_interval = interval;
   107c0:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
		if (pipe->direction == 0) {
   107c4:	2b00      	cmp	r3, #0
   107c6:	f040 80cf 	bne.w	10968 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1f4>
			// for OUT direction, SSPLIT will carry the data payload
			// TODO: how much time to SSPLIT & CSPLIT actually take?
			// they're not documented in 5.7 or 5.11.3.
			stime = (100 + 32 + maxlen) >> 5;
   107ca:	3184      	adds	r1, #132	; 0x84
			ctime = (55 + 32) >> 5;
   107cc:	2402      	movs	r4, #2
			stime = (100 + 32 + maxlen) >> 5;
   107ce:	094f      	lsrs	r7, r1, #5
		// TODO: even if Multi-TT, do we need to worry about packing
		// too many into the same uframe?
		uint32_t best_shift = 0;
		uint32_t best_offset = 0xFFFFFFFF;
		uint32_t best_bandwidth = 0xFFFFFFFF;
		for (uint32_t offset=0; offset < interval; offset++) {
   107d0:	2300      	movs	r3, #0
		uint32_t best_bandwidth = 0xFFFFFFFF;
   107d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   107d6:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 109b0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x23c>
		uint32_t best_offset = 0xFFFFFFFF;
   107da:	46b0      	mov	r8, r6
		uint32_t best_shift = 0;
   107dc:	4699      	mov	r9, r3
		for (uint32_t offset=0; offset < interval; offset++) {
   107de:	9301      	str	r3, [sp, #4]
					uint32_t bw2 = uframe_bandwidth[n+2] + ctime;
					uint32_t bw3 = uframe_bandwidth[n+3] + ctime;
					uint32_t bw4 = uframe_bandwidth[n+4] + ctime;
					max_bandwidth = max4(bw1, bw2, bw3, bw4);
					// remember the best usage found
					if (max_bandwidth < best_bandwidth) {
   107e0:	f8dd e004 	ldr.w	lr, [sp, #4]
				for (uint32_t j=0; j <= 3; j++) { // max 3 without FSTN
   107e4:	eb0b 02ce 	add.w	r2, fp, lr, lsl #3
   107e8:	2500      	movs	r5, #0
					uint32_t bw1 = uframe_bandwidth[n+0] + stime;
   107ea:	f812 0b01 	ldrb.w	r0, [r2], #1
					uint32_t bw2 = uframe_bandwidth[n+2] + ctime;
   107ee:	7851      	ldrb	r1, [r2, #1]
					uint32_t bw1 = uframe_bandwidth[n+0] + stime;
   107f0:	4438      	add	r0, r7
					uint32_t bw3 = uframe_bandwidth[n+3] + ctime;
   107f2:	f892 c002 	ldrb.w	ip, [r2, #2]
					uint32_t bw2 = uframe_bandwidth[n+2] + ctime;
   107f6:	4421      	add	r1, r4
					uint32_t bw4 = uframe_bandwidth[n+4] + ctime;
   107f8:	78d3      	ldrb	r3, [r2, #3]
					uint32_t bw3 = uframe_bandwidth[n+3] + ctime;
   107fa:	44a4      	add	ip, r4
	if (n1 > n2) {
   107fc:	4288      	cmp	r0, r1
					uint32_t bw4 = uframe_bandwidth[n+4] + ctime;
   107fe:	4423      	add	r3, r4
	if (n1 > n2) {
   10800:	d954      	bls.n	108ac <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x138>
		if (n1 > n3) {
   10802:	4560      	cmp	r0, ip
   10804:	d94e      	bls.n	108a4 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x130>
   10806:	4283      	cmp	r3, r0
   10808:	bf38      	it	cc
   1080a:	4603      	movcc	r3, r0
					if (max_bandwidth < best_bandwidth) {
   1080c:	42b3      	cmp	r3, r6
   1080e:	d202      	bcs.n	10816 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0xa2>
   10810:	46a9      	mov	r9, r5
   10812:	46f0      	mov	r8, lr
   10814:	461e      	mov	r6, r3
				for (uint32_t j=0; j <= 3; j++) { // max 3 without FSTN
   10816:	3501      	adds	r5, #1
   10818:	2d04      	cmp	r5, #4
   1081a:	d1e6      	bne.n	107ea <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x76>
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   1081c:	44d6      	add	lr, sl
   1081e:	f1be 0f1f 	cmp.w	lr, #31
   10822:	d9df      	bls.n	107e4 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x70>
		for (uint32_t offset=0; offset < interval; offset++) {
   10824:	9b01      	ldr	r3, [sp, #4]
   10826:	3301      	adds	r3, #1
   10828:	459a      	cmp	sl, r3
   1082a:	9301      	str	r3, [sp, #4]
   1082c:	d1d8      	bne.n	107e0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x6c>
		//print(best_offset);
		println(", shift= ", best_shift);
		//println(best_shift);
		// a 125 us micro frame can fit 7500 bytes, or 234 of our 32-byte units
		// fail if the best found needs more than 80% (234 * 0.8) in any uframe
		if (best_bandwidth > 187) return false;
   1082e:	2ebb      	cmp	r6, #187	; 0xbb
   10830:	d842      	bhi.n	108b8 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x144>
		// save essential bandwidth specs, for cleanup in delete_Pipe
		pipe->bandwidth_interval = interval;
		pipe->bandwidth_offset = best_offset;
		pipe->bandwidth_shift = best_shift;
		pipe->bandwidth_stime = stime;
   10832:	b2ff      	uxtb	r7, r7
		pipe->bandwidth_ctime = ctime;
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10834:	f1b8 0f1f 	cmp.w	r8, #31
		pipe->bandwidth_ctime = ctime;
   10838:	b2e4      	uxtb	r4, r4
		pipe->bandwidth_offset = best_offset;
   1083a:	fa1f f588 	uxth.w	r5, r8
		pipe->bandwidth_interval = interval;
   1083e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   10842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pipe->bandwidth_shift = best_shift;
   10846:	f8a3 9048 	strh.w	r9, [r3, #72]	; 0x48
		pipe->bandwidth_stime = stime;
   1084a:	f883 704a 	strb.w	r7, [r3, #74]	; 0x4a
		pipe->bandwidth_ctime = ctime;
   1084e:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
		pipe->bandwidth_offset = best_offset;
   10852:	f8a3 5046 	strh.w	r5, [r3, #70]	; 0x46
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10856:	d815      	bhi.n	10884 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x110>
   10858:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
   1085c:	9e01      	ldr	r6, [sp, #4]
   1085e:	445b      	add	r3, fp
   10860:	00f0      	lsls	r0, r6, #3
			uint32_t n = (i << 3) + best_shift;
			uframe_bandwidth[n+0] += stime;
   10862:	7819      	ldrb	r1, [r3, #0]
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10864:	44b0      	add	r8, r6
			uframe_bandwidth[n+2] += ctime;
   10866:	789a      	ldrb	r2, [r3, #2]
			uframe_bandwidth[n+0] += stime;
   10868:	4439      	add	r1, r7
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   1086a:	f1b8 0f1f 	cmp.w	r8, #31
			uframe_bandwidth[n+2] += ctime;
   1086e:	4422      	add	r2, r4
			uframe_bandwidth[n+0] += stime;
   10870:	7019      	strb	r1, [r3, #0]
			uframe_bandwidth[n+2] += ctime;
   10872:	709a      	strb	r2, [r3, #2]
			uframe_bandwidth[n+3] += ctime;
   10874:	78d9      	ldrb	r1, [r3, #3]
			uframe_bandwidth[n+4] += ctime;
   10876:	791a      	ldrb	r2, [r3, #4]
			uframe_bandwidth[n+3] += ctime;
   10878:	4421      	add	r1, r4
			uframe_bandwidth[n+4] += ctime;
   1087a:	4422      	add	r2, r4
			uframe_bandwidth[n+3] += ctime;
   1087c:	70d9      	strb	r1, [r3, #3]
			uframe_bandwidth[n+4] += ctime;
   1087e:	711a      	strb	r2, [r3, #4]
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10880:	4403      	add	r3, r0
   10882:	d9ee      	bls.n	10862 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0xee>
		}
		pipe->start_mask = 0x01 << best_shift;
   10884:	2001      	movs	r0, #1
		pipe->complete_mask = 0x1C << best_shift;
   10886:	231c      	movs	r3, #28
		pipe->periodic_offset = best_offset;
   10888:	9902      	ldr	r1, [sp, #8]
		pipe->start_mask = 0x01 << best_shift;
   1088a:	fa00 f209 	lsl.w	r2, r0, r9
		pipe->complete_mask = 0x1C << best_shift;
   1088e:	fa03 f309 	lsl.w	r3, r3, r9
		pipe->periodic_offset = best_offset;
   10892:	f8a1 5042 	strh.w	r5, [r1, #66]	; 0x42
		pipe->start_mask = 0x01 << best_shift;
   10896:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
		pipe->complete_mask = 0x1C << best_shift;
   1089a:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
	}
	return true;
}
   1089e:	b005      	add	sp, #20
   108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108a4:	4563      	cmp	r3, ip
   108a6:	bf38      	it	cc
   108a8:	4663      	movcc	r3, ip
   108aa:	e7af      	b.n	1080c <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x98>
		if (n2 > n3) {
   108ac:	4561      	cmp	r1, ip
   108ae:	d9f9      	bls.n	108a4 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x130>
   108b0:	428b      	cmp	r3, r1
   108b2:	bf38      	it	cc
   108b4:	460b      	movcc	r3, r1
   108b6:	e7a9      	b.n	1080c <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x98>
		if (best_bandwidth > 187) return false;
   108b8:	2000      	movs	r0, #0
}
   108ba:	b005      	add	sp, #20
   108bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		interval = 1 << (interval - 1);
   108c0:	280f      	cmp	r0, #15
   108c2:	4603      	mov	r3, r0
   108c4:	f04f 0c01 	mov.w	ip, #1
		uint32_t stime = (55 + 32 + maxlen) >> 5; // time units: 32 bytes or 533 ns
   108c8:	f101 0157 	add.w	r1, r1, #87	; 0x57
		interval = 1 << (interval - 1);
   108cc:	bf28      	it	cs
   108ce:	230f      	movcs	r3, #15
		uint32_t best_bandwidth = 0xFFFFFFFF;
   108d0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
		uint32_t stime = (55 + 32 + maxlen) >> 5; // time units: 32 bytes or 533 ns
   108d4:	094c      	lsrs	r4, r1, #5
		for (uint32_t offset=0; offset < interval; offset++) {
   108d6:	2600      	movs	r6, #0
		interval = 1 << (interval - 1);
   108d8:	3b01      	subs	r3, #1
		pipe->periodic_interval = (pinterval > 0) ? pinterval : 1;
   108da:	9902      	ldr	r1, [sp, #8]
   108dc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 109b0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x23c>
		uint32_t best_offset = 0xFFFFFFFF;
   108e0:	4677      	mov	r7, lr
		interval = 1 << (interval - 1);
   108e2:	fa0c fc03 	lsl.w	ip, ip, r3
		if (interval > PERIODIC_LIST_SIZE*8) interval = PERIODIC_LIST_SIZE*8;
   108e6:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
   108ea:	4665      	mov	r5, ip
   108ec:	bf28      	it	cs
   108ee:	f44f 7580 	movcs.w	r5, #256	; 0x100
		uint32_t pinterval = interval >> 3;
   108f2:	08eb      	lsrs	r3, r5, #3
		pipe->periodic_interval = (pinterval > 0) ? pinterval : 1;
   108f4:	2b01      	cmp	r3, #1
   108f6:	bf38      	it	cc
   108f8:	2301      	movcc	r3, #1
   108fa:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
{
   108fe:	4633      	mov	r3, r6
			uint32_t max_bandwidth = 0;
   10900:	2000      	movs	r0, #0
				uint32_t bandwidth = uframe_bandwidth[i] + stime;
   10902:	f81b 1003 	ldrb.w	r1, [fp, r3]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10906:	442b      	add	r3, r5
				uint32_t bandwidth = uframe_bandwidth[i] + stime;
   10908:	4421      	add	r1, r4
   1090a:	4288      	cmp	r0, r1
   1090c:	bf38      	it	cc
   1090e:	4608      	movcc	r0, r1
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10910:	2bff      	cmp	r3, #255	; 0xff
   10912:	d9f6      	bls.n	10902 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x18e>
			if (max_bandwidth < best_bandwidth) {
   10914:	4570      	cmp	r0, lr
   10916:	d201      	bcs.n	1091c <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1a8>
   10918:	4686      	mov	lr, r0
   1091a:	4637      	mov	r7, r6
		for (uint32_t offset=0; offset < interval; offset++) {
   1091c:	3601      	adds	r6, #1
   1091e:	42b5      	cmp	r5, r6
   10920:	d1ed      	bne.n	108fe <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x18a>
		if (best_bandwidth > 187) return false;
   10922:	f1be 0fbb 	cmp.w	lr, #187	; 0xbb
   10926:	d8c7      	bhi.n	108b8 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x144>
		pipe->bandwidth_interval = interval;
   10928:	9b02      	ldr	r3, [sp, #8]
		pipe->bandwidth_stime = stime;
   1092a:	b2e4      	uxtb	r4, r4
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   1092c:	2fff      	cmp	r7, #255	; 0xff
		pipe->bandwidth_interval = interval;
   1092e:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
		pipe->bandwidth_offset = best_offset;
   10932:	f8a3 7046 	strh.w	r7, [r3, #70]	; 0x46
		pipe->bandwidth_stime = stime;
   10936:	f883 404a 	strb.w	r4, [r3, #74]	; 0x4a
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   1093a:	d808      	bhi.n	1094e <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1da>
   1093c:	463b      	mov	r3, r7
			uframe_bandwidth[i] += stime;
   1093e:	f81b 1003 	ldrb.w	r1, [fp, r3]
   10942:	4421      	add	r1, r4
   10944:	f80b 1003 	strb.w	r1, [fp, r3]
		for (uint32_t i=best_offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10948:	442b      	add	r3, r5
   1094a:	2bff      	cmp	r3, #255	; 0xff
   1094c:	d9f7      	bls.n	1093e <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x1ca>
		if (interval == 1) {
   1094e:	2a01      	cmp	r2, #1
   10950:	d912      	bls.n	10978 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x204>
		} else if (interval == 2) {
   10952:	2a02      	cmp	r2, #2
   10954:	d01e      	beq.n	10994 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x220>
		} else if (interval <= 4) {
   10956:	f1bc 0f04 	cmp.w	ip, #4
   1095a:	dc21      	bgt.n	109a0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x22c>
			pipe->start_mask = 0x11 << (best_offset & 3);
   1095c:	f007 0203 	and.w	r2, r7, #3
   10960:	2311      	movs	r3, #17
   10962:	4093      	lsls	r3, r2
   10964:	b2db      	uxtb	r3, r3
   10966:	e008      	b.n	1097a <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x206>
			ctime = (70 + 32 + maxlen) >> 5;
   10968:	3166      	adds	r1, #102	; 0x66
			stime = (40 + 32) >> 5;
   1096a:	2702      	movs	r7, #2
			ctime = (70 + 32 + maxlen) >> 5;
   1096c:	094c      	lsrs	r4, r1, #5
   1096e:	e72f      	b.n	107d0 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x5c>
		pipe->periodic_interval = interval;
   10970:	fa1f f38a 	uxth.w	r3, sl
   10974:	9303      	str	r3, [sp, #12]
   10976:	e71f      	b.n	107b8 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x44>
   10978:	23ff      	movs	r3, #255	; 0xff
			pipe->start_mask = 0xFF;
   1097a:	9902      	ldr	r1, [sp, #8]
		pipe->periodic_offset = best_offset >> 3;
   1097c:	08ff      	lsrs	r7, r7, #3
		pipe->complete_mask = 0;
   1097e:	2200      	movs	r2, #0
	return true;
   10980:	2001      	movs	r0, #1
			pipe->start_mask = 0xFF;
   10982:	f881 3036 	strb.w	r3, [r1, #54]	; 0x36
		pipe->periodic_offset = best_offset >> 3;
   10986:	f8a1 7042 	strh.w	r7, [r1, #66]	; 0x42
		pipe->complete_mask = 0;
   1098a:	f881 2037 	strb.w	r2, [r1, #55]	; 0x37
}
   1098e:	b005      	add	sp, #20
   10990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pipe->start_mask = 0x55 << (best_offset & 1);
   10994:	f007 0201 	and.w	r2, r7, #1
   10998:	2355      	movs	r3, #85	; 0x55
   1099a:	4093      	lsls	r3, r2
   1099c:	b2db      	uxtb	r3, r3
   1099e:	e7ec      	b.n	1097a <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x206>
			pipe->start_mask = 0x01 << (best_offset & 7);
   109a0:	f007 0207 	and.w	r2, r7, #7
   109a4:	2301      	movs	r3, #1
   109a6:	4093      	lsls	r3, r2
   109a8:	b2db      	uxtb	r3, r3
   109aa:	e7e6      	b.n	1097a <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)+0x206>
   109ac:	00012aab 	.word	0x00012aab
   109b0:	2000e744 	.word	0x2000e744

000109b4 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)>:
	pipe->qh.horizontal_link = periodictable[0];
	periodictable[0] = (uint32_t)&(pipe->qh) | 2; // 2=QH
	println("init periodictable with ", periodictable[0], HEX);
#else
	uint32_t interval = pipe->periodic_interval;
	uint32_t offset = pipe->periodic_offset;
   109b4:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
	uint32_t interval = pipe->periodic_interval;
   109b8:	f8b0 c040 	ldrh.w	ip, [r0, #64]	; 0x40
	//println("  interval = ", interval);
	//println("  offset =   ", offset);

	// By an interative miracle, hopefully make an inverted tree of EHCI figure 4-18, page 93
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   109bc:	291f      	cmp	r1, #31
   109be:	d834      	bhi.n	10a2a <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x76>
{
   109c0:	b530      	push	{r4, r5, lr}
   109c2:	4c1a      	ldr	r4, [pc, #104]	; (10a2c <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x78>)
		uint32_t num = periodictable[i];
		Pipe_t *node = (Pipe_t *)(num & 0xFFFFFFE0);
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
			//println("  add to slot ", i);
			pipe->qh.horizontal_link = num;
			periodictable[i] = (uint32_t)&(pipe->qh) | 2; // 2=QH
   109c4:	f040 0502 	orr.w	r5, r0, #2
   109c8:	e009      	b.n	109de <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x2a>
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
   109ca:	f8b3 e040 	ldrh.w	lr, [r3, #64]	; 0x40
   109ce:	45e6      	cmp	lr, ip
   109d0:	d211      	bcs.n	109f6 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x42>
			pipe->qh.horizontal_link = num;
   109d2:	6002      	str	r2, [r0, #0]
			periodictable[i] = (uint32_t)&(pipe->qh) | 2; // 2=QH
   109d4:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   109d8:	4461      	add	r1, ip
   109da:	291f      	cmp	r1, #31
   109dc:	d824      	bhi.n	10a28 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x74>
		uint32_t num = periodictable[i];
   109de:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
   109e2:	07d3      	lsls	r3, r2, #31
   109e4:	d4f5      	bmi.n	109d2 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x1e>
   109e6:	f002 0e06 	and.w	lr, r2, #6
		Pipe_t *node = (Pipe_t *)(num & 0xFFFFFFE0);
   109ea:	f022 031f 	bic.w	r3, r2, #31
		if ((num & 1) || ((num & 6) == 2 && node->periodic_interval < interval)) {
   109ee:	f1be 0f02 	cmp.w	lr, #2
   109f2:	d0ea      	beq.n	109ca <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x16>
   109f4:	e007      	b.n	10a06 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x52>
		} else {
			//println("  traverse list ", i);
			// TODO: skip past iTD, siTD when/if we support isochronous
			while (node->periodic_interval >= interval) {
				if (node == pipe) goto nextslot;
   109f6:	4298      	cmp	r0, r3
   109f8:	d0ee      	beq.n	109d8 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x24>
				//print("  num ", num, HEX);
				//print("  node ", (uint32_t)node, HEX);
				//println("->", node->qh.horizontal_link, HEX);
				if (node->qh.horizontal_link & 1) break;
   109fa:	681a      	ldr	r2, [r3, #0]
   109fc:	07d2      	lsls	r2, r2, #31
   109fe:	d406      	bmi.n	10a0e <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x5a>
				num = node->qh.horizontal_link;
   10a00:	681b      	ldr	r3, [r3, #0]
				node = (Pipe_t *)(num & 0xFFFFFFE0);
   10a02:	f023 031f 	bic.w	r3, r3, #31
			while (node->periodic_interval >= interval) {
   10a06:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   10a0a:	4562      	cmp	r2, ip
   10a0c:	d2f3      	bcs.n	109f6 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x42>
{
   10a0e:	461a      	mov	r2, r3
			}
			Pipe_t *n = node;
			do {
				if (n == pipe) goto nextslot;
   10a10:	4282      	cmp	r2, r0
   10a12:	d0e1      	beq.n	109d8 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x24>
				n = (Pipe_t *)(n->qh.horizontal_link & 0xFFFFFFE0);
   10a14:	6812      	ldr	r2, [r2, #0]
			} while (n != NULL);
   10a16:	f032 021f 	bics.w	r2, r2, #31
   10a1a:	d1f9      	bne.n	10a10 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x5c>
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10a1c:	4461      	add	r1, ip
			//print("  adding at node ", (uint32_t)node, HEX);
			//print(", num=", num, HEX);
			//println(", node->qh.horizontal_link=", node->qh.horizontal_link, HEX);
			pipe->qh.horizontal_link = node->qh.horizontal_link;
   10a1e:	681a      	ldr	r2, [r3, #0]
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10a20:	291f      	cmp	r1, #31
			pipe->qh.horizontal_link = node->qh.horizontal_link;
   10a22:	6002      	str	r2, [r0, #0]
			node->qh.horizontal_link = (uint32_t)pipe | 2; // 2=QH
   10a24:	601d      	str	r5, [r3, #0]
	for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10a26:	d9da      	bls.n	109de <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)+0x2a>
		print(i);
		print(": ");
		print_qh_list((Pipe_t *)(periodictable[i] & 0xFFFFFFE0));
	}
#endif
}
   10a28:	bd30      	pop	{r4, r5, pc}
   10a2a:	4770      	bx	lr
   10a2c:	2000b000 	.word	0x2000b000

00010a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>:
{
   10a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a34:	4605      	mov	r5, r0
   10a36:	460e      	mov	r6, r1
   10a38:	4614      	mov	r4, r2
   10a3a:	4699      	mov	r9, r3
	pipe = allocate_Pipe();
   10a3c:	f004 fad6 	bl	14fec <USBHost::allocate_Pipe()>
	if (!pipe) return NULL;
   10a40:	4607      	mov	r7, r0
   10a42:	2800      	cmp	r0, #0
   10a44:	d065      	beq.n	10b12 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
	halt = allocate_Transfer();
   10a46:	f004 fae1 	bl	1500c <USBHost::allocate_Transfer()>
	if (!halt) {
   10a4a:	4680      	mov	r8, r0
   10a4c:	2800      	cmp	r0, #0
   10a4e:	f000 8086 	beq.w	10b5e <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x12e>
	memset(pipe, 0, sizeof(Pipe_t));
   10a52:	2260      	movs	r2, #96	; 0x60
   10a54:	2100      	movs	r1, #0
   10a56:	4638      	mov	r0, r7
   10a58:	f00b f87e 	bl	1bb58 <memset>
	memset(halt, 0, sizeof(Transfer_t));
   10a5c:	223c      	movs	r2, #60	; 0x3c
   10a5e:	2100      	movs	r1, #0
   10a60:	f108 0004 	add.w	r0, r8, #4
   10a64:	f00b f878 	bl	1bb58 <memset>
	halt->qtd.next = 1;
   10a68:	2201      	movs	r2, #1
	halt->qtd.token = 0x40;
   10a6a:	2340      	movs	r3, #64	; 0x40
	if (type == 3) {
   10a6c:	2e03      	cmp	r6, #3
	halt->qtd.next = 1;
   10a6e:	f8c8 2000 	str.w	r2, [r8]
	halt->qtd.token = 0x40;
   10a72:	f8c8 3008 	str.w	r3, [r8, #8]
	pipe->qh.next = (uint32_t)halt;
   10a76:	f8c7 8010 	str.w	r8, [r7, #16]
	pipe->direction = direction;
   10a7a:	f887 9035 	strb.w	r9, [r7, #53]	; 0x35
	pipe->qh.alt_next = 1;
   10a7e:	617a      	str	r2, [r7, #20]
	pipe->device = dev;
   10a80:	633d      	str	r5, [r7, #48]	; 0x30
	pipe->type = type;
   10a82:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
	if (type == 3) {
   10a86:	d058      	beq.n	10b3a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x10a>
	if (endpoint > 0) {
   10a88:	b13c      	cbz	r4, 10a9a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x6a>
		Pipe_t *p = dev->data_pipes;
   10a8a:	686b      	ldr	r3, [r5, #4]
		if (p == NULL) {
   10a8c:	2b00      	cmp	r3, #0
   10a8e:	d061      	beq.n	10b54 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x124>
			while (p->next) p = p->next;
   10a90:	461a      	mov	r2, r3
   10a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10a94:	2b00      	cmp	r3, #0
   10a96:	d1fb      	bne.n	10a90 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x60>
			p->next = pipe;
   10a98:	6397      	str	r7, [r2, #56]	; 0x38
		if (dev->speed < 2) c = 1;
   10a9a:	7d29      	ldrb	r1, [r5, #20]
	if (type == 0) {
   10a9c:	2e00      	cmp	r6, #0
   10a9e:	d13b      	bne.n	10b18 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe8>
		if (dev->speed < 2) c = 1;
   10aa0:	2901      	cmp	r1, #1
   10aa2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   10aa6:	bf8c      	ite	hi
   10aa8:	2200      	movhi	r2, #0
   10aaa:	2201      	movls	r2, #1
	return ( (nak_count_reload << 28) | (control_endpoint_flag << 27) |
   10aac:	06d2      	lsls	r2, r2, #27
		(data_toggle_control << 14) | (speed << 12) | (endpoint_number << 8) |
   10aae:	0223      	lsls	r3, r4, #8
		(inactivate << 7) | (address << 0) );
   10ab0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   10ab4:	9908      	ldr	r1, [sp, #32]
   10ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	pipe->qh.capabilities[0] = QH_capabilities1(15, c, maxlen, 0,
   10aba:	7d69      	ldrb	r1, [r5, #21]
		(inactivate << 7) | (address << 0) );
   10abc:	430b      	orrs	r3, r1
   10abe:	4313      	orrs	r3, r2
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   10ac0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
		(inactivate << 7) | (address << 0) );
   10ac4:	4303      	orrs	r3, r0
   10ac6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
	pipe->qh.capabilities[0] = QH_capabilities1(15, c, maxlen, 0,
   10aca:	607b      	str	r3, [r7, #4]
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   10acc:	7dab      	ldrb	r3, [r5, #22]
   10ace:	7de9      	ldrb	r1, [r5, #23]
        return ( (high_bw_mult << 30) | (hub_port_number << 23) | (hub_address << 16) |
   10ad0:	041b      	lsls	r3, r3, #16
		(split_completion_mask << 8) | (interrupt_schedule_mask << 0) );
   10ad2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   10ad6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   10ada:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
		(split_completion_mask << 8) | (interrupt_schedule_mask << 0) );
   10ade:	4313      	orrs	r3, r2
   10ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
	pipe->qh.capabilities[1] = QH_capabilities2(1, dev->hub_port,
   10ae4:	60bb      	str	r3, [r7, #8]
	if (type == 0 || type == 2) {
   10ae6:	f036 0302 	bics.w	r3, r6, #2
   10aea:	d118      	bne.n	10b1e <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xee>
		Pipe_t *list = (Pipe_t *)USBHS_ASYNCLISTADDR;
   10aec:	4b22      	ldr	r3, [pc, #136]	; (10b78 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x148>)
   10aee:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (list == NULL) {
   10af2:	b9d2      	cbnz	r2, 10b2a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xfa>
			pipe->qh.capabilities[0] |= 0x8000; // H bit
   10af4:	6879      	ldr	r1, [r7, #4]
			pipe->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2; // 2=QH
   10af6:	f047 0202 	orr.w	r2, r7, #2
			pipe->qh.capabilities[0] |= 0x8000; // H bit
   10afa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   10afe:	6079      	str	r1, [r7, #4]
			pipe->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2; // 2=QH
   10b00:	603a      	str	r2, [r7, #0]
			USBHS_ASYNCLISTADDR = (uint32_t)&(pipe->qh);
   10b02:	f8c3 7158 	str.w	r7, [r3, #344]	; 0x158
			USBHS_USBCMD |= USBHS_USBCMD_ASE; // enable async schedule
   10b06:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   10b0a:	f042 0220 	orr.w	r2, r2, #32
   10b0e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   10b12:	4638      	mov	r0, r7
   10b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (dev->speed < 2) c = 1;
   10b18:	2000      	movs	r0, #0
   10b1a:	4602      	mov	r2, r0
   10b1c:	e7c7      	b.n	10aae <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x7e>
	} else if (type == 3) {
   10b1e:	2e03      	cmp	r6, #3
   10b20:	d1f7      	bne.n	10b12 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
		add_qh_to_periodic_schedule(pipe);
   10b22:	4638      	mov	r0, r7
   10b24:	f7ff ff46 	bl	109b4 <USBHost::add_qh_to_periodic_schedule(Pipe_struct*)>
   10b28:	e7f3      	b.n	10b12 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
			pipe->qh.horizontal_link = list->qh.horizontal_link;
   10b2a:	6811      	ldr	r1, [r2, #0]
			list->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2;
   10b2c:	f047 0302 	orr.w	r3, r7, #2
}
   10b30:	4638      	mov	r0, r7
			pipe->qh.horizontal_link = list->qh.horizontal_link;
   10b32:	6039      	str	r1, [r7, #0]
			list->qh.horizontal_link = (uint32_t)&(pipe->qh) | 2;
   10b34:	6013      	str	r3, [r2, #0]
}
   10b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!allocate_interrupt_pipe_bandwidth(pipe, maxlen, interval)) {
   10b3a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10b3e:	4638      	mov	r0, r7
   10b40:	f7ff fe18 	bl	10774 <USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)>
   10b44:	4681      	mov	r9, r0
   10b46:	b178      	cbz	r0, 10b68 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x138>
	if (endpoint > 0) {
   10b48:	2c00      	cmp	r4, #0
   10b4a:	d19e      	bne.n	10a8a <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x5a>
		dtc, dev->speed, endpoint, 0, dev->address);
   10b4c:	7d29      	ldrb	r1, [r5, #20]
   10b4e:	4620      	mov	r0, r4
   10b50:	4622      	mov	r2, r4
   10b52:	e7ac      	b.n	10aae <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x7e>
		if (dev->speed < 2) c = 1;
   10b54:	7d29      	ldrb	r1, [r5, #20]
			dev->data_pipes = pipe;
   10b56:	606f      	str	r7, [r5, #4]
	if (type == 0) {
   10b58:	2e00      	cmp	r6, #0
   10b5a:	d0a1      	beq.n	10aa0 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x70>
   10b5c:	e7dc      	b.n	10b18 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe8>
		free_Pipe(pipe);
   10b5e:	4638      	mov	r0, r7
		return NULL;
   10b60:	4647      	mov	r7, r8
		free_Pipe(pipe);
   10b62:	f004 fa4b 	bl	14ffc <USBHost::free_Pipe(Pipe_struct*)>
		return NULL;
   10b66:	e7d4      	b.n	10b12 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
			free_Transfer(halt);
   10b68:	4640      	mov	r0, r8
   10b6a:	f004 fa57 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
			free_Pipe(pipe);
   10b6e:	4638      	mov	r0, r7
   10b70:	f004 fa44 	bl	14ffc <USBHost::free_Pipe(Pipe_struct*)>
			return NULL;
   10b74:	464f      	mov	r7, r9
   10b76:	e7cc      	b.n	10b12 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe2>
   10b78:	402e0200 	.word	0x402e0200

00010b7c <USBHost::delete_Pipe(Pipe_struct*)>:


void USBHost::delete_Pipe(Pipe_t *pipe)
{
   10b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// _never_ become inactive (if the endpoint NAKs indefinitely).  For
	// another, the procedure given in the spec (deactivate the qTDs on the
	// queue) is racy, since the controller can perform a new overlay or
	// writeback at any time.

	bool isasync = (pipe->type == 0 || pipe->type == 2);
   10b7e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
   10b82:	4604      	mov	r4, r0
	if (isasync) {
   10b84:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   10b88:	d13b      	bne.n	10c02 <USBHost::delete_Pipe(Pipe_struct*)+0x86>
		// find the next QH in the async schedule loop
		Pipe_t *next = (Pipe_t *)(pipe->qh.horizontal_link & 0xFFFFFFE0);
   10b8a:	6803      	ldr	r3, [r0, #0]
   10b8c:	f023 031f 	bic.w	r3, r3, #31
		if (next == pipe) {
   10b90:	4298      	cmp	r0, r3
   10b92:	f000 80cb 	beq.w	10d2c <USBHost::delete_Pipe(Pipe_struct*)+0x1b0>
		} else {
			// find the previous QH in the async schedule loop
			println("  remove QH from async schedule");
			Pipe_t *prev = next;
			while (1) {
				Pipe_t *n = (Pipe_t *)(prev->qh.horizontal_link & 0xFFFFFFE0);
   10b96:	681a      	ldr	r2, [r3, #0]
   10b98:	4619      	mov	r1, r3
   10b9a:	f022 031f 	bic.w	r3, r2, #31
				if (n == pipe) break;
   10b9e:	429c      	cmp	r4, r3
   10ba0:	d1f9      	bne.n	10b96 <USBHost::delete_Pipe(Pipe_struct*)+0x1a>
				prev = n;
			}
			// if removing the one with H bit, set another
			if (pipe->qh.capabilities[0] & 0x8000) {
   10ba2:	6863      	ldr	r3, [r4, #4]
   10ba4:	041d      	lsls	r5, r3, #16
   10ba6:	f100 80ac 	bmi.w	10d02 <USBHost::delete_Pipe(Pipe_struct*)+0x186>
				prev->qh.capabilities[0] |= 0x8000; // set H bit
			}
			// link the previous QH, we're no longer in the loop
			prev->qh.horizontal_link = pipe->qh.horizontal_link;
   10baa:	6823      	ldr	r3, [r4, #0]
			// do the Async Advance Doorbell handshake to wait to be
			// sure the EHCI no longer references the removed QH
			USBHS_USBCMD |= USBHS_USBCMD_IAA;
   10bac:	4a73      	ldr	r2, [pc, #460]	; (10d7c <USBHost::delete_Pipe(Pipe_struct*)+0x200>)
			prev->qh.horizontal_link = pipe->qh.horizontal_link;
   10bae:	600b      	str	r3, [r1, #0]
			USBHS_USBCMD |= USBHS_USBCMD_IAA;
   10bb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   10bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10bb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
			while (!(USBHS_USBSTS & USBHS_USBSTS_AAI)) ; // busy loop wait
   10bbc:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   10bc0:	0698      	lsls	r0, r3, #26
   10bc2:	d5fb      	bpl.n	10bbc <USBHost::delete_Pipe(Pipe_struct*)+0x40>
			USBHS_USBSTS = USBHS_USBSTS_AAI;
   10bc4:	2320      	movs	r3, #32
   10bc6:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
			// TODO: does this write interfere UPI & UAI (bits 18 & 19) ??
		}
		// find & free all the transfers which completed
		println("  Free transfers");
		Transfer_t *t = async_followup_first;
   10bca:	4e6d      	ldr	r6, [pc, #436]	; (10d80 <USBHost::delete_Pipe(Pipe_struct*)+0x204>)
   10bcc:	6835      	ldr	r5, [r6, #0]
		while (t) {
   10bce:	b13d      	cbz	r5, 10be0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
		async_followup_last = prev;
   10bd0:	4f6c      	ldr	r7, [pc, #432]	; (10d84 <USBHost::delete_Pipe(Pipe_struct*)+0x208>)
			print("    * ", (uint32_t)t);
			Transfer_t *next = t->next_followup;
   10bd2:	4628      	mov	r0, r5
   10bd4:	6a2d      	ldr	r5, [r5, #32]
			if (t->pipe == pipe) {
   10bd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10bd8:	42a3      	cmp	r3, r4
   10bda:	d07f      	beq.n	10cdc <USBHost::delete_Pipe(Pipe_struct*)+0x160>
		while (t) {
   10bdc:	2d00      	cmp	r5, #0
   10bde:	d1f8      	bne.n	10bd2 <USBHost::delete_Pipe(Pipe_struct*)+0x56>
	//
	// TODO: do we need to look at pipe->qh.current ??
	//
	// free all the transfers still attached to the QH
	println("  Free transfers attached to QH");
	Transfer_t *tr = (Transfer_t *)(pipe->qh.next);
   10be0:	6925      	ldr	r5, [r4, #16]
	while ((uint32_t)tr & 0xFFFFFFE0) {
   10be2:	f035 031f 	bics.w	r3, r5, #31
   10be6:	d007      	beq.n	10bf8 <USBHost::delete_Pipe(Pipe_struct*)+0x7c>
		println("    * ", (uint32_t)tr);
		Transfer_t *next = (Transfer_t *)(tr->qtd.next);
   10be8:	682b      	ldr	r3, [r5, #0]
   10bea:	4628      	mov	r0, r5
   10bec:	461d      	mov	r5, r3
		free_Transfer(tr);
   10bee:	f004 fa15 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
	while ((uint32_t)tr & 0xFFFFFFE0) {
   10bf2:	f035 031f 	bics.w	r3, r5, #31
   10bf6:	d1f7      	bne.n	10be8 <USBHost::delete_Pipe(Pipe_struct*)+0x6c>
		tr = next;
	}
	// hopefully we found everything...
	free_Pipe(pipe);
   10bf8:	4620      	mov	r0, r4
	println("* Delete Pipe completed");
}
   10bfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_Pipe(pipe);
   10bfe:	f004 b9fd 	b.w	14ffc <USBHost::free_Pipe(Pipe_struct*)>
   10c02:	4861      	ldr	r0, [pc, #388]	; (10d88 <USBHost::delete_Pipe(Pipe_struct*)+0x20c>)
   10c04:	f100 0580 	add.w	r5, r0, #128	; 0x80
			uint32_t num = periodictable[i];
   10c08:	f850 2f04 	ldr.w	r2, [r0, #4]!
			if (num & 1) continue;
   10c0c:	07d1      	lsls	r1, r2, #31
   10c0e:	d40c      	bmi.n	10c2a <USBHost::delete_Pipe(Pipe_struct*)+0xae>
			Pipe_t *node = (Pipe_t *)(num & 0xFFFFFFE0);
   10c10:	f022 021f 	bic.w	r2, r2, #31
			if (node == pipe) {
   10c14:	4294      	cmp	r4, r2
   10c16:	d103      	bne.n	10c20 <USBHost::delete_Pipe(Pipe_struct*)+0xa4>
   10c18:	e056      	b.n	10cc8 <USBHost::delete_Pipe(Pipe_struct*)+0x14c>
				if (node == pipe) {
   10c1a:	428c      	cmp	r4, r1
   10c1c:	d059      	beq.n	10cd2 <USBHost::delete_Pipe(Pipe_struct*)+0x156>
   10c1e:	460a      	mov	r2, r1
				num = node->qh.horizontal_link;
   10c20:	6813      	ldr	r3, [r2, #0]
				node = (Pipe_t *)(num & 0xFFFFFFE0);
   10c22:	f023 011f 	bic.w	r1, r3, #31
				if (num & 1) break;
   10c26:	07db      	lsls	r3, r3, #31
   10c28:	d5f7      	bpl.n	10c1a <USBHost::delete_Pipe(Pipe_struct*)+0x9e>
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10c2a:	42a8      	cmp	r0, r5
   10c2c:	d1ec      	bne.n	10c08 <USBHost::delete_Pipe(Pipe_struct*)+0x8c>
		if (pipe->device->speed == 2) {
   10c2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10c30:	7d1b      	ldrb	r3, [r3, #20]
   10c32:	2b02      	cmp	r3, #2
   10c34:	d06a      	beq.n	10d0c <USBHost::delete_Pipe(Pipe_struct*)+0x190>
			uint32_t offset = pipe->bandwidth_offset;
   10c36:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
			uint32_t interval = pipe->bandwidth_interval;
   10c3a:	f8b4 e044 	ldrh.w	lr, [r4, #68]	; 0x44
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10c3e:	2d1f      	cmp	r5, #31
			uint32_t shift = pipe->bandwidth_shift;
   10c40:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
			uint32_t stime = pipe->bandwidth_stime;
   10c44:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
			uint32_t ctime = pipe->bandwidth_ctime;
   10c48:	f894 c04b 	ldrb.w	ip, [r4, #75]	; 0x4b
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10c4c:	d818      	bhi.n	10c80 <USBHost::delete_Pipe(Pipe_struct*)+0x104>
   10c4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   10c52:	4a4e      	ldr	r2, [pc, #312]	; (10d8c <USBHost::delete_Pipe(Pipe_struct*)+0x210>)
   10c54:	ea4f 07ce 	mov.w	r7, lr, lsl #3
   10c58:	4413      	add	r3, r2
				uframe_bandwidth[n+2] -= ctime;
   10c5a:	789a      	ldrb	r2, [r3, #2]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10c5c:	4475      	add	r5, lr
				uframe_bandwidth[n+0] -= stime;
   10c5e:	7818      	ldrb	r0, [r3, #0]
				uframe_bandwidth[n+2] -= ctime;
   10c60:	eba2 020c 	sub.w	r2, r2, ip
				uframe_bandwidth[n+3] -= ctime;
   10c64:	78d9      	ldrb	r1, [r3, #3]
				uframe_bandwidth[n+0] -= stime;
   10c66:	1b80      	subs	r0, r0, r6
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10c68:	2d1f      	cmp	r5, #31
				uframe_bandwidth[n+2] -= ctime;
   10c6a:	709a      	strb	r2, [r3, #2]
				uframe_bandwidth[n+3] -= ctime;
   10c6c:	eba1 010c 	sub.w	r1, r1, ip
				uframe_bandwidth[n+4] -= ctime;
   10c70:	791a      	ldrb	r2, [r3, #4]
				uframe_bandwidth[n+0] -= stime;
   10c72:	7018      	strb	r0, [r3, #0]
				uframe_bandwidth[n+4] -= ctime;
   10c74:	eba2 020c 	sub.w	r2, r2, ip
				uframe_bandwidth[n+3] -= ctime;
   10c78:	70d9      	strb	r1, [r3, #3]
				uframe_bandwidth[n+4] -= ctime;
   10c7a:	711a      	strb	r2, [r3, #4]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE; i += interval) {
   10c7c:	443b      	add	r3, r7
   10c7e:	d9ec      	bls.n	10c5a <USBHost::delete_Pipe(Pipe_struct*)+0xde>
		Transfer_t *t = periodic_followup_first;
   10c80:	4e43      	ldr	r6, [pc, #268]	; (10d90 <USBHost::delete_Pipe(Pipe_struct*)+0x214>)
   10c82:	6835      	ldr	r5, [r6, #0]
		while (t) {
   10c84:	2d00      	cmp	r5, #0
   10c86:	d0ab      	beq.n	10be0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
   10c88:	4628      	mov	r0, r5
		periodic_followup_last = prev;
   10c8a:	4f42      	ldr	r7, [pc, #264]	; (10d94 <USBHost::delete_Pipe(Pipe_struct*)+0x218>)
			Transfer_t *next = t->next_followup;
   10c8c:	6a2d      	ldr	r5, [r5, #32]
			if (t->pipe == pipe) {
   10c8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10c90:	42a3      	cmp	r3, r4
   10c92:	d006      	beq.n	10ca2 <USBHost::delete_Pipe(Pipe_struct*)+0x126>
		while (t) {
   10c94:	2d00      	cmp	r5, #0
   10c96:	d0a3      	beq.n	10be0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
			Transfer_t *next = t->next_followup;
   10c98:	4628      	mov	r0, r5
   10c9a:	6a2d      	ldr	r5, [r5, #32]
			if (t->pipe == pipe) {
   10c9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10c9e:	42a3      	cmp	r3, r4
   10ca0:	d1f8      	bne.n	10c94 <USBHost::delete_Pipe(Pipe_struct*)+0x118>
	Transfer_t *prev = transfer->prev_followup;
   10ca2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (prev) {
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	d066      	beq.n	10d76 <USBHost::delete_Pipe(Pipe_struct*)+0x1fa>
		prev->next_followup = next;
   10ca8:	621d      	str	r5, [r3, #32]
	if (next) {
   10caa:	2d00      	cmp	r5, #0
   10cac:	d061      	beq.n	10d72 <USBHost::delete_Pipe(Pipe_struct*)+0x1f6>
		next->prev_followup = prev;
   10cae:	626b      	str	r3, [r5, #36]	; 0x24
				Transfer_t *tr = (Transfer_t *)(pipe->qh.next);
   10cb0:	6923      	ldr	r3, [r4, #16]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10cb2:	f033 021f 	bics.w	r2, r3, #31
   10cb6:	d104      	bne.n	10cc2 <USBHost::delete_Pipe(Pipe_struct*)+0x146>
   10cb8:	e050      	b.n	10d5c <USBHost::delete_Pipe(Pipe_struct*)+0x1e0>
					tr  = (Transfer_t *)(tr->qtd.next);
   10cba:	681b      	ldr	r3, [r3, #0]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10cbc:	f033 021f 	bics.w	r2, r3, #31
   10cc0:	d04c      	beq.n	10d5c <USBHost::delete_Pipe(Pipe_struct*)+0x1e0>
   10cc2:	4283      	cmp	r3, r0
   10cc4:	d1f9      	bne.n	10cba <USBHost::delete_Pipe(Pipe_struct*)+0x13e>
   10cc6:	e7e5      	b.n	10c94 <USBHost::delete_Pipe(Pipe_struct*)+0x118>
				periodictable[i] = pipe->qh.horizontal_link;
   10cc8:	6823      	ldr	r3, [r4, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10cca:	42a8      	cmp	r0, r5
				periodictable[i] = pipe->qh.horizontal_link;
   10ccc:	6003      	str	r3, [r0, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10cce:	d19b      	bne.n	10c08 <USBHost::delete_Pipe(Pipe_struct*)+0x8c>
   10cd0:	e7ad      	b.n	10c2e <USBHost::delete_Pipe(Pipe_struct*)+0xb2>
					prev->qh.horizontal_link = node->qh.horizontal_link;
   10cd2:	6823      	ldr	r3, [r4, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10cd4:	42a8      	cmp	r0, r5
					prev->qh.horizontal_link = node->qh.horizontal_link;
   10cd6:	6013      	str	r3, [r2, #0]
		for (uint32_t i=0; i < PERIODIC_LIST_SIZE; i++) {
   10cd8:	d196      	bne.n	10c08 <USBHost::delete_Pipe(Pipe_struct*)+0x8c>
   10cda:	e7a8      	b.n	10c2e <USBHost::delete_Pipe(Pipe_struct*)+0xb2>
	Transfer_t *prev = transfer->prev_followup;
   10cdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (prev) {
   10cde:	2b00      	cmp	r3, #0
   10ce0:	d045      	beq.n	10d6e <USBHost::delete_Pipe(Pipe_struct*)+0x1f2>
		prev->next_followup = next;
   10ce2:	621d      	str	r5, [r3, #32]
	if (next) {
   10ce4:	2d00      	cmp	r5, #0
   10ce6:	d040      	beq.n	10d6a <USBHost::delete_Pipe(Pipe_struct*)+0x1ee>
		next->prev_followup = prev;
   10ce8:	626b      	str	r3, [r5, #36]	; 0x24
				Transfer_t *tr = (Transfer_t *)(pipe->qh.next);
   10cea:	6923      	ldr	r3, [r4, #16]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10cec:	f033 021f 	bics.w	r2, r3, #31
   10cf0:	d104      	bne.n	10cfc <USBHost::delete_Pipe(Pipe_struct*)+0x180>
   10cf2:	e02a      	b.n	10d4a <USBHost::delete_Pipe(Pipe_struct*)+0x1ce>
					tr  = (Transfer_t *)(tr->qtd.next);
   10cf4:	681b      	ldr	r3, [r3, #0]
				while (((uint32_t)tr & 0xFFFFFFE0) && (tr != t)){
   10cf6:	f033 021f 	bics.w	r2, r3, #31
   10cfa:	d026      	beq.n	10d4a <USBHost::delete_Pipe(Pipe_struct*)+0x1ce>
   10cfc:	4283      	cmp	r3, r0
   10cfe:	d1f9      	bne.n	10cf4 <USBHost::delete_Pipe(Pipe_struct*)+0x178>
   10d00:	e76c      	b.n	10bdc <USBHost::delete_Pipe(Pipe_struct*)+0x60>
				prev->qh.capabilities[0] |= 0x8000; // set H bit
   10d02:	684b      	ldr	r3, [r1, #4]
   10d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   10d08:	604b      	str	r3, [r1, #4]
   10d0a:	e74e      	b.n	10baa <USBHost::delete_Pipe(Pipe_struct*)+0x2e>
			uint32_t offset = pipe->bandwidth_offset;
   10d0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
			uint32_t interval = pipe->bandwidth_interval;
   10d10:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10d14:	2bff      	cmp	r3, #255	; 0xff
			uint32_t stime = pipe->bandwidth_stime;
   10d16:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10d1a:	d8b1      	bhi.n	10c80 <USBHost::delete_Pipe(Pipe_struct*)+0x104>
   10d1c:	491b      	ldr	r1, [pc, #108]	; (10d8c <USBHost::delete_Pipe(Pipe_struct*)+0x210>)
				uframe_bandwidth[i] -= stime;
   10d1e:	5cca      	ldrb	r2, [r1, r3]
   10d20:	1a12      	subs	r2, r2, r0
   10d22:	54ca      	strb	r2, [r1, r3]
			for (uint32_t i=offset; i < PERIODIC_LIST_SIZE*8; i += interval) {
   10d24:	442b      	add	r3, r5
   10d26:	2bff      	cmp	r3, #255	; 0xff
   10d28:	d9f9      	bls.n	10d1e <USBHost::delete_Pipe(Pipe_struct*)+0x1a2>
   10d2a:	e7a9      	b.n	10c80 <USBHost::delete_Pipe(Pipe_struct*)+0x104>
			USBHS_USBCMD &= ~USBHS_USBCMD_ASE; // disable async schedule
   10d2c:	4a13      	ldr	r2, [pc, #76]	; (10d7c <USBHost::delete_Pipe(Pipe_struct*)+0x200>)
   10d2e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   10d32:	f023 0320 	bic.w	r3, r3, #32
   10d36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
			while (USBHS_USBSTS & USBHS_USBSTS_AS) ; // busy loop wait
   10d3a:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   10d3e:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
   10d42:	d1fa      	bne.n	10d3a <USBHost::delete_Pipe(Pipe_struct*)+0x1be>
			USBHS_ASYNCLISTADDR = 0;
   10d44:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
   10d48:	e73f      	b.n	10bca <USBHost::delete_Pipe(Pipe_struct*)+0x4e>
				if (tr == t) {
   10d4a:	4283      	cmp	r3, r0
   10d4c:	f43f af46 	beq.w	10bdc <USBHost::delete_Pipe(Pipe_struct*)+0x60>
					free_Transfer(t);  // The later code should actually free it...
   10d50:	f004 f964 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
		while (t) {
   10d54:	2d00      	cmp	r5, #0
   10d56:	f47f af3c 	bne.w	10bd2 <USBHost::delete_Pipe(Pipe_struct*)+0x56>
   10d5a:	e741      	b.n	10be0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
				if (tr == t) {
   10d5c:	4283      	cmp	r3, r0
   10d5e:	d099      	beq.n	10c94 <USBHost::delete_Pipe(Pipe_struct*)+0x118>
					free_Transfer(t);  // The later code should actually free it...
   10d60:	f004 f95c 	bl	1501c <USBHost::free_Transfer(Transfer_struct*)>
		while (t) {
   10d64:	2d00      	cmp	r5, #0
   10d66:	d197      	bne.n	10c98 <USBHost::delete_Pipe(Pipe_struct*)+0x11c>
   10d68:	e73a      	b.n	10be0 <USBHost::delete_Pipe(Pipe_struct*)+0x64>
		async_followup_last = prev;
   10d6a:	603b      	str	r3, [r7, #0]
   10d6c:	e7bd      	b.n	10cea <USBHost::delete_Pipe(Pipe_struct*)+0x16e>
		async_followup_first = next;
   10d6e:	6035      	str	r5, [r6, #0]
   10d70:	e7b8      	b.n	10ce4 <USBHost::delete_Pipe(Pipe_struct*)+0x168>
		periodic_followup_last = prev;
   10d72:	603b      	str	r3, [r7, #0]
   10d74:	e79c      	b.n	10cb0 <USBHost::delete_Pipe(Pipe_struct*)+0x134>
		periodic_followup_first = next;
   10d76:	6035      	str	r5, [r6, #0]
   10d78:	e797      	b.n	10caa <USBHost::delete_Pipe(Pipe_struct*)+0x12e>
   10d7a:	bf00      	nop
   10d7c:	402e0200 	.word	0x402e0200
   10d80:	2000e850 	.word	0x2000e850
   10d84:	2000e84c 	.word	0x2000e84c
   10d88:	2000affc 	.word	0x2000affc
   10d8c:	2000e744 	.word	0x2000e744
   10d90:	2000e858 	.word	0x2000e858
   10d94:	2000e854 	.word	0x2000e854

00010d98 <USBHost::Task()>:
// The main user function to cause internal state to update.  Since we do
// almost everything with DMA and interrupts, the only work to do here is
// call all the active driver Task() functions.
void USBHost::Task()
{
	for (Device_t *dev = devlist; dev; dev = dev->next) {
   10d98:	4b0b      	ldr	r3, [pc, #44]	; (10dc8 <USBHost::Task()+0x30>)
{
   10d9a:	b570      	push	{r4, r5, r6, lr}
	for (Device_t *dev = devlist; dev; dev = dev->next) {
   10d9c:	681e      	ldr	r6, [r3, #0]
   10d9e:	b18e      	cbz	r6, 10dc4 <USBHost::Task()+0x2c>
   10da0:	4d0a      	ldr	r5, [pc, #40]	; (10dcc <USBHost::Task()+0x34>)
		for (USBDriver *driver = dev->drivers; driver; driver = driver->next) {
   10da2:	68f4      	ldr	r4, [r6, #12]
   10da4:	b914      	cbnz	r4, 10dac <USBHost::Task()+0x14>
   10da6:	e00a      	b.n	10dbe <USBHost::Task()+0x26>
   10da8:	6864      	ldr	r4, [r4, #4]
   10daa:	b144      	cbz	r4, 10dbe <USBHost::Task()+0x26>
			(driver->Task)();
   10dac:	6823      	ldr	r3, [r4, #0]
   10dae:	68db      	ldr	r3, [r3, #12]
   10db0:	42ab      	cmp	r3, r5
   10db2:	d0f9      	beq.n	10da8 <USBHost::Task()+0x10>
   10db4:	4620      	mov	r0, r4
   10db6:	4798      	blx	r3
		for (USBDriver *driver = dev->drivers; driver; driver = driver->next) {
   10db8:	6864      	ldr	r4, [r4, #4]
   10dba:	2c00      	cmp	r4, #0
   10dbc:	d1f6      	bne.n	10dac <USBHost::Task()+0x14>
	for (Device_t *dev = devlist; dev; dev = dev->next) {
   10dbe:	68b6      	ldr	r6, [r6, #8]
   10dc0:	2e00      	cmp	r6, #0
   10dc2:	d1ee      	bne.n	10da2 <USBHost::Task()+0xa>
		}
	}
}
   10dc4:	bd70      	pop	{r4, r5, r6, pc}
   10dc6:	bf00      	nop
   10dc8:	2000e85c 	.word	0x2000e85c
   10dcc:	0000fc6d 	.word	0x0000fc6d

00010dd0 <USBHost::driver_ready_for_device(USBDriver*)>:
//
void USBHost::driver_ready_for_device(USBDriver *driver)
{
	driver->device = NULL;
	driver->next = NULL;
	if (available_drivers == NULL) {
   10dd0:	4906      	ldr	r1, [pc, #24]	; (10dec <USBHost::driver_ready_for_device(USBDriver*)+0x1c>)
	driver->device = NULL;
   10dd2:	2200      	movs	r2, #0
	if (available_drivers == NULL) {
   10dd4:	680b      	ldr	r3, [r1, #0]
	driver->next = NULL;
   10dd6:	e9c0 2201 	strd	r2, r2, [r0, #4]
	if (available_drivers == NULL) {
   10dda:	b12b      	cbz	r3, 10de8 <USBHost::driver_ready_for_device(USBDriver*)+0x18>
		available_drivers = driver;
	} else {
		// append to end of list
		USBDriver *last = available_drivers;
		while (last->next) last = last->next;
   10ddc:	461a      	mov	r2, r3
   10dde:	685b      	ldr	r3, [r3, #4]
   10de0:	2b00      	cmp	r3, #0
   10de2:	d1fb      	bne.n	10ddc <USBHost::driver_ready_for_device(USBDriver*)+0xc>
		last->next = driver;
   10de4:	6050      	str	r0, [r2, #4]
	}
}
   10de6:	4770      	bx	lr
		available_drivers = driver;
   10de8:	6008      	str	r0, [r1, #0]
   10dea:	4770      	bx	lr
   10dec:	2000e844 	.word	0x2000e844

00010df0 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)>:

// Create a new device and begin the enumeration process
//
Device_t * USBHost::new_Device(uint32_t speed, uint32_t hub_addr, uint32_t hub_port)
{
   10df0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10df2:	b083      	sub	sp, #12
   10df4:	4607      	mov	r7, r0
   10df6:	460e      	mov	r6, r1
   10df8:	4615      	mov	r5, r2
	  case 1: print("1.5"); break;
	  case 2: print("480"); break;
	  default: print("??");
	}
	println(" Mbit/sec");
	dev = allocate_Device();
   10dfa:	f004 f8e7 	bl	14fcc <USBHost::allocate_Device()>
	if (!dev) return NULL;
   10dfe:	4604      	mov	r4, r0
   10e00:	b380      	cbz	r0, 10e64 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x74>
	memset(dev, 0, sizeof(Device_t));
   10e02:	2224      	movs	r2, #36	; 0x24
   10e04:	2100      	movs	r1, #0
   10e06:	f00a fea7 	bl	1bb58 <memset>
	dev->speed = speed;
	dev->address = 0;
	dev->hub_address = hub_addr;
	dev->hub_port = hub_port;
	dev->control_pipe = new_Pipe(dev, 0, 0, 0, 8);
   10e0a:	2300      	movs	r3, #0
   10e0c:	2108      	movs	r1, #8
	dev->speed = speed;
   10e0e:	7527      	strb	r7, [r4, #20]
	dev->control_pipe = new_Pipe(dev, 0, 0, 0, 8);
   10e10:	461a      	mov	r2, r3
	dev->hub_address = hub_addr;
   10e12:	75a6      	strb	r6, [r4, #22]
	dev->hub_port = hub_port;
   10e14:	75e5      	strb	r5, [r4, #23]
	dev->control_pipe = new_Pipe(dev, 0, 0, 0, 8);
   10e16:	4620      	mov	r0, r4
   10e18:	e9cd 1300 	strd	r1, r3, [sp]
   10e1c:	4619      	mov	r1, r3
   10e1e:	f7ff fe07 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
   10e22:	4602      	mov	r2, r0
   10e24:	6020      	str	r0, [r4, #0]
	if (!dev->control_pipe) {
   10e26:	b320      	cbz	r0, 10e72 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x82>
		free_Device(dev);
		return NULL;
	}
	dev->strbuf = allocate_string_buffer();  // try to allocate a string buffer; 
   10e28:	f004 f900 	bl	1502c <USBHost::allocate_string_buffer()>
	dev->control_pipe->callback_function = &enumeration;
   10e2c:	6821      	ldr	r1, [r4, #0]
   10e2e:	4a13      	ldr	r2, [pc, #76]	; (10e7c <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x8c>)
	dev->control_pipe->direction = 1; // 1=IN
	// Here is where the enumeration process officially begins.
	// Only a single device can enumerate at a time.
	USBHost::enumeration_busy = true;
	mk_setup(enumsetup, 0x80, 6, 0x0100, 0, 8); // 6=GET_DESCRIPTOR
	queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   10e30:	2300      	movs	r3, #0
	dev->strbuf = allocate_string_buffer();  // try to allocate a string buffer; 
   10e32:	6120      	str	r0, [r4, #16]
	dev->control_pipe->callback_function = &enumeration;
   10e34:	63ca      	str	r2, [r1, #60]	; 0x3c
	dev->control_pipe->direction = 1; // 1=IN
   10e36:	2201      	movs	r2, #1
	USBHost::enumeration_busy = true;
   10e38:	4811      	ldr	r0, [pc, #68]	; (10e80 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x90>)
	dev->control_pipe->direction = 1; // 1=IN
   10e3a:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
	USBHost::enumeration_busy = true;
   10e3e:	7002      	strb	r2, [r0, #0]
        s.word2 = wIndex | (wLength << 16);
   10e40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   10e44:	490f      	ldr	r1, [pc, #60]	; (10e84 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x94>)
        s.word2 = wIndex | (wLength << 16);
   10e46:	4810      	ldr	r0, [pc, #64]	; (10e88 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x98>)
   10e48:	e9c1 0200 	strd	r0, r2, [r1]
	queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   10e4c:	4a0f      	ldr	r2, [pc, #60]	; (10e8c <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x9c>)
   10e4e:	4620      	mov	r0, r4
   10e50:	f7ff f982 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	if (devlist == NULL) {
   10e54:	4a0e      	ldr	r2, [pc, #56]	; (10e90 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0xa0>)
   10e56:	6813      	ldr	r3, [r2, #0]
   10e58:	b13b      	cbz	r3, 10e6a <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x7a>
		devlist = dev;
	} else {
		Device_t *p;
		for (p = devlist; p->next; p = p->next) ; // walk devlist
   10e5a:	461a      	mov	r2, r3
   10e5c:	689b      	ldr	r3, [r3, #8]
   10e5e:	2b00      	cmp	r3, #0
   10e60:	d1fb      	bne.n	10e5a <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x6a>
		p->next = dev;
   10e62:	6094      	str	r4, [r2, #8]
	}
	return dev;
}
   10e64:	4620      	mov	r0, r4
   10e66:	b003      	add	sp, #12
   10e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e6a:	4620      	mov	r0, r4
		devlist = dev;
   10e6c:	6014      	str	r4, [r2, #0]
}
   10e6e:	b003      	add	sp, #12
   10e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		free_Device(dev);
   10e72:	4620      	mov	r0, r4
		return NULL;
   10e74:	4614      	mov	r4, r2
		free_Device(dev);
   10e76:	f004 f8b1 	bl	14fdc <USBHost::free_Device(Device_struct*)>
		return NULL;
   10e7a:	e7f3      	b.n	10e64 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)+0x74>
   10e7c:	00011025 	.word	0x00011025
   10e80:	2000fc38 	.word	0x2000fc38
   10e84:	2000dfc0 	.word	0x2000dfc0
   10e88:	01000680 	.word	0x01000680
   10e8c:	2000d7c0 	.word	0x2000d7c0
   10e90:	2000e85c 	.word	0x2000e85c

00010e94 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>:
			return;
		}
	}
}

void  USBHost::convertStringDescriptorToASCIIString(uint8_t string_index, Device_t *dev, const Transfer_t *transfer) {
   10e94:	b570      	push	{r4, r5, r6, lr}
	strbuf_t *strbuf = dev->strbuf; 
   10e96:	690d      	ldr	r5, [r1, #16]
	if (!strbuf) return;	// don't have a buffer
   10e98:	b39d      	cbz	r5, 10f02 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>

	uint8_t *buffer = (uint8_t*)transfer->buffer;
   10e9a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	uint8_t buf_index = string_index? strbuf->iStrings[string_index]+1 : 0;
   10e9c:	b390      	cbz	r0, 10f04 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x70>
   10e9e:	5c29      	ldrb	r1, [r5, r0]
   10ea0:	3101      	adds	r1, #1
   10ea2:	b2c9      	uxtb	r1, r1

	// Try to verify - The first byte should be length and the 2nd byte should be 0x3
	if (!buffer || (buffer[1] != 0x3)) {
   10ea4:	b36e      	cbz	r6, 10f02 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>
   10ea6:	7873      	ldrb	r3, [r6, #1]
   10ea8:	2b03      	cmp	r3, #3
   10eaa:	d12a      	bne.n	10f02 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>
		return;	// No string so can simply return
	}

	strbuf->iStrings[string_index] = buf_index;	// remember our starting positio
   10eac:	5429      	strb	r1, [r5, r0]
	uint8_t count_bytes_returned = buffer[0];
   10eae:	7834      	ldrb	r4, [r6, #0]
	if ((buf_index + count_bytes_returned/2) >= DEVICE_STRUCT_STRING_BUF_SIZE)
   10eb0:	eb01 0354 	add.w	r3, r1, r4, lsr #1
   10eb4:	2b31      	cmp	r3, #49	; 0x31
   10eb6:	dc27      	bgt.n	10f08 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x74>
		count_bytes_returned = (DEVICE_STRUCT_STRING_BUF_SIZE - buf_index) * 2;

	// Now copy into our storage buffer. 
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10eb8:	2c02      	cmp	r4, #2
   10eba:	d913      	bls.n	10ee4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x50>
   10ebc:	2930      	cmp	r1, #48	; 0x30
   10ebe:	d811      	bhi.n	10ee4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x50>
   10ec0:	f04f 0c02 	mov.w	ip, #2
   10ec4:	f10c 0202 	add.w	r2, ip, #2
   10ec8:	460b      	mov	r3, r1
		strbuf->buffer[buf_index++] = buffer[i];
   10eca:	f816 e00c 	ldrb.w	lr, [r6, ip]
   10ece:	3101      	adds	r1, #1
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10ed0:	fa5f fc82 	uxtb.w	ip, r2
		strbuf->buffer[buf_index++] = buffer[i];
   10ed4:	442b      	add	r3, r5
   10ed6:	b2c9      	uxtb	r1, r1
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10ed8:	4564      	cmp	r4, ip
		strbuf->buffer[buf_index++] = buffer[i];
   10eda:	f883 e003 	strb.w	lr, [r3, #3]
	for (uint8_t i = 2; (i < count_bytes_returned) && (buf_index < (DEVICE_STRUCT_STRING_BUF_SIZE -1)); i += 2) {
   10ede:	d901      	bls.n	10ee4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x50>
   10ee0:	2930      	cmp	r1, #48	; 0x30
   10ee2:	d9ef      	bls.n	10ec4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x30>
	} 
	strbuf->buffer[buf_index] = 0;	// null terminate. 
   10ee4:	186b      	adds	r3, r5, r1
   10ee6:	2200      	movs	r2, #0
   10ee8:	70da      	strb	r2, [r3, #3]

	// Update other indexes to point to null character
	while (++string_index < 3) {
   10eea:	1c43      	adds	r3, r0, #1
   10eec:	b2db      	uxtb	r3, r3
   10eee:	2b02      	cmp	r3, #2
   10ef0:	d807      	bhi.n	10f02 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x6e>
		strbuf->iStrings[string_index] = buf_index;	// point to trailing NULL character
   10ef2:	f1c0 0202 	rsb	r2, r0, #2
   10ef6:	18e8      	adds	r0, r5, r3
   10ef8:	b2d2      	uxtb	r2, r2
	}
}
   10efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		strbuf->iStrings[string_index] = buf_index;	// point to trailing NULL character
   10efe:	f00a be2b 	b.w	1bb58 <memset>
}
   10f02:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t buf_index = string_index? strbuf->iStrings[string_index]+1 : 0;
   10f04:	4601      	mov	r1, r0
   10f06:	e7cd      	b.n	10ea4 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x10>
		count_bytes_returned = (DEVICE_STRUCT_STRING_BUF_SIZE - buf_index) * 2;
   10f08:	f1c1 0432 	rsb	r4, r1, #50	; 0x32
   10f0c:	0064      	lsls	r4, r4, #1
   10f0e:	b2e4      	uxtb	r4, r4
   10f10:	e7d2      	b.n	10eb8 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)+0x24>
   10f12:	bf00      	nop

00010f14 <USBHost::claim_drivers(Device_struct*)>:
void USBHost::claim_drivers(Device_t *dev)
{
	USBDriver *driver, *prev=NULL;

	// first check if any driver wishes to claim the entire device
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10f14:	4b3f      	ldr	r3, [pc, #252]	; (11014 <USBHost::claim_drivers(Device_struct*)+0x100>)
{
   10f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10f1a:	681c      	ldr	r4, [r3, #0]
{
   10f1c:	b083      	sub	sp, #12
   10f1e:	4606      	mov	r6, r0
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10f20:	2c00      	cmp	r4, #0
   10f22:	d073      	beq.n	1100c <USBHost::claim_drivers(Device_struct*)+0xf8>
	USBDriver *driver, *prev=NULL;
   10f24:	f04f 0900 	mov.w	r9, #0
   10f28:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11020 <USBHost::claim_drivers(Device_struct*)+0x10c>
		if (driver->device != NULL) continue;
		if (driver->claim(dev, 0, enumbuf + 9, enumlen - 9)) {
   10f2c:	4f3a      	ldr	r7, [pc, #232]	; (11018 <USBHost::claim_drivers(Device_struct*)+0x104>)
   10f2e:	e001      	b.n	10f34 <USBHost::claim_drivers(Device_struct*)+0x20>
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10f30:	6864      	ldr	r4, [r4, #4]
   10f32:	b1a4      	cbz	r4, 10f5e <USBHost::claim_drivers(Device_struct*)+0x4a>
		if (driver->device != NULL) continue;
   10f34:	68a2      	ldr	r2, [r4, #8]
		if (driver->claim(dev, 0, enumbuf + 9, enumlen - 9)) {
   10f36:	4620      	mov	r0, r4
   10f38:	463b      	mov	r3, r7
   10f3a:	4631      	mov	r1, r6
		if (driver->device != NULL) continue;
   10f3c:	2a00      	cmp	r2, #0
   10f3e:	d1f7      	bne.n	10f30 <USBHost::claim_drivers(Device_struct*)+0x1c>
		if (driver->claim(dev, 0, enumbuf + 9, enumlen - 9)) {
   10f40:	f8b8 5000 	ldrh.w	r5, [r8]
   10f44:	f8d4 c000 	ldr.w	ip, [r4]
   10f48:	3d09      	subs	r5, #9
   10f4a:	9500      	str	r5, [sp, #0]
   10f4c:	f8dc 5000 	ldr.w	r5, [ip]
   10f50:	47a8      	blx	r5
   10f52:	2800      	cmp	r0, #0
   10f54:	d147      	bne.n	10fe6 <USBHost::claim_drivers(Device_struct*)+0xd2>
   10f56:	46a1      	mov	r9, r4
	for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10f58:	6864      	ldr	r4, [r4, #4]
   10f5a:	2c00      	cmp	r4, #0
   10f5c:	d1ea      	bne.n	10f34 <USBHost::claim_drivers(Device_struct*)+0x20>
		}
		prev = driver;
	}
	// parse interfaces from config descriptor
	const uint8_t *p = enumbuf + 9;
	const uint8_t *end = enumbuf + enumlen;
   10f5e:	4b2f      	ldr	r3, [pc, #188]	; (1101c <USBHost::claim_drivers(Device_struct*)+0x108>)
   10f60:	f8b8 2000 	ldrh.w	r2, [r8]
	while (p < end) {
   10f64:	f103 0509 	add.w	r5, r3, #9
	const uint8_t *end = enumbuf + enumlen;
   10f68:	eb03 0902 	add.w	r9, r3, r2
	while (p < end) {
   10f6c:	45a9      	cmp	r9, r5
   10f6e:	d803      	bhi.n	10f78 <USBHost::claim_drivers(Device_struct*)+0x64>
   10f70:	e043      	b.n	10ffa <USBHost::claim_drivers(Device_struct*)+0xe6>
					// not done, may be more interface for more drivers
				}
				prev = driver;
			}
		}
		p += desclen;
   10f72:	4445      	add	r5, r8
	while (p < end) {
   10f74:	45a9      	cmp	r9, r5
   10f76:	d940      	bls.n	10ffa <USBHost::claim_drivers(Device_struct*)+0xe6>
		if (desctype == 4 && desclen == 9) {
   10f78:	786b      	ldrb	r3, [r5, #1]
		uint8_t desclen = *p;
   10f7a:	f895 8000 	ldrb.w	r8, [r5]
		if (desctype == 4 && desclen == 9) {
   10f7e:	2b04      	cmp	r3, #4
   10f80:	d1f7      	bne.n	10f72 <USBHost::claim_drivers(Device_struct*)+0x5e>
   10f82:	f1b8 0f09 	cmp.w	r8, #9
   10f86:	d1f4      	bne.n	10f72 <USBHost::claim_drivers(Device_struct*)+0x5e>
			for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10f88:	4b22      	ldr	r3, [pc, #136]	; (11014 <USBHost::claim_drivers(Device_struct*)+0x100>)
   10f8a:	681c      	ldr	r4, [r3, #0]
   10f8c:	2c00      	cmp	r4, #0
   10f8e:	d0f0      	beq.n	10f72 <USBHost::claim_drivers(Device_struct*)+0x5e>
				if (driver->device != NULL) continue;
   10f90:	68a7      	ldr	r7, [r4, #8]
			prev = NULL;
   10f92:	f04f 0a00 	mov.w	sl, #0
				if (driver->claim(dev, 1, p, end - p)) {
   10f96:	eba9 0b05 	sub.w	fp, r9, r5
   10f9a:	4620      	mov	r0, r4
   10f9c:	462b      	mov	r3, r5
   10f9e:	2201      	movs	r2, #1
   10fa0:	4631      	mov	r1, r6
				if (driver->device != NULL) continue;
   10fa2:	b14f      	cbz	r7, 10fb8 <USBHost::claim_drivers(Device_struct*)+0xa4>
						prev->next = driver->next;
   10fa4:	6864      	ldr	r4, [r4, #4]
			for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10fa6:	2c00      	cmp	r4, #0
   10fa8:	d0e3      	beq.n	10f72 <USBHost::claim_drivers(Device_struct*)+0x5e>
				if (driver->device != NULL) continue;
   10faa:	68a7      	ldr	r7, [r4, #8]
				if (driver->claim(dev, 1, p, end - p)) {
   10fac:	4620      	mov	r0, r4
   10fae:	462b      	mov	r3, r5
   10fb0:	2201      	movs	r2, #1
   10fb2:	4631      	mov	r1, r6
				if (driver->device != NULL) continue;
   10fb4:	2f00      	cmp	r7, #0
   10fb6:	d1f5      	bne.n	10fa4 <USBHost::claim_drivers(Device_struct*)+0x90>
				if (driver->claim(dev, 1, p, end - p)) {
   10fb8:	6827      	ldr	r7, [r4, #0]
   10fba:	f8cd b000 	str.w	fp, [sp]
   10fbe:	683f      	ldr	r7, [r7, #0]
   10fc0:	47b8      	blx	r7
   10fc2:	b908      	cbnz	r0, 10fc8 <USBHost::claim_drivers(Device_struct*)+0xb4>
						prev->next = driver->next;
   10fc4:	46a2      	mov	sl, r4
   10fc6:	e7ed      	b.n	10fa4 <USBHost::claim_drivers(Device_struct*)+0x90>
   10fc8:	6863      	ldr	r3, [r4, #4]
					if (prev) {
   10fca:	f1ba 0f00 	cmp.w	sl, #0
   10fce:	d017      	beq.n	11000 <USBHost::claim_drivers(Device_struct*)+0xec>
						prev->next = driver->next;
   10fd0:	f8ca 3004 	str.w	r3, [sl, #4]
					driver->next = dev->drivers;
   10fd4:	68f3      	ldr	r3, [r6, #12]
   10fd6:	46a2      	mov	sl, r4
   10fd8:	6063      	str	r3, [r4, #4]
					dev->drivers = driver;
   10fda:	60f4      	str	r4, [r6, #12]
					driver->device = dev;
   10fdc:	60a6      	str	r6, [r4, #8]
   10fde:	461c      	mov	r4, r3
			for (driver=available_drivers; driver != NULL; driver = driver->next) {
   10fe0:	2c00      	cmp	r4, #0
   10fe2:	d1e2      	bne.n	10faa <USBHost::claim_drivers(Device_struct*)+0x96>
   10fe4:	e7c5      	b.n	10f72 <USBHost::claim_drivers(Device_struct*)+0x5e>
				prev->next = driver->next;
   10fe6:	6863      	ldr	r3, [r4, #4]
			if (prev) {
   10fe8:	f1b9 0f00 	cmp.w	r9, #0
   10fec:	d00b      	beq.n	11006 <USBHost::claim_drivers(Device_struct*)+0xf2>
				prev->next = driver->next;
   10fee:	f8c9 3004 	str.w	r3, [r9, #4]
			driver->next = NULL;
   10ff2:	2300      	movs	r3, #0
   10ff4:	e9c4 3601 	strd	r3, r6, [r4, #4]
			dev->drivers = driver;
   10ff8:	60f4      	str	r4, [r6, #12]
	}
}
   10ffa:	b003      	add	sp, #12
   10ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						available_drivers = driver->next;
   11000:	4a04      	ldr	r2, [pc, #16]	; (11014 <USBHost::claim_drivers(Device_struct*)+0x100>)
   11002:	6013      	str	r3, [r2, #0]
   11004:	e7e6      	b.n	10fd4 <USBHost::claim_drivers(Device_struct*)+0xc0>
				available_drivers = driver->next;
   11006:	4a03      	ldr	r2, [pc, #12]	; (11014 <USBHost::claim_drivers(Device_struct*)+0x100>)
   11008:	6013      	str	r3, [r2, #0]
   1100a:	e7f2      	b.n	10ff2 <USBHost::claim_drivers(Device_struct*)+0xde>
   1100c:	f8df 8010 	ldr.w	r8, [pc, #16]	; 11020 <USBHost::claim_drivers(Device_struct*)+0x10c>
   11010:	e7a5      	b.n	10f5e <USBHost::claim_drivers(Device_struct*)+0x4a>
   11012:	bf00      	nop
   11014:	2000e844 	.word	0x2000e844
   11018:	2000d7c9 	.word	0x2000d7c9
   1101c:	2000d7c0 	.word	0x2000d7c0
   11020:	2000fc28 	.word	0x2000fc28

00011024 <USBHost::enumeration(Transfer_struct const*)>:
{
   11024:	b570      	push	{r4, r5, r6, lr}
   11026:	4604      	mov	r4, r0
	if (transfer->driver) {
   11028:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1102a:	b128      	cbz	r0, 11038 <USBHost::enumeration(Transfer_struct const*)+0x14>
		transfer->driver->control(transfer);
   1102c:	6803      	ldr	r3, [r0, #0]
   1102e:	4a98      	ldr	r2, [pc, #608]	; (11290 <USBHost::enumeration(Transfer_struct const*)+0x26c>)
   11030:	685b      	ldr	r3, [r3, #4]
   11032:	4293      	cmp	r3, r2
   11034:	d117      	bne.n	11066 <USBHost::enumeration(Transfer_struct const*)+0x42>
}
   11036:	bd70      	pop	{r4, r5, r6, pc}
	dev = transfer->pipe->device;
   11038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (enumbuf[2]) dev->enum_state = 9;
   1103a:	4e96      	ldr	r6, [pc, #600]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
	dev = transfer->pipe->device;
   1103c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
		switch (dev->enum_state) {
   1103e:	7e2b      	ldrb	r3, [r5, #24]
   11040:	2b0e      	cmp	r3, #14
   11042:	d8f8      	bhi.n	11036 <USBHost::enumeration(Transfer_struct const*)+0x12>
   11044:	e8df f013 	tbh	[pc, r3, lsl #1]
   11048:	0044001c 	.word	0x0044001c
   1104c:	0071005a 	.word	0x0071005a
   11050:	0088007e 	.word	0x0088007e
   11054:	00a6009b 	.word	0x00a6009b
   11058:	010100f5 	.word	0x010100f5
   1105c:	00bf00b9 	.word	0x00bf00b9
   11060:	00e100cd 	.word	0x00e100cd
   11064:	0013      	.short	0x0013
		transfer->driver->control(transfer);
   11066:	4621      	mov	r1, r4
}
   11068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		transfer->driver->control(transfer);
   1106c:	4718      	bx	r3
			claim_drivers(dev);
   1106e:	4628      	mov	r0, r5
   11070:	f7ff ff50 	bl	10f14 <USBHost::claim_drivers(Device_struct*)>
			dev->enum_state = 15;
   11074:	210f      	movs	r1, #15
			USBHost::enumeration_busy = false;
   11076:	4b88      	ldr	r3, [pc, #544]	; (11298 <USBHost::enumeration(Transfer_struct const*)+0x274>)
   11078:	2200      	movs	r2, #0
			dev->enum_state = 15;
   1107a:	7629      	strb	r1, [r5, #24]
			USBHost::enumeration_busy = false;
   1107c:	701a      	strb	r2, [r3, #0]
}
   1107e:	bd70      	pop	{r4, r5, r6, pc}
			pipe_set_maxlen(dev->control_pipe, enumbuf[7]);
   11080:	682a      	ldr	r2, [r5, #0]
   11082:	4984      	ldr	r1, [pc, #528]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
	}
}

static void pipe_set_maxlen(Pipe_t *pipe, uint32_t maxlen)
{
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   11084:	6850      	ldr	r0, [r2, #4]
   11086:	4b85      	ldr	r3, [pc, #532]	; (1129c <USBHost::enumeration(Transfer_struct const*)+0x278>)
			pipe_set_maxlen(dev->control_pipe, enumbuf[7]);
   11088:	79c9      	ldrb	r1, [r1, #7]
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   1108a:	4003      	ands	r3, r0
	uint32_t addr = last_assigned_address;
   1108c:	4c84      	ldr	r4, [pc, #528]	; (112a0 <USBHost::enumeration(Transfer_struct const*)+0x27c>)
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   1108e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	for (Device_t *p = devlist; p; p = p->next) {
   11092:	4984      	ldr	r1, [pc, #528]	; (112a4 <USBHost::enumeration(Transfer_struct const*)+0x280>)
	uint32_t addr = last_assigned_address;
   11094:	7820      	ldrb	r0, [r4, #0]
	for (Device_t *p = devlist; p; p = p->next) {
   11096:	6809      	ldr	r1, [r1, #0]
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xF800FFFF) | (maxlen << 16);
   11098:	6053      	str	r3, [r2, #4]
		if (++addr > 127) addr = 1;
   1109a:	3001      	adds	r0, #1
   1109c:	2880      	cmp	r0, #128	; 0x80
   1109e:	bf28      	it	cs
   110a0:	2001      	movcs	r0, #1
	for (Device_t *p = devlist; p; p = p->next) {
   110a2:	b131      	cbz	r1, 110b2 <USBHost::enumeration(Transfer_struct const*)+0x8e>
   110a4:	460b      	mov	r3, r1
		if (p->address == addr) return true;
   110a6:	7d5a      	ldrb	r2, [r3, #21]
   110a8:	4282      	cmp	r2, r0
   110aa:	d0f6      	beq.n	1109a <USBHost::enumeration(Transfer_struct const*)+0x76>
	for (Device_t *p = devlist; p; p = p->next) {
   110ac:	689b      	ldr	r3, [r3, #8]
   110ae:	2b00      	cmp	r3, #0
   110b0:	d1f9      	bne.n	110a6 <USBHost::enumeration(Transfer_struct const*)+0x82>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   110b2:	0403      	lsls	r3, r0, #16
   110b4:	497c      	ldr	r1, [pc, #496]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			last_assigned_address = addr;
   110b6:	7020      	strb	r0, [r4, #0]
			queue_Control_Transfer(dev, &enumsetup, NULL, NULL);
   110b8:	4628      	mov	r0, r5
   110ba:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
   110be:	600b      	str	r3, [r1, #0]
        s.word2 = wIndex | (wLength << 16);
   110c0:	2300      	movs	r3, #0
   110c2:	461a      	mov	r2, r3
   110c4:	604b      	str	r3, [r1, #4]
   110c6:	f7ff f847 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 1;
   110ca:	2301      	movs	r3, #1
   110cc:	762b      	strb	r3, [r5, #24]
}
   110ce:	bd70      	pop	{r4, r5, r6, pc}
			dev->address = enumsetup.wValue;
   110d0:	4975      	ldr	r1, [pc, #468]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
   110d2:	f44f 1490 	mov.w	r4, #1179648	; 0x120000
			pipe_set_addr(dev->control_pipe, enumsetup.wValue);
   110d6:	682a      	ldr	r2, [r5, #0]
			dev->address = enumsetup.wValue;
   110d8:	8848      	ldrh	r0, [r1, #2]
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   110da:	4b74      	ldr	r3, [pc, #464]	; (112ac <USBHost::enumeration(Transfer_struct const*)+0x288>)
   110dc:	7568      	strb	r0, [r5, #21]
   110de:	600b      	str	r3, [r1, #0]
}

static void pipe_set_addr(Pipe_t *pipe, uint32_t addr)
{
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xFFFFFF80) | addr;
   110e0:	6853      	ldr	r3, [r2, #4]
   110e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   110e6:	4303      	orrs	r3, r0
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   110e8:	4628      	mov	r0, r5
	pipe->qh.capabilities[0] = (pipe->qh.capabilities[0] & 0xFFFFFF80) | addr;
   110ea:	6053      	str	r3, [r2, #4]
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   110ec:	2300      	movs	r3, #0
   110ee:	4a69      	ldr	r2, [pc, #420]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
        s.word2 = wIndex | (wLength << 16);
   110f0:	604c      	str	r4, [r1, #4]
   110f2:	f7ff f831 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 2;
   110f6:	2302      	movs	r3, #2
   110f8:	762b      	strb	r3, [r5, #24]
}
   110fa:	bd70      	pop	{r4, r5, r6, pc}
			enumbuf[1] = enumbuf[15];
   110fc:	7bf2      	ldrb	r2, [r6, #15]
			enumbuf[0] = enumbuf[14];
   110fe:	7bb3      	ldrb	r3, [r6, #14]
			enumbuf[1] = enumbuf[15];
   11100:	7072      	strb	r2, [r6, #1]
			enumbuf[0] = enumbuf[14];
   11102:	7033      	strb	r3, [r6, #0]
			if ((enumbuf[0] | enumbuf[1] | enumbuf[2]) > 0) {
   11104:	4313      	orrs	r3, r2
			enumbuf[2] = enumbuf[16];
   11106:	7c32      	ldrb	r2, [r6, #16]
			dev->bDeviceClass = enumbuf[4];
   11108:	7931      	ldrb	r1, [r6, #4]
   1110a:	4313      	orrs	r3, r2
			enumbuf[2] = enumbuf[16];
   1110c:	70b2      	strb	r2, [r6, #2]
			dev->bDeviceSubClass = enumbuf[5];
   1110e:	7972      	ldrb	r2, [r6, #5]
   11110:	bf14      	ite	ne
   11112:	2303      	movne	r3, #3
   11114:	230b      	moveq	r3, #11
   11116:	76aa      	strb	r2, [r5, #26]
			dev->bDeviceProtocol = enumbuf[6];
   11118:	79b2      	ldrb	r2, [r6, #6]
			dev->bDeviceClass = enumbuf[4];
   1111a:	7669      	strb	r1, [r5, #25]
			dev->bDeviceProtocol = enumbuf[6];
   1111c:	76ea      	strb	r2, [r5, #27]
			dev->idVendor = enumbuf[8] | (enumbuf[9] << 8);
   1111e:	8932      	ldrh	r2, [r6, #8]
				dev->enum_state = 11;
   11120:	762b      	strb	r3, [r5, #24]
			dev->idVendor = enumbuf[8] | (enumbuf[9] << 8);
   11122:	83ea      	strh	r2, [r5, #30]
			dev->idProduct = enumbuf[10] | (enumbuf[11] << 8);
   11124:	8972      	ldrh	r2, [r6, #10]
   11126:	842a      	strh	r2, [r5, #32]
			if ((enumbuf[0] | enumbuf[1] | enumbuf[2]) > 0) {
   11128:	e789      	b.n	1103e <USBHost::enumeration(Transfer_struct const*)+0x1a>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1112a:	495f      	ldr	r1, [pc, #380]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   1112c:	2300      	movs	r3, #0
   1112e:	4860      	ldr	r0, [pc, #384]	; (112b0 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
        s.word2 = wIndex | (wLength << 16);
   11130:	4a60      	ldr	r2, [pc, #384]	; (112b4 <USBHost::enumeration(Transfer_struct const*)+0x290>)
   11132:	e9c1 0200 	strd	r0, r2, [r1]
   11136:	4a60      	ldr	r2, [pc, #384]	; (112b8 <USBHost::enumeration(Transfer_struct const*)+0x294>)
   11138:	4628      	mov	r0, r5
   1113a:	f7ff f80d 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 4;
   1113e:	2304      	movs	r3, #4
   11140:	762b      	strb	r3, [r5, #24]
}
   11142:	bd70      	pop	{r4, r5, r6, pc}
			if (enumbuf[4] < 4 || enumbuf[5] != 3) {
   11144:	7933      	ldrb	r3, [r6, #4]
   11146:	2b03      	cmp	r3, #3
   11148:	d903      	bls.n	11152 <USBHost::enumeration(Transfer_struct const*)+0x12e>
   1114a:	7973      	ldrb	r3, [r6, #5]
   1114c:	2b03      	cmp	r3, #3
   1114e:	f000 8096 	beq.w	1127e <USBHost::enumeration(Transfer_struct const*)+0x25a>
			break;
   11152:	230b      	movs	r3, #11
				dev->enum_state = 11;
   11154:	762b      	strb	r3, [r5, #24]
   11156:	e772      	b.n	1103e <USBHost::enumeration(Transfer_struct const*)+0x1a>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11158:	4a4e      	ldr	r2, [pc, #312]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   1115a:	4b55      	ldr	r3, [pc, #340]	; (112b0 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
   1115c:	f812 0b04 	ldrb.w	r0, [r2], #4
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[0], dev->LanguageID, len);
   11160:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   11162:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
        s.word2 = wIndex | (wLength << 16);
   11166:	4853      	ldr	r0, [pc, #332]	; (112b4 <USBHost::enumeration(Transfer_struct const*)+0x290>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11168:	494f      	ldr	r1, [pc, #316]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   1116a:	4320      	orrs	r0, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1116c:	600b      	str	r3, [r1, #0]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   1116e:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   11170:	6048      	str	r0, [r1, #4]
   11172:	4628      	mov	r0, r5
   11174:	f7fe fff0 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 6;
   11178:	2306      	movs	r3, #6
   1117a:	762b      	strb	r3, [r5, #24]
}
   1117c:	bd70      	pop	{r4, r5, r6, pc}
			convertStringDescriptorToASCIIString(0, dev, transfer);
   1117e:	4622      	mov	r2, r4
   11180:	4629      	mov	r1, r5
   11182:	2000      	movs	r0, #0
   11184:	f7ff fe86 	bl	10e94 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>
			if (enumbuf[1]) dev->enum_state = 7;
   11188:	7873      	ldrb	r3, [r6, #1]
   1118a:	2b00      	cmp	r3, #0
   1118c:	d056      	beq.n	1123c <USBHost::enumeration(Transfer_struct const*)+0x218>
   1118e:	2307      	movs	r3, #7
				dev->enum_state = 11;
   11190:	762b      	strb	r3, [r5, #24]
   11192:	e754      	b.n	1103e <USBHost::enumeration(Transfer_struct const*)+0x1a>
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[1], dev->LanguageID, len);
   11194:	4a3f      	ldr	r2, [pc, #252]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11196:	4b46      	ldr	r3, [pc, #280]	; (112b0 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
   11198:	7850      	ldrb	r0, [r2, #1]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   1119a:	3204      	adds	r2, #4
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[1], dev->LanguageID, len);
   1119c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1119e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
        s.word2 = wIndex | (wLength << 16);
   111a2:	4844      	ldr	r0, [pc, #272]	; (112b4 <USBHost::enumeration(Transfer_struct const*)+0x290>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   111a4:	4940      	ldr	r1, [pc, #256]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   111a6:	4320      	orrs	r0, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   111a8:	600b      	str	r3, [r1, #0]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   111aa:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   111ac:	6048      	str	r0, [r1, #4]
   111ae:	4628      	mov	r0, r5
   111b0:	f7fe ffd2 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 8;
   111b4:	2308      	movs	r3, #8
   111b6:	762b      	strb	r3, [r5, #24]
}
   111b8:	bd70      	pop	{r4, r5, r6, pc}
			convertStringDescriptorToASCIIString(2, dev, transfer);
   111ba:	4622      	mov	r2, r4
   111bc:	4629      	mov	r1, r5
   111be:	2002      	movs	r0, #2
   111c0:	f7ff fe68 	bl	10e94 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>
   111c4:	e7c5      	b.n	11152 <USBHost::enumeration(Transfer_struct const*)+0x12e>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   111c6:	4938      	ldr	r1, [pc, #224]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   111c8:	f44f 2210 	mov.w	r2, #589824	; 0x90000
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   111cc:	483b      	ldr	r0, [pc, #236]	; (112bc <USBHost::enumeration(Transfer_struct const*)+0x298>)
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   111ce:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   111d0:	e9c1 0200 	strd	r0, r2, [r1]
   111d4:	4a2f      	ldr	r2, [pc, #188]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   111d6:	4628      	mov	r0, r5
   111d8:	f7fe ffbe 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 12;
   111dc:	230c      	movs	r3, #12
   111de:	762b      	strb	r3, [r5, #24]
}
   111e0:	bd70      	pop	{r4, r5, r6, pc}
			enumlen = enumbuf[2] | (enumbuf[3] << 8);
   111e2:	4b2c      	ldr	r3, [pc, #176]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   111e4:	885b      	ldrh	r3, [r3, #2]
			if (enumlen > sizeof(enumbuf)) {
   111e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   111ea:	d841      	bhi.n	11270 <USBHost::enumeration(Transfer_struct const*)+0x24c>
			enumlen = enumbuf[2] | (enumbuf[3] << 8);
   111ec:	4a34      	ldr	r2, [pc, #208]	; (112c0 <USBHost::enumeration(Transfer_struct const*)+0x29c>)
   111ee:	0418      	lsls	r0, r3, #16
   111f0:	8013      	strh	r3, [r2, #0]
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   111f2:	492d      	ldr	r1, [pc, #180]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			queue_Control_Transfer(dev, &enumsetup, enumbuf, NULL);
   111f4:	2300      	movs	r3, #0
   111f6:	4a31      	ldr	r2, [pc, #196]	; (112bc <USBHost::enumeration(Transfer_struct const*)+0x298>)
        s.word2 = wIndex | (wLength << 16);
   111f8:	e9c1 2000 	strd	r2, r0, [r1]
   111fc:	4a25      	ldr	r2, [pc, #148]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   111fe:	4628      	mov	r0, r5
   11200:	f7fe ffaa 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 13;
   11204:	230d      	movs	r3, #13
   11206:	762b      	strb	r3, [r5, #24]
}
   11208:	bd70      	pop	{r4, r5, r6, pc}
			dev->bmAttributes = enumbuf[7];
   1120a:	4822      	ldr	r0, [pc, #136]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   1120c:	2300      	movs	r3, #0
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1120e:	4926      	ldr	r1, [pc, #152]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
			mk_setup(enumsetup, 0, 9, enumbuf[5], 0, 0); // 9=SET_CONFIGURATION
   11210:	7942      	ldrb	r2, [r0, #5]
			dev->bmAttributes = enumbuf[7];
   11212:	79c4      	ldrb	r4, [r0, #7]
   11214:	0412      	lsls	r2, r2, #16
			dev->bMaxPower = enumbuf[8];
   11216:	7a00      	ldrb	r0, [r0, #8]
			dev->bmAttributes = enumbuf[7];
   11218:	772c      	strb	r4, [r5, #28]
   1121a:	f442 6210 	orr.w	r2, r2, #2304	; 0x900
			dev->bMaxPower = enumbuf[8];
   1121e:	7768      	strb	r0, [r5, #29]
			queue_Control_Transfer(dev, &enumsetup, NULL, NULL);
   11220:	4628      	mov	r0, r5
        s.word2 = wIndex | (wLength << 16);
   11222:	604b      	str	r3, [r1, #4]
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11224:	600a      	str	r2, [r1, #0]
   11226:	461a      	mov	r2, r3
   11228:	f7fe ff96 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 14;
   1122c:	230e      	movs	r3, #14
   1122e:	762b      	strb	r3, [r5, #24]
}
   11230:	bd70      	pop	{r4, r5, r6, pc}
			convertStringDescriptorToASCIIString(1, dev, transfer);
   11232:	4622      	mov	r2, r4
   11234:	4629      	mov	r1, r5
   11236:	2001      	movs	r0, #1
   11238:	f7ff fe2c 	bl	10e94 <USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)>
			if (enumbuf[2]) dev->enum_state = 9;
   1123c:	78b3      	ldrb	r3, [r6, #2]
   1123e:	2b00      	cmp	r3, #0
   11240:	bf0c      	ite	eq
   11242:	230b      	moveq	r3, #11
   11244:	2309      	movne	r3, #9
				dev->enum_state = 11;
   11246:	762b      	strb	r3, [r5, #24]
   11248:	e6f9      	b.n	1103e <USBHost::enumeration(Transfer_struct const*)+0x1a>
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[2], dev->LanguageID, len);
   1124a:	4a12      	ldr	r2, [pc, #72]	; (11294 <USBHost::enumeration(Transfer_struct const*)+0x270>)
   1124c:	4b18      	ldr	r3, [pc, #96]	; (112b0 <USBHost::enumeration(Transfer_struct const*)+0x28c>)
   1124e:	7890      	ldrb	r0, [r2, #2]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   11250:	3204      	adds	r2, #4
			mk_setup(enumsetup, 0x80, 6, 0x0300 | enumbuf[2], dev->LanguageID, len);
   11252:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   11254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
        s.word2 = wIndex | (wLength << 16);
   11258:	4816      	ldr	r0, [pc, #88]	; (112b4 <USBHost::enumeration(Transfer_struct const*)+0x290>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1125a:	4913      	ldr	r1, [pc, #76]	; (112a8 <USBHost::enumeration(Transfer_struct const*)+0x284>)
        s.word2 = wIndex | (wLength << 16);
   1125c:	4320      	orrs	r0, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1125e:	600b      	str	r3, [r1, #0]
			queue_Control_Transfer(dev, &enumsetup, enumbuf + 4, NULL);
   11260:	2300      	movs	r3, #0
        s.word2 = wIndex | (wLength << 16);
   11262:	6048      	str	r0, [r1, #4]
   11264:	4628      	mov	r0, r5
   11266:	f7fe ff77 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
			dev->enum_state = 10;
   1126a:	230a      	movs	r3, #10
   1126c:	762b      	strb	r3, [r5, #24]
}
   1126e:	bd70      	pop	{r4, r5, r6, pc}
				enumlen = sizeof(enumbuf);
   11270:	4b13      	ldr	r3, [pc, #76]	; (112c0 <USBHost::enumeration(Transfer_struct const*)+0x29c>)
   11272:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11276:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1127a:	801a      	strh	r2, [r3, #0]
   1127c:	e7b9      	b.n	111f2 <USBHost::enumeration(Transfer_struct const*)+0x1ce>
				dev->LanguageID = enumbuf[6] | (enumbuf[7] << 8);
   1127e:	88f2      	ldrh	r2, [r6, #6]
				if (enumbuf[0]) dev->enum_state = 5;
   11280:	7833      	ldrb	r3, [r6, #0]
				dev->LanguageID = enumbuf[6] | (enumbuf[7] << 8);
   11282:	846a      	strh	r2, [r5, #34]	; 0x22
				if (enumbuf[0]) dev->enum_state = 5;
   11284:	2b00      	cmp	r3, #0
   11286:	f43f af7f 	beq.w	11188 <USBHost::enumeration(Transfer_struct const*)+0x164>
   1128a:	2305      	movs	r3, #5
				dev->enum_state = 11;
   1128c:	762b      	strb	r3, [r5, #24]
   1128e:	e6d6      	b.n	1103e <USBHost::enumeration(Transfer_struct const*)+0x1a>
   11290:	0000fc71 	.word	0x0000fc71
   11294:	2000d7c0 	.word	0x2000d7c0
   11298:	2000fc38 	.word	0x2000fc38
   1129c:	f800ffff 	.word	0xf800ffff
   112a0:	2000fc3a 	.word	0x2000fc3a
   112a4:	2000e85c 	.word	0x2000e85c
   112a8:	2000dfc0 	.word	0x2000dfc0
   112ac:	01000680 	.word	0x01000680
   112b0:	03000680 	.word	0x03000680
   112b4:	07fc0000 	.word	0x07fc0000
   112b8:	2000d7c4 	.word	0x2000d7c4
   112bc:	02000680 	.word	0x02000680
   112c0:	2000fc28 	.word	0x2000fc28

000112c4 <USBHost::disconnect_Device(Device_struct*)>:
}


void USBHost::disconnect_Device(Device_t *dev)
{
	if (!dev) return;
   112c4:	2800      	cmp	r0, #0
   112c6:	d037      	beq.n	11338 <USBHost::disconnect_Device(Device_struct*)+0x74>
{
   112c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Disconnect all drivers using this device.  If this device is
	// a hub, the hub driver is responsible for recursively calling
	// this function to disconnect its downstream devices.
	print_driverlist("available_drivers", available_drivers);
	print_driverlist("dev->drivers", dev->drivers);
   112ca:	68c4      	ldr	r4, [r0, #12]
	for (USBDriver *p = dev->drivers; p; ) {
   112cc:	4606      	mov	r6, r0
   112ce:	b16c      	cbz	r4, 112ec <USBHost::disconnect_Device(Device_struct*)+0x28>
   112d0:	4d1a      	ldr	r5, [pc, #104]	; (1133c <USBHost::disconnect_Device(Device_struct*)+0x78>)
		println("disconnect driver ", (uint32_t)p, HEX);
		p->disconnect();
		p->device = NULL;
   112d2:	2700      	movs	r7, #0
		p->disconnect();
   112d4:	6823      	ldr	r3, [r4, #0]
   112d6:	4620      	mov	r0, r4
   112d8:	691b      	ldr	r3, [r3, #16]
   112da:	4798      	blx	r3
		p->device = NULL;
   112dc:	4623      	mov	r3, r4
		USBDriver *next = p->next;
		p->next = available_drivers;
   112de:	682a      	ldr	r2, [r5, #0]
		p->device = NULL;
   112e0:	60a7      	str	r7, [r4, #8]
		USBDriver *next = p->next;
   112e2:	6864      	ldr	r4, [r4, #4]
		available_drivers = p;
   112e4:	602b      	str	r3, [r5, #0]
		p->next = available_drivers;
   112e6:	605a      	str	r2, [r3, #4]
	for (USBDriver *p = dev->drivers; p; ) {
   112e8:	2c00      	cmp	r4, #0
   112ea:	d1f3      	bne.n	112d4 <USBHost::disconnect_Device(Device_struct*)+0x10>
		p = next;
	}
	print_driverlist("available_drivers", available_drivers);

	// delete all the pipes
	for (Pipe_t *p = dev->data_pipes; p; ) {
   112ec:	6874      	ldr	r4, [r6, #4]
   112ee:	b12c      	cbz	r4, 112fc <USBHost::disconnect_Device(Device_struct*)+0x38>
		Pipe_t *next = p->next;
   112f0:	4620      	mov	r0, r4
   112f2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		delete_Pipe(p);
   112f4:	f7ff fc42 	bl	10b7c <USBHost::delete_Pipe(Pipe_struct*)>
	for (Pipe_t *p = dev->data_pipes; p; ) {
   112f8:	2c00      	cmp	r4, #0
   112fa:	d1f9      	bne.n	112f0 <USBHost::disconnect_Device(Device_struct*)+0x2c>
		p = next;
	}
	delete_Pipe(dev->control_pipe);
   112fc:	6830      	ldr	r0, [r6, #0]
   112fe:	f7ff fc3d 	bl	10b7c <USBHost::delete_Pipe(Pipe_struct*)>

	// remove device from devlist and free its Device_t
	Device_t *prev_dev = NULL;
	for (Device_t *p = devlist; p; p = p->next) {
   11302:	4b0f      	ldr	r3, [pc, #60]	; (11340 <USBHost::disconnect_Device(Device_struct*)+0x7c>)
   11304:	681c      	ldr	r4, [r3, #0]
   11306:	b144      	cbz	r4, 1131a <USBHost::disconnect_Device(Device_struct*)+0x56>
		if (p == dev) {
   11308:	42a6      	cmp	r6, r4
   1130a:	d102      	bne.n	11312 <USBHost::disconnect_Device(Device_struct*)+0x4e>
   1130c:	e011      	b.n	11332 <USBHost::disconnect_Device(Device_struct*)+0x6e>
   1130e:	42a6      	cmp	r6, r4
   11310:	d004      	beq.n	1131c <USBHost::disconnect_Device(Device_struct*)+0x58>
	for (Device_t *p = devlist; p; p = p->next) {
   11312:	4623      	mov	r3, r4
   11314:	68a4      	ldr	r4, [r4, #8]
   11316:	2c00      	cmp	r4, #0
   11318:	d1f9      	bne.n	1130e <USBHost::disconnect_Device(Device_struct*)+0x4a>
			free_Device(p);
			break;
		}
		prev_dev = p;
	}
}
   1131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prev_dev->next = p->next;
   1131c:	68a2      	ldr	r2, [r4, #8]
   1131e:	609a      	str	r2, [r3, #8]
			if (p->strbuf != nullptr ) {
   11320:	6920      	ldr	r0, [r4, #16]
   11322:	b108      	cbz	r0, 11328 <USBHost::disconnect_Device(Device_struct*)+0x64>
				free_string_buffer(p->strbuf);
   11324:	f003 fe90 	bl	15048 <USBHost::free_string_buffer(strbuf_t*)>
			free_Device(p);
   11328:	4620      	mov	r0, r4
}
   1132a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			free_Device(p);
   1132e:	f003 be55 	b.w	14fdc <USBHost::free_Device(Device_struct*)>
				devlist = p->next;
   11332:	68a2      	ldr	r2, [r4, #8]
   11334:	601a      	str	r2, [r3, #0]
   11336:	e7f3      	b.n	11320 <USBHost::disconnect_Device(Device_struct*)+0x5c>
   11338:	4770      	bx	lr
   1133a:	bf00      	nop
   1133c:	2000e844 	.word	0x2000e844
   11340:	2000e85c 	.word	0x2000e85c

00011344 <USBHIDParser::disconnect()>:
}

// When the device goes away, we need to call disconnect_collection()
// for all drivers which claimed a top level collection
void USBHIDParser::disconnect()
{
   11344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uint32_t i=0; i < TOPUSAGE_LIST_LEN; i++) {
		USBHIDInput *driver = topusage_drivers[i];
		if (driver) {
			driver->disconnect_collection(device);
			topusage_drivers[i] = NULL;
   11346:	2700      	movs	r7, #0
{
   11348:	4605      	mov	r5, r0
   1134a:	f100 0410 	add.w	r4, r0, #16
   1134e:	f100 0628 	add.w	r6, r0, #40	; 0x28
		USBHIDInput *driver = topusage_drivers[i];
   11352:	f854 3f04 	ldr.w	r3, [r4, #4]!
			driver->disconnect_collection(device);
   11356:	4618      	mov	r0, r3
		if (driver) {
   11358:	b123      	cbz	r3, 11364 <USBHIDParser::disconnect()+0x20>
			driver->disconnect_collection(device);
   1135a:	681b      	ldr	r3, [r3, #0]
   1135c:	68a9      	ldr	r1, [r5, #8]
   1135e:	69db      	ldr	r3, [r3, #28]
   11360:	4798      	blx	r3
			topusage_drivers[i] = NULL;
   11362:	6027      	str	r7, [r4, #0]
	for (uint32_t i=0; i < TOPUSAGE_LIST_LEN; i++) {
   11364:	42b4      	cmp	r4, r6
   11366:	d1f4      	bne.n	11352 <USBHIDParser::disconnect()+0xe>
		}
	}
}
   11368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1136a:	bf00      	nop

0001136c <bitfield(unsigned char const*, unsigned long, unsigned long)>:
// Extract 1 to 32 bits from the data array, starting at bitindex.
static uint32_t bitfield(const uint8_t *data, uint32_t bitindex, uint32_t numbits)
{
	uint32_t output = 0;
	uint32_t bitcount = 0;
	data += (bitindex >> 3);
   1136c:	08cb      	lsrs	r3, r1, #3
   1136e:	eb00 0cd1 	add.w	ip, r0, r1, lsr #3
	uint32_t offset = bitindex & 7;
	if (offset) {
   11372:	f011 0107 	ands.w	r1, r1, #7
   11376:	d018      	beq.n	113aa <bitfield(unsigned char const*, unsigned long, unsigned long)+0x3e>
		output = (*data++) >> offset;
   11378:	5cc0      	ldrb	r0, [r0, r3]
   1137a:	f10c 0c01 	add.w	ip, ip, #1
   1137e:	4108      	asrs	r0, r1
		bitcount = 8 - offset;
   11380:	f1c1 0108 	rsb	r1, r1, #8
	}
	while (bitcount < numbits) {
   11384:	4291      	cmp	r1, r2
   11386:	d207      	bcs.n	11398 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x2c>
		output |= (uint32_t)(*data++) << bitcount;
   11388:	f81c 3b01 	ldrb.w	r3, [ip], #1
   1138c:	408b      	lsls	r3, r1
		bitcount += 8;
   1138e:	3108      	adds	r1, #8
	while (bitcount < numbits) {
   11390:	428a      	cmp	r2, r1
		output |= (uint32_t)(*data++) << bitcount;
   11392:	ea40 0003 	orr.w	r0, r0, r3
	while (bitcount < numbits) {
   11396:	d8f7      	bhi.n	11388 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x1c>
	}
	if (bitcount > numbits && numbits < 32) {
   11398:	428a      	cmp	r2, r1
   1139a:	d208      	bcs.n	113ae <bitfield(unsigned char const*, unsigned long, unsigned long)+0x42>
   1139c:	2a1f      	cmp	r2, #31
   1139e:	d806      	bhi.n	113ae <bitfield(unsigned char const*, unsigned long, unsigned long)+0x42>
		output &= ((1 << numbits) - 1);
   113a0:	2301      	movs	r3, #1
   113a2:	4093      	lsls	r3, r2
   113a4:	3b01      	subs	r3, #1
   113a6:	4018      	ands	r0, r3
	}
	return output;
   113a8:	4770      	bx	lr
	while (bitcount < numbits) {
   113aa:	b90a      	cbnz	r2, 113b0 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x44>
	uint32_t output = 0;
   113ac:	4610      	mov	r0, r2
}
   113ae:	4770      	bx	lr
	uint32_t output = 0;
   113b0:	4608      	mov	r0, r1
   113b2:	e7e9      	b.n	11388 <bitfield(unsigned char const*, unsigned long, unsigned long)+0x1c>

000113b4 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)>:
{
   113b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b8:	b085      	sub	sp, #20
   113ba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (len < 9+9+7) return false;
   113bc:	2f18      	cmp	r7, #24
   113be:	d903      	bls.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   113c0:	3a01      	subs	r2, #1
   113c2:	bf18      	it	ne
   113c4:	2201      	movne	r2, #1
   113c6:	b11a      	cbz	r2, 113d0 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1c>
   113c8:	2000      	movs	r0, #0
}
   113ca:	b005      	add	sp, #20
   113cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113d0:	461c      	mov	r4, r3
	uint32_t numendpoint = descriptors[4];
   113d2:	791b      	ldrb	r3, [r3, #4]
   113d4:	460e      	mov	r6, r1
	if (numendpoint < 1 || numendpoint > 2) return false;
   113d6:	1e59      	subs	r1, r3, #1
   113d8:	2901      	cmp	r1, #1
   113da:	d8f5      	bhi.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (descriptors[5] != 3) return false; // bInterfaceClass, 3 = HID
   113dc:	7961      	ldrb	r1, [r4, #5]
   113de:	2903      	cmp	r1, #3
   113e0:	d1f2      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   113e2:	4605      	mov	r5, r0
	uint32_t hidlen = descriptors[9];
   113e4:	7a60      	ldrb	r0, [r4, #9]
	if (hidlen < 9) return false;
   113e6:	2808      	cmp	r0, #8
   113e8:	d9ee      	bls.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (descriptors[10] != 33) return false; // descriptor type, 33=HID
   113ea:	f894 c00a 	ldrb.w	ip, [r4, #10]
   113ee:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
   113f2:	d1e9      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (descriptors[14] < 1) return false;  // must be at least 1 extra descriptor
   113f4:	f894 c00e 	ldrb.w	ip, [r4, #14]
   113f8:	f1bc 0f00 	cmp.w	ip, #0
   113fc:	d0e4      	beq.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (hidlen != (uint32_t)(6 + descriptors[14] * 3)) return false; // must be correct size
   113fe:	f04f 0e06 	mov.w	lr, #6
   11402:	fb11 e10c 	smlabb	r1, r1, ip, lr
   11406:	4281      	cmp	r1, r0
   11408:	d1de      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (9 + hidlen > len) return false;
   1140a:	f100 0809 	add.w	r8, r0, #9
   1140e:	4547      	cmp	r7, r8
   11410:	d3da      	bcc.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   11412:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   11416:	f104 0e0f 	add.w	lr, r4, #15
   1141a:	e002      	b.n	11422 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x6e>
		if (i >= descriptors[14]) return false;
   1141c:	3203      	adds	r2, #3
   1141e:	4594      	cmp	ip, r2
   11420:	d0d2      	beq.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[15 + i * 3] == 34) { // found HID report descriptor
   11422:	f81e 1002 	ldrb.w	r1, [lr, r2]
   11426:	2922      	cmp	r1, #34	; 0x22
   11428:	d1f8      	bne.n	1141c <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x68>
			descsize = descriptors[16 + i * 3] | (descriptors[17 + i * 3] << 8);
   1142a:	4422      	add	r2, r4
	if (descsize > _big_buffer_size) return false; // can't fit the report descriptor
   1142c:	f8b5 173c 	ldrh.w	r1, [r5, #1852]	; 0x73c
			descsize = descriptors[16 + i * 3] | (descriptors[17 + i * 3] << 8);
   11430:	f892 c011 	ldrb.w	ip, [r2, #17]
   11434:	7c12      	ldrb	r2, [r2, #16]
   11436:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
	if (descsize > _big_buffer_size) return false; // can't fit the report descriptor
   1143a:	4291      	cmp	r1, r2
			descsize = descriptors[16 + i * 3] | (descriptors[17 + i * 3] << 8);
   1143c:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	if (descsize > _big_buffer_size) return false; // can't fit the report descriptor
   11440:	d3c2      	bcc.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (len < offset + numendpoint * 7) return false; // not enough data
   11442:	2207      	movs	r2, #7
   11444:	fb12 8203 	smlabb	r2, r2, r3, r8
   11448:	4297      	cmp	r7, r2
   1144a:	d3bd      	bcc.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
	if (numendpoint == 1) {
   1144c:	2b01      	cmp	r3, #1
   1144e:	d07a      	beq.n	11546 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x192>
		if (descriptors[offset] != 7) return false;
   11450:	f814 3008 	ldrb.w	r3, [r4, r8]
   11454:	2b07      	cmp	r3, #7
   11456:	d1b7      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+1] != 5) return false; // endpoint descriptor
   11458:	4420      	add	r0, r4
   1145a:	7a83      	ldrb	r3, [r0, #10]
   1145c:	2b05      	cmp	r3, #5
   1145e:	d1b3      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+3] != 3) return false; // must be interrupt type
   11460:	7b03      	ldrb	r3, [r0, #12]
   11462:	2b03      	cmp	r3, #3
   11464:	d1b0      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t endpoint1 = descriptors[offset+2];
   11466:	f890 a00b 	ldrb.w	sl, [r0, #11]
		uint32_t interval1 = descriptors[offset+6];
   1146a:	7bc3      	ldrb	r3, [r0, #15]
		if ((endpoint1 & 0x0F) == 0) return false;
   1146c:	f01a 020f 	ands.w	r2, sl, #15
		uint32_t size1 = descriptors[offset+4] | (descriptors[offset+5] << 8);
   11470:	7b47      	ldrb	r7, [r0, #13]
   11472:	f890 e00e 	ldrb.w	lr, [r0, #14]
		uint32_t interval1 = descriptors[offset+6];
   11476:	9302      	str	r3, [sp, #8]
		if ((endpoint1 & 0x0F) == 0) return false;
   11478:	d0a6      	beq.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+7] != 7) return false;
   1147a:	7c03      	ldrb	r3, [r0, #16]
   1147c:	2b07      	cmp	r3, #7
   1147e:	d1a3      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+8] != 5) return false; // endpoint descriptor
   11480:	7c43      	ldrb	r3, [r0, #17]
   11482:	2b05      	cmp	r3, #5
   11484:	d1a0      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+10] != 3) return false; // must be interrupt type
   11486:	7cc1      	ldrb	r1, [r0, #19]
   11488:	2903      	cmp	r1, #3
   1148a:	d19d      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t interval2 = descriptors[offset+13];
   1148c:	7d83      	ldrb	r3, [r0, #22]
		uint32_t endpoint2 = descriptors[offset+9];
   1148e:	f890 8012 	ldrb.w	r8, [r0, #18]
		uint32_t interval2 = descriptors[offset+13];
   11492:	9303      	str	r3, [sp, #12]
		if ((endpoint2 & 0x0F) == 0) return false;
   11494:	f018 030f 	ands.w	r3, r8, #15
		uint32_t size2 = descriptors[offset+11] | (descriptors[offset+12] << 8);
   11498:	f890 9014 	ldrb.w	r9, [r0, #20]
   1149c:	f890 c015 	ldrb.w	ip, [r0, #21]
		if ((endpoint2 & 0x0F) == 0) return false;
   114a0:	d092      	beq.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   114a2:	f00a 0bf0 	and.w	fp, sl, #240	; 0xf0
		uint32_t size1 = descriptors[offset+4] | (descriptors[offset+5] << 8);
   114a6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
		uint32_t size2 = descriptors[offset+11] | (descriptors[offset+12] << 8);
   114aa:	ea49 290c 	orr.w	r9, r9, ip, lsl #8
		if (((endpoint1 & 0xF0) == 0x80) && ((endpoint2 & 0xF0) == 0)) {
   114ae:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   114b2:	d071      	beq.n	11598 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e4>
		} else if (((endpoint1 & 0xF0) == 0) && ((endpoint2 & 0xF0) == 0x80)) {
   114b4:	f1bb 0f00 	cmp.w	fp, #0
   114b8:	d186      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   114ba:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
   114be:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
   114c2:	d181      	bne.n	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
			in_pipe = new_Pipe(dev, 3, endpoint2 & 0x0F, 1, size2, interval2);
   114c4:	9a03      	ldr	r2, [sp, #12]
   114c6:	4630      	mov	r0, r6
   114c8:	f8cd 9000 	str.w	r9, [sp]
   114cc:	9201      	str	r2, [sp, #4]
   114ce:	461a      	mov	r2, r3
   114d0:	2301      	movs	r3, #1
   114d2:	9103      	str	r1, [sp, #12]
   114d4:	f7ff faac 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			out_pipe = new_Pipe(dev, 3, endpoint1, 0, size1, interval1);
   114d8:	9b02      	ldr	r3, [sp, #8]
   114da:	4652      	mov	r2, sl
   114dc:	9903      	ldr	r1, [sp, #12]
   114de:	9301      	str	r3, [sp, #4]
   114e0:	465b      	mov	r3, fp
			in_pipe = new_Pipe(dev, 3, endpoint2 & 0x0F, 1, size2, interval2);
   114e2:	60e8      	str	r0, [r5, #12]
			out_pipe = new_Pipe(dev, 3, endpoint1, 0, size1, interval1);
   114e4:	4630      	mov	r0, r6
   114e6:	9700      	str	r7, [sp, #0]
			out_size = size1;
   114e8:	b2bf      	uxth	r7, r7
			out_pipe = new_Pipe(dev, 3, endpoint1, 0, size1, interval1);
   114ea:	f7ff faa1 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			in_size = size2;
   114ee:	fa1f f389 	uxth.w	r3, r9
			in_size = size1;
   114f2:	85ab      	strh	r3, [r5, #44]	; 0x2c
		out_pipe->callback_function = out_callback;
   114f4:	4b36      	ldr	r3, [pc, #216]	; (115d0 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x21c>)
			out_pipe = new_Pipe(dev, 3, endpoint2, 0, size2, interval2);
   114f6:	6128      	str	r0, [r5, #16]
			out_size = size2;
   114f8:	85ef      	strh	r7, [r5, #46]	; 0x2e
		out_pipe->callback_function = out_callback;
   114fa:	63c3      	str	r3, [r0, #60]	; 0x3c
	in_pipe->callback_function = in_callback;
   114fc:	68eb      	ldr	r3, [r5, #12]
	queue_Control_Transfer(dev, &setup, _bigBuffer, this);
   114fe:	4630      	mov	r0, r6
	in_pipe->callback_function = in_callback;
   11500:	4a34      	ldr	r2, [pc, #208]	; (115d4 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x220>)
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11502:	4935      	ldr	r1, [pc, #212]	; (115d8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x224>)
   11504:	63da      	str	r2, [r3, #60]	; 0x3c
		topusage_drivers[i] = NULL;
   11506:	2300      	movs	r3, #0
   11508:	e9c5 3305 	strd	r3, r3, [r5, #20]
   1150c:	e9c5 3307 	strd	r3, r3, [r5, #28]
   11510:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
	bInterfaceNumber = descriptors[2];	// save away the interface number; 
   11514:	78a2      	ldrb	r2, [r4, #2]
	mk_setup(setup, 0x81, 6, 0x2200, descriptors[2], descsize); // get report desc
   11516:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
	bInterfaceNumber = descriptors[2];	// save away the interface number; 
   1151a:	f885 273e 	strb.w	r2, [r5, #1854]	; 0x73e
	bInterfaceSubClass = descriptors[6]; // likewise sub type and protocol.
   1151e:	79a2      	ldrb	r2, [r4, #6]
   11520:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
	bInterfaceProtocol = descriptors[7];
   11524:	79e2      	ldrb	r2, [r4, #7]
   11526:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
	mk_setup(setup, 0x81, 6, 0x2200, descriptors[2], descsize); // get report desc
   1152a:	78a2      	ldrb	r2, [r4, #2]
        s.word2 = wIndex | (wLength << 16);
   1152c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
	queue_Control_Transfer(dev, &setup, _bigBuffer, this);
   11530:	462b      	mov	r3, r5
   11532:	e9c5 120d 	strd	r1, r2, [r5, #52]	; 0x34
   11536:	f505 7266 	add.w	r2, r5, #920	; 0x398
   1153a:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1153e:	f7fe fe0b 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	return true;
   11542:	2001      	movs	r0, #1
   11544:	e741      	b.n	113ca <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x16>
		if (descriptors[offset] != 7) return false;
   11546:	f814 2008 	ldrb.w	r2, [r4, r8]
   1154a:	2a07      	cmp	r2, #7
   1154c:	f47f af3c 	bne.w	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+1] != 5) return false; // endpoint descriptor
   11550:	4420      	add	r0, r4
   11552:	7a82      	ldrb	r2, [r0, #10]
   11554:	2a05      	cmp	r2, #5
   11556:	f47f af37 	bne.w	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if (descriptors[offset+3] != 3) return false; // must be interrupt type
   1155a:	7b01      	ldrb	r1, [r0, #12]
   1155c:	2903      	cmp	r1, #3
   1155e:	f47f af33 	bne.w	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t endpoint = descriptors[offset+2];
   11562:	7ac7      	ldrb	r7, [r0, #11]
		uint32_t size = descriptors[offset+4] | (descriptors[offset+5] << 8);
   11564:	f890 c00d 	ldrb.w	ip, [r0, #13]
		if ((endpoint & 0x0F) == 0) return false;
   11568:	f017 020f 	ands.w	r2, r7, #15
		uint32_t size = descriptors[offset+4] | (descriptors[offset+5] << 8);
   1156c:	f890 e00e 	ldrb.w	lr, [r0, #14]
		uint32_t interval = descriptors[offset+6];
   11570:	7bc0      	ldrb	r0, [r0, #15]
		if ((endpoint & 0x0F) == 0) return false;
   11572:	f43f af29 	beq.w	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		if ((endpoint & 0xF0) != 0x80) return false; // must be IN direction
   11576:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
   1157a:	2f80      	cmp	r7, #128	; 0x80
   1157c:	f47f af24 	bne.w	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
		uint32_t size = descriptors[offset+4] | (descriptors[offset+5] << 8);
   11580:	ea4c 270e 	orr.w	r7, ip, lr, lsl #8
		in_pipe = new_Pipe(dev, 3, endpoint & 0x0F, 1, size, interval);
   11584:	e9cd 7000 	strd	r7, r0, [sp]
   11588:	4630      	mov	r0, r6
   1158a:	f7ff fa51 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
		out_pipe = NULL;
   1158e:	2300      	movs	r3, #0
		in_size = size;
   11590:	85af      	strh	r7, [r5, #44]	; 0x2c
		in_pipe = new_Pipe(dev, 3, endpoint & 0x0F, 1, size, interval);
   11592:	60e8      	str	r0, [r5, #12]
		out_pipe = NULL;
   11594:	612b      	str	r3, [r5, #16]
		in_size = size;
   11596:	e7b1      	b.n	114fc <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x148>
		if (((endpoint1 & 0xF0) == 0x80) && ((endpoint2 & 0xF0) == 0)) {
   11598:	f018 0af0 	ands.w	sl, r8, #240	; 0xf0
   1159c:	f47f af14 	bne.w	113c8 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
			in_pipe = new_Pipe(dev, 3, endpoint1 & 0x0F, 1, size1, interval1);
   115a0:	9b02      	ldr	r3, [sp, #8]
   115a2:	4630      	mov	r0, r6
   115a4:	9102      	str	r1, [sp, #8]
   115a6:	e9cd 7300 	strd	r7, r3, [sp]
   115aa:	2301      	movs	r3, #1
   115ac:	f7ff fa40 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			out_pipe = new_Pipe(dev, 3, endpoint2, 0, size2, interval2);
   115b0:	9b03      	ldr	r3, [sp, #12]
   115b2:	4642      	mov	r2, r8
   115b4:	9902      	ldr	r1, [sp, #8]
   115b6:	9301      	str	r3, [sp, #4]
   115b8:	4653      	mov	r3, sl
			in_pipe = new_Pipe(dev, 3, endpoint1 & 0x0F, 1, size1, interval1);
   115ba:	60e8      	str	r0, [r5, #12]
			out_pipe = new_Pipe(dev, 3, endpoint2, 0, size2, interval2);
   115bc:	4630      	mov	r0, r6
   115be:	f8cd 9000 	str.w	r9, [sp]
   115c2:	f7ff fa35 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			in_size = size1;
   115c6:	b2bb      	uxth	r3, r7
			out_size = size2;
   115c8:	fa1f f789 	uxth.w	r7, r9
   115cc:	e791      	b.n	114f2 <USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x13e>
   115ce:	bf00      	nop
   115d0:	0001166d 	.word	0x0001166d
   115d4:	000120a9 	.word	0x000120a9
   115d8:	22000681 	.word	0x22000681

000115dc <USBHIDParser::timer_event(USBDriverTimer*)>:
	if (topusage_drivers[0]) {
   115dc:	6940      	ldr	r0, [r0, #20]
   115de:	b120      	cbz	r0, 115ea <USBHIDParser::timer_event(USBDriverTimer*)+0xe>
		topusage_drivers[0]->hid_timer_event(whichTimer);
   115e0:	6803      	ldr	r3, [r0, #0]
   115e2:	4a03      	ldr	r2, [pc, #12]	; (115f0 <USBHIDParser::timer_event(USBDriverTimer*)+0x14>)
   115e4:	6a1b      	ldr	r3, [r3, #32]
   115e6:	4293      	cmp	r3, r2
   115e8:	d100      	bne.n	115ec <USBHIDParser::timer_event(USBDriverTimer*)+0x10>
}
   115ea:	4770      	bx	lr
		topusage_drivers[0]->hid_timer_event(whichTimer);
   115ec:	4718      	bx	r3
   115ee:	bf00      	nop
   115f0:	0000fdc9 	.word	0x0000fdc9

000115f4 <USBHIDParser::init()>:
{
   115f4:	b510      	push	{r4, lr}
   115f6:	4604      	mov	r4, r0
	contribute_Pipes(mypipes, sizeof(mypipes)/sizeof(Pipe_t));
   115f8:	2103      	movs	r1, #3
   115fa:	30c0      	adds	r0, #192	; 0xc0
   115fc:	f003 fd44 	bl	15088 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>
	contribute_Transfers(mytransfers, sizeof(mytransfers)/sizeof(Transfer_t));
   11600:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   11604:	2105      	movs	r1, #5
   11606:	f003 fd57 	bl	150b8 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>
	contribute_String_Buffers(mystring_bufs, sizeof(mystring_bufs)/sizeof(strbuf_t));
   1160a:	f504 7048 	add.w	r0, r4, #800	; 0x320
   1160e:	2101      	movs	r1, #1
   11610:	f003 fd6c 	bl	150ec <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>
	driver_ready_for_device(this);
   11614:	4620      	mov	r0, r4
}
   11616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	driver_ready_for_device(this);
   1161a:	f7ff bbd9 	b.w	10dd0 <USBHost::driver_ready_for_device(USBDriver*)>
   1161e:	bf00      	nop

00011620 <USBHIDParser::out_data(Transfer_struct const*)>:
{
   11620:	b530      	push	{r4, r5, lr}
   11622:	f500 7359 	add.w	r3, r0, #868	; 0x364
	const uint8_t *buffer = (const uint8_t *)transfer->buffer;
   11626:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	for(uint8_t i = 0; i < 4; i++) {
   11628:	f500 7e5d 	add.w	lr, r0, #884	; 0x374
	uint8_t mask = 1;
   1162c:	2201      	movs	r2, #1
		if (buffer == _tx[i]) {
   1162e:	f853 4f04 	ldr.w	r4, [r3, #4]!
		mask <<= 1;
   11632:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (buffer == _tx[i]) {
   11636:	42ac      	cmp	r4, r5
   11638:	d00e      	beq.n	11658 <USBHIDParser::out_data(Transfer_struct const*)+0x38>
	for(uint8_t i = 0; i < 4; i++) {
   1163a:	4573      	cmp	r3, lr
		mask <<= 1;
   1163c:	fa5f f28c 	uxtb.w	r2, ip
	for(uint8_t i = 0; i < 4; i++) {
   11640:	d1f5      	bne.n	1162e <USBHIDParser::out_data(Transfer_struct const*)+0xe>
	if (topusage_drivers[0]) {
   11642:	6940      	ldr	r0, [r0, #20]
   11644:	b120      	cbz	r0, 11650 <USBHIDParser::out_data(Transfer_struct const*)+0x30>
		topusage_drivers[0]->hid_process_out_data(transfer);
   11646:	6803      	ldr	r3, [r0, #0]
   11648:	4a07      	ldr	r2, [pc, #28]	; (11668 <USBHIDParser::out_data(Transfer_struct const*)+0x48>)
   1164a:	689b      	ldr	r3, [r3, #8]
   1164c:	4293      	cmp	r3, r2
   1164e:	d100      	bne.n	11652 <USBHIDParser::out_data(Transfer_struct const*)+0x32>
}
   11650:	bd30      	pop	{r4, r5, pc}
   11652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		topusage_drivers[0]->hid_process_out_data(transfer);
   11656:	4718      	bx	r3
			_tx_state &= ~mask;
   11658:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
   1165c:	ea23 0302 	bic.w	r3, r3, r2
   11660:	f880 3378 	strb.w	r3, [r0, #888]	; 0x378
			break;
   11664:	e7ed      	b.n	11642 <USBHIDParser::out_data(Transfer_struct const*)+0x22>
   11666:	bf00      	nop
   11668:	0000fdc5 	.word	0x0000fdc5

0001166c <USBHIDParser::out_callback(Transfer_struct const*)>:
{
   1166c:	4601      	mov	r1, r0
	if (transfer->driver) {
   1166e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   11670:	b108      	cbz	r0, 11676 <USBHIDParser::out_callback(Transfer_struct const*)+0xa>
		((USBHIDParser*)(transfer->driver))->out_data(transfer);
   11672:	f7ff bfd5 	b.w	11620 <USBHIDParser::out_data(Transfer_struct const*)>
}
   11676:	4770      	bx	lr

00011678 <USBHIDParser::sendPacket(unsigned char const*, int)>:
	if (!out_size || !out_pipe) return false;	
   11678:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1167a:	2b00      	cmp	r3, #0
   1167c:	d049      	beq.n	11712 <USBHIDParser::sendPacket(unsigned char const*, int)+0x9a>
bool USBHIDParser::sendPacket(const uint8_t *buffer, int cb) {
   1167e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11682:	4615      	mov	r5, r2
	if (!out_size || !out_pipe) return false;	
   11684:	6902      	ldr	r2, [r0, #16]
   11686:	4604      	mov	r4, r0
   11688:	2a00      	cmp	r2, #0
   1168a:	d03f      	beq.n	1170c <USBHIDParser::sendPacket(unsigned char const*, int)+0x94>
	if (!_tx[0]) {
   1168c:	f8d0 2368 	ldr.w	r2, [r0, #872]	; 0x368
   11690:	2a00      	cmp	r2, #0
   11692:	d040      	beq.n	11716 <USBHIDParser::sendPacket(unsigned char const*, int)+0x9e>
	if ((_tx_state & _tx_mask) == _tx_mask) return false; 	// both transmit buffers are full
   11694:	f890 0379 	ldrb.w	r0, [r0, #889]	; 0x379
   11698:	f894 7378 	ldrb.w	r7, [r4, #888]	; 0x378
   1169c:	ea30 0207 	bics.w	r2, r0, r7
   116a0:	d034      	beq.n	1170c <USBHIDParser::sendPacket(unsigned char const*, int)+0x94>
		cb = out_size;
   116a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   116a6:	bf08      	it	eq
   116a8:	461d      	moveq	r5, r3
	uint8_t *p = _tx[0];
   116aa:	f8d4 6368 	ldr.w	r6, [r4, #872]	; 0x368
	for (uint8_t i = 0; i < 4; i++ ) {
   116ae:	2200      	movs	r2, #0
	uint8_t mask = 0x1;
   116b0:	2301      	movs	r3, #1
		if ((mask & _tx_mask ) == 0) return false; // none found
   116b2:	4218      	tst	r0, r3
	for (uint8_t i = 0; i < 4; i++ ) {
   116b4:	f102 0e01 	add.w	lr, r2, #1
		mask <<=1;
   116b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
		if ((mask & _tx_mask ) == 0) return false; // none found
   116bc:	d026      	beq.n	1170c <USBHIDParser::sendPacket(unsigned char const*, int)+0x94>
		if ((mask & _tx_state) == 0) {
   116be:	421f      	tst	r7, r3
   116c0:	d037      	beq.n	11732 <USBHIDParser::sendPacket(unsigned char const*, int)+0xba>
	for (uint8_t i = 0; i < 4; i++ ) {
   116c2:	fa5f f28e 	uxtb.w	r2, lr
		mask <<=1;
   116c6:	fa5f f38c 	uxtb.w	r3, ip
	for (uint8_t i = 0; i < 4; i++ ) {
   116ca:	2a04      	cmp	r2, #4
   116cc:	d1f1      	bne.n	116b2 <USBHIDParser::sendPacket(unsigned char const*, int)+0x3a>
	memcpy(p, buffer, cb);	
   116ce:	462a      	mov	r2, r5
   116d0:	4630      	mov	r0, r6
   116d2:	f004 ffe7 	bl	166a4 <memcpy>
    if ((uint32_t)p >= 0x20200000u) arm_dcache_flush_delete(p, cb);
   116d6:	4b1a      	ldr	r3, [pc, #104]	; (11740 <USBHIDParser::sendPacket(unsigned char const*, int)+0xc8>)
   116d8:	429e      	cmp	r6, r3
   116da:	d90f      	bls.n	116fc <USBHIDParser::sendPacket(unsigned char const*, int)+0x84>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   116dc:	f026 031f 	bic.w	r3, r6, #31
	uint32_t end_addr = (uint32_t)addr + size;
   116e0:	1971      	adds	r1, r6, r5
	asm volatile("": : :"memory");
	asm("dsb");
   116e2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   116e6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   116ea:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
   116ee:	3320      	adds	r3, #32
	} while (location < end_addr);
   116f0:	4299      	cmp	r1, r3
   116f2:	d8fa      	bhi.n	116ea <USBHIDParser::sendPacket(unsigned char const*, int)+0x72>
	asm("dsb");
   116f4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   116f8:	f3bf 8f6f 	isb	sy
	bool fReturn = queue_Data_Transfer(out_pipe, p, cb, this);
   116fc:	4623      	mov	r3, r4
   116fe:	462a      	mov	r2, r5
   11700:	4631      	mov	r1, r6
   11702:	6920      	ldr	r0, [r4, #16]
}
   11704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bool fReturn = queue_Data_Transfer(out_pipe, p, cb, this);
   11708:	f7fe bdc0 	b.w	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
}
   1170c:	2000      	movs	r0, #0
   1170e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11712:	2000      	movs	r0, #0
   11714:	4770      	bx	lr
		_tx[0] = _bigBufferEnd - out_size;
   11716:	f8d0 2738 	ldr.w	r2, [r0, #1848]	; 0x738
   1171a:	1ad2      	subs	r2, r2, r3
   1171c:	f8c0 2368 	str.w	r2, [r0, #872]	; 0x368
		_tx[1] = _tx[0] - out_size;
   11720:	1ad2      	subs	r2, r2, r3
   11722:	f8c0 236c 	str.w	r2, [r0, #876]	; 0x36c
		_bigBufferEnd = _tx[1];
   11726:	f8c0 2738 	str.w	r2, [r0, #1848]	; 0x738
		_tx_mask = 3;
   1172a:	2003      	movs	r0, #3
   1172c:	f884 0379 	strb.w	r0, [r4, #889]	; 0x379
   11730:	e7b2      	b.n	11698 <USBHIDParser::sendPacket(unsigned char const*, int)+0x20>
			_tx_state |= mask;
   11732:	431f      	orrs	r7, r3
			p = _tx[i];
   11734:	32da      	adds	r2, #218	; 0xda
			_tx_state |= mask;
   11736:	f884 7378 	strb.w	r7, [r4, #888]	; 0x378
			p = _tx[i];
   1173a:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
			break;
   1173e:	e7c6      	b.n	116ce <USBHIDParser::sendPacket(unsigned char const*, int)+0x56>
   11740:	201fffff 	.word	0x201fffff

00011744 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)>:
{
   11744:	b430      	push	{r4, r5}
   11746:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
	if (buffer1) _tx[index++] = buffer1;
   1174a:	b1f9      	cbz	r1, 1178c <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x48>
   1174c:	f8c0 1368 	str.w	r1, [r0, #872]	; 0x368
   11750:	2101      	movs	r1, #1
   11752:	460b      	mov	r3, r1
	if (buffer2) _tx[index++] = buffer2;
   11754:	b12a      	cbz	r2, 11762 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x1e>
   11756:	3301      	adds	r3, #1
   11758:	31da      	adds	r1, #218	; 0xda
   1175a:	b2db      	uxtb	r3, r3
   1175c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	if (buffer3) _tx[index++] = buffer3;
   11760:	4619      	mov	r1, r3
   11762:	b12d      	cbz	r5, 11770 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x2c>
   11764:	3301      	adds	r3, #1
   11766:	31da      	adds	r1, #218	; 0xda
   11768:	b2db      	uxtb	r3, r3
   1176a:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	if (buffer4) _tx[index++] = buffer4;
   1176e:	4619      	mov	r1, r3
   11770:	b12c      	cbz	r4, 1177e <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x3a>
   11772:	3301      	adds	r3, #1
   11774:	f101 02da 	add.w	r2, r1, #218	; 0xda
	_tx_mask = (1 << index) - 1; // 2 by default 1<< 2 =4 -1 = 3...
   11778:	b2d9      	uxtb	r1, r3
	if (buffer4) _tx[index++] = buffer4;
   1177a:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	_tx_mask = (1 << index) - 1; // 2 by default 1<< 2 =4 -1 = 3...
   1177e:	2301      	movs	r3, #1
   11780:	408b      	lsls	r3, r1
   11782:	3b01      	subs	r3, #1
}
   11784:	bc30      	pop	{r4, r5}
	_tx_mask = (1 << index) - 1; // 2 by default 1<< 2 =4 -1 = 3...
   11786:	f880 3379 	strb.w	r3, [r0, #889]	; 0x379
}
   1178a:	4770      	bx	lr
	uint8_t index = 0;
   1178c:	460b      	mov	r3, r1
   1178e:	e7e1      	b.n	11754 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)+0x10>

00011790 <USBHIDParser::sendControlPacket(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void*)>:
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   11790:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
{
   11794:	b410      	push	{r4}
   11796:	ea42 4103 	orr.w	r1, r2, r3, lsl #16
   1179a:	9c02      	ldr	r4, [sp, #8]
        s.word2 = wIndex | (wLength << 16);
   1179c:	9b01      	ldr	r3, [sp, #4]
	bool fReturn =  queue_Control_Transfer(device, &setup, buf, this);
   1179e:	9a03      	ldr	r2, [sp, #12]
   117a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   117a4:	4603      	mov	r3, r0
   117a6:	e9c0 140d 	strd	r1, r4, [r0, #52]	; 0x34
   117aa:	f100 0134 	add.w	r1, r0, #52	; 0x34
}
   117ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	bool fReturn =  queue_Control_Transfer(device, &setup, buf, this);
   117b2:	6880      	ldr	r0, [r0, #8]
   117b4:	f7fe bcd0 	b.w	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>

000117b8 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)>:
	if (available_hid_drivers_list == NULL) {
   117b8:	4a06      	ldr	r2, [pc, #24]	; (117d4 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)+0x1c>)
	driver->next = NULL;
   117ba:	2100      	movs	r1, #0
	if (available_hid_drivers_list == NULL) {
   117bc:	6813      	ldr	r3, [r2, #0]
	driver->next = NULL;
   117be:	6041      	str	r1, [r0, #4]
	if (available_hid_drivers_list == NULL) {
   117c0:	b12b      	cbz	r3, 117ce <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)+0x16>
		while (last->next) last = last->next;
   117c2:	461a      	mov	r2, r3
   117c4:	685b      	ldr	r3, [r3, #4]
   117c6:	2b00      	cmp	r3, #0
   117c8:	d1fb      	bne.n	117c2 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)+0xa>
		last->next = driver;
   117ca:	6050      	str	r0, [r2, #4]
}
   117cc:	4770      	bx	lr
		available_hid_drivers_list = driver;
   117ce:	6010      	str	r0, [r2, #0]
   117d0:	4770      	bx	lr
   117d2:	bf00      	nop
   117d4:	2000e864 	.word	0x2000e864

000117d8 <USBHIDParser::find_driver(unsigned long)>:
{
   117d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBHIDInput *driver = available_hid_drivers_list;
   117da:	4b0d      	ldr	r3, [pc, #52]	; (11810 <USBHIDParser::find_driver(unsigned long)+0x38>)
   117dc:	681c      	ldr	r4, [r3, #0]
	while (driver) {
   117de:	b1a4      	cbz	r4, 1180a <USBHIDParser::find_driver(unsigned long)+0x32>
   117e0:	4605      	mov	r5, r0
   117e2:	460f      	mov	r7, r1
   117e4:	e001      	b.n	117ea <USBHIDParser::find_driver(unsigned long)+0x12>
		driver = driver->next;
   117e6:	6864      	ldr	r4, [r4, #4]
	while (driver) {
   117e8:	b17c      	cbz	r4, 1180a <USBHIDParser::find_driver(unsigned long)+0x32>
		if ((claim_type = driver->claim_collection(this, device, topusage)) != CLAIM_NO) {
   117ea:	6826      	ldr	r6, [r4, #0]
   117ec:	4620      	mov	r0, r4
   117ee:	463b      	mov	r3, r7
   117f0:	68aa      	ldr	r2, [r5, #8]
   117f2:	6836      	ldr	r6, [r6, #0]
   117f4:	4629      	mov	r1, r5
   117f6:	47b0      	blx	r6
   117f8:	2800      	cmp	r0, #0
   117fa:	d0f4      	beq.n	117e6 <USBHIDParser::find_driver(unsigned long)+0xe>
			if (claim_type == CLAIM_INTERFACE) hid_driver_claimed_control_ = true;
   117fc:	2802      	cmp	r0, #2
   117fe:	d105      	bne.n	1180c <USBHIDParser::find_driver(unsigned long)+0x34>
   11800:	2301      	movs	r3, #1
}
   11802:	4620      	mov	r0, r4
			if (claim_type == CLAIM_INTERFACE) hid_driver_claimed_control_ = true;
   11804:	f885 337a 	strb.w	r3, [r5, #890]	; 0x37a
}
   11808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1180a:	2400      	movs	r4, #0
}
   1180c:	4620      	mov	r0, r4
   1180e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11810:	2000e864 	.word	0x2000e864

00011814 <USBHIDParser::parse()>:
{
   11814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint8_t *p = _bigBuffer;
   11818:	f500 7466 	add.w	r4, r0, #920	; 0x398
	const uint8_t *end = p + descsize;
   1181c:	f8b0 50bc 	ldrh.w	r5, [r0, #188]	; 0xbc
	use_report_id = false;
   11820:	2600      	movs	r6, #0
{
   11822:	4680      	mov	r8, r0
	const uint8_t *end = p + descsize;
   11824:	4425      	add	r5, r4
	use_report_id = false;
   11826:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
	while (p < end) {
   1182a:	42ac      	cmp	r4, r5
   1182c:	d229      	bcs.n	11882 <USBHIDParser::parse()+0x6e>
	uint8_t collection_level = 0;
   1182e:	4637      	mov	r7, r6
	uint16_t usage = 0;
   11830:	4631      	mov	r1, r6
	uint16_t usage_page = 0;
   11832:	46b1      	mov	r9, r6
			use_report_id = true;
   11834:	f04f 0a01 	mov.w	sl, #1
		uint8_t tag = *p;
   11838:	7823      	ldrb	r3, [r4, #0]
		if (tag == 0xFE) { // Long Item
   1183a:	2bfe      	cmp	r3, #254	; 0xfe
   1183c:	d046      	beq.n	118cc <USBHIDParser::parse()+0xb8>
		switch (tag & 0x03) { // Short Item data
   1183e:	f003 0203 	and.w	r2, r3, #3
   11842:	2a02      	cmp	r2, #2
   11844:	d04c      	beq.n	118e0 <USBHIDParser::parse()+0xcc>
   11846:	2a03      	cmp	r2, #3
   11848:	d046      	beq.n	118d8 <USBHIDParser::parse()+0xc4>
   1184a:	2a01      	cmp	r2, #1
   1184c:	d041      	beq.n	118d2 <USBHIDParser::parse()+0xbe>
			p++;
   1184e:	3401      	adds	r4, #1
		  case 0: val = 0;
   11850:	2200      	movs	r2, #0
		if (p > end) break;
   11852:	42ac      	cmp	r4, r5
   11854:	d813      	bhi.n	1187e <USBHIDParser::parse()+0x6a>
		switch (tag & 0xFC) {
   11856:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1185a:	2b84      	cmp	r3, #132	; 0x84
   1185c:	d046      	beq.n	118ec <USBHIDParser::parse()+0xd8>
   1185e:	d92a      	bls.n	118b6 <USBHIDParser::parse()+0xa2>
   11860:	2bb0      	cmp	r3, #176	; 0xb0
   11862:	d02c      	beq.n	118be <USBHIDParser::parse()+0xaa>
   11864:	d820      	bhi.n	118a8 <USBHIDParser::parse()+0x94>
   11866:	2b90      	cmp	r3, #144	; 0x90
   11868:	d029      	beq.n	118be <USBHIDParser::parse()+0xaa>
   1186a:	2ba0      	cmp	r3, #160	; 0xa0
   1186c:	d105      	bne.n	1187a <USBHIDParser::parse()+0x66>
			if (collection_level == 0 && topusage_count < TOPUSAGE_LIST_LEN) {
   1186e:	b90f      	cbnz	r7, 11874 <USBHIDParser::parse()+0x60>
   11870:	2e05      	cmp	r6, #5
   11872:	d942      	bls.n	118fa <USBHIDParser::parse()+0xe6>
			collection_level++;
   11874:	3701      	adds	r7, #1
			usage = 0;
   11876:	2100      	movs	r1, #0
			collection_level++;
   11878:	b2ff      	uxtb	r7, r7
	while (p < end) {
   1187a:	42ac      	cmp	r4, r5
   1187c:	d3dc      	bcc.n	11838 <USBHIDParser::parse()+0x24>
	while (topusage_count < TOPUSAGE_LIST_LEN) {
   1187e:	2e05      	cmp	r6, #5
   11880:	d837      	bhi.n	118f2 <USBHIDParser::parse()+0xde>
		topusage_drivers[topusage_count] = NULL;
   11882:	1c73      	adds	r3, r6, #1
   11884:	f1c6 0206 	rsb	r2, r6, #6
   11888:	3605      	adds	r6, #5
   1188a:	2100      	movs	r1, #0
   1188c:	b2db      	uxtb	r3, r3
   1188e:	b2f6      	uxtb	r6, r6
   11890:	b2d2      	uxtb	r2, r2
   11892:	2b06      	cmp	r3, #6
   11894:	eb08 0086 	add.w	r0, r8, r6, lsl #2
   11898:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1189c:	bf88      	it	hi
   1189e:	2204      	movhi	r2, #4
}
   118a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		topusage_drivers[topusage_count] = NULL;
   118a4:	f00a b958 	b.w	1bb58 <memset>
		switch (tag & 0xFC) {
   118a8:	2bc0      	cmp	r3, #192	; 0xc0
   118aa:	d1e6      	bne.n	1187a <USBHIDParser::parse()+0x66>
			if (collection_level > 0) {
   118ac:	b31f      	cbz	r7, 118f6 <USBHIDParser::parse()+0xe2>
				collection_level--;
   118ae:	3f01      	subs	r7, #1
			usage = 0;
   118b0:	2100      	movs	r1, #0
				collection_level--;
   118b2:	b2ff      	uxtb	r7, r7
   118b4:	e7e1      	b.n	1187a <USBHIDParser::parse()+0x66>
		switch (tag & 0xFC) {
   118b6:	2b08      	cmp	r3, #8
   118b8:	d016      	beq.n	118e8 <USBHIDParser::parse()+0xd4>
   118ba:	2b80      	cmp	r3, #128	; 0x80
   118bc:	d101      	bne.n	118c2 <USBHIDParser::parse()+0xae>
   118be:	2100      	movs	r1, #0
   118c0:	e7db      	b.n	1187a <USBHIDParser::parse()+0x66>
   118c2:	2b04      	cmp	r3, #4
   118c4:	d1d9      	bne.n	1187a <USBHIDParser::parse()+0x66>
			usage_page = val;
   118c6:	fa1f f982 	uxth.w	r9, r2
			break;
   118ca:	e7d6      	b.n	1187a <USBHIDParser::parse()+0x66>
			p += *p + 3;
   118cc:	f204 1401 	addw	r4, r4, #257	; 0x101
			continue;
   118d0:	e7d3      	b.n	1187a <USBHIDParser::parse()+0x66>
		  case 1: val = p[1];
   118d2:	7862      	ldrb	r2, [r4, #1]
			p += 2;
   118d4:	3402      	adds	r4, #2
			break;
   118d6:	e7bc      	b.n	11852 <USBHIDParser::parse()+0x3e>
		  case 3: val = p[1] | (p[2] << 8) | (p[3] << 16) | (p[4] << 24);
   118d8:	f8d4 2001 	ldr.w	r2, [r4, #1]
			p += 5;
   118dc:	3405      	adds	r4, #5
			break;
   118de:	e7b8      	b.n	11852 <USBHIDParser::parse()+0x3e>
		  case 2: val = p[1] | (p[2] << 8);
   118e0:	f8b4 2001 	ldrh.w	r2, [r4, #1]
			p += 3;
   118e4:	3403      	adds	r4, #3
			break;
   118e6:	e7b4      	b.n	11852 <USBHIDParser::parse()+0x3e>
			usage = val;
   118e8:	b291      	uxth	r1, r2
			break;
   118ea:	e7c6      	b.n	1187a <USBHIDParser::parse()+0x66>
			use_report_id = true;
   118ec:	f888 a0be 	strb.w	sl, [r8, #190]	; 0xbe
			break;
   118f0:	e7c3      	b.n	1187a <USBHIDParser::parse()+0x66>
}
   118f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			usage = 0;
   118f6:	4639      	mov	r1, r7
   118f8:	e7bf      	b.n	1187a <USBHIDParser::parse()+0x66>
				topusage_drivers[topusage_count] = find_driver(topusage);
   118fa:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
   118fe:	4640      	mov	r0, r8
   11900:	f7ff ff6a 	bl	117d8 <USBHIDParser::find_driver(unsigned long)>
				topusage_count++;
   11904:	1c73      	adds	r3, r6, #1
				topusage_drivers[topusage_count] = find_driver(topusage);
   11906:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   1190a:	6170      	str	r0, [r6, #20]
				topusage_count++;
   1190c:	b2de      	uxtb	r6, r3
   1190e:	e7b1      	b.n	11874 <USBHIDParser::parse()+0x60>

00011910 <USBHIDParser::control(Transfer_struct const*)>:
{
   11910:	b570      	push	{r4, r5, r6, lr}
   11912:	4604      	mov	r4, r0
	if (topusage_drivers[0]) {
   11914:	6940      	ldr	r0, [r0, #20]
{
   11916:	460d      	mov	r5, r1
	if (topusage_drivers[0]) {
   11918:	b120      	cbz	r0, 11924 <USBHIDParser::control(Transfer_struct const*)+0x14>
		if (topusage_drivers[0]->hid_process_control(transfer)) {
   1191a:	6803      	ldr	r3, [r0, #0]
   1191c:	4a2c      	ldr	r2, [pc, #176]	; (119d0 <USBHIDParser::control(Transfer_struct const*)+0xc0>)
   1191e:	68db      	ldr	r3, [r3, #12]
   11920:	4293      	cmp	r3, r2
   11922:	d148      	bne.n	119b6 <USBHIDParser::control(Transfer_struct const*)+0xa6>
	if (mesg == 0x22000681 && transfer->length == descsize) { // HID report descriptor
   11924:	4b2b      	ldr	r3, [pc, #172]	; (119d4 <USBHIDParser::control(Transfer_struct const*)+0xc4>)
   11926:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   11928:	429a      	cmp	r2, r3
   1192a:	d000      	beq.n	1192e <USBHIDParser::control(Transfer_struct const*)+0x1e>
}
   1192c:	bd70      	pop	{r4, r5, r6, pc}
	if (mesg == 0x22000681 && transfer->length == descsize) { // HID report descriptor
   1192e:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   11932:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   11934:	429a      	cmp	r2, r3
   11936:	d1f9      	bne.n	1192c <USBHIDParser::control(Transfer_struct const*)+0x1c>
		parse();
   11938:	4620      	mov	r0, r4
   1193a:	f7ff ff6b 	bl	11814 <USBHIDParser::parse()>
		if (_rx1 == nullptr) {
   1193e:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
			_rx1 = _bigBufferEnd - in_size;
   11942:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		if (_rx1 == nullptr) {
   11944:	2900      	cmp	r1, #0
   11946:	d03a      	beq.n	119be <USBHIDParser::control(Transfer_struct const*)+0xae>
		queue_Data_Transfer(in_pipe, _rx1, in_size, this);
   11948:	4623      	mov	r3, r4
   1194a:	68e0      	ldr	r0, [r4, #12]
   1194c:	f7fe fc9e 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (_rx2) queue_Data_Transfer(in_pipe, _rx2, in_size, this);
   11950:	f8d4 135c 	ldr.w	r1, [r4, #860]	; 0x35c
   11954:	b121      	cbz	r1, 11960 <USBHIDParser::control(Transfer_struct const*)+0x50>
   11956:	4623      	mov	r3, r4
   11958:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1195a:	68e0      	ldr	r0, [r4, #12]
   1195c:	f7fe fc96 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (_rx3) queue_Data_Transfer(in_pipe, _rx3, in_size, this);
   11960:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
   11964:	b121      	cbz	r1, 11970 <USBHIDParser::control(Transfer_struct const*)+0x60>
   11966:	4623      	mov	r3, r4
   11968:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1196a:	68e0      	ldr	r0, [r4, #12]
   1196c:	f7fe fc8e 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (_rx4) queue_Data_Transfer(in_pipe, _rx4, in_size, this);
   11970:	f8d4 1364 	ldr.w	r1, [r4, #868]	; 0x364
   11974:	b121      	cbz	r1, 11980 <USBHIDParser::control(Transfer_struct const*)+0x70>
   11976:	4623      	mov	r3, r4
   11978:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1197a:	68e0      	ldr	r0, [r4, #12]
   1197c:	f7fe fc86 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
		if (device->idVendor == 0x054C && 
   11980:	68a0      	ldr	r0, [r4, #8]
   11982:	f240 534c 	movw	r3, #1356	; 0x54c
   11986:	8bc2      	ldrh	r2, [r0, #30]
   11988:	429a      	cmp	r2, r3
   1198a:	d1cf      	bne.n	1192c <USBHIDParser::control(Transfer_struct const*)+0x1c>
				((device->idProduct == 0x0268) || (device->idProduct == 0x042F)/* || (device->idProduct == 0x03D5)*/)) {
   1198c:	8c03      	ldrh	r3, [r0, #32]
		if (device->idVendor == 0x054C && 
   1198e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
   11992:	d003      	beq.n	1199c <USBHIDParser::control(Transfer_struct const*)+0x8c>
				((device->idProduct == 0x0268) || (device->idProduct == 0x042F)/* || (device->idProduct == 0x03D5)*/)) {
   11994:	f240 422f 	movw	r2, #1071	; 0x42f
		if (device->idVendor == 0x054C && 
   11998:	4293      	cmp	r3, r2
   1199a:	d1c7      	bne.n	1192c <USBHIDParser::control(Transfer_struct const*)+0x1c>
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1199c:	490e      	ldr	r1, [pc, #56]	; (119d8 <USBHIDParser::control(Transfer_struct const*)+0xc8>)
        s.word2 = wIndex | (wLength << 16);
   1199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
			queue_Control_Transfer(device, &setup, ps3_feature_F4_report, this);
   119a2:	4623      	mov	r3, r4
   119a4:	e9c4 120d 	strd	r1, r2, [r4, #52]	; 0x34
   119a8:	f104 0134 	add.w	r1, r4, #52	; 0x34
   119ac:	4a0b      	ldr	r2, [pc, #44]	; (119dc <USBHIDParser::control(Transfer_struct const*)+0xcc>)
}
   119ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			queue_Control_Transfer(device, &setup, ps3_feature_F4_report, this);
   119b2:	f7fe bbd1 	b.w	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		if (topusage_drivers[0]->hid_process_control(transfer)) {
   119b6:	4798      	blx	r3
   119b8:	2800      	cmp	r0, #0
   119ba:	d0b3      	beq.n	11924 <USBHIDParser::control(Transfer_struct const*)+0x14>
}
   119bc:	bd70      	pop	{r4, r5, r6, pc}
			_rx1 = _bigBufferEnd - in_size;
   119be:	f8d4 1738 	ldr.w	r1, [r4, #1848]	; 0x738
   119c2:	1a89      	subs	r1, r1, r2
			_rx2 = _rx1 - in_size;
   119c4:	1a8b      	subs	r3, r1, r2
   119c6:	e9c4 13d6 	strd	r1, r3, [r4, #856]	; 0x358
			_bigBufferEnd = _rx2;
   119ca:	f8c4 3738 	str.w	r3, [r4, #1848]	; 0x738
   119ce:	e7bb      	b.n	11948 <USBHIDParser::control(Transfer_struct const*)+0x38>
   119d0:	0000fc69 	.word	0x0000fc69
   119d4:	22000681 	.word	0x22000681
   119d8:	03f40921 	.word	0x03f40921
   119dc:	200099d4 	.word	0x200099d4

000119e0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)>:
}

// parse the report descriptor and use it to feed the fields of the report
// to the drivers which have claimed its top level collections
void USBHIDParser::parse(uint16_t type_and_report_id, const uint8_t *data, uint32_t len)
{
   119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = _bigBuffer;
	const uint8_t *end = p + descsize;
   119e4:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
	const uint8_t *p = _bigBuffer;
   119e8:	f500 7866 	add.w	r8, r0, #920	; 0x398
{
   119ec:	b0a7      	sub	sp, #156	; 0x9c
	const uint8_t *end = p + descsize;
   119ee:	eb08 0603 	add.w	r6, r8, r3
{
   119f2:	900a      	str	r0, [sp, #40]	; 0x28
	USBHIDInput *driver = NULL;
	uint32_t topusage = 0;
	uint8_t topusage_index = 0;
	uint8_t collection_level = 0;
	uint16_t usage[USAGE_LIST_LEN] = {0, 0};
   119f4:	a81a      	add	r0, sp, #104	; 0x68
{
   119f6:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	uint16_t usage[USAGE_LIST_LEN] = {0, 0};
   119fa:	2230      	movs	r2, #48	; 0x30
   119fc:	2100      	movs	r1, #0
   119fe:	f00a f8ab 	bl	1bb58 <memset>
	uint32_t last_usage = 0;
	int32_t logical_min = 0;
	int32_t logical_max = 0;
	uint32_t bitindex = 0;

	while (p < end) {
   11a02:	45b0      	cmp	r8, r6
   11a04:	d27b      	bcs.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	uint32_t bitindex = 0;
   11a06:	f04f 0b00 	mov.w	fp, #0
	uint8_t usage_min_max_count = 0;
   11a0a:	46d9      	mov	r9, fp
	uint8_t usage_count = 0;
   11a0c:	465d      	mov	r5, fp
	USBHIDInput *driver = NULL;
   11a0e:	46da      	mov	sl, fp
			break;
		}
		if (reset_local) {
			usage_count = 0;
			usage_min_max_count = 0;
			usage[0] = 0;
   11a10:	465f      	mov	r7, fp
	int32_t logical_max = 0;
   11a12:	f8cd b01c 	str.w	fp, [sp, #28]
	int32_t logical_min = 0;
   11a16:	f8cd b00c 	str.w	fp, [sp, #12]
	uint32_t last_usage = 0;
   11a1a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
	uint16_t usage_page = 0;
   11a1e:	f8cd b020 	str.w	fp, [sp, #32]
	uint8_t report_id = 0;
   11a22:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	uint8_t usage_min_max_mask = 0;
   11a26:	f8cd b010 	str.w	fp, [sp, #16]
	uint8_t collection_level = 0;
   11a2a:	f8cd b008 	str.w	fp, [sp, #8]
			usage[0] = 0;
   11a2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
	uint16_t report_size = 0;
   11a32:	e9cd bb05 	strd	fp, fp, [sp, #20]
	uint32_t topusage = 0;
   11a36:	e9cd bb0c 	strd	fp, fp, [sp, #48]	; 0x30
		uint8_t tag = *p;
   11a3a:	f898 3000 	ldrb.w	r3, [r8]
		if (tag == 0xFE) { // Long Item (unsupported)
   11a3e:	2bfe      	cmp	r3, #254	; 0xfe
   11a40:	f000 80db 	beq.w	11bfa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x21a>
		switch (tag & 0x03) { // Short Item data
   11a44:	f003 0203 	and.w	r2, r3, #3
   11a48:	2a02      	cmp	r2, #2
   11a4a:	f000 80e8 	beq.w	11c1e <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x23e>
   11a4e:	2a03      	cmp	r2, #3
   11a50:	f000 80e0 	beq.w	11c14 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x234>
   11a54:	2a01      	cmp	r2, #1
   11a56:	f000 80d8 	beq.w	11c0a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x22a>
			p++;
   11a5a:	f108 0801 	add.w	r8, r8, #1
		  case 0: val = 0;
   11a5e:	f04f 0b00 	mov.w	fp, #0
		if (p > end) break;
   11a62:	45b0      	cmp	r8, r6
   11a64:	d84b      	bhi.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
		switch (tag & 0xFC) {
   11a66:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   11a6a:	2ba0      	cmp	r3, #160	; 0xa0
   11a6c:	f200 80aa 	bhi.w	11bc4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x1e4>
   11a70:	2b73      	cmp	r3, #115	; 0x73
   11a72:	d847      	bhi.n	11b04 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x124>
   11a74:	3b04      	subs	r3, #4
   11a76:	b2d9      	uxtb	r1, r3
   11a78:	2924      	cmp	r1, #36	; 0x24
   11a7a:	d83e      	bhi.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11a7c:	2b24      	cmp	r3, #36	; 0x24
   11a7e:	d83c      	bhi.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11a80:	e8df f013 	tbh	[pc, r3, lsl #1]
   11a84:	003b011b 	.word	0x003b011b
   11a88:	003b003b 	.word	0x003b003b
   11a8c:	003b0108 	.word	0x003b0108
   11a90:	003b003b 	.word	0x003b003b
   11a94:	003b003b 	.word	0x003b003b
   11a98:	003b003b 	.word	0x003b003b
   11a9c:	003b003b 	.word	0x003b003b
   11aa0:	003b003b 	.word	0x003b003b
   11aa4:	003b00fc 	.word	0x003b00fc
   11aa8:	003b003b 	.word	0x003b003b
   11aac:	003b00ed 	.word	0x003b00ed
   11ab0:	003b003b 	.word	0x003b003b
   11ab4:	003b003b 	.word	0x003b003b
   11ab8:	003b003b 	.word	0x003b003b
   11abc:	003b003b 	.word	0x003b003b
   11ac0:	003b003b 	.word	0x003b003b
   11ac4:	003b00e1 	.word	0x003b00e1
   11ac8:	003b003b 	.word	0x003b003b
   11acc:	00d2      	.short	0x00d2
			if (collection_level == 0) {
   11ace:	9b02      	ldr	r3, [sp, #8]
   11ad0:	b95b      	cbnz	r3, 11aea <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x10a>
				topusage = ((uint32_t)usage_page << 16) | usage[0];
   11ad2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   11ad6:	9a08      	ldr	r2, [sp, #32]
   11ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11adc:	930d      	str	r3, [sp, #52]	; 0x34
				if (topusage_index < TOPUSAGE_LIST_LEN) {
   11ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ae0:	2b05      	cmp	r3, #5
   11ae2:	f240 817f 	bls.w	11de4 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x404>
				driver = NULL;
   11ae6:	f8dd a008 	ldr.w	sl, [sp, #8]
			collection_level++;
   11aea:	9b02      	ldr	r3, [sp, #8]
   11aec:	3301      	adds	r3, #1
   11aee:	b2db      	uxtb	r3, r3
   11af0:	9302      	str	r3, [sp, #8]
			usage_min_max_count = 0;
   11af2:	f04f 0900 	mov.w	r9, #0
			usage[0] = 0;
   11af6:	971a      	str	r7, [sp, #104]	; 0x68
			usage_count = 0;
   11af8:	464d      	mov	r5, r9
	while (p < end) {
   11afa:	4546      	cmp	r6, r8
   11afc:	d89d      	bhi.n	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
			usage[1] = 0;
		}
	}
}
   11afe:	b027      	add	sp, #156	; 0x9c
   11b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (tag & 0xFC) {
   11b04:	3b74      	subs	r3, #116	; 0x74
   11b06:	2b2c      	cmp	r3, #44	; 0x2c
   11b08:	d8f7      	bhi.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11b0a:	a201      	add	r2, pc, #4	; (adr r2, 11b10 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x130>)
   11b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11b10:	00011db3 	.word	0x00011db3
   11b14:	00011afb 	.word	0x00011afb
   11b18:	00011afb 	.word	0x00011afb
   11b1c:	00011afb 	.word	0x00011afb
   11b20:	00011afb 	.word	0x00011afb
   11b24:	00011afb 	.word	0x00011afb
   11b28:	00011afb 	.word	0x00011afb
   11b2c:	00011afb 	.word	0x00011afb
   11b30:	00011afb 	.word	0x00011afb
   11b34:	00011afb 	.word	0x00011afb
   11b38:	00011afb 	.word	0x00011afb
   11b3c:	00011afb 	.word	0x00011afb
   11b40:	00011cd7 	.word	0x00011cd7
   11b44:	00011afb 	.word	0x00011afb
   11b48:	00011afb 	.word	0x00011afb
   11b4c:	00011afb 	.word	0x00011afb
   11b50:	00011dc1 	.word	0x00011dc1
   11b54:	00011afb 	.word	0x00011afb
   11b58:	00011afb 	.word	0x00011afb
   11b5c:	00011afb 	.word	0x00011afb
   11b60:	00011afb 	.word	0x00011afb
   11b64:	00011afb 	.word	0x00011afb
   11b68:	00011afb 	.word	0x00011afb
   11b6c:	00011afb 	.word	0x00011afb
   11b70:	00011afb 	.word	0x00011afb
   11b74:	00011afb 	.word	0x00011afb
   11b78:	00011afb 	.word	0x00011afb
   11b7c:	00011afb 	.word	0x00011afb
   11b80:	00011af3 	.word	0x00011af3
   11b84:	00011afb 	.word	0x00011afb
   11b88:	00011afb 	.word	0x00011afb
   11b8c:	00011afb 	.word	0x00011afb
   11b90:	00011cc9 	.word	0x00011cc9
   11b94:	00011afb 	.word	0x00011afb
   11b98:	00011afb 	.word	0x00011afb
   11b9c:	00011afb 	.word	0x00011afb
   11ba0:	00011afb 	.word	0x00011afb
   11ba4:	00011afb 	.word	0x00011afb
   11ba8:	00011afb 	.word	0x00011afb
   11bac:	00011afb 	.word	0x00011afb
   11bb0:	00011afb 	.word	0x00011afb
   11bb4:	00011afb 	.word	0x00011afb
   11bb8:	00011afb 	.word	0x00011afb
   11bbc:	00011afb 	.word	0x00011afb
   11bc0:	00011acf 	.word	0x00011acf
   11bc4:	2bb0      	cmp	r3, #176	; 0xb0
   11bc6:	d094      	beq.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
   11bc8:	2bc0      	cmp	r3, #192	; 0xc0
   11bca:	d196      	bne.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
			if (collection_level > 0) {
   11bcc:	9b02      	ldr	r3, [sp, #8]
   11bce:	2b00      	cmp	r3, #0
   11bd0:	d08f      	beq.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
				collection_level--;
   11bd2:	3b01      	subs	r3, #1
				if (collection_level == 0 && driver != NULL) {
   11bd4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   11bd8:	9302      	str	r3, [sp, #8]
   11bda:	d18a      	bne.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
   11bdc:	f1ba 0f00 	cmp.w	sl, #0
   11be0:	d087      	beq.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
					driver->hid_input_end();
   11be2:	f8da 3000 	ldr.w	r3, [sl]
			usage_min_max_count = 0;
   11be6:	f04f 0900 	mov.w	r9, #0
					driver->hid_input_end();
   11bea:	4650      	mov	r0, sl
					driver = NULL;
   11bec:	f04f 0a00 	mov.w	sl, #0
					driver->hid_input_end();
   11bf0:	699b      	ldr	r3, [r3, #24]
			usage_count = 0;
   11bf2:	464d      	mov	r5, r9
					driver->hid_input_end();
   11bf4:	4798      	blx	r3
			usage[0] = 0;
   11bf6:	971a      	str	r7, [sp, #104]	; 0x68
   11bf8:	e77f      	b.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
			p += p[1] + 3;
   11bfa:	f898 3001 	ldrb.w	r3, [r8, #1]
   11bfe:	3303      	adds	r3, #3
   11c00:	4498      	add	r8, r3
	while (p < end) {
   11c02:	4546      	cmp	r6, r8
   11c04:	f63f af19 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11c08:	e779      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
		  case 1: val = p[1];
   11c0a:	f898 b001 	ldrb.w	fp, [r8, #1]
			p += 2;
   11c0e:	f108 0802 	add.w	r8, r8, #2
			break;
   11c12:	e726      	b.n	11a62 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x82>
		  case 3: val = p[1] | (p[2] << 8) | (p[3] << 16) | (p[4] << 24);
   11c14:	f8d8 b001 	ldr.w	fp, [r8, #1]
			p += 5;
   11c18:	f108 0805 	add.w	r8, r8, #5
			break;
   11c1c:	e721      	b.n	11a62 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x82>
		  case 2: val = p[1] | (p[2] << 8);
   11c1e:	f8b8 b001 	ldrh.w	fp, [r8, #1]
			p += 3;
   11c22:	f108 0803 	add.w	r8, r8, #3
			break;
   11c26:	e71c      	b.n	11a62 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x82>
		  	if (usage_count != 255) {
   11c28:	2dff      	cmp	r5, #255	; 0xff
   11c2a:	f000 80fe 	beq.w	11e2a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x44a>
			usage[usage_min_max_count * 2 + 1] = val;
   11c2e:	2302      	movs	r3, #2
	while (p < end) {
   11c30:	4546      	cmp	r6, r8
			  	usage_min_max_count = 0;
   11c32:	f04f 0900 	mov.w	r9, #0
			usage[usage_min_max_count * 2 + 1] = val;
   11c36:	f04f 05ff 	mov.w	r5, #255	; 0xff
   11c3a:	f8ad b06a 	strh.w	fp, [sp, #106]	; 0x6a
   11c3e:	9304      	str	r3, [sp, #16]
	while (p < end) {
   11c40:	f63f aefb 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11c44:	e75b      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 1) return (int8_t)num;
   11c46:	2a01      	cmp	r2, #1
   11c48:	f000 8106 	beq.w	11e58 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x478>
	if (tag == 2) return (int16_t)num;
   11c4c:	2a02      	cmp	r2, #2
   11c4e:	f000 810e 	beq.w	11e6e <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x48e>
	while (p < end) {
   11c52:	4546      	cmp	r6, r8
	return (int32_t)num;
   11c54:	f8cd b01c 	str.w	fp, [sp, #28]
	while (p < end) {
   11c58:	f63f aeef 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11c5c:	e74f      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
		  	if (usage_count != 255) {
   11c5e:	2dff      	cmp	r5, #255	; 0xff
   11c60:	f000 80cd 	beq.w	11dfe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x41e>
			usage_min_max_mask |= 1;
   11c64:	2301      	movs	r3, #1
	while (p < end) {
   11c66:	4546      	cmp	r6, r8
			  	usage_min_max_count = 0;
   11c68:	f04f 0900 	mov.w	r9, #0
			usage[usage_min_max_count * 2] = val;
   11c6c:	f04f 05ff 	mov.w	r5, #255	; 0xff
   11c70:	f8ad b068 	strh.w	fp, [sp, #104]	; 0x68
			usage_min_max_mask |= 1;
   11c74:	9304      	str	r3, [sp, #16]
	while (p < end) {
   11c76:	f63f aee0 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11c7a:	e740      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 1) return (int8_t)num;
   11c7c:	2a01      	cmp	r2, #1
   11c7e:	f000 80e4 	beq.w	11e4a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x46a>
	if (tag == 2) return (int16_t)num;
   11c82:	2a02      	cmp	r2, #2
   11c84:	f000 80ef 	beq.w	11e66 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x486>
	while (p < end) {
   11c88:	4546      	cmp	r6, r8
	return (int32_t)num;
   11c8a:	f8cd b00c 	str.w	fp, [sp, #12]
	while (p < end) {
   11c8e:	f63f aed4 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11c92:	e734      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
				if (val > 0x1f) {
   11c94:	2d17      	cmp	r5, #23
   11c96:	f63f af30 	bhi.w	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11c9a:	f1bb 0f1f 	cmp.w	fp, #31
   11c9e:	f67f af2c 	bls.w	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
					usage[usage_count++] = val;
   11ca2:	ab26      	add	r3, sp, #152	; 0x98
	while (p < end) {
   11ca4:	4546      	cmp	r6, r8
					usage[usage_count++] = val;
   11ca6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   11caa:	f105 0501 	add.w	r5, r5, #1
   11cae:	f823 bc30 	strh.w	fp, [r3, #-48]
   11cb2:	b2ed      	uxtb	r5, r5
	while (p < end) {
   11cb4:	f63f aec1 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11cb8:	e721      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			usage_page = val;
   11cba:	fa1f f38b 	uxth.w	r3, fp
	while (p < end) {
   11cbe:	4546      	cmp	r6, r8
			usage_page = val;
   11cc0:	9308      	str	r3, [sp, #32]
	while (p < end) {
   11cc2:	f63f aeba 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11cc6:	e71a      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			report_count = val;
   11cc8:	fa1f f38b 	uxth.w	r3, fp
	while (p < end) {
   11ccc:	4546      	cmp	r6, r8
			report_count = val;
   11cce:	9305      	str	r3, [sp, #20]
	while (p < end) {
   11cd0:	f63f aeb3 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11cd4:	e713      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			if (use_report_id && (report_id != (type_and_report_id & 0xFF))) {
   11cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11cd8:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   11cdc:	b12b      	cbz	r3, 11cea <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x30a>
   11cde:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11ce4:	429a      	cmp	r2, r3
   11ce6:	f47f af04 	bne.w	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
			if ((val & 1) || (driver == NULL)) {
   11cea:	f1ba 0f00 	cmp.w	sl, #0
   11cee:	d06e      	beq.n	11dce <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x3ee>
   11cf0:	f01b 0f01 	tst.w	fp, #1
   11cf4:	d16b      	bne.n	11dce <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x3ee>
				driver->hid_input_begin(topusage, val, logical_min, logical_max);
   11cf6:	f8da 3000 	ldr.w	r3, [sl]
   11cfa:	4650      	mov	r0, sl
   11cfc:	9a07      	ldr	r2, [sp, #28]
   11cfe:	990d      	ldr	r1, [sp, #52]	; 0x34
   11d00:	9200      	str	r2, [sp, #0]
   11d02:	465a      	mov	r2, fp
   11d04:	691b      	ldr	r3, [r3, #16]
   11d06:	461c      	mov	r4, r3
   11d08:	9b03      	ldr	r3, [sp, #12]
   11d0a:	47a0      	blx	r4
				if ((val & 2)) {
   11d0c:	f01b 0b02 	ands.w	fp, fp, #2
   11d10:	f040 80e9 	bne.w	11ee6 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x506>
					if (usage_min_max_count && (report_size == 1)) {
   11d14:	f1b9 0f00 	cmp.w	r9, #0
   11d18:	f000 80ad 	beq.w	11e76 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x496>
   11d1c:	9b06      	ldr	r3, [sp, #24]
   11d1e:	2b01      	cmp	r3, #1
   11d20:	f040 80a9 	bne.w	11e76 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x496>
						for (uint32_t i=0; i < report_count; i++) {
   11d24:	9b05      	ldr	r3, [sp, #20]
						uint32_t uindex = usage[0];
   11d26:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
						uint32_t uindex_max = usage[1];
   11d2a:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
						for (uint32_t i=0; i < report_count; i++) {
   11d2e:	2b00      	cmp	r3, #0
   11d30:	f000 816d 	beq.w	1200e <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x62e>
   11d34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
							u |= (uint32_t)usage_page << 16;
   11d36:	9808      	ldr	r0, [sp, #32]
   11d38:	4423      	add	r3, r4
						uint8_t uminmax_index = 0;
   11d3a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
							u |= (uint32_t)usage_page << 16;
   11d3e:	0400      	lsls	r0, r0, #16
   11d40:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   11d44:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   11d48:	4690      	mov	r8, r2
   11d4a:	469b      	mov	fp, r3
   11d4c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   11d50:	9006      	str	r0, [sp, #24]
   11d52:	9613      	str	r6, [sp, #76]	; 0x4c
   11d54:	e01b      	b.n	11d8e <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x3ae>
							if (uindex < uindex_max) uindex++;
   11d56:	1c4e      	adds	r6, r1, #1
							u |= (uint32_t)usage_page << 16;
   11d58:	9b06      	ldr	r3, [sp, #24]
							uint32_t n = bitfield(data, bitindex, report_size);
   11d5a:	2201      	movs	r2, #1
   11d5c:	4648      	mov	r0, r9
							u |= (uint32_t)usage_page << 16;
   11d5e:	ea43 0501 	orr.w	r5, r3, r1
							uint32_t n = bitfield(data, bitindex, report_size);
   11d62:	4621      	mov	r1, r4
   11d64:	f7ff fb02 	bl	1136c <bitfield(unsigned char const*, unsigned long, unsigned long)>
							if (logical_min >= 0) {
   11d68:	9b03      	ldr	r3, [sp, #12]
							uint32_t n = bitfield(data, bitindex, report_size);
   11d6a:	4602      	mov	r2, r0
							if (logical_min >= 0) {
   11d6c:	2b00      	cmp	r3, #0
   11d6e:	da03      	bge.n	11d78 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x398>
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11d70:	07c3      	lsls	r3, r0, #31
		num |= ~((1 << bitcount) - 1);
   11d72:	bf48      	it	mi
   11d74:	f060 0201 	ornmi	r2, r0, #1
								driver->hid_input_data(u, sn);
   11d78:	f8da 0000 	ldr.w	r0, [sl]
							bitindex += report_size;
   11d7c:	3401      	adds	r4, #1
								driver->hid_input_data(u, sn);
   11d7e:	4629      	mov	r1, r5
   11d80:	6945      	ldr	r5, [r0, #20]
   11d82:	4650      	mov	r0, sl
   11d84:	47a8      	blx	r5
						for (uint32_t i=0; i < report_count; i++) {
   11d86:	455c      	cmp	r4, fp
   11d88:	f000 80a7 	beq.w	11eda <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4fa>
   11d8c:	4631      	mov	r1, r6
							if (uindex < uindex_max) uindex++;
   11d8e:	4588      	cmp	r8, r1
   11d90:	d8e1      	bhi.n	11d56 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x376>
							else if (uminmax_index < usage_min_max_count) {
   11d92:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d96:	4293      	cmp	r3, r2
   11d98:	f080 809d 	bcs.w	11ed6 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4f6>
								uminmax_index++;
   11d9c:	3301      	adds	r3, #1
								uindex = usage[uminmax_index * 2];
   11d9e:	b2da      	uxtb	r2, r3
   11da0:	ab26      	add	r3, sp, #152	; 0x98
   11da2:	eb03 0082 	add.w	r0, r3, r2, lsl #2
								uminmax_index++;
   11da6:	9211      	str	r2, [sp, #68]	; 0x44
								uindex = usage[uminmax_index * 2];
   11da8:	f830 6c30 	ldrh.w	r6, [r0, #-48]
								uindex_max = usage[uminmax_index * 2 + 1];
   11dac:	f830 8c2e 	ldrh.w	r8, [r0, #-46]
   11db0:	e7d2      	b.n	11d58 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x378>
			report_size = val;
   11db2:	fa1f f38b 	uxth.w	r3, fp
	while (p < end) {
   11db6:	4546      	cmp	r6, r8
			report_size = val;
   11db8:	9306      	str	r3, [sp, #24]
	while (p < end) {
   11dba:	f63f ae3e 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11dbe:	e69e      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			report_id = val;
   11dc0:	fa5f f38b 	uxtb.w	r3, fp
	while (p < end) {
   11dc4:	4546      	cmp	r6, r8
			report_id = val;
   11dc6:	9309      	str	r3, [sp, #36]	; 0x24
	while (p < end) {
   11dc8:	f63f ae37 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11dcc:	e697      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
				bitindex += report_count * report_size;
   11dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
			usage_min_max_count = 0;
   11dd0:	f04f 0900 	mov.w	r9, #0
			usage[0] = 0;
   11dd4:	971a      	str	r7, [sp, #104]	; 0x68
			usage_count = 0;
   11dd6:	464d      	mov	r5, r9
				bitindex += report_count * report_size;
   11dd8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   11ddc:	fb02 1303 	mla	r3, r2, r3, r1
   11de0:	930b      	str	r3, [sp, #44]	; 0x2c
			usage[1] = 0;
   11de2:	e68a      	b.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
					driver = topusage_drivers[topusage_index++];
   11de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11de6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   11dea:	3301      	adds	r3, #1
   11dec:	b2db      	uxtb	r3, r3
   11dee:	f8d2 a014 	ldr.w	sl, [r2, #20]
   11df2:	930c      	str	r3, [sp, #48]	; 0x30
			collection_level++;
   11df4:	9b02      	ldr	r3, [sp, #8]
   11df6:	3301      	adds	r3, #1
   11df8:	b2db      	uxtb	r3, r3
   11dfa:	9302      	str	r3, [sp, #8]
			break;
   11dfc:	e679      	b.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
			usage_min_max_mask |= 1;
   11dfe:	9b04      	ldr	r3, [sp, #16]
   11e00:	f043 0201 	orr.w	r2, r3, #1
			usage[usage_min_max_count * 2] = val;
   11e04:	ab26      	add	r3, sp, #152	; 0x98
			if (usage_min_max_mask == 3) {
   11e06:	2a03      	cmp	r2, #3
			usage[usage_min_max_count * 2] = val;
   11e08:	eb03 0389 	add.w	r3, r3, r9, lsl #2
			usage_min_max_mask |= 1;
   11e0c:	9204      	str	r2, [sp, #16]
			usage[usage_min_max_count * 2] = val;
   11e0e:	f823 bc30 	strh.w	fp, [r3, #-48]
			if (usage_min_max_mask == 3) {
   11e12:	f47f ae72 	bne.w	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
		  		usage_min_max_count++;
   11e16:	f109 0901 	add.w	r9, r9, #1
				usage_min_max_mask = 0;					
   11e1a:	2300      	movs	r3, #0
	while (p < end) {
   11e1c:	4546      	cmp	r6, r8
		  		usage_min_max_count++;
   11e1e:	fa5f f989 	uxtb.w	r9, r9
				usage_min_max_mask = 0;					
   11e22:	9304      	str	r3, [sp, #16]
	while (p < end) {
   11e24:	f63f ae09 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11e28:	e669      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
			if (usage_min_max_mask == 3) {
   11e2a:	9b04      	ldr	r3, [sp, #16]
			usage[usage_min_max_count * 2 + 1] = val;
   11e2c:	2202      	movs	r2, #2
   11e2e:	a826      	add	r0, sp, #152	; 0x98
			if (usage_min_max_mask == 3) {
   11e30:	f043 0102 	orr.w	r1, r3, #2
			usage[usage_min_max_count * 2 + 1] = val;
   11e34:	2301      	movs	r3, #1
   11e36:	fb12 3309 	smlabb	r3, r2, r9, r3
			if (usage_min_max_mask == 3) {
   11e3a:	2903      	cmp	r1, #3
			usage[usage_min_max_count * 2 + 1] = val;
   11e3c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   11e40:	f823 bc30 	strh.w	fp, [r3, #-48]
			if (usage_min_max_mask == 3) {
   11e44:	d0e7      	beq.n	11e16 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x436>
   11e46:	9204      	str	r2, [sp, #16]
   11e48:	e657      	b.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
	if (tag == 1) return (int8_t)num;
   11e4a:	fa4f f38b 	sxtb.w	r3, fp
	while (p < end) {
   11e4e:	4546      	cmp	r6, r8
	if (tag == 1) return (int8_t)num;
   11e50:	9303      	str	r3, [sp, #12]
	while (p < end) {
   11e52:	f63f adf2 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11e56:	e652      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 1) return (int8_t)num;
   11e58:	fa4f f38b 	sxtb.w	r3, fp
	while (p < end) {
   11e5c:	4546      	cmp	r6, r8
	if (tag == 1) return (int8_t)num;
   11e5e:	9307      	str	r3, [sp, #28]
	while (p < end) {
   11e60:	f63f adeb 	bhi.w	11a3a <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a>
   11e64:	e64b      	b.n	11afe <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11e>
	if (tag == 2) return (int16_t)num;
   11e66:	fa0f f38b 	sxth.w	r3, fp
   11e6a:	9303      	str	r3, [sp, #12]
   11e6c:	e645      	b.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
   11e6e:	fa0f f38b 	sxth.w	r3, fp
   11e72:	9307      	str	r3, [sp, #28]
   11e74:	e641      	b.n	11afa <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x11a>
						for (uint32_t i=0; i < report_count; i++) {
   11e76:	9b05      	ldr	r3, [sp, #20]
   11e78:	2b00      	cmp	r3, #0
   11e7a:	f43f ae3a 	beq.w	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
								u |= (uint32_t)usage_page << 16;
   11e7e:	9b08      	ldr	r3, [sp, #32]
						uint32_t n = bitfield(data, bitindex, report_size);
   11e80:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   11e84:	9612      	str	r6, [sp, #72]	; 0x48
								u |= (uint32_t)usage_page << 16;
   11e86:	ea4f 4903 	mov.w	r9, r3, lsl #16
						uint32_t n = bitfield(data, bitindex, report_size);
   11e8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11e8c:	9c06      	ldr	r4, [sp, #24]
   11e8e:	9e05      	ldr	r6, [sp, #20]
   11e90:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
							uint32_t u = bitfield(data, bitindex, report_size);
   11e94:	4629      	mov	r1, r5
   11e96:	4622      	mov	r2, r4
   11e98:	4640      	mov	r0, r8
						for (uint32_t i=0; i < report_count; i++) {
   11e9a:	f10b 0b01 	add.w	fp, fp, #1
							uint32_t u = bitfield(data, bitindex, report_size);
   11e9e:	f7ff fa65 	bl	1136c <bitfield(unsigned char const*, unsigned long, unsigned long)>
							if (n >= logical_min && n <= logical_max) {
   11ea2:	9b03      	ldr	r3, [sp, #12]
							bitindex += report_size;
   11ea4:	4425      	add	r5, r4
							if (n >= logical_min && n <= logical_max) {
   11ea6:	4298      	cmp	r0, r3
   11ea8:	db0a      	blt.n	11ec0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4e0>
   11eaa:	9b07      	ldr	r3, [sp, #28]
								driver->hid_input_data(u, 1);
   11eac:	ea49 0100 	orr.w	r1, r9, r0
							if (n >= logical_min && n <= logical_max) {
   11eb0:	4298      	cmp	r0, r3
   11eb2:	dc05      	bgt.n	11ec0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4e0>
								driver->hid_input_data(u, 1);
   11eb4:	f8da 3000 	ldr.w	r3, [sl]
   11eb8:	2201      	movs	r2, #1
   11eba:	4650      	mov	r0, sl
   11ebc:	695b      	ldr	r3, [r3, #20]
   11ebe:	4798      	blx	r3
						for (uint32_t i=0; i < report_count; i++) {
   11ec0:	45b3      	cmp	fp, r6
   11ec2:	d1e7      	bne.n	11e94 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x4b4>
							bitindex += report_size;
   11ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11ec6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   11eca:	e9dd 8611 	ldrd	r8, r6, [sp, #68]	; 0x44
   11ece:	fb02 1303 	mla	r3, r2, r3, r1
   11ed2:	930b      	str	r3, [sp, #44]	; 0x2c
   11ed4:	e60d      	b.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
   11ed6:	460e      	mov	r6, r1
   11ed8:	e73e      	b.n	11d58 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x378>
   11eda:	2301      	movs	r3, #1
   11edc:	940b      	str	r4, [sp, #44]	; 0x2c
   11ede:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	; 0x48
   11ee2:	9306      	str	r3, [sp, #24]
   11ee4:	e605      	b.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
					if (usage_count > USAGE_LIST_LEN) {
   11ee6:	2d18      	cmp	r5, #24
   11ee8:	d977      	bls.n	11fda <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5fa>
						uindex_max = usage[1];
   11eea:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
						uindex = usage[0];
   11eee:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
						uindex_max = usage[1];
   11ef2:	9312      	str	r3, [sp, #72]	; 0x48
						uminmax = true;
   11ef4:	2301      	movs	r3, #1
   11ef6:	9311      	str	r3, [sp, #68]	; 0x44
					for (uint32_t i=0; i < report_count; i++) {
   11ef8:	9b05      	ldr	r3, [sp, #20]
   11efa:	2b00      	cmp	r3, #0
   11efc:	f43f adf9 	beq.w	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11f00:	9906      	ldr	r1, [sp, #24]
   11f02:	2301      	movs	r3, #1
						u |= (uint32_t)usage_page << 16;
   11f04:	9a08      	ldr	r2, [sp, #32]
		num |= ~((1 << bitcount) - 1);
   11f06:	2400      	movs	r4, #0
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11f08:	1e48      	subs	r0, r1, #1
		num |= ~((1 << bitcount) - 1);
   11f0a:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
						u |= (uint32_t)usage_page << 16;
   11f0e:	0412      	lsls	r2, r2, #16
		num |= ~((1 << bitcount) - 1);
   11f10:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   11f14:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
						u |= (uint32_t)usage_page << 16;
   11f18:	9210      	str	r2, [sp, #64]	; 0x40
		num |= ~((1 << bitcount) - 1);
   11f1a:	fa03 f201 	lsl.w	r2, r3, r1
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11f1e:	4083      	lsls	r3, r0
   11f20:	9013      	str	r0, [sp, #76]	; 0x4c
		num |= ~((1 << bitcount) - 1);
   11f22:	9414      	str	r4, [sp, #80]	; 0x50
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11f24:	9316      	str	r3, [sp, #88]	; 0x58
		num |= ~((1 << bitcount) - 1);
   11f26:	4253      	negs	r3, r2
   11f28:	e9cd 8618 	strd	r8, r6, [sp, #96]	; 0x60
   11f2c:	9317      	str	r3, [sp, #92]	; 0x5c
   11f2e:	460e      	mov	r6, r1
   11f30:	e01a      	b.n	11f68 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x588>
							if (uindex < uindex_max) uindex++;
   11f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11f34:	429d      	cmp	r5, r3
   11f36:	d22d      	bcs.n	11f94 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5b4>
   11f38:	46a8      	mov	r8, r5
   11f3a:	3501      	adds	r5, #1
						uint32_t n = bitfield(data, bitindex, report_size);
   11f3c:	4632      	mov	r2, r6
   11f3e:	4659      	mov	r1, fp
   11f40:	4648      	mov	r0, r9
   11f42:	f7ff fa13 	bl	1136c <bitfield(unsigned char const*, unsigned long, unsigned long)>
						u |= (uint32_t)usage_page << 16;
   11f46:	9b10      	ldr	r3, [sp, #64]	; 0x40
						uint32_t n = bitfield(data, bitindex, report_size);
   11f48:	4602      	mov	r2, r0
						u |= (uint32_t)usage_page << 16;
   11f4a:	ea43 0108 	orr.w	r1, r3, r8
						if (logical_min >= 0) {
   11f4e:	9b03      	ldr	r3, [sp, #12]
   11f50:	2b00      	cmp	r3, #0
   11f52:	db16      	blt.n	11f82 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5a2>
							driver->hid_input_data(u, sn);
   11f54:	f8da 3000 	ldr.w	r3, [sl]
   11f58:	4650      	mov	r0, sl
					for (uint32_t i=0; i < report_count; i++) {
   11f5a:	3401      	adds	r4, #1
						bitindex += report_size;
   11f5c:	44b3      	add	fp, r6
							driver->hid_input_data(u, sn);
   11f5e:	695b      	ldr	r3, [r3, #20]
   11f60:	4798      	blx	r3
					for (uint32_t i=0; i < report_count; i++) {
   11f62:	9b05      	ldr	r3, [sp, #20]
   11f64:	42a3      	cmp	r3, r4
   11f66:	d928      	bls.n	11fba <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5da>
						if (uminmax) {
   11f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11f6a:	2b00      	cmp	r3, #0
   11f6c:	d1e1      	bne.n	11f32 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x552>
							u = usage[uindex++];
   11f6e:	ab26      	add	r3, sp, #152	; 0x98
   11f70:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   11f74:	3501      	adds	r5, #1
   11f76:	2d17      	cmp	r5, #23
   11f78:	f833 8c30 	ldrh.w	r8, [r3, #-48]
							if (uindex >= USAGE_LIST_LEN-1) {
   11f7c:	bf28      	it	cs
   11f7e:	2517      	movcs	r5, #23
   11f80:	e7dc      	b.n	11f3c <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x55c>
	if (bitcount < 32 && bitcount > 0 && (num & (1 << (bitcount-1)))) {
   11f82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11f84:	2b1e      	cmp	r3, #30
   11f86:	d8e5      	bhi.n	11f54 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x574>
   11f88:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11f8a:	4203      	tst	r3, r0
   11f8c:	d0e2      	beq.n	11f54 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x574>
		num |= ~((1 << bitcount) - 1);
   11f8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11f90:	431a      	orrs	r2, r3
   11f92:	e7df      	b.n	11f54 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x574>
							else if (uminmax_index < usage_min_max_count) {
   11f94:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
   11f98:	429a      	cmp	r2, r3
   11f9a:	d90c      	bls.n	11fb6 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x5d6>
								uminmax_index++;
   11f9c:	3301      	adds	r3, #1
								uindex = usage[uminmax_index * 2];
   11f9e:	aa26      	add	r2, sp, #152	; 0x98
   11fa0:	46a8      	mov	r8, r5
   11fa2:	b2db      	uxtb	r3, r3
   11fa4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
								uminmax_index++;
   11fa8:	9314      	str	r3, [sp, #80]	; 0x50
								uindex_max = usage[uminmax_index * 2 + 1];
   11faa:	f832 3c2e 	ldrh.w	r3, [r2, #-46]
								uindex = usage[uminmax_index * 2];
   11fae:	f832 5c30 	ldrh.w	r5, [r2, #-48]
								uindex_max = usage[uminmax_index * 2 + 1];
   11fb2:	9312      	str	r3, [sp, #72]	; 0x48
   11fb4:	e7c2      	b.n	11f3c <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x55c>
   11fb6:	46a8      	mov	r8, r5
   11fb8:	e7c0      	b.n	11f3c <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x55c>
						bitindex += report_size;
   11fba:	2b00      	cmp	r3, #0
   11fbc:	9906      	ldr	r1, [sp, #24]
   11fbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11fc0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11fc4:	bf08      	it	eq
   11fc6:	2300      	moveq	r3, #0
   11fc8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   11fcc:	440a      	add	r2, r1
   11fce:	fb01 2303 	mla	r3, r1, r3, r2
   11fd2:	e9dd 8618 	ldrd	r8, r6, [sp, #96]	; 0x60
   11fd6:	930b      	str	r3, [sp, #44]	; 0x2c
   11fd8:	e58b      	b.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
					} else if ((report_count > 1) && (usage_count <= 1)) {
   11fda:	9b05      	ldr	r3, [sp, #20]
   11fdc:	2b01      	cmp	r3, #1
   11fde:	bf8c      	ite	hi
   11fe0:	2301      	movhi	r3, #1
   11fe2:	2300      	movls	r3, #0
   11fe4:	2d01      	cmp	r5, #1
   11fe6:	bf88      	it	hi
   11fe8:	2300      	movhi	r3, #0
   11fea:	9311      	str	r3, [sp, #68]	; 0x44
   11fec:	b153      	cbz	r3, 12004 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x624>
						if (usage_count == 1) {
   11fee:	2d01      	cmp	r5, #1
   11ff0:	d010      	beq.n	12014 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x634>
							uindex = (last_usage & 0xff00) + 0x100;
   11ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11ff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   11ff8:	f503 7580 	add.w	r5, r3, #256	; 0x100
					for (uint32_t i=0; i < report_count; i++) {
   11ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12000:	9312      	str	r3, [sp, #72]	; 0x48
   12002:	e77d      	b.n	11f00 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x520>
					uint32_t uindex_max = 0xffff;	// assume no MAX
   12004:	f64f 73ff 	movw	r3, #65535	; 0xffff
					uint32_t uindex = 0;
   12008:	9d11      	ldr	r5, [sp, #68]	; 0x44
					uint32_t uindex_max = 0xffff;	// assume no MAX
   1200a:	9312      	str	r3, [sp, #72]	; 0x48
   1200c:	e774      	b.n	11ef8 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x518>
						for (uint32_t i=0; i < report_count; i++) {
   1200e:	2301      	movs	r3, #1
   12010:	9306      	str	r3, [sp, #24]
   12012:	e56e      	b.n	11af2 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x112>
							uindex = usage[0];
   12014:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
   12018:	e7f0      	b.n	11ffc <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)+0x61c>
   1201a:	bf00      	nop

0001201c <USBHIDParser::in_data(Transfer_struct const*)>:
{
   1201c:	b570      	push	{r4, r5, r6, lr}
   1201e:	4604      	mov	r4, r0
	if (!(topusage_drivers[0] && topusage_drivers[0]->hid_process_in_data(transfer))) {
   12020:	6940      	ldr	r0, [r0, #20]
	uint32_t len = transfer->length;
   12022:	e9d1 560b 	ldrd	r5, r6, [r1, #44]	; 0x2c
	if (!(topusage_drivers[0] && topusage_drivers[0]->hid_process_in_data(transfer))) {
   12026:	b120      	cbz	r0, 12032 <USBHIDParser::in_data(Transfer_struct const*)+0x16>
   12028:	6803      	ldr	r3, [r0, #0]
   1202a:	4a1d      	ldr	r2, [pc, #116]	; (120a0 <USBHIDParser::in_data(Transfer_struct const*)+0x84>)
   1202c:	685b      	ldr	r3, [r3, #4]
   1202e:	4293      	cmp	r3, r2
   12030:	d132      	bne.n	12098 <USBHIDParser::in_data(Transfer_struct const*)+0x7c>
		if (use_report_id == false) {
   12032:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
   12036:	b1eb      	cbz	r3, 12074 <USBHIDParser::in_data(Transfer_struct const*)+0x58>
			if (len > 1) {
   12038:	2e01      	cmp	r6, #1
   1203a:	d823      	bhi.n	12084 <USBHIDParser::in_data(Transfer_struct const*)+0x68>
    if ((uint32_t)buf >= 0x20200000u) arm_dcache_flush_delete((void*)buf, in_size);
   1203c:	4b19      	ldr	r3, [pc, #100]	; (120a4 <USBHIDParser::in_data(Transfer_struct const*)+0x88>)
   1203e:	429d      	cmp	r5, r3
   12040:	d910      	bls.n	12064 <USBHIDParser::in_data(Transfer_struct const*)+0x48>
   12042:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   12044:	f025 021f 	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   12048:	442b      	add	r3, r5
	asm("dsb");
   1204a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   1204e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   12052:	f8c1 2f70 	str.w	r2, [r1, #3952]	; 0xf70
		location += 32;
   12056:	3220      	adds	r2, #32
	} while (location < end_addr);
   12058:	4293      	cmp	r3, r2
   1205a:	d8fa      	bhi.n	12052 <USBHIDParser::in_data(Transfer_struct const*)+0x36>
	asm("dsb");
   1205c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   12060:	f3bf 8f6f 	isb	sy
	queue_Data_Transfer(in_pipe, (void*)buf, in_size, this);
   12064:	4623      	mov	r3, r4
   12066:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   12068:	4629      	mov	r1, r5
   1206a:	68e0      	ldr	r0, [r4, #12]
}
   1206c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	queue_Data_Transfer(in_pipe, (void*)buf, in_size, this);
   12070:	f7fe b90c 	b.w	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
			parse(0x0100, buf, len);
   12074:	4633      	mov	r3, r6
   12076:	462a      	mov	r2, r5
   12078:	f44f 7180 	mov.w	r1, #256	; 0x100
   1207c:	4620      	mov	r0, r4
   1207e:	f7ff fcaf 	bl	119e0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)>
   12082:	e7db      	b.n	1203c <USBHIDParser::in_data(Transfer_struct const*)+0x20>
				parse(0x0100 | buf[0], buf + 1, len - 1);
   12084:	462a      	mov	r2, r5
   12086:	1e73      	subs	r3, r6, #1
   12088:	4620      	mov	r0, r4
   1208a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1208e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   12092:	f7ff fca5 	bl	119e0 <USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)>
   12096:	e7d1      	b.n	1203c <USBHIDParser::in_data(Transfer_struct const*)+0x20>
	if (!(topusage_drivers[0] && topusage_drivers[0]->hid_process_in_data(transfer))) {
   12098:	4798      	blx	r3
   1209a:	2800      	cmp	r0, #0
   1209c:	d1ce      	bne.n	1203c <USBHIDParser::in_data(Transfer_struct const*)+0x20>
   1209e:	e7c8      	b.n	12032 <USBHIDParser::in_data(Transfer_struct const*)+0x16>
   120a0:	0000fdc1 	.word	0x0000fdc1
   120a4:	201fffff 	.word	0x201fffff

000120a8 <USBHIDParser::in_callback(Transfer_struct const*)>:
{
   120a8:	4601      	mov	r1, r0
	if (transfer->driver) {
   120aa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   120ac:	b108      	cbz	r0, 120b2 <USBHIDParser::in_callback(Transfer_struct const*)+0xa>
		((USBHIDParser*)(transfer->driver))->in_data(transfer);
   120ae:	f7ff bfb5 	b.w	1201c <USBHIDParser::in_data(Transfer_struct const*)>
}
   120b2:	4770      	bx	lr

000120b4 <USBHub::disconnect()>:
	debounce_in_use &= ~(1 << port);
}


void USBHub::disconnect()
{
   120b4:	b570      	push	{r4, r5, r6, lr}
	// disconnect all downstream devices, which may be more hubs
	for (uint32_t i=0; i < numports; i++) {
   120b6:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
{
   120ba:	4604      	mov	r4, r0
	for (uint32_t i=0; i < numports; i++) {
   120bc:	b163      	cbz	r3, 120d8 <USBHub::disconnect()+0x24>
   120be:	f500 7656 	add.w	r6, r0, #856	; 0x358
   120c2:	2500      	movs	r5, #0
		if (devicelist[i]) disconnect_Device(devicelist[i]);
   120c4:	f856 0f04 	ldr.w	r0, [r6, #4]!
	for (uint32_t i=0; i < numports; i++) {
   120c8:	3501      	adds	r5, #1
		if (devicelist[i]) disconnect_Device(devicelist[i]);
   120ca:	b118      	cbz	r0, 120d4 <USBHub::disconnect()+0x20>
   120cc:	f7ff f8fa 	bl	112c4 <USBHost::disconnect_Device(Device_struct*)>
   120d0:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
	for (uint32_t i=0; i < numports; i++) {
   120d4:	42ab      	cmp	r3, r5
   120d6:	d8f5      	bhi.n	120c4 <USBHub::disconnect()+0x10>
	}
	numports = 0;
   120d8:	2300      	movs	r3, #0
	changepipe = NULL;
	changebits = 0;
	sending_control_transfer = 0;
	port_doing_reset = 0;
	memset(portstate, 0, sizeof(portstate));
   120da:	f8c4 339c 	str.w	r3, [r4, #924]	; 0x39c
	numports = 0;
   120de:	f884 3396 	strb.w	r3, [r4, #918]	; 0x396
	changepipe = NULL;
   120e2:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
	changebits = 0;
   120e6:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
	sending_control_transfer = 0;
   120ea:	f884 3399 	strb.w	r3, [r4, #921]	; 0x399
	port_doing_reset = 0;
   120ee:	f884 339a 	strb.w	r3, [r4, #922]	; 0x39a
	memset(portstate, 0, sizeof(portstate));
   120f2:	f8c4 339f 	str.w	r3, [r4, #927]	; 0x39f
	memset(devicelist, 0, sizeof(devicelist));
   120f6:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   120fa:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
   120fe:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
   12102:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   12106:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
   1210a:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
   1210e:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
	send_pending_poweron = 0;
   12112:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
	send_pending_getstatus = 0;
	send_pending_clearstatus_connect = 0;
	send_pending_clearstatus_enable = 0;
	send_pending_clearstatus_suspend = 0;
	send_pending_clearstatus_overcurrent = 0;
   12116:	e9c4 33e9 	strd	r3, r3, [r4, #932]	; 0x3a4
	send_pending_clearstatus_reset = 0;
	send_pending_setreset = 0;
	debounce_in_use = 0;
}
   1211a:	bd70      	pop	{r4, r5, r6, pc}

0001211c <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)>:
	if (type != 0) return false;
   1211c:	2a00      	cmp	r2, #0
   1211e:	d173      	bne.n	12208 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xec>
{
   12120:	b570      	push	{r4, r5, r6, lr}
   12122:	4604      	mov	r4, r0
	resettimer.pointer = (void *)"Hello, I'm resettimer";
   12124:	4857      	ldr	r0, [pc, #348]	; (12284 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x168>)
	if (dev->bDeviceClass != 9 || dev->bDeviceSubClass != 0) return false;
   12126:	4d58      	ldr	r5, [pc, #352]	; (12288 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x16c>)
	resettimer.pointer = (void *)"Hello, I'm resettimer";
   12128:	f8c4 0334 	str.w	r0, [r4, #820]	; 0x334
	debouncetimer.pointer = (void *)"Debounce Timer";
   1212c:	4857      	ldr	r0, [pc, #348]	; (1228c <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x170>)
   1212e:	f8c4 0318 	str.w	r0, [r4, #792]	; 0x318
	if (dev->bDeviceClass != 9 || dev->bDeviceSubClass != 0) return false;
   12132:	6988      	ldr	r0, [r1, #24]
   12134:	4005      	ands	r5, r0
   12136:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
   1213a:	d163      	bne.n	12204 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe8>
	if (dev->bDeviceProtocol > 2) return false;
   1213c:	7ec8      	ldrb	r0, [r1, #27]
   1213e:	2802      	cmp	r0, #2
   12140:	d860      	bhi.n	12204 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe8>
	while (len >= 16) {
   12142:	9804      	ldr	r0, [sp, #16]
	interface_count = 0;
   12144:	f884 2390 	strb.w	r2, [r4, #912]	; 0x390
	while (len >= 16) {
   12148:	280f      	cmp	r0, #15
   1214a:	d95b      	bls.n	12204 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe8>
   1214c:	f1a0 0510 	sub.w	r5, r0, #16
   12150:	f103 0c10 	add.w	ip, r3, #16
   12154:	3320      	adds	r3, #32
   12156:	f025 050f 	bic.w	r5, r5, #15
   1215a:	442b      	add	r3, r5
   1215c:	e003      	b.n	12166 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x4a>
   1215e:	f10c 0c10 	add.w	ip, ip, #16
   12162:	459c      	cmp	ip, r3
   12164:	d04d      	beq.n	12202 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe6>
		if (d[0] == 9 && d[1] == 4 &&		// valid interface descriptor
   12166:	f81c ec10 	ldrb.w	lr, [ip, #-16]
   1216a:	f1be 0f09 	cmp.w	lr, #9
   1216e:	d1f6      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   12170:	f81c 5c0f 	ldrb.w	r5, [ip, #-15]
   12174:	2d04      	cmp	r5, #4
   12176:	d1f2      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   12178:	f81c 0c0c 	ldrb.w	r0, [ip, #-12]
   1217c:	2801      	cmp	r0, #1
   1217e:	d1ee      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[4] == 1 &&				// has 1 endpoint
   12180:	f81c 0c0b 	ldrb.w	r0, [ip, #-11]
   12184:	2809      	cmp	r0, #9
   12186:	d1ea      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[7] >= 0 && d[7] <= 2 &&		// bInterfaceProtocol is ok
   12188:	f81c 0c09 	ldrb.w	r0, [ip, #-9]
   1218c:	2802      	cmp	r0, #2
   1218e:	d8e6      	bhi.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   12190:	f81c 5c07 	ldrb.w	r5, [ip, #-7]
   12194:	2d07      	cmp	r5, #7
   12196:	d1e2      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[9] == 7 && d[10] == 5 &&		// valid endpoint descriptor
   12198:	f81c 5c06 	ldrb.w	r5, [ip, #-6]
   1219c:	2d05      	cmp	r5, #5
   1219e:	d1de      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
   121a0:	f81c 5c05 	ldrb.w	r5, [ip, #-5]
   121a4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
   121a8:	2d80      	cmp	r5, #128	; 0x80
   121aa:	d1d8      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  (d[11] & 0xF0) == 0x80 &&		// endpoint direction is IN
   121ac:	f81c 5c04 	ldrb.w	r5, [ip, #-4]
   121b0:	2d03      	cmp	r5, #3
   121b2:	d1d4      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[12] == 3 &&				// endpoint type is interrupt
   121b4:	f81c 5c03 	ldrb.w	r5, [ip, #-3]
   121b8:	2d01      	cmp	r5, #1
   121ba:	d1d0      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
		  d[13] == 1 && d[14] == 0) {		// max packet size is 1 byte
   121bc:	f81c 5c02 	ldrb.w	r5, [ip, #-2]
   121c0:	2d00      	cmp	r5, #0
   121c2:	d1cc      	bne.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
			println("found possible interface, altsetting=", d[3]);
   121c4:	f81c 5c0d 	ldrb.w	r5, [ip, #-13]
			if (interface_count == 0) {
   121c8:	2a00      	cmp	r2, #0
   121ca:	d14d      	bne.n	12268 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14c>
				interface_number = d[2];
   121cc:	f81c 0c0e 	ldrb.w	r0, [ip, #-14]
   121d0:	f884 0391 	strb.w	r0, [r4, #913]	; 0x391
				altsetting = d[3];
   121d4:	f81c 0c0d 	ldrb.w	r0, [ip, #-13]
   121d8:	f884 0392 	strb.w	r0, [r4, #914]	; 0x392
					protocol = d[7];
   121dc:	f81c 0c09 	ldrb.w	r0, [ip, #-9]
   121e0:	f884 0393 	strb.w	r0, [r4, #915]	; 0x393
					endpoint = d[11] & 0x0F;
   121e4:	f81c 0c05 	ldrb.w	r0, [ip, #-5]
   121e8:	f000 000f 	and.w	r0, r0, #15
   121ec:	f884 0394 	strb.w	r0, [r4, #916]	; 0x394
					interval = d[15];
   121f0:	f81c 0c01 	ldrb.w	r0, [ip, #-1]
   121f4:	f884 0395 	strb.w	r0, [r4, #917]	; 0x395
			interface_count++;
   121f8:	3201      	adds	r2, #1
   121fa:	b2d2      	uxtb	r2, r2
   121fc:	f884 2390 	strb.w	r2, [r4, #912]	; 0x390
   12200:	e7ad      	b.n	1215e <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x42>
	if (interface_count == 0) return false; // no usable interface found
   12202:	b91a      	cbnz	r2, 1220c <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xf0>
	if (type != 0) return false;
   12204:	2000      	movs	r0, #0
}
   12206:	bd70      	pop	{r4, r5, r6, pc}
	if (type != 0) return false;
   12208:	2000      	movs	r0, #0
}
   1220a:	4770      	bx	lr
	numports = 0; // unknown until hub descriptor is read
   1220c:	2300      	movs	r3, #0
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1220e:	4a20      	ldr	r2, [pc, #128]	; (12290 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x174>)
        s.word2 = wIndex | (wLength << 16);
   12210:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
	queue_Control_Transfer(dev, &setup, hub_desc, this);
   12214:	4608      	mov	r0, r1
	memset(portstate, 0, sizeof(portstate));
   12216:	f8c4 339c 	str.w	r3, [r4, #924]	; 0x39c
	queue_Control_Transfer(dev, &setup, hub_desc, this);
   1221a:	f504 7154 	add.w	r1, r4, #848	; 0x350
	numports = 0; // unknown until hub descriptor is read
   1221e:	f884 3396 	strb.w	r3, [r4, #918]	; 0x396
	changepipe = NULL;
   12222:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
	changebits = 0;
   12226:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
	sending_control_transfer = 0;
   1222a:	f884 3399 	strb.w	r3, [r4, #921]	; 0x399
	port_doing_reset = 0;
   1222e:	f884 339a 	strb.w	r3, [r4, #922]	; 0x39a
	memset(portstate, 0, sizeof(portstate));
   12232:	f8c4 339f 	str.w	r3, [r4, #927]	; 0x39f
	memset(devicelist, 0, sizeof(devicelist));
   12236:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   1223a:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
   1223e:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
   12242:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   12246:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
   1224a:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
   1224e:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
	queue_Control_Transfer(dev, &setup, hub_desc, this);
   12252:	4623      	mov	r3, r4
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12254:	f8c4 2350 	str.w	r2, [r4, #848]	; 0x350
   12258:	f504 7260 	add.w	r2, r4, #896	; 0x380
        s.word2 = wIndex | (wLength << 16);
   1225c:	f8c4 5354 	str.w	r5, [r4, #852]	; 0x354
   12260:	f7fd ff7a 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	return true;
   12264:	2001      	movs	r0, #1
}
   12266:	bd70      	pop	{r4, r5, r6, pc}
				if (d[2] != interface_number) break;
   12268:	f81c 6c0e 	ldrb.w	r6, [ip, #-14]
   1226c:	f894 e391 	ldrb.w	lr, [r4, #913]	; 0x391
   12270:	4576      	cmp	r6, lr
   12272:	d1cb      	bne.n	1220c <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xf0>
				if (d[7] > protocol) {
   12274:	f894 e393 	ldrb.w	lr, [r4, #915]	; 0x393
   12278:	4586      	cmp	lr, r0
   1227a:	d2bd      	bcs.n	121f8 <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xdc>
					altsetting = d[3];
   1227c:	f884 5392 	strb.w	r5, [r4, #914]	; 0x392
   12280:	e7ac      	b.n	121dc <USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc0>
   12282:	bf00      	nop
   12284:	20005d80 	.word	0x20005d80
   12288:	00ffff00 	.word	0x00ffff00
   1228c:	20005d98 	.word	0x20005d98
   12290:	290006a0 	.word	0x290006a0

00012294 <USBHub::init()>:
{
   12294:	b510      	push	{r4, lr}
   12296:	4604      	mov	r4, r0
	contribute_Devices(mydevices, sizeof(mydevices)/sizeof(Device_t));
   12298:	2107      	movs	r1, #7
   1229a:	300c      	adds	r0, #12
   1229c:	f002 fedc 	bl	15058 <USBHost::contribute_Devices(Device_struct*, unsigned long)>
	contribute_Pipes(mypipes, sizeof(mypipes)/sizeof(Pipe_t));
   122a0:	f504 7090 	add.w	r0, r4, #288	; 0x120
   122a4:	2102      	movs	r1, #2
   122a6:	f002 feef 	bl	15088 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>
	contribute_Transfers(mytransfers, sizeof(mytransfers)/sizeof(Transfer_t));
   122aa:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   122ae:	2104      	movs	r1, #4
   122b0:	f002 ff02 	bl	150b8 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>
	contribute_String_Buffers(mystring_bufs, sizeof(mystring_bufs)/sizeof(strbuf_t));
   122b4:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   122b8:	2101      	movs	r1, #1
   122ba:	f002 ff17 	bl	150ec <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>
	driver_ready_for_device(this);
   122be:	4620      	mov	r0, r4
}
   122c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	driver_ready_for_device(this);
   122c4:	f7fe bd84 	b.w	10dd0 <USBHost::driver_ready_for_device(USBDriver*)>

000122c8 <USBHub::send_poweron(unsigned long)>:
	if (port == 0 || port > numports) return;
   122c8:	b1f9      	cbz	r1, 1230a <USBHub::send_poweron(unsigned long)+0x42>
{
   122ca:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   122cc:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   122d0:	4604      	mov	r4, r0
   122d2:	460d      	mov	r5, r1
   122d4:	428b      	cmp	r3, r1
   122d6:	d317      	bcc.n	12308 <USBHub::send_poweron(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   122d8:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   122dc:	b9b2      	cbnz	r2, 1230c <USBHub::send_poweron(unsigned long)+0x44>
	sending_control_transfer = 1;
   122de:	2601      	movs	r6, #1
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   122e0:	4b0e      	ldr	r3, [pc, #56]	; (1231c <USBHub::send_poweron(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   122e2:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   122e6:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   122ea:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_poweron &= ~(1 << port);
   122ee:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   122f0:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   122f4:	4603      	mov	r3, r0
   122f6:	6880      	ldr	r0, [r0, #8]
   122f8:	f7fd ff2e 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_poweron &= ~(1 << port);
   122fc:	f894 33a3 	ldrb.w	r3, [r4, #931]	; 0x3a3
   12300:	ea23 0306 	bic.w	r3, r3, r6
   12304:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
}
   12308:	bd70      	pop	{r4, r5, r6, pc}
   1230a:	4770      	bx	lr
		send_pending_poweron |= (1 << port);
   1230c:	2201      	movs	r2, #1
   1230e:	f890 33a3 	ldrb.w	r3, [r0, #931]	; 0x3a3
   12312:	408a      	lsls	r2, r1
   12314:	4313      	orrs	r3, r2
   12316:	f880 33a3 	strb.w	r3, [r0, #931]	; 0x3a3
}
   1231a:	bd70      	pop	{r4, r5, r6, pc}
   1231c:	00080323 	.word	0x00080323

00012320 <USBHub::send_getstatus(unsigned long)>:
	if (port > numports) return;
   12320:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12324:	428b      	cmp	r3, r1
   12326:	d329      	bcc.n	1237c <USBHub::send_getstatus(unsigned long)+0x5c>
{
   12328:	b570      	push	{r4, r5, r6, lr}
	if (sending_control_transfer) return false;
   1232a:	f890 3399 	ldrb.w	r3, [r0, #921]	; 0x399
   1232e:	4604      	mov	r4, r0
   12330:	460d      	mov	r5, r1
   12332:	b9db      	cbnz	r3, 1236c <USBHub::send_getstatus(unsigned long)+0x4c>
		mk_setup(setup, ((port > 0) ? 0xA3 : 0xA0), 0, 0, port, 4);
   12334:	2900      	cmp	r1, #0
	sending_control_transfer = 1;
   12336:	f04f 0601 	mov.w	r6, #1
        s.word2 = wIndex | (wLength << 16);
   1233a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
		queue_Control_Transfer(device, &setup, &statusbits, this);
   1233e:	4603      	mov	r3, r0
		mk_setup(setup, ((port > 0) ? 0xA3 : 0xA0), 0, 0, port, 4);
   12340:	bf14      	ite	ne
   12342:	22a3      	movne	r2, #163	; 0xa3
   12344:	22a0      	moveq	r2, #160	; 0xa0
	sending_control_transfer = 1;
   12346:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_getstatus &= ~(1 << port);
   1234a:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   1234c:	e9c0 21d4 	strd	r2, r1, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, &statusbits, this);
   12350:	f500 725f 	add.w	r2, r0, #892	; 0x37c
   12354:	f500 7154 	add.w	r1, r0, #848	; 0x350
   12358:	6880      	ldr	r0, [r0, #8]
   1235a:	f7fd fefd 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_getstatus &= ~(1 << port);
   1235e:	f894 33a4 	ldrb.w	r3, [r4, #932]	; 0x3a4
   12362:	ea23 0306 	bic.w	r3, r3, r6
   12366:	f884 33a4 	strb.w	r3, [r4, #932]	; 0x3a4
}
   1236a:	bd70      	pop	{r4, r5, r6, pc}
		send_pending_getstatus |= (1 << port);
   1236c:	2201      	movs	r2, #1
   1236e:	f890 33a4 	ldrb.w	r3, [r0, #932]	; 0x3a4
   12372:	408a      	lsls	r2, r1
   12374:	4313      	orrs	r3, r2
   12376:	f880 33a4 	strb.w	r3, [r0, #932]	; 0x3a4
}
   1237a:	bd70      	pop	{r4, r5, r6, pc}
   1237c:	4770      	bx	lr
   1237e:	bf00      	nop

00012380 <USBHub::timer_event(USBDriverTimer*)>:
{
   12380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12384:	4604      	mov	r4, r0
   12386:	460d      	mov	r5, r1
	uint32_t us = micros() - timer->started_micros;
   12388:	f003 fe0e 	bl	15fa8 <micros>
	if (timer == &debouncetimer) {
   1238c:	f504 7646 	add.w	r6, r4, #792	; 0x318
   12390:	42ae      	cmp	r6, r5
   12392:	d023      	beq.n	123dc <USBHub::timer_event(USBDriverTimer*)+0x5c>
	} else if (timer == &resettimer) {
   12394:	f504 734d 	add.w	r3, r4, #820	; 0x334
   12398:	429d      	cmp	r5, r3
   1239a:	d001      	beq.n	123a0 <USBHub::timer_event(USBDriverTimer*)+0x20>
}
   1239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t port = port_doing_reset;
   123a0:	f894 539a 	ldrb.w	r5, [r4, #922]	; 0x39a
		if (port_doing_reset) {
   123a4:	2d00      	cmp	r5, #0
   123a6:	d0f9      	beq.n	1239c <USBHub::timer_event(USBDriverTimer*)+0x1c>
			uint8_t &state = portstate[port-1];
   123a8:	1e6e      	subs	r6, r5, #1
			if (state == PORT_RECOVERY) {
   123aa:	4426      	add	r6, r4
   123ac:	f896 339c 	ldrb.w	r3, [r6, #924]	; 0x39c
   123b0:	2b08      	cmp	r3, #8
   123b2:	d1f3      	bne.n	1239c <USBHub::timer_event(USBDriverTimer*)+0x1c>
				devicelist[port-1] = new_Device(speed, device->address, port);
   123b4:	68a3      	ldr	r3, [r4, #8]
				port_doing_reset = 0;
   123b6:	2700      	movs	r7, #0
				devicelist[port-1] = new_Device(speed, device->address, port);
   123b8:	462a      	mov	r2, r5
   123ba:	f894 039b 	ldrb.w	r0, [r4, #923]	; 0x39b
				port_doing_reset = 0;
   123be:	f884 739a 	strb.w	r7, [r4, #922]	; 0x39a
				devicelist[port-1] = new_Device(speed, device->address, port);
   123c2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   123c6:	7d59      	ldrb	r1, [r3, #21]
   123c8:	f7fe fd12 	bl	10df0 <USBHost::new_Device(unsigned long, unsigned long, unsigned long)>
				USBHub::reset_busy = false;
   123cc:	4a14      	ldr	r2, [pc, #80]	; (12420 <USBHub::timer_event(USBDriverTimer*)+0xa0>)
				state = PORT_ACTIVE;
   123ce:	2309      	movs	r3, #9
				devicelist[port-1] = new_Device(speed, device->address, port);
   123d0:	f8c4 0358 	str.w	r0, [r4, #856]	; 0x358
				USBHub::reset_busy = false;
   123d4:	7017      	strb	r7, [r2, #0]
				state = PORT_ACTIVE;
   123d6:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
}
   123da:	e7df      	b.n	1239c <USBHub::timer_event(USBDriverTimer*)+0x1c>
		uint32_t in_use = debounce_in_use;
   123dc:	f894 73ab 	ldrb.w	r7, [r4, #939]	; 0x3ab
		if (in_use) {
   123e0:	2f00      	cmp	r7, #0
   123e2:	d0db      	beq.n	1239c <USBHub::timer_event(USBDriverTimer*)+0x1c>
			for (uint32_t i=1; i <= numports; i++) {
   123e4:	f894 2396 	ldrb.w	r2, [r4, #918]	; 0x396
   123e8:	b192      	cbz	r2, 12410 <USBHub::timer_event(USBDriverTimer*)+0x90>
   123ea:	2501      	movs	r5, #1
				if (in_use & (1 << i)) send_getstatus(i);
   123ec:	46a8      	mov	r8, r5
   123ee:	e002      	b.n	123f6 <USBHub::timer_event(USBDriverTimer*)+0x76>
			for (uint32_t i=1; i <= numports; i++) {
   123f0:	3501      	adds	r5, #1
   123f2:	42aa      	cmp	r2, r5
   123f4:	d30c      	bcc.n	12410 <USBHub::timer_event(USBDriverTimer*)+0x90>
				if (in_use & (1 << i)) send_getstatus(i);
   123f6:	fa08 f305 	lsl.w	r3, r8, r5
   123fa:	423b      	tst	r3, r7
   123fc:	d0f8      	beq.n	123f0 <USBHub::timer_event(USBDriverTimer*)+0x70>
   123fe:	4629      	mov	r1, r5
   12400:	4620      	mov	r0, r4
   12402:	f7ff ff8d 	bl	12320 <USBHub::send_getstatus(unsigned long)>
			for (uint32_t i=1; i <= numports; i++) {
   12406:	3501      	adds	r5, #1
   12408:	f894 2396 	ldrb.w	r2, [r4, #918]	; 0x396
   1240c:	42aa      	cmp	r2, r5
   1240e:	d2f2      	bcs.n	123f6 <USBHub::timer_event(USBDriverTimer*)+0x76>
			debouncetimer.start(20000);
   12410:	4630      	mov	r0, r6
   12412:	f644 6120 	movw	r1, #20000	; 0x4e20
}
   12416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			debouncetimer.start(20000);
   1241a:	f7fd bd93 	b.w	ff44 <USBDriverTimer::start(unsigned long)>
   1241e:	bf00      	nop
   12420:	2000fc37 	.word	0x2000fc37

00012424 <USBHub::callback(Transfer_struct const*)>:
{
   12424:	b570      	push	{r4, r5, r6, lr}
	if (transfer->driver) ((USBHub *)(transfer->driver))->status_change(transfer);
   12426:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
   12428:	b305      	cbz	r5, 1246c <USBHub::callback(Transfer_struct const*)+0x48>
	for (uint32_t i=0; i <= numports; i++) {
   1242a:	2400      	movs	r4, #0
		if (changebits & (1 << i)) {
   1242c:	2601      	movs	r6, #1
   1242e:	e004      	b.n	1243a <USBHub::callback(Transfer_struct const*)+0x16>
	for (uint32_t i=0; i <= numports; i++) {
   12430:	3401      	adds	r4, #1
   12432:	f895 3396 	ldrb.w	r3, [r5, #918]	; 0x396
   12436:	429c      	cmp	r4, r3
   12438:	d80e      	bhi.n	12458 <USBHub::callback(Transfer_struct const*)+0x34>
		if (changebits & (1 << i)) {
   1243a:	fa06 f204 	lsl.w	r2, r6, r4
   1243e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
   12442:	421a      	tst	r2, r3
   12444:	d0f4      	beq.n	12430 <USBHub::callback(Transfer_struct const*)+0xc>
			send_getstatus(i);
   12446:	4621      	mov	r1, r4
   12448:	4628      	mov	r0, r5
   1244a:	f7ff ff69 	bl	12320 <USBHub::send_getstatus(unsigned long)>
	for (uint32_t i=0; i <= numports; i++) {
   1244e:	3401      	adds	r4, #1
   12450:	f895 3396 	ldrb.w	r3, [r5, #918]	; 0x396
   12454:	429c      	cmp	r4, r3
   12456:	d9f0      	bls.n	1243a <USBHub::callback(Transfer_struct const*)+0x16>
	queue_Data_Transfer(changepipe, &changebits, 1, this);
   12458:	462b      	mov	r3, r5
   1245a:	f505 715e 	add.w	r1, r5, #888	; 0x378
   1245e:	f8d5 0358 	ldr.w	r0, [r5, #856]	; 0x358
   12462:	2201      	movs	r2, #1
}
   12464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	queue_Data_Transfer(changepipe, &changebits, 1, this);
   12468:	f7fd bf10 	b.w	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
}
   1246c:	bd70      	pop	{r4, r5, r6, pc}
   1246e:	bf00      	nop

00012470 <USBHub::send_clearstatus_connect(unsigned long)>:
	if (port == 0 || port > numports) return;
   12470:	b1f9      	cbz	r1, 124b2 <USBHub::send_clearstatus_connect(unsigned long)+0x42>
{
   12472:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   12474:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12478:	4604      	mov	r4, r0
   1247a:	460d      	mov	r5, r1
   1247c:	428b      	cmp	r3, r1
   1247e:	d317      	bcc.n	124b0 <USBHub::send_clearstatus_connect(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12480:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   12484:	b9b2      	cbnz	r2, 124b4 <USBHub::send_clearstatus_connect(unsigned long)+0x44>
	sending_control_transfer = 1;
   12486:	2601      	movs	r6, #1
   12488:	4b0e      	ldr	r3, [pc, #56]	; (124c4 <USBHub::send_clearstatus_connect(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   1248a:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   1248e:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   12492:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_connect &= ~(1 << port);
   12496:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12498:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   1249c:	4603      	mov	r3, r0
   1249e:	6880      	ldr	r0, [r0, #8]
   124a0:	f7fd fe5a 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_connect &= ~(1 << port);
   124a4:	f894 33a5 	ldrb.w	r3, [r4, #933]	; 0x3a5
   124a8:	ea23 0306 	bic.w	r3, r3, r6
   124ac:	f884 33a5 	strb.w	r3, [r4, #933]	; 0x3a5
}
   124b0:	bd70      	pop	{r4, r5, r6, pc}
   124b2:	4770      	bx	lr
		send_pending_clearstatus_connect |= (1 << port);
   124b4:	2201      	movs	r2, #1
   124b6:	f890 33a5 	ldrb.w	r3, [r0, #933]	; 0x3a5
   124ba:	408a      	lsls	r2, r1
   124bc:	4313      	orrs	r3, r2
   124be:	f880 33a5 	strb.w	r3, [r0, #933]	; 0x3a5
}
   124c2:	bd70      	pop	{r4, r5, r6, pc}
   124c4:	00100123 	.word	0x00100123

000124c8 <USBHub::send_clearstatus_enable(unsigned long)>:
	if (port == 0 || port > numports) return;
   124c8:	b1f9      	cbz	r1, 1250a <USBHub::send_clearstatus_enable(unsigned long)+0x42>
{
   124ca:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   124cc:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   124d0:	4604      	mov	r4, r0
   124d2:	460d      	mov	r5, r1
   124d4:	428b      	cmp	r3, r1
   124d6:	d317      	bcc.n	12508 <USBHub::send_clearstatus_enable(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   124d8:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   124dc:	b9b2      	cbnz	r2, 1250c <USBHub::send_clearstatus_enable(unsigned long)+0x44>
	sending_control_transfer = 1;
   124de:	2601      	movs	r6, #1
   124e0:	4b0e      	ldr	r3, [pc, #56]	; (1251c <USBHub::send_clearstatus_enable(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   124e2:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   124e6:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   124ea:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_enable &= ~(1 << port);
   124ee:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   124f0:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   124f4:	4603      	mov	r3, r0
   124f6:	6880      	ldr	r0, [r0, #8]
   124f8:	f7fd fe2e 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_enable &= ~(1 << port);
   124fc:	f894 33a6 	ldrb.w	r3, [r4, #934]	; 0x3a6
   12500:	ea23 0306 	bic.w	r3, r3, r6
   12504:	f884 33a6 	strb.w	r3, [r4, #934]	; 0x3a6
}
   12508:	bd70      	pop	{r4, r5, r6, pc}
   1250a:	4770      	bx	lr
		send_pending_clearstatus_enable |= (1 << port);
   1250c:	2201      	movs	r2, #1
   1250e:	f890 33a6 	ldrb.w	r3, [r0, #934]	; 0x3a6
   12512:	408a      	lsls	r2, r1
   12514:	4313      	orrs	r3, r2
   12516:	f880 33a6 	strb.w	r3, [r0, #934]	; 0x3a6
}
   1251a:	bd70      	pop	{r4, r5, r6, pc}
   1251c:	00110123 	.word	0x00110123

00012520 <USBHub::send_clearstatus_suspend(unsigned long)>:
	if (port == 0 || port > numports) return;
   12520:	b1f9      	cbz	r1, 12562 <USBHub::send_clearstatus_suspend(unsigned long)+0x42>
{
   12522:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   12524:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12528:	4604      	mov	r4, r0
   1252a:	460d      	mov	r5, r1
   1252c:	428b      	cmp	r3, r1
   1252e:	d317      	bcc.n	12560 <USBHub::send_clearstatus_suspend(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12530:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   12534:	b9b2      	cbnz	r2, 12564 <USBHub::send_clearstatus_suspend(unsigned long)+0x44>
	sending_control_transfer = 1;
   12536:	2601      	movs	r6, #1
   12538:	4b0e      	ldr	r3, [pc, #56]	; (12574 <USBHub::send_clearstatus_suspend(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   1253a:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   1253e:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   12542:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_suspend &= ~(1 << port);
   12546:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12548:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   1254c:	4603      	mov	r3, r0
   1254e:	6880      	ldr	r0, [r0, #8]
   12550:	f7fd fe02 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_suspend &= ~(1 << port);
   12554:	f894 33a7 	ldrb.w	r3, [r4, #935]	; 0x3a7
   12558:	ea23 0306 	bic.w	r3, r3, r6
   1255c:	f884 33a7 	strb.w	r3, [r4, #935]	; 0x3a7
}
   12560:	bd70      	pop	{r4, r5, r6, pc}
   12562:	4770      	bx	lr
		send_pending_clearstatus_suspend |= (1 << port);
   12564:	2201      	movs	r2, #1
   12566:	f890 33a7 	ldrb.w	r3, [r0, #935]	; 0x3a7
   1256a:	408a      	lsls	r2, r1
   1256c:	4313      	orrs	r3, r2
   1256e:	f880 33a7 	strb.w	r3, [r0, #935]	; 0x3a7
}
   12572:	bd70      	pop	{r4, r5, r6, pc}
   12574:	00120123 	.word	0x00120123

00012578 <USBHub::send_clearstatus_overcurrent(unsigned long)>:
	if (port == 0 || port > numports) return;
   12578:	b1f9      	cbz	r1, 125ba <USBHub::send_clearstatus_overcurrent(unsigned long)+0x42>
{
   1257a:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   1257c:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12580:	4604      	mov	r4, r0
   12582:	460d      	mov	r5, r1
   12584:	428b      	cmp	r3, r1
   12586:	d317      	bcc.n	125b8 <USBHub::send_clearstatus_overcurrent(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12588:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   1258c:	b9b2      	cbnz	r2, 125bc <USBHub::send_clearstatus_overcurrent(unsigned long)+0x44>
	sending_control_transfer = 1;
   1258e:	2601      	movs	r6, #1
   12590:	4b0e      	ldr	r3, [pc, #56]	; (125cc <USBHub::send_clearstatus_overcurrent(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   12592:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   12596:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   1259a:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_overcurrent &= ~(1 << port);
   1259e:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   125a0:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   125a4:	4603      	mov	r3, r0
   125a6:	6880      	ldr	r0, [r0, #8]
   125a8:	f7fd fdd6 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_overcurrent &= ~(1 << port);
   125ac:	f894 33a8 	ldrb.w	r3, [r4, #936]	; 0x3a8
   125b0:	ea23 0306 	bic.w	r3, r3, r6
   125b4:	f884 33a8 	strb.w	r3, [r4, #936]	; 0x3a8
}
   125b8:	bd70      	pop	{r4, r5, r6, pc}
   125ba:	4770      	bx	lr
		send_pending_clearstatus_overcurrent |= (1 << port);
   125bc:	2201      	movs	r2, #1
   125be:	f890 33a8 	ldrb.w	r3, [r0, #936]	; 0x3a8
   125c2:	408a      	lsls	r2, r1
   125c4:	4313      	orrs	r3, r2
   125c6:	f880 33a8 	strb.w	r3, [r0, #936]	; 0x3a8
}
   125ca:	bd70      	pop	{r4, r5, r6, pc}
   125cc:	00130123 	.word	0x00130123

000125d0 <USBHub::send_clearstatus_reset(unsigned long)>:
	if (port == 0 || port > numports) return;
   125d0:	b1f9      	cbz	r1, 12612 <USBHub::send_clearstatus_reset(unsigned long)+0x42>
{
   125d2:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   125d4:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   125d8:	4604      	mov	r4, r0
   125da:	460d      	mov	r5, r1
   125dc:	428b      	cmp	r3, r1
   125de:	d317      	bcc.n	12610 <USBHub::send_clearstatus_reset(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   125e0:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   125e4:	b9b2      	cbnz	r2, 12614 <USBHub::send_clearstatus_reset(unsigned long)+0x44>
	sending_control_transfer = 1;
   125e6:	2601      	movs	r6, #1
   125e8:	4b0e      	ldr	r3, [pc, #56]	; (12624 <USBHub::send_clearstatus_reset(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   125ea:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   125ee:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   125f2:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_clearstatus_reset &= ~(1 << port);
   125f6:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   125f8:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   125fc:	4603      	mov	r3, r0
   125fe:	6880      	ldr	r0, [r0, #8]
   12600:	f7fd fdaa 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_clearstatus_reset &= ~(1 << port);
   12604:	f894 33a9 	ldrb.w	r3, [r4, #937]	; 0x3a9
   12608:	ea23 0306 	bic.w	r3, r3, r6
   1260c:	f884 33a9 	strb.w	r3, [r4, #937]	; 0x3a9
}
   12610:	bd70      	pop	{r4, r5, r6, pc}
   12612:	4770      	bx	lr
		send_pending_clearstatus_reset |= (1 << port);
   12614:	2201      	movs	r2, #1
   12616:	f890 33a9 	ldrb.w	r3, [r0, #937]	; 0x3a9
   1261a:	408a      	lsls	r2, r1
   1261c:	4313      	orrs	r3, r2
   1261e:	f880 33a9 	strb.w	r3, [r0, #937]	; 0x3a9
}
   12622:	bd70      	pop	{r4, r5, r6, pc}
   12624:	00140123 	.word	0x00140123

00012628 <USBHub::send_setreset(unsigned long)>:
	if (port == 0 || port > numports) return;
   12628:	b1f9      	cbz	r1, 1266a <USBHub::send_setreset(unsigned long)+0x42>
{
   1262a:	b570      	push	{r4, r5, r6, lr}
	if (port == 0 || port > numports) return;
   1262c:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   12630:	4604      	mov	r4, r0
   12632:	460d      	mov	r5, r1
   12634:	428b      	cmp	r3, r1
   12636:	d317      	bcc.n	12668 <USBHub::send_setreset(unsigned long)+0x40>
	if (sending_control_transfer) return false;
   12638:	f890 2399 	ldrb.w	r2, [r0, #921]	; 0x399
   1263c:	b9b2      	cbnz	r2, 1266c <USBHub::send_setreset(unsigned long)+0x44>
	sending_control_transfer = 1;
   1263e:	2601      	movs	r6, #1
   12640:	4b0e      	ldr	r3, [pc, #56]	; (1267c <USBHub::send_setreset(unsigned long)+0x54>)
        s.word2 = wIndex | (wLength << 16);
   12642:	f8c0 1354 	str.w	r1, [r0, #852]	; 0x354
		queue_Control_Transfer(device, &setup, NULL, this);
   12646:	f500 7154 	add.w	r1, r0, #848	; 0x350
	sending_control_transfer = 1;
   1264a:	f880 6399 	strb.w	r6, [r0, #921]	; 0x399
		send_pending_setreset &= ~(1 << port);
   1264e:	40ae      	lsls	r6, r5
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   12650:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   12654:	4603      	mov	r3, r0
   12656:	6880      	ldr	r0, [r0, #8]
   12658:	f7fd fd7e 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_setreset &= ~(1 << port);
   1265c:	f894 33aa 	ldrb.w	r3, [r4, #938]	; 0x3aa
   12660:	ea23 0306 	bic.w	r3, r3, r6
   12664:	f884 33aa 	strb.w	r3, [r4, #938]	; 0x3aa
}
   12668:	bd70      	pop	{r4, r5, r6, pc}
   1266a:	4770      	bx	lr
		send_pending_setreset |= (1 << port);
   1266c:	2201      	movs	r2, #1
   1266e:	f890 33aa 	ldrb.w	r3, [r0, #938]	; 0x3aa
   12672:	408a      	lsls	r2, r1
   12674:	4313      	orrs	r3, r2
   12676:	f880 33aa 	strb.w	r3, [r0, #938]	; 0x3aa
}
   1267a:	bd70      	pop	{r4, r5, r6, pc}
   1267c:	00040323 	.word	0x00040323

00012680 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]>:
void USBHub::new_port_status(uint32_t port, uint32_t status)
   12680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	println("  state=", portstate[port-1]);
   12684:	1e4e      	subs	r6, r1, #1
void USBHub::new_port_status(uint32_t port, uint32_t status)
   12686:	b082      	sub	sp, #8
   12688:	460d      	mov	r5, r1
   1268a:	4604      	mov	r4, r0
	println("  state=", portstate[port-1]);
   1268c:	4406      	add	r6, r0
	if (status & 0x0001) println("  Device is present: ");
   1268e:	f002 0701 	and.w	r7, r2, #1
	println("  state=", portstate[port-1]);
   12692:	f896 339c 	ldrb.w	r3, [r6, #924]	; 0x39c
	switch (state) {
   12696:	2b09      	cmp	r3, #9
   12698:	d808      	bhi.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
   1269a:	e8df f003 	tbb	[pc, r3]
   1269e:	1d1d      	.short	0x1d1d
   126a0:	0a0a0a0a 	.word	0x0a0a0a0a
   126a4:	4a05320a 	.word	0x4a05320a
		if (!(status & 0x0001)) {
   126a8:	2f00      	cmp	r7, #0
   126aa:	d054      	beq.n	12756 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0xd6>
}
   126ac:	b002      	add	sp, #8
   126ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (status & 0x0001) {
   126b2:	2f00      	cmp	r7, #0
   126b4:	d059      	beq.n	1276a <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0xea>
			if (++state > PORT_DEBOUNCE5) {
   126b6:	3301      	adds	r3, #1
   126b8:	b2db      	uxtb	r3, r3
   126ba:	2b07      	cmp	r3, #7
   126bc:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
   126c0:	d1f4      	bne.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
				if (USBHub::reset_busy || USBHost::enumeration_busy) {
   126c2:	4a3f      	ldr	r2, [pc, #252]	; (127c0 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x140>)
   126c4:	7811      	ldrb	r1, [r2, #0]
   126c6:	b919      	cbnz	r1, 126d0 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x50>
   126c8:	493e      	ldr	r1, [pc, #248]	; (127c4 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x144>)
   126ca:	7809      	ldrb	r1, [r1, #0]
   126cc:	2900      	cmp	r1, #0
   126ce:	d065      	beq.n	1279c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x11c>
					state = PORT_DEBOUNCE5;
   126d0:	2306      	movs	r3, #6
   126d2:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
					break;
   126d6:	e7e9      	b.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
		if (status & 0x0001) { // connected
   126d8:	2f00      	cmp	r7, #0
   126da:	d0e7      	beq.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			state = PORT_DEBOUNCE1;
   126dc:	2302      	movs	r3, #2
   126de:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
	if (debounce_in_use == 0) debouncetimer.start(20000);
   126e2:	f890 33ab 	ldrb.w	r3, [r0, #939]	; 0x3ab
   126e6:	2b00      	cmp	r3, #0
   126e8:	d04f      	beq.n	1278a <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x10a>
	debounce_in_use |= (1 << port);
   126ea:	2201      	movs	r2, #1
			send_clearstatus_connect(port);
   126ec:	4629      	mov	r1, r5
   126ee:	4620      	mov	r0, r4
	debounce_in_use |= (1 << port);
   126f0:	40aa      	lsls	r2, r5
   126f2:	4313      	orrs	r3, r2
   126f4:	f884 33ab 	strb.w	r3, [r4, #939]	; 0x3ab
}
   126f8:	b002      	add	sp, #8
   126fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			send_clearstatus_connect(port);
   126fe:	f7ff beb7 	b.w	12470 <USBHub::send_clearstatus_connect(unsigned long)>
		if (status & 0x0002) {
   12702:	0791      	lsls	r1, r2, #30
   12704:	d5d0      	bpl.n	126a8 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x28>
			send_clearstatus_reset(port);
   12706:	4629      	mov	r1, r5
   12708:	9201      	str	r2, [sp, #4]
   1270a:	f7ff ff61 	bl	125d0 <USBHub::send_clearstatus_reset(unsigned long)>
			state = PORT_RECOVERY;
   1270e:	2308      	movs	r3, #8
			if (status & 0x0200) speed = 1;
   12710:	9a01      	ldr	r2, [sp, #4]
			state = PORT_RECOVERY;
   12712:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
			if (status & 0x0200) speed = 1;
   12716:	0593      	lsls	r3, r2, #22
   12718:	d533      	bpl.n	12782 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x102>
   1271a:	2201      	movs	r2, #1
			resettimer.start(25000);
   1271c:	f246 11a8 	movw	r1, #25000	; 0x61a8
   12720:	f504 704d 	add.w	r0, r4, #820	; 0x334
			port_doing_reset_speed = speed;
   12724:	f884 239b 	strb.w	r2, [r4, #923]	; 0x39b
}
   12728:	b002      	add	sp, #8
   1272a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			resettimer.start(25000);
   1272e:	f7fd bc09 	b.w	ff44 <USBDriverTimer::start(unsigned long)>
		if (!(status & 0x0001)) {
   12732:	2f00      	cmp	r7, #0
   12734:	d1ba      	bne.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			disconnect_Device(devicelist[port-1]);
   12736:	eb00 0885 	add.w	r8, r0, r5, lsl #2
   1273a:	f8d8 0358 	ldr.w	r0, [r8, #856]	; 0x358
   1273e:	f7fe fdc1 	bl	112c4 <USBHost::disconnect_Device(Device_struct*)>
			send_clearstatus_connect(port);
   12742:	4629      	mov	r1, r5
   12744:	4620      	mov	r0, r4
			devicelist[port-1] = NULL;
   12746:	f8c8 7358 	str.w	r7, [r8, #856]	; 0x358
			send_clearstatus_connect(port);
   1274a:	f7ff fe91 	bl	12470 <USBHub::send_clearstatus_connect(unsigned long)>
			state = PORT_DISCONNECT;
   1274e:	2301      	movs	r3, #1
   12750:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
   12754:	e7aa      	b.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			send_clearstatus_connect(port);
   12756:	4629      	mov	r1, r5
   12758:	4620      	mov	r0, r4
   1275a:	f7ff fe89 	bl	12470 <USBHub::send_clearstatus_connect(unsigned long)>
			USBHub::reset_busy = false;
   1275e:	4a18      	ldr	r2, [pc, #96]	; (127c0 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x140>)
			state = PORT_DISCONNECT;
   12760:	2301      	movs	r3, #1
			USBHub::reset_busy = false;
   12762:	7017      	strb	r7, [r2, #0]
			state = PORT_DISCONNECT;
   12764:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
   12768:	e7a0      	b.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
	debounce_in_use &= ~(1 << port);
   1276a:	2201      	movs	r2, #1
   1276c:	f890 33ab 	ldrb.w	r3, [r0, #939]	; 0x3ab
   12770:	fa02 f505 	lsl.w	r5, r2, r5
   12774:	ea23 0305 	bic.w	r3, r3, r5
   12778:	f880 33ab 	strb.w	r3, [r0, #939]	; 0x3ab
			state = PORT_DISCONNECT;
   1277c:	f886 239c 	strb.w	r2, [r6, #924]	; 0x39c
   12780:	e794      	b.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
			else if (status & 0x0400) speed = 2;
   12782:	f3c2 2280 	ubfx	r2, r2, #10, #1
   12786:	0052      	lsls	r2, r2, #1
   12788:	e7c8      	b.n	1271c <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x9c>
	if (debounce_in_use == 0) debouncetimer.start(20000);
   1278a:	f644 6120 	movw	r1, #20000	; 0x4e20
   1278e:	f500 7046 	add.w	r0, r0, #792	; 0x318
   12792:	f7fd fbd7 	bl	ff44 <USBDriverTimer::start(unsigned long)>
	debounce_in_use |= (1 << port);
   12796:	f894 33ab 	ldrb.w	r3, [r4, #939]	; 0x3ab
   1279a:	e7a6      	b.n	126ea <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x6a>
				USBHub::reset_busy = true;
   1279c:	2101      	movs	r1, #1
   1279e:	7011      	strb	r1, [r2, #0]
	debounce_in_use &= ~(1 << port);
   127a0:	40a9      	lsls	r1, r5
   127a2:	f890 23ab 	ldrb.w	r2, [r0, #939]	; 0x3ab
   127a6:	ea22 0201 	bic.w	r2, r2, r1
				send_setreset(port);
   127aa:	4629      	mov	r1, r5
	debounce_in_use &= ~(1 << port);
   127ac:	f880 23ab 	strb.w	r2, [r0, #939]	; 0x3ab
				state = PORT_RESET;
   127b0:	f886 339c 	strb.w	r3, [r6, #924]	; 0x39c
				send_setreset(port);
   127b4:	f7ff ff38 	bl	12628 <USBHub::send_setreset(unsigned long)>
				port_doing_reset = port;
   127b8:	f884 539a 	strb.w	r5, [r4, #922]	; 0x39a
   127bc:	e776      	b.n	126ac <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]+0x2c>
   127be:	bf00      	nop
   127c0:	2000fc37 	.word	0x2000fc37
   127c4:	2000fc38 	.word	0x2000fc38

000127c8 <USBHub::control(Transfer_struct const*)>:
	sending_control_transfer = 0;
   127c8:	2200      	movs	r2, #0
{
   127ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	sending_control_transfer = 0;
   127ce:	f880 2399 	strb.w	r2, [r0, #921]	; 0x399
{
   127d2:	b082      	sub	sp, #8
	uint32_t mesg = transfer->setup.word1;
   127d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
{
   127d6:	4604      	mov	r4, r0
	switch (mesg) {
   127d8:	4d85      	ldr	r5, [pc, #532]	; (129f0 <USBHub::control(Transfer_struct const*)+0x228>)
	uint32_t port = transfer->setup.wIndex;
   127da:	8f0e      	ldrh	r6, [r1, #56]	; 0x38
	switch (mesg) {
   127dc:	42ab      	cmp	r3, r5
   127de:	f000 808c 	beq.w	128fa <USBHub::control(Transfer_struct const*)+0x132>
   127e2:	4d84      	ldr	r5, [pc, #528]	; (129f4 <USBHub::control(Transfer_struct const*)+0x22c>)
   127e4:	42ab      	cmp	r3, r5
   127e6:	d04e      	beq.n	12886 <USBHub::control(Transfer_struct const*)+0xbe>
   127e8:	2ba3      	cmp	r3, #163	; 0xa3
   127ea:	d037      	beq.n	1285c <USBHub::control(Transfer_struct const*)+0x94>
	if (send_pending_poweron) {
   127ec:	f894 13a3 	ldrb.w	r1, [r4, #931]	; 0x3a3
   127f0:	bb51      	cbnz	r1, 12848 <USBHub::control(Transfer_struct const*)+0x80>
	} else if (send_pending_clearstatus_connect) {
   127f2:	f894 13a5 	ldrb.w	r1, [r4, #933]	; 0x3a5
   127f6:	2900      	cmp	r1, #0
   127f8:	f040 80c8 	bne.w	1298c <USBHub::control(Transfer_struct const*)+0x1c4>
	} else if (send_pending_clearstatus_enable) {
   127fc:	f894 13a6 	ldrb.w	r1, [r4, #934]	; 0x3a6
   12800:	2900      	cmp	r1, #0
   12802:	f040 80b9 	bne.w	12978 <USBHub::control(Transfer_struct const*)+0x1b0>
	} else if (send_pending_clearstatus_suspend) {
   12806:	f894 13a7 	ldrb.w	r1, [r4, #935]	; 0x3a7
   1280a:	2900      	cmp	r1, #0
   1280c:	f040 80c8 	bne.w	129a0 <USBHub::control(Transfer_struct const*)+0x1d8>
	} else if (send_pending_clearstatus_overcurrent) {
   12810:	f894 13a8 	ldrb.w	r1, [r4, #936]	; 0x3a8
   12814:	2900      	cmp	r1, #0
   12816:	f040 80d7 	bne.w	129c8 <USBHub::control(Transfer_struct const*)+0x200>
	} else if (send_pending_clearstatus_reset) {
   1281a:	f894 13a9 	ldrb.w	r1, [r4, #937]	; 0x3a9
   1281e:	2900      	cmp	r1, #0
   12820:	f040 80dc 	bne.w	129dc <USBHub::control(Transfer_struct const*)+0x214>
	} else if (send_pending_getstatus) {
   12824:	f894 13a4 	ldrb.w	r1, [r4, #932]	; 0x3a4
   12828:	2900      	cmp	r1, #0
   1282a:	f040 80c3 	bne.w	129b4 <USBHub::control(Transfer_struct const*)+0x1ec>
	} else if (send_pending_setreset) {
   1282e:	f894 13aa 	ldrb.w	r1, [r4, #938]	; 0x3aa
   12832:	b329      	cbz	r1, 12880 <USBHub::control(Transfer_struct const*)+0xb8>
		send_setreset(lowestbit(send_pending_setreset));
   12834:	fa91 f1a1 	rbit	r1, r1
   12838:	4620      	mov	r0, r4
   1283a:	fab1 f181 	clz	r1, r1
}
   1283e:	b002      	add	sp, #8
   12840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_setreset(lowestbit(send_pending_setreset));
   12844:	f7ff bef0 	b.w	12628 <USBHub::send_setreset(unsigned long)>
		send_poweron(lowestbit(send_pending_poweron));
   12848:	fa91 f1a1 	rbit	r1, r1
   1284c:	4620      	mov	r0, r4
   1284e:	fab1 f181 	clz	r1, r1
}
   12852:	b002      	add	sp, #8
   12854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_poweron(lowestbit(send_pending_poweron));
   12858:	f7ff bd36 	b.w	122c8 <USBHub::send_poweron(unsigned long)>
		if (transfer->length == 4) {
   1285c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1285e:	2b04      	cmp	r3, #4
   12860:	d1c4      	bne.n	127ec <USBHub::control(Transfer_struct const*)+0x24>
			uint32_t status = *(uint32_t *)(transfer->buffer);
   12862:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   12864:	681a      	ldr	r2, [r3, #0]
	if (port == 0 || port > numports) return;
   12866:	2e00      	cmp	r6, #0
   12868:	d0c0      	beq.n	127ec <USBHub::control(Transfer_struct const*)+0x24>
   1286a:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   1286e:	429e      	cmp	r6, r3
   12870:	d8bc      	bhi.n	127ec <USBHub::control(Transfer_struct const*)+0x24>
   12872:	4631      	mov	r1, r6
   12874:	f7ff ff04 	bl	12680 <USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]>
	if (sending_control_transfer) return;
   12878:	f894 2399 	ldrb.w	r2, [r4, #921]	; 0x399
   1287c:	2a00      	cmp	r2, #0
   1287e:	d0b5      	beq.n	127ec <USBHub::control(Transfer_struct const*)+0x24>
}
   12880:	b002      	add	sp, #8
   12882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (interface_count > 1) {
   12886:	f894 3390 	ldrb.w	r3, [r4, #912]	; 0x390
		numports = hub_desc[2];
   1288a:	f8b0 0382 	ldrh.w	r0, [r0, #898]	; 0x382
		powertime = hub_desc[5];
   1288e:	f894 1385 	ldrb.w	r1, [r4, #901]	; 0x385
		if (interface_count > 1) {
   12892:	2b01      	cmp	r3, #1
		numports = hub_desc[2];
   12894:	f894 5382 	ldrb.w	r5, [r4, #898]	; 0x382
   12898:	f8a4 0396 	strh.w	r0, [r4, #918]	; 0x396
		powertime = hub_desc[5];
   1289c:	f884 1398 	strb.w	r1, [r4, #920]	; 0x398
		if (interface_count > 1) {
   128a0:	d852      	bhi.n	12948 <USBHub::control(Transfer_struct const*)+0x180>
		for (uint32_t i=1; i <= numports; i++) {
   128a2:	2d00      	cmp	r5, #0
   128a4:	d0a2      	beq.n	127ec <USBHub::control(Transfer_struct const*)+0x24>
   128a6:	2501      	movs	r5, #1
   128a8:	4f51      	ldr	r7, [pc, #324]	; (129f0 <USBHub::control(Transfer_struct const*)+0x228>)
		mk_setup(setup, 0x23, 3, 8, port, 0);
   128aa:	f504 7854 	add.w	r8, r4, #848	; 0x350
	sending_control_transfer = 1;
   128ae:	462e      	mov	r6, r5
	if (sending_control_transfer) return false;
   128b0:	b9da      	cbnz	r2, 128ea <USBHub::control(Transfer_struct const*)+0x122>
		queue_Control_Transfer(device, &setup, NULL, this);
   128b2:	4623      	mov	r3, r4
   128b4:	4641      	mov	r1, r8
   128b6:	68a0      	ldr	r0, [r4, #8]
        s.word2 = wIndex | (wLength << 16);
   128b8:	f8c4 5354 	str.w	r5, [r4, #852]	; 0x354
	sending_control_transfer = 1;
   128bc:	f884 6399 	strb.w	r6, [r4, #921]	; 0x399
        s.word1 = bmRequestType | (bRequest << 8) | (wValue << 16);
   128c0:	f8c4 7350 	str.w	r7, [r4, #848]	; 0x350
		queue_Control_Transfer(device, &setup, NULL, this);
   128c4:	f7fd fc48 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
		send_pending_poweron &= ~(1 << port);
   128c8:	fa06 f205 	lsl.w	r2, r6, r5
   128cc:	f894 33a3 	ldrb.w	r3, [r4, #931]	; 0x3a3
   128d0:	ea23 0302 	bic.w	r3, r3, r2
	if (sending_control_transfer) return;
   128d4:	f894 2399 	ldrb.w	r2, [r4, #921]	; 0x399
		send_pending_poweron &= ~(1 << port);
   128d8:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
		for (uint32_t i=1; i <= numports; i++) {
   128dc:	3501      	adds	r5, #1
   128de:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
   128e2:	42ab      	cmp	r3, r5
   128e4:	d3ca      	bcc.n	1287c <USBHub::control(Transfer_struct const*)+0xb4>
	if (sending_control_transfer) return false;
   128e6:	2a00      	cmp	r2, #0
   128e8:	d0e3      	beq.n	128b2 <USBHub::control(Transfer_struct const*)+0xea>
		send_pending_poweron |= (1 << port);
   128ea:	f894 33a3 	ldrb.w	r3, [r4, #931]	; 0x3a3
   128ee:	fa06 f105 	lsl.w	r1, r6, r5
   128f2:	430b      	orrs	r3, r1
   128f4:	f884 33a3 	strb.w	r3, [r4, #931]	; 0x3a3
   128f8:	e7f0      	b.n	128dc <USBHub::control(Transfer_struct const*)+0x114>
		if (port == numports && changepipe == NULL) {
   128fa:	f890 3396 	ldrb.w	r3, [r0, #918]	; 0x396
   128fe:	42b3      	cmp	r3, r6
   12900:	f47f af74 	bne.w	127ec <USBHub::control(Transfer_struct const*)+0x24>
   12904:	f8d0 3358 	ldr.w	r3, [r0, #856]	; 0x358
   12908:	2b00      	cmp	r3, #0
   1290a:	f47f af6f 	bne.w	127ec <USBHub::control(Transfer_struct const*)+0x24>
			changepipe = new_Pipe(device, 3, endpoint, 1, 1, interval);
   1290e:	2501      	movs	r5, #1
   12910:	f890 0395 	ldrb.w	r0, [r0, #917]	; 0x395
   12914:	f894 2394 	ldrb.w	r2, [r4, #916]	; 0x394
   12918:	2103      	movs	r1, #3
   1291a:	462b      	mov	r3, r5
   1291c:	e9cd 5000 	strd	r5, r0, [sp]
   12920:	68a0      	ldr	r0, [r4, #8]
   12922:	f7fe f885 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
			changepipe->callback_function = callback;
   12926:	4b34      	ldr	r3, [pc, #208]	; (129f8 <USBHub::control(Transfer_struct const*)+0x230>)
			changepipe = new_Pipe(device, 3, endpoint, 1, 1, interval);
   12928:	4601      	mov	r1, r0
			queue_Data_Transfer(changepipe, &changebits, 1, this);
   1292a:	462a      	mov	r2, r5
			changepipe = new_Pipe(device, 3, endpoint, 1, 1, interval);
   1292c:	f8c4 0358 	str.w	r0, [r4, #856]	; 0x358
			println("pipe cap1 = ", changepipe->qh.capabilities[0], HEX);
   12930:	6849      	ldr	r1, [r1, #4]
			queue_Data_Transfer(changepipe, &changebits, 1, this);
   12932:	f504 715e 	add.w	r1, r4, #888	; 0x378
			changepipe->callback_function = callback;
   12936:	63c3      	str	r3, [r0, #60]	; 0x3c
			queue_Data_Transfer(changepipe, &changebits, 1, this);
   12938:	4623      	mov	r3, r4
   1293a:	f7fd fca7 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
	if (sending_control_transfer) return;
   1293e:	f894 2399 	ldrb.w	r2, [r4, #921]	; 0x399
   12942:	2a00      	cmp	r2, #0
   12944:	d19c      	bne.n	12880 <USBHub::control(Transfer_struct const*)+0xb8>
   12946:	e751      	b.n	127ec <USBHub::control(Transfer_struct const*)+0x24>
	mk_setup(setup, 1, 11, altsetting, interface_number, 0);
   12948:	f894 3392 	ldrb.w	r3, [r4, #914]	; 0x392
   1294c:	f640 3101 	movw	r1, #2817	; 0xb01
   12950:	f894 0391 	ldrb.w	r0, [r4, #913]	; 0x391
   12954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	queue_Control_Transfer(device, &setup, NULL, this);
   12958:	4623      	mov	r3, r4
   1295a:	e9c4 10d4 	strd	r1, r0, [r4, #848]	; 0x350
   1295e:	f504 7154 	add.w	r1, r4, #848	; 0x350
   12962:	68a0      	ldr	r0, [r4, #8]
   12964:	f7fd fbf8 	bl	10158 <USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)>
	sending_control_transfer = 1;
   12968:	2201      	movs	r2, #1
		for (uint32_t i=1; i <= numports; i++) {
   1296a:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
	sending_control_transfer = 1;
   1296e:	f884 2399 	strb.w	r2, [r4, #921]	; 0x399
		for (uint32_t i=1; i <= numports; i++) {
   12972:	2b00      	cmp	r3, #0
   12974:	d197      	bne.n	128a6 <USBHub::control(Transfer_struct const*)+0xde>
   12976:	e783      	b.n	12880 <USBHub::control(Transfer_struct const*)+0xb8>
		send_clearstatus_enable(lowestbit(send_pending_clearstatus_enable));
   12978:	fa91 f1a1 	rbit	r1, r1
   1297c:	4620      	mov	r0, r4
   1297e:	fab1 f181 	clz	r1, r1
}
   12982:	b002      	add	sp, #8
   12984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_enable(lowestbit(send_pending_clearstatus_enable));
   12988:	f7ff bd9e 	b.w	124c8 <USBHub::send_clearstatus_enable(unsigned long)>
		send_clearstatus_connect(lowestbit(send_pending_clearstatus_connect));
   1298c:	fa91 f1a1 	rbit	r1, r1
   12990:	4620      	mov	r0, r4
   12992:	fab1 f181 	clz	r1, r1
}
   12996:	b002      	add	sp, #8
   12998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_connect(lowestbit(send_pending_clearstatus_connect));
   1299c:	f7ff bd68 	b.w	12470 <USBHub::send_clearstatus_connect(unsigned long)>
		send_clearstatus_suspend(lowestbit(send_pending_clearstatus_suspend));
   129a0:	fa91 f1a1 	rbit	r1, r1
   129a4:	4620      	mov	r0, r4
   129a6:	fab1 f181 	clz	r1, r1
}
   129aa:	b002      	add	sp, #8
   129ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_suspend(lowestbit(send_pending_clearstatus_suspend));
   129b0:	f7ff bdb6 	b.w	12520 <USBHub::send_clearstatus_suspend(unsigned long)>
		send_getstatus(lowestbit(send_pending_getstatus));
   129b4:	fa91 f1a1 	rbit	r1, r1
   129b8:	4620      	mov	r0, r4
   129ba:	fab1 f181 	clz	r1, r1
}
   129be:	b002      	add	sp, #8
   129c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_getstatus(lowestbit(send_pending_getstatus));
   129c4:	f7ff bcac 	b.w	12320 <USBHub::send_getstatus(unsigned long)>
		send_clearstatus_overcurrent(lowestbit(send_pending_clearstatus_overcurrent));
   129c8:	fa91 f1a1 	rbit	r1, r1
   129cc:	4620      	mov	r0, r4
   129ce:	fab1 f181 	clz	r1, r1
}
   129d2:	b002      	add	sp, #8
   129d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_overcurrent(lowestbit(send_pending_clearstatus_overcurrent));
   129d8:	f7ff bdce 	b.w	12578 <USBHub::send_clearstatus_overcurrent(unsigned long)>
		send_clearstatus_reset(lowestbit(send_pending_clearstatus_reset));
   129dc:	fa91 f1a1 	rbit	r1, r1
   129e0:	4620      	mov	r0, r4
   129e2:	fab1 f181 	clz	r1, r1
}
   129e6:	b002      	add	sp, #8
   129e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_clearstatus_reset(lowestbit(send_pending_clearstatus_reset));
   129ec:	f7ff bdf0 	b.w	125d0 <USBHub::send_clearstatus_reset(unsigned long)>
   129f0:	00080323 	.word	0x00080323
   129f4:	290006a0 	.word	0x290006a0
   129f8:	00012425 	.word	0x00012425

000129fc <JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)>:
}
   129fc:	4770      	bx	lr
   129fe:	bf00      	nop

00012a00 <JoystickController::hid_input_data(unsigned long, long)>:
    uint32_t usage_page = usage >> 16;
   12a00:	ea4f 4c11 	mov.w	ip, r1, lsr #16
    usage &= 0xFFFF;
   12a04:	b28b      	uxth	r3, r1
    if (usage_page == 9 && usage >= 1 && usage <= 32) {
   12a06:	f1bc 0f09 	cmp.w	ip, #9
{
   12a0a:	b530      	push	{r4, r5, lr}
    if (usage_page == 9 && usage >= 1 && usage <= 32) {
   12a0c:	d111      	bne.n	12a32 <JoystickController::hid_input_data(unsigned long, long)+0x32>
   12a0e:	b183      	cbz	r3, 12a32 <JoystickController::hid_input_data(unsigned long, long)+0x32>
   12a10:	2b20      	cmp	r3, #32
   12a12:	d844      	bhi.n	12a9e <JoystickController::hid_input_data(unsigned long, long)+0x9e>
        uint32_t bit = 1 << (usage - 1);
   12a14:	3b01      	subs	r3, #1
   12a16:	2101      	movs	r1, #1
   12a18:	fa01 f303 	lsl.w	r3, r1, r3
        if (value == 0) {
   12a1c:	2a00      	cmp	r2, #0
   12a1e:	d17f      	bne.n	12b20 <JoystickController::hid_input_data(unsigned long, long)+0x120>
            if (buttons & bit) {
   12a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12a22:	421a      	tst	r2, r3
   12a24:	d004      	beq.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                buttons &= ~bit;
   12a26:	ea22 0203 	bic.w	r2, r2, r3
                anychange = true;
   12a2a:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
                buttons &= ~bit;
   12a2e:	6442      	str	r2, [r0, #68]	; 0x44
}
   12a30:	bd30      	pop	{r4, r5, pc}
    } else if (usage_page == 1 && usage >= 0x30 && usage <= 0x39) {
   12a32:	f1bc 0f01 	cmp.w	ip, #1
   12a36:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   12a3a:	d130      	bne.n	12a9e <JoystickController::hid_input_data(unsigned long, long)+0x9e>
   12a3c:	f1be 0f09 	cmp.w	lr, #9
   12a40:	d82d      	bhi.n	12a9e <JoystickController::hid_input_data(unsigned long, long)+0x9e>
        axis_mask_ |= (1 << i);     // Keep record of which axis we have data on.
   12a42:	fa0c fe0e 	lsl.w	lr, ip, lr
   12a46:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
   12a4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   12a4e:	ea41 010e 	orr.w	r1, r1, lr
   12a52:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
   12a56:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
   12a5a:	ea41 71ee 	orr.w	r1, r1, lr, asr #31
   12a5e:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   12a62:	ea4f 71ee 	mov.w	r1, lr, asr #31
        if (axis[i] != value) {
   12a66:	f853 4c78 	ldr.w	r4, [r3, #-120]
   12a6a:	4294      	cmp	r4, r2
   12a6c:	d0e0      	beq.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
            axis[i] = value;
   12a6e:	f843 2c78 	str.w	r2, [r3, #-120]
            axis_changed_mask_ |= (1 << i);
   12a72:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
            if (axis_changed_mask_ & axis_change_notify_mask_)
   12a76:	f8d0 2158 	ldr.w	r2, [r0, #344]	; 0x158
            axis_changed_mask_ |= (1 << i);
   12a7a:	ea4e 0303 	orr.w	r3, lr, r3
            if (axis_changed_mask_ & axis_change_notify_mask_)
   12a7e:	401a      	ands	r2, r3
            axis_changed_mask_ |= (1 << i);
   12a80:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
   12a84:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
   12a88:	430b      	orrs	r3, r1
            if (axis_changed_mask_ & axis_change_notify_mask_)
   12a8a:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
            axis_changed_mask_ |= (1 << i);
   12a8e:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
            if (axis_changed_mask_ & axis_change_notify_mask_)
   12a92:	400b      	ands	r3, r1
   12a94:	431a      	orrs	r2, r3
   12a96:	d0cb      	beq.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                anychange = true;
   12a98:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
}
   12a9c:	bd30      	pop	{r4, r5, pc}
    } else if (usage_page == additional_axis_usage_page_) {
   12a9e:	f8b0 e160 	ldrh.w	lr, [r0, #352]	; 0x160
   12aa2:	45e6      	cmp	lr, ip
   12aa4:	d1c4      	bne.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
        if ((usage >= additional_axis_usage_start_) && (usage < (additional_axis_usage_start_ + additional_axis_usage_count_))) {
   12aa6:	f8b0 c162 	ldrh.w	ip, [r0, #354]	; 0x162
   12aaa:	459c      	cmp	ip, r3
   12aac:	d8c0      	bhi.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
   12aae:	f8b0 e164 	ldrh.w	lr, [r0, #356]	; 0x164
   12ab2:	44e6      	add	lr, ip
   12ab4:	459e      	cmp	lr, r3
   12ab6:	d9bb      	bls.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
            uint16_t usage_index = usage - additional_axis_usage_start_ + STANDARD_AXIS_COUNT;
   12ab8:	f1cc 030a 	rsb	r3, ip, #10
   12abc:	440b      	add	r3, r1
   12abe:	b29b      	uxth	r3, r3
            if (usage_index < (sizeof(axis) / sizeof(axis[0]))) {
   12ac0:	2b3f      	cmp	r3, #63	; 0x3f
   12ac2:	d8b5      	bhi.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                if (axis[usage_index] != value) {
   12ac4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   12ac8:	6c8c      	ldr	r4, [r1, #72]	; 0x48
   12aca:	4294      	cmp	r4, r2
   12acc:	d030      	beq.n	12b30 <JoystickController::hid_input_data(unsigned long, long)+0x130>
                    axis[usage_index] = value;
   12ace:	648a      	str	r2, [r1, #72]	; 0x48
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   12ad0:	f04f 0c01 	mov.w	ip, #1
   12ad4:	f1a3 0220 	sub.w	r2, r3, #32
   12ad8:	f1c3 0120 	rsb	r1, r3, #32
   12adc:	fa0c f303 	lsl.w	r3, ip, r3
   12ae0:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   12ae4:	fa2c f101 	lsr.w	r1, ip, r1
   12ae8:	fa0c f202 	lsl.w	r2, ip, r2
                    if (axis_changed_mask_ & axis_change_notify_mask_)
   12aec:	f8d0 5158 	ldr.w	r5, [r0, #344]	; 0x158
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   12af0:	430a      	orrs	r2, r1
   12af2:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
   12af6:	4319      	orrs	r1, r3
   12af8:	4314      	orrs	r4, r2
   12afa:	f8c0 1150 	str.w	r1, [r0, #336]	; 0x150
                    if (axis_changed_mask_ & axis_change_notify_mask_)
   12afe:	4029      	ands	r1, r5
   12b00:	f8d0 515c 	ldr.w	r5, [r0, #348]	; 0x15c
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   12b04:	f8c0 4154 	str.w	r4, [r0, #340]	; 0x154
                    if (axis_changed_mask_ & axis_change_notify_mask_)
   12b08:	402c      	ands	r4, r5
   12b0a:	4321      	orrs	r1, r4
                        anychange = true;   // We have changes...
   12b0c:	bf18      	it	ne
   12b0e:	f880 c041 	strbne.w	ip, [r0, #65]	; 0x41
                axis_mask_ |= ((uint64_t)1 << usage_index);     // Keep record of which axis we have data on.
   12b12:	e9d0 4152 	ldrd	r4, r1, [r0, #328]	; 0x148
   12b16:	431c      	orrs	r4, r3
   12b18:	4311      	orrs	r1, r2
   12b1a:	e9c0 4152 	strd	r4, r1, [r0, #328]	; 0x148
}
   12b1e:	bd30      	pop	{r4, r5, pc}
            if (!(buttons & bit)) {
   12b20:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12b22:	421a      	tst	r2, r3
   12b24:	d184      	bne.n	12a30 <JoystickController::hid_input_data(unsigned long, long)+0x30>
                buttons |= bit;
   12b26:	431a      	orrs	r2, r3
                anychange = true;
   12b28:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
                buttons |= bit;
   12b2c:	6442      	str	r2, [r0, #68]	; 0x44
}
   12b2e:	bd30      	pop	{r4, r5, pc}
                    axis_changed_mask_ |= ((uint64_t)1 << usage_index);     // Keep track of which ones changed.
   12b30:	2401      	movs	r4, #1
   12b32:	f1a3 0220 	sub.w	r2, r3, #32
   12b36:	f1c3 0120 	rsb	r1, r3, #32
   12b3a:	fa04 f202 	lsl.w	r2, r4, r2
   12b3e:	fa04 f303 	lsl.w	r3, r4, r3
   12b42:	fa24 f101 	lsr.w	r1, r4, r1
   12b46:	430a      	orrs	r2, r1
   12b48:	e7e3      	b.n	12b12 <JoystickController::hid_input_data(unsigned long, long)+0x112>
   12b4a:	bf00      	nop

00012b4c <non-virtual thunk to JoystickController::hid_input_data(unsigned long, long)>:
    virtual void disconnect();

    // From USBHIDInput
    virtual hidclaim_t claim_collection(USBHIDParser *driver, Device_t *dev, uint32_t topusage);
    virtual void hid_input_begin(uint32_t topusage, uint32_t type, int lgmin, int lgmax);
    virtual void hid_input_data(uint32_t usage, int32_t value);
   12b4c:	f1a0 000c 	sub.w	r0, r0, #12
   12b50:	f7ff bf56 	b.w	12a00 <JoystickController::hid_input_data(unsigned long, long)>

00012b54 <JoystickController::hid_input_end()>:
    if (anychange) {
   12b54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   12b58:	b113      	cbz	r3, 12b60 <JoystickController::hid_input_end()+0xc>
        joystickEvent = true;
   12b5a:	2301      	movs	r3, #1
   12b5c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
   12b60:	4770      	bx	lr
   12b62:	bf00      	nop

00012b64 <JoystickController::hid_process_out_data(Transfer_struct const*)>:
}
   12b64:	2001      	movs	r0, #1
   12b66:	4770      	bx	lr

00012b68 <JoystickController::control(Transfer_struct const*)>:
}
   12b68:	4770      	bx	lr
   12b6a:	bf00      	nop

00012b6c <JoystickController::tx_callback(Transfer_struct const*)>:
}
   12b6c:	4770      	bx	lr
   12b6e:	bf00      	nop

00012b70 <JoystickController::disconnect()>:
    axis_mask_ = 0;
   12b70:	2200      	movs	r2, #0
   12b72:	2300      	movs	r3, #0
   12b74:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
    axis_changed_mask_ = 0;
   12b78:	e9c0 2354 	strd	r2, r3, [r0, #336]	; 0x150
}
   12b7c:	4770      	bx	lr
   12b7e:	bf00      	nop

00012b80 <JoystickController::bt_hid_input_data(unsigned long, long)>:
    hid_input_data(usage, value);
   12b80:	6803      	ldr	r3, [r0, #0]
   12b82:	69db      	ldr	r3, [r3, #28]
   12b84:	4718      	bx	r3
   12b86:	bf00      	nop

00012b88 <JoystickController::release_bluetooth()>:
    btdevice = nullptr; // remember this way
   12b88:	2300      	movs	r3, #0
   12b8a:	6243      	str	r3, [r0, #36]	; 0x24
    btdriver_ = nullptr;
   12b8c:	6343      	str	r3, [r0, #52]	; 0x34
    connected_ = false;
   12b8e:	f880 316c 	strb.w	r3, [r0, #364]	; 0x16c
    special_process_required = false;
   12b92:	f880 3020 	strb.w	r3, [r0, #32]
}
   12b96:	4770      	bx	lr

00012b98 <JoystickController::hid_process_control(Transfer_struct const*)>:
bool JoystickController::hid_process_control(const Transfer_t *transfer) {
   12b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b9c:	460d      	mov	r5, r1
   12b9e:	b082      	sub	sp, #8
   12ba0:	4606      	mov	r6, r0
    Serial.printf("USBHIDParser::control msg: %x %x : %x %u :", transfer->setup.word1, transfer->setup.word2, transfer->buffer, transfer->length);
   12ba2:	4915      	ldr	r1, [pc, #84]	; (12bf8 <JoystickController::hid_process_control(Transfer_struct const*)+0x60>)
   12ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   12ba6:	4815      	ldr	r0, [pc, #84]	; (12bfc <JoystickController::hid_process_control(Transfer_struct const*)+0x64>)
   12ba8:	9301      	str	r3, [sp, #4]
   12baa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   12bac:	9300      	str	r3, [sp, #0]
   12bae:	e9d5 230d 	ldrd	r2, r3, [r5, #52]	; 0x34
   12bb2:	f003 f81f 	bl	15bf4 <Print::printf(char const*, ...)>
    if (transfer->buffer) {
   12bb6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
   12bb8:	b1a4      	cbz	r4, 12be4 <JoystickController::hid_process_control(Transfer_struct const*)+0x4c>
        uint16_t cnt = transfer->length;
   12bba:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        if (cnt > 16) cnt = 16;
   12bbc:	2b10      	cmp	r3, #16
   12bbe:	461d      	mov	r5, r3
   12bc0:	bf28      	it	cs
   12bc2:	2510      	movcs	r5, #16
        while (cnt--) Serial.printf(" %02x", *pb++);
   12bc4:	3d01      	subs	r5, #1
   12bc6:	b2ad      	uxth	r5, r5
   12bc8:	b163      	cbz	r3, 12be4 <JoystickController::hid_process_control(Transfer_struct const*)+0x4c>
   12bca:	3501      	adds	r5, #1
   12bcc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12c04 <JoystickController::hid_process_control(Transfer_struct const*)+0x6c>
   12bd0:	4f0a      	ldr	r7, [pc, #40]	; (12bfc <JoystickController::hid_process_control(Transfer_struct const*)+0x64>)
   12bd2:	4425      	add	r5, r4
   12bd4:	f814 2b01 	ldrb.w	r2, [r4], #1
   12bd8:	4641      	mov	r1, r8
   12bda:	4638      	mov	r0, r7
   12bdc:	f003 f80a 	bl	15bf4 <Print::printf(char const*, ...)>
   12be0:	42ac      	cmp	r4, r5
   12be2:	d1f7      	bne.n	12bd4 <JoystickController::hid_process_control(Transfer_struct const*)+0x3c>
    Serial.printf("\n");
   12be4:	4906      	ldr	r1, [pc, #24]	; (12c00 <JoystickController::hid_process_control(Transfer_struct const*)+0x68>)
   12be6:	4805      	ldr	r0, [pc, #20]	; (12bfc <JoystickController::hid_process_control(Transfer_struct const*)+0x64>)
   12be8:	f003 f804 	bl	15bf4 <Print::printf(char const*, ...)>
    send_Control_packet_active_ = false;
   12bec:	2000      	movs	r0, #0
   12bee:	f886 0524 	strb.w	r0, [r6, #1316]	; 0x524
}
   12bf2:	b002      	add	sp, #8
   12bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bf8:	20003ac4 	.word	0x20003ac4
   12bfc:	2000958c 	.word	0x2000958c
   12c00:	20004f0c 	.word	0x20004f0c
   12c04:	200063cc 	.word	0x200063cc

00012c08 <non-virtual thunk to JoystickController::hid_process_control(Transfer_struct const*)>:
    virtual bool hid_process_control(const Transfer_t *transfer);
   12c08:	f1a0 000c 	sub.w	r0, r0, #12
   12c0c:	f7ff bfc4 	b.w	12b98 <JoystickController::hid_process_control(Transfer_struct const*)>

00012c10 <JoystickController::disconnect_collection(Device_struct*)>:
    if (--collections_claimed == 0) {
   12c10:	f890 3174 	ldrb.w	r3, [r0, #372]	; 0x174
   12c14:	3b01      	subs	r3, #1
   12c16:	b2db      	uxtb	r3, r3
   12c18:	f880 3174 	strb.w	r3, [r0, #372]	; 0x174
   12c1c:	b93b      	cbnz	r3, 12c2e <JoystickController::disconnect_collection(Device_struct*)+0x1e>
        mydevice = NULL;
   12c1e:	6143      	str	r3, [r0, #20]
        driver_ = nullptr;
   12c20:	6303      	str	r3, [r0, #48]	; 0x30
        axis_mask_ = 0;
   12c22:	ed9f 7b03 	vldr	d7, [pc, #12]	; 12c30 <JoystickController::disconnect_collection(Device_struct*)+0x20>
   12c26:	ed80 7b52 	vstr	d7, [r0, #328]	; 0x148
        axis_changed_mask_ = 0;
   12c2a:	ed80 7b54 	vstr	d7, [r0, #336]	; 0x150
}
   12c2e:	4770      	bx	lr
	...

00012c38 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)>:
{
   12c38:	b570      	push	{r4, r5, r6, lr}
   12c3a:	461e      	mov	r6, r3
   12c3c:	b082      	sub	sp, #8
   12c3e:	4604      	mov	r4, r0
    USBHDBGSerial.printf("JoystickController::bt_claim_collection(%p) Connection:%p class:%x Top:%x\n", this, btconnection, bluetooth_class, topusage);
   12c40:	460b      	mov	r3, r1
   12c42:	9200      	str	r2, [sp, #0]
{
   12c44:	460d      	mov	r5, r1
    USBHDBGSerial.printf("JoystickController::bt_claim_collection(%p) Connection:%p class:%x Top:%x\n", this, btconnection, bluetooth_class, topusage);
   12c46:	4602      	mov	r2, r0
   12c48:	4911      	ldr	r1, [pc, #68]	; (12c90 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x58>)
   12c4a:	4812      	ldr	r0, [pc, #72]	; (12c94 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x5c>)
   12c4c:	9601      	str	r6, [sp, #4]
   12c4e:	f002 ffd1 	bl	15bf4 <Print::printf(char const*, ...)>
    if (mydevice != NULL) return CLAIM_NO;  // claimed by some other... 
   12c52:	6960      	ldr	r0, [r4, #20]
   12c54:	b110      	cbz	r0, 12c5c <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x24>
   12c56:	2000      	movs	r0, #0
}
   12c58:	b002      	add	sp, #8
   12c5a:	bd70      	pop	{r4, r5, r6, pc}
    if (btconnect && (btconnect != btconnection)) return CLAIM_NO;
   12c5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12c5e:	b10b      	cbz	r3, 12c64 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x2c>
   12c60:	42ab      	cmp	r3, r5
   12c62:	d1f9      	bne.n	12c58 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x20>
    if (topusage != 0x10004 && topusage != 0x10005 && topusage != 0x10008) return CLAIM_NO;
   12c64:	4b0c      	ldr	r3, [pc, #48]	; (12c98 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x60>)
   12c66:	4433      	add	r3, r6
   12c68:	2b01      	cmp	r3, #1
   12c6a:	d902      	bls.n	12c72 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x3a>
   12c6c:	4b0b      	ldr	r3, [pc, #44]	; (12c9c <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x64>)
   12c6e:	429e      	cmp	r6, r3
   12c70:	d1f1      	bne.n	12c56 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x1e>
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   12c72:	490b      	ldr	r1, [pc, #44]	; (12ca0 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x68>)
   12c74:	4807      	ldr	r0, [pc, #28]	; (12c94 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)+0x5c>)
   12c76:	f002 ffbd 	bl	15bf4 <Print::printf(char const*, ...)>
    btdevice = (Device_t*)btconnect->btController_; // remember this way 
   12c7a:	68aa      	ldr	r2, [r5, #8]
    connectionComplete();
   12c7c:	6823      	ldr	r3, [r4, #0]
   12c7e:	4620      	mov	r0, r4
   12c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    btdevice = (Device_t*)btconnect->btController_; // remember this way 
   12c82:	e9c4 2509 	strd	r2, r5, [r4, #36]	; 0x24
    connectionComplete();
   12c86:	4798      	blx	r3
    return CLAIM_REPORT;
   12c88:	2001      	movs	r0, #1
}
   12c8a:	b002      	add	sp, #8
   12c8c:	bd70      	pop	{r4, r5, r6, pc}
   12c8e:	bf00      	nop
   12c90:	20003a50 	.word	0x20003a50
   12c94:	2000958c 	.word	0x2000958c
   12c98:	fffefffc 	.word	0xfffefffc
   12c9c:	00010008 	.word	0x00010008
   12ca0:	20003a9c 	.word	0x20003a9c

00012ca4 <non-virtual thunk to JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)>:
    virtual bool process_bluetooth_HID_data(const uint8_t *data, uint16_t length);
    virtual void release_bluetooth();
    virtual bool remoteNameComplete(const uint8_t *remoteName);
    virtual void connectionComplete(void);

    virtual hidclaim_t bt_claim_collection(BluetoothConnection *btconnection, uint32_t bluetooth_class, uint32_t topusage);
   12ca4:	f1a0 0018 	sub.w	r0, r0, #24
   12ca8:	f7ff bfc6 	b.w	12c38 <JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)>

00012cac <JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)>:
{
   12cac:	b470      	push	{r4, r5, r6}
    hid_input_begin(topusage, type, lgmin, lgmax);  
   12cae:	6804      	ldr	r4, [r0, #0]
   12cb0:	4d04      	ldr	r5, [pc, #16]	; (12cc4 <JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x18>)
   12cb2:	69a4      	ldr	r4, [r4, #24]
   12cb4:	42ac      	cmp	r4, r5
   12cb6:	d101      	bne.n	12cbc <JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x10>
}
   12cb8:	bc70      	pop	{r4, r5, r6}
   12cba:	4770      	bx	lr
    hid_input_begin(topusage, type, lgmin, lgmax);  
   12cbc:	46a4      	mov	ip, r4
}
   12cbe:	bc70      	pop	{r4, r5, r6}
    hid_input_begin(topusage, type, lgmin, lgmax);  
   12cc0:	4760      	bx	ip
   12cc2:	bf00      	nop
   12cc4:	000129fd 	.word	0x000129fd

00012cc8 <non-virtual thunk to JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)>:
   12cc8:	4770      	bx	lr
   12cca:	bf00      	nop

00012ccc <non-virtual thunk to JoystickController::hid_process_out_data(Transfer_struct const*)>:
   12ccc:	2001      	movs	r0, #1
   12cce:	4770      	bx	lr

00012cd0 <non-virtual thunk to JoystickController::release_bluetooth()>:
   12cd0:	2300      	movs	r3, #0
   12cd2:	60c3      	str	r3, [r0, #12]
   12cd4:	61c3      	str	r3, [r0, #28]
   12cd6:	f880 3154 	strb.w	r3, [r0, #340]	; 0x154
   12cda:	7203      	strb	r3, [r0, #8]
   12cdc:	4770      	bx	lr
   12cde:	bf00      	nop

00012ce0 <JoystickController::bt_hid_input_end()>:
    hid_input_end();
   12ce0:	6802      	ldr	r2, [r0, #0]
   12ce2:	4906      	ldr	r1, [pc, #24]	; (12cfc <JoystickController::bt_hid_input_end()+0x1c>)
   12ce4:	6a52      	ldr	r2, [r2, #36]	; 0x24
   12ce6:	428a      	cmp	r2, r1
   12ce8:	d107      	bne.n	12cfa <JoystickController::bt_hid_input_end()+0x1a>
    if (anychange) {
   12cea:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
   12cee:	b11a      	cbz	r2, 12cf8 <JoystickController::bt_hid_input_end()+0x18>
        joystickEvent = true;
   12cf0:	2201      	movs	r2, #1
   12cf2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
   12cf6:	4770      	bx	lr
}
   12cf8:	4770      	bx	lr
    hid_input_end();
   12cfa:	4710      	bx	r2
   12cfc:	00012b55 	.word	0x00012b55

00012d00 <non-virtual thunk to JoystickController::hid_input_end()>:
   12d00:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   12d04:	b113      	cbz	r3, 12d0c <non-virtual thunk to JoystickController::hid_input_end()+0xc>
   12d06:	2301      	movs	r3, #1
   12d08:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
   12d0c:	4770      	bx	lr
   12d0e:	bf00      	nop

00012d10 <non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)>:
   12d10:	f890 3168 	ldrb.w	r3, [r0, #360]	; 0x168
   12d14:	3b01      	subs	r3, #1
   12d16:	b2db      	uxtb	r3, r3
   12d18:	f880 3168 	strb.w	r3, [r0, #360]	; 0x168
   12d1c:	b93b      	cbnz	r3, 12d2e <non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)+0x1e>
   12d1e:	6083      	str	r3, [r0, #8]
   12d20:	6243      	str	r3, [r0, #36]	; 0x24
   12d22:	ed9f 7b03 	vldr	d7, [pc, #12]	; 12d30 <non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)+0x20>
   12d26:	ed80 7b4f 	vstr	d7, [r0, #316]	; 0x13c
   12d2a:	ed80 7b51 	vstr	d7, [r0, #324]	; 0x144
   12d2e:	4770      	bx	lr
	...

00012d38 <JoystickController::bt_disconnect_collection(Device_struct*)>:
    disconnect_collection(dev);
   12d38:	6802      	ldr	r2, [r0, #0]
{
   12d3a:	b410      	push	{r4}
    disconnect_collection(dev);
   12d3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12d3e:	4c0c      	ldr	r4, [pc, #48]	; (12d70 <JoystickController::bt_disconnect_collection(Device_struct*)+0x38>)
   12d40:	42a2      	cmp	r2, r4
   12d42:	d112      	bne.n	12d6a <JoystickController::bt_disconnect_collection(Device_struct*)+0x32>
    if (--collections_claimed == 0) {
   12d44:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   12d48:	4603      	mov	r3, r0
   12d4a:	3a01      	subs	r2, #1
   12d4c:	b2d2      	uxtb	r2, r2
   12d4e:	f880 2174 	strb.w	r2, [r0, #372]	; 0x174
   12d52:	b93a      	cbnz	r2, 12d64 <JoystickController::bt_disconnect_collection(Device_struct*)+0x2c>
        axis_mask_ = 0;
   12d54:	2000      	movs	r0, #0
   12d56:	2100      	movs	r1, #0
        mydevice = NULL;
   12d58:	615a      	str	r2, [r3, #20]
        driver_ = nullptr;
   12d5a:	631a      	str	r2, [r3, #48]	; 0x30
        axis_mask_ = 0;
   12d5c:	e9c3 0152 	strd	r0, r1, [r3, #328]	; 0x148
        axis_changed_mask_ = 0;
   12d60:	e9c3 0154 	strd	r0, r1, [r3, #336]	; 0x150
}
   12d64:	f85d 4b04 	ldr.w	r4, [sp], #4
   12d68:	4770      	bx	lr
   12d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    disconnect_collection(dev);
   12d6e:	4710      	bx	r2
   12d70:	00012c11 	.word	0x00012c11

00012d74 <non-virtual thunk to JoystickController::bt_hid_input_end()>:
   12d74:	f850 3c18 	ldr.w	r3, [r0, #-24]
   12d78:	f1a0 0118 	sub.w	r1, r0, #24
   12d7c:	4a06      	ldr	r2, [pc, #24]	; (12d98 <non-virtual thunk to JoystickController::bt_hid_input_end()+0x24>)
   12d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12d80:	4293      	cmp	r3, r2
   12d82:	d106      	bne.n	12d92 <non-virtual thunk to JoystickController::bt_hid_input_end()+0x1e>
   12d84:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   12d88:	b12b      	cbz	r3, 12d96 <non-virtual thunk to JoystickController::bt_hid_input_end()+0x22>
   12d8a:	2301      	movs	r3, #1
   12d8c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   12d90:	4770      	bx	lr
   12d92:	4608      	mov	r0, r1
   12d94:	4718      	bx	r3
   12d96:	4770      	bx	lr
   12d98:	00012b55 	.word	0x00012b55

00012d9c <non-virtual thunk to JoystickController::bt_hid_input_data(unsigned long, long)>:
   12d9c:	f850 3c18 	ldr.w	r3, [r0, #-24]
   12da0:	3818      	subs	r0, #24
   12da2:	69db      	ldr	r3, [r3, #28]
   12da4:	4718      	bx	r3
   12da6:	bf00      	nop

00012da8 <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)>:
   12da8:	f850 3c18 	ldr.w	r3, [r0, #-24]
   12dac:	f1a0 0c18 	sub.w	ip, r0, #24
   12db0:	4a0d      	ldr	r2, [pc, #52]	; (12de8 <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x40>)
   12db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12db4:	4293      	cmp	r3, r2
   12db6:	d110      	bne.n	12dda <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x32>
   12db8:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
   12dbc:	3b01      	subs	r3, #1
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
   12dc4:	b95b      	cbnz	r3, 12dde <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x36>
   12dc6:	f840 3c04 	str.w	r3, [r0, #-4]
   12dca:	6183      	str	r3, [r0, #24]
   12dcc:	ed9f 7b04 	vldr	d7, [pc, #16]	; 12de0 <non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)+0x38>
   12dd0:	ed80 7b4c 	vstr	d7, [r0, #304]	; 0x130
   12dd4:	ed80 7b4e 	vstr	d7, [r0, #312]	; 0x138
   12dd8:	4770      	bx	lr
   12dda:	4660      	mov	r0, ip
   12ddc:	4718      	bx	r3
   12dde:	4770      	bx	lr
	...
   12de8:	00012c11 	.word	0x00012c11

00012dec <non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)>:
   12dec:	b470      	push	{r4, r5, r6}
   12dee:	f850 4c18 	ldr.w	r4, [r0, #-24]
   12df2:	4d05      	ldr	r5, [pc, #20]	; (12e08 <non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x1c>)
   12df4:	69a4      	ldr	r4, [r4, #24]
   12df6:	42ac      	cmp	r4, r5
   12df8:	d003      	beq.n	12e02 <non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)+0x16>
   12dfa:	46a4      	mov	ip, r4
   12dfc:	3818      	subs	r0, #24
   12dfe:	bc70      	pop	{r4, r5, r6}
   12e00:	4760      	bx	ip
   12e02:	bc70      	pop	{r4, r5, r6}
   12e04:	4770      	bx	lr
   12e06:	bf00      	nop
   12e08:	000129fd 	.word	0x000129fd

00012e0c <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)>:
{
   12e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12e10:	460d      	mov	r5, r1
    if (mydevice != NULL) return false;
   12e12:	6941      	ldr	r1, [r0, #20]
{
   12e14:	b082      	sub	sp, #8
    if (mydevice != NULL) return false;
   12e16:	b119      	cbz	r1, 12e20 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x14>
   12e18:	2000      	movs	r0, #0
}
   12e1a:	b002      	add	sp, #8
   12e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (device != nullptr) return false;
   12e20:	6881      	ldr	r1, [r0, #8]
   12e22:	4604      	mov	r4, r0
    if (type != 1) return false;
   12e24:	2900      	cmp	r1, #0
   12e26:	d1f7      	bne.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
   12e28:	3a01      	subs	r2, #1
   12e2a:	bf18      	it	ne
   12e2c:	2201      	movne	r2, #1
   12e2e:	2a00      	cmp	r2, #0
   12e30:	d1f2      	bne.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    JoystickController::joytype_t jtype = mapVIDPIDtoJoystickType(dev->idVendor, dev->idProduct, true);
   12e32:	4e6b      	ldr	r6, [pc, #428]	; (12fe0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1d4>)
   12e34:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
   12e38:	f8b5 e020 	ldrh.w	lr, [r5, #32]
    for (uint8_t i = 0; i < (sizeof(pid_vid_mapping) / sizeof(pid_vid_mapping[0])); i++) {
   12e3c:	4630      	mov	r0, r6
   12e3e:	e003      	b.n	12e48 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x3c>
   12e40:	3201      	adds	r2, #1
   12e42:	3006      	adds	r0, #6
   12e44:	2a0f      	cmp	r2, #15
   12e46:	d0e7      	beq.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
        if ((idVendor == pid_vid_mapping[i].idVendor) && (idProduct == pid_vid_mapping[i].idProduct)) {
   12e48:	8801      	ldrh	r1, [r0, #0]
   12e4a:	4561      	cmp	r1, ip
   12e4c:	d1f8      	bne.n	12e40 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x34>
   12e4e:	8841      	ldrh	r1, [r0, #2]
   12e50:	4571      	cmp	r1, lr
   12e52:	d1f5      	bne.n	12e40 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x34>
            if (exclude_hid_devices && pid_vid_mapping[i].hidDevice) return UNKNOWN;
   12e54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   12e58:	eb06 0642 	add.w	r6, r6, r2, lsl #1
   12e5c:	7972      	ldrb	r2, [r6, #5]
   12e5e:	2a00      	cmp	r2, #0
   12e60:	d1da      	bne.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
            return pid_vid_mapping[i].joyType;
   12e62:	7937      	ldrb	r7, [r6, #4]
    if (len < 9 + 7 + 7) return false;
   12e64:	2f00      	cmp	r7, #0
   12e66:	d0d7      	beq.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
   12e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12e6a:	2a16      	cmp	r2, #22
   12e6c:	bf8c      	ite	hi
   12e6e:	2200      	movhi	r2, #0
   12e70:	2201      	movls	r2, #1
   12e72:	2a00      	cmp	r2, #0
   12e74:	d1d0      	bne.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    if (count_end_points < 2) return false;
   12e76:	7919      	ldrb	r1, [r3, #4]
   12e78:	2901      	cmp	r1, #1
   12e7a:	d9cd      	bls.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    if (descriptors[5] != 0xff) return false; // bInterfaceClass, 3 = HID
   12e7c:	7959      	ldrb	r1, [r3, #5]
   12e7e:	29ff      	cmp	r1, #255	; 0xff
   12e80:	d1ca      	bne.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    rx_ep_ = 0;
   12e82:	f884 2495 	strb.w	r2, [r4, #1173]	; 0x495
    rx_size_ = 0;
   12e86:	f8a4 2496 	strh.w	r2, [r4, #1174]	; 0x496
    tx_size_ = 0;
   12e8a:	f8a4 2498 	strh.w	r2, [r4, #1176]	; 0x498
    if (descriptors[descriptor_index + 1] == 0x22)  {
   12e8e:	7a9a      	ldrb	r2, [r3, #10]
   12e90:	2a22      	cmp	r2, #34	; 0x22
   12e92:	d038      	beq.n	12f06 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xfa>
    uint32_t descriptor_index = 9;
   12e94:	2109      	movs	r1, #9
        if (descriptor_index >= len) return false;          // we ran off the end and did not get end points
   12e96:	f04f 0800 	mov.w	r8, #0
   12e9a:	46c6      	mov	lr, r8
   12e9c:	4646      	mov	r6, r8
   12e9e:	e00b      	b.n	12eb8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xac>
        descriptor_index += descriptors[descriptor_index];  // setup to look at next one...
   12ea0:	4411      	add	r1, r2
    while ((rx_ep_ == 0) || txep == 0) {
   12ea2:	f894 2495 	ldrb.w	r2, [r4, #1173]	; 0x495
   12ea6:	b122      	cbz	r2, 12eb2 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xa6>
   12ea8:	fab6 f986 	clz	r9, r6
   12eac:	ea4f 1959 	mov.w	r9, r9, lsr #5
   12eb0:	bb8e      	cbnz	r6, 12f16 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x10a>
        if (descriptor_index >= len) return false;          // we ran off the end and did not get end points
   12eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12eb4:	428a      	cmp	r2, r1
   12eb6:	d9af      	bls.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
        if ((descriptors[descriptor_index] == 7) && (descriptors[descriptor_index + 1] == 5)) {
   12eb8:	5c5a      	ldrb	r2, [r3, r1]
   12eba:	1858      	adds	r0, r3, r1
   12ebc:	2a07      	cmp	r2, #7
   12ebe:	d1ef      	bne.n	12ea0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
   12ec0:	f890 c001 	ldrb.w	ip, [r0, #1]
   12ec4:	f1bc 0f05 	cmp.w	ip, #5
   12ec8:	d1ea      	bne.n	12ea0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
            if ((descriptors[descriptor_index + 3] == 3)            // Type 3...
   12eca:	f890 c003 	ldrb.w	ip, [r0, #3]
   12ece:	f1bc 0f03 	cmp.w	ip, #3
   12ed2:	d1e5      	bne.n	12ea0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
                    && (descriptors[descriptor_index + 4] <= 64)
   12ed4:	f101 0904 	add.w	r9, r1, #4
   12ed8:	f813 c009 	ldrb.w	ip, [r3, r9]
   12edc:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   12ee0:	d8de      	bhi.n	12ea0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
                    && (descriptors[descriptor_index + 5] == 0)) {
   12ee2:	f890 a005 	ldrb.w	sl, [r0, #5]
   12ee6:	f1ba 0f00 	cmp.w	sl, #0
   12eea:	d1d9      	bne.n	12ea0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
                if (descriptors[descriptor_index + 2] & 0x80 ) {
   12eec:	f990 a002 	ldrsb.w	sl, [r0, #2]
   12ef0:	7882      	ldrb	r2, [r0, #2]
   12ef2:	f1ba 0f00 	cmp.w	sl, #0
   12ef6:	db4f      	blt.n	12f98 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x18c>
                    tx_size_ = descriptors[descriptor_index + 4];
   12ef8:	f8a4 c498 	strh.w	ip, [r4, #1176]	; 0x498
                    txep = descriptors[descriptor_index + 2];
   12efc:	4616      	mov	r6, r2
                    tx_interval = descriptors[descriptor_index + 6];
   12efe:	f890 8006 	ldrb.w	r8, [r0, #6]
        descriptor_index += descriptors[descriptor_index];  // setup to look at next one...
   12f02:	7802      	ldrb	r2, [r0, #0]
   12f04:	e7cc      	b.n	12ea0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
        if (descriptors[descriptor_index] != 0x14) return false; // only support specific versions...
   12f06:	7a5a      	ldrb	r2, [r3, #9]
   12f08:	2a14      	cmp	r2, #20
   12f0a:	d185      	bne.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
        if (descriptor_index >= len) return false;          // we ran off the end and did not get end points
   12f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12f0e:	2a1d      	cmp	r2, #29
   12f10:	d982      	bls.n	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
   12f12:	211d      	movs	r1, #29
   12f14:	e7bf      	b.n	12e96 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x8a>
    rxpipe_ = new_Pipe(dev, 3, rx_ep_ & 15, 1, rx_size_, rx_interval);
   12f16:	f8cd e004 	str.w	lr, [sp, #4]
   12f1a:	f002 020f 	and.w	r2, r2, #15
   12f1e:	f8b4 3496 	ldrh.w	r3, [r4, #1174]	; 0x496
   12f22:	2103      	movs	r1, #3
   12f24:	4628      	mov	r0, r5
   12f26:	9300      	str	r3, [sp, #0]
   12f28:	2301      	movs	r3, #1
   12f2a:	f7fd fd81 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
   12f2e:	f8c4 049c 	str.w	r0, [r4, #1180]	; 0x49c
    if (!rxpipe_) return false;
   12f32:	2800      	cmp	r0, #0
   12f34:	f43f af70 	beq.w	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    txpipe_ = new_Pipe(dev, 3, txep, 0, tx_size_, tx_interval);
   12f38:	f8cd 8004 	str.w	r8, [sp, #4]
   12f3c:	4632      	mov	r2, r6
   12f3e:	f8b4 3498 	ldrh.w	r3, [r4, #1176]	; 0x498
   12f42:	4628      	mov	r0, r5
   12f44:	2103      	movs	r1, #3
   12f46:	9300      	str	r3, [sp, #0]
   12f48:	464b      	mov	r3, r9
   12f4a:	f7fd fd71 	bl	10a30 <USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
   12f4e:	f8c4 04a0 	str.w	r0, [r4, #1184]	; 0x4a0
    if (!txpipe_) {
   12f52:	2800      	cmp	r0, #0
   12f54:	f43f af60 	beq.w	12e18 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xc>
    rxpipe_->callback_function = rx_callback;
   12f58:	f8d4 049c 	ldr.w	r0, [r4, #1180]	; 0x49c
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12f5c:	f204 41a4 	addw	r1, r4, #1188	; 0x4a4
    rxpipe_->callback_function = rx_callback;
   12f60:	4b20      	ldr	r3, [pc, #128]	; (12fe4 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1d8>)
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12f62:	f8b4 2496 	ldrh.w	r2, [r4, #1174]	; 0x496
    rxpipe_->callback_function = rx_callback;
   12f66:	63c3      	str	r3, [r0, #60]	; 0x3c
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12f68:	4623      	mov	r3, r4
   12f6a:	f7fd f98f 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
    txpipe_->callback_function = tx_callback;
   12f6e:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
   12f72:	4b1d      	ldr	r3, [pc, #116]	; (12fe8 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1dc>)
    if (jtype == XBOXONE) {
   12f74:	2f03      	cmp	r7, #3
    txpipe_->callback_function = tx_callback;
   12f76:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (jtype == XBOXONE) {
   12f78:	d020      	beq.n	12fbc <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1b0>
    } else if (jtype == XBOX360) {
   12f7a:	2f04      	cmp	r7, #4
   12f7c:	d016      	beq.n	12fac <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1a0>
    } else if (jtype == SWITCH) {
   12f7e:	2f07      	cmp	r7, #7
   12f80:	d025      	beq.n	12fce <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1c2>
    memset(axis, 0, sizeof(axis));  // clear out any data.
   12f82:	f44f 7280 	mov.w	r2, #256	; 0x100
   12f86:	2100      	movs	r1, #0
   12f88:	f104 0048 	add.w	r0, r4, #72	; 0x48
   12f8c:	f008 fde4 	bl	1bb58 <memset>
	return true;
   12f90:	2001      	movs	r0, #1
    joystickType_ = jtype;      // remember we are an XBox One.
   12f92:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	return true;
   12f96:	e740      	b.n	12e1a <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0xe>
                    rx_ep_ = descriptors[descriptor_index + 2];
   12f98:	f884 2495 	strb.w	r2, [r4, #1173]	; 0x495
                    rx_size_ = descriptors[descriptor_index + 4];
   12f9c:	f813 2009 	ldrb.w	r2, [r3, r9]
   12fa0:	f8a4 2496 	strh.w	r2, [r4, #1174]	; 0x496
                    rx_interval = descriptors[descriptor_index + 6];
   12fa4:	f890 e006 	ldrb.w	lr, [r0, #6]
        descriptor_index += descriptors[descriptor_index];  // setup to look at next one...
   12fa8:	7802      	ldrb	r2, [r0, #0]
   12faa:	e779      	b.n	12ea0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x94>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12fac:	4623      	mov	r3, r4
   12fae:	220c      	movs	r2, #12
   12fb0:	490e      	ldr	r1, [pc, #56]	; (12fec <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e0>)
   12fb2:	f7fd f96b 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        connected_ = 0;     // remember that hardware is actually connected...
   12fb6:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
   12fba:	e7e2      	b.n	12f82 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x176>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12fbc:	4623      	mov	r3, r4
   12fbe:	2205      	movs	r2, #5
   12fc0:	490b      	ldr	r1, [pc, #44]	; (12ff0 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e4>)
   12fc2:	f7fd f963 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        connected_ = true;      // remember that hardware is actually connected...
   12fc6:	2301      	movs	r3, #1
   12fc8:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
   12fcc:	e7d9      	b.n	12f82 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x176>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   12fce:	4623      	mov	r3, r4
   12fd0:	2202      	movs	r2, #2
   12fd2:	4908      	ldr	r1, [pc, #32]	; (12ff4 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x1e8>)
   12fd4:	f7fd f95a 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        connected_ = true;      // remember that hardware is actually connected...
   12fd8:	2301      	movs	r3, #1
   12fda:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
   12fde:	e7d0      	b.n	12f82 <JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)+0x176>
   12fe0:	20009978 	.word	0x20009978
   12fe4:	000146bd 	.word	0x000146bd
   12fe8:	00012b6d 	.word	0x00012b6d
   12fec:	20009968 	.word	0x20009968
   12ff0:	20009960 	.word	0x20009960
   12ff4:	2000995c 	.word	0x2000995c

00012ff8 <JoystickController::init()>:
{
   12ff8:	b510      	push	{r4, lr}
   12ffa:	4604      	mov	r4, r0
    contribute_Pipes(mypipes, sizeof(mypipes) / sizeof(Pipe_t));
   12ffc:	2103      	movs	r1, #3
   12ffe:	f500 70c0 	add.w	r0, r0, #384	; 0x180
   13002:	f002 f841 	bl	15088 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>
    contribute_Transfers(mytransfers, sizeof(mytransfers) / sizeof(Transfer_t));
   13006:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   1300a:	2107      	movs	r1, #7
   1300c:	f002 f854 	bl	150b8 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>
    contribute_String_Buffers(mystring_bufs, sizeof(mystring_bufs) / sizeof(strbuf_t));
   13010:	2101      	movs	r1, #1
   13012:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   13016:	f002 f869 	bl	150ec <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>
    driver_ready_for_device(this);
   1301a:	4620      	mov	r0, r4
   1301c:	f7fd fed8 	bl	10dd0 <USBHost::driver_ready_for_device(USBDriver*)>
    USBHIDParser::driver_ready_for_hid_collection(this);
   13020:	f104 000c 	add.w	r0, r4, #12
   13024:	f7fe fbc8 	bl	117b8 <USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)>
    BluetoothController::driver_ready_for_bluetooth(this);
   13028:	f104 0018 	add.w	r0, r4, #24
}
   1302c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BluetoothController::driver_ready_for_bluetooth(this);
   13030:	f7fc be22 	b.w	fc78 <BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)>

00013034 <JoystickController::transmitPS4UserFeedbackMsg()>:
bool JoystickController::transmitPS4UserFeedbackMsg() {
   13034:	b570      	push	{r4, r5, r6, lr}
    if (driver_)  {
   13036:	6b06      	ldr	r6, [r0, #48]	; 0x30
bool JoystickController::transmitPS4UserFeedbackMsg() {
   13038:	b094      	sub	sp, #80	; 0x50
   1303a:	4604      	mov	r4, r0
    if (driver_)  {
   1303c:	b1fe      	cbz	r6, 1307e <JoystickController::transmitPS4UserFeedbackMsg()+0x4a>
        memset(packet, 0, sizeof(packet));
   1303e:	2220      	movs	r2, #32
   13040:	2100      	movs	r1, #0
   13042:	4668      	mov	r0, sp
   13044:	f008 fd88 	bl	1bb58 <memset>
        packet[4] = rumble_lValue_; // Small Rumble
   13048:	f8b4 1166 	ldrh.w	r1, [r4, #358]	; 0x166
        packet[6] = leds_[0]; // RGB value
   1304c:	f894 3169 	ldrb.w	r3, [r4, #361]	; 0x169
        packet[0] = 0x05; // Report ID
   13050:	f64f 7205 	movw	r2, #65285	; 0xff05
        packet[7] = leds_[1];
   13054:	f894 516a 	ldrb.w	r5, [r4, #362]	; 0x16a
        return driver_->sendPacket(packet, 32);
   13058:	4630      	mov	r0, r6
        packet[4] = rumble_lValue_; // Small Rumble
   1305a:	f8ad 1004 	strh.w	r1, [sp, #4]
        return driver_->sendPacket(packet, 32);
   1305e:	4669      	mov	r1, sp
        packet[0] = 0x05; // Report ID
   13060:	f8ad 2000 	strh.w	r2, [sp]
        return driver_->sendPacket(packet, 32);
   13064:	2220      	movs	r2, #32
        packet[6] = leds_[0]; // RGB value
   13066:	f88d 3006 	strb.w	r3, [sp, #6]
        packet[8] = leds_[2];
   1306a:	f894 316b 	ldrb.w	r3, [r4, #363]	; 0x16b
        packet[7] = leds_[1];
   1306e:	f88d 5007 	strb.w	r5, [sp, #7]
        packet[8] = leds_[2];
   13072:	f88d 3008 	strb.w	r3, [sp, #8]
        return driver_->sendPacket(packet, 32);
   13076:	f7fe faff 	bl	11678 <USBHIDParser::sendPacket(unsigned char const*, int)>
}
   1307a:	b014      	add	sp, #80	; 0x50
   1307c:	bd70      	pop	{r4, r5, r6, pc}
    } else if (btdriver_) {
   1307e:	6b45      	ldr	r5, [r0, #52]	; 0x34
   13080:	b915      	cbnz	r5, 13088 <JoystickController::transmitPS4UserFeedbackMsg()+0x54>
    return false;
   13082:	4628      	mov	r0, r5
}
   13084:	b014      	add	sp, #80	; 0x50
   13086:	bd70      	pop	{r4, r5, r6, pc}
        memset(packet, 0, sizeof(packet));
   13088:	4631      	mov	r1, r6
   1308a:	224f      	movs	r2, #79	; 0x4f
   1308c:	4668      	mov	r0, sp
   1308e:	f008 fd63 	bl	1bb58 <memset>
        packet[0] = 0x52;
   13092:	f241 1252 	movw	r2, #4434	; 0x1152
        packet[8] = rumble_rValue_; // Big rumble
   13096:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   1309a:	4628      	mov	r0, r5
        packet[0] = 0x52;
   1309c:	f8ad 2000 	strh.w	r2, [sp]
        packet[2] = 0x80;
   130a0:	2280      	movs	r2, #128	; 0x80
        packet[7] = rumble_lValue_; // Small Rumble
   130a2:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
        packet[2] = 0x80;
   130a6:	f88d 2002 	strb.w	r2, [sp, #2]
        packet[4] = 0xFF;
   130aa:	22ff      	movs	r2, #255	; 0xff
        packet[8] = rumble_rValue_; // Big rumble
   130ac:	f88d 3008 	strb.w	r3, [sp, #8]
        packet[9] = leds_[0]; // RGB value
   130b0:	f894 3169 	ldrb.w	r3, [r4, #361]	; 0x169
        packet[10] = leds_[1];
   130b4:	f8b4 416a 	ldrh.w	r4, [r4, #362]	; 0x16a
        packet[7] = rumble_lValue_; // Small Rumble
   130b8:	f88d 1007 	strb.w	r1, [sp, #7]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   130bc:	4669      	mov	r1, sp
        packet[4] = 0xFF;
   130be:	f88d 2004 	strb.w	r2, [sp, #4]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   130c2:	224f      	movs	r2, #79	; 0x4f
        packet[9] = leds_[0]; // RGB value
   130c4:	f88d 3009 	strb.w	r3, [sp, #9]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   130c8:	2340      	movs	r3, #64	; 0x40
        packet[10] = leds_[1];
   130ca:	f8ad 400a 	strh.w	r4, [sp, #10]
        btdriver_->sendL2CapCommand(packet, sizeof(packet), 0x40);
   130ce:	f7fc fe0d 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
        return true;
   130d2:	2001      	movs	r0, #1
}
   130d4:	b014      	add	sp, #80	; 0x50
   130d6:	bd70      	pop	{r4, r5, r6, pc}

000130d8 <JoystickController::transmitPS3UserFeedbackMsg()>:
bool JoystickController::transmitPS3UserFeedbackMsg() {
   130d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (driver_) {
   130dc:	6b06      	ldr	r6, [r0, #48]	; 0x30
bool JoystickController::transmitPS3UserFeedbackMsg() {
   130de:	b084      	sub	sp, #16
   130e0:	4684      	mov	ip, r0
    if (driver_) {
   130e2:	2e00      	cmp	r6, #0
   130e4:	d045      	beq.n	13172 <JoystickController::transmitPS3UserFeedbackMsg()+0x9a>
        memcpy(txbuf_, PS3_USER_FEEDBACK_INIT, 48);
   130e6:	4d45      	ldr	r5, [pc, #276]	; (131fc <JoystickController::transmitPS3UserFeedbackMsg()+0x124>)
   130e8:	f200 47e4 	addw	r7, r0, #1252	; 0x4e4
   130ec:	f105 0830 	add.w	r8, r5, #48	; 0x30
   130f0:	463c      	mov	r4, r7
   130f2:	46ae      	mov	lr, r5
   130f4:	3410      	adds	r4, #16
   130f6:	3510      	adds	r5, #16
   130f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   130fc:	45c6      	cmp	lr, r8
   130fe:	f844 0c10 	str.w	r0, [r4, #-16]
   13102:	f844 1c0c 	str.w	r1, [r4, #-12]
   13106:	f844 2c08 	str.w	r2, [r4, #-8]
   1310a:	f844 3c04 	str.w	r3, [r4, #-4]
   1310e:	d1f0      	bne.n	130f2 <JoystickController::transmitPS3UserFeedbackMsg()+0x1a>
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   13110:	f89c 3166 	ldrb.w	r3, [ip, #358]	; 0x166
   13114:	bb0b      	cbnz	r3, 1315a <JoystickController::transmitPS3UserFeedbackMsg()+0x82>
   13116:	461a      	mov	r2, r3
        txbuf_[2] = rumble_lValue_; // Small Rumble
   13118:	f88c 34e6 	strb.w	r3, [ip, #1254]	; 0x4e6
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   1311c:	f88c 24e5 	strb.w	r2, [ip, #1253]	; 0x4e5
        txbuf_[3] = rumble_rValue_ ? rumble_timeout_ : 0;
   13120:	f89c 2167 	ldrb.w	r2, [ip, #359]	; 0x167
   13124:	b31a      	cbz	r2, 1316e <JoystickController::transmitPS3UserFeedbackMsg()+0x96>
   13126:	f89c 3168 	ldrb.w	r3, [ip, #360]	; 0x168
   1312a:	f88c 34e7 	strb.w	r3, [ip, #1255]	; 0x4e7
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   1312e:	2400      	movs	r4, #0
        txbuf_[9] = leds_[2] << 1; // RGB value     // using third led now...
   13130:	f89c 316b 	ldrb.w	r3, [ip, #363]	; 0x16b
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   13134:	2121      	movs	r1, #33	; 0x21
        txbuf_[4] = rumble_rValue_; // Big rumble
   13136:	f88c 24e8 	strb.w	r2, [ip, #1256]	; 0x4e8
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   1313a:	2230      	movs	r2, #48	; 0x30
        txbuf_[9] = leds_[2] << 1; // RGB value     // using third led now...
   1313c:	005b      	lsls	r3, r3, #1
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   1313e:	9702      	str	r7, [sp, #8]
   13140:	9201      	str	r2, [sp, #4]
   13142:	2209      	movs	r2, #9
        txbuf_[9] = leds_[2] << 1; // RGB value     // using third led now...
   13144:	f88c 34ed 	strb.w	r3, [ip, #1261]	; 0x4ed
        return driver_->sendControlPacket(0x21, 9, 0x201, 0, 48, txbuf_);
   13148:	f240 2301 	movw	r3, #513	; 0x201
   1314c:	4630      	mov	r0, r6
   1314e:	9400      	str	r4, [sp, #0]
   13150:	f7fe fb1e 	bl	11790 <USBHIDParser::sendControlPacket(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void*)>
}
   13154:	b004      	add	sp, #16
   13156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   1315a:	f89c 2168 	ldrb.w	r2, [ip, #360]	; 0x168
        txbuf_[2] = rumble_lValue_; // Small Rumble
   1315e:	f88c 34e6 	strb.w	r3, [ip, #1254]	; 0x4e6
        txbuf_[1] = rumble_lValue_ ? rumble_timeout_ : 0;
   13162:	f88c 24e5 	strb.w	r2, [ip, #1253]	; 0x4e5
        txbuf_[3] = rumble_rValue_ ? rumble_timeout_ : 0;
   13166:	f89c 2167 	ldrb.w	r2, [ip, #359]	; 0x167
   1316a:	2a00      	cmp	r2, #0
   1316c:	d1db      	bne.n	13126 <JoystickController::transmitPS3UserFeedbackMsg()+0x4e>
   1316e:	4613      	mov	r3, r2
   13170:	e7db      	b.n	1312a <JoystickController::transmitPS3UserFeedbackMsg()+0x52>
    } else if (btdriver_) {
   13172:	6b44      	ldr	r4, [r0, #52]	; 0x34
   13174:	b3cc      	cbz	r4, 131ea <JoystickController::transmitPS3UserFeedbackMsg()+0x112>
        txbuf_[0] = 0x52;
   13176:	4e22      	ldr	r6, [pc, #136]	; (13200 <JoystickController::transmitPS3UserFeedbackMsg()+0x128>)
   13178:	f200 47e4 	addw	r7, r0, #1252	; 0x4e4
   1317c:	f106 0830 	add.w	r8, r6, #48	; 0x30
   13180:	46be      	mov	lr, r7
   13182:	4635      	mov	r5, r6
   13184:	f10e 0e10 	add.w	lr, lr, #16
   13188:	3610      	adds	r6, #16
   1318a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1318c:	4545      	cmp	r5, r8
   1318e:	f84e 0c10 	str.w	r0, [lr, #-16]
   13192:	f84e 1c0c 	str.w	r1, [lr, #-12]
   13196:	f84e 2c08 	str.w	r2, [lr, #-8]
   1319a:	f84e 3c04 	str.w	r3, [lr, #-4]
   1319e:	d1f0      	bne.n	13182 <JoystickController::transmitPS3UserFeedbackMsg()+0xaa>
   131a0:	8833      	ldrh	r3, [r6, #0]
   131a2:	f8ae 3000 	strh.w	r3, [lr]
        txbuf_[3] = rumble_lValue_ ? rumble_timeout_ : 0;
   131a6:	f89c 3166 	ldrb.w	r3, [ip, #358]	; 0x166
   131aa:	b323      	cbz	r3, 131f6 <JoystickController::transmitPS3UserFeedbackMsg()+0x11e>
   131ac:	f89c 2168 	ldrb.w	r2, [ip, #360]	; 0x168
   131b0:	f88c 24e7 	strb.w	r2, [ip, #1255]	; 0x4e7
        txbuf_[5] = rumble_rValue_ ? rumble_timeout_ : 0;
   131b4:	f89c 2167 	ldrb.w	r2, [ip, #359]	; 0x167
        txbuf_[4] = rumble_lValue_; // Small Rumble
   131b8:	f88c 34e8 	strb.w	r3, [ip, #1256]	; 0x4e8
        txbuf_[5] = rumble_rValue_ ? rumble_timeout_ : 0;
   131bc:	b1ca      	cbz	r2, 131f2 <JoystickController::transmitPS3UserFeedbackMsg()+0x11a>
   131be:	f89c 3168 	ldrb.w	r3, [ip, #360]	; 0x168
   131c2:	f88c 34e9 	strb.w	r3, [ip, #1257]	; 0x4e9
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   131c6:	4620      	mov	r0, r4
        txbuf_[11] = leds_[2] << 1; // RGB value
   131c8:	f89c 316b 	ldrb.w	r3, [ip, #363]	; 0x16b
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   131cc:	4639      	mov	r1, r7
        txbuf_[6] = rumble_rValue_; // Big rumble
   131ce:	f88c 24ea 	strb.w	r2, [ip, #1258]	; 0x4ea
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   131d2:	2232      	movs	r2, #50	; 0x32
        txbuf_[11] = leds_[2] << 1; // RGB value
   131d4:	005b      	lsls	r3, r3, #1
   131d6:	f88c 34ef 	strb.w	r3, [ip, #1263]	; 0x4ef
        btdriver_->sendL2CapCommand(txbuf_, 50, BluetoothController::CONTROL_SCID);
   131da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131de:	f7fc fd85 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
        return true;
   131e2:	2001      	movs	r0, #1
}
   131e4:	b004      	add	sp, #16
   131e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   131ea:	4620      	mov	r0, r4
}
   131ec:	b004      	add	sp, #16
   131ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txbuf_[5] = rumble_rValue_ ? rumble_timeout_ : 0;
   131f2:	4613      	mov	r3, r2
   131f4:	e7e5      	b.n	131c2 <JoystickController::transmitPS3UserFeedbackMsg()+0xea>
        txbuf_[3] = rumble_lValue_ ? rumble_timeout_ : 0;
   131f6:	461a      	mov	r2, r3
   131f8:	e7da      	b.n	131b0 <JoystickController::transmitPS3UserFeedbackMsg()+0xd8>
   131fa:	bf00      	nop
   131fc:	20002124 	.word	0x20002124
   13200:	20002154 	.word	0x20002154

00013204 <JoystickController::transmitPS3MotionUserFeedbackMsg()>:
bool JoystickController::transmitPS3MotionUserFeedbackMsg() {
   13204:	4684      	mov	ip, r0
    if (driver_) {
   13206:	6b00      	ldr	r0, [r0, #48]	; 0x30
bool JoystickController::transmitPS3MotionUserFeedbackMsg() {
   13208:	b508      	push	{r3, lr}
    if (driver_) {
   1320a:	b1c8      	cbz	r0, 13240 <JoystickController::transmitPS3MotionUserFeedbackMsg()+0x3c>
        txbuf_[0] = 0x02; // Set report ID, this is needed for Move commands to work
   1320c:	2202      	movs	r2, #2
        txbuf_[2] = leds_[0];
   1320e:	f89c 3169 	ldrb.w	r3, [ip, #361]	; 0x169
        txbuf_[3] = leds_[1];
   13212:	f89c 116a 	ldrb.w	r1, [ip, #362]	; 0x16a
        txbuf_[0] = 0x02; // Set report ID, this is needed for Move commands to work
   13216:	f88c 24e4 	strb.w	r2, [ip, #1252]	; 0x4e4
        txbuf_[2] = leds_[0];
   1321a:	f88c 34e6 	strb.w	r3, [ip, #1254]	; 0x4e6
        txbuf_[4] = leds_[2];
   1321e:	f89c 216b 	ldrb.w	r2, [ip, #363]	; 0x16b
        txbuf_[6] = rumble_lValue_; // Set the rumble value into the write buffer
   13222:	f89c 3166 	ldrb.w	r3, [ip, #358]	; 0x166
        txbuf_[3] = leds_[1];
   13226:	f88c 14e7 	strb.w	r1, [ip, #1255]	; 0x4e7
        return driver_->sendPacket(txbuf_, MOVE_REPORT_BUFFER_SIZE);
   1322a:	f20c 41e4 	addw	r1, ip, #1252	; 0x4e4
        txbuf_[4] = leds_[2];
   1322e:	f88c 24e8 	strb.w	r2, [ip, #1256]	; 0x4e8
        return driver_->sendPacket(txbuf_, MOVE_REPORT_BUFFER_SIZE);
   13232:	2207      	movs	r2, #7
        txbuf_[6] = rumble_lValue_; // Set the rumble value into the write buffer
   13234:	f88c 34ea 	strb.w	r3, [ip, #1258]	; 0x4ea
}
   13238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return driver_->sendPacket(txbuf_, MOVE_REPORT_BUFFER_SIZE);
   1323c:	f7fe ba1c 	b.w	11678 <USBHIDParser::sendPacket(unsigned char const*, int)>
    } else if (btdriver_) {
   13240:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
   13244:	b900      	cbnz	r0, 13248 <JoystickController::transmitPS3MotionUserFeedbackMsg()+0x44>
}
   13246:	bd08      	pop	{r3, pc}
        txbuf_[4] = leds_[1];
   13248:	f8bc 316a 	ldrh.w	r3, [ip, #362]	; 0x16a
        txbuf_[0] = 0xA2; // HID BT DATA_request (0xA0) | Report Type (Output 0x02)
   1324c:	f240 22a2 	movw	r2, #674	; 0x2a2
        txbuf_[7] = rumble_lValue_;
   13250:	f89c 1166 	ldrb.w	r1, [ip, #358]	; 0x166
        txbuf_[3] = leds_[0];
   13254:	f89c e169 	ldrb.w	lr, [ip, #361]	; 0x169
        txbuf_[0] = 0xA2; // HID BT DATA_request (0xA0) | Report Type (Output 0x02)
   13258:	f8ac 24e4 	strh.w	r2, [ip, #1252]	; 0x4e4
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   1325c:	2232      	movs	r2, #50	; 0x32
        txbuf_[4] = leds_[1];
   1325e:	f8ac 34e8 	strh.w	r3, [ip, #1256]	; 0x4e8
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   13262:	f06f 0301 	mvn.w	r3, #1
        txbuf_[7] = rumble_lValue_;
   13266:	f88c 14eb 	strb.w	r1, [ip, #1259]	; 0x4eb
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   1326a:	f20c 41e4 	addw	r1, ip, #1252	; 0x4e4
        txbuf_[3] = leds_[0];
   1326e:	f88c e4e7 	strb.w	lr, [ip, #1255]	; 0x4e7
        btdriver_->sendL2CapCommand(txbuf_, MOVE_HID_BUFFERSIZE, BluetoothController::INTERRUPT_SCID);
   13272:	f7fc fd3b 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
        return true;
   13276:	2001      	movs	r0, #1
}
   13278:	bd08      	pop	{r3, pc}
   1327a:	bf00      	nop

0001327c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>:
{
   1327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13280:	460d      	mov	r5, r1
    if ((leds_[0] != lr) || (leds_[1] != lg) || (leds_[2] != lb)) {
   13282:	f890 1169 	ldrb.w	r1, [r0, #361]	; 0x169
{
   13286:	4604      	mov	r4, r0
    if ((leds_[0] != lr) || (leds_[1] != lg) || (leds_[2] != lb)) {
   13288:	42a9      	cmp	r1, r5
   1328a:	d010      	beq.n	132ae <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x32>
        switch (joystickType_) {
   1328c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
        leds_[2] = lb;
   13290:	f884 316b 	strb.w	r3, [r4, #363]	; 0x16b
        switch (joystickType_) {
   13294:	1e4b      	subs	r3, r1, #1
        leds_[0] = lr;
   13296:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
        leds_[1] = lg;
   1329a:	f884 216a 	strb.w	r2, [r4, #362]	; 0x16a
        switch (joystickType_) {
   1329e:	2b06      	cmp	r3, #6
   132a0:	d80d      	bhi.n	132be <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x42>
   132a2:	e8df f003 	tbb	[pc, r3]
   132a6:	3d38      	.short	0x3d38
   132a8:	0c5a420c 	.word	0x0c5a420c
   132ac:	10          	.byte	0x10
   132ad:	00          	.byte	0x00
    if ((leds_[0] != lr) || (leds_[1] != lg) || (leds_[2] != lb)) {
   132ae:	f890 116a 	ldrb.w	r1, [r0, #362]	; 0x16a
   132b2:	4291      	cmp	r1, r2
   132b4:	d1ea      	bne.n	1328c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x10>
   132b6:	f890 116b 	ldrb.w	r1, [r0, #363]	; 0x16b
   132ba:	4299      	cmp	r1, r3
   132bc:	d1e6      	bne.n	1328c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x10>
        switch (joystickType_) {
   132be:	2700      	movs	r7, #0
}
   132c0:	4638      	mov	r0, r7
   132c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (btdriver_) {
   132c6:	6b67      	ldr	r7, [r4, #52]	; 0x34
   132c8:	2f00      	cmp	r7, #0
   132ca:	d04d      	beq.n	13368 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0xec>
                struct SWProBTSendConfigData *packet =  (struct SWProBTSendConfigData *)txbuf_ ;
   132cc:	f204 48e4 	addw	r8, r4, #1252	; 0x4e4
                packet->id = 1; 
   132d0:	2601      	movs	r6, #1
                memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   132d2:	2232      	movs	r2, #50	; 0x32
   132d4:	2100      	movs	r1, #0
   132d6:	4640      	mov	r0, r8
   132d8:	f008 fc3e 	bl	1bb58 <memset>
                btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   132dc:	4638      	mov	r0, r7
                packet->id = 1; 
   132de:	f884 64e5 	strb.w	r6, [r4, #1253]	; 0x4e5
                return true;
   132e2:	4637      	mov	r7, r6
                packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   132e4:	22a2      	movs	r2, #162	; 0xa2
                packet->gpnum = switch_packet_num;
   132e6:	4e3d      	ldr	r6, [pc, #244]	; (133dc <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x160>)
                btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   132e8:	f06f 0301 	mvn.w	r3, #1
   132ec:	4641      	mov	r1, r8
                packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   132ee:	f884 24e4 	strb.w	r2, [r4, #1252]	; 0x4e4
                packet->gpnum = switch_packet_num;
   132f2:	7832      	ldrb	r2, [r6, #0]
                packet->subCommandData[0] = lr; // try full 0x30?; // Report ID
   132f4:	f884 54f0 	strb.w	r5, [r4, #1264]	; 0x4f0
                packet->gpnum = switch_packet_num;
   132f8:	f884 24e6 	strb.w	r2, [r4, #1254]	; 0x4e6
                switch_packet_num = (switch_packet_num + 1) & 0x0f;
   132fc:	443a      	add	r2, r7
   132fe:	f002 020f 	and.w	r2, r2, #15
   13302:	7032      	strb	r2, [r6, #0]
                packet->subCommand = 0x30; // Report ID 
   13304:	2230      	movs	r2, #48	; 0x30
   13306:	f884 24ef 	strb.w	r2, [r4, #1263]	; 0x4ef
                btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   1330a:	2232      	movs	r2, #50	; 0x32
   1330c:	f7fc fcee 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
}
   13310:	4638      	mov	r0, r7
   13312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return transmitPS3UserFeedbackMsg();
   13316:	4620      	mov	r0, r4
}
   13318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return transmitPS3UserFeedbackMsg();
   1331c:	f7ff bedc 	b.w	130d8 <JoystickController::transmitPS3UserFeedbackMsg()>
            return transmitPS4UserFeedbackMsg();
   13320:	4620      	mov	r0, r4
}
   13322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return transmitPS4UserFeedbackMsg();
   13326:	f7ff be85 	b.w	13034 <JoystickController::transmitPS4UserFeedbackMsg()>
            txbuf_[1] = 0x00;
   1332a:	2300      	movs	r3, #0
            txbuf_[2] = 0x08;
   1332c:	2208      	movs	r2, #8
            txbuf_[3] = 0x40 + lr;
   1332e:	3540      	adds	r5, #64	; 0x40
            if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 12, this, __LINE__)) {
   13330:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
            txbuf_[1] = 0x00;
   13334:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
            txbuf_[2] = 0x08;
   13338:	f884 24e6 	strb.w	r2, [r4, #1254]	; 0x4e6
            txbuf_[3] = 0x40 + lr;
   1333c:	f884 54e7 	strb.w	r5, [r4, #1255]	; 0x4e7
            txbuf_[4] = 0x00;
   13340:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            txbuf_[8] = 0x00;
   13344:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   13348:	b160      	cbz	r0, 13364 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0xe8>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   1334a:	4623      	mov	r3, r4
   1334c:	220c      	movs	r2, #12
   1334e:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
            return true;
   13352:	2701      	movs	r7, #1
    return queue_Data_Transfer(pipe, buffer, len, driver);
   13354:	f7fc ff9a 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
   13358:	e7b2      	b.n	132c0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
            return transmitPS3MotionUserFeedbackMsg();
   1335a:	4620      	mov	r0, r4
}
   1335c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return transmitPS3MotionUserFeedbackMsg();
   13360:	f7ff bf50 	b.w	13204 <JoystickController::transmitPS3MotionUserFeedbackMsg()>
            return true;
   13364:	2701      	movs	r7, #1
   13366:	e7ab      	b.n	132c0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
            txbuf_[0] = 0x01;   // Command
   13368:	2301      	movs	r3, #1
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   1336a:	f8c4 74e4 	str.w	r7, [r4, #1252]	; 0x4e4
            txbuf_[1 + 0] = rumble_counter++; //
   1336e:	4a1c      	ldr	r2, [pc, #112]	; (133e0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x164>)
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   13370:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13374:	f8c4 74e8 	str.w	r7, [r4, #1256]	; 0x4e8
            txbuf_[0] = 0x01;   // Command
   13378:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
            txbuf_[1 + 2] = 0x01;
   1337c:	f884 34e7 	strb.w	r3, [r4, #1255]	; 0x4e7
            txbuf_[1 + 6] = 0x01;
   13380:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
            txbuf_[1 + 9] = 0x30; // LED Command
   13384:	2330      	movs	r3, #48	; 0x30
            println("Switch set leds: driver? ", (uint32_t)driver_, HEX);
   13386:	6b20      	ldr	r0, [r4, #48]	; 0x30
            txbuf_[1 + 9] = 0x30; // LED Command
   13388:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
            txbuf_[1 + 0] = rumble_counter++; //
   1338c:	7813      	ldrb	r3, [r2, #0]
            txbuf_[1 + 10] = lr;
   1338e:	f884 54ef 	strb.w	r5, [r4, #1263]	; 0x4ef
            txbuf_[1 + 0] = rumble_counter++; //
   13392:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
   13396:	3301      	adds	r3, #1
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   13398:	f8c4 74f0 	str.w	r7, [r4, #1264]	; 0x4f0
            txbuf_[1 + 0] = rumble_counter++; //
   1339c:	7013      	strb	r3, [r2, #0]
            txbuf_[1 + 3] = 0x40;
   1339e:	f244 0340 	movw	r3, #16448	; 0x4040
            memset(txbuf_, 0, 20);  // make sure it is cleared out
   133a2:	f8c4 74f4 	str.w	r7, [r4, #1268]	; 0x4f4
            txbuf_[1 + 3] = 0x40;
   133a6:	f8a4 34e8 	strh.w	r3, [r4, #1256]	; 0x4e8
            txbuf_[1 + 7] = 0x40;
   133aa:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
			if(driver_) {
   133ae:	b118      	cbz	r0, 133b8 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x13c>
				driver_->sendPacket(txbuf_, 20);
   133b0:	2214      	movs	r2, #20
   133b2:	f7fe f961 	bl	11678 <USBHIDParser::sendPacket(unsigned char const*, int)>
   133b6:	e783      	b.n	132c0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
			} else if (txpipe_) {
   133b8:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
   133bc:	2800      	cmp	r0, #0
   133be:	f43f af7e 	beq.w	132be <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x42>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   133c2:	4623      	mov	r3, r4
   133c4:	2214      	movs	r2, #20
   133c6:	f7fc ff61 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
				if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 20, this, __LINE__)) {
   133ca:	4607      	mov	r7, r0
   133cc:	2800      	cmp	r0, #0
   133ce:	f47f af76 	bne.w	132be <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x42>
					Serial.printf("Switch transfer fail\n");
   133d2:	4904      	ldr	r1, [pc, #16]	; (133e4 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x168>)
   133d4:	4804      	ldr	r0, [pc, #16]	; (133e8 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x16c>)
   133d6:	f002 fc0d 	bl	15bf4 <Print::printf(char const*, ...)>
   133da:	e771      	b.n	132c0 <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)+0x44>
   133dc:	2000fc34 	.word	0x2000fc34
   133e0:	2000fc33 	.word	0x2000fc33
   133e4:	20003b78 	.word	0x20003b78
   133e8:	2000958c 	.word	0x2000958c

000133ec <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>:
{
   133ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133ee:	4604      	mov	r4, r0
    switch (joystickType_) {
   133f0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
   133f4:	460d      	mov	r5, r1
   133f6:	4616      	mov	r6, r2
    switch (joystickType_) {
   133f8:	3801      	subs	r0, #1
    rumble_lValue_ = lValue;
   133fa:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
    rumble_rValue_ = rValue;
   133fe:	f884 2167 	strb.w	r2, [r4, #359]	; 0x167
    rumble_timeout_ = timeout;
   13402:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
    switch (joystickType_) {
   13406:	2806      	cmp	r0, #6
   13408:	f200 80b4 	bhi.w	13574 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x188>
   1340c:	e8df f000 	tbb	[pc, r0]
   13410:	94615c57 	.word	0x94615c57
   13414:	b2ad      	.short	0xb2ad
   13416:	04          	.byte	0x04
   13417:	00          	.byte	0x00
        if (btdriver_) {
   13418:	6b67      	ldr	r7, [r4, #52]	; 0x34
   1341a:	2f00      	cmp	r7, #0
   1341c:	f000 80c2 	beq.w	135a4 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b8>
            struct SWProBTSendConfigData *packet =  (struct SWProBTSendConfigData *)txbuf_ ;
   13420:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
            memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   13424:	2232      	movs	r2, #50	; 0x32
   13426:	2100      	movs	r1, #0
   13428:	4638      	mov	r0, r7
   1342a:	f008 fb95 	bl	1bb58 <memset>
            packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   1342e:	23a2      	movs	r3, #162	; 0xa2
   13430:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
            packet->id = 0x10; 
   13434:	2310      	movs	r3, #16
   13436:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
			if(switch_packet_num > 0x10) switch_packet_num = 0;
   1343a:	4bb5      	ldr	r3, [pc, #724]	; (13710 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x324>)
   1343c:	781a      	ldrb	r2, [r3, #0]
   1343e:	2a10      	cmp	r2, #16
   13440:	f200 80f3 	bhi.w	1362a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x23e>
            switch_packet_num = (switch_packet_num + 1) & 0x0f;
   13444:	1c51      	adds	r1, r2, #1
   13446:	f001 010f 	and.w	r1, r1, #15
   1344a:	7019      	strb	r1, [r3, #0]
            Serial.printf("Set Rumble data: %d, %d\n", lValue, rValue);
   1344c:	4633      	mov	r3, r6
            packet->gpnum = switch_packet_num;
   1344e:	f884 24e6 	strb.w	r2, [r4, #1254]	; 0x4e6
            Serial.printf("Set Rumble data: %d, %d\n", lValue, rValue);
   13452:	462a      	mov	r2, r5
   13454:	49af      	ldr	r1, [pc, #700]	; (13714 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x328>)
   13456:	48b0      	ldr	r0, [pc, #704]	; (13718 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x32c>)
   13458:	f002 fbcc 	bl	15bf4 <Print::printf(char const*, ...)>
			if ((lValue != 0x0) || (rValue != 0x0)) {
   1345c:	ea55 0306 	orrs.w	r3, r5, r6
   13460:	d01f      	beq.n	134a2 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
   13462:	1e2b      	subs	r3, r5, #0
   13464:	bf18      	it	ne
   13466:	2301      	movne	r3, #1
                if (lValue != 0 && rValue == 0) {
   13468:	2e00      	cmp	r6, #0
   1346a:	f040 80f4 	bne.w	13656 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x26a>
   1346e:	2b00      	cmp	r3, #0
   13470:	f000 80f1 	beq.w	13656 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x26a>
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_off[i];
   13474:	2201      	movs	r2, #1
   13476:	2340      	movs	r3, #64	; 0x40
   13478:	2100      	movs	r1, #0
   1347a:	f884 24ec 	strb.w	r2, [r4, #1260]	; 0x4ec
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   1347e:	2228      	movs	r2, #40	; 0x28
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_off[i];
   13480:	f884 14eb 	strb.w	r1, [r4, #1259]	; 0x4eb
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   13484:	2188      	movs	r1, #136	; 0x88
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_off[i];
   13486:	f884 34ed 	strb.w	r3, [r4, #1261]	; 0x4ed
   1348a:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   1348e:	2361      	movs	r3, #97	; 0x61
   13490:	f884 24e7 	strb.w	r2, [r4, #1255]	; 0x4e7
   13494:	2260      	movs	r2, #96	; 0x60
   13496:	f884 14e8 	strb.w	r1, [r4, #1256]	; 0x4e8
   1349a:	f884 24e9 	strb.w	r2, [r4, #1257]	; 0x4e9
   1349e:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
            packet->subCommand = 0x0;
   134a2:	2000      	movs	r0, #0
            btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   134a4:	f06f 0301 	mvn.w	r3, #1
   134a8:	2232      	movs	r2, #50	; 0x32
   134aa:	4639      	mov	r1, r7
            packet->subCommand = 0x0;
   134ac:	f884 04ef 	strb.w	r0, [r4, #1263]	; 0x4ef
            packet->subCommandData[0] = 0; 
   134b0:	f884 04f0 	strb.w	r0, [r4, #1264]	; 0x4f0
            btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   134b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   134b6:	f7fc fc19 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
            return true;
   134ba:	2001      	movs	r0, #1
}
   134bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return transmitPS3UserFeedbackMsg();
   134be:	4620      	mov	r0, r4
}
   134c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return transmitPS3UserFeedbackMsg();
   134c4:	f7ff be08 	b.w	130d8 <JoystickController::transmitPS3UserFeedbackMsg()>
        return transmitPS4UserFeedbackMsg();
   134c8:	4620      	mov	r0, r4
}
   134ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return transmitPS4UserFeedbackMsg();
   134ce:	f7ff bdb1 	b.w	13034 <JoystickController::transmitPS4UserFeedbackMsg()>
		if (btdriver_) {
   134d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   134d4:	2800      	cmp	r0, #0
   134d6:	d04f      	beq.n	13578 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x18c>
			txbuf_[0] = 0xA2;                  // HID BT DATA (0xA0) | Report Type (Output 0x02)
   134d8:	f240 33a2 	movw	r3, #930	; 0x3a2
	if (in_range == 0) return out_min + out_range / 2;
	// compute the numerator
	long num = (x - in_min) * out_range;
	// before dividing, add extra for proper round off (towards zero)
	if (out_range >= 0) {
		num += in_range / 2;
   134dc:	f240 12ff 	movw	r2, #511	; 0x1ff
   134e0:	f8a4 34e4 	strh.w	r3, [r4, #1252]	; 0x4e4
			txbuf_[2] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
   134e4:	230f      	movs	r3, #15
   134e6:	f884 34e6 	strb.w	r3, [r4, #1254]	; 0x4e6
   134ea:	2364      	movs	r3, #100	; 0x64
   134ec:	fb13 2501 	smlabb	r5, r3, r1, r2
   134f0:	fb13 2106 	smlabb	r1, r3, r6, r2
	} else {
		num -= in_range / 2;
	}
	// divide by input range and add output offset to complete map() compute
	long result = num / in_range + out_min;
   134f4:	4a89      	ldr	r2, [pc, #548]	; (1371c <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x330>)
			txbuf_[7] = 0xff; // Length of pulse
   134f6:	23ff      	movs	r3, #255	; 0xff
   134f8:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
   134fc:	fb82 6305 	smull	r6, r3, r2, r5
   13500:	442b      	add	r3, r5
   13502:	fb82 5201 	smull	r5, r2, r2, r1
   13506:	440a      	add	r2, r1
			txbuf_[3] = map(lValue, 0, 1023, 0, 100); // lT force
   13508:	f3c3 2347 	ubfx	r3, r3, #9, #8
			txbuf_[8] = 0x00; // Period between pulses
   1350c:	2100      	movs	r1, #0
			txbuf_[4] = map(rValue, 0, 1023, 0, 100); // rT force
   1350e:	f3c2 2247 	ubfx	r2, r2, #9, #8
			txbuf_[3] = map(lValue, 0, 1023, 0, 100); // lT force
   13512:	f884 34e7 	strb.w	r3, [r4, #1255]	; 0x4e7
			txbuf_[5] = map(lValue, 0, 1023, 0, 100); // L force
   13516:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
			btdriver_->sendL2CapCommand(txbuf_, 10, BluetoothController::INTERRUPT_SCID);
   1351a:	f06f 0301 	mvn.w	r3, #1
			txbuf_[4] = map(rValue, 0, 1023, 0, 100); // rT force
   1351e:	f884 24e8 	strb.w	r2, [r4, #1256]	; 0x4e8
			txbuf_[6] = map(rValue, 0, 1023, 0, 100); // R force
   13522:	f884 24ea 	strb.w	r2, [r4, #1258]	; 0x4ea
			btdriver_->sendL2CapCommand(txbuf_, 10, BluetoothController::INTERRUPT_SCID);
   13526:	220a      	movs	r2, #10
			txbuf_[8] = 0x00; // Period between pulses
   13528:	f8a4 14ec 	strh.w	r1, [r4, #1260]	; 0x4ec
			btdriver_->sendL2CapCommand(txbuf_, 10, BluetoothController::INTERRUPT_SCID);
   1352c:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13530:	f7fc fbdc 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
			return true;
   13534:	2001      	movs	r0, #1
}
   13536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        txbuf_[4] = 0x00;
   13538:	2300      	movs	r3, #0
        txbuf_[0] = 0x00;
   1353a:	4a79      	ldr	r2, [pc, #484]	; (13720 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x334>)
        if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 12, this, __LINE__)) {
   1353c:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
        txbuf_[5] = lValue;
   13540:	f884 14e9 	strb.w	r1, [r4, #1257]	; 0x4e9
        txbuf_[0] = 0x00;
   13544:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        txbuf_[4] = 0x00;
   13548:	f884 34e8 	strb.w	r3, [r4, #1256]	; 0x4e8
        txbuf_[6] = rValue;
   1354c:	f884 64ea 	strb.w	r6, [r4, #1258]	; 0x4ea
        txbuf_[7] = 0x00;
   13550:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
        txbuf_[8] = 0x00;
   13554:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   13558:	b310      	cbz	r0, 135a0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b4>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   1355a:	4623      	mov	r3, r4
   1355c:	220c      	movs	r2, #12
   1355e:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13562:	f7fc fe93 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        return true;
   13566:	2001      	movs	r0, #1
}
   13568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return transmitPS3MotionUserFeedbackMsg();
   1356a:	4620      	mov	r0, r4
}
   1356c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return transmitPS3MotionUserFeedbackMsg();
   13570:	f7ff be48 	b.w	13204 <JoystickController::transmitPS3MotionUserFeedbackMsg()>
    switch (joystickType_) {
   13574:	2000      	movs	r0, #0
}
   13576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        txbuf_[0] = 0x9;
   13578:	4b6a      	ldr	r3, [pc, #424]	; (13724 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x338>)
        txbuf_[10] = 0xff; // Length of pulse
   1357a:	22ff      	movs	r2, #255	; 0xff
        if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 13, this, __LINE__)) {
   1357c:	f8d4 54a0 	ldr.w	r5, [r4, #1184]	; 0x4a0
        txbuf_[0] = 0x9;
   13580:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        txbuf_[4] = 0x00; // Mode
   13584:	f44f 6370 	mov.w	r3, #3840	; 0xf00
        txbuf_[8] = lValue; // L force
   13588:	f884 14ec 	strb.w	r1, [r4, #1260]	; 0x4ec
        txbuf_[9] = rValue; // R force
   1358c:	f884 64ed 	strb.w	r6, [r4, #1261]	; 0x4ed
        txbuf_[10] = 0xff; // Length of pulse
   13590:	f8a4 24ee 	strh.w	r2, [r4, #1262]	; 0x4ee
        txbuf_[4] = 0x00; // Mode
   13594:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        txbuf_[12] = 0x00; // Repeat
   13598:	f884 04f0 	strb.w	r0, [r4, #1264]	; 0x4f0
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   1359c:	2d00      	cmp	r5, #0
   1359e:	d13b      	bne.n	13618 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x22c>
        return true;    //
   135a0:	2001      	movs	r0, #1
}
   135a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Serial.printf("Set Rumble data (USB): %d, %d\n", lValue, rValue);
   135a4:	4613      	mov	r3, r2
   135a6:	485c      	ldr	r0, [pc, #368]	; (13718 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x32c>)
   135a8:	460a      	mov	r2, r1
   135aa:	495f      	ldr	r1, [pc, #380]	; (13728 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x33c>)
   135ac:	f002 fb22 	bl	15bf4 <Print::printf(char const*, ...)>
        txbuf_[0] = 0x10;   // Command
   135b0:	2210      	movs	r2, #16
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   135b2:	4b57      	ldr	r3, [pc, #348]	; (13710 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x324>)
        memset(txbuf_, 0, 18);  // make sure it is cleared out
   135b4:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   135b8:	f8c4 74e4 	str.w	r7, [r4, #1252]	; 0x4e4
        txbuf_[0] = 0x10;   // Command
   135bc:	f884 24e4 	strb.w	r2, [r4, #1252]	; 0x4e4
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   135c0:	781a      	ldrb	r2, [r3, #0]
        memset(txbuf_, 0, 18);  // make sure it is cleared out
   135c2:	f8c4 74e8 	str.w	r7, [r4, #1256]	; 0x4e8
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   135c6:	2a10      	cmp	r2, #16
        memset(txbuf_, 0, 18);  // make sure it is cleared out
   135c8:	f8c4 74ec 	str.w	r7, [r4, #1260]	; 0x4ec
   135cc:	f8c4 74f0 	str.w	r7, [r4, #1264]	; 0x4f0
   135d0:	f8a4 74f4 	strh.w	r7, [r4, #1268]	; 0x4f4
		if(switch_packet_num > 0x10) switch_packet_num = 0;
   135d4:	d82c      	bhi.n	13630 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x244>
        switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   135d6:	1c50      	adds	r0, r2, #1
   135d8:	f000 000f 	and.w	r0, r0, #15
   135dc:	7018      	strb	r0, [r3, #0]
		if ((lValue != 0x0) || (rValue != 0x0)) {
   135de:	ea55 0306 	orrs.w	r3, r5, r6
        txbuf_[1 + 0] = switch_packet_num;
   135e2:	f884 24e5 	strb.w	r2, [r4, #1253]	; 0x4e5
		if ((lValue != 0x0) || (rValue != 0x0)) {
   135e6:	d010      	beq.n	1360a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
   135e8:	1e2b      	subs	r3, r5, #0
   135ea:	bf18      	it	ne
   135ec:	2301      	movne	r3, #1
			if (lValue != 0 && rValue == 0x00) {
   135ee:	2e00      	cmp	r6, #0
   135f0:	d14e      	bne.n	13690 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2a4>
   135f2:	2b00      	cmp	r3, #0
   135f4:	d04c      	beq.n	13690 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2a4>
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_off[i];
   135f6:	2001      	movs	r0, #1
   135f8:	4a4c      	ldr	r2, [pc, #304]	; (1372c <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x340>)
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   135fa:	f246 1360 	movw	r3, #24928	; 0x6160
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_off[i];
   135fe:	f884 04e7 	strb.w	r0, [r4, #1255]	; 0x4e7
   13602:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   13606:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
		if(driver_) {
   1360a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1360c:	b198      	cbz	r0, 13636 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x24a>
			driver_->sendPacket(txbuf_, 18);
   1360e:	2212      	movs	r2, #18
   13610:	f7fe f832 	bl	11678 <USBHIDParser::sendPacket(unsigned char const*, int)>
        return true;
   13614:	2001      	movs	r0, #1
}
   13616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return queue_Data_Transfer(pipe, buffer, len, driver);
   13618:	4623      	mov	r3, r4
   1361a:	220d      	movs	r2, #13
   1361c:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13620:	4628      	mov	r0, r5
   13622:	f7fc fe33 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        return true;    //
   13626:	2001      	movs	r0, #1
}
   13628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1362a:	2101      	movs	r1, #1
   1362c:	2200      	movs	r2, #0
   1362e:	e70c      	b.n	1344a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x5e>
   13630:	463a      	mov	r2, r7
   13632:	2001      	movs	r0, #1
   13634:	e7d2      	b.n	135dc <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1f0>
		} else if (txpipe_) {
   13636:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
   1363a:	2800      	cmp	r0, #0
   1363c:	d0b0      	beq.n	135a0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b4>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   1363e:	4623      	mov	r3, r4
   13640:	220c      	movs	r2, #12
   13642:	f7fc fe23 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
			if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 12, this, __LINE__)) {
   13646:	2800      	cmp	r0, #0
   13648:	d1aa      	bne.n	135a0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x1b4>
				Serial.printf("Switch transfer fail\n");
   1364a:	4939      	ldr	r1, [pc, #228]	; (13730 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x344>)
   1364c:	4832      	ldr	r0, [pc, #200]	; (13718 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x32c>)
   1364e:	f002 fad1 	bl	15bf4 <Print::printf(char const*, ...)>
        return true;
   13652:	2001      	movs	r0, #1
}
   13654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((lValue != 0x0) || (rValue != 0x0)) {
   13656:	3e00      	subs	r6, #0
   13658:	bf18      	it	ne
   1365a:	2601      	movne	r6, #1
                } else if (rValue != 0 && lValue == 0) {
   1365c:	bb6d      	cbnz	r5, 136ba <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2ce>
   1365e:	b366      	cbz	r6, 136ba <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x2ce>
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   13660:	2288      	movs	r2, #136	; 0x88
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13662:	2340      	movs	r3, #64	; 0x40
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   13664:	2128      	movs	r1, #40	; 0x28
   13666:	f884 24ec 	strb.w	r2, [r4, #1260]	; 0x4ec
   1366a:	2260      	movs	r2, #96	; 0x60
   1366c:	f884 14eb 	strb.w	r1, [r4, #1259]	; 0x4eb
   13670:	2161      	movs	r1, #97	; 0x61
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13672:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
   13676:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
   1367a:	2301      	movs	r3, #1
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   1367c:	f884 24ed 	strb.w	r2, [r4, #1261]	; 0x4ed
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13680:	2200      	movs	r2, #0
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   13682:	f884 14ee 	strb.w	r1, [r4, #1262]	; 0x4ee
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_off[i];
   13686:	f884 24e7 	strb.w	r2, [r4, #1255]	; 0x4e7
   1368a:	f884 34e8 	strb.w	r3, [r4, #1256]	; 0x4e8
   1368e:	e708      	b.n	134a2 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
		if ((lValue != 0x0) || (rValue != 0x0)) {
   13690:	3e00      	subs	r6, #0
   13692:	bf18      	it	ne
   13694:	2601      	movne	r6, #1
			} else if (rValue != 0 && lValue == 0x00) {
   13696:	bb5d      	cbnz	r5, 136f0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x304>
   13698:	b356      	cbz	r6, 136f0 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x304>
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   1369a:	f246 1360 	movw	r3, #24928	; 0x6160
   1369e:	f648 0028 	movw	r0, #34856	; 0x8828
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_off[i];
   136a2:	2201      	movs	r2, #1
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   136a4:	f8a4 34e8 	strh.w	r3, [r4, #1256]	; 0x4e8
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_off[i];
   136a8:	f244 0340 	movw	r3, #16448	; 0x4040
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   136ac:	f8a4 04e6 	strh.w	r0, [r4, #1254]	; 0x4e6
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_off[i];
   136b0:	f884 24eb 	strb.w	r2, [r4, #1259]	; 0x4eb
   136b4:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
   136b8:	e7a7      	b.n	1360a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
                } else if (rValue != 0 && lValue != 0) {
   136ba:	2b00      	cmp	r3, #0
   136bc:	f43f aef1 	beq.w	134a2 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
   136c0:	2e00      	cmp	r6, #0
   136c2:	f43f aeee 	beq.w	134a2 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   136c6:	2360      	movs	r3, #96	; 0x60
   136c8:	2128      	movs	r1, #40	; 0x28
   136ca:	2288      	movs	r2, #136	; 0x88
   136cc:	f884 34ed 	strb.w	r3, [r4, #1261]	; 0x4ed
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   136d0:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   136d4:	2361      	movs	r3, #97	; 0x61
   136d6:	f884 14eb 	strb.w	r1, [r4, #1259]	; 0x4eb
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   136da:	f884 14e7 	strb.w	r1, [r4, #1255]	; 0x4e7
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   136de:	f884 24ec 	strb.w	r2, [r4, #1260]	; 0x4ec
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   136e2:	f884 24e8 	strb.w	r2, [r4, #1256]	; 0x4e8
					for(uint8_t i = 0; i < 4; i++) packet->rumbleDataR[i] = rumble_on[i];
   136e6:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
					for(uint8_t i = 4; i < 8; i++) packet->rumbleDataL[i-4] = rumble_on[i];
   136ea:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
   136ee:	e6d8      	b.n	134a2 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0xb6>
			} else if (rValue != 0 && lValue != 0) {
   136f0:	2b00      	cmp	r3, #0
   136f2:	d08a      	beq.n	1360a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
   136f4:	2e00      	cmp	r6, #0
   136f6:	d088      	beq.n	1360a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   136f8:	f648 0028 	movw	r0, #34856	; 0x8828
   136fc:	4a0d      	ldr	r2, [pc, #52]	; (13734 <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x348>)
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   136fe:	f246 1360 	movw	r3, #24928	; 0x6160
				for(uint8_t i = 0; i < 4; i++) txbuf_[i + 2] = rumble_on[i];
   13702:	f8a4 04e6 	strh.w	r0, [r4, #1254]	; 0x4e6
   13706:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
				for(uint8_t i = 4; i < 8; i++) txbuf_[i - 4 + 6] = rumble_on[i];
   1370a:	f8a4 34ec 	strh.w	r3, [r4, #1260]	; 0x4ec
   1370e:	e77c      	b.n	1360a <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)+0x21e>
   13710:	2000fc34 	.word	0x2000fc34
   13714:	20003b90 	.word	0x20003b90
   13718:	2000958c 	.word	0x2000958c
   1371c:	80200803 	.word	0x80200803
   13720:	c00f0100 	.word	0xc00f0100
   13724:	09000009 	.word	0x09000009
   13728:	20003bac 	.word	0x20003bac
   1372c:	88284040 	.word	0x88284040
   13730:	20003b78 	.word	0x20003b78
   13734:	88286160 	.word	0x88286160

00013738 <JoystickController::joystickDataClear()>:
    joystickEvent = false;
   13738:	2100      	movs	r1, #0
    axis_changed_mask_ = 0;
   1373a:	2200      	movs	r2, #0
   1373c:	2300      	movs	r3, #0
    joystickEvent = false;
   1373e:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    anychange = false;
   13742:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    axis_changed_mask_ = 0;
   13746:	e9c0 2354 	strd	r2, r3, [r0, #336]	; 0x150
    axis_mask_ = 0;
   1374a:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
}
   1374e:	4770      	bx	lr

00013750 <JoystickController::mapNameToJoystickType(unsigned char const*)>:
{
   13750:	b538      	push	{r3, r4, r5, lr}
   13752:	460c      	mov	r4, r1
   13754:	4605      	mov	r5, r0
    if (strncmp((const char *)remoteName, "Wireless Controller", 19) == 0) {
   13756:	2213      	movs	r2, #19
   13758:	4923      	ldr	r1, [pc, #140]	; (137e8 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x98>)
   1375a:	4620      	mov	r0, r4
   1375c:	f008 fae2 	bl	1bd24 <strncmp>
   13760:	b920      	cbnz	r0, 1376c <JoystickController::mapNameToJoystickType(unsigned char const*)+0x1c>
        joystickType_ = PS4;
   13762:	2302      	movs	r3, #2
   13764:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
   13768:	2001      	movs	r0, #1
   1376a:	bd38      	pop	{r3, r4, r5, pc}
    } else if (strncmp((const char *)remoteName, "PLAYSTATION(R)3", 15) == 0) {
   1376c:	220f      	movs	r2, #15
   1376e:	491f      	ldr	r1, [pc, #124]	; (137ec <JoystickController::mapNameToJoystickType(unsigned char const*)+0x9c>)
   13770:	4620      	mov	r0, r4
   13772:	f008 fad7 	bl	1bd24 <strncmp>
   13776:	b920      	cbnz	r0, 13782 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x32>
        joystickType_ = PS3;
   13778:	2301      	movs	r3, #1
}
   1377a:	2001      	movs	r0, #1
        joystickType_ = PS3;
   1377c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
   13780:	bd38      	pop	{r3, r4, r5, pc}
    } else if (strncmp((const char *)remoteName, "Navigation Controller", 21) == 0) {
   13782:	2215      	movs	r2, #21
   13784:	491a      	ldr	r1, [pc, #104]	; (137f0 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xa0>)
   13786:	4620      	mov	r0, r4
   13788:	f008 facc 	bl	1bd24 <strncmp>
   1378c:	2800      	cmp	r0, #0
   1378e:	d0f3      	beq.n	13778 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x28>
    } else if (strncmp((const char *)remoteName, "Motion Controller", 17) == 0) {
   13790:	2211      	movs	r2, #17
   13792:	4918      	ldr	r1, [pc, #96]	; (137f4 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xa4>)
   13794:	4620      	mov	r0, r4
   13796:	f008 fac5 	bl	1bd24 <strncmp>
   1379a:	b918      	cbnz	r0, 137a4 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x54>
        joystickType_ = PS3_MOTION;
   1379c:	2305      	movs	r3, #5
   1379e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   137a2:	e7e1      	b.n	13768 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
    } else if (strncmp((const char *)remoteName, "Xbox Wireless", 13) == 0) {
   137a4:	220d      	movs	r2, #13
   137a6:	4914      	ldr	r1, [pc, #80]	; (137f8 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xa8>)
   137a8:	4620      	mov	r0, r4
   137aa:	f008 fabb 	bl	1bd24 <strncmp>
   137ae:	b1b0      	cbz	r0, 137de <JoystickController::mapNameToJoystickType(unsigned char const*)+0x8e>
    } else if (strncmp((const char *)remoteName, "Pro Controller", 13) == 0) {
   137b0:	220d      	movs	r2, #13
   137b2:	4912      	ldr	r1, [pc, #72]	; (137fc <JoystickController::mapNameToJoystickType(unsigned char const*)+0xac>)
   137b4:	4620      	mov	r0, r4
   137b6:	f008 fab5 	bl	1bd24 <strncmp>
   137ba:	b160      	cbz	r0, 137d6 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x86>
    } else if(strncmp((const char *)remoteName, "Joy-Con (R)", 11) == 0) {
   137bc:	220b      	movs	r2, #11
   137be:	4910      	ldr	r1, [pc, #64]	; (13800 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xb0>)
   137c0:	4620      	mov	r0, r4
   137c2:	f008 faaf 	bl	1bd24 <strncmp>
   137c6:	b130      	cbz	r0, 137d6 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x86>
    } else if(strncmp((const char *)remoteName, "Joy-Con (L)", 11) == 0) {
   137c8:	220b      	movs	r2, #11
   137ca:	490e      	ldr	r1, [pc, #56]	; (13804 <JoystickController::mapNameToJoystickType(unsigned char const*)+0xb4>)
   137cc:	4620      	mov	r0, r4
   137ce:	f008 faa9 	bl	1bd24 <strncmp>
   137d2:	2800      	cmp	r0, #0
   137d4:	d1c8      	bne.n	13768 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
        joystickType_ = SWITCH;
   137d6:	2307      	movs	r3, #7
   137d8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   137dc:	e7c4      	b.n	13768 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
        joystickType_ = XBOXONE;
   137de:	2303      	movs	r3, #3
   137e0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   137e4:	e7c0      	b.n	13768 <JoystickController::mapNameToJoystickType(unsigned char const*)+0x18>
   137e6:	bf00      	nop
   137e8:	20003af0 	.word	0x20003af0
   137ec:	20003b04 	.word	0x20003b04
   137f0:	20003b14 	.word	0x20003b14
   137f4:	20003b2c 	.word	0x20003b2c
   137f8:	20003b40 	.word	0x20003b40
   137fc:	20003b50 	.word	0x20003b50
   13800:	20003b60 	.word	0x20003b60
   13804:	20003b6c 	.word	0x20003b6c

00013808 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)>:
{
   13808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1380a:	4604      	mov	r4, r0
   1380c:	460d      	mov	r5, r1
    USBHDBGSerial.printf("JoystickController::claim_bluetooth - Class %x %s\n", bluetooth_class, remoteName);
   1380e:	4828      	ldr	r0, [pc, #160]	; (138b0 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xa8>)
{
   13810:	461e      	mov	r6, r3
    USBHDBGSerial.printf("JoystickController::claim_bluetooth - Class %x %s\n", bluetooth_class, remoteName);
   13812:	4928      	ldr	r1, [pc, #160]	; (138b4 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xac>)
{
   13814:	4617      	mov	r7, r2
    USBHDBGSerial.printf("JoystickController::claim_bluetooth - Class %x %s\n", bluetooth_class, remoteName);
   13816:	f002 f9ed 	bl	15bf4 <Print::printf(char const*, ...)>
    if (btconnect && (btconnection != btconnect)) return CLAIM_NO;
   1381a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1381c:	42ab      	cmp	r3, r5
   1381e:	d002      	beq.n	13826 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1e>
   13820:	b10b      	cbz	r3, 13826 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1e>
   13822:	2000      	movs	r0, #0
}
   13824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (mydevice != NULL) return CLAIM_NO;
   13826:	6960      	ldr	r0, [r4, #20]
   13828:	2800      	cmp	r0, #0
   1382a:	d1fa      	bne.n	13822 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1a>
    if ((bluetooth_class & 0x0f00) == 0x500) {
   1382c:	f407 6370 	and.w	r3, r7, #3840	; 0xf00
   13830:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   13834:	d1f6      	bne.n	13824 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x1c>
        bool name_maps_to_joystick_type = (remoteName && mapNameToJoystickType(remoteName));
   13836:	b32e      	cbz	r6, 13884 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x7c>
   13838:	4631      	mov	r1, r6
   1383a:	4620      	mov	r0, r4
   1383c:	f7ff ff88 	bl	13750 <JoystickController::mapNameToJoystickType(unsigned char const*)>
        if ((bluetooth_class & 0x3C) == 0x08) {
   13840:	f007 023c 	and.w	r2, r7, #60	; 0x3c
        bool name_maps_to_joystick_type = (remoteName && mapNameToJoystickType(remoteName));
   13844:	b930      	cbnz	r0, 13854 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x4c>
        if ((bluetooth_class & 0x3C) == 0x08) {
   13846:	2a08      	cmp	r2, #8
   13848:	d102      	bne.n	13850 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x48>
            if (claim_interface) {
   1384a:	9b06      	ldr	r3, [sp, #24]
   1384c:	2b01      	cmp	r3, #1
   1384e:	d01d      	beq.n	1388c <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x84>
        return CLAIM_REPORT; // let them know we may be interested if there is a HID REport Descriptor
   13850:	2001      	movs	r0, #1
}
   13852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((bluetooth_class & 0x3C) == 0x08) {
   13854:	2a08      	cmp	r2, #8
   13856:	d1fb      	bne.n	13850 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x48>
                switch (joystickType_) {
   13858:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1385c:	3b01      	subs	r3, #1
   1385e:	2b06      	cmp	r3, #6
   13860:	d8f3      	bhi.n	1384a <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x42>
   13862:	a201      	add	r2, pc, #4	; (adr r2, 13868 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x60>)
   13864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13868:	000138a7 	.word	0x000138a7
   1386c:	0001388d 	.word	0x0001388d
   13870:	0001388d 	.word	0x0001388d
   13874:	0001384b 	.word	0x0001384b
   13878:	000138a7 	.word	0x000138a7
   1387c:	0001384b 	.word	0x0001384b
   13880:	0001388d 	.word	0x0001388d
        if ((bluetooth_class & 0x3C) == 0x08) {
   13884:	f007 023c 	and.w	r2, r7, #60	; 0x3c
   13888:	2a08      	cmp	r2, #8
   1388a:	d1e1      	bne.n	13850 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x48>
                USBHDBGSerial.printf("JoystickController::claim_bluetooth Interface\n");
   1388c:	490a      	ldr	r1, [pc, #40]	; (138b8 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xb0>)
   1388e:	4808      	ldr	r0, [pc, #32]	; (138b0 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0xa8>)
   13890:	f002 f9b0 	bl	15bf4 <Print::printf(char const*, ...)>
                btdevice = (Device_t*)btconnect->btController_; // remember this way
   13894:	68a8      	ldr	r0, [r5, #8]
                btdriver_->useHIDProtocol(true);
   13896:	2101      	movs	r1, #1
                btdriver_ = btconnect->btController_;
   13898:	6360      	str	r0, [r4, #52]	; 0x34
                btdevice = (Device_t*)btconnect->btController_; // remember this way
   1389a:	e9c4 0509 	strd	r0, r5, [r4, #36]	; 0x24
                btdriver_->useHIDProtocol(true);
   1389e:	f7fc fa77 	bl	fd90 <BluetoothController::useHIDProtocol(bool)>
                return CLAIM_INTERFACE;
   138a2:	2002      	movs	r0, #2
}
   138a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        special_process_required = SP_PS3_IDS;      // PS3 maybe needs different IDS.
   138a6:	2304      	movs	r3, #4
   138a8:	f884 3020 	strb.w	r3, [r4, #32]
   138ac:	e7ee      	b.n	1388c <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)+0x84>
   138ae:	bf00      	nop
   138b0:	2000958c 	.word	0x2000958c
   138b4:	200039ec 	.word	0x200039ec
   138b8:	20003a20 	.word	0x20003a20

000138bc <non-virtual thunk to JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)>:
    virtual hidclaim_t claim_bluetooth(BluetoothConnection *btconnection, uint32_t bluetooth_class, uint8_t *remoteName, int type);
   138bc:	f1a0 0018 	sub.w	r0, r0, #24
   138c0:	f7ff bfa2 	b.w	13808 <JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)>

000138c4 <JoystickController::remoteNameComplete(unsigned char const*)>:
{
   138c4:	b510      	push	{r4, lr}
   138c6:	4604      	mov	r4, r0
    if (mapNameToJoystickType(remoteName)) {
   138c8:	f7ff ff42 	bl	13750 <JoystickController::mapNameToJoystickType(unsigned char const*)>
   138cc:	b138      	cbz	r0, 138de <JoystickController::remoteNameComplete(unsigned char const*)+0x1a>
        switch (joystickType_) {
   138ce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   138d2:	2b02      	cmp	r3, #2
   138d4:	d00a      	beq.n	138ec <JoystickController::remoteNameComplete(unsigned char const*)+0x28>
   138d6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   138da:	2b01      	cmp	r3, #1
   138dc:	d001      	beq.n	138e2 <JoystickController::remoteNameComplete(unsigned char const*)+0x1e>
}
   138de:	2001      	movs	r0, #1
   138e0:	bd10      	pop	{r4, pc}
        case PS3: special_process_required = SP_PS3_IDS; break;
   138e2:	2304      	movs	r3, #4
}
   138e4:	2001      	movs	r0, #1
        case PS3: special_process_required = SP_PS3_IDS; break;
   138e6:	f884 3020 	strb.w	r3, [r4, #32]
}
   138ea:	bd10      	pop	{r4, pc}
        case PS4: special_process_required = SP_NEED_CONNECT; break;
   138ec:	2301      	movs	r3, #1
}
   138ee:	2001      	movs	r0, #1
        case PS4: special_process_required = SP_NEED_CONNECT; break;
   138f0:	f884 3020 	strb.w	r3, [r4, #32]
}
   138f4:	bd10      	pop	{r4, pc}
   138f6:	bf00      	nop

000138f8 <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)>:
   138f8:	b510      	push	{r4, lr}
   138fa:	4604      	mov	r4, r0
   138fc:	3818      	subs	r0, #24
   138fe:	f7ff ff27 	bl	13750 <JoystickController::mapNameToJoystickType(unsigned char const*)>
   13902:	b130      	cbz	r0, 13912 <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)+0x1a>
   13904:	7d23      	ldrb	r3, [r4, #20]
   13906:	2b02      	cmp	r3, #2
   13908:	d009      	beq.n	1391e <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)+0x26>
   1390a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1390e:	2b01      	cmp	r3, #1
   13910:	d001      	beq.n	13916 <non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)+0x1e>
   13912:	2001      	movs	r0, #1
   13914:	bd10      	pop	{r4, pc}
   13916:	2304      	movs	r3, #4
   13918:	2001      	movs	r0, #1
   1391a:	7223      	strb	r3, [r4, #8]
   1391c:	bd10      	pop	{r4, pc}
   1391e:	2301      	movs	r3, #1
   13920:	2001      	movs	r0, #1
   13922:	7223      	strb	r3, [r4, #8]
   13924:	bd10      	pop	{r4, pc}
   13926:	bf00      	nop

00013928 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>:
    send_Control_packet_active_ = true;
    return driver_->sendControlPacket(0x21, 0x09, 0x0313, 0, sizeof(ps4_pair_msg), txbuf_);
}

//Nintendo Switch functions
void JoystickController::sw_sendCmd(uint8_t cmd, uint8_t *data, uint16_t size, uint32_t timeout) {
   13928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct SWProBTSendConfigData *packet =  (struct SWProBTSendConfigData *)txbuf_ ;
   1392c:	f200 48e4 	addw	r8, r0, #1252	; 0x4e4
void JoystickController::sw_sendCmd(uint8_t cmd, uint8_t *data, uint16_t size, uint32_t timeout) {
   13930:	b083      	sub	sp, #12
   13932:	4604      	mov	r4, r0
   13934:	460f      	mov	r7, r1
   13936:	4691      	mov	r9, r2
	memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   13938:	2100      	movs	r1, #0
   1393a:	2232      	movs	r2, #50	; 0x32
   1393c:	4640      	mov	r0, r8
void JoystickController::sw_sendCmd(uint8_t cmd, uint8_t *data, uint16_t size, uint32_t timeout) {
   1393e:	461e      	mov	r6, r3
   13940:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	memset((void*)packet, 0, sizeof(struct SWProBTSendConfigData));
   13942:	f008 f909 	bl	1bb58 <memset>
	packet->gpnum = switch_packet_num;
	switch_packet_num = (switch_packet_num + 1) & 0x0f;
	// 2-9 rumble data;
	packet->rumbleDataL[0] = 0x00;
	packet->rumbleDataL[1] = 0x01;
	packet->rumbleDataL[2] = 0x40;
   13946:	2340      	movs	r3, #64	; 0x40
	packet->gpnum = switch_packet_num;
   13948:	4a2a      	ldr	r2, [pc, #168]	; (139f4 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xcc>)
	packet->rumbleDataL[2] = 0x40;
   1394a:	f884 34e9 	strb.w	r3, [r4, #1257]	; 0x4e9
	packet->rumbleDataL[3] = 0x40;
   1394e:	f884 34ea 	strb.w	r3, [r4, #1258]	; 0x4ea
	packet->rumbleDataR[0] = 0x00;
	packet->rumbleDataR[1] = 0x01;
	packet->rumbleDataR[2] = 0x40;
   13952:	f884 34ed 	strb.w	r3, [r4, #1261]	; 0x4ed
	packet->rumbleDataR[3] = 0x40;
   13956:	f884 34ee 	strb.w	r3, [r4, #1262]	; 0x4ee
	packet->gpnum = switch_packet_num;
   1395a:	7813      	ldrb	r3, [r2, #0]

	packet->subCommand = cmd; // Report ID
   1395c:	f884 74ef 	strb.w	r7, [r4, #1263]	; 0x4ef
	packet->gpnum = switch_packet_num;
   13960:	f884 34e6 	strb.w	r3, [r4, #1254]	; 0x4e6
	switch_packet_num = (switch_packet_num + 1) & 0x0f;
   13964:	3301      	adds	r3, #1
   13966:	f003 030f 	and.w	r3, r3, #15
   1396a:	7013      	strb	r3, [r2, #0]
	packet->id = 1; 
   1396c:	2301      	movs	r3, #1
   1396e:	f884 34e5 	strb.w	r3, [r4, #1253]	; 0x4e5
	packet->rumbleDataL[1] = 0x01;
   13972:	f884 34e8 	strb.w	r3, [r4, #1256]	; 0x4e8
	packet->rumbleDataR[1] = 0x01;
   13976:	f884 34ec 	strb.w	r3, [r4, #1260]	; 0x4ec
	packet->rumbleDataL[0] = 0x00;
   1397a:	2300      	movs	r3, #0
   1397c:	f884 34e7 	strb.w	r3, [r4, #1255]	; 0x4e7
	packet->rumbleDataR[0] = 0x00;
   13980:	f884 34eb 	strb.w	r3, [r4, #1259]	; 0x4eb
	packet->hid_hdr = 0xA2; // HID BT Get_report (0xA0) | Report Type (Output)
   13984:	23a2      	movs	r3, #162	; 0xa2
   13986:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
	for(uint16_t i = 0; i < size; i++) {
   1398a:	b166      	cbz	r6, 139a6 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x7e>
   1398c:	1e73      	subs	r3, r6, #1
   1398e:	f109 3cff 	add.w	ip, r9, #4294967295	; 0xffffffff
   13992:	f204 40ef 	addw	r0, r4, #1263	; 0x4ef
   13996:	fa19 f383 	uxtah	r3, r9, r3
		packet->subCommandData[i] = data[i];
   1399a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
	for(uint16_t i = 0; i < size; i++) {
   1399e:	459c      	cmp	ip, r3
		packet->subCommandData[i] = data[i];
   139a0:	f800 ef01 	strb.w	lr, [r0, #1]!
	for(uint16_t i = 0; i < size; i++) {
   139a4:	d1f9      	bne.n	1399a <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x72>
	}
	if (btdriver_) {
   139a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
   139a8:	b1a8      	cbz	r0, 139d6 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xae>
        if (timeout != 0) {
   139aa:	b965      	cbnz	r5, 139c6 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x9e>
            btconnect->startTimer(timeout);
        }
        btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   139ac:	f06f 0301 	mvn.w	r3, #1
   139b0:	2232      	movs	r2, #50	; 0x32
   139b2:	4641      	mov	r1, r8
   139b4:	f7fc f99a 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
   139b8:	f002 faf6 	bl	15fa8 <micros>
   139bc:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    }
    else Serial.printf("\n####### sw_sendCMD(%x %p %u) called with btdriver_ == 0 ", cmd, data, size);
    em_sw_ = 0;
}
   139c0:	b003      	add	sp, #12
   139c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    void parse(void);
    void parse(uint16_t type_and_report_id, const uint8_t *data, uint32_t len);
    BTHIDInput * find_driver(uint32_t topusage);
    BTHIDInput * find_driver(const uint8_t *remoteName, int type);

    void startTimer(uint32_t microseconds) {bt_connection_timer_.start(microseconds);}
   139c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   139c8:	4629      	mov	r1, r5
   139ca:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   139ce:	f7fc fab9 	bl	ff44 <USBDriverTimer::start(unsigned long)>
        btdriver_->sendL2CapCommand((uint8_t *)packet, sizeof(struct SWProBTSendConfigData), BluetoothController::INTERRUPT_SCID /*0x40*/);
   139d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   139d4:	e7ea      	b.n	139ac <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0x84>
    else Serial.printf("\n####### sw_sendCMD(%x %p %u) called with btdriver_ == 0 ", cmd, data, size);
   139d6:	464b      	mov	r3, r9
   139d8:	463a      	mov	r2, r7
   139da:	4907      	ldr	r1, [pc, #28]	; (139f8 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xd0>)
   139dc:	9600      	str	r6, [sp, #0]
   139de:	4807      	ldr	r0, [pc, #28]	; (139fc <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)+0xd4>)
   139e0:	f002 f908 	bl	15bf4 <Print::printf(char const*, ...)>
   139e4:	f002 fae0 	bl	15fa8 <micros>
   139e8:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
}
   139ec:	b003      	add	sp, #12
   139ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   139f2:	bf00      	nop
   139f4:	2000fc34 	.word	0x2000fc34
   139f8:	200039b0 	.word	0x200039b0
   139fc:	2000958c 	.word	0x2000958c

00013a00 <JoystickController::connectionComplete()>:
    switch (joystickType_) {
   13a00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    connectedComplete_pending_ = 0;
   13a04:	2200      	movs	r2, #0
    switch (joystickType_) {
   13a06:	3b01      	subs	r3, #1
{
   13a08:	b530      	push	{r4, r5, lr}
   13a0a:	4604      	mov	r4, r0
   13a0c:	b085      	sub	sp, #20
    connectedComplete_pending_ = 0;
   13a0e:	f880 216d 	strb.w	r2, [r0, #365]	; 0x16d
    switch (joystickType_) {
   13a12:	2b06      	cmp	r3, #6
   13a14:	d814      	bhi.n	13a40 <JoystickController::connectionComplete()+0x40>
   13a16:	e8df f003 	tbb	[pc, r3]
   13a1a:	2b04      	.short	0x2b04
   13a1c:	13231313 	.word	0x13231313
   13a20:	15          	.byte	0x15
   13a21:	00          	.byte	0x00
        packet[0] = 0x53; // HID BT Set_report (0x50) | Report Type (Feature 0x03)
   13a22:	4a1b      	ldr	r2, [pc, #108]	; (13a90 <JoystickController::connectionComplete()+0x90>)
        packet[4] = 0x00;
   13a24:	2300      	movs	r3, #0
        delay(1);
   13a26:	2001      	movs	r0, #1
        packet[0] = 0x53; // HID BT Set_report (0x50) | Report Type (Feature 0x03)
   13a28:	9202      	str	r2, [sp, #8]
        packet[4] = 0x00;
   13a2a:	f8ad 300c 	strh.w	r3, [sp, #12]
        delay(1);
   13a2e:	f002 fa67 	bl	15f00 <delay>
        btdriver_->sendL2CapCommand(packet, sizeof(packet), BluetoothController::CONTROL_SCID);
   13a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a36:	2206      	movs	r2, #6
   13a38:	a902      	add	r1, sp, #8
   13a3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   13a3c:	f7fc f956 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
}
   13a40:	b005      	add	sp, #20
   13a42:	bd30      	pop	{r4, r5, pc}
		sw_sendCmd(0x02, packet_, 1, SW_CMD_TIMEOUT);
   13a44:	4913      	ldr	r1, [pc, #76]	; (13a94 <JoystickController::connectionComplete()+0x94>)
		packet_[0] = 0x00;
   13a46:	2500      	movs	r5, #0
		sw_sendCmd(0x02, packet_, 1, SW_CMD_TIMEOUT);
   13a48:	2301      	movs	r3, #1
   13a4a:	aa02      	add	r2, sp, #8
   13a4c:	9100      	str	r1, [sp, #0]
   13a4e:	2102      	movs	r1, #2
		packet_[0] = 0x00;
   13a50:	f88d 5008 	strb.w	r5, [sp, #8]
		sw_sendCmd(0x02, packet_, 1, SW_CMD_TIMEOUT);
   13a54:	f7ff ff68 	bl	13928 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
        connectedComplete_pending_ = 0;
   13a58:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
}
   13a5c:	b005      	add	sp, #20
   13a5e:	bd30      	pop	{r4, r5, pc}
        setLEDs(0, 0xff, 0);    // Maybe try setting to green?
   13a60:	2300      	movs	r3, #0
   13a62:	22ff      	movs	r2, #255	; 0xff
   13a64:	4619      	mov	r1, r3
}
   13a66:	b005      	add	sp, #20
   13a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        setLEDs(0, 0xff, 0);    // Maybe try setting to green?
   13a6c:	f7ff bc06 	b.w	1327c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
        packet[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
   13a70:	f240 2343 	movw	r3, #579	; 0x243
        delay(1);
   13a74:	2001      	movs	r0, #1
        packet[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
   13a76:	f8ad 3008 	strh.w	r3, [sp, #8]
        delay(1);
   13a7a:	f002 fa41 	bl	15f00 <delay>
        btdriver_->sendL2CapCommand(packet, sizeof(packet), BluetoothController::CONTROL_SCID /*0x40*/);
   13a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a82:	2202      	movs	r2, #2
   13a84:	a902      	add	r1, sp, #8
   13a86:	6b60      	ldr	r0, [r4, #52]	; 0x34
   13a88:	f7fc f930 	bl	fcec <BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)>
}
   13a8c:	b005      	add	sp, #20
   13a8e:	bd30      	pop	{r4, r5, pc}
   13a90:	0342f453 	.word	0x0342f453
   13a94:	0003d090 	.word	0x0003d090

00013a98 <non-virtual thunk to JoystickController::connectionComplete()>:
    virtual void connectionComplete(void);
   13a98:	f1a0 0018 	sub.w	r0, r0, #24
   13a9c:	f7ff bfb0 	b.w	13a00 <JoystickController::connectionComplete()>

00013aa0 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>:

void JoystickController::sw_sendCmdUSB(uint8_t cmd, uint32_t timeout) {
   13aa0:	b510      	push	{r4, lr}
    DBGPrintf("sw_sendCmdUSB: cmd:%x, timeout:%x\n",  cmd, timeout);
	//sub-command
    txbuf_[0] = 0x80;
   13aa2:	f04f 0c80 	mov.w	ip, #128	; 0x80
void JoystickController::sw_sendCmdUSB(uint8_t cmd, uint32_t timeout) {
   13aa6:	4604      	mov	r4, r0
	txbuf_[1] = cmd;
    sw_last_cmd_sent_ = cmd; // remember which command we sent
	if(driver_) {
   13aa8:	6b00      	ldr	r0, [r0, #48]	; 0x30
    txbuf_[0] = 0x80;
   13aaa:	f884 c4e4 	strb.w	ip, [r4, #1252]	; 0x4e4
	txbuf_[1] = cmd;
   13aae:	f884 14e5 	strb.w	r1, [r4, #1253]	; 0x4e5
    sw_last_cmd_sent_ = cmd; // remember which command we sent
   13ab2:	f884 116e 	strb.w	r1, [r4, #366]	; 0x16e
	if(driver_) {
   13ab6:	b188      	cbz	r0, 13adc <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x3c>
        if (timeout != 0) {
   13ab8:	b94a      	cbnz	r2, 13ace <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x2e>
            driver_->startTimer(timeout);
        }
		driver_->sendPacket(txbuf_, 2);
   13aba:	2202      	movs	r2, #2
   13abc:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13ac0:	f7fd fdda 	bl	11678 <USBHIDParser::sendPacket(unsigned char const*, int)>
   13ac4:	f002 fa70 	bl	15fa8 <micros>
   13ac8:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
	} else {
		if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 18, this, __LINE__)) {
			println("switch transfer fail");
		}
	}
}
   13acc:	bd10      	pop	{r4, pc}
    void startTimer(uint32_t microseconds) {hidTimer.start(microseconds);}
   13ace:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   13ad2:	4611      	mov	r1, r2
   13ad4:	f7fc fa36 	bl	ff44 <USBDriverTimer::start(unsigned long)>
		driver_->sendPacket(txbuf_, 2);
   13ad8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   13ada:	e7ee      	b.n	13aba <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x1a>
		if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 18, this, __LINE__)) {
   13adc:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   13ae0:	2800      	cmp	r0, #0
   13ae2:	d0f3      	beq.n	13acc <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)+0x2c>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   13ae4:	4623      	mov	r3, r4
   13ae6:	f204 41e4 	addw	r1, r4, #1252	; 0x4e4
   13aea:	2212      	movs	r2, #18
}
   13aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return queue_Data_Transfer(pipe, buffer, len, driver);
   13af0:	f7fc bbcc 	b.w	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>

00013af4 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)>:
{
   13af4:	b570      	push	{r4, r5, r6, lr}
    if (topusage != 0x10004 && topusage != 0x10005 && topusage != 0x10008) return CLAIM_NO;
   13af6:	4c40      	ldr	r4, [pc, #256]	; (13bf8 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x104>)
{
   13af8:	b082      	sub	sp, #8
   13afa:	4605      	mov	r5, r0
    if (topusage != 0x10004 && topusage != 0x10005 && topusage != 0x10008) return CLAIM_NO;
   13afc:	441c      	add	r4, r3
   13afe:	2c01      	cmp	r4, #1
   13b00:	d905      	bls.n	13b0e <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x1a>
   13b02:	483e      	ldr	r0, [pc, #248]	; (13bfc <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x108>)
   13b04:	4283      	cmp	r3, r0
   13b06:	d002      	beq.n	13b0e <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x1a>
   13b08:	2000      	movs	r0, #0
}
   13b0a:	b002      	add	sp, #8
   13b0c:	bd70      	pop	{r4, r5, r6, pc}
    if (mydevice != NULL && dev != mydevice) return CLAIM_NO;
   13b0e:	696b      	ldr	r3, [r5, #20]
   13b10:	4293      	cmp	r3, r2
   13b12:	d001      	beq.n	13b18 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x24>
   13b14:	2b00      	cmp	r3, #0
   13b16:	d1f7      	bne.n	13b08 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x14>
    if (device != nullptr) return CLAIM_NO;
   13b18:	68ac      	ldr	r4, [r5, #8]
   13b1a:	2c00      	cmp	r4, #0
   13b1c:	d1f4      	bne.n	13b08 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x14>
    collections_claimed++;
   13b1e:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
    anychange = true; // always report values on first read
   13b22:	2601      	movs	r6, #1
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13b24:	4608      	mov	r0, r1
    mydevice = dev;
   13b26:	616a      	str	r2, [r5, #20]
    collections_claimed++;
   13b28:	3301      	adds	r3, #1
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13b2a:	4622      	mov	r2, r4
    driver_ = driver;   // remember the driver.
   13b2c:	6329      	str	r1, [r5, #48]	; 0x30
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13b2e:	f205 41e4 	addw	r1, r5, #1252	; 0x4e4
   13b32:	e9cd 4400 	strd	r4, r4, [sp]
    collections_claimed++;
   13b36:	f885 3174 	strb.w	r3, [r5, #372]	; 0x174
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13b3a:	2340      	movs	r3, #64	; 0x40
    anychange = true; // always report values on first read
   13b3c:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    driver_->setTXBuffers(txbuf_, nullptr, sizeof(txbuf_));
   13b40:	f7fd fe00 	bl	11744 <USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)>
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13b44:	696b      	ldr	r3, [r5, #20]
    connected_ = true;      // remember that hardware is actually connected...
   13b46:	f885 616c 	strb.w	r6, [r5, #364]	; 0x16c
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13b4a:	4622      	mov	r2, r4
   13b4c:	4e2c      	ldr	r6, [pc, #176]	; (13c00 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x10c>)
   13b4e:	8bd8      	ldrh	r0, [r3, #30]
   13b50:	8c1c      	ldrh	r4, [r3, #32]
    for (uint8_t i = 0; i < (sizeof(pid_vid_mapping) / sizeof(pid_vid_mapping[0])); i++) {
   13b52:	4633      	mov	r3, r6
   13b54:	e003      	b.n	13b5e <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x6a>
   13b56:	3201      	adds	r2, #1
   13b58:	3306      	adds	r3, #6
   13b5a:	2a0f      	cmp	r2, #15
   13b5c:	d015      	beq.n	13b8a <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x96>
        if ((idVendor == pid_vid_mapping[i].idVendor) && (idProduct == pid_vid_mapping[i].idProduct)) {
   13b5e:	8819      	ldrh	r1, [r3, #0]
   13b60:	4281      	cmp	r1, r0
   13b62:	d1f8      	bne.n	13b56 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x62>
   13b64:	8859      	ldrh	r1, [r3, #2]
   13b66:	42a1      	cmp	r1, r4
   13b68:	d1f5      	bne.n	13b56 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x62>
            return pid_vid_mapping[i].joyType;
   13b6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13b6e:	eb06 0642 	add.w	r6, r6, r2, lsl #1
   13b72:	7932      	ldrb	r2, [r6, #4]
    switch (joystickType_) {
   13b74:	1e53      	subs	r3, r2, #1
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13b76:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
    switch (joystickType_) {
   13b7a:	2b06      	cmp	r3, #6
   13b7c:	d808      	bhi.n	13b90 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x9c>
   13b7e:	e8df f003 	tbb	[pc, r3]
   13b82:	311c      	.short	0x311c
   13b84:	071c0707 	.word	0x071c0707
   13b88:	25          	.byte	0x25
   13b89:	00          	.byte	0x00
    joystickType_ = mapVIDPIDtoJoystickType(mydevice->idVendor, mydevice->idProduct, false);
   13b8a:	2300      	movs	r3, #0
   13b8c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    default:
   13b90:	2409      	movs	r4, #9
   13b92:	2121      	movs	r1, #33	; 0x21
   13b94:	2005      	movs	r0, #5
   13b96:	f240 32ff 	movw	r2, #1023	; 0x3ff
   13b9a:	2300      	movs	r3, #0
        additional_axis_usage_start_ = 0x100;
   13b9c:	f8a5 1162 	strh.w	r1, [r5, #354]	; 0x162
        additional_axis_usage_count_ = 39;
   13ba0:	f8a5 0164 	strh.w	r0, [r5, #356]	; 0x164
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   13ba4:	4917      	ldr	r1, [pc, #92]	; (13c04 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x110>)
        additional_axis_usage_page_ = 0x1;
   13ba6:	f8a5 4160 	strh.w	r4, [r5, #352]	; 0x160
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   13baa:	4817      	ldr	r0, [pc, #92]	; (13c08 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x114>)
        axis_change_notify_mask_ = (uint64_t) - 1;  // Start off assume all bits
   13bac:	e9c5 2356 	strd	r2, r3, [r5, #344]	; 0x158
    USBHDBGSerial.printf("\tJoystickController claim collection\n");
   13bb0:	f002 f820 	bl	15bf4 <Print::printf(char const*, ...)>
   13bb4:	2001      	movs	r0, #1
}
   13bb6:	b002      	add	sp, #8
   13bb8:	bd70      	pop	{r4, r5, r6, pc}
    switch (joystickType_) {
   13bba:	2401      	movs	r4, #1
   13bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
   13bc0:	2027      	movs	r0, #39	; 0x27
   13bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bca:	e7e7      	b.n	13b9c <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0xa8>
            sw_sendCmdUSB(0x02, SW_CMD_TIMEOUT);
   13bcc:	4a0f      	ldr	r2, [pc, #60]	; (13c0c <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x118>)
   13bce:	2102      	movs	r1, #2
   13bd0:	4628      	mov	r0, r5
   13bd2:	f7ff ff65 	bl	13aa0 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
            initialPass_ = true;
   13bd6:	2201      	movs	r2, #1
            connectedComplete_pending_ = 0;
   13bd8:	2300      	movs	r3, #0
            initialPass_ = true;
   13bda:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
            connectedComplete_pending_ = 0;
   13bde:	f885 316d 	strb.w	r3, [r5, #365]	; 0x16d
   13be2:	e7d5      	b.n	13b90 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0x9c>
    switch (joystickType_) {
   13be4:	f44f 447f 	mov.w	r4, #65280	; 0xff00
   13be8:	2121      	movs	r1, #33	; 0x21
   13bea:	2036      	movs	r0, #54	; 0x36
   13bec:	f46f 6240 	mvn.w	r2, #3072	; 0xc00
   13bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bf4:	e7d2      	b.n	13b9c <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)+0xa8>
   13bf6:	bf00      	nop
   13bf8:	fffefffc 	.word	0xfffefffc
   13bfc:	00010008 	.word	0x00010008
   13c00:	20009978 	.word	0x20009978
   13c04:	20003a9c 	.word	0x20003a9c
   13c08:	2000958c 	.word	0x2000958c
   13c0c:	0003d090 	.word	0x0003d090

00013c10 <non-virtual thunk to JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)>:
    virtual hidclaim_t claim_collection(USBHIDParser *driver, Device_t *dev, uint32_t topusage);
   13c10:	f1a0 000c 	sub.w	r0, r0, #12
   13c14:	f7ff bf6e 	b.w	13af4 <JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)>

00013c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>:

void JoystickController::sw_sendSubCmdUSB(uint8_t sub_cmd, uint8_t *data, uint8_t size, uint32_t timeout) {
   13c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        DBGPrintf("sw_sendSubCmdUSB(%x, %p, %u): ",  sub_cmd, size);
        for (uint8_t i = 0; i < size; i++) DBGPrintf(" %02x", data[i]);
        DBGPrintf("\n");
        memset(txbuf_, 0, 32);  // make sure it is cleared out
   13c1c:	f200 46e4 	addw	r6, r0, #1252	; 0x4e4
void JoystickController::sw_sendSubCmdUSB(uint8_t sub_cmd, uint8_t *data, uint8_t size, uint32_t timeout) {
   13c20:	4605      	mov	r5, r0
   13c22:	4689      	mov	r9, r1
   13c24:	4614      	mov	r4, r2
        memset(txbuf_, 0, 32);  // make sure it is cleared out
   13c26:	2100      	movs	r1, #0
   13c28:	2220      	movs	r2, #32
   13c2a:	4630      	mov	r0, r6
void JoystickController::sw_sendSubCmdUSB(uint8_t sub_cmd, uint8_t *data, uint8_t size, uint32_t timeout) {
   13c2c:	4698      	mov	r8, r3
   13c2e:	9f08      	ldr	r7, [sp, #32]
        memset(txbuf_, 0, 32);  // make sure it is cleared out
   13c30:	f007 ff92 	bl	1bb58 <memset>

		txbuf_[0] = 0x01;
        // Now add in subcommand data:
        // Probably do this better soon
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13c34:	4929      	ldr	r1, [pc, #164]	; (13cdc <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0xc4>)
		txbuf_[0] = 0x01;
   13c36:	2301      	movs	r3, #1
        txbuf_[ 6] = 0x00;
        txbuf_[ 7] = 0x01;
        txbuf_[ 8] = 0x40;
        txbuf_[ 9] = 0x40;
		
		txbuf_[ 10] = sub_cmd;
   13c38:	f885 94ee 	strb.w	r9, [r5, #1262]	; 0x4ee
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13c3c:	780a      	ldrb	r2, [r1, #0]
		txbuf_[0] = 0x01;
   13c3e:	f885 34e4 	strb.w	r3, [r5, #1252]	; 0x4e4
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13c42:	441a      	add	r2, r3
        txbuf_[ 3] = 0x01;
   13c44:	f885 34e7 	strb.w	r3, [r5, #1255]	; 0x4e7
        txbuf_[ 7] = 0x01;
   13c48:	f885 34eb 	strb.w	r3, [r5, #1259]	; 0x4eb
        txbuf_[ 4] = 0x40;
   13c4c:	f244 0340 	movw	r3, #16448	; 0x4040
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13c50:	f002 020f 	and.w	r2, r2, #15
        txbuf_[ 4] = 0x40;
   13c54:	f8a5 34e8 	strh.w	r3, [r5, #1256]	; 0x4e8
        txbuf_[ 1] = switch_packet_num = (switch_packet_num + 1) & 0x0f; //
   13c58:	700a      	strb	r2, [r1, #0]
   13c5a:	f885 24e5 	strb.w	r2, [r5, #1253]	; 0x4e5
        txbuf_[ 8] = 0x40;
   13c5e:	f8a5 34ec 	strh.w	r3, [r5, #1260]	; 0x4ec
		
		//sub-command
		for(uint16_t i = 0; i < size; i++) {
   13c62:	f1b8 0f00 	cmp.w	r8, #0
   13c66:	d00d      	beq.n	13c84 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x6c>
   13c68:	fa1f f288 	uxth.w	r2, r8
   13c6c:	f205 41ee 	addw	r1, r5, #1262	; 0x4ee
   13c70:	1e53      	subs	r3, r2, #1
   13c72:	1e62      	subs	r2, r4, #1
   13c74:	fa14 f383 	uxtah	r3, r4, r3
			txbuf_[i + 11] = data[i];
   13c78:	f812 4f01 	ldrb.w	r4, [r2, #1]!
		for(uint16_t i = 0; i < size; i++) {
   13c7c:	429a      	cmp	r2, r3
			txbuf_[i + 11] = data[i];
   13c7e:	f801 4f01 	strb.w	r4, [r1, #1]!
		for(uint16_t i = 0; i < size; i++) {
   13c82:	d1f9      	bne.n	13c78 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x60>
		}

		println("USB send sub cmd: driver? ", (uint32_t)driver_, HEX);
   13c84:	6b28      	ldr	r0, [r5, #48]	; 0x30
		print_hexbytes((uint8_t*)txbuf_, 32);
		
		if(driver_) {
   13c86:	b168      	cbz	r0, 13ca4 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x8c>
			driver_->sendPacket(txbuf_, 32);
   13c88:	2220      	movs	r2, #32
   13c8a:	4631      	mov	r1, r6
   13c8c:	f7fd fcf4 	bl	11678 <USBHIDParser::sendPacket(unsigned char const*, int)>
            if (timeout != 0) {
   13c90:	b9c7      	cbnz	r7, 13cc4 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0xac>
   13c92:	f002 f989 	bl	15fa8 <micros>
   13c96:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
			if (!queue_Data_Transfer_Debug(txpipe_, txbuf_, 32, this, __LINE__)) {
				println("switch transfer fail");
			}
		}
        em_sw_ = 0;
		if (!timeout) delay(100);
   13c9a:	2064      	movs	r0, #100	; 0x64
}
   13c9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if (!timeout) delay(100);
   13ca0:	f002 b92e 	b.w	15f00 <delay>
		} else if (txpipe_) {
   13ca4:	f8d5 04a0 	ldr.w	r0, [r5, #1184]	; 0x4a0
   13ca8:	b120      	cbz	r0, 13cb4 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x9c>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   13caa:	462b      	mov	r3, r5
   13cac:	4631      	mov	r1, r6
   13cae:	2220      	movs	r2, #32
   13cb0:	f7fc faec 	bl	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
   13cb4:	f002 f978 	bl	15fa8 <micros>
   13cb8:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
		if (!timeout) delay(100);
   13cbc:	2f00      	cmp	r7, #0
   13cbe:	d0ec      	beq.n	13c9a <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)+0x82>
}
   13cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void startTimer(uint32_t microseconds) {hidTimer.start(microseconds);}
   13cc4:	6b28      	ldr	r0, [r5, #48]	; 0x30
   13cc6:	4639      	mov	r1, r7
   13cc8:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   13ccc:	f7fc f93a 	bl	ff44 <USBDriverTimer::start(unsigned long)>
   13cd0:	f002 f96a 	bl	15fa8 <micros>
   13cd4:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
   13cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13cdc:	2000fc34 	.word	0x2000fc34

00013ce0 <JoystickController::sw_parseAckMsg(unsigned char const*)>:
	int16_t data[6];
	uint8_t offset = 20;
	uint8_t icount = 0;
	//uint8_t packet_[8];
	
	if((buf_[14] == 0x10 && buf_[15] == 0x20 && buf_[16] == 0x60)) {
   13ce0:	7b8b      	ldrb	r3, [r1, #14]
   13ce2:	2b10      	cmp	r3, #16
   13ce4:	d000      	beq.n	13ce8 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x8>
   13ce6:	4770      	bx	lr
{
   13ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((buf_[14] == 0x10 && buf_[15] == 0x20 && buf_[16] == 0x60)) {
   13cec:	7bcb      	ldrb	r3, [r1, #15]
   13cee:	2b20      	cmp	r3, #32
   13cf0:	f000 809a 	beq.w	13e28 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x148>
		}
		for(uint8_t i = 0; i < 3; i++) {
			DBGPrintf("\t %d, %d, %d, %d\n", SWIMUCal.acc_offset[i], SWIMUCal.acc_sensitivity[i],
				SWIMUCal.gyro_offset[i], SWIMUCal.gyro_sensitivity[i]);
		} 
	} else if((buf_[14] == 0x10 && buf_[15] == 0x80 && buf_[16] == 0x60)) {
   13cf4:	2b80      	cmp	r3, #128	; 0x80
   13cf6:	d011      	beq.n	13d1c <JoystickController::sw_parseAckMsg(unsigned char const*)+0x3c>
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[i+offset] | (buf_[i+offset+1] << 8));
		}
		for(uint8_t i = 0; i < 3; i++) {
			DBGPrintf("\t %d\n", SWIMUCal.acc_offset[i]);
		}
	} else if((buf_[14] == 0x10 && buf_[15] == 0x3D && buf_[16] == 0x60)){		//left stick
   13cf8:	2b3d      	cmp	r3, #61	; 0x3d
   13cfa:	d020      	beq.n	13d3e <JoystickController::sw_parseAckMsg(unsigned char const*)+0x5e>
		
		DBGPrintf("\nRight Stick Calibrataion\n");
		DBGPrintf("center: %d, %d\n", SWStickCal.rstick_center_x, SWStickCal.rstick_center_y );
		DBGPrintf("min/max x: %d, %d\n", SWStickCal.rstick_x_min, SWStickCal.rstick_x_max);
		DBGPrintf("min/max y: %d, %d\n", SWStickCal.rstick_y_min, SWStickCal.rstick_y_max);
	}  else if((buf_[14] == 0x10 && buf_[15] == 0x86 && buf_[16] == 0x60)){			//left stick deadzone_left
   13cfc:	2b86      	cmp	r3, #134	; 0x86
   13cfe:	f040 80bf 	bne.w	13e80 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1a0>
   13d02:	7c0b      	ldrb	r3, [r1, #16]
   13d04:	2b60      	cmp	r3, #96	; 0x60
   13d06:	d107      	bne.n	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
		offset = 20;
		SWStickCal.deadzone_left = (((buf_[4 + offset] << 8) & 0xF00) | buf_[3 + offset]);
   13d08:	7e0b      	ldrb	r3, [r1, #24]
   13d0a:	7dca      	ldrb	r2, [r1, #23]
   13d0c:	021b      	lsls	r3, r3, #8
   13d0e:	495e      	ldr	r1, [pc, #376]	; (13e88 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1a8>)
   13d10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   13d14:	4313      	orrs	r3, r2
   13d16:	830b      	strh	r3, [r1, #24]
		DBGPrintf("deadzone: %d\n", SWStickCal.deadzone_right);
	} else if((buf_[14] == 0x10 && buf_[15] == 0x10 && buf_[16] == 0x80)){
		DBGPrintf("\nUser Calibration Rcvd!\n");
	}
	
}
   13d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if((buf_[14] == 0x10 && buf_[15] == 0x80 && buf_[16] == 0x60)) {
   13d1c:	7c0b      	ldrb	r3, [r1, #16]
   13d1e:	2b60      	cmp	r3, #96	; 0x60
   13d20:	d1fa      	bne.n	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
   13d22:	f101 0314 	add.w	r3, r1, #20
   13d26:	4859      	ldr	r0, [pc, #356]	; (13e8c <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1ac>)
   13d28:	3117      	adds	r1, #23
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[i+offset] | (buf_[i+offset+1] << 8));
   13d2a:	781a      	ldrb	r2, [r3, #0]
   13d2c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   13d30:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
		for(uint8_t i = 0; i < 3; i++) {
   13d34:	4299      	cmp	r1, r3
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[i+offset] | (buf_[i+offset+1] << 8));
   13d36:	f820 2b02 	strh.w	r2, [r0], #2
		for(uint8_t i = 0; i < 3; i++) {
   13d3a:	d1f6      	bne.n	13d2a <JoystickController::sw_parseAckMsg(unsigned char const*)+0x4a>
   13d3c:	e7ec      	b.n	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
	} else if((buf_[14] == 0x10 && buf_[15] == 0x3D && buf_[16] == 0x60)){		//left stick
   13d3e:	7c0b      	ldrb	r3, [r1, #16]
   13d40:	2b60      	cmp	r3, #96	; 0x60
   13d42:	d1e9      	bne.n	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13d44:	7e0c      	ldrb	r4, [r1, #24]
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13d46:	7d4b      	ldrb	r3, [r1, #21]
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13d48:	ea4f 2b04 	mov.w	fp, r4, lsl #8
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13d4c:	f891 c01b 	ldrb.w	ip, [r1, #27]
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13d50:	f891 9017 	ldrb.w	r9, [r1, #23]
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13d54:	ea4f 1e13 	mov.w	lr, r3, lsr #4
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13d58:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13d5c:	7d88      	ldrb	r0, [r1, #22]
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13d5e:	ea4f 270c 	mov.w	r7, ip, lsl #8
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13d62:	f891 8014 	ldrb.w	r8, [r1, #20]
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13d66:	ea49 090b 	orr.w	r9, r9, fp
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13d6a:	0924      	lsrs	r4, r4, #4
   13d6c:	f891 b019 	ldrb.w	fp, [r1, #25]
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13d70:	ea4e 1e00 	orr.w	lr, lr, r0, lsl #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13d74:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13d78:	7f88      	ldrb	r0, [r1, #30]
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13d7a:	ea44 140b 	orr.w	r4, r4, fp, lsl #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13d7e:	f891 b01a 	ldrb.w	fp, [r1, #26]
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13d82:	021a      	lsls	r2, r3, #8
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13d84:	0206      	lsls	r6, r0, #8
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13d86:	ea4b 0707 	orr.w	r7, fp, r7
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13d8a:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   13d8e:	f891 b01c 	ldrb.w	fp, [r1, #28]
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13d92:	f402 6370 	and.w	r3, r2, #3840	; 0xf00
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13d96:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13d9a:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13d9e:	ea4c 1c0b 	orr.w	ip, ip, fp, lsl #4
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13da2:	f891 b01d 	ldrb.w	fp, [r1, #29]
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13da6:	0900      	lsrs	r0, r0, #4
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13da8:	0215      	lsls	r5, r2, #8
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13daa:	ea48 0803 	orr.w	r8, r8, r3
		data[0] = ((buf_[1+offset] << 8) & 0xF00) | buf_[0+offset];
   13dae:	ea4b 0606 	orr.w	r6, fp, r6
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13db2:	f891 b01f 	ldrb.w	fp, [r1, #31]
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13db6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13dba:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
		data[1] = (buf_[2+offset] << 4) | (buf_[1+offset] >> 4);
   13dbe:	ea40 100b 	orr.w	r0, r0, fp, lsl #4
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13dc2:	f891 b020 	ldrb.w	fp, [r1, #32]
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13dc6:	ea4f 2a03 	mov.w	sl, r3, lsl #8
		SWStickCal.lstick_x_min = SWStickCal.lstick_center_x - data[0];
   13dca:	eba9 0808 	sub.w	r8, r9, r8
		data[2] = ((buf_[4+offset] << 8) & 0xF00) | buf_[3+offset];
   13dce:	ea4b 0505 	orr.w	r5, fp, r5
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13dd2:	0912      	lsrs	r2, r2, #4
   13dd4:	f891 b022 	ldrb.w	fp, [r1, #34]	; 0x22
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13dd8:	091b      	lsrs	r3, r3, #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13dda:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
		SWStickCal.lstick_y_min = SWStickCal.lstick_center_y - data[1];
   13dde:	eba4 0e0e 	sub.w	lr, r4, lr
		data[3] = (buf_[5+offset] << 4) | (buf_[4+offset] >> 4);
   13de2:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13de6:	f891 b023 	ldrb.w	fp, [r1, #35]	; 0x23
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13dea:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
		SWStickCal.lstick_x_max = SWStickCal.lstick_center_x + data[4];
   13dee:	444f      	add	r7, r9
		data[4] = ((buf_[7+offset] << 8) & 0xF00) | buf_[6+offset];
   13df0:	ea4b 0a0a 	orr.w	sl, fp, sl
		SWStickCal.lstick_y_max = SWStickCal.lstick_center_y + data[5];
   13df4:	44a4      	add	ip, r4
		data[5] = (buf_[8+offset] << 4) | (buf_[7+offset] >> 4);
   13df6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
		SWStickCal.rstick_x_min = SWStickCal.rstick_center_x - data[2];
   13dfa:	1b75      	subs	r5, r6, r5
		SWStickCal.rstick_y_min = SWStickCal.rstick_center_y - data[3];
   13dfc:	1a82      	subs	r2, r0, r2
		SWStickCal.rstick_x_max = SWStickCal.rstick_center_x + data[4];
   13dfe:	44b2      	add	sl, r6
		SWStickCal.rstick_y_max = SWStickCal.rstick_center_y + data[5];
   13e00:	18c1      	adds	r1, r0, r3
		SWStickCal.lstick_center_x = data[2];
   13e02:	4b21      	ldr	r3, [pc, #132]	; (13e88 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1a8>)
   13e04:	f8a3 900c 	strh.w	r9, [r3, #12]
		SWStickCal.lstick_center_y = data[3];
   13e08:	81dc      	strh	r4, [r3, #14]
		SWStickCal.lstick_x_min = SWStickCal.lstick_center_x - data[0];
   13e0a:	f8a3 8010 	strh.w	r8, [r3, #16]
		SWStickCal.lstick_x_max = SWStickCal.lstick_center_x + data[4];
   13e0e:	825f      	strh	r7, [r3, #18]
		SWStickCal.lstick_y_min = SWStickCal.lstick_center_y - data[1];
   13e10:	f8a3 e014 	strh.w	lr, [r3, #20]
		SWStickCal.lstick_y_max = SWStickCal.lstick_center_y + data[5];
   13e14:	f8a3 c016 	strh.w	ip, [r3, #22]
		SWStickCal.rstick_center_x = data[0];
   13e18:	801e      	strh	r6, [r3, #0]
		SWStickCal.rstick_center_y = data[1];
   13e1a:	8058      	strh	r0, [r3, #2]
		SWStickCal.rstick_x_min = SWStickCal.rstick_center_x - data[2];
   13e1c:	809d      	strh	r5, [r3, #4]
		SWStickCal.rstick_x_max = SWStickCal.rstick_center_x + data[4];
   13e1e:	f8a3 a006 	strh.w	sl, [r3, #6]
		SWStickCal.rstick_y_min = SWStickCal.rstick_center_y - data[3];
   13e22:	811a      	strh	r2, [r3, #8]
		SWStickCal.rstick_y_max = SWStickCal.rstick_center_y + data[5];
   13e24:	8159      	strh	r1, [r3, #10]
   13e26:	e777      	b.n	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
	if((buf_[14] == 0x10 && buf_[15] == 0x20 && buf_[16] == 0x60)) {
   13e28:	7c0b      	ldrb	r3, [r1, #16]
   13e2a:	2b60      	cmp	r3, #96	; 0x60
   13e2c:	f47f af74 	bne.w	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
   13e30:	2000      	movs	r0, #0
   13e32:	4a16      	ldr	r2, [pc, #88]	; (13e8c <JoystickController::sw_parseAckMsg(unsigned char const*)+0x1ac>)
	uint8_t icount = 0;
   13e34:	4603      	mov	r3, r0
			SWIMUCal.acc_offset[i] = (int16_t)(buf_[icount+offset] | (buf_[icount+offset+1] << 8));
   13e36:	440b      	add	r3, r1
   13e38:	7d5c      	ldrb	r4, [r3, #21]
   13e3a:	f893 c014 	ldrb.w	ip, [r3, #20]
   13e3e:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
   13e42:	f822 cb02 	strh.w	ip, [r2], #2
			SWIMUCal.acc_sensitivity[i] = (int16_t)(buf_[icount+offset+6] | (buf_[icount+offset+1+6] << 8));
   13e46:	7edc      	ldrb	r4, [r3, #27]
   13e48:	f893 c01a 	ldrb.w	ip, [r3, #26]
   13e4c:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
   13e50:	f8a2 c004 	strh.w	ip, [r2, #4]
			SWIMUCal.gyro_offset[i] = (int16_t)(buf_[icount+offset+12] | (buf_[icount+offset+1+12] << 8));
   13e54:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   13e58:	f893 c020 	ldrb.w	ip, [r3, #32]
   13e5c:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
   13e60:	f8a2 c00a 	strh.w	ip, [r2, #10]
			SWIMUCal.gyro_sensitivity[i] = (int16_t)(buf_[icount+offset+18] | (buf_[icount+offset+1+18] << 8));
   13e64:	f893 4027 	ldrb.w	r4, [r3, #39]	; 0x27
   13e68:	f893 c026 	ldrb.w	ip, [r3, #38]	; 0x26
   13e6c:	4603      	mov	r3, r0
   13e6e:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
		for(uint8_t i = 0; i < 3; i++) {
   13e72:	1c84      	adds	r4, r0, #2
   13e74:	b2e0      	uxtb	r0, r4
			SWIMUCal.gyro_sensitivity[i] = (int16_t)(buf_[icount+offset+18] | (buf_[icount+offset+1+18] << 8));
   13e76:	f8a2 c010 	strh.w	ip, [r2, #16]
		for(uint8_t i = 0; i < 3; i++) {
   13e7a:	2806      	cmp	r0, #6
   13e7c:	d1db      	bne.n	13e36 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x156>
   13e7e:	e74b      	b.n	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
	}   else if((buf_[14] == 0x10 && buf_[15] == 0x98 && buf_[16] == 0x60)){			//left stick deadzone_left
   13e80:	2b98      	cmp	r3, #152	; 0x98
   13e82:	f43f af3e 	beq.w	13d02 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x22>
   13e86:	e747      	b.n	13d18 <JoystickController::sw_parseAckMsg(unsigned char const*)+0x38>
   13e88:	2000e6f4 	.word	0x2000e6f4
   13e8c:	2000e6dc 	.word	0x2000e6dc

00013e90 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>:
{
   13e90:	b570      	push	{r4, r5, r6, lr}
   13e92:	4604      	mov	r4, r0
   13e94:	b084      	sub	sp, #16
    if (buffer) {
   13e96:	460d      	mov	r5, r1
   13e98:	b301      	cbz	r1, 13edc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x4c>
        if ((buffer[0] != 0x81) && (buffer[0] != 0x21))
   13e9a:	780b      	ldrb	r3, [r1, #0]
   13e9c:	2b81      	cmp	r3, #129	; 0x81
   13e9e:	d004      	beq.n	13eaa <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x1a>
   13ea0:	2b21      	cmp	r3, #33	; 0x21
   13ea2:	d002      	beq.n	13eaa <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x1a>
            return false; // was not an event message
   13ea4:	2000      	movs	r0, #0
}
   13ea6:	b004      	add	sp, #16
   13ea8:	bd70      	pop	{r4, r5, r6, pc}
    void stopTimer() {hidTimer.stop();}
   13eaa:	6b20      	ldr	r0, [r4, #48]	; 0x30
   13eac:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   13eb0:	f7fc f8a6 	bl	10000 <USBDriverTimer::stop()>
        if (ack_rpt == 0x81) {
   13eb4:	782b      	ldrb	r3, [r5, #0]
   13eb6:	2b81      	cmp	r3, #129	; 0x81
   13eb8:	d11d      	bne.n	13ef6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x66>
            if (!initialPass_) return true; // don't need to process
   13eba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	d03d      	beq.n	13f3e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
            if (sw_last_cmd_sent_ == ack_rpt) { 
   13ec2:	f894 316e 	ldrb.w	r3, [r4, #366]	; 0x16e
   13ec6:	2b81      	cmp	r3, #129	; 0x81
   13ec8:	d01c      	beq.n	13f04 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x74>
                if (sw_last_cmd_repeat_count) {
   13eca:	f894 316f 	ldrb.w	r3, [r4, #367]	; 0x16f
   13ece:	b9cb      	cbnz	r3, 13f04 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x74>
                    sw_last_cmd_repeat_count++;
   13ed0:	2201      	movs	r2, #1
                connectedComplete_pending_++;
   13ed2:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
                    sw_last_cmd_repeat_count++;
   13ed6:	f884 216f 	strb.w	r2, [r4, #367]	; 0x16f
   13eda:	e01c      	b.n	13f16 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x86>
    } else if (timer_event) {
   13edc:	b32b      	cbz	r3, 13f2a <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x9a>
        if (!initialPass_) return true; // don't need to process
   13ede:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   13ee2:	b363      	cbz	r3, 13f3e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
        connectedComplete_pending_++; 
   13ee4:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
        sw_last_cmd_repeat_count = 0;
   13ee8:	f884 116f 	strb.w	r1, [r4, #367]	; 0x16f
        connectedComplete_pending_++; 
   13eec:	3301      	adds	r3, #1
   13eee:	b2db      	uxtb	r3, r3
   13ef0:	f880 316d 	strb.w	r3, [r0, #365]	; 0x16d
   13ef4:	e00f      	b.n	13f16 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x86>
			sw_parseAckMsg(buffer);
   13ef6:	4629      	mov	r1, r5
   13ef8:	4620      	mov	r0, r4
   13efa:	f7ff fef1 	bl	13ce0 <JoystickController::sw_parseAckMsg(unsigned char const*)>
            if (!initialPass_) return true; // don't need to process
   13efe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13f02:	b1e3      	cbz	r3, 13f3e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
            connectedComplete_pending_++;
   13f04:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
            sw_last_cmd_repeat_count = 0;
   13f08:	2200      	movs	r2, #0
            connectedComplete_pending_++;
   13f0a:	3301      	adds	r3, #1
            sw_last_cmd_repeat_count = 0;
   13f0c:	f884 216f 	strb.w	r2, [r4, #367]	; 0x16f
            connectedComplete_pending_++;
   13f10:	b2db      	uxtb	r3, r3
   13f12:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
    switch(connectedComplete_pending_) {
   13f16:	2b0a      	cmp	r3, #10
   13f18:	d811      	bhi.n	13f3e <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0xae>
   13f1a:	e8df f003 	tbb	[pc, r3]
   13f1e:	6067      	.short	0x6067
   13f20:	3545565b 	.word	0x3545565b
   13f24:	091b2809 	.word	0x091b2809
   13f28:	13          	.byte	0x13
   13f29:	00          	.byte	0x00
        connectedComplete_pending_++; 
   13f2a:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
   13f2e:	e7f2      	b.n	13f16 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x86>
            sw_sendCmdUSB(0x04, SW_CMD_TIMEOUT);
   13f30:	4620      	mov	r0, r4
   13f32:	4a32      	ldr	r2, [pc, #200]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13f34:	2104      	movs	r1, #4
   13f36:	f7ff fdb3 	bl	13aa0 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
    return true;
   13f3a:	2001      	movs	r0, #1
            break;
   13f3c:	e7b3      	b.n	13ea6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
    switch(connectedComplete_pending_) {
   13f3e:	2001      	movs	r0, #1
}
   13f40:	b004      	add	sp, #16
   13f42:	bd70      	pop	{r4, r5, r6, pc}
            connectedComplete_pending_ = 99;
   13f44:	2263      	movs	r2, #99	; 0x63
            initialPass_ = false;
   13f46:	2300      	movs	r3, #0
    return true;
   13f48:	2001      	movs	r0, #1
            connectedComplete_pending_ = 99;
   13f4a:	f884 216d 	strb.w	r2, [r4, #365]	; 0x16d
            initialPass_ = false;
   13f4e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   13f52:	e7a8      	b.n	13ea6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            packet_[0] = 0x30;
   13f54:	2130      	movs	r1, #48	; 0x30
            sw_sendSubCmdUSB(0x03, packet_, 1, SW_CMD_TIMEOUT);
   13f56:	4d29      	ldr	r5, [pc, #164]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13f58:	4620      	mov	r0, r4
   13f5a:	2301      	movs	r3, #1
            packet_[0] = 0x30;
   13f5c:	f88d 1008 	strb.w	r1, [sp, #8]
            sw_sendSubCmdUSB(0x03, packet_, 1, SW_CMD_TIMEOUT);
   13f60:	aa02      	add	r2, sp, #8
   13f62:	2103      	movs	r1, #3
   13f64:	9500      	str	r5, [sp, #0]
   13f66:	f7ff fe57 	bl	13c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13f6a:	2001      	movs	r0, #1
            break;
   13f6c:	e79b      	b.n	13ea6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            packet_[0] = 0x01;
   13f6e:	2501      	movs	r5, #1
            sw_sendSubCmdUSB(0x48, packet_, 1, SW_CMD_TIMEOUT);
   13f70:	4e22      	ldr	r6, [pc, #136]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13f72:	4620      	mov	r0, r4
   13f74:	aa02      	add	r2, sp, #8
   13f76:	2148      	movs	r1, #72	; 0x48
   13f78:	462b      	mov	r3, r5
   13f7a:	9600      	str	r6, [sp, #0]
            packet_[0] = 0x01;
   13f7c:	f88d 5008 	strb.w	r5, [sp, #8]
            sw_sendSubCmdUSB(0x48, packet_, 1, SW_CMD_TIMEOUT);
   13f80:	f7ff fe4a 	bl	13c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13f84:	4628      	mov	r0, r5
            break;
   13f86:	e78e      	b.n	13ea6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            packet_[0] = 0x01;
   13f88:	2501      	movs	r5, #1
            connectedComplete_pending_++;
   13f8a:	2006      	movs	r0, #6
            sw_sendSubCmdUSB(0x40, packet_, 1, SW_CMD_TIMEOUT);
   13f8c:	491b      	ldr	r1, [pc, #108]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13f8e:	aa02      	add	r2, sp, #8
            connectedComplete_pending_++;
   13f90:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
            sw_sendSubCmdUSB(0x40, packet_, 1, SW_CMD_TIMEOUT);
   13f94:	462b      	mov	r3, r5
   13f96:	4620      	mov	r0, r4
   13f98:	9100      	str	r1, [sp, #0]
   13f9a:	2140      	movs	r1, #64	; 0x40
            packet_[0] = 0x01;
   13f9c:	f88d 5008 	strb.w	r5, [sp, #8]
            sw_sendSubCmdUSB(0x40, packet_, 1, SW_CMD_TIMEOUT);
   13fa0:	f7ff fe3a 	bl	13c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13fa4:	4628      	mov	r0, r5
            break;
   13fa6:	e77e      	b.n	13ea6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);	
   13fa8:	4d14      	ldr	r5, [pc, #80]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
			packet_[0] = 0x3D;
   13faa:	f246 013d 	movw	r1, #24637	; 0x603d
			packet_[4] = (0x6055 - 0x603D + 1); 
   13fae:	2219      	movs	r2, #25
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fb0:	4620      	mov	r0, r4
			packet_[0] = 0x80;
   13fb2:	9102      	str	r1, [sp, #8]
			packet_[4] = (0x6085 - 0x6080 + 1);
   13fb4:	f88d 200c 	strb.w	r2, [sp, #12]
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fb8:	2305      	movs	r3, #5
   13fba:	aa02      	add	r2, sp, #8
   13fbc:	2110      	movs	r1, #16
   13fbe:	9500      	str	r5, [sp, #0]
   13fc0:	f7ff fe2a 	bl	13c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
    return true;
   13fc4:	2001      	movs	r0, #1
}
   13fc6:	b004      	add	sp, #16
   13fc8:	bd70      	pop	{r4, r5, r6, pc}
			sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   13fca:	4d0c      	ldr	r5, [pc, #48]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
			packet_[0] = 0x80;
   13fcc:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
			packet_[4] = (0x6085 - 0x6080 + 1);
   13fd0:	2206      	movs	r2, #6
   13fd2:	e7ed      	b.n	13fb0 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x120>
            sw_sendSubCmdUSB(0x10, packet_, 5, SW_CMD_TIMEOUT);   // doesnt work wired
   13fd4:	4d09      	ldr	r5, [pc, #36]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
            packet_[0] = 0x20;
   13fd6:	f246 0120 	movw	r1, #24608	; 0x6020
            packet_[4] = (0x6037 - 0x6020 + 1);
   13fda:	2218      	movs	r2, #24
   13fdc:	e7e8      	b.n	13fb0 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x120>
            sw_sendCmdUSB(0x02, SW_CMD_TIMEOUT);
   13fde:	4620      	mov	r0, r4
   13fe0:	4a06      	ldr	r2, [pc, #24]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13fe2:	2102      	movs	r1, #2
   13fe4:	f7ff fd5c 	bl	13aa0 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
    return true;
   13fe8:	2001      	movs	r0, #1
            break;
   13fea:	e75c      	b.n	13ea6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
            sw_sendCmdUSB(0x03, SW_CMD_TIMEOUT);
   13fec:	4620      	mov	r0, r4
   13fee:	4a03      	ldr	r2, [pc, #12]	; (13ffc <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16c>)
   13ff0:	2103      	movs	r1, #3
   13ff2:	f7ff fd55 	bl	13aa0 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
    return true;
   13ff6:	2001      	movs	r0, #1
            break;
   13ff8:	e755      	b.n	13ea6 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)+0x16>
   13ffa:	bf00      	nop
   13ffc:	0003d090 	.word	0x0003d090

00014000 <JoystickController::hid_timer_event(USBDriverTimer*)>:
{
   14000:	b510      	push	{r4, lr}
   14002:	4604      	mov	r4, r0
    if (!driver_) return;
   14004:	6b00      	ldr	r0, [r0, #48]	; 0x30
   14006:	b158      	cbz	r0, 14020 <JoystickController::hid_timer_event(USBDriverTimer*)+0x20>
   14008:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   1400c:	f7fb fff8 	bl	10000 <USBDriverTimer::stop()>
    sw_handle_usb_init_of_joystick(nullptr, 0, true);
   14010:	2200      	movs	r2, #0
   14012:	4620      	mov	r0, r4
   14014:	2301      	movs	r3, #1
   14016:	4611      	mov	r1, r2
}
   14018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sw_handle_usb_init_of_joystick(nullptr, 0, true);
   1401c:	f7ff bf38 	b.w	13e90 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
}
   14020:	bd10      	pop	{r4, pc}
   14022:	bf00      	nop

00014024 <non-virtual thunk to JoystickController::hid_timer_event(USBDriverTimer*)>:
   14024:	b510      	push	{r4, lr}
   14026:	4604      	mov	r4, r0
   14028:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1402a:	b160      	cbz	r0, 14046 <non-virtual thunk to JoystickController::hid_timer_event(USBDriverTimer*)+0x22>
   1402c:	f500 705f 	add.w	r0, r0, #892	; 0x37c
   14030:	f7fb ffe6 	bl	10000 <USBDriverTimer::stop()>
   14034:	2200      	movs	r2, #0
   14036:	f1a4 000c 	sub.w	r0, r4, #12
   1403a:	2301      	movs	r3, #1
   1403c:	4611      	mov	r1, r2
   1403e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14042:	f7ff bf25 	b.w	13e90 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
   14046:	bd10      	pop	{r4, pc}

00014048 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>:
{
   14048:	b570      	push	{r4, r5, r6, lr}
   1404a:	4604      	mov	r4, r0
   1404c:	b084      	sub	sp, #16
    if (data) {
   1404e:	b319      	cbz	r1, 14098 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x50>
        if (data[0] != 0x21) return false;
   14050:	780b      	ldrb	r3, [r1, #0]
   14052:	460d      	mov	r5, r1
   14054:	2b21      	cmp	r3, #33	; 0x21
   14056:	d002      	beq.n	1405e <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x16>
   14058:	2000      	movs	r0, #0
}
   1405a:	b004      	add	sp, #16
   1405c:	bd70      	pop	{r4, r5, r6, pc}
    void stopTimer() {bt_connection_timer_.stop();}
   1405e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   14060:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   14064:	f7fb ffcc 	bl	10000 <USBDriverTimer::stop()>
        sw_parseAckMsg(data);
   14068:	4629      	mov	r1, r5
   1406a:	4620      	mov	r0, r4
   1406c:	f7ff fe38 	bl	13ce0 <JoystickController::sw_parseAckMsg(unsigned char const*)>
        if (!initialPassBT_) return true; // don't need to process
   14070:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   14074:	b1ab      	cbz	r3, 140a2 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x5a>
        connectedComplete_pending_++; 
   14076:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
   1407a:	3301      	adds	r3, #1
   1407c:	b2db      	uxtb	r3, r3
   1407e:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
    switch (connectedComplete_pending_) {
   14082:	3b01      	subs	r3, #1
   14084:	2b0a      	cmp	r3, #10
   14086:	d80c      	bhi.n	140a2 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x5a>
   14088:	e8df f003 	tbb	[pc, r3]
   1408c:	1e726d11 	.word	0x1e726d11
   14090:	4538342f 	.word	0x4538342f
   14094:	524a      	.short	0x524a
   14096:	5f          	.byte	0x5f
   14097:	00          	.byte	0x00
    } else if (timer_event) {
   14098:	b133      	cbz	r3, 140a8 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x60>
        if (!initialPassBT_) return true; // don't need to process
   1409a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1409e:	2b00      	cmp	r3, #0
   140a0:	d1e9      	bne.n	14076 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x2e>
    switch (connectedComplete_pending_) {
   140a2:	2001      	movs	r0, #1
}
   140a4:	b004      	add	sp, #16
   140a6:	bd70      	pop	{r4, r5, r6, pc}
        connectedComplete_pending_++; 
   140a8:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
   140ac:	e7e9      	b.n	14082 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x3a>
        packet_[0] = 0x00;
   140ae:	2100      	movs	r1, #0
        sw_sendCmd(0x08, packet_, 1, SW_CMD_TIMEOUT );
   140b0:	4d32      	ldr	r5, [pc, #200]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   140b2:	4620      	mov	r0, r4
   140b4:	2301      	movs	r3, #1
        packet_[0] = 0x00;
   140b6:	f88d 1008 	strb.w	r1, [sp, #8]
        sw_sendCmd(0x08, packet_, 1, SW_CMD_TIMEOUT );
   140ba:	aa02      	add	r2, sp, #8
   140bc:	2108      	movs	r1, #8
   140be:	9500      	str	r5, [sp, #0]
   140c0:	f7ff fc32 	bl	13928 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   140c4:	2001      	movs	r0, #1
        break;
   140c6:	e7c8      	b.n	1405a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   140c8:	4d2c      	ldr	r5, [pc, #176]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x3D;
   140ca:	f246 013d 	movw	r1, #24637	; 0x603d
        packet_[4] = (0x604E - 0x603D + 1); 
   140ce:	2212      	movs	r2, #18
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   140d0:	4620      	mov	r0, r4
        packet_[0] = 0x80;
   140d2:	9102      	str	r1, [sp, #8]
        packet_[4] = (0x6097 - 0x6080 + 1);
   140d4:	f88d 200c 	strb.w	r2, [sp, #12]
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   140d8:	2305      	movs	r3, #5
   140da:	aa02      	add	r2, sp, #8
   140dc:	2110      	movs	r1, #16
   140de:	9500      	str	r5, [sp, #0]
   140e0:	f7ff fc22 	bl	13928 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   140e4:	2001      	movs	r0, #1
}
   140e6:	b004      	add	sp, #16
   140e8:	bd70      	pop	{r4, r5, r6, pc}
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   140ea:	4d24      	ldr	r5, [pc, #144]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x20;
   140ec:	f246 0120 	movw	r1, #24608	; 0x6020
        packet_[4] = (0x6097 - 0x6080 + 1);
   140f0:	2218      	movs	r2, #24
   140f2:	e7ed      	b.n	140d0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x88>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   140f4:	4d21      	ldr	r5, [pc, #132]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x80;
   140f6:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
   140fa:	e7f9      	b.n	140f0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0xa8>
        packet_[0] = 0x01;
   140fc:	2501      	movs	r5, #1
        sw_sendCmd(0x40, packet_, 1, SW_CMD_TIMEOUT);   /* 0x40 IMU, note: 0x00 would disable */
   140fe:	4e1f      	ldr	r6, [pc, #124]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   14100:	aa02      	add	r2, sp, #8
   14102:	2140      	movs	r1, #64	; 0x40
        sw_sendCmd(0x48, packet_, 1, SW_CMD_TIMEOUT);
   14104:	4620      	mov	r0, r4
   14106:	462b      	mov	r3, r5
   14108:	9600      	str	r6, [sp, #0]
        packet_[0] = 0x01;
   1410a:	f88d 5008 	strb.w	r5, [sp, #8]
        sw_sendCmd(0x48, packet_, 1, SW_CMD_TIMEOUT);
   1410e:	f7ff fc0b 	bl	13928 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   14112:	4628      	mov	r0, r5
        break;
   14114:	e7a1      	b.n	1405a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        packet_[0] = 0x01;
   14116:	2501      	movs	r5, #1
        sw_sendCmd(0x48, packet_, 1, SW_CMD_TIMEOUT);
   14118:	4e18      	ldr	r6, [pc, #96]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   1411a:	aa02      	add	r2, sp, #8
   1411c:	2148      	movs	r1, #72	; 0x48
   1411e:	e7f1      	b.n	14104 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0xbc>
        setLEDs(0x1, 0, 0);
   14120:	2300      	movs	r3, #0
   14122:	2101      	movs	r1, #1
   14124:	4620      	mov	r0, r4
   14126:	461a      	mov	r2, r3
   14128:	f7ff f8a8 	bl	1327c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
    return true;
   1412c:	2001      	movs	r0, #1
        break;
   1412e:	e794      	b.n	1405a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        packet_[0] = 0x30; //0x3F;
   14130:	2130      	movs	r1, #48	; 0x30
        sw_sendCmd(0x03, packet_, 1, SW_CMD_TIMEOUT);
   14132:	4d12      	ldr	r5, [pc, #72]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
   14134:	4620      	mov	r0, r4
   14136:	2301      	movs	r3, #1
        packet_[0] = 0x30; //0x3F;
   14138:	f88d 1008 	strb.w	r1, [sp, #8]
        sw_sendCmd(0x03, packet_, 1, SW_CMD_TIMEOUT);
   1413c:	aa02      	add	r2, sp, #8
   1413e:	2103      	movs	r1, #3
   14140:	9500      	str	r5, [sp, #0]
   14142:	f7ff fbf1 	bl	13928 <JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)>
    return true;
   14146:	2001      	movs	r0, #1
        break;
   14148:	e787      	b.n	1405a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        setRumble(0xff, 0xff, 0xff);
   1414a:	23ff      	movs	r3, #255	; 0xff
   1414c:	4620      	mov	r0, r4
   1414e:	461a      	mov	r2, r3
   14150:	4619      	mov	r1, r3
   14152:	f7ff f94b 	bl	133ec <JoystickController::setRumble(unsigned char, unsigned char, unsigned char)>
		initialPassBT_ = false;
   14156:	2200      	movs	r2, #0
        connectedComplete_pending_ = 0xff;
   14158:	23ff      	movs	r3, #255	; 0xff
    return true;
   1415a:	2001      	movs	r0, #1
		initialPassBT_ = false;
   1415c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        connectedComplete_pending_ = 0xff;
   14160:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
        break;
   14164:	e779      	b.n	1405a <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x12>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   14166:	4d05      	ldr	r5, [pc, #20]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x86;
   14168:	f246 0186 	movw	r1, #24710	; 0x6086
        packet_[4] = (0x6097 - 0x6086 + 1); 
   1416c:	2212      	movs	r2, #18
   1416e:	e7af      	b.n	140d0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x88>
        sw_sendCmd(0x10, packet_, 5, SW_CMD_TIMEOUT);   
   14170:	4d02      	ldr	r5, [pc, #8]	; (1417c <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x134>)
        packet_[0] = 0x98;
   14172:	f246 0198 	movw	r1, #24728	; 0x6098
        packet_[4] = (0x60A9 - 0x6098 + 1);  
   14176:	2212      	movs	r2, #18
   14178:	e7aa      	b.n	140d0 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)+0x88>
   1417a:	bf00      	nop
   1417c:	0003d090 	.word	0x0003d090

00014180 <JoystickController::bt_hid_timer_event(USBDriverTimer*)>:
{
   14180:	b510      	push	{r4, lr}
   14182:	4604      	mov	r4, r0
    if (!btconnect) return;
   14184:	6a80      	ldr	r0, [r0, #40]	; 0x28
   14186:	b158      	cbz	r0, 141a0 <JoystickController::bt_hid_timer_event(USBDriverTimer*)+0x20>
   14188:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   1418c:	f7fb ff38 	bl	10000 <USBDriverTimer::stop()>
    sw_handle_bt_init_of_joystick(nullptr, 0, true);
   14190:	2200      	movs	r2, #0
   14192:	4620      	mov	r0, r4
   14194:	2301      	movs	r3, #1
   14196:	4611      	mov	r1, r2
}
   14198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sw_handle_bt_init_of_joystick(nullptr, 0, true);
   1419c:	f7ff bf54 	b.w	14048 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>
}
   141a0:	bd10      	pop	{r4, pc}
   141a2:	bf00      	nop

000141a4 <non-virtual thunk to JoystickController::bt_hid_timer_event(USBDriverTimer*)>:
   141a4:	b510      	push	{r4, lr}
   141a6:	4604      	mov	r4, r0
   141a8:	6900      	ldr	r0, [r0, #16]
   141aa:	b160      	cbz	r0, 141c6 <non-virtual thunk to JoystickController::bt_hid_timer_event(USBDriverTimer*)+0x22>
   141ac:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   141b0:	f7fb ff26 	bl	10000 <USBDriverTimer::stop()>
   141b4:	2200      	movs	r2, #0
   141b6:	f1a4 0018 	sub.w	r0, r4, #24
   141ba:	2301      	movs	r3, #1
   141bc:	4611      	mov	r1, r2
   141be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   141c2:	f7ff bf41 	b.w	14048 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>
   141c6:	bd10      	pop	{r4, pc}

000141c8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>:
	float &pOutY,       // out: resulting stick Y value
	int16_t x,         // in: initial stick X value
	int16_t y,         // in: initial stick Y value
	bool isLeft			// are we dealing with left or right Joystick
)
{
   141c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   141ca:	ed2d 8b02 	vpush	{d8}
   141ce:	b083      	sub	sp, #12
	int16_t center_x;
	int16_t min_y;		// analog joystick calibration
	int16_t max_y;
	int16_t center_y;
	if(isLeft) {
		min_x = SWStickCal.lstick_x_min;
   141d0:	4d54      	ldr	r5, [pc, #336]	; (14324 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x15c>)
{
   141d2:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   141d6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
	if(isLeft) {
   141da:	2c00      	cmp	r4, #0
   141dc:	d06a      	beq.n	142b4 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0xec>
		min_x = SWStickCal.lstick_x_min;
   141de:	f9b5 4010 	ldrsh.w	r4, [r5, #16]
		max_x = SWStickCal.lstick_x_max;
   141e2:	f9b5 7012 	ldrsh.w	r7, [r5, #18]
		center_x = SWStickCal.lstick_center_x;
   141e6:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
		min_y = SWStickCal.lstick_y_min;
   141ea:	f9b5 c014 	ldrsh.w	ip, [r5, #20]
		max_y = SWStickCal.lstick_y_max;
   141ee:	f9b5 e016 	ldrsh.w	lr, [r5, #22]
		center_y = SWStickCal.lstick_center_y;
   141f2:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
	float deadZoneCenter = 0.15f;
	// Add a small ammount of outer deadzone to avoid edge cases or machine variety.
	float deadZoneOuter = 0.0f;

	// convert to float based on calibration and valid ranges per +/-axis
	x = clamp(x, min_x, max_x);
   141f6:	42a3      	cmp	r3, r4
   141f8:	bfb8      	it	lt
   141fa:	4623      	movlt	r3, r4
   141fc:	4560      	cmp	r0, ip
   141fe:	bfb8      	it	lt
   14200:	4660      	movlt	r0, ip
   14202:	42bb      	cmp	r3, r7
   14204:	bfa8      	it	ge
   14206:	463b      	movge	r3, r7
	y = clamp(y, min_y, max_y);
   14208:	4570      	cmp	r0, lr
   1420a:	bfa8      	it	ge
   1420c:	4670      	movge	r0, lr
	if (x >= center_x) {
   1420e:	429e      	cmp	r6, r3
		x_f = (float)(x - center_x) / (float)(max_x - center_x);
   14210:	eba3 0306 	sub.w	r3, r3, r6
	if (x >= center_x) {
   14214:	dc6f      	bgt.n	142f6 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x12e>
		x_f = (float)(x - center_x) / (float)(max_x - center_x);
   14216:	1bbf      	subs	r7, r7, r6
   14218:	ee07 3a90 	vmov	s15, r3
   1421c:	ee07 7a10 	vmov	s14, r7
   14220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14224:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   14228:	ee87 8a87 	vdiv.f32	s16, s15, s14
	} else {
		x_f = -((float)(x - center_x) / (float)(min_x - center_x));
	}
	if (y >= center_y) {
   1422c:	4285      	cmp	r5, r0
		y_f = (float)(y - center_y) / (float)(max_y - center_y);
   1422e:	eba0 0005 	sub.w	r0, r0, r5
	if (y >= center_y) {
   14232:	dc51      	bgt.n	142d8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x110>
		y_f = (float)(y - center_y) / (float)(max_y - center_y);
   14234:	ebae 0e05 	sub.w	lr, lr, r5
   14238:	ee07 0a90 	vmov	s15, r0
   1423c:	ee07 ea10 	vmov	s14, lr
   14240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   14248:	eec7 8a87 	vdiv.f32	s17, s15, s14
	} else {
		y_f = -((float)(y - center_y) / (float)(min_y - center_y));
	}

	// Interpolate zone between deadzones
	float mag = sqrtf(x_f*x_f + y_f*y_f);
   1424c:	ee28 0aa8 	vmul.f32	s0, s17, s17
   14250:	eea8 0a08 	vfma.f32	s0, s16, s16
   14254:	eeb5 0a40 	vcmp.f32	s0, #0.0
   14258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1425c:	d459      	bmi.n	14312 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x14a>
   1425e:	eeb1 7ac0 	vsqrt.f32	s14, s0
	if (mag > deadZoneCenter) {
   14262:	eddf 7a31 	vldr	s15, [pc, #196]	; 14328 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x160>
   14266:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1426e:	dd2e      	ble.n	142ce <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x106>
		// scale such that output magnitude is in the range [0.0f, 1.0f]
		float legalRange = 1.0f - deadZoneOuter - deadZoneCenter;
		float normalizedMag = min(1.0f, (mag - deadZoneCenter) / legalRange);
   14270:	ee77 7a67 	vsub.f32	s15, s14, s15
   14274:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 1432c <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x164>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
   14278:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		float scale = normalizedMag / mag;
		pOutX = (x_f * scale * sw_scale);
   1427c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 14330 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x168>
		float normalizedMag = min(1.0f, (mag - deadZoneCenter) / legalRange);
   14280:	eec7 6a85 	vdiv.f32	s13, s15, s10
   14284:	eef4 6a65 	vcmp.f32	s13, s11
   14288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1428c:	fe75 6aa6 	vselgt.f32	s13, s11, s13
		float scale = normalizedMag / mag;
   14290:	eec6 7a87 	vdiv.f32	s15, s13, s14
		pOutX = (x_f * scale * sw_scale);
   14294:	ee28 8a27 	vmul.f32	s16, s16, s15
		pOutY = (y_f * scale * sw_scale);
   14298:	ee68 8aa7 	vmul.f32	s17, s17, s15
		pOutX = (x_f * scale * sw_scale);
   1429c:	ee28 8a06 	vmul.f32	s16, s16, s12
		pOutY = (y_f * scale * sw_scale);
   142a0:	ee68 8a86 	vmul.f32	s17, s17, s12
		pOutX = (x_f * scale * sw_scale);
   142a4:	ed81 8a00 	vstr	s16, [r1]
		pOutY = (y_f * scale * sw_scale);
   142a8:	edc2 8a00 	vstr	s17, [r2]
		pOutX = 0.0f;
		pOutY = 0.0f;
	}
	

}
   142ac:	b003      	add	sp, #12
   142ae:	ecbd 8b02 	vpop	{d8}
   142b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		min_x = SWStickCal.rstick_x_min;
   142b4:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
		max_x = SWStickCal.rstick_x_max;
   142b8:	f9b5 7006 	ldrsh.w	r7, [r5, #6]
		center_x = SWStickCal.rstick_center_x;
   142bc:	f9b5 6000 	ldrsh.w	r6, [r5]
		min_y = SWStickCal.rstick_y_min;
   142c0:	f9b5 c008 	ldrsh.w	ip, [r5, #8]
		max_y = SWStickCal.rstick_y_max;
   142c4:	f9b5 e00a 	ldrsh.w	lr, [r5, #10]
		center_y = SWStickCal.rstick_center_y;
   142c8:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
   142cc:	e793      	b.n	141f6 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x2e>
   142ce:	ed9f 8a19 	vldr	s16, [pc, #100]	; 14334 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x16c>
   142d2:	eef0 8a48 	vmov.f32	s17, s16
   142d6:	e7e5      	b.n	142a4 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0xdc>
		y_f = -((float)(y - center_y) / (float)(min_y - center_y));
   142d8:	ebac 0c05 	sub.w	ip, ip, r5
   142dc:	ee07 0a90 	vmov	s15, r0
   142e0:	ee07 ca10 	vmov	s14, ip
   142e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   142e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   142ec:	eec7 8a87 	vdiv.f32	s17, s15, s14
   142f0:	eef1 8a68 	vneg.f32	s17, s17
   142f4:	e7aa      	b.n	1424c <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x84>
		x_f = -((float)(x - center_x) / (float)(min_x - center_x));
   142f6:	1ba4      	subs	r4, r4, r6
   142f8:	ee07 3a90 	vmov	s15, r3
   142fc:	ee07 4a10 	vmov	s14, r4
   14300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   14304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   14308:	ee87 8a87 	vdiv.f32	s16, s15, s14
   1430c:	eeb1 8a48 	vneg.f32	s16, s16
   14310:	e78c      	b.n	1422c <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x64>
   14312:	e9cd 1200 	strd	r1, r2, [sp]
	float mag = sqrtf(x_f*x_f + y_f*y_f);
   14316:	f003 ff77 	bl	18208 <sqrtf>
   1431a:	eeb0 7a40 	vmov.f32	s14, s0
   1431e:	e9dd 1200 	ldrd	r1, r2, [sp]
   14322:	e79e      	b.n	14262 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)+0x9a>
   14324:	2000e6f4 	.word	0x2000e6f4
   14328:	3e19999a 	.word	0x3e19999a
   1432c:	3f59999a 	.word	0x3f59999a
   14330:	45000000 	.word	0x45000000
   14334:	00000000 	.word	0x00000000

00014338 <JoystickController::rx_data(Transfer_struct const*)>:
    if (joystickType_ == XBOXONE) {
   14338:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1433c:	2b03      	cmp	r3, #3
{
   1433e:	b5f0      	push	{r4, r5, r6, r7, lr}
   14340:	4604      	mov	r4, r0
   14342:	b087      	sub	sp, #28
   14344:	460d      	mov	r5, r1
    if (joystickType_ == XBOXONE) {
   14346:	d06f      	beq.n	14428 <JoystickController::rx_data(Transfer_struct const*)+0xf0>
    } else if (joystickType_ == XBOX360) {
   14348:	2b04      	cmp	r3, #4
   1434a:	d008      	beq.n	1435e <JoystickController::rx_data(Transfer_struct const*)+0x26>
    } else if (joystickType_ == SWITCH) {
   1434c:	2b07      	cmp	r3, #7
   1434e:	f000 80c6 	beq.w	144de <JoystickController::rx_data(Transfer_struct const*)+0x1a6>
    queue_Data_Transfer_Debug(rxpipe_, rxbuf_, rx_size_, this, __LINE__);
   14352:	f8d4 049c 	ldr.w	r0, [r4, #1180]	; 0x49c
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   14356:	2800      	cmp	r0, #0
   14358:	d15c      	bne.n	14414 <JoystickController::rx_data(Transfer_struct const*)+0xdc>
}
   1435a:	b007      	add	sp, #28
   1435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xbox360data_t  *xb360d = (xbox360data_t *)transfer->buffer;
   1435e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        if (xb360d->state == 0x08) {
   14360:	781a      	ldrb	r2, [r3, #0]
   14362:	2a08      	cmp	r2, #8
   14364:	f000 80a7 	beq.w	144b6 <JoystickController::rx_data(Transfer_struct const*)+0x17e>
        } else if (xb360d->id_or_type == 0x01) { // Lets only process report 1.
   14368:	785a      	ldrb	r2, [r3, #1]
   1436a:	2a01      	cmp	r2, #1
   1436c:	d1f1      	bne.n	14352 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
            if (buttons != xb360d->buttons) {
   1436e:	88d9      	ldrh	r1, [r3, #6]
   14370:	6c40      	ldr	r0, [r0, #68]	; 0x44
   14372:	4288      	cmp	r0, r1
   14374:	d002      	beq.n	1437c <JoystickController::rx_data(Transfer_struct const*)+0x44>
                buttons = xb360d->buttons;
   14376:	6461      	str	r1, [r4, #68]	; 0x44
                anychange = true;
   14378:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
            axis_mask_ = 0x3f;
   1437c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   14380:	f103 0608 	add.w	r6, r3, #8
            axis_changed_mask_ = 0; // assume none for now
   14384:	2200      	movs	r2, #0
                    axis_changed_mask_ |= (1 << i);
   14386:	f04f 0c01 	mov.w	ip, #1
            axis_mask_ = 0x3f;
   1438a:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 14690 <JoystickController::rx_data(Transfer_struct const*)+0x358>
   1438e:	ed84 7b52 	vstr	d7, [r4, #328]	; 0x148
            axis_changed_mask_ = 0; // assume none for now
   14392:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 14698 <JoystickController::rx_data(Transfer_struct const*)+0x360>
   14396:	ed84 7b54 	vstr	d7, [r4, #336]	; 0x150
                if (axis[i] != xb360d->axis[i]) {
   1439a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
   1439e:	f850 5f04 	ldr.w	r5, [r0, #4]!
   143a2:	428d      	cmp	r5, r1
   143a4:	d00f      	beq.n	143c6 <JoystickController::rx_data(Transfer_struct const*)+0x8e>
                    axis[i] = xb360d->axis[i];
   143a6:	6001      	str	r1, [r0, #0]
                    axis_changed_mask_ |= (1 << i);
   143a8:	fa0c f102 	lsl.w	r1, ip, r2
   143ac:	f8d4 5150 	ldr.w	r5, [r4, #336]	; 0x150
                    anychange = true;
   143b0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
                    axis_changed_mask_ |= (1 << i);
   143b4:	430d      	orrs	r5, r1
   143b6:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
   143ba:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
   143be:	ea45 75e1 	orr.w	r5, r5, r1, asr #31
   143c2:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
            for (uint8_t i = 0; i < 4; i++) {
   143c6:	3201      	adds	r2, #1
   143c8:	2a04      	cmp	r2, #4
   143ca:	d1e6      	bne.n	1439a <JoystickController::rx_data(Transfer_struct const*)+0x62>
            if (axis[4] != xb360d->lt) {
   143cc:	7a19      	ldrb	r1, [r3, #8]
   143ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
   143d0:	428a      	cmp	r2, r1
   143d2:	f000 8169 	beq.w	146a8 <JoystickController::rx_data(Transfer_struct const*)+0x370>
                axis_changed_mask_ |= (1 << 4);
   143d6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
                anychange = true;
   143da:	2001      	movs	r0, #1
                axis[4] = xb360d->lt;
   143dc:	65a1      	str	r1, [r4, #88]	; 0x58
                axis_changed_mask_ |= (1 << 4);
   143de:	f042 0210 	orr.w	r2, r2, #16
                anychange = true;
   143e2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
            if (axis[5] != xb360d->rt) {
   143e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                axis_changed_mask_ |= (1 << 4);
   143e8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
            if (axis[5] != xb360d->rt) {
   143ec:	7a5b      	ldrb	r3, [r3, #9]
                axis_changed_mask_ |= (1 << 4);
   143ee:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
            if (axis[5] != xb360d->rt) {
   143f2:	4283      	cmp	r3, r0
   143f4:	d007      	beq.n	14406 <JoystickController::rx_data(Transfer_struct const*)+0xce>
                axis_changed_mask_ |= (1 << 5);
   143f6:	f042 0220 	orr.w	r2, r2, #32
                anychange = true;
   143fa:	2001      	movs	r0, #1
                axis[5] = xb360d->rt;
   143fc:	65e3      	str	r3, [r4, #92]	; 0x5c
                anychange = true;
   143fe:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << 5);
   14402:	e9c4 2154 	strd	r2, r1, [r4, #336]	; 0x150
        if (anychange) joystickEvent = true;
   14406:	2301      	movs	r3, #1
    queue_Data_Transfer_Debug(rxpipe_, rxbuf_, rx_size_, this, __LINE__);
   14408:	f8d4 049c 	ldr.w	r0, [r4, #1180]	; 0x49c
        if (anychange) joystickEvent = true;
   1440c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if ((pipe == nullptr) || (driver == nullptr) || ((len > 0) && (buffer == nullptr))) {
   14410:	2800      	cmp	r0, #0
   14412:	d0a2      	beq.n	1435a <JoystickController::rx_data(Transfer_struct const*)+0x22>
    return queue_Data_Transfer(pipe, buffer, len, driver);
   14414:	4623      	mov	r3, r4
   14416:	f8b4 2496 	ldrh.w	r2, [r4, #1174]	; 0x496
   1441a:	f204 41a4 	addw	r1, r4, #1188	; 0x4a4
}
   1441e:	b007      	add	sp, #28
   14420:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return queue_Data_Transfer(pipe, buffer, len, driver);
   14424:	f7fb bf32 	b.w	1028c <USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)>
        axis_mask_ = 0x3f;
   14428:	203f      	movs	r0, #63	; 0x3f
   1442a:	2100      	movs	r1, #0
   1442c:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
        axis_changed_mask_ = 0; // assume none for now
   14430:	2100      	movs	r1, #0
   14432:	2000      	movs	r0, #0
   14434:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
        xbox1data20_t *xb1d = (xbox1data20_t *)transfer->buffer;
   14438:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if ((xb1d->type == 0x20) && (transfer->length >= sizeof (xbox1data20_t))) {
   1443a:	780a      	ldrb	r2, [r1, #0]
   1443c:	2a20      	cmp	r2, #32
   1443e:	d188      	bne.n	14352 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
   14440:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   14442:	2a11      	cmp	r2, #17
   14444:	d985      	bls.n	14352 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
            if (xb1d->buttons != buttons) {
   14446:	888a      	ldrh	r2, [r1, #4]
   14448:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1444a:	4282      	cmp	r2, r0
   1444c:	d005      	beq.n	1445a <JoystickController::rx_data(Transfer_struct const*)+0x122>
                anychange = true;
   1444e:	2001      	movs	r0, #1
                buttons = xb1d->buttons;
   14450:	6462      	str	r2, [r4, #68]	; 0x44
                anychange = true;
   14452:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
                joystickEvent = true;
   14456:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
{
   1445a:	2201      	movs	r2, #1
   1445c:	4e90      	ldr	r6, [pc, #576]	; (146a0 <JoystickController::rx_data(Transfer_struct const*)+0x368>)
   1445e:	3106      	adds	r1, #6
                    axis_changed_mask_ |= (1 << xbox_axis_order_mapping[i]);
   14460:	4694      	mov	ip, r2
   14462:	e01d      	b.n	144a0 <JoystickController::rx_data(Transfer_struct const*)+0x168>
                int axis_value = (i < 2) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14464:	f9b1 5000 	ldrsh.w	r5, [r1]
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   14468:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
   1446c:	42af      	cmp	r7, r5
   1446e:	d010      	beq.n	14492 <JoystickController::rx_data(Transfer_struct const*)+0x15a>
                    axis[xbox_axis_order_mapping[i]] = axis_value;
   14470:	f844 5020 	str.w	r5, [r4, r0, lsl #2]
                    axis_changed_mask_ |= (1 << xbox_axis_order_mapping[i]);
   14474:	fa0c f303 	lsl.w	r3, ip, r3
   14478:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                    anychange = true;
   1447c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
                    axis_changed_mask_ |= (1 << xbox_axis_order_mapping[i]);
   14480:	4318      	orrs	r0, r3
   14482:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14486:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   1448a:	ea40 70e3 	orr.w	r0, r0, r3, asr #31
   1448e:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
            for (uint8_t i = 0; i < sizeof (xbox_axis_order_mapping); i++) {
   14492:	2a06      	cmp	r2, #6
   14494:	d0b7      	beq.n	14406 <JoystickController::rx_data(Transfer_struct const*)+0xce>
   14496:	3201      	adds	r2, #1
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   14498:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   1449c:	3102      	adds	r1, #2
   1449e:	b2d2      	uxtb	r2, r2
                int axis_value = (i < 2) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   144a0:	1e55      	subs	r5, r2, #1
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   144a2:	f103 0012 	add.w	r0, r3, #18
                int axis_value = (i < 2) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   144a6:	2d01      	cmp	r5, #1
   144a8:	d8dc      	bhi.n	14464 <JoystickController::rx_data(Transfer_struct const*)+0x12c>
   144aa:	880d      	ldrh	r5, [r1, #0]
                if (axis_value != axis[xbox_axis_order_mapping[i]]) {
   144ac:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
   144b0:	42af      	cmp	r7, r5
   144b2:	d1dd      	bne.n	14470 <JoystickController::rx_data(Transfer_struct const*)+0x138>
   144b4:	e7ef      	b.n	14496 <JoystickController::rx_data(Transfer_struct const*)+0x15e>
            if (xb360d->id_or_type != connected_) {
   144b6:	785b      	ldrb	r3, [r3, #1]
   144b8:	f890 216c 	ldrb.w	r2, [r0, #364]	; 0x16c
   144bc:	429a      	cmp	r2, r3
   144be:	f43f af48 	beq.w	14352 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
                connected_ = xb360d->id_or_type;    // remember it...
   144c2:	f880 316c 	strb.w	r3, [r0, #364]	; 0x16c
                if (connected_) {
   144c6:	2b00      	cmp	r3, #0
   144c8:	f43f af43 	beq.w	14352 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
                    setLEDs(2 + rx_ep_ / 2); // Right now hard coded to first joystick...
   144cc:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
    bool inline setLEDs(uint32_t leds) {return setLEDs((leds >> 16) & 0xff, (leds >> 8) & 0xff, leds & 0xff);}  // sets Leds - passing one arg for all leds
   144d0:	2200      	movs	r2, #0
   144d2:	085b      	lsrs	r3, r3, #1
   144d4:	4611      	mov	r1, r2
   144d6:	3302      	adds	r3, #2
   144d8:	f7fe fed0 	bl	1327c <JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)>
   144dc:	e739      	b.n	14352 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
		if(initialPass_ == true) {
   144de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   144e2:	b1bb      	cbz	r3, 14514 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
			switch(connectedComplete_pending_) {
   144e4:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
   144e8:	2b05      	cmp	r3, #5
   144ea:	d813      	bhi.n	14514 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
   144ec:	e8df f003 	tbb	[pc, r3]
   144f0:	a3b0bdc5 	.word	0xa3b0bdc5
   144f4:	0d03      	.short	0x0d03
					sw_sendSubCmdUSB(0x3f, packet, 1);
   144f6:	2100      	movs	r1, #0
					packet[0] = 0x30;
   144f8:	2230      	movs	r2, #48	; 0x30
					sw_sendSubCmdUSB(0x3f, packet, 1);
   144fa:	2301      	movs	r3, #1
   144fc:	9100      	str	r1, [sp, #0]
   144fe:	213f      	movs	r1, #63	; 0x3f
					packet[0] = 0x30;
   14500:	f88d 2010 	strb.w	r2, [sp, #16]
					sw_sendSubCmdUSB(0x3f, packet, 1);
   14504:	aa04      	add	r2, sp, #16
   14506:	f7ff fb87 	bl	13c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
					connectedComplete_pending_ = 0;
   1450a:	2300      	movs	r3, #0
   1450c:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					initialPass_ = false;
   14510:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        switchdataUSB_t  *switchd = (switchdataUSB_t *)transfer->buffer;
   14514:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if (buttons != cur_buttons) {
   14516:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14518:	886b      	ldrh	r3, [r5, #2]
   1451a:	ba5b      	rev16	r3, r3
   1451c:	b29b      	uxth	r3, r3
   1451e:	429a      	cmp	r2, r3
   14520:	d003      	beq.n	1452a <JoystickController::rx_data(Transfer_struct const*)+0x1f2>
            anychange = true;
   14522:	2201      	movs	r2, #1
            buttons = cur_buttons;
   14524:	6463      	str	r3, [r4, #68]	; 0x44
            anychange = true;
   14526:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        axis_mask_ = 0x3f;
   1452a:	223f      	movs	r2, #63	; 0x3f
   1452c:	2300      	movs	r3, #0
   1452e:	f104 0144 	add.w	r1, r4, #68	; 0x44
   14532:	f105 0c04 	add.w	ip, r5, #4
                axis_changed_mask_ |= (1 << i);
   14536:	f04f 0e01 	mov.w	lr, #1
        axis_mask_ = 0x3f;
   1453a:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
        axis_changed_mask_ = 0; // assume none for now
   1453e:	2300      	movs	r3, #0
   14540:	2200      	movs	r2, #0
   14542:	e9c4 2354 	strd	r2, r3, [r4, #336]	; 0x150
   14546:	2300      	movs	r3, #0
            if (axis[i] != switchd->axis[i]) {
   14548:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
   1454c:	f851 0f04 	ldr.w	r0, [r1, #4]!
   14550:	4290      	cmp	r0, r2
   14552:	d00f      	beq.n	14574 <JoystickController::rx_data(Transfer_struct const*)+0x23c>
                axis[i] = switchd->axis[i];
   14554:	600a      	str	r2, [r1, #0]
                axis_changed_mask_ |= (1 << i);
   14556:	fa0e f203 	lsl.w	r2, lr, r3
   1455a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                anychange = true;
   1455e:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << i);
   14562:	4310      	orrs	r0, r2
   14564:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14568:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   1456c:	ea40 70e2 	orr.w	r0, r0, r2, asr #31
   14570:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        for (uint8_t i = 0; i < 4; i++) {
   14574:	3301      	adds	r3, #1
   14576:	2b04      	cmp	r3, #4
   14578:	d1e6      	bne.n	14548 <JoystickController::rx_data(Transfer_struct const*)+0x210>
		CalcAnalogStick(xout, yout, axis[0], axis[1], true);
   1457a:	2601      	movs	r6, #1
   1457c:	aa03      	add	r2, sp, #12
   1457e:	a902      	add	r1, sp, #8
   14580:	4620      	mov	r0, r4
   14582:	9601      	str	r6, [sp, #4]
   14584:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
   14588:	9300      	str	r3, [sp, #0]
   1458a:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
   1458e:	f7ff fe1b 	bl	141c8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   14592:	ed9d 7a02 	vldr	s14, [sp, #8]
   14596:	eddd 7a03 	vldr	s15, [sp, #12]
		CalcAnalogStick(xout, yout, axis[2], axis[3], true);
   1459a:	aa03      	add	r2, sp, #12
   1459c:	feb8 7a47 	vrinta.f32	s14, s14
		axis[0] = int(round(xout));
   145a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   145a4:	fef8 7a67 	vrinta.f32	s15, s15
		axis[1] = int(round(yout));
   145a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		CalcAnalogStick(xout, yout, axis[2], axis[3], true);
   145ac:	9601      	str	r6, [sp, #4]
   145ae:	a902      	add	r1, sp, #8
   145b0:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
   145b4:	4620      	mov	r0, r4
		axis[0] = int(round(xout));
   145b6:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
		axis[1] = int(round(yout));
   145ba:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
		CalcAnalogStick(xout, yout, axis[2], axis[3], true);
   145be:	9300      	str	r3, [sp, #0]
   145c0:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
   145c4:	f7ff fe00 	bl	141c8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
   145c8:	ed9d 7a02 	vldr	s14, [sp, #8]
   145cc:	eddd 7a03 	vldr	s15, [sp, #12]
   145d0:	feb8 7a47 	vrinta.f32	s14, s14
		axis[2] = int(round(xout));
   145d4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   145d8:	fef8 7a67 	vrinta.f32	s15, s15
		axis[3] = int(round(yout));
   145dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if (axis[6] != switchd->lt) {
   145e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
		axis[2] = int(round(xout));
   145e2:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
		axis[3] = int(round(yout));
   145e6:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
        if (axis[6] != switchd->lt) {
   145ea:	792a      	ldrb	r2, [r5, #4]
   145ec:	4293      	cmp	r3, r2
   145ee:	d018      	beq.n	14622 <JoystickController::rx_data(Transfer_struct const*)+0x2ea>
            axis_changed_mask_ |= (1 << 4);
   145f0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        if (axis[5] != switchd->rt) {
   145f4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
            axis_changed_mask_ |= (1 << 4);
   145f6:	f043 0310 	orr.w	r3, r3, #16
            anychange = true;
   145fa:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
            axis[6] = switchd->lt;
   145fe:	6622      	str	r2, [r4, #96]	; 0x60
            axis_changed_mask_ |= (1 << 4);
   14600:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        if (axis[5] != switchd->rt) {
   14604:	796a      	ldrb	r2, [r5, #5]
            axis_changed_mask_ |= (1 << 4);
   14606:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
        if (axis[5] != switchd->rt) {
   1460a:	4290      	cmp	r0, r2
   1460c:	f43f aefb 	beq.w	14406 <JoystickController::rx_data(Transfer_struct const*)+0xce>
            axis_changed_mask_ |= (1 << 5);
   14610:	f043 0320 	orr.w	r3, r3, #32
            anychange = true;
   14614:	2001      	movs	r0, #1
            axis[5] = switchd->rt;
   14616:	65e2      	str	r2, [r4, #92]	; 0x5c
            anychange = true;
   14618:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
            axis_changed_mask_ |= (1 << 5);
   1461c:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
   14620:	e6f1      	b.n	14406 <JoystickController::rx_data(Transfer_struct const*)+0xce>
        if (axis[5] != switchd->rt) {
   14622:	796a      	ldrb	r2, [r5, #5]
   14624:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14626:	4293      	cmp	r3, r2
   14628:	d145      	bne.n	146b6 <JoystickController::rx_data(Transfer_struct const*)+0x37e>
        if (anychange) joystickEvent = true;
   1462a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1462e:	2b00      	cmp	r3, #0
   14630:	f43f ae8f 	beq.w	14352 <JoystickController::rx_data(Transfer_struct const*)+0x1a>
   14634:	e6e7      	b.n	14406 <JoystickController::rx_data(Transfer_struct const*)+0xce>
					sw_sendSubCmdUSB(0x48, packet, 1);
   14636:	2100      	movs	r1, #0
					packet[0] = 0x01;
   14638:	2301      	movs	r3, #1
					sw_sendSubCmdUSB(0x48, packet, 1);
   1463a:	aa04      	add	r2, sp, #16
   1463c:	9100      	str	r1, [sp, #0]
   1463e:	2148      	movs	r1, #72	; 0x48
					packet[0] = 0x01;
   14640:	f88d 3010 	strb.w	r3, [sp, #16]
					sw_sendSubCmdUSB(0x48, packet, 1);
   14644:	f7ff fae8 	bl	13c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
					connectedComplete_pending_ = 4;
   14648:	2304      	movs	r3, #4
   1464a:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   1464e:	e761      	b.n	14514 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
					sw_sendSubCmdUSB(0x40, packet, 1);
   14650:	2100      	movs	r1, #0
					packet[0] = 0x01;
   14652:	2301      	movs	r3, #1
					sw_sendSubCmdUSB(0x40, packet, 1);
   14654:	aa04      	add	r2, sp, #16
   14656:	9100      	str	r1, [sp, #0]
   14658:	2140      	movs	r1, #64	; 0x40
					packet[0] = 0x01;
   1465a:	f88d 3010 	strb.w	r3, [sp, #16]
					sw_sendSubCmdUSB(0x40, packet, 1);
   1465e:	f7ff fadb 	bl	13c18 <JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)>
					connectedComplete_pending_ = 3;
   14662:	2303      	movs	r3, #3
   14664:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   14668:	e754      	b.n	14514 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
                    sw_sendCmdUSB(0x04, SW_CMD_TIMEOUT);
   1466a:	4a0e      	ldr	r2, [pc, #56]	; (146a4 <JoystickController::rx_data(Transfer_struct const*)+0x36c>)
   1466c:	2104      	movs	r1, #4
   1466e:	f7ff fa17 	bl	13aa0 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
					connectedComplete_pending_ = 2;
   14672:	2302      	movs	r3, #2
   14674:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   14678:	e74c      	b.n	14514 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
                    sw_sendCmdUSB(0x02, SW_CMD_TIMEOUT);
   1467a:	4a0a      	ldr	r2, [pc, #40]	; (146a4 <JoystickController::rx_data(Transfer_struct const*)+0x36c>)
   1467c:	2102      	movs	r1, #2
   1467e:	f7ff fa0f 	bl	13aa0 <JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)>
					connectedComplete_pending_ = 1;
   14682:	2301      	movs	r3, #1
   14684:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
					break;
   14688:	e744      	b.n	14514 <JoystickController::rx_data(Transfer_struct const*)+0x1dc>
   1468a:	bf00      	nop
   1468c:	f3af 8000 	nop.w
   14690:	0000003f 	.word	0x0000003f
	...
   146a0:	200026c0 	.word	0x200026c0
   146a4:	0003d090 	.word	0x0003d090
            if (axis[5] != xb360d->rt) {
   146a8:	7a5b      	ldrb	r3, [r3, #9]
   146aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   146ac:	429a      	cmp	r2, r3
   146ae:	d0bc      	beq.n	1462a <JoystickController::rx_data(Transfer_struct const*)+0x2f2>
                axis_changed_mask_ |= (1 << 4);
   146b0:	e9d4 2154 	ldrd	r2, r1, [r4, #336]	; 0x150
   146b4:	e69f      	b.n	143f6 <JoystickController::rx_data(Transfer_struct const*)+0xbe>
            axis_changed_mask_ |= (1 << 4);
   146b6:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
   146ba:	e7a9      	b.n	14610 <JoystickController::rx_data(Transfer_struct const*)+0x2d8>

000146bc <JoystickController::rx_callback(Transfer_struct const*)>:
{
   146bc:	4601      	mov	r1, r0
    if (!transfer->driver) return;
   146be:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   146c0:	b108      	cbz	r0, 146c6 <JoystickController::rx_callback(Transfer_struct const*)+0xa>
    ((JoystickController *)(transfer->driver))->rx_data(transfer);
   146c2:	f7ff be39 	b.w	14338 <JoystickController::rx_data(Transfer_struct const*)>
}
   146c6:	4770      	bx	lr

000146c8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>:
{
   146c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (data[0] == 0x3f) {
   146cc:	780b      	ldrb	r3, [r1, #0]
{
   146ce:	b08d      	sub	sp, #52	; 0x34
   146d0:	4604      	mov	r4, r0
    if (data[0] == 0x3f) {
   146d2:	2b3f      	cmp	r3, #63	; 0x3f
   146d4:	f000 812e 	beq.w	14934 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x26c>
    } else if (data[0] == 0x30) {
   146d8:	2b30      	cmp	r3, #48	; 0x30
   146da:	d003      	beq.n	146e4 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1c>
}
   146dc:	2000      	movs	r0, #0
   146de:	b00d      	add	sp, #52	; 0x34
   146e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        axis_mask_ = 0x7fff;  // have all of the fields. 
   146e4:	f647 76ff 	movw	r6, #32767	; 0x7fff
   146e8:	2700      	movs	r7, #0
        if(initialPassButton_ == true) {
   146ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
        axis_mask_ = 0x7fff;  // have all of the fields. 
   146ee:	e9c0 6752 	strd	r6, r7, [r0, #328]	; 0x148
        axis_changed_mask_ = 0; // assume none for now
   146f2:	2600      	movs	r6, #0
   146f4:	2700      	movs	r7, #0
   146f6:	e9c0 6754 	strd	r6, r7, [r0, #336]	; 0x150
        uint32_t cur_buttons = data[3] | (data[4] << 8) | (data[5] << 16);
   146fa:	794a      	ldrb	r2, [r1, #5]
   146fc:	7908      	ldrb	r0, [r1, #4]
   146fe:	0412      	lsls	r2, r2, #16
   14700:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   14704:	78c8      	ldrb	r0, [r1, #3]
   14706:	4302      	orrs	r2, r0
        if(initialPassButton_ == true) {
   14708:	2b00      	cmp	r3, #0
   1470a:	f040 8167 	bne.w	149dc <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x314>
        cur_buttons = cur_buttons - buttonOffset_;
   1470e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14710:	1ad2      	subs	r2, r2, r3
        if (cur_buttons != buttons) {
   14712:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14714:	4293      	cmp	r3, r2
   14716:	d005      	beq.n	14724 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x5c>
            anychange = true;
   14718:	2301      	movs	r3, #1
            buttons = cur_buttons;
   1471a:	6462      	str	r2, [r4, #68]	; 0x44
            anychange = true;
   1471c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
            joystickEvent = true;
   14720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14724:	79cf      	ldrb	r7, [r1, #7]
        if(buttons == 0x40) {   //R1
   14726:	2a40      	cmp	r2, #64	; 0x40
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   14728:	7a8d      	ldrb	r5, [r1, #10]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   1472a:	ea4f 2c07 	mov.w	ip, r7, lsl #8
        new_axis[1] = (data[7] >> 4) | (data[8] << 4);    //yl
   1472e:	7a08      	ldrb	r0, [r1, #8]
   14730:	ea4f 1717 	mov.w	r7, r7, lsr #4
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   14734:	7a4e      	ldrb	r6, [r1, #9]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14736:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
   1473a:	798b      	ldrb	r3, [r1, #6]
        new_axis[1] = (data[7] >> 4) | (data[8] << 4);    //yl
   1473c:	ea47 1700 	orr.w	r7, r7, r0, lsl #4
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   14740:	ea4f 2005 	mov.w	r0, r5, lsl #8
        new_axis[3] = (data[10] >> 4) | (data[11] << 4);  //yr
   14744:	ea4f 1515 	mov.w	r5, r5, lsr #4
        new_axis[1] = (data[7] >> 4) | (data[8] << 4);    //yl
   14748:	f8ad 7016 	strh.w	r7, [sp, #22]
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   1474c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   14750:	ea46 0600 	orr.w	r6, r6, r0
        new_axis[3] = (data[10] >> 4) | (data[11] << 4);  //yr
   14754:	7ac8      	ldrb	r0, [r1, #11]
   14756:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   1475a:	ea43 000c 	orr.w	r0, r3, ip
        new_axis[2] = data[9] | ((data[10] & 0xF) << 8);  //xr
   1475e:	f8ad 6018 	strh.w	r6, [sp, #24]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14762:	4683      	mov	fp, r0
        new_axis[3] = (data[10] >> 4) | (data[11] << 4);  //yr
   14764:	f8ad 501a 	strh.w	r5, [sp, #26]
        new_axis[0] = data[6] | ((data[7] & 0xF) << 8);   //xl
   14768:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(buttons == 0x40) {   //R1
   1476c:	f000 814a 	beq.w	14a04 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x33c>
            new_axis[5] = 0;
   14770:	f04f 0c00 	mov.w	ip, #0
        if(buttons == 0x400000) {   //L1
   14774:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
            new_axis[5] = 0;
   14778:	f8ad c01e 	strh.w	ip, [sp, #30]
        if(buttons == 0x400000) {   //L1
   1477c:	f040 8139 	bne.w	149f2 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x32a>
            new_axis[6] = 0;
   14780:	f8ad c020 	strh.w	ip, [sp, #32]
            new_axis[4] = 1;
   14784:	f04f 0c01 	mov.w	ip, #1
   14788:	f8ad c01c 	strh.w	ip, [sp, #28]
            new_axis[7] = 0;
   1478c:	f04f 0c00 	mov.w	ip, #0
        if(buttons == 0x800080) {
   14790:	f1b2 1f80 	cmp.w	r2, #8388736	; 0x800080
            new_axis[7] = 0;
   14794:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
        if(buttons == 0x800080) {
   14798:	d102      	bne.n	147a0 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
            new_axis[6] = 0xff;
   1479a:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
   1479e:	9208      	str	r2, [sp, #32]
        sw_update_axis(8, (int16_t)(data[13]  | (data[14] << 8))); //ax
   147a0:	f9b1 200d 	ldrsh.w	r2, [r1, #13]
    if (axis[axis_index] != new_value) {
   147a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   147a6:	429a      	cmp	r2, r3
   147a8:	d009      	beq.n	147be <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xf6>
        axis_changed_mask_ |= (1 << axis_index);
   147aa:	f44f 7880 	mov.w	r8, #256	; 0x100
   147ae:	f04f 0900 	mov.w	r9, #0
        axis[axis_index] = new_value;
   147b2:	66a2      	str	r2, [r4, #104]	; 0x68
        anychange = true;
   147b4:	2201      	movs	r2, #1
        axis_changed_mask_ |= (1 << axis_index);
   147b6:	e9c4 8954 	strd	r8, r9, [r4, #336]	; 0x150
        anychange = true;
   147ba:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(9, (int16_t)(data[15]  | (data[16] << 8))); //ay
   147be:	f9b1 200f 	ldrsh.w	r2, [r1, #15]
    if (axis[axis_index] != new_value) {
   147c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   147c4:	429a      	cmp	r2, r3
   147c6:	d009      	beq.n	147dc <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x114>
        axis[axis_index] = new_value;
   147c8:	66e2      	str	r2, [r4, #108]	; 0x6c
        axis_changed_mask_ |= (1 << axis_index);
   147ca:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   147ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   147d2:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   147d6:	2201      	movs	r2, #1
   147d8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(10,  (int16_t)(data[17] | (data[18] << 8))); //az
   147dc:	f9b1 2011 	ldrsh.w	r2, [r1, #17]
    if (axis[axis_index] != new_value) {
   147e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   147e2:	429a      	cmp	r2, r3
   147e4:	d009      	beq.n	147fa <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x132>
        axis[axis_index] = new_value;
   147e6:	6722      	str	r2, [r4, #112]	; 0x70
        axis_changed_mask_ |= (1 << axis_index);
   147e8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   147ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   147f0:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   147f4:	2201      	movs	r2, #1
   147f6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(11,  (int16_t)(data[19] | (data[20] << 8)));  //gx
   147fa:	f9b1 2013 	ldrsh.w	r2, [r1, #19]
    if (axis[axis_index] != new_value) {
   147fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
   14800:	429a      	cmp	r2, r3
   14802:	d009      	beq.n	14818 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x150>
        axis[axis_index] = new_value;
   14804:	6762      	str	r2, [r4, #116]	; 0x74
        axis_changed_mask_ |= (1 << axis_index);
   14806:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1480a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1480e:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   14812:	2201      	movs	r2, #1
   14814:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(12,  (int16_t)(data[21] | (data[22] << 8))); //gy
   14818:	f9b1 2015 	ldrsh.w	r2, [r1, #21]
    if (axis[axis_index] != new_value) {
   1481c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   1481e:	429a      	cmp	r2, r3
   14820:	d009      	beq.n	14836 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x16e>
        axis[axis_index] = new_value;
   14822:	67a2      	str	r2, [r4, #120]	; 0x78
        axis_changed_mask_ |= (1 << axis_index);
   14824:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   14828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1482c:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   14830:	2201      	movs	r2, #1
   14832:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(13,  (int16_t)(data[23] | (data[24] << 8))); //gz  
   14836:	f9b1 2017 	ldrsh.w	r2, [r1, #23]
    if (axis[axis_index] != new_value) {
   1483a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1483c:	429a      	cmp	r2, r3
   1483e:	d009      	beq.n	14854 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x18c>
        axis[axis_index] = new_value;
   14840:	67e2      	str	r2, [r4, #124]	; 0x7c
        axis_changed_mask_ |= (1 << axis_index);
   14842:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   14846:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1484a:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   1484e:	2201      	movs	r2, #1
   14850:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        sw_update_axis(14,  data[2] >> 4);  //Battery level, 8=full, 6=medium, 4=low, 2=critical, 0=empty
   14854:	788a      	ldrb	r2, [r1, #2]
    if (axis[axis_index] != new_value) {
   14856:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        sw_update_axis(14,  data[2] >> 4);  //Battery level, 8=full, 6=medium, 4=low, 2=critical, 0=empty
   1485a:	0911      	lsrs	r1, r2, #4
    if (axis[axis_index] != new_value) {
   1485c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   14860:	d00a      	beq.n	14878 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1b0>
        axis_changed_mask_ |= (1 << axis_index);
   14862:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        axis[axis_index] = new_value;
   14866:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        axis_changed_mask_ |= (1 << axis_index);
   1486a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1486e:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
        anychange = true;
   14872:	2201      	movs	r2, #1
   14874:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        axis_changed_mask_ |= (1 << axis_index);
   14878:	f104 0244 	add.w	r2, r4, #68	; 0x44
   1487c:	f10d 0c14 	add.w	ip, sp, #20
   14880:	f104 0864 	add.w	r8, r4, #100	; 0x64
            axis[7] = 1;
   14884:	2100      	movs	r1, #0
                axis_changed_mask_ |= (1 << i);
   14886:	f04f 0e01 	mov.w	lr, #1
   1488a:	e001      	b.n	14890 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1c8>
            if (new_axis[i] != axis[i]) {
   1488c:	f83c 0f02 	ldrh.w	r0, [ip, #2]!
   14890:	f852 af04 	ldr.w	sl, [r2, #4]!
                axis_changed_mask_ |= (1 << i);
   14894:	fa0e f901 	lsl.w	r9, lr, r1
        for (uint8_t i = 0; i < 8; i++) {
   14898:	3101      	adds	r1, #1
            if (new_axis[i] != axis[i]) {
   1489a:	4550      	cmp	r0, sl
   1489c:	d00e      	beq.n	148bc <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1f4>
                axis[i] = new_axis[i];
   1489e:	6010      	str	r0, [r2, #0]
                axis_changed_mask_ |= (1 << i);
   148a0:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                anychange = true;
   148a4:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << i);
   148a8:	ea40 0009 	orr.w	r0, r0, r9
   148ac:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   148b0:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   148b4:	ea40 70e9 	orr.w	r0, r0, r9, asr #31
   148b8:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        for (uint8_t i = 0; i < 8; i++) {
   148bc:	4542      	cmp	r2, r8
   148be:	d1e5      	bne.n	1488c <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x1c4>
		CalcAnalogStick(xout, yout, new_axis[0], new_axis[1], true);
   148c0:	9700      	str	r7, [sp, #0]
   148c2:	2701      	movs	r7, #1
   148c4:	465b      	mov	r3, fp
   148c6:	4620      	mov	r0, r4
   148c8:	aa04      	add	r2, sp, #16
   148ca:	a903      	add	r1, sp, #12
   148cc:	9701      	str	r7, [sp, #4]
   148ce:	f7ff fc7b 	bl	141c8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
   148d2:	ed9d 7a03 	vldr	s14, [sp, #12]
   148d6:	eddd 7a04 	vldr	s15, [sp, #16]
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   148da:	4633      	mov	r3, r6
   148dc:	feb8 7a47 	vrinta.f32	s14, s14
		axis[0] = int(round(xout));
   148e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   148e4:	fef8 7a67 	vrinta.f32	s15, s15
		axis[1] = int(round(yout));
   148e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   148ec:	9500      	str	r5, [sp, #0]
   148ee:	4620      	mov	r0, r4
   148f0:	9701      	str	r7, [sp, #4]
   148f2:	aa04      	add	r2, sp, #16
		axis[0] = int(round(xout));
   148f4:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   148f8:	a903      	add	r1, sp, #12
		axis[1] = int(round(yout));
   148fa:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
		CalcAnalogStick(xout, yout, new_axis[2], new_axis[3], true);
   148fe:	f7ff fc63 	bl	141c8 <JoystickController::CalcAnalogStick(float&, float&, short, short, bool)>
   14902:	ed9d 7a03 	vldr	s14, [sp, #12]
   14906:	eddd 7a04 	vldr	s15, [sp, #16]
        initialPass_ = false;
   1490a:	2300      	movs	r3, #0
   1490c:	feb8 7a47 	vrinta.f32	s14, s14
		axis[2] = int(round(xout));
   14910:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   14914:	fef8 7a67 	vrinta.f32	s15, s15
		axis[3] = int(round(yout));
   14918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
}
   1491c:	2000      	movs	r0, #0
        joystickEvent = true;
   1491e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
        initialPass_ = false;
   14922:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		axis[2] = int(round(xout));
   14926:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
		axis[3] = int(round(yout));
   1492a:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
   1492e:	b00d      	add	sp, #52	; 0x34
   14930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sw1d->buttons != buttons) {
   14934:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        axis_mask_ = 0x1ff;
   14938:	f240 16ff 	movw	r6, #511	; 0x1ff
   1493c:	2700      	movs	r7, #0
        if (sw1d->buttons != buttons) {
   1493e:	6c42      	ldr	r2, [r0, #68]	; 0x44
        axis_mask_ = 0x1ff;
   14940:	e9c0 6752 	strd	r6, r7, [r0, #328]	; 0x148
        if (sw1d->buttons != buttons) {
   14944:	4293      	cmp	r3, r2
        axis_changed_mask_ = 0; // assume none for now
   14946:	f04f 0600 	mov.w	r6, #0
   1494a:	f04f 0700 	mov.w	r7, #0
   1494e:	e9c0 6754 	strd	r6, r7, [r0, #336]	; 0x150
        if (sw1d->buttons != buttons) {
   14952:	d005      	beq.n	14960 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x298>
            anychange = true;
   14954:	2201      	movs	r2, #1
            buttons = sw1d->buttons;
   14956:	6443      	str	r3, [r0, #68]	; 0x44
            anychange = true;
   14958:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
            joystickEvent = true;
   1495c:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
        if (sw1d->hat != axis[9]) {
   14960:	78ca      	ldrb	r2, [r1, #3]
   14962:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   14964:	4282      	cmp	r2, r0
   14966:	d008      	beq.n	1497a <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x2b2>
            axis_changed_mask_ |= (1 << 9);
   14968:	f44f 7600 	mov.w	r6, #512	; 0x200
   1496c:	2700      	movs	r7, #0
            axis[9] = sw1d->hat;
   1496e:	66e2      	str	r2, [r4, #108]	; 0x6c
            anychange = true;            
   14970:	2201      	movs	r2, #1
            axis_changed_mask_ |= (1 << 9);
   14972:	e9c4 6754 	strd	r6, r7, [r4, #336]	; 0x150
            anychange = true;            
   14976:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        if(buttons == 0x8000) { //ZL
   1497a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
            axis[7] = 1;
   1497e:	2200      	movs	r2, #0
   14980:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 14a38 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x370>
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   14984:	2701      	movs	r7, #1
        if(buttons == 0x8000) { //ZL
   14986:	fab3 f383 	clz	r3, r3
   1498a:	095b      	lsrs	r3, r3, #5
            axis[7] = 1;
   1498c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   14990:	4613      	mov	r3, r2
        for (uint8_t i = 0; i < sizeof (switch_bt_axis_order_mapping); i++) {
   14992:	eb04 0583 	add.w	r5, r4, r3, lsl #2
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   14996:	fa07 f303 	lsl.w	r3, r7, r3
            int axis_value = (uint16_t)sw1d->axis[i];
   1499a:	eb01 0042 	add.w	r0, r1, r2, lsl #1
   1499e:	3201      	adds	r2, #1
            if (axis_value != axis[switch_bt_axis_order_mapping[i]]) {
   149a0:	6cae      	ldr	r6, [r5, #72]	; 0x48
            int axis_value = (uint16_t)sw1d->axis[i];
   149a2:	8880      	ldrh	r0, [r0, #4]
            if (axis_value != axis[switch_bt_axis_order_mapping[i]]) {
   149a4:	4286      	cmp	r6, r0
   149a6:	d00d      	beq.n	149c4 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x2fc>
                axis[switch_bt_axis_order_mapping[i]] = axis_value;
   149a8:	64a8      	str	r0, [r5, #72]	; 0x48
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   149aa:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
                anychange = true;
   149ae:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
                axis_changed_mask_ |= (1 << switch_bt_axis_order_mapping[i]);
   149b2:	4318      	orrs	r0, r3
   149b4:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   149b8:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   149bc:	ea40 70e3 	orr.w	r0, r0, r3, asr #31
   149c0:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        for (uint8_t i = 0; i < sizeof (switch_bt_axis_order_mapping); i++) {
   149c4:	2a04      	cmp	r2, #4
   149c6:	d002      	beq.n	149ce <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x306>
            if (axis_value != axis[switch_bt_axis_order_mapping[i]]) {
   149c8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   149cc:	e7e1      	b.n	14992 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x2ca>
        joystickEvent = true;
   149ce:	2301      	movs	r3, #1
}
   149d0:	2000      	movs	r0, #0
        joystickEvent = true;
   149d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
   149d6:	b00d      	add	sp, #52	; 0x34
   149d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(cur_buttons == 0x8000) {
   149dc:	f5a2 4300 	sub.w	r3, r2, #32768	; 0x8000
            initialPassButton_ = false;
   149e0:	2000      	movs	r0, #0
            if(cur_buttons == 0x8000) {
   149e2:	fab3 f383 	clz	r3, r3
            initialPassButton_ = false;
   149e6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            if(cur_buttons == 0x8000) {
   149ea:	095b      	lsrs	r3, r3, #5
   149ec:	03db      	lsls	r3, r3, #15
   149ee:	63e3      	str	r3, [r4, #60]	; 0x3c
            initialPassButton_ = false;
   149f0:	e68e      	b.n	14710 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x48>
        if(buttons == 0x400040) {
   149f2:	f1b2 1f40 	cmp.w	r2, #4194368	; 0x400040
   149f6:	d10e      	bne.n	14a16 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x34e>
            new_axis[4] = 0xff;
   149f8:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
            new_axis[6] = 0;
   149fc:	f8cd c020 	str.w	ip, [sp, #32]
            new_axis[4] = 0xff;
   14a00:	9207      	str	r2, [sp, #28]
   14a02:	e6cd      	b.n	147a0 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
            new_axis[4] = 0;
   14a04:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
   14a08:	f8cd c01c 	str.w	ip, [sp, #28]
            new_axis[6] = 0;
   14a0c:	f04f 0c00 	mov.w	ip, #0
   14a10:	f8ad c020 	strh.w	ip, [sp, #32]
        if(buttons == 0x80) {       //ZR
   14a14:	e6ba      	b.n	1478c <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xc4>
        if(buttons == 0x800000) {   //ZL
   14a16:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
            new_axis[4] = 0;
   14a1a:	f8ad c01c 	strh.w	ip, [sp, #28]
        if(buttons == 0x800000) {   //ZL
   14a1e:	d102      	bne.n	14a26 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0x35e>
            new_axis[6] = 0xff;
   14a20:	22ff      	movs	r2, #255	; 0xff
   14a22:	9208      	str	r2, [sp, #32]
        if(buttons == 0x800080) {
   14a24:	e6bc      	b.n	147a0 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
        if(buttons == 0x80) {       //ZR
   14a26:	2a80      	cmp	r2, #128	; 0x80
            new_axis[6] = 0;
   14a28:	f8ad c020 	strh.w	ip, [sp, #32]
        if(buttons == 0x80) {       //ZR
   14a2c:	f47f aeae 	bne.w	1478c <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xc4>
            new_axis[7] = 0xff;
   14a30:	22ff      	movs	r2, #255	; 0xff
   14a32:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
        if(buttons == 0x800080) {
   14a36:	e6b3      	b.n	147a0 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)+0xd8>
   14a38:	20008170 	.word	0x20008170

00014a3c <JoystickController::hid_process_in_data(Transfer_struct const*)>:
{
   14a3c:	b530      	push	{r4, r5, lr}
    uint8_t *buffer = (uint8_t *)transfer->buffer;
   14a3e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
{
   14a40:	b083      	sub	sp, #12
   14a42:	4604      	mov	r4, r0
    if (*buffer) report_id_ = *buffer;
   14a44:	782b      	ldrb	r3, [r5, #0]
   14a46:	b163      	cbz	r3, 14a62 <JoystickController::hid_process_in_data(Transfer_struct const*)+0x26>
    if (!buffer || *buffer == 1) return false; // don't do report 1
   14a48:	2b01      	cmp	r3, #1
    if (*buffer) report_id_ = *buffer;
   14a4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    uint8_t cnt = transfer->length;
   14a4e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    if (!buffer || *buffer == 1) return false; // don't do report 1
   14a50:	d004      	beq.n	14a5c <JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>
	if (joystickType_ == SWITCH) {
   14a52:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    uint8_t cnt = transfer->length;
   14a56:	b2d2      	uxtb	r2, r2
	if (joystickType_ == SWITCH) {
   14a58:	2b07      	cmp	r3, #7
   14a5a:	d008      	beq.n	14a6e <JoystickController::hid_process_in_data(Transfer_struct const*)+0x32>
    if (!buffer || *buffer == 1) return false; // don't do report 1
   14a5c:	2000      	movs	r0, #0
}
   14a5e:	b003      	add	sp, #12
   14a60:	bd30      	pop	{r4, r5, pc}
	if (joystickType_ == SWITCH) {
   14a62:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    uint8_t cnt = transfer->length;
   14a66:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
	if (joystickType_ == SWITCH) {
   14a6a:	2b07      	cmp	r3, #7
   14a6c:	d1f6      	bne.n	14a5c <JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>
        if (sw_handle_usb_init_of_joystick(buffer, cnt, false))
   14a6e:	b292      	uxth	r2, r2
   14a70:	2300      	movs	r3, #0
   14a72:	4629      	mov	r1, r5
   14a74:	4620      	mov	r0, r4
   14a76:	9201      	str	r2, [sp, #4]
   14a78:	f7ff fa0a 	bl	13e90 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
   14a7c:	9a01      	ldr	r2, [sp, #4]
   14a7e:	2800      	cmp	r0, #0
   14a80:	d1ed      	bne.n	14a5e <JoystickController::hid_process_in_data(Transfer_struct const*)+0x22>
		sw_process_HID_data(buffer, cnt);
   14a82:	4629      	mov	r1, r5
   14a84:	4620      	mov	r0, r4
   14a86:	f7ff fe1f 	bl	146c8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>
        return true; // don't let main hid code process this.		
   14a8a:	2001      	movs	r0, #1
   14a8c:	e7e7      	b.n	14a5e <JoystickController::hid_process_in_data(Transfer_struct const*)+0x22>
   14a8e:	bf00      	nop

00014a90 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)>:
{
   14a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a94:	b083      	sub	sp, #12
   14a96:	460d      	mov	r5, r1
   14a98:	4604      	mov	r4, r0
   14a9a:	4690      	mov	r8, r2
    report_id_ = data[0];
   14a9c:	780e      	ldrb	r6, [r1, #0]
{
   14a9e:	af00      	add	r7, sp, #0
    if (data[0] == 1) {
   14aa0:	2e01      	cmp	r6, #1
    report_id_ = data[0];
   14aa2:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    if (data[0] == 1) {
   14aa6:	f000 80ce 	beq.w	14c46 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x1b6>
    } else if (data[0] == 0x11) {
   14aaa:	2e11      	cmp	r6, #17
   14aac:	d009      	beq.n	14ac2 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x32>
    } else if (joystickType_ == SWITCH) {
   14aae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   14ab2:	2b07      	cmp	r3, #7
   14ab4:	f000 8111 	beq.w	14cda <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x24a>
    return false;
   14ab8:	2000      	movs	r0, #0
}
   14aba:	370c      	adds	r7, #12
   14abc:	46bd      	mov	sp, r7
   14abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        axis_mask_ = 0;
   14ac2:	2300      	movs	r3, #0
   14ac4:	2200      	movs	r2, #0
    } else if (joystickType_ == SWITCH) {
   14ac6:	4669      	mov	r1, sp
        axis_mask_ = 0;
   14ac8:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
        axis_changed_mask_ = 0;
   14acc:	e9c0 2354 	strd	r2, r3, [r0, #336]	; 0x150
        uint8_t tmp_data[length - 2];
   14ad0:	f108 0305 	add.w	r3, r8, #5
   14ad4:	f1a8 0802 	sub.w	r8, r8, #2
    } else if (joystickType_ == SWITCH) {
   14ad8:	ee07 1a90 	vmov	s15, r1
        uint8_t tmp_data[length - 2];
   14adc:	08db      	lsrs	r3, r3, #3
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   14ade:	f1b8 0f00 	cmp.w	r8, #0
        uint8_t tmp_data[length - 2];
   14ae2:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
   14ae6:	469d      	mov	sp, r3
   14ae8:	46ec      	mov	ip, sp
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   14aea:	dd0a      	ble.n	14b02 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x72>
   14aec:	2300      	movs	r3, #0
   14aee:	461a      	mov	r2, r3
            tmp_data[i] = data[i + 2];
   14af0:	18e9      	adds	r1, r5, r3
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   14af2:	3301      	adds	r3, #1
   14af4:	b29b      	uxth	r3, r3
            tmp_data[i] = data[i + 2];
   14af6:	7889      	ldrb	r1, [r1, #2]
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   14af8:	4543      	cmp	r3, r8
            tmp_data[i] = data[i + 2];
   14afa:	f80c 1002 	strb.w	r1, [ip, r2]
        for (uint16_t i = 0; i < (length - 2); i++ ) {
   14afe:	461a      	mov	r2, r3
   14b00:	dbf6      	blt.n	14af0 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x60>
        tmp_data[10] = tmp_data[5] & ((1 << 4) - 1);
   14b02:	f89c 1005 	ldrb.w	r1, [ip, #5]
        tmp_data[7] = (tmp_data[7] >> 0) & 1;
   14b06:	f89c 2007 	ldrb.w	r2, [ip, #7]
        tmp_data[5] = tmp_data[5] >> 4;
   14b0a:	090b      	lsrs	r3, r1, #4
        uint32_t cur_buttons = ((uint32_t)tmp_data[7] << 12) | (((uint32_t)tmp_data[6] * 0x10)) | ((uint16_t)tmp_data[5] ) ;
   14b0c:	f89c 5006 	ldrb.w	r5, [ip, #6]
        tmp_data[7] = (tmp_data[7] >> 0) & 1;
   14b10:	f002 0201 	and.w	r2, r2, #1
        tmp_data[10] = tmp_data[5] & ((1 << 4) - 1);
   14b14:	f001 000f 	and.w	r0, r1, #15
        tmp_data[5] = tmp_data[5] >> 4;
   14b18:	f88c 3005 	strb.w	r3, [ip, #5]
        uint32_t cur_buttons = ((uint32_t)tmp_data[7] << 12) | (((uint32_t)tmp_data[6] * 0x10)) | ((uint16_t)tmp_data[5] ) ;
   14b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
        tmp_data[7] = (tmp_data[7] >> 0) & 1;
   14b20:	f88c 2007 	strb.w	r2, [ip, #7]
        uint32_t cur_buttons = ((uint32_t)tmp_data[7] << 12) | (((uint32_t)tmp_data[6] * 0x10)) | ((uint16_t)tmp_data[5] ) ;
   14b24:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
        if (tmp_data[10] < 8) cur_buttons |= dpad_to_buttons[tmp_data[10]];
   14b28:	070a      	lsls	r2, r1, #28
        tmp_data[10] = tmp_data[5] & ((1 << 4) - 1);
   14b2a:	f88c 000a 	strb.w	r0, [ip, #10]
        if (tmp_data[10] < 8) cur_buttons |= dpad_to_buttons[tmp_data[10]];
   14b2e:	d403      	bmi.n	14b38 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xa8>
   14b30:	4ac7      	ldr	r2, [pc, #796]	; (14e50 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3c0>)
   14b32:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   14b36:	4313      	orrs	r3, r2
        if (cur_buttons != buttons) {
   14b38:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14b3a:	429a      	cmp	r2, r3
   14b3c:	d003      	beq.n	14b46 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xb6>
            joystickEvent = true;   // something changed.
   14b3e:	2201      	movs	r2, #1
            buttons = cur_buttons;
   14b40:	6463      	str	r3, [r4, #68]	; 0x44
            joystickEvent = true;   // something changed.
   14b42:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        axis_mask_ = 0x27;  // assume bits 0, 1, 2, 5
   14b46:	2227      	movs	r2, #39	; 0x27
   14b48:	2300      	movs	r3, #0
   14b4a:	f104 0144 	add.w	r1, r4, #68	; 0x44
   14b4e:	4666      	mov	r6, ip
   14b50:	f104 0e50 	add.w	lr, r4, #80	; 0x50
   14b54:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
        mask = 0x1;
   14b58:	2301      	movs	r3, #1
   14b5a:	2200      	movs	r2, #0
            if (axis[i] != tmp_data[i + 1]) {
   14b5c:	f851 0f04 	ldr.w	r0, [r1, #4]!
   14b60:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   14b64:	42a8      	cmp	r0, r5
   14b66:	d00a      	beq.n	14b7e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xee>
                axis_changed_mask_ |= mask;
   14b68:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   14b6c:	4318      	orrs	r0, r3
   14b6e:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
   14b72:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   14b76:	4310      	orrs	r0, r2
   14b78:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
                axis[i] = tmp_data[i + 1];
   14b7c:	600d      	str	r5, [r1, #0]
            mask <<= 1; // shift down the mask.
   14b7e:	18db      	adds	r3, r3, r3
   14b80:	4152      	adcs	r2, r2
        for (uint16_t i = 0; i < 3; i++) {
   14b82:	4571      	cmp	r1, lr
   14b84:	d1ea      	bne.n	14b5c <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0xcc>
        if (axis[5] != tmp_data[4]) {
   14b86:	f89c 2004 	ldrb.w	r2, [ip, #4]
   14b8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14b8c:	4293      	cmp	r3, r2
   14b8e:	d006      	beq.n	14b9e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x10e>
            axis_changed_mask_ |= (1 << 5);
   14b90:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
            axis[5] = tmp_data[4];
   14b94:	65e2      	str	r2, [r4, #92]	; 0x5c
            axis_changed_mask_ |= (1 << 5);
   14b96:	f043 0320 	orr.w	r3, r3, #32
   14b9a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        if (axis[3] != tmp_data[8]) {
   14b9e:	f89c 2008 	ldrb.w	r2, [ip, #8]
   14ba2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14ba4:	4293      	cmp	r3, r2
   14ba6:	d006      	beq.n	14bb6 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x126>
            axis_changed_mask_ |= (1 << 3);
   14ba8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
            axis[3] = tmp_data[8];
   14bac:	6562      	str	r2, [r4, #84]	; 0x54
            axis_changed_mask_ |= (1 << 3);
   14bae:	f043 0308 	orr.w	r3, r3, #8
   14bb2:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        if (axis[4] != tmp_data[9]) {
   14bb6:	f89c 2009 	ldrb.w	r2, [ip, #9]
   14bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14bbc:	4293      	cmp	r3, r2
   14bbe:	d006      	beq.n	14bce <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x13e>
            axis_changed_mask_ |= (1 << 4);
   14bc0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
            axis[4] = tmp_data[9];
   14bc4:	65a2      	str	r2, [r4, #88]	; 0x58
            axis_changed_mask_ |= (1 << 4);
   14bc6:	f043 0310 	orr.w	r3, r3, #16
   14bca:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        mask = 0x1;
   14bce:	f04f 0e00 	mov.w	lr, #0
   14bd2:	f10c 0c05 	add.w	ip, ip, #5
   14bd6:	f104 0160 	add.w	r1, r4, #96	; 0x60
   14bda:	f504 79a4 	add.w	r9, r4, #328	; 0x148
   14bde:	f04f 0827 	mov.w	r8, #39	; 0x27
   14be2:	2301      	movs	r3, #1
   14be4:	4672      	mov	r2, lr
            axis_mask_ |= mask;
   14be6:	ea4e 0002 	orr.w	r0, lr, r2
            if (tmp_data[i] != axis[i]) {
   14bea:	f851 ab04 	ldr.w	sl, [r1], #4
            axis_mask_ |= mask;
   14bee:	ea48 0603 	orr.w	r6, r8, r3
   14bf2:	4605      	mov	r5, r0
   14bf4:	6078      	str	r0, [r7, #4]
            if (tmp_data[i] != axis[i]) {
   14bf6:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
            axis_mask_ |= mask;
   14bfa:	46b0      	mov	r8, r6
   14bfc:	46ae      	mov	lr, r5
            if (tmp_data[i] != axis[i]) {
   14bfe:	4550      	cmp	r0, sl
   14c00:	d00b      	beq.n	14c1a <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x18a>
                axis_changed_mask_ |= mask;
   14c02:	f8d4 5150 	ldr.w	r5, [r4, #336]	; 0x150
   14c06:	ea45 0a03 	orr.w	sl, r5, r3
   14c0a:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
   14c0e:	ea45 0b02 	orr.w	fp, r5, r2
   14c12:	e9c4 ab54 	strd	sl, fp, [r4, #336]	; 0x150
                axis[i] = tmp_data[i];
   14c16:	f841 0c04 	str.w	r0, [r1, #-4]
            mask <<= 1; // shift down the mask.
   14c1a:	18db      	adds	r3, r3, r3
   14c1c:	4152      	adcs	r2, r2
        for (uint16_t i = 6; i < (64); i++ ) {
   14c1e:	4549      	cmp	r1, r9
   14c20:	d1e1      	bne.n	14be6 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x156>
        joystickEvent = true;
   14c22:	2301      	movs	r3, #1
   14c24:	687a      	ldr	r2, [r7, #4]
   14c26:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
    return false;
   14c2a:	2000      	movs	r0, #0
        joystickEvent = true;
   14c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
   14c30:	370c      	adds	r7, #12
        connected_ = true;
   14c32:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
   14c36:	ee17 3a90 	vmov	r3, s15
   14c3a:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
   14c3e:	469d      	mov	sp, r3
}
   14c40:	46bd      	mov	sp, r7
   14c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (length > TOTAL_AXIS_COUNT) length = TOTAL_AXIS_COUNT;   // don't overflow arrays...
   14c46:	2a40      	cmp	r2, #64	; 0x40
        if (joystickType_ == PS3) {
   14c48:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   14c4c:	4694      	mov	ip, r2
   14c4e:	bf28      	it	cs
   14c50:	f04f 0c40 	movcs.w	ip, #64	; 0x40
   14c54:	2b01      	cmp	r3, #1
   14c56:	d04c      	beq.n	14cf2 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x262>
        } else if (joystickType_ == PS3_MOTION) {
   14c58:	2b05      	cmp	r3, #5
   14c5a:	f000 80bd 	beq.w	14dd8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x348>
        } else if (joystickType_ == XBOXONE) {
   14c5e:	2b03      	cmp	r3, #3
   14c60:	f000 80f8 	beq.w	14e54 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3c4>
            axis_mask_ = 0;
   14c64:	2300      	movs	r3, #0
   14c66:	2200      	movs	r2, #0
   14c68:	e9c0 2352 	strd	r2, r3, [r0, #328]	; 0x148
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14c6c:	e9d0 3154 	ldrd	r3, r1, [r0, #336]	; 0x150
            for (uint16_t i = 0; i < length; i++ ) {
   14c70:	f1b8 0f00 	cmp.w	r8, #0
   14c74:	d020      	beq.n	14cb8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14c76:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14c7a:	2500      	movs	r5, #0
   14c7c:	f100 0944 	add.w	r9, r0, #68	; 0x44
   14c80:	46ae      	mov	lr, r5
            for (uint16_t i = 0; i < length; i++ ) {
   14c82:	4628      	mov	r0, r5
            uint64_t mask = 0x1;
   14c84:	462a      	mov	r2, r5
                axis_mask_ |= mask;
   14c86:	4335      	orrs	r5, r6
   14c88:	ea42 0e0e 	orr.w	lr, r2, lr
                if (data[i] != axis[i]) {
   14c8c:	f859 af04 	ldr.w	sl, [r9, #4]!
            for (uint16_t i = 0; i < length; i++ ) {
   14c90:	3001      	adds	r0, #1
                axis_mask_ |= mask;
   14c92:	e9c4 5e52 	strd	r5, lr, [r4, #328]	; 0x148
                if (data[i] != axis[i]) {
   14c96:	f818 bf01 	ldrb.w	fp, [r8, #1]!
            for (uint16_t i = 0; i < length; i++ ) {
   14c9a:	b280      	uxth	r0, r0
                if (data[i] != axis[i]) {
   14c9c:	45d3      	cmp	fp, sl
   14c9e:	d007      	beq.n	14cb0 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x220>
                    axis_changed_mask_ |= mask;
   14ca0:	4333      	orrs	r3, r6
   14ca2:	4311      	orrs	r1, r2
   14ca4:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i] = data[i];
   14ca8:	f898 a000 	ldrb.w	sl, [r8]
   14cac:	f8c9 a000 	str.w	sl, [r9]
                mask <<= 1; // shift down the mask.
   14cb0:	19b6      	adds	r6, r6, r6
   14cb2:	4152      	adcs	r2, r2
            for (uint16_t i = 0; i < length; i++ ) {
   14cb4:	4584      	cmp	ip, r0
   14cb6:	d8e6      	bhi.n	14c86 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x1f6>
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14cb8:	e9d4 0256 	ldrd	r0, r2, [r4, #344]	; 0x158
   14cbc:	4003      	ands	r3, r0
   14cbe:	4011      	ands	r1, r2
   14cc0:	430b      	orrs	r3, r1
   14cc2:	d002      	beq.n	14cca <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x23a>
            joystickEvent = true;
   14cc4:	2301      	movs	r3, #1
   14cc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        connected_ = true;
   14cca:	2301      	movs	r3, #1
}
   14ccc:	370c      	adds	r7, #12
        return true;
   14cce:	4618      	mov	r0, r3
        connected_ = true;
   14cd0:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   14cd4:	46bd      	mov	sp, r7
   14cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sw_handle_bt_init_of_joystick(data, length, false))
   14cda:	2300      	movs	r3, #0
   14cdc:	f7ff f9b4 	bl	14048 <JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)>
   14ce0:	2800      	cmp	r0, #0
   14ce2:	f47f aeea 	bne.w	14aba <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2a>
        return sw_process_HID_data(data, length);
   14ce6:	4642      	mov	r2, r8
   14ce8:	4629      	mov	r1, r5
   14cea:	4620      	mov	r0, r4
   14cec:	f7ff fcec 	bl	146c8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>
   14cf0:	e6e3      	b.n	14aba <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2a>
            uint32_t cur_buttons = data[2] | ((uint16_t)data[3] << 8) | ((uint32_t)data[4] << 16);
   14cf2:	7909      	ldrb	r1, [r1, #4]
   14cf4:	886a      	ldrh	r2, [r5, #2]
   14cf6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
            if (cur_buttons != buttons) {
   14cfa:	6c41      	ldr	r1, [r0, #68]	; 0x44
   14cfc:	4291      	cmp	r1, r2
   14cfe:	d002      	beq.n	14d06 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x276>
                buttons = cur_buttons;
   14d00:	6442      	str	r2, [r0, #68]	; 0x44
                joystickEvent = true;   // something changed.
   14d02:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
            axis_mask_ = 0x27;  // assume bits 0, 1, 2, 5
   14d06:	2227      	movs	r2, #39	; 0x27
   14d08:	2300      	movs	r3, #0
   14d0a:	f104 0644 	add.w	r6, r4, #68	; 0x44
   14d0e:	f105 0e05 	add.w	lr, r5, #5
   14d12:	f104 0950 	add.w	r9, r4, #80	; 0x50
            uint64_t mask = 0x1;
   14d16:	2000      	movs	r0, #0
            axis_mask_ = 0x27;  // assume bits 0, 1, 2, 5
   14d18:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14d1c:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
            uint64_t mask = 0x1;
   14d20:	2201      	movs	r2, #1
                if (axis[i] != data[i + 6]) {
   14d22:	f81e af01 	ldrb.w	sl, [lr, #1]!
   14d26:	f856 bf04 	ldr.w	fp, [r6, #4]!
   14d2a:	45d3      	cmp	fp, sl
   14d2c:	d007      	beq.n	14d3e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2ae>
                    axis_changed_mask_ |= mask;
   14d2e:	4313      	orrs	r3, r2
   14d30:	4301      	orrs	r1, r0
   14d32:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i] = data[i + 6];
   14d36:	f89e a000 	ldrb.w	sl, [lr]
   14d3a:	f8c6 a000 	str.w	sl, [r6]
                mask <<= 1; // shift down the mask.
   14d3e:	1892      	adds	r2, r2, r2
   14d40:	4140      	adcs	r0, r0
            for (uint16_t i = 0; i < 3; i++) {
   14d42:	45b1      	cmp	r9, r6
   14d44:	d1ed      	bne.n	14d22 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x292>
            if (axis[5] != data[9]) {
   14d46:	7a68      	ldrb	r0, [r5, #9]
   14d48:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   14d4a:	4282      	cmp	r2, r0
   14d4c:	d005      	beq.n	14d5a <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2ca>
                axis_changed_mask_ |= (1 << 5);
   14d4e:	f043 0320 	orr.w	r3, r3, #32
   14d52:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                axis[5] = data[9];
   14d56:	7a6a      	ldrb	r2, [r5, #9]
   14d58:	65e2      	str	r2, [r4, #92]	; 0x5c
            if (axis[3] != data[18]) {
   14d5a:	7ca8      	ldrb	r0, [r5, #18]
   14d5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
   14d5e:	4282      	cmp	r2, r0
   14d60:	d005      	beq.n	14d6e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2de>
                axis_changed_mask_ |= (1 << 3);
   14d62:	f043 0308 	orr.w	r3, r3, #8
   14d66:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                axis[3] = data[18];
   14d6a:	7caa      	ldrb	r2, [r5, #18]
   14d6c:	6562      	str	r2, [r4, #84]	; 0x54
            if (axis[4] != data[19]) {
   14d6e:	7ce8      	ldrb	r0, [r5, #19]
   14d70:	6da2      	ldr	r2, [r4, #88]	; 0x58
   14d72:	4282      	cmp	r2, r0
   14d74:	d005      	beq.n	14d82 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x2f2>
                axis_changed_mask_ |= (1 << 4);
   14d76:	f043 0310 	orr.w	r3, r3, #16
   14d7a:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                axis[4] = data[19];
   14d7e:	7cea      	ldrb	r2, [r5, #19]
   14d80:	65a2      	str	r2, [r4, #88]	; 0x58
            for (uint16_t i = 10; i < length; i++ ) {
   14d82:	f1b8 0f0a 	cmp.w	r8, #10
   14d86:	d997      	bls.n	14cb8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14d88:	f105 0a09 	add.w	sl, r5, #9
   14d8c:	2500      	movs	r5, #0
   14d8e:	f104 096c 	add.w	r9, r4, #108	; 0x6c
   14d92:	f04f 0827 	mov.w	r8, #39	; 0x27
   14d96:	46d6      	mov	lr, sl
   14d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14d9c:	4628      	mov	r0, r5
                axis_mask_ |= mask;
   14d9e:	ea42 0808 	orr.w	r8, r2, r8
   14da2:	4305      	orrs	r5, r0
                if (data[i] != axis[i]) {
   14da4:	f859 6f04 	ldr.w	r6, [r9, #4]!
                axis_mask_ |= mask;
   14da8:	e9c4 8552 	strd	r8, r5, [r4, #328]	; 0x148
                if (data[i] != axis[i]) {
   14dac:	f81e bf01 	ldrb.w	fp, [lr, #1]!
   14db0:	45b3      	cmp	fp, r6
   14db2:	d007      	beq.n	14dc4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x334>
                    axis_changed_mask_ |= mask;
   14db4:	4313      	orrs	r3, r2
   14db6:	4301      	orrs	r1, r0
   14db8:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i] = data[i];
   14dbc:	f89e 6000 	ldrb.w	r6, [lr]
   14dc0:	f8c9 6000 	str.w	r6, [r9]
            for (uint16_t i = 10; i < length; i++ ) {
   14dc4:	f10e 060a 	add.w	r6, lr, #10
                mask <<= 1; // shift down the mask.
   14dc8:	1892      	adds	r2, r2, r2
            for (uint16_t i = 10; i < length; i++ ) {
   14dca:	eba6 060a 	sub.w	r6, r6, sl
                mask <<= 1; // shift down the mask.
   14dce:	4140      	adcs	r0, r0
            for (uint16_t i = 10; i < length; i++ ) {
   14dd0:	b2b6      	uxth	r6, r6
   14dd2:	45b4      	cmp	ip, r6
   14dd4:	d8e3      	bhi.n	14d9e <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x30e>
   14dd6:	e76f      	b.n	14cb8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
            uint32_t cur_buttons = data[1] | ((uint16_t)data[2] << 8) | ((uint32_t)data[3] << 16);
   14dd8:	78ca      	ldrb	r2, [r1, #3]
   14dda:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   14dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            if (cur_buttons != buttons) {
   14de2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   14de4:	429a      	cmp	r2, r3
   14de6:	d002      	beq.n	14dee <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x35e>
                buttons = cur_buttons;
   14de8:	6443      	str	r3, [r0, #68]	; 0x44
                joystickEvent = true;   // something changed.
   14dea:	f880 6042 	strb.w	r6, [r0, #66]	; 0x42
            axis_mask_ = 0; // assume bits 0, 1, 2, 5
   14dee:	2200      	movs	r2, #0
   14df0:	2300      	movs	r3, #0
            for (uint16_t i = 5; i < length; i++ ) {
   14df2:	f1b8 0f05 	cmp.w	r8, #5
            axis_mask_ = 0; // assume bits 0, 1, 2, 5
   14df6:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
            for (uint16_t i = 5; i < length; i++ ) {
   14dfa:	d978      	bls.n	14eee <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x45e>
   14dfc:	f105 0a04 	add.w	sl, r5, #4
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14e00:	2500      	movs	r5, #0
   14e02:	f104 0944 	add.w	r9, r4, #68	; 0x44
            mask = 0x1 << 10;   // setup for other bits
   14e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14e0a:	46d6      	mov	lr, sl
   14e0c:	46a8      	mov	r8, r5
            mask = 0x1 << 10;   // setup for other bits
   14e0e:	4628      	mov	r0, r5
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14e10:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
                axis_mask_ |= mask;
   14e14:	4315      	orrs	r5, r2
   14e16:	ea40 0808 	orr.w	r8, r0, r8
                if (data[i] != axis[i - 5]) {
   14e1a:	f859 6f04 	ldr.w	r6, [r9, #4]!
                axis_mask_ |= mask;
   14e1e:	e9c4 5852 	strd	r5, r8, [r4, #328]	; 0x148
                if (data[i] != axis[i - 5]) {
   14e22:	f81e bf01 	ldrb.w	fp, [lr, #1]!
   14e26:	45b3      	cmp	fp, r6
   14e28:	d007      	beq.n	14e3a <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3aa>
                    axis_changed_mask_ |= mask;
   14e2a:	4313      	orrs	r3, r2
   14e2c:	4301      	orrs	r1, r0
   14e2e:	e9c4 3154 	strd	r3, r1, [r4, #336]	; 0x150
                    axis[i - 5] = data[i];
   14e32:	f89e 6000 	ldrb.w	r6, [lr]
   14e36:	f8c9 6000 	str.w	r6, [r9]
            for (uint16_t i = 5; i < length; i++ ) {
   14e3a:	f10e 0605 	add.w	r6, lr, #5
                mask <<= 1; // shift down the mask.
   14e3e:	1892      	adds	r2, r2, r2
            for (uint16_t i = 5; i < length; i++ ) {
   14e40:	eba6 060a 	sub.w	r6, r6, sl
                mask <<= 1; // shift down the mask.
   14e44:	4140      	adcs	r0, r0
            for (uint16_t i = 5; i < length; i++ ) {
   14e46:	b2b6      	uxth	r6, r6
   14e48:	45b4      	cmp	ip, r6
   14e4a:	d8e3      	bhi.n	14e14 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x384>
   14e4c:	e734      	b.n	14cb8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14e4e:	bf00      	nop
   14e50:	20008174 	.word	0x20008174
            axis_mask_ = 0x3f;
   14e54:	203f      	movs	r0, #63	; 0x3f
   14e56:	2100      	movs	r1, #0
                if (xb1d->buttons != buttons) {
   14e58:	6c62      	ldr	r2, [r4, #68]	; 0x44
            axis_mask_ = 0x3f;
   14e5a:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
            axis_changed_mask_ = 0; // assume none for now
   14e5e:	2000      	movs	r0, #0
   14e60:	2100      	movs	r1, #0
   14e62:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
                if (xb1d->buttons != buttons) {
   14e66:	f8d5 300d 	ldr.w	r3, [r5, #13]
   14e6a:	4293      	cmp	r3, r2
   14e6c:	d004      	beq.n	14e78 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3e8>
                    buttons = xb1d->buttons;
   14e6e:	6463      	str	r3, [r4, #68]	; 0x44
                    anychange = true;
   14e70:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
                    joystickEvent = true;
   14e74:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
            mask = 0x1 << 10;   // setup for other bits
   14e78:	f04f 0c00 	mov.w	ip, #0
   14e7c:	f8df e074 	ldr.w	lr, [pc, #116]	; 14ef4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x464>
                        axis_changed_mask_ |= (1 << xbox_bt_axis_order_mapping[i]);
   14e80:	f04f 0801 	mov.w	r8, #1
            mask = 0x1 << 10;   // setup for other bits
   14e84:	4662      	mov	r2, ip
   14e86:	e9d4 a154 	ldrd	sl, r1, [r4, #336]	; 0x150
   14e8a:	e019      	b.n	14ec0 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x430>
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14e8c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14e90:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
   14e94:	4298      	cmp	r0, r3
   14e96:	d00d      	beq.n	14eb4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x424>
                        axis_changed_mask_ |= (1 << xbox_bt_axis_order_mapping[i]);
   14e98:	fa08 f202 	lsl.w	r2, r8, r2
                        axis[xbox_bt_axis_order_mapping[i]] = axis_value;
   14e9c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
                        anychange = true;
   14ea0:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
                        axis_changed_mask_ |= (1 << xbox_bt_axis_order_mapping[i]);
   14ea4:	ea4a 0a02 	orr.w	sl, sl, r2
   14ea8:	ea41 71e2 	orr.w	r1, r1, r2, asr #31
   14eac:	e9c4 a154 	strd	sl, r1, [r4, #336]	; 0x150
                for (uint8_t i = 0; i < sizeof (xbox_axis_order_mapping); i++) {
   14eb0:	2e06      	cmp	r6, #6
   14eb2:	d017      	beq.n	14ee4 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x454>
   14eb4:	3601      	adds	r6, #1
   14eb6:	f10c 0c01 	add.w	ip, ip, #1
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14eba:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   14ebe:	b2f6      	uxtb	r6, r6
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14ec0:	f1bc 0f03 	cmp.w	ip, #3
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14ec4:	f102 0912 	add.w	r9, r2, #18
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14ec8:	eb05 004c 	add.w	r0, r5, ip, lsl #1
   14ecc:	d9de      	bls.n	14e8c <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x3fc>
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14ece:	f102 0912 	add.w	r9, r2, #18
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14ed2:	eb05 004c 	add.w	r0, r5, ip, lsl #1
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14ed6:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
                    int axis_value = (i < 4) ? (int)(uint16_t)xb1d->axis[i] : xb1d->axis[i];
   14eda:	f9b0 0001 	ldrsh.w	r0, [r0, #1]
                    if (axis_value != axis[xbox_bt_axis_order_mapping[i]]) {
   14ede:	4283      	cmp	r3, r0
   14ee0:	d1da      	bne.n	14e98 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x408>
   14ee2:	e7e5      	b.n	14eb0 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x420>
                joystickEvent = true;
   14ee4:	2201      	movs	r2, #1
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14ee6:	4653      	mov	r3, sl
                joystickEvent = true;
   14ee8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   14eec:	e6e4      	b.n	14cb8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
        if (axis_changed_mask_ & axis_change_notify_mask_)
   14eee:	e9d4 3154 	ldrd	r3, r1, [r4, #336]	; 0x150
   14ef2:	e6e1      	b.n	14cb8 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)+0x228>
   14ef4:	20008194 	.word	0x20008194

00014ef8 <non-virtual thunk to JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)>:
    virtual bool process_bluetooth_HID_data(const uint8_t *data, uint16_t length);
   14ef8:	f1a0 0018 	sub.w	r0, r0, #24
   14efc:	f7ff bdc8 	b.w	14a90 <JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)>

00014f00 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)>:
   14f00:	b530      	push	{r4, r5, lr}
   14f02:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   14f04:	b083      	sub	sp, #12
   14f06:	782b      	ldrb	r3, [r5, #0]
   14f08:	b163      	cbz	r3, 14f24 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x24>
   14f0a:	2b01      	cmp	r3, #1
   14f0c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
   14f10:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   14f12:	d004      	beq.n	14f1e <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x1e>
   14f14:	f890 3020 	ldrb.w	r3, [r0, #32]
   14f18:	b2d2      	uxtb	r2, r2
   14f1a:	2b07      	cmp	r3, #7
   14f1c:	d008      	beq.n	14f30 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x30>
   14f1e:	2000      	movs	r0, #0
   14f20:	b003      	add	sp, #12
   14f22:	bd30      	pop	{r4, r5, pc}
   14f24:	f890 3020 	ldrb.w	r3, [r0, #32]
   14f28:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   14f2c:	2b07      	cmp	r3, #7
   14f2e:	d1f6      	bne.n	14f1e <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x1e>
   14f30:	f1a0 040c 	sub.w	r4, r0, #12
   14f34:	b292      	uxth	r2, r2
   14f36:	2300      	movs	r3, #0
   14f38:	4629      	mov	r1, r5
   14f3a:	4620      	mov	r0, r4
   14f3c:	9201      	str	r2, [sp, #4]
   14f3e:	f7fe ffa7 	bl	13e90 <JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)>
   14f42:	9a01      	ldr	r2, [sp, #4]
   14f44:	2800      	cmp	r0, #0
   14f46:	d1eb      	bne.n	14f20 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>
   14f48:	4629      	mov	r1, r5
   14f4a:	4620      	mov	r0, r4
   14f4c:	f7ff fbbc 	bl	146c8 <JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)>
   14f50:	2001      	movs	r0, #1
   14f52:	e7e5      	b.n	14f20 <non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)+0x20>

00014f54 <_GLOBAL__sub_I_ack_rvd>:
struct SWProIMUCalibration {
   14f54:	4a07      	ldr	r2, [pc, #28]	; (14f74 <_GLOBAL__sub_I_ack_rvd+0x20>)
   14f56:	4b08      	ldr	r3, [pc, #32]	; (14f78 <_GLOBAL__sub_I_ack_rvd+0x24>)
   14f58:	6e50      	ldr	r0, [r2, #100]	; 0x64
   14f5a:	f8b2 c068 	ldrh.w	ip, [r2, #104]	; 0x68
   14f5e:	f8b2 1070 	ldrh.w	r1, [r2, #112]	; 0x70
   14f62:	f8c3 0006 	str.w	r0, [r3, #6]
   14f66:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
   14f68:	f8a3 c00a 	strh.w	ip, [r3, #10]
   14f6c:	82d9      	strh	r1, [r3, #22]
   14f6e:	f8c3 0012 	str.w	r0, [r3, #18]
}
   14f72:	4770      	bx	lr
   14f74:	20002124 	.word	0x20002124
   14f78:	2000e6dc 	.word	0x2000e6dc

00014f7c <USBHost::init_Device_Pipe_Transfer_memory()>:
{
   14f7c:	b430      	push	{r4, r5}
	*(Device_t **)device = free_Device_list;
   14f7e:	4c0d      	ldr	r4, [pc, #52]	; (14fb4 <USBHost::init_Device_Pipe_Transfer_memory()+0x38>)
	*(Pipe_t **)pipe = free_Pipe_list;
   14f80:	490d      	ldr	r1, [pc, #52]	; (14fb8 <USBHost::init_Device_Pipe_Transfer_memory()+0x3c>)
	*(Device_t **)device = free_Device_list;
   14f82:	6825      	ldr	r5, [r4, #0]
   14f84:	4a0d      	ldr	r2, [pc, #52]	; (14fbc <USBHost::init_Device_Pipe_Transfer_memory()+0x40>)
	*(Transfer_t **)transfer = free_Transfer_list;
   14f86:	4b0e      	ldr	r3, [pc, #56]	; (14fc0 <USBHost::init_Device_Pipe_Transfer_memory()+0x44>)
	*(Device_t **)device = free_Device_list;
   14f88:	6015      	str	r5, [r2, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14f8a:	480e      	ldr	r0, [pc, #56]	; (14fc4 <USBHost::init_Device_Pipe_Transfer_memory()+0x48>)
	*(Pipe_t **)pipe = free_Pipe_list;
   14f8c:	680d      	ldr	r5, [r1, #0]
	free_Device_list = device;
   14f8e:	6022      	str	r2, [r4, #0]
	*(Pipe_t **)pipe = free_Pipe_list;
   14f90:	4a0d      	ldr	r2, [pc, #52]	; (14fc8 <USBHost::init_Device_Pipe_Transfer_memory()+0x4c>)
	*(Transfer_t **)transfer = free_Transfer_list;
   14f92:	6804      	ldr	r4, [r0, #0]
	free_Pipe_list = pipe;
   14f94:	600a      	str	r2, [r1, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14f96:	4619      	mov	r1, r3
	*(Pipe_t **)pipe = free_Pipe_list;
   14f98:	6015      	str	r5, [r2, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   14f9a:	461a      	mov	r2, r3
   14f9c:	f103 0540 	add.w	r5, r3, #64	; 0x40
   14fa0:	601c      	str	r4, [r3, #0]
   14fa2:	641b      	str	r3, [r3, #64]	; 0x40
   14fa4:	f842 5f80 	str.w	r5, [r2, #128]!
   14fa8:	f841 2fc0 	str.w	r2, [r1, #192]!
	for (Transfer_t *transfer = transfers ; transfer < end; transfer++) {
   14fac:	6001      	str	r1, [r0, #0]
}
   14fae:	bc30      	pop	{r4, r5}
   14fb0:	4770      	bx	lr
   14fb2:	bf00      	nop
   14fb4:	2000e73c 	.word	0x2000e73c
   14fb8:	2000e738 	.word	0x2000e738
   14fbc:	2000e714 	.word	0x2000e714
   14fc0:	2000b140 	.word	0x2000b140
   14fc4:	2000e848 	.word	0x2000e848
   14fc8:	2000b0e0 	.word	0x2000b0e0

00014fcc <USBHost::allocate_Device()>:
	Device_t *device = free_Device_list;
   14fcc:	4b02      	ldr	r3, [pc, #8]	; (14fd8 <USBHost::allocate_Device()+0xc>)
   14fce:	6818      	ldr	r0, [r3, #0]
	if (device) free_Device_list = *(Device_t **)device;
   14fd0:	b108      	cbz	r0, 14fd6 <USBHost::allocate_Device()+0xa>
   14fd2:	6802      	ldr	r2, [r0, #0]
   14fd4:	601a      	str	r2, [r3, #0]
}
   14fd6:	4770      	bx	lr
   14fd8:	2000e73c 	.word	0x2000e73c

00014fdc <USBHost::free_Device(Device_struct*)>:
	*(Device_t **)device = free_Device_list;
   14fdc:	4b02      	ldr	r3, [pc, #8]	; (14fe8 <USBHost::free_Device(Device_struct*)+0xc>)
   14fde:	681a      	ldr	r2, [r3, #0]
	free_Device_list = device;
   14fe0:	6018      	str	r0, [r3, #0]
	*(Device_t **)device = free_Device_list;
   14fe2:	6002      	str	r2, [r0, #0]
}
   14fe4:	4770      	bx	lr
   14fe6:	bf00      	nop
   14fe8:	2000e73c 	.word	0x2000e73c

00014fec <USBHost::allocate_Pipe()>:
	Pipe_t *pipe = free_Pipe_list;
   14fec:	4b02      	ldr	r3, [pc, #8]	; (14ff8 <USBHost::allocate_Pipe()+0xc>)
   14fee:	6818      	ldr	r0, [r3, #0]
	if (pipe) free_Pipe_list = *(Pipe_t **)pipe;
   14ff0:	b108      	cbz	r0, 14ff6 <USBHost::allocate_Pipe()+0xa>
   14ff2:	6802      	ldr	r2, [r0, #0]
   14ff4:	601a      	str	r2, [r3, #0]
}
   14ff6:	4770      	bx	lr
   14ff8:	2000e738 	.word	0x2000e738

00014ffc <USBHost::free_Pipe(Pipe_struct*)>:
	*(Pipe_t **)pipe = free_Pipe_list;
   14ffc:	4b02      	ldr	r3, [pc, #8]	; (15008 <USBHost::free_Pipe(Pipe_struct*)+0xc>)
   14ffe:	681a      	ldr	r2, [r3, #0]
	free_Pipe_list = pipe;
   15000:	6018      	str	r0, [r3, #0]
	*(Pipe_t **)pipe = free_Pipe_list;
   15002:	6002      	str	r2, [r0, #0]
}
   15004:	4770      	bx	lr
   15006:	bf00      	nop
   15008:	2000e738 	.word	0x2000e738

0001500c <USBHost::allocate_Transfer()>:
	Transfer_t *transfer = free_Transfer_list;
   1500c:	4b02      	ldr	r3, [pc, #8]	; (15018 <USBHost::allocate_Transfer()+0xc>)
   1500e:	6818      	ldr	r0, [r3, #0]
	if (transfer) free_Transfer_list = *(Transfer_t **)transfer;
   15010:	b108      	cbz	r0, 15016 <USBHost::allocate_Transfer()+0xa>
   15012:	6802      	ldr	r2, [r0, #0]
   15014:	601a      	str	r2, [r3, #0]
}
   15016:	4770      	bx	lr
   15018:	2000e848 	.word	0x2000e848

0001501c <USBHost::free_Transfer(Transfer_struct*)>:
	*(Transfer_t **)transfer = free_Transfer_list;
   1501c:	4b02      	ldr	r3, [pc, #8]	; (15028 <USBHost::free_Transfer(Transfer_struct*)+0xc>)
   1501e:	681a      	ldr	r2, [r3, #0]
	free_Transfer_list = transfer;
   15020:	6018      	str	r0, [r3, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   15022:	6002      	str	r2, [r0, #0]
}
   15024:	4770      	bx	lr
   15026:	bf00      	nop
   15028:	2000e848 	.word	0x2000e848

0001502c <USBHost::allocate_string_buffer()>:
	strbuf_t *strbuf = free_strbuf_list;
   1502c:	4a05      	ldr	r2, [pc, #20]	; (15044 <USBHost::allocate_string_buffer()+0x18>)
   1502e:	6810      	ldr	r0, [r2, #0]
	if (strbuf) {
   15030:	b130      	cbz	r0, 15040 <USBHost::allocate_string_buffer()+0x14>
		free_strbuf_list = *(strbuf_t **)strbuf;
   15032:	6801      	ldr	r1, [r0, #0]
		strbuf->iStrings[strbuf_t::STR_ID_MAN] = 0;  // Set indexes into string buffer to say not there...
   15034:	2300      	movs	r3, #0
		free_strbuf_list = *(strbuf_t **)strbuf;
   15036:	6011      	str	r1, [r2, #0]
		strbuf->iStrings[strbuf_t::STR_ID_MAN] = 0;  // Set indexes into string buffer to say not there...
   15038:	7003      	strb	r3, [r0, #0]
		strbuf->iStrings[strbuf_t::STR_ID_PROD] = 0;
   1503a:	7043      	strb	r3, [r0, #1]
		strbuf->iStrings[strbuf_t::STR_ID_SERIAL] = 0;
   1503c:	7083      	strb	r3, [r0, #2]
		strbuf->buffer[0] = 0;	// have trailing NULL..
   1503e:	70c3      	strb	r3, [r0, #3]
}
   15040:	4770      	bx	lr
   15042:	bf00      	nop
   15044:	2000e740 	.word	0x2000e740

00015048 <USBHost::free_string_buffer(strbuf_t*)>:
	*(strbuf_t **)strbuf = free_strbuf_list;
   15048:	4b02      	ldr	r3, [pc, #8]	; (15054 <USBHost::free_string_buffer(strbuf_t*)+0xc>)
   1504a:	681a      	ldr	r2, [r3, #0]
	free_strbuf_list = strbuf;
   1504c:	6018      	str	r0, [r3, #0]
	*(strbuf_t **)strbuf = free_strbuf_list;
   1504e:	6002      	str	r2, [r0, #0]
}
   15050:	4770      	bx	lr
   15052:	bf00      	nop
   15054:	2000e740 	.word	0x2000e740

00015058 <USBHost::contribute_Devices(Device_struct*, unsigned long)>:
	Device_t *end = devices + num;
   15058:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   1505c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (Device_t *device = devices ; device < end; device++) {
   15060:	4288      	cmp	r0, r1
   15062:	d20e      	bcs.n	15082 <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x2a>
{
   15064:	b410      	push	{r4}
   15066:	4c07      	ldr	r4, [pc, #28]	; (15084 <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x2c>)
   15068:	6822      	ldr	r2, [r4, #0]
   1506a:	e000      	b.n	1506e <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x16>
   1506c:	4618      	mov	r0, r3
	*(Device_t **)device = free_Device_list;
   1506e:	4603      	mov	r3, r0
   15070:	f843 2b24 	str.w	r2, [r3], #36
	for (Device_t *device = devices ; device < end; device++) {
   15074:	4299      	cmp	r1, r3
   15076:	4602      	mov	r2, r0
   15078:	d8f8      	bhi.n	1506c <USBHost::contribute_Devices(Device_struct*, unsigned long)+0x14>
   1507a:	6020      	str	r0, [r4, #0]
}
   1507c:	f85d 4b04 	ldr.w	r4, [sp], #4
   15080:	4770      	bx	lr
   15082:	4770      	bx	lr
   15084:	2000e73c 	.word	0x2000e73c

00015088 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)>:
	Pipe_t *end = pipes + num;
   15088:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1508c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
	for (Pipe_t *pipe = pipes; pipe < end; pipe++) {
   15090:	4288      	cmp	r0, r1
   15092:	d20e      	bcs.n	150b2 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x2a>
{
   15094:	b410      	push	{r4}
   15096:	4c07      	ldr	r4, [pc, #28]	; (150b4 <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x2c>)
   15098:	6822      	ldr	r2, [r4, #0]
   1509a:	e000      	b.n	1509e <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x16>
   1509c:	4618      	mov	r0, r3
	*(Pipe_t **)pipe = free_Pipe_list;
   1509e:	4603      	mov	r3, r0
   150a0:	f843 2b60 	str.w	r2, [r3], #96
	for (Pipe_t *pipe = pipes; pipe < end; pipe++) {
   150a4:	4299      	cmp	r1, r3
   150a6:	4602      	mov	r2, r0
   150a8:	d8f8      	bhi.n	1509c <USBHost::contribute_Pipes(Pipe_struct*, unsigned long)+0x14>
   150aa:	6020      	str	r0, [r4, #0]
}
   150ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   150b0:	4770      	bx	lr
   150b2:	4770      	bx	lr
   150b4:	2000e738 	.word	0x2000e738

000150b8 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)>:
	Transfer_t *end = transfers + num;
   150b8:	eb00 1c81 	add.w	ip, r0, r1, lsl #6
	for (Transfer_t *transfer = transfers ; transfer < end; transfer++) {
   150bc:	4560      	cmp	r0, ip
   150be:	d211      	bcs.n	150e4 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)+0x2c>
   150c0:	4602      	mov	r2, r0
{
   150c2:	b510      	push	{r4, lr}
   150c4:	4c08      	ldr	r4, [pc, #32]	; (150e8 <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)+0x30>)
   150c6:	ea4f 1e81 	mov.w	lr, r1, lsl #6
   150ca:	6821      	ldr	r1, [r4, #0]
	*(Transfer_t **)transfer = free_Transfer_list;
   150cc:	4613      	mov	r3, r2
   150ce:	f843 1b40 	str.w	r1, [r3], #64
	for (Transfer_t *transfer = transfers ; transfer < end; transfer++) {
   150d2:	459c      	cmp	ip, r3
   150d4:	4611      	mov	r1, r2
   150d6:	461a      	mov	r2, r3
   150d8:	d8f8      	bhi.n	150cc <USBHost::contribute_Transfers(Transfer_struct*, unsigned long)+0x14>
   150da:	f1ae 0e40 	sub.w	lr, lr, #64	; 0x40
   150de:	4470      	add	r0, lr
   150e0:	6020      	str	r0, [r4, #0]
}
   150e2:	bd10      	pop	{r4, pc}
   150e4:	4770      	bx	lr
   150e6:	bf00      	nop
   150e8:	2000e848 	.word	0x2000e848

000150ec <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)>:
	strbuf_t *end = strbufs + num;
   150ec:	2335      	movs	r3, #53	; 0x35
   150ee:	fb03 0101 	mla	r1, r3, r1, r0
	for (strbuf_t *str = strbufs ; str < end; str++) {
   150f2:	4288      	cmp	r0, r1
   150f4:	d20e      	bcs.n	15114 <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x28>
{
   150f6:	b410      	push	{r4}
   150f8:	4c07      	ldr	r4, [pc, #28]	; (15118 <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x2c>)
   150fa:	6822      	ldr	r2, [r4, #0]
   150fc:	e000      	b.n	15100 <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x14>
   150fe:	4618      	mov	r0, r3
	*(strbuf_t **)strbuf = free_strbuf_list;
   15100:	4603      	mov	r3, r0
   15102:	f843 2b35 	str.w	r2, [r3], #53
	for (strbuf_t *str = strbufs ; str < end; str++) {
   15106:	4299      	cmp	r1, r3
   15108:	4602      	mov	r2, r0
   1510a:	d8f8      	bhi.n	150fe <USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)+0x12>
   1510c:	6020      	str	r0, [r4, #0]
}
   1510e:	f85d 4b04 	ldr.w	r4, [sp], #4
   15112:	4770      	bx	lr
   15114:	4770      	bx	lr
   15116:	bf00      	nop
   15118:	2000e740 	.word	0x2000e740

0001511c <WS2812Serial::begin()>:
*/

#include "WS2812Serial.h"

bool WS2812Serial::begin()
{
   1511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t hwtrigger;
#else	
	uint32_t divisor, portconfig, hwtrigger;
	KINETISK_UART_t *uart;
#endif
	switch (pin) {
   1511e:	7881      	ldrb	r1, [r0, #2]
{
   15120:	4604      	mov	r4, r0
	switch (pin) {
   15122:	1e4b      	subs	r3, r1, #1
   15124:	2b34      	cmp	r3, #52	; 0x34
   15126:	d81c      	bhi.n	15162 <WS2812Serial::begin()+0x46>
   15128:	e8df f003 	tbb	[pc, r3]
   1512c:	1b1b1b70 	.word	0x1b1b1b70
   15130:	971b1b1b 	.word	0x971b1b1b
   15134:	1b1b1b1b 	.word	0x1b1b1b1b
   15138:	1b1b851b 	.word	0x1b1b851b
   1513c:	1d1b1b8e 	.word	0x1d1b1b8e
   15140:	a91b1b1b 	.word	0xa91b1b1b
   15144:	1b1b1b1b 	.word	0x1b1b1b1b
   15148:	1b1b1ba0 	.word	0x1b1b1ba0
   1514c:	1bb21b1b 	.word	0x1bb21b1b
   15150:	1b1b1b1b 	.word	0x1b1b1b1b
   15154:	1b1b1b1b 	.word	0x1b1b1b1b
   15158:	1b1d1b1b 	.word	0x1b1d1b1b
   1515c:	1b1b1b1b 	.word	0x1b1b1b1b
   15160:	70          	.byte	0x70
   15161:	00          	.byte	0x00
   15162:	2000      	movs	r0, #0
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
	return true;
}
   15164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   15166:	4a50      	ldr	r2, [pc, #320]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART8; 
   15168:	4850      	ldr	r0, [pc, #320]	; (152ac <WS2812Serial::begin()+0x190>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   1516a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
		break;
   1516e:	4e50      	ldr	r6, [pc, #320]	; (152b0 <WS2812Serial::begin()+0x194>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   15170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
		uart = &IMXRT_LPUART8; 
   15174:	61a0      	str	r0, [r4, #24]
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
   15176:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if (!dma) {
   1517a:	68e5      	ldr	r5, [r4, #12]
   1517c:	2d00      	cmp	r5, #0
   1517e:	d050      	beq.n	15222 <WS2812Serial::begin()+0x106>
	uart->CTRL = 0;	// clear everything
   15180:	69a3      	ldr	r3, [r4, #24]
   15182:	2200      	movs	r2, #0
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
   15184:	484b      	ldr	r0, [pc, #300]	; (152b4 <WS2812Serial::begin()+0x198>)
	uart->CTRL = 0;	// clear everything
   15186:	619a      	str	r2, [r3, #24]
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
   15188:	6118      	str	r0, [r3, #16]
	uart->PINCFG = 0;
   1518a:	60da      	str	r2, [r3, #12]
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
   1518c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1518e:	0892      	lsrs	r2, r2, #2
   15190:	f002 021c 	and.w	r2, r2, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
   15194:	2a0f      	cmp	r2, #15
   15196:	f200 8084 	bhi.w	152a2 <WS2812Serial::begin()+0x186>
   1519a:	0852      	lsrs	r2, r2, #1
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
   1519c:	f002 0202 	and.w	r2, r2, #2
   151a0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (pin == 35) pinmuxval = 1;
   151a2:	2923      	cmp	r1, #35	; 0x23
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   151a4:	4a44      	ldr	r2, [pc, #272]	; (152b8 <WS2812Serial::begin()+0x19c>)
	dma->destination((volatile uint8_t&)uart->DATA);
   151a6:	f103 031c 	add.w	r3, r3, #28
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
   151aa:	f8df c14c 	ldr.w	ip, [pc, #332]	; 152f8 <WS2812Serial::begin()+0x1dc>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   151ae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
	uart->FIFO |= LPUART_FIFO_TXFE;
   151b2:	68d9      	ldr	r1, [r3, #12]
   151b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	*(portConfigRegister(pin)) = pinmuxval;
   151b8:	e9d2 0701 	ldrd	r0, r7, [r2, #4]
	uart->FIFO |= LPUART_FIFO_TXFE;
   151bc:	60d9      	str	r1, [r3, #12]
		TCD->DOFF = 0;
   151be:	f04f 0100 	mov.w	r1, #0
   151c2:	682a      	ldr	r2, [r5, #0]
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
   151c4:	f843 cc04 	str.w	ip, [r3, #-4]
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   151c8:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
   151cc:	f8c7 c000 	str.w	ip, [r7]
	if (pin == 35) pinmuxval = 1;
   151d0:	bf14      	ite	ne
   151d2:	2702      	movne	r7, #2
   151d4:	2701      	moveq	r7, #1
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
   151d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	*(portConfigRegister(pin)) = pinmuxval;
   151da:	6007      	str	r7, [r0, #0]
		TCD->DADDR = &p;
   151dc:	6113      	str	r3, [r2, #16]
		TCD->DOFF = 0;
   151de:	8291      	strh	r1, [r2, #20]
		TCD->ATTR_DST = 0;
   151e0:	7191      	strb	r1, [r2, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
   151e2:	d301      	bcc.n	151e8 <WS2812Serial::begin()+0xcc>
   151e4:	6893      	ldr	r3, [r2, #8]
   151e6:	b90b      	cbnz	r3, 151ec <WS2812Serial::begin()+0xd0>
   151e8:	2301      	movs	r3, #1
   151ea:	6093      	str	r3, [r2, #8]
		TCD->DLASTSGA = 0;
   151ec:	2100      	movs	r1, #0
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
   151ee:	4b33      	ldr	r3, [pc, #204]	; (152bc <WS2812Serial::begin()+0x1a0>)
	memset(drawBuffer, 0, numled * 3);
   151f0:	68a0      	ldr	r0, [r4, #8]
		TCD->DLASTSGA = 0;
   151f2:	6191      	str	r1, [r2, #24]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
   151f4:	792a      	ldrb	r2, [r5, #4]
		*mux = 0;
   151f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
   151fa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   151fe:	8822      	ldrh	r2, [r4, #0]
   15200:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   15204:	f006 fca8 	bl	1bb58 <memset>
	return true;
   15208:	2001      	movs	r0, #1
}
   1520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   1520c:	4a26      	ldr	r2, [pc, #152]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART6; 
   1520e:	482c      	ldr	r0, [pc, #176]	; (152c0 <WS2812Serial::begin()+0x1a4>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   15210:	6f53      	ldr	r3, [r2, #116]	; 0x74
	if (!dma) {
   15212:	68e5      	ldr	r5, [r4, #12]
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   15214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
		uart = &IMXRT_LPUART6; 
   15218:	61a0      	str	r0, [r4, #24]
		break;
   1521a:	4e2a      	ldr	r6, [pc, #168]	; (152c4 <WS2812Serial::begin()+0x1a8>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
   1521c:	6753      	str	r3, [r2, #116]	; 0x74
	if (!dma) {
   1521e:	2d00      	cmp	r5, #0
   15220:	d1ae      	bne.n	15180 <WS2812Serial::begin()+0x64>
		dma = new DMAChannel;
   15222:	2008      	movs	r0, #8
   15224:	f001 fad8 	bl	167d8 <operator new(unsigned int)>
   15228:	4605      	mov	r5, r0
		begin();
   1522a:	2100      	movs	r1, #0
   1522c:	f000 faa0 	bl	15770 <DMAChannel::begin(bool)>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   15230:	78a1      	ldrb	r1, [r4, #2]
		dma = new DMAChannel;
   15232:	60e5      	str	r5, [r4, #12]
		if (!dma) return false; // unable to allocate DMA channel
   15234:	e7a4      	b.n	15180 <WS2812Serial::begin()+0x64>
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   15236:	4a1c      	ldr	r2, [pc, #112]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART2; 
   15238:	4823      	ldr	r0, [pc, #140]	; (152c8 <WS2812Serial::begin()+0x1ac>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   1523a:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
   1523c:	4e23      	ldr	r6, [pc, #140]	; (152cc <WS2812Serial::begin()+0x1b0>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   1523e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
		uart = &IMXRT_LPUART2; 
   15242:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
   15244:	6693      	str	r3, [r2, #104]	; 0x68
		break;
   15246:	e798      	b.n	1517a <WS2812Serial::begin()+0x5e>
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   15248:	4a17      	ldr	r2, [pc, #92]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART3; 
   1524a:	4821      	ldr	r0, [pc, #132]	; (152d0 <WS2812Serial::begin()+0x1b4>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   1524c:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
   1524e:	4e21      	ldr	r6, [pc, #132]	; (152d4 <WS2812Serial::begin()+0x1b8>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   15250:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
		uart = &IMXRT_LPUART3; 
   15254:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
   15256:	6693      	str	r3, [r2, #104]	; 0x68
		break;
   15258:	e78f      	b.n	1517a <WS2812Serial::begin()+0x5e>
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   1525a:	4a13      	ldr	r2, [pc, #76]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART4; 
   1525c:	481e      	ldr	r0, [pc, #120]	; (152d8 <WS2812Serial::begin()+0x1bc>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   1525e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
		break;
   15260:	4e1e      	ldr	r6, [pc, #120]	; (152dc <WS2812Serial::begin()+0x1c0>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   15262:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART4; 
   15266:	61a0      	str	r0, [r4, #24]
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
   15268:	66d3      	str	r3, [r2, #108]	; 0x6c
		break;
   1526a:	e786      	b.n	1517a <WS2812Serial::begin()+0x5e>
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   1526c:	4a0e      	ldr	r2, [pc, #56]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART7; 
   1526e:	481c      	ldr	r0, [pc, #112]	; (152e0 <WS2812Serial::begin()+0x1c4>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   15270:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		break;
   15272:	4e1c      	ldr	r6, [pc, #112]	; (152e4 <WS2812Serial::begin()+0x1c8>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   15274:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
		uart = &IMXRT_LPUART7; 
   15278:	61a0      	str	r0, [r4, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
   1527a:	67d3      	str	r3, [r2, #124]	; 0x7c
		break;
   1527c:	e77d      	b.n	1517a <WS2812Serial::begin()+0x5e>
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   1527e:	4a0a      	ldr	r2, [pc, #40]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART1; 
   15280:	4819      	ldr	r0, [pc, #100]	; (152e8 <WS2812Serial::begin()+0x1cc>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   15282:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		break;
   15284:	4e19      	ldr	r6, [pc, #100]	; (152ec <WS2812Serial::begin()+0x1d0>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   15286:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART1; 
   1528a:	61a0      	str	r0, [r4, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
   1528c:	67d3      	str	r3, [r2, #124]	; 0x7c
		break;
   1528e:	e774      	b.n	1517a <WS2812Serial::begin()+0x5e>
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   15290:	4a05      	ldr	r2, [pc, #20]	; (152a8 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART5; 
   15292:	4817      	ldr	r0, [pc, #92]	; (152f0 <WS2812Serial::begin()+0x1d4>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   15294:	6f53      	ldr	r3, [r2, #116]	; 0x74
		break;
   15296:	4e17      	ldr	r6, [pc, #92]	; (152f4 <WS2812Serial::begin()+0x1d8>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   15298:	f043 030c 	orr.w	r3, r3, #12
		uart = &IMXRT_LPUART5; 
   1529c:	61a0      	str	r0, [r4, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
   1529e:	6753      	str	r3, [r2, #116]	; 0x74
		break;
   152a0:	e76b      	b.n	1517a <WS2812Serial::begin()+0x5e>
   152a2:	2203      	movs	r2, #3
   152a4:	e77c      	b.n	151a0 <WS2812Serial::begin()+0x84>
   152a6:	bf00      	nop
   152a8:	400fc000 	.word	0x400fc000
   152ac:	401a0000 	.word	0x401a0000
   152b0:	80000048 	.word	0x80000048
   152b4:	05800001 	.word	0x05800001
   152b8:	200081bc 	.word	0x200081bc
   152bc:	400ec000 	.word	0x400ec000
   152c0:	40198000 	.word	0x40198000
   152c4:	80000046 	.word	0x80000046
   152c8:	40188000 	.word	0x40188000
   152cc:	80000042 	.word	0x80000042
   152d0:	4018c000 	.word	0x4018c000
   152d4:	80000004 	.word	0x80000004
   152d8:	40190000 	.word	0x40190000
   152dc:	80000044 	.word	0x80000044
   152e0:	4019c000 	.word	0x4019c000
   152e4:	80000008 	.word	0x80000008
   152e8:	40184000 	.word	0x40184000
   152ec:	80000002 	.word	0x80000002
   152f0:	40194000 	.word	0x40194000
   152f4:	80000006 	.word	0x80000006
   152f8:	10080000 	.word	0x10080000

000152fc <WS2812Serial::show()>:
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
   152fc:	68c3      	ldr	r3, [r0, #12]
{
   152fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while ((DMA_ERQ & (1 << dma->channel))) {
   15302:	4eb1      	ldr	r6, [pc, #708]	; (155c8 <WS2812Serial::show()+0x2cc>)
   15304:	2501      	movs	r5, #1
   15306:	791b      	ldrb	r3, [r3, #4]
{
   15308:	b083      	sub	sp, #12
	while ((DMA_ERQ & (1 << dma->channel))) {
   1530a:	68f2      	ldr	r2, [r6, #12]
{
   1530c:	4604      	mov	r4, r0
	while ((DMA_ERQ & (1 << dma->channel))) {
   1530e:	fa05 f303 	lsl.w	r3, r5, r3
   15312:	4213      	tst	r3, r2
   15314:	d008      	beq.n	15328 <WS2812Serial::show()+0x2c>
		yield();
   15316:	f002 fe8f 	bl	18038 <yield>
	while ((DMA_ERQ & (1 << dma->channel))) {
   1531a:	68e3      	ldr	r3, [r4, #12]
   1531c:	68f2      	ldr	r2, [r6, #12]
   1531e:	791b      	ldrb	r3, [r3, #4]
   15320:	fa05 f303 	lsl.w	r3, r5, r3
   15324:	4213      	tst	r3, r2
   15326:	d1f6      	bne.n	15316 <WS2812Serial::show()+0x1a>
	}
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
   15328:	78e0      	ldrb	r0, [r4, #3]
   1532a:	2805      	cmp	r0, #5
   1532c:	d826      	bhi.n	1537c <WS2812Serial::show()+0x80>
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
   1532e:	8823      	ldrh	r3, [r4, #0]
		const uint8_t *p = drawBuffer;
   15330:	68a6      	ldr	r6, [r4, #8]
		const uint8_t *end = p + (numled * 3);
   15332:	eb03 0743 	add.w	r7, r3, r3, lsl #1
		uint8_t *fb = frameBuffer;
   15336:	6865      	ldr	r5, [r4, #4]
		const uint8_t *end = p + (numled * 3);
   15338:	4437      	add	r7, r6
		while (p < end) {
   1533a:	42be      	cmp	r6, r7
   1533c:	f080 820d 	bcs.w	1575a <WS2812Serial::show()+0x45e>
   15340:	3603      	adds	r6, #3
   15342:	350c      	adds	r5, #12
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
   15344:	7d21      	ldrb	r1, [r4, #20]
   15346:	f1a5 020c 	sub.w	r2, r5, #12
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
   1534a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
			b = (b * mult) >> 8;
   1534e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
			g = (g * mult) >> 8;
   15352:	f816 cc02 	ldrb.w	ip, [r6, #-2]
			b = (b * mult) >> 8;
   15356:	fb01 ee0e 	mla	lr, r1, lr, lr
			g = (g * mult) >> 8;
   1535a:	fb01 cc0c 	mla	ip, r1, ip, ip
			r = (r * mult) >> 8;
   1535e:	fb01 3103 	mla	r1, r1, r3, r3
			b = (b * mult) >> 8;
   15362:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
   15366:	ea4f 291c 	mov.w	r9, ip, lsr #8
			r = (r * mult) >> 8;
   1536a:	0a0b      	lsrs	r3, r1, #8
			uint32_t n=0;
			switch (config) {
   1536c:	2805      	cmp	r0, #5
   1536e:	f200 81fb 	bhi.w	15768 <WS2812Serial::show()+0x46c>
   15372:	e8df f000 	tbb	[pc, r0]
   15376:	767d      	.short	0x767d
   15378:	4662696f 	.word	0x4662696f
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
   1537c:	68a2      	ldr	r2, [r4, #8]
		const uint8_t *end = p + (numled * 4);
   1537e:	8823      	ldrh	r3, [r4, #0]
		uint8_t *fb = frameBuffer;
   15380:	6861      	ldr	r1, [r4, #4]
		const uint8_t *end = p + (numled * 4);
   15382:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
		while (p < end) {
   15386:	455a      	cmp	r2, fp
   15388:	f080 81e4 	bcs.w	15754 <WS2812Serial::show()+0x458>
   1538c:	f102 0c04 	add.w	ip, r2, #4
   15390:	3110      	adds	r1, #16
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
   15392:	7d23      	ldrb	r3, [r4, #20]
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
   15394:	3806      	subs	r0, #6
			g = (g * mult) >> 8;
   15396:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
   1539a:	f1a1 0210 	sub.w	r2, r1, #16
			b = (b * mult) >> 8;
   1539e:	f81c ec04 	ldrb.w	lr, [ip, #-4]
			r = (r * mult) >> 8;
   153a2:	f81c 7c02 	ldrb.w	r7, [ip, #-2]
			g = (g * mult) >> 8;
   153a6:	fb03 6606 	mla	r6, r3, r6, r6
			w = (w * mult) >> 8;
   153aa:	f81c 5c01 	ldrb.w	r5, [ip, #-1]
			b = (b * mult) >> 8;
   153ae:	fb03 ee0e 	mla	lr, r3, lr, lr
			r = (r * mult) >> 8;
   153b2:	fb03 7707 	mla	r7, r3, r7, r7
			w = (w * mult) >> 8;
   153b6:	fb03 5505 	mla	r5, r3, r5, r5
			g = (g * mult) >> 8;
   153ba:	0a33      	lsrs	r3, r6, #8
			b = (b * mult) >> 8;
   153bc:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
   153c0:	9301      	str	r3, [sp, #4]
			w = (w * mult) >> 8;
   153c2:	ea4f 2915 	mov.w	r9, r5, lsr #8
			r = (r * mult) >> 8;
   153c6:	0a3b      	lsrs	r3, r7, #8
			switch (config) {
   153c8:	2817      	cmp	r0, #23
   153ca:	f200 81cf 	bhi.w	1576c <WS2812Serial::show()+0x470>
   153ce:	e8df f010 	tbh	[pc, r0, lsl #1]
   153d2:	01b5      	.short	0x01b5
   153d4:	01a001ab 	.word	0x01a001ab
   153d8:	018c0195 	.word	0x018c0195
   153dc:	01790182 	.word	0x01790182
   153e0:	0165016f 	.word	0x0165016f
   153e4:	0151015b 	.word	0x0151015b
   153e8:	013e0148 	.word	0x013e0148
   153ec:	01280133 	.word	0x01280133
   153f0:	0113011d 	.word	0x0113011d
   153f4:	00ff010a 	.word	0x00ff010a
   153f8:	00e700f1 	.word	0x00e700f1
   153fc:	00d400dd 	.word	0x00d400dd
   15400:	00b3      	.short	0x00b3
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
   15402:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
   15406:	ea4c 4108 	orr.w	r1, ip, r8, lsl #16
   1540a:	430b      	orrs	r3, r1
				if (!(n & 0x00800000)) x |= 0x07;
   1540c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   15410:	bf0c      	ite	eq
   15412:	210f      	moveq	r1, #15
   15414:	2108      	movne	r1, #8
				if (!(n & 0x00400000)) x |= 0xE0;
   15416:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
				n <<= 2;
   1541a:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x00400000)) x |= 0xE0;
   1541e:	bf08      	it	eq
   15420:	f041 01e0 	orreq.w	r1, r1, #224	; 0xe0
				*fb++ = x;
   15424:	f802 1b01 	strb.w	r1, [r2], #1
			} while (fb < stop);
   15428:	42aa      	cmp	r2, r5
   1542a:	d1ef      	bne.n	1540c <WS2812Serial::show()+0x110>
		while (p < end) {
   1542c:	42b7      	cmp	r7, r6
   1542e:	f102 050c 	add.w	r5, r2, #12
   15432:	d924      	bls.n	1547e <WS2812Serial::show()+0x182>
			switch (config) {
   15434:	78e0      	ldrb	r0, [r4, #3]
   15436:	3603      	adds	r6, #3
   15438:	e784      	b.n	15344 <WS2812Serial::show()+0x48>
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
   1543a:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
   1543e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   15442:	ea43 0309 	orr.w	r3, r3, r9
   15446:	e7e1      	b.n	1540c <WS2812Serial::show()+0x110>
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
   15448:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
   1544c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
   15450:	430b      	orrs	r3, r1
   15452:	e7db      	b.n	1540c <WS2812Serial::show()+0x110>
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
   15454:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
   15458:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1545c:	ea43 0308 	orr.w	r3, r3, r8
   15460:	e7d4      	b.n	1540c <WS2812Serial::show()+0x110>
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
   15462:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15466:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
   1546a:	ea43 0309 	orr.w	r3, r3, r9
   1546e:	e7cd      	b.n	1540c <WS2812Serial::show()+0x110>
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
   15470:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
   15474:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   15478:	ea43 0308 	orr.w	r3, r3, r8
   1547c:	e7c6      	b.n	1540c <WS2812Serial::show()+0x110>
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
   1547e:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 12;
   15480:	260c      	movs	r6, #12
		microseconds_per_led = 30;
   15482:	221e      	movs	r2, #30
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
   15484:	fb02 f303 	mul.w	r3, r2, r3
   15488:	f503 7596 	add.w	r5, r3, #300	; 0x12c
   1548c:	e001      	b.n	15492 <WS2812Serial::show()+0x196>
	//if (min_elapsed < 2500) min_elapsed = 2500; // limit refresh to 400 Hz
	uint32_t m;
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
   1548e:	f002 fdd3 	bl	18038 <yield>
		m = micros();
   15492:	f000 fd89 	bl	15fa8 <micros>
		if ((m - prior_micros) > min_elapsed) break;
   15496:	6923      	ldr	r3, [r4, #16]
   15498:	1ac3      	subs	r3, r0, r3
   1549a:	42ab      	cmp	r3, r5
   1549c:	d9f7      	bls.n	1548e <WS2812Serial::show()+0x192>
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
   1549e:	6862      	ldr	r2, [r4, #4]
   154a0:	4b4a      	ldr	r3, [pc, #296]	; (155cc <WS2812Serial::show()+0x2d0>)
	prior_micros = m;
   154a2:	6120      	str	r0, [r4, #16]
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
   154a4:	429a      	cmp	r2, r3
   154a6:	d912      	bls.n	154ce <WS2812Serial::show()+0x1d2>
   154a8:	8821      	ldrh	r1, [r4, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   154aa:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
   154ae:	fb06 2201 	mla	r2, r6, r1, r2
	asm("dsb");
   154b2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
   154b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   154ba:	f8c1 3f68 	str.w	r3, [r1, #3944]	; 0xf68
		location += 32;
   154be:	3320      	adds	r3, #32
	} while (location < end_addr);
   154c0:	429a      	cmp	r2, r3
   154c2:	d8fa      	bhi.n	154ba <WS2812Serial::show()+0x1be>
	asm("dsb");
   154c4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   154c8:	f3bf 8f6f 	isb	sy
	
	dma->sourceBuffer(frameBuffer, numled * bytes_per_led);
   154cc:	6862      	ldr	r2, [r4, #4]
   154ce:	68e0      	ldr	r0, [r4, #12]
   154d0:	8821      	ldrh	r1, [r4, #0]
		TCD->SADDR = p;
   154d2:	6803      	ldr	r3, [r0, #0]
   154d4:	fb06 f101 	mul.w	r1, r6, r1
		TCD->ATTR_SRC = 0;
   154d8:	2600      	movs	r6, #0
		TCD->SADDR = p;
   154da:	601a      	str	r2, [r3, #0]
		TCD->SOFF = 1;
   154dc:	2201      	movs	r2, #1
   154de:	6805      	ldr	r5, [r0, #0]
   154e0:	809a      	strh	r2, [r3, #4]
		TCD->NBYTES = 1;
   154e2:	609a      	str	r2, [r3, #8]
		TCD->SLAST = -len;
   154e4:	424a      	negs	r2, r1
		TCD->ATTR_SRC = 0;
   154e6:	71de      	strb	r6, [r3, #7]
		TCD->SLAST = -len;
   154e8:	60da      	str	r2, [r3, #12]
		TCD->BITER = len;
   154ea:	b28a      	uxth	r2, r1
   154ec:	83da      	strh	r2, [r3, #30]
		TCD->CITER = len;
   154ee:	82da      	strh	r2, [r3, #22]
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
   154f0:	8bee      	ldrh	r6, [r5, #30]
   154f2:	0436      	lsls	r6, r6, #16
   154f4:	d412      	bmi.n	1551c <WS2812Serial::show()+0x220>
			if (len > 32767) return;
   154f6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   154fa:	d201      	bcs.n	15500 <WS2812Serial::show()+0x204>
			TCD->BITER = len;
   154fc:	83ea      	strh	r2, [r5, #30]
			TCD->CITER = len;
   154fe:	82ea      	strh	r2, [r5, #22]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
   15500:	8b9a      	ldrh	r2, [r3, #28]

	Serial.printf("SA:%x SO:%d AT:%x NB:%x SL:%d DA:%x DO: %d CI:%x DL:%x CS:%x BI:%x\n", (uint32_t)dma->TCD->SADDR,
	dma->TCD->SOFF, dma->TCD->ATTR, dma->TCD->NBYTES, dma->TCD->SLAST, (uint32_t)dma->TCD->DADDR, 
	dma->TCD->DOFF, dma->TCD->CITER, dma->TCD->DLASTSGA, dma->TCD->CSR, dma->TCD->BITER);
*/
	uart->STAT = 0;	// try clearing out the status
   15502:	69a1      	ldr	r1, [r4, #24]
   15504:	2400      	movs	r4, #0
   15506:	b292      	uxth	r2, r2
   15508:	f042 0208 	orr.w	r2, r2, #8
   1550c:	839a      	strh	r2, [r3, #28]
   1550e:	614c      	str	r4, [r1, #20]
		DMA_SERQ = channel;
   15510:	4b2d      	ldr	r3, [pc, #180]	; (155c8 <WS2812Serial::show()+0x2cc>)
   15512:	7902      	ldrb	r2, [r0, #4]
   15514:	76da      	strb	r2, [r3, #27]
	dma->enable();

#endif
}
   15516:	b003      	add	sp, #12
   15518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (len > 511) return;
   1551c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   15520:	d2ee      	bcs.n	15500 <WS2812Serial::show()+0x204>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
   15522:	8be9      	ldrh	r1, [r5, #30]
   15524:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
   15528:	4311      	orrs	r1, r2
   1552a:	83e9      	strh	r1, [r5, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
   1552c:	8ae9      	ldrh	r1, [r5, #22]
   1552e:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
   15532:	430a      	orrs	r2, r1
   15534:	82ea      	strh	r2, [r5, #22]
   15536:	e7e3      	b.n	15500 <WS2812Serial::show()+0x204>
			  case WS2812_BGWR: n = (b << 24) | (g << 16) | (w << 8) | r; break;
   15538:	ea4f 6008 	mov.w	r0, r8, lsl #24
   1553c:	9e01      	ldr	r6, [sp, #4]
   1553e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   15542:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   15546:	4328      	orrs	r0, r5
   15548:	4303      	orrs	r3, r0
				if (!(n & 0x80000000)) x |= 0x07;
   1554a:	2b00      	cmp	r3, #0
   1554c:	bfb4      	ite	lt
   1554e:	2008      	movlt	r0, #8
   15550:	200f      	movge	r0, #15
				if (!(n & 0x40000000)) x |= 0xE0;
   15552:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
				n <<= 2;
   15556:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x40000000)) x |= 0xE0;
   1555a:	bf08      	it	eq
   1555c:	f040 00e0 	orreq.w	r0, r0, #224	; 0xe0
				*fb++ = x;
   15560:	f802 0b01 	strb.w	r0, [r2], #1
			} while (fb < stop);
   15564:	428a      	cmp	r2, r1
   15566:	d1f0      	bne.n	1554a <WS2812Serial::show()+0x24e>
		while (p < end) {
   15568:	45e3      	cmp	fp, ip
   1556a:	f102 0110 	add.w	r1, r2, #16
   1556e:	f240 80f7 	bls.w	15760 <WS2812Serial::show()+0x464>
			switch (config) {
   15572:	78e0      	ldrb	r0, [r4, #3]
   15574:	f10c 0c04 	add.w	ip, ip, #4
   15578:	e70b      	b.n	15392 <WS2812Serial::show()+0x96>
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
   1557a:	041b      	lsls	r3, r3, #16
   1557c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   15580:	9801      	ldr	r0, [sp, #4]
   15582:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   15586:	432b      	orrs	r3, r5
   15588:	4303      	orrs	r3, r0
   1558a:	e7de      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
   1558c:	ea4f 4008 	mov.w	r0, r8, lsl #16
   15590:	9e01      	ldr	r6, [sp, #4]
   15592:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   15596:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
   1559a:	4328      	orrs	r0, r5
   1559c:	4303      	orrs	r3, r0
   1559e:	e7d4      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
   155a0:	041b      	lsls	r3, r3, #16
   155a2:	9801      	ldr	r0, [sp, #4]
   155a4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   155a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   155ac:	432b      	orrs	r3, r5
   155ae:	ea43 0308 	orr.w	r3, r3, r8
   155b2:	e7ca      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
   155b4:	ea4f 4808 	mov.w	r8, r8, lsl #16
   155b8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   155bc:	9801      	ldr	r0, [sp, #4]
   155be:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
   155c2:	432b      	orrs	r3, r5
   155c4:	4303      	orrs	r3, r0
   155c6:	e7c0      	b.n	1554a <WS2812Serial::show()+0x24e>
   155c8:	400e8000 	.word	0x400e8000
   155cc:	201fffff 	.word	0x201fffff
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
   155d0:	9801      	ldr	r0, [sp, #4]
   155d2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   155d6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
   155da:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
   155de:	432b      	orrs	r3, r5
   155e0:	ea43 0308 	orr.w	r3, r3, r8
   155e4:	e7b1      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
   155e6:	ea4f 4009 	mov.w	r0, r9, lsl #16
   155ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   155ee:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
   155f2:	4330      	orrs	r0, r6
   155f4:	4303      	orrs	r3, r0
   155f6:	e7a8      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
   155f8:	ea4f 4309 	mov.w	r3, r9, lsl #16
   155fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   15600:	9801      	ldr	r0, [sp, #4]
   15602:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   15606:	433b      	orrs	r3, r7
   15608:	4303      	orrs	r3, r0
   1560a:	e79e      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
   1560c:	ea4f 4009 	mov.w	r0, r9, lsl #16
   15610:	9d01      	ldr	r5, [sp, #4]
   15612:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15616:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
   1561a:	ea40 000e 	orr.w	r0, r0, lr
   1561e:	4303      	orrs	r3, r0
   15620:	e793      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
   15622:	ea4f 4309 	mov.w	r3, r9, lsl #16
   15626:	9801      	ldr	r0, [sp, #4]
   15628:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   1562c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   15630:	433b      	orrs	r3, r7
   15632:	ea43 0308 	orr.w	r3, r3, r8
   15636:	e788      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
   15638:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1563c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15640:	9801      	ldr	r0, [sp, #4]
   15642:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
   15646:	ea43 030e 	orr.w	r3, r3, lr
   1564a:	4303      	orrs	r3, r0
   1564c:	e77d      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
   1564e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   15652:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   15656:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
   1565a:	4333      	orrs	r3, r6
   1565c:	ea43 0308 	orr.w	r3, r3, r8
   15660:	e773      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
   15662:	ea4f 4008 	mov.w	r0, r8, lsl #16
   15666:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   1566a:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
   1566e:	4330      	orrs	r0, r6
   15670:	4303      	orrs	r3, r0
   15672:	e76a      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
   15674:	ea4f 4308 	mov.w	r3, r8, lsl #16
   15678:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   1567c:	9801      	ldr	r0, [sp, #4]
   1567e:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   15682:	433b      	orrs	r3, r7
   15684:	4303      	orrs	r3, r0
   15686:	e760      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
   15688:	9801      	ldr	r0, [sp, #4]
   1568a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   1568e:	0400      	lsls	r0, r0, #16
   15690:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
   15694:	ea40 000e 	orr.w	r0, r0, lr
   15698:	4303      	orrs	r3, r0
   1569a:	e756      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
   1569c:	9b01      	ldr	r3, [sp, #4]
   1569e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   156a2:	041b      	lsls	r3, r3, #16
   156a4:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   156a8:	433b      	orrs	r3, r7
   156aa:	ea43 0308 	orr.w	r3, r3, r8
   156ae:	e74c      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
   156b0:	041b      	lsls	r3, r3, #16
   156b2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   156b6:	9801      	ldr	r0, [sp, #4]
   156b8:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   156bc:	ea43 030e 	orr.w	r3, r3, lr
   156c0:	4303      	orrs	r3, r0
   156c2:	e742      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
   156c4:	041b      	lsls	r3, r3, #16
   156c6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   156ca:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   156ce:	4333      	orrs	r3, r6
   156d0:	ea43 0308 	orr.w	r3, r3, r8
   156d4:	e739      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
   156d6:	ea4f 4308 	mov.w	r3, r8, lsl #16
   156da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   156de:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   156e2:	433b      	orrs	r3, r7
   156e4:	ea43 0309 	orr.w	r3, r3, r9
   156e8:	e72f      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
   156ea:	041b      	lsls	r3, r3, #16
   156ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   156f0:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   156f4:	4333      	orrs	r3, r6
   156f6:	ea43 0309 	orr.w	r3, r3, r9
   156fa:	e726      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
   156fc:	ea4f 4308 	mov.w	r3, r8, lsl #16
   15700:	9801      	ldr	r0, [sp, #4]
   15702:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
   15706:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   1570a:	433b      	orrs	r3, r7
   1570c:	ea43 0309 	orr.w	r3, r3, r9
   15710:	e71b      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
   15712:	041b      	lsls	r3, r3, #16
   15714:	9801      	ldr	r0, [sp, #4]
   15716:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   1571a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   1571e:	ea43 030e 	orr.w	r3, r3, lr
   15722:	ea43 0309 	orr.w	r3, r3, r9
   15726:	e710      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
   15728:	ea4f 4808 	mov.w	r8, r8, lsl #16
   1572c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   15730:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
   15734:	4333      	orrs	r3, r6
   15736:	ea43 0309 	orr.w	r3, r3, r9
   1573a:	e706      	b.n	1554a <WS2812Serial::show()+0x24e>
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
   1573c:	9801      	ldr	r0, [sp, #4]
   1573e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
   15742:	ea4f 4a00 	mov.w	sl, r0, lsl #16
   15746:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
   1574a:	ea43 030e 	orr.w	r3, r3, lr
   1574e:	ea43 0309 	orr.w	r3, r3, r9
   15752:	e6fa      	b.n	1554a <WS2812Serial::show()+0x24e>
		bytes_per_led = 16;
   15754:	2610      	movs	r6, #16
		microseconds_per_led = 40;
   15756:	2228      	movs	r2, #40	; 0x28
   15758:	e694      	b.n	15484 <WS2812Serial::show()+0x188>
		bytes_per_led = 12;
   1575a:	260c      	movs	r6, #12
		microseconds_per_led = 30;
   1575c:	221e      	movs	r2, #30
   1575e:	e691      	b.n	15484 <WS2812Serial::show()+0x188>
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
   15760:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 16;
   15762:	2610      	movs	r6, #16
		microseconds_per_led = 40;
   15764:	2228      	movs	r2, #40	; 0x28
   15766:	e68d      	b.n	15484 <WS2812Serial::show()+0x188>
			switch (config) {
   15768:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 12;
   1576a:	e64f      	b.n	1540c <WS2812Serial::show()+0x110>
			switch (config) {
   1576c:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 16;
   1576e:	e6ec      	b.n	1554a <WS2812Serial::show()+0x24e>

00015770 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   15770:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
   15772:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   15774:	b921      	cbnz	r1, 15780 <DMAChannel::begin(bool)+0x10>
   15776:	6803      	ldr	r3, [r0, #0]
   15778:	b113      	cbz	r3, 15780 <DMAChannel::begin(bool)+0x10>
   1577a:	7902      	ldrb	r2, [r0, #4]
   1577c:	2a0f      	cmp	r2, #15
   1577e:	d93b      	bls.n	157f8 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
   15780:	4c24      	ldr	r4, [pc, #144]	; (15814 <DMAChannel::begin(bool)+0xa4>)
   15782:	8821      	ldrh	r1, [r4, #0]
{
   15784:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   15786:	fa41 f203 	asr.w	r2, r1, r3
   1578a:	f012 0201 	ands.w	r2, r2, #1
   1578e:	d008      	beq.n	157a2 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
   15790:	3301      	adds	r3, #1
   15792:	2b10      	cmp	r3, #16
   15794:	d1f7      	bne.n	15786 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
   15796:	b662      	cpsie	i
			TCD = (TCD_t *)0;
   15798:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
   1579a:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
   1579c:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
   1579e:	bc30      	pop	{r4, r5}
   157a0:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
   157a2:	f04f 0c01 	mov.w	ip, #1
   157a6:	fa0c fc03 	lsl.w	ip, ip, r3
   157aa:	ea41 010c 	orr.w	r1, r1, ip
   157ae:	8021      	strh	r1, [r4, #0]
			__enable_irq();
   157b0:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   157b2:	4919      	ldr	r1, [pc, #100]	; (15818 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
   157b4:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   157b8:	4c18      	ldr	r4, [pc, #96]	; (1581c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   157ba:	4419      	add	r1, r3
	channel = ch;
   157bc:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   157c0:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   157c2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   157c4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
   157c8:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   157ca:	f240 4482 	movw	r4, #1154	; 0x482
   157ce:	4914      	ldr	r1, [pc, #80]	; (15820 <DMAChannel::begin(bool)+0xb0>)
   157d0:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
   157d2:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
   157d6:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
   157da:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
   157de:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   157e2:	6003      	str	r3, [r0, #0]
}
   157e4:	bc30      	pop	{r4, r5}
	*p++ = 0;
   157e6:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
   157ea:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
   157ee:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
   157f2:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
   157f6:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
   157f8:	4c06      	ldr	r4, [pc, #24]	; (15814 <DMAChannel::begin(bool)+0xa4>)
   157fa:	8821      	ldrh	r1, [r4, #0]
   157fc:	fa41 f502 	asr.w	r5, r1, r2
   15800:	07ed      	lsls	r5, r5, #31
   15802:	d5bf      	bpl.n	15784 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   15804:	4d04      	ldr	r5, [pc, #16]	; (15818 <DMAChannel::begin(bool)+0xa8>)
   15806:	4415      	add	r5, r2
   15808:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
   1580c:	d1ba      	bne.n	15784 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
   1580e:	b662      	cpsie	i
		return;
   15810:	e7c5      	b.n	1579e <DMAChannel::begin(bool)+0x2e>
   15812:	bf00      	nop
   15814:	2000fc2a 	.word	0x2000fc2a
   15818:	02007480 	.word	0x02007480
   1581c:	400fc000 	.word	0x400fc000
   15820:	400e8000 	.word	0x400e8000

00015824 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   15824:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   15828:	b672      	cpsid	i
	if (_triggered == false) {
   1582a:	7f43      	ldrb	r3, [r0, #29]
   1582c:	b95b      	cbnz	r3, 15846 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
   1582e:	7f01      	ldrb	r1, [r0, #28]
   15830:	2901      	cmp	r1, #1
{
   15832:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
   15834:	d00b      	beq.n	1584e <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
   15836:	2903      	cmp	r1, #3
   15838:	d013      	beq.n	15862 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
   1583a:	2301      	movs	r3, #1
   1583c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1583e:	b902      	cbnz	r2, 15842 <EventResponder::triggerEventNotImmediate()+0x1e>
   15840:	b662      	cpsie	i
}
   15842:	bc30      	pop	{r4, r5}
   15844:	4770      	bx	lr
   15846:	b90a      	cbnz	r2, 1584c <EventResponder::triggerEventNotImmediate()+0x28>
   15848:	b662      	cpsie	i
   1584a:	4770      	bx	lr
   1584c:	4770      	bx	lr
			if (firstYield == nullptr) {
   1584e:	4c12      	ldr	r4, [pc, #72]	; (15898 <EventResponder::triggerEventNotImmediate()+0x74>)
   15850:	6821      	ldr	r1, [r4, #0]
   15852:	b1b1      	cbz	r1, 15882 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
   15854:	4911      	ldr	r1, [pc, #68]	; (1589c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
   15856:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
   15858:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
   1585a:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
   1585c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   1585e:	6158      	str	r0, [r3, #20]
				lastYield = this;
   15860:	e7eb      	b.n	1583a <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
   15862:	4d0f      	ldr	r5, [pc, #60]	; (158a0 <EventResponder::triggerEventNotImmediate()+0x7c>)
   15864:	490f      	ldr	r1, [pc, #60]	; (158a4 <EventResponder::triggerEventNotImmediate()+0x80>)
   15866:	682c      	ldr	r4, [r5, #0]
   15868:	b18c      	cbz	r4, 1588e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
   1586a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
   1586c:	680b      	ldr	r3, [r1, #0]
   1586e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   15870:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   15872:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   15876:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
   1587a:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1587c:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
   15880:	e7db      	b.n	1583a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
   15882:	4b06      	ldr	r3, [pc, #24]	; (1589c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
   15884:	6020      	str	r0, [r4, #0]
				lastYield = this;
   15886:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
   15888:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
   1588c:	e7d5      	b.n	1583a <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
   1588e:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
   15892:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
   15894:	e7ed      	b.n	15872 <EventResponder::triggerEventNotImmediate()+0x4e>
   15896:	bf00      	nop
   15898:	2000e868 	.word	0x2000e868
   1589c:	2000e874 	.word	0x2000e874
   158a0:	2000e870 	.word	0x2000e870
   158a4:	2000e86c 	.word	0x2000e86c

000158a8 <EventResponder::runFromInterrupt()>:
{
   158a8:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   158aa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   158ae:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   158b0:	4c0c      	ldr	r4, [pc, #48]	; (158e4 <EventResponder::runFromInterrupt()+0x3c>)
   158b2:	6820      	ldr	r0, [r4, #0]
		if (first) {
   158b4:	b180      	cbz	r0, 158d8 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
   158b6:	4e0c      	ldr	r6, [pc, #48]	; (158e8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
   158b8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
   158ba:	6943      	ldr	r3, [r0, #20]
   158bc:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
   158be:	b173      	cbz	r3, 158de <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   158c0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
   158c2:	b902      	cbnz	r2, 158c6 <EventResponder::runFromInterrupt()+0x1e>
   158c4:	b662      	cpsie	i
			(*(first->_function))(*first);
   158c6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
   158c8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   158ca:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   158cc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   158d0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   158d2:	6820      	ldr	r0, [r4, #0]
		if (first) {
   158d4:	2800      	cmp	r0, #0
   158d6:	d1f0      	bne.n	158ba <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
   158d8:	b902      	cbnz	r2, 158dc <EventResponder::runFromInterrupt()+0x34>
   158da:	b662      	cpsie	i
}
   158dc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
   158de:	6033      	str	r3, [r6, #0]
   158e0:	e7ef      	b.n	158c2 <EventResponder::runFromInterrupt()+0x1a>
   158e2:	bf00      	nop
   158e4:	2000e870 	.word	0x2000e870
   158e8:	2000e86c 	.word	0x2000e86c

000158ec <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
   158ec:	f7ff bfdc 	b.w	158a8 <EventResponder::runFromInterrupt()>

000158f0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   158f0:	4904      	ldr	r1, [pc, #16]	; (15904 <systick_isr+0x14>)
	systick_millis_count++;
   158f2:	4a05      	ldr	r2, [pc, #20]	; (15908 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
   158f4:	6849      	ldr	r1, [r1, #4]
   158f6:	4b05      	ldr	r3, [pc, #20]	; (1590c <systick_isr+0x1c>)
   158f8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
   158fa:	6813      	ldr	r3, [r2, #0]
   158fc:	3301      	adds	r3, #1
   158fe:	6013      	str	r3, [r2, #0]
}
   15900:	4770      	bx	lr
   15902:	bf00      	nop
   15904:	e0001000 	.word	0xe0001000
   15908:	2000fab8 	.word	0x2000fab8
   1590c:	2000fab4 	.word	0x2000fab4

00015910 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
   15910:	4770      	bx	lr
   15912:	bf00      	nop

00015914 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   15914:	4770      	bx	lr
   15916:	bf00      	nop

00015918 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   15918:	4770      	bx	lr
   1591a:	bf00      	nop

0001591c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
   1591c:	4770      	bx	lr
   1591e:	bf00      	nop

00015920 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
   15920:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   15922:	4c1a      	ldr	r4, [pc, #104]	; (1598c <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   15924:	4d1a      	ldr	r5, [pc, #104]	; (15990 <pit_isr()+0x70>)
   15926:	6823      	ldr	r3, [r4, #0]
   15928:	42ab      	cmp	r3, r5
   1592a:	d002      	beq.n	15932 <pit_isr()+0x12>
   1592c:	4a19      	ldr	r2, [pc, #100]	; (15994 <pit_isr()+0x74>)
   1592e:	68d1      	ldr	r1, [r2, #12]
   15930:	bb29      	cbnz	r1, 1597e <pit_isr()+0x5e>
   15932:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   15934:	42ab      	cmp	r3, r5
   15936:	d002      	beq.n	1593e <pit_isr()+0x1e>
   15938:	4a16      	ldr	r2, [pc, #88]	; (15994 <pit_isr()+0x74>)
   1593a:	69d1      	ldr	r1, [r2, #28]
   1593c:	b9c9      	cbnz	r1, 15972 <pit_isr()+0x52>
   1593e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   15940:	42ab      	cmp	r3, r5
   15942:	d002      	beq.n	1594a <pit_isr()+0x2a>
   15944:	4a13      	ldr	r2, [pc, #76]	; (15994 <pit_isr()+0x74>)
   15946:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   15948:	b969      	cbnz	r1, 15966 <pit_isr()+0x46>
   1594a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   1594c:	42ab      	cmp	r3, r5
   1594e:	d009      	beq.n	15964 <pit_isr()+0x44>
   15950:	4a10      	ldr	r2, [pc, #64]	; (15994 <pit_isr()+0x74>)
   15952:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   15954:	b131      	cbz	r1, 15964 <pit_isr()+0x44>
   15956:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   15958:	681b      	ldr	r3, [r3, #0]
   1595a:	480f      	ldr	r0, [pc, #60]	; (15998 <pit_isr()+0x78>)
   1595c:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
   1595e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15962:	4718      	bx	r3
   15964:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   15966:	2101      	movs	r1, #1
   15968:	681b      	ldr	r3, [r3, #0]
   1596a:	480c      	ldr	r0, [pc, #48]	; (1599c <pit_isr()+0x7c>)
   1596c:	62d1      	str	r1, [r2, #44]	; 0x2c
   1596e:	4798      	blx	r3
        );
   15970:	e7eb      	b.n	1594a <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   15972:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   15974:	681b      	ldr	r3, [r3, #0]
   15976:	480a      	ldr	r0, [pc, #40]	; (159a0 <pit_isr()+0x80>)
   15978:	61d1      	str	r1, [r2, #28]
   1597a:	4798      	blx	r3
        );
   1597c:	e7df      	b.n	1593e <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   1597e:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   15980:	681b      	ldr	r3, [r3, #0]
   15982:	f104 0008 	add.w	r0, r4, #8
   15986:	60d1      	str	r1, [r2, #12]
   15988:	4798      	blx	r3
        );
   1598a:	e7d2      	b.n	15932 <pit_isr()+0x12>
   1598c:	2000b080 	.word	0x2000b080
   15990:	20005fd0 	.word	0x20005fd0
   15994:	40084100 	.word	0x40084100
   15998:	2000b0d0 	.word	0x2000b0d0
   1599c:	2000b0b8 	.word	0x2000b0b8
   159a0:	2000b0a0 	.word	0x2000b0a0

000159a4 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   159a4:	b538      	push	{r3, r4, r5, lr}
   159a6:	4c06      	ldr	r4, [pc, #24]	; (159c0 <__tcf_0+0x1c>)
   159a8:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   159ac:	f854 3c08 	ldr.w	r3, [r4, #-8]
   159b0:	4620      	mov	r0, r4
   159b2:	3c18      	subs	r4, #24
   159b4:	68db      	ldr	r3, [r3, #12]
   159b6:	4798      	blx	r3
   159b8:	42ac      	cmp	r4, r5
   159ba:	d1f7      	bne.n	159ac <__tcf_0+0x8>
   159bc:	bd38      	pop	{r3, r4, r5, pc}
   159be:	bf00      	nop
   159c0:	2000b0d0 	.word	0x2000b0d0

000159c4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
   159c4:	6803      	ldr	r3, [r0, #0]
{
   159c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159ca:	4604      	mov	r4, r0
   159cc:	b088      	sub	sp, #32
   159ce:	4617      	mov	r7, r2
	if (channel) {
   159d0:	2b00      	cmp	r3, #0
   159d2:	d04b      	beq.n	15a6c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
   159d4:	2200      	movs	r2, #0
   159d6:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
   159d8:	2201      	movs	r2, #1
   159da:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
   159dc:	4d30      	ldr	r5, [pc, #192]	; (15aa0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
   159de:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   159e0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 15ac4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
   159e4:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
   159e6:	f851 3b08 	ldr.w	r3, [r1], #8
   159ea:	112d      	asrs	r5, r5, #4
   159ec:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
   159ee:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   159f0:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
   159f4:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   159f6:	00f6      	lsls	r6, r6, #3
   159f8:	f106 0008 	add.w	r0, r6, #8
   159fc:	f858 3006 	ldr.w	r3, [r8, r6]
   15a00:	4440      	add	r0, r8
   15a02:	68db      	ldr	r3, [r3, #12]
   15a04:	9001      	str	r0, [sp, #4]
   15a06:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
   15a08:	4a26      	ldr	r2, [pc, #152]	; (15aa4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
   15a0a:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
   15a0c:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
   15a10:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
   15a12:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
   15a16:	689b      	ldr	r3, [r3, #8]
   15a18:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   15a1a:	9b02      	ldr	r3, [sp, #8]
   15a1c:	a804      	add	r0, sp, #16
   15a1e:	68db      	ldr	r3, [r3, #12]
   15a20:	4798      	blx	r3
	channel->LDVAL = cycles;
   15a22:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
   15a24:	2203      	movs	r2, #3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   15a26:	4820      	ldr	r0, [pc, #128]	; (15aa8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
   15a28:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
   15a2a:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   15a2c:	4a1f      	ldr	r2, [pc, #124]	; (15aac <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
   15a2e:	7923      	ldrb	r3, [r4, #4]
   15a30:	4c1f      	ldr	r4, [pc, #124]	; (15ab0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
   15a32:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   15a34:	7813      	ldrb	r3, [r2, #0]
   15a36:	7851      	ldrb	r1, [r2, #1]
   15a38:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
   15a3c:	428b      	cmp	r3, r1
   15a3e:	bf28      	it	cs
   15a40:	460b      	movcs	r3, r1
   15a42:	7891      	ldrb	r1, [r2, #2]
   15a44:	78d2      	ldrb	r2, [r2, #3]
   15a46:	428b      	cmp	r3, r1
   15a48:	bf28      	it	cs
   15a4a:	460b      	movcs	r3, r1
   15a4c:	4293      	cmp	r3, r2
   15a4e:	bf28      	it	cs
   15a50:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   15a52:	4c18      	ldr	r4, [pc, #96]	; (15ab4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
   15a54:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15a58:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
   15a5c:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   15a5e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
   15a62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
   15a66:	b008      	add	sp, #32
   15a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   15a6c:	4a12      	ldr	r2, [pc, #72]	; (15ab8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
   15a6e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   15a70:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   15a74:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
   15a76:	2201      	movs	r2, #1
   15a78:	4b10      	ldr	r3, [pc, #64]	; (15abc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
   15a7a:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
   15a7c:	4a10      	ldr	r2, [pc, #64]	; (15ac0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
   15a7e:	4613      	mov	r3, r2
   15a80:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   15a82:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
   15a84:	6898      	ldr	r0, [r3, #8]
   15a86:	2800      	cmp	r0, #0
   15a88:	d0a8      	beq.n	159dc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   15a8a:	3310      	adds	r3, #16
   15a8c:	4293      	cmp	r3, r2
   15a8e:	6023      	str	r3, [r4, #0]
   15a90:	d1f8      	bne.n	15a84 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
   15a92:	2300      	movs	r3, #0
				return false;
   15a94:	4618      	mov	r0, r3
				channel = NULL;
   15a96:	6023      	str	r3, [r4, #0]
}
   15a98:	b008      	add	sp, #32
   15a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a9e:	bf00      	nop
   15aa0:	bff7bf00 	.word	0xbff7bf00
   15aa4:	20005fd0 	.word	0x20005fd0
   15aa8:	2000a000 	.word	0x2000a000
   15aac:	20009974 	.word	0x20009974
   15ab0:	00015921 	.word	0x00015921
   15ab4:	e000e400 	.word	0xe000e400
   15ab8:	400fc000 	.word	0x400fc000
   15abc:	40084000 	.word	0x40084000
   15ac0:	40084100 	.word	0x40084100
   15ac4:	2000b080 	.word	0x2000b080

00015ac8 <IntervalTimer::end()>:
void IntervalTimer::end() {
   15ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
   15aca:	6803      	ldr	r3, [r0, #0]
   15acc:	b343      	cbz	r3, 15b20 <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
   15ace:	4c15      	ldr	r4, [pc, #84]	; (15b24 <IntervalTimer::end()+0x5c>)
   15ad0:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   15ad2:	4e15      	ldr	r6, [pc, #84]	; (15b28 <IntervalTimer::end()+0x60>)
   15ad4:	441c      	add	r4, r3
   15ad6:	1124      	asrs	r4, r4, #4
   15ad8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   15adc:	00ed      	lsls	r5, r5, #3
   15ade:	5973      	ldr	r3, [r6, r5]
   15ae0:	f105 0008 	add.w	r0, r5, #8
   15ae4:	68db      	ldr	r3, [r3, #12]
   15ae6:	4430      	add	r0, r6
   15ae8:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   15aea:	4b10      	ldr	r3, [pc, #64]	; (15b2c <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
   15aec:	2100      	movs	r1, #0
		channel->TFLG = 1;
   15aee:	2201      	movs	r2, #1
   15af0:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
   15af2:	683b      	ldr	r3, [r7, #0]
   15af4:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
   15af6:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
   15af8:	23ff      	movs	r3, #255	; 0xff
   15afa:	4a0d      	ldr	r2, [pc, #52]	; (15b30 <IntervalTimer::end()+0x68>)
   15afc:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   15afe:	7813      	ldrb	r3, [r2, #0]
   15b00:	7850      	ldrb	r0, [r2, #1]
   15b02:	7894      	ldrb	r4, [r2, #2]
   15b04:	4283      	cmp	r3, r0
   15b06:	bf28      	it	cs
   15b08:	4603      	movcs	r3, r0
   15b0a:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   15b0c:	4a09      	ldr	r2, [pc, #36]	; (15b34 <IntervalTimer::end()+0x6c>)
   15b0e:	42a3      	cmp	r3, r4
   15b10:	bf28      	it	cs
   15b12:	4623      	movcs	r3, r4
   15b14:	4283      	cmp	r3, r0
   15b16:	bf28      	it	cs
   15b18:	4603      	movcs	r3, r0
   15b1a:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
   15b1e:	6039      	str	r1, [r7, #0]
}
   15b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b22:	bf00      	nop
   15b24:	bff7bf00 	.word	0xbff7bf00
   15b28:	2000b080 	.word	0x2000b080
   15b2c:	20005fd0 	.word	0x20005fd0
   15b30:	20009974 	.word	0x20009974
   15b34:	e000e400 	.word	0xe000e400

00015b38 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
   15b38:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
   15b3a:	4b06      	ldr	r3, [pc, #24]	; (15b54 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   15b3c:	2000      	movs	r0, #0
   15b3e:	4c06      	ldr	r4, [pc, #24]	; (15b58 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
   15b40:	4a06      	ldr	r2, [pc, #24]	; (15b5c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
   15b42:	601c      	str	r4, [r3, #0]
   15b44:	619c      	str	r4, [r3, #24]
   15b46:	631c      	str	r4, [r3, #48]	; 0x30
   15b48:	649c      	str	r4, [r3, #72]	; 0x48
   15b4a:	4905      	ldr	r1, [pc, #20]	; (15b60 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
   15b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   15b50:	f003 ba62 	b.w	19018 <__aeabi_atexit>
   15b54:	2000b080 	.word	0x2000b080
   15b58:	20005fd0 	.word	0x20005fd0
   15b5c:	20008f80 	.word	0x20008f80
   15b60:	000159a5 	.word	0x000159a5

00015b64 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   15b64:	4608      	mov	r0, r1
   15b66:	f002 b9d3 	b.w	17f10 <usb_serial_putchar>
   15b6a:	bf00      	nop

00015b6c <Print::write(unsigned char const*, unsigned int)>:
{
   15b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
   15b70:	460c      	mov	r4, r1
   15b72:	b1d1      	cbz	r1, 15baa <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
   15b74:	b1ea      	cbz	r2, 15bb2 <Print::write(unsigned char const*, unsigned int)+0x46>
   15b76:	4680      	mov	r8, r0
   15b78:	188e      	adds	r6, r1, r2
	size_t count = 0;
   15b7a:	2500      	movs	r5, #0
   15b7c:	4f0e      	ldr	r7, [pc, #56]	; (15bb8 <Print::write(unsigned char const*, unsigned int)+0x4c>)
   15b7e:	e004      	b.n	15b8a <Print::write(unsigned char const*, unsigned int)+0x1e>
   15b80:	f002 f9c6 	bl	17f10 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
   15b84:	42b4      	cmp	r4, r6
   15b86:	4405      	add	r5, r0
   15b88:	d00c      	beq.n	15ba4 <Print::write(unsigned char const*, unsigned int)+0x38>
   15b8a:	f8d8 3000 	ldr.w	r3, [r8]
   15b8e:	f814 0b01 	ldrb.w	r0, [r4], #1
   15b92:	681b      	ldr	r3, [r3, #0]
   15b94:	42bb      	cmp	r3, r7
   15b96:	d0f3      	beq.n	15b80 <Print::write(unsigned char const*, unsigned int)+0x14>
   15b98:	4601      	mov	r1, r0
   15b9a:	4640      	mov	r0, r8
   15b9c:	4798      	blx	r3
   15b9e:	42b4      	cmp	r4, r6
   15ba0:	4405      	add	r5, r0
   15ba2:	d1f2      	bne.n	15b8a <Print::write(unsigned char const*, unsigned int)+0x1e>
}
   15ba4:	4628      	mov	r0, r5
   15ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   15baa:	460d      	mov	r5, r1
}
   15bac:	4628      	mov	r0, r5
   15bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   15bb2:	4615      	mov	r5, r2
   15bb4:	e7f6      	b.n	15ba4 <Print::write(unsigned char const*, unsigned int)+0x38>
   15bb6:	bf00      	nop
   15bb8:	00015b65 	.word	0x00015b65

00015bbc <Print::println()>:
{
   15bbc:	b500      	push	{lr}
	return write(buf, 2);
   15bbe:	6803      	ldr	r3, [r0, #0]
{
   15bc0:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
   15bc2:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
   15bc6:	2202      	movs	r2, #2
   15bc8:	a901      	add	r1, sp, #4
   15bca:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
   15bcc:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
   15bd0:	4798      	blx	r3
}
   15bd2:	b003      	add	sp, #12
   15bd4:	f85d fb04 	ldr.w	pc, [sp], #4

00015bd8 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   15bd8:	4b05      	ldr	r3, [pc, #20]	; (15bf0 <_write+0x18>)
   15bda:	2802      	cmp	r0, #2
   15bdc:	bf88      	it	hi
   15bde:	4603      	movhi	r3, r0
{
   15be0:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   15be2:	681c      	ldr	r4, [r3, #0]
   15be4:	4618      	mov	r0, r3
   15be6:	6863      	ldr	r3, [r4, #4]
}
   15be8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   15bec:	4718      	bx	r3
   15bee:	bf00      	nop
   15bf0:	2000958c 	.word	0x2000958c

00015bf4 <Print::printf(char const*, ...)>:
{
   15bf4:	b40e      	push	{r1, r2, r3}
   15bf6:	b500      	push	{lr}
   15bf8:	b082      	sub	sp, #8
   15bfa:	aa03      	add	r2, sp, #12
   15bfc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
   15c00:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
   15c02:	f005 fe89 	bl	1b918 <vdprintf>
}
   15c06:	b002      	add	sp, #8
   15c08:	f85d eb04 	ldr.w	lr, [sp], #4
   15c0c:	b003      	add	sp, #12
   15c0e:	4770      	bx	lr

00015c10 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   15c10:	49a2      	ldr	r1, [pc, #648]	; (15e9c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   15c12:	4ba3      	ldr	r3, [pc, #652]	; (15ea0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
   15c14:	4288      	cmp	r0, r1
{
   15c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
   15c1a:	4ca2      	ldr	r4, [pc, #648]	; (15ea4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   15c1c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   15c1e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   15c20:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
   15c24:	d91b      	bls.n	15c5e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   15c26:	4ba0      	ldr	r3, [pc, #640]	; (15ea8 <set_arm_clock+0x298>)
   15c28:	4298      	cmp	r0, r3
   15c2a:	f240 8102 	bls.w	15e32 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   15c2e:	1ac3      	subs	r3, r0, r3
   15c30:	499e      	ldr	r1, [pc, #632]	; (15eac <set_arm_clock+0x29c>)
   15c32:	0a1b      	lsrs	r3, r3, #8
   15c34:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c38:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   15c3c:	09db      	lsrs	r3, r3, #7
   15c3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15c42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15c46:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c4a:	428b      	cmp	r3, r1
   15c4c:	bf28      	it	cs
   15c4e:	460b      	movcs	r3, r1
   15c50:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
   15c54:	4b96      	ldr	r3, [pc, #600]	; (15eb0 <set_arm_clock+0x2a0>)
   15c56:	fba3 3707 	umull	r3, r7, r3, r7
   15c5a:	08ff      	lsrs	r7, r7, #3
   15c5c:	e004      	b.n	15c68 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
   15c5e:	4f95      	ldr	r7, [pc, #596]	; (15eb4 <set_arm_clock+0x2a4>)
   15c60:	42b8      	cmp	r0, r7
   15c62:	bf8c      	ite	hi
   15c64:	270e      	movhi	r7, #14
   15c66:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15c68:	498d      	ldr	r1, [pc, #564]	; (15ea0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c6a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15c6e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c72:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   15c78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c7c:	d20c      	bcs.n	15c98 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   15c7e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   15c82:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   15c86:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
   15c8a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   15c8e:	680b      	ldr	r3, [r1, #0]
   15c90:	2b00      	cmp	r3, #0
   15c92:	dafc      	bge.n	15c8e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c94:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   15c98:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
   15c9c:	d124      	bne.n	15ce8 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   15c9e:	4986      	ldr	r1, [pc, #536]	; (15eb8 <set_arm_clock+0x2a8>)
   15ca0:	690c      	ldr	r4, [r1, #16]
   15ca2:	4986      	ldr	r1, [pc, #536]	; (15ebc <set_arm_clock+0x2ac>)
   15ca4:	43a1      	bics	r1, r4
   15ca6:	f000 80ea 	beq.w	15e7e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   15caa:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
   15cae:	4634      	mov	r4, r6
   15cb0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   15cb4:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
   15cb8:	d004      	beq.n	15cc4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   15cba:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   15cbe:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
   15cc0:	4b77      	ldr	r3, [pc, #476]	; (15ea0 <set_arm_clock+0x290>)
   15cc2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   15cc4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   15cc8:	d007      	beq.n	15cda <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   15cca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
   15cce:	4974      	ldr	r1, [pc, #464]	; (15ea0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   15cd0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
   15cd2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   15cd4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   15cd6:	071a      	lsls	r2, r3, #28
   15cd8:	d4fc      	bmi.n	15cd4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   15cda:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   15cde:	4a70      	ldr	r2, [pc, #448]	; (15ea0 <set_arm_clock+0x290>)
   15ce0:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   15ce2:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15ce4:	069b      	lsls	r3, r3, #26
   15ce6:	d4fc      	bmi.n	15ce2 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
   15ce8:	4c75      	ldr	r4, [pc, #468]	; (15ec0 <set_arm_clock+0x2b0>)
   15cea:	42a0      	cmp	r0, r4
   15cec:	f200 80ce 	bhi.w	15e8c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
   15cf0:	f04f 0c01 	mov.w	ip, #1
   15cf4:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
   15cf6:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
   15cf8:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
   15cfc:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
   15d00:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15d04:	42a2      	cmp	r2, r4
   15d06:	d818      	bhi.n	15d3a <set_arm_clock+0x12a>
		if (div_arm < 8) {
   15d08:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
   15d0c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
   15d10:	f040 808d 	bne.w	15e2e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
   15d14:	f1bc 0f04 	cmp.w	ip, #4
   15d18:	f200 8091 	bhi.w	15e3e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
   15d1c:	180a      	adds	r2, r1, r0
   15d1e:	42a2      	cmp	r2, r4
   15d20:	f200 80a4 	bhi.w	15e6c <set_arm_clock+0x25c>
   15d24:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
   15d28:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
   15d2a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15d2e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
   15d32:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15d36:	42a2      	cmp	r2, r4
   15d38:	d9e6      	bls.n	15d08 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15d3a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   15d3e:	028c      	lsls	r4, r1, #10
   15d40:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15d44:	485f      	ldr	r0, [pc, #380]	; (15ec4 <set_arm_clock+0x2b4>)
   15d46:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
   15d48:	4a5f      	ldr	r2, [pc, #380]	; (15ec8 <set_arm_clock+0x2b8>)
   15d4a:	4290      	cmp	r0, r2
   15d4c:	d97f      	bls.n	15e4e <set_arm_clock+0x23e>
   15d4e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 15ef4 <set_arm_clock+0x2e4>
   15d52:	226c      	movs	r2, #108	; 0x6c
   15d54:	485d      	ldr	r0, [pc, #372]	; (15ecc <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15d56:	4d58      	ldr	r5, [pc, #352]	; (15eb8 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
   15d58:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15d5c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
   15d60:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15d64:	f8df c190 	ldr.w	ip, [pc, #400]	; 15ef8 <set_arm_clock+0x2e8>
   15d68:	ea0e 0c0c 	and.w	ip, lr, ip
   15d6c:	45d4      	cmp	ip, sl
   15d6e:	d009      	beq.n	15d84 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   15d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   15d74:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   15d78:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   15d7c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   15d7e:	682a      	ldr	r2, [r5, #0]
   15d80:	2a00      	cmp	r2, #0
   15d82:	dafc      	bge.n	15d7e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   15d84:	4a46      	ldr	r2, [pc, #280]	; (15ea0 <set_arm_clock+0x290>)
   15d86:	6915      	ldr	r5, [r2, #16]
   15d88:	f005 0507 	and.w	r5, r5, #7
   15d8c:	429d      	cmp	r5, r3
   15d8e:	d003      	beq.n	15d98 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   15d90:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   15d92:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15d94:	03dd      	lsls	r5, r3, #15
   15d96:	d4fc      	bmi.n	15d92 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15d98:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
   15d9c:	d009      	beq.n	15db2 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   15d9e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   15da2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
   15da6:	4a3e      	ldr	r2, [pc, #248]	; (15ea0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   15da8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
   15daa:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   15dac:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15dae:	0799      	lsls	r1, r3, #30
   15db0:	d4fc      	bmi.n	15dac <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15db2:	4947      	ldr	r1, [pc, #284]	; (15ed0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
   15db4:	4a47      	ldr	r2, [pc, #284]	; (15ed4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15db6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
   15db8:	4291      	cmp	r1, r2
   15dba:	d83c      	bhi.n	15e36 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15dbc:	4b46      	ldr	r3, [pc, #280]	; (15ed8 <set_arm_clock+0x2c8>)
   15dbe:	09c9      	lsrs	r1, r1, #7
   15dc0:	fba3 3101 	umull	r3, r1, r3, r1
   15dc4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   15dc6:	1e4b      	subs	r3, r1, #1
   15dc8:	021b      	lsls	r3, r3, #8
   15dca:	ea86 0203 	eor.w	r2, r6, r3
   15dce:	f412 7f40 	tst.w	r2, #768	; 0x300
   15dd2:	d006      	beq.n	15de2 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   15dd4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   15dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
   15ddc:	4a30      	ldr	r2, [pc, #192]	; (15ea0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   15dde:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
   15de0:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   15de2:	4a2f      	ldr	r2, [pc, #188]	; (15ea0 <set_arm_clock+0x290>)
   15de4:	6953      	ldr	r3, [r2, #20]
   15de6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   15dea:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   15dec:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15dee:	069b      	lsls	r3, r3, #26
   15df0:	d4fc      	bmi.n	15dec <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15df2:	4b3a      	ldr	r3, [pc, #232]	; (15edc <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15df4:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15df6:	fba3 2300 	umull	r2, r3, r3, r0
   15dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15dfe:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
   15e02:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15e06:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
   15e0a:	4a35      	ldr	r2, [pc, #212]	; (15ee0 <set_arm_clock+0x2d0>)
   15e0c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
   15e0e:	4a35      	ldr	r2, [pc, #212]	; (15ee4 <set_arm_clock+0x2d4>)
   15e10:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15e12:	4a35      	ldr	r2, [pc, #212]	; (15ee8 <set_arm_clock+0x2d8>)
   15e14:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15e16:	d208      	bcs.n	15e2a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   15e18:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   15e1c:	4a21      	ldr	r2, [pc, #132]	; (15ea4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   15e1e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
   15e22:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   15e24:	6813      	ldr	r3, [r2, #0]
   15e26:	2b00      	cmp	r3, #0
   15e28:	dafc      	bge.n	15e24 <set_arm_clock+0x214>
	}

	return frequency;
}
   15e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15e2e:	4673      	mov	r3, lr
   15e30:	e762      	b.n	15cf8 <set_arm_clock+0xe8>
   15e32:	2712      	movs	r7, #18
   15e34:	e718      	b.n	15c68 <set_arm_clock+0x58>
   15e36:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
   15e3a:	2104      	movs	r1, #4
   15e3c:	e7c5      	b.n	15dca <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15e3e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15e42:	4820      	ldr	r0, [pc, #128]	; (15ec4 <set_arm_clock+0x2b4>)
   15e44:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15e46:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15e48:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15e4a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15e4e:	4a27      	ldr	r2, [pc, #156]	; (15eec <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   15e50:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 15efc <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15e54:	fba2 2000 	umull	r2, r0, r2, r0
   15e58:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
   15e5a:	4825      	ldr	r0, [pc, #148]	; (15ef0 <set_arm_clock+0x2e0>)
   15e5c:	2a36      	cmp	r2, #54	; 0x36
   15e5e:	bf38      	it	cc
   15e60:	2236      	movcc	r2, #54	; 0x36
   15e62:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   15e66:	ea42 0a0a 	orr.w	sl, r2, sl
   15e6a:	e774      	b.n	15d56 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15e6c:	ea4f 248c 	mov.w	r4, ip, lsl #10
   15e70:	2300      	movs	r3, #0
   15e72:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
   15e76:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
   15e7a:	46ac      	mov	ip, r5
   15e7c:	e762      	b.n	15d44 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   15e7e:	461d      	mov	r5, r3
   15e80:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
   15e84:	4611      	mov	r1, r2
   15e86:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   15e8a:	e713      	b.n	15cb4 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
   15e8c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
   15e8e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15e92:	4602      	mov	r2, r0
   15e94:	4631      	mov	r1, r6
   15e96:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
   15e98:	46e6      	mov	lr, ip
   15e9a:	e753      	b.n	15d44 <set_arm_clock+0x134>
   15e9c:	1f78a400 	.word	0x1f78a400
   15ea0:	400fc000 	.word	0x400fc000
   15ea4:	40080000 	.word	0x40080000
   15ea8:	23c34600 	.word	0x23c34600
   15eac:	004cb223 	.word	0x004cb223
   15eb0:	51eb851f 	.word	0x51eb851f
   15eb4:	016e3600 	.word	0x016e3600
   15eb8:	400d8000 	.word	0x400d8000
   15ebc:	80003040 	.word	0x80003040
   15ec0:	269fb1ff 	.word	0x269fb1ff
   15ec4:	005b8d80 	.word	0x005b8d80
   15ec8:	4df67eff 	.word	0x4df67eff
   15ecc:	4d3f6400 	.word	0x4d3f6400
   15ed0:	08f0d17f 	.word	0x08f0d17f
   15ed4:	2cb4177f 	.word	0x2cb4177f
   15ed8:	00e5109f 	.word	0x00e5109f
   15edc:	431bde83 	.word	0x431bde83
   15ee0:	20009538 	.word	0x20009538
   15ee4:	20009534 	.word	0x20009534
   15ee8:	2000f9e0 	.word	0x2000f9e0
   15eec:	165e9f81 	.word	0x165e9f81
   15ef0:	00b71b00 	.word	0x00b71b00
   15ef4:	8000206c 	.word	0x8000206c
   15ef8:	8001307f 	.word	0x8001307f
   15efc:	80002000 	.word	0x80002000

00015f00 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   15f00:	b900      	cbnz	r0, 15f04 <delay+0x4>
   15f02:	4770      	bx	lr
{
   15f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15f08:	2101      	movs	r1, #1
   15f0a:	4681      	mov	r9, r0
   15f0c:	4c21      	ldr	r4, [pc, #132]	; (15f94 <delay+0x94>)
   15f0e:	4d22      	ldr	r5, [pc, #136]	; (15f98 <delay+0x98>)
   15f10:	4e22      	ldr	r6, [pc, #136]	; (15f9c <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15f12:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   15f16:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   15f18:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15f1a:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   15f1e:	2b00      	cmp	r3, #0
   15f20:	d1f7      	bne.n	15f12 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15f22:	491f      	ldr	r1, [pc, #124]	; (15fa0 <delay+0xa0>)
   15f24:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   15f26:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15f2a:	f8df a078 	ldr.w	sl, [pc, #120]	; 15fa4 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
   15f2e:	1a1b      	subs	r3, r3, r0
   15f30:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
   15f32:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15f36:	f8da 2000 	ldr.w	r2, [sl]
   15f3a:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
   15f3e:	455a      	cmp	r2, fp
   15f40:	bf94      	ite	ls
   15f42:	4490      	addls	r8, r2
   15f44:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15f46:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
   15f4a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   15f4c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15f4e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   15f52:	2b00      	cmp	r3, #0
   15f54:	d1f7      	bne.n	15f46 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15f56:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15f58:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
   15f5c:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
   15f5e:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15f62:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
   15f66:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
   15f6a:	bf94      	ite	ls
   15f6c:	4462      	addls	r2, ip
   15f6e:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
   15f72:	eba2 0208 	sub.w	r2, r2, r8
   15f76:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   15f7a:	d306      	bcc.n	15f8a <delay+0x8a>
			if (--msec == 0) return;
   15f7c:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
   15f80:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
   15f84:	d1df      	bne.n	15f46 <delay+0x46>
}
   15f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
   15f8a:	f002 f855 	bl	18038 <yield>
		while ((micros() - start) >= 1000) {
   15f8e:	4904      	ldr	r1, [pc, #16]	; (15fa0 <delay+0xa0>)
   15f90:	e7d9      	b.n	15f46 <delay+0x46>
   15f92:	bf00      	nop
   15f94:	2000fabc 	.word	0x2000fabc
   15f98:	2000fab8 	.word	0x2000fab8
   15f9c:	2000fab4 	.word	0x2000fab4
   15fa0:	e0001000 	.word	0xe0001000
   15fa4:	2000f9e0 	.word	0x2000f9e0

00015fa8 <micros>:
{
   15fa8:	b430      	push	{r4, r5}
   15faa:	4b0f      	ldr	r3, [pc, #60]	; (15fe8 <micros+0x40>)
   15fac:	f04f 0c01 	mov.w	ip, #1
   15fb0:	4d0e      	ldr	r5, [pc, #56]	; (15fec <micros+0x44>)
   15fb2:	4c0f      	ldr	r4, [pc, #60]	; (15ff0 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15fb4:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
   15fb8:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   15fba:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15fbc:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
   15fc0:	2a00      	cmp	r2, #0
   15fc2:	d1f7      	bne.n	15fb4 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15fc4:	4b0b      	ldr	r3, [pc, #44]	; (15ff4 <micros+0x4c>)
   15fc6:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15fc8:	4a0b      	ldr	r2, [pc, #44]	; (15ff8 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
   15fca:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
   15fcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15fd0:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
   15fd2:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15fd6:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
   15fda:	bc30      	pop	{r4, r5}
   15fdc:	428a      	cmp	r2, r1
   15fde:	bf94      	ite	ls
   15fe0:	1880      	addls	r0, r0, r2
   15fe2:	1840      	addhi	r0, r0, r1
   15fe4:	4770      	bx	lr
   15fe6:	bf00      	nop
   15fe8:	2000fabc 	.word	0x2000fabc
   15fec:	2000fab8 	.word	0x2000fab8
   15ff0:	2000fab4 	.word	0x2000fab4
   15ff4:	e0001000 	.word	0xe0001000
   15ff8:	2000f9e0 	.word	0x2000f9e0

00015ffc <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
   15ffc:	2836      	cmp	r0, #54	; 0x36
   15ffe:	d816      	bhi.n	1602e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
   16000:	0102      	lsls	r2, r0, #4
   16002:	4b10      	ldr	r3, [pc, #64]	; (16044 <digitalWrite+0x48>)
   16004:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
   16008:	589b      	ldr	r3, [r3, r2]
{
   1600a:	b410      	push	{r4}
	mask = p->mask;
   1600c:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
   1600e:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
   16010:	4214      	tst	r4, r2
   16012:	d005      	beq.n	16020 <digitalWrite+0x24>
		if (val) {
   16014:	b961      	cbnz	r1, 16030 <digitalWrite+0x34>
}
   16016:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
   1601a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
   1601e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   16020:	6883      	ldr	r3, [r0, #8]
		if (val) {
   16022:	b151      	cbz	r1, 1603a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   16024:	4a08      	ldr	r2, [pc, #32]	; (16048 <digitalWrite+0x4c>)
}
   16026:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   1602a:	601a      	str	r2, [r3, #0]
}
   1602c:	4770      	bx	lr
   1602e:	4770      	bx	lr
   16030:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
   16034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   16038:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   1603a:	4a04      	ldr	r2, [pc, #16]	; (1604c <digitalWrite+0x50>)
}
   1603c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   16040:	601a      	str	r2, [r3, #0]
}
   16042:	4770      	bx	lr
   16044:	200081bc 	.word	0x200081bc
   16048:	0001f038 	.word	0x0001f038
   1604c:	00013038 	.word	0x00013038

00016050 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
   16050:	2836      	cmp	r0, #54	; 0x36
   16052:	d80b      	bhi.n	1606c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
   16054:	4b06      	ldr	r3, [pc, #24]	; (16070 <digitalRead+0x20>)
   16056:	0102      	lsls	r2, r0, #4
   16058:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
   1605c:	589a      	ldr	r2, [r3, r2]
   1605e:	68c3      	ldr	r3, [r0, #12]
   16060:	6892      	ldr	r2, [r2, #8]
   16062:	421a      	tst	r2, r3
   16064:	bf14      	ite	ne
   16066:	2001      	movne	r0, #1
   16068:	2000      	moveq	r0, #0
   1606a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
   1606c:	2000      	movs	r0, #0
}
   1606e:	4770      	bx	lr
   16070:	200081bc 	.word	0x200081bc

00016074 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
   16074:	2836      	cmp	r0, #54	; 0x36
   16076:	d829      	bhi.n	160cc <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
   16078:	4b16      	ldr	r3, [pc, #88]	; (160d4 <pinMode+0x60>)
   1607a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   1607c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
   1607e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   16082:	589a      	ldr	r2, [r3, r2]
{
   16084:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   16086:	6853      	ldr	r3, [r2, #4]
   16088:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   1608a:	d00e      	beq.n	160aa <pinMode+0x36>
   1608c:	2904      	cmp	r1, #4
   1608e:	d00c      	beq.n	160aa <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   16090:	ea23 0304 	bic.w	r3, r3, r4
   16094:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   16096:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
   16098:	b1a9      	cbz	r1, 160c6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
   1609a:	2902      	cmp	r1, #2
   1609c:	d017      	beq.n	160ce <pinMode+0x5a>
		} else if (mode == INPUT_PULLDOWN) {
   1609e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   160a0:	bf0c      	ite	eq
   160a2:	4a0d      	ldreq	r2, [pc, #52]	; (160d8 <pinMode+0x64>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   160a4:	4a0d      	ldrne	r2, [pc, #52]	; (160dc <pinMode+0x68>)
   160a6:	601a      	str	r2, [r3, #0]
   160a8:	e007      	b.n	160ba <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
   160aa:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
   160ac:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
   160ae:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   160b0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
   160b2:	d008      	beq.n	160c6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   160b4:	f640 0238 	movw	r2, #2104	; 0x838
   160b8:	601a      	str	r2, [r3, #0]
	*(p->mux) = 5 | 0x10;
   160ba:	6843      	ldr	r3, [r0, #4]
   160bc:	2215      	movs	r2, #21
}
   160be:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
   160c2:	601a      	str	r2, [r3, #0]
}
   160c4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
   160c6:	2238      	movs	r2, #56	; 0x38
   160c8:	601a      	str	r2, [r3, #0]
   160ca:	e7f6      	b.n	160ba <pinMode+0x46>
   160cc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   160ce:	4a04      	ldr	r2, [pc, #16]	; (160e0 <pinMode+0x6c>)
   160d0:	601a      	str	r2, [r3, #0]
   160d2:	e7f2      	b.n	160ba <pinMode+0x46>
   160d4:	200081bc 	.word	0x200081bc
   160d8:	00013038 	.word	0x00013038
   160dc:	00010038 	.word	0x00010038
   160e0:	0001f038 	.word	0x0001f038

000160e4 <flash_wait>:
{
   160e4:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   160e6:	4a12      	ldr	r2, [pc, #72]	; (16130 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
   160e8:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   160ea:	4b12      	ldr	r3, [pc, #72]	; (16134 <flash_wait+0x50>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   160ec:	2101      	movs	r1, #1
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   160ee:	4d12      	ldr	r5, [pc, #72]	; (16138 <flash_wait+0x54>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
   160f0:	4c12      	ldr	r4, [pc, #72]	; (1613c <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   160f2:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   160f6:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   160fa:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
   160fe:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   16102:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16106:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
   1610a:	6953      	ldr	r3, [r2, #20]
   1610c:	07db      	lsls	r3, r3, #31
   1610e:	d5fc      	bpl.n	1610a <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16110:	6151      	str	r1, [r2, #20]
	} while (status & 1);
   16112:	7823      	ldrb	r3, [r4, #0]
   16114:	07db      	lsls	r3, r3, #31
   16116:	d4f0      	bmi.n	160fa <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   16118:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   1611a:	4905      	ldr	r1, [pc, #20]	; (16130 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   1611c:	f043 0301 	orr.w	r3, r3, #1
   16120:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   16122:	680b      	ldr	r3, [r1, #0]
   16124:	07db      	lsls	r3, r3, #31
   16126:	d4fc      	bmi.n	16122 <flash_wait+0x3e>
	__enable_irq();
   16128:	b662      	cpsie	i
}
   1612a:	bc30      	pop	{r4, r5}
   1612c:	4770      	bx	lr
   1612e:	bf00      	nop
   16130:	402a8000 	.word	0x402a8000
   16134:	24010405 	.word	0x24010405
   16138:	000f0001 	.word	0x000f0001
   1613c:	402a8100 	.word	0x402a8100

00016140 <eeprom_initialize>:
{
   16140:	b570      	push	{r4, r5, r6, lr}
   16142:	4c0e      	ldr	r4, [pc, #56]	; (1617c <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
   16144:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
   16148:	4e0d      	ldr	r6, [pc, #52]	; (16180 <eeprom_initialize+0x40>)
   1614a:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1614e:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
   16152:	2100      	movs	r1, #0
   16154:	e002      	b.n	1615c <eeprom_initialize+0x1c>
		} while (p < end);
   16156:	42b3      	cmp	r3, r6
			index++;
   16158:	b281      	uxth	r1, r0
		} while (p < end);
   1615a:	d204      	bcs.n	16166 <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
   1615c:	881a      	ldrh	r2, [r3, #0]
			index++;
   1615e:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
   16160:	3302      	adds	r3, #2
   16162:	4572      	cmp	r2, lr
   16164:	d1f7      	bne.n	16156 <eeprom_initialize+0x16>
		sector_index[sector] = index;
   16166:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
   1616a:	42ac      	cmp	r4, r5
   1616c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   16170:	d1ed      	bne.n	1614e <eeprom_initialize+0xe>
	initialized = 1;
   16172:	4b04      	ldr	r3, [pc, #16]	; (16184 <eeprom_initialize+0x44>)
   16174:	2201      	movs	r2, #1
   16176:	701a      	strb	r2, [r3, #0]
}
   16178:	bd70      	pop	{r4, r5, r6, pc}
   1617a:	bf00      	nop
   1617c:	2000f9e2 	.word	0x2000f9e2
   16180:	607c1000 	.word	0x607c1000
   16184:	2000fc3d 	.word	0x2000fc3d

00016188 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
   16188:	f241 03bb 	movw	r3, #4283	; 0x10bb
   1618c:	4298      	cmp	r0, r3
   1618e:	d82f      	bhi.n	161f0 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
   16190:	4b18      	ldr	r3, [pc, #96]	; (161f4 <eeprom_read_byte+0x6c>)
{
   16192:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
   16194:	781b      	ldrb	r3, [r3, #0]
   16196:	4604      	mov	r4, r0
   16198:	b33b      	cbz	r3, 161ea <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
   1619a:	08a0      	lsrs	r0, r4, #2
   1619c:	4b16      	ldr	r3, [pc, #88]	; (161f8 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1619e:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
   161a2:	4c16      	ldr	r4, [pc, #88]	; (161fc <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
   161a4:	fba3 2300 	umull	r2, r3, r3, r0
   161a8:	1ac2      	subs	r2, r0, r3
   161aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   161ae:	4a14      	ldr	r2, [pc, #80]	; (16200 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
   161b0:	095b      	lsrs	r3, r3, #5
   161b2:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
   161b6:	469c      	mov	ip, r3
   161b8:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   161bc:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
   161c0:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
   161c2:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   161c6:	441a      	add	r2, r3
	end = p + sector_index[sector];
   161c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   161cc:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
   161ce:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
   161d2:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
   161d6:	d907      	bls.n	161e8 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
   161d8:	881a      	ldrh	r2, [r3, #0]
   161da:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
   161dc:	b2d4      	uxtb	r4, r2
   161de:	428c      	cmp	r4, r1
   161e0:	bf08      	it	eq
   161e2:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
   161e4:	459c      	cmp	ip, r3
   161e6:	d8f7      	bhi.n	161d8 <eeprom_read_byte+0x50>
}
   161e8:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
   161ea:	f7ff ffa9 	bl	16140 <eeprom_initialize>
   161ee:	e7d4      	b.n	1619a <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
   161f0:	20ff      	movs	r0, #255	; 0xff
}
   161f2:	4770      	bx	lr
   161f4:	2000fc3d 	.word	0x2000fc3d
   161f8:	04104105 	.word	0x04104105
   161fc:	2000f9e4 	.word	0x2000f9e4
   16200:	000607c0 	.word	0x000607c0

00016204 <eeprom_read_word>:
{
   16204:	b538      	push	{r3, r4, r5, lr}
   16206:	4605      	mov	r5, r0
	return eeprom_read_byte(p) | (eeprom_read_byte(p+1) << 8);
   16208:	f7ff ffbe 	bl	16188 <eeprom_read_byte>
   1620c:	4604      	mov	r4, r0
   1620e:	1c68      	adds	r0, r5, #1
   16210:	f7ff ffba 	bl	16188 <eeprom_read_byte>
   16214:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   16218:	b280      	uxth	r0, r0
   1621a:	bd38      	pop	{r3, r4, r5, pc}

0001621c <eeprom_read_dword>:
{
   1621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1621e:	4605      	mov	r5, r0
	return eeprom_read_byte(p) | (eeprom_read_byte(p+1) << 8)
   16220:	f7ff ffb2 	bl	16188 <eeprom_read_byte>
   16224:	4606      	mov	r6, r0
   16226:	1c68      	adds	r0, r5, #1
   16228:	f7ff ffae 	bl	16188 <eeprom_read_byte>
   1622c:	4607      	mov	r7, r0
		| (eeprom_read_byte(p+2) << 16) | (eeprom_read_byte(p+3) << 24);
   1622e:	1ca8      	adds	r0, r5, #2
   16230:	f7ff ffaa 	bl	16188 <eeprom_read_byte>
   16234:	4604      	mov	r4, r0
   16236:	1ce8      	adds	r0, r5, #3
   16238:	0424      	lsls	r4, r4, #16
   1623a:	f7ff ffa5 	bl	16188 <eeprom_read_byte>
   1623e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
   16242:	4334      	orrs	r4, r6
}
   16244:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
   16248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1624a:	bf00      	nop

0001624c <eeprom_is_ready>:
}
   1624c:	2001      	movs	r0, #1
   1624e:	4770      	bx	lr

00016250 <eepromemu_flash_write>:
{
   16250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16252:	460f      	mov	r7, r1
   16254:	4616      	mov	r6, r2
	__disable_irq();
   16256:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16258:	4b34      	ldr	r3, [pc, #208]	; (1632c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   1625a:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1625e:	4a34      	ldr	r2, [pc, #208]	; (16330 <eepromemu_flash_write+0xe0>)
   16260:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   16262:	2202      	movs	r2, #2
   16264:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
   16266:	2200      	movs	r2, #0
   16268:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   1626c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   16270:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   16274:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   16278:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1627c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16280:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16284:	2201      	movs	r2, #1
   16286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1628a:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1628e:	1982      	adds	r2, r0, r6
	asm("dsb");
   16290:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   16294:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
   16298:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
   1629c:	3320      	adds	r3, #32
	} while (location < end_addr);
   1629e:	429a      	cmp	r2, r3
   162a0:	d8fa      	bhi.n	16298 <eepromemu_flash_write+0x48>
	asm("dsb");
   162a2:	f3bf 8f4f 	dsb	sy
	asm("isb");
   162a6:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   162aa:	4d20      	ldr	r5, [pc, #128]	; (1632c <eepromemu_flash_write+0xdc>)
   162ac:	696b      	ldr	r3, [r5, #20]
   162ae:	07da      	lsls	r2, r3, #31
   162b0:	d5fc      	bpl.n	162ac <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   162b2:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   162b4:	491f      	ldr	r1, [pc, #124]	; (16334 <eepromemu_flash_write+0xe4>)
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   162b6:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   162b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   162bc:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   162be:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   162c2:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   162c6:	f242 2101 	movw	r1, #8705	; 0x2201
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   162ca:	4c18      	ldr	r4, [pc, #96]	; (1632c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   162cc:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
   162d0:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   162d4:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   162d8:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   162dc:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   162e0:	4d15      	ldr	r5, [pc, #84]	; (16338 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   162e2:	e001      	b.n	162e8 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
   162e4:	065b      	lsls	r3, r3, #25
   162e6:	d409      	bmi.n	162fc <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   162e8:	6963      	ldr	r3, [r4, #20]
   162ea:	f013 0001 	ands.w	r0, r3, #1
   162ee:	d0f9      	beq.n	162e4 <eepromemu_flash_write+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
   162f0:	2341      	movs	r3, #65	; 0x41
   162f2:	6163      	str	r3, [r4, #20]
}
   162f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
   162f8:	f7ff bef4 	b.w	160e4 <flash_wait>
			if (wrlen > 8) wrlen = 8;
   162fc:	2e08      	cmp	r6, #8
   162fe:	d80a      	bhi.n	16316 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
   16300:	b136      	cbz	r6, 16310 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16302:	4632      	mov	r2, r6
   16304:	4639      	mov	r1, r7
				src += wrlen;
   16306:	4437      	add	r7, r6
				len -= wrlen;
   16308:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1630a:	4628      	mov	r0, r5
   1630c:	f000 f9ca 	bl	166a4 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
   16310:	2340      	movs	r3, #64	; 0x40
   16312:	6163      	str	r3, [r4, #20]
   16314:	e7e8      	b.n	162e8 <eepromemu_flash_write+0x98>
   16316:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
   1631a:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1631c:	4639      	mov	r1, r7
   1631e:	4632      	mov	r2, r6
				src += wrlen;
   16320:	4437      	add	r7, r6
				len -= wrlen;
   16322:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16324:	4628      	mov	r0, r5
   16326:	f000 f9bd 	bl	166a4 <memcpy>
				len -= wrlen;
   1632a:	e7f1      	b.n	16310 <eepromemu_flash_write+0xc0>
   1632c:	402a8000 	.word	0x402a8000
   16330:	5af05af0 	.word	0x5af05af0
   16334:	08180432 	.word	0x08180432
   16338:	402a8180 	.word	0x402a8180

0001633c <eepromemu_flash_erase_sector>:
{
   1633c:	b410      	push	{r4}
	__disable_irq();
   1633e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16340:	4b28      	ldr	r3, [pc, #160]	; (163e4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   16342:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16344:	4c28      	ldr	r4, [pc, #160]	; (163e8 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT61 = 0;
   16346:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16348:	619c      	str	r4, [r3, #24]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1634a:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   1634e:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   16350:	f240 4106 	movw	r1, #1030	; 0x406
   16354:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16358:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
   1635a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   1635e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   16362:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
   16366:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   1636a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1636e:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   16372:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16374:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
   16378:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
   1637c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
   16380:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
   16384:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
   16388:	4299      	cmp	r1, r3
   1638a:	bf34      	ite	cc
   1638c:	2101      	movcc	r1, #1
   1638e:	2180      	movcs	r1, #128	; 0x80
   16390:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
   16394:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
   16396:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
   1639a:	461a      	mov	r2, r3
	} while (location < end_addr);
   1639c:	f103 0320 	add.w	r3, r3, #32
   163a0:	d1f8      	bne.n	16394 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
   163a2:	f3bf 8f4f 	dsb	sy
	asm("isb");
   163a6:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   163aa:	4a0e      	ldr	r2, [pc, #56]	; (163e4 <eepromemu_flash_erase_sector+0xa8>)
   163ac:	6953      	ldr	r3, [r2, #20]
   163ae:	07d9      	lsls	r1, r3, #31
   163b0:	d5fc      	bpl.n	163ac <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   163b2:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   163b4:	490d      	ldr	r1, [pc, #52]	; (163ec <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   163b6:	4b0e      	ldr	r3, [pc, #56]	; (163f0 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   163b8:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   163ba:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   163bc:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   163c0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   163c4:	4907      	ldr	r1, [pc, #28]	; (163e4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   163c6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   163ca:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   163ce:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   163d2:	694b      	ldr	r3, [r1, #20]
   163d4:	07db      	lsls	r3, r3, #31
   163d6:	d5fc      	bpl.n	163d2 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   163d8:	2301      	movs	r3, #1
}
   163da:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   163de:	614b      	str	r3, [r1, #20]
	flash_wait();
   163e0:	f7ff be80 	b.w	160e4 <flash_wait>
   163e4:	402a8000 	.word	0x402a8000
   163e8:	5af05af0 	.word	0x5af05af0
   163ec:	08180420 	.word	0x08180420
   163f0:	00fff000 	.word	0x00fff000

000163f4 <eeprom_write_byte>:
	if (addr > E2END) return;
   163f4:	f241 03bb 	movw	r3, #4283	; 0x10bb
   163f8:	4298      	cmp	r0, r3
   163fa:	f200 8089 	bhi.w	16510 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
   163fe:	4b46      	ldr	r3, [pc, #280]	; (16518 <eeprom_write_byte+0x124>)
{
   16400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
   16404:	781b      	ldrb	r3, [r3, #0]
{
   16406:	b0c2      	sub	sp, #264	; 0x108
   16408:	4605      	mov	r5, r0
   1640a:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
   1640c:	2b00      	cmp	r3, #0
   1640e:	d07c      	beq.n	1650a <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
   16410:	08ab      	lsrs	r3, r5, #2
   16412:	4e42      	ldr	r6, [pc, #264]	; (1651c <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   16414:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
   16418:	4f41      	ldr	r7, [pc, #260]	; (16520 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
   1641a:	fba6 2603 	umull	r2, r6, r6, r3
   1641e:	1b9a      	subs	r2, r3, r6
   16420:	eb06 0652 	add.w	r6, r6, r2, lsr #1
   16424:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   16426:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
   1642a:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
   1642e:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16430:	4b3c      	ldr	r3, [pc, #240]	; (16524 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
   16432:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16436:	4433      	add	r3, r6
	end = p + sector_index[sector];
   16438:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1643a:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
   1643e:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
   16442:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
   16446:	d964      	bls.n	16512 <eeprom_write_byte+0x11e>
   16448:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
   1644a:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
   1644e:	881a      	ldrh	r2, [r3, #0]
   16450:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
   16452:	b2d1      	uxtb	r1, r2
   16454:	42a9      	cmp	r1, r5
   16456:	bf08      	it	eq
   16458:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
   1645c:	4298      	cmp	r0, r3
   1645e:	d8f6      	bhi.n	1644e <eeprom_write_byte+0x5a>
	if (data == olddata) return;
   16460:	45e1      	cmp	r9, ip
   16462:	d041      	beq.n	164e8 <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
   16464:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   16468:	d341      	bcc.n	164ee <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
   1646a:	ac02      	add	r4, sp, #8
   1646c:	f44f 7280 	mov.w	r2, #256	; 0x100
   16470:	21ff      	movs	r1, #255	; 0xff
   16472:	4620      	mov	r0, r4
   16474:	f005 fb70 	bl	1bb58 <memset>
		while (p < end) {
   16478:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   1647c:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16480:	4642      	mov	r2, r8
   16482:	4298      	cmp	r0, r3
   16484:	bf34      	ite	cc
   16486:	2001      	movcc	r0, #1
   16488:	f44f 6000 	movcs.w	r0, #2048	; 0x800
   1648c:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
   16490:	4613      	mov	r3, r2
   16492:	3202      	adds	r2, #2
   16494:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
   16496:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
   16498:	b2d9      	uxtb	r1, r3
   1649a:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1649e:	5463      	strb	r3, [r4, r1]
		while (p < end) {
   164a0:	d1f6      	bne.n	16490 <eeprom_write_byte+0x9c>
		buf[offset] = data;
   164a2:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
   164a6:	f10d 0907 	add.w	r9, sp, #7
   164aa:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
   164ae:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
   164b0:	464c      	mov	r4, r9
   164b2:	4640      	mov	r0, r8
   164b4:	f7ff ff42 	bl	1633c <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
   164b8:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
   164bc:	eb08 0045 	add.w	r0, r8, r5, lsl #1
   164c0:	2202      	movs	r2, #2
   164c2:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
   164c6:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
   164c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
   164cc:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
   164d0:	d006      	beq.n	164e0 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
   164d2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
   164d6:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
   164d8:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
   164dc:	f7ff feb8 	bl	16250 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
   164e0:	45a2      	cmp	sl, r4
   164e2:	d1e9      	bne.n	164b8 <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
   164e4:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
   164e8:	b042      	add	sp, #264	; 0x108
   164ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
   164ee:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
   164f2:	a902      	add	r1, sp, #8
   164f4:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
   164f6:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
   164f8:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
   164fc:	f7ff fea8 	bl	16250 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
   16500:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
   16504:	b042      	add	sp, #264	; 0x108
   16506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
   1650a:	f7ff fe19 	bl	16140 <eeprom_initialize>
   1650e:	e77f      	b.n	16410 <eeprom_write_byte+0x1c>
   16510:	4770      	bx	lr
	uint8_t olddata=0xFF;
   16512:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16516:	e7a3      	b.n	16460 <eeprom_write_byte+0x6c>
   16518:	2000fc3d 	.word	0x2000fc3d
   1651c:	04104105 	.word	0x04104105
   16520:	2000f9e4 	.word	0x2000f9e4
   16524:	000607c0 	.word	0x000607c0

00016528 <eeprom_write_word>:
{
   16528:	b538      	push	{r3, r4, r5, lr}
   1652a:	460c      	mov	r4, r1
   1652c:	4605      	mov	r5, r0
	eeprom_write_byte(p++, value);
   1652e:	b2c9      	uxtb	r1, r1
   16530:	f7ff ff60 	bl	163f4 <eeprom_write_byte>
	eeprom_write_byte(p, value >> 8);
   16534:	1c68      	adds	r0, r5, #1
   16536:	0a21      	lsrs	r1, r4, #8
}
   16538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	eeprom_write_byte(p, value >> 8);
   1653c:	f7ff bf5a 	b.w	163f4 <eeprom_write_byte>

00016540 <eeprom_write_dword>:
{
   16540:	b538      	push	{r3, r4, r5, lr}
   16542:	460c      	mov	r4, r1
   16544:	4605      	mov	r5, r0
	eeprom_write_byte(p++, value);
   16546:	b2c9      	uxtb	r1, r1
   16548:	f7ff ff54 	bl	163f4 <eeprom_write_byte>
	eeprom_write_byte(p++, value >> 8);
   1654c:	f3c4 2107 	ubfx	r1, r4, #8, #8
   16550:	1c68      	adds	r0, r5, #1
   16552:	f7ff ff4f 	bl	163f4 <eeprom_write_byte>
	eeprom_write_byte(p++, value >> 16);
   16556:	f3c4 4107 	ubfx	r1, r4, #16, #8
   1655a:	1ca8      	adds	r0, r5, #2
   1655c:	f7ff ff4a 	bl	163f4 <eeprom_write_byte>
	eeprom_write_byte(p, value >> 24);
   16560:	1ce8      	adds	r0, r5, #3
   16562:	0e21      	lsrs	r1, r4, #24
}
   16564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	eeprom_write_byte(p, value >> 24);
   16568:	f7ff bf44 	b.w	163f4 <eeprom_write_byte>

0001656c <eeprom_write_block>:
	while (len--) {
   1656c:	b162      	cbz	r2, 16588 <eeprom_write_block+0x1c>
{
   1656e:	b570      	push	{r4, r5, r6, lr}
   16570:	4605      	mov	r5, r0
   16572:	460c      	mov	r4, r1
   16574:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
   16576:	4620      	mov	r0, r4
   16578:	3401      	adds	r4, #1
   1657a:	f815 1b01 	ldrb.w	r1, [r5], #1
   1657e:	f7ff ff39 	bl	163f4 <eeprom_write_byte>
	while (len--) {
   16582:	42b4      	cmp	r4, r6
   16584:	d1f7      	bne.n	16576 <eeprom_write_block+0xa>
}
   16586:	bd70      	pop	{r4, r5, r6, pc}
   16588:	4770      	bx	lr
   1658a:	bf00      	nop

0001658c <dummy_isr>:
static void dummy_isr() {};
   1658c:	4770      	bx	lr
   1658e:	bf00      	nop

00016590 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   16590:	2836      	cmp	r0, #54	; 0x36
   16592:	d858      	bhi.n	16646 <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
   16594:	0100      	lsls	r0, r0, #4
{
   16596:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
   16598:	4c34      	ldr	r4, [pc, #208]	; (1666c <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
   1659a:	4d35      	ldr	r5, [pc, #212]	; (16670 <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
   1659c:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
   1659e:	42ab      	cmp	r3, r5
   165a0:	d056      	beq.n	16650 <attachInterrupt+0xc0>
   165a2:	d849      	bhi.n	16638 <attachInterrupt+0xa8>
   165a4:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
   165a8:	d04b      	beq.n	16642 <attachInterrupt+0xb2>
   165aa:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   165ae:	42ab      	cmp	r3, r5
   165b0:	d140      	bne.n	16634 <attachInterrupt+0xa4>
   165b2:	4d30      	ldr	r5, [pc, #192]	; (16674 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
   165b4:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   165b6:	4e30      	ldr	r6, [pc, #192]	; (16678 <attachInterrupt+0xe8>)
   165b8:	4c30      	ldr	r4, [pc, #192]	; (1667c <attachInterrupt+0xec>)
   165ba:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
   165be:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
   165c2:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
   165c4:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
   165c8:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   165cc:	2a04      	cmp	r2, #4
   165ce:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
   165d2:	d82f      	bhi.n	16634 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   165d4:	695e      	ldr	r6, [r3, #20]
   165d6:	ea26 0600 	bic.w	r6, r6, r0
   165da:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
   165dc:	f04f 0605 	mov.w	r6, #5
   165e0:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
   165e4:	6826      	ldr	r6, [r4, #0]
   165e6:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
   165ea:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
   165ec:	685c      	ldr	r4, [r3, #4]
   165ee:	ea24 0400 	bic.w	r4, r4, r0
   165f2:	605c      	str	r4, [r3, #4]
   165f4:	4c22      	ldr	r4, [pc, #136]	; (16680 <attachInterrupt+0xf0>)
   165f6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
   165fa:	fa90 f2a0 	rbit	r2, r0
   165fe:	fab2 f282 	clz	r2, r2
	table[index] = function;
   16602:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   16606:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
   1660a:	d01d      	beq.n	16648 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
   1660c:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
   1660e:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
   16610:	ea01 0105 	and.w	r1, r1, r5
   16614:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
   16616:	dc1d      	bgt.n	16654 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
   16618:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
   1661a:	2503      	movs	r5, #3
   1661c:	68d9      	ldr	r1, [r3, #12]
   1661e:	4094      	lsls	r4, r2
   16620:	fa05 f202 	lsl.w	r2, r5, r2
   16624:	ea21 0202 	bic.w	r2, r1, r2
   16628:	4322      	orrs	r2, r4
   1662a:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
   1662c:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
   1662e:	695a      	ldr	r2, [r3, #20]
   16630:	4302      	orrs	r2, r0
   16632:	615a      	str	r2, [r3, #20]
}
   16634:	bcf0      	pop	{r4, r5, r6, r7}
   16636:	4770      	bx	lr
	switch((uint32_t)gpio) {
   16638:	4d12      	ldr	r5, [pc, #72]	; (16684 <attachInterrupt+0xf4>)
   1663a:	42ab      	cmp	r3, r5
   1663c:	d1fa      	bne.n	16634 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
   1663e:	4d12      	ldr	r5, [pc, #72]	; (16688 <attachInterrupt+0xf8>)
   16640:	e7b8      	b.n	165b4 <attachInterrupt+0x24>
			table = isr_table_gpio1;
   16642:	4d12      	ldr	r5, [pc, #72]	; (1668c <attachInterrupt+0xfc>)
   16644:	e7b6      	b.n	165b4 <attachInterrupt+0x24>
   16646:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
   16648:	69da      	ldr	r2, [r3, #28]
   1664a:	4302      	orrs	r2, r0
   1664c:	61da      	str	r2, [r3, #28]
   1664e:	e7ed      	b.n	1662c <attachInterrupt+0x9c>
			table = isr_table_gpio3;
   16650:	4d0f      	ldr	r5, [pc, #60]	; (16690 <attachInterrupt+0x100>)
   16652:	e7af      	b.n	165b4 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
   16654:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   16656:	2503      	movs	r5, #3
   16658:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
   1665a:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   1665c:	4094      	lsls	r4, r2
   1665e:	fa05 f202 	lsl.w	r2, r5, r2
   16662:	ea21 0202 	bic.w	r2, r1, r2
   16666:	4322      	orrs	r2, r4
   16668:	611a      	str	r2, [r3, #16]
   1666a:	e7df      	b.n	1662c <attachInterrupt+0x9c>
   1666c:	200081bc 	.word	0x200081bc
   16670:	42008000 	.word	0x42008000
   16674:	20009a70 	.word	0x20009a70
   16678:	00000021 	.word	0x00000021
   1667c:	2000a000 	.word	0x2000a000
   16680:	20002670 	.word	0x20002670
   16684:	4200c000 	.word	0x4200c000
   16688:	20009b70 	.word	0x20009b70
   1668c:	200099f0 	.word	0x200099f0
   16690:	20009af0 	.word	0x20009af0

00016694 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   16694:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   16696:	f7e9 fd6b 	bl	170 <setup>
	while (1) {
		loop();
   1669a:	f7e9 fd7f 	bl	19c <loop>
		yield();
   1669e:	f001 fccb 	bl	18038 <yield>
	while (1) {
   166a2:	e7fa      	b.n	1669a <main+0x6>

000166a4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   166a4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   166a6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
   166aa:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   166ae:	d16d      	bne.n	1678c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   166b0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
   166b2:	d341      	bcc.n	16738 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   166b4:	f851 3b04 	ldr.w	r3, [r1], #4
   166b8:	f840 3b04 	str.w	r3, [r0], #4
   166bc:	f851 3b04 	ldr.w	r3, [r1], #4
   166c0:	f840 3b04 	str.w	r3, [r0], #4
   166c4:	f851 3b04 	ldr.w	r3, [r1], #4
   166c8:	f840 3b04 	str.w	r3, [r0], #4
   166cc:	f851 3b04 	ldr.w	r3, [r1], #4
   166d0:	f840 3b04 	str.w	r3, [r0], #4
   166d4:	f851 3b04 	ldr.w	r3, [r1], #4
   166d8:	f840 3b04 	str.w	r3, [r0], #4
   166dc:	f851 3b04 	ldr.w	r3, [r1], #4
   166e0:	f840 3b04 	str.w	r3, [r0], #4
   166e4:	f851 3b04 	ldr.w	r3, [r1], #4
   166e8:	f840 3b04 	str.w	r3, [r0], #4
   166ec:	f851 3b04 	ldr.w	r3, [r1], #4
   166f0:	f840 3b04 	str.w	r3, [r0], #4
   166f4:	f851 3b04 	ldr.w	r3, [r1], #4
   166f8:	f840 3b04 	str.w	r3, [r0], #4
   166fc:	f851 3b04 	ldr.w	r3, [r1], #4
   16700:	f840 3b04 	str.w	r3, [r0], #4
   16704:	f851 3b04 	ldr.w	r3, [r1], #4
   16708:	f840 3b04 	str.w	r3, [r0], #4
   1670c:	f851 3b04 	ldr.w	r3, [r1], #4
   16710:	f840 3b04 	str.w	r3, [r0], #4
   16714:	f851 3b04 	ldr.w	r3, [r1], #4
   16718:	f840 3b04 	str.w	r3, [r0], #4
   1671c:	f851 3b04 	ldr.w	r3, [r1], #4
   16720:	f840 3b04 	str.w	r3, [r0], #4
   16724:	f851 3b04 	ldr.w	r3, [r1], #4
   16728:	f840 3b04 	str.w	r3, [r0], #4
   1672c:	f851 3b04 	ldr.w	r3, [r1], #4
   16730:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   16734:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   16736:	d2bd      	bcs.n	166b4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   16738:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   1673a:	d311      	bcc.n	16760 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   1673c:	f851 3b04 	ldr.w	r3, [r1], #4
   16740:	f840 3b04 	str.w	r3, [r0], #4
   16744:	f851 3b04 	ldr.w	r3, [r1], #4
   16748:	f840 3b04 	str.w	r3, [r0], #4
   1674c:	f851 3b04 	ldr.w	r3, [r1], #4
   16750:	f840 3b04 	str.w	r3, [r0], #4
   16754:	f851 3b04 	ldr.w	r3, [r1], #4
   16758:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   1675c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
   1675e:	d2ed      	bcs.n	1673c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   16760:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
   16762:	d305      	bcc.n	16770 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   16764:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   16768:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
   1676c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   1676e:	d2f9      	bcs.n	16764 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   16770:	3204      	adds	r2, #4
	beq	.Ldone
   16772:	d008      	beq.n	16786 <memcpy+0xe2>

	lsls	r2, r2, #31
   16774:	07d2      	lsls	r2, r2, #31
	itt ne
   16776:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   16778:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   1677c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
   16780:	d301      	bcc.n	16786 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   16782:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   16784:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   16786:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   16788:	4770      	bx	lr
   1678a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   1678c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
   1678e:	d313      	bcc.n	167b8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   16790:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
   16792:	d08d      	beq.n	166b0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   16794:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   16798:	d08a      	beq.n	166b0 <memcpy+0xc>

	rsb	r3, #4
   1679a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
   1679e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
   167a0:	07db      	lsls	r3, r3, #31
	itt ne
   167a2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   167a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   167a8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   167ac:	d380      	bcc.n	166b0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   167ae:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   167b2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   167b6:	e77b      	b.n	166b0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   167b8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
   167ba:	d3d9      	bcc.n	16770 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   167bc:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
   167be:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   167c2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   167c6:	d2f9      	bcs.n	167bc <memcpy+0x118>

	ldrb	r3, [r1]
   167c8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   167ca:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   167cc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   167ce:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   167d0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   167d2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   167d4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   167d6:	4770      	bx	lr

000167d8 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
   167d8:	f003 b8a8 	b.w	1992c <malloc>

000167dc <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
   167dc:	f003 b8ae 	b.w	1993c <free>

000167e0 <ultoa>:
	int i=0, j;
   167e0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
   167e4:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
   167e6:	4666      	mov	r6, ip
	int i=0, j;
   167e8:	2400      	movs	r4, #0
   167ea:	e000      	b.n	167ee <ultoa+0xe>
		i++;
   167ec:	3401      	adds	r4, #1
		digit = val % radix;
   167ee:	fbb0 f5f2 	udiv	r5, r0, r2
   167f2:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   167f6:	2b09      	cmp	r3, #9
   167f8:	f103 0e37 	add.w	lr, r3, #55	; 0x37
   167fc:	f103 0330 	add.w	r3, r3, #48	; 0x30
   16800:	fa5f fe8e 	uxtb.w	lr, lr
   16804:	bf98      	it	ls
   16806:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
   1680a:	4290      	cmp	r0, r2
		val /= radix;
   1680c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1680e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
   16812:	d2eb      	bcs.n	167ec <ultoa+0xc>
	buf[i + 1] = 0;
   16814:	1c63      	adds	r3, r4, #1
   16816:	2200      	movs	r2, #0
   16818:	18c8      	adds	r0, r1, r3
   1681a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
   1681c:	b17c      	cbz	r4, 1683e <ultoa+0x5e>
		t = buf[j];
   1681e:	4662      	mov	r2, ip
   16820:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
   16824:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
   16828:	eba1 030c 	sub.w	r3, r1, ip
   1682c:	3202      	adds	r2, #2
		buf[j] = buf[i];
   1682e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
   16832:	3b01      	subs	r3, #1
   16834:	1a52      	subs	r2, r2, r1
		buf[i] = t;
   16836:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
   16838:	4423      	add	r3, r4
   1683a:	429a      	cmp	r2, r3
   1683c:	dbef      	blt.n	1681e <ultoa+0x3e>
}
   1683e:	4608      	mov	r0, r1
   16840:	bd70      	pop	{r4, r5, r6, pc}
   16842:	bf00      	nop

00016844 <flexpwmWrite>:
	uint16_t mask = 1 << submodule;
   16844:	f04f 0c01 	mov.w	ip, #1
   16848:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
   1684c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16850:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
   16854:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
   16856:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
   1685a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
   1685e:	4c25      	ldr	r4, [pc, #148]	; (168f4 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
   16860:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
   16864:	7824      	ldrb	r4, [r4, #0]
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16866:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
   16868:	fb0e 3303 	mla	r3, lr, r3, r3
   1686c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
   16870:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16872:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
   16876:	4573      	cmp	r3, lr
   16878:	b2a4      	uxth	r4, r4
   1687a:	bf28      	it	cs
   1687c:	4673      	movcs	r3, lr
   1687e:	4334      	orrs	r4, r6
	switch (channel) {
   16880:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16882:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
   16886:	d00d      	beq.n	168a4 <flexpwmWrite+0x60>
   16888:	2a02      	cmp	r2, #2
   1688a:	d028      	beq.n	168de <flexpwmWrite+0x9a>
   1688c:	b1c2      	cbz	r2, 168c0 <flexpwmWrite+0x7c>
   1688e:	f00c 020f 	and.w	r2, ip, #15
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
   16892:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
   16896:	fa1f fc8c 	uxth.w	ip, ip
   1689a:	ea4c 0c02 	orr.w	ip, ip, r2
   1689e:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
   168a2:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
   168a4:	b29b      	uxth	r3, r3
   168a6:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
   168aa:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
   168ac:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
   168ae:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
   168b2:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
   168b6:	b29b      	uxth	r3, r3
   168b8:	432b      	orrs	r3, r5
   168ba:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
   168be:	e7e8      	b.n	16892 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
   168c0:	ebae 0e03 	sub.w	lr, lr, r3
   168c4:	f00c 020f 	and.w	r2, ip, #15
   168c8:	fa1f fe8e 	uxth.w	lr, lr
   168cc:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
   168d0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
   168d4:	b29b      	uxth	r3, r3
   168d6:	4313      	orrs	r3, r2
   168d8:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
   168dc:	e7d9      	b.n	16892 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
   168de:	b29b      	uxth	r3, r3
   168e0:	f00c 020f 	and.w	r2, ip, #15
   168e4:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
   168e6:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
   168ea:	b29b      	uxth	r3, r3
   168ec:	431e      	orrs	r6, r3
   168ee:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
   168f2:	e7ce      	b.n	16892 <flexpwmWrite+0x4e>
   168f4:	20009c66 	.word	0x20009c66

000168f8 <flexpwmFrequency>:
	uint32_t olddiv = p->SM[submodule].VAL1;
   168f8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   168fc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t olddiv = p->SM[submodule].VAL1;
   16900:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   16904:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   16908:	4b31      	ldr	r3, [pc, #196]	; (169d0 <flexpwmFrequency+0xd8>)
	uint32_t olddiv = p->SM[submodule].VAL1;
   1690a:	fa1f fc8c 	uxth.w	ip, ip
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   1690e:	ed93 7a00 	vldr	s14, [r3]
   16912:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
   16916:	b570      	push	{r4, r5, r6, lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   16918:	eec7 7a00 	vdiv.f32	s15, s14, s0
	uint16_t mask = 1 << submodule;
   1691c:	f04f 0e01 	mov.w	lr, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
   16920:	004e      	lsls	r6, r1, #1
	uint16_t mask = 1 << submodule;
   16922:	fa0e fe01 	lsl.w	lr, lr, r1
   16926:	fa1f f58e 	uxth.w	r5, lr
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   1692a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1692e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   16932:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65535 && prescale < 7) {
   16936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1693a:	d346      	bcc.n	169ca <flexpwmFrequency+0xd2>
	uint32_t prescale = 0;
   1693c:	2200      	movs	r2, #0
	while (newdiv > 65535 && prescale < 7) {
   1693e:	f64f 74ff 	movw	r4, #65535	; 0xffff
		newdiv = newdiv >> 1;
   16942:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
   16944:	3201      	adds	r2, #1
	while (newdiv > 65535 && prescale < 7) {
   16946:	42a3      	cmp	r3, r4
   16948:	d901      	bls.n	1694e <flexpwmFrequency+0x56>
   1694a:	2a06      	cmp	r2, #6
   1694c:	d9f9      	bls.n	16942 <flexpwmFrequency+0x4a>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   1694e:	0112      	lsls	r2, r2, #4
   16950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   16954:	b292      	uxth	r2, r2
	if (newdiv > 65535) {
   16956:	2b02      	cmp	r3, #2
   16958:	f64f 74ff 	movw	r4, #65535	; 0xffff
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   1695c:	ea4f 1505 	mov.w	r5, r5, lsl #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   16960:	4431      	add	r1, r6
   16962:	bf38      	it	cc
   16964:	2302      	movcc	r3, #2
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
   16966:	f00e 0e0f 	and.w	lr, lr, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   1696a:	b2ed      	uxtb	r5, r5
   1696c:	42a3      	cmp	r3, r4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   1696e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   16972:	bf28      	it	cs
   16974:	4623      	movcs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
   16976:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
   1697a:	b2a4      	uxth	r4, r4
   1697c:	432c      	orrs	r4, r5
   1697e:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
   16982:	80ca      	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
   16984:	1e5a      	subs	r2, r3, #1
   16986:	b292      	uxth	r2, r2
   16988:	81ca      	strh	r2, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
   1698a:	894a      	ldrh	r2, [r1, #10]
   1698c:	b292      	uxth	r2, r2
   1698e:	fb03 f202 	mul.w	r2, r3, r2
   16992:	fbb2 f2fc 	udiv	r2, r2, ip
   16996:	b292      	uxth	r2, r2
   16998:	814a      	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
   1699a:	8aca      	ldrh	r2, [r1, #22]
   1699c:	b292      	uxth	r2, r2
   1699e:	fb03 f202 	mul.w	r2, r3, r2
   169a2:	fbb2 f2fc 	udiv	r2, r2, ip
   169a6:	b292      	uxth	r2, r2
   169a8:	82ca      	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
   169aa:	8bca      	ldrh	r2, [r1, #30]
   169ac:	b292      	uxth	r2, r2
   169ae:	fb02 f303 	mul.w	r3, r2, r3
   169b2:	fbb3 f3fc 	udiv	r3, r3, ip
   169b6:	b29b      	uxth	r3, r3
   169b8:	83cb      	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
   169ba:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   169be:	b29b      	uxth	r3, r3
   169c0:	ea43 030e 	orr.w	r3, r3, lr
   169c4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   169c8:	bd70      	pop	{r4, r5, r6, pc}
	while (newdiv > 65535 && prescale < 7) {
   169ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   169ce:	e7c2      	b.n	16956 <flexpwmFrequency+0x5e>
   169d0:	20009534 	.word	0x20009534

000169d4 <quadtimerFrequency>:

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   169d4:	4b21      	ldr	r3, [pc, #132]	; (16a5c <quadtimerFrequency+0x88>)
   169d6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
   169da:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
   169de:	ed93 7a00 	vldr	s14, [r3]
   169e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   169e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   169ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
   169ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   169f2:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
   169f6:	4563      	cmp	r3, ip
   169f8:	d92c      	bls.n	16a54 <quadtimerFrequency+0x80>
	uint32_t prescale = 0;
   169fa:	2200      	movs	r2, #0
		newdiv = newdiv >> 1; 
   169fc:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
   169fe:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
   16a00:	4563      	cmp	r3, ip
   16a02:	d901      	bls.n	16a08 <quadtimerFrequency+0x34>
   16a04:	2a06      	cmp	r2, #6
   16a06:	d9f9      	bls.n	169fc <quadtimerFrequency+0x28>
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
   16a08:	3208      	adds	r2, #8
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
   16a0a:	f242 0c26 	movw	ip, #8230	; 0x2026
   16a0e:	ea4c 2c42 	orr.w	ip, ip, r2, lsl #9
   16a12:	fa1f fc8c 	uxth.w	ip, ip
	if (newdiv > 65534) {
   16a16:	2b02      	cmp	r3, #2
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
   16a18:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   16a1c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   16a20:	bf38      	it	cc
   16a22:	2302      	movcc	r3, #2
   16a24:	8a0a      	ldrh	r2, [r1, #16]
   16a26:	4283      	cmp	r3, r0
   16a28:	b292      	uxth	r2, r2
   16a2a:	bf28      	it	cs
   16a2c:	4603      	movcs	r3, r0
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
   16a2e:	88c8      	ldrh	r0, [r1, #6]
   16a30:	b280      	uxth	r0, r0
   16a32:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
   16a36:	4410      	add	r0, r2
   16a38:	fb03 f202 	mul.w	r2, r3, r2
   16a3c:	fbb2 f2f0 	udiv	r2, r2, r0
	uint32_t low = newdiv - high;
   16a40:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
   16a42:	b292      	uxth	r2, r2
	p->CH[submodule].LOAD = 65537 - low;
   16a44:	f1c3 0301 	rsb	r3, r3, #1
   16a48:	b29b      	uxth	r3, r3
   16a4a:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
   16a4c:	820a      	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
   16a4e:	f8a1 c00c 	strh.w	ip, [r1, #12]
}
   16a52:	4770      	bx	lr
	while (newdiv > 65534 && prescale < 7) {
   16a54:	f243 0c26 	movw	ip, #12326	; 0x3026
   16a58:	e7dd      	b.n	16a16 <quadtimerFrequency+0x42>
   16a5a:	bf00      	nop
   16a5c:	20009534 	.word	0x20009534

00016a60 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
   16a60:	2836      	cmp	r0, #54	; 0x36
   16a62:	d84b      	bhi.n	16afc <analogWrite+0x9c>
{
   16a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
   16a66:	4d2a      	ldr	r5, [pc, #168]	; (16b10 <analogWrite+0xb0>)
   16a68:	4604      	mov	r4, r0
	if (info->type == 1) {
   16a6a:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
   16a6e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
   16a72:	2a01      	cmp	r2, #1
   16a74:	d02d      	beq.n	16ad2 <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
   16a76:	2a02      	cmp	r2, #2
   16a78:	d13f      	bne.n	16afa <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
   16a7a:	786b      	ldrb	r3, [r5, #1]
   16a7c:	f3c3 1001 	ubfx	r0, r3, #4, #2
   16a80:	2803      	cmp	r0, #3
   16a82:	d03e      	beq.n	16b02 <analogWrite+0xa2>
   16a84:	4a23      	ldr	r2, [pc, #140]	; (16b14 <analogWrite+0xb4>)
   16a86:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
   16a8a:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
   16a8e:	4822      	ldr	r0, [pc, #136]	; (16b18 <analogWrite+0xb8>)
   16a90:	b289      	uxth	r1, r1
   16a92:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
   16a94:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
   16a98:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
   16a9a:	f8bc e006 	ldrh.w	lr, [ip, #6]
   16a9e:	0158      	lsls	r0, r3, #5
   16aa0:	f8bc 3010 	ldrh.w	r3, [ip, #16]
   16aa4:	fa1f fe8e 	uxth.w	lr, lr
   16aa8:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
   16aac:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
   16ab0:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   16ab4:	fb0e f101 	mul.w	r1, lr, r1
   16ab8:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
   16aba:	458e      	cmp	lr, r1
   16abc:	d923      	bls.n	16b06 <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
   16abe:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
   16ac0:	f1c3 0301 	rsb	r3, r3, #1
   16ac4:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
   16ac6:	b289      	uxth	r1, r1
   16ac8:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
   16aca:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
   16ace:	8211      	strh	r1, [r2, #16]
}
   16ad0:	e00d      	b.n	16aee <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
   16ad2:	786a      	ldrb	r2, [r5, #1]
   16ad4:	f3c2 1301 	ubfx	r3, r2, #4, #2
   16ad8:	2b03      	cmp	r3, #3
   16ada:	d010      	beq.n	16afe <analogWrite+0x9e>
   16adc:	480f      	ldr	r0, [pc, #60]	; (16b1c <analogWrite+0xbc>)
   16ade:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
   16ae2:	b28b      	uxth	r3, r1
   16ae4:	f002 0103 	and.w	r1, r2, #3
   16ae8:	78aa      	ldrb	r2, [r5, #2]
   16aea:	f7ff feab 	bl	16844 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
   16aee:	4b0c      	ldr	r3, [pc, #48]	; (16b20 <analogWrite+0xc0>)
   16af0:	78ea      	ldrb	r2, [r5, #3]
   16af2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   16af6:	685b      	ldr	r3, [r3, #4]
   16af8:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
   16afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16afc:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
   16afe:	4809      	ldr	r0, [pc, #36]	; (16b24 <analogWrite+0xc4>)
   16b00:	e7ef      	b.n	16ae2 <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
   16b02:	4a09      	ldr	r2, [pc, #36]	; (16b28 <analogWrite+0xc8>)
   16b04:	e7c1      	b.n	16a8a <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
   16b06:	1e99      	subs	r1, r3, #2
   16b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16b0c:	e7db      	b.n	16ac6 <analogWrite+0x66>
   16b0e:	bf00      	nop
   16b10:	20008540 	.word	0x20008540
   16b14:	401dc000 	.word	0x401dc000
   16b18:	20009c66 	.word	0x20009c66
   16b1c:	403dc000 	.word	0x403dc000
   16b20:	200081bc 	.word	0x200081bc
   16b24:	403e8000 	.word	0x403e8000
   16b28:	401e8000 	.word	0x401e8000

00016b2c <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
   16b2c:	2836      	cmp	r0, #54	; 0x36
   16b2e:	d808      	bhi.n	16b42 <analogWriteFrequency+0x16>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
   16b30:	4b15      	ldr	r3, [pc, #84]	; (16b88 <analogWriteFrequency+0x5c>)
	if (info->type == 1) {
   16b32:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
	info = pwm_pin_info + pin;
   16b36:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
   16b3a:	2a01      	cmp	r2, #1
   16b3c:	d002      	beq.n	16b44 <analogWriteFrequency+0x18>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
   16b3e:	2a02      	cmp	r2, #2
   16b40:	d00d      	beq.n	16b5e <analogWriteFrequency+0x32>
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}
   16b42:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
   16b44:	7859      	ldrb	r1, [r3, #1]
   16b46:	f3c1 1201 	ubfx	r2, r1, #4, #2
   16b4a:	2a03      	cmp	r2, #3
   16b4c:	d013      	beq.n	16b76 <analogWriteFrequency+0x4a>
   16b4e:	480f      	ldr	r0, [pc, #60]	; (16b8c <analogWriteFrequency+0x60>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
   16b50:	f001 0103 	and.w	r1, r1, #3
   16b54:	eb00 3082 	add.w	r0, r0, r2, lsl #14
   16b58:	789a      	ldrb	r2, [r3, #2]
   16b5a:	f7ff becd 	b.w	168f8 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
   16b5e:	7859      	ldrb	r1, [r3, #1]
   16b60:	f3c1 1301 	ubfx	r3, r1, #4, #2
   16b64:	2b03      	cmp	r3, #3
   16b66:	d00c      	beq.n	16b82 <analogWriteFrequency+0x56>
   16b68:	4809      	ldr	r0, [pc, #36]	; (16b90 <analogWriteFrequency+0x64>)
   16b6a:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
   16b6e:	f001 0103 	and.w	r1, r1, #3
   16b72:	f7ff bf2f 	b.w	169d4 <quadtimerFrequency>
		switch ((info->module >> 4) & 3) {
   16b76:	4807      	ldr	r0, [pc, #28]	; (16b94 <analogWriteFrequency+0x68>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
   16b78:	f001 0103 	and.w	r1, r1, #3
   16b7c:	789a      	ldrb	r2, [r3, #2]
   16b7e:	f7ff bebb 	b.w	168f8 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
   16b82:	4805      	ldr	r0, [pc, #20]	; (16b98 <analogWriteFrequency+0x6c>)
   16b84:	e7f3      	b.n	16b6e <analogWriteFrequency+0x42>
   16b86:	bf00      	nop
   16b88:	20008540 	.word	0x20008540
   16b8c:	403dc000 	.word	0x403dc000
   16b90:	401dc000 	.word	0x401dc000
   16b94:	403e8000 	.word	0x403e8000
   16b98:	401e8000 	.word	0x401e8000

00016b9c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   16b9c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   16b9e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   16ba0:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   16ba4:	4619      	mov	r1, r3
{
   16ba6:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   16ba8:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   16bac:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   16bb0:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16bb4:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   16bb8:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   16bbc:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   16bbe:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   16bc2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16bc6:	b29b      	uxth	r3, r3
   16bc8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   16bcc:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16bd0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   16bd4:	3101      	adds	r1, #1
   16bd6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   16bda:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16bdc:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   16bde:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   16be2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   16be4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   16be6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   16be8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   16bea:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   16bee:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   16bf0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   16bf2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   16bf4:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   16bf6:	d1eb      	bne.n	16bd0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   16bf8:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16bfc:	b29b      	uxth	r3, r3
   16bfe:	f043 030f 	orr.w	r3, r3, #15
   16c02:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   16c06:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16c0a:	b29b      	uxth	r3, r3
   16c0c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   16c10:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   16c14:	bd10      	pop	{r4, pc}
   16c16:	bf00      	nop

00016c18 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16c18:	4b37      	ldr	r3, [pc, #220]	; (16cf8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16c1a:	4a38      	ldr	r2, [pc, #224]	; (16cfc <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16c1c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   16c1e:	4838      	ldr	r0, [pc, #224]	; (16d00 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16c20:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   16c24:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16c26:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16c28:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16c2c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16c30:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16c34:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16c38:	430a      	orrs	r2, r1
   16c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   16c3e:	f7ff ffad 	bl	16b9c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   16c42:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16c46:	f7ff ffa9 	bl	16b9c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   16c4a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16c4e:	f7ff ffa5 	bl	16b9c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   16c52:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16c56:	f7ff ffa1 	bl	16b9c <flexpwm_init>
	for (i=0; i < 4; i++) {
   16c5a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16c5c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16c60:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   16c64:	4611      	mov	r1, r2
   16c66:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16c6a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16c6e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16c70:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16c72:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16c74:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16c76:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16c7a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16c7c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16c7e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16c82:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16c84:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   16c86:	d1ee      	bne.n	16c66 <pwm_init+0x4e>
   16c88:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16c8a:	481e      	ldr	r0, [pc, #120]	; (16d04 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16c8c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16c90:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   16c94:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16c96:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16c9a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   16c9e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16ca2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16ca6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16ca8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16caa:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16cac:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16cae:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16cb2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16cb4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16cb6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16cba:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16cbc:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   16cbe:	d1ee      	bne.n	16c9e <pwm_init+0x86>
   16cc0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16cc2:	4811      	ldr	r0, [pc, #68]	; (16d08 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16cc4:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16cc6:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   16cca:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16ccc:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16cd0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   16cd4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16cd8:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16cdc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16cde:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16ce0:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16ce2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16ce4:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16ce6:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16ce8:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16cea:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16cee:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16cf0:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   16cf4:	d1ee      	bne.n	16cd4 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   16cf6:	bd70      	pop	{r4, r5, r6, pc}
   16cf8:	400fc000 	.word	0x400fc000
   16cfc:	fc030000 	.word	0xfc030000
   16d00:	403dc000 	.word	0x403dc000
   16d04:	401e0000 	.word	0x401e0000
   16d08:	401e4000 	.word	0x401e4000

00016d0c <analogWriteRes>:
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
	analog_write_res = bits;
   16d0c:	2810      	cmp	r0, #16
   16d0e:	4603      	mov	r3, r0
	prior = analog_write_res;
   16d10:	4a04      	ldr	r2, [pc, #16]	; (16d24 <analogWriteRes+0x18>)
	analog_write_res = bits;
   16d12:	bf28      	it	cs
   16d14:	2310      	movcs	r3, #16
	prior = analog_write_res;
   16d16:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
   16d18:	2b01      	cmp	r3, #1
   16d1a:	bf38      	it	cc
   16d1c:	2301      	movcc	r3, #1
   16d1e:	7013      	strb	r3, [r2, #0]
	return prior;
}
   16d20:	4770      	bx	lr
   16d22:	bf00      	nop
   16d24:	20009c66 	.word	0x20009c66

00016d28 <unused_interrupt_vector>:
	__disable_irq();
   16d28:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
   16d2a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
   16d2e:	4c52      	ldr	r4, [pc, #328]	; (16e78 <unused_interrupt_vector+0x150>)
   16d30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
   16d34:	f01e 0f04 	tst.w	lr, #4
   16d38:	bf0c      	ite	eq
   16d3a:	f3ef 8208 	mrseq	r2, MSP
   16d3e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
   16d42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
   16d46:	4e4d      	ldr	r6, [pc, #308]	; (16e7c <unused_interrupt_vector+0x154>)
	while (p < end) {
   16d48:	4d4d      	ldr	r5, [pc, #308]	; (16e80 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
   16d4a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
   16d4e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
   16d52:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
   16d56:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
   16d5a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
   16d5e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
   16d62:	6993      	ldr	r3, [r2, #24]
   16d64:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
   16d68:	69d3      	ldr	r3, [r2, #28]
   16d6a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
   16d6e:	f000 f8d3 	bl	16f18 <tempmonGetTemp>
   16d72:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
   16d76:	f001 f9cb 	bl	18110 <rtc_get>
	info->len = sizeof(*info) / 4;
   16d7a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
   16d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
   16d80:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
   16d84:	460b      	mov	r3, r1
   16d86:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   16d8a:	493e      	ldr	r1, [pc, #248]	; (16e84 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
   16d8c:	1d30      	adds	r0, r6, #4
   16d8e:	405a      	eors	r2, r3
   16d90:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   16d92:	f002 0301 	and.w	r3, r2, #1
   16d96:	3c01      	subs	r4, #1
   16d98:	fb01 f303 	mul.w	r3, r1, r3
   16d9c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
   16da0:	d1f7      	bne.n	16d92 <unused_interrupt_vector+0x6a>
	while (p < end) {
   16da2:	42a8      	cmp	r0, r5
   16da4:	d002      	beq.n	16dac <unused_interrupt_vector+0x84>
		crc ^= *p++;
   16da6:	6873      	ldr	r3, [r6, #4]
   16da8:	4606      	mov	r6, r0
   16daa:	e7ef      	b.n	16d8c <unused_interrupt_vector+0x64>
	info->crc = crc;
   16dac:	4b32      	ldr	r3, [pc, #200]	; (16e78 <unused_interrupt_vector+0x150>)
   16dae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
   16db2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   16db6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16dba:	4930      	ldr	r1, [pc, #192]	; (16e7c <unused_interrupt_vector+0x154>)
   16dbc:	4a32      	ldr	r2, [pc, #200]	; (16e88 <unused_interrupt_vector+0x160>)
   16dbe:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
   16dc2:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
   16dc6:	f3bf 8f4f 	dsb	sy
	asm("isb");
   16dca:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16dce:	4a2f      	ldr	r2, [pc, #188]	; (16e8c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
   16dd0:	2502      	movs	r5, #2
   16dd2:	482f      	ldr	r0, [pc, #188]	; (16e90 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16dd4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16dd6:	492f      	ldr	r1, [pc, #188]	; (16e94 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16dd8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   16ddc:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
   16dde:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   16de0:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16de2:	482d      	ldr	r0, [pc, #180]	; (16e98 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   16de4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   16de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16dec:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16dee:	680b      	ldr	r3, [r1, #0]
   16df0:	4283      	cmp	r3, r0
   16df2:	d83d      	bhi.n	16e70 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
   16df4:	4d26      	ldr	r5, [pc, #152]	; (16e90 <unused_interrupt_vector+0x168>)
   16df6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
   16df8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
   16e00:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   16e02:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
   16e04:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
   16e08:	4924      	ldr	r1, [pc, #144]	; (16e9c <unused_interrupt_vector+0x174>)
   16e0a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   16e0e:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
   16e12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
   16e16:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
   16e1a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
   16e1e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
   16e22:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
   16e26:	e001      	b.n	16e2c <unused_interrupt_vector+0x104>
		usb_isr();
   16e28:	f000 f968 	bl	170fc <usb_isr>
		if (PIT_TFLG0) {
   16e2c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   16e30:	2b00      	cmp	r3, #0
   16e32:	d0f9      	beq.n	16e28 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
   16e34:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
   16e36:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
   16e3a:	2c4f      	cmp	r4, #79	; 0x4f
   16e3c:	d9f4      	bls.n	16e28 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16e3e:	4b18      	ldr	r3, [pc, #96]	; (16ea0 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
   16e40:	2002      	movs	r0, #2
   16e42:	4918      	ldr	r1, [pc, #96]	; (16ea4 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16e44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
   16e48:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16e4c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16e4e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   16e52:	b93b      	cbnz	r3, 16e64 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
   16e54:	4814      	ldr	r0, [pc, #80]	; (16ea8 <unused_interrupt_vector+0x180>)
   16e56:	4915      	ldr	r1, [pc, #84]	; (16eac <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16e58:	4a0d      	ldr	r2, [pc, #52]	; (16e90 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
   16e5a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16e5c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   16e60:	2b00      	cmp	r3, #0
   16e62:	d0fa      	beq.n	16e5a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
   16e64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16e68:	4a11      	ldr	r2, [pc, #68]	; (16eb0 <unused_interrupt_vector+0x188>)
   16e6a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
   16e6e:	e7fe      	b.n	16e6e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16e70:	f7fe fece 	bl	15c10 <set_arm_clock>
   16e74:	e7be      	b.n	16df4 <unused_interrupt_vector+0xcc>
   16e76:	bf00      	nop
   16e78:	2027ff00 	.word	0x2027ff00
   16e7c:	2027ff80 	.word	0x2027ff80
   16e80:	2027ffa8 	.word	0x2027ffa8
   16e84:	edb88320 	.word	0xedb88320
   16e88:	2027ffa0 	.word	0x2027ffa0
   16e8c:	400fc000 	.word	0x400fc000
   16e90:	40084000 	.word	0x40084000
   16e94:	20009538 	.word	0x20009538
   16e98:	0bcd3d80 	.word	0x0bcd3d80
   16e9c:	00249f00 	.word	0x00249f00
   16ea0:	400d9000 	.word	0x400d9000
   16ea4:	402e0000 	.word	0x402e0000
   16ea8:	400f8000 	.word	0x400f8000
   16eac:	0bad00f1 	.word	0x0bad00f1
   16eb0:	05fa0004 	.word	0x05fa0004

00016eb4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
   16eb4:	490a      	ldr	r1, [pc, #40]	; (16ee0 <_sbrk+0x2c>)
   16eb6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
   16eb8:	b138      	cbz	r0, 16eca <_sbrk+0x16>
{
   16eba:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
   16ebc:	1813      	adds	r3, r2, r0
   16ebe:	4809      	ldr	r0, [pc, #36]	; (16ee4 <_sbrk+0x30>)
   16ec0:	4283      	cmp	r3, r0
   16ec2:	d804      	bhi.n	16ece <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   16ec4:	4610      	mov	r0, r2
                __brkval = prev + incr;
   16ec6:	600b      	str	r3, [r1, #0]
}
   16ec8:	bd08      	pop	{r3, pc}
   16eca:	4610      	mov	r0, r2
   16ecc:	4770      	bx	lr
                        errno = ENOMEM;
   16ece:	f005 ff85 	bl	1cddc <__errno>
   16ed2:	230c      	movs	r3, #12
                        return (void *)-1;
   16ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
   16ed8:	6003      	str	r3, [r0, #0]
}
   16eda:	4610      	mov	r0, r2
   16edc:	bd08      	pop	{r3, pc}
   16ede:	bf00      	nop
   16ee0:	200099d8 	.word	0x200099d8
   16ee4:	20280000 	.word	0x20280000

00016ee8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
   16ee8:	2000      	movs	r0, #0
   16eea:	4770      	bx	lr

00016eec <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
   16eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ef0:	4770      	bx	lr
   16ef2:	bf00      	nop

00016ef4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
   16ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
   16ef8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   16efa:	604b      	str	r3, [r1, #4]
}
   16efc:	4770      	bx	lr
   16efe:	bf00      	nop

00016f00 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
   16f00:	2001      	movs	r0, #1
   16f02:	4770      	bx	lr

00016f04 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
   16f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f08:	4770      	bx	lr
   16f0a:	bf00      	nop

00016f0c <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   16f0c:	bf30      	wfi
   16f0e:	e7fd      	b.n	16f0c <__cxa_pure_virtual>

00016f10 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
   16f10:	bf30      	wfi
   16f12:	e7fd      	b.n	16f10 <abort>

00016f14 <Panic_Temp_isr>:
  unused_interrupt_vector();
   16f14:	f7ff bf08 	b.w	16d28 <unused_interrupt_vector>

00016f18 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
   16f18:	4a12      	ldr	r2, [pc, #72]	; (16f64 <tempmonGetTemp+0x4c>)
   16f1a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   16f1e:	075b      	lsls	r3, r3, #29
   16f20:	d5fb      	bpl.n	16f1a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16f22:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16f26:	4810      	ldr	r0, [pc, #64]	; (16f68 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16f28:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16f2c:	490f      	ldr	r1, [pc, #60]	; (16f6c <tempmonGetTemp+0x54>)
   16f2e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16f32:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16f36:	ed91 6a00 	vldr	s12, [r1]
   16f3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   16f3e:	4a0c      	ldr	r2, [pc, #48]	; (16f70 <tempmonGetTemp+0x58>)
   16f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16f44:	4b0b      	ldr	r3, [pc, #44]	; (16f74 <tempmonGetTemp+0x5c>)
   16f46:	edd2 6a00 	vldr	s13, [r2]
   16f4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   16f4e:	ed93 7a00 	vldr	s14, [r3]
   16f52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   16f56:	ee67 7a86 	vmul.f32	s15, s15, s12
   16f5a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
   16f5e:	ee37 0a40 	vsub.f32	s0, s14, s0
   16f62:	4770      	bx	lr
   16f64:	400d8100 	.word	0x400d8100
   16f68:	2000f9d0 	.word	0x2000f9d0
   16f6c:	2000f9d8 	.word	0x2000f9d8
   16f70:	2000f9dc 	.word	0x2000f9dc
   16f74:	2000f9d4 	.word	0x2000f9d4

00016f78 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   16f78:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   16f7a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
   16f7c:	b11b      	cbz	r3, 16f86 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   16f7e:	6853      	ldr	r3, [r2, #4]
   16f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   16f84:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
   16f86:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   16f88:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   16f8a:	b33c      	cbz	r4, 16fdc <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   16f8c:	4b1a      	ldr	r3, [pc, #104]	; (16ff8 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
   16f8e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   16f90:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   16f94:	420c      	tst	r4, r1
   16f96:	d11d      	bne.n	16fd4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   16f98:	4e18      	ldr	r6, [pc, #96]	; (16ffc <schedule_transfer+0x84>)
   16f9a:	6877      	ldr	r7, [r6, #4]
   16f9c:	e004      	b.n	16fa8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   16f9e:	6874      	ldr	r4, [r6, #4]
   16fa0:	1be4      	subs	r4, r4, r7
   16fa2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
   16fa6:	d20b      	bcs.n	16fc0 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   16fa8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   16fac:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   16fb0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   16fb4:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   16fb8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   16fbc:	0464      	lsls	r4, r4, #17
   16fbe:	d5ee      	bpl.n	16f9e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   16fc0:	400d      	ands	r5, r1
   16fc2:	d107      	bne.n	16fd4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
   16fc4:	4c0c      	ldr	r4, [pc, #48]	; (16ff8 <schedule_transfer+0x80>)
		endpoint->status = 0;
   16fc6:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
   16fca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   16fce:	430b      	orrs	r3, r1
   16fd0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
   16fd4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   16fd6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   16fd8:	bcf0      	pop	{r4, r5, r6, r7}
   16fda:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
   16fdc:	4d06      	ldr	r5, [pc, #24]	; (16ff8 <schedule_transfer+0x80>)
	endpoint->status = 0;
   16fde:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
   16fe2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   16fe6:	430b      	orrs	r3, r1
   16fe8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   16fec:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
   16fee:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   16ff0:	b662      	cpsie	i
}
   16ff2:	bcf0      	pop	{r4, r5, r6, r7}
   16ff4:	4770      	bx	lr
   16ff6:	bf00      	nop
   16ff8:	402e0000 	.word	0x402e0000
   16ffc:	e0001000 	.word	0xe0001000

00017000 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   17000:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   17002:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
   17004:	b19d      	cbz	r5, 1702e <run_callbacks+0x2e>
   17006:	4606      	mov	r6, r0
   17008:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
   1700a:	2400      	movs	r4, #0
   1700c:	e003      	b.n	17016 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   1700e:	6812      	ldr	r2, [r2, #0]
		count++;
   17010:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
   17012:	2a01      	cmp	r2, #1
   17014:	d00c      	beq.n	17030 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
   17016:	6853      	ldr	r3, [r2, #4]
   17018:	f013 0380 	ands.w	r3, r3, #128	; 0x80
   1701c:	d0f7      	beq.n	1700e <run_callbacks+0xe>
			ep->first_transfer = t;
   1701e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   17020:	b12c      	cbz	r4, 1702e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
   17022:	4628      	mov	r0, r5
		ep->callback_function(first);
   17024:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
   17026:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
   17028:	4798      	blx	r3
	while (count) {
   1702a:	3c01      	subs	r4, #1
   1702c:	d1f9      	bne.n	17022 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
   1702e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
   17030:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
   17034:	e7f4      	b.n	17020 <run_callbacks+0x20>
   17036:	bf00      	nop

00017038 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   17038:	b430      	push	{r4, r5}
	if (len > 0) {
   1703a:	b9d9      	cbnz	r1, 17074 <endpoint0_transmit.constprop.0+0x3c>
   1703c:	4c1f      	ldr	r4, [pc, #124]	; (170bc <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
   1703e:	4b20      	ldr	r3, [pc, #128]	; (170c0 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
   17040:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17042:	4a20      	ldr	r2, [pc, #128]	; (170c4 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
   17044:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17046:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
   1704a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1704c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
   1704e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17052:	2480      	movs	r4, #128	; 0x80
   17054:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17056:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   1705a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   1705e:	481a      	ldr	r0, [pc, #104]	; (170c8 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
   17060:	432b      	orrs	r3, r5
   17062:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   17066:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
   17068:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   1706c:	2b00      	cmp	r3, #0
   1706e:	d1fb      	bne.n	17068 <endpoint0_transmit.constprop.0+0x30>
}
   17070:	bc30      	pop	{r4, r5}
   17072:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   17074:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
   17076:	4b15      	ldr	r3, [pc, #84]	; (170cc <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   17078:	4c10      	ldr	r4, [pc, #64]	; (170bc <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
   1707a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   1707c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   17080:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
   17082:	4a10      	ldr	r2, [pc, #64]	; (170c4 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   17084:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   17086:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
   1708a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1708c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1708e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   17092:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
   17094:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   17096:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   1709a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1709e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
   170a0:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
   170a2:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
   170a4:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
   170a6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   170aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   170ae:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   170b2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   170b6:	2b00      	cmp	r3, #0
   170b8:	d1fb      	bne.n	170b2 <endpoint0_transmit.constprop.0+0x7a>
   170ba:	e7c0      	b.n	1703e <endpoint0_transmit.constprop.0+0x6>
   170bc:	20000000 	.word	0x20000000
   170c0:	2000b240 	.word	0x2000b240
   170c4:	402e0000 	.word	0x402e0000
   170c8:	2000f184 	.word	0x2000f184
   170cc:	2000b260 	.word	0x2000b260

000170d0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
   170d0:	4908      	ldr	r1, [pc, #32]	; (170f4 <usb_stop_sof_interrupts+0x24>)
   170d2:	2201      	movs	r2, #1
   170d4:	780b      	ldrb	r3, [r1, #0]
   170d6:	fa02 f000 	lsl.w	r0, r2, r0
   170da:	ea23 0000 	bic.w	r0, r3, r0
   170de:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
   170e0:	b930      	cbnz	r0, 170f0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   170e2:	4a05      	ldr	r2, [pc, #20]	; (170f8 <usb_stop_sof_interrupts+0x28>)
   170e4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   170e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   170ec:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
   170f0:	4770      	bx	lr
   170f2:	bf00      	nop
   170f4:	2000fc40 	.word	0x2000fc40
   170f8:	402e0000 	.word	0x402e0000

000170fc <usb_isr>:
{
   170fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
   17100:	4c97      	ldr	r4, [pc, #604]	; (17360 <usb_isr+0x264>)
{
   17102:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
   17104:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   17108:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
   1710a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   1710e:	d553      	bpl.n	171b8 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   17110:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   17114:	2a00      	cmp	r2, #0
   17116:	d04a      	beq.n	171ae <usb_isr+0xb2>
   17118:	4e92      	ldr	r6, [pc, #584]	; (17364 <usb_isr+0x268>)
   1711a:	f8df a260 	ldr.w	sl, [pc, #608]	; 1737c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
   1711e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 17394 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   17122:	f8df b274 	ldr.w	fp, [pc, #628]	; 17398 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   17126:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1739c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
   1712a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
   1712e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
   17132:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   17136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1713a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   1713e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   17142:	049d      	lsls	r5, r3, #18
   17144:	d5f5      	bpl.n	17132 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   17146:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1714a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1714e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   17152:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   17156:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   1715a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
   1715e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
   17162:	d1fa      	bne.n	1715a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
   17164:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
   17166:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
   17168:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
   1716c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
   17170:	f000 81cf 	beq.w	17512 <usb_isr+0x416>
   17174:	f200 80db 	bhi.w	1732e <usb_isr+0x232>
   17178:	f240 3102 	movw	r1, #770	; 0x302
   1717c:	428b      	cmp	r3, r1
   1717e:	f000 81e7 	beq.w	17550 <usb_isr+0x454>
   17182:	f200 809a 	bhi.w	172ba <usb_isr+0x1be>
   17186:	2b82      	cmp	r3, #130	; 0x82
   17188:	f000 81cb 	beq.w	17522 <usb_isr+0x426>
   1718c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   17190:	f040 808a 	bne.w	172a8 <usb_isr+0x1ac>
		if (endpoint > 7) break;
   17194:	f010 0f78 	tst.w	r0, #120	; 0x78
   17198:	b283      	uxth	r3, r0
   1719a:	f000 8203 	beq.w	175a4 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   1719e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   171a2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   171a6:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   171aa:	2a00      	cmp	r2, #0
   171ac:	d1bd      	bne.n	1712a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   171ae:	4a6c      	ldr	r2, [pc, #432]	; (17360 <usb_isr+0x264>)
   171b0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   171b4:	2b00      	cmp	r3, #0
   171b6:	d142      	bne.n	1723e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
   171b8:	067e      	lsls	r6, r7, #25
   171ba:	d516      	bpl.n	171ea <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   171bc:	4b68      	ldr	r3, [pc, #416]	; (17360 <usb_isr+0x264>)
   171be:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
   171c2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   171c6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   171ca:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   171ce:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   171d2:	2c00      	cmp	r4, #0
   171d4:	d1fb      	bne.n	171ce <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   171d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   171da:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   171de:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
   171e2:	f000 fd2d 	bl	17c40 <usb_serial_reset>
		endpointN_notify_mask = 0;
   171e6:	4b60      	ldr	r3, [pc, #384]	; (17368 <usb_isr+0x26c>)
   171e8:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
   171ea:	01fc      	lsls	r4, r7, #7
   171ec:	d503      	bpl.n	171f6 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   171ee:	4b5f      	ldr	r3, [pc, #380]	; (1736c <usb_isr+0x270>)
   171f0:	681b      	ldr	r3, [r3, #0]
   171f2:	b103      	cbz	r3, 171f6 <usb_isr+0xfa>
   171f4:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
   171f6:	01b8      	lsls	r0, r7, #6
   171f8:	d503      	bpl.n	17202 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   171fa:	4b5d      	ldr	r3, [pc, #372]	; (17370 <usb_isr+0x274>)
   171fc:	681b      	ldr	r3, [r3, #0]
   171fe:	b103      	cbz	r3, 17202 <usb_isr+0x106>
   17200:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
   17202:	0779      	lsls	r1, r7, #29
   17204:	d508      	bpl.n	17218 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   17206:	4b56      	ldr	r3, [pc, #344]	; (17360 <usb_isr+0x264>)
   17208:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   1720c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   17210:	d047      	beq.n	172a2 <usb_isr+0x1a6>
			usb_high_speed = 1;
   17212:	4b58      	ldr	r3, [pc, #352]	; (17374 <usb_isr+0x278>)
   17214:	2201      	movs	r2, #1
   17216:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   17218:	4b51      	ldr	r3, [pc, #324]	; (17360 <usb_isr+0x264>)
   1721a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   1721e:	061a      	lsls	r2, r3, #24
   17220:	d50a      	bpl.n	17238 <usb_isr+0x13c>
   17222:	063b      	lsls	r3, r7, #24
   17224:	d508      	bpl.n	17238 <usb_isr+0x13c>
		if (usb_reboot_timer) {
   17226:	4a54      	ldr	r2, [pc, #336]	; (17378 <usb_isr+0x27c>)
   17228:	7813      	ldrb	r3, [r2, #0]
   1722a:	b12b      	cbz	r3, 17238 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
   1722c:	3b01      	subs	r3, #1
   1722e:	b2db      	uxtb	r3, r3
   17230:	7013      	strb	r3, [r2, #0]
   17232:	2b00      	cmp	r3, #0
   17234:	f000 8272 	beq.w	1771c <usb_isr+0x620>
}
   17238:	b003      	add	sp, #12
   1723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
   1723e:	494f      	ldr	r1, [pc, #316]	; (1737c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
   17240:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
   17244:	6808      	ldr	r0, [r1, #0]
   17246:	4203      	tst	r3, r0
   17248:	f040 81d1 	bne.w	175ee <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
   1724c:	4a46      	ldr	r2, [pc, #280]	; (17368 <usb_isr+0x26c>)
   1724e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
   17250:	401c      	ands	r4, r3
   17252:	d0b1      	beq.n	171b8 <usb_isr+0xbc>
				while (tx) {
   17254:	ea5f 4814 	movs.w	r8, r4, lsr #16
   17258:	d010      	beq.n	1727c <usb_isr+0x180>
   1725a:	4e42      	ldr	r6, [pc, #264]	; (17364 <usb_isr+0x268>)
					tx &= ~(1<<p);
   1725c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
   17260:	fa98 f5a8 	rbit	r5, r8
   17264:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   17268:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
   1726c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   17270:	3040      	adds	r0, #64	; 0x40
   17272:	f7ff fec5 	bl	17000 <run_callbacks>
				while (tx) {
   17276:	ea38 0805 	bics.w	r8, r8, r5
   1727a:	d1f1      	bne.n	17260 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
   1727c:	b2a4      	uxth	r4, r4
				while(rx) {
   1727e:	2c00      	cmp	r4, #0
   17280:	d09a      	beq.n	171b8 <usb_isr+0xbc>
   17282:	4e38      	ldr	r6, [pc, #224]	; (17364 <usb_isr+0x268>)
					rx &= ~(1<<p);
   17284:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
   17288:	fa94 f5a4 	rbit	r5, r4
   1728c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
   17290:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
   17294:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
   17298:	f7ff feb2 	bl	17000 <run_callbacks>
				while(rx) {
   1729c:	43ac      	bics	r4, r5
   1729e:	d1f3      	bne.n	17288 <usb_isr+0x18c>
   172a0:	e78a      	b.n	171b8 <usb_isr+0xbc>
			usb_high_speed = 0;
   172a2:	4a34      	ldr	r2, [pc, #208]	; (17374 <usb_isr+0x278>)
   172a4:	7013      	strb	r3, [r2, #0]
   172a6:	e7b7      	b.n	17218 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
   172a8:	2b80      	cmp	r3, #128	; 0x80
   172aa:	f47f af78 	bne.w	1719e <usb_isr+0xa2>
		reply_buffer[0] = 0;
   172ae:	4834      	ldr	r0, [pc, #208]	; (17380 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
   172b0:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
   172b2:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   172b4:	f7ff fec0 	bl	17038 <endpoint0_transmit.constprop.0>
		return;
   172b8:	e775      	b.n	171a6 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
   172ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   172be:	f000 810b 	beq.w	174d8 <usb_isr+0x3dc>
   172c2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
   172c6:	2b01      	cmp	r3, #1
   172c8:	f63f af69 	bhi.w	1719e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   172cc:	4b2d      	ldr	r3, [pc, #180]	; (17384 <usb_isr+0x288>)
   172ce:	685d      	ldr	r5, [r3, #4]
   172d0:	2d00      	cmp	r5, #0
   172d2:	f43f af64 	beq.w	1719e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   172d6:	fa1f fc8c 	uxth.w	ip, ip
   172da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   172de:	e004      	b.n	172ea <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   172e0:	691d      	ldr	r5, [r3, #16]
   172e2:	330c      	adds	r3, #12
   172e4:	2d00      	cmp	r5, #0
   172e6:	f43f af5a 	beq.w	1719e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   172ea:	881a      	ldrh	r2, [r3, #0]
   172ec:	4572      	cmp	r2, lr
   172ee:	d1f7      	bne.n	172e0 <usb_isr+0x1e4>
   172f0:	885a      	ldrh	r2, [r3, #2]
   172f2:	4562      	cmp	r2, ip
   172f4:	d1f4      	bne.n	172e0 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
   172f6:	ea4f 221e 	mov.w	r2, lr, lsr #8
   172fa:	2a03      	cmp	r2, #3
   172fc:	f000 81a5 	beq.w	1764a <usb_isr+0x54e>
					datalen = list->length;
   17300:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
   17302:	0c00      	lsrs	r0, r0, #16
   17304:	4282      	cmp	r2, r0
   17306:	bf28      	it	cs
   17308:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
   1730a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1730e:	f040 81a1 	bne.w	17654 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
   17312:	4b18      	ldr	r3, [pc, #96]	; (17374 <usb_isr+0x278>)
   17314:	491c      	ldr	r1, [pc, #112]	; (17388 <usb_isr+0x28c>)
   17316:	7818      	ldrb	r0, [r3, #0]
   17318:	4b1c      	ldr	r3, [pc, #112]	; (1738c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1731a:	9201      	str	r2, [sp, #4]
   1731c:	2800      	cmp	r0, #0
   1731e:	bf18      	it	ne
   17320:	4619      	movne	r1, r3
   17322:	481b      	ldr	r0, [pc, #108]	; (17390 <usb_isr+0x294>)
   17324:	f7ff f9be 	bl	166a4 <memcpy>
   17328:	4d19      	ldr	r5, [pc, #100]	; (17390 <usb_isr+0x294>)
   1732a:	9a01      	ldr	r2, [sp, #4]
   1732c:	e1e1      	b.n	176f2 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
   1732e:	f242 2121 	movw	r1, #8737	; 0x2221
   17332:	428b      	cmp	r3, r1
   17334:	d07c      	beq.n	17430 <usb_isr+0x334>
   17336:	d933      	bls.n	173a0 <usb_isr+0x2a4>
   17338:	f242 3121 	movw	r1, #8993	; 0x2321
   1733c:	428b      	cmp	r3, r1
   1733e:	f000 8081 	beq.w	17444 <usb_isr+0x348>
   17342:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
   17346:	428b      	cmp	r3, r1
   17348:	f47f af29 	bne.w	1719e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
   1734c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
   17350:	b283      	uxth	r3, r0
   17352:	f47f af24 	bne.w	1719e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
   17356:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
   1735a:	f363 0c0f 	bfi	ip, r3, #0, #16
   1735e:	e7b5      	b.n	172cc <usb_isr+0x1d0>
   17360:	402e0000 	.word	0x402e0000
   17364:	20000000 	.word	0x20000000
   17368:	2000f188 	.word	0x2000f188
   1736c:	2000fc20 	.word	0x2000fc20
   17370:	2000fc24 	.word	0x2000fc24
   17374:	2000fc46 	.word	0x2000fc46
   17378:	2000fc47 	.word	0x2000fc47
   1737c:	2000f184 	.word	0x2000f184
   17380:	2000f658 	.word	0x2000f658
   17384:	20008dd4 	.word	0x20008dd4
   17388:	60002630 	.word	0x60002630
   1738c:	60002694 	.word	0x60002694
   17390:	202000e0 	.word	0x202000e0
   17394:	2000f17c 	.word	0x2000f17c
   17398:	b8c6cf5d 	.word	0xb8c6cf5d
   1739c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
   173a0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
   173a4:	d066      	beq.n	17474 <usb_isr+0x378>
   173a6:	f242 0121 	movw	r1, #8225	; 0x2021
   173aa:	428b      	cmp	r3, r1
   173ac:	f47f aef7 	bne.w	1719e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
   173b0:	0c03      	lsrs	r3, r0, #16
   173b2:	2b07      	cmp	r3, #7
   173b4:	f47f aef3 	bne.w	1719e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
   173b8:	4bb2      	ldr	r3, [pc, #712]	; (17684 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
   173ba:	49b3      	ldr	r1, [pc, #716]	; (17688 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
   173bc:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   173be:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
   173c0:	49b2      	ldr	r1, [pc, #712]	; (1768c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   173c2:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   173c4:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
   173c8:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
   173cc:	2201      	movs	r2, #1
   173ce:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   173d0:	4aaf      	ldr	r2, [pc, #700]	; (17690 <usb_isr+0x594>)
   173d2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   173d4:	4aaf      	ldr	r2, [pc, #700]	; (17694 <usb_isr+0x598>)
   173d6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
   173d8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   173dc:	f041 0101 	orr.w	r1, r1, #1
   173e0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
   173e4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   173e8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   173ec:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   173ee:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
   173f0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   173f4:	2b00      	cmp	r3, #0
   173f6:	d1fb      	bne.n	173f0 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
   173f8:	4aa7      	ldr	r2, [pc, #668]	; (17698 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   173fa:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   173fc:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
   173fe:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   17400:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   17402:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17404:	f248 0380 	movw	r3, #32896	; 0x8080
   17408:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1740a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1740e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   17412:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1741a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   1741e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17422:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
   17426:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1742a:	2b00      	cmp	r3, #0
   1742c:	d1fb      	bne.n	17426 <usb_isr+0x32a>
   1742e:	e6ba      	b.n	171a6 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
   17430:	b280      	uxth	r0, r0
   17432:	b938      	cbnz	r0, 17444 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   17434:	4b99      	ldr	r3, [pc, #612]	; (1769c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
   17436:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   1743a:	6819      	ldr	r1, [r3, #0]
   1743c:	4b98      	ldr	r3, [pc, #608]	; (176a0 <usb_isr+0x5a4>)
   1743e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   17440:	4b98      	ldr	r3, [pc, #608]	; (176a4 <usb_isr+0x5a8>)
   17442:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
   17444:	4b94      	ldr	r3, [pc, #592]	; (17698 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
   17446:	2200      	movs	r2, #0
   17448:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
   1744a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   1744c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1744e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   17450:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17452:	2280      	movs	r2, #128	; 0x80
   17454:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17456:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1745a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1745e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17466:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1746a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1746e:	2b00      	cmp	r3, #0
   17470:	d1fb      	bne.n	1746a <usb_isr+0x36e>
   17472:	e698      	b.n	171a6 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
   17474:	f3c2 4207 	ubfx	r2, r2, #16, #8
   17478:	4b8b      	ldr	r3, [pc, #556]	; (176a8 <usb_isr+0x5ac>)
   1747a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   1747c:	4b8b      	ldr	r3, [pc, #556]	; (176ac <usb_isr+0x5b0>)
   1747e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   17482:	4b8b      	ldr	r3, [pc, #556]	; (176b0 <usb_isr+0x5b4>)
   17484:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
   17488:	4b8a      	ldr	r3, [pc, #552]	; (176b4 <usb_isr+0x5b8>)
   1748a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
   1748e:	f000 fbd9 	bl	17c44 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
   17492:	2280      	movs	r2, #128	; 0x80
   17494:	4629      	mov	r1, r5
   17496:	4888      	ldr	r0, [pc, #544]	; (176b8 <usb_isr+0x5bc>)
   17498:	f004 fb5e 	bl	1bb58 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   1749c:	4b87      	ldr	r3, [pc, #540]	; (176bc <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1749e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   174a0:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   174a4:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
   174a8:	4b7b      	ldr	r3, [pc, #492]	; (17698 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   174aa:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   174ac:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
   174ae:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   174b0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
   174b2:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   174b4:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   174b6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   174ba:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   174be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   174c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   174c6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   174ca:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
   174ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   174d2:	2b00      	cmp	r3, #0
   174d4:	d1fb      	bne.n	174ce <usb_isr+0x3d2>
   174d6:	e666      	b.n	171a6 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
   174d8:	4b6f      	ldr	r3, [pc, #444]	; (17698 <usb_isr+0x59c>)
   174da:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
   174dc:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   174de:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   174e0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
   174e2:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   174e4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   174e6:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   174e8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   174ec:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   174f0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   174f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   174f8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   174fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17500:	2b00      	cmp	r3, #0
   17502:	d1fb      	bne.n	174fc <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   17504:	0c13      	lsrs	r3, r2, #16
   17506:	065b      	lsls	r3, r3, #25
   17508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1750c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
   17510:	e649      	b.n	171a6 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
   17512:	4b65      	ldr	r3, [pc, #404]	; (176a8 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
   17514:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
   17516:	486a      	ldr	r0, [pc, #424]	; (176c0 <usb_isr+0x5c4>)
   17518:	781b      	ldrb	r3, [r3, #0]
   1751a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   1751c:	f7ff fd8c 	bl	17038 <endpoint0_transmit.constprop.0>
		return;
   17520:	e641      	b.n	171a6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   17522:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
   17524:	f010 0078 	ands.w	r0, r0, #120	; 0x78
   17528:	f47f ae39 	bne.w	1719e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   1752c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   17530:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
   17534:	4a62      	ldr	r2, [pc, #392]	; (176c0 <usb_isr+0x5c4>)
   17536:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   17538:	0618      	lsls	r0, r3, #24
   1753a:	f100 809e 	bmi.w	1767a <usb_isr+0x57e>
   1753e:	07cb      	lsls	r3, r1, #31
   17540:	d501      	bpl.n	17546 <usb_isr+0x44a>
			reply_buffer[0] = 1;
   17542:	2301      	movs	r3, #1
   17544:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   17546:	2102      	movs	r1, #2
   17548:	485d      	ldr	r0, [pc, #372]	; (176c0 <usb_isr+0x5c4>)
   1754a:	f7ff fd75 	bl	17038 <endpoint0_transmit.constprop.0>
		return;
   1754e:	e62a      	b.n	171a6 <usb_isr+0xaa>
		if (endpoint > 7) break;
   17550:	f010 0f78 	tst.w	r0, #120	; 0x78
   17554:	b283      	uxth	r3, r0
   17556:	f47f ae22 	bne.w	1719e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   1755a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   1755e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   17562:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   17566:	bf14      	ite	ne
   17568:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   1756c:	f043 0301 	orreq.w	r3, r3, #1
   17570:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   17574:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   17576:	4b48      	ldr	r3, [pc, #288]	; (17698 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   17578:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   1757a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1757c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1757e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   17580:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17582:	2280      	movs	r2, #128	; 0x80
   17584:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17586:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1758a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1758e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17596:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1759a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1759e:	2b00      	cmp	r3, #0
   175a0:	d1fb      	bne.n	1759a <usb_isr+0x49e>
   175a2:	e600      	b.n	171a6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   175a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   175a8:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   175ac:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   175b0:	bf14      	ite	ne
   175b2:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   175b6:	f023 0301 	biceq.w	r3, r3, #1
   175ba:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   175be:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   175c0:	4b35      	ldr	r3, [pc, #212]	; (17698 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   175c2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   175c4:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   175c6:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   175c8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   175ca:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   175cc:	2280      	movs	r2, #128	; 0x80
   175ce:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   175d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   175d4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   175d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   175dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   175e0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   175e4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   175e8:	2b00      	cmp	r3, #0
   175ea:	d1fb      	bne.n	175e4 <usb_isr+0x4e8>
   175ec:	e5db      	b.n	171a6 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
   175ee:	2000      	movs	r0, #0
   175f0:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   175f2:	4926      	ldr	r1, [pc, #152]	; (1768c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   175f4:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   175f6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   175f8:	f242 0121 	movw	r1, #8225	; 0x2021
   175fc:	428c      	cmp	r4, r1
   175fe:	f47f ae25 	bne.w	1724c <usb_isr+0x150>
   17602:	b280      	uxth	r0, r0
   17604:	2800      	cmp	r0, #0
   17606:	f47f ae21 	bne.w	1724c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   1760a:	492e      	ldr	r1, [pc, #184]	; (176c4 <usb_isr+0x5c8>)
   1760c:	4c2e      	ldr	r4, [pc, #184]	; (176c8 <usb_isr+0x5cc>)
   1760e:	c903      	ldmia	r1, {r0, r1}
   17610:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
   17612:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   17614:	ea4f 4111 	mov.w	r1, r1, lsr #16
   17618:	6020      	str	r0, [r4, #0]
   1761a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
   1761c:	f47f ae16 	bne.w	1724c <usb_isr+0x150>
	__disable_irq();
   17620:	b672      	cpsid	i
	sof_usage |= (1 << interface);
   17622:	482a      	ldr	r0, [pc, #168]	; (176cc <usb_isr+0x5d0>)
   17624:	7801      	ldrb	r1, [r0, #0]
   17626:	f041 0108 	orr.w	r1, r1, #8
   1762a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   1762c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   17630:	060d      	lsls	r5, r1, #24
   17632:	d405      	bmi.n	17640 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   17634:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   17636:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   17638:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   1763c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
   17640:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   17642:	4a23      	ldr	r2, [pc, #140]	; (176d0 <usb_isr+0x5d4>)
   17644:	2150      	movs	r1, #80	; 0x50
   17646:	7011      	strb	r1, [r2, #0]
   17648:	e600      	b.n	1724c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
   1764a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
   1764c:	782a      	ldrb	r2, [r5, #0]
   1764e:	4282      	cmp	r2, r0
   17650:	bf28      	it	cs
   17652:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
   17654:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   17658:	d144      	bne.n	176e4 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
   1765a:	4b1e      	ldr	r3, [pc, #120]	; (176d4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1765c:	4d1e      	ldr	r5, [pc, #120]	; (176d8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
   1765e:	7818      	ldrb	r0, [r3, #0]
   17660:	491e      	ldr	r1, [pc, #120]	; (176dc <usb_isr+0x5e0>)
   17662:	4b1f      	ldr	r3, [pc, #124]	; (176e0 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
   17664:	9201      	str	r2, [sp, #4]
   17666:	2800      	cmp	r0, #0
   17668:	bf18      	it	ne
   1766a:	4619      	movne	r1, r3
   1766c:	4628      	mov	r0, r5
   1766e:	f7ff f819 	bl	166a4 <memcpy>
					usb_descriptor_buffer[1] = 7;
   17672:	2307      	movs	r3, #7
   17674:	706b      	strb	r3, [r5, #1]
   17676:	9a01      	ldr	r2, [sp, #4]
   17678:	e03b      	b.n	176f2 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   1767a:	03c9      	lsls	r1, r1, #15
   1767c:	f53f af61 	bmi.w	17542 <usb_isr+0x446>
   17680:	e761      	b.n	17546 <usb_isr+0x44a>
   17682:	bf00      	nop
   17684:	2000b260 	.word	0x2000b260
   17688:	2001017c 	.word	0x2001017c
   1768c:	2000dfc8 	.word	0x2000dfc8
   17690:	00070080 	.word	0x00070080
   17694:	2001117c 	.word	0x2001117c
   17698:	2000b240 	.word	0x2000b240
   1769c:	2000fab8 	.word	0x2000fab8
   176a0:	2000fc1c 	.word	0x2000fc1c
   176a4:	2000fc44 	.word	0x2000fc44
   176a8:	2000fc45 	.word	0x2000fc45
   176ac:	00cc0002 	.word	0x00cc0002
   176b0:	000200c8 	.word	0x000200c8
   176b4:	00c80002 	.word	0x00c80002
   176b8:	20000080 	.word	0x20000080
   176bc:	74d59319 	.word	0x74d59319
   176c0:	2000f658 	.word	0x2000f658
   176c4:	2000f17c 	.word	0x2000f17c
   176c8:	2000fc14 	.word	0x2000fc14
   176cc:	2000fc40 	.word	0x2000fc40
   176d0:	2000fc47 	.word	0x2000fc47
   176d4:	2000fc46 	.word	0x2000fc46
   176d8:	202000e0 	.word	0x202000e0
   176dc:	60002694 	.word	0x60002694
   176e0:	60002630 	.word	0x60002630
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   176e4:	4629      	mov	r1, r5
   176e6:	4d10      	ldr	r5, [pc, #64]	; (17728 <usb_isr+0x62c>)
   176e8:	9201      	str	r2, [sp, #4]
   176ea:	4628      	mov	r0, r5
   176ec:	f7fe ffda 	bl	166a4 <memcpy>
   176f0:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   176f2:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   176f6:	4415      	add	r5, r2
	asm("dsb");
   176f8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   176fc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17700:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
   17704:	3320      	adds	r3, #32
	} while (location < end_addr);
   17706:	429d      	cmp	r5, r3
   17708:	d8fa      	bhi.n	17700 <usb_isr+0x604>
	asm("dsb");
   1770a:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1770e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   17712:	4805      	ldr	r0, [pc, #20]	; (17728 <usb_isr+0x62c>)
   17714:	4611      	mov	r1, r2
   17716:	f7ff fc8f 	bl	17038 <endpoint0_transmit.constprop.0>
				return;
   1771a:	e544      	b.n	171a6 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
   1771c:	2003      	movs	r0, #3
   1771e:	f7ff fcd7 	bl	170d0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
   17722:	f00d f8ad 	bl	24880 <___reboot_Teensyduino__veneer>
   17726:	bf00      	nop
   17728:	202000e0 	.word	0x202000e0

0001772c <usb_config_rx>:
{
   1772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17730:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   17732:	1e83      	subs	r3, r0, #2
   17734:	2b02      	cmp	r3, #2
   17736:	d901      	bls.n	1773c <usb_config_rx+0x10>
}
   17738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1773c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1778c <usb_config_rx+0x60>
   17740:	4615      	mov	r5, r2
   17742:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
   17744:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   17746:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   1774a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1774c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   17750:	2100      	movs	r1, #0
   17752:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17756:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
   17758:	f004 f9fe 	bl	1bb58 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1775c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
   17760:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17762:	0952      	lsrs	r2, r2, #5
   17764:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
   17768:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
   1776c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   17770:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
   17774:	2f00      	cmp	r7, #0
   17776:	d0df      	beq.n	17738 <usb_config_rx+0xc>
   17778:	4a03      	ldr	r2, [pc, #12]	; (17788 <usb_config_rx+0x5c>)
   1777a:	40b3      	lsls	r3, r6
   1777c:	6811      	ldr	r1, [r2, #0]
   1777e:	430b      	orrs	r3, r1
   17780:	6013      	str	r3, [r2, #0]
}
   17782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17786:	bf00      	nop
   17788:	2000f188 	.word	0x2000f188
   1778c:	20000000 	.word	0x20000000

00017790 <usb_config_tx>:
{
   17790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17794:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   17796:	1e81      	subs	r1, r0, #2
   17798:	2902      	cmp	r1, #2
   1779a:	d901      	bls.n	177a0 <usb_config_tx+0x10>
}
   1779c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   177a0:	01c7      	lsls	r7, r0, #7
   177a2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 177f0 <usb_config_tx+0x60>
   177a6:	4692      	mov	sl, r2
   177a8:	4604      	mov	r4, r0
   177aa:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
   177ac:	223c      	movs	r2, #60	; 0x3c
   177ae:	2100      	movs	r1, #0
   177b0:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   177b2:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   177b6:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
   177b8:	f108 0004 	add.w	r0, r8, #4
   177bc:	f004 f9cc 	bl	1bb58 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   177c0:	faba f28a 	clz	r2, sl
   177c4:	0952      	lsrs	r2, r2, #5
   177c6:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
   177ca:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
   177ce:	2201      	movs	r2, #1
	qh->callback_function = callback;
   177d0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   177d4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   177d8:	2e00      	cmp	r6, #0
   177da:	d0df      	beq.n	1779c <usb_config_tx+0xc>
   177dc:	4b03      	ldr	r3, [pc, #12]	; (177ec <usb_config_tx+0x5c>)
   177de:	3410      	adds	r4, #16
   177e0:	6819      	ldr	r1, [r3, #0]
   177e2:	40a2      	lsls	r2, r4
   177e4:	430a      	orrs	r2, r1
   177e6:	601a      	str	r2, [r3, #0]
}
   177e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   177ec:	2000f188 	.word	0x2000f188
   177f0:	20000000 	.word	0x20000000

000177f4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
   177f4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
   177f6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
   177f8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
   177fa:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
   177fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
   17802:	b410      	push	{r4}
	transfer->next = 1;
   17804:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
   17806:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
   17808:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
   1780c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
   1780e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
   17812:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
   17816:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
   17818:	6181      	str	r1, [r0, #24]
}
   1781a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
   1781e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
   17822:	4770      	bx	lr

00017824 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   17824:	1e83      	subs	r3, r0, #2
{
   17826:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   17828:	2b02      	cmp	r3, #2
   1782a:	d900      	bls.n	1782e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
   1782c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   1782e:	4b06      	ldr	r3, [pc, #24]	; (17848 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
   17830:	f100 0110 	add.w	r1, r0, #16
   17834:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   17838:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
   1783c:	fa0c f101 	lsl.w	r1, ip, r1
   17840:	3040      	adds	r0, #64	; 0x40
   17842:	f7ff bb99 	b.w	16f78 <schedule_transfer>
   17846:	bf00      	nop
   17848:	20000000 	.word	0x20000000

0001784c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   1784c:	1e83      	subs	r3, r0, #2
{
   1784e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   17850:	2b02      	cmp	r3, #2
   17852:	d900      	bls.n	17856 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
   17854:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
   17856:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
   17858:	4b02      	ldr	r3, [pc, #8]	; (17864 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
   1785a:	4081      	lsls	r1, r0
   1785c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   17860:	f7ff bb8a 	b.w	16f78 <schedule_transfer>
   17864:	20000000 	.word	0x20000000

00017868 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   17868:	6840      	ldr	r0, [r0, #4]
#endif
}
   1786a:	4770      	bx	lr

0001786c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   1786c:	4a12      	ldr	r2, [pc, #72]	; (178b8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   1786e:	4b13      	ldr	r3, [pc, #76]	; (178bc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   17870:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
   17874:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
   17878:	4298      	cmp	r0, r3
{
   1787a:	b510      	push	{r4, lr}
   1787c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
   1787e:	d202      	bcs.n	17886 <usb_init_serialnumber+0x1a>
   17880:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17884:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
   17886:	4c0e      	ldr	r4, [pc, #56]	; (178c0 <usb_init_serialnumber+0x54>)
   17888:	a901      	add	r1, sp, #4
   1788a:	220a      	movs	r2, #10
   1788c:	f7fe ffa8 	bl	167e0 <ultoa>
	for (i=0; i<10; i++) {
   17890:	a901      	add	r1, sp, #4
   17892:	2300      	movs	r3, #0
   17894:	4620      	mov	r0, r4
		char c = buf[i];
   17896:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
   1789a:	3301      	adds	r3, #1
		if (!c) break;
   1789c:	b13a      	cbz	r2, 178ae <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
   1789e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
   178a0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   178a4:	d1f7      	bne.n	17896 <usb_init_serialnumber+0x2a>
   178a6:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   178a8:	7023      	strb	r3, [r4, #0]
}
   178aa:	b004      	add	sp, #16
   178ac:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   178ae:	005b      	lsls	r3, r3, #1
   178b0:	b2db      	uxtb	r3, r3
   178b2:	7023      	strb	r3, [r4, #0]
}
   178b4:	b004      	add	sp, #16
   178b6:	bd10      	pop	{r4, pc}
   178b8:	401f4400 	.word	0x401f4400
   178bc:	00989680 	.word	0x00989680
   178c0:	20009c50 	.word	0x20009c50

000178c4 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
   178c4:	f000 badc 	b.w	17e80 <usb_serial_flush_input>

000178c8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
   178c8:	f000 baac 	b.w	17e24 <usb_serial_peekchar>

000178cc <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
   178cc:	f000 bb10 	b.w	17ef0 <usb_serial_getchar>

000178d0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
   178d0:	f000 baca 	b.w	17e68 <usb_serial_available>

000178d4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   178d4:	f000 bb66 	b.w	17fa4 <usb_serial_flush_output>

000178d8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   178d8:	f000 bb3c 	b.w	17f54 <usb_serial_write_buffer_free>

000178dc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   178dc:	4608      	mov	r0, r1
   178de:	4611      	mov	r1, r2
   178e0:	f000 bb2c 	b.w	17f3c <usb_serial_write>

000178e4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   178e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   178e6:	4c14      	ldr	r4, [pc, #80]	; (17938 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   178e8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   178ec:	4e13      	ldr	r6, [pc, #76]	; (1793c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   178ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   178f2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   178f6:	4f12      	ldr	r7, [pc, #72]	; (17940 <rx_queue_transfer+0x5c>)
   178f8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
   178fc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   178fe:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   17902:	4621      	mov	r1, r4
   17904:	883a      	ldrh	r2, [r7, #0]
   17906:	4630      	mov	r0, r6
   17908:	f7ff ff74 	bl	177f4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
   1790c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   1790e:	4423      	add	r3, r4
	asm("dsb");
   17910:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   17914:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
   17918:	3420      	adds	r4, #32
	} while (location < end_addr);
   1791a:	42a3      	cmp	r3, r4
   1791c:	d8fa      	bhi.n	17914 <rx_queue_transfer+0x30>
	asm("dsb");
   1791e:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17922:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
   17926:	2003      	movs	r0, #3
   17928:	4631      	mov	r1, r6
   1792a:	f7ff ff8f 	bl	1784c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1792e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   17932:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
   17936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17938:	20200160 	.word	0x20200160
   1793c:	2000b280 	.word	0x2000b280
   17940:	2000fc2c 	.word	0x2000fc2c

00017944 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17944:	4b24      	ldr	r3, [pc, #144]	; (179d8 <rx_event+0x94>)
{
   17946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1794a:	881c      	ldrh	r4, [r3, #0]
   1794c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
   1794e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17950:	f3c3 430e 	ubfx	r3, r3, #16, #15
   17954:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   17956:	2c00      	cmp	r4, #0
   17958:	dd24      	ble.n	179a4 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
   1795a:	4920      	ldr	r1, [pc, #128]	; (179dc <rx_event+0x98>)
		if (head != rx_tail) {
   1795c:	4820      	ldr	r0, [pc, #128]	; (179e0 <rx_event+0x9c>)
		uint32_t head = rx_head;
   1795e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
   17960:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
   17962:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
   17964:	4e1f      	ldr	r6, [pc, #124]	; (179e4 <rx_event+0xa0>)
		if (head != rx_tail) {
   17966:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
   17968:	481f      	ldr	r0, [pc, #124]	; (179e8 <rx_event+0xa4>)
		if (head != rx_tail) {
   1796a:	d007      	beq.n	1797c <rx_event+0x38>
			uint32_t ii = rx_list[head];
   1796c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
   17970:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
   17974:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
   17978:	4294      	cmp	r4, r2
   1797a:	d918      	bls.n	179ae <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   1797c:	3301      	adds	r3, #1
		rx_index[i] = 0;
   1797e:	2200      	movs	r2, #0
		rx_count[i] = len;
   17980:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
   17984:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
   17986:	4e19      	ldr	r6, [pc, #100]	; (179ec <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
   17988:	bf88      	it	hi
   1798a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
   1798c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
   17990:	bf98      	it	ls
   17992:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
   17994:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
   17996:	4b16      	ldr	r3, [pc, #88]	; (179f0 <rx_event+0xac>)
		rx_head = head;
   17998:	700a      	strb	r2, [r1, #0]
		rx_available += len;
   1799a:	681a      	ldr	r2, [r3, #0]
   1799c:	4414      	add	r4, r2
   1799e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   179a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
   179a4:	4628      	mov	r0, r5
}
   179a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
   179aa:	f7ff bf9b 	b.w	178e4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   179ae:	eb07 2048 	add.w	r0, r7, r8, lsl #9
   179b2:	4910      	ldr	r1, [pc, #64]	; (179f4 <rx_event+0xb0>)
   179b4:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
   179b6:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   179b8:	4408      	add	r0, r1
   179ba:	eb01 2145 	add.w	r1, r1, r5, lsl #9
   179be:	f7fe fe71 	bl	166a4 <memcpy>
				rx_available += len;
   179c2:	4a0b      	ldr	r2, [pc, #44]	; (179f0 <rx_event+0xac>)
				rx_queue_transfer(i);
   179c4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
   179c6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
   179ca:	6813      	ldr	r3, [r2, #0]
   179cc:	4423      	add	r3, r4
}
   179ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
   179d2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
   179d4:	f7ff bf86 	b.w	178e4 <rx_queue_transfer>
   179d8:	2000fc2c 	.word	0x2000fc2c
   179dc:	2000fc3e 	.word	0x2000fc3e
   179e0:	2000fc3f 	.word	0x2000fc3f
   179e4:	2000f9a4 	.word	0x2000f9a4
   179e8:	2000f9c4 	.word	0x2000f9c4
   179ec:	2000f9b4 	.word	0x2000f9b4
   179f0:	2000f9a0 	.word	0x2000f9a0
   179f4:	20200160 	.word	0x20200160

000179f8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
   179f8:	4b1d      	ldr	r3, [pc, #116]	; (17a70 <usb_serial_flush_callback+0x78>)
   179fa:	781a      	ldrb	r2, [r3, #0]
   179fc:	2a00      	cmp	r2, #0
   179fe:	d136      	bne.n	17a6e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
   17a00:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   17a04:	4a1b      	ldr	r2, [pc, #108]	; (17a74 <usb_serial_flush_callback+0x7c>)
   17a06:	7812      	ldrb	r2, [r2, #0]
   17a08:	b38a      	cbz	r2, 17a6e <usb_serial_flush_callback+0x76>
{
   17a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
   17a0e:	4d1a      	ldr	r5, [pc, #104]	; (17a78 <usb_serial_flush_callback+0x80>)
   17a10:	882a      	ldrh	r2, [r5, #0]
   17a12:	b352      	cbz	r2, 17a6a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
   17a14:	4e19      	ldr	r6, [pc, #100]	; (17a7c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
   17a16:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   17a1a:	4f19      	ldr	r7, [pc, #100]	; (17a80 <usb_serial_flush_callback+0x88>)
   17a1c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17a1e:	4c19      	ldr	r4, [pc, #100]	; (17a84 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   17a20:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17a24:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17a28:	4642      	mov	r2, r8
   17a2a:	4638      	mov	r0, r7
   17a2c:	4621      	mov	r1, r4
   17a2e:	f7ff fee1 	bl	177f4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   17a32:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
   17a36:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   17a3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17a3e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   17a42:	3420      	adds	r4, #32
	} while (location < end_addr);
   17a44:	42a2      	cmp	r2, r4
   17a46:	d8fa      	bhi.n	17a3e <usb_serial_flush_callback+0x46>
	asm("dsb");
   17a48:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17a4c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   17a50:	2004      	movs	r0, #4
   17a52:	4639      	mov	r1, r7
   17a54:	f7ff fee6 	bl	17824 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   17a58:	7833      	ldrb	r3, [r6, #0]
   17a5a:	3301      	adds	r3, #1
   17a5c:	b2db      	uxtb	r3, r3
   17a5e:	2b03      	cmp	r3, #3
   17a60:	bf88      	it	hi
   17a62:	2300      	movhi	r3, #0
   17a64:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   17a66:	2300      	movs	r3, #0
   17a68:	802b      	strh	r3, [r5, #0]
}
   17a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a6e:	4770      	bx	lr
   17a70:	2000fc43 	.word	0x2000fc43
   17a74:	2000fc45 	.word	0x2000fc45
   17a78:	2000fc2e 	.word	0x2000fc2e
   17a7c:	2000fc42 	.word	0x2000fc42
   17a80:	2000b380 	.word	0x2000b380
   17a84:	20201160 	.word	0x20201160

00017a88 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
   17a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a8c:	b085      	sub	sp, #20
	while (size > 0) {
   17a8e:	e9cd 1001 	strd	r1, r0, [sp, #4]
   17a92:	2900      	cmp	r1, #0
   17a94:	f000 80bf 	beq.w	17c16 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
   17a98:	2300      	movs	r3, #0
   17a9a:	4c60      	ldr	r4, [pc, #384]	; (17c1c <usb_serial_write.part.0+0x194>)
   17a9c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 17c38 <usb_serial_write.part.0+0x1b0>
   17aa0:	f8df a198 	ldr.w	sl, [pc, #408]	; 17c3c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
   17aa4:	4f5e      	ldr	r7, [pc, #376]	; (17c20 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
   17aa6:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
   17aa8:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
   17aaa:	4a5e      	ldr	r2, [pc, #376]	; (17c24 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
   17aac:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
   17aae:	4b5e      	ldr	r3, [pc, #376]	; (17c28 <usb_serial_write.part.0+0x1a0>)
   17ab0:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
   17ab2:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
   17ab6:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
   17aba:	2b00      	cmp	r3, #0
   17abc:	f040 80a7 	bne.w	17c0e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
   17ac0:	461e      	mov	r6, r3
		int waiting=0;
   17ac2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
   17ac4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
   17ac6:	4648      	mov	r0, r9
   17ac8:	f7ff fece 	bl	17868 <usb_transfer_status>
			if (!(status & 0x80)) {
   17acc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   17ad0:	f000 808c 	beq.w	17bec <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
   17ad4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
   17ad8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
   17adc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
   17ae0:	b905      	cbnz	r5, 17ae4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
   17ae2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
   17ae4:	2b00      	cmp	r3, #0
   17ae6:	d17d      	bne.n	17be4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   17ae8:	683b      	ldr	r3, [r7, #0]
   17aea:	1b9b      	subs	r3, r3, r6
   17aec:	2b78      	cmp	r3, #120	; 0x78
   17aee:	f200 8087 	bhi.w	17c00 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
   17af2:	4b4e      	ldr	r3, [pc, #312]	; (17c2c <usb_serial_write.part.0+0x1a4>)
   17af4:	781b      	ldrb	r3, [r3, #0]
   17af6:	2b00      	cmp	r3, #0
   17af8:	d074      	beq.n	17be4 <usb_serial_write.part.0+0x15c>
			yield();
   17afa:	f000 fa9d 	bl	18038 <yield>
			tx_noautoflush = 1;
   17afe:	2201      	movs	r2, #1
		while (!tx_available) {
   17b00:	f8b8 3000 	ldrh.w	r3, [r8]
   17b04:	4615      	mov	r5, r2
			tx_noautoflush = 1;
   17b06:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
   17b08:	2b00      	cmp	r3, #0
   17b0a:	d0dc      	beq.n	17ac6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   17b0c:	4a46      	ldr	r2, [pc, #280]	; (17c28 <usb_serial_write.part.0+0x1a0>)
   17b0e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   17b12:	7811      	ldrb	r1, [r2, #0]
   17b14:	461a      	mov	r2, r3
   17b16:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
   17b1a:	4d45      	ldr	r5, [pc, #276]	; (17c30 <usb_serial_write.part.0+0x1a8>)
   17b1c:	02c9      	lsls	r1, r1, #11
   17b1e:	4428      	add	r0, r5
		if (size >= tx_available) {
   17b20:	9d01      	ldr	r5, [sp, #4]
   17b22:	4295      	cmp	r5, r2
   17b24:	d217      	bcs.n	17b56 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
   17b26:	9303      	str	r3, [sp, #12]
   17b28:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   17b2c:	462a      	mov	r2, r5
   17b2e:	f7fe fdb9 	bl	166a4 <memcpy>
			tx_available -= size;
   17b32:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   17b34:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
   17b38:	1b5b      	subs	r3, r3, r5
   17b3a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   17b3e:	4b3d      	ldr	r3, [pc, #244]	; (17c34 <usb_serial_write.part.0+0x1ac>)
   17b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
   17b44:	f3bf 8f4f 	dsb	sy
			sent += size;
   17b48:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
   17b4a:	2300      	movs	r3, #0
			sent += size;
   17b4c:	4428      	add	r0, r5
		tx_noautoflush = 0;
   17b4e:	7023      	strb	r3, [r4, #0]
}
   17b50:	b005      	add	sp, #20
   17b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17b56:	4b36      	ldr	r3, [pc, #216]	; (17c30 <usb_serial_write.part.0+0x1a8>)
   17b58:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
   17b5a:	9902      	ldr	r1, [sp, #8]
   17b5c:	f7fe fda2 	bl	166a4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
   17b60:	2300      	movs	r3, #0
   17b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17b66:	4629      	mov	r1, r5
   17b68:	4648      	mov	r0, r9
   17b6a:	f7ff fe43 	bl	177f4 <usb_prepare_transfer>
	asm("dsb");
   17b6e:	f3bf 8f4f 	dsb	sy
   17b72:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
   17b76:	f505 6300 	add.w	r3, r5, #2048	; 0x800
   17b7a:	4293      	cmp	r3, r2
   17b7c:	bf34      	ite	cc
   17b7e:	2301      	movcc	r3, #1
   17b80:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
   17b82:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   17b86:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   17b8a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
   17b8e:	3520      	adds	r5, #32
	} while (location < end_addr);
   17b90:	42ab      	cmp	r3, r5
   17b92:	d1fa      	bne.n	17b8a <usb_serial_write.part.0+0x102>
	asm("dsb");
   17b94:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17b98:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
   17b9c:	2004      	movs	r0, #4
   17b9e:	4649      	mov	r1, r9
   17ba0:	f7ff fe40 	bl	17824 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
   17ba4:	4a20      	ldr	r2, [pc, #128]	; (17c28 <usb_serial_write.part.0+0x1a0>)
   17ba6:	7813      	ldrb	r3, [r2, #0]
   17ba8:	3301      	adds	r3, #1
   17baa:	b2db      	uxtb	r3, r3
   17bac:	2b03      	cmp	r3, #3
   17bae:	bf84      	itt	hi
   17bb0:	2300      	movhi	r3, #0
   17bb2:	4a1d      	ldrhi	r2, [pc, #116]	; (17c28 <usb_serial_write.part.0+0x1a0>)
   17bb4:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
   17bb6:	f8b8 3000 	ldrh.w	r3, [r8]
   17bba:	9a01      	ldr	r2, [sp, #4]
   17bbc:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
   17bbe:	9a00      	ldr	r2, [sp, #0]
   17bc0:	441a      	add	r2, r3
			size -= tx_available;
   17bc2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
   17bc4:	9200      	str	r2, [sp, #0]
			data += tx_available;
   17bc6:	9a02      	ldr	r2, [sp, #8]
   17bc8:	441a      	add	r2, r3
			tx_available = 0;
   17bca:	2300      	movs	r3, #0
			data += tx_available;
   17bcc:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
   17bce:	4a19      	ldr	r2, [pc, #100]	; (17c34 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
   17bd0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
   17bd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
   17bd8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
   17bdc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
   17bde:	2900      	cmp	r1, #0
   17be0:	f47f af62 	bne.w	17aa8 <usb_serial_write.part.0+0x20>
	return sent;
   17be4:	9800      	ldr	r0, [sp, #0]
}
   17be6:	b005      	add	sp, #20
   17be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
   17bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   17bf0:	4b0d      	ldr	r3, [pc, #52]	; (17c28 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
   17bf2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   17bf6:	7819      	ldrb	r1, [r3, #0]
				break;
   17bf8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
   17bfa:	f8a8 2000 	strh.w	r2, [r8]
				break;
   17bfe:	e78a      	b.n	17b16 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
   17c00:	2301      	movs	r3, #1
				return sent;
   17c02:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
   17c04:	f88a 3000 	strb.w	r3, [sl]
}
   17c08:	b005      	add	sp, #20
   17c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   17c0e:	461a      	mov	r2, r3
   17c10:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   17c14:	e77f      	b.n	17b16 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
   17c16:	9801      	ldr	r0, [sp, #4]
	return sent;
   17c18:	e7e5      	b.n	17be6 <usb_serial_write.part.0+0x15e>
   17c1a:	bf00      	nop
   17c1c:	2000fc43 	.word	0x2000fc43
   17c20:	2000fab8 	.word	0x2000fab8
   17c24:	2000b380 	.word	0x2000b380
   17c28:	2000fc42 	.word	0x2000fc42
   17c2c:	2000fc45 	.word	0x2000fc45
   17c30:	20201160 	.word	0x20201160
   17c34:	402e0000 	.word	0x402e0000
   17c38:	2000fc2e 	.word	0x2000fc2e
   17c3c:	2000fc41 	.word	0x2000fc41

00017c40 <usb_serial_reset>:
}
   17c40:	4770      	bx	lr
   17c42:	bf00      	nop

00017c44 <usb_serial_configure>:
	if (usb_high_speed) {
   17c44:	4b2d      	ldr	r3, [pc, #180]	; (17cfc <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
   17c46:	2100      	movs	r1, #0
   17c48:	2280      	movs	r2, #128	; 0x80
   17c4a:	482d      	ldr	r0, [pc, #180]	; (17d00 <usb_serial_configure+0xbc>)
{
   17c4c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   17c4e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
   17c50:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
   17c52:	4d2c      	ldr	r5, [pc, #176]	; (17d04 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
   17c54:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
   17c56:	4e2c      	ldr	r6, [pc, #176]	; (17d08 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
   17c58:	bf0c      	ite	eq
   17c5a:	2340      	moveq	r3, #64	; 0x40
   17c5c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
   17c60:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
   17c62:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   17c64:	f003 ff78 	bl	1bb58 <memset>
	tx_head = 0;
   17c68:	4a28      	ldr	r2, [pc, #160]	; (17d0c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   17c6a:	4621      	mov	r1, r4
	tx_available = 0;
   17c6c:	4b28      	ldr	r3, [pc, #160]	; (17d10 <usb_serial_configure+0xcc>)
	tx_head = 0;
   17c6e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   17c70:	f44f 7280 	mov.w	r2, #256	; 0x100
   17c74:	4827      	ldr	r0, [pc, #156]	; (17d14 <usb_serial_configure+0xd0>)
	tx_available = 0;
   17c76:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   17c78:	f003 ff6e 	bl	1bb58 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   17c7c:	4a26      	ldr	r2, [pc, #152]	; (17d18 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17c7e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
   17c80:	4b26      	ldr	r3, [pc, #152]	; (17d1c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17c82:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
   17c84:	e9c2 4400 	strd	r4, r4, [r2]
   17c88:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
   17c8c:	4a24      	ldr	r2, [pc, #144]	; (17d20 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
   17c8e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
   17c92:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
   17c94:	4a23      	ldr	r2, [pc, #140]	; (17d24 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
   17c96:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
   17c9a:	4b23      	ldr	r3, [pc, #140]	; (17d28 <usb_serial_configure+0xe4>)
   17c9c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17c9e:	4623      	mov	r3, r4
	rx_available = 0;
   17ca0:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   17ca2:	4622      	mov	r2, r4
   17ca4:	f7ff fd74 	bl	17790 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   17ca8:	4622      	mov	r2, r4
   17caa:	8831      	ldrh	r1, [r6, #0]
   17cac:	2003      	movs	r0, #3
   17cae:	4b1f      	ldr	r3, [pc, #124]	; (17d2c <usb_serial_configure+0xe8>)
   17cb0:	f7ff fd3c 	bl	1772c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
   17cb4:	4623      	mov	r3, r4
   17cb6:	2201      	movs	r2, #1
   17cb8:	8829      	ldrh	r1, [r5, #0]
   17cba:	2004      	movs	r0, #4
   17cbc:	f7ff fd68 	bl	17790 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   17cc0:	4620      	mov	r0, r4
   17cc2:	3401      	adds	r4, #1
   17cc4:	f7ff fe0e 	bl	178e4 <rx_queue_transfer>
   17cc8:	2c08      	cmp	r4, #8
   17cca:	d1f9      	bne.n	17cc0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
   17ccc:	4b18      	ldr	r3, [pc, #96]	; (17d30 <usb_serial_configure+0xec>)
   17cce:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
   17cd0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
   17cd2:	4818      	ldr	r0, [pc, #96]	; (17d34 <usb_serial_configure+0xf0>)
   17cd4:	4c18      	ldr	r4, [pc, #96]	; (17d38 <usb_serial_configure+0xf4>)
   17cd6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   17cd8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   17cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   17ce0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   17ce4:	4915      	ldr	r1, [pc, #84]	; (17d3c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
   17ce6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   17cea:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   17cee:	b121      	cbz	r1, 17cfa <usb_serial_configure+0xb6>
   17cf0:	4a13      	ldr	r2, [pc, #76]	; (17d40 <usb_serial_configure+0xfc>)
   17cf2:	7813      	ldrb	r3, [r2, #0]
   17cf4:	f043 0301 	orr.w	r3, r3, #1
   17cf8:	7013      	strb	r3, [r2, #0]
}
   17cfa:	bd70      	pop	{r4, r5, r6, pc}
   17cfc:	2000fc46 	.word	0x2000fc46
   17d00:	2000b380 	.word	0x2000b380
   17d04:	2000fc30 	.word	0x2000fc30
   17d08:	2000fc2c 	.word	0x2000fc2c
   17d0c:	2000fc42 	.word	0x2000fc42
   17d10:	2000fc2e 	.word	0x2000fc2e
   17d14:	2000b280 	.word	0x2000b280
   17d18:	2000f9a4 	.word	0x2000f9a4
   17d1c:	2000f9b4 	.word	0x2000f9b4
   17d20:	2000fc3e 	.word	0x2000fc3e
   17d24:	2000f9a0 	.word	0x2000f9a0
   17d28:	2000fc3f 	.word	0x2000fc3f
   17d2c:	00017945 	.word	0x00017945
   17d30:	402e0000 	.word	0x402e0000
   17d34:	2000fc20 	.word	0x2000fc20
   17d38:	000179f9 	.word	0x000179f9
   17d3c:	00000000 	.word	0x00000000
   17d40:	2000fc48 	.word	0x2000fc48

00017d44 <usb_serial_read>:
{
   17d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17d48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17d4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
   17d50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 17e1c <usb_serial_read+0xd8>
{
   17d54:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17d56:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
   17d5a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
   17d5c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
   17d60:	2900      	cmp	r1, #0
   17d62:	d04f      	beq.n	17e04 <usb_serial_read+0xc0>
   17d64:	4680      	mov	r8, r0
   17d66:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
   17d68:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
   17d6a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 17e20 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
   17d6e:	4b26      	ldr	r3, [pc, #152]	; (17e08 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
   17d70:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17d74:	4925      	ldr	r1, [pc, #148]	; (17e0c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
   17d76:	781b      	ldrb	r3, [r3, #0]
   17d78:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
   17d7a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
   17d7e:	d03f      	beq.n	17e00 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
   17d80:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
   17d82:	4b23      	ldr	r3, [pc, #140]	; (17e10 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17d84:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
   17d86:	bf28      	it	cs
   17d88:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   17d8a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
   17d8c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17d90:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
   17d94:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
   17d96:	4b1f      	ldr	r3, [pc, #124]	; (17e14 <usb_serial_read+0xd0>)
   17d98:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
   17d9c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
   17da0:	42aa      	cmp	r2, r5
   17da2:	d21c      	bcs.n	17dde <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   17da4:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
   17da8:	4918      	ldr	r1, [pc, #96]	; (17e0c <usb_serial_read+0xc8>)
			rx_available -= len;
   17daa:	4c1b      	ldr	r4, [pc, #108]	; (17e18 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   17dac:	4461      	add	r1, ip
   17dae:	9201      	str	r2, [sp, #4]
   17db0:	f7fe fc78 	bl	166a4 <memcpy>
			rx_available -= len;
   17db4:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
   17db6:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
   17dba:	4658      	mov	r0, fp
			rx_index[i] += len;
   17dbc:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
   17dbe:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
   17dc2:	442a      	add	r2, r5
			rx_available -= len;
   17dc4:	4439      	add	r1, r7
			rx_index[i] += len;
   17dc6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
   17dca:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17dcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17dd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17dd4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   17dd8:	b003      	add	sp, #12
   17dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17dde:	462a      	mov	r2, r5
			count += avail;
   17de0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   17de2:	f7fe fc5f 	bl	166a4 <memcpy>
			rx_available -= avail;
   17de6:	490c      	ldr	r1, [pc, #48]	; (17e18 <usb_serial_read+0xd4>)
			rx_tail = tail;
   17de8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
   17dea:	4630      	mov	r0, r6
			rx_available -= avail;
   17dec:	680a      	ldr	r2, [r1, #0]
			p += avail;
   17dee:	44a8      	add	r8, r5
			rx_available -= avail;
   17df0:	1b52      	subs	r2, r2, r5
   17df2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
   17df4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
   17df8:	f7ff fd74 	bl	178e4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
   17dfc:	45bb      	cmp	fp, r7
   17dfe:	d8b6      	bhi.n	17d6e <usb_serial_read+0x2a>
	return count;
   17e00:	4638      	mov	r0, r7
   17e02:	e7e3      	b.n	17dcc <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
   17e04:	4608      	mov	r0, r1
   17e06:	e7e1      	b.n	17dcc <usb_serial_read+0x88>
   17e08:	2000fc3e 	.word	0x2000fc3e
   17e0c:	20200160 	.word	0x20200160
   17e10:	2000f9c4 	.word	0x2000f9c4
   17e14:	2000f9a4 	.word	0x2000f9a4
   17e18:	2000f9a0 	.word	0x2000f9a0
   17e1c:	2000fc3f 	.word	0x2000fc3f
   17e20:	2000f9b4 	.word	0x2000f9b4

00017e24 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
   17e24:	4b0b      	ldr	r3, [pc, #44]	; (17e54 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
   17e26:	4a0c      	ldr	r2, [pc, #48]	; (17e58 <usb_serial_peekchar+0x34>)
   17e28:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
   17e2a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
   17e2c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
   17e2e:	428a      	cmp	r2, r1
   17e30:	d00d      	beq.n	17e4e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   17e32:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
   17e34:	4809      	ldr	r0, [pc, #36]	; (17e5c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   17e36:	4a0a      	ldr	r2, [pc, #40]	; (17e60 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
   17e38:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   17e3a:	490a      	ldr	r1, [pc, #40]	; (17e64 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
   17e3c:	bf28      	it	cs
   17e3e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   17e40:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   17e42:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   17e46:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   17e4a:	5c58      	ldrb	r0, [r3, r1]
   17e4c:	4770      	bx	lr
	if (tail == rx_head) return -1;
   17e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17e52:	4770      	bx	lr
   17e54:	2000fc3e 	.word	0x2000fc3e
   17e58:	2000fc3f 	.word	0x2000fc3f
   17e5c:	2000f9c4 	.word	0x2000f9c4
   17e60:	20200160 	.word	0x20200160
   17e64:	2000f9b4 	.word	0x2000f9b4

00017e68 <usb_serial_available>:
	uint32_t n = rx_available;
   17e68:	4b04      	ldr	r3, [pc, #16]	; (17e7c <usb_serial_available+0x14>)
{
   17e6a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   17e6c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   17e6e:	b10c      	cbz	r4, 17e74 <usb_serial_available+0xc>
}
   17e70:	4620      	mov	r0, r4
   17e72:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   17e74:	f000 f8e0 	bl	18038 <yield>
}
   17e78:	4620      	mov	r0, r4
   17e7a:	bd10      	pop	{r4, pc}
   17e7c:	2000f9a0 	.word	0x2000f9a0

00017e80 <usb_serial_flush_input>:
{
   17e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
   17e84:	4e14      	ldr	r6, [pc, #80]	; (17ed8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
   17e86:	4d15      	ldr	r5, [pc, #84]	; (17edc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
   17e88:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
   17e8a:	782a      	ldrb	r2, [r5, #0]
   17e8c:	4293      	cmp	r3, r2
   17e8e:	d021      	beq.n	17ed4 <usb_serial_flush_input+0x54>
   17e90:	b2dc      	uxtb	r4, r3
   17e92:	f8df 9050 	ldr.w	r9, [pc, #80]	; 17ee4 <usb_serial_flush_input+0x64>
   17e96:	f8df b050 	ldr.w	fp, [pc, #80]	; 17ee8 <usb_serial_flush_input+0x68>
   17e9a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17eec <usb_serial_flush_input+0x6c>
   17e9e:	4f10      	ldr	r7, [pc, #64]	; (17ee0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   17ea0:	3401      	adds	r4, #1
   17ea2:	2c08      	cmp	r4, #8
		rx_tail = tail;
   17ea4:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   17ea8:	d901      	bls.n	17eae <usb_serial_flush_input+0x2e>
   17eaa:	2400      	movs	r4, #0
   17eac:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   17eae:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   17eb2:	f8db 3000 	ldr.w	r3, [fp]
   17eb6:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   17eba:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   17ebe:	1a52      	subs	r2, r2, r1
   17ec0:	1a9b      	subs	r3, r3, r2
   17ec2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   17ec6:	f7ff fd0d 	bl	178e4 <rx_queue_transfer>
		rx_tail = tail;
   17eca:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   17ece:	782b      	ldrb	r3, [r5, #0]
   17ed0:	42a3      	cmp	r3, r4
   17ed2:	d1e5      	bne.n	17ea0 <usb_serial_flush_input+0x20>
}
   17ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ed8:	2000fc3f 	.word	0x2000fc3f
   17edc:	2000fc3e 	.word	0x2000fc3e
   17ee0:	2000f9b4 	.word	0x2000f9b4
   17ee4:	2000f9c4 	.word	0x2000f9c4
   17ee8:	2000f9a0 	.word	0x2000f9a0
   17eec:	2000f9a4 	.word	0x2000f9a4

00017ef0 <usb_serial_getchar>:
{
   17ef0:	b500      	push	{lr}
   17ef2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   17ef4:	2101      	movs	r1, #1
   17ef6:	f10d 0007 	add.w	r0, sp, #7
   17efa:	f7ff ff23 	bl	17d44 <usb_serial_read>
   17efe:	b120      	cbz	r0, 17f0a <usb_serial_getchar+0x1a>
   17f00:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   17f04:	b003      	add	sp, #12
   17f06:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   17f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f0e:	e7f9      	b.n	17f04 <usb_serial_getchar+0x14>

00017f10 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   17f10:	4b09      	ldr	r3, [pc, #36]	; (17f38 <usb_serial_putchar+0x28>)
{
   17f12:	b500      	push	{lr}
   17f14:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   17f16:	781b      	ldrb	r3, [r3, #0]
{
   17f18:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   17f1c:	b13b      	cbz	r3, 17f2e <usb_serial_putchar+0x1e>
   17f1e:	2101      	movs	r1, #1
   17f20:	f10d 0007 	add.w	r0, sp, #7
   17f24:	f7ff fdb0 	bl	17a88 <usb_serial_write.part.0>
}
   17f28:	b003      	add	sp, #12
   17f2a:	f85d fb04 	ldr.w	pc, [sp], #4
   17f2e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   17f32:	b003      	add	sp, #12
   17f34:	f85d fb04 	ldr.w	pc, [sp], #4
   17f38:	2000fc45 	.word	0x2000fc45

00017f3c <usb_serial_write>:
	if (!usb_configuration) return 0;
   17f3c:	4b04      	ldr	r3, [pc, #16]	; (17f50 <usb_serial_write+0x14>)
   17f3e:	781b      	ldrb	r3, [r3, #0]
   17f40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   17f44:	b10b      	cbz	r3, 17f4a <usb_serial_write+0xe>
   17f46:	f7ff bd9f 	b.w	17a88 <usb_serial_write.part.0>
}
   17f4a:	4610      	mov	r0, r2
   17f4c:	4770      	bx	lr
   17f4e:	bf00      	nop
   17f50:	2000fc45 	.word	0x2000fc45

00017f54 <usb_serial_write_buffer_free>:
{
   17f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   17f58:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   17f5a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 17fa0 <usb_serial_write_buffer_free+0x4c>
   17f5e:	2301      	movs	r3, #1
   17f60:	4d0d      	ldr	r5, [pc, #52]	; (17f98 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   17f62:	4627      	mov	r7, r4
   17f64:	4e0d      	ldr	r6, [pc, #52]	; (17f9c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   17f66:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   17f6a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   17f6c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   17f6e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   17f70:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   17f72:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   17f76:	d005      	beq.n	17f84 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   17f78:	f7ff fc76 	bl	17868 <usb_transfer_status>
   17f7c:	0603      	lsls	r3, r0, #24
   17f7e:	bf58      	it	pl
   17f80:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   17f84:	2c04      	cmp	r4, #4
   17f86:	d1f0      	bne.n	17f6a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   17f88:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   17f8c:	2300      	movs	r3, #0
}
   17f8e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   17f90:	f888 3000 	strb.w	r3, [r8]
}
   17f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f98:	2000b380 	.word	0x2000b380
   17f9c:	2000fc42 	.word	0x2000fc42
   17fa0:	2000fc43 	.word	0x2000fc43

00017fa4 <usb_serial_flush_output>:
{
   17fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   17fa8:	4b1d      	ldr	r3, [pc, #116]	; (18020 <usb_serial_flush_output+0x7c>)
   17faa:	781b      	ldrb	r3, [r3, #0]
   17fac:	b113      	cbz	r3, 17fb4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   17fae:	4d1d      	ldr	r5, [pc, #116]	; (18024 <usb_serial_flush_output+0x80>)
   17fb0:	882a      	ldrh	r2, [r5, #0]
   17fb2:	b90a      	cbnz	r2, 17fb8 <usb_serial_flush_output+0x14>
}
   17fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   17fb8:	4e1b      	ldr	r6, [pc, #108]	; (18028 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   17fba:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   17fbe:	491b      	ldr	r1, [pc, #108]	; (1802c <usb_serial_flush_output+0x88>)
   17fc0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17fc2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17fc4:	4c1a      	ldr	r4, [pc, #104]	; (18030 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   17fc6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   17fca:	4f1a      	ldr	r7, [pc, #104]	; (18034 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17fcc:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   17fd0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17fd2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   17fd4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17fd6:	4621      	mov	r1, r4
   17fd8:	2300      	movs	r3, #0
   17fda:	f7ff fc0b 	bl	177f4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   17fde:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   17fe2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   17fe6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17fea:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   17fee:	3420      	adds	r4, #32
	} while (location < end_addr);
   17ff0:	42a2      	cmp	r2, r4
   17ff2:	d8fa      	bhi.n	17fea <usb_serial_flush_output+0x46>
	asm("dsb");
   17ff4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17ff8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   17ffc:	2004      	movs	r0, #4
   17ffe:	4641      	mov	r1, r8
   18000:	f7ff fc10 	bl	17824 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   18004:	7833      	ldrb	r3, [r6, #0]
   18006:	3301      	adds	r3, #1
   18008:	b2db      	uxtb	r3, r3
   1800a:	2b03      	cmp	r3, #3
   1800c:	bf88      	it	hi
   1800e:	2300      	movhi	r3, #0
   18010:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   18012:	2300      	movs	r3, #0
   18014:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   18016:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   1801a:	703b      	strb	r3, [r7, #0]
}
   1801c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18020:	2000fc45 	.word	0x2000fc45
   18024:	2000fc2e 	.word	0x2000fc2e
   18028:	2000fc42 	.word	0x2000fc42
   1802c:	2000b380 	.word	0x2000b380
   18030:	20201160 	.word	0x20201160
   18034:	2000fc43 	.word	0x2000fc43

00018038 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
   18038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
   1803c:	4b2d      	ldr	r3, [pc, #180]	; (180f4 <yield+0xbc>)
   1803e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
   18040:	b166      	cbz	r6, 1805c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
   18042:	4f2d      	ldr	r7, [pc, #180]	; (180f8 <yield+0xc0>)
   18044:	783b      	ldrb	r3, [r7, #0]
   18046:	b94b      	cbnz	r3, 1805c <yield+0x24>
	running = 1;
   18048:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   1804a:	07f1      	lsls	r1, r6, #31
	running = 1;
   1804c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   1804e:	d443      	bmi.n	180d8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   18050:	07b2      	lsls	r2, r6, #30
   18052:	d426      	bmi.n	180a2 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
   18054:	2300      	movs	r3, #0
   18056:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
   18058:	0773      	lsls	r3, r6, #29
   1805a:	d401      	bmi.n	18060 <yield+0x28>
		EventResponder::runFromYield();
	}
};
   1805c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   18060:	4b26      	ldr	r3, [pc, #152]	; (180fc <yield+0xc4>)
   18062:	681a      	ldr	r2, [r3, #0]
   18064:	2a00      	cmp	r2, #0
   18066:	d0f9      	beq.n	1805c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   18068:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   1806c:	2a00      	cmp	r2, #0
   1806e:	d1f5      	bne.n	1805c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   18070:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   18074:	b672      	cpsid	i
		EventResponder *first = firstYield;
   18076:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   18078:	2800      	cmp	r0, #0
   1807a:	d034      	beq.n	180e6 <yield+0xae>
		if (runningFromYield) {
   1807c:	4c20      	ldr	r4, [pc, #128]	; (18100 <yield+0xc8>)
   1807e:	7821      	ldrb	r1, [r4, #0]
   18080:	2900      	cmp	r1, #0
   18082:	d130      	bne.n	180e6 <yield+0xae>
		runningFromYield = true;
   18084:	2201      	movs	r2, #1
   18086:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   18088:	6942      	ldr	r2, [r0, #20]
   1808a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   1808c:	2a00      	cmp	r2, #0
   1808e:	d02e      	beq.n	180ee <yield+0xb6>
			firstYield->_prev = nullptr;
   18090:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   18092:	b905      	cbnz	r5, 18096 <yield+0x5e>
   18094:	b662      	cpsie	i
		first->_triggered = false;
   18096:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   18098:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   1809a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   1809c:	4798      	blx	r3
		runningFromYield = false;
   1809e:	7025      	strb	r5, [r4, #0]
   180a0:	e7dc      	b.n	1805c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   180a2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 18108 <yield+0xd0>
   180a6:	f898 3000 	ldrb.w	r3, [r8]
   180aa:	2b00      	cmp	r3, #0
   180ac:	d0d2      	beq.n	18054 <yield+0x1c>
   180ae:	2500      	movs	r5, #0
   180b0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1810c <yield+0xd4>
   180b4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   180b6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   180ba:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   180bc:	6823      	ldr	r3, [r4, #0]
   180be:	4620      	mov	r0, r4
   180c0:	691b      	ldr	r3, [r3, #16]
   180c2:	4798      	blx	r3
   180c4:	b110      	cbz	r0, 180cc <yield+0x94>
   180c6:	6963      	ldr	r3, [r4, #20]
   180c8:	689b      	ldr	r3, [r3, #8]
   180ca:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   180cc:	f898 2000 	ldrb.w	r2, [r8]
   180d0:	b2eb      	uxtb	r3, r5
   180d2:	429a      	cmp	r2, r3
   180d4:	d8ef      	bhi.n	180b6 <yield+0x7e>
   180d6:	e7bd      	b.n	18054 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   180d8:	f7ff fec6 	bl	17e68 <usb_serial_available>
		if (Serial.available()) serialEvent();
   180dc:	2800      	cmp	r0, #0
   180de:	d0b7      	beq.n	18050 <yield+0x18>
   180e0:	f3af 8000 	nop.w
   180e4:	e7b4      	b.n	18050 <yield+0x18>
		if (doit) __enable_irq();
   180e6:	2d00      	cmp	r5, #0
   180e8:	d1b8      	bne.n	1805c <yield+0x24>
   180ea:	b662      	cpsie	i
   180ec:	e7b6      	b.n	1805c <yield+0x24>
			lastYield = nullptr;
   180ee:	4b05      	ldr	r3, [pc, #20]	; (18104 <yield+0xcc>)
   180f0:	601a      	str	r2, [r3, #0]
   180f2:	e7ce      	b.n	18092 <yield+0x5a>
   180f4:	2000fc48 	.word	0x2000fc48
   180f8:	2000fc39 	.word	0x2000fc39
   180fc:	2000e868 	.word	0x2000e868
   18100:	2000fc35 	.word	0x2000fc35
   18104:	2000e874 	.word	0x2000e874
   18108:	2000fc36 	.word	0x2000fc36
   1810c:	2000e87c 	.word	0x2000e87c

00018110 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
   18110:	4a07      	ldr	r2, [pc, #28]	; (18130 <rtc_get+0x20>)
   18112:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
   18114:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
   18116:	4619      	mov	r1, r3
   18118:	4684      	mov	ip, r0
   1811a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
   1811c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
   1811e:	4299      	cmp	r1, r3
   18120:	d1f9      	bne.n	18116 <rtc_get+0x6>
   18122:	4584      	cmp	ip, r0
   18124:	d1f7      	bne.n	18116 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
   18126:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
   18128:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   1812c:	4770      	bx	lr
   1812e:	bf00      	nop
   18130:	400d4000 	.word	0x400d4000

00018134 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   18134:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   18136:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   1813a:	b15b      	cbz	r3, 18154 <sm_align_pool+0x20>
   1813c:	b1ba      	cbz	r2, 1816e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   1813e:	4b0f      	ldr	r3, [pc, #60]	; (1817c <sm_align_pool+0x48>)
   18140:	fba3 1302 	umull	r1, r3, r3, r2
   18144:	08db      	lsrs	r3, r3, #3
   18146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1814a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   1814e:	d10a      	bne.n	18166 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   18150:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   18152:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   18154:	4b09      	ldr	r3, [pc, #36]	; (1817c <sm_align_pool+0x48>)
   18156:	fba3 1302 	umull	r1, r3, r3, r2
   1815a:	08db      	lsrs	r3, r3, #3
   1815c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   18160:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   18164:	d001      	beq.n	1816a <sm_align_pool+0x36>
   18166:	1ad2      	subs	r2, r2, r3
   18168:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   1816a:	2af0      	cmp	r2, #240	; 0xf0
   1816c:	d8f0      	bhi.n	18150 <sm_align_pool+0x1c>
		errno = ENOSPC;
   1816e:	f004 fe35 	bl	1cddc <__errno>
   18172:	221c      	movs	r2, #28
   18174:	4603      	mov	r3, r0
   18176:	2000      	movs	r0, #0
   18178:	601a      	str	r2, [r3, #0]
}
   1817a:	bd08      	pop	{r3, pc}
   1817c:	aaaaaaab 	.word	0xaaaaaaab

00018180 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   18180:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   18182:	4604      	mov	r4, r0
   18184:	b338      	cbz	r0, 181d6 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   18186:	b119      	cbz	r1, 18190 <sm_set_pool+0x10>
   18188:	fab2 f682 	clz	r6, r2
   1818c:	0976      	lsrs	r6, r6, #5
   1818e:	b9a2      	cbnz	r2, 181ba <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   18190:	6820      	ldr	r0, [r4, #0]
   18192:	b300      	cbz	r0, 181d6 <sm_set_pool+0x56>
   18194:	6862      	ldr	r2, [r4, #4]
   18196:	b1f2      	cbz	r2, 181d6 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   18198:	4b18      	ldr	r3, [pc, #96]	; (181fc <sm_set_pool+0x7c>)
   1819a:	4919      	ldr	r1, [pc, #100]	; (18200 <sm_set_pool+0x80>)
   1819c:	fb02 f303 	mul.w	r3, r2, r3
   181a0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   181a4:	d317      	bcc.n	181d6 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   181a6:	68a3      	ldr	r3, [r4, #8]
   181a8:	b9e3      	cbnz	r3, 181e4 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   181aa:	2200      	movs	r2, #0
			return 1;
   181ac:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   181ae:	6022      	str	r2, [r4, #0]
   181b0:	6062      	str	r2, [r4, #4]
   181b2:	60a2      	str	r2, [r4, #8]
   181b4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   181b6:	4618      	mov	r0, r3
   181b8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   181ba:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   181bc:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   181be:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   181c2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   181c4:	f7ff ffb6 	bl	18134 <sm_align_pool>
   181c8:	4603      	mov	r3, r0
   181ca:	2800      	cmp	r0, #0
   181cc:	d0f3      	beq.n	181b6 <sm_set_pool+0x36>
	if (do_zero) {
   181ce:	b96d      	cbnz	r5, 181ec <sm_set_pool+0x6c>
	return 1;
   181d0:	2301      	movs	r3, #1
}
   181d2:	4618      	mov	r0, r3
   181d4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   181d6:	f004 fe01 	bl	1cddc <__errno>
   181da:	2216      	movs	r2, #22
		return 0;
   181dc:	2300      	movs	r3, #0
		errno = EINVAL;
   181de:	6002      	str	r2, [r0, #0]
}
   181e0:	4618      	mov	r0, r3
   181e2:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   181e4:	2100      	movs	r1, #0
   181e6:	f003 fcb7 	bl	1bb58 <memset>
   181ea:	e7de      	b.n	181aa <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   181ec:	6862      	ldr	r2, [r4, #4]
   181ee:	4631      	mov	r1, r6
   181f0:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   181f2:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   181f4:	f003 fcb0 	bl	1bb58 <memset>
	return 1;
   181f8:	2301      	movs	r3, #1
   181fa:	e7dc      	b.n	181b6 <sm_set_pool+0x36>
   181fc:	aaaaaaab 	.word	0xaaaaaaab
   18200:	15555555 	.word	0x15555555

00018204 <atan2f>:
   18204:	f000 bd14 	b.w	18c30 <__ieee754_atan2f>

00018208 <sqrtf>:
   18208:	b508      	push	{r3, lr}
   1820a:	ed2d 8b02 	vpush	{d8}
   1820e:	eeb0 8a40 	vmov.f32	s16, s0
   18212:	f000 fd09 	bl	18c28 <__ieee754_sqrtf>
   18216:	eeb4 8a48 	vcmp.f32	s16, s16
   1821a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1821e:	d606      	bvs.n	1822e <sqrtf+0x26>
   18220:	eddf 8a09 	vldr	s17, [pc, #36]	; 18248 <sqrtf+0x40>
   18224:	eeb4 8ae8 	vcmpe.f32	s16, s17
   18228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1822c:	d402      	bmi.n	18234 <sqrtf+0x2c>
   1822e:	ecbd 8b02 	vpop	{d8}
   18232:	bd08      	pop	{r3, pc}
   18234:	f004 fdd2 	bl	1cddc <__errno>
   18238:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   1823c:	ecbd 8b02 	vpop	{d8}
   18240:	2321      	movs	r3, #33	; 0x21
   18242:	6003      	str	r3, [r0, #0]
   18244:	bd08      	pop	{r3, pc}
   18246:	bf00      	nop
	...

00018250 <pow>:
   18250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18254:	ec5b ab10 	vmov	sl, fp, d0
   18258:	ed2d 8b0a 	vpush	{d8-d12}
   1825c:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
   18260:	ee11 ea90 	vmov	lr, s3
   18264:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   18268:	f240 70fd 	movw	r0, #2045	; 0x7fd
   1826c:	4286      	cmp	r6, r0
   1826e:	ee10 1a10 	vmov	r1, s0
   18272:	ee11 3a10 	vmov	r3, s2
   18276:	b089      	sub	sp, #36	; 0x24
   18278:	465a      	mov	r2, fp
   1827a:	4665      	mov	r5, ip
   1827c:	ea4f 541e 	mov.w	r4, lr, lsr #20
   18280:	f200 80c6 	bhi.w	18410 <pow+0x1c0>
   18284:	f3c4 060a 	ubfx	r6, r4, #0, #11
   18288:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
   1828c:	2e7f      	cmp	r6, #127	; 0x7f
   1828e:	bf98      	it	ls
   18290:	2000      	movls	r0, #0
   18292:	f200 80bd 	bhi.w	18410 <pow+0x1c0>
   18296:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
   1829a:	4ce1      	ldr	r4, [pc, #900]	; (18620 <pow+0x3d0>)
   1829c:	4be1      	ldr	r3, [pc, #900]	; (18624 <pow+0x3d4>)
   1829e:	4414      	add	r4, r2
   182a0:	f3c4 3546 	ubfx	r5, r4, #13, #7
   182a4:	eb03 1645 	add.w	r6, r3, r5, lsl #5
   182a8:	ed93 6b00 	vldr	d6, [r3]
   182ac:	ed93 7b02 	vldr	d7, [r3, #8]
   182b0:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
   182b4:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
   182b8:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
   182bc:	0d26      	lsrs	r6, r4, #20
   182be:	1524      	asrs	r4, r4, #20
   182c0:	ee05 4a90 	vmov	s11, r4
   182c4:	0536      	lsls	r6, r6, #20
   182c6:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
   182ca:	eeb8 5be5 	vcvt.f64.s32	d5, s11
   182ce:	1b95      	subs	r5, r2, r6
   182d0:	eea5 2b06 	vfma.f64	d2, d5, d6
   182d4:	eea5 9b07 	vfma.f64	d9, d5, d7
   182d8:	ed93 ab04 	vldr	d10, [r3, #16]
   182dc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
   182e0:	ed93 bb08 	vldr	d11, [r3, #32]
   182e4:	ed93 7b06 	vldr	d7, [r3, #24]
   182e8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
   182ec:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   182f0:	1e0c      	subs	r4, r1, #0
   182f2:	ec45 4b1c 	vmov	d12, r4, r5
   182f6:	eeac 0b08 	vfma.f64	d0, d12, d8
   182fa:	eea0 3b05 	vfma.f64	d3, d0, d5
   182fe:	eea0 6b04 	vfma.f64	d6, d0, d4
   18302:	ee20 5b0a 	vmul.f64	d5, d0, d10
   18306:	ee30 4b02 	vadd.f64	d4, d0, d2
   1830a:	ee20 8b05 	vmul.f64	d8, d0, d5
   1830e:	eea0 7b0b 	vfma.f64	d7, d0, d11
   18312:	eea8 6b03 	vfma.f64	d6, d8, d3
   18316:	ee32 2b44 	vsub.f64	d2, d2, d4
   1831a:	eea8 7b06 	vfma.f64	d7, d8, d6
   1831e:	ee32 2b00 	vadd.f64	d2, d2, d0
   18322:	eeb0 3b48 	vmov.f64	d3, d8
   18326:	ee39 2b02 	vadd.f64	d2, d9, d2
   1832a:	ee95 3b00 	vfnms.f64	d3, d5, d0
   1832e:	ee34 5b08 	vadd.f64	d5, d4, d8
   18332:	ee20 0b08 	vmul.f64	d0, d0, d8
   18336:	ee34 4b45 	vsub.f64	d4, d4, d5
   1833a:	ee32 6b03 	vadd.f64	d6, d2, d3
   1833e:	ee34 4b08 	vadd.f64	d4, d4, d8
   18342:	ee36 6b04 	vadd.f64	d6, d6, d4
   18346:	eea0 6b07 	vfma.f64	d6, d0, d7
   1834a:	ee35 4b06 	vadd.f64	d4, d5, d6
   1834e:	ee21 8b04 	vmul.f64	d8, d1, d4
   18352:	ee18 2a90 	vmov	r2, s17
   18356:	eeb0 7b48 	vmov.f64	d7, d8
   1835a:	f3c2 550a 	ubfx	r5, r2, #20, #11
   1835e:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
   18362:	18eb      	adds	r3, r5, r3
   18364:	2b3e      	cmp	r3, #62	; 0x3e
   18366:	ee91 7b04 	vfnms.f64	d7, d1, d4
   1836a:	ee35 5b44 	vsub.f64	d5, d5, d4
   1836e:	ee35 5b06 	vadd.f64	d5, d5, d6
   18372:	eea1 7b05 	vfma.f64	d7, d1, d5
   18376:	f200 8093 	bhi.w	184a0 <pow+0x250>
   1837a:	4bab      	ldr	r3, [pc, #684]	; (18628 <pow+0x3d8>)
   1837c:	ed93 4b02 	vldr	d4, [r3, #8]
   18380:	ed93 5b00 	vldr	d5, [r3]
   18384:	eeb0 1b44 	vmov.f64	d1, d4
   18388:	ed93 2b04 	vldr	d2, [r3, #16]
   1838c:	eea8 1b05 	vfma.f64	d1, d8, d5
   18390:	ed93 6b06 	vldr	d6, [r3, #24]
   18394:	ee11 1a10 	vmov	r1, s2
   18398:	ee31 1b44 	vsub.f64	d1, d1, d4
   1839c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   183a0:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
   183a4:	eea1 8b02 	vfma.f64	d8, d1, d2
   183a8:	eea1 8b06 	vfma.f64	d8, d1, d6
   183ac:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
   183b0:	ee37 7b08 	vadd.f64	d7, d7, d8
   183b4:	ee27 2b07 	vmul.f64	d2, d7, d7
   183b8:	1892      	adds	r2, r2, r2
   183ba:	f102 040f 	add.w	r4, r2, #15
   183be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   183c2:	eea7 6b04 	vfma.f64	d6, d7, d4
   183c6:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
   183ca:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   183ce:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
   183d2:	ed93 5b08 	vldr	d5, [r3, #32]
   183d6:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
   183da:	6857      	ldr	r7, [r2, #4]
   183dc:	eea7 5b03 	vfma.f64	d5, d7, d3
   183e0:	1840      	adds	r0, r0, r1
   183e2:	2400      	movs	r4, #0
   183e4:	ee22 3b02 	vmul.f64	d3, d2, d2
   183e8:	ee37 7b04 	vadd.f64	d7, d7, d4
   183ec:	19a2      	adds	r2, r4, r6
   183ee:	eea2 7b05 	vfma.f64	d7, d2, d5
   183f2:	eb07 3340 	add.w	r3, r7, r0, lsl #13
   183f6:	eea3 7b06 	vfma.f64	d7, d3, d6
   183fa:	2d00      	cmp	r5, #0
   183fc:	d05f      	beq.n	184be <pow+0x26e>
   183fe:	ec43 2b10 	vmov	d0, r2, r3
   18402:	eea7 0b00 	vfma.f64	d0, d7, d0
   18406:	b009      	add	sp, #36	; 0x24
   18408:	ecbd 8b0a 	vpop	{d8-d12}
   1840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18410:	18d8      	adds	r0, r3, r3
   18412:	eb4e 090e 	adc.w	r9, lr, lr
   18416:	1e46      	subs	r6, r0, #1
   18418:	4637      	mov	r7, r6
   1841a:	f06f 0801 	mvn.w	r8, #1
   1841e:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
   18422:	45b8      	cmp	r8, r7
   18424:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   18428:	eb77 0606 	sbcs.w	r6, r7, r6
   1842c:	f0c0 8120 	bcc.w	18670 <pow+0x420>
   18430:	1848      	adds	r0, r1, r1
   18432:	eb42 0902 	adc.w	r9, r2, r2
   18436:	1e46      	subs	r6, r0, #1
   18438:	4637      	mov	r7, r6
   1843a:	f169 0600 	sbc.w	r6, r9, #0
   1843e:	45b8      	cmp	r8, r7
   18440:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   18444:	eb77 0606 	sbcs.w	r6, r7, r6
   18448:	f0c0 8139 	bcc.w	186be <pow+0x46e>
   1844c:	2a00      	cmp	r2, #0
   1844e:	db6a      	blt.n	18526 <pow+0x2d6>
   18450:	2000      	movs	r0, #0
   18452:	f3c4 060a 	ubfx	r6, r4, #0, #11
   18456:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
   1845a:	2b7f      	cmp	r3, #127	; 0x7f
   1845c:	f240 77ff 	movw	r7, #2047	; 0x7ff
   18460:	d94f      	bls.n	18502 <pow+0x2b2>
   18462:	4b72      	ldr	r3, [pc, #456]	; (1862c <pow+0x3dc>)
   18464:	2000      	movs	r0, #0
   18466:	429a      	cmp	r2, r3
   18468:	bf08      	it	eq
   1846a:	4281      	cmpeq	r1, r0
   1846c:	f000 80fd 	beq.w	1866a <pow+0x41a>
   18470:	f240 35bd 	movw	r5, #957	; 0x3bd
   18474:	42ae      	cmp	r6, r5
   18476:	f240 8091 	bls.w	1859c <pow+0x34c>
   1847a:	2901      	cmp	r1, #1
   1847c:	eb72 0303 	sbcs.w	r3, r2, r3
   18480:	bf34      	ite	cc
   18482:	2301      	movcc	r3, #1
   18484:	2300      	movcs	r3, #0
   18486:	42bc      	cmp	r4, r7
   18488:	bf8c      	ite	hi
   1848a:	2400      	movhi	r4, #0
   1848c:	2401      	movls	r4, #1
   1848e:	42a3      	cmp	r3, r4
   18490:	d10e      	bne.n	184b0 <pow+0x260>
   18492:	b009      	add	sp, #36	; 0x24
   18494:	ecbd 8b0a 	vpop	{d8-d12}
   18498:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1849c:	f000 bd64 	b.w	18f68 <__math_uflow>
   184a0:	2b00      	cmp	r3, #0
   184a2:	f2c0 80ce 	blt.w	18642 <pow+0x3f2>
   184a6:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
   184aa:	d975      	bls.n	18598 <pow+0x348>
   184ac:	2a00      	cmp	r2, #0
   184ae:	dbf0      	blt.n	18492 <pow+0x242>
   184b0:	b009      	add	sp, #36	; 0x24
   184b2:	ecbd 8b0a 	vpop	{d8-d12}
   184b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184ba:	f000 bd65 	b.w	18f88 <__math_oflow>
   184be:	42a1      	cmp	r1, r4
   184c0:	f280 8113 	bge.w	186ea <pow+0x49a>
   184c4:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
   184c8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   184cc:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   184d0:	4610      	mov	r0, r2
   184d2:	ec41 0b15 	vmov	d5, r0, r1
   184d6:	ee27 7b05 	vmul.f64	d7, d7, d5
   184da:	ee35 6b07 	vadd.f64	d6, d5, d7
   184de:	eeb0 4bc6 	vabs.f64	d4, d6
   184e2:	eeb4 4bc3 	vcmpe.f64	d4, d3
   184e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   184ea:	d461      	bmi.n	185b0 <pow+0x360>
   184ec:	ed9f 0b48 	vldr	d0, [pc, #288]	; 18610 <pow+0x3c0>
   184f0:	ee26 0b00 	vmul.f64	d0, d6, d0
   184f4:	b009      	add	sp, #36	; 0x24
   184f6:	ecbd 8b0a 	vpop	{d8-d12}
   184fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184fe:	f000 bd71 	b.w	18fe4 <__math_check_uflow>
   18502:	2d00      	cmp	r5, #0
   18504:	f47f aec7 	bne.w	18296 <pow+0x46>
   18508:	ed9f 7b43 	vldr	d7, [pc, #268]	; 18618 <pow+0x3c8>
   1850c:	ec4b ab16 	vmov	d6, sl, fp
   18510:	ee26 7b07 	vmul.f64	d7, d6, d7
   18514:	ec53 2b17 	vmov	r2, r3, d7
   18518:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1851c:	ee17 1a10 	vmov	r1, s14
   18520:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
   18524:	e6b7      	b.n	18296 <pow+0x46>
   18526:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1852a:	f240 30fe 	movw	r0, #1022	; 0x3fe
   1852e:	4286      	cmp	r6, r0
   18530:	dd7e      	ble.n	18630 <pow+0x3e0>
   18532:	f240 4033 	movw	r0, #1075	; 0x433
   18536:	4286      	cmp	r6, r0
   18538:	f300 80fa 	bgt.w	18730 <pow+0x4e0>
   1853c:	1b80      	subs	r0, r0, r6
   1853e:	f1a0 0520 	sub.w	r5, r0, #32
   18542:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   18546:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1854a:	4087      	lsls	r7, r0
   1854c:	fa09 f905 	lsl.w	r9, r9, r5
   18550:	f1c0 0820 	rsb	r8, r0, #32
   18554:	9501      	str	r5, [sp, #4]
   18556:	ea47 0509 	orr.w	r5, r7, r9
   1855a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1855e:	fa27 f908 	lsr.w	r9, r7, r8
   18562:	ea45 0509 	orr.w	r5, r5, r9
   18566:	4087      	lsls	r7, r0
   18568:	ea23 0707 	bic.w	r7, r3, r7
   1856c:	ea2e 0505 	bic.w	r5, lr, r5
   18570:	433d      	orrs	r5, r7
   18572:	d15d      	bne.n	18630 <pow+0x3e0>
   18574:	9d01      	ldr	r5, [sp, #4]
   18576:	40c3      	lsrs	r3, r0
   18578:	fa0e f808 	lsl.w	r8, lr, r8
   1857c:	ea43 0308 	orr.w	r3, r3, r8
   18580:	fa2e fe05 	lsr.w	lr, lr, r5
   18584:	ea43 030e 	orr.w	r3, r3, lr
   18588:	f003 0301 	and.w	r3, r3, #1
   1858c:	0498      	lsls	r0, r3, #18
   1858e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   18592:	f3cc 050a 	ubfx	r5, ip, #0, #11
   18596:	e75e      	b.n	18456 <pow+0x206>
   18598:	2500      	movs	r5, #0
   1859a:	e6ee      	b.n	1837a <pow+0x12a>
   1859c:	4288      	cmp	r0, r1
   1859e:	4193      	sbcs	r3, r2
   185a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   185a4:	bf34      	ite	cc
   185a6:	ee31 0b00 	vaddcc.f64	d0, d1, d0
   185aa:	ee30 0b41 	vsubcs.f64	d0, d0, d1
   185ae:	e72a      	b.n	18406 <pow+0x1b6>
   185b0:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
   185b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   185b8:	ee35 5b46 	vsub.f64	d5, d5, d6
   185bc:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
   185c0:	ee35 5b07 	vadd.f64	d5, d5, d7
   185c4:	bf58      	it	pl
   185c6:	eeb0 4b43 	vmovpl.f64	d4, d3
   185ca:	ee36 3b04 	vadd.f64	d3, d6, d4
   185ce:	ee34 7b43 	vsub.f64	d7, d4, d3
   185d2:	ee37 7b06 	vadd.f64	d7, d7, d6
   185d6:	ee37 7b05 	vadd.f64	d7, d7, d5
   185da:	ee37 7b03 	vadd.f64	d7, d7, d3
   185de:	ee37 6b44 	vsub.f64	d6, d7, d4
   185e2:	eeb5 6b40 	vcmp.f64	d6, #0.0
   185e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   185ea:	d104      	bne.n	185f6 <pow+0x3a6>
   185ec:	462a      	mov	r2, r5
   185ee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   185f2:	ec43 2b16 	vmov	d6, r2, r3
   185f6:	ed9f 5b06 	vldr	d5, [pc, #24]	; 18610 <pow+0x3c0>
   185fa:	ed8d 5b04 	vstr	d5, [sp, #16]
   185fe:	ed9d 7b04 	vldr	d7, [sp, #16]
   18602:	ee27 7b05 	vmul.f64	d7, d7, d5
   18606:	ed8d 7b06 	vstr	d7, [sp, #24]
   1860a:	e76f      	b.n	184ec <pow+0x29c>
   1860c:	f3af 8000 	nop.w
   18610:	00000000 	.word	0x00000000
   18614:	00100000 	.word	0x00100000
   18618:	00000000 	.word	0x00000000
   1861c:	43300000 	.word	0x43300000
   18620:	c0196aab 	.word	0xc0196aab
   18624:	20000280 	.word	0x20000280
   18628:	20001408 	.word	0x20001408
   1862c:	3ff00000 	.word	0x3ff00000
   18630:	ec4b ab10 	vmov	d0, sl, fp
   18634:	b009      	add	sp, #36	; 0x24
   18636:	ecbd 8b0a 	vpop	{d8-d12}
   1863a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1863e:	f000 bcc3 	b.w	18fc8 <__math_invalid>
   18642:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   18646:	ee38 0b00 	vadd.f64	d0, d8, d0
   1864a:	2800      	cmp	r0, #0
   1864c:	f43f aedb 	beq.w	18406 <pow+0x1b6>
   18650:	eeb1 0b40 	vneg.f64	d0, d0
   18654:	e6d7      	b.n	18406 <pow+0x1b6>
   18656:	1849      	adds	r1, r1, r1
   18658:	4b59      	ldr	r3, [pc, #356]	; (187c0 <pow+0x570>)
   1865a:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
   1865e:	f04f 0000 	mov.w	r0, #0
   18662:	4152      	adcs	r2, r2
   18664:	4288      	cmp	r0, r1
   18666:	4193      	sbcs	r3, r2
   18668:	d35d      	bcc.n	18726 <pow+0x4d6>
   1866a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1866e:	e6ca      	b.n	18406 <pow+0x1b6>
   18670:	ea50 0409 	orrs.w	r4, r0, r9
   18674:	d0ef      	beq.n	18656 <pow+0x406>
   18676:	4c53      	ldr	r4, [pc, #332]	; (187c4 <pow+0x574>)
   18678:	2500      	movs	r5, #0
   1867a:	42a2      	cmp	r2, r4
   1867c:	bf08      	it	eq
   1867e:	42a9      	cmpeq	r1, r5
   18680:	d047      	beq.n	18712 <pow+0x4c2>
   18682:	1849      	adds	r1, r1, r1
   18684:	4b50      	ldr	r3, [pc, #320]	; (187c8 <pow+0x578>)
   18686:	4152      	adcs	r2, r2
   18688:	428d      	cmp	r5, r1
   1868a:	eb73 0402 	sbcs.w	r4, r3, r2
   1868e:	d34a      	bcc.n	18726 <pow+0x4d6>
   18690:	4599      	cmp	r9, r3
   18692:	bf08      	it	eq
   18694:	42a8      	cmpeq	r0, r5
   18696:	d146      	bne.n	18726 <pow+0x4d6>
   18698:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1869c:	429a      	cmp	r2, r3
   1869e:	bf08      	it	eq
   186a0:	42a9      	cmpeq	r1, r5
   186a2:	d0e2      	beq.n	1866a <pow+0x41a>
   186a4:	429a      	cmp	r2, r3
   186a6:	ea6f 0e0e 	mvn.w	lr, lr
   186aa:	bf34      	ite	cc
   186ac:	2200      	movcc	r2, #0
   186ae:	2201      	movcs	r2, #1
   186b0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   186b4:	4572      	cmp	r2, lr
   186b6:	d077      	beq.n	187a8 <pow+0x558>
   186b8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 187b0 <pow+0x560>
   186bc:	e6a3      	b.n	18406 <pow+0x1b6>
   186be:	ec4b ab17 	vmov	d7, sl, fp
   186c2:	2a00      	cmp	r2, #0
   186c4:	ee27 0b07 	vmul.f64	d0, d7, d7
   186c8:	db34      	blt.n	18734 <pow+0x4e4>
   186ca:	2200      	movs	r2, #0
   186cc:	ea50 0909 	orrs.w	r9, r0, r9
   186d0:	d15d      	bne.n	1878e <pow+0x53e>
   186d2:	f1be 0f00 	cmp.w	lr, #0
   186d6:	f6bf ae96 	bge.w	18406 <pow+0x1b6>
   186da:	4610      	mov	r0, r2
   186dc:	b009      	add	sp, #36	; 0x24
   186de:	ecbd 8b0a 	vpop	{d8-d12}
   186e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186e6:	f000 bc57 	b.w	18f98 <__math_divzero>
   186ea:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
   186ee:	ed9f 6b32 	vldr	d6, [pc, #200]	; 187b8 <pow+0x568>
   186f2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
   186f6:	4610      	mov	r0, r2
   186f8:	ec41 0b10 	vmov	d0, r0, r1
   186fc:	eea7 0b00 	vfma.f64	d0, d7, d0
   18700:	ee20 0b06 	vmul.f64	d0, d0, d6
   18704:	b009      	add	sp, #36	; 0x24
   18706:	ecbd 8b0a 	vpop	{d8-d12}
   1870a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1870e:	f000 bc71 	b.w	18ff4 <__math_check_oflow>
   18712:	18db      	adds	r3, r3, r3
   18714:	4a2a      	ldr	r2, [pc, #168]	; (187c0 <pow+0x570>)
   18716:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
   1871a:	eb4e 0e0e 	adc.w	lr, lr, lr
   1871e:	429d      	cmp	r5, r3
   18720:	eb72 020e 	sbcs.w	r2, r2, lr
   18724:	d2a1      	bcs.n	1866a <pow+0x41a>
   18726:	ec4b ab17 	vmov	d7, sl, fp
   1872a:	ee37 0b01 	vadd.f64	d0, d7, d1
   1872e:	e66a      	b.n	18406 <pow+0x1b6>
   18730:	2000      	movs	r0, #0
   18732:	e72c      	b.n	1858e <pow+0x33e>
   18734:	f3c4 020a 	ubfx	r2, r4, #0, #11
   18738:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
   1873c:	2934      	cmp	r1, #52	; 0x34
   1873e:	d8c4      	bhi.n	186ca <pow+0x47a>
   18740:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
   18744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18748:	f1a2 051d 	sub.w	r5, r2, #29
   1874c:	3203      	adds	r2, #3
   1874e:	fa01 f705 	lsl.w	r7, r1, r5
   18752:	fa01 f402 	lsl.w	r4, r1, r2
   18756:	f1c2 0620 	rsb	r6, r2, #32
   1875a:	433c      	orrs	r4, r7
   1875c:	fa21 f706 	lsr.w	r7, r1, r6
   18760:	433c      	orrs	r4, r7
   18762:	4091      	lsls	r1, r2
   18764:	ea23 0101 	bic.w	r1, r3, r1
   18768:	ea2e 0404 	bic.w	r4, lr, r4
   1876c:	4321      	orrs	r1, r4
   1876e:	d1ac      	bne.n	186ca <pow+0x47a>
   18770:	fa23 f202 	lsr.w	r2, r3, r2
   18774:	fa0e f606 	lsl.w	r6, lr, r6
   18778:	4332      	orrs	r2, r6
   1877a:	fa2e f505 	lsr.w	r5, lr, r5
   1877e:	432a      	orrs	r2, r5
   18780:	f012 0201 	ands.w	r2, r2, #1
   18784:	d0a2      	beq.n	186cc <pow+0x47c>
   18786:	eeb1 0b40 	vneg.f64	d0, d0
   1878a:	2201      	movs	r2, #1
   1878c:	e79e      	b.n	186cc <pow+0x47c>
   1878e:	f1be 0f00 	cmp.w	lr, #0
   18792:	f6bf ae38 	bge.w	18406 <pow+0x1b6>
   18796:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1879a:	ee86 7b00 	vdiv.f64	d7, d6, d0
   1879e:	ed8d 7b02 	vstr	d7, [sp, #8]
   187a2:	ed9d 0b02 	vldr	d0, [sp, #8]
   187a6:	e62e      	b.n	18406 <pow+0x1b6>
   187a8:	ee21 0b01 	vmul.f64	d0, d1, d1
   187ac:	e62b      	b.n	18406 <pow+0x1b6>
   187ae:	bf00      	nop
	...
   187bc:	7f000000 	.word	0x7f000000
   187c0:	fff00000 	.word	0xfff00000
   187c4:	3ff00000 	.word	0x3ff00000
   187c8:	ffe00000 	.word	0xffe00000
   187cc:	00000000 	.word	0x00000000

000187d0 <sinf>:
   187d0:	b530      	push	{r4, r5, lr}
   187d2:	ee10 4a10 	vmov	r4, s0
   187d6:	f3c4 530a 	ubfx	r3, r4, #20, #11
   187da:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
   187de:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
   187e2:	b083      	sub	sp, #12
   187e4:	d21b      	bcs.n	1881e <sinf+0x4e>
   187e6:	ee26 5b06 	vmul.f64	d5, d6, d6
   187ea:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
   187ee:	d36e      	bcc.n	188ce <sinf+0xfe>
   187f0:	ee26 2b05 	vmul.f64	d2, d6, d5
   187f4:	ee25 1b02 	vmul.f64	d1, d5, d2
   187f8:	4b73      	ldr	r3, [pc, #460]	; (189c8 <sinf+0x1f8>)
   187fa:	ed93 3b1a 	vldr	d3, [r3, #104]	; 0x68
   187fe:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
   18802:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
   18806:	eea5 7b03 	vfma.f64	d7, d5, d3
   1880a:	eea2 6b04 	vfma.f64	d6, d2, d4
   1880e:	eeb0 0b46 	vmov.f64	d0, d6
   18812:	eea7 0b01 	vfma.f64	d0, d7, d1
   18816:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1881a:	b003      	add	sp, #12
   1881c:	bd30      	pop	{r4, r5, pc}
   1881e:	f240 422e 	movw	r2, #1070	; 0x42e
   18822:	4293      	cmp	r3, r2
   18824:	d85e      	bhi.n	188e4 <sinf+0x114>
   18826:	4968      	ldr	r1, [pc, #416]	; (189c8 <sinf+0x1f8>)
   18828:	ed91 7b08 	vldr	d7, [r1, #32]
   1882c:	ee26 7b07 	vmul.f64	d7, d6, d7
   18830:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   18834:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
   18838:	ee17 3a90 	vmov	r3, s15
   1883c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
   18840:	161b      	asrs	r3, r3, #24
   18842:	f013 0f02 	tst.w	r3, #2
   18846:	ee07 3a90 	vmov	s15, r3
   1884a:	f101 0270 	add.w	r2, r1, #112	; 0x70
   1884e:	bf08      	it	eq
   18850:	460a      	moveq	r2, r1
   18852:	07d8      	lsls	r0, r3, #31
   18854:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   18858:	eea7 6b45 	vfms.f64	d6, d7, d5
   1885c:	ee26 7b06 	vmul.f64	d7, d6, d6
   18860:	d41b      	bmi.n	1889a <sinf+0xca>
   18862:	f003 0303 	and.w	r3, r3, #3
   18866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1886a:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
   1886e:	ed91 2b00 	vldr	d2, [r1]
   18872:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
   18876:	ee26 6b02 	vmul.f64	d6, d6, d2
   1887a:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
   1887e:	eea7 5b04 	vfma.f64	d5, d7, d4
   18882:	ee26 4b07 	vmul.f64	d4, d6, d7
   18886:	ee27 7b04 	vmul.f64	d7, d7, d4
   1888a:	eea4 6b03 	vfma.f64	d6, d4, d3
   1888e:	eea5 6b07 	vfma.f64	d6, d5, d7
   18892:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
   18896:	b003      	add	sp, #12
   18898:	bd30      	pop	{r4, r5, pc}
   1889a:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
   1889e:	ee27 5b07 	vmul.f64	d5, d7, d7
   188a2:	ed92 6b12 	vldr	d6, [r2, #72]	; 0x48
   188a6:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
   188aa:	eea7 6b02 	vfma.f64	d6, d7, d2
   188ae:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
   188b2:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
   188b6:	eea7 0b03 	vfma.f64	d0, d7, d3
   188ba:	ee27 7b05 	vmul.f64	d7, d7, d5
   188be:	eea5 0b04 	vfma.f64	d0, d5, d4
   188c2:	eea6 0b07 	vfma.f64	d0, d6, d7
   188c6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   188ca:	b003      	add	sp, #12
   188cc:	bd30      	pop	{r4, r5, pc}
   188ce:	0d22      	lsrs	r2, r4, #20
   188d0:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
   188d4:	d1df      	bne.n	18896 <sinf+0xc6>
   188d6:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
   188da:	ee00 4a10 	vmov	s0, r4
   188de:	ed8d 5a01 	vstr	s10, [sp, #4]
   188e2:	e7d8      	b.n	18896 <sinf+0xc6>
   188e4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
   188e8:	d24b      	bcs.n	18982 <sinf+0x1b2>
   188ea:	4b38      	ldr	r3, [pc, #224]	; (189cc <sinf+0x1fc>)
   188ec:	f3c4 6283 	ubfx	r2, r4, #26, #4
   188f0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   188f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   188f8:	6905      	ldr	r5, [r0, #16]
   188fa:	f3c4 0316 	ubfx	r3, r4, #0, #23
   188fe:	f3c4 51c2 	ubfx	r1, r4, #23, #3
   18902:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   18906:	408b      	lsls	r3, r1
   18908:	6a01      	ldr	r1, [r0, #32]
   1890a:	fb03 f202 	mul.w	r2, r3, r2
   1890e:	fba3 1001 	umull	r1, r0, r3, r1
   18912:	fbe3 0205 	umlal	r0, r2, r3, r5
   18916:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
   1891a:	0f8d      	lsrs	r5, r1, #30
   1891c:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
   18920:	1a51      	subs	r1, r2, r1
   18922:	f000 fd0d 	bl	19340 <__aeabi_l2d>
   18926:	4b2a      	ldr	r3, [pc, #168]	; (189d0 <sinf+0x200>)
   18928:	ed9f 7b25 	vldr	d7, [pc, #148]	; 189c0 <sinf+0x1f0>
   1892c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
   18930:	ec41 0b16 	vmov	d6, r0, r1
   18934:	f014 0f02 	tst.w	r4, #2
   18938:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
   1893c:	bf08      	it	eq
   1893e:	4613      	moveq	r3, r2
   18940:	07e9      	lsls	r1, r5, #31
   18942:	ee26 7b07 	vmul.f64	d7, d6, d7
   18946:	ee27 6b07 	vmul.f64	d6, d7, d7
   1894a:	d41f      	bmi.n	1898c <sinf+0x1bc>
   1894c:	f004 0403 	and.w	r4, r4, #3
   18950:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   18954:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
   18958:	ed92 2b00 	vldr	d2, [r2]
   1895c:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
   18960:	ee27 7b02 	vmul.f64	d7, d7, d2
   18964:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
   18968:	eea6 5b04 	vfma.f64	d5, d6, d4
   1896c:	ee27 4b06 	vmul.f64	d4, d7, d6
   18970:	ee26 6b04 	vmul.f64	d6, d6, d4
   18974:	eea4 7b03 	vfma.f64	d7, d4, d3
   18978:	eea5 7b06 	vfma.f64	d7, d5, d6
   1897c:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
   18980:	e789      	b.n	18896 <sinf+0xc6>
   18982:	b003      	add	sp, #12
   18984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   18988:	f000 b940 	b.w	18c0c <__math_invalidf>
   1898c:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   18990:	ee26 5b06 	vmul.f64	d5, d6, d6
   18994:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
   18998:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   1899c:	eea6 7b02 	vfma.f64	d7, d6, d2
   189a0:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   189a4:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   189a8:	eea6 0b03 	vfma.f64	d0, d6, d3
   189ac:	ee26 6b05 	vmul.f64	d6, d6, d5
   189b0:	eea5 0b04 	vfma.f64	d0, d5, d4
   189b4:	eea7 0b06 	vfma.f64	d0, d7, d6
   189b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   189bc:	e76b      	b.n	18896 <sinf+0xc6>
   189be:	bf00      	nop
   189c0:	54442d18 	.word	0x54442d18
   189c4:	3c1921fb 	.word	0x3c1921fb
   189c8:	20001328 	.word	0x20001328
   189cc:	200012c8 	.word	0x200012c8
   189d0:	20001398 	.word	0x20001398
   189d4:	00000000 	.word	0x00000000

000189d8 <cosf>:
   189d8:	b538      	push	{r3, r4, r5, lr}
   189da:	ee10 4a10 	vmov	r4, s0
   189de:	f3c4 530a 	ubfx	r3, r4, #20, #11
   189e2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
   189e6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
   189ea:	d21e      	bcs.n	18a2a <cosf+0x52>
   189ec:	ee27 7b07 	vmul.f64	d7, d7, d7
   189f0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
   189f4:	d36f      	bcc.n	18ad6 <cosf+0xfe>
   189f6:	ee27 1b07 	vmul.f64	d1, d7, d7
   189fa:	4b63      	ldr	r3, [pc, #396]	; (18b88 <cosf+0x1b0>)
   189fc:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   18a00:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
   18a04:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   18a08:	eea7 5b02 	vfma.f64	d5, d7, d2
   18a0c:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   18a10:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   18a14:	eea7 0b03 	vfma.f64	d0, d7, d3
   18a18:	ee27 7b01 	vmul.f64	d7, d7, d1
   18a1c:	eea1 0b04 	vfma.f64	d0, d1, d4
   18a20:	eea5 0b07 	vfma.f64	d0, d5, d7
   18a24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   18a28:	bd38      	pop	{r3, r4, r5, pc}
   18a2a:	f240 422e 	movw	r2, #1070	; 0x42e
   18a2e:	4293      	cmp	r3, r2
   18a30:	d854      	bhi.n	18adc <cosf+0x104>
   18a32:	4955      	ldr	r1, [pc, #340]	; (18b88 <cosf+0x1b0>)
   18a34:	ed91 6b08 	vldr	d6, [r1, #32]
   18a38:	ee27 6b06 	vmul.f64	d6, d7, d6
   18a3c:	eefd 6bc6 	vcvt.s32.f64	s13, d6
   18a40:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
   18a44:	ee16 3a90 	vmov	r3, s13
   18a48:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
   18a4c:	161b      	asrs	r3, r3, #24
   18a4e:	f013 0f02 	tst.w	r3, #2
   18a52:	ee06 3a90 	vmov	s13, r3
   18a56:	f101 0270 	add.w	r2, r1, #112	; 0x70
   18a5a:	bf08      	it	eq
   18a5c:	460a      	moveq	r2, r1
   18a5e:	07d8      	lsls	r0, r3, #31
   18a60:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   18a64:	eea6 7b45 	vfms.f64	d7, d6, d5
   18a68:	ee27 6b07 	vmul.f64	d6, d7, d7
   18a6c:	d51a      	bpl.n	18aa4 <cosf+0xcc>
   18a6e:	f003 0303 	and.w	r3, r3, #3
   18a72:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   18a76:	ed91 2b00 	vldr	d2, [r1]
   18a7a:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
   18a7e:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
   18a82:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
   18a86:	eea6 5b04 	vfma.f64	d5, d6, d4
   18a8a:	ee27 7b02 	vmul.f64	d7, d7, d2
   18a8e:	ee27 4b06 	vmul.f64	d4, d7, d6
   18a92:	ee26 6b04 	vmul.f64	d6, d6, d4
   18a96:	eea4 7b03 	vfma.f64	d7, d4, d3
   18a9a:	eea5 7b06 	vfma.f64	d7, d5, d6
   18a9e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
   18aa2:	bd38      	pop	{r3, r4, r5, pc}
   18aa4:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
   18aa8:	ed92 7b12 	vldr	d7, [r2, #72]	; 0x48
   18aac:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
   18ab0:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
   18ab4:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
   18ab8:	ee26 5b06 	vmul.f64	d5, d6, d6
   18abc:	eea6 7b02 	vfma.f64	d7, d6, d2
   18ac0:	eea6 0b03 	vfma.f64	d0, d6, d3
   18ac4:	ee26 6b05 	vmul.f64	d6, d6, d5
   18ac8:	eea5 0b04 	vfma.f64	d0, d5, d4
   18acc:	eea7 0b06 	vfma.f64	d0, d7, d6
   18ad0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   18ad4:	bd38      	pop	{r3, r4, r5, pc}
   18ad6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   18ada:	bd38      	pop	{r3, r4, r5, pc}
   18adc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
   18ae0:	d23d      	bcs.n	18b5e <cosf+0x186>
   18ae2:	4b2a      	ldr	r3, [pc, #168]	; (18b8c <cosf+0x1b4>)
   18ae4:	f3c4 6283 	ubfx	r2, r4, #26, #4
   18ae8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   18aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   18af0:	6905      	ldr	r5, [r0, #16]
   18af2:	f3c4 0316 	ubfx	r3, r4, #0, #23
   18af6:	f3c4 51c2 	ubfx	r1, r4, #23, #3
   18afa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   18afe:	408b      	lsls	r3, r1
   18b00:	6a01      	ldr	r1, [r0, #32]
   18b02:	fb03 f202 	mul.w	r2, r3, r2
   18b06:	fba3 1001 	umull	r1, r0, r3, r1
   18b0a:	fbe3 0205 	umlal	r0, r2, r3, r5
   18b0e:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
   18b12:	0f8d      	lsrs	r5, r1, #30
   18b14:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
   18b18:	1a51      	subs	r1, r2, r1
   18b1a:	f000 fc11 	bl	19340 <__aeabi_l2d>
   18b1e:	4b1c      	ldr	r3, [pc, #112]	; (18b90 <cosf+0x1b8>)
   18b20:	ed9f 7b17 	vldr	d7, [pc, #92]	; 18b80 <cosf+0x1a8>
   18b24:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
   18b28:	ec41 0b16 	vmov	d6, r0, r1
   18b2c:	f014 0f02 	tst.w	r4, #2
   18b30:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
   18b34:	bf08      	it	eq
   18b36:	4613      	moveq	r3, r2
   18b38:	07e9      	lsls	r1, r5, #31
   18b3a:	ee26 7b07 	vmul.f64	d7, d6, d7
   18b3e:	ee27 6b07 	vmul.f64	d6, d7, d7
   18b42:	d510      	bpl.n	18b66 <cosf+0x18e>
   18b44:	f004 0403 	and.w	r4, r4, #3
   18b48:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   18b4c:	ed92 2b00 	vldr	d2, [r2]
   18b50:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
   18b54:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
   18b58:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
   18b5c:	e793      	b.n	18a86 <cosf+0xae>
   18b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18b62:	f000 b853 	b.w	18c0c <__math_invalidf>
   18b66:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   18b6a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
   18b6e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   18b72:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   18b76:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   18b7a:	e79d      	b.n	18ab8 <cosf+0xe0>
   18b7c:	f3af 8000 	nop.w
   18b80:	54442d18 	.word	0x54442d18
   18b84:	3c1921fb 	.word	0x3c1921fb
   18b88:	20001328 	.word	0x20001328
   18b8c:	200012c8 	.word	0x200012c8
   18b90:	20001398 	.word	0x20001398
   18b94:	b510      	push	{r4, lr}
   18b96:	b082      	sub	sp, #8
   18b98:	ed8d 0a01 	vstr	s0, [sp, #4]
   18b9c:	4604      	mov	r4, r0
   18b9e:	f004 f91d 	bl	1cddc <__errno>
   18ba2:	ed9d 0a01 	vldr	s0, [sp, #4]
   18ba6:	6004      	str	r4, [r0, #0]
   18ba8:	b002      	add	sp, #8
   18baa:	bd10      	pop	{r4, pc}
   18bac:	b128      	cbz	r0, 18bba <cosf+0x1e2>
   18bae:	eef1 7a40 	vneg.f32	s15, s0
   18bb2:	ee27 0a80 	vmul.f32	s0, s15, s0
   18bb6:	2022      	movs	r0, #34	; 0x22
   18bb8:	e7ec      	b.n	18b94 <cosf+0x1bc>
   18bba:	eef0 7a40 	vmov.f32	s15, s0
   18bbe:	ee27 0a80 	vmul.f32	s0, s15, s0
   18bc2:	2022      	movs	r0, #34	; 0x22
   18bc4:	e7e6      	b.n	18b94 <cosf+0x1bc>
   18bc6:	bf00      	nop

00018bc8 <__math_uflowf>:
   18bc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18bd0 <__math_uflowf+0x8>
   18bcc:	e7ee      	b.n	18bac <cosf+0x1d4>
   18bce:	bf00      	nop
   18bd0:	10000000 	.word	0x10000000

00018bd4 <__math_may_uflowf>:
   18bd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18bdc <__math_may_uflowf+0x8>
   18bd8:	e7e8      	b.n	18bac <cosf+0x1d4>
   18bda:	bf00      	nop
   18bdc:	1a200000 	.word	0x1a200000

00018be0 <__math_oflowf>:
   18be0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18be8 <__math_oflowf+0x8>
   18be4:	e7e2      	b.n	18bac <cosf+0x1d4>
   18be6:	bf00      	nop
   18be8:	70000000 	.word	0x70000000

00018bec <__math_divzerof>:
   18bec:	ed9f 0a06 	vldr	s0, [pc, #24]	; 18c08 <__math_divzerof+0x1c>
   18bf0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   18bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   18bf8:	2800      	cmp	r0, #0
   18bfa:	f04f 0022 	mov.w	r0, #34	; 0x22
   18bfe:	fe47 7a27 	vseleq.f32	s15, s14, s15
   18c02:	ee87 0a80 	vdiv.f32	s0, s15, s0
   18c06:	e7c5      	b.n	18b94 <cosf+0x1bc>
   18c08:	00000000 	.word	0x00000000

00018c0c <__math_invalidf>:
   18c0c:	ee70 7a40 	vsub.f32	s15, s0, s0
   18c10:	eeb4 0a40 	vcmp.f32	s0, s0
   18c14:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   18c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18c1c:	eeb0 0a47 	vmov.f32	s0, s14
   18c20:	d601      	bvs.n	18c26 <__math_invalidf+0x1a>
   18c22:	2021      	movs	r0, #33	; 0x21
   18c24:	e7b6      	b.n	18b94 <cosf+0x1bc>
   18c26:	4770      	bx	lr

00018c28 <__ieee754_sqrtf>:
   18c28:	eeb1 0ac0 	vsqrt.f32	s0, s0
   18c2c:	4770      	bx	lr
   18c2e:	bf00      	nop

00018c30 <__ieee754_atan2f>:
   18c30:	b510      	push	{r4, lr}
   18c32:	b082      	sub	sp, #8
   18c34:	edcd 0a01 	vstr	s1, [sp, #4]
   18c38:	9b01      	ldr	r3, [sp, #4]
   18c3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   18c3e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   18c42:	eef0 7a40 	vmov.f32	s15, s0
   18c46:	dc30      	bgt.n	18caa <__ieee754_atan2f+0x7a>
   18c48:	ee10 0a10 	vmov	r0, s0
   18c4c:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   18c50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   18c54:	dc29      	bgt.n	18caa <__ieee754_atan2f+0x7a>
   18c56:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   18c5a:	d040      	beq.n	18cde <__ieee754_atan2f+0xae>
   18c5c:	179c      	asrs	r4, r3, #30
   18c5e:	f004 0402 	and.w	r4, r4, #2
   18c62:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   18c66:	b331      	cbz	r1, 18cb6 <__ieee754_atan2f+0x86>
   18c68:	b372      	cbz	r2, 18cc8 <__ieee754_atan2f+0x98>
   18c6a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   18c6e:	d03e      	beq.n	18cee <__ieee754_atan2f+0xbe>
   18c70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   18c74:	d028      	beq.n	18cc8 <__ieee754_atan2f+0x98>
   18c76:	1a89      	subs	r1, r1, r2
   18c78:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
   18c7c:	ea4f 52e1 	mov.w	r2, r1, asr #23
   18c80:	da32      	bge.n	18ce8 <__ieee754_atan2f+0xb8>
   18c82:	2b00      	cmp	r3, #0
   18c84:	da40      	bge.n	18d08 <__ieee754_atan2f+0xd8>
   18c86:	323c      	adds	r2, #60	; 0x3c
   18c88:	da3e      	bge.n	18d08 <__ieee754_atan2f+0xd8>
   18c8a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 18d58 <__ieee754_atan2f+0x128>
   18c8e:	2c01      	cmp	r4, #1
   18c90:	d04c      	beq.n	18d2c <__ieee754_atan2f+0xfc>
   18c92:	2c02      	cmp	r4, #2
   18c94:	d041      	beq.n	18d1a <__ieee754_atan2f+0xea>
   18c96:	b164      	cbz	r4, 18cb2 <__ieee754_atan2f+0x82>
   18c98:	ed9f 7a30 	vldr	s14, [pc, #192]	; 18d5c <__ieee754_atan2f+0x12c>
   18c9c:	eddf 7a30 	vldr	s15, [pc, #192]	; 18d60 <__ieee754_atan2f+0x130>
   18ca0:	ee30 0a07 	vadd.f32	s0, s0, s14
   18ca4:	ee30 0a67 	vsub.f32	s0, s0, s15
   18ca8:	e003      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18caa:	ed9d 7a01 	vldr	s14, [sp, #4]
   18cae:	ee37 0a27 	vadd.f32	s0, s14, s15
   18cb2:	b002      	add	sp, #8
   18cb4:	bd10      	pop	{r4, pc}
   18cb6:	2c02      	cmp	r4, #2
   18cb8:	d00e      	beq.n	18cd8 <__ieee754_atan2f+0xa8>
   18cba:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 18d64 <__ieee754_atan2f+0x134>
   18cbe:	2c03      	cmp	r4, #3
   18cc0:	fe07 0a00 	vseleq.f32	s0, s14, s0
   18cc4:	b002      	add	sp, #8
   18cc6:	bd10      	pop	{r4, pc}
   18cc8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 18d68 <__ieee754_atan2f+0x138>
   18ccc:	eddf 7a27 	vldr	s15, [pc, #156]	; 18d6c <__ieee754_atan2f+0x13c>
   18cd0:	2800      	cmp	r0, #0
   18cd2:	fe20 0a27 	vselge.f32	s0, s0, s15
   18cd6:	e7ec      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18cd8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 18d60 <__ieee754_atan2f+0x130>
   18cdc:	e7e9      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18cde:	b002      	add	sp, #8
   18ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18ce4:	f000 b848 	b.w	18d78 <atanf>
   18ce8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 18d68 <__ieee754_atan2f+0x138>
   18cec:	e7cf      	b.n	18c8e <__ieee754_atan2f+0x5e>
   18cee:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   18cf2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   18cf6:	d020      	beq.n	18d3a <__ieee754_atan2f+0x10a>
   18cf8:	2c02      	cmp	r4, #2
   18cfa:	d826      	bhi.n	18d4a <__ieee754_atan2f+0x11a>
   18cfc:	4b1c      	ldr	r3, [pc, #112]	; (18d70 <__ieee754_atan2f+0x140>)
   18cfe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   18d02:	ed93 0a03 	vldr	s0, [r3, #12]
   18d06:	e7d4      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18d08:	ed9d 7a01 	vldr	s14, [sp, #4]
   18d0c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   18d10:	f000 f904 	bl	18f1c <fabsf>
   18d14:	f000 f830 	bl	18d78 <atanf>
   18d18:	e7b9      	b.n	18c8e <__ieee754_atan2f+0x5e>
   18d1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 18d5c <__ieee754_atan2f+0x12c>
   18d1e:	eddf 7a10 	vldr	s15, [pc, #64]	; 18d60 <__ieee754_atan2f+0x130>
   18d22:	ee30 0a07 	vadd.f32	s0, s0, s14
   18d26:	ee37 0ac0 	vsub.f32	s0, s15, s0
   18d2a:	e7c2      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18d2c:	ee10 3a10 	vmov	r3, s0
   18d30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   18d34:	ee00 3a10 	vmov	s0, r3
   18d38:	e7bb      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18d3a:	2c02      	cmp	r4, #2
   18d3c:	d808      	bhi.n	18d50 <__ieee754_atan2f+0x120>
   18d3e:	4b0c      	ldr	r3, [pc, #48]	; (18d70 <__ieee754_atan2f+0x140>)
   18d40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   18d44:	ed93 0a00 	vldr	s0, [r3]
   18d48:	e7b3      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18d4a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 18d58 <__ieee754_atan2f+0x128>
   18d4e:	e7b0      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18d50:	ed9f 0a08 	vldr	s0, [pc, #32]	; 18d74 <__ieee754_atan2f+0x144>
   18d54:	e7ad      	b.n	18cb2 <__ieee754_atan2f+0x82>
   18d56:	bf00      	nop
   18d58:	00000000 	.word	0x00000000
   18d5c:	33bbbd2e 	.word	0x33bbbd2e
   18d60:	40490fdb 	.word	0x40490fdb
   18d64:	c0490fdb 	.word	0xc0490fdb
   18d68:	3fc90fdb 	.word	0x3fc90fdb
   18d6c:	bfc90fdb 	.word	0xbfc90fdb
   18d70:	20002198 	.word	0x20002198
   18d74:	3f490fdb 	.word	0x3f490fdb

00018d78 <atanf>:
   18d78:	b538      	push	{r3, r4, r5, lr}
   18d7a:	ee10 5a10 	vmov	r5, s0
   18d7e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   18d82:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   18d86:	eef0 7a40 	vmov.f32	s15, s0
   18d8a:	db0a      	blt.n	18da2 <atanf+0x2a>
   18d8c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   18d90:	dc55      	bgt.n	18e3e <atanf+0xc6>
   18d92:	eddf 7a50 	vldr	s15, [pc, #320]	; 18ed4 <atanf+0x15c>
   18d96:	ed9f 7a50 	vldr	s14, [pc, #320]	; 18ed8 <atanf+0x160>
   18d9a:	2d00      	cmp	r5, #0
   18d9c:	fe37 0a87 	vselgt.f32	s0, s15, s14
   18da0:	bd38      	pop	{r3, r4, r5, pc}
   18da2:	4b4e      	ldr	r3, [pc, #312]	; (18edc <atanf+0x164>)
   18da4:	429c      	cmp	r4, r3
   18da6:	dc59      	bgt.n	18e5c <atanf+0xe4>
   18da8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   18dac:	db4a      	blt.n	18e44 <atanf+0xcc>
   18dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18db2:	ee27 6aa7 	vmul.f32	s12, s15, s15
   18db6:	eddf 6a4a 	vldr	s13, [pc, #296]	; 18ee0 <atanf+0x168>
   18dba:	eddf 5a4a 	vldr	s11, [pc, #296]	; 18ee4 <atanf+0x16c>
   18dbe:	eddf 4a4a 	vldr	s9, [pc, #296]	; 18ee8 <atanf+0x170>
   18dc2:	ed9f 5a4a 	vldr	s10, [pc, #296]	; 18eec <atanf+0x174>
   18dc6:	ed9f 4a4a 	vldr	s8, [pc, #296]	; 18ef0 <atanf+0x178>
   18dca:	ee26 7a06 	vmul.f32	s14, s12, s12
   18dce:	1c53      	adds	r3, r2, #1
   18dd0:	eee7 5a26 	vfma.f32	s11, s14, s13
   18dd4:	eddf 6a47 	vldr	s13, [pc, #284]	; 18ef4 <atanf+0x17c>
   18dd8:	eea5 5a87 	vfma.f32	s10, s11, s14
   18ddc:	eee7 6a24 	vfma.f32	s13, s14, s9
   18de0:	eddf 5a45 	vldr	s11, [pc, #276]	; 18ef8 <atanf+0x180>
   18de4:	eddf 4a45 	vldr	s9, [pc, #276]	; 18efc <atanf+0x184>
   18de8:	eee6 5a87 	vfma.f32	s11, s13, s14
   18dec:	eea5 4a07 	vfma.f32	s8, s10, s14
   18df0:	ed9f 5a43 	vldr	s10, [pc, #268]	; 18f00 <atanf+0x188>
   18df4:	eddf 6a43 	vldr	s13, [pc, #268]	; 18f04 <atanf+0x18c>
   18df8:	eea5 5a87 	vfma.f32	s10, s11, s14
   18dfc:	eee4 4a07 	vfma.f32	s9, s8, s14
   18e00:	eddf 5a41 	vldr	s11, [pc, #260]	; 18f08 <atanf+0x190>
   18e04:	eee4 6a87 	vfma.f32	s13, s9, s14
   18e08:	eee5 5a07 	vfma.f32	s11, s10, s14
   18e0c:	ee66 6a86 	vmul.f32	s13, s13, s12
   18e10:	ee65 5a87 	vmul.f32	s11, s11, s14
   18e14:	d037      	beq.n	18e86 <atanf+0x10e>
   18e16:	4b3d      	ldr	r3, [pc, #244]	; (18f0c <atanf+0x194>)
   18e18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18e1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
   18e20:	ed93 7a00 	vldr	s14, [r3]
   18e24:	ed93 6a04 	vldr	s12, [r3, #16]
   18e28:	ee96 7aa7 	vfnms.f32	s14, s13, s15
   18e2c:	2d00      	cmp	r5, #0
   18e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
   18e32:	ee36 0a67 	vsub.f32	s0, s12, s15
   18e36:	dab3      	bge.n	18da0 <atanf+0x28>
   18e38:	eeb1 0a40 	vneg.f32	s0, s0
   18e3c:	bd38      	pop	{r3, r4, r5, pc}
   18e3e:	ee30 0a00 	vadd.f32	s0, s0, s0
   18e42:	bd38      	pop	{r3, r4, r5, pc}
   18e44:	ed9f 7a32 	vldr	s14, [pc, #200]	; 18f10 <atanf+0x198>
   18e48:	ee30 7a07 	vadd.f32	s14, s0, s14
   18e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   18e50:	eeb4 7ae6 	vcmpe.f32	s14, s13
   18e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18e58:	dda9      	ble.n	18dae <atanf+0x36>
   18e5a:	bd38      	pop	{r3, r4, r5, pc}
   18e5c:	f000 f85e 	bl	18f1c <fabsf>
   18e60:	4b2c      	ldr	r3, [pc, #176]	; (18f14 <atanf+0x19c>)
   18e62:	429c      	cmp	r4, r3
   18e64:	dc16      	bgt.n	18e94 <atanf+0x11c>
   18e66:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   18e6a:	429c      	cmp	r4, r3
   18e6c:	dc27      	bgt.n	18ebe <atanf+0x146>
   18e6e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   18e72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   18e76:	eea0 7a27 	vfma.f32	s14, s0, s15
   18e7a:	2200      	movs	r2, #0
   18e7c:	ee30 0a27 	vadd.f32	s0, s0, s15
   18e80:	eec7 7a00 	vdiv.f32	s15, s14, s0
   18e84:	e795      	b.n	18db2 <atanf+0x3a>
   18e86:	ee76 6aa5 	vadd.f32	s13, s13, s11
   18e8a:	eee6 7ae7 	vfms.f32	s15, s13, s15
   18e8e:	eeb0 0a67 	vmov.f32	s0, s15
   18e92:	bd38      	pop	{r3, r4, r5, pc}
   18e94:	4b20      	ldr	r3, [pc, #128]	; (18f18 <atanf+0x1a0>)
   18e96:	429c      	cmp	r4, r3
   18e98:	dc0b      	bgt.n	18eb2 <atanf+0x13a>
   18e9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   18e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   18ea2:	eea0 7a27 	vfma.f32	s14, s0, s15
   18ea6:	2202      	movs	r2, #2
   18ea8:	ee30 0a67 	vsub.f32	s0, s0, s15
   18eac:	eec0 7a07 	vdiv.f32	s15, s0, s14
   18eb0:	e77f      	b.n	18db2 <atanf+0x3a>
   18eb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   18eb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   18eba:	2203      	movs	r2, #3
   18ebc:	e779      	b.n	18db2 <atanf+0x3a>
   18ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   18ec2:	ee30 7a67 	vsub.f32	s14, s0, s15
   18ec6:	ee30 0a27 	vadd.f32	s0, s0, s15
   18eca:	2201      	movs	r2, #1
   18ecc:	eec7 7a00 	vdiv.f32	s15, s14, s0
   18ed0:	e76f      	b.n	18db2 <atanf+0x3a>
   18ed2:	bf00      	nop
   18ed4:	3fc90fdb 	.word	0x3fc90fdb
   18ed8:	bfc90fdb 	.word	0xbfc90fdb
   18edc:	3edfffff 	.word	0x3edfffff
   18ee0:	3c8569d7 	.word	0x3c8569d7
   18ee4:	3d4bda59 	.word	0x3d4bda59
   18ee8:	bd15a221 	.word	0xbd15a221
   18eec:	3d886b35 	.word	0x3d886b35
   18ef0:	3dba2e6e 	.word	0x3dba2e6e
   18ef4:	bd6ef16b 	.word	0xbd6ef16b
   18ef8:	bd9d8795 	.word	0xbd9d8795
   18efc:	3e124925 	.word	0x3e124925
   18f00:	bde38e38 	.word	0xbde38e38
   18f04:	3eaaaaab 	.word	0x3eaaaaab
   18f08:	be4ccccd 	.word	0xbe4ccccd
   18f0c:	200021b0 	.word	0x200021b0
   18f10:	7149f2ca 	.word	0x7149f2ca
   18f14:	3f97ffff 	.word	0x3f97ffff
   18f18:	401bffff 	.word	0x401bffff

00018f1c <fabsf>:
   18f1c:	ee10 3a10 	vmov	r3, s0
   18f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   18f24:	ee00 3a10 	vmov	s0, r3
   18f28:	4770      	bx	lr
   18f2a:	bf00      	nop
   18f2c:	0000      	movs	r0, r0
   18f2e:	0000      	movs	r0, r0
   18f30:	b510      	push	{r4, lr}
   18f32:	b082      	sub	sp, #8
   18f34:	ed8d 0b00 	vstr	d0, [sp]
   18f38:	4604      	mov	r4, r0
   18f3a:	f003 ff4f 	bl	1cddc <__errno>
   18f3e:	ed9d 0b00 	vldr	d0, [sp]
   18f42:	6004      	str	r4, [r0, #0]
   18f44:	b002      	add	sp, #8
   18f46:	bd10      	pop	{r4, pc}
   18f48:	b082      	sub	sp, #8
   18f4a:	b150      	cbz	r0, 18f62 <fabsf+0x46>
   18f4c:	eeb1 7b40 	vneg.f64	d7, d0
   18f50:	ed8d 7b00 	vstr	d7, [sp]
   18f54:	ed9d 7b00 	vldr	d7, [sp]
   18f58:	2022      	movs	r0, #34	; 0x22
   18f5a:	ee20 0b07 	vmul.f64	d0, d0, d7
   18f5e:	b002      	add	sp, #8
   18f60:	e7e6      	b.n	18f30 <fabsf+0x14>
   18f62:	eeb0 7b40 	vmov.f64	d7, d0
   18f66:	e7f3      	b.n	18f50 <fabsf+0x34>

00018f68 <__math_uflow>:
   18f68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 18f70 <__math_uflow+0x8>
   18f6c:	e7ec      	b.n	18f48 <fabsf+0x2c>
   18f6e:	bf00      	nop
   18f70:	00000000 	.word	0x00000000
   18f74:	10000000 	.word	0x10000000

00018f78 <__math_may_uflow>:
   18f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 18f80 <__math_may_uflow+0x8>
   18f7c:	e7e4      	b.n	18f48 <fabsf+0x2c>
   18f7e:	bf00      	nop
   18f80:	00000000 	.word	0x00000000
   18f84:	1e580000 	.word	0x1e580000

00018f88 <__math_oflow>:
   18f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 18f90 <__math_oflow+0x8>
   18f8c:	e7dc      	b.n	18f48 <fabsf+0x2c>
   18f8e:	bf00      	nop
   18f90:	00000000 	.word	0x00000000
   18f94:	70000000 	.word	0x70000000

00018f98 <__math_divzero>:
   18f98:	b082      	sub	sp, #8
   18f9a:	2800      	cmp	r0, #0
   18f9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   18fa0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
   18fa4:	fe06 7b07 	vseleq.f64	d7, d6, d7
   18fa8:	ed8d 7b00 	vstr	d7, [sp]
   18fac:	ed9d 0b00 	vldr	d0, [sp]
   18fb0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 18fc0 <__math_divzero+0x28>
   18fb4:	2022      	movs	r0, #34	; 0x22
   18fb6:	ee80 0b07 	vdiv.f64	d0, d0, d7
   18fba:	b002      	add	sp, #8
   18fbc:	e7b8      	b.n	18f30 <fabsf+0x14>
   18fbe:	bf00      	nop
	...

00018fc8 <__math_invalid>:
   18fc8:	eeb4 0b40 	vcmp.f64	d0, d0
   18fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18fd0:	ee30 7b40 	vsub.f64	d7, d0, d0
   18fd4:	ee87 6b07 	vdiv.f64	d6, d7, d7
   18fd8:	eeb0 0b46 	vmov.f64	d0, d6
   18fdc:	d601      	bvs.n	18fe2 <__math_invalid+0x1a>
   18fde:	2021      	movs	r0, #33	; 0x21
   18fe0:	e7a6      	b.n	18f30 <fabsf+0x14>
   18fe2:	4770      	bx	lr

00018fe4 <__math_check_uflow>:
   18fe4:	eeb5 0b40 	vcmp.f64	d0, #0.0
   18fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18fec:	d000      	beq.n	18ff0 <__math_check_uflow+0xc>
   18fee:	4770      	bx	lr
   18ff0:	2022      	movs	r0, #34	; 0x22
   18ff2:	e79d      	b.n	18f30 <fabsf+0x14>

00018ff4 <__math_check_oflow>:
   18ff4:	ed9f 6b06 	vldr	d6, [pc, #24]	; 19010 <__math_check_oflow+0x1c>
   18ff8:	eeb0 7bc0 	vabs.f64	d7, d0
   18ffc:	eeb4 7b46 	vcmp.f64	d7, d6
   19000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19004:	dc00      	bgt.n	19008 <__math_check_oflow+0x14>
   19006:	4770      	bx	lr
   19008:	2022      	movs	r0, #34	; 0x22
   1900a:	e791      	b.n	18f30 <fabsf+0x14>
   1900c:	f3af 8000 	nop.w
   19010:	ffffffff 	.word	0xffffffff
   19014:	7fefffff 	.word	0x7fefffff

00019018 <__aeabi_atexit>:
   19018:	4603      	mov	r3, r0
   1901a:	4608      	mov	r0, r1
   1901c:	4619      	mov	r1, r3
   1901e:	f002 b9e5 	b.w	1b3ec <__cxa_atexit>
   19022:	bf00      	nop

00019024 <__aeabi_drsub>:
   19024:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   19028:	e002      	b.n	19030 <__adddf3>
   1902a:	bf00      	nop

0001902c <__aeabi_dsub>:
   1902c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00019030 <__adddf3>:
   19030:	b530      	push	{r4, r5, lr}
   19032:	ea4f 0441 	mov.w	r4, r1, lsl #1
   19036:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1903a:	ea94 0f05 	teq	r4, r5
   1903e:	bf08      	it	eq
   19040:	ea90 0f02 	teqeq	r0, r2
   19044:	bf1f      	itttt	ne
   19046:	ea54 0c00 	orrsne.w	ip, r4, r0
   1904a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1904e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   19052:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19056:	f000 80e2 	beq.w	1921e <__adddf3+0x1ee>
   1905a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1905e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   19062:	bfb8      	it	lt
   19064:	426d      	neglt	r5, r5
   19066:	dd0c      	ble.n	19082 <__adddf3+0x52>
   19068:	442c      	add	r4, r5
   1906a:	ea80 0202 	eor.w	r2, r0, r2
   1906e:	ea81 0303 	eor.w	r3, r1, r3
   19072:	ea82 0000 	eor.w	r0, r2, r0
   19076:	ea83 0101 	eor.w	r1, r3, r1
   1907a:	ea80 0202 	eor.w	r2, r0, r2
   1907e:	ea81 0303 	eor.w	r3, r1, r3
   19082:	2d36      	cmp	r5, #54	; 0x36
   19084:	bf88      	it	hi
   19086:	bd30      	pophi	{r4, r5, pc}
   19088:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1908c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   19090:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   19094:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   19098:	d002      	beq.n	190a0 <__adddf3+0x70>
   1909a:	4240      	negs	r0, r0
   1909c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   190a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   190a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   190a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   190ac:	d002      	beq.n	190b4 <__adddf3+0x84>
   190ae:	4252      	negs	r2, r2
   190b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   190b4:	ea94 0f05 	teq	r4, r5
   190b8:	f000 80a7 	beq.w	1920a <__adddf3+0x1da>
   190bc:	f1a4 0401 	sub.w	r4, r4, #1
   190c0:	f1d5 0e20 	rsbs	lr, r5, #32
   190c4:	db0d      	blt.n	190e2 <__adddf3+0xb2>
   190c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   190ca:	fa22 f205 	lsr.w	r2, r2, r5
   190ce:	1880      	adds	r0, r0, r2
   190d0:	f141 0100 	adc.w	r1, r1, #0
   190d4:	fa03 f20e 	lsl.w	r2, r3, lr
   190d8:	1880      	adds	r0, r0, r2
   190da:	fa43 f305 	asr.w	r3, r3, r5
   190de:	4159      	adcs	r1, r3
   190e0:	e00e      	b.n	19100 <__adddf3+0xd0>
   190e2:	f1a5 0520 	sub.w	r5, r5, #32
   190e6:	f10e 0e20 	add.w	lr, lr, #32
   190ea:	2a01      	cmp	r2, #1
   190ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   190f0:	bf28      	it	cs
   190f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   190f6:	fa43 f305 	asr.w	r3, r3, r5
   190fa:	18c0      	adds	r0, r0, r3
   190fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   19100:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19104:	d507      	bpl.n	19116 <__adddf3+0xe6>
   19106:	f04f 0e00 	mov.w	lr, #0
   1910a:	f1dc 0c00 	rsbs	ip, ip, #0
   1910e:	eb7e 0000 	sbcs.w	r0, lr, r0
   19112:	eb6e 0101 	sbc.w	r1, lr, r1
   19116:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1911a:	d31b      	bcc.n	19154 <__adddf3+0x124>
   1911c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   19120:	d30c      	bcc.n	1913c <__adddf3+0x10c>
   19122:	0849      	lsrs	r1, r1, #1
   19124:	ea5f 0030 	movs.w	r0, r0, rrx
   19128:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1912c:	f104 0401 	add.w	r4, r4, #1
   19130:	ea4f 5244 	mov.w	r2, r4, lsl #21
   19134:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   19138:	f080 809a 	bcs.w	19270 <__adddf3+0x240>
   1913c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19140:	bf08      	it	eq
   19142:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   19146:	f150 0000 	adcs.w	r0, r0, #0
   1914a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1914e:	ea41 0105 	orr.w	r1, r1, r5
   19152:	bd30      	pop	{r4, r5, pc}
   19154:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   19158:	4140      	adcs	r0, r0
   1915a:	eb41 0101 	adc.w	r1, r1, r1
   1915e:	3c01      	subs	r4, #1
   19160:	bf28      	it	cs
   19162:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   19166:	d2e9      	bcs.n	1913c <__adddf3+0x10c>
   19168:	f091 0f00 	teq	r1, #0
   1916c:	bf04      	itt	eq
   1916e:	4601      	moveq	r1, r0
   19170:	2000      	moveq	r0, #0
   19172:	fab1 f381 	clz	r3, r1
   19176:	bf08      	it	eq
   19178:	3320      	addeq	r3, #32
   1917a:	f1a3 030b 	sub.w	r3, r3, #11
   1917e:	f1b3 0220 	subs.w	r2, r3, #32
   19182:	da0c      	bge.n	1919e <__adddf3+0x16e>
   19184:	320c      	adds	r2, #12
   19186:	dd08      	ble.n	1919a <__adddf3+0x16a>
   19188:	f102 0c14 	add.w	ip, r2, #20
   1918c:	f1c2 020c 	rsb	r2, r2, #12
   19190:	fa01 f00c 	lsl.w	r0, r1, ip
   19194:	fa21 f102 	lsr.w	r1, r1, r2
   19198:	e00c      	b.n	191b4 <__adddf3+0x184>
   1919a:	f102 0214 	add.w	r2, r2, #20
   1919e:	bfd8      	it	le
   191a0:	f1c2 0c20 	rsble	ip, r2, #32
   191a4:	fa01 f102 	lsl.w	r1, r1, r2
   191a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   191ac:	bfdc      	itt	le
   191ae:	ea41 010c 	orrle.w	r1, r1, ip
   191b2:	4090      	lslle	r0, r2
   191b4:	1ae4      	subs	r4, r4, r3
   191b6:	bfa2      	ittt	ge
   191b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   191bc:	4329      	orrge	r1, r5
   191be:	bd30      	popge	{r4, r5, pc}
   191c0:	ea6f 0404 	mvn.w	r4, r4
   191c4:	3c1f      	subs	r4, #31
   191c6:	da1c      	bge.n	19202 <__adddf3+0x1d2>
   191c8:	340c      	adds	r4, #12
   191ca:	dc0e      	bgt.n	191ea <__adddf3+0x1ba>
   191cc:	f104 0414 	add.w	r4, r4, #20
   191d0:	f1c4 0220 	rsb	r2, r4, #32
   191d4:	fa20 f004 	lsr.w	r0, r0, r4
   191d8:	fa01 f302 	lsl.w	r3, r1, r2
   191dc:	ea40 0003 	orr.w	r0, r0, r3
   191e0:	fa21 f304 	lsr.w	r3, r1, r4
   191e4:	ea45 0103 	orr.w	r1, r5, r3
   191e8:	bd30      	pop	{r4, r5, pc}
   191ea:	f1c4 040c 	rsb	r4, r4, #12
   191ee:	f1c4 0220 	rsb	r2, r4, #32
   191f2:	fa20 f002 	lsr.w	r0, r0, r2
   191f6:	fa01 f304 	lsl.w	r3, r1, r4
   191fa:	ea40 0003 	orr.w	r0, r0, r3
   191fe:	4629      	mov	r1, r5
   19200:	bd30      	pop	{r4, r5, pc}
   19202:	fa21 f004 	lsr.w	r0, r1, r4
   19206:	4629      	mov	r1, r5
   19208:	bd30      	pop	{r4, r5, pc}
   1920a:	f094 0f00 	teq	r4, #0
   1920e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   19212:	bf06      	itte	eq
   19214:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   19218:	3401      	addeq	r4, #1
   1921a:	3d01      	subne	r5, #1
   1921c:	e74e      	b.n	190bc <__adddf3+0x8c>
   1921e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19222:	bf18      	it	ne
   19224:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19228:	d029      	beq.n	1927e <__adddf3+0x24e>
   1922a:	ea94 0f05 	teq	r4, r5
   1922e:	bf08      	it	eq
   19230:	ea90 0f02 	teqeq	r0, r2
   19234:	d005      	beq.n	19242 <__adddf3+0x212>
   19236:	ea54 0c00 	orrs.w	ip, r4, r0
   1923a:	bf04      	itt	eq
   1923c:	4619      	moveq	r1, r3
   1923e:	4610      	moveq	r0, r2
   19240:	bd30      	pop	{r4, r5, pc}
   19242:	ea91 0f03 	teq	r1, r3
   19246:	bf1e      	ittt	ne
   19248:	2100      	movne	r1, #0
   1924a:	2000      	movne	r0, #0
   1924c:	bd30      	popne	{r4, r5, pc}
   1924e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   19252:	d105      	bne.n	19260 <__adddf3+0x230>
   19254:	0040      	lsls	r0, r0, #1
   19256:	4149      	adcs	r1, r1
   19258:	bf28      	it	cs
   1925a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1925e:	bd30      	pop	{r4, r5, pc}
   19260:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   19264:	bf3c      	itt	cc
   19266:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1926a:	bd30      	popcc	{r4, r5, pc}
   1926c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19270:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   19274:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19278:	f04f 0000 	mov.w	r0, #0
   1927c:	bd30      	pop	{r4, r5, pc}
   1927e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19282:	bf1a      	itte	ne
   19284:	4619      	movne	r1, r3
   19286:	4610      	movne	r0, r2
   19288:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1928c:	bf1c      	itt	ne
   1928e:	460b      	movne	r3, r1
   19290:	4602      	movne	r2, r0
   19292:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   19296:	bf06      	itte	eq
   19298:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1929c:	ea91 0f03 	teqeq	r1, r3
   192a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   192a4:	bd30      	pop	{r4, r5, pc}
   192a6:	bf00      	nop

000192a8 <__aeabi_ui2d>:
   192a8:	f090 0f00 	teq	r0, #0
   192ac:	bf04      	itt	eq
   192ae:	2100      	moveq	r1, #0
   192b0:	4770      	bxeq	lr
   192b2:	b530      	push	{r4, r5, lr}
   192b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   192b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   192bc:	f04f 0500 	mov.w	r5, #0
   192c0:	f04f 0100 	mov.w	r1, #0
   192c4:	e750      	b.n	19168 <__adddf3+0x138>
   192c6:	bf00      	nop

000192c8 <__aeabi_i2d>:
   192c8:	f090 0f00 	teq	r0, #0
   192cc:	bf04      	itt	eq
   192ce:	2100      	moveq	r1, #0
   192d0:	4770      	bxeq	lr
   192d2:	b530      	push	{r4, r5, lr}
   192d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   192d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   192dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   192e0:	bf48      	it	mi
   192e2:	4240      	negmi	r0, r0
   192e4:	f04f 0100 	mov.w	r1, #0
   192e8:	e73e      	b.n	19168 <__adddf3+0x138>
   192ea:	bf00      	nop

000192ec <__aeabi_f2d>:
   192ec:	0042      	lsls	r2, r0, #1
   192ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   192f2:	ea4f 0131 	mov.w	r1, r1, rrx
   192f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   192fa:	bf1f      	itttt	ne
   192fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   19300:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   19304:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   19308:	4770      	bxne	lr
   1930a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1930e:	bf08      	it	eq
   19310:	4770      	bxeq	lr
   19312:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   19316:	bf04      	itt	eq
   19318:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1931c:	4770      	bxeq	lr
   1931e:	b530      	push	{r4, r5, lr}
   19320:	f44f 7460 	mov.w	r4, #896	; 0x380
   19324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19328:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1932c:	e71c      	b.n	19168 <__adddf3+0x138>
   1932e:	bf00      	nop

00019330 <__aeabi_ul2d>:
   19330:	ea50 0201 	orrs.w	r2, r0, r1
   19334:	bf08      	it	eq
   19336:	4770      	bxeq	lr
   19338:	b530      	push	{r4, r5, lr}
   1933a:	f04f 0500 	mov.w	r5, #0
   1933e:	e00a      	b.n	19356 <__aeabi_l2d+0x16>

00019340 <__aeabi_l2d>:
   19340:	ea50 0201 	orrs.w	r2, r0, r1
   19344:	bf08      	it	eq
   19346:	4770      	bxeq	lr
   19348:	b530      	push	{r4, r5, lr}
   1934a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1934e:	d502      	bpl.n	19356 <__aeabi_l2d+0x16>
   19350:	4240      	negs	r0, r0
   19352:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19356:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1935a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1935e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   19362:	f43f aed8 	beq.w	19116 <__adddf3+0xe6>
   19366:	f04f 0203 	mov.w	r2, #3
   1936a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1936e:	bf18      	it	ne
   19370:	3203      	addne	r2, #3
   19372:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   19376:	bf18      	it	ne
   19378:	3203      	addne	r2, #3
   1937a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1937e:	f1c2 0320 	rsb	r3, r2, #32
   19382:	fa00 fc03 	lsl.w	ip, r0, r3
   19386:	fa20 f002 	lsr.w	r0, r0, r2
   1938a:	fa01 fe03 	lsl.w	lr, r1, r3
   1938e:	ea40 000e 	orr.w	r0, r0, lr
   19392:	fa21 f102 	lsr.w	r1, r1, r2
   19396:	4414      	add	r4, r2
   19398:	e6bd      	b.n	19116 <__adddf3+0xe6>
   1939a:	bf00      	nop

0001939c <__aeabi_frsub>:
   1939c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   193a0:	e002      	b.n	193a8 <__addsf3>
   193a2:	bf00      	nop

000193a4 <__aeabi_fsub>:
   193a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000193a8 <__addsf3>:
   193a8:	0042      	lsls	r2, r0, #1
   193aa:	bf1f      	itttt	ne
   193ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   193b0:	ea92 0f03 	teqne	r2, r3
   193b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   193b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   193bc:	d06a      	beq.n	19494 <__addsf3+0xec>
   193be:	ea4f 6212 	mov.w	r2, r2, lsr #24
   193c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   193c6:	bfc1      	itttt	gt
   193c8:	18d2      	addgt	r2, r2, r3
   193ca:	4041      	eorgt	r1, r0
   193cc:	4048      	eorgt	r0, r1
   193ce:	4041      	eorgt	r1, r0
   193d0:	bfb8      	it	lt
   193d2:	425b      	neglt	r3, r3
   193d4:	2b19      	cmp	r3, #25
   193d6:	bf88      	it	hi
   193d8:	4770      	bxhi	lr
   193da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   193de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   193e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   193e6:	bf18      	it	ne
   193e8:	4240      	negne	r0, r0
   193ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   193ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   193f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   193f6:	bf18      	it	ne
   193f8:	4249      	negne	r1, r1
   193fa:	ea92 0f03 	teq	r2, r3
   193fe:	d03f      	beq.n	19480 <__addsf3+0xd8>
   19400:	f1a2 0201 	sub.w	r2, r2, #1
   19404:	fa41 fc03 	asr.w	ip, r1, r3
   19408:	eb10 000c 	adds.w	r0, r0, ip
   1940c:	f1c3 0320 	rsb	r3, r3, #32
   19410:	fa01 f103 	lsl.w	r1, r1, r3
   19414:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   19418:	d502      	bpl.n	19420 <__addsf3+0x78>
   1941a:	4249      	negs	r1, r1
   1941c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   19420:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19424:	d313      	bcc.n	1944e <__addsf3+0xa6>
   19426:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1942a:	d306      	bcc.n	1943a <__addsf3+0x92>
   1942c:	0840      	lsrs	r0, r0, #1
   1942e:	ea4f 0131 	mov.w	r1, r1, rrx
   19432:	f102 0201 	add.w	r2, r2, #1
   19436:	2afe      	cmp	r2, #254	; 0xfe
   19438:	d251      	bcs.n	194de <__addsf3+0x136>
   1943a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1943e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   19442:	bf08      	it	eq
   19444:	f020 0001 	biceq.w	r0, r0, #1
   19448:	ea40 0003 	orr.w	r0, r0, r3
   1944c:	4770      	bx	lr
   1944e:	0049      	lsls	r1, r1, #1
   19450:	eb40 0000 	adc.w	r0, r0, r0
   19454:	3a01      	subs	r2, #1
   19456:	bf28      	it	cs
   19458:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   1945c:	d2ed      	bcs.n	1943a <__addsf3+0x92>
   1945e:	fab0 fc80 	clz	ip, r0
   19462:	f1ac 0c08 	sub.w	ip, ip, #8
   19466:	ebb2 020c 	subs.w	r2, r2, ip
   1946a:	fa00 f00c 	lsl.w	r0, r0, ip
   1946e:	bfaa      	itet	ge
   19470:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   19474:	4252      	neglt	r2, r2
   19476:	4318      	orrge	r0, r3
   19478:	bfbc      	itt	lt
   1947a:	40d0      	lsrlt	r0, r2
   1947c:	4318      	orrlt	r0, r3
   1947e:	4770      	bx	lr
   19480:	f092 0f00 	teq	r2, #0
   19484:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   19488:	bf06      	itte	eq
   1948a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1948e:	3201      	addeq	r2, #1
   19490:	3b01      	subne	r3, #1
   19492:	e7b5      	b.n	19400 <__addsf3+0x58>
   19494:	ea4f 0341 	mov.w	r3, r1, lsl #1
   19498:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1949c:	bf18      	it	ne
   1949e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   194a2:	d021      	beq.n	194e8 <__addsf3+0x140>
   194a4:	ea92 0f03 	teq	r2, r3
   194a8:	d004      	beq.n	194b4 <__addsf3+0x10c>
   194aa:	f092 0f00 	teq	r2, #0
   194ae:	bf08      	it	eq
   194b0:	4608      	moveq	r0, r1
   194b2:	4770      	bx	lr
   194b4:	ea90 0f01 	teq	r0, r1
   194b8:	bf1c      	itt	ne
   194ba:	2000      	movne	r0, #0
   194bc:	4770      	bxne	lr
   194be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   194c2:	d104      	bne.n	194ce <__addsf3+0x126>
   194c4:	0040      	lsls	r0, r0, #1
   194c6:	bf28      	it	cs
   194c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   194cc:	4770      	bx	lr
   194ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   194d2:	bf3c      	itt	cc
   194d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   194d8:	4770      	bxcc	lr
   194da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   194de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   194e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   194e6:	4770      	bx	lr
   194e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   194ec:	bf16      	itet	ne
   194ee:	4608      	movne	r0, r1
   194f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   194f4:	4601      	movne	r1, r0
   194f6:	0242      	lsls	r2, r0, #9
   194f8:	bf06      	itte	eq
   194fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   194fe:	ea90 0f01 	teqeq	r0, r1
   19502:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   19506:	4770      	bx	lr

00019508 <__aeabi_ui2f>:
   19508:	f04f 0300 	mov.w	r3, #0
   1950c:	e004      	b.n	19518 <__aeabi_i2f+0x8>
   1950e:	bf00      	nop

00019510 <__aeabi_i2f>:
   19510:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   19514:	bf48      	it	mi
   19516:	4240      	negmi	r0, r0
   19518:	ea5f 0c00 	movs.w	ip, r0
   1951c:	bf08      	it	eq
   1951e:	4770      	bxeq	lr
   19520:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   19524:	4601      	mov	r1, r0
   19526:	f04f 0000 	mov.w	r0, #0
   1952a:	e01c      	b.n	19566 <__aeabi_l2f+0x2a>

0001952c <__aeabi_ul2f>:
   1952c:	ea50 0201 	orrs.w	r2, r0, r1
   19530:	bf08      	it	eq
   19532:	4770      	bxeq	lr
   19534:	f04f 0300 	mov.w	r3, #0
   19538:	e00a      	b.n	19550 <__aeabi_l2f+0x14>
   1953a:	bf00      	nop

0001953c <__aeabi_l2f>:
   1953c:	ea50 0201 	orrs.w	r2, r0, r1
   19540:	bf08      	it	eq
   19542:	4770      	bxeq	lr
   19544:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   19548:	d502      	bpl.n	19550 <__aeabi_l2f+0x14>
   1954a:	4240      	negs	r0, r0
   1954c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19550:	ea5f 0c01 	movs.w	ip, r1
   19554:	bf02      	ittt	eq
   19556:	4684      	moveq	ip, r0
   19558:	4601      	moveq	r1, r0
   1955a:	2000      	moveq	r0, #0
   1955c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   19560:	bf08      	it	eq
   19562:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   19566:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1956a:	fabc f28c 	clz	r2, ip
   1956e:	3a08      	subs	r2, #8
   19570:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   19574:	db10      	blt.n	19598 <__aeabi_l2f+0x5c>
   19576:	fa01 fc02 	lsl.w	ip, r1, r2
   1957a:	4463      	add	r3, ip
   1957c:	fa00 fc02 	lsl.w	ip, r0, r2
   19580:	f1c2 0220 	rsb	r2, r2, #32
   19584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19588:	fa20 f202 	lsr.w	r2, r0, r2
   1958c:	eb43 0002 	adc.w	r0, r3, r2
   19590:	bf08      	it	eq
   19592:	f020 0001 	biceq.w	r0, r0, #1
   19596:	4770      	bx	lr
   19598:	f102 0220 	add.w	r2, r2, #32
   1959c:	fa01 fc02 	lsl.w	ip, r1, r2
   195a0:	f1c2 0220 	rsb	r2, r2, #32
   195a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   195a8:	fa21 f202 	lsr.w	r2, r1, r2
   195ac:	eb43 0002 	adc.w	r0, r3, r2
   195b0:	bf08      	it	eq
   195b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   195b6:	4770      	bx	lr

000195b8 <__aeabi_uldivmod>:
   195b8:	b953      	cbnz	r3, 195d0 <__aeabi_uldivmod+0x18>
   195ba:	b94a      	cbnz	r2, 195d0 <__aeabi_uldivmod+0x18>
   195bc:	2900      	cmp	r1, #0
   195be:	bf08      	it	eq
   195c0:	2800      	cmpeq	r0, #0
   195c2:	bf1c      	itt	ne
   195c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   195c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   195cc:	f000 b970 	b.w	198b0 <__aeabi_idiv0>
   195d0:	f1ad 0c08 	sub.w	ip, sp, #8
   195d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   195d8:	f000 f806 	bl	195e8 <__udivmoddi4>
   195dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   195e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   195e4:	b004      	add	sp, #16
   195e6:	4770      	bx	lr

000195e8 <__udivmoddi4>:
   195e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   195ec:	9e08      	ldr	r6, [sp, #32]
   195ee:	460d      	mov	r5, r1
   195f0:	4604      	mov	r4, r0
   195f2:	460f      	mov	r7, r1
   195f4:	2b00      	cmp	r3, #0
   195f6:	d14a      	bne.n	1968e <__udivmoddi4+0xa6>
   195f8:	428a      	cmp	r2, r1
   195fa:	4694      	mov	ip, r2
   195fc:	d965      	bls.n	196ca <__udivmoddi4+0xe2>
   195fe:	fab2 f382 	clz	r3, r2
   19602:	b143      	cbz	r3, 19616 <__udivmoddi4+0x2e>
   19604:	fa02 fc03 	lsl.w	ip, r2, r3
   19608:	f1c3 0220 	rsb	r2, r3, #32
   1960c:	409f      	lsls	r7, r3
   1960e:	fa20 f202 	lsr.w	r2, r0, r2
   19612:	4317      	orrs	r7, r2
   19614:	409c      	lsls	r4, r3
   19616:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   1961a:	fa1f f58c 	uxth.w	r5, ip
   1961e:	fbb7 f1fe 	udiv	r1, r7, lr
   19622:	0c22      	lsrs	r2, r4, #16
   19624:	fb0e 7711 	mls	r7, lr, r1, r7
   19628:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1962c:	fb01 f005 	mul.w	r0, r1, r5
   19630:	4290      	cmp	r0, r2
   19632:	d90a      	bls.n	1964a <__udivmoddi4+0x62>
   19634:	eb1c 0202 	adds.w	r2, ip, r2
   19638:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   1963c:	f080 811c 	bcs.w	19878 <__udivmoddi4+0x290>
   19640:	4290      	cmp	r0, r2
   19642:	f240 8119 	bls.w	19878 <__udivmoddi4+0x290>
   19646:	3902      	subs	r1, #2
   19648:	4462      	add	r2, ip
   1964a:	1a12      	subs	r2, r2, r0
   1964c:	b2a4      	uxth	r4, r4
   1964e:	fbb2 f0fe 	udiv	r0, r2, lr
   19652:	fb0e 2210 	mls	r2, lr, r0, r2
   19656:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1965a:	fb00 f505 	mul.w	r5, r0, r5
   1965e:	42a5      	cmp	r5, r4
   19660:	d90a      	bls.n	19678 <__udivmoddi4+0x90>
   19662:	eb1c 0404 	adds.w	r4, ip, r4
   19666:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   1966a:	f080 8107 	bcs.w	1987c <__udivmoddi4+0x294>
   1966e:	42a5      	cmp	r5, r4
   19670:	f240 8104 	bls.w	1987c <__udivmoddi4+0x294>
   19674:	4464      	add	r4, ip
   19676:	3802      	subs	r0, #2
   19678:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1967c:	1b64      	subs	r4, r4, r5
   1967e:	2100      	movs	r1, #0
   19680:	b11e      	cbz	r6, 1968a <__udivmoddi4+0xa2>
   19682:	40dc      	lsrs	r4, r3
   19684:	2300      	movs	r3, #0
   19686:	e9c6 4300 	strd	r4, r3, [r6]
   1968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1968e:	428b      	cmp	r3, r1
   19690:	d908      	bls.n	196a4 <__udivmoddi4+0xbc>
   19692:	2e00      	cmp	r6, #0
   19694:	f000 80ed 	beq.w	19872 <__udivmoddi4+0x28a>
   19698:	2100      	movs	r1, #0
   1969a:	e9c6 0500 	strd	r0, r5, [r6]
   1969e:	4608      	mov	r0, r1
   196a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   196a4:	fab3 f183 	clz	r1, r3
   196a8:	2900      	cmp	r1, #0
   196aa:	d149      	bne.n	19740 <__udivmoddi4+0x158>
   196ac:	42ab      	cmp	r3, r5
   196ae:	d302      	bcc.n	196b6 <__udivmoddi4+0xce>
   196b0:	4282      	cmp	r2, r0
   196b2:	f200 80f8 	bhi.w	198a6 <__udivmoddi4+0x2be>
   196b6:	1a84      	subs	r4, r0, r2
   196b8:	eb65 0203 	sbc.w	r2, r5, r3
   196bc:	2001      	movs	r0, #1
   196be:	4617      	mov	r7, r2
   196c0:	2e00      	cmp	r6, #0
   196c2:	d0e2      	beq.n	1968a <__udivmoddi4+0xa2>
   196c4:	e9c6 4700 	strd	r4, r7, [r6]
   196c8:	e7df      	b.n	1968a <__udivmoddi4+0xa2>
   196ca:	b902      	cbnz	r2, 196ce <__udivmoddi4+0xe6>
   196cc:	deff      	udf	#255	; 0xff
   196ce:	fab2 f382 	clz	r3, r2
   196d2:	2b00      	cmp	r3, #0
   196d4:	f040 8090 	bne.w	197f8 <__udivmoddi4+0x210>
   196d8:	1a8a      	subs	r2, r1, r2
   196da:	ea4f 471c 	mov.w	r7, ip, lsr #16
   196de:	fa1f fe8c 	uxth.w	lr, ip
   196e2:	2101      	movs	r1, #1
   196e4:	fbb2 f5f7 	udiv	r5, r2, r7
   196e8:	fb07 2015 	mls	r0, r7, r5, r2
   196ec:	0c22      	lsrs	r2, r4, #16
   196ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   196f2:	fb0e f005 	mul.w	r0, lr, r5
   196f6:	4290      	cmp	r0, r2
   196f8:	d908      	bls.n	1970c <__udivmoddi4+0x124>
   196fa:	eb1c 0202 	adds.w	r2, ip, r2
   196fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   19702:	d202      	bcs.n	1970a <__udivmoddi4+0x122>
   19704:	4290      	cmp	r0, r2
   19706:	f200 80cb 	bhi.w	198a0 <__udivmoddi4+0x2b8>
   1970a:	4645      	mov	r5, r8
   1970c:	1a12      	subs	r2, r2, r0
   1970e:	b2a4      	uxth	r4, r4
   19710:	fbb2 f0f7 	udiv	r0, r2, r7
   19714:	fb07 2210 	mls	r2, r7, r0, r2
   19718:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1971c:	fb0e fe00 	mul.w	lr, lr, r0
   19720:	45a6      	cmp	lr, r4
   19722:	d908      	bls.n	19736 <__udivmoddi4+0x14e>
   19724:	eb1c 0404 	adds.w	r4, ip, r4
   19728:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   1972c:	d202      	bcs.n	19734 <__udivmoddi4+0x14c>
   1972e:	45a6      	cmp	lr, r4
   19730:	f200 80bb 	bhi.w	198aa <__udivmoddi4+0x2c2>
   19734:	4610      	mov	r0, r2
   19736:	eba4 040e 	sub.w	r4, r4, lr
   1973a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   1973e:	e79f      	b.n	19680 <__udivmoddi4+0x98>
   19740:	f1c1 0720 	rsb	r7, r1, #32
   19744:	408b      	lsls	r3, r1
   19746:	fa22 fc07 	lsr.w	ip, r2, r7
   1974a:	ea4c 0c03 	orr.w	ip, ip, r3
   1974e:	fa05 f401 	lsl.w	r4, r5, r1
   19752:	fa20 f307 	lsr.w	r3, r0, r7
   19756:	40fd      	lsrs	r5, r7
   19758:	ea4f 491c 	mov.w	r9, ip, lsr #16
   1975c:	4323      	orrs	r3, r4
   1975e:	fbb5 f8f9 	udiv	r8, r5, r9
   19762:	fa1f fe8c 	uxth.w	lr, ip
   19766:	fb09 5518 	mls	r5, r9, r8, r5
   1976a:	0c1c      	lsrs	r4, r3, #16
   1976c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   19770:	fb08 f50e 	mul.w	r5, r8, lr
   19774:	42a5      	cmp	r5, r4
   19776:	fa02 f201 	lsl.w	r2, r2, r1
   1977a:	fa00 f001 	lsl.w	r0, r0, r1
   1977e:	d90b      	bls.n	19798 <__udivmoddi4+0x1b0>
   19780:	eb1c 0404 	adds.w	r4, ip, r4
   19784:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   19788:	f080 8088 	bcs.w	1989c <__udivmoddi4+0x2b4>
   1978c:	42a5      	cmp	r5, r4
   1978e:	f240 8085 	bls.w	1989c <__udivmoddi4+0x2b4>
   19792:	f1a8 0802 	sub.w	r8, r8, #2
   19796:	4464      	add	r4, ip
   19798:	1b64      	subs	r4, r4, r5
   1979a:	b29d      	uxth	r5, r3
   1979c:	fbb4 f3f9 	udiv	r3, r4, r9
   197a0:	fb09 4413 	mls	r4, r9, r3, r4
   197a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   197a8:	fb03 fe0e 	mul.w	lr, r3, lr
   197ac:	45a6      	cmp	lr, r4
   197ae:	d908      	bls.n	197c2 <__udivmoddi4+0x1da>
   197b0:	eb1c 0404 	adds.w	r4, ip, r4
   197b4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   197b8:	d26c      	bcs.n	19894 <__udivmoddi4+0x2ac>
   197ba:	45a6      	cmp	lr, r4
   197bc:	d96a      	bls.n	19894 <__udivmoddi4+0x2ac>
   197be:	3b02      	subs	r3, #2
   197c0:	4464      	add	r4, ip
   197c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   197c6:	fba3 9502 	umull	r9, r5, r3, r2
   197ca:	eba4 040e 	sub.w	r4, r4, lr
   197ce:	42ac      	cmp	r4, r5
   197d0:	46c8      	mov	r8, r9
   197d2:	46ae      	mov	lr, r5
   197d4:	d356      	bcc.n	19884 <__udivmoddi4+0x29c>
   197d6:	d053      	beq.n	19880 <__udivmoddi4+0x298>
   197d8:	b156      	cbz	r6, 197f0 <__udivmoddi4+0x208>
   197da:	ebb0 0208 	subs.w	r2, r0, r8
   197de:	eb64 040e 	sbc.w	r4, r4, lr
   197e2:	fa04 f707 	lsl.w	r7, r4, r7
   197e6:	40ca      	lsrs	r2, r1
   197e8:	40cc      	lsrs	r4, r1
   197ea:	4317      	orrs	r7, r2
   197ec:	e9c6 7400 	strd	r7, r4, [r6]
   197f0:	4618      	mov	r0, r3
   197f2:	2100      	movs	r1, #0
   197f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   197f8:	f1c3 0120 	rsb	r1, r3, #32
   197fc:	fa02 fc03 	lsl.w	ip, r2, r3
   19800:	fa20 f201 	lsr.w	r2, r0, r1
   19804:	fa25 f101 	lsr.w	r1, r5, r1
   19808:	409d      	lsls	r5, r3
   1980a:	432a      	orrs	r2, r5
   1980c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   19810:	fa1f fe8c 	uxth.w	lr, ip
   19814:	fbb1 f0f7 	udiv	r0, r1, r7
   19818:	fb07 1510 	mls	r5, r7, r0, r1
   1981c:	0c11      	lsrs	r1, r2, #16
   1981e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   19822:	fb00 f50e 	mul.w	r5, r0, lr
   19826:	428d      	cmp	r5, r1
   19828:	fa04 f403 	lsl.w	r4, r4, r3
   1982c:	d908      	bls.n	19840 <__udivmoddi4+0x258>
   1982e:	eb1c 0101 	adds.w	r1, ip, r1
   19832:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   19836:	d22f      	bcs.n	19898 <__udivmoddi4+0x2b0>
   19838:	428d      	cmp	r5, r1
   1983a:	d92d      	bls.n	19898 <__udivmoddi4+0x2b0>
   1983c:	3802      	subs	r0, #2
   1983e:	4461      	add	r1, ip
   19840:	1b49      	subs	r1, r1, r5
   19842:	b292      	uxth	r2, r2
   19844:	fbb1 f5f7 	udiv	r5, r1, r7
   19848:	fb07 1115 	mls	r1, r7, r5, r1
   1984c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19850:	fb05 f10e 	mul.w	r1, r5, lr
   19854:	4291      	cmp	r1, r2
   19856:	d908      	bls.n	1986a <__udivmoddi4+0x282>
   19858:	eb1c 0202 	adds.w	r2, ip, r2
   1985c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   19860:	d216      	bcs.n	19890 <__udivmoddi4+0x2a8>
   19862:	4291      	cmp	r1, r2
   19864:	d914      	bls.n	19890 <__udivmoddi4+0x2a8>
   19866:	3d02      	subs	r5, #2
   19868:	4462      	add	r2, ip
   1986a:	1a52      	subs	r2, r2, r1
   1986c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   19870:	e738      	b.n	196e4 <__udivmoddi4+0xfc>
   19872:	4631      	mov	r1, r6
   19874:	4630      	mov	r0, r6
   19876:	e708      	b.n	1968a <__udivmoddi4+0xa2>
   19878:	4639      	mov	r1, r7
   1987a:	e6e6      	b.n	1964a <__udivmoddi4+0x62>
   1987c:	4610      	mov	r0, r2
   1987e:	e6fb      	b.n	19678 <__udivmoddi4+0x90>
   19880:	4548      	cmp	r0, r9
   19882:	d2a9      	bcs.n	197d8 <__udivmoddi4+0x1f0>
   19884:	ebb9 0802 	subs.w	r8, r9, r2
   19888:	eb65 0e0c 	sbc.w	lr, r5, ip
   1988c:	3b01      	subs	r3, #1
   1988e:	e7a3      	b.n	197d8 <__udivmoddi4+0x1f0>
   19890:	4645      	mov	r5, r8
   19892:	e7ea      	b.n	1986a <__udivmoddi4+0x282>
   19894:	462b      	mov	r3, r5
   19896:	e794      	b.n	197c2 <__udivmoddi4+0x1da>
   19898:	4640      	mov	r0, r8
   1989a:	e7d1      	b.n	19840 <__udivmoddi4+0x258>
   1989c:	46d0      	mov	r8, sl
   1989e:	e77b      	b.n	19798 <__udivmoddi4+0x1b0>
   198a0:	3d02      	subs	r5, #2
   198a2:	4462      	add	r2, ip
   198a4:	e732      	b.n	1970c <__udivmoddi4+0x124>
   198a6:	4608      	mov	r0, r1
   198a8:	e70a      	b.n	196c0 <__udivmoddi4+0xd8>
   198aa:	4464      	add	r4, ip
   198ac:	3802      	subs	r0, #2
   198ae:	e742      	b.n	19736 <__udivmoddi4+0x14e>

000198b0 <__aeabi_idiv0>:
   198b0:	4770      	bx	lr
   198b2:	bf00      	nop

000198b4 <_calloc_r>:
   198b4:	b538      	push	{r3, r4, r5, lr}
   198b6:	fba1 1402 	umull	r1, r4, r1, r2
   198ba:	bb8c      	cbnz	r4, 19920 <_calloc_r+0x6c>
   198bc:	f000 f846 	bl	1994c <_malloc_r>
   198c0:	4605      	mov	r5, r0
   198c2:	b1e0      	cbz	r0, 198fe <_calloc_r+0x4a>
   198c4:	f850 2c04 	ldr.w	r2, [r0, #-4]
   198c8:	f022 0203 	bic.w	r2, r2, #3
   198cc:	3a04      	subs	r2, #4
   198ce:	2a24      	cmp	r2, #36	; 0x24
   198d0:	d817      	bhi.n	19902 <_calloc_r+0x4e>
   198d2:	2a13      	cmp	r2, #19
   198d4:	d91a      	bls.n	1990c <_calloc_r+0x58>
   198d6:	2a1b      	cmp	r2, #27
   198d8:	e9c0 4400 	strd	r4, r4, [r0]
   198dc:	d91d      	bls.n	1991a <_calloc_r+0x66>
   198de:	2a24      	cmp	r2, #36	; 0x24
   198e0:	bf14      	ite	ne
   198e2:	f100 0210 	addne.w	r2, r0, #16
   198e6:	f100 0218 	addeq.w	r2, r0, #24
   198ea:	f04f 0300 	mov.w	r3, #0
   198ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
   198f2:	bf04      	itt	eq
   198f4:	6104      	streq	r4, [r0, #16]
   198f6:	6144      	streq	r4, [r0, #20]
   198f8:	e9c2 3300 	strd	r3, r3, [r2]
   198fc:	6093      	str	r3, [r2, #8]
   198fe:	4628      	mov	r0, r5
   19900:	bd38      	pop	{r3, r4, r5, pc}
   19902:	4621      	mov	r1, r4
   19904:	f002 f928 	bl	1bb58 <memset>
   19908:	4628      	mov	r0, r5
   1990a:	bd38      	pop	{r3, r4, r5, pc}
   1990c:	4602      	mov	r2, r0
   1990e:	2300      	movs	r3, #0
   19910:	e9c2 3300 	strd	r3, r3, [r2]
   19914:	6093      	str	r3, [r2, #8]
   19916:	4628      	mov	r0, r5
   19918:	bd38      	pop	{r3, r4, r5, pc}
   1991a:	f100 0208 	add.w	r2, r0, #8
   1991e:	e7f6      	b.n	1990e <_calloc_r+0x5a>
   19920:	f003 fa5c 	bl	1cddc <__errno>
   19924:	230c      	movs	r3, #12
   19926:	2500      	movs	r5, #0
   19928:	6003      	str	r3, [r0, #0]
   1992a:	e7e8      	b.n	198fe <_calloc_r+0x4a>

0001992c <malloc>:
   1992c:	4b02      	ldr	r3, [pc, #8]	; (19938 <malloc+0xc>)
   1992e:	4601      	mov	r1, r0
   19930:	6818      	ldr	r0, [r3, #0]
   19932:	f000 b80b 	b.w	1994c <_malloc_r>
   19936:	bf00      	nop
   19938:	20008e58 	.word	0x20008e58

0001993c <free>:
   1993c:	4b02      	ldr	r3, [pc, #8]	; (19948 <free+0xc>)
   1993e:	4601      	mov	r1, r0
   19940:	6818      	ldr	r0, [r3, #0]
   19942:	f003 bdcf 	b.w	1d4e4 <_free_r>
   19946:	bf00      	nop
   19948:	20008e58 	.word	0x20008e58

0001994c <_malloc_r>:
   1994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19950:	f101 060b 	add.w	r6, r1, #11
   19954:	2e16      	cmp	r6, #22
   19956:	b083      	sub	sp, #12
   19958:	4604      	mov	r4, r0
   1995a:	d824      	bhi.n	199a6 <_malloc_r+0x5a>
   1995c:	2910      	cmp	r1, #16
   1995e:	f200 80ba 	bhi.w	19ad6 <_malloc_r+0x18a>
   19962:	f000 fa9d 	bl	19ea0 <__malloc_lock>
   19966:	2610      	movs	r6, #16
   19968:	2218      	movs	r2, #24
   1996a:	2002      	movs	r0, #2
   1996c:	4fb7      	ldr	r7, [pc, #732]	; (19c4c <_malloc_r+0x300>)
   1996e:	443a      	add	r2, r7
   19970:	f1a2 0108 	sub.w	r1, r2, #8
   19974:	6853      	ldr	r3, [r2, #4]
   19976:	428b      	cmp	r3, r1
   19978:	f000 80ba 	beq.w	19af0 <_malloc_r+0x1a4>
   1997c:	685a      	ldr	r2, [r3, #4]
   1997e:	68d9      	ldr	r1, [r3, #12]
   19980:	f022 0203 	bic.w	r2, r2, #3
   19984:	441a      	add	r2, r3
   19986:	689d      	ldr	r5, [r3, #8]
   19988:	60e9      	str	r1, [r5, #12]
   1998a:	608d      	str	r5, [r1, #8]
   1998c:	6851      	ldr	r1, [r2, #4]
   1998e:	f041 0101 	orr.w	r1, r1, #1
   19992:	4620      	mov	r0, r4
   19994:	6051      	str	r1, [r2, #4]
   19996:	f103 0508 	add.w	r5, r3, #8
   1999a:	f000 fa87 	bl	19eac <__malloc_unlock>
   1999e:	4628      	mov	r0, r5
   199a0:	b003      	add	sp, #12
   199a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199a6:	f036 0607 	bics.w	r6, r6, #7
   199aa:	f100 8094 	bmi.w	19ad6 <_malloc_r+0x18a>
   199ae:	42b1      	cmp	r1, r6
   199b0:	f200 8091 	bhi.w	19ad6 <_malloc_r+0x18a>
   199b4:	f000 fa74 	bl	19ea0 <__malloc_lock>
   199b8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   199bc:	f0c0 8196 	bcc.w	19cec <_malloc_r+0x3a0>
   199c0:	0a73      	lsrs	r3, r6, #9
   199c2:	f000 808f 	beq.w	19ae4 <_malloc_r+0x198>
   199c6:	2b04      	cmp	r3, #4
   199c8:	f200 816b 	bhi.w	19ca2 <_malloc_r+0x356>
   199cc:	09b3      	lsrs	r3, r6, #6
   199ce:	f103 0039 	add.w	r0, r3, #57	; 0x39
   199d2:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   199d6:	00c3      	lsls	r3, r0, #3
   199d8:	4f9c      	ldr	r7, [pc, #624]	; (19c4c <_malloc_r+0x300>)
   199da:	443b      	add	r3, r7
   199dc:	f1a3 0508 	sub.w	r5, r3, #8
   199e0:	685b      	ldr	r3, [r3, #4]
   199e2:	429d      	cmp	r5, r3
   199e4:	d106      	bne.n	199f4 <_malloc_r+0xa8>
   199e6:	e00c      	b.n	19a02 <_malloc_r+0xb6>
   199e8:	2900      	cmp	r1, #0
   199ea:	f280 812b 	bge.w	19c44 <_malloc_r+0x2f8>
   199ee:	68db      	ldr	r3, [r3, #12]
   199f0:	429d      	cmp	r5, r3
   199f2:	d006      	beq.n	19a02 <_malloc_r+0xb6>
   199f4:	685a      	ldr	r2, [r3, #4]
   199f6:	f022 0203 	bic.w	r2, r2, #3
   199fa:	1b91      	subs	r1, r2, r6
   199fc:	290f      	cmp	r1, #15
   199fe:	ddf3      	ble.n	199e8 <_malloc_r+0x9c>
   19a00:	4660      	mov	r0, ip
   19a02:	693d      	ldr	r5, [r7, #16]
   19a04:	f8df c248 	ldr.w	ip, [pc, #584]	; 19c50 <_malloc_r+0x304>
   19a08:	4565      	cmp	r5, ip
   19a0a:	d07c      	beq.n	19b06 <_malloc_r+0x1ba>
   19a0c:	686a      	ldr	r2, [r5, #4]
   19a0e:	f022 0203 	bic.w	r2, r2, #3
   19a12:	1b93      	subs	r3, r2, r6
   19a14:	2b0f      	cmp	r3, #15
   19a16:	f300 8177 	bgt.w	19d08 <_malloc_r+0x3bc>
   19a1a:	2b00      	cmp	r3, #0
   19a1c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   19a20:	f280 8168 	bge.w	19cf4 <_malloc_r+0x3a8>
   19a24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   19a28:	f080 8116 	bcs.w	19c58 <_malloc_r+0x30c>
   19a2c:	08d3      	lsrs	r3, r2, #3
   19a2e:	6879      	ldr	r1, [r7, #4]
   19a30:	3301      	adds	r3, #1
   19a32:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   19a36:	2201      	movs	r2, #1
   19a38:	fa02 f20e 	lsl.w	r2, r2, lr
   19a3c:	430a      	orrs	r2, r1
   19a3e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   19a42:	f8c5 e008 	str.w	lr, [r5, #8]
   19a46:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   19a4a:	3908      	subs	r1, #8
   19a4c:	60e9      	str	r1, [r5, #12]
   19a4e:	607a      	str	r2, [r7, #4]
   19a50:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   19a54:	f8ce 500c 	str.w	r5, [lr, #12]
   19a58:	1083      	asrs	r3, r0, #2
   19a5a:	2101      	movs	r1, #1
   19a5c:	4099      	lsls	r1, r3
   19a5e:	4291      	cmp	r1, r2
   19a60:	d857      	bhi.n	19b12 <_malloc_r+0x1c6>
   19a62:	4211      	tst	r1, r2
   19a64:	d106      	bne.n	19a74 <_malloc_r+0x128>
   19a66:	f020 0003 	bic.w	r0, r0, #3
   19a6a:	0049      	lsls	r1, r1, #1
   19a6c:	4211      	tst	r1, r2
   19a6e:	f100 0004 	add.w	r0, r0, #4
   19a72:	d0fa      	beq.n	19a6a <_malloc_r+0x11e>
   19a74:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   19a78:	464d      	mov	r5, r9
   19a7a:	4686      	mov	lr, r0
   19a7c:	f8d5 800c 	ldr.w	r8, [r5, #12]
   19a80:	4545      	cmp	r5, r8
   19a82:	d108      	bne.n	19a96 <_malloc_r+0x14a>
   19a84:	e119      	b.n	19cba <_malloc_r+0x36e>
   19a86:	2b00      	cmp	r3, #0
   19a88:	f280 8120 	bge.w	19ccc <_malloc_r+0x380>
   19a8c:	f8d8 800c 	ldr.w	r8, [r8, #12]
   19a90:	4545      	cmp	r5, r8
   19a92:	f000 8112 	beq.w	19cba <_malloc_r+0x36e>
   19a96:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19a9a:	f022 0203 	bic.w	r2, r2, #3
   19a9e:	1b93      	subs	r3, r2, r6
   19aa0:	2b0f      	cmp	r3, #15
   19aa2:	ddf0      	ble.n	19a86 <_malloc_r+0x13a>
   19aa4:	4620      	mov	r0, r4
   19aa6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   19aaa:	eb08 0106 	add.w	r1, r8, r6
   19aae:	f046 0601 	orr.w	r6, r6, #1
   19ab2:	f8c8 6004 	str.w	r6, [r8, #4]
   19ab6:	60ec      	str	r4, [r5, #12]
   19ab8:	60a5      	str	r5, [r4, #8]
   19aba:	f043 0401 	orr.w	r4, r3, #1
   19abe:	e9c7 1104 	strd	r1, r1, [r7, #16]
   19ac2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   19ac6:	604c      	str	r4, [r1, #4]
   19ac8:	f848 3002 	str.w	r3, [r8, r2]
   19acc:	f000 f9ee 	bl	19eac <__malloc_unlock>
   19ad0:	f108 0508 	add.w	r5, r8, #8
   19ad4:	e002      	b.n	19adc <_malloc_r+0x190>
   19ad6:	230c      	movs	r3, #12
   19ad8:	6023      	str	r3, [r4, #0]
   19ada:	2500      	movs	r5, #0
   19adc:	4628      	mov	r0, r5
   19ade:	b003      	add	sp, #12
   19ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
   19ae8:	2040      	movs	r0, #64	; 0x40
   19aea:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   19aee:	e773      	b.n	199d8 <_malloc_r+0x8c>
   19af0:	68d3      	ldr	r3, [r2, #12]
   19af2:	429a      	cmp	r2, r3
   19af4:	bf08      	it	eq
   19af6:	3002      	addeq	r0, #2
   19af8:	f47f af40 	bne.w	1997c <_malloc_r+0x30>
   19afc:	693d      	ldr	r5, [r7, #16]
   19afe:	f8df c150 	ldr.w	ip, [pc, #336]	; 19c50 <_malloc_r+0x304>
   19b02:	4565      	cmp	r5, ip
   19b04:	d182      	bne.n	19a0c <_malloc_r+0xc0>
   19b06:	687a      	ldr	r2, [r7, #4]
   19b08:	1083      	asrs	r3, r0, #2
   19b0a:	2101      	movs	r1, #1
   19b0c:	4099      	lsls	r1, r3
   19b0e:	4291      	cmp	r1, r2
   19b10:	d9a7      	bls.n	19a62 <_malloc_r+0x116>
   19b12:	68bd      	ldr	r5, [r7, #8]
   19b14:	686b      	ldr	r3, [r5, #4]
   19b16:	f023 0803 	bic.w	r8, r3, #3
   19b1a:	4546      	cmp	r6, r8
   19b1c:	d803      	bhi.n	19b26 <_malloc_r+0x1da>
   19b1e:	eba8 0306 	sub.w	r3, r8, r6
   19b22:	2b0f      	cmp	r3, #15
   19b24:	dc7e      	bgt.n	19c24 <_malloc_r+0x2d8>
   19b26:	f8df 912c 	ldr.w	r9, [pc, #300]	; 19c54 <_malloc_r+0x308>
   19b2a:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
   19b2e:	f8d9 3000 	ldr.w	r3, [r9]
   19b32:	3201      	adds	r2, #1
   19b34:	4433      	add	r3, r6
   19b36:	eb05 0a08 	add.w	sl, r5, r8
   19b3a:	f000 812f 	beq.w	19d9c <_malloc_r+0x450>
   19b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   19b42:	330f      	adds	r3, #15
   19b44:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   19b48:	f02b 0b0f 	bic.w	fp, fp, #15
   19b4c:	4659      	mov	r1, fp
   19b4e:	4620      	mov	r0, r4
   19b50:	f003 f91c 	bl	1cd8c <_sbrk_r>
   19b54:	1c41      	adds	r1, r0, #1
   19b56:	4602      	mov	r2, r0
   19b58:	f000 80ef 	beq.w	19d3a <_malloc_r+0x3ee>
   19b5c:	4582      	cmp	sl, r0
   19b5e:	f200 80ea 	bhi.w	19d36 <_malloc_r+0x3ea>
   19b62:	f8d9 1004 	ldr.w	r1, [r9, #4]
   19b66:	4459      	add	r1, fp
   19b68:	f8c9 1004 	str.w	r1, [r9, #4]
   19b6c:	460b      	mov	r3, r1
   19b6e:	f000 814b 	beq.w	19e08 <_malloc_r+0x4bc>
   19b72:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
   19b76:	3101      	adds	r1, #1
   19b78:	bf1b      	ittet	ne
   19b7a:	eba2 0a0a 	subne.w	sl, r2, sl
   19b7e:	4453      	addne	r3, sl
   19b80:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
   19b84:	f8c9 3004 	strne.w	r3, [r9, #4]
   19b88:	f012 0307 	ands.w	r3, r2, #7
   19b8c:	f000 8112 	beq.w	19db4 <_malloc_r+0x468>
   19b90:	f1c3 0108 	rsb	r1, r3, #8
   19b94:	440a      	add	r2, r1
   19b96:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
   19b9a:	4493      	add	fp, r2
   19b9c:	3108      	adds	r1, #8
   19b9e:	eba1 010b 	sub.w	r1, r1, fp
   19ba2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   19ba6:	4651      	mov	r1, sl
   19ba8:	4620      	mov	r0, r4
   19baa:	9201      	str	r2, [sp, #4]
   19bac:	9300      	str	r3, [sp, #0]
   19bae:	f003 f8ed 	bl	1cd8c <_sbrk_r>
   19bb2:	1c42      	adds	r2, r0, #1
   19bb4:	e9dd 3200 	ldrd	r3, r2, [sp]
   19bb8:	f000 814b 	beq.w	19e52 <_malloc_r+0x506>
   19bbc:	1a80      	subs	r0, r0, r2
   19bbe:	eb00 0b0a 	add.w	fp, r0, sl
   19bc2:	f8d9 0004 	ldr.w	r0, [r9, #4]
   19bc6:	60ba      	str	r2, [r7, #8]
   19bc8:	f04b 0301 	orr.w	r3, fp, #1
   19bcc:	eb0a 0100 	add.w	r1, sl, r0
   19bd0:	42bd      	cmp	r5, r7
   19bd2:	6053      	str	r3, [r2, #4]
   19bd4:	f8c9 1004 	str.w	r1, [r9, #4]
   19bd8:	f000 8122 	beq.w	19e20 <_malloc_r+0x4d4>
   19bdc:	f1b8 0f0f 	cmp.w	r8, #15
   19be0:	f240 8120 	bls.w	19e24 <_malloc_r+0x4d8>
   19be4:	686b      	ldr	r3, [r5, #4]
   19be6:	f1a8 000c 	sub.w	r0, r8, #12
   19bea:	f020 0007 	bic.w	r0, r0, #7
   19bee:	f003 0301 	and.w	r3, r3, #1
   19bf2:	4303      	orrs	r3, r0
   19bf4:	606b      	str	r3, [r5, #4]
   19bf6:	f04f 0c05 	mov.w	ip, #5
   19bfa:	182b      	adds	r3, r5, r0
   19bfc:	280f      	cmp	r0, #15
   19bfe:	e9c3 cc01 	strd	ip, ip, [r3, #4]
   19c02:	f200 812d 	bhi.w	19e60 <_malloc_r+0x514>
   19c06:	6853      	ldr	r3, [r2, #4]
   19c08:	4615      	mov	r5, r2
   19c0a:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
   19c0e:	428a      	cmp	r2, r1
   19c10:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
   19c14:	bf38      	it	cc
   19c16:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
   19c1a:	428a      	cmp	r2, r1
   19c1c:	bf38      	it	cc
   19c1e:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
   19c22:	e08c      	b.n	19d3e <_malloc_r+0x3f2>
   19c24:	19aa      	adds	r2, r5, r6
   19c26:	f043 0301 	orr.w	r3, r3, #1
   19c2a:	f046 0601 	orr.w	r6, r6, #1
   19c2e:	606e      	str	r6, [r5, #4]
   19c30:	4620      	mov	r0, r4
   19c32:	60ba      	str	r2, [r7, #8]
   19c34:	6053      	str	r3, [r2, #4]
   19c36:	f000 f939 	bl	19eac <__malloc_unlock>
   19c3a:	3508      	adds	r5, #8
   19c3c:	4628      	mov	r0, r5
   19c3e:	b003      	add	sp, #12
   19c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c44:	68d9      	ldr	r1, [r3, #12]
   19c46:	441a      	add	r2, r3
   19c48:	e69d      	b.n	19986 <_malloc_r+0x3a>
   19c4a:	bf00      	nop
   19c4c:	20008f84 	.word	0x20008f84
   19c50:	20008f8c 	.word	0x20008f8c
   19c54:	2000e104 	.word	0x2000e104
   19c58:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   19c5c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   19c60:	d363      	bcc.n	19d2a <_malloc_r+0x3de>
   19c62:	2b14      	cmp	r3, #20
   19c64:	f200 80b8 	bhi.w	19dd8 <_malloc_r+0x48c>
   19c68:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   19c6c:	00c9      	lsls	r1, r1, #3
   19c6e:	335b      	adds	r3, #91	; 0x5b
   19c70:	eb07 0e01 	add.w	lr, r7, r1
   19c74:	5879      	ldr	r1, [r7, r1]
   19c76:	f1ae 0e08 	sub.w	lr, lr, #8
   19c7a:	458e      	cmp	lr, r1
   19c7c:	f000 8091 	beq.w	19da2 <_malloc_r+0x456>
   19c80:	684b      	ldr	r3, [r1, #4]
   19c82:	f023 0303 	bic.w	r3, r3, #3
   19c86:	4293      	cmp	r3, r2
   19c88:	d902      	bls.n	19c90 <_malloc_r+0x344>
   19c8a:	6889      	ldr	r1, [r1, #8]
   19c8c:	458e      	cmp	lr, r1
   19c8e:	d1f7      	bne.n	19c80 <_malloc_r+0x334>
   19c90:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   19c94:	687a      	ldr	r2, [r7, #4]
   19c96:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   19c9a:	f8ce 5008 	str.w	r5, [lr, #8]
   19c9e:	60cd      	str	r5, [r1, #12]
   19ca0:	e6da      	b.n	19a58 <_malloc_r+0x10c>
   19ca2:	2b14      	cmp	r3, #20
   19ca4:	d959      	bls.n	19d5a <_malloc_r+0x40e>
   19ca6:	2b54      	cmp	r3, #84	; 0x54
   19ca8:	f200 809e 	bhi.w	19de8 <_malloc_r+0x49c>
   19cac:	0b33      	lsrs	r3, r6, #12
   19cae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   19cb2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   19cb6:	00c3      	lsls	r3, r0, #3
   19cb8:	e68e      	b.n	199d8 <_malloc_r+0x8c>
   19cba:	f10e 0e01 	add.w	lr, lr, #1
   19cbe:	f01e 0f03 	tst.w	lr, #3
   19cc2:	f105 0508 	add.w	r5, r5, #8
   19cc6:	f47f aed9 	bne.w	19a7c <_malloc_r+0x130>
   19cca:	e051      	b.n	19d70 <_malloc_r+0x424>
   19ccc:	4442      	add	r2, r8
   19cce:	4645      	mov	r5, r8
   19cd0:	6853      	ldr	r3, [r2, #4]
   19cd2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   19cd6:	f043 0301 	orr.w	r3, r3, #1
   19cda:	6053      	str	r3, [r2, #4]
   19cdc:	f855 3f08 	ldr.w	r3, [r5, #8]!
   19ce0:	4620      	mov	r0, r4
   19ce2:	60d9      	str	r1, [r3, #12]
   19ce4:	608b      	str	r3, [r1, #8]
   19ce6:	f000 f8e1 	bl	19eac <__malloc_unlock>
   19cea:	e6f7      	b.n	19adc <_malloc_r+0x190>
   19cec:	08f0      	lsrs	r0, r6, #3
   19cee:	f106 0208 	add.w	r2, r6, #8
   19cf2:	e63b      	b.n	1996c <_malloc_r+0x20>
   19cf4:	442a      	add	r2, r5
   19cf6:	4620      	mov	r0, r4
   19cf8:	6853      	ldr	r3, [r2, #4]
   19cfa:	f043 0301 	orr.w	r3, r3, #1
   19cfe:	6053      	str	r3, [r2, #4]
   19d00:	3508      	adds	r5, #8
   19d02:	f000 f8d3 	bl	19eac <__malloc_unlock>
   19d06:	e6e9      	b.n	19adc <_malloc_r+0x190>
   19d08:	19a9      	adds	r1, r5, r6
   19d0a:	4620      	mov	r0, r4
   19d0c:	f046 0601 	orr.w	r6, r6, #1
   19d10:	f043 0401 	orr.w	r4, r3, #1
   19d14:	606e      	str	r6, [r5, #4]
   19d16:	e9c7 1104 	strd	r1, r1, [r7, #16]
   19d1a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   19d1e:	604c      	str	r4, [r1, #4]
   19d20:	50ab      	str	r3, [r5, r2]
   19d22:	f000 f8c3 	bl	19eac <__malloc_unlock>
   19d26:	3508      	adds	r5, #8
   19d28:	e6d8      	b.n	19adc <_malloc_r+0x190>
   19d2a:	0993      	lsrs	r3, r2, #6
   19d2c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   19d30:	00c9      	lsls	r1, r1, #3
   19d32:	3338      	adds	r3, #56	; 0x38
   19d34:	e79c      	b.n	19c70 <_malloc_r+0x324>
   19d36:	42bd      	cmp	r5, r7
   19d38:	d060      	beq.n	19dfc <_malloc_r+0x4b0>
   19d3a:	68bd      	ldr	r5, [r7, #8]
   19d3c:	686b      	ldr	r3, [r5, #4]
   19d3e:	f023 0b03 	bic.w	fp, r3, #3
   19d42:	455e      	cmp	r6, fp
   19d44:	ebab 0306 	sub.w	r3, fp, r6
   19d48:	d802      	bhi.n	19d50 <_malloc_r+0x404>
   19d4a:	2b0f      	cmp	r3, #15
   19d4c:	f73f af6a 	bgt.w	19c24 <_malloc_r+0x2d8>
   19d50:	4620      	mov	r0, r4
   19d52:	f000 f8ab 	bl	19eac <__malloc_unlock>
   19d56:	2500      	movs	r5, #0
   19d58:	e6c0      	b.n	19adc <_malloc_r+0x190>
   19d5a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   19d5e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   19d62:	00c3      	lsls	r3, r0, #3
   19d64:	e638      	b.n	199d8 <_malloc_r+0x8c>
   19d66:	f859 3908 	ldr.w	r3, [r9], #-8
   19d6a:	454b      	cmp	r3, r9
   19d6c:	f040 8096 	bne.w	19e9c <_malloc_r+0x550>
   19d70:	f010 0f03 	tst.w	r0, #3
   19d74:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   19d78:	d1f5      	bne.n	19d66 <_malloc_r+0x41a>
   19d7a:	687b      	ldr	r3, [r7, #4]
   19d7c:	ea23 0301 	bic.w	r3, r3, r1
   19d80:	607b      	str	r3, [r7, #4]
   19d82:	0049      	lsls	r1, r1, #1
   19d84:	4299      	cmp	r1, r3
   19d86:	f63f aec4 	bhi.w	19b12 <_malloc_r+0x1c6>
   19d8a:	b919      	cbnz	r1, 19d94 <_malloc_r+0x448>
   19d8c:	e6c1      	b.n	19b12 <_malloc_r+0x1c6>
   19d8e:	0049      	lsls	r1, r1, #1
   19d90:	f10e 0e04 	add.w	lr, lr, #4
   19d94:	4219      	tst	r1, r3
   19d96:	d0fa      	beq.n	19d8e <_malloc_r+0x442>
   19d98:	4670      	mov	r0, lr
   19d9a:	e66b      	b.n	19a74 <_malloc_r+0x128>
   19d9c:	f103 0b10 	add.w	fp, r3, #16
   19da0:	e6d4      	b.n	19b4c <_malloc_r+0x200>
   19da2:	109a      	asrs	r2, r3, #2
   19da4:	f04f 0801 	mov.w	r8, #1
   19da8:	687b      	ldr	r3, [r7, #4]
   19daa:	fa08 f202 	lsl.w	r2, r8, r2
   19dae:	431a      	orrs	r2, r3
   19db0:	607a      	str	r2, [r7, #4]
   19db2:	e770      	b.n	19c96 <_malloc_r+0x34a>
   19db4:	eb02 010b 	add.w	r1, r2, fp
   19db8:	4249      	negs	r1, r1
   19dba:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   19dbe:	4651      	mov	r1, sl
   19dc0:	4620      	mov	r0, r4
   19dc2:	9301      	str	r3, [sp, #4]
   19dc4:	9200      	str	r2, [sp, #0]
   19dc6:	f002 ffe1 	bl	1cd8c <_sbrk_r>
   19dca:	1c43      	adds	r3, r0, #1
   19dcc:	e9dd 2300 	ldrd	r2, r3, [sp]
   19dd0:	f47f aef4 	bne.w	19bbc <_malloc_r+0x270>
   19dd4:	469a      	mov	sl, r3
   19dd6:	e6f4      	b.n	19bc2 <_malloc_r+0x276>
   19dd8:	2b54      	cmp	r3, #84	; 0x54
   19dda:	d826      	bhi.n	19e2a <_malloc_r+0x4de>
   19ddc:	0b13      	lsrs	r3, r2, #12
   19dde:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   19de2:	00c9      	lsls	r1, r1, #3
   19de4:	336e      	adds	r3, #110	; 0x6e
   19de6:	e743      	b.n	19c70 <_malloc_r+0x324>
   19de8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   19dec:	d826      	bhi.n	19e3c <_malloc_r+0x4f0>
   19dee:	0bf3      	lsrs	r3, r6, #15
   19df0:	f103 0078 	add.w	r0, r3, #120	; 0x78
   19df4:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   19df8:	00c3      	lsls	r3, r0, #3
   19dfa:	e5ed      	b.n	199d8 <_malloc_r+0x8c>
   19dfc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19e00:	445b      	add	r3, fp
   19e02:	f8c9 3004 	str.w	r3, [r9, #4]
   19e06:	e6b4      	b.n	19b72 <_malloc_r+0x226>
   19e08:	f3ca 000b 	ubfx	r0, sl, #0, #12
   19e0c:	2800      	cmp	r0, #0
   19e0e:	f47f aeb0 	bne.w	19b72 <_malloc_r+0x226>
   19e12:	68bd      	ldr	r5, [r7, #8]
   19e14:	eb08 030b 	add.w	r3, r8, fp
   19e18:	f043 0301 	orr.w	r3, r3, #1
   19e1c:	606b      	str	r3, [r5, #4]
   19e1e:	e6f4      	b.n	19c0a <_malloc_r+0x2be>
   19e20:	4615      	mov	r5, r2
   19e22:	e6f2      	b.n	19c0a <_malloc_r+0x2be>
   19e24:	2301      	movs	r3, #1
   19e26:	6053      	str	r3, [r2, #4]
   19e28:	e792      	b.n	19d50 <_malloc_r+0x404>
   19e2a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   19e2e:	d821      	bhi.n	19e74 <_malloc_r+0x528>
   19e30:	0bd3      	lsrs	r3, r2, #15
   19e32:	f103 0178 	add.w	r1, r3, #120	; 0x78
   19e36:	00c9      	lsls	r1, r1, #3
   19e38:	3377      	adds	r3, #119	; 0x77
   19e3a:	e719      	b.n	19c70 <_malloc_r+0x324>
   19e3c:	f240 5254 	movw	r2, #1364	; 0x554
   19e40:	4293      	cmp	r3, r2
   19e42:	d821      	bhi.n	19e88 <_malloc_r+0x53c>
   19e44:	0cb3      	lsrs	r3, r6, #18
   19e46:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   19e4a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   19e4e:	00c3      	lsls	r3, r0, #3
   19e50:	e5c2      	b.n	199d8 <_malloc_r+0x8c>
   19e52:	3b08      	subs	r3, #8
   19e54:	449b      	add	fp, r3
   19e56:	ebab 0b02 	sub.w	fp, fp, r2
   19e5a:	f04f 0a00 	mov.w	sl, #0
   19e5e:	e6b0      	b.n	19bc2 <_malloc_r+0x276>
   19e60:	f105 0108 	add.w	r1, r5, #8
   19e64:	4620      	mov	r0, r4
   19e66:	f003 fb3d 	bl	1d4e4 <_free_r>
   19e6a:	68bd      	ldr	r5, [r7, #8]
   19e6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   19e70:	686b      	ldr	r3, [r5, #4]
   19e72:	e6ca      	b.n	19c0a <_malloc_r+0x2be>
   19e74:	f240 5154 	movw	r1, #1364	; 0x554
   19e78:	428b      	cmp	r3, r1
   19e7a:	d80b      	bhi.n	19e94 <_malloc_r+0x548>
   19e7c:	0c93      	lsrs	r3, r2, #18
   19e7e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   19e82:	00c9      	lsls	r1, r1, #3
   19e84:	337c      	adds	r3, #124	; 0x7c
   19e86:	e6f3      	b.n	19c70 <_malloc_r+0x324>
   19e88:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   19e8c:	207f      	movs	r0, #127	; 0x7f
   19e8e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   19e92:	e5a1      	b.n	199d8 <_malloc_r+0x8c>
   19e94:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   19e98:	237e      	movs	r3, #126	; 0x7e
   19e9a:	e6e9      	b.n	19c70 <_malloc_r+0x324>
   19e9c:	687b      	ldr	r3, [r7, #4]
   19e9e:	e770      	b.n	19d82 <_malloc_r+0x436>

00019ea0 <__malloc_lock>:
   19ea0:	4801      	ldr	r0, [pc, #4]	; (19ea8 <__malloc_lock+0x8>)
   19ea2:	f002 bfcf 	b.w	1ce44 <__retarget_lock_acquire_recursive>
   19ea6:	bf00      	nop
   19ea8:	2000e534 	.word	0x2000e534

00019eac <__malloc_unlock>:
   19eac:	4801      	ldr	r0, [pc, #4]	; (19eb4 <__malloc_unlock+0x8>)
   19eae:	f002 bfd1 	b.w	1ce54 <__retarget_lock_release_recursive>
   19eb2:	bf00      	nop
   19eb4:	2000e534 	.word	0x2000e534

00019eb8 <_realloc_r>:
   19eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ebc:	4617      	mov	r7, r2
   19ebe:	2900      	cmp	r1, #0
   19ec0:	f000 8098 	beq.w	19ff4 <_realloc_r+0x13c>
   19ec4:	460c      	mov	r4, r1
   19ec6:	f107 050b 	add.w	r5, r7, #11
   19eca:	4680      	mov	r8, r0
   19ecc:	f7ff ffe8 	bl	19ea0 <__malloc_lock>
   19ed0:	2d16      	cmp	r5, #22
   19ed2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   19ed6:	d85b      	bhi.n	19f90 <_realloc_r+0xd8>
   19ed8:	2510      	movs	r5, #16
   19eda:	462a      	mov	r2, r5
   19edc:	42af      	cmp	r7, r5
   19ede:	d85c      	bhi.n	19f9a <_realloc_r+0xe2>
   19ee0:	f021 0603 	bic.w	r6, r1, #3
   19ee4:	4296      	cmp	r6, r2
   19ee6:	f1a4 0908 	sub.w	r9, r4, #8
   19eea:	da62      	bge.n	19fb2 <_realloc_r+0xfa>
   19eec:	4bbc      	ldr	r3, [pc, #752]	; (1a1e0 <_realloc_r+0x328>)
   19eee:	f8d3 c008 	ldr.w	ip, [r3, #8]
   19ef2:	eb09 0006 	add.w	r0, r9, r6
   19ef6:	4584      	cmp	ip, r0
   19ef8:	f000 8097 	beq.w	1a02a <_realloc_r+0x172>
   19efc:	f8d0 c004 	ldr.w	ip, [r0, #4]
   19f00:	f02c 0301 	bic.w	r3, ip, #1
   19f04:	4403      	add	r3, r0
   19f06:	685b      	ldr	r3, [r3, #4]
   19f08:	07db      	lsls	r3, r3, #31
   19f0a:	d468      	bmi.n	19fde <_realloc_r+0x126>
   19f0c:	f02c 0c03 	bic.w	ip, ip, #3
   19f10:	eb06 030c 	add.w	r3, r6, ip
   19f14:	4293      	cmp	r3, r2
   19f16:	da47      	bge.n	19fa8 <_realloc_r+0xf0>
   19f18:	07cb      	lsls	r3, r1, #31
   19f1a:	d410      	bmi.n	19f3e <_realloc_r+0x86>
   19f1c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19f20:	eba9 0a03 	sub.w	sl, r9, r3
   19f24:	f8da 3004 	ldr.w	r3, [sl, #4]
   19f28:	f023 0103 	bic.w	r1, r3, #3
   19f2c:	448c      	add	ip, r1
   19f2e:	44b4      	add	ip, r6
   19f30:	4594      	cmp	ip, r2
   19f32:	f280 8111 	bge.w	1a158 <_realloc_r+0x2a0>
   19f36:	1873      	adds	r3, r6, r1
   19f38:	4293      	cmp	r3, r2
   19f3a:	f280 80e8 	bge.w	1a10e <_realloc_r+0x256>
   19f3e:	4639      	mov	r1, r7
   19f40:	4640      	mov	r0, r8
   19f42:	f7ff fd03 	bl	1994c <_malloc_r>
   19f46:	4607      	mov	r7, r0
   19f48:	b1e0      	cbz	r0, 19f84 <_realloc_r+0xcc>
   19f4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19f4e:	f023 0301 	bic.w	r3, r3, #1
   19f52:	444b      	add	r3, r9
   19f54:	f1a0 0208 	sub.w	r2, r0, #8
   19f58:	4293      	cmp	r3, r2
   19f5a:	f000 80d2 	beq.w	1a102 <_realloc_r+0x24a>
   19f5e:	1f32      	subs	r2, r6, #4
   19f60:	2a24      	cmp	r2, #36	; 0x24
   19f62:	f200 80f5 	bhi.w	1a150 <_realloc_r+0x298>
   19f66:	2a13      	cmp	r2, #19
   19f68:	f200 80ac 	bhi.w	1a0c4 <_realloc_r+0x20c>
   19f6c:	4603      	mov	r3, r0
   19f6e:	4622      	mov	r2, r4
   19f70:	6811      	ldr	r1, [r2, #0]
   19f72:	6019      	str	r1, [r3, #0]
   19f74:	6851      	ldr	r1, [r2, #4]
   19f76:	6059      	str	r1, [r3, #4]
   19f78:	6892      	ldr	r2, [r2, #8]
   19f7a:	609a      	str	r2, [r3, #8]
   19f7c:	4621      	mov	r1, r4
   19f7e:	4640      	mov	r0, r8
   19f80:	f003 fab0 	bl	1d4e4 <_free_r>
   19f84:	4640      	mov	r0, r8
   19f86:	f7ff ff91 	bl	19eac <__malloc_unlock>
   19f8a:	4638      	mov	r0, r7
   19f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f90:	f025 0507 	bic.w	r5, r5, #7
   19f94:	2d00      	cmp	r5, #0
   19f96:	462a      	mov	r2, r5
   19f98:	daa0      	bge.n	19edc <_realloc_r+0x24>
   19f9a:	230c      	movs	r3, #12
   19f9c:	f8c8 3000 	str.w	r3, [r8]
   19fa0:	2700      	movs	r7, #0
   19fa2:	4638      	mov	r0, r7
   19fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fa8:	461e      	mov	r6, r3
   19faa:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   19fae:	60d3      	str	r3, [r2, #12]
   19fb0:	609a      	str	r2, [r3, #8]
   19fb2:	1b73      	subs	r3, r6, r5
   19fb4:	2b0f      	cmp	r3, #15
   19fb6:	d822      	bhi.n	19ffe <_realloc_r+0x146>
   19fb8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19fbc:	f003 0301 	and.w	r3, r3, #1
   19fc0:	4333      	orrs	r3, r6
   19fc2:	444e      	add	r6, r9
   19fc4:	f8c9 3004 	str.w	r3, [r9, #4]
   19fc8:	6873      	ldr	r3, [r6, #4]
   19fca:	f043 0301 	orr.w	r3, r3, #1
   19fce:	6073      	str	r3, [r6, #4]
   19fd0:	4640      	mov	r0, r8
   19fd2:	4627      	mov	r7, r4
   19fd4:	f7ff ff6a 	bl	19eac <__malloc_unlock>
   19fd8:	4638      	mov	r0, r7
   19fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fde:	07c9      	lsls	r1, r1, #31
   19fe0:	d4ad      	bmi.n	19f3e <_realloc_r+0x86>
   19fe2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19fe6:	eba9 0a03 	sub.w	sl, r9, r3
   19fea:	f8da 1004 	ldr.w	r1, [sl, #4]
   19fee:	f021 0103 	bic.w	r1, r1, #3
   19ff2:	e7a0      	b.n	19f36 <_realloc_r+0x7e>
   19ff4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ff8:	4611      	mov	r1, r2
   19ffa:	f7ff bca7 	b.w	1994c <_malloc_r>
   19ffe:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1a002:	eb09 0105 	add.w	r1, r9, r5
   1a006:	f002 0201 	and.w	r2, r2, #1
   1a00a:	444e      	add	r6, r9
   1a00c:	f043 0301 	orr.w	r3, r3, #1
   1a010:	432a      	orrs	r2, r5
   1a012:	f8c9 2004 	str.w	r2, [r9, #4]
   1a016:	604b      	str	r3, [r1, #4]
   1a018:	6873      	ldr	r3, [r6, #4]
   1a01a:	f043 0301 	orr.w	r3, r3, #1
   1a01e:	3108      	adds	r1, #8
   1a020:	6073      	str	r3, [r6, #4]
   1a022:	4640      	mov	r0, r8
   1a024:	f003 fa5e 	bl	1d4e4 <_free_r>
   1a028:	e7d2      	b.n	19fd0 <_realloc_r+0x118>
   1a02a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1a02e:	f020 0b03 	bic.w	fp, r0, #3
   1a032:	eb06 0c0b 	add.w	ip, r6, fp
   1a036:	f105 0010 	add.w	r0, r5, #16
   1a03a:	4584      	cmp	ip, r0
   1a03c:	da4d      	bge.n	1a0da <_realloc_r+0x222>
   1a03e:	07c9      	lsls	r1, r1, #31
   1a040:	f53f af7d 	bmi.w	19f3e <_realloc_r+0x86>
   1a044:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1a048:	eba9 0a01 	sub.w	sl, r9, r1
   1a04c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1a050:	f021 0103 	bic.w	r1, r1, #3
   1a054:	448b      	add	fp, r1
   1a056:	44b3      	add	fp, r6
   1a058:	4558      	cmp	r0, fp
   1a05a:	f73f af6c 	bgt.w	19f36 <_realloc_r+0x7e>
   1a05e:	4657      	mov	r7, sl
   1a060:	f8da 100c 	ldr.w	r1, [sl, #12]
   1a064:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1a068:	1f32      	subs	r2, r6, #4
   1a06a:	2a24      	cmp	r2, #36	; 0x24
   1a06c:	60c1      	str	r1, [r0, #12]
   1a06e:	6088      	str	r0, [r1, #8]
   1a070:	f200 80db 	bhi.w	1a22a <_realloc_r+0x372>
   1a074:	2a13      	cmp	r2, #19
   1a076:	f240 80d6 	bls.w	1a226 <_realloc_r+0x36e>
   1a07a:	6821      	ldr	r1, [r4, #0]
   1a07c:	f8ca 1008 	str.w	r1, [sl, #8]
   1a080:	6861      	ldr	r1, [r4, #4]
   1a082:	f8ca 100c 	str.w	r1, [sl, #12]
   1a086:	2a1b      	cmp	r2, #27
   1a088:	f200 80df 	bhi.w	1a24a <_realloc_r+0x392>
   1a08c:	3408      	adds	r4, #8
   1a08e:	f10a 0210 	add.w	r2, sl, #16
   1a092:	6821      	ldr	r1, [r4, #0]
   1a094:	6011      	str	r1, [r2, #0]
   1a096:	6861      	ldr	r1, [r4, #4]
   1a098:	6051      	str	r1, [r2, #4]
   1a09a:	68a1      	ldr	r1, [r4, #8]
   1a09c:	6091      	str	r1, [r2, #8]
   1a09e:	eb0a 0105 	add.w	r1, sl, r5
   1a0a2:	ebab 0205 	sub.w	r2, fp, r5
   1a0a6:	f042 0201 	orr.w	r2, r2, #1
   1a0aa:	6099      	str	r1, [r3, #8]
   1a0ac:	604a      	str	r2, [r1, #4]
   1a0ae:	f8da 3004 	ldr.w	r3, [sl, #4]
   1a0b2:	f003 0301 	and.w	r3, r3, #1
   1a0b6:	432b      	orrs	r3, r5
   1a0b8:	4640      	mov	r0, r8
   1a0ba:	f8ca 3004 	str.w	r3, [sl, #4]
   1a0be:	f7ff fef5 	bl	19eac <__malloc_unlock>
   1a0c2:	e76e      	b.n	19fa2 <_realloc_r+0xea>
   1a0c4:	6823      	ldr	r3, [r4, #0]
   1a0c6:	6003      	str	r3, [r0, #0]
   1a0c8:	6863      	ldr	r3, [r4, #4]
   1a0ca:	6043      	str	r3, [r0, #4]
   1a0cc:	2a1b      	cmp	r2, #27
   1a0ce:	d868      	bhi.n	1a1a2 <_realloc_r+0x2ea>
   1a0d0:	f104 0208 	add.w	r2, r4, #8
   1a0d4:	f100 0308 	add.w	r3, r0, #8
   1a0d8:	e74a      	b.n	19f70 <_realloc_r+0xb8>
   1a0da:	eb09 0205 	add.w	r2, r9, r5
   1a0de:	609a      	str	r2, [r3, #8]
   1a0e0:	ebac 0305 	sub.w	r3, ip, r5
   1a0e4:	f043 0301 	orr.w	r3, r3, #1
   1a0e8:	6053      	str	r3, [r2, #4]
   1a0ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a0ee:	f003 0301 	and.w	r3, r3, #1
   1a0f2:	432b      	orrs	r3, r5
   1a0f4:	4640      	mov	r0, r8
   1a0f6:	f844 3c04 	str.w	r3, [r4, #-4]
   1a0fa:	f7ff fed7 	bl	19eac <__malloc_unlock>
   1a0fe:	4627      	mov	r7, r4
   1a100:	e74f      	b.n	19fa2 <_realloc_r+0xea>
   1a102:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1a106:	f023 0303 	bic.w	r3, r3, #3
   1a10a:	441e      	add	r6, r3
   1a10c:	e751      	b.n	19fb2 <_realloc_r+0xfa>
   1a10e:	4657      	mov	r7, sl
   1a110:	f8da 100c 	ldr.w	r1, [sl, #12]
   1a114:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1a118:	1f32      	subs	r2, r6, #4
   1a11a:	2a24      	cmp	r2, #36	; 0x24
   1a11c:	60c1      	str	r1, [r0, #12]
   1a11e:	6088      	str	r0, [r1, #8]
   1a120:	d84c      	bhi.n	1a1bc <_realloc_r+0x304>
   1a122:	2a13      	cmp	r2, #19
   1a124:	d948      	bls.n	1a1b8 <_realloc_r+0x300>
   1a126:	6821      	ldr	r1, [r4, #0]
   1a128:	f8ca 1008 	str.w	r1, [sl, #8]
   1a12c:	6861      	ldr	r1, [r4, #4]
   1a12e:	f8ca 100c 	str.w	r1, [sl, #12]
   1a132:	2a1b      	cmp	r2, #27
   1a134:	d856      	bhi.n	1a1e4 <_realloc_r+0x32c>
   1a136:	3408      	adds	r4, #8
   1a138:	f10a 0210 	add.w	r2, sl, #16
   1a13c:	461e      	mov	r6, r3
   1a13e:	6823      	ldr	r3, [r4, #0]
   1a140:	6013      	str	r3, [r2, #0]
   1a142:	6863      	ldr	r3, [r4, #4]
   1a144:	6053      	str	r3, [r2, #4]
   1a146:	68a3      	ldr	r3, [r4, #8]
   1a148:	6093      	str	r3, [r2, #8]
   1a14a:	46d1      	mov	r9, sl
   1a14c:	463c      	mov	r4, r7
   1a14e:	e730      	b.n	19fb2 <_realloc_r+0xfa>
   1a150:	4621      	mov	r1, r4
   1a152:	f001 fc85 	bl	1ba60 <memmove>
   1a156:	e711      	b.n	19f7c <_realloc_r+0xc4>
   1a158:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   1a15c:	4657      	mov	r7, sl
   1a15e:	60cb      	str	r3, [r1, #12]
   1a160:	6099      	str	r1, [r3, #8]
   1a162:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1a166:	f8da 300c 	ldr.w	r3, [sl, #12]
   1a16a:	60cb      	str	r3, [r1, #12]
   1a16c:	1f32      	subs	r2, r6, #4
   1a16e:	2a24      	cmp	r2, #36	; 0x24
   1a170:	6099      	str	r1, [r3, #8]
   1a172:	d82d      	bhi.n	1a1d0 <_realloc_r+0x318>
   1a174:	2a13      	cmp	r2, #19
   1a176:	d929      	bls.n	1a1cc <_realloc_r+0x314>
   1a178:	6823      	ldr	r3, [r4, #0]
   1a17a:	f8ca 3008 	str.w	r3, [sl, #8]
   1a17e:	6863      	ldr	r3, [r4, #4]
   1a180:	f8ca 300c 	str.w	r3, [sl, #12]
   1a184:	2a1b      	cmp	r2, #27
   1a186:	d842      	bhi.n	1a20e <_realloc_r+0x356>
   1a188:	3408      	adds	r4, #8
   1a18a:	f10a 0310 	add.w	r3, sl, #16
   1a18e:	6822      	ldr	r2, [r4, #0]
   1a190:	601a      	str	r2, [r3, #0]
   1a192:	6862      	ldr	r2, [r4, #4]
   1a194:	605a      	str	r2, [r3, #4]
   1a196:	68a2      	ldr	r2, [r4, #8]
   1a198:	609a      	str	r2, [r3, #8]
   1a19a:	4666      	mov	r6, ip
   1a19c:	46d1      	mov	r9, sl
   1a19e:	463c      	mov	r4, r7
   1a1a0:	e707      	b.n	19fb2 <_realloc_r+0xfa>
   1a1a2:	68a3      	ldr	r3, [r4, #8]
   1a1a4:	6083      	str	r3, [r0, #8]
   1a1a6:	68e3      	ldr	r3, [r4, #12]
   1a1a8:	60c3      	str	r3, [r0, #12]
   1a1aa:	2a24      	cmp	r2, #36	; 0x24
   1a1ac:	d026      	beq.n	1a1fc <_realloc_r+0x344>
   1a1ae:	f104 0210 	add.w	r2, r4, #16
   1a1b2:	f100 0310 	add.w	r3, r0, #16
   1a1b6:	e6db      	b.n	19f70 <_realloc_r+0xb8>
   1a1b8:	463a      	mov	r2, r7
   1a1ba:	e7bf      	b.n	1a13c <_realloc_r+0x284>
   1a1bc:	4621      	mov	r1, r4
   1a1be:	4638      	mov	r0, r7
   1a1c0:	461e      	mov	r6, r3
   1a1c2:	46d1      	mov	r9, sl
   1a1c4:	f001 fc4c 	bl	1ba60 <memmove>
   1a1c8:	463c      	mov	r4, r7
   1a1ca:	e6f2      	b.n	19fb2 <_realloc_r+0xfa>
   1a1cc:	463b      	mov	r3, r7
   1a1ce:	e7de      	b.n	1a18e <_realloc_r+0x2d6>
   1a1d0:	4621      	mov	r1, r4
   1a1d2:	4638      	mov	r0, r7
   1a1d4:	4666      	mov	r6, ip
   1a1d6:	46d1      	mov	r9, sl
   1a1d8:	f001 fc42 	bl	1ba60 <memmove>
   1a1dc:	463c      	mov	r4, r7
   1a1de:	e6e8      	b.n	19fb2 <_realloc_r+0xfa>
   1a1e0:	20008f84 	.word	0x20008f84
   1a1e4:	68a1      	ldr	r1, [r4, #8]
   1a1e6:	f8ca 1010 	str.w	r1, [sl, #16]
   1a1ea:	68e1      	ldr	r1, [r4, #12]
   1a1ec:	f8ca 1014 	str.w	r1, [sl, #20]
   1a1f0:	2a24      	cmp	r2, #36	; 0x24
   1a1f2:	d020      	beq.n	1a236 <_realloc_r+0x37e>
   1a1f4:	3410      	adds	r4, #16
   1a1f6:	f10a 0218 	add.w	r2, sl, #24
   1a1fa:	e79f      	b.n	1a13c <_realloc_r+0x284>
   1a1fc:	6923      	ldr	r3, [r4, #16]
   1a1fe:	6103      	str	r3, [r0, #16]
   1a200:	6961      	ldr	r1, [r4, #20]
   1a202:	6141      	str	r1, [r0, #20]
   1a204:	f104 0218 	add.w	r2, r4, #24
   1a208:	f100 0318 	add.w	r3, r0, #24
   1a20c:	e6b0      	b.n	19f70 <_realloc_r+0xb8>
   1a20e:	68a3      	ldr	r3, [r4, #8]
   1a210:	f8ca 3010 	str.w	r3, [sl, #16]
   1a214:	68e3      	ldr	r3, [r4, #12]
   1a216:	f8ca 3014 	str.w	r3, [sl, #20]
   1a21a:	2a24      	cmp	r2, #36	; 0x24
   1a21c:	d021      	beq.n	1a262 <_realloc_r+0x3aa>
   1a21e:	3410      	adds	r4, #16
   1a220:	f10a 0318 	add.w	r3, sl, #24
   1a224:	e7b3      	b.n	1a18e <_realloc_r+0x2d6>
   1a226:	463a      	mov	r2, r7
   1a228:	e733      	b.n	1a092 <_realloc_r+0x1da>
   1a22a:	4621      	mov	r1, r4
   1a22c:	4638      	mov	r0, r7
   1a22e:	f001 fc17 	bl	1ba60 <memmove>
   1a232:	4b16      	ldr	r3, [pc, #88]	; (1a28c <_realloc_r+0x3d4>)
   1a234:	e733      	b.n	1a09e <_realloc_r+0x1e6>
   1a236:	6922      	ldr	r2, [r4, #16]
   1a238:	f8ca 2018 	str.w	r2, [sl, #24]
   1a23c:	6962      	ldr	r2, [r4, #20]
   1a23e:	f8ca 201c 	str.w	r2, [sl, #28]
   1a242:	3418      	adds	r4, #24
   1a244:	f10a 0220 	add.w	r2, sl, #32
   1a248:	e778      	b.n	1a13c <_realloc_r+0x284>
   1a24a:	68a1      	ldr	r1, [r4, #8]
   1a24c:	f8ca 1010 	str.w	r1, [sl, #16]
   1a250:	68e1      	ldr	r1, [r4, #12]
   1a252:	f8ca 1014 	str.w	r1, [sl, #20]
   1a256:	2a24      	cmp	r2, #36	; 0x24
   1a258:	d00d      	beq.n	1a276 <_realloc_r+0x3be>
   1a25a:	3410      	adds	r4, #16
   1a25c:	f10a 0218 	add.w	r2, sl, #24
   1a260:	e717      	b.n	1a092 <_realloc_r+0x1da>
   1a262:	6923      	ldr	r3, [r4, #16]
   1a264:	f8ca 3018 	str.w	r3, [sl, #24]
   1a268:	6963      	ldr	r3, [r4, #20]
   1a26a:	f8ca 301c 	str.w	r3, [sl, #28]
   1a26e:	3418      	adds	r4, #24
   1a270:	f10a 0320 	add.w	r3, sl, #32
   1a274:	e78b      	b.n	1a18e <_realloc_r+0x2d6>
   1a276:	6922      	ldr	r2, [r4, #16]
   1a278:	f8ca 2018 	str.w	r2, [sl, #24]
   1a27c:	6962      	ldr	r2, [r4, #20]
   1a27e:	f8ca 201c 	str.w	r2, [sl, #28]
   1a282:	3418      	adds	r4, #24
   1a284:	f10a 0220 	add.w	r2, sl, #32
   1a288:	e703      	b.n	1a092 <_realloc_r+0x1da>
   1a28a:	bf00      	nop
   1a28c:	20008f84 	.word	0x20008f84

0001a290 <_strtod_l>:
   1a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a294:	ed2d 8b10 	vpush	{d8-d15}
   1a298:	b097      	sub	sp, #92	; 0x5c
   1a29a:	468a      	mov	sl, r1
   1a29c:	2100      	movs	r1, #0
   1a29e:	9207      	str	r2, [sp, #28]
   1a2a0:	9112      	str	r1, [sp, #72]	; 0x48
   1a2a2:	2200      	movs	r2, #0
   1a2a4:	2100      	movs	r1, #0
   1a2a6:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1a2aa:	4680      	mov	r8, r0
   1a2ac:	4651      	mov	r1, sl
   1a2ae:	9111      	str	r1, [sp, #68]	; 0x44
   1a2b0:	460f      	mov	r7, r1
   1a2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a2b6:	2a2d      	cmp	r2, #45	; 0x2d
   1a2b8:	d85e      	bhi.n	1a378 <_strtod_l+0xe8>
   1a2ba:	a001      	add	r0, pc, #4	; (adr r0, 1a2c0 <_strtod_l+0x30>)
   1a2bc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   1a2c0:	0001a461 	.word	0x0001a461
   1a2c4:	0001a379 	.word	0x0001a379
   1a2c8:	0001a379 	.word	0x0001a379
   1a2cc:	0001a379 	.word	0x0001a379
   1a2d0:	0001a379 	.word	0x0001a379
   1a2d4:	0001a379 	.word	0x0001a379
   1a2d8:	0001a379 	.word	0x0001a379
   1a2dc:	0001a379 	.word	0x0001a379
   1a2e0:	0001a379 	.word	0x0001a379
   1a2e4:	0001a2af 	.word	0x0001a2af
   1a2e8:	0001a2af 	.word	0x0001a2af
   1a2ec:	0001a2af 	.word	0x0001a2af
   1a2f0:	0001a2af 	.word	0x0001a2af
   1a2f4:	0001a2af 	.word	0x0001a2af
   1a2f8:	0001a379 	.word	0x0001a379
   1a2fc:	0001a379 	.word	0x0001a379
   1a300:	0001a379 	.word	0x0001a379
   1a304:	0001a379 	.word	0x0001a379
   1a308:	0001a379 	.word	0x0001a379
   1a30c:	0001a379 	.word	0x0001a379
   1a310:	0001a379 	.word	0x0001a379
   1a314:	0001a379 	.word	0x0001a379
   1a318:	0001a379 	.word	0x0001a379
   1a31c:	0001a379 	.word	0x0001a379
   1a320:	0001a379 	.word	0x0001a379
   1a324:	0001a379 	.word	0x0001a379
   1a328:	0001a379 	.word	0x0001a379
   1a32c:	0001a379 	.word	0x0001a379
   1a330:	0001a379 	.word	0x0001a379
   1a334:	0001a379 	.word	0x0001a379
   1a338:	0001a379 	.word	0x0001a379
   1a33c:	0001a379 	.word	0x0001a379
   1a340:	0001a2af 	.word	0x0001a2af
   1a344:	0001a379 	.word	0x0001a379
   1a348:	0001a379 	.word	0x0001a379
   1a34c:	0001a379 	.word	0x0001a379
   1a350:	0001a379 	.word	0x0001a379
   1a354:	0001a379 	.word	0x0001a379
   1a358:	0001a379 	.word	0x0001a379
   1a35c:	0001a379 	.word	0x0001a379
   1a360:	0001a379 	.word	0x0001a379
   1a364:	0001a379 	.word	0x0001a379
   1a368:	0001a379 	.word	0x0001a379
   1a36c:	0001aa9b 	.word	0x0001aa9b
   1a370:	0001a379 	.word	0x0001a379
   1a374:	0001aa87 	.word	0x0001aa87
   1a378:	2100      	movs	r1, #0
   1a37a:	9109      	str	r1, [sp, #36]	; 0x24
   1a37c:	2a30      	cmp	r2, #48	; 0x30
   1a37e:	d07d      	beq.n	1a47c <_strtod_l+0x1ec>
   1a380:	2300      	movs	r3, #0
   1a382:	9308      	str	r3, [sp, #32]
   1a384:	2a2f      	cmp	r2, #47	; 0x2f
   1a386:	4614      	mov	r4, r2
   1a388:	f240 84cd 	bls.w	1ad26 <_strtod_l+0xa96>
   1a38c:	f04f 0900 	mov.w	r9, #0
   1a390:	4638      	mov	r0, r7
   1a392:	464e      	mov	r6, r9
   1a394:	464d      	mov	r5, r9
   1a396:	e012      	b.n	1a3be <_strtod_l+0x12e>
   1a398:	3001      	adds	r0, #1
   1a39a:	2d08      	cmp	r5, #8
   1a39c:	9011      	str	r0, [sp, #68]	; 0x44
   1a39e:	bfc8      	it	gt
   1a3a0:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   1a3a4:	7804      	ldrb	r4, [r0, #0]
   1a3a6:	bfc6      	itte	gt
   1a3a8:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   1a3ac:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   1a3b0:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   1a3b4:	2c2f      	cmp	r4, #47	; 0x2f
   1a3b6:	f105 0501 	add.w	r5, r5, #1
   1a3ba:	4622      	mov	r2, r4
   1a3bc:	dd6f      	ble.n	1a49e <_strtod_l+0x20e>
   1a3be:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1a3c2:	2c39      	cmp	r4, #57	; 0x39
   1a3c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1a3c8:	dde6      	ble.n	1a398 <_strtod_l+0x108>
   1a3ca:	499f      	ldr	r1, [pc, #636]	; (1a648 <_strtod_l+0x3b8>)
   1a3cc:	2201      	movs	r2, #1
   1a3ce:	f001 fca9 	bl	1bd24 <strncmp>
   1a3d2:	2800      	cmp	r0, #0
   1a3d4:	d137      	bne.n	1a446 <_strtod_l+0x1b6>
   1a3d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a3d8:	461a      	mov	r2, r3
   1a3da:	3301      	adds	r3, #1
   1a3dc:	9311      	str	r3, [sp, #68]	; 0x44
   1a3de:	7854      	ldrb	r4, [r2, #1]
   1a3e0:	2d00      	cmp	r5, #0
   1a3e2:	f040 8543 	bne.w	1ae6c <_strtod_l+0xbdc>
   1a3e6:	2c30      	cmp	r4, #48	; 0x30
   1a3e8:	f040 8524 	bne.w	1ae34 <_strtod_l+0xba4>
   1a3ec:	f1c3 0201 	rsb	r2, r3, #1
   1a3f0:	1898      	adds	r0, r3, r2
   1a3f2:	3301      	adds	r3, #1
   1a3f4:	9311      	str	r3, [sp, #68]	; 0x44
   1a3f6:	781c      	ldrb	r4, [r3, #0]
   1a3f8:	2c30      	cmp	r4, #48	; 0x30
   1a3fa:	d0f9      	beq.n	1a3f0 <_strtod_l+0x160>
   1a3fc:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   1a400:	2b08      	cmp	r3, #8
   1a402:	f200 8301 	bhi.w	1aa08 <_strtod_l+0x778>
   1a406:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1a408:	1c43      	adds	r3, r0, #1
   1a40a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1a40e:	930b      	str	r3, [sp, #44]	; 0x2c
   1a410:	2501      	movs	r5, #1
   1a412:	46bc      	mov	ip, r7
   1a414:	f04f 0e00 	mov.w	lr, #0
   1a418:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1a41c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   1a420:	2000      	movs	r0, #0
   1a422:	f10c 0301 	add.w	r3, ip, #1
   1a426:	9311      	str	r3, [sp, #68]	; 0x44
   1a428:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1a42c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   1a430:	2909      	cmp	r1, #9
   1a432:	f200 82bb 	bhi.w	1a9ac <_strtod_l+0x71c>
   1a436:	3001      	adds	r0, #1
   1a438:	468b      	mov	fp, r1
   1a43a:	2900      	cmp	r1, #0
   1a43c:	f040 844f 	bne.w	1acde <_strtod_l+0xa4e>
   1a440:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1a444:	e7ed      	b.n	1a422 <_strtod_l+0x192>
   1a446:	2000      	movs	r0, #0
   1a448:	2c65      	cmp	r4, #101	; 0x65
   1a44a:	46ae      	mov	lr, r5
   1a44c:	900b      	str	r0, [sp, #44]	; 0x2c
   1a44e:	4684      	mov	ip, r0
   1a450:	d001      	beq.n	1a456 <_strtod_l+0x1c6>
   1a452:	2c45      	cmp	r4, #69	; 0x45
   1a454:	d130      	bne.n	1a4b8 <_strtod_l+0x228>
   1a456:	2d00      	cmp	r5, #0
   1a458:	d16b      	bne.n	1a532 <_strtod_l+0x2a2>
   1a45a:	9b08      	ldr	r3, [sp, #32]
   1a45c:	4303      	orrs	r3, r0
   1a45e:	d167      	bne.n	1a530 <_strtod_l+0x2a0>
   1a460:	9b07      	ldr	r3, [sp, #28]
   1a462:	ed9f 8b77 	vldr	d8, [pc, #476]	; 1a640 <_strtod_l+0x3b0>
   1a466:	b113      	cbz	r3, 1a46e <_strtod_l+0x1de>
   1a468:	9b07      	ldr	r3, [sp, #28]
   1a46a:	f8c3 a000 	str.w	sl, [r3]
   1a46e:	eeb0 0b48 	vmov.f64	d0, d8
   1a472:	b017      	add	sp, #92	; 0x5c
   1a474:	ecbd 8b10 	vpop	{d8-d15}
   1a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a47c:	787a      	ldrb	r2, [r7, #1]
   1a47e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1a482:	2a58      	cmp	r2, #88	; 0x58
   1a484:	f000 840c 	beq.w	1aca0 <_strtod_l+0xa10>
   1a488:	3701      	adds	r7, #1
   1a48a:	9711      	str	r7, [sp, #68]	; 0x44
   1a48c:	783a      	ldrb	r2, [r7, #0]
   1a48e:	2a30      	cmp	r2, #48	; 0x30
   1a490:	d0fa      	beq.n	1a488 <_strtod_l+0x1f8>
   1a492:	2a00      	cmp	r2, #0
   1a494:	f000 80b7 	beq.w	1a606 <_strtod_l+0x376>
   1a498:	2301      	movs	r3, #1
   1a49a:	9308      	str	r3, [sp, #32]
   1a49c:	e772      	b.n	1a384 <_strtod_l+0xf4>
   1a49e:	496a      	ldr	r1, [pc, #424]	; (1a648 <_strtod_l+0x3b8>)
   1a4a0:	2201      	movs	r2, #1
   1a4a2:	f001 fc3f 	bl	1bd24 <strncmp>
   1a4a6:	2800      	cmp	r0, #0
   1a4a8:	f000 80c0 	beq.w	1a62c <_strtod_l+0x39c>
   1a4ac:	46ae      	mov	lr, r5
   1a4ae:	f04f 0c00 	mov.w	ip, #0
   1a4b2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1a4b6:	4660      	mov	r0, ip
   1a4b8:	f04f 0b00 	mov.w	fp, #0
   1a4bc:	2d00      	cmp	r5, #0
   1a4be:	d07e      	beq.n	1a5be <_strtod_l+0x32e>
   1a4c0:	ee07 6a90 	vmov	s15, r6
   1a4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a4c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   1a4ca:	ebab 0303 	sub.w	r3, fp, r3
   1a4ce:	f1be 0f00 	cmp.w	lr, #0
   1a4d2:	bf08      	it	eq
   1a4d4:	46ae      	moveq	lr, r5
   1a4d6:	2d10      	cmp	r5, #16
   1a4d8:	930a      	str	r3, [sp, #40]	; 0x28
   1a4da:	462b      	mov	r3, r5
   1a4dc:	bfa8      	it	ge
   1a4de:	2310      	movge	r3, #16
   1a4e0:	2d09      	cmp	r5, #9
   1a4e2:	ed8d 7b04 	vstr	d7, [sp, #16]
   1a4e6:	dd0c      	ble.n	1a502 <_strtod_l+0x272>
   1a4e8:	4a58      	ldr	r2, [pc, #352]	; (1a64c <_strtod_l+0x3bc>)
   1a4ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a4ee:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   1a4f2:	ee06 9a90 	vmov	s13, r9
   1a4f6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   1a4fa:	eea7 6b05 	vfma.f64	d6, d7, d5
   1a4fe:	ed8d 6b04 	vstr	d6, [sp, #16]
   1a502:	2d0f      	cmp	r5, #15
   1a504:	f300 80a8 	bgt.w	1a658 <_strtod_l+0x3c8>
   1a508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a50a:	2a00      	cmp	r2, #0
   1a50c:	f000 83e4 	beq.w	1acd8 <_strtod_l+0xa48>
   1a510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a512:	f340 833c 	ble.w	1ab8e <_strtod_l+0x8fe>
   1a516:	2a16      	cmp	r2, #22
   1a518:	f340 8498 	ble.w	1ae4c <_strtod_l+0xbbc>
   1a51c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a51e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   1a522:	428a      	cmp	r2, r1
   1a524:	f280 84a6 	bge.w	1ae74 <_strtod_l+0xbe4>
   1a528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a52a:	1aeb      	subs	r3, r5, r3
   1a52c:	4413      	add	r3, r2
   1a52e:	e099      	b.n	1a664 <_strtod_l+0x3d4>
   1a530:	2500      	movs	r5, #0
   1a532:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   1a536:	f10a 0301 	add.w	r3, sl, #1
   1a53a:	9311      	str	r3, [sp, #68]	; 0x44
   1a53c:	f89a 4001 	ldrb.w	r4, [sl, #1]
   1a540:	2c2b      	cmp	r4, #43	; 0x2b
   1a542:	f000 825e 	beq.w	1aa02 <_strtod_l+0x772>
   1a546:	2c2d      	cmp	r4, #45	; 0x2d
   1a548:	f000 81f7 	beq.w	1a93a <_strtod_l+0x6aa>
   1a54c:	2300      	movs	r3, #0
   1a54e:	930a      	str	r3, [sp, #40]	; 0x28
   1a550:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1a554:	2b09      	cmp	r3, #9
   1a556:	f200 81eb 	bhi.w	1a930 <_strtod_l+0x6a0>
   1a55a:	2c30      	cmp	r4, #48	; 0x30
   1a55c:	d105      	bne.n	1a56a <_strtod_l+0x2da>
   1a55e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a560:	3301      	adds	r3, #1
   1a562:	9311      	str	r3, [sp, #68]	; 0x44
   1a564:	781c      	ldrb	r4, [r3, #0]
   1a566:	2c30      	cmp	r4, #48	; 0x30
   1a568:	d0fa      	beq.n	1a560 <_strtod_l+0x2d0>
   1a56a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   1a56e:	2b08      	cmp	r3, #8
   1a570:	d8a2      	bhi.n	1a4b8 <_strtod_l+0x228>
   1a572:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a574:	920c      	str	r2, [sp, #48]	; 0x30
   1a576:	1c53      	adds	r3, r2, #1
   1a578:	9311      	str	r3, [sp, #68]	; 0x44
   1a57a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1a57e:	7854      	ldrb	r4, [r2, #1]
   1a580:	2c2f      	cmp	r4, #47	; 0x2f
   1a582:	dc07      	bgt.n	1a594 <_strtod_l+0x304>
   1a584:	e3de      	b.n	1ad44 <_strtod_l+0xab4>
   1a586:	3301      	adds	r3, #1
   1a588:	9311      	str	r3, [sp, #68]	; 0x44
   1a58a:	784c      	ldrb	r4, [r1, #1]
   1a58c:	2c2f      	cmp	r4, #47	; 0x2f
   1a58e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   1a592:	dd06      	ble.n	1a5a2 <_strtod_l+0x312>
   1a594:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   1a598:	2c39      	cmp	r4, #57	; 0x39
   1a59a:	4619      	mov	r1, r3
   1a59c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   1a5a0:	ddf1      	ble.n	1a586 <_strtod_l+0x2f6>
   1a5a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a5a4:	1a9b      	subs	r3, r3, r2
   1a5a6:	2b08      	cmp	r3, #8
   1a5a8:	f340 83cc 	ble.w	1ad44 <_strtod_l+0xab4>
   1a5ac:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   1a5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a5b2:	2b00      	cmp	r3, #0
   1a5b4:	d082      	beq.n	1a4bc <_strtod_l+0x22c>
   1a5b6:	f1cb 0b00 	rsb	fp, fp, #0
   1a5ba:	2d00      	cmp	r5, #0
   1a5bc:	d180      	bne.n	1a4c0 <_strtod_l+0x230>
   1a5be:	9b08      	ldr	r3, [sp, #32]
   1a5c0:	4303      	orrs	r3, r0
   1a5c2:	d120      	bne.n	1a606 <_strtod_l+0x376>
   1a5c4:	f1bc 0f00 	cmp.w	ip, #0
   1a5c8:	f47f af4a 	bne.w	1a460 <_strtod_l+0x1d0>
   1a5cc:	2c69      	cmp	r4, #105	; 0x69
   1a5ce:	f000 83cf 	beq.w	1ad70 <_strtod_l+0xae0>
   1a5d2:	f300 82f3 	bgt.w	1abbc <_strtod_l+0x92c>
   1a5d6:	2c49      	cmp	r4, #73	; 0x49
   1a5d8:	f000 83ca 	beq.w	1ad70 <_strtod_l+0xae0>
   1a5dc:	2c4e      	cmp	r4, #78	; 0x4e
   1a5de:	f47f af3f 	bne.w	1a460 <_strtod_l+0x1d0>
   1a5e2:	491b      	ldr	r1, [pc, #108]	; (1a650 <_strtod_l+0x3c0>)
   1a5e4:	a811      	add	r0, sp, #68	; 0x44
   1a5e6:	f003 fb9f 	bl	1dd28 <__match>
   1a5ea:	2800      	cmp	r0, #0
   1a5ec:	f43f af38 	beq.w	1a460 <_strtod_l+0x1d0>
   1a5f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a5f2:	781b      	ldrb	r3, [r3, #0]
   1a5f4:	2b28      	cmp	r3, #40	; 0x28
   1a5f6:	f000 84f2 	beq.w	1afde <_strtod_l+0xd4e>
   1a5fa:	4816      	ldr	r0, [pc, #88]	; (1a654 <_strtod_l+0x3c4>)
   1a5fc:	f002 fed0 	bl	1d3a0 <nan>
   1a600:	eeb0 8b40 	vmov.f64	d8, d0
   1a604:	e001      	b.n	1a60a <_strtod_l+0x37a>
   1a606:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 1a640 <_strtod_l+0x3b0>
   1a60a:	9a07      	ldr	r2, [sp, #28]
   1a60c:	b10a      	cbz	r2, 1a612 <_strtod_l+0x382>
   1a60e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a610:	6013      	str	r3, [r2, #0]
   1a612:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a614:	2b00      	cmp	r3, #0
   1a616:	f43f af2a 	beq.w	1a46e <_strtod_l+0x1de>
   1a61a:	eeb1 8b48 	vneg.f64	d8, d8
   1a61e:	eeb0 0b48 	vmov.f64	d0, d8
   1a622:	b017      	add	sp, #92	; 0x5c
   1a624:	ecbd 8b10 	vpop	{d8-d15}
   1a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a62c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a62e:	900b      	str	r0, [sp, #44]	; 0x2c
   1a630:	1c5a      	adds	r2, r3, #1
   1a632:	9211      	str	r2, [sp, #68]	; 0x44
   1a634:	785c      	ldrb	r4, [r3, #1]
   1a636:	46ae      	mov	lr, r5
   1a638:	e6f8      	b.n	1a42c <_strtod_l+0x19c>
   1a63a:	bf00      	nop
   1a63c:	f3af 8000 	nop.w
	...
   1a648:	20008af4 	.word	0x20008af4
   1a64c:	20001cd8 	.word	0x20001cd8
   1a650:	20008b04 	.word	0x20008b04
   1a654:	2000577c 	.word	0x2000577c
   1a658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a65a:	1aeb      	subs	r3, r5, r3
   1a65c:	4413      	add	r3, r2
   1a65e:	2b00      	cmp	r3, #0
   1a660:	f340 82b0 	ble.w	1abc4 <_strtod_l+0x934>
   1a664:	f013 010f 	ands.w	r1, r3, #15
   1a668:	d00a      	beq.n	1a680 <_strtod_l+0x3f0>
   1a66a:	4ac3      	ldr	r2, [pc, #780]	; (1a978 <_strtod_l+0x6e8>)
   1a66c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1a670:	ed9d 6b04 	vldr	d6, [sp, #16]
   1a674:	ed92 7b00 	vldr	d7, [r2]
   1a678:	ee27 7b06 	vmul.f64	d7, d7, d6
   1a67c:	ed8d 7b04 	vstr	d7, [sp, #16]
   1a680:	f033 020f 	bics.w	r2, r3, #15
   1a684:	f040 8238 	bne.w	1aaf8 <_strtod_l+0x868>
   1a688:	2300      	movs	r3, #0
   1a68a:	9308      	str	r3, [sp, #32]
   1a68c:	9600      	str	r6, [sp, #0]
   1a68e:	462b      	mov	r3, r5
   1a690:	4672      	mov	r2, lr
   1a692:	4639      	mov	r1, r7
   1a694:	4640      	mov	r0, r8
   1a696:	f003 ff59 	bl	1e54c <__s2b>
   1a69a:	4681      	mov	r9, r0
   1a69c:	2800      	cmp	r0, #0
   1a69e:	f000 82e1 	beq.w	1ac64 <_strtod_l+0x9d4>
   1a6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a6a4:	eba3 0b0b 	sub.w	fp, r3, fp
   1a6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a6aa:	ed9f eba9 	vldr	d14, [pc, #676]	; 1a950 <_strtod_l+0x6c0>
   1a6ae:	2b00      	cmp	r3, #0
   1a6b0:	ed9f cba9 	vldr	d12, [pc, #676]	; 1a958 <_strtod_l+0x6c8>
   1a6b4:	ed9f dbaa 	vldr	d13, [pc, #680]	; 1a960 <_strtod_l+0x6d0>
   1a6b8:	ed9f bbab 	vldr	d11, [pc, #684]	; 1a968 <_strtod_l+0x6d8>
   1a6bc:	bfb4      	ite	lt
   1a6be:	465a      	movlt	r2, fp
   1a6c0:	2200      	movge	r2, #0
   1a6c2:	f04f 0a00 	mov.w	sl, #0
   1a6c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a6ca:	920b      	str	r2, [sp, #44]	; 0x2c
   1a6cc:	930c      	str	r3, [sp, #48]	; 0x30
   1a6ce:	4654      	mov	r4, sl
   1a6d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a6d4:	4640      	mov	r0, r8
   1a6d6:	f003 feb7 	bl	1e448 <_Balloc>
   1a6da:	4606      	mov	r6, r0
   1a6dc:	2800      	cmp	r0, #0
   1a6de:	f000 810e 	beq.w	1a8fe <_strtod_l+0x66e>
   1a6e2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a6e6:	ed9d 8b04 	vldr	d8, [sp, #16]
   1a6ea:	3202      	adds	r2, #2
   1a6ec:	0092      	lsls	r2, r2, #2
   1a6ee:	f109 010c 	add.w	r1, r9, #12
   1a6f2:	300c      	adds	r0, #12
   1a6f4:	f7fb ffd6 	bl	166a4 <memcpy>
   1a6f8:	eeb0 0b48 	vmov.f64	d0, d8
   1a6fc:	aa14      	add	r2, sp, #80	; 0x50
   1a6fe:	a913      	add	r1, sp, #76	; 0x4c
   1a700:	4640      	mov	r0, r8
   1a702:	f004 fadf 	bl	1ecc4 <__d2b>
   1a706:	9012      	str	r0, [sp, #72]	; 0x48
   1a708:	2800      	cmp	r0, #0
   1a70a:	f000 80e4 	beq.w	1a8d6 <_strtod_l+0x646>
   1a70e:	2101      	movs	r1, #1
   1a710:	4640      	mov	r0, r8
   1a712:	f003 ffc3 	bl	1e69c <__i2b>
   1a716:	4604      	mov	r4, r0
   1a718:	2800      	cmp	r0, #0
   1a71a:	f000 80f0 	beq.w	1a8fe <_strtod_l+0x66e>
   1a71e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a720:	2a00      	cmp	r2, #0
   1a722:	f2c0 80de 	blt.w	1a8e2 <_strtod_l+0x652>
   1a726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a728:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1a72a:	eb02 0b03 	add.w	fp, r2, r3
   1a72e:	9b08      	ldr	r3, [sp, #32]
   1a730:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1a732:	1ad2      	subs	r2, r2, r3
   1a734:	442a      	add	r2, r5
   1a736:	4b91      	ldr	r3, [pc, #580]	; (1a97c <_strtod_l+0x6ec>)
   1a738:	3a01      	subs	r2, #1
   1a73a:	429a      	cmp	r2, r3
   1a73c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   1a740:	f280 8098 	bge.w	1a874 <_strtod_l+0x5e4>
   1a744:	1a99      	subs	r1, r3, r2
   1a746:	291f      	cmp	r1, #31
   1a748:	eba5 0501 	sub.w	r5, r5, r1
   1a74c:	f300 80e3 	bgt.w	1a916 <_strtod_l+0x686>
   1a750:	2201      	movs	r2, #1
   1a752:	fa02 f301 	lsl.w	r3, r2, r1
   1a756:	930d      	str	r3, [sp, #52]	; 0x34
   1a758:	2300      	movs	r3, #0
   1a75a:	930e      	str	r3, [sp, #56]	; 0x38
   1a75c:	442f      	add	r7, r5
   1a75e:	9b08      	ldr	r3, [sp, #32]
   1a760:	445d      	add	r5, fp
   1a762:	45ab      	cmp	fp, r5
   1a764:	465a      	mov	r2, fp
   1a766:	441f      	add	r7, r3
   1a768:	bfa8      	it	ge
   1a76a:	462a      	movge	r2, r5
   1a76c:	42ba      	cmp	r2, r7
   1a76e:	bfa8      	it	ge
   1a770:	463a      	movge	r2, r7
   1a772:	2a00      	cmp	r2, #0
   1a774:	dd03      	ble.n	1a77e <_strtod_l+0x4ee>
   1a776:	1aad      	subs	r5, r5, r2
   1a778:	1abf      	subs	r7, r7, r2
   1a77a:	ebab 0b02 	sub.w	fp, fp, r2
   1a77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a780:	2b00      	cmp	r3, #0
   1a782:	f300 8088 	bgt.w	1a896 <_strtod_l+0x606>
   1a786:	2d00      	cmp	r5, #0
   1a788:	f300 809c 	bgt.w	1a8c4 <_strtod_l+0x634>
   1a78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a78e:	2b00      	cmp	r3, #0
   1a790:	f300 80b7 	bgt.w	1a902 <_strtod_l+0x672>
   1a794:	2f00      	cmp	r7, #0
   1a796:	f300 80a9 	bgt.w	1a8ec <_strtod_l+0x65c>
   1a79a:	f1bb 0f00 	cmp.w	fp, #0
   1a79e:	dd08      	ble.n	1a7b2 <_strtod_l+0x522>
   1a7a0:	4621      	mov	r1, r4
   1a7a2:	465a      	mov	r2, fp
   1a7a4:	4640      	mov	r0, r8
   1a7a6:	f004 f8b5 	bl	1e914 <__lshift>
   1a7aa:	4604      	mov	r4, r0
   1a7ac:	2800      	cmp	r0, #0
   1a7ae:	f000 80a6 	beq.w	1a8fe <_strtod_l+0x66e>
   1a7b2:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a7b4:	4632      	mov	r2, r6
   1a7b6:	4640      	mov	r0, r8
   1a7b8:	f004 f946 	bl	1ea48 <__mdiff>
   1a7bc:	4682      	mov	sl, r0
   1a7be:	2800      	cmp	r0, #0
   1a7c0:	f000 809d 	beq.w	1a8fe <_strtod_l+0x66e>
   1a7c4:	2300      	movs	r3, #0
   1a7c6:	68c5      	ldr	r5, [r0, #12]
   1a7c8:	60c3      	str	r3, [r0, #12]
   1a7ca:	4621      	mov	r1, r4
   1a7cc:	f004 f91a 	bl	1ea04 <__mcmp>
   1a7d0:	2800      	cmp	r0, #0
   1a7d2:	f2c0 83c7 	blt.w	1af64 <_strtod_l+0xcd4>
   1a7d6:	f000 8361 	beq.w	1ae9c <_strtod_l+0xc0c>
   1a7da:	4621      	mov	r1, r4
   1a7dc:	4650      	mov	r0, sl
   1a7de:	f004 fadb 	bl	1ed98 <__ratio>
   1a7e2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   1a7e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1a7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a7ee:	d846      	bhi.n	1a87e <_strtod_l+0x5ee>
   1a7f0:	2d00      	cmp	r5, #0
   1a7f2:	f000 80cb 	beq.w	1a98c <_strtod_l+0x6fc>
   1a7f6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   1a7fa:	9805      	ldr	r0, [sp, #20]
   1a7fc:	4b60      	ldr	r3, [pc, #384]	; (1a980 <_strtod_l+0x6f0>)
   1a7fe:	2200      	movs	r2, #0
   1a800:	4960      	ldr	r1, [pc, #384]	; (1a984 <_strtod_l+0x6f4>)
   1a802:	f8df c184 	ldr.w	ip, [pc, #388]	; 1a988 <_strtod_l+0x6f8>
   1a806:	ea00 0701 	and.w	r7, r0, r1
   1a80a:	4567      	cmp	r7, ip
   1a80c:	f000 80d4 	beq.w	1a9b8 <_strtod_l+0x728>
   1a810:	9908      	ldr	r1, [sp, #32]
   1a812:	b159      	cbz	r1, 1a82c <_strtod_l+0x59c>
   1a814:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   1a818:	d808      	bhi.n	1a82c <_strtod_l+0x59c>
   1a81a:	eeb4 9bcb 	vcmpe.f64	d9, d11
   1a81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a822:	f240 8156 	bls.w	1aad2 <_strtod_l+0x842>
   1a826:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   1a82a:	1bcb      	subs	r3, r1, r7
   1a82c:	eeb0 0b48 	vmov.f64	d0, d8
   1a830:	ec43 2b1a 	vmov	d10, r2, r3
   1a834:	f004 f9b2 	bl	1eb9c <__ulp>
   1a838:	eeaa 8b00 	vfma.f64	d8, d10, d0
   1a83c:	ed8d 8b04 	vstr	d8, [sp, #16]
   1a840:	ee18 3a90 	vmov	r3, s17
   1a844:	9a08      	ldr	r2, [sp, #32]
   1a846:	b922      	cbnz	r2, 1a852 <_strtod_l+0x5c2>
   1a848:	4a4e      	ldr	r2, [pc, #312]	; (1a984 <_strtod_l+0x6f4>)
   1a84a:	401a      	ands	r2, r3
   1a84c:	4297      	cmp	r7, r2
   1a84e:	f000 80e4 	beq.w	1aa1a <_strtod_l+0x78a>
   1a852:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a854:	4640      	mov	r0, r8
   1a856:	f003 fe1d 	bl	1e494 <_Bfree>
   1a85a:	4631      	mov	r1, r6
   1a85c:	4640      	mov	r0, r8
   1a85e:	f003 fe19 	bl	1e494 <_Bfree>
   1a862:	4621      	mov	r1, r4
   1a864:	4640      	mov	r0, r8
   1a866:	f003 fe15 	bl	1e494 <_Bfree>
   1a86a:	4651      	mov	r1, sl
   1a86c:	4640      	mov	r0, r8
   1a86e:	f003 fe11 	bl	1e494 <_Bfree>
   1a872:	e72d      	b.n	1a6d0 <_strtod_l+0x440>
   1a874:	2301      	movs	r3, #1
   1a876:	2100      	movs	r1, #0
   1a878:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   1a87c:	e76e      	b.n	1a75c <_strtod_l+0x4cc>
   1a87e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1a882:	ee20 9b09 	vmul.f64	d9, d0, d9
   1a886:	2d00      	cmp	r5, #0
   1a888:	d15f      	bne.n	1a94a <_strtod_l+0x6ba>
   1a88a:	eeb1 7b49 	vneg.f64	d7, d9
   1a88e:	9805      	ldr	r0, [sp, #20]
   1a890:	ec53 2b17 	vmov	r2, r3, d7
   1a894:	e7b4      	b.n	1a800 <_strtod_l+0x570>
   1a896:	4621      	mov	r1, r4
   1a898:	461a      	mov	r2, r3
   1a89a:	4640      	mov	r0, r8
   1a89c:	f003 ffda 	bl	1e854 <__pow5mult>
   1a8a0:	4604      	mov	r4, r0
   1a8a2:	b360      	cbz	r0, 1a8fe <_strtod_l+0x66e>
   1a8a4:	4601      	mov	r1, r0
   1a8a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a8a8:	4640      	mov	r0, r8
   1a8aa:	f003 ff25 	bl	1e6f8 <__multiply>
   1a8ae:	b330      	cbz	r0, 1a8fe <_strtod_l+0x66e>
   1a8b0:	900f      	str	r0, [sp, #60]	; 0x3c
   1a8b2:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a8b4:	4640      	mov	r0, r8
   1a8b6:	f003 fded 	bl	1e494 <_Bfree>
   1a8ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a8bc:	9212      	str	r2, [sp, #72]	; 0x48
   1a8be:	2d00      	cmp	r5, #0
   1a8c0:	f77f af64 	ble.w	1a78c <_strtod_l+0x4fc>
   1a8c4:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a8c6:	462a      	mov	r2, r5
   1a8c8:	4640      	mov	r0, r8
   1a8ca:	f004 f823 	bl	1e914 <__lshift>
   1a8ce:	9012      	str	r0, [sp, #72]	; 0x48
   1a8d0:	2800      	cmp	r0, #0
   1a8d2:	f47f af5b 	bne.w	1a78c <_strtod_l+0x4fc>
   1a8d6:	2322      	movs	r3, #34	; 0x22
   1a8d8:	ed9f 8b25 	vldr	d8, [pc, #148]	; 1a970 <_strtod_l+0x6e0>
   1a8dc:	f8c8 3000 	str.w	r3, [r8]
   1a8e0:	e0bc      	b.n	1aa5c <_strtod_l+0x7cc>
   1a8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a8e4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1a8e8:	1a9f      	subs	r7, r3, r2
   1a8ea:	e720      	b.n	1a72e <_strtod_l+0x49e>
   1a8ec:	4631      	mov	r1, r6
   1a8ee:	463a      	mov	r2, r7
   1a8f0:	4640      	mov	r0, r8
   1a8f2:	f004 f80f 	bl	1e914 <__lshift>
   1a8f6:	4606      	mov	r6, r0
   1a8f8:	2800      	cmp	r0, #0
   1a8fa:	f47f af4e 	bne.w	1a79a <_strtod_l+0x50a>
   1a8fe:	9812      	ldr	r0, [sp, #72]	; 0x48
   1a900:	e7e9      	b.n	1a8d6 <_strtod_l+0x646>
   1a902:	4631      	mov	r1, r6
   1a904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a906:	4640      	mov	r0, r8
   1a908:	f003 ffa4 	bl	1e854 <__pow5mult>
   1a90c:	4606      	mov	r6, r0
   1a90e:	2800      	cmp	r0, #0
   1a910:	f47f af40 	bne.w	1a794 <_strtod_l+0x504>
   1a914:	e7f3      	b.n	1a8fe <_strtod_l+0x66e>
   1a916:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   1a91a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   1a91e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   1a922:	2101      	movs	r1, #1
   1a924:	32e2      	adds	r2, #226	; 0xe2
   1a926:	fa01 f302 	lsl.w	r3, r1, r2
   1a92a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   1a92e:	e715      	b.n	1a75c <_strtod_l+0x4cc>
   1a930:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   1a934:	f04f 0b00 	mov.w	fp, #0
   1a938:	e5c0      	b.n	1a4bc <_strtod_l+0x22c>
   1a93a:	2301      	movs	r3, #1
   1a93c:	930a      	str	r3, [sp, #40]	; 0x28
   1a93e:	f10a 0302 	add.w	r3, sl, #2
   1a942:	9311      	str	r3, [sp, #68]	; 0x44
   1a944:	f89a 4002 	ldrb.w	r4, [sl, #2]
   1a948:	e602      	b.n	1a550 <_strtod_l+0x2c0>
   1a94a:	eeb0 7b49 	vmov.f64	d7, d9
   1a94e:	e79e      	b.n	1a88e <_strtod_l+0x5fe>
   1a950:	94a03595 	.word	0x94a03595
   1a954:	3fcfffff 	.word	0x3fcfffff
   1a958:	94a03595 	.word	0x94a03595
   1a95c:	3fdfffff 	.word	0x3fdfffff
   1a960:	35afe535 	.word	0x35afe535
   1a964:	3fe00000 	.word	0x3fe00000
   1a968:	ffc00000 	.word	0xffc00000
   1a96c:	41dfffff 	.word	0x41dfffff
   1a970:	00000000 	.word	0x00000000
   1a974:	7ff00000 	.word	0x7ff00000
   1a978:	20001cd8 	.word	0x20001cd8
   1a97c:	fffffc02 	.word	0xfffffc02
   1a980:	3ff00000 	.word	0x3ff00000
   1a984:	7ff00000 	.word	0x7ff00000
   1a988:	7fe00000 	.word	0x7fe00000
   1a98c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1a990:	2900      	cmp	r1, #0
   1a992:	f000 8085 	beq.w	1aaa0 <_strtod_l+0x810>
   1a996:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1a99a:	2901      	cmp	r1, #1
   1a99c:	f000 81d8 	beq.w	1ad50 <_strtod_l+0xac0>
   1a9a0:	4610      	mov	r0, r2
   1a9a2:	4bb7      	ldr	r3, [pc, #732]	; (1ac80 <_strtod_l+0x9f0>)
   1a9a4:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   1a9a8:	2200      	movs	r2, #0
   1a9aa:	e729      	b.n	1a800 <_strtod_l+0x570>
   1a9ac:	2c65      	cmp	r4, #101	; 0x65
   1a9ae:	f04f 0c01 	mov.w	ip, #1
   1a9b2:	f43f adbe 	beq.w	1a532 <_strtod_l+0x2a2>
   1a9b6:	e54c      	b.n	1a452 <_strtod_l+0x1c2>
   1a9b8:	ec43 2b1a 	vmov	d10, r2, r3
   1a9bc:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   1a9c0:	9305      	str	r3, [sp, #20]
   1a9c2:	ed9d fb04 	vldr	d15, [sp, #16]
   1a9c6:	eeb0 0b4f 	vmov.f64	d0, d15
   1a9ca:	f004 f8e7 	bl	1eb9c <__ulp>
   1a9ce:	49ad      	ldr	r1, [pc, #692]	; (1ac84 <_strtod_l+0x9f4>)
   1a9d0:	eeaa fb00 	vfma.f64	d15, d10, d0
   1a9d4:	ee1f 3a90 	vmov	r3, s31
   1a9d8:	4aab      	ldr	r2, [pc, #684]	; (1ac88 <_strtod_l+0x9f8>)
   1a9da:	4019      	ands	r1, r3
   1a9dc:	4291      	cmp	r1, r2
   1a9de:	ed8d fb04 	vstr	d15, [sp, #16]
   1a9e2:	d972      	bls.n	1aaca <_strtod_l+0x83a>
   1a9e4:	4ba9      	ldr	r3, [pc, #676]	; (1ac8c <_strtod_l+0x9fc>)
   1a9e6:	ee18 2a90 	vmov	r2, s17
   1a9ea:	429a      	cmp	r2, r3
   1a9ec:	d103      	bne.n	1a9f6 <_strtod_l+0x766>
   1a9ee:	ee18 3a10 	vmov	r3, s16
   1a9f2:	3301      	adds	r3, #1
   1a9f4:	d083      	beq.n	1a8fe <_strtod_l+0x66e>
   1a9f6:	4aa5      	ldr	r2, [pc, #660]	; (1ac8c <_strtod_l+0x9fc>)
   1a9f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9fc:	e9cd 3204 	strd	r3, r2, [sp, #16]
   1aa00:	e727      	b.n	1a852 <_strtod_l+0x5c2>
   1aa02:	2300      	movs	r3, #0
   1aa04:	930a      	str	r3, [sp, #40]	; 0x28
   1aa06:	e79a      	b.n	1a93e <_strtod_l+0x6ae>
   1aa08:	2c65      	cmp	r4, #101	; 0x65
   1aa0a:	f000 80d0 	beq.w	1abae <_strtod_l+0x91e>
   1aa0e:	2c45      	cmp	r4, #69	; 0x45
   1aa10:	f000 80cd 	beq.w	1abae <_strtod_l+0x91e>
   1aa14:	f04f 0c01 	mov.w	ip, #1
   1aa18:	e5d1      	b.n	1a5be <_strtod_l+0x32e>
   1aa1a:	ec51 0b19 	vmov	r0, r1, d9
   1aa1e:	930d      	str	r3, [sp, #52]	; 0x34
   1aa20:	f009 fef2 	bl	24808 <__aeabi_d2lz>
   1aa24:	f7fe fc8c 	bl	19340 <__aeabi_l2d>
   1aa28:	9b04      	ldr	r3, [sp, #16]
   1aa2a:	431d      	orrs	r5, r3
   1aa2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aa2e:	ec41 0b17 	vmov	d7, r0, r1
   1aa32:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1aa36:	431d      	orrs	r5, r3
   1aa38:	ee39 9b47 	vsub.f64	d9, d9, d7
   1aa3c:	f000 80a0 	beq.w	1ab80 <_strtod_l+0x8f0>
   1aa40:	eeb4 9bcc 	vcmpe.f64	d9, d12
   1aa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aa48:	d405      	bmi.n	1aa56 <_strtod_l+0x7c6>
   1aa4a:	eeb4 9bcd 	vcmpe.f64	d9, d13
   1aa4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aa52:	f77f aefe 	ble.w	1a852 <_strtod_l+0x5c2>
   1aa56:	ed9d 8b04 	vldr	d8, [sp, #16]
   1aa5a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1aa5c:	4601      	mov	r1, r0
   1aa5e:	4640      	mov	r0, r8
   1aa60:	f003 fd18 	bl	1e494 <_Bfree>
   1aa64:	4631      	mov	r1, r6
   1aa66:	4640      	mov	r0, r8
   1aa68:	f003 fd14 	bl	1e494 <_Bfree>
   1aa6c:	4621      	mov	r1, r4
   1aa6e:	4640      	mov	r0, r8
   1aa70:	f003 fd10 	bl	1e494 <_Bfree>
   1aa74:	4649      	mov	r1, r9
   1aa76:	4640      	mov	r0, r8
   1aa78:	f003 fd0c 	bl	1e494 <_Bfree>
   1aa7c:	4651      	mov	r1, sl
   1aa7e:	4640      	mov	r0, r8
   1aa80:	f003 fd08 	bl	1e494 <_Bfree>
   1aa84:	e5c1      	b.n	1a60a <_strtod_l+0x37a>
   1aa86:	2201      	movs	r2, #1
   1aa88:	9209      	str	r2, [sp, #36]	; 0x24
   1aa8a:	1c79      	adds	r1, r7, #1
   1aa8c:	9111      	str	r1, [sp, #68]	; 0x44
   1aa8e:	787a      	ldrb	r2, [r7, #1]
   1aa90:	2a00      	cmp	r2, #0
   1aa92:	f43f ace5 	beq.w	1a460 <_strtod_l+0x1d0>
   1aa96:	460f      	mov	r7, r1
   1aa98:	e470      	b.n	1a37c <_strtod_l+0xec>
   1aa9a:	2200      	movs	r2, #0
   1aa9c:	9209      	str	r2, [sp, #36]	; 0x24
   1aa9e:	e7f4      	b.n	1aa8a <_strtod_l+0x7fa>
   1aaa0:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1aaa4:	4610      	mov	r0, r2
   1aaa6:	2b00      	cmp	r3, #0
   1aaa8:	f47f af7b 	bne.w	1a9a2 <_strtod_l+0x712>
   1aaac:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1aab0:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1aab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aab8:	f100 81d3 	bmi.w	1ae62 <_strtod_l+0xbd2>
   1aabc:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1aac0:	ee20 9b09 	vmul.f64	d9, d0, d9
   1aac4:	eeb1 7b49 	vneg.f64	d7, d9
   1aac8:	e6e2      	b.n	1a890 <_strtod_l+0x600>
   1aaca:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   1aace:	9305      	str	r3, [sp, #20]
   1aad0:	e6b8      	b.n	1a844 <_strtod_l+0x5b4>
   1aad2:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   1aad6:	ee19 3a10 	vmov	r3, s18
   1aada:	2b01      	cmp	r3, #1
   1aadc:	bf38      	it	cc
   1aade:	2301      	movcc	r3, #1
   1aae0:	ee09 3a10 	vmov	s18, r3
   1aae4:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   1aae8:	2d00      	cmp	r5, #0
   1aaea:	f040 813e 	bne.w	1ad6a <_strtod_l+0xada>
   1aaee:	eeb1 7b49 	vneg.f64	d7, d9
   1aaf2:	ec53 2b17 	vmov	r2, r3, d7
   1aaf6:	e696      	b.n	1a826 <_strtod_l+0x596>
   1aaf8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   1aafc:	f300 80b2 	bgt.w	1ac64 <_strtod_l+0x9d4>
   1ab00:	2a10      	cmp	r2, #16
   1ab02:	ea4f 1322 	mov.w	r3, r2, asr #4
   1ab06:	f340 8286 	ble.w	1b016 <_strtod_l+0xd86>
   1ab0a:	4c61      	ldr	r4, [pc, #388]	; (1ac90 <_strtod_l+0xa00>)
   1ab0c:	ed9d 7b04 	vldr	d7, [sp, #16]
   1ab10:	2000      	movs	r0, #0
   1ab12:	4622      	mov	r2, r4
   1ab14:	4601      	mov	r1, r0
   1ab16:	f013 0f01 	tst.w	r3, #1
   1ab1a:	f101 0101 	add.w	r1, r1, #1
   1ab1e:	ea4f 0363 	mov.w	r3, r3, asr #1
   1ab22:	d004      	beq.n	1ab2e <_strtod_l+0x89e>
   1ab24:	ed92 6b00 	vldr	d6, [r2]
   1ab28:	2001      	movs	r0, #1
   1ab2a:	ee27 7b06 	vmul.f64	d7, d7, d6
   1ab2e:	2b01      	cmp	r3, #1
   1ab30:	f102 0208 	add.w	r2, r2, #8
   1ab34:	d1ef      	bne.n	1ab16 <_strtod_l+0x886>
   1ab36:	b108      	cbz	r0, 1ab3c <_strtod_l+0x8ac>
   1ab38:	ed8d 7b04 	vstr	d7, [sp, #16]
   1ab3c:	9b05      	ldr	r3, [sp, #20]
   1ab3e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1ab42:	9305      	str	r3, [sp, #20]
   1ab44:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   1ab48:	ed9d 6b04 	vldr	d6, [sp, #16]
   1ab4c:	ed94 7b00 	vldr	d7, [r4]
   1ab50:	4b4c      	ldr	r3, [pc, #304]	; (1ac84 <_strtod_l+0x9f4>)
   1ab52:	ee27 7b06 	vmul.f64	d7, d7, d6
   1ab56:	ee17 2a90 	vmov	r2, s15
   1ab5a:	494e      	ldr	r1, [pc, #312]	; (1ac94 <_strtod_l+0xa04>)
   1ab5c:	4013      	ands	r3, r2
   1ab5e:	428b      	cmp	r3, r1
   1ab60:	ed8d 7b04 	vstr	d7, [sp, #16]
   1ab64:	d87e      	bhi.n	1ac64 <_strtod_l+0x9d4>
   1ab66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1ab6a:	428b      	cmp	r3, r1
   1ab6c:	f240 81d6 	bls.w	1af1c <_strtod_l+0xc8c>
   1ab70:	4c46      	ldr	r4, [pc, #280]	; (1ac8c <_strtod_l+0x9fc>)
   1ab72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab76:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1ab7a:	2300      	movs	r3, #0
   1ab7c:	9308      	str	r3, [sp, #32]
   1ab7e:	e585      	b.n	1a68c <_strtod_l+0x3fc>
   1ab80:	eeb4 9bce 	vcmpe.f64	d9, d14
   1ab84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab88:	f57f ae63 	bpl.w	1a852 <_strtod_l+0x5c2>
   1ab8c:	e763      	b.n	1aa56 <_strtod_l+0x7c6>
   1ab8e:	3216      	adds	r2, #22
   1ab90:	f6ff ad62 	blt.w	1a658 <_strtod_l+0x3c8>
   1ab94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ab96:	eba3 0b0b 	sub.w	fp, r3, fp
   1ab9a:	4b3f      	ldr	r3, [pc, #252]	; (1ac98 <_strtod_l+0xa08>)
   1ab9c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   1aba0:	ed93 7b00 	vldr	d7, [r3]
   1aba4:	ed9d 6b04 	vldr	d6, [sp, #16]
   1aba8:	ee86 8b07 	vdiv.f64	d8, d6, d7
   1abac:	e52d      	b.n	1a60a <_strtod_l+0x37a>
   1abae:	f04f 0e00 	mov.w	lr, #0
   1abb2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   1abb6:	f04f 0c01 	mov.w	ip, #1
   1abba:	e44e      	b.n	1a45a <_strtod_l+0x1ca>
   1abbc:	2c6e      	cmp	r4, #110	; 0x6e
   1abbe:	f43f ad10 	beq.w	1a5e2 <_strtod_l+0x352>
   1abc2:	e44d      	b.n	1a460 <_strtod_l+0x1d0>
   1abc4:	f43f ad60 	beq.w	1a688 <_strtod_l+0x3f8>
   1abc8:	425b      	negs	r3, r3
   1abca:	f013 010f 	ands.w	r1, r3, #15
   1abce:	d00a      	beq.n	1abe6 <_strtod_l+0x956>
   1abd0:	4a31      	ldr	r2, [pc, #196]	; (1ac98 <_strtod_l+0xa08>)
   1abd2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1abd6:	ed9d 6b04 	vldr	d6, [sp, #16]
   1abda:	ed92 7b00 	vldr	d7, [r2]
   1abde:	ee86 7b07 	vdiv.f64	d7, d6, d7
   1abe2:	ed8d 7b04 	vstr	d7, [sp, #16]
   1abe6:	111b      	asrs	r3, r3, #4
   1abe8:	f43f ad4e 	beq.w	1a688 <_strtod_l+0x3f8>
   1abec:	2b1f      	cmp	r3, #31
   1abee:	dc33      	bgt.n	1ac58 <_strtod_l+0x9c8>
   1abf0:	f013 0210 	ands.w	r2, r3, #16
   1abf4:	bf18      	it	ne
   1abf6:	226a      	movne	r2, #106	; 0x6a
   1abf8:	ed9d 7b04 	vldr	d7, [sp, #16]
   1abfc:	9208      	str	r2, [sp, #32]
   1abfe:	4a27      	ldr	r2, [pc, #156]	; (1ac9c <_strtod_l+0xa0c>)
   1ac00:	2100      	movs	r1, #0
   1ac02:	07d8      	lsls	r0, r3, #31
   1ac04:	d504      	bpl.n	1ac10 <_strtod_l+0x980>
   1ac06:	ed92 6b00 	vldr	d6, [r2]
   1ac0a:	2101      	movs	r1, #1
   1ac0c:	ee27 7b06 	vmul.f64	d7, d7, d6
   1ac10:	105b      	asrs	r3, r3, #1
   1ac12:	f102 0208 	add.w	r2, r2, #8
   1ac16:	d1f4      	bne.n	1ac02 <_strtod_l+0x972>
   1ac18:	b109      	cbz	r1, 1ac1e <_strtod_l+0x98e>
   1ac1a:	ed8d 7b04 	vstr	d7, [sp, #16]
   1ac1e:	9b08      	ldr	r3, [sp, #32]
   1ac20:	b193      	cbz	r3, 1ac48 <_strtod_l+0x9b8>
   1ac22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ac26:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1ac2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ac2e:	2b00      	cmp	r3, #0
   1ac30:	dd0a      	ble.n	1ac48 <_strtod_l+0x9b8>
   1ac32:	2b1f      	cmp	r3, #31
   1ac34:	f340 822f 	ble.w	1b096 <_strtod_l+0xe06>
   1ac38:	2000      	movs	r0, #0
   1ac3a:	2b34      	cmp	r3, #52	; 0x34
   1ac3c:	9004      	str	r0, [sp, #16]
   1ac3e:	f340 8240 	ble.w	1b0c2 <_strtod_l+0xe32>
   1ac42:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1ac46:	9305      	str	r3, [sp, #20]
   1ac48:	ed9d 7b04 	vldr	d7, [sp, #16]
   1ac4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac54:	f47f ad1a 	bne.w	1a68c <_strtod_l+0x3fc>
   1ac58:	2322      	movs	r3, #34	; 0x22
   1ac5a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 1ac70 <_strtod_l+0x9e0>
   1ac5e:	f8c8 3000 	str.w	r3, [r8]
   1ac62:	e4d2      	b.n	1a60a <_strtod_l+0x37a>
   1ac64:	2322      	movs	r3, #34	; 0x22
   1ac66:	ed9f 8b04 	vldr	d8, [pc, #16]	; 1ac78 <_strtod_l+0x9e8>
   1ac6a:	f8c8 3000 	str.w	r3, [r8]
   1ac6e:	e4cc      	b.n	1a60a <_strtod_l+0x37a>
	...
   1ac7c:	7ff00000 	.word	0x7ff00000
   1ac80:	bff00000 	.word	0xbff00000
   1ac84:	7ff00000 	.word	0x7ff00000
   1ac88:	7c9fffff 	.word	0x7c9fffff
   1ac8c:	7fefffff 	.word	0x7fefffff
   1ac90:	20001dc8 	.word	0x20001dc8
   1ac94:	7ca00000 	.word	0x7ca00000
   1ac98:	20001cd8 	.word	0x20001cd8
   1ac9c:	20001ca0 	.word	0x20001ca0
   1aca0:	9302      	str	r3, [sp, #8]
   1aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aca4:	9301      	str	r3, [sp, #4]
   1aca6:	ab12      	add	r3, sp, #72	; 0x48
   1aca8:	9300      	str	r3, [sp, #0]
   1acaa:	4aa7      	ldr	r2, [pc, #668]	; (1af48 <_strtod_l+0xcb8>)
   1acac:	ab13      	add	r3, sp, #76	; 0x4c
   1acae:	a911      	add	r1, sp, #68	; 0x44
   1acb0:	4640      	mov	r0, r8
   1acb2:	f002 fd6f 	bl	1d794 <__gethex>
   1acb6:	f010 050f 	ands.w	r5, r0, #15
   1acba:	4604      	mov	r4, r0
   1acbc:	f43f aca3 	beq.w	1a606 <_strtod_l+0x376>
   1acc0:	2d06      	cmp	r5, #6
   1acc2:	d174      	bne.n	1adae <_strtod_l+0xb1e>
   1acc4:	9b07      	ldr	r3, [sp, #28]
   1acc6:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 1af30 <_strtod_l+0xca0>
   1acca:	3701      	adds	r7, #1
   1accc:	2b00      	cmp	r3, #0
   1acce:	f43f abce 	beq.w	1a46e <_strtod_l+0x1de>
   1acd2:	601f      	str	r7, [r3, #0]
   1acd4:	f7ff bbcb 	b.w	1a46e <_strtod_l+0x1de>
   1acd8:	ed9d 8b04 	vldr	d8, [sp, #16]
   1acdc:	e495      	b.n	1a60a <_strtod_l+0x37a>
   1acde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ace0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1ace4:	4403      	add	r3, r0
   1ace6:	930b      	str	r3, [sp, #44]	; 0x2c
   1ace8:	2801      	cmp	r0, #1
   1acea:	f105 0301 	add.w	r3, r5, #1
   1acee:	461a      	mov	r2, r3
   1acf0:	d014      	beq.n	1ad1c <_strtod_l+0xa8c>
   1acf2:	4428      	add	r0, r5
   1acf4:	1e44      	subs	r4, r0, #1
   1acf6:	e003      	b.n	1ad00 <_strtod_l+0xa70>
   1acf8:	0046      	lsls	r6, r0, #1
   1acfa:	429c      	cmp	r4, r3
   1acfc:	d00d      	beq.n	1ad1a <_strtod_l+0xa8a>
   1acfe:	3301      	adds	r3, #1
   1ad00:	462a      	mov	r2, r5
   1ad02:	2a08      	cmp	r2, #8
   1ad04:	461d      	mov	r5, r3
   1ad06:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   1ad0a:	d9f5      	bls.n	1acf8 <_strtod_l+0xa68>
   1ad0c:	2b10      	cmp	r3, #16
   1ad0e:	bfdc      	itt	le
   1ad10:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1ad14:	ea4f 0949 	movle.w	r9, r9, lsl #1
   1ad18:	e7ef      	b.n	1acfa <_strtod_l+0xa6a>
   1ad1a:	3202      	adds	r2, #2
   1ad1c:	2d08      	cmp	r5, #8
   1ad1e:	dc3c      	bgt.n	1ad9a <_strtod_l+0xb0a>
   1ad20:	4615      	mov	r5, r2
   1ad22:	f7ff bb79 	b.w	1a418 <_strtod_l+0x188>
   1ad26:	4989      	ldr	r1, [pc, #548]	; (1af4c <_strtod_l+0xcbc>)
   1ad28:	2201      	movs	r2, #1
   1ad2a:	4638      	mov	r0, r7
   1ad2c:	f000 fffa 	bl	1bd24 <strncmp>
   1ad30:	2800      	cmp	r0, #0
   1ad32:	f000 8082 	beq.w	1ae3a <_strtod_l+0xbaa>
   1ad36:	f04f 0e00 	mov.w	lr, #0
   1ad3a:	46f1      	mov	r9, lr
   1ad3c:	4676      	mov	r6, lr
   1ad3e:	4675      	mov	r5, lr
   1ad40:	f7ff bbb5 	b.w	1a4ae <_strtod_l+0x21e>
   1ad44:	f644 631f 	movw	r3, #19999	; 0x4e1f
   1ad48:	459b      	cmp	fp, r3
   1ad4a:	bfa8      	it	ge
   1ad4c:	469b      	movge	fp, r3
   1ad4e:	e42f      	b.n	1a5b0 <_strtod_l+0x320>
   1ad50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ad54:	4618      	mov	r0, r3
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	f47f ae23 	bne.w	1a9a2 <_strtod_l+0x712>
   1ad5c:	2322      	movs	r3, #34	; 0x22
   1ad5e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 1af30 <_strtod_l+0xca0>
   1ad62:	9812      	ldr	r0, [sp, #72]	; 0x48
   1ad64:	f8c8 3000 	str.w	r3, [r8]
   1ad68:	e678      	b.n	1aa5c <_strtod_l+0x7cc>
   1ad6a:	eeb0 7b49 	vmov.f64	d7, d9
   1ad6e:	e6c0      	b.n	1aaf2 <_strtod_l+0x862>
   1ad70:	4977      	ldr	r1, [pc, #476]	; (1af50 <_strtod_l+0xcc0>)
   1ad72:	a811      	add	r0, sp, #68	; 0x44
   1ad74:	f002 ffd8 	bl	1dd28 <__match>
   1ad78:	2800      	cmp	r0, #0
   1ad7a:	f43f ab71 	beq.w	1a460 <_strtod_l+0x1d0>
   1ad7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ad80:	4974      	ldr	r1, [pc, #464]	; (1af54 <_strtod_l+0xcc4>)
   1ad82:	3b01      	subs	r3, #1
   1ad84:	a811      	add	r0, sp, #68	; 0x44
   1ad86:	9311      	str	r3, [sp, #68]	; 0x44
   1ad88:	f002 ffce 	bl	1dd28 <__match>
   1ad8c:	b910      	cbnz	r0, 1ad94 <_strtod_l+0xb04>
   1ad8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ad90:	3301      	adds	r3, #1
   1ad92:	9311      	str	r3, [sp, #68]	; 0x44
   1ad94:	ed9f 8b68 	vldr	d8, [pc, #416]	; 1af38 <_strtod_l+0xca8>
   1ad98:	e437      	b.n	1a60a <_strtod_l+0x37a>
   1ad9a:	2a10      	cmp	r2, #16
   1ad9c:	bfdc      	itt	le
   1ad9e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1ada2:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   1ada6:	4615      	mov	r5, r2
   1ada8:	2000      	movs	r0, #0
   1adaa:	f7ff bb3a 	b.w	1a422 <_strtod_l+0x192>
   1adae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1adb0:	b13a      	cbz	r2, 1adc2 <_strtod_l+0xb32>
   1adb2:	2135      	movs	r1, #53	; 0x35
   1adb4:	a814      	add	r0, sp, #80	; 0x50
   1adb6:	f004 f835 	bl	1ee24 <__copybits>
   1adba:	9912      	ldr	r1, [sp, #72]	; 0x48
   1adbc:	4640      	mov	r0, r8
   1adbe:	f003 fb69 	bl	1e494 <_Bfree>
   1adc2:	3d01      	subs	r5, #1
   1adc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1adc6:	2d04      	cmp	r5, #4
   1adc8:	f200 818f 	bhi.w	1b0ea <_strtod_l+0xe5a>
   1adcc:	e8df f005 	tbb	[pc, r5]
   1add0:	1f2a2d03 	.word	0x1f2a2d03
   1add4:	03          	.byte	0x03
   1add5:	00          	.byte	0x00
   1add6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1add8:	9204      	str	r2, [sp, #16]
   1adda:	f203 4233 	addw	r2, r3, #1075	; 0x433
   1adde:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ade0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ade4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   1ade8:	9305      	str	r3, [sp, #20]
   1adea:	05e5      	lsls	r5, r4, #23
   1adec:	d502      	bpl.n	1adf4 <_strtod_l+0xb64>
   1adee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1adf2:	9305      	str	r3, [sp, #20]
   1adf4:	4a58      	ldr	r2, [pc, #352]	; (1af58 <_strtod_l+0xcc8>)
   1adf6:	401a      	ands	r2, r3
   1adf8:	ed9d 8b04 	vldr	d8, [sp, #16]
   1adfc:	2a00      	cmp	r2, #0
   1adfe:	f47f ac04 	bne.w	1a60a <_strtod_l+0x37a>
   1ae02:	f001 ffeb 	bl	1cddc <__errno>
   1ae06:	2322      	movs	r3, #34	; 0x22
   1ae08:	6003      	str	r3, [r0, #0]
   1ae0a:	f7ff bbfe 	b.w	1a60a <_strtod_l+0x37a>
   1ae0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ae12:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1ae16:	e9cd 3604 	strd	r3, r6, [sp, #16]
   1ae1a:	05e3      	lsls	r3, r4, #23
   1ae1c:	f57f af5c 	bpl.w	1acd8 <_strtod_l+0xa48>
   1ae20:	9b05      	ldr	r3, [sp, #20]
   1ae22:	e7e4      	b.n	1adee <_strtod_l+0xb5e>
   1ae24:	4b4c      	ldr	r3, [pc, #304]	; (1af58 <_strtod_l+0xcc8>)
   1ae26:	9305      	str	r3, [sp, #20]
   1ae28:	e7f7      	b.n	1ae1a <_strtod_l+0xb8a>
   1ae2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ae2c:	9304      	str	r3, [sp, #16]
   1ae2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ae30:	9305      	str	r3, [sp, #20]
   1ae32:	e7da      	b.n	1adea <_strtod_l+0xb5a>
   1ae34:	2000      	movs	r0, #0
   1ae36:	f7ff bae1 	b.w	1a3fc <_strtod_l+0x16c>
   1ae3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ae3c:	461a      	mov	r2, r3
   1ae3e:	3301      	adds	r3, #1
   1ae40:	9311      	str	r3, [sp, #68]	; 0x44
   1ae42:	7854      	ldrb	r4, [r2, #1]
   1ae44:	4606      	mov	r6, r0
   1ae46:	4681      	mov	r9, r0
   1ae48:	f7ff bacd 	b.w	1a3e6 <_strtod_l+0x156>
   1ae4c:	4b43      	ldr	r3, [pc, #268]	; (1af5c <_strtod_l+0xccc>)
   1ae4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ae52:	ed93 8b00 	vldr	d8, [r3]
   1ae56:	ed9d 7b04 	vldr	d7, [sp, #16]
   1ae5a:	ee28 8b07 	vmul.f64	d8, d8, d7
   1ae5e:	f7ff bbd4 	b.w	1a60a <_strtod_l+0x37a>
   1ae62:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   1ae66:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1ae6a:	e511      	b.n	1a890 <_strtod_l+0x600>
   1ae6c:	46ae      	mov	lr, r5
   1ae6e:	900b      	str	r0, [sp, #44]	; 0x2c
   1ae70:	f7ff badc 	b.w	1a42c <_strtod_l+0x19c>
   1ae74:	4b39      	ldr	r3, [pc, #228]	; (1af5c <_strtod_l+0xccc>)
   1ae76:	f1c5 050f 	rsb	r5, r5, #15
   1ae7a:	1b4a      	subs	r2, r1, r5
   1ae7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1ae80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ae84:	ed95 8b00 	vldr	d8, [r5]
   1ae88:	ed93 7b00 	vldr	d7, [r3]
   1ae8c:	ed9d 6b04 	vldr	d6, [sp, #16]
   1ae90:	ee28 8b06 	vmul.f64	d8, d8, d6
   1ae94:	ee28 8b07 	vmul.f64	d8, d8, d7
   1ae98:	f7ff bbb7 	b.w	1a60a <_strtod_l+0x37a>
   1ae9c:	2d00      	cmp	r5, #0
   1ae9e:	f000 8095 	beq.w	1afcc <_strtod_l+0xd3c>
   1aea2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   1aea6:	4b2e      	ldr	r3, [pc, #184]	; (1af60 <_strtod_l+0xcd0>)
   1aea8:	f3cc 0113 	ubfx	r1, ip, #0, #20
   1aeac:	4299      	cmp	r1, r3
   1aeae:	4662      	mov	r2, ip
   1aeb0:	f000 80d2 	beq.w	1b058 <_strtod_l+0xdc8>
   1aeb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aeb6:	2b00      	cmp	r3, #0
   1aeb8:	f000 80a5 	beq.w	1b006 <_strtod_l+0xd76>
   1aebc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1aec0:	4213      	tst	r3, r2
   1aec2:	4617      	mov	r7, r2
   1aec4:	d01a      	beq.n	1aefc <_strtod_l+0xc6c>
   1aec6:	eeb0 0b48 	vmov.f64	d0, d8
   1aeca:	2d00      	cmp	r5, #0
   1aecc:	f000 80a6 	beq.w	1b01c <_strtod_l+0xd8c>
   1aed0:	f003 fe64 	bl	1eb9c <__ulp>
   1aed4:	9b08      	ldr	r3, [sp, #32]
   1aed6:	b17b      	cbz	r3, 1aef8 <_strtod_l+0xc68>
   1aed8:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1aedc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1aee0:	2b00      	cmp	r3, #0
   1aee2:	dd09      	ble.n	1aef8 <_strtod_l+0xc68>
   1aee4:	051b      	lsls	r3, r3, #20
   1aee6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1aeea:	2000      	movs	r0, #0
   1aeec:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   1aef0:	ec41 0b17 	vmov	d7, r0, r1
   1aef4:	ee20 0b07 	vmul.f64	d0, d0, d7
   1aef8:	ee38 8b00 	vadd.f64	d8, d8, d0
   1aefc:	9b08      	ldr	r3, [sp, #32]
   1aefe:	b15b      	cbz	r3, 1af18 <_strtod_l+0xc88>
   1af00:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 1af40 <_strtod_l+0xcb0>
   1af04:	4b14      	ldr	r3, [pc, #80]	; (1af58 <_strtod_l+0xcc8>)
   1af06:	ee28 8b07 	vmul.f64	d8, d8, d7
   1af0a:	ee18 2a90 	vmov	r2, s17
   1af0e:	4013      	ands	r3, r2
   1af10:	b913      	cbnz	r3, 1af18 <_strtod_l+0xc88>
   1af12:	2322      	movs	r3, #34	; 0x22
   1af14:	f8c8 3000 	str.w	r3, [r8]
   1af18:	9812      	ldr	r0, [sp, #72]	; 0x48
   1af1a:	e59f      	b.n	1aa5c <_strtod_l+0x7cc>
   1af1c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   1af20:	9305      	str	r3, [sp, #20]
   1af22:	2300      	movs	r3, #0
   1af24:	9308      	str	r3, [sp, #32]
   1af26:	f7ff bbb1 	b.w	1a68c <_strtod_l+0x3fc>
   1af2a:	bf00      	nop
   1af2c:	f3af 8000 	nop.w
	...
   1af3c:	7ff00000 	.word	0x7ff00000
   1af40:	00000000 	.word	0x00000000
   1af44:	39500000 	.word	0x39500000
   1af48:	20001c78 	.word	0x20001c78
   1af4c:	20008af4 	.word	0x20008af4
   1af50:	20008af8 	.word	0x20008af8
   1af54:	20008afc 	.word	0x20008afc
   1af58:	7ff00000 	.word	0x7ff00000
   1af5c:	20001cd8 	.word	0x20001cd8
   1af60:	000fffff 	.word	0x000fffff
   1af64:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1af68:	430d      	orrs	r5, r1
   1af6a:	d1c7      	bne.n	1aefc <_strtod_l+0xc6c>
   1af6c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1af70:	4617      	mov	r7, r2
   1af72:	2b00      	cmp	r3, #0
   1af74:	d1c2      	bne.n	1aefc <_strtod_l+0xc6c>
   1af76:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1af7a:	0d1b      	lsrs	r3, r3, #20
   1af7c:	051b      	lsls	r3, r3, #20
   1af7e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1af82:	d9bb      	bls.n	1aefc <_strtod_l+0xc6c>
   1af84:	f8da 3014 	ldr.w	r3, [sl, #20]
   1af88:	b91b      	cbnz	r3, 1af92 <_strtod_l+0xd02>
   1af8a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1af8e:	2b01      	cmp	r3, #1
   1af90:	ddb4      	ble.n	1aefc <_strtod_l+0xc6c>
   1af92:	4651      	mov	r1, sl
   1af94:	2201      	movs	r2, #1
   1af96:	4640      	mov	r0, r8
   1af98:	f003 fcbc 	bl	1e914 <__lshift>
   1af9c:	4621      	mov	r1, r4
   1af9e:	4682      	mov	sl, r0
   1afa0:	f003 fd30 	bl	1ea04 <__mcmp>
   1afa4:	2800      	cmp	r0, #0
   1afa6:	dda9      	ble.n	1aefc <_strtod_l+0xc6c>
   1afa8:	9b08      	ldr	r3, [sp, #32]
   1afaa:	2b00      	cmp	r3, #0
   1afac:	d17e      	bne.n	1b0ac <_strtod_l+0xe1c>
   1afae:	4b50      	ldr	r3, [pc, #320]	; (1b0f0 <_strtod_l+0xe60>)
   1afb0:	403b      	ands	r3, r7
   1afb2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1afb6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1afba:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1afbe:	9305      	str	r3, [sp, #20]
   1afc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1afc4:	9304      	str	r3, [sp, #16]
   1afc6:	ed9d 8b04 	vldr	d8, [sp, #16]
   1afca:	e797      	b.n	1aefc <_strtod_l+0xc6c>
   1afcc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1afd0:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1afd4:	430b      	orrs	r3, r1
   1afd6:	4617      	mov	r7, r2
   1afd8:	f47f af6c 	bne.w	1aeb4 <_strtod_l+0xc24>
   1afdc:	e7e4      	b.n	1afa8 <_strtod_l+0xd18>
   1afde:	4945      	ldr	r1, [pc, #276]	; (1b0f4 <_strtod_l+0xe64>)
   1afe0:	a811      	add	r0, sp, #68	; 0x44
   1afe2:	aa14      	add	r2, sp, #80	; 0x50
   1afe4:	f002 febc 	bl	1dd60 <__hexnan>
   1afe8:	2805      	cmp	r0, #5
   1afea:	f47f ab06 	bne.w	1a5fa <_strtod_l+0x36a>
   1afee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1aff0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   1aff4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1aff8:	9305      	str	r3, [sp, #20]
   1affa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1affc:	9304      	str	r3, [sp, #16]
   1affe:	ed9d 8b04 	vldr	d8, [sp, #16]
   1b002:	f7ff bb02 	b.w	1a60a <_strtod_l+0x37a>
   1b006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b00a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b00c:	4203      	tst	r3, r0
   1b00e:	f43f af75 	beq.w	1aefc <_strtod_l+0xc6c>
   1b012:	460f      	mov	r7, r1
   1b014:	e757      	b.n	1aec6 <_strtod_l+0xc36>
   1b016:	4c38      	ldr	r4, [pc, #224]	; (1b0f8 <_strtod_l+0xe68>)
   1b018:	2100      	movs	r1, #0
   1b01a:	e58f      	b.n	1ab3c <_strtod_l+0x8ac>
   1b01c:	f003 fdbe 	bl	1eb9c <__ulp>
   1b020:	9b08      	ldr	r3, [sp, #32]
   1b022:	2b00      	cmp	r3, #0
   1b024:	d055      	beq.n	1b0d2 <_strtod_l+0xe42>
   1b026:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1b02a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1b02e:	2b00      	cmp	r3, #0
   1b030:	dd09      	ble.n	1b046 <_strtod_l+0xdb6>
   1b032:	051b      	lsls	r3, r3, #20
   1b034:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1b038:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   1b03c:	4628      	mov	r0, r5
   1b03e:	ec41 0b17 	vmov	d7, r0, r1
   1b042:	ee20 0b07 	vmul.f64	d0, d0, d7
   1b046:	ee38 8b40 	vsub.f64	d8, d8, d0
   1b04a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1b04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b052:	f47f af55 	bne.w	1af00 <_strtod_l+0xc70>
   1b056:	e681      	b.n	1ad5c <_strtod_l+0xacc>
   1b058:	9b08      	ldr	r3, [sp, #32]
   1b05a:	9904      	ldr	r1, [sp, #16]
   1b05c:	b31b      	cbz	r3, 1b0a6 <_strtod_l+0xe16>
   1b05e:	4b24      	ldr	r3, [pc, #144]	; (1b0f0 <_strtod_l+0xe60>)
   1b060:	4013      	ands	r3, r2
   1b062:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1b066:	d81e      	bhi.n	1b0a6 <_strtod_l+0xe16>
   1b068:	0d1b      	lsrs	r3, r3, #20
   1b06a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1b06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b072:	fa00 f303 	lsl.w	r3, r0, r3
   1b076:	4299      	cmp	r1, r3
   1b078:	f47f af1c 	bne.w	1aeb4 <_strtod_l+0xc24>
   1b07c:	4b1f      	ldr	r3, [pc, #124]	; (1b0fc <_strtod_l+0xe6c>)
   1b07e:	429a      	cmp	r2, r3
   1b080:	d030      	beq.n	1b0e4 <_strtod_l+0xe54>
   1b082:	4b1b      	ldr	r3, [pc, #108]	; (1b0f0 <_strtod_l+0xe60>)
   1b084:	4013      	ands	r3, r2
   1b086:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1b08a:	9305      	str	r3, [sp, #20]
   1b08c:	2300      	movs	r3, #0
   1b08e:	9304      	str	r3, [sp, #16]
   1b090:	ed9d 8b04 	vldr	d8, [sp, #16]
   1b094:	e732      	b.n	1aefc <_strtod_l+0xc6c>
   1b096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b09a:	fa02 f303 	lsl.w	r3, r2, r3
   1b09e:	9a04      	ldr	r2, [sp, #16]
   1b0a0:	401a      	ands	r2, r3
   1b0a2:	9204      	str	r2, [sp, #16]
   1b0a4:	e5d0      	b.n	1ac48 <_strtod_l+0x9b8>
   1b0a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b0aa:	e7e4      	b.n	1b076 <_strtod_l+0xde6>
   1b0ac:	4b10      	ldr	r3, [pc, #64]	; (1b0f0 <_strtod_l+0xe60>)
   1b0ae:	403b      	ands	r3, r7
   1b0b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1b0b4:	f73f af7d 	bgt.w	1afb2 <_strtod_l+0xd22>
   1b0b8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1b0bc:	f73f af20 	bgt.w	1af00 <_strtod_l+0xc70>
   1b0c0:	e64c      	b.n	1ad5c <_strtod_l+0xacc>
   1b0c2:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   1b0c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b0ca:	4093      	lsls	r3, r2
   1b0cc:	400b      	ands	r3, r1
   1b0ce:	9305      	str	r3, [sp, #20]
   1b0d0:	e5ba      	b.n	1ac48 <_strtod_l+0x9b8>
   1b0d2:	ee38 8b40 	vsub.f64	d8, d8, d0
   1b0d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1b0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b0de:	f47f af1b 	bne.w	1af18 <_strtod_l+0xc88>
   1b0e2:	e63b      	b.n	1ad5c <_strtod_l+0xacc>
   1b0e4:	3101      	adds	r1, #1
   1b0e6:	d1cc      	bne.n	1b082 <_strtod_l+0xdf2>
   1b0e8:	e409      	b.n	1a8fe <_strtod_l+0x66e>
   1b0ea:	2300      	movs	r3, #0
   1b0ec:	e67d      	b.n	1adea <_strtod_l+0xb5a>
   1b0ee:	bf00      	nop
   1b0f0:	7ff00000 	.word	0x7ff00000
   1b0f4:	20001c8c 	.word	0x20001c8c
   1b0f8:	20001dc8 	.word	0x20001dc8
   1b0fc:	7fefffff 	.word	0x7fefffff

0001b100 <_strtod_r>:
   1b100:	4b01      	ldr	r3, [pc, #4]	; (1b108 <_strtod_r+0x8>)
   1b102:	f7ff b8c5 	b.w	1a290 <_strtod_l>
   1b106:	bf00      	nop
   1b108:	200093a0 	.word	0x200093a0

0001b10c <strtod_l>:
   1b10c:	b410      	push	{r4}
   1b10e:	4c05      	ldr	r4, [pc, #20]	; (1b124 <strtod_l+0x18>)
   1b110:	4684      	mov	ip, r0
   1b112:	4613      	mov	r3, r2
   1b114:	6820      	ldr	r0, [r4, #0]
   1b116:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b11a:	460a      	mov	r2, r1
   1b11c:	4661      	mov	r1, ip
   1b11e:	f7ff b8b7 	b.w	1a290 <_strtod_l>
   1b122:	bf00      	nop
   1b124:	20008e58 	.word	0x20008e58

0001b128 <strtod>:
   1b128:	b410      	push	{r4}
   1b12a:	4c05      	ldr	r4, [pc, #20]	; (1b140 <strtod+0x18>)
   1b12c:	4b05      	ldr	r3, [pc, #20]	; (1b144 <strtod+0x1c>)
   1b12e:	4684      	mov	ip, r0
   1b130:	460a      	mov	r2, r1
   1b132:	6820      	ldr	r0, [r4, #0]
   1b134:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b138:	4661      	mov	r1, ip
   1b13a:	f7ff b8a9 	b.w	1a290 <_strtod_l>
   1b13e:	bf00      	nop
   1b140:	20008e58 	.word	0x20008e58
   1b144:	200093a0 	.word	0x200093a0

0001b148 <strtof_l>:
   1b148:	b510      	push	{r4, lr}
   1b14a:	4c1d      	ldr	r4, [pc, #116]	; (1b1c0 <strtof_l+0x78>)
   1b14c:	4684      	mov	ip, r0
   1b14e:	4613      	mov	r3, r2
   1b150:	6820      	ldr	r0, [r4, #0]
   1b152:	460a      	mov	r2, r1
   1b154:	4661      	mov	r1, ip
   1b156:	f7ff f89b 	bl	1a290 <_strtod_l>
   1b15a:	eeb4 0b40 	vcmp.f64	d0, d0
   1b15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b162:	d619      	bvs.n	1b198 <strtof_l+0x50>
   1b164:	eef7 6bc0 	vcvt.f32.f64	s13, d0
   1b168:	eddf 7a16 	vldr	s15, [pc, #88]	; 1b1c4 <strtof_l+0x7c>
   1b16c:	eeb0 7ae6 	vabs.f32	s14, s13
   1b170:	eeb4 7a67 	vcmp.f32	s14, s15
   1b174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b178:	dd0b      	ble.n	1b192 <strtof_l+0x4a>
   1b17a:	eeb0 0bc0 	vabs.f64	d0, d0
   1b17e:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 1b1b8 <strtof_l+0x70>
   1b182:	eeb4 0b45 	vcmp.f64	d0, d5
   1b186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b18a:	dc02      	bgt.n	1b192 <strtof_l+0x4a>
   1b18c:	6823      	ldr	r3, [r4, #0]
   1b18e:	2222      	movs	r2, #34	; 0x22
   1b190:	601a      	str	r2, [r3, #0]
   1b192:	eeb0 0a66 	vmov.f32	s0, s13
   1b196:	bd10      	pop	{r4, pc}
   1b198:	ee10 3a90 	vmov	r3, s1
   1b19c:	2b00      	cmp	r3, #0
   1b19e:	480a      	ldr	r0, [pc, #40]	; (1b1c8 <strtof_l+0x80>)
   1b1a0:	da04      	bge.n	1b1ac <strtof_l+0x64>
   1b1a2:	f002 f905 	bl	1d3b0 <nanf>
   1b1a6:	eef1 6a40 	vneg.f32	s13, s0
   1b1aa:	e7f2      	b.n	1b192 <strtof_l+0x4a>
   1b1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b1b0:	f002 b8fe 	b.w	1d3b0 <nanf>
   1b1b4:	f3af 8000 	nop.w
   1b1b8:	ffffffff 	.word	0xffffffff
   1b1bc:	7fefffff 	.word	0x7fefffff
   1b1c0:	20008e58 	.word	0x20008e58
   1b1c4:	7f7fffff 	.word	0x7f7fffff
   1b1c8:	2000577c 	.word	0x2000577c

0001b1cc <strtof>:
   1b1cc:	b510      	push	{r4, lr}
   1b1ce:	4c24      	ldr	r4, [pc, #144]	; (1b260 <strtof+0x94>)
   1b1d0:	4b24      	ldr	r3, [pc, #144]	; (1b264 <strtof+0x98>)
   1b1d2:	4684      	mov	ip, r0
   1b1d4:	460a      	mov	r2, r1
   1b1d6:	6820      	ldr	r0, [r4, #0]
   1b1d8:	4661      	mov	r1, ip
   1b1da:	f7ff f859 	bl	1a290 <_strtod_l>
   1b1de:	eeb4 0b40 	vcmp.f64	d0, d0
   1b1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b1e6:	d627      	bvs.n	1b238 <strtof+0x6c>
   1b1e8:	eef7 7bc0 	vcvt.f32.f64	s15, d0
   1b1ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 1b268 <strtof+0x9c>
   1b1f0:	eef0 6ae7 	vabs.f32	s13, s15
   1b1f4:	eef4 6a47 	vcmp.f32	s13, s14
   1b1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b1fc:	dd0e      	ble.n	1b21c <strtof+0x50>
   1b1fe:	eeb0 5bc0 	vabs.f64	d5, d0
   1b202:	ed9f 6b15 	vldr	d6, [pc, #84]	; 1b258 <strtof+0x8c>
   1b206:	eeb4 5b46 	vcmp.f64	d5, d6
   1b20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b20e:	dc05      	bgt.n	1b21c <strtof+0x50>
   1b210:	6823      	ldr	r3, [r4, #0]
   1b212:	2222      	movs	r2, #34	; 0x22
   1b214:	601a      	str	r2, [r3, #0]
   1b216:	eeb0 0a67 	vmov.f32	s0, s15
   1b21a:	bd10      	pop	{r4, pc}
   1b21c:	ee17 3a90 	vmov	r3, s15
   1b220:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   1b224:	d1f7      	bne.n	1b216 <strtof+0x4a>
   1b226:	4b11      	ldr	r3, [pc, #68]	; (1b26c <strtof+0xa0>)
   1b228:	ee10 2a90 	vmov	r2, s1
   1b22c:	4013      	ands	r3, r2
   1b22e:	2b00      	cmp	r3, #0
   1b230:	d1ee      	bne.n	1b210 <strtof+0x44>
   1b232:	eeb0 0a67 	vmov.f32	s0, s15
   1b236:	bd10      	pop	{r4, pc}
   1b238:	ee10 3a90 	vmov	r3, s1
   1b23c:	2b00      	cmp	r3, #0
   1b23e:	480c      	ldr	r0, [pc, #48]	; (1b270 <strtof+0xa4>)
   1b240:	da04      	bge.n	1b24c <strtof+0x80>
   1b242:	f002 f8b5 	bl	1d3b0 <nanf>
   1b246:	eef1 7a40 	vneg.f32	s15, s0
   1b24a:	e7e4      	b.n	1b216 <strtof+0x4a>
   1b24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b250:	f002 b8ae 	b.w	1d3b0 <nanf>
   1b254:	f3af 8000 	nop.w
   1b258:	ffffffff 	.word	0xffffffff
   1b25c:	7fefffff 	.word	0x7fefffff
   1b260:	20008e58 	.word	0x20008e58
   1b264:	200093a0 	.word	0x200093a0
   1b268:	7f7fffff 	.word	0x7f7fffff
   1b26c:	7ff00000 	.word	0x7ff00000
   1b270:	2000577c 	.word	0x2000577c
   1b274:	2b01      	cmp	r3, #1
   1b276:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b27a:	d040      	beq.n	1b2fe <strtof+0x132>
   1b27c:	2b24      	cmp	r3, #36	; 0x24
   1b27e:	4698      	mov	r8, r3
   1b280:	d83d      	bhi.n	1b2fe <strtof+0x132>
   1b282:	4d4c      	ldr	r5, [pc, #304]	; (1b3b4 <strtof+0x1e8>)
   1b284:	468e      	mov	lr, r1
   1b286:	4676      	mov	r6, lr
   1b288:	f81e bb01 	ldrb.w	fp, [lr], #1
   1b28c:	f815 400b 	ldrb.w	r4, [r5, fp]
   1b290:	f014 0408 	ands.w	r4, r4, #8
   1b294:	d1f7      	bne.n	1b286 <strtof+0xba>
   1b296:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1b29a:	d072      	beq.n	1b382 <strtof+0x1b6>
   1b29c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1b2a0:	bf08      	it	eq
   1b2a2:	f89e b000 	ldrbeq.w	fp, [lr]
   1b2a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1b2aa:	bf08      	it	eq
   1b2ac:	f106 0e02 	addeq.w	lr, r6, #2
   1b2b0:	2b00      	cmp	r3, #0
   1b2b2:	d042      	beq.n	1b33a <strtof+0x16e>
   1b2b4:	2b10      	cmp	r3, #16
   1b2b6:	d057      	beq.n	1b368 <strtof+0x19c>
   1b2b8:	fbb9 f7f8 	udiv	r7, r9, r8
   1b2bc:	2500      	movs	r5, #0
   1b2be:	462e      	mov	r6, r5
   1b2c0:	fb08 9a17 	mls	sl, r8, r7, r9
   1b2c4:	e005      	b.n	1b2d2 <strtof+0x106>
   1b2c6:	d033      	beq.n	1b330 <strtof+0x164>
   1b2c8:	fb08 c606 	mla	r6, r8, r6, ip
   1b2cc:	2501      	movs	r5, #1
   1b2ce:	f81e bb01 	ldrb.w	fp, [lr], #1
   1b2d2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   1b2d6:	f1bc 0f09 	cmp.w	ip, #9
   1b2da:	d906      	bls.n	1b2ea <strtof+0x11e>
   1b2dc:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   1b2e0:	f1bc 0f19 	cmp.w	ip, #25
   1b2e4:	d812      	bhi.n	1b30c <strtof+0x140>
   1b2e6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   1b2ea:	4563      	cmp	r3, ip
   1b2ec:	dd17      	ble.n	1b31e <strtof+0x152>
   1b2ee:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b2f2:	d0ec      	beq.n	1b2ce <strtof+0x102>
   1b2f4:	42b7      	cmp	r7, r6
   1b2f6:	d2e6      	bcs.n	1b2c6 <strtof+0xfa>
   1b2f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b2fc:	e7e7      	b.n	1b2ce <strtof+0x102>
   1b2fe:	f001 fd6d 	bl	1cddc <__errno>
   1b302:	2316      	movs	r3, #22
   1b304:	6003      	str	r3, [r0, #0]
   1b306:	2000      	movs	r0, #0
   1b308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b30c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   1b310:	f1bc 0f19 	cmp.w	ip, #25
   1b314:	d803      	bhi.n	1b31e <strtof+0x152>
   1b316:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   1b31a:	4563      	cmp	r3, ip
   1b31c:	dce7      	bgt.n	1b2ee <strtof+0x122>
   1b31e:	1c6b      	adds	r3, r5, #1
   1b320:	d027      	beq.n	1b372 <strtof+0x1a6>
   1b322:	b98c      	cbnz	r4, 1b348 <strtof+0x17c>
   1b324:	b10a      	cbz	r2, 1b32a <strtof+0x15e>
   1b326:	bba5      	cbnz	r5, 1b392 <strtof+0x1c6>
   1b328:	6011      	str	r1, [r2, #0]
   1b32a:	4630      	mov	r0, r6
   1b32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b330:	45e2      	cmp	sl, ip
   1b332:	dac9      	bge.n	1b2c8 <strtof+0xfc>
   1b334:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b338:	e7c9      	b.n	1b2ce <strtof+0x102>
   1b33a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1b33e:	d005      	beq.n	1b34c <strtof+0x180>
   1b340:	f04f 080a 	mov.w	r8, #10
   1b344:	4643      	mov	r3, r8
   1b346:	e7b7      	b.n	1b2b8 <strtof+0xec>
   1b348:	4276      	negs	r6, r6
   1b34a:	e7eb      	b.n	1b324 <strtof+0x158>
   1b34c:	f89e 3000 	ldrb.w	r3, [lr]
   1b350:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b354:	2b58      	cmp	r3, #88	; 0x58
   1b356:	d121      	bne.n	1b39c <strtof+0x1d0>
   1b358:	f04f 0810 	mov.w	r8, #16
   1b35c:	f89e b001 	ldrb.w	fp, [lr, #1]
   1b360:	4643      	mov	r3, r8
   1b362:	f10e 0e02 	add.w	lr, lr, #2
   1b366:	e7a7      	b.n	1b2b8 <strtof+0xec>
   1b368:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1b36c:	d01a      	beq.n	1b3a4 <strtof+0x1d8>
   1b36e:	4698      	mov	r8, r3
   1b370:	e7a2      	b.n	1b2b8 <strtof+0xec>
   1b372:	2322      	movs	r3, #34	; 0x22
   1b374:	6003      	str	r3, [r0, #0]
   1b376:	b172      	cbz	r2, 1b396 <strtof+0x1ca>
   1b378:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   1b37c:	464e      	mov	r6, r9
   1b37e:	6011      	str	r1, [r2, #0]
   1b380:	e7d3      	b.n	1b32a <strtof+0x15e>
   1b382:	f89e b000 	ldrb.w	fp, [lr]
   1b386:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   1b38a:	f106 0e02 	add.w	lr, r6, #2
   1b38e:	2401      	movs	r4, #1
   1b390:	e78e      	b.n	1b2b0 <strtof+0xe4>
   1b392:	46b1      	mov	r9, r6
   1b394:	e7f0      	b.n	1b378 <strtof+0x1ac>
   1b396:	464e      	mov	r6, r9
   1b398:	4630      	mov	r0, r6
   1b39a:	e7c7      	b.n	1b32c <strtof+0x160>
   1b39c:	f04f 0808 	mov.w	r8, #8
   1b3a0:	4643      	mov	r3, r8
   1b3a2:	e789      	b.n	1b2b8 <strtof+0xec>
   1b3a4:	f89e 5000 	ldrb.w	r5, [lr]
   1b3a8:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   1b3ac:	2d58      	cmp	r5, #88	; 0x58
   1b3ae:	d0d3      	beq.n	1b358 <strtof+0x18c>
   1b3b0:	4698      	mov	r8, r3
   1b3b2:	e781      	b.n	1b2b8 <strtof+0xec>
   1b3b4:	200021d1 	.word	0x200021d1

0001b3b8 <_strtol_r>:
   1b3b8:	e75c      	b.n	1b274 <strtof+0xa8>
   1b3ba:	bf00      	nop

0001b3bc <strtol_l>:
   1b3bc:	b410      	push	{r4}
   1b3be:	4c04      	ldr	r4, [pc, #16]	; (1b3d0 <strtol_l+0x14>)
   1b3c0:	4684      	mov	ip, r0
   1b3c2:	4613      	mov	r3, r2
   1b3c4:	6820      	ldr	r0, [r4, #0]
   1b3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b3ca:	460a      	mov	r2, r1
   1b3cc:	4661      	mov	r1, ip
   1b3ce:	e751      	b.n	1b274 <strtof+0xa8>
   1b3d0:	20008e58 	.word	0x20008e58

0001b3d4 <strtol>:
   1b3d4:	b410      	push	{r4}
   1b3d6:	4c04      	ldr	r4, [pc, #16]	; (1b3e8 <strtol+0x14>)
   1b3d8:	4684      	mov	ip, r0
   1b3da:	4613      	mov	r3, r2
   1b3dc:	6820      	ldr	r0, [r4, #0]
   1b3de:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b3e2:	460a      	mov	r2, r1
   1b3e4:	4661      	mov	r1, ip
   1b3e6:	e745      	b.n	1b274 <strtof+0xa8>
   1b3e8:	20008e58 	.word	0x20008e58

0001b3ec <__cxa_atexit>:
   1b3ec:	4613      	mov	r3, r2
   1b3ee:	460a      	mov	r2, r1
   1b3f0:	4601      	mov	r1, r0
   1b3f2:	2002      	movs	r0, #2
   1b3f4:	f001 bfe2 	b.w	1d3bc <__register_exitproc>

0001b3f8 <__set_ctype>:
   1b3f8:	4b01      	ldr	r3, [pc, #4]	; (1b400 <__set_ctype+0x8>)
   1b3fa:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
   1b3fe:	4770      	bx	lr
   1b400:	200021d0 	.word	0x200021d0

0001b404 <isalnum>:
   1b404:	4b02      	ldr	r3, [pc, #8]	; (1b410 <isalnum+0xc>)
   1b406:	4418      	add	r0, r3
   1b408:	7840      	ldrb	r0, [r0, #1]
   1b40a:	f000 0007 	and.w	r0, r0, #7
   1b40e:	4770      	bx	lr
   1b410:	200021d0 	.word	0x200021d0

0001b414 <isspace>:
   1b414:	4b02      	ldr	r3, [pc, #8]	; (1b420 <isspace+0xc>)
   1b416:	4418      	add	r0, r3
   1b418:	7840      	ldrb	r0, [r0, #1]
   1b41a:	f000 0008 	and.w	r0, r0, #8
   1b41e:	4770      	bx	lr
   1b420:	200021d0 	.word	0x200021d0

0001b424 <stdio_exit_handler>:
   1b424:	4a02      	ldr	r2, [pc, #8]	; (1b430 <stdio_exit_handler+0xc>)
   1b426:	4903      	ldr	r1, [pc, #12]	; (1b434 <stdio_exit_handler+0x10>)
   1b428:	4803      	ldr	r0, [pc, #12]	; (1b438 <stdio_exit_handler+0x14>)
   1b42a:	f000 b95f 	b.w	1b6ec <_fwalk_sglue>
   1b42e:	bf00      	nop
   1b430:	20009394 	.word	0x20009394
   1b434:	00020c4d 	.word	0x00020c4d
   1b438:	20008e60 	.word	0x20008e60

0001b43c <cleanup_stdio>:
   1b43c:	4b0c      	ldr	r3, [pc, #48]	; (1b470 <cleanup_stdio+0x34>)
   1b43e:	6841      	ldr	r1, [r0, #4]
   1b440:	4299      	cmp	r1, r3
   1b442:	b510      	push	{r4, lr}
   1b444:	4604      	mov	r4, r0
   1b446:	d001      	beq.n	1b44c <cleanup_stdio+0x10>
   1b448:	f005 fc00 	bl	20c4c <_fclose_r>
   1b44c:	68a1      	ldr	r1, [r4, #8]
   1b44e:	4b09      	ldr	r3, [pc, #36]	; (1b474 <cleanup_stdio+0x38>)
   1b450:	4299      	cmp	r1, r3
   1b452:	d002      	beq.n	1b45a <cleanup_stdio+0x1e>
   1b454:	4620      	mov	r0, r4
   1b456:	f005 fbf9 	bl	20c4c <_fclose_r>
   1b45a:	68e1      	ldr	r1, [r4, #12]
   1b45c:	4b06      	ldr	r3, [pc, #24]	; (1b478 <cleanup_stdio+0x3c>)
   1b45e:	4299      	cmp	r1, r3
   1b460:	d004      	beq.n	1b46c <cleanup_stdio+0x30>
   1b462:	4620      	mov	r0, r4
   1b464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b468:	f005 bbf0 	b.w	20c4c <_fclose_r>
   1b46c:	bd10      	pop	{r4, pc}
   1b46e:	bf00      	nop
   1b470:	2000e138 	.word	0x2000e138
   1b474:	2000e1a0 	.word	0x2000e1a0
   1b478:	2000e208 	.word	0x2000e208

0001b47c <__fp_lock>:
   1b47c:	b508      	push	{r3, lr}
   1b47e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1b480:	07da      	lsls	r2, r3, #31
   1b482:	d402      	bmi.n	1b48a <__fp_lock+0xe>
   1b484:	898b      	ldrh	r3, [r1, #12]
   1b486:	059b      	lsls	r3, r3, #22
   1b488:	d501      	bpl.n	1b48e <__fp_lock+0x12>
   1b48a:	2000      	movs	r0, #0
   1b48c:	bd08      	pop	{r3, pc}
   1b48e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1b490:	f001 fcd8 	bl	1ce44 <__retarget_lock_acquire_recursive>
   1b494:	2000      	movs	r0, #0
   1b496:	bd08      	pop	{r3, pc}

0001b498 <__fp_unlock>:
   1b498:	b508      	push	{r3, lr}
   1b49a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1b49c:	07da      	lsls	r2, r3, #31
   1b49e:	d402      	bmi.n	1b4a6 <__fp_unlock+0xe>
   1b4a0:	898b      	ldrh	r3, [r1, #12]
   1b4a2:	059b      	lsls	r3, r3, #22
   1b4a4:	d501      	bpl.n	1b4aa <__fp_unlock+0x12>
   1b4a6:	2000      	movs	r0, #0
   1b4a8:	bd08      	pop	{r3, pc}
   1b4aa:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1b4ac:	f001 fcd2 	bl	1ce54 <__retarget_lock_release_recursive>
   1b4b0:	2000      	movs	r0, #0
   1b4b2:	bd08      	pop	{r3, pc}
   1b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b4b8:	4c2a      	ldr	r4, [pc, #168]	; (1b564 <__fp_unlock+0xcc>)
   1b4ba:	4b2b      	ldr	r3, [pc, #172]	; (1b568 <__fp_unlock+0xd0>)
   1b4bc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1b57c <__fp_unlock+0xe4>
   1b4c0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1b580 <__fp_unlock+0xe8>
   1b4c4:	4f29      	ldr	r7, [pc, #164]	; (1b56c <__fp_unlock+0xd4>)
   1b4c6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1b4ca:	2500      	movs	r5, #0
   1b4cc:	2304      	movs	r3, #4
   1b4ce:	2208      	movs	r2, #8
   1b4d0:	4629      	mov	r1, r5
   1b4d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1b4d6:	4e26      	ldr	r6, [pc, #152]	; (1b570 <__fp_unlock+0xd8>)
   1b4d8:	6665      	str	r5, [r4, #100]	; 0x64
   1b4da:	e9c4 5302 	strd	r5, r3, [r4, #8]
   1b4de:	e9c4 5500 	strd	r5, r5, [r4]
   1b4e2:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1b4e6:	61a5      	str	r5, [r4, #24]
   1b4e8:	f000 fb36 	bl	1bb58 <memset>
   1b4ec:	4b21      	ldr	r3, [pc, #132]	; (1b574 <__fp_unlock+0xdc>)
   1b4ee:	6763      	str	r3, [r4, #116]	; 0x74
   1b4f0:	2208      	movs	r2, #8
   1b4f2:	4629      	mov	r1, r5
   1b4f4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1b4f8:	e9c4 4907 	strd	r4, r9, [r4, #28]
   1b4fc:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   1b500:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   1b504:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   1b508:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   1b50c:	6725      	str	r5, [r4, #112]	; 0x70
   1b50e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1b512:	62e6      	str	r6, [r4, #44]	; 0x2c
   1b514:	f000 fb20 	bl	1bb58 <memset>
   1b518:	4b17      	ldr	r3, [pc, #92]	; (1b578 <__fp_unlock+0xe0>)
   1b51a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   1b51e:	4629      	mov	r1, r5
   1b520:	f104 0368 	add.w	r3, r4, #104	; 0x68
   1b524:	2208      	movs	r2, #8
   1b526:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   1b52a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   1b52e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   1b532:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   1b536:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   1b53a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   1b53e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   1b542:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   1b546:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   1b54a:	f000 fb05 	bl	1bb58 <memset>
   1b54e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1b552:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   1b556:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   1b55a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1b55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b562:	bf00      	nop
   1b564:	2000e138 	.word	0x2000e138
   1b568:	0001b425 	.word	0x0001b425
   1b56c:	0001b8a5 	.word	0x0001b8a5
   1b570:	0001b8c5 	.word	0x0001b8c5
   1b574:	00010009 	.word	0x00010009
   1b578:	00020012 	.word	0x00020012
   1b57c:	0001b83d 	.word	0x0001b83d
   1b580:	0001b865 	.word	0x0001b865

0001b584 <__sfp>:
   1b584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b588:	4607      	mov	r7, r0
   1b58a:	482c      	ldr	r0, [pc, #176]	; (1b63c <__sfp+0xb8>)
   1b58c:	f001 fc5a 	bl	1ce44 <__retarget_lock_acquire_recursive>
   1b590:	4b2b      	ldr	r3, [pc, #172]	; (1b640 <__sfp+0xbc>)
   1b592:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   1b596:	2b00      	cmp	r3, #0
   1b598:	d046      	beq.n	1b628 <__sfp+0xa4>
   1b59a:	4e2a      	ldr	r6, [pc, #168]	; (1b644 <__sfp+0xc0>)
   1b59c:	f04f 0804 	mov.w	r8, #4
   1b5a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1b5a4:	3b01      	subs	r3, #1
   1b5a6:	d504      	bpl.n	1b5b2 <__sfp+0x2e>
   1b5a8:	e025      	b.n	1b5f6 <__sfp+0x72>
   1b5aa:	1c5a      	adds	r2, r3, #1
   1b5ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1b5b0:	d021      	beq.n	1b5f6 <__sfp+0x72>
   1b5b2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1b5b6:	3b01      	subs	r3, #1
   1b5b8:	2d00      	cmp	r5, #0
   1b5ba:	d1f6      	bne.n	1b5aa <__sfp+0x26>
   1b5bc:	4b22      	ldr	r3, [pc, #136]	; (1b648 <__sfp+0xc4>)
   1b5be:	60e3      	str	r3, [r4, #12]
   1b5c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1b5c4:	6665      	str	r5, [r4, #100]	; 0x64
   1b5c6:	f001 fc35 	bl	1ce34 <__retarget_lock_init_recursive>
   1b5ca:	481c      	ldr	r0, [pc, #112]	; (1b63c <__sfp+0xb8>)
   1b5cc:	f001 fc42 	bl	1ce54 <__retarget_lock_release_recursive>
   1b5d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1b5d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1b5d8:	6025      	str	r5, [r4, #0]
   1b5da:	61a5      	str	r5, [r4, #24]
   1b5dc:	2208      	movs	r2, #8
   1b5de:	4629      	mov	r1, r5
   1b5e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1b5e4:	f000 fab8 	bl	1bb58 <memset>
   1b5e8:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
   1b5ec:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
   1b5f0:	4620      	mov	r0, r4
   1b5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b5f6:	6835      	ldr	r5, [r6, #0]
   1b5f8:	b10d      	cbz	r5, 1b5fe <__sfp+0x7a>
   1b5fa:	462e      	mov	r6, r5
   1b5fc:	e7d0      	b.n	1b5a0 <__sfp+0x1c>
   1b5fe:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1b602:	4638      	mov	r0, r7
   1b604:	f7fe f9a2 	bl	1994c <_malloc_r>
   1b608:	4604      	mov	r4, r0
   1b60a:	b180      	cbz	r0, 1b62e <__sfp+0xaa>
   1b60c:	6005      	str	r5, [r0, #0]
   1b60e:	f8c0 8004 	str.w	r8, [r0, #4]
   1b612:	300c      	adds	r0, #12
   1b614:	4629      	mov	r1, r5
   1b616:	60a0      	str	r0, [r4, #8]
   1b618:	4625      	mov	r5, r4
   1b61a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1b61e:	f000 fa9b 	bl	1bb58 <memset>
   1b622:	6034      	str	r4, [r6, #0]
   1b624:	462e      	mov	r6, r5
   1b626:	e7bb      	b.n	1b5a0 <__sfp+0x1c>
   1b628:	f7ff ff44 	bl	1b4b4 <__fp_unlock+0x1c>
   1b62c:	e7b5      	b.n	1b59a <__sfp+0x16>
   1b62e:	4803      	ldr	r0, [pc, #12]	; (1b63c <__sfp+0xb8>)
   1b630:	6034      	str	r4, [r6, #0]
   1b632:	f001 fc0f 	bl	1ce54 <__retarget_lock_release_recursive>
   1b636:	230c      	movs	r3, #12
   1b638:	603b      	str	r3, [r7, #0]
   1b63a:	e7d9      	b.n	1b5f0 <__sfp+0x6c>
   1b63c:	2000e540 	.word	0x2000e540
   1b640:	2000e138 	.word	0x2000e138
   1b644:	20009394 	.word	0x20009394
   1b648:	ffff0001 	.word	0xffff0001

0001b64c <__sinit>:
   1b64c:	b510      	push	{r4, lr}
   1b64e:	4604      	mov	r4, r0
   1b650:	480b      	ldr	r0, [pc, #44]	; (1b680 <__sinit+0x34>)
   1b652:	f001 fbf7 	bl	1ce44 <__retarget_lock_acquire_recursive>
   1b656:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b658:	b92b      	cbnz	r3, 1b666 <__sinit+0x1a>
   1b65a:	4b0a      	ldr	r3, [pc, #40]	; (1b684 <__sinit+0x38>)
   1b65c:	4a0a      	ldr	r2, [pc, #40]	; (1b688 <__sinit+0x3c>)
   1b65e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   1b662:	6362      	str	r2, [r4, #52]	; 0x34
   1b664:	b123      	cbz	r3, 1b670 <__sinit+0x24>
   1b666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b66a:	4805      	ldr	r0, [pc, #20]	; (1b680 <__sinit+0x34>)
   1b66c:	f001 bbf2 	b.w	1ce54 <__retarget_lock_release_recursive>
   1b670:	f7ff ff20 	bl	1b4b4 <__fp_unlock+0x1c>
   1b674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b678:	4801      	ldr	r0, [pc, #4]	; (1b680 <__sinit+0x34>)
   1b67a:	f001 bbeb 	b.w	1ce54 <__retarget_lock_release_recursive>
   1b67e:	bf00      	nop
   1b680:	2000e540 	.word	0x2000e540
   1b684:	2000e138 	.word	0x2000e138
   1b688:	0001b43d 	.word	0x0001b43d

0001b68c <__sfp_lock_acquire>:
   1b68c:	4801      	ldr	r0, [pc, #4]	; (1b694 <__sfp_lock_acquire+0x8>)
   1b68e:	f001 bbd9 	b.w	1ce44 <__retarget_lock_acquire_recursive>
   1b692:	bf00      	nop
   1b694:	2000e540 	.word	0x2000e540

0001b698 <__sfp_lock_release>:
   1b698:	4801      	ldr	r0, [pc, #4]	; (1b6a0 <__sfp_lock_release+0x8>)
   1b69a:	f001 bbdb 	b.w	1ce54 <__retarget_lock_release_recursive>
   1b69e:	bf00      	nop
   1b6a0:	2000e540 	.word	0x2000e540

0001b6a4 <__fp_lock_all>:
   1b6a4:	b508      	push	{r3, lr}
   1b6a6:	4805      	ldr	r0, [pc, #20]	; (1b6bc <__fp_lock_all+0x18>)
   1b6a8:	f001 fbcc 	bl	1ce44 <__retarget_lock_acquire_recursive>
   1b6ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b6b0:	4a03      	ldr	r2, [pc, #12]	; (1b6c0 <__fp_lock_all+0x1c>)
   1b6b2:	4904      	ldr	r1, [pc, #16]	; (1b6c4 <__fp_lock_all+0x20>)
   1b6b4:	2000      	movs	r0, #0
   1b6b6:	f000 b819 	b.w	1b6ec <_fwalk_sglue>
   1b6ba:	bf00      	nop
   1b6bc:	2000e540 	.word	0x2000e540
   1b6c0:	20009394 	.word	0x20009394
   1b6c4:	0001b47d 	.word	0x0001b47d

0001b6c8 <__fp_unlock_all>:
   1b6c8:	b508      	push	{r3, lr}
   1b6ca:	4a05      	ldr	r2, [pc, #20]	; (1b6e0 <__fp_unlock_all+0x18>)
   1b6cc:	4905      	ldr	r1, [pc, #20]	; (1b6e4 <__fp_unlock_all+0x1c>)
   1b6ce:	2000      	movs	r0, #0
   1b6d0:	f000 f80c 	bl	1b6ec <_fwalk_sglue>
   1b6d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b6d8:	4803      	ldr	r0, [pc, #12]	; (1b6e8 <__fp_unlock_all+0x20>)
   1b6da:	f001 bbbb 	b.w	1ce54 <__retarget_lock_release_recursive>
   1b6de:	bf00      	nop
   1b6e0:	20009394 	.word	0x20009394
   1b6e4:	0001b499 	.word	0x0001b499
   1b6e8:	2000e540 	.word	0x2000e540

0001b6ec <_fwalk_sglue>:
   1b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b6f0:	4680      	mov	r8, r0
   1b6f2:	460f      	mov	r7, r1
   1b6f4:	4616      	mov	r6, r2
   1b6f6:	f04f 0900 	mov.w	r9, #0
   1b6fa:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   1b6fe:	3d01      	subs	r5, #1
   1b700:	d411      	bmi.n	1b726 <_fwalk_sglue+0x3a>
   1b702:	89a3      	ldrh	r3, [r4, #12]
   1b704:	2b01      	cmp	r3, #1
   1b706:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1b70a:	d908      	bls.n	1b71e <_fwalk_sglue+0x32>
   1b70c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1b710:	3301      	adds	r3, #1
   1b712:	4621      	mov	r1, r4
   1b714:	d003      	beq.n	1b71e <_fwalk_sglue+0x32>
   1b716:	4640      	mov	r0, r8
   1b718:	47b8      	blx	r7
   1b71a:	ea49 0900 	orr.w	r9, r9, r0
   1b71e:	1c6b      	adds	r3, r5, #1
   1b720:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1b724:	d1ed      	bne.n	1b702 <_fwalk_sglue+0x16>
   1b726:	6836      	ldr	r6, [r6, #0]
   1b728:	2e00      	cmp	r6, #0
   1b72a:	d1e6      	bne.n	1b6fa <_fwalk_sglue+0xe>
   1b72c:	4648      	mov	r0, r9
   1b72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b732:	bf00      	nop

0001b734 <_snprintf_r>:
   1b734:	b408      	push	{r3}
   1b736:	b510      	push	{r4, lr}
   1b738:	2a00      	cmp	r2, #0
   1b73a:	b09d      	sub	sp, #116	; 0x74
   1b73c:	4604      	mov	r4, r0
   1b73e:	db33      	blt.n	1b7a8 <_snprintf_r+0x74>
   1b740:	f44f 7302 	mov.w	r3, #520	; 0x208
   1b744:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b748:	9102      	str	r1, [sp, #8]
   1b74a:	9106      	str	r1, [sp, #24]
   1b74c:	ab20      	add	r3, sp, #128	; 0x80
   1b74e:	d017      	beq.n	1b780 <_snprintf_r+0x4c>
   1b750:	3a01      	subs	r2, #1
   1b752:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b756:	9204      	str	r2, [sp, #16]
   1b758:	9207      	str	r2, [sp, #28]
   1b75a:	f8ad 1016 	strh.w	r1, [sp, #22]
   1b75e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b760:	9301      	str	r3, [sp, #4]
   1b762:	a902      	add	r1, sp, #8
   1b764:	f003 fcd0 	bl	1f108 <_svfprintf_r>
   1b768:	1c42      	adds	r2, r0, #1
   1b76a:	da01      	bge.n	1b770 <_snprintf_r+0x3c>
   1b76c:	238b      	movs	r3, #139	; 0x8b
   1b76e:	6023      	str	r3, [r4, #0]
   1b770:	9b02      	ldr	r3, [sp, #8]
   1b772:	2200      	movs	r2, #0
   1b774:	701a      	strb	r2, [r3, #0]
   1b776:	b01d      	add	sp, #116	; 0x74
   1b778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b77c:	b001      	add	sp, #4
   1b77e:	4770      	bx	lr
   1b780:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b784:	9204      	str	r2, [sp, #16]
   1b786:	9207      	str	r2, [sp, #28]
   1b788:	f8ad 1016 	strh.w	r1, [sp, #22]
   1b78c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b78e:	9301      	str	r3, [sp, #4]
   1b790:	a902      	add	r1, sp, #8
   1b792:	f003 fcb9 	bl	1f108 <_svfprintf_r>
   1b796:	1c43      	adds	r3, r0, #1
   1b798:	da01      	bge.n	1b79e <_snprintf_r+0x6a>
   1b79a:	238b      	movs	r3, #139	; 0x8b
   1b79c:	6023      	str	r3, [r4, #0]
   1b79e:	b01d      	add	sp, #116	; 0x74
   1b7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b7a4:	b001      	add	sp, #4
   1b7a6:	4770      	bx	lr
   1b7a8:	238b      	movs	r3, #139	; 0x8b
   1b7aa:	6003      	str	r3, [r0, #0]
   1b7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b7b0:	e7f5      	b.n	1b79e <_snprintf_r+0x6a>
   1b7b2:	bf00      	nop

0001b7b4 <snprintf>:
   1b7b4:	b40c      	push	{r2, r3}
   1b7b6:	b510      	push	{r4, lr}
   1b7b8:	4b1f      	ldr	r3, [pc, #124]	; (1b838 <snprintf+0x84>)
   1b7ba:	2900      	cmp	r1, #0
   1b7bc:	681c      	ldr	r4, [r3, #0]
   1b7be:	b09c      	sub	sp, #112	; 0x70
   1b7c0:	db35      	blt.n	1b82e <snprintf+0x7a>
   1b7c2:	f44f 7302 	mov.w	r3, #520	; 0x208
   1b7c6:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b7ca:	9002      	str	r0, [sp, #8]
   1b7cc:	9006      	str	r0, [sp, #24]
   1b7ce:	ab1f      	add	r3, sp, #124	; 0x7c
   1b7d0:	d018      	beq.n	1b804 <snprintf+0x50>
   1b7d2:	3901      	subs	r1, #1
   1b7d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b7d8:	9104      	str	r1, [sp, #16]
   1b7da:	9107      	str	r1, [sp, #28]
   1b7dc:	f8ad 2016 	strh.w	r2, [sp, #22]
   1b7e0:	a902      	add	r1, sp, #8
   1b7e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b7e4:	9301      	str	r3, [sp, #4]
   1b7e6:	4620      	mov	r0, r4
   1b7e8:	f003 fc8e 	bl	1f108 <_svfprintf_r>
   1b7ec:	1c42      	adds	r2, r0, #1
   1b7ee:	da01      	bge.n	1b7f4 <snprintf+0x40>
   1b7f0:	238b      	movs	r3, #139	; 0x8b
   1b7f2:	6023      	str	r3, [r4, #0]
   1b7f4:	9b02      	ldr	r3, [sp, #8]
   1b7f6:	2200      	movs	r2, #0
   1b7f8:	701a      	strb	r2, [r3, #0]
   1b7fa:	b01c      	add	sp, #112	; 0x70
   1b7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b800:	b002      	add	sp, #8
   1b802:	4770      	bx	lr
   1b804:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b808:	9104      	str	r1, [sp, #16]
   1b80a:	9107      	str	r1, [sp, #28]
   1b80c:	f8ad 2016 	strh.w	r2, [sp, #22]
   1b810:	a902      	add	r1, sp, #8
   1b812:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b814:	9301      	str	r3, [sp, #4]
   1b816:	4620      	mov	r0, r4
   1b818:	f003 fc76 	bl	1f108 <_svfprintf_r>
   1b81c:	1c43      	adds	r3, r0, #1
   1b81e:	da01      	bge.n	1b824 <snprintf+0x70>
   1b820:	238b      	movs	r3, #139	; 0x8b
   1b822:	6023      	str	r3, [r4, #0]
   1b824:	b01c      	add	sp, #112	; 0x70
   1b826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b82a:	b002      	add	sp, #8
   1b82c:	4770      	bx	lr
   1b82e:	238b      	movs	r3, #139	; 0x8b
   1b830:	6023      	str	r3, [r4, #0]
   1b832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b836:	e7f5      	b.n	1b824 <snprintf+0x70>
   1b838:	20008e58 	.word	0x20008e58

0001b83c <__sread>:
   1b83c:	b510      	push	{r4, lr}
   1b83e:	460c      	mov	r4, r1
   1b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b844:	f001 fa8c 	bl	1cd60 <_read_r>
   1b848:	2800      	cmp	r0, #0
   1b84a:	db03      	blt.n	1b854 <__sread+0x18>
   1b84c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1b84e:	4403      	add	r3, r0
   1b850:	6523      	str	r3, [r4, #80]	; 0x50
   1b852:	bd10      	pop	{r4, pc}
   1b854:	89a3      	ldrh	r3, [r4, #12]
   1b856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1b85a:	81a3      	strh	r3, [r4, #12]
   1b85c:	bd10      	pop	{r4, pc}
   1b85e:	bf00      	nop

0001b860 <__seofread>:
   1b860:	2000      	movs	r0, #0
   1b862:	4770      	bx	lr

0001b864 <__swrite>:
   1b864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b868:	460c      	mov	r4, r1
   1b86a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1b86e:	461f      	mov	r7, r3
   1b870:	05cb      	lsls	r3, r1, #23
   1b872:	4605      	mov	r5, r0
   1b874:	4616      	mov	r6, r2
   1b876:	d40b      	bmi.n	1b890 <__swrite+0x2c>
   1b878:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1b87c:	81a1      	strh	r1, [r4, #12]
   1b87e:	463b      	mov	r3, r7
   1b880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1b884:	4632      	mov	r2, r6
   1b886:	4628      	mov	r0, r5
   1b888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b88c:	f001 ba90 	b.w	1cdb0 <_write_r>
   1b890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1b894:	2302      	movs	r3, #2
   1b896:	2200      	movs	r2, #0
   1b898:	f001 fa4c 	bl	1cd34 <_lseek_r>
   1b89c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   1b8a0:	e7ea      	b.n	1b878 <__swrite+0x14>
   1b8a2:	bf00      	nop

0001b8a4 <__sseek>:
   1b8a4:	b510      	push	{r4, lr}
   1b8a6:	460c      	mov	r4, r1
   1b8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b8ac:	f001 fa42 	bl	1cd34 <_lseek_r>
   1b8b0:	89a3      	ldrh	r3, [r4, #12]
   1b8b2:	1c42      	adds	r2, r0, #1
   1b8b4:	bf0e      	itee	eq
   1b8b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1b8ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1b8be:	6520      	strne	r0, [r4, #80]	; 0x50
   1b8c0:	81a3      	strh	r3, [r4, #12]
   1b8c2:	bd10      	pop	{r4, pc}

0001b8c4 <__sclose>:
   1b8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b8c8:	f001 ba22 	b.w	1cd10 <_close_r>

0001b8cc <_vdprintf_r>:
   1b8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b8ce:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   1b8d2:	af04      	add	r7, sp, #16
   1b8d4:	9300      	str	r3, [sp, #0]
   1b8d6:	4613      	mov	r3, r2
   1b8d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b8dc:	460e      	mov	r6, r1
   1b8de:	9203      	str	r2, [sp, #12]
   1b8e0:	4639      	mov	r1, r7
   1b8e2:	aa03      	add	r2, sp, #12
   1b8e4:	4605      	mov	r5, r0
   1b8e6:	f000 f825 	bl	1b934 <_vasnprintf_r>
   1b8ea:	b188      	cbz	r0, 1b910 <_vdprintf_r+0x44>
   1b8ec:	4604      	mov	r4, r0
   1b8ee:	4602      	mov	r2, r0
   1b8f0:	9b03      	ldr	r3, [sp, #12]
   1b8f2:	4631      	mov	r1, r6
   1b8f4:	4628      	mov	r0, r5
   1b8f6:	f001 fa5b 	bl	1cdb0 <_write_r>
   1b8fa:	42bc      	cmp	r4, r7
   1b8fc:	9003      	str	r0, [sp, #12]
   1b8fe:	d004      	beq.n	1b90a <_vdprintf_r+0x3e>
   1b900:	4628      	mov	r0, r5
   1b902:	4621      	mov	r1, r4
   1b904:	f001 fdee 	bl	1d4e4 <_free_r>
   1b908:	9803      	ldr	r0, [sp, #12]
   1b90a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   1b90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b914:	e7f9      	b.n	1b90a <_vdprintf_r+0x3e>
   1b916:	bf00      	nop

0001b918 <vdprintf>:
   1b918:	b410      	push	{r4}
   1b91a:	4c05      	ldr	r4, [pc, #20]	; (1b930 <vdprintf+0x18>)
   1b91c:	4684      	mov	ip, r0
   1b91e:	4613      	mov	r3, r2
   1b920:	6820      	ldr	r0, [r4, #0]
   1b922:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b926:	460a      	mov	r2, r1
   1b928:	4661      	mov	r1, ip
   1b92a:	f7ff bfcf 	b.w	1b8cc <_vdprintf_r>
   1b92e:	bf00      	nop
   1b930:	20008e58 	.word	0x20008e58

0001b934 <_vasnprintf_r>:
   1b934:	b530      	push	{r4, r5, lr}
   1b936:	6814      	ldr	r4, [r2, #0]
   1b938:	4615      	mov	r5, r2
   1b93a:	b09b      	sub	sp, #108	; 0x6c
   1b93c:	461a      	mov	r2, r3
   1b93e:	b109      	cbz	r1, 1b944 <_vasnprintf_r+0x10>
   1b940:	2c00      	cmp	r4, #0
   1b942:	d119      	bne.n	1b978 <_vasnprintf_r+0x44>
   1b944:	2100      	movs	r1, #0
   1b946:	f44f 7322 	mov.w	r3, #648	; 0x288
   1b94a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b94e:	9100      	str	r1, [sp, #0]
   1b950:	9104      	str	r1, [sp, #16]
   1b952:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b956:	9102      	str	r1, [sp, #8]
   1b958:	9105      	str	r1, [sp, #20]
   1b95a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b95e:	4669      	mov	r1, sp
   1b960:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1b962:	f003 fbd1 	bl	1f108 <_svfprintf_r>
   1b966:	2800      	cmp	r0, #0
   1b968:	db13      	blt.n	1b992 <_vasnprintf_r+0x5e>
   1b96a:	9b00      	ldr	r3, [sp, #0]
   1b96c:	6028      	str	r0, [r5, #0]
   1b96e:	2200      	movs	r2, #0
   1b970:	701a      	strb	r2, [r3, #0]
   1b972:	9804      	ldr	r0, [sp, #16]
   1b974:	b01b      	add	sp, #108	; 0x6c
   1b976:	bd30      	pop	{r4, r5, pc}
   1b978:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   1b97c:	9100      	str	r1, [sp, #0]
   1b97e:	9104      	str	r1, [sp, #16]
   1b980:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b984:	4621      	mov	r1, r4
   1b986:	dae4      	bge.n	1b952 <_vasnprintf_r+0x1e>
   1b988:	238b      	movs	r3, #139	; 0x8b
   1b98a:	6003      	str	r3, [r0, #0]
   1b98c:	2000      	movs	r0, #0
   1b98e:	b01b      	add	sp, #108	; 0x6c
   1b990:	bd30      	pop	{r4, r5, pc}
   1b992:	2000      	movs	r0, #0
   1b994:	e7ee      	b.n	1b974 <_vasnprintf_r+0x40>
   1b996:	bf00      	nop

0001b998 <vasnprintf>:
   1b998:	b530      	push	{r4, r5, lr}
   1b99a:	4c18      	ldr	r4, [pc, #96]	; (1b9fc <vasnprintf+0x64>)
   1b99c:	460d      	mov	r5, r1
   1b99e:	b09b      	sub	sp, #108	; 0x6c
   1b9a0:	6821      	ldr	r1, [r4, #0]
   1b9a2:	682c      	ldr	r4, [r5, #0]
   1b9a4:	b108      	cbz	r0, 1b9aa <vasnprintf+0x12>
   1b9a6:	2c00      	cmp	r4, #0
   1b9a8:	d119      	bne.n	1b9de <vasnprintf+0x46>
   1b9aa:	2400      	movs	r4, #0
   1b9ac:	f44f 7022 	mov.w	r0, #648	; 0x288
   1b9b0:	f8ad 000c 	strh.w	r0, [sp, #12]
   1b9b4:	9400      	str	r4, [sp, #0]
   1b9b6:	9404      	str	r4, [sp, #16]
   1b9b8:	4608      	mov	r0, r1
   1b9ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b9be:	f8ad 100e 	strh.w	r1, [sp, #14]
   1b9c2:	4669      	mov	r1, sp
   1b9c4:	9402      	str	r4, [sp, #8]
   1b9c6:	9405      	str	r4, [sp, #20]
   1b9c8:	f003 fb9e 	bl	1f108 <_svfprintf_r>
   1b9cc:	2800      	cmp	r0, #0
   1b9ce:	db12      	blt.n	1b9f6 <vasnprintf+0x5e>
   1b9d0:	9b00      	ldr	r3, [sp, #0]
   1b9d2:	6028      	str	r0, [r5, #0]
   1b9d4:	2200      	movs	r2, #0
   1b9d6:	701a      	strb	r2, [r3, #0]
   1b9d8:	9804      	ldr	r0, [sp, #16]
   1b9da:	b01b      	add	sp, #108	; 0x6c
   1b9dc:	bd30      	pop	{r4, r5, pc}
   1b9de:	9000      	str	r0, [sp, #0]
   1b9e0:	9004      	str	r0, [sp, #16]
   1b9e2:	f44f 60c1 	mov.w	r0, #1544	; 0x608
   1b9e6:	f8ad 000c 	strh.w	r0, [sp, #12]
   1b9ea:	dae5      	bge.n	1b9b8 <vasnprintf+0x20>
   1b9ec:	238b      	movs	r3, #139	; 0x8b
   1b9ee:	2000      	movs	r0, #0
   1b9f0:	600b      	str	r3, [r1, #0]
   1b9f2:	b01b      	add	sp, #108	; 0x6c
   1b9f4:	bd30      	pop	{r4, r5, pc}
   1b9f6:	2000      	movs	r0, #0
   1b9f8:	e7ef      	b.n	1b9da <vasnprintf+0x42>
   1b9fa:	bf00      	nop
   1b9fc:	20008e58 	.word	0x20008e58

0001ba00 <memcmp>:
   1ba00:	2a03      	cmp	r2, #3
   1ba02:	b570      	push	{r4, r5, r6, lr}
   1ba04:	d914      	bls.n	1ba30 <memcmp+0x30>
   1ba06:	ea40 0301 	orr.w	r3, r0, r1
   1ba0a:	079b      	lsls	r3, r3, #30
   1ba0c:	d122      	bne.n	1ba54 <memcmp+0x54>
   1ba0e:	4604      	mov	r4, r0
   1ba10:	460b      	mov	r3, r1
   1ba12:	4619      	mov	r1, r3
   1ba14:	4620      	mov	r0, r4
   1ba16:	680e      	ldr	r6, [r1, #0]
   1ba18:	6805      	ldr	r5, [r0, #0]
   1ba1a:	42b5      	cmp	r5, r6
   1ba1c:	f104 0404 	add.w	r4, r4, #4
   1ba20:	f103 0304 	add.w	r3, r3, #4
   1ba24:	d116      	bne.n	1ba54 <memcmp+0x54>
   1ba26:	3a04      	subs	r2, #4
   1ba28:	2a03      	cmp	r2, #3
   1ba2a:	4620      	mov	r0, r4
   1ba2c:	4619      	mov	r1, r3
   1ba2e:	d8f0      	bhi.n	1ba12 <memcmp+0x12>
   1ba30:	1e54      	subs	r4, r2, #1
   1ba32:	b19a      	cbz	r2, 1ba5c <memcmp+0x5c>
   1ba34:	1e42      	subs	r2, r0, #1
   1ba36:	3901      	subs	r1, #1
   1ba38:	e001      	b.n	1ba3e <memcmp+0x3e>
   1ba3a:	18c3      	adds	r3, r0, r3
   1ba3c:	d00c      	beq.n	1ba58 <memcmp+0x58>
   1ba3e:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1ba42:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1ba46:	45e6      	cmp	lr, ip
   1ba48:	eba4 0302 	sub.w	r3, r4, r2
   1ba4c:	d0f5      	beq.n	1ba3a <memcmp+0x3a>
   1ba4e:	ebae 000c 	sub.w	r0, lr, ip
   1ba52:	bd70      	pop	{r4, r5, r6, pc}
   1ba54:	1e54      	subs	r4, r2, #1
   1ba56:	e7ed      	b.n	1ba34 <memcmp+0x34>
   1ba58:	4618      	mov	r0, r3
   1ba5a:	bd70      	pop	{r4, r5, r6, pc}
   1ba5c:	4610      	mov	r0, r2
   1ba5e:	bd70      	pop	{r4, r5, r6, pc}

0001ba60 <memmove>:
   1ba60:	4288      	cmp	r0, r1
   1ba62:	d90d      	bls.n	1ba80 <memmove+0x20>
   1ba64:	188b      	adds	r3, r1, r2
   1ba66:	4283      	cmp	r3, r0
   1ba68:	d90a      	bls.n	1ba80 <memmove+0x20>
   1ba6a:	eb00 0c02 	add.w	ip, r0, r2
   1ba6e:	b1ba      	cbz	r2, 1baa0 <memmove+0x40>
   1ba70:	4662      	mov	r2, ip
   1ba72:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1ba76:	f802 cd01 	strb.w	ip, [r2, #-1]!
   1ba7a:	4299      	cmp	r1, r3
   1ba7c:	d1f9      	bne.n	1ba72 <memmove+0x12>
   1ba7e:	4770      	bx	lr
   1ba80:	2a0f      	cmp	r2, #15
   1ba82:	d80e      	bhi.n	1baa2 <memmove+0x42>
   1ba84:	4603      	mov	r3, r0
   1ba86:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1ba8a:	b14a      	cbz	r2, 1baa0 <memmove+0x40>
   1ba8c:	f10c 0c01 	add.w	ip, ip, #1
   1ba90:	3b01      	subs	r3, #1
   1ba92:	448c      	add	ip, r1
   1ba94:	f811 2b01 	ldrb.w	r2, [r1], #1
   1ba98:	f803 2f01 	strb.w	r2, [r3, #1]!
   1ba9c:	4561      	cmp	r1, ip
   1ba9e:	d1f9      	bne.n	1ba94 <memmove+0x34>
   1baa0:	4770      	bx	lr
   1baa2:	ea40 0301 	orr.w	r3, r0, r1
   1baa6:	079b      	lsls	r3, r3, #30
   1baa8:	d150      	bne.n	1bb4c <memmove+0xec>
   1baaa:	f1a2 0310 	sub.w	r3, r2, #16
   1baae:	b570      	push	{r4, r5, r6, lr}
   1bab0:	f101 0c20 	add.w	ip, r1, #32
   1bab4:	f023 050f 	bic.w	r5, r3, #15
   1bab8:	f101 0e10 	add.w	lr, r1, #16
   1babc:	f100 0410 	add.w	r4, r0, #16
   1bac0:	44ac      	add	ip, r5
   1bac2:	091b      	lsrs	r3, r3, #4
   1bac4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   1bac8:	f844 5c10 	str.w	r5, [r4, #-16]
   1bacc:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   1bad0:	f844 5c0c 	str.w	r5, [r4, #-12]
   1bad4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   1bad8:	f844 5c08 	str.w	r5, [r4, #-8]
   1badc:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   1bae0:	f844 5c04 	str.w	r5, [r4, #-4]
   1bae4:	f10e 0e10 	add.w	lr, lr, #16
   1bae8:	45e6      	cmp	lr, ip
   1baea:	f104 0410 	add.w	r4, r4, #16
   1baee:	d1e9      	bne.n	1bac4 <memmove+0x64>
   1baf0:	3301      	adds	r3, #1
   1baf2:	f012 0f0c 	tst.w	r2, #12
   1baf6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1bafa:	f002 040f 	and.w	r4, r2, #15
   1bafe:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   1bb02:	d027      	beq.n	1bb54 <memmove+0xf4>
   1bb04:	3c04      	subs	r4, #4
   1bb06:	f024 0603 	bic.w	r6, r4, #3
   1bb0a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1bb0e:	441e      	add	r6, r3
   1bb10:	1f1c      	subs	r4, r3, #4
   1bb12:	468e      	mov	lr, r1
   1bb14:	f85e 5b04 	ldr.w	r5, [lr], #4
   1bb18:	f844 5f04 	str.w	r5, [r4, #4]!
   1bb1c:	42b4      	cmp	r4, r6
   1bb1e:	d1f9      	bne.n	1bb14 <memmove+0xb4>
   1bb20:	f10c 0401 	add.w	r4, ip, #1
   1bb24:	f002 0203 	and.w	r2, r2, #3
   1bb28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1bb2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1bb30:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1bb34:	b14a      	cbz	r2, 1bb4a <memmove+0xea>
   1bb36:	f10c 0c01 	add.w	ip, ip, #1
   1bb3a:	3b01      	subs	r3, #1
   1bb3c:	448c      	add	ip, r1
   1bb3e:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bb42:	f803 2f01 	strb.w	r2, [r3, #1]!
   1bb46:	4561      	cmp	r1, ip
   1bb48:	d1f9      	bne.n	1bb3e <memmove+0xde>
   1bb4a:	bd70      	pop	{r4, r5, r6, pc}
   1bb4c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1bb50:	4603      	mov	r3, r0
   1bb52:	e79b      	b.n	1ba8c <memmove+0x2c>
   1bb54:	4622      	mov	r2, r4
   1bb56:	e7eb      	b.n	1bb30 <memmove+0xd0>

0001bb58 <memset>:
   1bb58:	0783      	lsls	r3, r0, #30
   1bb5a:	b530      	push	{r4, r5, lr}
   1bb5c:	d048      	beq.n	1bbf0 <memset+0x98>
   1bb5e:	1e54      	subs	r4, r2, #1
   1bb60:	2a00      	cmp	r2, #0
   1bb62:	d03f      	beq.n	1bbe4 <memset+0x8c>
   1bb64:	b2ca      	uxtb	r2, r1
   1bb66:	4603      	mov	r3, r0
   1bb68:	e001      	b.n	1bb6e <memset+0x16>
   1bb6a:	3c01      	subs	r4, #1
   1bb6c:	d33a      	bcc.n	1bbe4 <memset+0x8c>
   1bb6e:	f803 2b01 	strb.w	r2, [r3], #1
   1bb72:	079d      	lsls	r5, r3, #30
   1bb74:	d1f9      	bne.n	1bb6a <memset+0x12>
   1bb76:	2c03      	cmp	r4, #3
   1bb78:	d92d      	bls.n	1bbd6 <memset+0x7e>
   1bb7a:	b2cd      	uxtb	r5, r1
   1bb7c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1bb80:	2c0f      	cmp	r4, #15
   1bb82:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1bb86:	d936      	bls.n	1bbf6 <memset+0x9e>
   1bb88:	f1a4 0210 	sub.w	r2, r4, #16
   1bb8c:	f022 0c0f 	bic.w	ip, r2, #15
   1bb90:	f103 0e20 	add.w	lr, r3, #32
   1bb94:	44e6      	add	lr, ip
   1bb96:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   1bb9a:	f103 0210 	add.w	r2, r3, #16
   1bb9e:	e942 5504 	strd	r5, r5, [r2, #-16]
   1bba2:	e942 5502 	strd	r5, r5, [r2, #-8]
   1bba6:	3210      	adds	r2, #16
   1bba8:	4572      	cmp	r2, lr
   1bbaa:	d1f8      	bne.n	1bb9e <memset+0x46>
   1bbac:	f10c 0201 	add.w	r2, ip, #1
   1bbb0:	f014 0f0c 	tst.w	r4, #12
   1bbb4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   1bbb8:	f004 0c0f 	and.w	ip, r4, #15
   1bbbc:	d013      	beq.n	1bbe6 <memset+0x8e>
   1bbbe:	f1ac 0304 	sub.w	r3, ip, #4
   1bbc2:	f023 0303 	bic.w	r3, r3, #3
   1bbc6:	3304      	adds	r3, #4
   1bbc8:	4413      	add	r3, r2
   1bbca:	f842 5b04 	str.w	r5, [r2], #4
   1bbce:	4293      	cmp	r3, r2
   1bbd0:	d1fb      	bne.n	1bbca <memset+0x72>
   1bbd2:	f00c 0403 	and.w	r4, ip, #3
   1bbd6:	b12c      	cbz	r4, 1bbe4 <memset+0x8c>
   1bbd8:	b2c9      	uxtb	r1, r1
   1bbda:	441c      	add	r4, r3
   1bbdc:	f803 1b01 	strb.w	r1, [r3], #1
   1bbe0:	429c      	cmp	r4, r3
   1bbe2:	d1fb      	bne.n	1bbdc <memset+0x84>
   1bbe4:	bd30      	pop	{r4, r5, pc}
   1bbe6:	4664      	mov	r4, ip
   1bbe8:	4613      	mov	r3, r2
   1bbea:	2c00      	cmp	r4, #0
   1bbec:	d1f4      	bne.n	1bbd8 <memset+0x80>
   1bbee:	e7f9      	b.n	1bbe4 <memset+0x8c>
   1bbf0:	4603      	mov	r3, r0
   1bbf2:	4614      	mov	r4, r2
   1bbf4:	e7bf      	b.n	1bb76 <memset+0x1e>
   1bbf6:	461a      	mov	r2, r3
   1bbf8:	46a4      	mov	ip, r4
   1bbfa:	e7e0      	b.n	1bbbe <memset+0x66>

0001bbfc <strchr>:
   1bbfc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1bc00:	4603      	mov	r3, r0
   1bc02:	d044      	beq.n	1bc8e <strchr+0x92>
   1bc04:	0782      	lsls	r2, r0, #30
   1bc06:	d132      	bne.n	1bc6e <strchr+0x72>
   1bc08:	b510      	push	{r4, lr}
   1bc0a:	6804      	ldr	r4, [r0, #0]
   1bc0c:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
   1bc10:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
   1bc14:	ea8e 0204 	eor.w	r2, lr, r4
   1bc18:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1bc1c:	ea23 0302 	bic.w	r3, r3, r2
   1bc20:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1bc24:	ea22 0204 	bic.w	r2, r2, r4
   1bc28:	4313      	orrs	r3, r2
   1bc2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bc2e:	d10f      	bne.n	1bc50 <strchr+0x54>
   1bc30:	f850 4f04 	ldr.w	r4, [r0, #4]!
   1bc34:	ea84 0c0e 	eor.w	ip, r4, lr
   1bc38:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   1bc3c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
   1bc40:	ea23 0304 	bic.w	r3, r3, r4
   1bc44:	ea22 020c 	bic.w	r2, r2, ip
   1bc48:	4313      	orrs	r3, r2
   1bc4a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bc4e:	d0ef      	beq.n	1bc30 <strchr+0x34>
   1bc50:	7803      	ldrb	r3, [r0, #0]
   1bc52:	b923      	cbnz	r3, 1bc5e <strchr+0x62>
   1bc54:	e036      	b.n	1bcc4 <strchr+0xc8>
   1bc56:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1bc5a:	2b00      	cmp	r3, #0
   1bc5c:	d032      	beq.n	1bcc4 <strchr+0xc8>
   1bc5e:	4299      	cmp	r1, r3
   1bc60:	d1f9      	bne.n	1bc56 <strchr+0x5a>
   1bc62:	bd10      	pop	{r4, pc}
   1bc64:	428a      	cmp	r2, r1
   1bc66:	d011      	beq.n	1bc8c <strchr+0x90>
   1bc68:	079a      	lsls	r2, r3, #30
   1bc6a:	4618      	mov	r0, r3
   1bc6c:	d0cc      	beq.n	1bc08 <strchr+0xc>
   1bc6e:	4618      	mov	r0, r3
   1bc70:	f813 2b01 	ldrb.w	r2, [r3], #1
   1bc74:	2a00      	cmp	r2, #0
   1bc76:	d1f5      	bne.n	1bc64 <strchr+0x68>
   1bc78:	4610      	mov	r0, r2
   1bc7a:	4770      	bx	lr
   1bc7c:	0799      	lsls	r1, r3, #30
   1bc7e:	4618      	mov	r0, r3
   1bc80:	d007      	beq.n	1bc92 <strchr+0x96>
   1bc82:	4618      	mov	r0, r3
   1bc84:	3301      	adds	r3, #1
   1bc86:	7802      	ldrb	r2, [r0, #0]
   1bc88:	2a00      	cmp	r2, #0
   1bc8a:	d1f7      	bne.n	1bc7c <strchr+0x80>
   1bc8c:	4770      	bx	lr
   1bc8e:	0782      	lsls	r2, r0, #30
   1bc90:	d1f7      	bne.n	1bc82 <strchr+0x86>
   1bc92:	6802      	ldr	r2, [r0, #0]
   1bc94:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1bc98:	ea23 0302 	bic.w	r3, r3, r2
   1bc9c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bca0:	d108      	bne.n	1bcb4 <strchr+0xb8>
   1bca2:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1bca6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1bcaa:	ea23 0302 	bic.w	r3, r3, r2
   1bcae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1bcb2:	d0f6      	beq.n	1bca2 <strchr+0xa6>
   1bcb4:	7803      	ldrb	r3, [r0, #0]
   1bcb6:	2b00      	cmp	r3, #0
   1bcb8:	d0e8      	beq.n	1bc8c <strchr+0x90>
   1bcba:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1bcbe:	2b00      	cmp	r3, #0
   1bcc0:	d1fb      	bne.n	1bcba <strchr+0xbe>
   1bcc2:	4770      	bx	lr
   1bcc4:	4618      	mov	r0, r3
   1bcc6:	bd10      	pop	{r4, pc}

0001bcc8 <strncasecmp>:
   1bcc8:	b33a      	cbz	r2, 1bd1a <strncasecmp+0x52>
   1bcca:	b530      	push	{r4, r5, lr}
   1bccc:	4402      	add	r2, r0
   1bcce:	4d14      	ldr	r5, [pc, #80]	; (1bd20 <strncasecmp+0x58>)
   1bcd0:	4604      	mov	r4, r0
   1bcd2:	e005      	b.n	1bce0 <strncasecmp+0x18>
   1bcd4:	ebbc 0c03 	subs.w	ip, ip, r3
   1bcd8:	d11d      	bne.n	1bd16 <strncasecmp+0x4e>
   1bcda:	b1cb      	cbz	r3, 1bd10 <strncasecmp+0x48>
   1bcdc:	4294      	cmp	r4, r2
   1bcde:	d018      	beq.n	1bd12 <strncasecmp+0x4a>
   1bce0:	f814 0b01 	ldrb.w	r0, [r4], #1
   1bce4:	5c2b      	ldrb	r3, [r5, r0]
   1bce6:	f003 0303 	and.w	r3, r3, #3
   1bcea:	2b01      	cmp	r3, #1
   1bcec:	f811 3b01 	ldrb.w	r3, [r1], #1
   1bcf0:	f815 e003 	ldrb.w	lr, [r5, r3]
   1bcf4:	f00e 0e03 	and.w	lr, lr, #3
   1bcf8:	4684      	mov	ip, r0
   1bcfa:	bf08      	it	eq
   1bcfc:	f100 0c20 	addeq.w	ip, r0, #32
   1bd00:	f1be 0f01 	cmp.w	lr, #1
   1bd04:	4618      	mov	r0, r3
   1bd06:	d1e5      	bne.n	1bcd4 <strncasecmp+0xc>
   1bd08:	3320      	adds	r3, #32
   1bd0a:	ebbc 0003 	subs.w	r0, ip, r3
   1bd0e:	d0e5      	beq.n	1bcdc <strncasecmp+0x14>
   1bd10:	bd30      	pop	{r4, r5, pc}
   1bd12:	2000      	movs	r0, #0
   1bd14:	bd30      	pop	{r4, r5, pc}
   1bd16:	4660      	mov	r0, ip
   1bd18:	bd30      	pop	{r4, r5, pc}
   1bd1a:	4610      	mov	r0, r2
   1bd1c:	4770      	bx	lr
   1bd1e:	bf00      	nop
   1bd20:	200021d1 	.word	0x200021d1

0001bd24 <strncmp>:
   1bd24:	2a00      	cmp	r2, #0
   1bd26:	d03e      	beq.n	1bda6 <strncmp+0x82>
   1bd28:	ea40 0301 	orr.w	r3, r0, r1
   1bd2c:	079b      	lsls	r3, r3, #30
   1bd2e:	b530      	push	{r4, r5, lr}
   1bd30:	4684      	mov	ip, r0
   1bd32:	d12f      	bne.n	1bd94 <strncmp+0x70>
   1bd34:	2a03      	cmp	r2, #3
   1bd36:	d92d      	bls.n	1bd94 <strncmp+0x70>
   1bd38:	460b      	mov	r3, r1
   1bd3a:	e008      	b.n	1bd4e <strncmp+0x2a>
   1bd3c:	3a04      	subs	r2, #4
   1bd3e:	4684      	mov	ip, r0
   1bd40:	4619      	mov	r1, r3
   1bd42:	d025      	beq.n	1bd90 <strncmp+0x6c>
   1bd44:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   1bd48:	d122      	bne.n	1bd90 <strncmp+0x6c>
   1bd4a:	2a03      	cmp	r2, #3
   1bd4c:	d922      	bls.n	1bd94 <strncmp+0x70>
   1bd4e:	6804      	ldr	r4, [r0, #0]
   1bd50:	4619      	mov	r1, r3
   1bd52:	f853 5b04 	ldr.w	r5, [r3], #4
   1bd56:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   1bd5a:	42ac      	cmp	r4, r5
   1bd5c:	4684      	mov	ip, r0
   1bd5e:	ea2e 0e04 	bic.w	lr, lr, r4
   1bd62:	f100 0004 	add.w	r0, r0, #4
   1bd66:	d0e9      	beq.n	1bd3c <strncmp+0x18>
   1bd68:	f89c 0000 	ldrb.w	r0, [ip]
   1bd6c:	780c      	ldrb	r4, [r1, #0]
   1bd6e:	42a0      	cmp	r0, r4
   1bd70:	d11b      	bne.n	1bdaa <strncmp+0x86>
   1bd72:	46e6      	mov	lr, ip
   1bd74:	b168      	cbz	r0, 1bd92 <strncmp+0x6e>
   1bd76:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1bd7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1bd7e:	eba2 030e 	sub.w	r3, r2, lr
   1bd82:	42a0      	cmp	r0, r4
   1bd84:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1bd88:	d10f      	bne.n	1bdaa <strncmp+0x86>
   1bd8a:	eb1c 0303 	adds.w	r3, ip, r3
   1bd8e:	d1f1      	bne.n	1bd74 <strncmp+0x50>
   1bd90:	2000      	movs	r0, #0
   1bd92:	bd30      	pop	{r4, r5, pc}
   1bd94:	f89c 0000 	ldrb.w	r0, [ip]
   1bd98:	780c      	ldrb	r4, [r1, #0]
   1bd9a:	4284      	cmp	r4, r0
   1bd9c:	d105      	bne.n	1bdaa <strncmp+0x86>
   1bd9e:	2a01      	cmp	r2, #1
   1bda0:	d0f6      	beq.n	1bd90 <strncmp+0x6c>
   1bda2:	46e6      	mov	lr, ip
   1bda4:	e7e6      	b.n	1bd74 <strncmp+0x50>
   1bda6:	4610      	mov	r0, r2
   1bda8:	4770      	bx	lr
   1bdaa:	1b00      	subs	r0, r0, r4
   1bdac:	bd30      	pop	{r4, r5, pc}
   1bdae:	bf00      	nop

0001bdb0 <strncpy>:
   1bdb0:	ea40 0301 	orr.w	r3, r0, r1
   1bdb4:	079b      	lsls	r3, r3, #30
   1bdb6:	b530      	push	{r4, r5, lr}
   1bdb8:	d101      	bne.n	1bdbe <strncpy+0xe>
   1bdba:	2a03      	cmp	r2, #3
   1bdbc:	d80f      	bhi.n	1bdde <strncpy+0x2e>
   1bdbe:	4684      	mov	ip, r0
   1bdc0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1bdc4:	e007      	b.n	1bdd6 <strncpy+0x26>
   1bdc6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   1bdca:	f803 1b01 	strb.w	r1, [r3], #1
   1bdce:	1e54      	subs	r4, r2, #1
   1bdd0:	b1c1      	cbz	r1, 1be04 <strncpy+0x54>
   1bdd2:	469c      	mov	ip, r3
   1bdd4:	4622      	mov	r2, r4
   1bdd6:	4663      	mov	r3, ip
   1bdd8:	2a00      	cmp	r2, #0
   1bdda:	d1f4      	bne.n	1bdc6 <strncpy+0x16>
   1bddc:	bd30      	pop	{r4, r5, pc}
   1bdde:	460b      	mov	r3, r1
   1bde0:	4684      	mov	ip, r0
   1bde2:	4619      	mov	r1, r3
   1bde4:	f853 5b04 	ldr.w	r5, [r3], #4
   1bde8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   1bdec:	ea24 0405 	bic.w	r4, r4, r5
   1bdf0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1bdf4:	d1e4      	bne.n	1bdc0 <strncpy+0x10>
   1bdf6:	3a04      	subs	r2, #4
   1bdf8:	2a03      	cmp	r2, #3
   1bdfa:	f84c 5b04 	str.w	r5, [ip], #4
   1bdfe:	4619      	mov	r1, r3
   1be00:	d8ef      	bhi.n	1bde2 <strncpy+0x32>
   1be02:	e7dd      	b.n	1bdc0 <strncpy+0x10>
   1be04:	4494      	add	ip, r2
   1be06:	2c00      	cmp	r4, #0
   1be08:	d0e8      	beq.n	1bddc <strncpy+0x2c>
   1be0a:	f803 1b01 	strb.w	r1, [r3], #1
   1be0e:	4563      	cmp	r3, ip
   1be10:	d1fb      	bne.n	1be0a <strncpy+0x5a>
   1be12:	bd30      	pop	{r4, r5, pc}
   1be14:	2901      	cmp	r1, #1
   1be16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be1a:	d95b      	bls.n	1bed4 <strncpy+0x124>
   1be1c:	f04f 0801 	mov.w	r8, #1
   1be20:	46c6      	mov	lr, r8
   1be22:	2400      	movs	r4, #0
   1be24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1be28:	4643      	mov	r3, r8
   1be2a:	e008      	b.n	1be3e <strncpy+0x8e>
   1be2c:	eba3 0805 	sub.w	r8, r3, r5
   1be30:	461c      	mov	r4, r3
   1be32:	f04f 0e01 	mov.w	lr, #1
   1be36:	eb04 030e 	add.w	r3, r4, lr
   1be3a:	428b      	cmp	r3, r1
   1be3c:	d210      	bcs.n	1be60 <strncpy+0xb0>
   1be3e:	eb00 0c0e 	add.w	ip, r0, lr
   1be42:	5cc7      	ldrb	r7, [r0, r3]
   1be44:	f81c 6005 	ldrb.w	r6, [ip, r5]
   1be48:	42b7      	cmp	r7, r6
   1be4a:	d3ef      	bcc.n	1be2c <strncpy+0x7c>
   1be4c:	d032      	beq.n	1beb4 <strncpy+0x104>
   1be4e:	f04f 0801 	mov.w	r8, #1
   1be52:	4625      	mov	r5, r4
   1be54:	46c6      	mov	lr, r8
   1be56:	4444      	add	r4, r8
   1be58:	eb04 030e 	add.w	r3, r4, lr
   1be5c:	428b      	cmp	r3, r1
   1be5e:	d3ee      	bcc.n	1be3e <strncpy+0x8e>
   1be60:	2701      	movs	r7, #1
   1be62:	f8c2 8000 	str.w	r8, [r2]
   1be66:	46be      	mov	lr, r7
   1be68:	2400      	movs	r4, #0
   1be6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1be6e:	463b      	mov	r3, r7
   1be70:	e007      	b.n	1be82 <strncpy+0xd2>
   1be72:	1b9f      	subs	r7, r3, r6
   1be74:	461c      	mov	r4, r3
   1be76:	f04f 0e01 	mov.w	lr, #1
   1be7a:	eb04 030e 	add.w	r3, r4, lr
   1be7e:	428b      	cmp	r3, r1
   1be80:	d210      	bcs.n	1bea4 <strncpy+0xf4>
   1be82:	eb00 0c06 	add.w	ip, r0, r6
   1be86:	f810 8003 	ldrb.w	r8, [r0, r3]
   1be8a:	f81c c00e 	ldrb.w	ip, [ip, lr]
   1be8e:	45e0      	cmp	r8, ip
   1be90:	d8ef      	bhi.n	1be72 <strncpy+0xc2>
   1be92:	d017      	beq.n	1bec4 <strncpy+0x114>
   1be94:	2701      	movs	r7, #1
   1be96:	4626      	mov	r6, r4
   1be98:	46be      	mov	lr, r7
   1be9a:	443c      	add	r4, r7
   1be9c:	eb04 030e 	add.w	r3, r4, lr
   1bea0:	428b      	cmp	r3, r1
   1bea2:	d3ee      	bcc.n	1be82 <strncpy+0xd2>
   1bea4:	3601      	adds	r6, #1
   1bea6:	1c68      	adds	r0, r5, #1
   1bea8:	4286      	cmp	r6, r0
   1beaa:	d301      	bcc.n	1beb0 <strncpy+0x100>
   1beac:	6017      	str	r7, [r2, #0]
   1beae:	4630      	mov	r0, r6
   1beb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1beb4:	45c6      	cmp	lr, r8
   1beb6:	bf0a      	itet	eq
   1beb8:	4474      	addeq	r4, lr
   1beba:	f10e 0e01 	addne.w	lr, lr, #1
   1bebe:	f04f 0e01 	moveq.w	lr, #1
   1bec2:	e7b8      	b.n	1be36 <strncpy+0x86>
   1bec4:	45be      	cmp	lr, r7
   1bec6:	bf0a      	itet	eq
   1bec8:	4474      	addeq	r4, lr
   1beca:	f10e 0e01 	addne.w	lr, lr, #1
   1bece:	f04f 0e01 	moveq.w	lr, #1
   1bed2:	e7d2      	b.n	1be7a <strncpy+0xca>
   1bed4:	2701      	movs	r7, #1
   1bed6:	2600      	movs	r6, #0
   1bed8:	e7e8      	b.n	1beac <strncpy+0xfc>
   1beda:	bf00      	nop
   1bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bee0:	4616      	mov	r6, r2
   1bee2:	b085      	sub	sp, #20
   1bee4:	aa03      	add	r2, sp, #12
   1bee6:	4682      	mov	sl, r0
   1bee8:	4689      	mov	r9, r1
   1beea:	4630      	mov	r0, r6
   1beec:	4619      	mov	r1, r3
   1beee:	4698      	mov	r8, r3
   1bef0:	f7ff ff90 	bl	1be14 <strncpy+0x64>
   1bef4:	9903      	ldr	r1, [sp, #12]
   1bef6:	4683      	mov	fp, r0
   1bef8:	4602      	mov	r2, r0
   1befa:	4431      	add	r1, r6
   1befc:	4630      	mov	r0, r6
   1befe:	f7ff fd7f 	bl	1ba00 <memcmp>
   1bf02:	2800      	cmp	r0, #0
   1bf04:	d15c      	bne.n	1bfc0 <strncpy+0x210>
   1bf06:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
   1bf0a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1bf0e:	4607      	mov	r7, r0
   1bf10:	4434      	add	r4, r6
   1bf12:	4605      	mov	r5, r0
   1bf14:	9301      	str	r3, [sp, #4]
   1bf16:	45bb      	cmp	fp, r7
   1bf18:	465a      	mov	r2, fp
   1bf1a:	bf38      	it	cc
   1bf1c:	463a      	movcc	r2, r7
   1bf1e:	4590      	cmp	r8, r2
   1bf20:	d929      	bls.n	1bf76 <strncpy+0x1c6>
   1bf22:	1e53      	subs	r3, r2, #1
   1bf24:	442a      	add	r2, r5
   1bf26:	4433      	add	r3, r6
   1bf28:	4452      	add	r2, sl
   1bf2a:	f1c6 0c01 	rsb	ip, r6, #1
   1bf2e:	e001      	b.n	1bf34 <strncpy+0x184>
   1bf30:	42a3      	cmp	r3, r4
   1bf32:	d020      	beq.n	1bf76 <strncpy+0x1c6>
   1bf34:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bf38:	eb0c 0e03 	add.w	lr, ip, r3
   1bf3c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1bf40:	4288      	cmp	r0, r1
   1bf42:	d0f5      	beq.n	1bf30 <strncpy+0x180>
   1bf44:	f1cb 0301 	rsb	r3, fp, #1
   1bf48:	442b      	add	r3, r5
   1bf4a:	eb03 050e 	add.w	r5, r3, lr
   1bf4e:	2700      	movs	r7, #0
   1bf50:	eba9 0308 	sub.w	r3, r9, r8
   1bf54:	42ab      	cmp	r3, r5
   1bf56:	d2de      	bcs.n	1bf16 <strncpy+0x166>
   1bf58:	eb0a 0009 	add.w	r0, sl, r9
   1bf5c:	f448 6100 	orr.w	r1, r8, #2048	; 0x800
   1bf60:	f005 f848 	bl	20ff4 <strnlen>
   1bf64:	4481      	add	r9, r0
   1bf66:	eba9 0308 	sub.w	r3, r9, r8
   1bf6a:	42ab      	cmp	r3, r5
   1bf6c:	d2d3      	bcs.n	1bf16 <strncpy+0x166>
   1bf6e:	2000      	movs	r0, #0
   1bf70:	b005      	add	sp, #20
   1bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf76:	45bb      	cmp	fp, r7
   1bf78:	9b01      	ldr	r3, [sp, #4]
   1bf7a:	d96c      	bls.n	1c056 <strncpy+0x2a6>
   1bf7c:	eb0b 0205 	add.w	r2, fp, r5
   1bf80:	eb06 010b 	add.w	r1, r6, fp
   1bf84:	4452      	add	r2, sl
   1bf86:	e002      	b.n	1bf8e <strncpy+0x1de>
   1bf88:	42bb      	cmp	r3, r7
   1bf8a:	d017      	beq.n	1bfbc <strncpy+0x20c>
   1bf8c:	4603      	mov	r3, r0
   1bf8e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1bf92:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
   1bf96:	4584      	cmp	ip, r0
   1bf98:	f103 0e01 	add.w	lr, r3, #1
   1bf9c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   1bfa0:	d0f2      	beq.n	1bf88 <strncpy+0x1d8>
   1bfa2:	3701      	adds	r7, #1
   1bfa4:	4577      	cmp	r7, lr
   1bfa6:	d804      	bhi.n	1bfb2 <strncpy+0x202>
   1bfa8:	9f03      	ldr	r7, [sp, #12]
   1bfaa:	443d      	add	r5, r7
   1bfac:	eba8 0707 	sub.w	r7, r8, r7
   1bfb0:	e7ce      	b.n	1bf50 <strncpy+0x1a0>
   1bfb2:	eb0a 0005 	add.w	r0, sl, r5
   1bfb6:	b005      	add	sp, #20
   1bfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfbc:	46be      	mov	lr, r7
   1bfbe:	e7f0      	b.n	1bfa2 <strncpy+0x1f2>
   1bfc0:	eba8 030b 	sub.w	r3, r8, fp
   1bfc4:	455b      	cmp	r3, fp
   1bfc6:	bf38      	it	cc
   1bfc8:	465b      	movcc	r3, fp
   1bfca:	3301      	adds	r3, #1
   1bfcc:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
   1bfd0:	9303      	str	r3, [sp, #12]
   1bfd2:	4434      	add	r4, r6
   1bfd4:	2500      	movs	r5, #0
   1bfd6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
   1bfda:	45d8      	cmp	r8, fp
   1bfdc:	d926      	bls.n	1c02c <strncpy+0x27c>
   1bfde:	eb0b 0205 	add.w	r2, fp, r5
   1bfe2:	19f3      	adds	r3, r6, r7
   1bfe4:	4452      	add	r2, sl
   1bfe6:	f1c6 0c01 	rsb	ip, r6, #1
   1bfea:	e001      	b.n	1bff0 <strncpy+0x240>
   1bfec:	42a3      	cmp	r3, r4
   1bfee:	d01d      	beq.n	1c02c <strncpy+0x27c>
   1bff0:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bff4:	eb0c 0e03 	add.w	lr, ip, r3
   1bff8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1bffc:	4288      	cmp	r0, r1
   1bffe:	d0f5      	beq.n	1bfec <strncpy+0x23c>
   1c000:	f1cb 0301 	rsb	r3, fp, #1
   1c004:	442b      	add	r3, r5
   1c006:	eb03 050e 	add.w	r5, r3, lr
   1c00a:	eba9 0308 	sub.w	r3, r9, r8
   1c00e:	42ab      	cmp	r3, r5
   1c010:	d2e3      	bcs.n	1bfda <strncpy+0x22a>
   1c012:	eb0a 0009 	add.w	r0, sl, r9
   1c016:	f448 6100 	orr.w	r1, r8, #2048	; 0x800
   1c01a:	f004 ffeb 	bl	20ff4 <strnlen>
   1c01e:	4481      	add	r9, r0
   1c020:	eba9 0308 	sub.w	r3, r9, r8
   1c024:	42ab      	cmp	r3, r5
   1c026:	d3a2      	bcc.n	1bf6e <strncpy+0x1be>
   1c028:	45d8      	cmp	r8, fp
   1c02a:	d8d8      	bhi.n	1bfde <strncpy+0x22e>
   1c02c:	f1bb 0f00 	cmp.w	fp, #0
   1c030:	d0bf      	beq.n	1bfb2 <strncpy+0x202>
   1c032:	eb0b 0105 	add.w	r1, fp, r5
   1c036:	eb06 020b 	add.w	r2, r6, fp
   1c03a:	4451      	add	r1, sl
   1c03c:	e001      	b.n	1c042 <strncpy+0x292>
   1c03e:	42b3      	cmp	r3, r6
   1c040:	d0b7      	beq.n	1bfb2 <strncpy+0x202>
   1c042:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1c046:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
   1c04a:	4584      	cmp	ip, r0
   1c04c:	4613      	mov	r3, r2
   1c04e:	d0f6      	beq.n	1c03e <strncpy+0x28e>
   1c050:	9b03      	ldr	r3, [sp, #12]
   1c052:	441d      	add	r5, r3
   1c054:	e7d9      	b.n	1c00a <strncpy+0x25a>
   1c056:	46de      	mov	lr, fp
   1c058:	e7a3      	b.n	1bfa2 <strncpy+0x1f2>
   1c05a:	bf00      	nop
   1c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c060:	4692      	mov	sl, r2
   1c062:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   1c066:	aa05      	add	r2, sp, #20
   1c068:	4681      	mov	r9, r0
   1c06a:	460f      	mov	r7, r1
   1c06c:	4650      	mov	r0, sl
   1c06e:	4619      	mov	r1, r3
   1c070:	461d      	mov	r5, r3
   1c072:	f7ff fecf 	bl	1be14 <strncpy+0x64>
   1c076:	4613      	mov	r3, r2
   1c078:	4683      	mov	fp, r0
   1c07a:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   1c07e:	f843 5f04 	str.w	r5, [r3, #4]!
   1c082:	4293      	cmp	r3, r2
   1c084:	d1fb      	bne.n	1c07e <strncpy+0x2ce>
   1c086:	2d00      	cmp	r5, #0
   1c088:	f000 80df 	beq.w	1c24a <strncpy+0x49a>
   1c08c:	1e6c      	subs	r4, r5, #1
   1c08e:	ae06      	add	r6, sp, #24
   1c090:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   1c094:	eb0a 0004 	add.w	r0, sl, r4
   1c098:	9600      	str	r6, [sp, #0]
   1c09a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   1c09e:	1aab      	subs	r3, r5, r2
   1c0a0:	3b01      	subs	r3, #1
   1c0a2:	4453      	add	r3, sl
   1c0a4:	4282      	cmp	r2, r0
   1c0a6:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   1c0aa:	d1f6      	bne.n	1c09a <strncpy+0x2ea>
   1c0ac:	9905      	ldr	r1, [sp, #20]
   1c0ae:	465a      	mov	r2, fp
   1c0b0:	4451      	add	r1, sl
   1c0b2:	4650      	mov	r0, sl
   1c0b4:	f7ff fca4 	bl	1ba00 <memcmp>
   1c0b8:	2800      	cmp	r0, #0
   1c0ba:	d16f      	bne.n	1c19c <strncpy+0x3ec>
   1c0bc:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1c0c0:	9303      	str	r3, [sp, #12]
   1c0c2:	f1cb 0301 	rsb	r3, fp, #1
   1c0c6:	4680      	mov	r8, r0
   1c0c8:	4606      	mov	r6, r0
   1c0ca:	9301      	str	r3, [sp, #4]
   1c0cc:	eb09 0e06 	add.w	lr, r9, r6
   1c0d0:	9a00      	ldr	r2, [sp, #0]
   1c0d2:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1c0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c0da:	b1db      	cbz	r3, 1c114 <strncpy+0x364>
   1c0dc:	f1b8 0f00 	cmp.w	r8, #0
   1c0e0:	d003      	beq.n	1c0ea <strncpy+0x33a>
   1c0e2:	9a05      	ldr	r2, [sp, #20]
   1c0e4:	429a      	cmp	r2, r3
   1c0e6:	d900      	bls.n	1c0ea <strncpy+0x33a>
   1c0e8:	1aab      	subs	r3, r5, r2
   1c0ea:	441e      	add	r6, r3
   1c0ec:	f04f 0800 	mov.w	r8, #0
   1c0f0:	1b7b      	subs	r3, r7, r5
   1c0f2:	429e      	cmp	r6, r3
   1c0f4:	d9ea      	bls.n	1c0cc <strncpy+0x31c>
   1c0f6:	eb09 0007 	add.w	r0, r9, r7
   1c0fa:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   1c0fe:	f004 ff79 	bl	20ff4 <strnlen>
   1c102:	4407      	add	r7, r0
   1c104:	1b7b      	subs	r3, r7, r5
   1c106:	429e      	cmp	r6, r3
   1c108:	d9e0      	bls.n	1c0cc <strncpy+0x31c>
   1c10a:	2000      	movs	r0, #0
   1c10c:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1c110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c114:	45c3      	cmp	fp, r8
   1c116:	465b      	mov	r3, fp
   1c118:	bf38      	it	cc
   1c11a:	4643      	movcc	r3, r8
   1c11c:	42a3      	cmp	r3, r4
   1c11e:	d210      	bcs.n	1c142 <strncpy+0x392>
   1c120:	1e59      	subs	r1, r3, #1
   1c122:	18f2      	adds	r2, r6, r3
   1c124:	4451      	add	r1, sl
   1c126:	444a      	add	r2, r9
   1c128:	e002      	b.n	1c130 <strncpy+0x380>
   1c12a:	3301      	adds	r3, #1
   1c12c:	42a3      	cmp	r3, r4
   1c12e:	d208      	bcs.n	1c142 <strncpy+0x392>
   1c130:	f812 0b01 	ldrb.w	r0, [r2], #1
   1c134:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1c138:	4584      	cmp	ip, r0
   1c13a:	d0f6      	beq.n	1c12a <strncpy+0x37a>
   1c13c:	9a01      	ldr	r2, [sp, #4]
   1c13e:	4416      	add	r6, r2
   1c140:	e7d3      	b.n	1c0ea <strncpy+0x33a>
   1c142:	45c3      	cmp	fp, r8
   1c144:	9b03      	ldr	r3, [sp, #12]
   1c146:	d97e      	bls.n	1c246 <strncpy+0x496>
   1c148:	eb06 020b 	add.w	r2, r6, fp
   1c14c:	444a      	add	r2, r9
   1c14e:	eb0a 010b 	add.w	r1, sl, fp
   1c152:	9602      	str	r6, [sp, #8]
   1c154:	e002      	b.n	1c15c <strncpy+0x3ac>
   1c156:	4543      	cmp	r3, r8
   1c158:	d015      	beq.n	1c186 <strncpy+0x3d6>
   1c15a:	4603      	mov	r3, r0
   1c15c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1c160:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
   1c164:	4286      	cmp	r6, r0
   1c166:	f103 0c01 	add.w	ip, r3, #1
   1c16a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   1c16e:	d0f2      	beq.n	1c156 <strncpy+0x3a6>
   1c170:	9e02      	ldr	r6, [sp, #8]
   1c172:	4663      	mov	r3, ip
   1c174:	f108 0801 	add.w	r8, r8, #1
   1c178:	4598      	cmp	r8, r3
   1c17a:	d80a      	bhi.n	1c192 <strncpy+0x3e2>
   1c17c:	9b05      	ldr	r3, [sp, #20]
   1c17e:	441e      	add	r6, r3
   1c180:	eba5 0803 	sub.w	r8, r5, r3
   1c184:	e7b4      	b.n	1c0f0 <strncpy+0x340>
   1c186:	4643      	mov	r3, r8
   1c188:	f108 0801 	add.w	r8, r8, #1
   1c18c:	4598      	cmp	r8, r3
   1c18e:	9e02      	ldr	r6, [sp, #8]
   1c190:	d9f4      	bls.n	1c17c <strncpy+0x3cc>
   1c192:	4670      	mov	r0, lr
   1c194:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c19c:	eba5 030b 	sub.w	r3, r5, fp
   1c1a0:	455b      	cmp	r3, fp
   1c1a2:	bf38      	it	cc
   1c1a4:	465b      	movcc	r3, fp
   1c1a6:	3301      	adds	r3, #1
   1c1a8:	9305      	str	r3, [sp, #20]
   1c1aa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1c1ae:	9301      	str	r3, [sp, #4]
   1c1b0:	f1cb 0301 	rsb	r3, fp, #1
   1c1b4:	2600      	movs	r6, #0
   1c1b6:	9302      	str	r3, [sp, #8]
   1c1b8:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
   1c1bc:	eb09 0106 	add.w	r1, r9, r6
   1c1c0:	9a00      	ldr	r2, [sp, #0]
   1c1c2:	5d0b      	ldrb	r3, [r1, r4]
   1c1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c1c8:	b16b      	cbz	r3, 1c1e6 <strncpy+0x436>
   1c1ca:	441e      	add	r6, r3
   1c1cc:	1b7b      	subs	r3, r7, r5
   1c1ce:	42b3      	cmp	r3, r6
   1c1d0:	d2f4      	bcs.n	1c1bc <strncpy+0x40c>
   1c1d2:	eb09 0007 	add.w	r0, r9, r7
   1c1d6:	4641      	mov	r1, r8
   1c1d8:	f004 ff0c 	bl	20ff4 <strnlen>
   1c1dc:	4407      	add	r7, r0
   1c1de:	1b7b      	subs	r3, r7, r5
   1c1e0:	42b3      	cmp	r3, r6
   1c1e2:	d2eb      	bcs.n	1c1bc <strncpy+0x40c>
   1c1e4:	e791      	b.n	1c10a <strncpy+0x35a>
   1c1e6:	45a3      	cmp	fp, r4
   1c1e8:	d214      	bcs.n	1c214 <strncpy+0x464>
   1c1ea:	9b01      	ldr	r3, [sp, #4]
   1c1ec:	eb0b 0206 	add.w	r2, fp, r6
   1c1f0:	eb0a 0c03 	add.w	ip, sl, r3
   1c1f4:	444a      	add	r2, r9
   1c1f6:	465b      	mov	r3, fp
   1c1f8:	e002      	b.n	1c200 <strncpy+0x450>
   1c1fa:	3301      	adds	r3, #1
   1c1fc:	42a3      	cmp	r3, r4
   1c1fe:	d209      	bcs.n	1c214 <strncpy+0x464>
   1c200:	f812 0b01 	ldrb.w	r0, [r2], #1
   1c204:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   1c208:	4586      	cmp	lr, r0
   1c20a:	d0f6      	beq.n	1c1fa <strncpy+0x44a>
   1c20c:	9a02      	ldr	r2, [sp, #8]
   1c20e:	4416      	add	r6, r2
   1c210:	441e      	add	r6, r3
   1c212:	e7db      	b.n	1c1cc <strncpy+0x41c>
   1c214:	f1bb 0f00 	cmp.w	fp, #0
   1c218:	d010      	beq.n	1c23c <strncpy+0x48c>
   1c21a:	eb0b 0006 	add.w	r0, fp, r6
   1c21e:	4448      	add	r0, r9
   1c220:	eb0a 020b 	add.w	r2, sl, fp
   1c224:	e001      	b.n	1c22a <strncpy+0x47a>
   1c226:	4553      	cmp	r3, sl
   1c228:	d008      	beq.n	1c23c <strncpy+0x48c>
   1c22a:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   1c22e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   1c232:	45e6      	cmp	lr, ip
   1c234:	4613      	mov	r3, r2
   1c236:	d0f6      	beq.n	1c226 <strncpy+0x476>
   1c238:	9b05      	ldr	r3, [sp, #20]
   1c23a:	e7c6      	b.n	1c1ca <strncpy+0x41a>
   1c23c:	4608      	mov	r0, r1
   1c23e:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1c242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c246:	465b      	mov	r3, fp
   1c248:	e794      	b.n	1c174 <strncpy+0x3c4>
   1c24a:	ab06      	add	r3, sp, #24
   1c24c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c250:	9300      	str	r3, [sp, #0]
   1c252:	e72b      	b.n	1c0ac <strncpy+0x2fc>

0001c254 <strstr>:
   1c254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c258:	460d      	mov	r5, r1
   1c25a:	7809      	ldrb	r1, [r1, #0]
   1c25c:	b090      	sub	sp, #64	; 0x40
   1c25e:	4604      	mov	r4, r0
   1c260:	2900      	cmp	r1, #0
   1c262:	d054      	beq.n	1c30e <strstr+0xba>
   1c264:	786a      	ldrb	r2, [r5, #1]
   1c266:	2a00      	cmp	r2, #0
   1c268:	f000 8083 	beq.w	1c372 <strstr+0x11e>
   1c26c:	78ab      	ldrb	r3, [r5, #2]
   1c26e:	2b00      	cmp	r3, #0
   1c270:	d051      	beq.n	1c316 <strstr+0xc2>
   1c272:	78e8      	ldrb	r0, [r5, #3]
   1c274:	682e      	ldr	r6, [r5, #0]
   1c276:	2800      	cmp	r0, #0
   1c278:	f000 8082 	beq.w	1c380 <strstr+0x12c>
   1c27c:	792b      	ldrb	r3, [r5, #4]
   1c27e:	2b00      	cmp	r3, #0
   1c280:	d057      	beq.n	1c332 <strstr+0xde>
   1c282:	4628      	mov	r0, r5
   1c284:	f001 f81c 	bl	1d2c0 <strlen>
   1c288:	4606      	mov	r6, r0
   1c28a:	f440 7100 	orr.w	r1, r0, #512	; 0x200
   1c28e:	4620      	mov	r0, r4
   1c290:	f004 feb0 	bl	20ff4 <strnlen>
   1c294:	4286      	cmp	r6, r0
   1c296:	d85b      	bhi.n	1c350 <strstr+0xfc>
   1c298:	2efe      	cmp	r6, #254	; 0xfe
   1c29a:	f200 8086 	bhi.w	1c3aa <strstr+0x156>
   1c29e:	1b80      	subs	r0, r0, r6
   1c2a0:	1827      	adds	r7, r4, r0
   1c2a2:	2240      	movs	r2, #64	; 0x40
   1c2a4:	1c71      	adds	r1, r6, #1
   1c2a6:	4668      	mov	r0, sp
   1c2a8:	f7ff fc56 	bl	1bb58 <memset>
   1c2ac:	b17e      	cbz	r6, 1c2ce <strstr+0x7a>
   1c2ae:	1e6a      	subs	r2, r5, #1
   1c2b0:	fa5f fc86 	uxtb.w	ip, r6
   1c2b4:	1990      	adds	r0, r2, r6
   1c2b6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1c2ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c2be:	3340      	adds	r3, #64	; 0x40
   1c2c0:	446b      	add	r3, sp
   1c2c2:	1aa9      	subs	r1, r5, r2
   1c2c4:	4461      	add	r1, ip
   1c2c6:	4282      	cmp	r2, r0
   1c2c8:	f803 1c40 	strb.w	r1, [r3, #-64]
   1c2cc:	d1f3      	bne.n	1c2b6 <strstr+0x62>
   1c2ce:	3c01      	subs	r4, #1
   1c2d0:	5da3      	ldrb	r3, [r4, r6]
   1c2d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c2d6:	3340      	adds	r3, #64	; 0x40
   1c2d8:	446b      	add	r3, sp
   1c2da:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   1c2de:	441c      	add	r4, r3
   1c2e0:	42a7      	cmp	r7, r4
   1c2e2:	d203      	bcs.n	1c2ec <strstr+0x98>
   1c2e4:	e039      	b.n	1c35a <strstr+0x106>
   1c2e6:	4444      	add	r4, r8
   1c2e8:	42a7      	cmp	r7, r4
   1c2ea:	d336      	bcc.n	1c35a <strstr+0x106>
   1c2ec:	f814 c006 	ldrb.w	ip, [r4, r6]
   1c2f0:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   1c2f4:	f10c 0340 	add.w	r3, ip, #64	; 0x40
   1c2f8:	eb0d 0c03 	add.w	ip, sp, r3
   1c2fc:	4620      	mov	r0, r4
   1c2fe:	4632      	mov	r2, r6
   1c300:	4629      	mov	r1, r5
   1c302:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
   1c306:	f7ff fb7b 	bl	1ba00 <memcmp>
   1c30a:	2800      	cmp	r0, #0
   1c30c:	d1eb      	bne.n	1c2e6 <strstr+0x92>
   1c30e:	4620      	mov	r0, r4
   1c310:	b010      	add	sp, #64	; 0x40
   1c312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c316:	7800      	ldrb	r0, [r0, #0]
   1c318:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1c31c:	e000      	b.n	1c320 <strstr+0xcc>
   1c31e:	460c      	mov	r4, r1
   1c320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1c324:	1c61      	adds	r1, r4, #1
   1c326:	b198      	cbz	r0, 1c350 <strstr+0xfc>
   1c328:	429a      	cmp	r2, r3
   1c32a:	7860      	ldrb	r0, [r4, #1]
   1c32c:	d1f7      	bne.n	1c31e <strstr+0xca>
   1c32e:	3c01      	subs	r4, #1
   1c330:	e7ed      	b.n	1c30e <strstr+0xba>
   1c332:	7822      	ldrb	r2, [r4, #0]
   1c334:	b162      	cbz	r2, 1c350 <strstr+0xfc>
   1c336:	ba31      	rev	r1, r6
   1c338:	e001      	b.n	1c33e <strstr+0xea>
   1c33a:	4299      	cmp	r1, r3
   1c33c:	d01e      	beq.n	1c37c <strstr+0x128>
   1c33e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1c342:	4620      	mov	r0, r4
   1c344:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   1c348:	2a00      	cmp	r2, #0
   1c34a:	d1f6      	bne.n	1c33a <strstr+0xe6>
   1c34c:	4299      	cmp	r1, r3
   1c34e:	d015      	beq.n	1c37c <strstr+0x128>
   1c350:	2400      	movs	r4, #0
   1c352:	4620      	mov	r0, r4
   1c354:	b010      	add	sp, #64	; 0x40
   1c356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c35a:	5dbb      	ldrb	r3, [r7, r6]
   1c35c:	19b8      	adds	r0, r7, r6
   1c35e:	2b00      	cmp	r3, #0
   1c360:	d0f6      	beq.n	1c350 <strstr+0xfc>
   1c362:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1c366:	f004 fe45 	bl	20ff4 <strnlen>
   1c36a:	4407      	add	r7, r0
   1c36c:	42bc      	cmp	r4, r7
   1c36e:	d9ae      	bls.n	1c2ce <strstr+0x7a>
   1c370:	e7ee      	b.n	1c350 <strstr+0xfc>
   1c372:	b010      	add	sp, #64	; 0x40
   1c374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c378:	f7ff bc40 	b.w	1bbfc <strchr>
   1c37c:	1ec4      	subs	r4, r0, #3
   1c37e:	e7c6      	b.n	1c30e <strstr+0xba>
   1c380:	0412      	lsls	r2, r2, #16
   1c382:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1c386:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1c38a:	7821      	ldrb	r1, [r4, #0]
   1c38c:	4602      	mov	r2, r0
   1c38e:	e000      	b.n	1c392 <strstr+0x13e>
   1c390:	462c      	mov	r4, r5
   1c392:	ea41 0002 	orr.w	r0, r1, r2
   1c396:	1c65      	adds	r5, r4, #1
   1c398:	0202      	lsls	r2, r0, #8
   1c39a:	2900      	cmp	r1, #0
   1c39c:	d0d8      	beq.n	1c350 <strstr+0xfc>
   1c39e:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
   1c3a2:	7861      	ldrb	r1, [r4, #1]
   1c3a4:	d1f4      	bne.n	1c390 <strstr+0x13c>
   1c3a6:	3c02      	subs	r4, #2
   1c3a8:	e7b1      	b.n	1c30e <strstr+0xba>
   1c3aa:	4601      	mov	r1, r0
   1c3ac:	4633      	mov	r3, r6
   1c3ae:	462a      	mov	r2, r5
   1c3b0:	4620      	mov	r0, r4
   1c3b2:	b010      	add	sp, #64	; 0x40
   1c3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c3b8:	e650      	b.n	1c05c <strncpy+0x2ac>
   1c3ba:	bf00      	nop
   1c3bc:	4912      	ldr	r1, [pc, #72]	; (1c408 <strstr+0x1b4>)
   1c3be:	4813      	ldr	r0, [pc, #76]	; (1c40c <strstr+0x1b8>)
   1c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3c2:	f101 0520 	add.w	r5, r1, #32
   1c3c6:	f000 feb9 	bl	1d13c <strcpy>
   1c3ca:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
   1c3ce:	462c      	mov	r4, r5
   1c3d0:	f1a5 0720 	sub.w	r7, r5, #32
   1c3d4:	4621      	mov	r1, r4
   1c3d6:	4638      	mov	r0, r7
   1c3d8:	3420      	adds	r4, #32
   1c3da:	f000 fd45 	bl	1ce68 <strcmp>
   1c3de:	b918      	cbnz	r0, 1c3e8 <strstr+0x194>
   1c3e0:	42b4      	cmp	r4, r6
   1c3e2:	d1f7      	bne.n	1c3d4 <strstr+0x180>
   1c3e4:	4809      	ldr	r0, [pc, #36]	; (1c40c <strstr+0x1b8>)
   1c3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c3e8:	4f09      	ldr	r7, [pc, #36]	; (1c410 <strstr+0x1bc>)
   1c3ea:	4c08      	ldr	r4, [pc, #32]	; (1c40c <strstr+0x1b8>)
   1c3ec:	4639      	mov	r1, r7
   1c3ee:	4620      	mov	r0, r4
   1c3f0:	f004 fdbe 	bl	20f70 <strcat>
   1c3f4:	4629      	mov	r1, r5
   1c3f6:	4620      	mov	r0, r4
   1c3f8:	3520      	adds	r5, #32
   1c3fa:	f004 fdb9 	bl	20f70 <strcat>
   1c3fe:	42b5      	cmp	r5, r6
   1c400:	d1f4      	bne.n	1c3ec <strstr+0x198>
   1c402:	4802      	ldr	r0, [pc, #8]	; (1c40c <strstr+0x1b8>)
   1c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c406:	bf00      	nop
   1c408:	200093c0 	.word	0x200093c0
   1c40c:	2000e274 	.word	0x2000e274
   1c410:	20008b08 	.word	0x20008b08

0001c414 <__loadlocale>:
   1c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c418:	eb00 1741 	add.w	r7, r0, r1, lsl #5
   1c41c:	b08f      	sub	sp, #60	; 0x3c
   1c41e:	4605      	mov	r5, r0
   1c420:	460e      	mov	r6, r1
   1c422:	4610      	mov	r0, r2
   1c424:	4639      	mov	r1, r7
   1c426:	4614      	mov	r4, r2
   1c428:	f000 fd1e 	bl	1ce68 <strcmp>
   1c42c:	b918      	cbnz	r0, 1c436 <__loadlocale+0x22>
   1c42e:	4638      	mov	r0, r7
   1c430:	b00f      	add	sp, #60	; 0x3c
   1c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c436:	49b7      	ldr	r1, [pc, #732]	; (1c714 <__loadlocale+0x300>)
   1c438:	4620      	mov	r0, r4
   1c43a:	f000 fd15 	bl	1ce68 <strcmp>
   1c43e:	2800      	cmp	r0, #0
   1c440:	f000 80c3 	beq.w	1c5ca <__loadlocale+0x1b6>
   1c444:	49b4      	ldr	r1, [pc, #720]	; (1c718 <__loadlocale+0x304>)
   1c446:	4620      	mov	r0, r4
   1c448:	f000 fd0e 	bl	1ce68 <strcmp>
   1c44c:	4680      	mov	r8, r0
   1c44e:	2800      	cmp	r0, #0
   1c450:	f000 80b2 	beq.w	1c5b8 <__loadlocale+0x1a4>
   1c454:	7823      	ldrb	r3, [r4, #0]
   1c456:	2b43      	cmp	r3, #67	; 0x43
   1c458:	f000 80bc 	beq.w	1c5d4 <__loadlocale+0x1c0>
   1c45c:	3b61      	subs	r3, #97	; 0x61
   1c45e:	2b19      	cmp	r3, #25
   1c460:	d815      	bhi.n	1c48e <__loadlocale+0x7a>
   1c462:	7863      	ldrb	r3, [r4, #1]
   1c464:	3b61      	subs	r3, #97	; 0x61
   1c466:	2b19      	cmp	r3, #25
   1c468:	d811      	bhi.n	1c48e <__loadlocale+0x7a>
   1c46a:	78a3      	ldrb	r3, [r4, #2]
   1c46c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1c470:	2a19      	cmp	r2, #25
   1c472:	bf96      	itet	ls
   1c474:	78e3      	ldrbls	r3, [r4, #3]
   1c476:	f104 0802 	addhi.w	r8, r4, #2
   1c47a:	f104 0803 	addls.w	r8, r4, #3
   1c47e:	2b5f      	cmp	r3, #95	; 0x5f
   1c480:	d00a      	beq.n	1c498 <__loadlocale+0x84>
   1c482:	2b2e      	cmp	r3, #46	; 0x2e
   1c484:	f000 8272 	beq.w	1c96c <__loadlocale+0x558>
   1c488:	f013 0fbf 	tst.w	r3, #191	; 0xbf
   1c48c:	d013      	beq.n	1c4b6 <__loadlocale+0xa2>
   1c48e:	2700      	movs	r7, #0
   1c490:	4638      	mov	r0, r7
   1c492:	b00f      	add	sp, #60	; 0x3c
   1c494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c498:	f898 3001 	ldrb.w	r3, [r8, #1]
   1c49c:	3b41      	subs	r3, #65	; 0x41
   1c49e:	2b19      	cmp	r3, #25
   1c4a0:	d8f5      	bhi.n	1c48e <__loadlocale+0x7a>
   1c4a2:	f898 3002 	ldrb.w	r3, [r8, #2]
   1c4a6:	3b41      	subs	r3, #65	; 0x41
   1c4a8:	2b19      	cmp	r3, #25
   1c4aa:	d8f0      	bhi.n	1c48e <__loadlocale+0x7a>
   1c4ac:	f898 3003 	ldrb.w	r3, [r8, #3]
   1c4b0:	f108 0803 	add.w	r8, r8, #3
   1c4b4:	e7e5      	b.n	1c482 <__loadlocale+0x6e>
   1c4b6:	f10d 0918 	add.w	r9, sp, #24
   1c4ba:	4998      	ldr	r1, [pc, #608]	; (1c71c <__loadlocale+0x308>)
   1c4bc:	4648      	mov	r0, r9
   1c4be:	f000 fe3d 	bl	1d13c <strcpy>
   1c4c2:	f898 3000 	ldrb.w	r3, [r8]
   1c4c6:	2b40      	cmp	r3, #64	; 0x40
   1c4c8:	f000 823f 	beq.w	1c94a <__loadlocale+0x536>
   1c4cc:	f04f 0a00 	mov.w	sl, #0
   1c4d0:	46d0      	mov	r8, sl
   1c4d2:	46d3      	mov	fp, sl
   1c4d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1c4d8:	3b41      	subs	r3, #65	; 0x41
   1c4da:	2b34      	cmp	r3, #52	; 0x34
   1c4dc:	d8d7      	bhi.n	1c48e <__loadlocale+0x7a>
   1c4de:	a201      	add	r2, pc, #4	; (adr r2, 1c4e4 <__loadlocale+0xd0>)
   1c4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c4e4:	0001c8e7 	.word	0x0001c8e7
   1c4e8:	0001c48f 	.word	0x0001c48f
   1c4ec:	0001c87f 	.word	0x0001c87f
   1c4f0:	0001c48f 	.word	0x0001c48f
   1c4f4:	0001c843 	.word	0x0001c843
   1c4f8:	0001c48f 	.word	0x0001c48f
   1c4fc:	0001c815 	.word	0x0001c815
   1c500:	0001c48f 	.word	0x0001c48f
   1c504:	0001c771 	.word	0x0001c771
   1c508:	0001c6f3 	.word	0x0001c6f3
   1c50c:	0001c6c3 	.word	0x0001c6c3
   1c510:	0001c48f 	.word	0x0001c48f
   1c514:	0001c48f 	.word	0x0001c48f
   1c518:	0001c48f 	.word	0x0001c48f
   1c51c:	0001c48f 	.word	0x0001c48f
   1c520:	0001c6b1 	.word	0x0001c6b1
   1c524:	0001c48f 	.word	0x0001c48f
   1c528:	0001c48f 	.word	0x0001c48f
   1c52c:	0001c691 	.word	0x0001c691
   1c530:	0001c655 	.word	0x0001c655
   1c534:	0001c607 	.word	0x0001c607
   1c538:	0001c48f 	.word	0x0001c48f
   1c53c:	0001c48f 	.word	0x0001c48f
   1c540:	0001c48f 	.word	0x0001c48f
   1c544:	0001c48f 	.word	0x0001c48f
   1c548:	0001c48f 	.word	0x0001c48f
   1c54c:	0001c48f 	.word	0x0001c48f
   1c550:	0001c48f 	.word	0x0001c48f
   1c554:	0001c48f 	.word	0x0001c48f
   1c558:	0001c48f 	.word	0x0001c48f
   1c55c:	0001c48f 	.word	0x0001c48f
   1c560:	0001c48f 	.word	0x0001c48f
   1c564:	0001c8e7 	.word	0x0001c8e7
   1c568:	0001c48f 	.word	0x0001c48f
   1c56c:	0001c87f 	.word	0x0001c87f
   1c570:	0001c48f 	.word	0x0001c48f
   1c574:	0001c843 	.word	0x0001c843
   1c578:	0001c48f 	.word	0x0001c48f
   1c57c:	0001c815 	.word	0x0001c815
   1c580:	0001c48f 	.word	0x0001c48f
   1c584:	0001c771 	.word	0x0001c771
   1c588:	0001c6f3 	.word	0x0001c6f3
   1c58c:	0001c6c3 	.word	0x0001c6c3
   1c590:	0001c48f 	.word	0x0001c48f
   1c594:	0001c48f 	.word	0x0001c48f
   1c598:	0001c48f 	.word	0x0001c48f
   1c59c:	0001c48f 	.word	0x0001c48f
   1c5a0:	0001c6b1 	.word	0x0001c6b1
   1c5a4:	0001c48f 	.word	0x0001c48f
   1c5a8:	0001c48f 	.word	0x0001c48f
   1c5ac:	0001c691 	.word	0x0001c691
   1c5b0:	0001c655 	.word	0x0001c655
   1c5b4:	0001c607 	.word	0x0001c607
   1c5b8:	f10d 0918 	add.w	r9, sp, #24
   1c5bc:	4958      	ldr	r1, [pc, #352]	; (1c720 <__loadlocale+0x30c>)
   1c5be:	4648      	mov	r0, r9
   1c5c0:	f000 fdbc 	bl	1d13c <strcpy>
   1c5c4:	46c2      	mov	sl, r8
   1c5c6:	46c3      	mov	fp, r8
   1c5c8:	e784      	b.n	1c4d4 <__loadlocale+0xc0>
   1c5ca:	4953      	ldr	r1, [pc, #332]	; (1c718 <__loadlocale+0x304>)
   1c5cc:	4620      	mov	r0, r4
   1c5ce:	f000 fdb5 	bl	1d13c <strcpy>
   1c5d2:	e737      	b.n	1c444 <__loadlocale+0x30>
   1c5d4:	7863      	ldrb	r3, [r4, #1]
   1c5d6:	3b2d      	subs	r3, #45	; 0x2d
   1c5d8:	2b01      	cmp	r3, #1
   1c5da:	f63f af58 	bhi.w	1c48e <__loadlocale+0x7a>
   1c5de:	f104 0802 	add.w	r8, r4, #2
   1c5e2:	f10d 0918 	add.w	r9, sp, #24
   1c5e6:	4641      	mov	r1, r8
   1c5e8:	4648      	mov	r0, r9
   1c5ea:	f000 fda7 	bl	1d13c <strcpy>
   1c5ee:	2140      	movs	r1, #64	; 0x40
   1c5f0:	4648      	mov	r0, r9
   1c5f2:	f7ff fb03 	bl	1bbfc <strchr>
   1c5f6:	b108      	cbz	r0, 1c5fc <__loadlocale+0x1e8>
   1c5f8:	2300      	movs	r3, #0
   1c5fa:	7003      	strb	r3, [r0, #0]
   1c5fc:	4648      	mov	r0, r9
   1c5fe:	f000 fe5f 	bl	1d2c0 <strlen>
   1c602:	4480      	add	r8, r0
   1c604:	e75d      	b.n	1c4c2 <__loadlocale+0xae>
   1c606:	4947      	ldr	r1, [pc, #284]	; (1c724 <__loadlocale+0x310>)
   1c608:	4648      	mov	r0, r9
   1c60a:	f004 fc87 	bl	20f1c <strcasecmp>
   1c60e:	b130      	cbz	r0, 1c61e <__loadlocale+0x20a>
   1c610:	4945      	ldr	r1, [pc, #276]	; (1c728 <__loadlocale+0x314>)
   1c612:	4648      	mov	r0, r9
   1c614:	f004 fc82 	bl	20f1c <strcasecmp>
   1c618:	2800      	cmp	r0, #0
   1c61a:	f47f af38 	bne.w	1c48e <__loadlocale+0x7a>
   1c61e:	4941      	ldr	r1, [pc, #260]	; (1c724 <__loadlocale+0x310>)
   1c620:	4648      	mov	r0, r9
   1c622:	f000 fd8b 	bl	1d13c <strcpy>
   1c626:	2106      	movs	r1, #6
   1c628:	4b40      	ldr	r3, [pc, #256]	; (1c72c <__loadlocale+0x318>)
   1c62a:	4a41      	ldr	r2, [pc, #260]	; (1c730 <__loadlocale+0x31c>)
   1c62c:	9101      	str	r1, [sp, #4]
   1c62e:	2e02      	cmp	r6, #2
   1c630:	f000 8162 	beq.w	1c8f8 <__loadlocale+0x4e4>
   1c634:	2e06      	cmp	r6, #6
   1c636:	d104      	bne.n	1c642 <__loadlocale+0x22e>
   1c638:	4649      	mov	r1, r9
   1c63a:	f505 70a5 	add.w	r0, r5, #330	; 0x14a
   1c63e:	f000 fd7d 	bl	1d13c <strcpy>
   1c642:	4638      	mov	r0, r7
   1c644:	4621      	mov	r1, r4
   1c646:	f000 fd79 	bl	1d13c <strcpy>
   1c64a:	4607      	mov	r7, r0
   1c64c:	4638      	mov	r0, r7
   1c64e:	b00f      	add	sp, #60	; 0x3c
   1c650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c654:	4937      	ldr	r1, [pc, #220]	; (1c734 <__loadlocale+0x320>)
   1c656:	2203      	movs	r2, #3
   1c658:	4648      	mov	r0, r9
   1c65a:	f7ff fb35 	bl	1bcc8 <strncasecmp>
   1c65e:	2800      	cmp	r0, #0
   1c660:	f47f af15 	bne.w	1c48e <__loadlocale+0x7a>
   1c664:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1c668:	4933      	ldr	r1, [pc, #204]	; (1c738 <__loadlocale+0x324>)
   1c66a:	2b2d      	cmp	r3, #45	; 0x2d
   1c66c:	bf0c      	ite	eq
   1c66e:	a807      	addeq	r0, sp, #28
   1c670:	f10d 001b 	addne.w	r0, sp, #27
   1c674:	f000 fbf8 	bl	1ce68 <strcmp>
   1c678:	2800      	cmp	r0, #0
   1c67a:	f47f af08 	bne.w	1c48e <__loadlocale+0x7a>
   1c67e:	492f      	ldr	r1, [pc, #188]	; (1c73c <__loadlocale+0x328>)
   1c680:	4648      	mov	r0, r9
   1c682:	f000 fd5b 	bl	1d13c <strcpy>
   1c686:	2101      	movs	r1, #1
   1c688:	4b2d      	ldr	r3, [pc, #180]	; (1c740 <__loadlocale+0x32c>)
   1c68a:	4a2e      	ldr	r2, [pc, #184]	; (1c744 <__loadlocale+0x330>)
   1c68c:	9101      	str	r1, [sp, #4]
   1c68e:	e7ce      	b.n	1c62e <__loadlocale+0x21a>
   1c690:	492d      	ldr	r1, [pc, #180]	; (1c748 <__loadlocale+0x334>)
   1c692:	4648      	mov	r0, r9
   1c694:	f004 fc42 	bl	20f1c <strcasecmp>
   1c698:	2800      	cmp	r0, #0
   1c69a:	f47f aef8 	bne.w	1c48e <__loadlocale+0x7a>
   1c69e:	492a      	ldr	r1, [pc, #168]	; (1c748 <__loadlocale+0x334>)
   1c6a0:	4648      	mov	r0, r9
   1c6a2:	f000 fd4b 	bl	1d13c <strcpy>
   1c6a6:	2102      	movs	r1, #2
   1c6a8:	4b28      	ldr	r3, [pc, #160]	; (1c74c <__loadlocale+0x338>)
   1c6aa:	4a29      	ldr	r2, [pc, #164]	; (1c750 <__loadlocale+0x33c>)
   1c6ac:	9101      	str	r1, [sp, #4]
   1c6ae:	e7be      	b.n	1c62e <__loadlocale+0x21a>
   1c6b0:	4928      	ldr	r1, [pc, #160]	; (1c754 <__loadlocale+0x340>)
   1c6b2:	4648      	mov	r0, r9
   1c6b4:	f004 fc32 	bl	20f1c <strcasecmp>
   1c6b8:	2800      	cmp	r0, #0
   1c6ba:	f47f aee8 	bne.w	1c48e <__loadlocale+0x7a>
   1c6be:	4926      	ldr	r1, [pc, #152]	; (1c758 <__loadlocale+0x344>)
   1c6c0:	e7de      	b.n	1c680 <__loadlocale+0x26c>
   1c6c2:	4926      	ldr	r1, [pc, #152]	; (1c75c <__loadlocale+0x348>)
   1c6c4:	2204      	movs	r2, #4
   1c6c6:	4648      	mov	r0, r9
   1c6c8:	f7ff fafe 	bl	1bcc8 <strncasecmp>
   1c6cc:	2800      	cmp	r0, #0
   1c6ce:	f47f aede 	bne.w	1c48e <__loadlocale+0x7a>
   1c6d2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c6d6:	2b2d      	cmp	r3, #45	; 0x2d
   1c6d8:	bf08      	it	eq
   1c6da:	f89d 301d 	ldrbeq.w	r3, [sp, #29]
   1c6de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c6e2:	2b52      	cmp	r3, #82	; 0x52
   1c6e4:	f000 815f 	beq.w	1c9a6 <__loadlocale+0x592>
   1c6e8:	2b55      	cmp	r3, #85	; 0x55
   1c6ea:	f47f aed0 	bne.w	1c48e <__loadlocale+0x7a>
   1c6ee:	491c      	ldr	r1, [pc, #112]	; (1c760 <__loadlocale+0x34c>)
   1c6f0:	e7c6      	b.n	1c680 <__loadlocale+0x26c>
   1c6f2:	491c      	ldr	r1, [pc, #112]	; (1c764 <__loadlocale+0x350>)
   1c6f4:	4648      	mov	r0, r9
   1c6f6:	f004 fc11 	bl	20f1c <strcasecmp>
   1c6fa:	2800      	cmp	r0, #0
   1c6fc:	f47f aec7 	bne.w	1c48e <__loadlocale+0x7a>
   1c700:	4918      	ldr	r1, [pc, #96]	; (1c764 <__loadlocale+0x350>)
   1c702:	4648      	mov	r0, r9
   1c704:	f000 fd1a 	bl	1d13c <strcpy>
   1c708:	2108      	movs	r1, #8
   1c70a:	4b17      	ldr	r3, [pc, #92]	; (1c768 <__loadlocale+0x354>)
   1c70c:	4a17      	ldr	r2, [pc, #92]	; (1c76c <__loadlocale+0x358>)
   1c70e:	9101      	str	r1, [sp, #4]
   1c710:	e78d      	b.n	1c62e <__loadlocale+0x21a>
   1c712:	bf00      	nop
   1c714:	20008b0c 	.word	0x20008b0c
   1c718:	20008b14 	.word	0x20008b14
   1c71c:	20008b20 	.word	0x20008b20
   1c720:	20008b18 	.word	0x20008b18
   1c724:	20008b4c 	.word	0x20008b4c
   1c728:	20008b54 	.word	0x20008b54
   1c72c:	0001dfe1 	.word	0x0001dfe1
   1c730:	0001ef15 	.word	0x0001ef15
   1c734:	20008bd4 	.word	0x20008bd4
   1c738:	20008bd8 	.word	0x20008bd8
   1c73c:	20008bdc 	.word	0x20008bdc
   1c740:	0001dfb5 	.word	0x0001dfb5
   1c744:	0001eef9 	.word	0x0001eef9
   1c748:	20008b70 	.word	0x20008b70
   1c74c:	0001e1b1 	.word	0x0001e1b1
   1c750:	0001efb5 	.word	0x0001efb5
   1c754:	20008bc4 	.word	0x20008bc4
   1c758:	20008bcc 	.word	0x20008bcc
   1c75c:	20008b94 	.word	0x20008b94
   1c760:	20008ba4 	.word	0x20008ba4
   1c764:	20008b5c 	.word	0x20008b5c
   1c768:	0001e301 	.word	0x0001e301
   1c76c:	0001f089 	.word	0x0001f089
   1c770:	499b      	ldr	r1, [pc, #620]	; (1c9e0 <__loadlocale+0x5cc>)
   1c772:	2203      	movs	r2, #3
   1c774:	4648      	mov	r0, r9
   1c776:	f7ff faa7 	bl	1bcc8 <strncasecmp>
   1c77a:	2800      	cmp	r0, #0
   1c77c:	f47f ae87 	bne.w	1c48e <__loadlocale+0x7a>
   1c780:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1c784:	4997      	ldr	r1, [pc, #604]	; (1c9e4 <__loadlocale+0x5d0>)
   1c786:	2b2d      	cmp	r3, #45	; 0x2d
   1c788:	bf0c      	ite	eq
   1c78a:	ab07      	addeq	r3, sp, #28
   1c78c:	f10d 031b 	addne.w	r3, sp, #27
   1c790:	2204      	movs	r2, #4
   1c792:	4618      	mov	r0, r3
   1c794:	9301      	str	r3, [sp, #4]
   1c796:	f7ff fa97 	bl	1bcc8 <strncasecmp>
   1c79a:	2800      	cmp	r0, #0
   1c79c:	f47f ae77 	bne.w	1c48e <__loadlocale+0x7a>
   1c7a0:	9b01      	ldr	r3, [sp, #4]
   1c7a2:	791a      	ldrb	r2, [r3, #4]
   1c7a4:	2a2d      	cmp	r2, #45	; 0x2d
   1c7a6:	bf14      	ite	ne
   1c7a8:	1d18      	addne	r0, r3, #4
   1c7aa:	1d58      	addeq	r0, r3, #5
   1c7ac:	220a      	movs	r2, #10
   1c7ae:	a905      	add	r1, sp, #20
   1c7b0:	f7fe fe10 	bl	1b3d4 <strtol>
   1c7b4:	1e42      	subs	r2, r0, #1
   1c7b6:	2a0f      	cmp	r2, #15
   1c7b8:	f63f ae69 	bhi.w	1c48e <__loadlocale+0x7a>
   1c7bc:	280c      	cmp	r0, #12
   1c7be:	9001      	str	r0, [sp, #4]
   1c7c0:	f43f ae65 	beq.w	1c48e <__loadlocale+0x7a>
   1c7c4:	9a05      	ldr	r2, [sp, #20]
   1c7c6:	7812      	ldrb	r2, [r2, #0]
   1c7c8:	2a00      	cmp	r2, #0
   1c7ca:	f47f ae60 	bne.w	1c48e <__loadlocale+0x7a>
   1c7ce:	4986      	ldr	r1, [pc, #536]	; (1c9e8 <__loadlocale+0x5d4>)
   1c7d0:	4648      	mov	r0, r9
   1c7d2:	f000 fcb3 	bl	1d13c <strcpy>
   1c7d6:	9b01      	ldr	r3, [sp, #4]
   1c7d8:	4884      	ldr	r0, [pc, #528]	; (1c9ec <__loadlocale+0x5d8>)
   1c7da:	2b0a      	cmp	r3, #10
   1c7dc:	bfc4      	itt	gt
   1c7de:	2231      	movgt	r2, #49	; 0x31
   1c7e0:	f88d 2021 	strbgt.w	r2, [sp, #33]	; 0x21
   1c7e4:	fb80 2003 	smull	r2, r0, r0, r3
   1c7e8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1c7ec:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
   1c7f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1c7f4:	bfcc      	ite	gt
   1c7f6:	f10d 0122 	addgt.w	r1, sp, #34	; 0x22
   1c7fa:	f10d 0121 	addle.w	r1, sp, #33	; 0x21
   1c7fe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   1c802:	3330      	adds	r3, #48	; 0x30
   1c804:	700b      	strb	r3, [r1, #0]
   1c806:	2300      	movs	r3, #0
   1c808:	704b      	strb	r3, [r1, #1]
   1c80a:	2101      	movs	r1, #1
   1c80c:	4b78      	ldr	r3, [pc, #480]	; (1c9f0 <__loadlocale+0x5dc>)
   1c80e:	4a79      	ldr	r2, [pc, #484]	; (1c9f4 <__loadlocale+0x5e0>)
   1c810:	9101      	str	r1, [sp, #4]
   1c812:	e70c      	b.n	1c62e <__loadlocale+0x21a>
   1c814:	4978      	ldr	r1, [pc, #480]	; (1c9f8 <__loadlocale+0x5e4>)
   1c816:	2208      	movs	r2, #8
   1c818:	4648      	mov	r0, r9
   1c81a:	f7ff fa55 	bl	1bcc8 <strncasecmp>
   1c81e:	2800      	cmp	r0, #0
   1c820:	f47f ae35 	bne.w	1c48e <__loadlocale+0x7a>
   1c824:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1c828:	4974      	ldr	r1, [pc, #464]	; (1c9fc <__loadlocale+0x5e8>)
   1c82a:	2b2d      	cmp	r3, #45	; 0x2d
   1c82c:	bf0c      	ite	eq
   1c82e:	f10d 0021 	addeq.w	r0, sp, #33	; 0x21
   1c832:	a808      	addne	r0, sp, #32
   1c834:	f004 fb72 	bl	20f1c <strcasecmp>
   1c838:	2800      	cmp	r0, #0
   1c83a:	f47f ae28 	bne.w	1c48e <__loadlocale+0x7a>
   1c83e:	4970      	ldr	r1, [pc, #448]	; (1ca00 <__loadlocale+0x5ec>)
   1c840:	e71e      	b.n	1c680 <__loadlocale+0x26c>
   1c842:	4970      	ldr	r1, [pc, #448]	; (1ca04 <__loadlocale+0x5f0>)
   1c844:	2203      	movs	r2, #3
   1c846:	4648      	mov	r0, r9
   1c848:	f7ff fa3e 	bl	1bcc8 <strncasecmp>
   1c84c:	2800      	cmp	r0, #0
   1c84e:	f47f ae1e 	bne.w	1c48e <__loadlocale+0x7a>
   1c852:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1c856:	496c      	ldr	r1, [pc, #432]	; (1ca08 <__loadlocale+0x5f4>)
   1c858:	2b2d      	cmp	r3, #45	; 0x2d
   1c85a:	bf0c      	ite	eq
   1c85c:	a807      	addeq	r0, sp, #28
   1c85e:	f10d 001b 	addne.w	r0, sp, #27
   1c862:	f004 fb5b 	bl	20f1c <strcasecmp>
   1c866:	2800      	cmp	r0, #0
   1c868:	f47f ae11 	bne.w	1c48e <__loadlocale+0x7a>
   1c86c:	4967      	ldr	r1, [pc, #412]	; (1ca0c <__loadlocale+0x5f8>)
   1c86e:	4648      	mov	r0, r9
   1c870:	f000 fc64 	bl	1d13c <strcpy>
   1c874:	2103      	movs	r1, #3
   1c876:	4b66      	ldr	r3, [pc, #408]	; (1ca10 <__loadlocale+0x5fc>)
   1c878:	4a66      	ldr	r2, [pc, #408]	; (1ca14 <__loadlocale+0x600>)
   1c87a:	9101      	str	r1, [sp, #4]
   1c87c:	e6d7      	b.n	1c62e <__loadlocale+0x21a>
   1c87e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1c882:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c886:	2b50      	cmp	r3, #80	; 0x50
   1c888:	f47f ae01 	bne.w	1c48e <__loadlocale+0x7a>
   1c88c:	4962      	ldr	r1, [pc, #392]	; (1ca18 <__loadlocale+0x604>)
   1c88e:	2202      	movs	r2, #2
   1c890:	4648      	mov	r0, r9
   1c892:	f7ff fa8d 	bl	1bdb0 <strncpy>
   1c896:	220a      	movs	r2, #10
   1c898:	a905      	add	r1, sp, #20
   1c89a:	f10d 001a 	add.w	r0, sp, #26
   1c89e:	f7fe fd99 	bl	1b3d4 <strtol>
   1c8a2:	9b05      	ldr	r3, [sp, #20]
   1c8a4:	781b      	ldrb	r3, [r3, #0]
   1c8a6:	2b00      	cmp	r3, #0
   1c8a8:	f47f adf1 	bne.w	1c48e <__loadlocale+0x7a>
   1c8ac:	f5b0 7f69 	cmp.w	r0, #932	; 0x3a4
   1c8b0:	f000 8085 	beq.w	1c9be <__loadlocale+0x5aa>
   1c8b4:	dc65      	bgt.n	1c982 <__loadlocale+0x56e>
   1c8b6:	f240 336a 	movw	r3, #874	; 0x36a
   1c8ba:	4298      	cmp	r0, r3
   1c8bc:	f73f ade7 	bgt.w	1c48e <__loadlocale+0x7a>
   1c8c0:	f240 3351 	movw	r3, #849	; 0x351
   1c8c4:	4298      	cmp	r0, r3
   1c8c6:	dc54      	bgt.n	1c972 <__loadlocale+0x55e>
   1c8c8:	f240 23e1 	movw	r3, #737	; 0x2e1
   1c8cc:	4298      	cmp	r0, r3
   1c8ce:	d005      	beq.n	1c8dc <__loadlocale+0x4c8>
   1c8d0:	dd61      	ble.n	1c996 <__loadlocale+0x582>
   1c8d2:	f240 3307 	movw	r3, #775	; 0x307
   1c8d6:	4298      	cmp	r0, r3
   1c8d8:	f47f add9 	bne.w	1c48e <__loadlocale+0x7a>
   1c8dc:	2101      	movs	r1, #1
   1c8de:	4b44      	ldr	r3, [pc, #272]	; (1c9f0 <__loadlocale+0x5dc>)
   1c8e0:	4a44      	ldr	r2, [pc, #272]	; (1c9f4 <__loadlocale+0x5e0>)
   1c8e2:	9101      	str	r1, [sp, #4]
   1c8e4:	e6a3      	b.n	1c62e <__loadlocale+0x21a>
   1c8e6:	494d      	ldr	r1, [pc, #308]	; (1ca1c <__loadlocale+0x608>)
   1c8e8:	4648      	mov	r0, r9
   1c8ea:	f004 fb17 	bl	20f1c <strcasecmp>
   1c8ee:	2800      	cmp	r0, #0
   1c8f0:	f47f adcd 	bne.w	1c48e <__loadlocale+0x7a>
   1c8f4:	4949      	ldr	r1, [pc, #292]	; (1ca1c <__loadlocale+0x608>)
   1c8f6:	e6c3      	b.n	1c680 <__loadlocale+0x26c>
   1c8f8:	4649      	mov	r1, r9
   1c8fa:	f505 7095 	add.w	r0, r5, #298	; 0x12a
   1c8fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c902:	f000 fc1b 	bl	1d13c <strcpy>
   1c906:	9a02      	ldr	r2, [sp, #8]
   1c908:	9b03      	ldr	r3, [sp, #12]
   1c90a:	9e01      	ldr	r6, [sp, #4]
   1c90c:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
   1c910:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
   1c914:	f885 6128 	strb.w	r6, [r5, #296]	; 0x128
   1c918:	4649      	mov	r1, r9
   1c91a:	4628      	mov	r0, r5
   1c91c:	f7fe fd6c 	bl	1b3f8 <__set_ctype>
   1c920:	f1ba 0f00 	cmp.w	sl, #0
   1c924:	d10b      	bne.n	1c93e <__loadlocale+0x52a>
   1c926:	f1b8 0f00 	cmp.w	r8, #0
   1c92a:	d108      	bne.n	1c93e <__loadlocale+0x52a>
   1c92c:	2e01      	cmp	r6, #1
   1c92e:	d006      	beq.n	1c93e <__loadlocale+0x52a>
   1c930:	f89d a018 	ldrb.w	sl, [sp, #24]
   1c934:	f1ba 0a55 	subs.w	sl, sl, #85	; 0x55
   1c938:	bf18      	it	ne
   1c93a:	f04f 0a01 	movne.w	sl, #1
   1c93e:	f1bb 0f00 	cmp.w	fp, #0
   1c942:	d10e      	bne.n	1c962 <__loadlocale+0x54e>
   1c944:	f8c5 a0e8 	str.w	sl, [r5, #232]	; 0xe8
   1c948:	e67b      	b.n	1c642 <__loadlocale+0x22e>
   1c94a:	f108 0b01 	add.w	fp, r8, #1
   1c94e:	4934      	ldr	r1, [pc, #208]	; (1ca20 <__loadlocale+0x60c>)
   1c950:	4658      	mov	r0, fp
   1c952:	f000 fa89 	bl	1ce68 <strcmp>
   1c956:	4680      	mov	r8, r0
   1c958:	bb38      	cbnz	r0, 1c9aa <__loadlocale+0x596>
   1c95a:	4682      	mov	sl, r0
   1c95c:	f04f 0b01 	mov.w	fp, #1
   1c960:	e5b8      	b.n	1c4d4 <__loadlocale+0xc0>
   1c962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c966:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
   1c96a:	e66a      	b.n	1c642 <__loadlocale+0x22e>
   1c96c:	f108 0801 	add.w	r8, r8, #1
   1c970:	e637      	b.n	1c5e2 <__loadlocale+0x1ce>
   1c972:	4b2c      	ldr	r3, [pc, #176]	; (1ca24 <__loadlocale+0x610>)
   1c974:	f2a0 3052 	subw	r0, r0, #850	; 0x352
   1c978:	40c3      	lsrs	r3, r0
   1c97a:	07db      	lsls	r3, r3, #31
   1c97c:	f57f ad87 	bpl.w	1c48e <__loadlocale+0x7a>
   1c980:	e7ac      	b.n	1c8dc <__loadlocale+0x4c8>
   1c982:	f240 4365 	movw	r3, #1125	; 0x465
   1c986:	4298      	cmp	r0, r3
   1c988:	d0a8      	beq.n	1c8dc <__loadlocale+0x4c8>
   1c98a:	f2a0 40e2 	subw	r0, r0, #1250	; 0x4e2
   1c98e:	2808      	cmp	r0, #8
   1c990:	f63f ad7d 	bhi.w	1c48e <__loadlocale+0x7a>
   1c994:	e7a2      	b.n	1c8dc <__loadlocale+0x4c8>
   1c996:	f240 13b5 	movw	r3, #437	; 0x1b5
   1c99a:	4298      	cmp	r0, r3
   1c99c:	d09e      	beq.n	1c8dc <__loadlocale+0x4c8>
   1c99e:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
   1c9a2:	d09b      	beq.n	1c8dc <__loadlocale+0x4c8>
   1c9a4:	e573      	b.n	1c48e <__loadlocale+0x7a>
   1c9a6:	4920      	ldr	r1, [pc, #128]	; (1ca28 <__loadlocale+0x614>)
   1c9a8:	e66a      	b.n	1c680 <__loadlocale+0x26c>
   1c9aa:	4920      	ldr	r1, [pc, #128]	; (1ca2c <__loadlocale+0x618>)
   1c9ac:	4658      	mov	r0, fp
   1c9ae:	f000 fa5b 	bl	1ce68 <strcmp>
   1c9b2:	4682      	mov	sl, r0
   1c9b4:	b940      	cbnz	r0, 1c9c8 <__loadlocale+0x5b4>
   1c9b6:	4683      	mov	fp, r0
   1c9b8:	f04f 0801 	mov.w	r8, #1
   1c9bc:	e58a      	b.n	1c4d4 <__loadlocale+0xc0>
   1c9be:	2102      	movs	r1, #2
   1c9c0:	4b1b      	ldr	r3, [pc, #108]	; (1ca30 <__loadlocale+0x61c>)
   1c9c2:	4a1c      	ldr	r2, [pc, #112]	; (1ca34 <__loadlocale+0x620>)
   1c9c4:	9101      	str	r1, [sp, #4]
   1c9c6:	e632      	b.n	1c62e <__loadlocale+0x21a>
   1c9c8:	4658      	mov	r0, fp
   1c9ca:	491b      	ldr	r1, [pc, #108]	; (1ca38 <__loadlocale+0x624>)
   1c9cc:	f000 fa4c 	bl	1ce68 <strcmp>
   1c9d0:	f04f 0800 	mov.w	r8, #0
   1c9d4:	fab0 fa80 	clz	sl, r0
   1c9d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
   1c9dc:	46c3      	mov	fp, r8
   1c9de:	e579      	b.n	1c4d4 <__loadlocale+0xc0>
   1c9e0:	20008b78 	.word	0x20008b78
   1c9e4:	20008b7c 	.word	0x20008b7c
   1c9e8:	20008b84 	.word	0x20008b84
   1c9ec:	66666667 	.word	0x66666667
   1c9f0:	0001dfb5 	.word	0x0001dfb5
   1c9f4:	0001eef9 	.word	0x0001eef9
   1c9f8:	20008bac 	.word	0x20008bac
   1c9fc:	20008bb8 	.word	0x20008bb8
   1ca00:	20008bbc 	.word	0x20008bbc
   1ca04:	20008b60 	.word	0x20008b60
   1ca08:	20008b64 	.word	0x20008b64
   1ca0c:	20008b68 	.word	0x20008b68
   1ca10:	0001e241 	.word	0x0001e241
   1ca14:	0001f00d 	.word	0x0001f00d
   1ca18:	20008b90 	.word	0x20008b90
   1ca1c:	20008b18 	.word	0x20008b18
   1ca20:	20008b2c 	.word	0x20008b2c
   1ca24:	010111a5 	.word	0x010111a5
   1ca28:	20008b9c 	.word	0x20008b9c
   1ca2c:	20008b38 	.word	0x20008b38
   1ca30:	0001e1b1 	.word	0x0001e1b1
   1ca34:	0001efb5 	.word	0x0001efb5
   1ca38:	20008b44 	.word	0x20008b44

0001ca3c <__get_locale_env>:
   1ca3c:	b538      	push	{r3, r4, r5, lr}
   1ca3e:	460d      	mov	r5, r1
   1ca40:	490e      	ldr	r1, [pc, #56]	; (1ca7c <__get_locale_env+0x40>)
   1ca42:	4604      	mov	r4, r0
   1ca44:	f001 faa4 	bl	1df90 <_getenv_r>
   1ca48:	b108      	cbz	r0, 1ca4e <__get_locale_env+0x12>
   1ca4a:	7803      	ldrb	r3, [r0, #0]
   1ca4c:	b973      	cbnz	r3, 1ca6c <__get_locale_env+0x30>
   1ca4e:	4b0c      	ldr	r3, [pc, #48]	; (1ca80 <__get_locale_env+0x44>)
   1ca50:	4620      	mov	r0, r4
   1ca52:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   1ca56:	f001 fa9b 	bl	1df90 <_getenv_r>
   1ca5a:	b108      	cbz	r0, 1ca60 <__get_locale_env+0x24>
   1ca5c:	7803      	ldrb	r3, [r0, #0]
   1ca5e:	b92b      	cbnz	r3, 1ca6c <__get_locale_env+0x30>
   1ca60:	4908      	ldr	r1, [pc, #32]	; (1ca84 <__get_locale_env+0x48>)
   1ca62:	4620      	mov	r0, r4
   1ca64:	f001 fa94 	bl	1df90 <_getenv_r>
   1ca68:	b908      	cbnz	r0, 1ca6e <__get_locale_env+0x32>
   1ca6a:	4807      	ldr	r0, [pc, #28]	; (1ca88 <__get_locale_env+0x4c>)
   1ca6c:	bd38      	pop	{r3, r4, r5, pc}
   1ca6e:	7802      	ldrb	r2, [r0, #0]
   1ca70:	4b05      	ldr	r3, [pc, #20]	; (1ca88 <__get_locale_env+0x4c>)
   1ca72:	2a00      	cmp	r2, #0
   1ca74:	bf08      	it	eq
   1ca76:	4618      	moveq	r0, r3
   1ca78:	bd38      	pop	{r3, r4, r5, pc}
   1ca7a:	bf00      	nop
   1ca7c:	20008be4 	.word	0x20008be4
   1ca80:	200022d4 	.word	0x200022d4
   1ca84:	20008bec 	.word	0x20008bec
   1ca88:	2000950c 	.word	0x2000950c
   1ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca90:	f8df 8204 	ldr.w	r8, [pc, #516]	; 1cc98 <__get_locale_env+0x25c>
   1ca94:	4e7d      	ldr	r6, [pc, #500]	; (1cc8c <__get_locale_env+0x250>)
   1ca96:	b083      	sub	sp, #12
   1ca98:	4681      	mov	r9, r0
   1ca9a:	468b      	mov	fp, r1
   1ca9c:	4692      	mov	sl, r2
   1ca9e:	f108 07c0 	add.w	r7, r8, #192	; 0xc0
   1caa2:	4635      	mov	r5, r6
   1caa4:	4644      	mov	r4, r8
   1caa6:	4629      	mov	r1, r5
   1caa8:	4620      	mov	r0, r4
   1caaa:	3420      	adds	r4, #32
   1caac:	f000 fb46 	bl	1d13c <strcpy>
   1cab0:	42bc      	cmp	r4, r7
   1cab2:	f105 0520 	add.w	r5, r5, #32
   1cab6:	d1f6      	bne.n	1caa6 <__get_locale_env+0x6a>
   1cab8:	f89a 3000 	ldrb.w	r3, [sl]
   1cabc:	bbab      	cbnz	r3, 1cb2a <__get_locale_env+0xee>
   1cabe:	f1bb 0f00 	cmp.w	fp, #0
   1cac2:	f040 8086 	bne.w	1cbd2 <__get_locale_env+0x196>
   1cac6:	4645      	mov	r5, r8
   1cac8:	2401      	movs	r4, #1
   1caca:	4621      	mov	r1, r4
   1cacc:	4648      	mov	r0, r9
   1cace:	f7ff ffb5 	bl	1ca3c <__get_locale_env>
   1cad2:	9001      	str	r0, [sp, #4]
   1cad4:	f000 fbf4 	bl	1d2c0 <strlen>
   1cad8:	4603      	mov	r3, r0
   1cada:	2b1f      	cmp	r3, #31
   1cadc:	4628      	mov	r0, r5
   1cade:	9901      	ldr	r1, [sp, #4]
   1cae0:	f104 0401 	add.w	r4, r4, #1
   1cae4:	f105 0520 	add.w	r5, r5, #32
   1cae8:	d86c      	bhi.n	1cbc4 <__get_locale_env+0x188>
   1caea:	f000 fb27 	bl	1d13c <strcpy>
   1caee:	2c07      	cmp	r4, #7
   1caf0:	d1eb      	bne.n	1caca <__get_locale_env+0x8e>
   1caf2:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 1cc9c <__get_locale_env+0x260>
   1caf6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 1cc94 <__get_locale_env+0x258>
   1cafa:	4647      	mov	r7, r8
   1cafc:	4655      	mov	r5, sl
   1cafe:	2401      	movs	r4, #1
   1cb00:	4631      	mov	r1, r6
   1cb02:	4628      	mov	r0, r5
   1cb04:	f000 fb1a 	bl	1d13c <strcpy>
   1cb08:	463a      	mov	r2, r7
   1cb0a:	4621      	mov	r1, r4
   1cb0c:	4658      	mov	r0, fp
   1cb0e:	f7ff fc81 	bl	1c414 <__loadlocale>
   1cb12:	3520      	adds	r5, #32
   1cb14:	3620      	adds	r6, #32
   1cb16:	3720      	adds	r7, #32
   1cb18:	2800      	cmp	r0, #0
   1cb1a:	d06b      	beq.n	1cbf4 <__get_locale_env+0x1b8>
   1cb1c:	3401      	adds	r4, #1
   1cb1e:	2c07      	cmp	r4, #7
   1cb20:	d1ee      	bne.n	1cb00 <__get_locale_env+0xc4>
   1cb22:	b003      	add	sp, #12
   1cb24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb28:	e448      	b.n	1c3bc <strstr+0x168>
   1cb2a:	f1bb 0f00 	cmp.w	fp, #0
   1cb2e:	d135      	bne.n	1cb9c <__get_locale_env+0x160>
   1cb30:	212f      	movs	r1, #47	; 0x2f
   1cb32:	4650      	mov	r0, sl
   1cb34:	f7ff f862 	bl	1bbfc <strchr>
   1cb38:	4604      	mov	r4, r0
   1cb3a:	2800      	cmp	r0, #0
   1cb3c:	f000 8089 	beq.w	1cc52 <__get_locale_env+0x216>
   1cb40:	7842      	ldrb	r2, [r0, #1]
   1cb42:	2a2f      	cmp	r2, #47	; 0x2f
   1cb44:	bf08      	it	eq
   1cb46:	1c43      	addeq	r3, r0, #1
   1cb48:	d104      	bne.n	1cb54 <__get_locale_env+0x118>
   1cb4a:	461c      	mov	r4, r3
   1cb4c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cb50:	2a2f      	cmp	r2, #47	; 0x2f
   1cb52:	d0fa      	beq.n	1cb4a <__get_locale_env+0x10e>
   1cb54:	b3b2      	cbz	r2, 1cbc4 <__get_locale_env+0x188>
   1cb56:	46c3      	mov	fp, r8
   1cb58:	2501      	movs	r5, #1
   1cb5a:	eba4 020a 	sub.w	r2, r4, sl
   1cb5e:	2a1f      	cmp	r2, #31
   1cb60:	dc30      	bgt.n	1cbc4 <__get_locale_env+0x188>
   1cb62:	3201      	adds	r2, #1
   1cb64:	4651      	mov	r1, sl
   1cb66:	4658      	mov	r0, fp
   1cb68:	f004 fa22 	bl	20fb0 <strlcpy>
   1cb6c:	7823      	ldrb	r3, [r4, #0]
   1cb6e:	2b2f      	cmp	r3, #47	; 0x2f
   1cb70:	f105 0501 	add.w	r5, r5, #1
   1cb74:	d103      	bne.n	1cb7e <__get_locale_env+0x142>
   1cb76:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1cb7a:	2b2f      	cmp	r3, #47	; 0x2f
   1cb7c:	d0fb      	beq.n	1cb76 <__get_locale_env+0x13a>
   1cb7e:	2b00      	cmp	r3, #0
   1cb80:	d075      	beq.n	1cc6e <__get_locale_env+0x232>
   1cb82:	4622      	mov	r2, r4
   1cb84:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1cb88:	b10b      	cbz	r3, 1cb8e <__get_locale_env+0x152>
   1cb8a:	2b2f      	cmp	r3, #47	; 0x2f
   1cb8c:	d1fa      	bne.n	1cb84 <__get_locale_env+0x148>
   1cb8e:	2d07      	cmp	r5, #7
   1cb90:	f10b 0b20 	add.w	fp, fp, #32
   1cb94:	d0ad      	beq.n	1caf2 <__get_locale_env+0xb6>
   1cb96:	46a2      	mov	sl, r4
   1cb98:	4614      	mov	r4, r2
   1cb9a:	e7de      	b.n	1cb5a <__get_locale_env+0x11e>
   1cb9c:	4650      	mov	r0, sl
   1cb9e:	f000 fb8f 	bl	1d2c0 <strlen>
   1cba2:	281f      	cmp	r0, #31
   1cba4:	d80e      	bhi.n	1cbc4 <__get_locale_env+0x188>
   1cba6:	4c3a      	ldr	r4, [pc, #232]	; (1cc90 <__get_locale_env+0x254>)
   1cba8:	eb04 144b 	add.w	r4, r4, fp, lsl #5
   1cbac:	4651      	mov	r1, sl
   1cbae:	4620      	mov	r0, r4
   1cbb0:	f000 fac4 	bl	1d13c <strcpy>
   1cbb4:	4837      	ldr	r0, [pc, #220]	; (1cc94 <__get_locale_env+0x258>)
   1cbb6:	4622      	mov	r2, r4
   1cbb8:	4659      	mov	r1, fp
   1cbba:	b003      	add	sp, #12
   1cbbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbc0:	f7ff bc28 	b.w	1c414 <__loadlocale>
   1cbc4:	2316      	movs	r3, #22
   1cbc6:	2000      	movs	r0, #0
   1cbc8:	f8c9 3000 	str.w	r3, [r9]
   1cbcc:	b003      	add	sp, #12
   1cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbd2:	4659      	mov	r1, fp
   1cbd4:	4648      	mov	r0, r9
   1cbd6:	f7ff ff31 	bl	1ca3c <__get_locale_env>
   1cbda:	4605      	mov	r5, r0
   1cbdc:	f000 fb70 	bl	1d2c0 <strlen>
   1cbe0:	281f      	cmp	r0, #31
   1cbe2:	d8ef      	bhi.n	1cbc4 <__get_locale_env+0x188>
   1cbe4:	4c2a      	ldr	r4, [pc, #168]	; (1cc90 <__get_locale_env+0x254>)
   1cbe6:	eb04 144b 	add.w	r4, r4, fp, lsl #5
   1cbea:	4629      	mov	r1, r5
   1cbec:	4620      	mov	r0, r4
   1cbee:	f000 faa5 	bl	1d13c <strcpy>
   1cbf2:	e7df      	b.n	1cbb4 <__get_locale_env+0x178>
   1cbf4:	2c01      	cmp	r4, #1
   1cbf6:	f8d9 7000 	ldr.w	r7, [r9]
   1cbfa:	d024      	beq.n	1cc46 <__get_locale_env+0x20a>
   1cbfc:	4e25      	ldr	r6, [pc, #148]	; (1cc94 <__get_locale_env+0x258>)
   1cbfe:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 1cca0 <__get_locale_env+0x264>
   1cc02:	2501      	movs	r5, #1
   1cc04:	e004      	b.n	1cc10 <__get_locale_env+0x1d4>
   1cc06:	3501      	adds	r5, #1
   1cc08:	42a5      	cmp	r5, r4
   1cc0a:	f108 0820 	add.w	r8, r8, #32
   1cc0e:	d01a      	beq.n	1cc46 <__get_locale_env+0x20a>
   1cc10:	4651      	mov	r1, sl
   1cc12:	4640      	mov	r0, r8
   1cc14:	f000 fa92 	bl	1d13c <strcpy>
   1cc18:	4642      	mov	r2, r8
   1cc1a:	4629      	mov	r1, r5
   1cc1c:	4630      	mov	r0, r6
   1cc1e:	f10a 0a20 	add.w	sl, sl, #32
   1cc22:	f7ff fbf7 	bl	1c414 <__loadlocale>
   1cc26:	2800      	cmp	r0, #0
   1cc28:	d1ed      	bne.n	1cc06 <__get_locale_env+0x1ca>
   1cc2a:	4659      	mov	r1, fp
   1cc2c:	4640      	mov	r0, r8
   1cc2e:	f000 fa85 	bl	1d13c <strcpy>
   1cc32:	4642      	mov	r2, r8
   1cc34:	4629      	mov	r1, r5
   1cc36:	4630      	mov	r0, r6
   1cc38:	3501      	adds	r5, #1
   1cc3a:	f7ff fbeb 	bl	1c414 <__loadlocale>
   1cc3e:	42a5      	cmp	r5, r4
   1cc40:	f108 0820 	add.w	r8, r8, #32
   1cc44:	d1e4      	bne.n	1cc10 <__get_locale_env+0x1d4>
   1cc46:	2000      	movs	r0, #0
   1cc48:	f8c9 7000 	str.w	r7, [r9]
   1cc4c:	b003      	add	sp, #12
   1cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc52:	4650      	mov	r0, sl
   1cc54:	f000 fb34 	bl	1d2c0 <strlen>
   1cc58:	281f      	cmp	r0, #31
   1cc5a:	d8b3      	bhi.n	1cbc4 <__get_locale_env+0x188>
   1cc5c:	4644      	mov	r4, r8
   1cc5e:	4620      	mov	r0, r4
   1cc60:	4651      	mov	r1, sl
   1cc62:	3420      	adds	r4, #32
   1cc64:	f000 fa6a 	bl	1d13c <strcpy>
   1cc68:	42bc      	cmp	r4, r7
   1cc6a:	d1f8      	bne.n	1cc5e <__get_locale_env+0x222>
   1cc6c:	e741      	b.n	1caf2 <__get_locale_env+0xb6>
   1cc6e:	2d07      	cmp	r5, #7
   1cc70:	f43f af3f 	beq.w	1caf2 <__get_locale_env+0xb6>
   1cc74:	4c06      	ldr	r4, [pc, #24]	; (1cc90 <__get_locale_env+0x254>)
   1cc76:	eb04 1445 	add.w	r4, r4, r5, lsl #5
   1cc7a:	f1a4 0120 	sub.w	r1, r4, #32
   1cc7e:	4620      	mov	r0, r4
   1cc80:	3420      	adds	r4, #32
   1cc82:	f000 fa5b 	bl	1d13c <strcpy>
   1cc86:	42bc      	cmp	r4, r7
   1cc88:	d1f7      	bne.n	1cc7a <__get_locale_env+0x23e>
   1cc8a:	e732      	b.n	1caf2 <__get_locale_env+0xb6>
   1cc8c:	200093c0 	.word	0x200093c0
   1cc90:	2000e35c 	.word	0x2000e35c
   1cc94:	200093a0 	.word	0x200093a0
   1cc98:	2000e37c 	.word	0x2000e37c
   1cc9c:	2000e45c 	.word	0x2000e45c
   1cca0:	20008b14 	.word	0x20008b14

0001cca4 <_setlocale_r>:
   1cca4:	2906      	cmp	r1, #6
   1cca6:	d804      	bhi.n	1ccb2 <_setlocale_r+0xe>
   1cca8:	b410      	push	{r4}
   1ccaa:	b132      	cbz	r2, 1ccba <_setlocale_r+0x16>
   1ccac:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ccb0:	e6ec      	b.n	1ca8c <__get_locale_env+0x50>
   1ccb2:	2316      	movs	r3, #22
   1ccb4:	6003      	str	r3, [r0, #0]
   1ccb6:	2000      	movs	r0, #0
   1ccb8:	4770      	bx	lr
   1ccba:	b129      	cbz	r1, 1ccc8 <_setlocale_r+0x24>
   1ccbc:	4804      	ldr	r0, [pc, #16]	; (1ccd0 <_setlocale_r+0x2c>)
   1ccbe:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ccc2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   1ccc6:	4770      	bx	lr
   1ccc8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cccc:	f7ff bb76 	b.w	1c3bc <strstr+0x168>
   1ccd0:	200093a0 	.word	0x200093a0

0001ccd4 <__locale_mb_cur_max>:
   1ccd4:	4b01      	ldr	r3, [pc, #4]	; (1ccdc <__locale_mb_cur_max+0x8>)
   1ccd6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1ccda:	4770      	bx	lr
   1ccdc:	200093a0 	.word	0x200093a0

0001cce0 <setlocale>:
   1cce0:	4b09      	ldr	r3, [pc, #36]	; (1cd08 <setlocale+0x28>)
   1cce2:	2806      	cmp	r0, #6
   1cce4:	681b      	ldr	r3, [r3, #0]
   1cce6:	460a      	mov	r2, r1
   1cce8:	d803      	bhi.n	1ccf2 <setlocale+0x12>
   1ccea:	b131      	cbz	r1, 1ccfa <setlocale+0x1a>
   1ccec:	4601      	mov	r1, r0
   1ccee:	4618      	mov	r0, r3
   1ccf0:	e6cc      	b.n	1ca8c <__get_locale_env+0x50>
   1ccf2:	2216      	movs	r2, #22
   1ccf4:	601a      	str	r2, [r3, #0]
   1ccf6:	2000      	movs	r0, #0
   1ccf8:	4770      	bx	lr
   1ccfa:	b118      	cbz	r0, 1cd04 <setlocale+0x24>
   1ccfc:	4b03      	ldr	r3, [pc, #12]	; (1cd0c <setlocale+0x2c>)
   1ccfe:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1cd02:	4770      	bx	lr
   1cd04:	f7ff bb5a 	b.w	1c3bc <strstr+0x168>
   1cd08:	20008e58 	.word	0x20008e58
   1cd0c:	200093a0 	.word	0x200093a0

0001cd10 <_close_r>:
   1cd10:	b538      	push	{r3, r4, r5, lr}
   1cd12:	4d07      	ldr	r5, [pc, #28]	; (1cd30 <_close_r+0x20>)
   1cd14:	2200      	movs	r2, #0
   1cd16:	4604      	mov	r4, r0
   1cd18:	4608      	mov	r0, r1
   1cd1a:	602a      	str	r2, [r5, #0]
   1cd1c:	f7fa f8e6 	bl	16eec <_close>
   1cd20:	1c43      	adds	r3, r0, #1
   1cd22:	d000      	beq.n	1cd26 <_close_r+0x16>
   1cd24:	bd38      	pop	{r3, r4, r5, pc}
   1cd26:	682b      	ldr	r3, [r5, #0]
   1cd28:	2b00      	cmp	r3, #0
   1cd2a:	d0fb      	beq.n	1cd24 <_close_r+0x14>
   1cd2c:	6023      	str	r3, [r4, #0]
   1cd2e:	bd38      	pop	{r3, r4, r5, pc}
   1cd30:	2000e520 	.word	0x2000e520

0001cd34 <_lseek_r>:
   1cd34:	b538      	push	{r3, r4, r5, lr}
   1cd36:	460c      	mov	r4, r1
   1cd38:	4d08      	ldr	r5, [pc, #32]	; (1cd5c <_lseek_r+0x28>)
   1cd3a:	4684      	mov	ip, r0
   1cd3c:	4611      	mov	r1, r2
   1cd3e:	4620      	mov	r0, r4
   1cd40:	461a      	mov	r2, r3
   1cd42:	2300      	movs	r3, #0
   1cd44:	602b      	str	r3, [r5, #0]
   1cd46:	4664      	mov	r4, ip
   1cd48:	f7fa f8dc 	bl	16f04 <_lseek>
   1cd4c:	1c43      	adds	r3, r0, #1
   1cd4e:	d000      	beq.n	1cd52 <_lseek_r+0x1e>
   1cd50:	bd38      	pop	{r3, r4, r5, pc}
   1cd52:	682b      	ldr	r3, [r5, #0]
   1cd54:	2b00      	cmp	r3, #0
   1cd56:	d0fb      	beq.n	1cd50 <_lseek_r+0x1c>
   1cd58:	6023      	str	r3, [r4, #0]
   1cd5a:	bd38      	pop	{r3, r4, r5, pc}
   1cd5c:	2000e520 	.word	0x2000e520

0001cd60 <_read_r>:
   1cd60:	b538      	push	{r3, r4, r5, lr}
   1cd62:	460c      	mov	r4, r1
   1cd64:	4d08      	ldr	r5, [pc, #32]	; (1cd88 <_read_r+0x28>)
   1cd66:	4684      	mov	ip, r0
   1cd68:	4611      	mov	r1, r2
   1cd6a:	4620      	mov	r0, r4
   1cd6c:	461a      	mov	r2, r3
   1cd6e:	2300      	movs	r3, #0
   1cd70:	602b      	str	r3, [r5, #0]
   1cd72:	4664      	mov	r4, ip
   1cd74:	f7fa f8b8 	bl	16ee8 <_read>
   1cd78:	1c43      	adds	r3, r0, #1
   1cd7a:	d000      	beq.n	1cd7e <_read_r+0x1e>
   1cd7c:	bd38      	pop	{r3, r4, r5, pc}
   1cd7e:	682b      	ldr	r3, [r5, #0]
   1cd80:	2b00      	cmp	r3, #0
   1cd82:	d0fb      	beq.n	1cd7c <_read_r+0x1c>
   1cd84:	6023      	str	r3, [r4, #0]
   1cd86:	bd38      	pop	{r3, r4, r5, pc}
   1cd88:	2000e520 	.word	0x2000e520

0001cd8c <_sbrk_r>:
   1cd8c:	b538      	push	{r3, r4, r5, lr}
   1cd8e:	4d07      	ldr	r5, [pc, #28]	; (1cdac <_sbrk_r+0x20>)
   1cd90:	2200      	movs	r2, #0
   1cd92:	4604      	mov	r4, r0
   1cd94:	4608      	mov	r0, r1
   1cd96:	602a      	str	r2, [r5, #0]
   1cd98:	f7fa f88c 	bl	16eb4 <_sbrk>
   1cd9c:	1c43      	adds	r3, r0, #1
   1cd9e:	d000      	beq.n	1cda2 <_sbrk_r+0x16>
   1cda0:	bd38      	pop	{r3, r4, r5, pc}
   1cda2:	682b      	ldr	r3, [r5, #0]
   1cda4:	2b00      	cmp	r3, #0
   1cda6:	d0fb      	beq.n	1cda0 <_sbrk_r+0x14>
   1cda8:	6023      	str	r3, [r4, #0]
   1cdaa:	bd38      	pop	{r3, r4, r5, pc}
   1cdac:	2000e520 	.word	0x2000e520

0001cdb0 <_write_r>:
   1cdb0:	b538      	push	{r3, r4, r5, lr}
   1cdb2:	460c      	mov	r4, r1
   1cdb4:	4d08      	ldr	r5, [pc, #32]	; (1cdd8 <_write_r+0x28>)
   1cdb6:	4684      	mov	ip, r0
   1cdb8:	4611      	mov	r1, r2
   1cdba:	4620      	mov	r0, r4
   1cdbc:	461a      	mov	r2, r3
   1cdbe:	2300      	movs	r3, #0
   1cdc0:	602b      	str	r3, [r5, #0]
   1cdc2:	4664      	mov	r4, ip
   1cdc4:	f7f8 ff08 	bl	15bd8 <_write>
   1cdc8:	1c43      	adds	r3, r0, #1
   1cdca:	d000      	beq.n	1cdce <_write_r+0x1e>
   1cdcc:	bd38      	pop	{r3, r4, r5, pc}
   1cdce:	682b      	ldr	r3, [r5, #0]
   1cdd0:	2b00      	cmp	r3, #0
   1cdd2:	d0fb      	beq.n	1cdcc <_write_r+0x1c>
   1cdd4:	6023      	str	r3, [r4, #0]
   1cdd6:	bd38      	pop	{r3, r4, r5, pc}
   1cdd8:	2000e520 	.word	0x2000e520

0001cddc <__errno>:
   1cddc:	4b01      	ldr	r3, [pc, #4]	; (1cde4 <__errno+0x8>)
   1cdde:	6818      	ldr	r0, [r3, #0]
   1cde0:	4770      	bx	lr
   1cde2:	bf00      	nop
   1cde4:	20008e58 	.word	0x20008e58

0001cde8 <__libc_init_array>:
   1cde8:	b570      	push	{r4, r5, r6, lr}
   1cdea:	4e0d      	ldr	r6, [pc, #52]	; (1ce20 <__libc_init_array+0x38>)
   1cdec:	4d0d      	ldr	r5, [pc, #52]	; (1ce24 <__libc_init_array+0x3c>)
   1cdee:	1b76      	subs	r6, r6, r5
   1cdf0:	10b6      	asrs	r6, r6, #2
   1cdf2:	d006      	beq.n	1ce02 <__libc_init_array+0x1a>
   1cdf4:	2400      	movs	r4, #0
   1cdf6:	f855 3b04 	ldr.w	r3, [r5], #4
   1cdfa:	3401      	adds	r4, #1
   1cdfc:	4798      	blx	r3
   1cdfe:	42a6      	cmp	r6, r4
   1ce00:	d1f9      	bne.n	1cdf6 <__libc_init_array+0xe>
   1ce02:	4e09      	ldr	r6, [pc, #36]	; (1ce28 <__libc_init_array+0x40>)
   1ce04:	4d09      	ldr	r5, [pc, #36]	; (1ce2c <__libc_init_array+0x44>)
   1ce06:	1b76      	subs	r6, r6, r5
   1ce08:	f007 fd36 	bl	24878 <___init_veneer>
   1ce0c:	10b6      	asrs	r6, r6, #2
   1ce0e:	d006      	beq.n	1ce1e <__libc_init_array+0x36>
   1ce10:	2400      	movs	r4, #0
   1ce12:	f855 3b04 	ldr.w	r3, [r5], #4
   1ce16:	3401      	adds	r4, #1
   1ce18:	4798      	blx	r3
   1ce1a:	42a6      	cmp	r6, r4
   1ce1c:	d1f9      	bne.n	1ce12 <__libc_init_array+0x2a>
   1ce1e:	bd70      	pop	{r4, r5, r6, pc}
   1ce20:	60002000 	.word	0x60002000
   1ce24:	60002000 	.word	0x60002000
   1ce28:	60002060 	.word	0x60002060
   1ce2c:	60002000 	.word	0x60002000

0001ce30 <__retarget_lock_init>:
   1ce30:	4770      	bx	lr
   1ce32:	bf00      	nop

0001ce34 <__retarget_lock_init_recursive>:
   1ce34:	4770      	bx	lr
   1ce36:	bf00      	nop

0001ce38 <__retarget_lock_close>:
   1ce38:	4770      	bx	lr
   1ce3a:	bf00      	nop

0001ce3c <__retarget_lock_close_recursive>:
   1ce3c:	4770      	bx	lr
   1ce3e:	bf00      	nop

0001ce40 <__retarget_lock_acquire>:
   1ce40:	4770      	bx	lr
   1ce42:	bf00      	nop

0001ce44 <__retarget_lock_acquire_recursive>:
   1ce44:	4770      	bx	lr
   1ce46:	bf00      	nop

0001ce48 <__retarget_lock_try_acquire>:
   1ce48:	2001      	movs	r0, #1
   1ce4a:	4770      	bx	lr

0001ce4c <__retarget_lock_try_acquire_recursive>:
   1ce4c:	2001      	movs	r0, #1
   1ce4e:	4770      	bx	lr

0001ce50 <__retarget_lock_release>:
   1ce50:	4770      	bx	lr
   1ce52:	bf00      	nop

0001ce54 <__retarget_lock_release_recursive>:
   1ce54:	4770      	bx	lr
   1ce56:	bf00      	nop
	...
   1ce60:	eba2 0003 	sub.w	r0, r2, r3
   1ce64:	4770      	bx	lr
   1ce66:	bf00      	nop

0001ce68 <strcmp>:
   1ce68:	7802      	ldrb	r2, [r0, #0]
   1ce6a:	780b      	ldrb	r3, [r1, #0]
   1ce6c:	2a01      	cmp	r2, #1
   1ce6e:	bf28      	it	cs
   1ce70:	429a      	cmpcs	r2, r3
   1ce72:	d1f5      	bne.n	1ce60 <__retarget_lock_release_recursive+0xc>
   1ce74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1ce78:	ea40 0401 	orr.w	r4, r0, r1
   1ce7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1ce80:	f06f 0c00 	mvn.w	ip, #0
   1ce84:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1ce88:	b312      	cbz	r2, 1ced0 <strcmp+0x68>
   1ce8a:	ea80 0401 	eor.w	r4, r0, r1
   1ce8e:	f014 0f07 	tst.w	r4, #7
   1ce92:	d16a      	bne.n	1cf6a <strcmp+0x102>
   1ce94:	f000 0407 	and.w	r4, r0, #7
   1ce98:	f020 0007 	bic.w	r0, r0, #7
   1ce9c:	f004 0503 	and.w	r5, r4, #3
   1cea0:	f021 0107 	bic.w	r1, r1, #7
   1cea4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1cea8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ceac:	f014 0f04 	tst.w	r4, #4
   1ceb0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ceb4:	fa0c f405 	lsl.w	r4, ip, r5
   1ceb8:	ea62 0204 	orn	r2, r2, r4
   1cebc:	ea66 0604 	orn	r6, r6, r4
   1cec0:	d00a      	beq.n	1ced8 <strcmp+0x70>
   1cec2:	ea63 0304 	orn	r3, r3, r4
   1cec6:	4662      	mov	r2, ip
   1cec8:	ea67 0704 	orn	r7, r7, r4
   1cecc:	4666      	mov	r6, ip
   1cece:	e003      	b.n	1ced8 <strcmp+0x70>
   1ced0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ced4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ced8:	fa82 f54c 	uadd8	r5, r2, ip
   1cedc:	ea82 0406 	eor.w	r4, r2, r6
   1cee0:	faa4 f48c 	sel	r4, r4, ip
   1cee4:	bb6c      	cbnz	r4, 1cf42 <strcmp+0xda>
   1cee6:	fa83 f54c 	uadd8	r5, r3, ip
   1ceea:	ea83 0507 	eor.w	r5, r3, r7
   1ceee:	faa5 f58c 	sel	r5, r5, ip
   1cef2:	b995      	cbnz	r5, 1cf1a <strcmp+0xb2>
   1cef4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1cef8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1cefc:	fa82 f54c 	uadd8	r5, r2, ip
   1cf00:	ea82 0406 	eor.w	r4, r2, r6
   1cf04:	faa4 f48c 	sel	r4, r4, ip
   1cf08:	fa83 f54c 	uadd8	r5, r3, ip
   1cf0c:	ea83 0507 	eor.w	r5, r3, r7
   1cf10:	faa5 f58c 	sel	r5, r5, ip
   1cf14:	4325      	orrs	r5, r4
   1cf16:	d0db      	beq.n	1ced0 <strcmp+0x68>
   1cf18:	b99c      	cbnz	r4, 1cf42 <strcmp+0xda>
   1cf1a:	ba2d      	rev	r5, r5
   1cf1c:	fab5 f485 	clz	r4, r5
   1cf20:	f024 0407 	bic.w	r4, r4, #7
   1cf24:	fa27 f104 	lsr.w	r1, r7, r4
   1cf28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1cf2c:	fa23 f304 	lsr.w	r3, r3, r4
   1cf30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1cf34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cf38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cf3c:	eba0 0001 	sub.w	r0, r0, r1
   1cf40:	4770      	bx	lr
   1cf42:	ba24      	rev	r4, r4
   1cf44:	fab4 f484 	clz	r4, r4
   1cf48:	f024 0407 	bic.w	r4, r4, #7
   1cf4c:	fa26 f104 	lsr.w	r1, r6, r4
   1cf50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1cf54:	fa22 f204 	lsr.w	r2, r2, r4
   1cf58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1cf5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cf60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cf64:	eba0 0001 	sub.w	r0, r0, r1
   1cf68:	4770      	bx	lr
   1cf6a:	f014 0f03 	tst.w	r4, #3
   1cf6e:	d13c      	bne.n	1cfea <strcmp+0x182>
   1cf70:	f010 0403 	ands.w	r4, r0, #3
   1cf74:	d128      	bne.n	1cfc8 <strcmp+0x160>
   1cf76:	f850 2b08 	ldr.w	r2, [r0], #8
   1cf7a:	f851 3b08 	ldr.w	r3, [r1], #8
   1cf7e:	fa82 f54c 	uadd8	r5, r2, ip
   1cf82:	ea82 0503 	eor.w	r5, r2, r3
   1cf86:	faa5 f58c 	sel	r5, r5, ip
   1cf8a:	b95d      	cbnz	r5, 1cfa4 <strcmp+0x13c>
   1cf8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1cf90:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1cf94:	fa82 f54c 	uadd8	r5, r2, ip
   1cf98:	ea82 0503 	eor.w	r5, r2, r3
   1cf9c:	faa5 f58c 	sel	r5, r5, ip
   1cfa0:	2d00      	cmp	r5, #0
   1cfa2:	d0e8      	beq.n	1cf76 <strcmp+0x10e>
   1cfa4:	ba2d      	rev	r5, r5
   1cfa6:	fab5 f485 	clz	r4, r5
   1cfaa:	f024 0407 	bic.w	r4, r4, #7
   1cfae:	fa23 f104 	lsr.w	r1, r3, r4
   1cfb2:	fa22 f204 	lsr.w	r2, r2, r4
   1cfb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1cfba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cfbe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1cfc2:	eba0 0001 	sub.w	r0, r0, r1
   1cfc6:	4770      	bx	lr
   1cfc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1cfcc:	f020 0003 	bic.w	r0, r0, #3
   1cfd0:	f850 2b08 	ldr.w	r2, [r0], #8
   1cfd4:	f021 0103 	bic.w	r1, r1, #3
   1cfd8:	f851 3b08 	ldr.w	r3, [r1], #8
   1cfdc:	fa0c f404 	lsl.w	r4, ip, r4
   1cfe0:	ea62 0204 	orn	r2, r2, r4
   1cfe4:	ea63 0304 	orn	r3, r3, r4
   1cfe8:	e7c9      	b.n	1cf7e <strcmp+0x116>
   1cfea:	f010 0403 	ands.w	r4, r0, #3
   1cfee:	d01a      	beq.n	1d026 <strcmp+0x1be>
   1cff0:	eba1 0104 	sub.w	r1, r1, r4
   1cff4:	f020 0003 	bic.w	r0, r0, #3
   1cff8:	07e4      	lsls	r4, r4, #31
   1cffa:	f850 2b04 	ldr.w	r2, [r0], #4
   1cffe:	d006      	beq.n	1d00e <strcmp+0x1a6>
   1d000:	d20f      	bcs.n	1d022 <strcmp+0x1ba>
   1d002:	788b      	ldrb	r3, [r1, #2]
   1d004:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1d008:	1ae4      	subs	r4, r4, r3
   1d00a:	d106      	bne.n	1d01a <strcmp+0x1b2>
   1d00c:	b12b      	cbz	r3, 1d01a <strcmp+0x1b2>
   1d00e:	78cb      	ldrb	r3, [r1, #3]
   1d010:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1d014:	1ae4      	subs	r4, r4, r3
   1d016:	d100      	bne.n	1d01a <strcmp+0x1b2>
   1d018:	b91b      	cbnz	r3, 1d022 <strcmp+0x1ba>
   1d01a:	4620      	mov	r0, r4
   1d01c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1d020:	4770      	bx	lr
   1d022:	f101 0104 	add.w	r1, r1, #4
   1d026:	f850 2b04 	ldr.w	r2, [r0], #4
   1d02a:	07cc      	lsls	r4, r1, #31
   1d02c:	f021 0103 	bic.w	r1, r1, #3
   1d030:	f851 3b04 	ldr.w	r3, [r1], #4
   1d034:	d848      	bhi.n	1d0c8 <strcmp+0x260>
   1d036:	d224      	bcs.n	1d082 <strcmp+0x21a>
   1d038:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1d03c:	fa82 f54c 	uadd8	r5, r2, ip
   1d040:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1d044:	faa5 f58c 	sel	r5, r5, ip
   1d048:	d10a      	bne.n	1d060 <strcmp+0x1f8>
   1d04a:	b965      	cbnz	r5, 1d066 <strcmp+0x1fe>
   1d04c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d050:	ea84 0402 	eor.w	r4, r4, r2
   1d054:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1d058:	d10e      	bne.n	1d078 <strcmp+0x210>
   1d05a:	f850 2b04 	ldr.w	r2, [r0], #4
   1d05e:	e7eb      	b.n	1d038 <strcmp+0x1d0>
   1d060:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1d064:	e055      	b.n	1d112 <strcmp+0x2aa>
   1d066:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1d06a:	d14d      	bne.n	1d108 <strcmp+0x2a0>
   1d06c:	7808      	ldrb	r0, [r1, #0]
   1d06e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d072:	f1c0 0000 	rsb	r0, r0, #0
   1d076:	4770      	bx	lr
   1d078:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1d07c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1d080:	e047      	b.n	1d112 <strcmp+0x2aa>
   1d082:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1d086:	fa82 f54c 	uadd8	r5, r2, ip
   1d08a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1d08e:	faa5 f58c 	sel	r5, r5, ip
   1d092:	d10a      	bne.n	1d0aa <strcmp+0x242>
   1d094:	b965      	cbnz	r5, 1d0b0 <strcmp+0x248>
   1d096:	f851 3b04 	ldr.w	r3, [r1], #4
   1d09a:	ea84 0402 	eor.w	r4, r4, r2
   1d09e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1d0a2:	d10c      	bne.n	1d0be <strcmp+0x256>
   1d0a4:	f850 2b04 	ldr.w	r2, [r0], #4
   1d0a8:	e7eb      	b.n	1d082 <strcmp+0x21a>
   1d0aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1d0ae:	e030      	b.n	1d112 <strcmp+0x2aa>
   1d0b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1d0b4:	d128      	bne.n	1d108 <strcmp+0x2a0>
   1d0b6:	880b      	ldrh	r3, [r1, #0]
   1d0b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d0bc:	e029      	b.n	1d112 <strcmp+0x2aa>
   1d0be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d0c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1d0c6:	e024      	b.n	1d112 <strcmp+0x2aa>
   1d0c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1d0cc:	fa82 f54c 	uadd8	r5, r2, ip
   1d0d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1d0d4:	faa5 f58c 	sel	r5, r5, ip
   1d0d8:	d10a      	bne.n	1d0f0 <strcmp+0x288>
   1d0da:	b965      	cbnz	r5, 1d0f6 <strcmp+0x28e>
   1d0dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d0e0:	ea84 0402 	eor.w	r4, r4, r2
   1d0e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1d0e8:	d109      	bne.n	1d0fe <strcmp+0x296>
   1d0ea:	f850 2b04 	ldr.w	r2, [r0], #4
   1d0ee:	e7eb      	b.n	1d0c8 <strcmp+0x260>
   1d0f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1d0f4:	e00d      	b.n	1d112 <strcmp+0x2aa>
   1d0f6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1d0fa:	d105      	bne.n	1d108 <strcmp+0x2a0>
   1d0fc:	680b      	ldr	r3, [r1, #0]
   1d0fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1d102:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d106:	e004      	b.n	1d112 <strcmp+0x2aa>
   1d108:	f04f 0000 	mov.w	r0, #0
   1d10c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d110:	4770      	bx	lr
   1d112:	ba12      	rev	r2, r2
   1d114:	ba1b      	rev	r3, r3
   1d116:	fa82 f44c 	uadd8	r4, r2, ip
   1d11a:	ea82 0403 	eor.w	r4, r2, r3
   1d11e:	faa4 f58c 	sel	r5, r4, ip
   1d122:	fab5 f485 	clz	r4, r5
   1d126:	fa02 f204 	lsl.w	r2, r2, r4
   1d12a:	fa03 f304 	lsl.w	r3, r3, r4
   1d12e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1d132:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d136:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1d13a:	4770      	bx	lr

0001d13c <strcpy>:
   1d13c:	ea80 0201 	eor.w	r2, r0, r1
   1d140:	4684      	mov	ip, r0
   1d142:	f012 0f03 	tst.w	r2, #3
   1d146:	d14f      	bne.n	1d1e8 <strcpy+0xac>
   1d148:	f011 0f03 	tst.w	r1, #3
   1d14c:	d132      	bne.n	1d1b4 <strcpy+0x78>
   1d14e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1d152:	f011 0f04 	tst.w	r1, #4
   1d156:	f851 3b04 	ldr.w	r3, [r1], #4
   1d15a:	d00b      	beq.n	1d174 <strcpy+0x38>
   1d15c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1d160:	439a      	bics	r2, r3
   1d162:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d166:	bf04      	itt	eq
   1d168:	f84c 3b04 	streq.w	r3, [ip], #4
   1d16c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1d170:	d116      	bne.n	1d1a0 <strcpy+0x64>
   1d172:	bf00      	nop
   1d174:	f851 4b04 	ldr.w	r4, [r1], #4
   1d178:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1d17c:	439a      	bics	r2, r3
   1d17e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d182:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1d186:	d10b      	bne.n	1d1a0 <strcpy+0x64>
   1d188:	f84c 3b04 	str.w	r3, [ip], #4
   1d18c:	43a2      	bics	r2, r4
   1d18e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1d192:	bf04      	itt	eq
   1d194:	f851 3b04 	ldreq.w	r3, [r1], #4
   1d198:	f84c 4b04 	streq.w	r4, [ip], #4
   1d19c:	d0ea      	beq.n	1d174 <strcpy+0x38>
   1d19e:	4623      	mov	r3, r4
   1d1a0:	f80c 3b01 	strb.w	r3, [ip], #1
   1d1a4:	f013 0fff 	tst.w	r3, #255	; 0xff
   1d1a8:	ea4f 2333 	mov.w	r3, r3, ror #8
   1d1ac:	d1f8      	bne.n	1d1a0 <strcpy+0x64>
   1d1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d1b2:	4770      	bx	lr
   1d1b4:	f011 0f01 	tst.w	r1, #1
   1d1b8:	d006      	beq.n	1d1c8 <strcpy+0x8c>
   1d1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d1be:	f80c 2b01 	strb.w	r2, [ip], #1
   1d1c2:	2a00      	cmp	r2, #0
   1d1c4:	bf08      	it	eq
   1d1c6:	4770      	bxeq	lr
   1d1c8:	f011 0f02 	tst.w	r1, #2
   1d1cc:	d0bf      	beq.n	1d14e <strcpy+0x12>
   1d1ce:	f831 2b02 	ldrh.w	r2, [r1], #2
   1d1d2:	f012 0fff 	tst.w	r2, #255	; 0xff
   1d1d6:	bf16      	itet	ne
   1d1d8:	f82c 2b02 	strhne.w	r2, [ip], #2
   1d1dc:	f88c 2000 	strbeq.w	r2, [ip]
   1d1e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1d1e4:	d1b3      	bne.n	1d14e <strcpy+0x12>
   1d1e6:	4770      	bx	lr
   1d1e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d1ec:	f80c 2b01 	strb.w	r2, [ip], #1
   1d1f0:	2a00      	cmp	r2, #0
   1d1f2:	d1f9      	bne.n	1d1e8 <strcpy+0xac>
   1d1f4:	4770      	bx	lr
   1d1f6:	bf00      	nop
	...

0001d200 <memchr>:
   1d200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d204:	2a10      	cmp	r2, #16
   1d206:	db2b      	blt.n	1d260 <memchr+0x60>
   1d208:	f010 0f07 	tst.w	r0, #7
   1d20c:	d008      	beq.n	1d220 <memchr+0x20>
   1d20e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d212:	3a01      	subs	r2, #1
   1d214:	428b      	cmp	r3, r1
   1d216:	d02d      	beq.n	1d274 <memchr+0x74>
   1d218:	f010 0f07 	tst.w	r0, #7
   1d21c:	b342      	cbz	r2, 1d270 <memchr+0x70>
   1d21e:	d1f6      	bne.n	1d20e <memchr+0xe>
   1d220:	b4f0      	push	{r4, r5, r6, r7}
   1d222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1d226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1d22a:	f022 0407 	bic.w	r4, r2, #7
   1d22e:	f07f 0700 	mvns.w	r7, #0
   1d232:	2300      	movs	r3, #0
   1d234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1d238:	3c08      	subs	r4, #8
   1d23a:	ea85 0501 	eor.w	r5, r5, r1
   1d23e:	ea86 0601 	eor.w	r6, r6, r1
   1d242:	fa85 f547 	uadd8	r5, r5, r7
   1d246:	faa3 f587 	sel	r5, r3, r7
   1d24a:	fa86 f647 	uadd8	r6, r6, r7
   1d24e:	faa5 f687 	sel	r6, r5, r7
   1d252:	b98e      	cbnz	r6, 1d278 <memchr+0x78>
   1d254:	d1ee      	bne.n	1d234 <memchr+0x34>
   1d256:	bcf0      	pop	{r4, r5, r6, r7}
   1d258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d25c:	f002 0207 	and.w	r2, r2, #7
   1d260:	b132      	cbz	r2, 1d270 <memchr+0x70>
   1d262:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d266:	3a01      	subs	r2, #1
   1d268:	ea83 0301 	eor.w	r3, r3, r1
   1d26c:	b113      	cbz	r3, 1d274 <memchr+0x74>
   1d26e:	d1f8      	bne.n	1d262 <memchr+0x62>
   1d270:	2000      	movs	r0, #0
   1d272:	4770      	bx	lr
   1d274:	3801      	subs	r0, #1
   1d276:	4770      	bx	lr
   1d278:	2d00      	cmp	r5, #0
   1d27a:	bf06      	itte	eq
   1d27c:	4635      	moveq	r5, r6
   1d27e:	3803      	subeq	r0, #3
   1d280:	3807      	subne	r0, #7
   1d282:	f015 0f01 	tst.w	r5, #1
   1d286:	d107      	bne.n	1d298 <memchr+0x98>
   1d288:	3001      	adds	r0, #1
   1d28a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1d28e:	bf02      	ittt	eq
   1d290:	3001      	addeq	r0, #1
   1d292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1d296:	3001      	addeq	r0, #1
   1d298:	bcf0      	pop	{r4, r5, r6, r7}
   1d29a:	3801      	subs	r0, #1
   1d29c:	4770      	bx	lr
   1d29e:	bf00      	nop
	...

0001d2c0 <strlen>:
   1d2c0:	f890 f000 	pld	[r0]
   1d2c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1d2c8:	f020 0107 	bic.w	r1, r0, #7
   1d2cc:	f06f 0c00 	mvn.w	ip, #0
   1d2d0:	f010 0407 	ands.w	r4, r0, #7
   1d2d4:	f891 f020 	pld	[r1, #32]
   1d2d8:	f040 8049 	bne.w	1d36e <strlen+0xae>
   1d2dc:	f04f 0400 	mov.w	r4, #0
   1d2e0:	f06f 0007 	mvn.w	r0, #7
   1d2e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d2e8:	f891 f040 	pld	[r1, #64]	; 0x40
   1d2ec:	f100 0008 	add.w	r0, r0, #8
   1d2f0:	fa82 f24c 	uadd8	r2, r2, ip
   1d2f4:	faa4 f28c 	sel	r2, r4, ip
   1d2f8:	fa83 f34c 	uadd8	r3, r3, ip
   1d2fc:	faa2 f38c 	sel	r3, r2, ip
   1d300:	bb4b      	cbnz	r3, 1d356 <strlen+0x96>
   1d302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1d306:	fa82 f24c 	uadd8	r2, r2, ip
   1d30a:	f100 0008 	add.w	r0, r0, #8
   1d30e:	faa4 f28c 	sel	r2, r4, ip
   1d312:	fa83 f34c 	uadd8	r3, r3, ip
   1d316:	faa2 f38c 	sel	r3, r2, ip
   1d31a:	b9e3      	cbnz	r3, 1d356 <strlen+0x96>
   1d31c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1d320:	fa82 f24c 	uadd8	r2, r2, ip
   1d324:	f100 0008 	add.w	r0, r0, #8
   1d328:	faa4 f28c 	sel	r2, r4, ip
   1d32c:	fa83 f34c 	uadd8	r3, r3, ip
   1d330:	faa2 f38c 	sel	r3, r2, ip
   1d334:	b97b      	cbnz	r3, 1d356 <strlen+0x96>
   1d336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1d33a:	f101 0120 	add.w	r1, r1, #32
   1d33e:	fa82 f24c 	uadd8	r2, r2, ip
   1d342:	f100 0008 	add.w	r0, r0, #8
   1d346:	faa4 f28c 	sel	r2, r4, ip
   1d34a:	fa83 f34c 	uadd8	r3, r3, ip
   1d34e:	faa2 f38c 	sel	r3, r2, ip
   1d352:	2b00      	cmp	r3, #0
   1d354:	d0c6      	beq.n	1d2e4 <strlen+0x24>
   1d356:	2a00      	cmp	r2, #0
   1d358:	bf04      	itt	eq
   1d35a:	3004      	addeq	r0, #4
   1d35c:	461a      	moveq	r2, r3
   1d35e:	ba12      	rev	r2, r2
   1d360:	fab2 f282 	clz	r2, r2
   1d364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1d368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1d36c:	4770      	bx	lr
   1d36e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d372:	f004 0503 	and.w	r5, r4, #3
   1d376:	f1c4 0000 	rsb	r0, r4, #0
   1d37a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1d37e:	f014 0f04 	tst.w	r4, #4
   1d382:	f891 f040 	pld	[r1, #64]	; 0x40
   1d386:	fa0c f505 	lsl.w	r5, ip, r5
   1d38a:	ea62 0205 	orn	r2, r2, r5
   1d38e:	bf1c      	itt	ne
   1d390:	ea63 0305 	ornne	r3, r3, r5
   1d394:	4662      	movne	r2, ip
   1d396:	f04f 0400 	mov.w	r4, #0
   1d39a:	e7a9      	b.n	1d2f0 <strlen+0x30>
   1d39c:	0000      	movs	r0, r0
	...

0001d3a0 <nan>:
   1d3a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1d3a8 <nan+0x8>
   1d3a4:	4770      	bx	lr
   1d3a6:	bf00      	nop
   1d3a8:	00000000 	.word	0x00000000
   1d3ac:	7ff80000 	.word	0x7ff80000

0001d3b0 <nanf>:
   1d3b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1d3b8 <nanf+0x8>
   1d3b4:	4770      	bx	lr
   1d3b6:	bf00      	nop
   1d3b8:	7fc00000 	.word	0x7fc00000

0001d3bc <__register_exitproc>:
   1d3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d3c0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1d440 <__register_exitproc+0x84>
   1d3c4:	4606      	mov	r6, r0
   1d3c6:	f8da 0000 	ldr.w	r0, [sl]
   1d3ca:	4698      	mov	r8, r3
   1d3cc:	460f      	mov	r7, r1
   1d3ce:	4691      	mov	r9, r2
   1d3d0:	f7ff fd38 	bl	1ce44 <__retarget_lock_acquire_recursive>
   1d3d4:	4b18      	ldr	r3, [pc, #96]	; (1d438 <__register_exitproc+0x7c>)
   1d3d6:	681c      	ldr	r4, [r3, #0]
   1d3d8:	b324      	cbz	r4, 1d424 <__register_exitproc+0x68>
   1d3da:	6865      	ldr	r5, [r4, #4]
   1d3dc:	2d1f      	cmp	r5, #31
   1d3de:	dc24      	bgt.n	1d42a <__register_exitproc+0x6e>
   1d3e0:	b95e      	cbnz	r6, 1d3fa <__register_exitproc+0x3e>
   1d3e2:	1c6b      	adds	r3, r5, #1
   1d3e4:	3502      	adds	r5, #2
   1d3e6:	f8da 0000 	ldr.w	r0, [sl]
   1d3ea:	6063      	str	r3, [r4, #4]
   1d3ec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   1d3f0:	f7ff fd30 	bl	1ce54 <__retarget_lock_release_recursive>
   1d3f4:	2000      	movs	r0, #0
   1d3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d3fa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1d3fe:	2301      	movs	r3, #1
   1d400:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1d404:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   1d408:	40ab      	lsls	r3, r5
   1d40a:	431a      	orrs	r2, r3
   1d40c:	2e02      	cmp	r6, #2
   1d40e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   1d412:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1d416:	d1e4      	bne.n	1d3e2 <__register_exitproc+0x26>
   1d418:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1d41c:	431a      	orrs	r2, r3
   1d41e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   1d422:	e7de      	b.n	1d3e2 <__register_exitproc+0x26>
   1d424:	4c05      	ldr	r4, [pc, #20]	; (1d43c <__register_exitproc+0x80>)
   1d426:	601c      	str	r4, [r3, #0]
   1d428:	e7d7      	b.n	1d3da <__register_exitproc+0x1e>
   1d42a:	f8da 0000 	ldr.w	r0, [sl]
   1d42e:	f7ff fd11 	bl	1ce54 <__retarget_lock_release_recursive>
   1d432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d436:	e7de      	b.n	1d3f6 <__register_exitproc+0x3a>
   1d438:	2000e6d4 	.word	0x2000e6d4
   1d43c:	2000e544 	.word	0x2000e544
   1d440:	2000952c 	.word	0x2000952c

0001d444 <_malloc_trim_r>:
   1d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d446:	4f24      	ldr	r7, [pc, #144]	; (1d4d8 <_malloc_trim_r+0x94>)
   1d448:	460c      	mov	r4, r1
   1d44a:	4606      	mov	r6, r0
   1d44c:	f7fc fd28 	bl	19ea0 <__malloc_lock>
   1d450:	68bb      	ldr	r3, [r7, #8]
   1d452:	685d      	ldr	r5, [r3, #4]
   1d454:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1d458:	310f      	adds	r1, #15
   1d45a:	f025 0503 	bic.w	r5, r5, #3
   1d45e:	194b      	adds	r3, r1, r5
   1d460:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1d464:	f023 030f 	bic.w	r3, r3, #15
   1d468:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1d46c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1d470:	db07      	blt.n	1d482 <_malloc_trim_r+0x3e>
   1d472:	2100      	movs	r1, #0
   1d474:	4630      	mov	r0, r6
   1d476:	f7ff fc89 	bl	1cd8c <_sbrk_r>
   1d47a:	68bb      	ldr	r3, [r7, #8]
   1d47c:	442b      	add	r3, r5
   1d47e:	4298      	cmp	r0, r3
   1d480:	d004      	beq.n	1d48c <_malloc_trim_r+0x48>
   1d482:	4630      	mov	r0, r6
   1d484:	f7fc fd12 	bl	19eac <__malloc_unlock>
   1d488:	2000      	movs	r0, #0
   1d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d48c:	4261      	negs	r1, r4
   1d48e:	4630      	mov	r0, r6
   1d490:	f7ff fc7c 	bl	1cd8c <_sbrk_r>
   1d494:	3001      	adds	r0, #1
   1d496:	d00d      	beq.n	1d4b4 <_malloc_trim_r+0x70>
   1d498:	4a10      	ldr	r2, [pc, #64]	; (1d4dc <_malloc_trim_r+0x98>)
   1d49a:	68bb      	ldr	r3, [r7, #8]
   1d49c:	1b2d      	subs	r5, r5, r4
   1d49e:	f045 0501 	orr.w	r5, r5, #1
   1d4a2:	605d      	str	r5, [r3, #4]
   1d4a4:	6813      	ldr	r3, [r2, #0]
   1d4a6:	4630      	mov	r0, r6
   1d4a8:	1b1b      	subs	r3, r3, r4
   1d4aa:	6013      	str	r3, [r2, #0]
   1d4ac:	f7fc fcfe 	bl	19eac <__malloc_unlock>
   1d4b0:	2001      	movs	r0, #1
   1d4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d4b4:	2100      	movs	r1, #0
   1d4b6:	4630      	mov	r0, r6
   1d4b8:	f7ff fc68 	bl	1cd8c <_sbrk_r>
   1d4bc:	68ba      	ldr	r2, [r7, #8]
   1d4be:	1a83      	subs	r3, r0, r2
   1d4c0:	2b0f      	cmp	r3, #15
   1d4c2:	ddde      	ble.n	1d482 <_malloc_trim_r+0x3e>
   1d4c4:	f043 0301 	orr.w	r3, r3, #1
   1d4c8:	6053      	str	r3, [r2, #4]
   1d4ca:	4b05      	ldr	r3, [pc, #20]	; (1d4e0 <_malloc_trim_r+0x9c>)
   1d4cc:	4903      	ldr	r1, [pc, #12]	; (1d4dc <_malloc_trim_r+0x98>)
   1d4ce:	681b      	ldr	r3, [r3, #0]
   1d4d0:	1ac0      	subs	r0, r0, r3
   1d4d2:	6008      	str	r0, [r1, #0]
   1d4d4:	e7d5      	b.n	1d482 <_malloc_trim_r+0x3e>
   1d4d6:	bf00      	nop
   1d4d8:	20008f84 	.word	0x20008f84
   1d4dc:	2000e108 	.word	0x2000e108
   1d4e0:	2000938c 	.word	0x2000938c

0001d4e4 <_free_r>:
   1d4e4:	2900      	cmp	r1, #0
   1d4e6:	d061      	beq.n	1d5ac <_free_r+0xc8>
   1d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4ea:	460c      	mov	r4, r1
   1d4ec:	4606      	mov	r6, r0
   1d4ee:	f7fc fcd7 	bl	19ea0 <__malloc_lock>
   1d4f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   1d4f6:	4f7b      	ldr	r7, [pc, #492]	; (1d6e4 <_free_r+0x200>)
   1d4f8:	f1a4 0508 	sub.w	r5, r4, #8
   1d4fc:	f022 0101 	bic.w	r1, r2, #1
   1d500:	eb05 0c01 	add.w	ip, r5, r1
   1d504:	68b8      	ldr	r0, [r7, #8]
   1d506:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1d50a:	4560      	cmp	r0, ip
   1d50c:	f023 0303 	bic.w	r3, r3, #3
   1d510:	f000 808b 	beq.w	1d62a <_free_r+0x146>
   1d514:	07d2      	lsls	r2, r2, #31
   1d516:	f8cc 3004 	str.w	r3, [ip, #4]
   1d51a:	d432      	bmi.n	1d582 <_free_r+0x9e>
   1d51c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   1d520:	1aad      	subs	r5, r5, r2
   1d522:	4411      	add	r1, r2
   1d524:	68aa      	ldr	r2, [r5, #8]
   1d526:	f107 0008 	add.w	r0, r7, #8
   1d52a:	4282      	cmp	r2, r0
   1d52c:	d06a      	beq.n	1d604 <_free_r+0x120>
   1d52e:	eb0c 0403 	add.w	r4, ip, r3
   1d532:	f8d4 e004 	ldr.w	lr, [r4, #4]
   1d536:	68ec      	ldr	r4, [r5, #12]
   1d538:	60d4      	str	r4, [r2, #12]
   1d53a:	f01e 0f01 	tst.w	lr, #1
   1d53e:	60a2      	str	r2, [r4, #8]
   1d540:	f000 8097 	beq.w	1d672 <_free_r+0x18e>
   1d544:	f041 0301 	orr.w	r3, r1, #1
   1d548:	606b      	str	r3, [r5, #4]
   1d54a:	f8cc 1000 	str.w	r1, [ip]
   1d54e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d552:	d235      	bcs.n	1d5c0 <_free_r+0xdc>
   1d554:	6878      	ldr	r0, [r7, #4]
   1d556:	08cb      	lsrs	r3, r1, #3
   1d558:	2201      	movs	r2, #1
   1d55a:	0949      	lsrs	r1, r1, #5
   1d55c:	3301      	adds	r3, #1
   1d55e:	408a      	lsls	r2, r1
   1d560:	4302      	orrs	r2, r0
   1d562:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   1d566:	607a      	str	r2, [r7, #4]
   1d568:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1d56c:	3a08      	subs	r2, #8
   1d56e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   1d572:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   1d576:	60cd      	str	r5, [r1, #12]
   1d578:	4630      	mov	r0, r6
   1d57a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d57e:	f7fc bc95 	b.w	19eac <__malloc_unlock>
   1d582:	eb0c 0203 	add.w	r2, ip, r3
   1d586:	6852      	ldr	r2, [r2, #4]
   1d588:	07d0      	lsls	r0, r2, #31
   1d58a:	d410      	bmi.n	1d5ae <_free_r+0xca>
   1d58c:	4419      	add	r1, r3
   1d58e:	f107 0008 	add.w	r0, r7, #8
   1d592:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1d596:	4283      	cmp	r3, r0
   1d598:	d073      	beq.n	1d682 <_free_r+0x19e>
   1d59a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1d59e:	60da      	str	r2, [r3, #12]
   1d5a0:	6093      	str	r3, [r2, #8]
   1d5a2:	f041 0301 	orr.w	r3, r1, #1
   1d5a6:	606b      	str	r3, [r5, #4]
   1d5a8:	5069      	str	r1, [r5, r1]
   1d5aa:	e7d0      	b.n	1d54e <_free_r+0x6a>
   1d5ac:	4770      	bx	lr
   1d5ae:	f041 0301 	orr.w	r3, r1, #1
   1d5b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d5b6:	f844 3c04 	str.w	r3, [r4, #-4]
   1d5ba:	f8cc 1000 	str.w	r1, [ip]
   1d5be:	d3c9      	bcc.n	1d554 <_free_r+0x70>
   1d5c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   1d5c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
   1d5c8:	d248      	bcs.n	1d65c <_free_r+0x178>
   1d5ca:	098b      	lsrs	r3, r1, #6
   1d5cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1d5d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   1d5d4:	00c3      	lsls	r3, r0, #3
   1d5d6:	18f8      	adds	r0, r7, r3
   1d5d8:	58fb      	ldr	r3, [r7, r3]
   1d5da:	3808      	subs	r0, #8
   1d5dc:	4298      	cmp	r0, r3
   1d5de:	d059      	beq.n	1d694 <_free_r+0x1b0>
   1d5e0:	685a      	ldr	r2, [r3, #4]
   1d5e2:	f022 0203 	bic.w	r2, r2, #3
   1d5e6:	428a      	cmp	r2, r1
   1d5e8:	d902      	bls.n	1d5f0 <_free_r+0x10c>
   1d5ea:	689b      	ldr	r3, [r3, #8]
   1d5ec:	4298      	cmp	r0, r3
   1d5ee:	d1f7      	bne.n	1d5e0 <_free_r+0xfc>
   1d5f0:	68d8      	ldr	r0, [r3, #12]
   1d5f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   1d5f6:	6085      	str	r5, [r0, #8]
   1d5f8:	60dd      	str	r5, [r3, #12]
   1d5fa:	4630      	mov	r0, r6
   1d5fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d600:	f7fc bc54 	b.w	19eac <__malloc_unlock>
   1d604:	eb0c 0203 	add.w	r2, ip, r3
   1d608:	6852      	ldr	r2, [r2, #4]
   1d60a:	07d2      	lsls	r2, r2, #31
   1d60c:	d463      	bmi.n	1d6d6 <_free_r+0x1f2>
   1d60e:	440b      	add	r3, r1
   1d610:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   1d614:	60ca      	str	r2, [r1, #12]
   1d616:	6091      	str	r1, [r2, #8]
   1d618:	f043 0201 	orr.w	r2, r3, #1
   1d61c:	606a      	str	r2, [r5, #4]
   1d61e:	4630      	mov	r0, r6
   1d620:	50eb      	str	r3, [r5, r3]
   1d622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d626:	f7fc bc41 	b.w	19eac <__malloc_unlock>
   1d62a:	440b      	add	r3, r1
   1d62c:	07d1      	lsls	r1, r2, #31
   1d62e:	d407      	bmi.n	1d640 <_free_r+0x15c>
   1d630:	f854 2c08 	ldr.w	r2, [r4, #-8]
   1d634:	1aad      	subs	r5, r5, r2
   1d636:	4413      	add	r3, r2
   1d638:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   1d63c:	60ca      	str	r2, [r1, #12]
   1d63e:	6091      	str	r1, [r2, #8]
   1d640:	f043 0201 	orr.w	r2, r3, #1
   1d644:	606a      	str	r2, [r5, #4]
   1d646:	4a28      	ldr	r2, [pc, #160]	; (1d6e8 <_free_r+0x204>)
   1d648:	60bd      	str	r5, [r7, #8]
   1d64a:	6812      	ldr	r2, [r2, #0]
   1d64c:	429a      	cmp	r2, r3
   1d64e:	d893      	bhi.n	1d578 <_free_r+0x94>
   1d650:	4b26      	ldr	r3, [pc, #152]	; (1d6ec <_free_r+0x208>)
   1d652:	4630      	mov	r0, r6
   1d654:	6819      	ldr	r1, [r3, #0]
   1d656:	f7ff fef5 	bl	1d444 <_malloc_trim_r>
   1d65a:	e78d      	b.n	1d578 <_free_r+0x94>
   1d65c:	2b14      	cmp	r3, #20
   1d65e:	d90a      	bls.n	1d676 <_free_r+0x192>
   1d660:	2b54      	cmp	r3, #84	; 0x54
   1d662:	d81f      	bhi.n	1d6a4 <_free_r+0x1c0>
   1d664:	0b0b      	lsrs	r3, r1, #12
   1d666:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1d66a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1d66e:	00c3      	lsls	r3, r0, #3
   1d670:	e7b1      	b.n	1d5d6 <_free_r+0xf2>
   1d672:	4419      	add	r1, r3
   1d674:	e78d      	b.n	1d592 <_free_r+0xae>
   1d676:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1d67a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   1d67e:	00c3      	lsls	r3, r0, #3
   1d680:	e7a9      	b.n	1d5d6 <_free_r+0xf2>
   1d682:	f041 0301 	orr.w	r3, r1, #1
   1d686:	e9c7 5504 	strd	r5, r5, [r7, #16]
   1d68a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   1d68e:	606b      	str	r3, [r5, #4]
   1d690:	5069      	str	r1, [r5, r1]
   1d692:	e771      	b.n	1d578 <_free_r+0x94>
   1d694:	6879      	ldr	r1, [r7, #4]
   1d696:	1092      	asrs	r2, r2, #2
   1d698:	2401      	movs	r4, #1
   1d69a:	fa04 f202 	lsl.w	r2, r4, r2
   1d69e:	430a      	orrs	r2, r1
   1d6a0:	607a      	str	r2, [r7, #4]
   1d6a2:	e7a6      	b.n	1d5f2 <_free_r+0x10e>
   1d6a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1d6a8:	d806      	bhi.n	1d6b8 <_free_r+0x1d4>
   1d6aa:	0bcb      	lsrs	r3, r1, #15
   1d6ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1d6b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   1d6b4:	00c3      	lsls	r3, r0, #3
   1d6b6:	e78e      	b.n	1d5d6 <_free_r+0xf2>
   1d6b8:	f240 5254 	movw	r2, #1364	; 0x554
   1d6bc:	4293      	cmp	r3, r2
   1d6be:	d806      	bhi.n	1d6ce <_free_r+0x1ea>
   1d6c0:	0c8b      	lsrs	r3, r1, #18
   1d6c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1d6c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1d6ca:	00c3      	lsls	r3, r0, #3
   1d6cc:	e783      	b.n	1d5d6 <_free_r+0xf2>
   1d6ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1d6d2:	227e      	movs	r2, #126	; 0x7e
   1d6d4:	e77f      	b.n	1d5d6 <_free_r+0xf2>
   1d6d6:	f041 0301 	orr.w	r3, r1, #1
   1d6da:	606b      	str	r3, [r5, #4]
   1d6dc:	f8cc 1000 	str.w	r1, [ip]
   1d6e0:	e74a      	b.n	1d578 <_free_r+0x94>
   1d6e2:	bf00      	nop
   1d6e4:	20008f84 	.word	0x20008f84
   1d6e8:	20009390 	.word	0x20009390
   1d6ec:	2000e104 	.word	0x2000e104
   1d6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6f4:	6904      	ldr	r4, [r0, #16]
   1d6f6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   1d6fa:	dd2f      	ble.n	1d75c <_free_r+0x278>
   1d6fc:	f100 0e14 	add.w	lr, r0, #20
   1d700:	114e      	asrs	r6, r1, #5
   1d702:	f011 0c1f 	ands.w	ip, r1, #31
   1d706:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   1d70a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   1d70e:	d02b      	beq.n	1d768 <_free_r+0x284>
   1d710:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   1d714:	3304      	adds	r3, #4
   1d716:	429d      	cmp	r5, r3
   1d718:	fa21 f10c 	lsr.w	r1, r1, ip
   1d71c:	f1cc 0820 	rsb	r8, ip, #32
   1d720:	d918      	bls.n	1d754 <_free_r+0x270>
   1d722:	4677      	mov	r7, lr
   1d724:	681a      	ldr	r2, [r3, #0]
   1d726:	fa02 f208 	lsl.w	r2, r2, r8
   1d72a:	430a      	orrs	r2, r1
   1d72c:	f847 2b04 	str.w	r2, [r7], #4
   1d730:	f853 1b04 	ldr.w	r1, [r3], #4
   1d734:	429d      	cmp	r5, r3
   1d736:	fa21 f10c 	lsr.w	r1, r1, ip
   1d73a:	d8f3      	bhi.n	1d724 <_free_r+0x240>
   1d73c:	1ba3      	subs	r3, r4, r6
   1d73e:	009b      	lsls	r3, r3, #2
   1d740:	3b05      	subs	r3, #5
   1d742:	089b      	lsrs	r3, r3, #2
   1d744:	3301      	adds	r3, #1
   1d746:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   1d74a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   1d74e:	b1c9      	cbz	r1, 1d784 <_free_r+0x2a0>
   1d750:	3404      	adds	r4, #4
   1d752:	e017      	b.n	1d784 <_free_r+0x2a0>
   1d754:	6141      	str	r1, [r0, #20]
   1d756:	4674      	mov	r4, lr
   1d758:	2900      	cmp	r1, #0
   1d75a:	d1f9      	bne.n	1d750 <_free_r+0x26c>
   1d75c:	2300      	movs	r3, #0
   1d75e:	6103      	str	r3, [r0, #16]
   1d760:	2300      	movs	r3, #0
   1d762:	6143      	str	r3, [r0, #20]
   1d764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d768:	429d      	cmp	r5, r3
   1d76a:	bf88      	it	hi
   1d76c:	f100 0210 	addhi.w	r2, r0, #16
   1d770:	d9f4      	bls.n	1d75c <_free_r+0x278>
   1d772:	f853 1b04 	ldr.w	r1, [r3], #4
   1d776:	f842 1f04 	str.w	r1, [r2, #4]!
   1d77a:	429d      	cmp	r5, r3
   1d77c:	d8f9      	bhi.n	1d772 <_free_r+0x28e>
   1d77e:	1ba4      	subs	r4, r4, r6
   1d780:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   1d784:	eba4 030e 	sub.w	r3, r4, lr
   1d788:	109b      	asrs	r3, r3, #2
   1d78a:	4574      	cmp	r4, lr
   1d78c:	6103      	str	r3, [r0, #16]
   1d78e:	d0e7      	beq.n	1d760 <_free_r+0x27c>
   1d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d794 <__gethex>:
   1d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d798:	ed2d 8b02 	vpush	{d8}
   1d79c:	680c      	ldr	r4, [r1, #0]
   1d79e:	468b      	mov	fp, r1
   1d7a0:	78a1      	ldrb	r1, [r4, #2]
   1d7a2:	b085      	sub	sp, #20
   1d7a4:	2930      	cmp	r1, #48	; 0x30
   1d7a6:	ee08 0a10 	vmov	s16, r0
   1d7aa:	4692      	mov	sl, r2
   1d7ac:	9302      	str	r3, [sp, #8]
   1d7ae:	f040 81ce 	bne.w	1db4e <__gethex+0x3ba>
   1d7b2:	f06f 0001 	mvn.w	r0, #1
   1d7b6:	1b00      	subs	r0, r0, r4
   1d7b8:	1ce2      	adds	r2, r4, #3
   1d7ba:	1883      	adds	r3, r0, r2
   1d7bc:	4614      	mov	r4, r2
   1d7be:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d7c2:	2930      	cmp	r1, #48	; 0x30
   1d7c4:	d0f9      	beq.n	1d7ba <__gethex+0x26>
   1d7c6:	f8df 8300 	ldr.w	r8, [pc, #768]	; 1dac8 <__gethex+0x334>
   1d7ca:	f818 2001 	ldrb.w	r2, [r8, r1]
   1d7ce:	2a00      	cmp	r2, #0
   1d7d0:	f000 80e5 	beq.w	1d99e <__gethex+0x20a>
   1d7d4:	7822      	ldrb	r2, [r4, #0]
   1d7d6:	2700      	movs	r7, #0
   1d7d8:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d7dc:	463d      	mov	r5, r7
   1d7de:	4626      	mov	r6, r4
   1d7e0:	b12a      	cbz	r2, 1d7ee <__gethex+0x5a>
   1d7e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   1d7e6:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d7ea:	2a00      	cmp	r2, #0
   1d7ec:	d1f9      	bne.n	1d7e2 <__gethex+0x4e>
   1d7ee:	49b5      	ldr	r1, [pc, #724]	; (1dac4 <__gethex+0x330>)
   1d7f0:	9301      	str	r3, [sp, #4]
   1d7f2:	2201      	movs	r2, #1
   1d7f4:	4630      	mov	r0, r6
   1d7f6:	f7fe fa95 	bl	1bd24 <strncmp>
   1d7fa:	9b01      	ldr	r3, [sp, #4]
   1d7fc:	4681      	mov	r9, r0
   1d7fe:	2800      	cmp	r0, #0
   1d800:	d04d      	beq.n	1d89e <__gethex+0x10a>
   1d802:	2d00      	cmp	r5, #0
   1d804:	d14e      	bne.n	1d8a4 <__gethex+0x110>
   1d806:	7832      	ldrb	r2, [r6, #0]
   1d808:	46a9      	mov	r9, r5
   1d80a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1d80e:	2a50      	cmp	r2, #80	; 0x50
   1d810:	4635      	mov	r5, r6
   1d812:	d050      	beq.n	1d8b6 <__gethex+0x122>
   1d814:	f8cb 6000 	str.w	r6, [fp]
   1d818:	2f00      	cmp	r7, #0
   1d81a:	d169      	bne.n	1d8f0 <__gethex+0x15c>
   1d81c:	1b2b      	subs	r3, r5, r4
   1d81e:	3b01      	subs	r3, #1
   1d820:	2b07      	cmp	r3, #7
   1d822:	4639      	mov	r1, r7
   1d824:	dd04      	ble.n	1d830 <__gethex+0x9c>
   1d826:	105b      	asrs	r3, r3, #1
   1d828:	2b07      	cmp	r3, #7
   1d82a:	f101 0101 	add.w	r1, r1, #1
   1d82e:	dcfa      	bgt.n	1d826 <__gethex+0x92>
   1d830:	ee18 0a10 	vmov	r0, s16
   1d834:	f000 fe08 	bl	1e448 <_Balloc>
   1d838:	4683      	mov	fp, r0
   1d83a:	2800      	cmp	r0, #0
   1d83c:	f000 8266 	beq.w	1dd0c <__gethex+0x578>
   1d840:	f100 0614 	add.w	r6, r0, #20
   1d844:	42ac      	cmp	r4, r5
   1d846:	9601      	str	r6, [sp, #4]
   1d848:	f080 81d2 	bcs.w	1dbf0 <__gethex+0x45c>
   1d84c:	2700      	movs	r7, #0
   1d84e:	f8cd 900c 	str.w	r9, [sp, #12]
   1d852:	499c      	ldr	r1, [pc, #624]	; (1dac4 <__gethex+0x330>)
   1d854:	46a1      	mov	r9, r4
   1d856:	463c      	mov	r4, r7
   1d858:	e00c      	b.n	1d874 <__gethex+0xe0>
   1d85a:	2f20      	cmp	r7, #32
   1d85c:	d019      	beq.n	1d892 <__gethex+0xfe>
   1d85e:	4638      	mov	r0, r7
   1d860:	3704      	adds	r7, #4
   1d862:	782a      	ldrb	r2, [r5, #0]
   1d864:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d868:	f002 020f 	and.w	r2, r2, #15
   1d86c:	4082      	lsls	r2, r0
   1d86e:	4314      	orrs	r4, r2
   1d870:	454d      	cmp	r5, r9
   1d872:	d047      	beq.n	1d904 <__gethex+0x170>
   1d874:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   1d878:	2a2e      	cmp	r2, #46	; 0x2e
   1d87a:	d1ee      	bne.n	1d85a <__gethex+0xc6>
   1d87c:	454d      	cmp	r5, r9
   1d87e:	d3ec      	bcc.n	1d85a <__gethex+0xc6>
   1d880:	2201      	movs	r2, #1
   1d882:	4628      	mov	r0, r5
   1d884:	f7fe fa4e 	bl	1bd24 <strncmp>
   1d888:	498e      	ldr	r1, [pc, #568]	; (1dac4 <__gethex+0x330>)
   1d88a:	2800      	cmp	r0, #0
   1d88c:	d0f0      	beq.n	1d870 <__gethex+0xdc>
   1d88e:	2f20      	cmp	r7, #32
   1d890:	d1e5      	bne.n	1d85e <__gethex+0xca>
   1d892:	2000      	movs	r0, #0
   1d894:	f846 4b04 	str.w	r4, [r6], #4
   1d898:	2704      	movs	r7, #4
   1d89a:	4604      	mov	r4, r0
   1d89c:	e7e1      	b.n	1d862 <__gethex+0xce>
   1d89e:	2d00      	cmp	r5, #0
   1d8a0:	f000 8142 	beq.w	1db28 <__gethex+0x394>
   1d8a4:	7832      	ldrb	r2, [r6, #0]
   1d8a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1d8aa:	1bad      	subs	r5, r5, r6
   1d8ac:	2a50      	cmp	r2, #80	; 0x50
   1d8ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1d8b2:	4635      	mov	r5, r6
   1d8b4:	d1ae      	bne.n	1d814 <__gethex+0x80>
   1d8b6:	786a      	ldrb	r2, [r5, #1]
   1d8b8:	2a2b      	cmp	r2, #43	; 0x2b
   1d8ba:	f000 8125 	beq.w	1db08 <__gethex+0x374>
   1d8be:	2a2d      	cmp	r2, #45	; 0x2d
   1d8c0:	f000 80a5 	beq.w	1da0e <__gethex+0x27a>
   1d8c4:	1c6e      	adds	r6, r5, #1
   1d8c6:	2000      	movs	r0, #0
   1d8c8:	f818 1002 	ldrb.w	r1, [r8, r2]
   1d8cc:	1e4a      	subs	r2, r1, #1
   1d8ce:	2a18      	cmp	r2, #24
   1d8d0:	f200 809b 	bhi.w	1da0a <__gethex+0x276>
   1d8d4:	7872      	ldrb	r2, [r6, #1]
   1d8d6:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d8da:	3910      	subs	r1, #16
   1d8dc:	3601      	adds	r6, #1
   1d8de:	2a00      	cmp	r2, #0
   1d8e0:	d15a      	bne.n	1d998 <__gethex+0x204>
   1d8e2:	b100      	cbz	r0, 1d8e6 <__gethex+0x152>
   1d8e4:	4249      	negs	r1, r1
   1d8e6:	4489      	add	r9, r1
   1d8e8:	f8cb 6000 	str.w	r6, [fp]
   1d8ec:	2f00      	cmp	r7, #0
   1d8ee:	d095      	beq.n	1d81c <__gethex+0x88>
   1d8f0:	2b00      	cmp	r3, #0
   1d8f2:	bf14      	ite	ne
   1d8f4:	2500      	movne	r5, #0
   1d8f6:	2506      	moveq	r5, #6
   1d8f8:	4628      	mov	r0, r5
   1d8fa:	b005      	add	sp, #20
   1d8fc:	ecbd 8b02 	vpop	{d8}
   1d900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d904:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1d908:	4623      	mov	r3, r4
   1d90a:	f846 3b04 	str.w	r3, [r6], #4
   1d90e:	4618      	mov	r0, r3
   1d910:	9b01      	ldr	r3, [sp, #4]
   1d912:	1af6      	subs	r6, r6, r3
   1d914:	10b6      	asrs	r6, r6, #2
   1d916:	f8cb 6010 	str.w	r6, [fp, #16]
   1d91a:	f000 fe6f 	bl	1e5fc <__hi0bits>
   1d91e:	0176      	lsls	r6, r6, #5
   1d920:	f8da 4000 	ldr.w	r4, [sl]
   1d924:	1a30      	subs	r0, r6, r0
   1d926:	42a0      	cmp	r0, r4
   1d928:	dc75      	bgt.n	1da16 <__gethex+0x282>
   1d92a:	f2c0 80ef 	blt.w	1db0c <__gethex+0x378>
   1d92e:	2700      	movs	r7, #0
   1d930:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d934:	454b      	cmp	r3, r9
   1d936:	f2c0 8151 	blt.w	1dbdc <__gethex+0x448>
   1d93a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d93e:	454b      	cmp	r3, r9
   1d940:	dd4a      	ble.n	1d9d8 <__gethex+0x244>
   1d942:	eba3 0909 	sub.w	r9, r3, r9
   1d946:	454c      	cmp	r4, r9
   1d948:	f300 8082 	bgt.w	1da50 <__gethex+0x2bc>
   1d94c:	f8da 200c 	ldr.w	r2, [sl, #12]
   1d950:	2a02      	cmp	r2, #2
   1d952:	f000 8165 	beq.w	1dc20 <__gethex+0x48c>
   1d956:	2a03      	cmp	r2, #3
   1d958:	f000 8181 	beq.w	1dc5e <__gethex+0x4ca>
   1d95c:	2a01      	cmp	r2, #1
   1d95e:	f000 816f 	beq.w	1dc40 <__gethex+0x4ac>
   1d962:	ee18 0a10 	vmov	r0, s16
   1d966:	4659      	mov	r1, fp
   1d968:	f000 fd94 	bl	1e494 <_Bfree>
   1d96c:	2550      	movs	r5, #80	; 0x50
   1d96e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d970:	2300      	movs	r3, #0
   1d972:	4628      	mov	r0, r5
   1d974:	6013      	str	r3, [r2, #0]
   1d976:	b005      	add	sp, #20
   1d978:	ecbd 8b02 	vpop	{d8}
   1d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d980:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1d984:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1d988:	f1a2 0110 	sub.w	r1, r2, #16
   1d98c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   1d990:	f818 2002 	ldrb.w	r2, [r8, r2]
   1d994:	2a00      	cmp	r2, #0
   1d996:	d0a4      	beq.n	1d8e2 <__gethex+0x14e>
   1d998:	2a19      	cmp	r2, #25
   1d99a:	ddf1      	ble.n	1d980 <__gethex+0x1ec>
   1d99c:	e7a1      	b.n	1d8e2 <__gethex+0x14e>
   1d99e:	4949      	ldr	r1, [pc, #292]	; (1dac4 <__gethex+0x330>)
   1d9a0:	9301      	str	r3, [sp, #4]
   1d9a2:	2201      	movs	r2, #1
   1d9a4:	4620      	mov	r0, r4
   1d9a6:	f7fe f9bd 	bl	1bd24 <strncmp>
   1d9aa:	9b01      	ldr	r3, [sp, #4]
   1d9ac:	2800      	cmp	r0, #0
   1d9ae:	d16d      	bne.n	1da8c <__gethex+0x2f8>
   1d9b0:	7861      	ldrb	r1, [r4, #1]
   1d9b2:	f818 2001 	ldrb.w	r2, [r8, r1]
   1d9b6:	1c65      	adds	r5, r4, #1
   1d9b8:	2a00      	cmp	r2, #0
   1d9ba:	d069      	beq.n	1da90 <__gethex+0x2fc>
   1d9bc:	2930      	cmp	r1, #48	; 0x30
   1d9be:	462c      	mov	r4, r5
   1d9c0:	d105      	bne.n	1d9ce <__gethex+0x23a>
   1d9c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1d9c6:	2b30      	cmp	r3, #48	; 0x30
   1d9c8:	d0fb      	beq.n	1d9c2 <__gethex+0x22e>
   1d9ca:	f818 2003 	ldrb.w	r2, [r8, r3]
   1d9ce:	fab2 f782 	clz	r7, r2
   1d9d2:	097f      	lsrs	r7, r7, #5
   1d9d4:	2301      	movs	r3, #1
   1d9d6:	e702      	b.n	1d7de <__gethex+0x4a>
   1d9d8:	2501      	movs	r5, #1
   1d9da:	b157      	cbz	r7, 1d9f2 <__gethex+0x25e>
   1d9dc:	f8da 300c 	ldr.w	r3, [sl, #12]
   1d9e0:	2b02      	cmp	r3, #2
   1d9e2:	d05d      	beq.n	1daa0 <__gethex+0x30c>
   1d9e4:	2b03      	cmp	r3, #3
   1d9e6:	d05f      	beq.n	1daa8 <__gethex+0x314>
   1d9e8:	2b01      	cmp	r3, #1
   1d9ea:	f000 8084 	beq.w	1daf6 <__gethex+0x362>
   1d9ee:	f045 0510 	orr.w	r5, r5, #16
   1d9f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d9f4:	f8c3 b000 	str.w	fp, [r3]
   1d9f8:	9b02      	ldr	r3, [sp, #8]
   1d9fa:	4628      	mov	r0, r5
   1d9fc:	f8c3 9000 	str.w	r9, [r3]
   1da00:	b005      	add	sp, #20
   1da02:	ecbd 8b02 	vpop	{d8}
   1da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da0a:	462e      	mov	r6, r5
   1da0c:	e702      	b.n	1d814 <__gethex+0x80>
   1da0e:	2001      	movs	r0, #1
   1da10:	78aa      	ldrb	r2, [r5, #2]
   1da12:	1cae      	adds	r6, r5, #2
   1da14:	e758      	b.n	1d8c8 <__gethex+0x134>
   1da16:	1b06      	subs	r6, r0, r4
   1da18:	4631      	mov	r1, r6
   1da1a:	4658      	mov	r0, fp
   1da1c:	f001 fa30 	bl	1ee80 <__any_on>
   1da20:	4607      	mov	r7, r0
   1da22:	b178      	cbz	r0, 1da44 <__gethex+0x2b0>
   1da24:	1e72      	subs	r2, r6, #1
   1da26:	1153      	asrs	r3, r2, #5
   1da28:	9901      	ldr	r1, [sp, #4]
   1da2a:	2701      	movs	r7, #1
   1da2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   1da30:	f002 031f 	and.w	r3, r2, #31
   1da34:	fa07 f303 	lsl.w	r3, r7, r3
   1da38:	420b      	tst	r3, r1
   1da3a:	d003      	beq.n	1da44 <__gethex+0x2b0>
   1da3c:	42ba      	cmp	r2, r7
   1da3e:	f300 80e2 	bgt.w	1dc06 <__gethex+0x472>
   1da42:	2702      	movs	r7, #2
   1da44:	4631      	mov	r1, r6
   1da46:	4658      	mov	r0, fp
   1da48:	44b1      	add	r9, r6
   1da4a:	f7ff fe51 	bl	1d6f0 <_free_r+0x20c>
   1da4e:	e76f      	b.n	1d930 <__gethex+0x19c>
   1da50:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
   1da54:	2f00      	cmp	r7, #0
   1da56:	f040 80ce 	bne.w	1dbf6 <__gethex+0x462>
   1da5a:	2d00      	cmp	r5, #0
   1da5c:	f040 80cd 	bne.w	1dbfa <__gethex+0x466>
   1da60:	116b      	asrs	r3, r5, #5
   1da62:	9a01      	ldr	r2, [sp, #4]
   1da64:	f005 051f 	and.w	r5, r5, #31
   1da68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1da6c:	2301      	movs	r3, #1
   1da6e:	40ab      	lsls	r3, r5
   1da70:	4213      	tst	r3, r2
   1da72:	4649      	mov	r1, r9
   1da74:	4658      	mov	r0, fp
   1da76:	bf18      	it	ne
   1da78:	f047 0702 	orrne.w	r7, r7, #2
   1da7c:	eba4 0409 	sub.w	r4, r4, r9
   1da80:	f7ff fe36 	bl	1d6f0 <_free_r+0x20c>
   1da84:	2502      	movs	r5, #2
   1da86:	f8da 9004 	ldr.w	r9, [sl, #4]
   1da8a:	e7a6      	b.n	1d9da <__gethex+0x246>
   1da8c:	7821      	ldrb	r1, [r4, #0]
   1da8e:	4625      	mov	r5, r4
   1da90:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   1da94:	2950      	cmp	r1, #80	; 0x50
   1da96:	f000 80bf 	beq.w	1dc18 <__gethex+0x484>
   1da9a:	f8cb 5000 	str.w	r5, [fp]
   1da9e:	e727      	b.n	1d8f0 <__gethex+0x15c>
   1daa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1daa2:	f1c3 0301 	rsb	r3, r3, #1
   1daa6:	9311      	str	r3, [sp, #68]	; 0x44
   1daa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1daaa:	2b00      	cmp	r3, #0
   1daac:	d09f      	beq.n	1d9ee <__gethex+0x25a>
   1daae:	f8db 7010 	ldr.w	r7, [fp, #16]
   1dab2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1dab6:	00ba      	lsls	r2, r7, #2
   1dab8:	4643      	mov	r3, r8
   1daba:	9201      	str	r2, [sp, #4]
   1dabc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   1dac0:	2100      	movs	r1, #0
   1dac2:	e007      	b.n	1dad4 <__gethex+0x340>
   1dac4:	20008af4 	.word	0x20008af4
   1dac8:	2000245c 	.word	0x2000245c
   1dacc:	4298      	cmp	r0, r3
   1dace:	f843 1c04 	str.w	r1, [r3, #-4]
   1dad2:	d93f      	bls.n	1db54 <__gethex+0x3c0>
   1dad4:	461e      	mov	r6, r3
   1dad6:	f853 2b04 	ldr.w	r2, [r3], #4
   1dada:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1dade:	d0f5      	beq.n	1dacc <__gethex+0x338>
   1dae0:	3201      	adds	r2, #1
   1dae2:	2d02      	cmp	r5, #2
   1dae4:	6032      	str	r2, [r6, #0]
   1dae6:	f000 80bf 	beq.w	1dc68 <__gethex+0x4d4>
   1daea:	f014 041f 	ands.w	r4, r4, #31
   1daee:	f040 80e7 	bne.w	1dcc0 <__gethex+0x52c>
   1daf2:	2521      	movs	r5, #33	; 0x21
   1daf4:	e77d      	b.n	1d9f2 <__gethex+0x25e>
   1daf6:	07ba      	lsls	r2, r7, #30
   1daf8:	f57f af79 	bpl.w	1d9ee <__gethex+0x25a>
   1dafc:	9b01      	ldr	r3, [sp, #4]
   1dafe:	681b      	ldr	r3, [r3, #0]
   1db00:	431f      	orrs	r7, r3
   1db02:	07fb      	lsls	r3, r7, #31
   1db04:	d4d3      	bmi.n	1daae <__gethex+0x31a>
   1db06:	e772      	b.n	1d9ee <__gethex+0x25a>
   1db08:	2000      	movs	r0, #0
   1db0a:	e781      	b.n	1da10 <__gethex+0x27c>
   1db0c:	1a22      	subs	r2, r4, r0
   1db0e:	4659      	mov	r1, fp
   1db10:	ee18 0a10 	vmov	r0, s16
   1db14:	eba9 0902 	sub.w	r9, r9, r2
   1db18:	f000 fefc 	bl	1e914 <__lshift>
   1db1c:	f100 0314 	add.w	r3, r0, #20
   1db20:	4683      	mov	fp, r0
   1db22:	9301      	str	r3, [sp, #4]
   1db24:	2700      	movs	r7, #0
   1db26:	e703      	b.n	1d930 <__gethex+0x19c>
   1db28:	7872      	ldrb	r2, [r6, #1]
   1db2a:	f818 0002 	ldrb.w	r0, [r8, r2]
   1db2e:	1c71      	adds	r1, r6, #1
   1db30:	2800      	cmp	r0, #0
   1db32:	f000 80a0 	beq.w	1dc76 <__gethex+0x4e2>
   1db36:	460d      	mov	r5, r1
   1db38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1db3c:	f818 0002 	ldrb.w	r0, [r8, r2]
   1db40:	2800      	cmp	r0, #0
   1db42:	d1f8      	bne.n	1db36 <__gethex+0x3a2>
   1db44:	1b75      	subs	r5, r6, r5
   1db46:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1db4a:	460e      	mov	r6, r1
   1db4c:	e65d      	b.n	1d80a <__gethex+0x76>
   1db4e:	3402      	adds	r4, #2
   1db50:	2300      	movs	r3, #0
   1db52:	e638      	b.n	1d7c6 <__gethex+0x32>
   1db54:	f8db 3008 	ldr.w	r3, [fp, #8]
   1db58:	429f      	cmp	r7, r3
   1db5a:	f280 808e 	bge.w	1dc7a <__gethex+0x4e6>
   1db5e:	463b      	mov	r3, r7
   1db60:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   1db64:	2101      	movs	r1, #1
   1db66:	3301      	adds	r3, #1
   1db68:	2d02      	cmp	r5, #2
   1db6a:	f8cb 3010 	str.w	r3, [fp, #16]
   1db6e:	6151      	str	r1, [r2, #20]
   1db70:	d07a      	beq.n	1dc68 <__gethex+0x4d4>
   1db72:	429f      	cmp	r7, r3
   1db74:	dab9      	bge.n	1daea <__gethex+0x356>
   1db76:	2b00      	cmp	r3, #0
   1db78:	f340 809b 	ble.w	1dcb2 <__gethex+0x51e>
   1db7c:	f8db 2014 	ldr.w	r2, [fp, #20]
   1db80:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1db84:	f10b 0018 	add.w	r0, fp, #24
   1db88:	4283      	cmp	r3, r0
   1db8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1db8e:	f240 80b1 	bls.w	1dcf4 <__gethex+0x560>
   1db92:	4644      	mov	r4, r8
   1db94:	6801      	ldr	r1, [r0, #0]
   1db96:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   1db9a:	f844 2b04 	str.w	r2, [r4], #4
   1db9e:	f850 2b04 	ldr.w	r2, [r0], #4
   1dba2:	4283      	cmp	r3, r0
   1dba4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1dba8:	d8f4      	bhi.n	1db94 <__gethex+0x400>
   1dbaa:	eba3 030b 	sub.w	r3, r3, fp
   1dbae:	3b19      	subs	r3, #25
   1dbb0:	089b      	lsrs	r3, r3, #2
   1dbb2:	3301      	adds	r3, #1
   1dbb4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   1dbb8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1dbbc:	2a00      	cmp	r2, #0
   1dbbe:	f040 809d 	bne.w	1dcfc <__gethex+0x568>
   1dbc2:	eba3 0208 	sub.w	r2, r3, r8
   1dbc6:	1092      	asrs	r2, r2, #2
   1dbc8:	4543      	cmp	r3, r8
   1dbca:	f8cb 2010 	str.w	r2, [fp, #16]
   1dbce:	d073      	beq.n	1dcb8 <__gethex+0x524>
   1dbd0:	f8da 3008 	ldr.w	r3, [sl, #8]
   1dbd4:	f109 0901 	add.w	r9, r9, #1
   1dbd8:	454b      	cmp	r3, r9
   1dbda:	da8a      	bge.n	1daf2 <__gethex+0x35e>
   1dbdc:	ee18 0a10 	vmov	r0, s16
   1dbe0:	4659      	mov	r1, fp
   1dbe2:	f000 fc57 	bl	1e494 <_Bfree>
   1dbe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1dbe8:	2300      	movs	r3, #0
   1dbea:	6013      	str	r3, [r2, #0]
   1dbec:	25a3      	movs	r5, #163	; 0xa3
   1dbee:	e683      	b.n	1d8f8 <__gethex+0x164>
   1dbf0:	9e01      	ldr	r6, [sp, #4]
   1dbf2:	2300      	movs	r3, #0
   1dbf4:	e689      	b.n	1d90a <__gethex+0x176>
   1dbf6:	2701      	movs	r7, #1
   1dbf8:	e732      	b.n	1da60 <__gethex+0x2cc>
   1dbfa:	4629      	mov	r1, r5
   1dbfc:	4658      	mov	r0, fp
   1dbfe:	f001 f93f 	bl	1ee80 <__any_on>
   1dc02:	4607      	mov	r7, r0
   1dc04:	e72c      	b.n	1da60 <__gethex+0x2cc>
   1dc06:	1eb1      	subs	r1, r6, #2
   1dc08:	4658      	mov	r0, fp
   1dc0a:	f001 f939 	bl	1ee80 <__any_on>
   1dc0e:	2800      	cmp	r0, #0
   1dc10:	f43f af17 	beq.w	1da42 <__gethex+0x2ae>
   1dc14:	2703      	movs	r7, #3
   1dc16:	e715      	b.n	1da44 <__gethex+0x2b0>
   1dc18:	f04f 0900 	mov.w	r9, #0
   1dc1c:	2701      	movs	r7, #1
   1dc1e:	e64a      	b.n	1d8b6 <__gethex+0x122>
   1dc20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1dc22:	2a00      	cmp	r2, #0
   1dc24:	f47f ae9d 	bne.w	1d962 <__gethex+0x1ce>
   1dc28:	9902      	ldr	r1, [sp, #8]
   1dc2a:	600b      	str	r3, [r1, #0]
   1dc2c:	9b01      	ldr	r3, [sp, #4]
   1dc2e:	2201      	movs	r2, #1
   1dc30:	f8cb 2010 	str.w	r2, [fp, #16]
   1dc34:	601a      	str	r2, [r3, #0]
   1dc36:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dc38:	2562      	movs	r5, #98	; 0x62
   1dc3a:	f8c3 b000 	str.w	fp, [r3]
   1dc3e:	e65b      	b.n	1d8f8 <__gethex+0x164>
   1dc40:	454c      	cmp	r4, r9
   1dc42:	f47f ae8e 	bne.w	1d962 <__gethex+0x1ce>
   1dc46:	2c01      	cmp	r4, #1
   1dc48:	d0ee      	beq.n	1dc28 <__gethex+0x494>
   1dc4a:	1e61      	subs	r1, r4, #1
   1dc4c:	4658      	mov	r0, fp
   1dc4e:	f001 f917 	bl	1ee80 <__any_on>
   1dc52:	2800      	cmp	r0, #0
   1dc54:	f43f ae85 	beq.w	1d962 <__gethex+0x1ce>
   1dc58:	f8da 3004 	ldr.w	r3, [sl, #4]
   1dc5c:	e7e4      	b.n	1dc28 <__gethex+0x494>
   1dc5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1dc60:	2a00      	cmp	r2, #0
   1dc62:	f43f ae7e 	beq.w	1d962 <__gethex+0x1ce>
   1dc66:	e7df      	b.n	1dc28 <__gethex+0x494>
   1dc68:	f8da 3000 	ldr.w	r3, [sl]
   1dc6c:	3b01      	subs	r3, #1
   1dc6e:	42a3      	cmp	r3, r4
   1dc70:	d034      	beq.n	1dcdc <__gethex+0x548>
   1dc72:	2522      	movs	r5, #34	; 0x22
   1dc74:	e6bd      	b.n	1d9f2 <__gethex+0x25e>
   1dc76:	460e      	mov	r6, r1
   1dc78:	e5c7      	b.n	1d80a <__gethex+0x76>
   1dc7a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1dc7e:	ee18 0a10 	vmov	r0, s16
   1dc82:	3101      	adds	r1, #1
   1dc84:	f000 fbe0 	bl	1e448 <_Balloc>
   1dc88:	4606      	mov	r6, r0
   1dc8a:	b3c8      	cbz	r0, 1dd00 <__gethex+0x56c>
   1dc8c:	f8db 3010 	ldr.w	r3, [fp, #16]
   1dc90:	3302      	adds	r3, #2
   1dc92:	009a      	lsls	r2, r3, #2
   1dc94:	f10b 010c 	add.w	r1, fp, #12
   1dc98:	300c      	adds	r0, #12
   1dc9a:	f7f8 fd03 	bl	166a4 <memcpy>
   1dc9e:	4659      	mov	r1, fp
   1dca0:	ee18 0a10 	vmov	r0, s16
   1dca4:	f000 fbf6 	bl	1e494 <_Bfree>
   1dca8:	f106 0814 	add.w	r8, r6, #20
   1dcac:	6933      	ldr	r3, [r6, #16]
   1dcae:	46b3      	mov	fp, r6
   1dcb0:	e756      	b.n	1db60 <__gethex+0x3cc>
   1dcb2:	2300      	movs	r3, #0
   1dcb4:	f8cb 3010 	str.w	r3, [fp, #16]
   1dcb8:	2300      	movs	r3, #0
   1dcba:	f8cb 3014 	str.w	r3, [fp, #20]
   1dcbe:	e787      	b.n	1dbd0 <__gethex+0x43c>
   1dcc0:	9b01      	ldr	r3, [sp, #4]
   1dcc2:	4443      	add	r3, r8
   1dcc4:	f1c4 0420 	rsb	r4, r4, #32
   1dcc8:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1dccc:	f000 fc96 	bl	1e5fc <__hi0bits>
   1dcd0:	42a0      	cmp	r0, r4
   1dcd2:	f6bf af0e 	bge.w	1daf2 <__gethex+0x35e>
   1dcd6:	f8db 3010 	ldr.w	r3, [fp, #16]
   1dcda:	e74c      	b.n	1db76 <__gethex+0x3e2>
   1dcdc:	1163      	asrs	r3, r4, #5
   1dcde:	f004 041f 	and.w	r4, r4, #31
   1dce2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   1dce6:	2301      	movs	r3, #1
   1dce8:	40a3      	lsls	r3, r4
   1dcea:	4213      	tst	r3, r2
   1dcec:	bf0c      	ite	eq
   1dcee:	2522      	moveq	r5, #34	; 0x22
   1dcf0:	2521      	movne	r5, #33	; 0x21
   1dcf2:	e67e      	b.n	1d9f2 <__gethex+0x25e>
   1dcf4:	f8c8 2000 	str.w	r2, [r8]
   1dcf8:	4643      	mov	r3, r8
   1dcfa:	b16a      	cbz	r2, 1dd18 <__gethex+0x584>
   1dcfc:	3304      	adds	r3, #4
   1dcfe:	e760      	b.n	1dbc2 <__gethex+0x42e>
   1dd00:	4b07      	ldr	r3, [pc, #28]	; (1dd20 <__gethex+0x58c>)
   1dd02:	4808      	ldr	r0, [pc, #32]	; (1dd24 <__gethex+0x590>)
   1dd04:	4632      	mov	r2, r6
   1dd06:	2184      	movs	r1, #132	; 0x84
   1dd08:	f003 f9ce 	bl	210a8 <__assert_func>
   1dd0c:	4b04      	ldr	r3, [pc, #16]	; (1dd20 <__gethex+0x58c>)
   1dd0e:	4805      	ldr	r0, [pc, #20]	; (1dd24 <__gethex+0x590>)
   1dd10:	465a      	mov	r2, fp
   1dd12:	21e4      	movs	r1, #228	; 0xe4
   1dd14:	f003 f9c8 	bl	210a8 <__assert_func>
   1dd18:	f8cb 2010 	str.w	r2, [fp, #16]
   1dd1c:	e7cc      	b.n	1dcb8 <__gethex+0x524>
   1dd1e:	bf00      	nop
   1dd20:	20008c38 	.word	0x20008c38
   1dd24:	20008c4c 	.word	0x20008c4c

0001dd28 <__match>:
   1dd28:	b410      	push	{r4}
   1dd2a:	6804      	ldr	r4, [r0, #0]
   1dd2c:	e009      	b.n	1dd42 <__match+0x1a>
   1dd2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1dd32:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   1dd36:	f1bc 0f19 	cmp.w	ip, #25
   1dd3a:	bf98      	it	ls
   1dd3c:	3320      	addls	r3, #32
   1dd3e:	4293      	cmp	r3, r2
   1dd40:	d109      	bne.n	1dd56 <__match+0x2e>
   1dd42:	f811 2b01 	ldrb.w	r2, [r1], #1
   1dd46:	2a00      	cmp	r2, #0
   1dd48:	d1f1      	bne.n	1dd2e <__match+0x6>
   1dd4a:	3401      	adds	r4, #1
   1dd4c:	6004      	str	r4, [r0, #0]
   1dd4e:	2001      	movs	r0, #1
   1dd50:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dd54:	4770      	bx	lr
   1dd56:	2000      	movs	r0, #0
   1dd58:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dd5c:	4770      	bx	lr
   1dd5e:	bf00      	nop

0001dd60 <__hexnan>:
   1dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd64:	6809      	ldr	r1, [r1, #0]
   1dd66:	b085      	sub	sp, #20
   1dd68:	114b      	asrs	r3, r1, #5
   1dd6a:	f011 011f 	ands.w	r1, r1, #31
   1dd6e:	9002      	str	r0, [sp, #8]
   1dd70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1dd74:	9103      	str	r1, [sp, #12]
   1dd76:	f040 808f 	bne.w	1de98 <__hexnan+0x138>
   1dd7a:	1f1d      	subs	r5, r3, #4
   1dd7c:	9301      	str	r3, [sp, #4]
   1dd7e:	9b02      	ldr	r3, [sp, #8]
   1dd80:	9901      	ldr	r1, [sp, #4]
   1dd82:	681c      	ldr	r4, [r3, #0]
   1dd84:	2300      	movs	r3, #0
   1dd86:	f841 3c04 	str.w	r3, [r1, #-4]
   1dd8a:	7861      	ldrb	r1, [r4, #1]
   1dd8c:	3401      	adds	r4, #1
   1dd8e:	2900      	cmp	r1, #0
   1dd90:	f000 8098 	beq.w	1dec4 <__hexnan+0x164>
   1dd94:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1df0c <__hexnan+0x1ac>
   1dd98:	46a8      	mov	r8, r5
   1dd9a:	46ac      	mov	ip, r5
   1dd9c:	469a      	mov	sl, r3
   1dd9e:	461e      	mov	r6, r3
   1dda0:	e00e      	b.n	1ddc0 <__hexnan+0x60>
   1dda2:	2920      	cmp	r1, #32
   1dda4:	f200 808c 	bhi.w	1dec0 <__hexnan+0x160>
   1dda8:	4556      	cmp	r6, sl
   1ddaa:	dd06      	ble.n	1ddba <__hexnan+0x5a>
   1ddac:	45c4      	cmp	ip, r8
   1ddae:	d201      	bcs.n	1ddb4 <__hexnan+0x54>
   1ddb0:	2b07      	cmp	r3, #7
   1ddb2:	dd5b      	ble.n	1de6c <__hexnan+0x10c>
   1ddb4:	4562      	cmp	r2, ip
   1ddb6:	d351      	bcc.n	1de5c <__hexnan+0xfc>
   1ddb8:	2308      	movs	r3, #8
   1ddba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1ddbe:	b1a1      	cbz	r1, 1ddea <__hexnan+0x8a>
   1ddc0:	f819 0001 	ldrb.w	r0, [r9, r1]
   1ddc4:	2800      	cmp	r0, #0
   1ddc6:	d0ec      	beq.n	1dda2 <__hexnan+0x42>
   1ddc8:	3301      	adds	r3, #1
   1ddca:	2b08      	cmp	r3, #8
   1ddcc:	f106 0601 	add.w	r6, r6, #1
   1ddd0:	dc3a      	bgt.n	1de48 <__hexnan+0xe8>
   1ddd2:	f8dc 1000 	ldr.w	r1, [ip]
   1ddd6:	0109      	lsls	r1, r1, #4
   1ddd8:	f000 000f 	and.w	r0, r0, #15
   1dddc:	4308      	orrs	r0, r1
   1ddde:	f8cc 0000 	str.w	r0, [ip]
   1dde2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1dde6:	2900      	cmp	r1, #0
   1dde8:	d1ea      	bne.n	1ddc0 <__hexnan+0x60>
   1ddea:	2e00      	cmp	r6, #0
   1ddec:	d06a      	beq.n	1dec4 <__hexnan+0x164>
   1ddee:	45c4      	cmp	ip, r8
   1ddf0:	d201      	bcs.n	1ddf6 <__hexnan+0x96>
   1ddf2:	2b07      	cmp	r3, #7
   1ddf4:	dd74      	ble.n	1dee0 <__hexnan+0x180>
   1ddf6:	4562      	cmp	r2, ip
   1ddf8:	d252      	bcs.n	1dea0 <__hexnan+0x140>
   1ddfa:	1f11      	subs	r1, r2, #4
   1ddfc:	4663      	mov	r3, ip
   1ddfe:	f853 0b04 	ldr.w	r0, [r3], #4
   1de02:	f841 0f04 	str.w	r0, [r1, #4]!
   1de06:	42ab      	cmp	r3, r5
   1de08:	d9f9      	bls.n	1ddfe <__hexnan+0x9e>
   1de0a:	eba5 030c 	sub.w	r3, r5, ip
   1de0e:	f023 0303 	bic.w	r3, r3, #3
   1de12:	1c69      	adds	r1, r5, #1
   1de14:	3304      	adds	r3, #4
   1de16:	f10c 0c01 	add.w	ip, ip, #1
   1de1a:	4561      	cmp	r1, ip
   1de1c:	bf38      	it	cc
   1de1e:	2304      	movcc	r3, #4
   1de20:	4413      	add	r3, r2
   1de22:	2100      	movs	r1, #0
   1de24:	f843 1b04 	str.w	r1, [r3], #4
   1de28:	42ab      	cmp	r3, r5
   1de2a:	d9fb      	bls.n	1de24 <__hexnan+0xc4>
   1de2c:	9b01      	ldr	r3, [sp, #4]
   1de2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1de32:	b92b      	cbnz	r3, 1de40 <__hexnan+0xe0>
   1de34:	42aa      	cmp	r2, r5
   1de36:	d049      	beq.n	1decc <__hexnan+0x16c>
   1de38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   1de3c:	2b00      	cmp	r3, #0
   1de3e:	d0f9      	beq.n	1de34 <__hexnan+0xd4>
   1de40:	2005      	movs	r0, #5
   1de42:	b005      	add	sp, #20
   1de44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de48:	4562      	cmp	r2, ip
   1de4a:	d2b6      	bcs.n	1ddba <__hexnan+0x5a>
   1de4c:	2300      	movs	r3, #0
   1de4e:	f84c 3c04 	str.w	r3, [ip, #-4]
   1de52:	4619      	mov	r1, r3
   1de54:	f1ac 0c04 	sub.w	ip, ip, #4
   1de58:	2301      	movs	r3, #1
   1de5a:	e7bd      	b.n	1ddd8 <__hexnan+0x78>
   1de5c:	2300      	movs	r3, #0
   1de5e:	f1ac 0804 	sub.w	r8, ip, #4
   1de62:	f84c 3c04 	str.w	r3, [ip, #-4]
   1de66:	46b2      	mov	sl, r6
   1de68:	46c4      	mov	ip, r8
   1de6a:	e7a6      	b.n	1ddba <__hexnan+0x5a>
   1de6c:	f1c3 0108 	rsb	r1, r3, #8
   1de70:	f8dc 3000 	ldr.w	r3, [ip]
   1de74:	0089      	lsls	r1, r1, #2
   1de76:	f1c1 0e20 	rsb	lr, r1, #32
   1de7a:	4660      	mov	r0, ip
   1de7c:	469b      	mov	fp, r3
   1de7e:	6847      	ldr	r7, [r0, #4]
   1de80:	fa07 f30e 	lsl.w	r3, r7, lr
   1de84:	ea43 030b 	orr.w	r3, r3, fp
   1de88:	fa27 fb01 	lsr.w	fp, r7, r1
   1de8c:	6003      	str	r3, [r0, #0]
   1de8e:	f840 bf04 	str.w	fp, [r0, #4]!
   1de92:	4540      	cmp	r0, r8
   1de94:	d3f3      	bcc.n	1de7e <__hexnan+0x11e>
   1de96:	e78d      	b.n	1ddb4 <__hexnan+0x54>
   1de98:	1d19      	adds	r1, r3, #4
   1de9a:	9101      	str	r1, [sp, #4]
   1de9c:	461d      	mov	r5, r3
   1de9e:	e76e      	b.n	1dd7e <__hexnan+0x1e>
   1dea0:	9b03      	ldr	r3, [sp, #12]
   1dea2:	2b00      	cmp	r3, #0
   1dea4:	d0c2      	beq.n	1de2c <__hexnan+0xcc>
   1dea6:	9b03      	ldr	r3, [sp, #12]
   1dea8:	9801      	ldr	r0, [sp, #4]
   1deaa:	f1c3 0120 	rsb	r1, r3, #32
   1deae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1deb2:	40cb      	lsrs	r3, r1
   1deb4:	f850 1c04 	ldr.w	r1, [r0, #-4]
   1deb8:	400b      	ands	r3, r1
   1deba:	f840 3c04 	str.w	r3, [r0, #-4]
   1debe:	e7b8      	b.n	1de32 <__hexnan+0xd2>
   1dec0:	2929      	cmp	r1, #41	; 0x29
   1dec2:	d009      	beq.n	1ded8 <__hexnan+0x178>
   1dec4:	2004      	movs	r0, #4
   1dec6:	b005      	add	sp, #20
   1dec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1decc:	2301      	movs	r3, #1
   1dece:	2005      	movs	r0, #5
   1ded0:	602b      	str	r3, [r5, #0]
   1ded2:	b005      	add	sp, #20
   1ded4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ded8:	9902      	ldr	r1, [sp, #8]
   1deda:	3401      	adds	r4, #1
   1dedc:	600c      	str	r4, [r1, #0]
   1dede:	e784      	b.n	1ddea <__hexnan+0x8a>
   1dee0:	f8dc 1000 	ldr.w	r1, [ip]
   1dee4:	f1c3 0308 	rsb	r3, r3, #8
   1dee8:	009b      	lsls	r3, r3, #2
   1deea:	f1c3 0720 	rsb	r7, r3, #32
   1deee:	4664      	mov	r4, ip
   1def0:	4608      	mov	r0, r1
   1def2:	6866      	ldr	r6, [r4, #4]
   1def4:	fa06 f107 	lsl.w	r1, r6, r7
   1def8:	4301      	orrs	r1, r0
   1defa:	fa26 f003 	lsr.w	r0, r6, r3
   1defe:	6021      	str	r1, [r4, #0]
   1df00:	f844 0f04 	str.w	r0, [r4, #4]!
   1df04:	4544      	cmp	r4, r8
   1df06:	d3f4      	bcc.n	1def2 <__hexnan+0x192>
   1df08:	e775      	b.n	1ddf6 <__hexnan+0x96>
   1df0a:	bf00      	nop
   1df0c:	2000245c 	.word	0x2000245c

0001df10 <_findenv_r>:
   1df10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1df14:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1df8c <_findenv_r+0x7c>
   1df18:	4606      	mov	r6, r0
   1df1a:	4689      	mov	r9, r1
   1df1c:	4617      	mov	r7, r2
   1df1e:	f003 fff5 	bl	21f0c <__env_lock>
   1df22:	f8d8 5000 	ldr.w	r5, [r8]
   1df26:	b155      	cbz	r5, 1df3e <_findenv_r+0x2e>
   1df28:	f899 3000 	ldrb.w	r3, [r9]
   1df2c:	461c      	mov	r4, r3
   1df2e:	b173      	cbz	r3, 1df4e <_findenv_r+0x3e>
   1df30:	464c      	mov	r4, r9
   1df32:	e002      	b.n	1df3a <_findenv_r+0x2a>
   1df34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1df38:	b13b      	cbz	r3, 1df4a <_findenv_r+0x3a>
   1df3a:	2b3d      	cmp	r3, #61	; 0x3d
   1df3c:	d1fa      	bne.n	1df34 <_findenv_r+0x24>
   1df3e:	4630      	mov	r0, r6
   1df40:	f003 ffea 	bl	21f18 <__env_unlock>
   1df44:	2000      	movs	r0, #0
   1df46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df4a:	eba4 0409 	sub.w	r4, r4, r9
   1df4e:	6828      	ldr	r0, [r5, #0]
   1df50:	2800      	cmp	r0, #0
   1df52:	d0f4      	beq.n	1df3e <_findenv_r+0x2e>
   1df54:	4622      	mov	r2, r4
   1df56:	4649      	mov	r1, r9
   1df58:	f7fd fee4 	bl	1bd24 <strncmp>
   1df5c:	b928      	cbnz	r0, 1df6a <_findenv_r+0x5a>
   1df5e:	682b      	ldr	r3, [r5, #0]
   1df60:	5d1a      	ldrb	r2, [r3, r4]
   1df62:	2a3d      	cmp	r2, #61	; 0x3d
   1df64:	eb03 0a04 	add.w	sl, r3, r4
   1df68:	d004      	beq.n	1df74 <_findenv_r+0x64>
   1df6a:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1df6e:	2800      	cmp	r0, #0
   1df70:	d1f0      	bne.n	1df54 <_findenv_r+0x44>
   1df72:	e7e4      	b.n	1df3e <_findenv_r+0x2e>
   1df74:	f8d8 3000 	ldr.w	r3, [r8]
   1df78:	1aeb      	subs	r3, r5, r3
   1df7a:	109b      	asrs	r3, r3, #2
   1df7c:	4630      	mov	r0, r6
   1df7e:	603b      	str	r3, [r7, #0]
   1df80:	f003 ffca 	bl	21f18 <__env_unlock>
   1df84:	f10a 0001 	add.w	r0, sl, #1
   1df88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df8c:	20009530 	.word	0x20009530

0001df90 <_getenv_r>:
   1df90:	b500      	push	{lr}
   1df92:	b083      	sub	sp, #12
   1df94:	aa01      	add	r2, sp, #4
   1df96:	f7ff ffbb 	bl	1df10 <_findenv_r>
   1df9a:	b003      	add	sp, #12
   1df9c:	f85d fb04 	ldr.w	pc, [sp], #4

0001dfa0 <_mbtowc_r>:
   1dfa0:	b410      	push	{r4}
   1dfa2:	4c03      	ldr	r4, [pc, #12]	; (1dfb0 <_mbtowc_r+0x10>)
   1dfa4:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1dfa8:	46a4      	mov	ip, r4
   1dfaa:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dfae:	4760      	bx	ip
   1dfb0:	200093a0 	.word	0x200093a0

0001dfb4 <__ascii_mbtowc>:
   1dfb4:	b082      	sub	sp, #8
   1dfb6:	b149      	cbz	r1, 1dfcc <__ascii_mbtowc+0x18>
   1dfb8:	b15a      	cbz	r2, 1dfd2 <__ascii_mbtowc+0x1e>
   1dfba:	b16b      	cbz	r3, 1dfd8 <__ascii_mbtowc+0x24>
   1dfbc:	7813      	ldrb	r3, [r2, #0]
   1dfbe:	600b      	str	r3, [r1, #0]
   1dfc0:	7812      	ldrb	r2, [r2, #0]
   1dfc2:	1e10      	subs	r0, r2, #0
   1dfc4:	bf18      	it	ne
   1dfc6:	2001      	movne	r0, #1
   1dfc8:	b002      	add	sp, #8
   1dfca:	4770      	bx	lr
   1dfcc:	a901      	add	r1, sp, #4
   1dfce:	2a00      	cmp	r2, #0
   1dfd0:	d1f3      	bne.n	1dfba <__ascii_mbtowc+0x6>
   1dfd2:	4610      	mov	r0, r2
   1dfd4:	b002      	add	sp, #8
   1dfd6:	4770      	bx	lr
   1dfd8:	f06f 0001 	mvn.w	r0, #1
   1dfdc:	e7f4      	b.n	1dfc8 <__ascii_mbtowc+0x14>
   1dfde:	bf00      	nop

0001dfe0 <__utf8_mbtowc>:
   1dfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfe2:	b083      	sub	sp, #12
   1dfe4:	4686      	mov	lr, r0
   1dfe6:	9d08      	ldr	r5, [sp, #32]
   1dfe8:	2900      	cmp	r1, #0
   1dfea:	d038      	beq.n	1e05e <__utf8_mbtowc+0x7e>
   1dfec:	2a00      	cmp	r2, #0
   1dfee:	d039      	beq.n	1e064 <__utf8_mbtowc+0x84>
   1dff0:	2b00      	cmp	r3, #0
   1dff2:	f000 80c5 	beq.w	1e180 <__utf8_mbtowc+0x1a0>
   1dff6:	682c      	ldr	r4, [r5, #0]
   1dff8:	bb44      	cbnz	r4, 1e04c <__utf8_mbtowc+0x6c>
   1dffa:	7810      	ldrb	r0, [r2, #0]
   1dffc:	f04f 0c01 	mov.w	ip, #1
   1e000:	b348      	cbz	r0, 1e056 <__utf8_mbtowc+0x76>
   1e002:	287f      	cmp	r0, #127	; 0x7f
   1e004:	dd56      	ble.n	1e0b4 <__utf8_mbtowc+0xd4>
   1e006:	f1a0 06c0 	sub.w	r6, r0, #192	; 0xc0
   1e00a:	2e1f      	cmp	r6, #31
   1e00c:	d82d      	bhi.n	1e06a <__utf8_mbtowc+0x8a>
   1e00e:	7128      	strb	r0, [r5, #4]
   1e010:	b924      	cbnz	r4, 1e01c <__utf8_mbtowc+0x3c>
   1e012:	2401      	movs	r4, #1
   1e014:	42a3      	cmp	r3, r4
   1e016:	602c      	str	r4, [r5, #0]
   1e018:	f000 80b2 	beq.w	1e180 <__utf8_mbtowc+0x1a0>
   1e01c:	f812 200c 	ldrb.w	r2, [r2, ip]
   1e020:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   1e024:	2b3f      	cmp	r3, #63	; 0x3f
   1e026:	f10c 0c01 	add.w	ip, ip, #1
   1e02a:	f200 809f 	bhi.w	1e16c <__utf8_mbtowc+0x18c>
   1e02e:	28c1      	cmp	r0, #193	; 0xc1
   1e030:	f340 809c 	ble.w	1e16c <__utf8_mbtowc+0x18c>
   1e034:	0183      	lsls	r3, r0, #6
   1e036:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
   1e03a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1e03e:	4313      	orrs	r3, r2
   1e040:	4660      	mov	r0, ip
   1e042:	2200      	movs	r2, #0
   1e044:	602a      	str	r2, [r5, #0]
   1e046:	600b      	str	r3, [r1, #0]
   1e048:	b003      	add	sp, #12
   1e04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e04c:	7928      	ldrb	r0, [r5, #4]
   1e04e:	f04f 0c00 	mov.w	ip, #0
   1e052:	2800      	cmp	r0, #0
   1e054:	d1d5      	bne.n	1e002 <__utf8_mbtowc+0x22>
   1e056:	6008      	str	r0, [r1, #0]
   1e058:	6028      	str	r0, [r5, #0]
   1e05a:	b003      	add	sp, #12
   1e05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e05e:	a901      	add	r1, sp, #4
   1e060:	2a00      	cmp	r2, #0
   1e062:	d1c5      	bne.n	1dff0 <__utf8_mbtowc+0x10>
   1e064:	4610      	mov	r0, r2
   1e066:	b003      	add	sp, #12
   1e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e06a:	f1a0 06e0 	sub.w	r6, r0, #224	; 0xe0
   1e06e:	2e0f      	cmp	r6, #15
   1e070:	d826      	bhi.n	1e0c0 <__utf8_mbtowc+0xe0>
   1e072:	7128      	strb	r0, [r5, #4]
   1e074:	2c00      	cmp	r4, #0
   1e076:	d063      	beq.n	1e140 <__utf8_mbtowc+0x160>
   1e078:	1c5f      	adds	r7, r3, #1
   1e07a:	bf18      	it	ne
   1e07c:	3301      	addne	r3, #1
   1e07e:	2c01      	cmp	r4, #1
   1e080:	d062      	beq.n	1e148 <__utf8_mbtowc+0x168>
   1e082:	796e      	ldrb	r6, [r5, #5]
   1e084:	28e0      	cmp	r0, #224	; 0xe0
   1e086:	d06f      	beq.n	1e168 <__utf8_mbtowc+0x188>
   1e088:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
   1e08c:	2f3f      	cmp	r7, #63	; 0x3f
   1e08e:	d86d      	bhi.n	1e16c <__utf8_mbtowc+0x18c>
   1e090:	2c01      	cmp	r4, #1
   1e092:	716e      	strb	r6, [r5, #5]
   1e094:	d070      	beq.n	1e178 <__utf8_mbtowc+0x198>
   1e096:	f812 200c 	ldrb.w	r2, [r2, ip]
   1e09a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   1e09e:	2b3f      	cmp	r3, #63	; 0x3f
   1e0a0:	f10c 0c01 	add.w	ip, ip, #1
   1e0a4:	d862      	bhi.n	1e16c <__utf8_mbtowc+0x18c>
   1e0a6:	0303      	lsls	r3, r0, #12
   1e0a8:	01b6      	lsls	r6, r6, #6
   1e0aa:	b29b      	uxth	r3, r3
   1e0ac:	f406 667c 	and.w	r6, r6, #4032	; 0xfc0
   1e0b0:	4333      	orrs	r3, r6
   1e0b2:	e7c2      	b.n	1e03a <__utf8_mbtowc+0x5a>
   1e0b4:	2300      	movs	r3, #0
   1e0b6:	602b      	str	r3, [r5, #0]
   1e0b8:	6008      	str	r0, [r1, #0]
   1e0ba:	2001      	movs	r0, #1
   1e0bc:	b003      	add	sp, #12
   1e0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e0c0:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
   1e0c4:	2e04      	cmp	r6, #4
   1e0c6:	d851      	bhi.n	1e16c <__utf8_mbtowc+0x18c>
   1e0c8:	7128      	strb	r0, [r5, #4]
   1e0ca:	2c00      	cmp	r4, #0
   1e0cc:	d042      	beq.n	1e154 <__utf8_mbtowc+0x174>
   1e0ce:	1c5e      	adds	r6, r3, #1
   1e0d0:	bf18      	it	ne
   1e0d2:	3301      	addne	r3, #1
   1e0d4:	2c01      	cmp	r4, #1
   1e0d6:	d041      	beq.n	1e15c <__utf8_mbtowc+0x17c>
   1e0d8:	796e      	ldrb	r6, [r5, #5]
   1e0da:	28f0      	cmp	r0, #240	; 0xf0
   1e0dc:	d053      	beq.n	1e186 <__utf8_mbtowc+0x1a6>
   1e0de:	28f4      	cmp	r0, #244	; 0xf4
   1e0e0:	d101      	bne.n	1e0e6 <__utf8_mbtowc+0x106>
   1e0e2:	2e8f      	cmp	r6, #143	; 0x8f
   1e0e4:	dc42      	bgt.n	1e16c <__utf8_mbtowc+0x18c>
   1e0e6:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
   1e0ea:	2f3f      	cmp	r7, #63	; 0x3f
   1e0ec:	d83e      	bhi.n	1e16c <__utf8_mbtowc+0x18c>
   1e0ee:	2c01      	cmp	r4, #1
   1e0f0:	716e      	strb	r6, [r5, #5]
   1e0f2:	d04b      	beq.n	1e18c <__utf8_mbtowc+0x1ac>
   1e0f4:	1c5c      	adds	r4, r3, #1
   1e0f6:	682c      	ldr	r4, [r5, #0]
   1e0f8:	bf18      	it	ne
   1e0fa:	3301      	addne	r3, #1
   1e0fc:	2c02      	cmp	r4, #2
   1e0fe:	d049      	beq.n	1e194 <__utf8_mbtowc+0x1b4>
   1e100:	79ac      	ldrb	r4, [r5, #6]
   1e102:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
   1e106:	2b3f      	cmp	r3, #63	; 0x3f
   1e108:	d830      	bhi.n	1e16c <__utf8_mbtowc+0x18c>
   1e10a:	f812 200c 	ldrb.w	r2, [r2, ip]
   1e10e:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   1e112:	2b3f      	cmp	r3, #63	; 0x3f
   1e114:	f10c 0c01 	add.w	ip, ip, #1
   1e118:	d828      	bhi.n	1e16c <__utf8_mbtowc+0x18c>
   1e11a:	0483      	lsls	r3, r0, #18
   1e11c:	0336      	lsls	r6, r6, #12
   1e11e:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
   1e122:	f406 367c 	and.w	r6, r6, #258048	; 0x3f000
   1e126:	01a4      	lsls	r4, r4, #6
   1e128:	4333      	orrs	r3, r6
   1e12a:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
   1e12e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1e132:	4323      	orrs	r3, r4
   1e134:	4313      	orrs	r3, r2
   1e136:	2200      	movs	r2, #0
   1e138:	600b      	str	r3, [r1, #0]
   1e13a:	4660      	mov	r0, ip
   1e13c:	602a      	str	r2, [r5, #0]
   1e13e:	e78c      	b.n	1e05a <__utf8_mbtowc+0x7a>
   1e140:	2401      	movs	r4, #1
   1e142:	42a3      	cmp	r3, r4
   1e144:	602c      	str	r4, [r5, #0]
   1e146:	d01b      	beq.n	1e180 <__utf8_mbtowc+0x1a0>
   1e148:	f812 600c 	ldrb.w	r6, [r2, ip]
   1e14c:	2401      	movs	r4, #1
   1e14e:	f10c 0c01 	add.w	ip, ip, #1
   1e152:	e797      	b.n	1e084 <__utf8_mbtowc+0xa4>
   1e154:	2401      	movs	r4, #1
   1e156:	42a3      	cmp	r3, r4
   1e158:	602c      	str	r4, [r5, #0]
   1e15a:	d011      	beq.n	1e180 <__utf8_mbtowc+0x1a0>
   1e15c:	f812 600c 	ldrb.w	r6, [r2, ip]
   1e160:	2401      	movs	r4, #1
   1e162:	f10c 0c01 	add.w	ip, ip, #1
   1e166:	e7b8      	b.n	1e0da <__utf8_mbtowc+0xfa>
   1e168:	2e9f      	cmp	r6, #159	; 0x9f
   1e16a:	dc8d      	bgt.n	1e088 <__utf8_mbtowc+0xa8>
   1e16c:	238a      	movs	r3, #138	; 0x8a
   1e16e:	f8ce 3000 	str.w	r3, [lr]
   1e172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e176:	e770      	b.n	1e05a <__utf8_mbtowc+0x7a>
   1e178:	2402      	movs	r4, #2
   1e17a:	42a3      	cmp	r3, r4
   1e17c:	602c      	str	r4, [r5, #0]
   1e17e:	d18a      	bne.n	1e096 <__utf8_mbtowc+0xb6>
   1e180:	f06f 0001 	mvn.w	r0, #1
   1e184:	e769      	b.n	1e05a <__utf8_mbtowc+0x7a>
   1e186:	2e8f      	cmp	r6, #143	; 0x8f
   1e188:	dcad      	bgt.n	1e0e6 <__utf8_mbtowc+0x106>
   1e18a:	e7ef      	b.n	1e16c <__utf8_mbtowc+0x18c>
   1e18c:	2402      	movs	r4, #2
   1e18e:	42a3      	cmp	r3, r4
   1e190:	602c      	str	r4, [r5, #0]
   1e192:	d0f5      	beq.n	1e180 <__utf8_mbtowc+0x1a0>
   1e194:	f812 400c 	ldrb.w	r4, [r2, ip]
   1e198:	f1a4 0780 	sub.w	r7, r4, #128	; 0x80
   1e19c:	2f3f      	cmp	r7, #63	; 0x3f
   1e19e:	f10c 0c01 	add.w	ip, ip, #1
   1e1a2:	d8e3      	bhi.n	1e16c <__utf8_mbtowc+0x18c>
   1e1a4:	2703      	movs	r7, #3
   1e1a6:	42bb      	cmp	r3, r7
   1e1a8:	71ac      	strb	r4, [r5, #6]
   1e1aa:	602f      	str	r7, [r5, #0]
   1e1ac:	d1ad      	bne.n	1e10a <__utf8_mbtowc+0x12a>
   1e1ae:	e7e7      	b.n	1e180 <__utf8_mbtowc+0x1a0>

0001e1b0 <__sjis_mbtowc>:
   1e1b0:	b430      	push	{r4, r5}
   1e1b2:	b082      	sub	sp, #8
   1e1b4:	4684      	mov	ip, r0
   1e1b6:	9d04      	ldr	r5, [sp, #16]
   1e1b8:	2900      	cmp	r1, #0
   1e1ba:	d030      	beq.n	1e21e <__sjis_mbtowc+0x6e>
   1e1bc:	2a00      	cmp	r2, #0
   1e1be:	d031      	beq.n	1e224 <__sjis_mbtowc+0x74>
   1e1c0:	2b00      	cmp	r3, #0
   1e1c2:	d039      	beq.n	1e238 <__sjis_mbtowc+0x88>
   1e1c4:	6828      	ldr	r0, [r5, #0]
   1e1c6:	7814      	ldrb	r4, [r2, #0]
   1e1c8:	b148      	cbz	r0, 1e1de <__sjis_mbtowc+0x2e>
   1e1ca:	2801      	cmp	r0, #1
   1e1cc:	d016      	beq.n	1e1fc <__sjis_mbtowc+0x4c>
   1e1ce:	600c      	str	r4, [r1, #0]
   1e1d0:	7810      	ldrb	r0, [r2, #0]
   1e1d2:	3800      	subs	r0, #0
   1e1d4:	bf18      	it	ne
   1e1d6:	2001      	movne	r0, #1
   1e1d8:	b002      	add	sp, #8
   1e1da:	bc30      	pop	{r4, r5}
   1e1dc:	4770      	bx	lr
   1e1de:	f1a4 0081 	sub.w	r0, r4, #129	; 0x81
   1e1e2:	281e      	cmp	r0, #30
   1e1e4:	d903      	bls.n	1e1ee <__sjis_mbtowc+0x3e>
   1e1e6:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
   1e1ea:	280f      	cmp	r0, #15
   1e1ec:	d8ef      	bhi.n	1e1ce <__sjis_mbtowc+0x1e>
   1e1ee:	2001      	movs	r0, #1
   1e1f0:	4283      	cmp	r3, r0
   1e1f2:	712c      	strb	r4, [r5, #4]
   1e1f4:	6028      	str	r0, [r5, #0]
   1e1f6:	d01f      	beq.n	1e238 <__sjis_mbtowc+0x88>
   1e1f8:	7854      	ldrb	r4, [r2, #1]
   1e1fa:	2002      	movs	r0, #2
   1e1fc:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
   1e200:	2b3e      	cmp	r3, #62	; 0x3e
   1e202:	d903      	bls.n	1e20c <__sjis_mbtowc+0x5c>
   1e204:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
   1e208:	2b7c      	cmp	r3, #124	; 0x7c
   1e20a:	d80f      	bhi.n	1e22c <__sjis_mbtowc+0x7c>
   1e20c:	792b      	ldrb	r3, [r5, #4]
   1e20e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   1e212:	2300      	movs	r3, #0
   1e214:	600c      	str	r4, [r1, #0]
   1e216:	602b      	str	r3, [r5, #0]
   1e218:	b002      	add	sp, #8
   1e21a:	bc30      	pop	{r4, r5}
   1e21c:	4770      	bx	lr
   1e21e:	a901      	add	r1, sp, #4
   1e220:	2a00      	cmp	r2, #0
   1e222:	d1cd      	bne.n	1e1c0 <__sjis_mbtowc+0x10>
   1e224:	4610      	mov	r0, r2
   1e226:	b002      	add	sp, #8
   1e228:	bc30      	pop	{r4, r5}
   1e22a:	4770      	bx	lr
   1e22c:	238a      	movs	r3, #138	; 0x8a
   1e22e:	f8cc 3000 	str.w	r3, [ip]
   1e232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e236:	e7cf      	b.n	1e1d8 <__sjis_mbtowc+0x28>
   1e238:	f06f 0001 	mvn.w	r0, #1
   1e23c:	e7cc      	b.n	1e1d8 <__sjis_mbtowc+0x28>
   1e23e:	bf00      	nop

0001e240 <__eucjp_mbtowc>:
   1e240:	b530      	push	{r4, r5, lr}
   1e242:	b083      	sub	sp, #12
   1e244:	4686      	mov	lr, r0
   1e246:	9d06      	ldr	r5, [sp, #24]
   1e248:	2900      	cmp	r1, #0
   1e24a:	d040      	beq.n	1e2ce <__eucjp_mbtowc+0x8e>
   1e24c:	2a00      	cmp	r2, #0
   1e24e:	d041      	beq.n	1e2d4 <__eucjp_mbtowc+0x94>
   1e250:	2b00      	cmp	r3, #0
   1e252:	d04b      	beq.n	1e2ec <__eucjp_mbtowc+0xac>
   1e254:	7814      	ldrb	r4, [r2, #0]
   1e256:	6828      	ldr	r0, [r5, #0]
   1e258:	46a4      	mov	ip, r4
   1e25a:	b150      	cbz	r0, 1e272 <__eucjp_mbtowc+0x32>
   1e25c:	2801      	cmp	r0, #1
   1e25e:	d018      	beq.n	1e292 <__eucjp_mbtowc+0x52>
   1e260:	2802      	cmp	r0, #2
   1e262:	d041      	beq.n	1e2e8 <__eucjp_mbtowc+0xa8>
   1e264:	600c      	str	r4, [r1, #0]
   1e266:	7810      	ldrb	r0, [r2, #0]
   1e268:	3800      	subs	r0, #0
   1e26a:	bf18      	it	ne
   1e26c:	2001      	movne	r0, #1
   1e26e:	b003      	add	sp, #12
   1e270:	bd30      	pop	{r4, r5, pc}
   1e272:	f1a4 008e 	sub.w	r0, r4, #142	; 0x8e
   1e276:	2801      	cmp	r0, #1
   1e278:	d903      	bls.n	1e282 <__eucjp_mbtowc+0x42>
   1e27a:	f1a4 00a1 	sub.w	r0, r4, #161	; 0xa1
   1e27e:	285d      	cmp	r0, #93	; 0x5d
   1e280:	d8f0      	bhi.n	1e264 <__eucjp_mbtowc+0x24>
   1e282:	2001      	movs	r0, #1
   1e284:	4283      	cmp	r3, r0
   1e286:	712c      	strb	r4, [r5, #4]
   1e288:	6028      	str	r0, [r5, #0]
   1e28a:	d02f      	beq.n	1e2ec <__eucjp_mbtowc+0xac>
   1e28c:	f892 c001 	ldrb.w	ip, [r2, #1]
   1e290:	2002      	movs	r0, #2
   1e292:	f1ac 04a1 	sub.w	r4, ip, #161	; 0xa1
   1e296:	2c5d      	cmp	r4, #93	; 0x5d
   1e298:	d82b      	bhi.n	1e2f2 <__eucjp_mbtowc+0xb2>
   1e29a:	792c      	ldrb	r4, [r5, #4]
   1e29c:	2c8f      	cmp	r4, #143	; 0x8f
   1e29e:	d11c      	bne.n	1e2da <__eucjp_mbtowc+0x9a>
   1e2a0:	2402      	movs	r4, #2
   1e2a2:	4298      	cmp	r0, r3
   1e2a4:	f885 c005 	strb.w	ip, [r5, #5]
   1e2a8:	602c      	str	r4, [r5, #0]
   1e2aa:	d21f      	bcs.n	1e2ec <__eucjp_mbtowc+0xac>
   1e2ac:	f812 c000 	ldrb.w	ip, [r2, r0]
   1e2b0:	3001      	adds	r0, #1
   1e2b2:	f1ac 03a1 	sub.w	r3, ip, #161	; 0xa1
   1e2b6:	2b5d      	cmp	r3, #93	; 0x5d
   1e2b8:	d81b      	bhi.n	1e2f2 <__eucjp_mbtowc+0xb2>
   1e2ba:	796b      	ldrb	r3, [r5, #5]
   1e2bc:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1e2c0:	eb0c 2303 	add.w	r3, ip, r3, lsl #8
   1e2c4:	2200      	movs	r2, #0
   1e2c6:	600b      	str	r3, [r1, #0]
   1e2c8:	602a      	str	r2, [r5, #0]
   1e2ca:	b003      	add	sp, #12
   1e2cc:	bd30      	pop	{r4, r5, pc}
   1e2ce:	a901      	add	r1, sp, #4
   1e2d0:	2a00      	cmp	r2, #0
   1e2d2:	d1bd      	bne.n	1e250 <__eucjp_mbtowc+0x10>
   1e2d4:	4610      	mov	r0, r2
   1e2d6:	b003      	add	sp, #12
   1e2d8:	bd30      	pop	{r4, r5, pc}
   1e2da:	eb0c 2404 	add.w	r4, ip, r4, lsl #8
   1e2de:	2200      	movs	r2, #0
   1e2e0:	600c      	str	r4, [r1, #0]
   1e2e2:	602a      	str	r2, [r5, #0]
   1e2e4:	b003      	add	sp, #12
   1e2e6:	bd30      	pop	{r4, r5, pc}
   1e2e8:	2001      	movs	r0, #1
   1e2ea:	e7e2      	b.n	1e2b2 <__eucjp_mbtowc+0x72>
   1e2ec:	f06f 0001 	mvn.w	r0, #1
   1e2f0:	e7bd      	b.n	1e26e <__eucjp_mbtowc+0x2e>
   1e2f2:	238a      	movs	r3, #138	; 0x8a
   1e2f4:	f8ce 3000 	str.w	r3, [lr]
   1e2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2fc:	e7b7      	b.n	1e26e <__eucjp_mbtowc+0x2e>
   1e2fe:	bf00      	nop

0001e300 <__jis_mbtowc>:
   1e300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e304:	b082      	sub	sp, #8
   1e306:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1e308:	b389      	cbz	r1, 1e36e <__jis_mbtowc+0x6e>
   1e30a:	b39a      	cbz	r2, 1e374 <__jis_mbtowc+0x74>
   1e30c:	2b00      	cmp	r3, #0
   1e30e:	f000 8091 	beq.w	1e434 <__jis_mbtowc+0x134>
   1e312:	4696      	mov	lr, r2
   1e314:	46f1      	mov	r9, lr
   1e316:	f81e 6b01 	ldrb.w	r6, [lr], #1
   1e31a:	783c      	ldrb	r4, [r7, #0]
   1e31c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1e444 <__jis_mbtowc+0x144>
   1e320:	2501      	movs	r5, #1
   1e322:	2e00      	cmp	r6, #0
   1e324:	d050      	beq.n	1e3c8 <__jis_mbtowc+0xc8>
   1e326:	f1a6 0c1b 	sub.w	ip, r6, #27
   1e32a:	fa5f fa8c 	uxtb.w	sl, ip
   1e32e:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   1e332:	d824      	bhi.n	1e37e <__jis_mbtowc+0x7e>
   1e334:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
   1e338:	d821      	bhi.n	1e37e <__jis_mbtowc+0x7e>
   1e33a:	e8df f00c 	tbb	[pc, ip]
   1e33e:	2071      	.short	0x2071
   1e340:	20202020 	.word	0x20202020
   1e344:	74202020 	.word	0x74202020
   1e348:	65202020 	.word	0x65202020
   1e34c:	20202020 	.word	0x20202020
   1e350:	20202020 	.word	0x20202020
   1e354:	20202020 	.word	0x20202020
   1e358:	20202020 	.word	0x20202020
   1e35c:	20202020 	.word	0x20202020
   1e360:	68202020 	.word	0x68202020
   1e364:	20206b20 	.word	0x20206b20
   1e368:	20202020 	.word	0x20202020
   1e36c:	6e20      	.short	0x6e20
   1e36e:	a901      	add	r1, sp, #4
   1e370:	2a00      	cmp	r2, #0
   1e372:	d1cb      	bne.n	1e30c <__jis_mbtowc+0xc>
   1e374:	2001      	movs	r0, #1
   1e376:	603a      	str	r2, [r7, #0]
   1e378:	b002      	add	sp, #8
   1e37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e37e:	f1a6 0c21 	sub.w	ip, r6, #33	; 0x21
   1e382:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
   1e386:	bf34      	ite	cc
   1e388:	f04f 0c07 	movcc.w	ip, #7
   1e38c:	f04f 0c08 	movcs.w	ip, #8
   1e390:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1e394:	4444      	add	r4, r8
   1e396:	eb04 0a0c 	add.w	sl, r4, ip
   1e39a:	f814 400c 	ldrb.w	r4, [r4, ip]
   1e39e:	f89a c048 	ldrb.w	ip, [sl, #72]	; 0x48
   1e3a2:	f1bc 0f05 	cmp.w	ip, #5
   1e3a6:	d848      	bhi.n	1e43a <__jis_mbtowc+0x13a>
   1e3a8:	e8df f00c 	tbb	[pc, ip]
   1e3ac:	1113031f 	.word	0x1113031f
   1e3b0:	2704      	.short	0x2704
   1e3b2:	713e      	strb	r6, [r7, #4]
   1e3b4:	42ab      	cmp	r3, r5
   1e3b6:	f105 0601 	add.w	r6, r5, #1
   1e3ba:	d937      	bls.n	1e42c <__jis_mbtowc+0x12c>
   1e3bc:	4635      	mov	r5, r6
   1e3be:	46f1      	mov	r9, lr
   1e3c0:	f81e 6b01 	ldrb.w	r6, [lr], #1
   1e3c4:	2e00      	cmp	r6, #0
   1e3c6:	d1ae      	bne.n	1e326 <__jis_mbtowc+0x26>
   1e3c8:	f04f 0c06 	mov.w	ip, #6
   1e3cc:	e7e0      	b.n	1e390 <__jis_mbtowc+0x90>
   1e3ce:	4672      	mov	r2, lr
   1e3d0:	e7f0      	b.n	1e3b4 <__jis_mbtowc+0xb4>
   1e3d2:	2301      	movs	r3, #1
   1e3d4:	603b      	str	r3, [r7, #0]
   1e3d6:	793a      	ldrb	r2, [r7, #4]
   1e3d8:	f899 3000 	ldrb.w	r3, [r9]
   1e3dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1e3e0:	4628      	mov	r0, r5
   1e3e2:	600b      	str	r3, [r1, #0]
   1e3e4:	b002      	add	sp, #8
   1e3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e3ea:	2300      	movs	r3, #0
   1e3ec:	603b      	str	r3, [r7, #0]
   1e3ee:	7813      	ldrb	r3, [r2, #0]
   1e3f0:	600b      	str	r3, [r1, #0]
   1e3f2:	4628      	mov	r0, r5
   1e3f4:	b002      	add	sp, #8
   1e3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	4618      	mov	r0, r3
   1e3fe:	603b      	str	r3, [r7, #0]
   1e400:	600b      	str	r3, [r1, #0]
   1e402:	b002      	add	sp, #8
   1e404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e408:	f04f 0c02 	mov.w	ip, #2
   1e40c:	e7c0      	b.n	1e390 <__jis_mbtowc+0x90>
   1e40e:	f04f 0c03 	mov.w	ip, #3
   1e412:	e7bd      	b.n	1e390 <__jis_mbtowc+0x90>
   1e414:	f04f 0c04 	mov.w	ip, #4
   1e418:	e7ba      	b.n	1e390 <__jis_mbtowc+0x90>
   1e41a:	f04f 0c05 	mov.w	ip, #5
   1e41e:	e7b7      	b.n	1e390 <__jis_mbtowc+0x90>
   1e420:	f04f 0c00 	mov.w	ip, #0
   1e424:	e7b4      	b.n	1e390 <__jis_mbtowc+0x90>
   1e426:	f04f 0c01 	mov.w	ip, #1
   1e42a:	e7b1      	b.n	1e390 <__jis_mbtowc+0x90>
   1e42c:	603c      	str	r4, [r7, #0]
   1e42e:	f06f 0001 	mvn.w	r0, #1
   1e432:	e7d7      	b.n	1e3e4 <__jis_mbtowc+0xe4>
   1e434:	f06f 0001 	mvn.w	r0, #1
   1e438:	e7d4      	b.n	1e3e4 <__jis_mbtowc+0xe4>
   1e43a:	238a      	movs	r3, #138	; 0x8a
   1e43c:	6003      	str	r3, [r0, #0]
   1e43e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e442:	e7cf      	b.n	1e3e4 <__jis_mbtowc+0xe4>
   1e444:	2000255c 	.word	0x2000255c

0001e448 <_Balloc>:
   1e448:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e44a:	b570      	push	{r4, r5, r6, lr}
   1e44c:	4605      	mov	r5, r0
   1e44e:	460c      	mov	r4, r1
   1e450:	b14b      	cbz	r3, 1e466 <_Balloc+0x1e>
   1e452:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1e456:	b180      	cbz	r0, 1e47a <_Balloc+0x32>
   1e458:	6802      	ldr	r2, [r0, #0]
   1e45a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1e45e:	2300      	movs	r3, #0
   1e460:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1e464:	bd70      	pop	{r4, r5, r6, pc}
   1e466:	2221      	movs	r2, #33	; 0x21
   1e468:	2104      	movs	r1, #4
   1e46a:	f7fb fa23 	bl	198b4 <_calloc_r>
   1e46e:	4603      	mov	r3, r0
   1e470:	6468      	str	r0, [r5, #68]	; 0x44
   1e472:	2800      	cmp	r0, #0
   1e474:	d1ed      	bne.n	1e452 <_Balloc+0xa>
   1e476:	2000      	movs	r0, #0
   1e478:	bd70      	pop	{r4, r5, r6, pc}
   1e47a:	2101      	movs	r1, #1
   1e47c:	fa01 f604 	lsl.w	r6, r1, r4
   1e480:	1d72      	adds	r2, r6, #5
   1e482:	0092      	lsls	r2, r2, #2
   1e484:	4628      	mov	r0, r5
   1e486:	f7fb fa15 	bl	198b4 <_calloc_r>
   1e48a:	2800      	cmp	r0, #0
   1e48c:	d0f3      	beq.n	1e476 <_Balloc+0x2e>
   1e48e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   1e492:	e7e4      	b.n	1e45e <_Balloc+0x16>

0001e494 <_Bfree>:
   1e494:	b131      	cbz	r1, 1e4a4 <_Bfree+0x10>
   1e496:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e498:	684a      	ldr	r2, [r1, #4]
   1e49a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1e49e:	6008      	str	r0, [r1, #0]
   1e4a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1e4a4:	4770      	bx	lr
   1e4a6:	bf00      	nop

0001e4a8 <__multadd>:
   1e4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e4ac:	690e      	ldr	r6, [r1, #16]
   1e4ae:	4680      	mov	r8, r0
   1e4b0:	460f      	mov	r7, r1
   1e4b2:	461d      	mov	r5, r3
   1e4b4:	f101 0e14 	add.w	lr, r1, #20
   1e4b8:	2000      	movs	r0, #0
   1e4ba:	f8de 1000 	ldr.w	r1, [lr]
   1e4be:	b28c      	uxth	r4, r1
   1e4c0:	fb02 5304 	mla	r3, r2, r4, r5
   1e4c4:	0c09      	lsrs	r1, r1, #16
   1e4c6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1e4ca:	fb02 cc01 	mla	ip, r2, r1, ip
   1e4ce:	3001      	adds	r0, #1
   1e4d0:	b29c      	uxth	r4, r3
   1e4d2:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   1e4d6:	4286      	cmp	r6, r0
   1e4d8:	f84e 4b04 	str.w	r4, [lr], #4
   1e4dc:	ea4f 451c 	mov.w	r5, ip, lsr #16
   1e4e0:	dceb      	bgt.n	1e4ba <__multadd+0x12>
   1e4e2:	b13d      	cbz	r5, 1e4f4 <__multadd+0x4c>
   1e4e4:	68bb      	ldr	r3, [r7, #8]
   1e4e6:	42b3      	cmp	r3, r6
   1e4e8:	dd07      	ble.n	1e4fa <__multadd+0x52>
   1e4ea:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1e4ee:	3601      	adds	r6, #1
   1e4f0:	615d      	str	r5, [r3, #20]
   1e4f2:	613e      	str	r6, [r7, #16]
   1e4f4:	4638      	mov	r0, r7
   1e4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e4fa:	6879      	ldr	r1, [r7, #4]
   1e4fc:	4640      	mov	r0, r8
   1e4fe:	3101      	adds	r1, #1
   1e500:	f7ff ffa2 	bl	1e448 <_Balloc>
   1e504:	4604      	mov	r4, r0
   1e506:	b1b0      	cbz	r0, 1e536 <__multadd+0x8e>
   1e508:	693a      	ldr	r2, [r7, #16]
   1e50a:	3202      	adds	r2, #2
   1e50c:	f107 010c 	add.w	r1, r7, #12
   1e510:	0092      	lsls	r2, r2, #2
   1e512:	300c      	adds	r0, #12
   1e514:	f7f8 f8c6 	bl	166a4 <memcpy>
   1e518:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1e51c:	687a      	ldr	r2, [r7, #4]
   1e51e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1e522:	6039      	str	r1, [r7, #0]
   1e524:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1e528:	4627      	mov	r7, r4
   1e52a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1e52e:	3601      	adds	r6, #1
   1e530:	615d      	str	r5, [r3, #20]
   1e532:	613e      	str	r6, [r7, #16]
   1e534:	e7de      	b.n	1e4f4 <__multadd+0x4c>
   1e536:	4b03      	ldr	r3, [pc, #12]	; (1e544 <__multadd+0x9c>)
   1e538:	4803      	ldr	r0, [pc, #12]	; (1e548 <__multadd+0xa0>)
   1e53a:	4622      	mov	r2, r4
   1e53c:	21ba      	movs	r1, #186	; 0xba
   1e53e:	f002 fdb3 	bl	210a8 <__assert_func>
   1e542:	bf00      	nop
   1e544:	20008c38 	.word	0x20008c38
   1e548:	20008ca4 	.word	0x20008ca4

0001e54c <__s2b>:
   1e54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e550:	4617      	mov	r7, r2
   1e552:	4a27      	ldr	r2, [pc, #156]	; (1e5f0 <__s2b+0xa4>)
   1e554:	461e      	mov	r6, r3
   1e556:	3308      	adds	r3, #8
   1e558:	460c      	mov	r4, r1
   1e55a:	2e09      	cmp	r6, #9
   1e55c:	fb82 1203 	smull	r1, r2, r2, r3
   1e560:	ea4f 73e3 	mov.w	r3, r3, asr #31
   1e564:	4605      	mov	r5, r0
   1e566:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1e56a:	dd39      	ble.n	1e5e0 <__s2b+0x94>
   1e56c:	f04f 0c01 	mov.w	ip, #1
   1e570:	2100      	movs	r1, #0
   1e572:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1e576:	4563      	cmp	r3, ip
   1e578:	f101 0101 	add.w	r1, r1, #1
   1e57c:	dcf9      	bgt.n	1e572 <__s2b+0x26>
   1e57e:	4628      	mov	r0, r5
   1e580:	f7ff ff62 	bl	1e448 <_Balloc>
   1e584:	4601      	mov	r1, r0
   1e586:	b368      	cbz	r0, 1e5e4 <__s2b+0x98>
   1e588:	9b08      	ldr	r3, [sp, #32]
   1e58a:	6143      	str	r3, [r0, #20]
   1e58c:	2f09      	cmp	r7, #9
   1e58e:	f04f 0301 	mov.w	r3, #1
   1e592:	6103      	str	r3, [r0, #16]
   1e594:	dc12      	bgt.n	1e5bc <__s2b+0x70>
   1e596:	340a      	adds	r4, #10
   1e598:	2709      	movs	r7, #9
   1e59a:	42be      	cmp	r6, r7
   1e59c:	dd0b      	ble.n	1e5b6 <__s2b+0x6a>
   1e59e:	1bf2      	subs	r2, r6, r7
   1e5a0:	18a6      	adds	r6, r4, r2
   1e5a2:	f814 3b01 	ldrb.w	r3, [r4], #1
   1e5a6:	220a      	movs	r2, #10
   1e5a8:	3b30      	subs	r3, #48	; 0x30
   1e5aa:	4628      	mov	r0, r5
   1e5ac:	f7ff ff7c 	bl	1e4a8 <__multadd>
   1e5b0:	42a6      	cmp	r6, r4
   1e5b2:	4601      	mov	r1, r0
   1e5b4:	d1f5      	bne.n	1e5a2 <__s2b+0x56>
   1e5b6:	4608      	mov	r0, r1
   1e5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e5bc:	f104 0909 	add.w	r9, r4, #9
   1e5c0:	46c8      	mov	r8, r9
   1e5c2:	443c      	add	r4, r7
   1e5c4:	f818 3b01 	ldrb.w	r3, [r8], #1
   1e5c8:	220a      	movs	r2, #10
   1e5ca:	3b30      	subs	r3, #48	; 0x30
   1e5cc:	4628      	mov	r0, r5
   1e5ce:	f7ff ff6b 	bl	1e4a8 <__multadd>
   1e5d2:	45a0      	cmp	r8, r4
   1e5d4:	4601      	mov	r1, r0
   1e5d6:	d1f5      	bne.n	1e5c4 <__s2b+0x78>
   1e5d8:	f1a7 0408 	sub.w	r4, r7, #8
   1e5dc:	444c      	add	r4, r9
   1e5de:	e7dc      	b.n	1e59a <__s2b+0x4e>
   1e5e0:	2100      	movs	r1, #0
   1e5e2:	e7cc      	b.n	1e57e <__s2b+0x32>
   1e5e4:	460a      	mov	r2, r1
   1e5e6:	4b03      	ldr	r3, [pc, #12]	; (1e5f4 <__s2b+0xa8>)
   1e5e8:	4803      	ldr	r0, [pc, #12]	; (1e5f8 <__s2b+0xac>)
   1e5ea:	21d3      	movs	r1, #211	; 0xd3
   1e5ec:	f002 fd5c 	bl	210a8 <__assert_func>
   1e5f0:	38e38e39 	.word	0x38e38e39
   1e5f4:	20008c38 	.word	0x20008c38
   1e5f8:	20008ca4 	.word	0x20008ca4

0001e5fc <__hi0bits>:
   1e5fc:	0c03      	lsrs	r3, r0, #16
   1e5fe:	041b      	lsls	r3, r3, #16
   1e600:	b9d3      	cbnz	r3, 1e638 <__hi0bits+0x3c>
   1e602:	0400      	lsls	r0, r0, #16
   1e604:	2310      	movs	r3, #16
   1e606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   1e60a:	bf04      	itt	eq
   1e60c:	0200      	lsleq	r0, r0, #8
   1e60e:	3308      	addeq	r3, #8
   1e610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   1e614:	bf04      	itt	eq
   1e616:	0100      	lsleq	r0, r0, #4
   1e618:	3304      	addeq	r3, #4
   1e61a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   1e61e:	bf04      	itt	eq
   1e620:	0080      	lsleq	r0, r0, #2
   1e622:	3302      	addeq	r3, #2
   1e624:	2800      	cmp	r0, #0
   1e626:	db05      	blt.n	1e634 <__hi0bits+0x38>
   1e628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   1e62c:	f103 0301 	add.w	r3, r3, #1
   1e630:	bf08      	it	eq
   1e632:	2320      	moveq	r3, #32
   1e634:	4618      	mov	r0, r3
   1e636:	4770      	bx	lr
   1e638:	2300      	movs	r3, #0
   1e63a:	e7e4      	b.n	1e606 <__hi0bits+0xa>

0001e63c <__lo0bits>:
   1e63c:	6803      	ldr	r3, [r0, #0]
   1e63e:	f013 0207 	ands.w	r2, r3, #7
   1e642:	d008      	beq.n	1e656 <__lo0bits+0x1a>
   1e644:	07d9      	lsls	r1, r3, #31
   1e646:	d41f      	bmi.n	1e688 <__lo0bits+0x4c>
   1e648:	079a      	lsls	r2, r3, #30
   1e64a:	d522      	bpl.n	1e692 <__lo0bits+0x56>
   1e64c:	085b      	lsrs	r3, r3, #1
   1e64e:	6003      	str	r3, [r0, #0]
   1e650:	2201      	movs	r2, #1
   1e652:	4610      	mov	r0, r2
   1e654:	4770      	bx	lr
   1e656:	b299      	uxth	r1, r3
   1e658:	b909      	cbnz	r1, 1e65e <__lo0bits+0x22>
   1e65a:	0c1b      	lsrs	r3, r3, #16
   1e65c:	2210      	movs	r2, #16
   1e65e:	b2d9      	uxtb	r1, r3
   1e660:	b909      	cbnz	r1, 1e666 <__lo0bits+0x2a>
   1e662:	3208      	adds	r2, #8
   1e664:	0a1b      	lsrs	r3, r3, #8
   1e666:	0719      	lsls	r1, r3, #28
   1e668:	bf04      	itt	eq
   1e66a:	091b      	lsreq	r3, r3, #4
   1e66c:	3204      	addeq	r2, #4
   1e66e:	0799      	lsls	r1, r3, #30
   1e670:	bf04      	itt	eq
   1e672:	089b      	lsreq	r3, r3, #2
   1e674:	3202      	addeq	r2, #2
   1e676:	07d9      	lsls	r1, r3, #31
   1e678:	d403      	bmi.n	1e682 <__lo0bits+0x46>
   1e67a:	085b      	lsrs	r3, r3, #1
   1e67c:	f102 0201 	add.w	r2, r2, #1
   1e680:	d005      	beq.n	1e68e <__lo0bits+0x52>
   1e682:	6003      	str	r3, [r0, #0]
   1e684:	4610      	mov	r0, r2
   1e686:	4770      	bx	lr
   1e688:	2200      	movs	r2, #0
   1e68a:	4610      	mov	r0, r2
   1e68c:	4770      	bx	lr
   1e68e:	2220      	movs	r2, #32
   1e690:	e7df      	b.n	1e652 <__lo0bits+0x16>
   1e692:	089b      	lsrs	r3, r3, #2
   1e694:	2202      	movs	r2, #2
   1e696:	6003      	str	r3, [r0, #0]
   1e698:	4610      	mov	r0, r2
   1e69a:	4770      	bx	lr

0001e69c <__i2b>:
   1e69c:	b538      	push	{r3, r4, r5, lr}
   1e69e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e6a0:	4604      	mov	r4, r0
   1e6a2:	460d      	mov	r5, r1
   1e6a4:	b14b      	cbz	r3, 1e6ba <__i2b+0x1e>
   1e6a6:	6858      	ldr	r0, [r3, #4]
   1e6a8:	b1b0      	cbz	r0, 1e6d8 <__i2b+0x3c>
   1e6aa:	6802      	ldr	r2, [r0, #0]
   1e6ac:	605a      	str	r2, [r3, #4]
   1e6ae:	2200      	movs	r2, #0
   1e6b0:	2301      	movs	r3, #1
   1e6b2:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1e6b6:	60c2      	str	r2, [r0, #12]
   1e6b8:	bd38      	pop	{r3, r4, r5, pc}
   1e6ba:	2221      	movs	r2, #33	; 0x21
   1e6bc:	2104      	movs	r1, #4
   1e6be:	f7fb f8f9 	bl	198b4 <_calloc_r>
   1e6c2:	4603      	mov	r3, r0
   1e6c4:	6460      	str	r0, [r4, #68]	; 0x44
   1e6c6:	2800      	cmp	r0, #0
   1e6c8:	d1ed      	bne.n	1e6a6 <__i2b+0xa>
   1e6ca:	4b09      	ldr	r3, [pc, #36]	; (1e6f0 <__i2b+0x54>)
   1e6cc:	4809      	ldr	r0, [pc, #36]	; (1e6f4 <__i2b+0x58>)
   1e6ce:	2200      	movs	r2, #0
   1e6d0:	f240 1145 	movw	r1, #325	; 0x145
   1e6d4:	f002 fce8 	bl	210a8 <__assert_func>
   1e6d8:	221c      	movs	r2, #28
   1e6da:	2101      	movs	r1, #1
   1e6dc:	4620      	mov	r0, r4
   1e6de:	f7fb f8e9 	bl	198b4 <_calloc_r>
   1e6e2:	2800      	cmp	r0, #0
   1e6e4:	d0f1      	beq.n	1e6ca <__i2b+0x2e>
   1e6e6:	2201      	movs	r2, #1
   1e6e8:	2302      	movs	r3, #2
   1e6ea:	e9c0 2301 	strd	r2, r3, [r0, #4]
   1e6ee:	e7de      	b.n	1e6ae <__i2b+0x12>
   1e6f0:	20008c38 	.word	0x20008c38
   1e6f4:	20008ca4 	.word	0x20008ca4

0001e6f8 <__multiply>:
   1e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6fc:	690e      	ldr	r6, [r1, #16]
   1e6fe:	6915      	ldr	r5, [r2, #16]
   1e700:	42ae      	cmp	r6, r5
   1e702:	b085      	sub	sp, #20
   1e704:	4688      	mov	r8, r1
   1e706:	4614      	mov	r4, r2
   1e708:	db05      	blt.n	1e716 <__multiply+0x1e>
   1e70a:	462a      	mov	r2, r5
   1e70c:	4623      	mov	r3, r4
   1e70e:	4635      	mov	r5, r6
   1e710:	460c      	mov	r4, r1
   1e712:	4616      	mov	r6, r2
   1e714:	4698      	mov	r8, r3
   1e716:	68a3      	ldr	r3, [r4, #8]
   1e718:	6861      	ldr	r1, [r4, #4]
   1e71a:	19af      	adds	r7, r5, r6
   1e71c:	42bb      	cmp	r3, r7
   1e71e:	bfb8      	it	lt
   1e720:	3101      	addlt	r1, #1
   1e722:	f7ff fe91 	bl	1e448 <_Balloc>
   1e726:	9001      	str	r0, [sp, #4]
   1e728:	2800      	cmp	r0, #0
   1e72a:	f000 8087 	beq.w	1e83c <__multiply+0x144>
   1e72e:	9b01      	ldr	r3, [sp, #4]
   1e730:	f103 0914 	add.w	r9, r3, #20
   1e734:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   1e738:	45d1      	cmp	r9, sl
   1e73a:	d205      	bcs.n	1e748 <__multiply+0x50>
   1e73c:	464b      	mov	r3, r9
   1e73e:	2200      	movs	r2, #0
   1e740:	f843 2b04 	str.w	r2, [r3], #4
   1e744:	459a      	cmp	sl, r3
   1e746:	d8fb      	bhi.n	1e740 <__multiply+0x48>
   1e748:	f108 0814 	add.w	r8, r8, #20
   1e74c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   1e750:	f104 0314 	add.w	r3, r4, #20
   1e754:	45d8      	cmp	r8, fp
   1e756:	461a      	mov	r2, r3
   1e758:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1e75c:	d25f      	bcs.n	1e81e <__multiply+0x126>
   1e75e:	1b2b      	subs	r3, r5, r4
   1e760:	3b15      	subs	r3, #21
   1e762:	f023 0303 	bic.w	r3, r3, #3
   1e766:	3304      	adds	r3, #4
   1e768:	3415      	adds	r4, #21
   1e76a:	42a5      	cmp	r5, r4
   1e76c:	bf38      	it	cc
   1e76e:	2304      	movcc	r3, #4
   1e770:	e9cd a702 	strd	sl, r7, [sp, #8]
   1e774:	46ac      	mov	ip, r5
   1e776:	461f      	mov	r7, r3
   1e778:	4692      	mov	sl, r2
   1e77a:	e005      	b.n	1e788 <__multiply+0x90>
   1e77c:	0c09      	lsrs	r1, r1, #16
   1e77e:	d129      	bne.n	1e7d4 <__multiply+0xdc>
   1e780:	45c3      	cmp	fp, r8
   1e782:	f109 0904 	add.w	r9, r9, #4
   1e786:	d948      	bls.n	1e81a <__multiply+0x122>
   1e788:	f858 1b04 	ldr.w	r1, [r8], #4
   1e78c:	b28d      	uxth	r5, r1
   1e78e:	2d00      	cmp	r5, #0
   1e790:	d0f4      	beq.n	1e77c <__multiply+0x84>
   1e792:	4656      	mov	r6, sl
   1e794:	464c      	mov	r4, r9
   1e796:	2300      	movs	r3, #0
   1e798:	f856 1b04 	ldr.w	r1, [r6], #4
   1e79c:	6822      	ldr	r2, [r4, #0]
   1e79e:	fa1f fe81 	uxth.w	lr, r1
   1e7a2:	b290      	uxth	r0, r2
   1e7a4:	0c09      	lsrs	r1, r1, #16
   1e7a6:	fb05 000e 	mla	r0, r5, lr, r0
   1e7aa:	0c12      	lsrs	r2, r2, #16
   1e7ac:	4403      	add	r3, r0
   1e7ae:	fb05 2201 	mla	r2, r5, r1, r2
   1e7b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1e7b6:	b29b      	uxth	r3, r3
   1e7b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1e7bc:	45b4      	cmp	ip, r6
   1e7be:	f844 3b04 	str.w	r3, [r4], #4
   1e7c2:	ea4f 4312 	mov.w	r3, r2, lsr #16
   1e7c6:	d8e7      	bhi.n	1e798 <__multiply+0xa0>
   1e7c8:	f849 3007 	str.w	r3, [r9, r7]
   1e7cc:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1e7d0:	0c09      	lsrs	r1, r1, #16
   1e7d2:	d0d5      	beq.n	1e780 <__multiply+0x88>
   1e7d4:	f8d9 3000 	ldr.w	r3, [r9]
   1e7d8:	4650      	mov	r0, sl
   1e7da:	461a      	mov	r2, r3
   1e7dc:	464c      	mov	r4, r9
   1e7de:	2600      	movs	r6, #0
   1e7e0:	8805      	ldrh	r5, [r0, #0]
   1e7e2:	0c12      	lsrs	r2, r2, #16
   1e7e4:	fb01 2205 	mla	r2, r1, r5, r2
   1e7e8:	4416      	add	r6, r2
   1e7ea:	b29b      	uxth	r3, r3
   1e7ec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1e7f0:	f844 3b04 	str.w	r3, [r4], #4
   1e7f4:	f850 5b04 	ldr.w	r5, [r0], #4
   1e7f8:	6822      	ldr	r2, [r4, #0]
   1e7fa:	0c2d      	lsrs	r5, r5, #16
   1e7fc:	b293      	uxth	r3, r2
   1e7fe:	fb01 3305 	mla	r3, r1, r5, r3
   1e802:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   1e806:	4584      	cmp	ip, r0
   1e808:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1e80c:	d8e8      	bhi.n	1e7e0 <__multiply+0xe8>
   1e80e:	45c3      	cmp	fp, r8
   1e810:	f849 3007 	str.w	r3, [r9, r7]
   1e814:	f109 0904 	add.w	r9, r9, #4
   1e818:	d8b6      	bhi.n	1e788 <__multiply+0x90>
   1e81a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   1e81e:	2f00      	cmp	r7, #0
   1e820:	dc02      	bgt.n	1e828 <__multiply+0x130>
   1e822:	e005      	b.n	1e830 <__multiply+0x138>
   1e824:	3f01      	subs	r7, #1
   1e826:	d003      	beq.n	1e830 <__multiply+0x138>
   1e828:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   1e82c:	2b00      	cmp	r3, #0
   1e82e:	d0f9      	beq.n	1e824 <__multiply+0x12c>
   1e830:	9b01      	ldr	r3, [sp, #4]
   1e832:	4618      	mov	r0, r3
   1e834:	611f      	str	r7, [r3, #16]
   1e836:	b005      	add	sp, #20
   1e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e83c:	4b03      	ldr	r3, [pc, #12]	; (1e84c <__multiply+0x154>)
   1e83e:	4804      	ldr	r0, [pc, #16]	; (1e850 <__multiply+0x158>)
   1e840:	9a01      	ldr	r2, [sp, #4]
   1e842:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1e846:	f002 fc2f 	bl	210a8 <__assert_func>
   1e84a:	bf00      	nop
   1e84c:	20008c38 	.word	0x20008c38
   1e850:	20008ca4 	.word	0x20008ca4

0001e854 <__pow5mult>:
   1e854:	f012 0303 	ands.w	r3, r2, #3
   1e858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e85c:	4614      	mov	r4, r2
   1e85e:	4606      	mov	r6, r0
   1e860:	d132      	bne.n	1e8c8 <__pow5mult+0x74>
   1e862:	460d      	mov	r5, r1
   1e864:	10a4      	asrs	r4, r4, #2
   1e866:	d020      	beq.n	1e8aa <__pow5mult+0x56>
   1e868:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   1e86c:	f1b8 0f00 	cmp.w	r8, #0
   1e870:	d033      	beq.n	1e8da <__pow5mult+0x86>
   1e872:	07e3      	lsls	r3, r4, #31
   1e874:	f04f 0700 	mov.w	r7, #0
   1e878:	d407      	bmi.n	1e88a <__pow5mult+0x36>
   1e87a:	1064      	asrs	r4, r4, #1
   1e87c:	d015      	beq.n	1e8aa <__pow5mult+0x56>
   1e87e:	f8d8 0000 	ldr.w	r0, [r8]
   1e882:	b1a8      	cbz	r0, 1e8b0 <__pow5mult+0x5c>
   1e884:	4680      	mov	r8, r0
   1e886:	07e3      	lsls	r3, r4, #31
   1e888:	d5f7      	bpl.n	1e87a <__pow5mult+0x26>
   1e88a:	4642      	mov	r2, r8
   1e88c:	4629      	mov	r1, r5
   1e88e:	4630      	mov	r0, r6
   1e890:	f7ff ff32 	bl	1e6f8 <__multiply>
   1e894:	b1b5      	cbz	r5, 1e8c4 <__pow5mult+0x70>
   1e896:	6869      	ldr	r1, [r5, #4]
   1e898:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1e89a:	1064      	asrs	r4, r4, #1
   1e89c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   1e8a0:	602a      	str	r2, [r5, #0]
   1e8a2:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   1e8a6:	4605      	mov	r5, r0
   1e8a8:	d1e9      	bne.n	1e87e <__pow5mult+0x2a>
   1e8aa:	4628      	mov	r0, r5
   1e8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8b0:	4642      	mov	r2, r8
   1e8b2:	4641      	mov	r1, r8
   1e8b4:	4630      	mov	r0, r6
   1e8b6:	f7ff ff1f 	bl	1e6f8 <__multiply>
   1e8ba:	f8c8 0000 	str.w	r0, [r8]
   1e8be:	6007      	str	r7, [r0, #0]
   1e8c0:	4680      	mov	r8, r0
   1e8c2:	e7e0      	b.n	1e886 <__pow5mult+0x32>
   1e8c4:	4605      	mov	r5, r0
   1e8c6:	e7d8      	b.n	1e87a <__pow5mult+0x26>
   1e8c8:	3b01      	subs	r3, #1
   1e8ca:	4a0f      	ldr	r2, [pc, #60]	; (1e908 <__pow5mult+0xb4>)
   1e8cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1e8d0:	2300      	movs	r3, #0
   1e8d2:	f7ff fde9 	bl	1e4a8 <__multadd>
   1e8d6:	4605      	mov	r5, r0
   1e8d8:	e7c4      	b.n	1e864 <__pow5mult+0x10>
   1e8da:	2101      	movs	r1, #1
   1e8dc:	4630      	mov	r0, r6
   1e8de:	f7ff fdb3 	bl	1e448 <_Balloc>
   1e8e2:	4680      	mov	r8, r0
   1e8e4:	b140      	cbz	r0, 1e8f8 <__pow5mult+0xa4>
   1e8e6:	2301      	movs	r3, #1
   1e8e8:	f240 2271 	movw	r2, #625	; 0x271
   1e8ec:	e9c0 3204 	strd	r3, r2, [r0, #16]
   1e8f0:	2300      	movs	r3, #0
   1e8f2:	6430      	str	r0, [r6, #64]	; 0x40
   1e8f4:	6003      	str	r3, [r0, #0]
   1e8f6:	e7bc      	b.n	1e872 <__pow5mult+0x1e>
   1e8f8:	4b04      	ldr	r3, [pc, #16]	; (1e90c <__pow5mult+0xb8>)
   1e8fa:	4805      	ldr	r0, [pc, #20]	; (1e910 <__pow5mult+0xbc>)
   1e8fc:	4642      	mov	r2, r8
   1e8fe:	f240 1145 	movw	r1, #325	; 0x145
   1e902:	f002 fbd1 	bl	210a8 <__assert_func>
   1e906:	bf00      	nop
   1e908:	20001cc8 	.word	0x20001cc8
   1e90c:	20008c38 	.word	0x20008c38
   1e910:	20008ca4 	.word	0x20008ca4

0001e914 <__lshift>:
   1e914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e918:	460d      	mov	r5, r1
   1e91a:	4614      	mov	r4, r2
   1e91c:	692f      	ldr	r7, [r5, #16]
   1e91e:	68ab      	ldr	r3, [r5, #8]
   1e920:	6849      	ldr	r1, [r1, #4]
   1e922:	eb07 1762 	add.w	r7, r7, r2, asr #5
   1e926:	1c7e      	adds	r6, r7, #1
   1e928:	429e      	cmp	r6, r3
   1e92a:	4680      	mov	r8, r0
   1e92c:	ea4f 1962 	mov.w	r9, r2, asr #5
   1e930:	dd04      	ble.n	1e93c <__lshift+0x28>
   1e932:	005b      	lsls	r3, r3, #1
   1e934:	429e      	cmp	r6, r3
   1e936:	f101 0101 	add.w	r1, r1, #1
   1e93a:	dcfa      	bgt.n	1e932 <__lshift+0x1e>
   1e93c:	4640      	mov	r0, r8
   1e93e:	f7ff fd83 	bl	1e448 <_Balloc>
   1e942:	4684      	mov	ip, r0
   1e944:	2800      	cmp	r0, #0
   1e946:	d052      	beq.n	1e9ee <__lshift+0xda>
   1e948:	f1b9 0f00 	cmp.w	r9, #0
   1e94c:	f100 0214 	add.w	r2, r0, #20
   1e950:	dd0e      	ble.n	1e970 <__lshift+0x5c>
   1e952:	f109 0105 	add.w	r1, r9, #5
   1e956:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   1e95a:	4613      	mov	r3, r2
   1e95c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e960:	2000      	movs	r0, #0
   1e962:	f843 0b04 	str.w	r0, [r3], #4
   1e966:	428b      	cmp	r3, r1
   1e968:	d1fb      	bne.n	1e962 <__lshift+0x4e>
   1e96a:	f1ae 0314 	sub.w	r3, lr, #20
   1e96e:	441a      	add	r2, r3
   1e970:	6929      	ldr	r1, [r5, #16]
   1e972:	f105 0314 	add.w	r3, r5, #20
   1e976:	f014 0e1f 	ands.w	lr, r4, #31
   1e97a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1e97e:	d02e      	beq.n	1e9de <__lshift+0xca>
   1e980:	f1ce 0920 	rsb	r9, lr, #32
   1e984:	4610      	mov	r0, r2
   1e986:	f04f 0a00 	mov.w	sl, #0
   1e98a:	681c      	ldr	r4, [r3, #0]
   1e98c:	fa04 f40e 	lsl.w	r4, r4, lr
   1e990:	ea44 040a 	orr.w	r4, r4, sl
   1e994:	f840 4b04 	str.w	r4, [r0], #4
   1e998:	f853 4b04 	ldr.w	r4, [r3], #4
   1e99c:	4299      	cmp	r1, r3
   1e99e:	fa24 fa09 	lsr.w	sl, r4, r9
   1e9a2:	d8f2      	bhi.n	1e98a <__lshift+0x76>
   1e9a4:	1b4b      	subs	r3, r1, r5
   1e9a6:	3b15      	subs	r3, #21
   1e9a8:	f023 0303 	bic.w	r3, r3, #3
   1e9ac:	3304      	adds	r3, #4
   1e9ae:	f105 0015 	add.w	r0, r5, #21
   1e9b2:	4281      	cmp	r1, r0
   1e9b4:	bf38      	it	cc
   1e9b6:	2304      	movcc	r3, #4
   1e9b8:	f1ba 0f00 	cmp.w	sl, #0
   1e9bc:	bf18      	it	ne
   1e9be:	4637      	movne	r7, r6
   1e9c0:	f842 a003 	str.w	sl, [r2, r3]
   1e9c4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1e9c8:	686a      	ldr	r2, [r5, #4]
   1e9ca:	f8cc 7010 	str.w	r7, [ip, #16]
   1e9ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1e9d2:	6029      	str	r1, [r5, #0]
   1e9d4:	4660      	mov	r0, ip
   1e9d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1e9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e9de:	3a04      	subs	r2, #4
   1e9e0:	f853 0b04 	ldr.w	r0, [r3], #4
   1e9e4:	f842 0f04 	str.w	r0, [r2, #4]!
   1e9e8:	4299      	cmp	r1, r3
   1e9ea:	d8f9      	bhi.n	1e9e0 <__lshift+0xcc>
   1e9ec:	e7ea      	b.n	1e9c4 <__lshift+0xb0>
   1e9ee:	4b03      	ldr	r3, [pc, #12]	; (1e9fc <__lshift+0xe8>)
   1e9f0:	4803      	ldr	r0, [pc, #12]	; (1ea00 <__lshift+0xec>)
   1e9f2:	4662      	mov	r2, ip
   1e9f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   1e9f8:	f002 fb56 	bl	210a8 <__assert_func>
   1e9fc:	20008c38 	.word	0x20008c38
   1ea00:	20008ca4 	.word	0x20008ca4

0001ea04 <__mcmp>:
   1ea04:	690b      	ldr	r3, [r1, #16]
   1ea06:	4684      	mov	ip, r0
   1ea08:	6900      	ldr	r0, [r0, #16]
   1ea0a:	1ac0      	subs	r0, r0, r3
   1ea0c:	d116      	bne.n	1ea3c <__mcmp+0x38>
   1ea0e:	f10c 0c14 	add.w	ip, ip, #20
   1ea12:	3114      	adds	r1, #20
   1ea14:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   1ea18:	b410      	push	{r4}
   1ea1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ea1e:	e001      	b.n	1ea24 <__mcmp+0x20>
   1ea20:	4594      	cmp	ip, r2
   1ea22:	d208      	bcs.n	1ea36 <__mcmp+0x32>
   1ea24:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1ea28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1ea2c:	428c      	cmp	r4, r1
   1ea2e:	d0f7      	beq.n	1ea20 <__mcmp+0x1c>
   1ea30:	d205      	bcs.n	1ea3e <__mcmp+0x3a>
   1ea32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea36:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ea3a:	4770      	bx	lr
   1ea3c:	4770      	bx	lr
   1ea3e:	2001      	movs	r0, #1
   1ea40:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ea44:	4770      	bx	lr
   1ea46:	bf00      	nop

0001ea48 <__mdiff>:
   1ea48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea4c:	690f      	ldr	r7, [r1, #16]
   1ea4e:	6913      	ldr	r3, [r2, #16]
   1ea50:	1aff      	subs	r7, r7, r3
   1ea52:	2f00      	cmp	r7, #0
   1ea54:	460e      	mov	r6, r1
   1ea56:	4690      	mov	r8, r2
   1ea58:	d17f      	bne.n	1eb5a <__mdiff+0x112>
   1ea5a:	f101 0514 	add.w	r5, r1, #20
   1ea5e:	3214      	adds	r2, #20
   1ea60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1ea64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1ea68:	e001      	b.n	1ea6e <__mdiff+0x26>
   1ea6a:	429d      	cmp	r5, r3
   1ea6c:	d278      	bcs.n	1eb60 <__mdiff+0x118>
   1ea6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1ea72:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1ea76:	42a1      	cmp	r1, r4
   1ea78:	d0f7      	beq.n	1ea6a <__mdiff+0x22>
   1ea7a:	d369      	bcc.n	1eb50 <__mdiff+0x108>
   1ea7c:	6871      	ldr	r1, [r6, #4]
   1ea7e:	f7ff fce3 	bl	1e448 <_Balloc>
   1ea82:	4681      	mov	r9, r0
   1ea84:	2800      	cmp	r0, #0
   1ea86:	d077      	beq.n	1eb78 <__mdiff+0x130>
   1ea88:	6935      	ldr	r5, [r6, #16]
   1ea8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1ea8e:	60c7      	str	r7, [r0, #12]
   1ea90:	f108 0e14 	add.w	lr, r8, #20
   1ea94:	f106 0014 	add.w	r0, r6, #20
   1ea98:	f109 0a14 	add.w	sl, r9, #20
   1ea9c:	f106 0110 	add.w	r1, r6, #16
   1eaa0:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   1eaa4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   1eaa8:	4656      	mov	r6, sl
   1eaaa:	f04f 0c00 	mov.w	ip, #0
   1eaae:	f85e 4b04 	ldr.w	r4, [lr], #4
   1eab2:	f851 bf04 	ldr.w	fp, [r1, #4]!
   1eab6:	b2a3      	uxth	r3, r4
   1eab8:	fa1c fc8b 	uxtah	ip, ip, fp
   1eabc:	ebac 0303 	sub.w	r3, ip, r3
   1eac0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   1eac4:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   1eac8:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   1eacc:	b29b      	uxth	r3, r3
   1eace:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1ead2:	4572      	cmp	r2, lr
   1ead4:	f846 3b04 	str.w	r3, [r6], #4
   1ead8:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   1eadc:	d8e7      	bhi.n	1eaae <__mdiff+0x66>
   1eade:	eba2 0108 	sub.w	r1, r2, r8
   1eae2:	3915      	subs	r1, #21
   1eae4:	f108 0815 	add.w	r8, r8, #21
   1eae8:	4542      	cmp	r2, r8
   1eaea:	f021 0403 	bic.w	r4, r1, #3
   1eaee:	f104 0404 	add.w	r4, r4, #4
   1eaf2:	bf38      	it	cc
   1eaf4:	2404      	movcc	r4, #4
   1eaf6:	4420      	add	r0, r4
   1eaf8:	f021 0203 	bic.w	r2, r1, #3
   1eafc:	bf38      	it	cc
   1eafe:	2200      	movcc	r2, #0
   1eb00:	4287      	cmp	r7, r0
   1eb02:	4452      	add	r2, sl
   1eb04:	4454      	add	r4, sl
   1eb06:	d918      	bls.n	1eb3a <__mdiff+0xf2>
   1eb08:	4626      	mov	r6, r4
   1eb0a:	4601      	mov	r1, r0
   1eb0c:	f851 3b04 	ldr.w	r3, [r1], #4
   1eb10:	fa1c fc83 	uxtah	ip, ip, r3
   1eb14:	ea4f 422c 	mov.w	r2, ip, asr #16
   1eb18:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1eb1c:	fa1f fc8c 	uxth.w	ip, ip
   1eb20:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   1eb24:	428f      	cmp	r7, r1
   1eb26:	f846 3b04 	str.w	r3, [r6], #4
   1eb2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1eb2e:	d8ed      	bhi.n	1eb0c <__mdiff+0xc4>
   1eb30:	3f01      	subs	r7, #1
   1eb32:	1a3f      	subs	r7, r7, r0
   1eb34:	f027 0703 	bic.w	r7, r7, #3
   1eb38:	19e2      	adds	r2, r4, r7
   1eb3a:	b923      	cbnz	r3, 1eb46 <__mdiff+0xfe>
   1eb3c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1eb40:	3d01      	subs	r5, #1
   1eb42:	2b00      	cmp	r3, #0
   1eb44:	d0fa      	beq.n	1eb3c <__mdiff+0xf4>
   1eb46:	f8c9 5010 	str.w	r5, [r9, #16]
   1eb4a:	4648      	mov	r0, r9
   1eb4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb50:	4633      	mov	r3, r6
   1eb52:	2701      	movs	r7, #1
   1eb54:	4646      	mov	r6, r8
   1eb56:	4698      	mov	r8, r3
   1eb58:	e790      	b.n	1ea7c <__mdiff+0x34>
   1eb5a:	dbf9      	blt.n	1eb50 <__mdiff+0x108>
   1eb5c:	2700      	movs	r7, #0
   1eb5e:	e78d      	b.n	1ea7c <__mdiff+0x34>
   1eb60:	2100      	movs	r1, #0
   1eb62:	f7ff fc71 	bl	1e448 <_Balloc>
   1eb66:	4681      	mov	r9, r0
   1eb68:	b168      	cbz	r0, 1eb86 <__mdiff+0x13e>
   1eb6a:	2201      	movs	r2, #1
   1eb6c:	2300      	movs	r3, #0
   1eb6e:	e9c9 2304 	strd	r2, r3, [r9, #16]
   1eb72:	4648      	mov	r0, r9
   1eb74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb78:	4b06      	ldr	r3, [pc, #24]	; (1eb94 <__mdiff+0x14c>)
   1eb7a:	4807      	ldr	r0, [pc, #28]	; (1eb98 <__mdiff+0x150>)
   1eb7c:	464a      	mov	r2, r9
   1eb7e:	f240 2145 	movw	r1, #581	; 0x245
   1eb82:	f002 fa91 	bl	210a8 <__assert_func>
   1eb86:	4b03      	ldr	r3, [pc, #12]	; (1eb94 <__mdiff+0x14c>)
   1eb88:	4803      	ldr	r0, [pc, #12]	; (1eb98 <__mdiff+0x150>)
   1eb8a:	464a      	mov	r2, r9
   1eb8c:	f240 2137 	movw	r1, #567	; 0x237
   1eb90:	f002 fa8a 	bl	210a8 <__assert_func>
   1eb94:	20008c38 	.word	0x20008c38
   1eb98:	20008ca4 	.word	0x20008ca4

0001eb9c <__ulp>:
   1eb9c:	b082      	sub	sp, #8
   1eb9e:	ed8d 0b00 	vstr	d0, [sp]
   1eba2:	4b16      	ldr	r3, [pc, #88]	; (1ebfc <__ulp+0x60>)
   1eba4:	9a01      	ldr	r2, [sp, #4]
   1eba6:	4013      	ands	r3, r2
   1eba8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   1ebac:	2b00      	cmp	r3, #0
   1ebae:	dd06      	ble.n	1ebbe <__ulp+0x22>
   1ebb0:	2200      	movs	r2, #0
   1ebb2:	4619      	mov	r1, r3
   1ebb4:	4610      	mov	r0, r2
   1ebb6:	ec41 0b10 	vmov	d0, r0, r1
   1ebba:	b002      	add	sp, #8
   1ebbc:	4770      	bx	lr
   1ebbe:	425b      	negs	r3, r3
   1ebc0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   1ebc4:	ea4f 5223 	mov.w	r2, r3, asr #20
   1ebc8:	da09      	bge.n	1ebde <__ulp+0x42>
   1ebca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1ebce:	4113      	asrs	r3, r2
   1ebd0:	2200      	movs	r2, #0
   1ebd2:	4619      	mov	r1, r3
   1ebd4:	4610      	mov	r0, r2
   1ebd6:	ec41 0b10 	vmov	d0, r0, r1
   1ebda:	b002      	add	sp, #8
   1ebdc:	4770      	bx	lr
   1ebde:	f1a2 0314 	sub.w	r3, r2, #20
   1ebe2:	2b1e      	cmp	r3, #30
   1ebe4:	bfda      	itte	le
   1ebe6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1ebea:	40da      	lsrle	r2, r3
   1ebec:	2201      	movgt	r2, #1
   1ebee:	2300      	movs	r3, #0
   1ebf0:	4619      	mov	r1, r3
   1ebf2:	4610      	mov	r0, r2
   1ebf4:	ec41 0b10 	vmov	d0, r0, r1
   1ebf8:	b002      	add	sp, #8
   1ebfa:	4770      	bx	lr
   1ebfc:	7ff00000 	.word	0x7ff00000

0001ec00 <__b2d>:
   1ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec02:	6904      	ldr	r4, [r0, #16]
   1ec04:	f100 0614 	add.w	r6, r0, #20
   1ec08:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   1ec0c:	1f27      	subs	r7, r4, #4
   1ec0e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1ec12:	4628      	mov	r0, r5
   1ec14:	f7ff fcf2 	bl	1e5fc <__hi0bits>
   1ec18:	f1c0 0320 	rsb	r3, r0, #32
   1ec1c:	280a      	cmp	r0, #10
   1ec1e:	600b      	str	r3, [r1, #0]
   1ec20:	dd1b      	ble.n	1ec5a <__b2d+0x5a>
   1ec22:	42be      	cmp	r6, r7
   1ec24:	d20b      	bcs.n	1ec3e <__b2d+0x3e>
   1ec26:	380b      	subs	r0, #11
   1ec28:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1ec2c:	d12e      	bne.n	1ec8c <__b2d+0x8c>
   1ec2e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   1ec32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1ec36:	460a      	mov	r2, r1
   1ec38:	ec43 2b10 	vmov	d0, r2, r3
   1ec3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec3e:	f1b0 010b 	subs.w	r1, r0, #11
   1ec42:	d0f4      	beq.n	1ec2e <__b2d+0x2e>
   1ec44:	fa05 f101 	lsl.w	r1, r5, r1
   1ec48:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1ec4c:	2100      	movs	r1, #0
   1ec4e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1ec52:	460a      	mov	r2, r1
   1ec54:	ec43 2b10 	vmov	d0, r2, r3
   1ec58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec5a:	f1c0 0c0b 	rsb	ip, r0, #11
   1ec5e:	fa25 f10c 	lsr.w	r1, r5, ip
   1ec62:	42be      	cmp	r6, r7
   1ec64:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1ec68:	bf38      	it	cc
   1ec6a:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   1ec6e:	f100 0015 	add.w	r0, r0, #21
   1ec72:	bf34      	ite	cc
   1ec74:	fa21 f10c 	lsrcc.w	r1, r1, ip
   1ec78:	2100      	movcs	r1, #0
   1ec7a:	fa05 f000 	lsl.w	r0, r5, r0
   1ec7e:	4301      	orrs	r1, r0
   1ec80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1ec84:	460a      	mov	r2, r1
   1ec86:	ec43 2b10 	vmov	d0, r2, r3
   1ec8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec8c:	f1c0 0c20 	rsb	ip, r0, #32
   1ec90:	4085      	lsls	r5, r0
   1ec92:	fa21 f30c 	lsr.w	r3, r1, ip
   1ec96:	ea45 0703 	orr.w	r7, r5, r3
   1ec9a:	f1a4 0508 	sub.w	r5, r4, #8
   1ec9e:	42ae      	cmp	r6, r5
   1eca0:	fa01 f100 	lsl.w	r1, r1, r0
   1eca4:	bf3c      	itt	cc
   1eca6:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   1ecaa:	fa20 f00c 	lsrcc.w	r0, r0, ip
   1ecae:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   1ecb2:	bf38      	it	cc
   1ecb4:	4301      	orrcc	r1, r0
   1ecb6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1ecba:	460a      	mov	r2, r1
   1ecbc:	ec43 2b10 	vmov	d0, r2, r3
   1ecc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ecc2:	bf00      	nop

0001ecc4 <__d2b>:
   1ecc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ecc8:	4688      	mov	r8, r1
   1ecca:	b083      	sub	sp, #12
   1eccc:	2101      	movs	r1, #1
   1ecce:	ec57 6b10 	vmov	r6, r7, d0
   1ecd2:	4615      	mov	r5, r2
   1ecd4:	f7ff fbb8 	bl	1e448 <_Balloc>
   1ecd8:	4604      	mov	r4, r0
   1ecda:	2800      	cmp	r0, #0
   1ecdc:	d051      	beq.n	1ed82 <__d2b+0xbe>
   1ecde:	f3c7 590a 	ubfx	r9, r7, #20, #11
   1ece2:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1ece6:	f1b9 0f00 	cmp.w	r9, #0
   1ecea:	d001      	beq.n	1ecf0 <__d2b+0x2c>
   1ecec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ecf0:	2e00      	cmp	r6, #0
   1ecf2:	9301      	str	r3, [sp, #4]
   1ecf4:	d118      	bne.n	1ed28 <__d2b+0x64>
   1ecf6:	a801      	add	r0, sp, #4
   1ecf8:	f7ff fca0 	bl	1e63c <__lo0bits>
   1ecfc:	9a01      	ldr	r2, [sp, #4]
   1ecfe:	6162      	str	r2, [r4, #20]
   1ed00:	2201      	movs	r2, #1
   1ed02:	f100 0320 	add.w	r3, r0, #32
   1ed06:	6122      	str	r2, [r4, #16]
   1ed08:	f1b9 0f00 	cmp.w	r9, #0
   1ed0c:	d025      	beq.n	1ed5a <__d2b+0x96>
   1ed0e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   1ed12:	eb09 0203 	add.w	r2, r9, r3
   1ed16:	4620      	mov	r0, r4
   1ed18:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   1ed1c:	f8c8 2000 	str.w	r2, [r8]
   1ed20:	602b      	str	r3, [r5, #0]
   1ed22:	b003      	add	sp, #12
   1ed24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed28:	4668      	mov	r0, sp
   1ed2a:	9600      	str	r6, [sp, #0]
   1ed2c:	f7ff fc86 	bl	1e63c <__lo0bits>
   1ed30:	4603      	mov	r3, r0
   1ed32:	b310      	cbz	r0, 1ed7a <__d2b+0xb6>
   1ed34:	e9dd 0200 	ldrd	r0, r2, [sp]
   1ed38:	f1c3 0120 	rsb	r1, r3, #32
   1ed3c:	fa02 f101 	lsl.w	r1, r2, r1
   1ed40:	4301      	orrs	r1, r0
   1ed42:	40da      	lsrs	r2, r3
   1ed44:	6161      	str	r1, [r4, #20]
   1ed46:	9201      	str	r2, [sp, #4]
   1ed48:	2a00      	cmp	r2, #0
   1ed4a:	61a2      	str	r2, [r4, #24]
   1ed4c:	bf14      	ite	ne
   1ed4e:	2202      	movne	r2, #2
   1ed50:	2201      	moveq	r2, #1
   1ed52:	6122      	str	r2, [r4, #16]
   1ed54:	f1b9 0f00 	cmp.w	r9, #0
   1ed58:	d1d9      	bne.n	1ed0e <__d2b+0x4a>
   1ed5a:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   1ed5e:	f8c8 3000 	str.w	r3, [r8]
   1ed62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1ed66:	6918      	ldr	r0, [r3, #16]
   1ed68:	f7ff fc48 	bl	1e5fc <__hi0bits>
   1ed6c:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   1ed70:	4620      	mov	r0, r4
   1ed72:	602b      	str	r3, [r5, #0]
   1ed74:	b003      	add	sp, #12
   1ed76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed7a:	9a00      	ldr	r2, [sp, #0]
   1ed7c:	6162      	str	r2, [r4, #20]
   1ed7e:	9a01      	ldr	r2, [sp, #4]
   1ed80:	e7e2      	b.n	1ed48 <__d2b+0x84>
   1ed82:	4b03      	ldr	r3, [pc, #12]	; (1ed90 <__d2b+0xcc>)
   1ed84:	4803      	ldr	r0, [pc, #12]	; (1ed94 <__d2b+0xd0>)
   1ed86:	4622      	mov	r2, r4
   1ed88:	f240 310f 	movw	r1, #783	; 0x30f
   1ed8c:	f002 f98c 	bl	210a8 <__assert_func>
   1ed90:	20008c38 	.word	0x20008c38
   1ed94:	20008ca4 	.word	0x20008ca4

0001ed98 <__ratio>:
   1ed98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed9a:	b083      	sub	sp, #12
   1ed9c:	460e      	mov	r6, r1
   1ed9e:	4669      	mov	r1, sp
   1eda0:	4607      	mov	r7, r0
   1eda2:	f7ff ff2d 	bl	1ec00 <__b2d>
   1eda6:	a901      	add	r1, sp, #4
   1eda8:	4630      	mov	r0, r6
   1edaa:	ec55 4b10 	vmov	r4, r5, d0
   1edae:	eeb0 7b40 	vmov.f64	d7, d0
   1edb2:	f7ff ff25 	bl	1ec00 <__b2d>
   1edb6:	6933      	ldr	r3, [r6, #16]
   1edb8:	693a      	ldr	r2, [r7, #16]
   1edba:	1ad2      	subs	r2, r2, r3
   1edbc:	e9dd 3100 	ldrd	r3, r1, [sp]
   1edc0:	1a5b      	subs	r3, r3, r1
   1edc2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1edc6:	2b00      	cmp	r3, #0
   1edc8:	dd09      	ble.n	1edde <__ratio+0x46>
   1edca:	ee17 2a90 	vmov	r2, s15
   1edce:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   1edd2:	ec45 4b17 	vmov	d7, r4, r5
   1edd6:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1edda:	b003      	add	sp, #12
   1eddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1edde:	ee10 2a90 	vmov	r2, s1
   1ede2:	ec51 0b10 	vmov	r0, r1, d0
   1ede6:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   1edea:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   1edee:	ec41 0b10 	vmov	d0, r0, r1
   1edf2:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1edf6:	b003      	add	sp, #12
   1edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1edfa:	bf00      	nop

0001edfc <_mprec_log10>:
   1edfc:	2817      	cmp	r0, #23
   1edfe:	dd08      	ble.n	1ee12 <_mprec_log10+0x16>
   1ee00:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1ee04:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
   1ee08:	3801      	subs	r0, #1
   1ee0a:	ee20 0b07 	vmul.f64	d0, d0, d7
   1ee0e:	d1fb      	bne.n	1ee08 <_mprec_log10+0xc>
   1ee10:	4770      	bx	lr
   1ee12:	4b03      	ldr	r3, [pc, #12]	; (1ee20 <_mprec_log10+0x24>)
   1ee14:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1ee18:	ed93 0b04 	vldr	d0, [r3, #16]
   1ee1c:	4770      	bx	lr
   1ee1e:	bf00      	nop
   1ee20:	20001cc8 	.word	0x20001cc8

0001ee24 <__copybits>:
   1ee24:	3901      	subs	r1, #1
   1ee26:	1149      	asrs	r1, r1, #5
   1ee28:	f101 0c01 	add.w	ip, r1, #1
   1ee2c:	6911      	ldr	r1, [r2, #16]
   1ee2e:	f102 0314 	add.w	r3, r2, #20
   1ee32:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1ee36:	428b      	cmp	r3, r1
   1ee38:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   1ee3c:	d217      	bcs.n	1ee6e <__copybits+0x4a>
   1ee3e:	b510      	push	{r4, lr}
   1ee40:	f1a0 0e04 	sub.w	lr, r0, #4
   1ee44:	f853 4b04 	ldr.w	r4, [r3], #4
   1ee48:	f84e 4f04 	str.w	r4, [lr, #4]!
   1ee4c:	4299      	cmp	r1, r3
   1ee4e:	d8f9      	bhi.n	1ee44 <__copybits+0x20>
   1ee50:	1a8a      	subs	r2, r1, r2
   1ee52:	f1a2 0315 	sub.w	r3, r2, #21
   1ee56:	f023 0303 	bic.w	r3, r3, #3
   1ee5a:	3304      	adds	r3, #4
   1ee5c:	4418      	add	r0, r3
   1ee5e:	4584      	cmp	ip, r0
   1ee60:	d904      	bls.n	1ee6c <__copybits+0x48>
   1ee62:	2300      	movs	r3, #0
   1ee64:	f840 3b04 	str.w	r3, [r0], #4
   1ee68:	4584      	cmp	ip, r0
   1ee6a:	d8fb      	bhi.n	1ee64 <__copybits+0x40>
   1ee6c:	bd10      	pop	{r4, pc}
   1ee6e:	4584      	cmp	ip, r0
   1ee70:	d905      	bls.n	1ee7e <__copybits+0x5a>
   1ee72:	2300      	movs	r3, #0
   1ee74:	f840 3b04 	str.w	r3, [r0], #4
   1ee78:	4584      	cmp	ip, r0
   1ee7a:	d8fb      	bhi.n	1ee74 <__copybits+0x50>
   1ee7c:	4770      	bx	lr
   1ee7e:	4770      	bx	lr

0001ee80 <__any_on>:
   1ee80:	6903      	ldr	r3, [r0, #16]
   1ee82:	114a      	asrs	r2, r1, #5
   1ee84:	4293      	cmp	r3, r2
   1ee86:	f100 0014 	add.w	r0, r0, #20
   1ee8a:	da09      	bge.n	1eea0 <__any_on+0x20>
   1ee8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ee90:	e002      	b.n	1ee98 <__any_on+0x18>
   1ee92:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1ee96:	b9c2      	cbnz	r2, 1eeca <__any_on+0x4a>
   1ee98:	4283      	cmp	r3, r0
   1ee9a:	d8fa      	bhi.n	1ee92 <__any_on+0x12>
   1ee9c:	2000      	movs	r0, #0
   1ee9e:	4770      	bx	lr
   1eea0:	dd10      	ble.n	1eec4 <__any_on+0x44>
   1eea2:	f011 011f 	ands.w	r1, r1, #31
   1eea6:	d00d      	beq.n	1eec4 <__any_on+0x44>
   1eea8:	b410      	push	{r4}
   1eeaa:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   1eeae:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   1eeb2:	fa24 f201 	lsr.w	r2, r4, r1
   1eeb6:	408a      	lsls	r2, r1
   1eeb8:	4294      	cmp	r4, r2
   1eeba:	d00c      	beq.n	1eed6 <__any_on+0x56>
   1eebc:	2001      	movs	r0, #1
   1eebe:	f85d 4b04 	ldr.w	r4, [sp], #4
   1eec2:	4770      	bx	lr
   1eec4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   1eec8:	e7e6      	b.n	1ee98 <__any_on+0x18>
   1eeca:	2001      	movs	r0, #1
   1eecc:	4770      	bx	lr
   1eece:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1eed2:	2a00      	cmp	r2, #0
   1eed4:	d1f2      	bne.n	1eebc <__any_on+0x3c>
   1eed6:	4283      	cmp	r3, r0
   1eed8:	d8f9      	bhi.n	1eece <__any_on+0x4e>
   1eeda:	2000      	movs	r0, #0
   1eedc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1eee0:	4770      	bx	lr
   1eee2:	bf00      	nop

0001eee4 <_wctomb_r>:
   1eee4:	b410      	push	{r4}
   1eee6:	4c03      	ldr	r4, [pc, #12]	; (1eef4 <_wctomb_r+0x10>)
   1eee8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   1eeec:	46a4      	mov	ip, r4
   1eeee:	f85d 4b04 	ldr.w	r4, [sp], #4
   1eef2:	4760      	bx	ip
   1eef4:	200093a0 	.word	0x200093a0

0001eef8 <__ascii_wctomb>:
   1eef8:	b149      	cbz	r1, 1ef0e <__ascii_wctomb+0x16>
   1eefa:	2aff      	cmp	r2, #255	; 0xff
   1eefc:	d802      	bhi.n	1ef04 <__ascii_wctomb+0xc>
   1eefe:	700a      	strb	r2, [r1, #0]
   1ef00:	2001      	movs	r0, #1
   1ef02:	4770      	bx	lr
   1ef04:	238a      	movs	r3, #138	; 0x8a
   1ef06:	6003      	str	r3, [r0, #0]
   1ef08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ef0c:	4770      	bx	lr
   1ef0e:	4608      	mov	r0, r1
   1ef10:	4770      	bx	lr
   1ef12:	bf00      	nop

0001ef14 <__utf8_wctomb>:
   1ef14:	4603      	mov	r3, r0
   1ef16:	b3a9      	cbz	r1, 1ef84 <__utf8_wctomb+0x70>
   1ef18:	2a7f      	cmp	r2, #127	; 0x7f
   1ef1a:	d925      	bls.n	1ef68 <__utf8_wctomb+0x54>
   1ef1c:	f1a2 0080 	sub.w	r0, r2, #128	; 0x80
   1ef20:	f5b0 6ff0 	cmp.w	r0, #1920	; 0x780
   1ef24:	d323      	bcc.n	1ef6e <__utf8_wctomb+0x5a>
   1ef26:	f5a2 6000 	sub.w	r0, r2, #2048	; 0x800
   1ef2a:	f5b0 4f78 	cmp.w	r0, #63488	; 0xf800
   1ef2e:	d32b      	bcc.n	1ef88 <__utf8_wctomb+0x74>
   1ef30:	f5a2 3080 	sub.w	r0, r2, #65536	; 0x10000
   1ef34:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1ef38:	d236      	bcs.n	1efa8 <__utf8_wctomb+0x94>
   1ef3a:	ea4f 4c92 	mov.w	ip, r2, lsr #18
   1ef3e:	f3c2 3005 	ubfx	r0, r2, #12, #6
   1ef42:	f3c2 1385 	ubfx	r3, r2, #6, #6
   1ef46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1ef4a:	f06c 0c0f 	orn	ip, ip, #15
   1ef4e:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1ef52:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ef56:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ef5a:	7048      	strb	r0, [r1, #1]
   1ef5c:	f881 c000 	strb.w	ip, [r1]
   1ef60:	708b      	strb	r3, [r1, #2]
   1ef62:	70ca      	strb	r2, [r1, #3]
   1ef64:	2004      	movs	r0, #4
   1ef66:	4770      	bx	lr
   1ef68:	700a      	strb	r2, [r1, #0]
   1ef6a:	2001      	movs	r0, #1
   1ef6c:	4770      	bx	lr
   1ef6e:	0993      	lsrs	r3, r2, #6
   1ef70:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1ef74:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ef78:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ef7c:	700b      	strb	r3, [r1, #0]
   1ef7e:	704a      	strb	r2, [r1, #1]
   1ef80:	2002      	movs	r0, #2
   1ef82:	4770      	bx	lr
   1ef84:	4608      	mov	r0, r1
   1ef86:	4770      	bx	lr
   1ef88:	0b10      	lsrs	r0, r2, #12
   1ef8a:	f3c2 1385 	ubfx	r3, r2, #6, #6
   1ef8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1ef92:	f060 001f 	orn	r0, r0, #31
   1ef96:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ef9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ef9e:	7008      	strb	r0, [r1, #0]
   1efa0:	704b      	strb	r3, [r1, #1]
   1efa2:	708a      	strb	r2, [r1, #2]
   1efa4:	2003      	movs	r0, #3
   1efa6:	4770      	bx	lr
   1efa8:	228a      	movs	r2, #138	; 0x8a
   1efaa:	601a      	str	r2, [r3, #0]
   1efac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1efb0:	4770      	bx	lr
   1efb2:	bf00      	nop

0001efb4 <__sjis_wctomb>:
   1efb4:	b2d3      	uxtb	r3, r2
   1efb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1efba:	b1f9      	cbz	r1, 1effc <__sjis_wctomb+0x48>
   1efbc:	b1da      	cbz	r2, 1eff6 <__sjis_wctomb+0x42>
   1efbe:	f102 0c7f 	add.w	ip, r2, #127	; 0x7f
   1efc2:	fa5f fc8c 	uxtb.w	ip, ip
   1efc6:	f1bc 0f1e 	cmp.w	ip, #30
   1efca:	d906      	bls.n	1efda <__sjis_wctomb+0x26>
   1efcc:	f102 0c20 	add.w	ip, r2, #32
   1efd0:	fa5f fc8c 	uxtb.w	ip, ip
   1efd4:	f1bc 0f0f 	cmp.w	ip, #15
   1efd8:	d812      	bhi.n	1f000 <__sjis_wctomb+0x4c>
   1efda:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1efde:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
   1efe2:	d904      	bls.n	1efee <__sjis_wctomb+0x3a>
   1efe4:	f083 0c80 	eor.w	ip, r3, #128	; 0x80
   1efe8:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
   1efec:	d808      	bhi.n	1f000 <__sjis_wctomb+0x4c>
   1efee:	700a      	strb	r2, [r1, #0]
   1eff0:	704b      	strb	r3, [r1, #1]
   1eff2:	2002      	movs	r0, #2
   1eff4:	4770      	bx	lr
   1eff6:	700b      	strb	r3, [r1, #0]
   1eff8:	2001      	movs	r0, #1
   1effa:	4770      	bx	lr
   1effc:	4608      	mov	r0, r1
   1effe:	4770      	bx	lr
   1f000:	238a      	movs	r3, #138	; 0x8a
   1f002:	6003      	str	r3, [r0, #0]
   1f004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f008:	4770      	bx	lr
   1f00a:	bf00      	nop

0001f00c <__eucjp_wctomb>:
   1f00c:	b2d3      	uxtb	r3, r2
   1f00e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1f012:	b339      	cbz	r1, 1f064 <__eucjp_wctomb+0x58>
   1f014:	b31a      	cbz	r2, 1f05e <__eucjp_wctomb+0x52>
   1f016:	f102 0c72 	add.w	ip, r2, #114	; 0x72
   1f01a:	fa5f fc8c 	uxtb.w	ip, ip
   1f01e:	f1bc 0f01 	cmp.w	ip, #1
   1f022:	d921      	bls.n	1f068 <__eucjp_wctomb+0x5c>
   1f024:	f102 0c5f 	add.w	ip, r2, #95	; 0x5f
   1f028:	fa5f fc8c 	uxtb.w	ip, ip
   1f02c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1f030:	d821      	bhi.n	1f076 <__eucjp_wctomb+0x6a>
   1f032:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
   1f036:	fa5f fc8c 	uxtb.w	ip, ip
   1f03a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1f03e:	d91f      	bls.n	1f080 <__eucjp_wctomb+0x74>
   1f040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f044:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
   1f048:	fa5f fc8c 	uxtb.w	ip, ip
   1f04c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1f050:	d811      	bhi.n	1f076 <__eucjp_wctomb+0x6a>
   1f052:	208f      	movs	r0, #143	; 0x8f
   1f054:	7008      	strb	r0, [r1, #0]
   1f056:	704a      	strb	r2, [r1, #1]
   1f058:	708b      	strb	r3, [r1, #2]
   1f05a:	2003      	movs	r0, #3
   1f05c:	4770      	bx	lr
   1f05e:	700b      	strb	r3, [r1, #0]
   1f060:	2001      	movs	r0, #1
   1f062:	4770      	bx	lr
   1f064:	4608      	mov	r0, r1
   1f066:	4770      	bx	lr
   1f068:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
   1f06c:	fa5f fc8c 	uxtb.w	ip, ip
   1f070:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1f074:	d904      	bls.n	1f080 <__eucjp_wctomb+0x74>
   1f076:	238a      	movs	r3, #138	; 0x8a
   1f078:	6003      	str	r3, [r0, #0]
   1f07a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f07e:	4770      	bx	lr
   1f080:	700a      	strb	r2, [r1, #0]
   1f082:	704b      	strb	r3, [r1, #1]
   1f084:	2002      	movs	r0, #2
   1f086:	4770      	bx	lr

0001f088 <__jis_wctomb>:
   1f088:	fa5f fc82 	uxtb.w	ip, r2
   1f08c:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1f090:	b381      	cbz	r1, 1f0f4 <__jis_wctomb+0x6c>
   1f092:	b192      	cbz	r2, 1f0ba <__jis_wctomb+0x32>
   1f094:	b500      	push	{lr}
   1f096:	f1a2 0e21 	sub.w	lr, r2, #33	; 0x21
   1f09a:	f1be 0f5d 	cmp.w	lr, #93	; 0x5d
   1f09e:	d82b      	bhi.n	1f0f8 <__jis_wctomb+0x70>
   1f0a0:	f1ac 0e21 	sub.w	lr, ip, #33	; 0x21
   1f0a4:	f1be 0f5d 	cmp.w	lr, #93	; 0x5d
   1f0a8:	d826      	bhi.n	1f0f8 <__jis_wctomb+0x70>
   1f0aa:	6818      	ldr	r0, [r3, #0]
   1f0ac:	b1b8      	cbz	r0, 1f0de <__jis_wctomb+0x56>
   1f0ae:	2002      	movs	r0, #2
   1f0b0:	700a      	strb	r2, [r1, #0]
   1f0b2:	f881 c001 	strb.w	ip, [r1, #1]
   1f0b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1f0ba:	6818      	ldr	r0, [r3, #0]
   1f0bc:	b158      	cbz	r0, 1f0d6 <__jis_wctomb+0x4e>
   1f0be:	601a      	str	r2, [r3, #0]
   1f0c0:	201b      	movs	r0, #27
   1f0c2:	2228      	movs	r2, #40	; 0x28
   1f0c4:	2342      	movs	r3, #66	; 0x42
   1f0c6:	7008      	strb	r0, [r1, #0]
   1f0c8:	704a      	strb	r2, [r1, #1]
   1f0ca:	708b      	strb	r3, [r1, #2]
   1f0cc:	2004      	movs	r0, #4
   1f0ce:	3103      	adds	r1, #3
   1f0d0:	f881 c000 	strb.w	ip, [r1]
   1f0d4:	4770      	bx	lr
   1f0d6:	2001      	movs	r0, #1
   1f0d8:	f881 c000 	strb.w	ip, [r1]
   1f0dc:	4770      	bx	lr
   1f0de:	2001      	movs	r0, #1
   1f0e0:	6018      	str	r0, [r3, #0]
   1f0e2:	2324      	movs	r3, #36	; 0x24
   1f0e4:	201b      	movs	r0, #27
   1f0e6:	704b      	strb	r3, [r1, #1]
   1f0e8:	2342      	movs	r3, #66	; 0x42
   1f0ea:	7008      	strb	r0, [r1, #0]
   1f0ec:	708b      	strb	r3, [r1, #2]
   1f0ee:	2005      	movs	r0, #5
   1f0f0:	3103      	adds	r1, #3
   1f0f2:	e7dd      	b.n	1f0b0 <__jis_wctomb+0x28>
   1f0f4:	2001      	movs	r0, #1
   1f0f6:	4770      	bx	lr
   1f0f8:	238a      	movs	r3, #138	; 0x8a
   1f0fa:	6003      	str	r3, [r0, #0]
   1f0fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f100:	e7d9      	b.n	1f0b6 <__jis_wctomb+0x2e>
   1f102:	bf00      	nop
   1f104:	0000      	movs	r0, r0
	...

0001f108 <_svfprintf_r>:
   1f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f10c:	ed2d 8b08 	vpush	{d8-d11}
   1f110:	b0d1      	sub	sp, #324	; 0x144
   1f112:	460c      	mov	r4, r1
   1f114:	ee0b 1a10 	vmov	s22, r1
   1f118:	4690      	mov	r8, r2
   1f11a:	9308      	str	r3, [sp, #32]
   1f11c:	4683      	mov	fp, r0
   1f11e:	f001 ff7d 	bl	2101c <_localeconv_r>
   1f122:	6803      	ldr	r3, [r0, #0]
   1f124:	9312      	str	r3, [sp, #72]	; 0x48
   1f126:	4618      	mov	r0, r3
   1f128:	f7fe f8ca 	bl	1d2c0 <strlen>
   1f12c:	af20      	add	r7, sp, #128	; 0x80
   1f12e:	9010      	str	r0, [sp, #64]	; 0x40
   1f130:	2208      	movs	r2, #8
   1f132:	2100      	movs	r1, #0
   1f134:	4638      	mov	r0, r7
   1f136:	f7fc fd0f 	bl	1bb58 <memset>
   1f13a:	89a3      	ldrh	r3, [r4, #12]
   1f13c:	061b      	lsls	r3, r3, #24
   1f13e:	d503      	bpl.n	1f148 <_svfprintf_r+0x40>
   1f140:	6923      	ldr	r3, [r4, #16]
   1f142:	2b00      	cmp	r3, #0
   1f144:	f000 8755 	beq.w	1fff2 <_svfprintf_r+0xeea>
   1f148:	2300      	movs	r3, #0
   1f14a:	ed9f 8b83 	vldr	d8, [pc, #524]	; 1f358 <_svfprintf_r+0x250>
   1f14e:	ed9f 9b84 	vldr	d9, [pc, #528]	; 1f360 <_svfprintf_r+0x258>
   1f152:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   1f156:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   1f15a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   1f15e:	aa27      	add	r2, sp, #156	; 0x9c
   1f160:	930e      	str	r3, [sp, #56]	; 0x38
   1f162:	9224      	str	r2, [sp, #144]	; 0x90
   1f164:	4692      	mov	sl, r2
   1f166:	9311      	str	r3, [sp, #68]	; 0x44
   1f168:	9304      	str	r3, [sp, #16]
   1f16a:	4644      	mov	r4, r8
   1f16c:	46a1      	mov	r9, r4
   1f16e:	4b7e      	ldr	r3, [pc, #504]	; (1f368 <_svfprintf_r+0x260>)
   1f170:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1f174:	f7fd fdae 	bl	1ccd4 <__locale_mb_cur_max>
   1f178:	464a      	mov	r2, r9
   1f17a:	4603      	mov	r3, r0
   1f17c:	a91c      	add	r1, sp, #112	; 0x70
   1f17e:	9700      	str	r7, [sp, #0]
   1f180:	4658      	mov	r0, fp
   1f182:	47a8      	blx	r5
   1f184:	2800      	cmp	r0, #0
   1f186:	f000 80b0 	beq.w	1f2ea <_svfprintf_r+0x1e2>
   1f18a:	f2c0 80a6 	blt.w	1f2da <_svfprintf_r+0x1d2>
   1f18e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1f190:	2a25      	cmp	r2, #37	; 0x25
   1f192:	4603      	mov	r3, r0
   1f194:	d001      	beq.n	1f19a <_svfprintf_r+0x92>
   1f196:	4499      	add	r9, r3
   1f198:	e7e9      	b.n	1f16e <_svfprintf_r+0x66>
   1f19a:	ebb9 0504 	subs.w	r5, r9, r4
   1f19e:	4606      	mov	r6, r0
   1f1a0:	f040 80a7 	bne.w	1f2f2 <_svfprintf_r+0x1ea>
   1f1a4:	2300      	movs	r3, #0
   1f1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f1aa:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   1f1ae:	4698      	mov	r8, r3
   1f1b0:	9306      	str	r3, [sp, #24]
   1f1b2:	f109 0901 	add.w	r9, r9, #1
   1f1b6:	f899 3000 	ldrb.w	r3, [r9]
   1f1ba:	9203      	str	r2, [sp, #12]
   1f1bc:	252b      	movs	r5, #43	; 0x2b
   1f1be:	2620      	movs	r6, #32
   1f1c0:	f109 0901 	add.w	r9, r9, #1
   1f1c4:	f1a3 0220 	sub.w	r2, r3, #32
   1f1c8:	2a5a      	cmp	r2, #90	; 0x5a
   1f1ca:	f200 80cf 	bhi.w	1f36c <_svfprintf_r+0x264>
   1f1ce:	e8df f012 	tbh	[pc, r2, lsl #1]
   1f1d2:	02e8      	.short	0x02e8
   1f1d4:	00cd00cd 	.word	0x00cd00cd
   1f1d8:	00cd02e3 	.word	0x00cd02e3
   1f1dc:	00cd00cd 	.word	0x00cd00cd
   1f1e0:	00cd006a 	.word	0x00cd006a
   1f1e4:	020500cd 	.word	0x020500cd
   1f1e8:	00cd0284 	.word	0x00cd0284
   1f1ec:	02c90210 	.word	0x02c90210
   1f1f0:	02bd00cd 	.word	0x02bd00cd
   1f1f4:	005b005b 	.word	0x005b005b
   1f1f8:	005b005b 	.word	0x005b005b
   1f1fc:	005b005b 	.word	0x005b005b
   1f200:	005b005b 	.word	0x005b005b
   1f204:	00cd005b 	.word	0x00cd005b
   1f208:	00cd00cd 	.word	0x00cd00cd
   1f20c:	00cd00cd 	.word	0x00cd00cd
   1f210:	00cd00cd 	.word	0x00cd00cd
   1f214:	00cd0153 	.word	0x00cd0153
   1f218:	021a0183 	.word	0x021a0183
   1f21c:	01530153 	.word	0x01530153
   1f220:	00cd0153 	.word	0x00cd0153
   1f224:	00cd00cd 	.word	0x00cd00cd
   1f228:	021500cd 	.word	0x021500cd
   1f22c:	00cd00cd 	.word	0x00cd00cd
   1f230:	00cd0296 	.word	0x00cd0296
   1f234:	00cd00cd 	.word	0x00cd00cd
   1f238:	00cd01ab 	.word	0x00cd01ab
   1f23c:	00cd02aa 	.word	0x00cd02aa
   1f240:	06e300cd 	.word	0x06e300cd
   1f244:	00cd00cd 	.word	0x00cd00cd
   1f248:	00cd00cd 	.word	0x00cd00cd
   1f24c:	00cd00cd 	.word	0x00cd00cd
   1f250:	00cd00cd 	.word	0x00cd00cd
   1f254:	00cd0153 	.word	0x00cd0153
   1f258:	01de0183 	.word	0x01de0183
   1f25c:	01530153 	.word	0x01530153
   1f260:	02770153 	.word	0x02770153
   1f264:	007f01de 	.word	0x007f01de
   1f268:	028900cd 	.word	0x028900cd
   1f26c:	025f00cd 	.word	0x025f00cd
   1f270:	022f06e0 	.word	0x022f06e0
   1f274:	00cd007f 	.word	0x00cd007f
   1f278:	007c01ab 	.word	0x007c01ab
   1f27c:	00cd06b8 	.word	0x00cd06b8
   1f280:	06bd00cd 	.word	0x06bd00cd
   1f284:	007c00cd 	.word	0x007c00cd
   1f288:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f28c:	2100      	movs	r1, #0
   1f28e:	f819 3b01 	ldrb.w	r3, [r9], #1
   1f292:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1f296:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   1f29a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f29e:	2a09      	cmp	r2, #9
   1f2a0:	d9f5      	bls.n	1f28e <_svfprintf_r+0x186>
   1f2a2:	9106      	str	r1, [sp, #24]
   1f2a4:	e78e      	b.n	1f1c4 <_svfprintf_r+0xbc>
   1f2a6:	4658      	mov	r0, fp
   1f2a8:	f001 feb8 	bl	2101c <_localeconv_r>
   1f2ac:	6843      	ldr	r3, [r0, #4]
   1f2ae:	9315      	str	r3, [sp, #84]	; 0x54
   1f2b0:	4618      	mov	r0, r3
   1f2b2:	f7fe f805 	bl	1d2c0 <strlen>
   1f2b6:	9016      	str	r0, [sp, #88]	; 0x58
   1f2b8:	4658      	mov	r0, fp
   1f2ba:	f001 feaf 	bl	2101c <_localeconv_r>
   1f2be:	6883      	ldr	r3, [r0, #8]
   1f2c0:	9313      	str	r3, [sp, #76]	; 0x4c
   1f2c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f2c4:	2b00      	cmp	r3, #0
   1f2c6:	f040 862d 	bne.w	1ff24 <_svfprintf_r+0xe1c>
   1f2ca:	f899 3000 	ldrb.w	r3, [r9]
   1f2ce:	e777      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f2d0:	f899 3000 	ldrb.w	r3, [r9]
   1f2d4:	f048 0820 	orr.w	r8, r8, #32
   1f2d8:	e772      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f2da:	2208      	movs	r2, #8
   1f2dc:	2100      	movs	r1, #0
   1f2de:	4638      	mov	r0, r7
   1f2e0:	f7fc fc3a 	bl	1bb58 <memset>
   1f2e4:	2301      	movs	r3, #1
   1f2e6:	4499      	add	r9, r3
   1f2e8:	e741      	b.n	1f16e <_svfprintf_r+0x66>
   1f2ea:	ebb9 0504 	subs.w	r5, r9, r4
   1f2ee:	4606      	mov	r6, r0
   1f2f0:	d011      	beq.n	1f316 <_svfprintf_r+0x20e>
   1f2f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1f2f4:	442b      	add	r3, r5
   1f2f6:	9326      	str	r3, [sp, #152]	; 0x98
   1f2f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f2fa:	3301      	adds	r3, #1
   1f2fc:	2b07      	cmp	r3, #7
   1f2fe:	e9ca 4500 	strd	r4, r5, [sl]
   1f302:	9325      	str	r3, [sp, #148]	; 0x94
   1f304:	dc1c      	bgt.n	1f340 <_svfprintf_r+0x238>
   1f306:	f10a 0a08 	add.w	sl, sl, #8
   1f30a:	9b04      	ldr	r3, [sp, #16]
   1f30c:	442b      	add	r3, r5
   1f30e:	9304      	str	r3, [sp, #16]
   1f310:	2e00      	cmp	r6, #0
   1f312:	f47f af47 	bne.w	1f1a4 <_svfprintf_r+0x9c>
   1f316:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1f318:	2b00      	cmp	r3, #0
   1f31a:	f041 820b 	bne.w	20734 <_svfprintf_r+0x162c>
   1f31e:	ee1b 3a10 	vmov	r3, s22
   1f322:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1f326:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f32a:	9b04      	ldr	r3, [sp, #16]
   1f32c:	bf18      	it	ne
   1f32e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1f332:	9304      	str	r3, [sp, #16]
   1f334:	9804      	ldr	r0, [sp, #16]
   1f336:	b051      	add	sp, #324	; 0x144
   1f338:	ecbd 8b08 	vpop	{d8-d11}
   1f33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f340:	ee1b 1a10 	vmov	r1, s22
   1f344:	aa24      	add	r2, sp, #144	; 0x90
   1f346:	4658      	mov	r0, fp
   1f348:	f002 fe7e 	bl	22048 <__ssprint_r>
   1f34c:	2800      	cmp	r0, #0
   1f34e:	d1e6      	bne.n	1f31e <_svfprintf_r+0x216>
   1f350:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f354:	e7d9      	b.n	1f30a <_svfprintf_r+0x202>
   1f356:	bf00      	nop
	...
   1f360:	ffffffff 	.word	0xffffffff
   1f364:	7fefffff 	.word	0x7fefffff
   1f368:	200093a0 	.word	0x200093a0
   1f36c:	930b      	str	r3, [sp, #44]	; 0x2c
   1f36e:	2b00      	cmp	r3, #0
   1f370:	d0d1      	beq.n	1f316 <_svfprintf_r+0x20e>
   1f372:	2100      	movs	r1, #0
   1f374:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   1f378:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   1f37c:	2301      	movs	r3, #1
   1f37e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1f382:	9302      	str	r3, [sp, #8]
   1f384:	9107      	str	r1, [sp, #28]
   1f386:	9305      	str	r3, [sp, #20]
   1f388:	9103      	str	r1, [sp, #12]
   1f38a:	910f      	str	r1, [sp, #60]	; 0x3c
   1f38c:	ac37      	add	r4, sp, #220	; 0xdc
   1f38e:	f018 0302 	ands.w	r3, r8, #2
   1f392:	9309      	str	r3, [sp, #36]	; 0x24
   1f394:	d002      	beq.n	1f39c <_svfprintf_r+0x294>
   1f396:	9b02      	ldr	r3, [sp, #8]
   1f398:	3302      	adds	r3, #2
   1f39a:	9302      	str	r3, [sp, #8]
   1f39c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   1f3a0:	930a      	str	r3, [sp, #40]	; 0x28
   1f3a2:	d105      	bne.n	1f3b0 <_svfprintf_r+0x2a8>
   1f3a4:	9b06      	ldr	r3, [sp, #24]
   1f3a6:	9a02      	ldr	r2, [sp, #8]
   1f3a8:	1a9d      	subs	r5, r3, r2
   1f3aa:	2d00      	cmp	r5, #0
   1f3ac:	f300 8369 	bgt.w	1fa82 <_svfprintf_r+0x97a>
   1f3b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1f3b2:	b189      	cbz	r1, 1f3d8 <_svfprintf_r+0x2d0>
   1f3b4:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f3b6:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   1f3ba:	3101      	adds	r1, #1
   1f3bc:	3201      	adds	r2, #1
   1f3be:	f8ca 0000 	str.w	r0, [sl]
   1f3c2:	2907      	cmp	r1, #7
   1f3c4:	f04f 0001 	mov.w	r0, #1
   1f3c8:	9226      	str	r2, [sp, #152]	; 0x98
   1f3ca:	9125      	str	r1, [sp, #148]	; 0x94
   1f3cc:	f8ca 0004 	str.w	r0, [sl, #4]
   1f3d0:	f300 83a2 	bgt.w	1fb18 <_svfprintf_r+0xa10>
   1f3d4:	f10a 0a08 	add.w	sl, sl, #8
   1f3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f3da:	b183      	cbz	r3, 1f3fe <_svfprintf_r+0x2f6>
   1f3dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f3de:	a91a      	add	r1, sp, #104	; 0x68
   1f3e0:	3301      	adds	r3, #1
   1f3e2:	3202      	adds	r2, #2
   1f3e4:	f8ca 1000 	str.w	r1, [sl]
   1f3e8:	2b07      	cmp	r3, #7
   1f3ea:	f04f 0102 	mov.w	r1, #2
   1f3ee:	9226      	str	r2, [sp, #152]	; 0x98
   1f3f0:	9325      	str	r3, [sp, #148]	; 0x94
   1f3f2:	f8ca 1004 	str.w	r1, [sl, #4]
   1f3f6:	f300 83a3 	bgt.w	1fb40 <_svfprintf_r+0xa38>
   1f3fa:	f10a 0a08 	add.w	sl, sl, #8
   1f3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f400:	2b80      	cmp	r3, #128	; 0x80
   1f402:	f000 826c 	beq.w	1f8de <_svfprintf_r+0x7d6>
   1f406:	9b03      	ldr	r3, [sp, #12]
   1f408:	9905      	ldr	r1, [sp, #20]
   1f40a:	1a5d      	subs	r5, r3, r1
   1f40c:	2d00      	cmp	r5, #0
   1f40e:	f300 82a5 	bgt.w	1f95c <_svfprintf_r+0x854>
   1f412:	f418 7f80 	tst.w	r8, #256	; 0x100
   1f416:	f040 820d 	bne.w	1f834 <_svfprintf_r+0x72c>
   1f41a:	9b05      	ldr	r3, [sp, #20]
   1f41c:	f8ca 3004 	str.w	r3, [sl, #4]
   1f420:	441a      	add	r2, r3
   1f422:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f424:	f8ca 4000 	str.w	r4, [sl]
   1f428:	3301      	adds	r3, #1
   1f42a:	2b07      	cmp	r3, #7
   1f42c:	9226      	str	r2, [sp, #152]	; 0x98
   1f42e:	9325      	str	r3, [sp, #148]	; 0x94
   1f430:	f300 831b 	bgt.w	1fa6a <_svfprintf_r+0x962>
   1f434:	f10a 0a08 	add.w	sl, sl, #8
   1f438:	f018 0f04 	tst.w	r8, #4
   1f43c:	d005      	beq.n	1f44a <_svfprintf_r+0x342>
   1f43e:	9b06      	ldr	r3, [sp, #24]
   1f440:	9902      	ldr	r1, [sp, #8]
   1f442:	1a5c      	subs	r4, r3, r1
   1f444:	2c00      	cmp	r4, #0
   1f446:	f300 8388 	bgt.w	1fb5a <_svfprintf_r+0xa52>
   1f44a:	9b04      	ldr	r3, [sp, #16]
   1f44c:	9906      	ldr	r1, [sp, #24]
   1f44e:	9802      	ldr	r0, [sp, #8]
   1f450:	4281      	cmp	r1, r0
   1f452:	bfac      	ite	ge
   1f454:	185b      	addge	r3, r3, r1
   1f456:	181b      	addlt	r3, r3, r0
   1f458:	9304      	str	r3, [sp, #16]
   1f45a:	2a00      	cmp	r2, #0
   1f45c:	f040 82b0 	bne.w	1f9c0 <_svfprintf_r+0x8b8>
   1f460:	2300      	movs	r3, #0
   1f462:	9325      	str	r3, [sp, #148]	; 0x94
   1f464:	9b07      	ldr	r3, [sp, #28]
   1f466:	b11b      	cbz	r3, 1f470 <_svfprintf_r+0x368>
   1f468:	9907      	ldr	r1, [sp, #28]
   1f46a:	4658      	mov	r0, fp
   1f46c:	f7fe f83a 	bl	1d4e4 <_free_r>
   1f470:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f474:	464c      	mov	r4, r9
   1f476:	e679      	b.n	1f16c <_svfprintf_r+0x64>
   1f478:	930b      	str	r3, [sp, #44]	; 0x2c
   1f47a:	9b08      	ldr	r3, [sp, #32]
   1f47c:	3307      	adds	r3, #7
   1f47e:	f023 0307 	bic.w	r3, r3, #7
   1f482:	ecb3 8b02 	vldmia	r3!, {d8}
   1f486:	eeb0 7bc8 	vabs.f64	d7, d8
   1f48a:	eeb4 7b49 	vcmp.f64	d7, d9
   1f48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f492:	9308      	str	r3, [sp, #32]
   1f494:	f340 84e9 	ble.w	1fe6a <_svfprintf_r+0xd62>
   1f498:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   1f49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f4a0:	f101 8059 	bmi.w	20556 <_svfprintf_r+0x144e>
   1f4a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1f4a8:	4cab      	ldr	r4, [pc, #684]	; (1f758 <_svfprintf_r+0x650>)
   1f4aa:	4bac      	ldr	r3, [pc, #688]	; (1f75c <_svfprintf_r+0x654>)
   1f4ac:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   1f4b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f4b2:	2a47      	cmp	r2, #71	; 0x47
   1f4b4:	bfc8      	it	gt
   1f4b6:	461c      	movgt	r4, r3
   1f4b8:	2300      	movs	r3, #0
   1f4ba:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1f4be:	2203      	movs	r2, #3
   1f4c0:	9307      	str	r3, [sp, #28]
   1f4c2:	9202      	str	r2, [sp, #8]
   1f4c4:	9205      	str	r2, [sp, #20]
   1f4c6:	9303      	str	r3, [sp, #12]
   1f4c8:	930f      	str	r3, [sp, #60]	; 0x3c
   1f4ca:	2900      	cmp	r1, #0
   1f4cc:	f43f af5f 	beq.w	1f38e <_svfprintf_r+0x286>
   1f4d0:	9b02      	ldr	r3, [sp, #8]
   1f4d2:	3301      	adds	r3, #1
   1f4d4:	9302      	str	r3, [sp, #8]
   1f4d6:	e75a      	b.n	1f38e <_svfprintf_r+0x286>
   1f4d8:	2b43      	cmp	r3, #67	; 0x43
   1f4da:	930b      	str	r3, [sp, #44]	; 0x2c
   1f4dc:	d003      	beq.n	1f4e6 <_svfprintf_r+0x3de>
   1f4de:	f018 0f10 	tst.w	r8, #16
   1f4e2:	f000 855d 	beq.w	1ffa0 <_svfprintf_r+0xe98>
   1f4e6:	9d08      	ldr	r5, [sp, #32]
   1f4e8:	2208      	movs	r2, #8
   1f4ea:	2100      	movs	r1, #0
   1f4ec:	a822      	add	r0, sp, #136	; 0x88
   1f4ee:	ac37      	add	r4, sp, #220	; 0xdc
   1f4f0:	f7fc fb32 	bl	1bb58 <memset>
   1f4f4:	ab22      	add	r3, sp, #136	; 0x88
   1f4f6:	f855 2b04 	ldr.w	r2, [r5], #4
   1f4fa:	4621      	mov	r1, r4
   1f4fc:	4658      	mov	r0, fp
   1f4fe:	f002 fd11 	bl	21f24 <_wcrtomb_r>
   1f502:	4603      	mov	r3, r0
   1f504:	3301      	adds	r3, #1
   1f506:	9005      	str	r0, [sp, #20]
   1f508:	f001 82ee 	beq.w	20ae8 <_svfprintf_r+0x19e0>
   1f50c:	9b05      	ldr	r3, [sp, #20]
   1f50e:	9508      	str	r5, [sp, #32]
   1f510:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f514:	9302      	str	r3, [sp, #8]
   1f516:	2100      	movs	r1, #0
   1f518:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   1f51c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1f520:	9107      	str	r1, [sp, #28]
   1f522:	9103      	str	r1, [sp, #12]
   1f524:	910f      	str	r1, [sp, #60]	; 0x3c
   1f526:	e732      	b.n	1f38e <_svfprintf_r+0x286>
   1f528:	930b      	str	r3, [sp, #44]	; 0x2c
   1f52a:	9b08      	ldr	r3, [sp, #32]
   1f52c:	461a      	mov	r2, r3
   1f52e:	2300      	movs	r3, #0
   1f530:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   1f534:	4613      	mov	r3, r2
   1f536:	f853 4b04 	ldr.w	r4, [r3], #4
   1f53a:	9308      	str	r3, [sp, #32]
   1f53c:	2c00      	cmp	r4, #0
   1f53e:	f000 8548 	beq.w	1ffd2 <_svfprintf_r+0xeca>
   1f542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f544:	2b53      	cmp	r3, #83	; 0x53
   1f546:	f000 86ec 	beq.w	20322 <_svfprintf_r+0x121a>
   1f54a:	f018 0310 	ands.w	r3, r8, #16
   1f54e:	930c      	str	r3, [sp, #48]	; 0x30
   1f550:	f040 86e7 	bne.w	20322 <_svfprintf_r+0x121a>
   1f554:	9b03      	ldr	r3, [sp, #12]
   1f556:	1c5d      	adds	r5, r3, #1
   1f558:	f001 80e5 	beq.w	20726 <_svfprintf_r+0x161e>
   1f55c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f55e:	461a      	mov	r2, r3
   1f560:	4620      	mov	r0, r4
   1f562:	f7fd fe4d 	bl	1d200 <memchr>
   1f566:	9007      	str	r0, [sp, #28]
   1f568:	2800      	cmp	r0, #0
   1f56a:	f001 8328 	beq.w	20bbe <_svfprintf_r+0x1ab6>
   1f56e:	9b07      	ldr	r3, [sp, #28]
   1f570:	1b1a      	subs	r2, r3, r4
   1f572:	9205      	str	r2, [sp, #20]
   1f574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f576:	9303      	str	r3, [sp, #12]
   1f578:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1f57c:	930f      	str	r3, [sp, #60]	; 0x3c
   1f57e:	930d      	str	r3, [sp, #52]	; 0x34
   1f580:	9307      	str	r3, [sp, #28]
   1f582:	2373      	movs	r3, #115	; 0x73
   1f584:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1f588:	9202      	str	r2, [sp, #8]
   1f58a:	930b      	str	r3, [sp, #44]	; 0x2c
   1f58c:	e79d      	b.n	1f4ca <_svfprintf_r+0x3c2>
   1f58e:	f018 0f20 	tst.w	r8, #32
   1f592:	930b      	str	r3, [sp, #44]	; 0x2c
   1f594:	9b08      	ldr	r3, [sp, #32]
   1f596:	d03d      	beq.n	1f614 <_svfprintf_r+0x50c>
   1f598:	3307      	adds	r3, #7
   1f59a:	f023 0307 	bic.w	r3, r3, #7
   1f59e:	461a      	mov	r2, r3
   1f5a0:	4611      	mov	r1, r2
   1f5a2:	685b      	ldr	r3, [r3, #4]
   1f5a4:	f851 2b08 	ldr.w	r2, [r1], #8
   1f5a8:	9108      	str	r1, [sp, #32]
   1f5aa:	4619      	mov	r1, r3
   1f5ac:	2b00      	cmp	r3, #0
   1f5ae:	f2c0 840c 	blt.w	1fdca <_svfprintf_r+0xcc2>
   1f5b2:	9b03      	ldr	r3, [sp, #12]
   1f5b4:	3301      	adds	r3, #1
   1f5b6:	f000 829e 	beq.w	1faf6 <_svfprintf_r+0x9ee>
   1f5ba:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   1f5be:	ea52 0301 	orrs.w	r3, r2, r1
   1f5c2:	9002      	str	r0, [sp, #8]
   1f5c4:	f040 8299 	bne.w	1fafa <_svfprintf_r+0x9f2>
   1f5c8:	9b03      	ldr	r3, [sp, #12]
   1f5ca:	2b00      	cmp	r3, #0
   1f5cc:	f040 829a 	bne.w	1fb04 <_svfprintf_r+0x9fc>
   1f5d0:	4680      	mov	r8, r0
   1f5d2:	2300      	movs	r3, #0
   1f5d4:	9303      	str	r3, [sp, #12]
   1f5d6:	9305      	str	r3, [sp, #20]
   1f5d8:	ac50      	add	r4, sp, #320	; 0x140
   1f5da:	e106      	b.n	1f7ea <_svfprintf_r+0x6e2>
   1f5dc:	9b08      	ldr	r3, [sp, #32]
   1f5de:	f853 2b04 	ldr.w	r2, [r3], #4
   1f5e2:	9206      	str	r2, [sp, #24]
   1f5e4:	2a00      	cmp	r2, #0
   1f5e6:	f280 8419 	bge.w	1fe1c <_svfprintf_r+0xd14>
   1f5ea:	9a06      	ldr	r2, [sp, #24]
   1f5ec:	9308      	str	r3, [sp, #32]
   1f5ee:	4252      	negs	r2, r2
   1f5f0:	9206      	str	r2, [sp, #24]
   1f5f2:	f899 3000 	ldrb.w	r3, [r9]
   1f5f6:	f048 0804 	orr.w	r8, r8, #4
   1f5fa:	e5e1      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f5fc:	f899 3000 	ldrb.w	r3, [r9]
   1f600:	f048 0808 	orr.w	r8, r8, #8
   1f604:	e5dc      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f606:	f048 0810 	orr.w	r8, r8, #16
   1f60a:	f018 0f20 	tst.w	r8, #32
   1f60e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f610:	9b08      	ldr	r3, [sp, #32]
   1f612:	d1c1      	bne.n	1f598 <_svfprintf_r+0x490>
   1f614:	f018 0f10 	tst.w	r8, #16
   1f618:	f040 840b 	bne.w	1fe32 <_svfprintf_r+0xd2a>
   1f61c:	f018 0f40 	tst.w	r8, #64	; 0x40
   1f620:	f000 8403 	beq.w	1fe2a <_svfprintf_r+0xd22>
   1f624:	f933 2b04 	ldrsh.w	r2, [r3], #4
   1f628:	9308      	str	r3, [sp, #32]
   1f62a:	17d1      	asrs	r1, r2, #31
   1f62c:	460b      	mov	r3, r1
   1f62e:	e7bd      	b.n	1f5ac <_svfprintf_r+0x4a4>
   1f630:	9b08      	ldr	r3, [sp, #32]
   1f632:	f048 0202 	orr.w	r2, r8, #2
   1f636:	9202      	str	r2, [sp, #8]
   1f638:	f853 2b04 	ldr.w	r2, [r3], #4
   1f63c:	9308      	str	r3, [sp, #32]
   1f63e:	f647 0330 	movw	r3, #30768	; 0x7830
   1f642:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   1f646:	2078      	movs	r0, #120	; 0x78
   1f648:	4b45      	ldr	r3, [pc, #276]	; (1f760 <_svfprintf_r+0x658>)
   1f64a:	9311      	str	r3, [sp, #68]	; 0x44
   1f64c:	2100      	movs	r1, #0
   1f64e:	2302      	movs	r3, #2
   1f650:	900b      	str	r0, [sp, #44]	; 0x2c
   1f652:	2000      	movs	r0, #0
   1f654:	9c03      	ldr	r4, [sp, #12]
   1f656:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   1f65a:	1c60      	adds	r0, r4, #1
   1f65c:	f000 80ad 	beq.w	1f7ba <_svfprintf_r+0x6b2>
   1f660:	9802      	ldr	r0, [sp, #8]
   1f662:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   1f666:	ea52 0001 	orrs.w	r0, r2, r1
   1f66a:	f040 80a4 	bne.w	1f7b6 <_svfprintf_r+0x6ae>
   1f66e:	2c00      	cmp	r4, #0
   1f670:	f040 86ae 	bne.w	203d0 <_svfprintf_r+0x12c8>
   1f674:	2b00      	cmp	r3, #0
   1f676:	d1ac      	bne.n	1f5d2 <_svfprintf_r+0x4ca>
   1f678:	9b02      	ldr	r3, [sp, #8]
   1f67a:	f013 0301 	ands.w	r3, r3, #1
   1f67e:	9305      	str	r3, [sp, #20]
   1f680:	f000 83d1 	beq.w	1fe26 <_svfprintf_r+0xd1e>
   1f684:	2330      	movs	r3, #48	; 0x30
   1f686:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   1f68a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   1f68e:	e0ac      	b.n	1f7ea <_svfprintf_r+0x6e2>
   1f690:	f018 0f20 	tst.w	r8, #32
   1f694:	f040 83d4 	bne.w	1fe40 <_svfprintf_r+0xd38>
   1f698:	f018 0f10 	tst.w	r8, #16
   1f69c:	f040 869f 	bne.w	203de <_svfprintf_r+0x12d6>
   1f6a0:	f018 0f40 	tst.w	r8, #64	; 0x40
   1f6a4:	f040 8797 	bne.w	205d6 <_svfprintf_r+0x14ce>
   1f6a8:	f418 7f00 	tst.w	r8, #512	; 0x200
   1f6ac:	f000 8697 	beq.w	203de <_svfprintf_r+0x12d6>
   1f6b0:	9b08      	ldr	r3, [sp, #32]
   1f6b2:	9904      	ldr	r1, [sp, #16]
   1f6b4:	f853 2b04 	ldr.w	r2, [r3], #4
   1f6b8:	9308      	str	r3, [sp, #32]
   1f6ba:	7011      	strb	r1, [r2, #0]
   1f6bc:	464c      	mov	r4, r9
   1f6be:	e555      	b.n	1f16c <_svfprintf_r+0x64>
   1f6c0:	f899 3000 	ldrb.w	r3, [r9]
   1f6c4:	2b68      	cmp	r3, #104	; 0x68
   1f6c6:	bf03      	ittte	eq
   1f6c8:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   1f6cc:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   1f6d0:	f109 0901 	addeq.w	r9, r9, #1
   1f6d4:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   1f6d8:	e572      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f6da:	f899 3000 	ldrb.w	r3, [r9]
   1f6de:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   1f6e2:	e56d      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f6e4:	f899 3000 	ldrb.w	r3, [r9]
   1f6e8:	2b6c      	cmp	r3, #108	; 0x6c
   1f6ea:	bf03      	ittte	eq
   1f6ec:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   1f6f0:	f048 0820 	orreq.w	r8, r8, #32
   1f6f4:	f109 0901 	addeq.w	r9, r9, #1
   1f6f8:	f048 0810 	orrne.w	r8, r8, #16
   1f6fc:	e560      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f6fe:	930b      	str	r3, [sp, #44]	; 0x2c
   1f700:	f048 0810 	orr.w	r8, r8, #16
   1f704:	f018 0120 	ands.w	r1, r8, #32
   1f708:	f000 8351 	beq.w	1fdae <_svfprintf_r+0xca6>
   1f70c:	9b08      	ldr	r3, [sp, #32]
   1f70e:	3307      	adds	r3, #7
   1f710:	f023 0307 	bic.w	r3, r3, #7
   1f714:	6859      	ldr	r1, [r3, #4]
   1f716:	f853 2b08 	ldr.w	r2, [r3], #8
   1f71a:	9308      	str	r3, [sp, #32]
   1f71c:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   1f720:	9302      	str	r3, [sp, #8]
   1f722:	2300      	movs	r3, #0
   1f724:	e795      	b.n	1f652 <_svfprintf_r+0x54a>
   1f726:	930b      	str	r3, [sp, #44]	; 0x2c
   1f728:	f048 0310 	orr.w	r3, r8, #16
   1f72c:	9302      	str	r3, [sp, #8]
   1f72e:	9b02      	ldr	r3, [sp, #8]
   1f730:	f013 0120 	ands.w	r1, r3, #32
   1f734:	f000 8329 	beq.w	1fd8a <_svfprintf_r+0xc82>
   1f738:	9b08      	ldr	r3, [sp, #32]
   1f73a:	3307      	adds	r3, #7
   1f73c:	f023 0307 	bic.w	r3, r3, #7
   1f740:	6859      	ldr	r1, [r3, #4]
   1f742:	f853 2b08 	ldr.w	r2, [r3], #8
   1f746:	9308      	str	r3, [sp, #32]
   1f748:	2301      	movs	r3, #1
   1f74a:	e782      	b.n	1f652 <_svfprintf_r+0x54a>
   1f74c:	f899 3000 	ldrb.w	r3, [r9]
   1f750:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   1f754:	e534      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f756:	bf00      	nop
   1f758:	20008cf4 	.word	0x20008cf4
   1f75c:	20008cf8 	.word	0x20008cf8
   1f760:	20008d04 	.word	0x20008d04
   1f764:	4649      	mov	r1, r9
   1f766:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f76a:	2b2a      	cmp	r3, #42	; 0x2a
   1f76c:	f001 8249 	beq.w	20c02 <_svfprintf_r+0x1afa>
   1f770:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f774:	2a09      	cmp	r2, #9
   1f776:	4689      	mov	r9, r1
   1f778:	bf98      	it	ls
   1f77a:	2100      	movls	r1, #0
   1f77c:	f201 8144 	bhi.w	20a08 <_svfprintf_r+0x1900>
   1f780:	f819 3b01 	ldrb.w	r3, [r9], #1
   1f784:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1f788:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   1f78c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f790:	2a09      	cmp	r2, #9
   1f792:	d9f5      	bls.n	1f780 <_svfprintf_r+0x678>
   1f794:	9103      	str	r1, [sp, #12]
   1f796:	e515      	b.n	1f1c4 <_svfprintf_r+0xbc>
   1f798:	f899 3000 	ldrb.w	r3, [r9]
   1f79c:	f048 0801 	orr.w	r8, r8, #1
   1f7a0:	e50e      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f7a2:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   1f7a6:	2b00      	cmp	r3, #0
   1f7a8:	f47f ad8f 	bne.w	1f2ca <_svfprintf_r+0x1c2>
   1f7ac:	f899 3000 	ldrb.w	r3, [r9]
   1f7b0:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   1f7b4:	e504      	b.n	1f1c0 <_svfprintf_r+0xb8>
   1f7b6:	f8cd 8008 	str.w	r8, [sp, #8]
   1f7ba:	2b01      	cmp	r3, #1
   1f7bc:	f000 819d 	beq.w	1fafa <_svfprintf_r+0x9f2>
   1f7c0:	2b02      	cmp	r3, #2
   1f7c2:	ac50      	add	r4, sp, #320	; 0x140
   1f7c4:	d120      	bne.n	1f808 <_svfprintf_r+0x700>
   1f7c6:	9811      	ldr	r0, [sp, #68]	; 0x44
   1f7c8:	f002 030f 	and.w	r3, r2, #15
   1f7cc:	0912      	lsrs	r2, r2, #4
   1f7ce:	5cc3      	ldrb	r3, [r0, r3]
   1f7d0:	f804 3d01 	strb.w	r3, [r4, #-1]!
   1f7d4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   1f7d8:	0909      	lsrs	r1, r1, #4
   1f7da:	ea52 0301 	orrs.w	r3, r2, r1
   1f7de:	d1f3      	bne.n	1f7c8 <_svfprintf_r+0x6c0>
   1f7e0:	ab50      	add	r3, sp, #320	; 0x140
   1f7e2:	1b1b      	subs	r3, r3, r4
   1f7e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1f7e8:	9305      	str	r3, [sp, #20]
   1f7ea:	9a05      	ldr	r2, [sp, #20]
   1f7ec:	9803      	ldr	r0, [sp, #12]
   1f7ee:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1f7f2:	4282      	cmp	r2, r0
   1f7f4:	f04f 0300 	mov.w	r3, #0
   1f7f8:	bfb8      	it	lt
   1f7fa:	4602      	movlt	r2, r0
   1f7fc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1f800:	9307      	str	r3, [sp, #28]
   1f802:	9202      	str	r2, [sp, #8]
   1f804:	930f      	str	r3, [sp, #60]	; 0x3c
   1f806:	e660      	b.n	1f4ca <_svfprintf_r+0x3c2>
   1f808:	f002 0307 	and.w	r3, r2, #7
   1f80c:	08d2      	lsrs	r2, r2, #3
   1f80e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   1f812:	08c9      	lsrs	r1, r1, #3
   1f814:	3330      	adds	r3, #48	; 0x30
   1f816:	ea52 0501 	orrs.w	r5, r2, r1
   1f81a:	4620      	mov	r0, r4
   1f81c:	f804 3d01 	strb.w	r3, [r4, #-1]!
   1f820:	d1f2      	bne.n	1f808 <_svfprintf_r+0x700>
   1f822:	9a02      	ldr	r2, [sp, #8]
   1f824:	07d1      	lsls	r1, r2, #31
   1f826:	f100 824d 	bmi.w	1fcc4 <_svfprintf_r+0xbbc>
   1f82a:	ab50      	add	r3, sp, #320	; 0x140
   1f82c:	1b1b      	subs	r3, r3, r4
   1f82e:	4690      	mov	r8, r2
   1f830:	9305      	str	r3, [sp, #20]
   1f832:	e7da      	b.n	1f7ea <_svfprintf_r+0x6e2>
   1f834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f836:	2b65      	cmp	r3, #101	; 0x65
   1f838:	f340 80d4 	ble.w	1f9e4 <_svfprintf_r+0x8dc>
   1f83c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1f840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f844:	f040 81c1 	bne.w	1fbca <_svfprintf_r+0xac2>
   1f848:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f84a:	49ba      	ldr	r1, [pc, #744]	; (1fb34 <_svfprintf_r+0xa2c>)
   1f84c:	f8ca 1000 	str.w	r1, [sl]
   1f850:	3301      	adds	r3, #1
   1f852:	3201      	adds	r2, #1
   1f854:	2101      	movs	r1, #1
   1f856:	2b07      	cmp	r3, #7
   1f858:	9226      	str	r2, [sp, #152]	; 0x98
   1f85a:	9325      	str	r3, [sp, #148]	; 0x94
   1f85c:	f8ca 1004 	str.w	r1, [sl, #4]
   1f860:	f300 8551 	bgt.w	20306 <_svfprintf_r+0x11fe>
   1f864:	f10a 0a08 	add.w	sl, sl, #8
   1f868:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f86a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f86c:	428b      	cmp	r3, r1
   1f86e:	f280 82d0 	bge.w	1fe12 <_svfprintf_r+0xd0a>
   1f872:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f874:	9912      	ldr	r1, [sp, #72]	; 0x48
   1f876:	441a      	add	r2, r3
   1f878:	e9ca 1300 	strd	r1, r3, [sl]
   1f87c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f87e:	9226      	str	r2, [sp, #152]	; 0x98
   1f880:	3301      	adds	r3, #1
   1f882:	2b07      	cmp	r3, #7
   1f884:	9325      	str	r3, [sp, #148]	; 0x94
   1f886:	f300 8397 	bgt.w	1ffb8 <_svfprintf_r+0xeb0>
   1f88a:	f10a 0a08 	add.w	sl, sl, #8
   1f88e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f890:	1e5c      	subs	r4, r3, #1
   1f892:	2c00      	cmp	r4, #0
   1f894:	f77f add0 	ble.w	1f438 <_svfprintf_r+0x330>
   1f898:	2c10      	cmp	r4, #16
   1f89a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f89c:	f340 856e 	ble.w	2037c <_svfprintf_r+0x1274>
   1f8a0:	ee1b 6a10 	vmov	r6, s22
   1f8a4:	2510      	movs	r5, #16
   1f8a6:	e005      	b.n	1f8b4 <_svfprintf_r+0x7ac>
   1f8a8:	f10a 0a08 	add.w	sl, sl, #8
   1f8ac:	3c10      	subs	r4, #16
   1f8ae:	2c10      	cmp	r4, #16
   1f8b0:	f340 8564 	ble.w	2037c <_svfprintf_r+0x1274>
   1f8b4:	3301      	adds	r3, #1
   1f8b6:	49a0      	ldr	r1, [pc, #640]	; (1fb38 <_svfprintf_r+0xa30>)
   1f8b8:	3210      	adds	r2, #16
   1f8ba:	2b07      	cmp	r3, #7
   1f8bc:	e9ca 1500 	strd	r1, r5, [sl]
   1f8c0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f8c4:	ddf0      	ble.n	1f8a8 <_svfprintf_r+0x7a0>
   1f8c6:	aa24      	add	r2, sp, #144	; 0x90
   1f8c8:	4631      	mov	r1, r6
   1f8ca:	4658      	mov	r0, fp
   1f8cc:	f002 fbbc 	bl	22048 <__ssprint_r>
   1f8d0:	2800      	cmp	r0, #0
   1f8d2:	d17e      	bne.n	1f9d2 <_svfprintf_r+0x8ca>
   1f8d4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1f8d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f8dc:	e7e6      	b.n	1f8ac <_svfprintf_r+0x7a4>
   1f8de:	9b06      	ldr	r3, [sp, #24]
   1f8e0:	9902      	ldr	r1, [sp, #8]
   1f8e2:	1a5d      	subs	r5, r3, r1
   1f8e4:	2d00      	cmp	r5, #0
   1f8e6:	f77f ad8e 	ble.w	1f406 <_svfprintf_r+0x2fe>
   1f8ea:	2d10      	cmp	r5, #16
   1f8ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f8ee:	dd21      	ble.n	1f934 <_svfprintf_r+0x82c>
   1f8f0:	9409      	str	r4, [sp, #36]	; 0x24
   1f8f2:	2610      	movs	r6, #16
   1f8f4:	ee1b 4a10 	vmov	r4, s22
   1f8f8:	e004      	b.n	1f904 <_svfprintf_r+0x7fc>
   1f8fa:	3d10      	subs	r5, #16
   1f8fc:	2d10      	cmp	r5, #16
   1f8fe:	f10a 0a08 	add.w	sl, sl, #8
   1f902:	dd16      	ble.n	1f932 <_svfprintf_r+0x82a>
   1f904:	3301      	adds	r3, #1
   1f906:	498c      	ldr	r1, [pc, #560]	; (1fb38 <_svfprintf_r+0xa30>)
   1f908:	3210      	adds	r2, #16
   1f90a:	2b07      	cmp	r3, #7
   1f90c:	e9ca 1600 	strd	r1, r6, [sl]
   1f910:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f914:	ddf1      	ble.n	1f8fa <_svfprintf_r+0x7f2>
   1f916:	aa24      	add	r2, sp, #144	; 0x90
   1f918:	4621      	mov	r1, r4
   1f91a:	4658      	mov	r0, fp
   1f91c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1f920:	f002 fb92 	bl	22048 <__ssprint_r>
   1f924:	2800      	cmp	r0, #0
   1f926:	d154      	bne.n	1f9d2 <_svfprintf_r+0x8ca>
   1f928:	3d10      	subs	r5, #16
   1f92a:	2d10      	cmp	r5, #16
   1f92c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1f930:	dce8      	bgt.n	1f904 <_svfprintf_r+0x7fc>
   1f932:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f934:	4980      	ldr	r1, [pc, #512]	; (1fb38 <_svfprintf_r+0xa30>)
   1f936:	f8ca 5004 	str.w	r5, [sl, #4]
   1f93a:	3301      	adds	r3, #1
   1f93c:	442a      	add	r2, r5
   1f93e:	2b07      	cmp	r3, #7
   1f940:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f944:	f8ca 1000 	str.w	r1, [sl]
   1f948:	f300 8526 	bgt.w	20398 <_svfprintf_r+0x1290>
   1f94c:	9b03      	ldr	r3, [sp, #12]
   1f94e:	9905      	ldr	r1, [sp, #20]
   1f950:	1a5d      	subs	r5, r3, r1
   1f952:	2d00      	cmp	r5, #0
   1f954:	f10a 0a08 	add.w	sl, sl, #8
   1f958:	f77f ad5b 	ble.w	1f412 <_svfprintf_r+0x30a>
   1f95c:	2d10      	cmp	r5, #16
   1f95e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f960:	dd1f      	ble.n	1f9a2 <_svfprintf_r+0x89a>
   1f962:	4651      	mov	r1, sl
   1f964:	2610      	movs	r6, #16
   1f966:	ee1b aa10 	vmov	sl, s22
   1f96a:	e004      	b.n	1f976 <_svfprintf_r+0x86e>
   1f96c:	3d10      	subs	r5, #16
   1f96e:	2d10      	cmp	r5, #16
   1f970:	f101 0108 	add.w	r1, r1, #8
   1f974:	dd14      	ble.n	1f9a0 <_svfprintf_r+0x898>
   1f976:	3301      	adds	r3, #1
   1f978:	486f      	ldr	r0, [pc, #444]	; (1fb38 <_svfprintf_r+0xa30>)
   1f97a:	3210      	adds	r2, #16
   1f97c:	2b07      	cmp	r3, #7
   1f97e:	e9c1 0600 	strd	r0, r6, [r1]
   1f982:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f986:	ddf1      	ble.n	1f96c <_svfprintf_r+0x864>
   1f988:	aa24      	add	r2, sp, #144	; 0x90
   1f98a:	4651      	mov	r1, sl
   1f98c:	4658      	mov	r0, fp
   1f98e:	f002 fb5b 	bl	22048 <__ssprint_r>
   1f992:	b9f0      	cbnz	r0, 1f9d2 <_svfprintf_r+0x8ca>
   1f994:	3d10      	subs	r5, #16
   1f996:	2d10      	cmp	r5, #16
   1f998:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1f99c:	a927      	add	r1, sp, #156	; 0x9c
   1f99e:	dcea      	bgt.n	1f976 <_svfprintf_r+0x86e>
   1f9a0:	468a      	mov	sl, r1
   1f9a2:	3301      	adds	r3, #1
   1f9a4:	4964      	ldr	r1, [pc, #400]	; (1fb38 <_svfprintf_r+0xa30>)
   1f9a6:	f8ca 5004 	str.w	r5, [sl, #4]
   1f9aa:	442a      	add	r2, r5
   1f9ac:	2b07      	cmp	r3, #7
   1f9ae:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1f9b2:	f8ca 1000 	str.w	r1, [sl]
   1f9b6:	f300 81da 	bgt.w	1fd6e <_svfprintf_r+0xc66>
   1f9ba:	f10a 0a08 	add.w	sl, sl, #8
   1f9be:	e528      	b.n	1f412 <_svfprintf_r+0x30a>
   1f9c0:	ee1b 1a10 	vmov	r1, s22
   1f9c4:	aa24      	add	r2, sp, #144	; 0x90
   1f9c6:	4658      	mov	r0, fp
   1f9c8:	f002 fb3e 	bl	22048 <__ssprint_r>
   1f9cc:	2800      	cmp	r0, #0
   1f9ce:	f43f ad47 	beq.w	1f460 <_svfprintf_r+0x358>
   1f9d2:	9b07      	ldr	r3, [sp, #28]
   1f9d4:	2b00      	cmp	r3, #0
   1f9d6:	f43f aca2 	beq.w	1f31e <_svfprintf_r+0x216>
   1f9da:	9907      	ldr	r1, [sp, #28]
   1f9dc:	4658      	mov	r0, fp
   1f9de:	f7fd fd81 	bl	1d4e4 <_free_r>
   1f9e2:	e49c      	b.n	1f31e <_svfprintf_r+0x216>
   1f9e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f9e6:	2b01      	cmp	r3, #1
   1f9e8:	f340 817a 	ble.w	1fce0 <_svfprintf_r+0xbd8>
   1f9ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f9ee:	f8ca 4000 	str.w	r4, [sl]
   1f9f2:	3301      	adds	r3, #1
   1f9f4:	3201      	adds	r2, #1
   1f9f6:	2101      	movs	r1, #1
   1f9f8:	2b07      	cmp	r3, #7
   1f9fa:	9226      	str	r2, [sp, #152]	; 0x98
   1f9fc:	9325      	str	r3, [sp, #148]	; 0x94
   1f9fe:	f8ca 1004 	str.w	r1, [sl, #4]
   1fa02:	f300 81f8 	bgt.w	1fdf6 <_svfprintf_r+0xcee>
   1fa06:	f10a 0a08 	add.w	sl, sl, #8
   1fa0a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1fa0c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1fa0e:	3301      	adds	r3, #1
   1fa10:	440a      	add	r2, r1
   1fa12:	2b07      	cmp	r3, #7
   1fa14:	e9ca 0100 	strd	r0, r1, [sl]
   1fa18:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fa1c:	f300 81dd 	bgt.w	1fdda <_svfprintf_r+0xcd2>
   1fa20:	f10a 0a08 	add.w	sl, sl, #8
   1fa24:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1fa28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fa2c:	f000 8177 	beq.w	1fd1e <_svfprintf_r+0xc16>
   1fa30:	990e      	ldr	r1, [sp, #56]	; 0x38
   1fa32:	3301      	adds	r3, #1
   1fa34:	3901      	subs	r1, #1
   1fa36:	3401      	adds	r4, #1
   1fa38:	440a      	add	r2, r1
   1fa3a:	2b07      	cmp	r3, #7
   1fa3c:	f8ca 4000 	str.w	r4, [sl]
   1fa40:	9325      	str	r3, [sp, #148]	; 0x94
   1fa42:	f8ca 1004 	str.w	r1, [sl, #4]
   1fa46:	9226      	str	r2, [sp, #152]	; 0x98
   1fa48:	f300 815b 	bgt.w	1fd02 <_svfprintf_r+0xbfa>
   1fa4c:	f10a 0a08 	add.w	sl, sl, #8
   1fa50:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fa52:	f8ca 1004 	str.w	r1, [sl, #4]
   1fa56:	3301      	adds	r3, #1
   1fa58:	440a      	add	r2, r1
   1fa5a:	2b07      	cmp	r3, #7
   1fa5c:	a91e      	add	r1, sp, #120	; 0x78
   1fa5e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fa62:	f8ca 1000 	str.w	r1, [sl]
   1fa66:	f77f ace5 	ble.w	1f434 <_svfprintf_r+0x32c>
   1fa6a:	ee1b 1a10 	vmov	r1, s22
   1fa6e:	aa24      	add	r2, sp, #144	; 0x90
   1fa70:	4658      	mov	r0, fp
   1fa72:	f002 fae9 	bl	22048 <__ssprint_r>
   1fa76:	2800      	cmp	r0, #0
   1fa78:	d1ab      	bne.n	1f9d2 <_svfprintf_r+0x8ca>
   1fa7a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fa7c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fa80:	e4da      	b.n	1f438 <_svfprintf_r+0x330>
   1fa82:	2d10      	cmp	r5, #16
   1fa84:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   1fa88:	4e2c      	ldr	r6, [pc, #176]	; (1fb3c <_svfprintf_r+0xa34>)
   1fa8a:	dd24      	ble.n	1fad6 <_svfprintf_r+0x9ce>
   1fa8c:	9417      	str	r4, [sp, #92]	; 0x5c
   1fa8e:	2310      	movs	r3, #16
   1fa90:	ee1b 4a10 	vmov	r4, s22
   1fa94:	4608      	mov	r0, r1
   1fa96:	e004      	b.n	1faa2 <_svfprintf_r+0x99a>
   1fa98:	3d10      	subs	r5, #16
   1fa9a:	2d10      	cmp	r5, #16
   1fa9c:	f10a 0a08 	add.w	sl, sl, #8
   1faa0:	dd17      	ble.n	1fad2 <_svfprintf_r+0x9ca>
   1faa2:	3001      	adds	r0, #1
   1faa4:	3210      	adds	r2, #16
   1faa6:	2807      	cmp	r0, #7
   1faa8:	e9ca 6300 	strd	r6, r3, [sl]
   1faac:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   1fab0:	ddf2      	ble.n	1fa98 <_svfprintf_r+0x990>
   1fab2:	aa24      	add	r2, sp, #144	; 0x90
   1fab4:	4621      	mov	r1, r4
   1fab6:	4658      	mov	r0, fp
   1fab8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fabc:	f002 fac4 	bl	22048 <__ssprint_r>
   1fac0:	2800      	cmp	r0, #0
   1fac2:	d186      	bne.n	1f9d2 <_svfprintf_r+0x8ca>
   1fac4:	3d10      	subs	r5, #16
   1fac6:	2d10      	cmp	r5, #16
   1fac8:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   1facc:	f04f 0310 	mov.w	r3, #16
   1fad0:	dce7      	bgt.n	1faa2 <_svfprintf_r+0x99a>
   1fad2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   1fad4:	4601      	mov	r1, r0
   1fad6:	3101      	adds	r1, #1
   1fad8:	442a      	add	r2, r5
   1fada:	2907      	cmp	r1, #7
   1fadc:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   1fae0:	f8ca 6000 	str.w	r6, [sl]
   1fae4:	f8ca 5004 	str.w	r5, [sl, #4]
   1fae8:	f300 83bd 	bgt.w	20266 <_svfprintf_r+0x115e>
   1faec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1faf0:	f10a 0a08 	add.w	sl, sl, #8
   1faf4:	e45d      	b.n	1f3b2 <_svfprintf_r+0x2aa>
   1faf6:	f8cd 8008 	str.w	r8, [sp, #8]
   1fafa:	2a0a      	cmp	r2, #10
   1fafc:	f171 0300 	sbcs.w	r3, r1, #0
   1fb00:	f080 8345 	bcs.w	2018e <_svfprintf_r+0x1086>
   1fb04:	3230      	adds	r2, #48	; 0x30
   1fb06:	2301      	movs	r3, #1
   1fb08:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1fb0c:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   1fb10:	9305      	str	r3, [sp, #20]
   1fb12:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   1fb16:	e668      	b.n	1f7ea <_svfprintf_r+0x6e2>
   1fb18:	ee1b 1a10 	vmov	r1, s22
   1fb1c:	aa24      	add	r2, sp, #144	; 0x90
   1fb1e:	4658      	mov	r0, fp
   1fb20:	f002 fa92 	bl	22048 <__ssprint_r>
   1fb24:	2800      	cmp	r0, #0
   1fb26:	f47f af54 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fb2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fb2c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fb30:	e452      	b.n	1f3d8 <_svfprintf_r+0x2d0>
   1fb32:	bf00      	nop
   1fb34:	200035f0 	.word	0x200035f0
   1fb38:	200025fc 	.word	0x200025fc
   1fb3c:	200025ec 	.word	0x200025ec
   1fb40:	ee1b 1a10 	vmov	r1, s22
   1fb44:	aa24      	add	r2, sp, #144	; 0x90
   1fb46:	4658      	mov	r0, fp
   1fb48:	f002 fa7e 	bl	22048 <__ssprint_r>
   1fb4c:	2800      	cmp	r0, #0
   1fb4e:	f47f af40 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fb52:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fb54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fb58:	e451      	b.n	1f3fe <_svfprintf_r+0x2f6>
   1fb5a:	2c10      	cmp	r4, #16
   1fb5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fb5e:	4ebe      	ldr	r6, [pc, #760]	; (1fe58 <_svfprintf_r+0xd50>)
   1fb60:	dd1f      	ble.n	1fba2 <_svfprintf_r+0xa9a>
   1fb62:	ee1b 8a10 	vmov	r8, s22
   1fb66:	2510      	movs	r5, #16
   1fb68:	e004      	b.n	1fb74 <_svfprintf_r+0xa6c>
   1fb6a:	3c10      	subs	r4, #16
   1fb6c:	2c10      	cmp	r4, #16
   1fb6e:	f10a 0a08 	add.w	sl, sl, #8
   1fb72:	dd16      	ble.n	1fba2 <_svfprintf_r+0xa9a>
   1fb74:	3301      	adds	r3, #1
   1fb76:	3210      	adds	r2, #16
   1fb78:	2b07      	cmp	r3, #7
   1fb7a:	e9ca 6500 	strd	r6, r5, [sl]
   1fb7e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fb82:	ddf2      	ble.n	1fb6a <_svfprintf_r+0xa62>
   1fb84:	aa24      	add	r2, sp, #144	; 0x90
   1fb86:	4641      	mov	r1, r8
   1fb88:	4658      	mov	r0, fp
   1fb8a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fb8e:	f002 fa5b 	bl	22048 <__ssprint_r>
   1fb92:	2800      	cmp	r0, #0
   1fb94:	f47f af1d 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fb98:	3c10      	subs	r4, #16
   1fb9a:	2c10      	cmp	r4, #16
   1fb9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fba0:	dce8      	bgt.n	1fb74 <_svfprintf_r+0xa6c>
   1fba2:	3301      	adds	r3, #1
   1fba4:	4422      	add	r2, r4
   1fba6:	2b07      	cmp	r3, #7
   1fba8:	e9ca 6400 	strd	r6, r4, [sl]
   1fbac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fbb0:	f77f ac4b 	ble.w	1f44a <_svfprintf_r+0x342>
   1fbb4:	ee1b 1a10 	vmov	r1, s22
   1fbb8:	aa24      	add	r2, sp, #144	; 0x90
   1fbba:	4658      	mov	r0, fp
   1fbbc:	f002 fa44 	bl	22048 <__ssprint_r>
   1fbc0:	2800      	cmp	r0, #0
   1fbc2:	f47f af06 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fbc6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fbc8:	e43f      	b.n	1f44a <_svfprintf_r+0x342>
   1fbca:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1fbcc:	2900      	cmp	r1, #0
   1fbce:	f340 835a 	ble.w	20286 <_svfprintf_r+0x117e>
   1fbd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1fbd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fbd6:	429e      	cmp	r6, r3
   1fbd8:	bfa8      	it	ge
   1fbda:	461e      	movge	r6, r3
   1fbdc:	2e00      	cmp	r6, #0
   1fbde:	dd0b      	ble.n	1fbf8 <_svfprintf_r+0xaf0>
   1fbe0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fbe2:	3301      	adds	r3, #1
   1fbe4:	4432      	add	r2, r6
   1fbe6:	2b07      	cmp	r3, #7
   1fbe8:	e9ca 4600 	strd	r4, r6, [sl]
   1fbec:	9226      	str	r2, [sp, #152]	; 0x98
   1fbee:	9325      	str	r3, [sp, #148]	; 0x94
   1fbf0:	f300 8689 	bgt.w	20906 <_svfprintf_r+0x17fe>
   1fbf4:	f10a 0a08 	add.w	sl, sl, #8
   1fbf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1fbfa:	2e00      	cmp	r6, #0
   1fbfc:	bfa8      	it	ge
   1fbfe:	1bad      	subge	r5, r5, r6
   1fc00:	2d00      	cmp	r5, #0
   1fc02:	f300 8203 	bgt.w	2000c <_svfprintf_r+0xf04>
   1fc06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fc08:	f418 6f80 	tst.w	r8, #1024	; 0x400
   1fc0c:	4423      	add	r3, r4
   1fc0e:	9305      	str	r3, [sp, #20]
   1fc10:	f040 821f 	bne.w	20052 <_svfprintf_r+0xf4a>
   1fc14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1fc16:	990e      	ldr	r1, [sp, #56]	; 0x38
   1fc18:	428b      	cmp	r3, r1
   1fc1a:	db03      	blt.n	1fc24 <_svfprintf_r+0xb1c>
   1fc1c:	f018 0f01 	tst.w	r8, #1
   1fc20:	f000 84cf 	beq.w	205c2 <_svfprintf_r+0x14ba>
   1fc24:	9910      	ldr	r1, [sp, #64]	; 0x40
   1fc26:	9812      	ldr	r0, [sp, #72]	; 0x48
   1fc28:	440a      	add	r2, r1
   1fc2a:	e9ca 0100 	strd	r0, r1, [sl]
   1fc2e:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fc30:	9226      	str	r2, [sp, #152]	; 0x98
   1fc32:	3101      	adds	r1, #1
   1fc34:	2907      	cmp	r1, #7
   1fc36:	9125      	str	r1, [sp, #148]	; 0x94
   1fc38:	f300 86a5 	bgt.w	20986 <_svfprintf_r+0x187e>
   1fc3c:	f10a 0a08 	add.w	sl, sl, #8
   1fc40:	990e      	ldr	r1, [sp, #56]	; 0x38
   1fc42:	1865      	adds	r5, r4, r1
   1fc44:	1acc      	subs	r4, r1, r3
   1fc46:	9b05      	ldr	r3, [sp, #20]
   1fc48:	1aed      	subs	r5, r5, r3
   1fc4a:	42a5      	cmp	r5, r4
   1fc4c:	bfa8      	it	ge
   1fc4e:	4625      	movge	r5, r4
   1fc50:	2d00      	cmp	r5, #0
   1fc52:	dd0d      	ble.n	1fc70 <_svfprintf_r+0xb68>
   1fc54:	f8ca 3000 	str.w	r3, [sl]
   1fc58:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fc5a:	f8ca 5004 	str.w	r5, [sl, #4]
   1fc5e:	3301      	adds	r3, #1
   1fc60:	442a      	add	r2, r5
   1fc62:	2b07      	cmp	r3, #7
   1fc64:	9226      	str	r2, [sp, #152]	; 0x98
   1fc66:	9325      	str	r3, [sp, #148]	; 0x94
   1fc68:	f300 86bb 	bgt.w	209e2 <_svfprintf_r+0x18da>
   1fc6c:	f10a 0a08 	add.w	sl, sl, #8
   1fc70:	2d00      	cmp	r5, #0
   1fc72:	bfa8      	it	ge
   1fc74:	1b64      	subge	r4, r4, r5
   1fc76:	2c00      	cmp	r4, #0
   1fc78:	f77f abde 	ble.w	1f438 <_svfprintf_r+0x330>
   1fc7c:	2c10      	cmp	r4, #16
   1fc7e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fc80:	f340 837c 	ble.w	2037c <_svfprintf_r+0x1274>
   1fc84:	ee1b 6a10 	vmov	r6, s22
   1fc88:	2510      	movs	r5, #16
   1fc8a:	e005      	b.n	1fc98 <_svfprintf_r+0xb90>
   1fc8c:	f10a 0a08 	add.w	sl, sl, #8
   1fc90:	3c10      	subs	r4, #16
   1fc92:	2c10      	cmp	r4, #16
   1fc94:	f340 8372 	ble.w	2037c <_svfprintf_r+0x1274>
   1fc98:	3301      	adds	r3, #1
   1fc9a:	4970      	ldr	r1, [pc, #448]	; (1fe5c <_svfprintf_r+0xd54>)
   1fc9c:	3210      	adds	r2, #16
   1fc9e:	2b07      	cmp	r3, #7
   1fca0:	e9ca 1500 	strd	r1, r5, [sl]
   1fca4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fca8:	ddf0      	ble.n	1fc8c <_svfprintf_r+0xb84>
   1fcaa:	aa24      	add	r2, sp, #144	; 0x90
   1fcac:	4631      	mov	r1, r6
   1fcae:	4658      	mov	r0, fp
   1fcb0:	f002 f9ca 	bl	22048 <__ssprint_r>
   1fcb4:	2800      	cmp	r0, #0
   1fcb6:	f47f ae8c 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fcba:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fcbe:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fcc2:	e7e5      	b.n	1fc90 <_svfprintf_r+0xb88>
   1fcc4:	2b30      	cmp	r3, #48	; 0x30
   1fcc6:	f43f ad8b 	beq.w	1f7e0 <_svfprintf_r+0x6d8>
   1fcca:	2330      	movs	r3, #48	; 0x30
   1fccc:	3802      	subs	r0, #2
   1fcce:	f804 3c01 	strb.w	r3, [r4, #-1]
   1fcd2:	ab50      	add	r3, sp, #320	; 0x140
   1fcd4:	1a1b      	subs	r3, r3, r0
   1fcd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1fcda:	9305      	str	r3, [sp, #20]
   1fcdc:	4604      	mov	r4, r0
   1fcde:	e584      	b.n	1f7ea <_svfprintf_r+0x6e2>
   1fce0:	f018 0f01 	tst.w	r8, #1
   1fce4:	f47f ae82 	bne.w	1f9ec <_svfprintf_r+0x8e4>
   1fce8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fcea:	f8ca 4000 	str.w	r4, [sl]
   1fcee:	3301      	adds	r3, #1
   1fcf0:	3201      	adds	r2, #1
   1fcf2:	2101      	movs	r1, #1
   1fcf4:	2b07      	cmp	r3, #7
   1fcf6:	9226      	str	r2, [sp, #152]	; 0x98
   1fcf8:	9325      	str	r3, [sp, #148]	; 0x94
   1fcfa:	f8ca 1004 	str.w	r1, [sl, #4]
   1fcfe:	f77f aea5 	ble.w	1fa4c <_svfprintf_r+0x944>
   1fd02:	ee1b 1a10 	vmov	r1, s22
   1fd06:	aa24      	add	r2, sp, #144	; 0x90
   1fd08:	4658      	mov	r0, fp
   1fd0a:	f002 f99d 	bl	22048 <__ssprint_r>
   1fd0e:	2800      	cmp	r0, #0
   1fd10:	f47f ae5f 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fd14:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fd18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fd1c:	e698      	b.n	1fa50 <_svfprintf_r+0x948>
   1fd1e:	990e      	ldr	r1, [sp, #56]	; 0x38
   1fd20:	1e4c      	subs	r4, r1, #1
   1fd22:	2c00      	cmp	r4, #0
   1fd24:	f77f ae94 	ble.w	1fa50 <_svfprintf_r+0x948>
   1fd28:	2c10      	cmp	r4, #16
   1fd2a:	f340 8361 	ble.w	203f0 <_svfprintf_r+0x12e8>
   1fd2e:	ee1b 6a10 	vmov	r6, s22
   1fd32:	2510      	movs	r5, #16
   1fd34:	e005      	b.n	1fd42 <_svfprintf_r+0xc3a>
   1fd36:	f10a 0a08 	add.w	sl, sl, #8
   1fd3a:	3c10      	subs	r4, #16
   1fd3c:	2c10      	cmp	r4, #16
   1fd3e:	f340 8357 	ble.w	203f0 <_svfprintf_r+0x12e8>
   1fd42:	3301      	adds	r3, #1
   1fd44:	4945      	ldr	r1, [pc, #276]	; (1fe5c <_svfprintf_r+0xd54>)
   1fd46:	3210      	adds	r2, #16
   1fd48:	2b07      	cmp	r3, #7
   1fd4a:	e9ca 1500 	strd	r1, r5, [sl]
   1fd4e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1fd52:	ddf0      	ble.n	1fd36 <_svfprintf_r+0xc2e>
   1fd54:	aa24      	add	r2, sp, #144	; 0x90
   1fd56:	4631      	mov	r1, r6
   1fd58:	4658      	mov	r0, fp
   1fd5a:	f002 f975 	bl	22048 <__ssprint_r>
   1fd5e:	2800      	cmp	r0, #0
   1fd60:	f47f ae37 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fd64:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fd68:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fd6c:	e7e5      	b.n	1fd3a <_svfprintf_r+0xc32>
   1fd6e:	ee1b 1a10 	vmov	r1, s22
   1fd72:	aa24      	add	r2, sp, #144	; 0x90
   1fd74:	4658      	mov	r0, fp
   1fd76:	f002 f967 	bl	22048 <__ssprint_r>
   1fd7a:	2800      	cmp	r0, #0
   1fd7c:	f47f ae29 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fd80:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1fd82:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fd86:	f7ff bb44 	b.w	1f412 <_svfprintf_r+0x30a>
   1fd8a:	9b02      	ldr	r3, [sp, #8]
   1fd8c:	f013 0310 	ands.w	r3, r3, #16
   1fd90:	f040 80c1 	bne.w	1ff16 <_svfprintf_r+0xe0e>
   1fd94:	9a02      	ldr	r2, [sp, #8]
   1fd96:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   1fd9a:	f000 837a 	beq.w	20492 <_svfprintf_r+0x138a>
   1fd9e:	9808      	ldr	r0, [sp, #32]
   1fda0:	f850 2b04 	ldr.w	r2, [r0], #4
   1fda4:	9008      	str	r0, [sp, #32]
   1fda6:	4619      	mov	r1, r3
   1fda8:	b292      	uxth	r2, r2
   1fdaa:	2301      	movs	r3, #1
   1fdac:	e451      	b.n	1f652 <_svfprintf_r+0x54a>
   1fdae:	f018 0310 	ands.w	r3, r8, #16
   1fdb2:	d155      	bne.n	1fe60 <_svfprintf_r+0xd58>
   1fdb4:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   1fdb8:	f000 835d 	beq.w	20476 <_svfprintf_r+0x136e>
   1fdbc:	9808      	ldr	r0, [sp, #32]
   1fdbe:	f850 2b04 	ldr.w	r2, [r0], #4
   1fdc2:	9008      	str	r0, [sp, #32]
   1fdc4:	4619      	mov	r1, r3
   1fdc6:	b292      	uxth	r2, r2
   1fdc8:	e4a8      	b.n	1f71c <_svfprintf_r+0x614>
   1fdca:	4252      	negs	r2, r2
   1fdcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fdd0:	f8cd 8008 	str.w	r8, [sp, #8]
   1fdd4:	202d      	movs	r0, #45	; 0x2d
   1fdd6:	2301      	movs	r3, #1
   1fdd8:	e43c      	b.n	1f654 <_svfprintf_r+0x54c>
   1fdda:	ee1b 1a10 	vmov	r1, s22
   1fdde:	aa24      	add	r2, sp, #144	; 0x90
   1fde0:	4658      	mov	r0, fp
   1fde2:	f002 f931 	bl	22048 <__ssprint_r>
   1fde6:	2800      	cmp	r0, #0
   1fde8:	f47f adf3 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fdec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fdf0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fdf4:	e616      	b.n	1fa24 <_svfprintf_r+0x91c>
   1fdf6:	ee1b 1a10 	vmov	r1, s22
   1fdfa:	aa24      	add	r2, sp, #144	; 0x90
   1fdfc:	4658      	mov	r0, fp
   1fdfe:	f002 f923 	bl	22048 <__ssprint_r>
   1fe02:	2800      	cmp	r0, #0
   1fe04:	f47f ade5 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1fe08:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1fe0c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1fe10:	e5fb      	b.n	1fa0a <_svfprintf_r+0x902>
   1fe12:	f018 0f01 	tst.w	r8, #1
   1fe16:	f43f ab0f 	beq.w	1f438 <_svfprintf_r+0x330>
   1fe1a:	e52a      	b.n	1f872 <_svfprintf_r+0x76a>
   1fe1c:	9308      	str	r3, [sp, #32]
   1fe1e:	f899 3000 	ldrb.w	r3, [r9]
   1fe22:	f7ff b9cd 	b.w	1f1c0 <_svfprintf_r+0xb8>
   1fe26:	ac50      	add	r4, sp, #320	; 0x140
   1fe28:	e4df      	b.n	1f7ea <_svfprintf_r+0x6e2>
   1fe2a:	f418 7f00 	tst.w	r8, #512	; 0x200
   1fe2e:	f040 83db 	bne.w	205e8 <_svfprintf_r+0x14e0>
   1fe32:	f853 2b04 	ldr.w	r2, [r3], #4
   1fe36:	9308      	str	r3, [sp, #32]
   1fe38:	17d1      	asrs	r1, r2, #31
   1fe3a:	460b      	mov	r3, r1
   1fe3c:	f7ff bbb6 	b.w	1f5ac <_svfprintf_r+0x4a4>
   1fe40:	9b08      	ldr	r3, [sp, #32]
   1fe42:	9804      	ldr	r0, [sp, #16]
   1fe44:	f853 1b04 	ldr.w	r1, [r3], #4
   1fe48:	9308      	str	r3, [sp, #32]
   1fe4a:	17c2      	asrs	r2, r0, #31
   1fe4c:	e9c1 0200 	strd	r0, r2, [r1]
   1fe50:	464c      	mov	r4, r9
   1fe52:	f7ff b98b 	b.w	1f16c <_svfprintf_r+0x64>
   1fe56:	bf00      	nop
   1fe58:	200025ec 	.word	0x200025ec
   1fe5c:	200025fc 	.word	0x200025fc
   1fe60:	9b08      	ldr	r3, [sp, #32]
   1fe62:	f853 2b04 	ldr.w	r2, [r3], #4
   1fe66:	9308      	str	r3, [sp, #32]
   1fe68:	e458      	b.n	1f71c <_svfprintf_r+0x614>
   1fe6a:	eeb4 8b48 	vcmp.f64	d8, d8
   1fe6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fe72:	f180 8694 	bvs.w	20b9e <_svfprintf_r+0x1a96>
   1fe76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fe78:	2b61      	cmp	r3, #97	; 0x61
   1fe7a:	f000 8552 	beq.w	20922 <_svfprintf_r+0x181a>
   1fe7e:	2b41      	cmp	r3, #65	; 0x41
   1fe80:	f000 85c0 	beq.w	20a04 <_svfprintf_r+0x18fc>
   1fe84:	9b03      	ldr	r3, [sp, #12]
   1fe86:	3301      	adds	r3, #1
   1fe88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fe8a:	f023 0520 	bic.w	r5, r3, #32
   1fe8e:	f000 8480 	beq.w	20792 <_svfprintf_r+0x168a>
   1fe92:	2d47      	cmp	r5, #71	; 0x47
   1fe94:	d104      	bne.n	1fea0 <_svfprintf_r+0xd98>
   1fe96:	9b03      	ldr	r3, [sp, #12]
   1fe98:	2b00      	cmp	r3, #0
   1fe9a:	bf08      	it	eq
   1fe9c:	2301      	moveq	r3, #1
   1fe9e:	9303      	str	r3, [sp, #12]
   1fea0:	ee18 3a90 	vmov	r3, s17
   1fea4:	2b00      	cmp	r3, #0
   1fea6:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   1feaa:	4646      	mov	r6, r8
   1feac:	f2c0 8618 	blt.w	20ae0 <_svfprintf_r+0x19d8>
   1feb0:	eeb0 ab48 	vmov.f64	d10, d8
   1feb4:	2300      	movs	r3, #0
   1feb6:	4690      	mov	r8, r2
   1feb8:	9309      	str	r3, [sp, #36]	; 0x24
   1feba:	9307      	str	r3, [sp, #28]
   1febc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1febe:	3b41      	subs	r3, #65	; 0x41
   1fec0:	2b25      	cmp	r3, #37	; 0x25
   1fec2:	f200 8398 	bhi.w	205f6 <_svfprintf_r+0x14ee>
   1fec6:	e8df f013 	tbh	[pc, r3, lsl #1]
   1feca:	046f      	.short	0x046f
   1fecc:	03960396 	.word	0x03960396
   1fed0:	04680396 	.word	0x04680396
   1fed4:	0396046c 	.word	0x0396046c
   1fed8:	03960396 	.word	0x03960396
   1fedc:	03960396 	.word	0x03960396
   1fee0:	03960396 	.word	0x03960396
   1fee4:	03960396 	.word	0x03960396
   1fee8:	03960396 	.word	0x03960396
   1feec:	03960396 	.word	0x03960396
   1fef0:	03960396 	.word	0x03960396
   1fef4:	03960396 	.word	0x03960396
   1fef8:	03960396 	.word	0x03960396
   1fefc:	03960396 	.word	0x03960396
   1ff00:	03960396 	.word	0x03960396
   1ff04:	03960396 	.word	0x03960396
   1ff08:	03960396 	.word	0x03960396
   1ff0c:	03960396 	.word	0x03960396
   1ff10:	04680396 	.word	0x04680396
   1ff14:	046c      	.short	0x046c
   1ff16:	9b08      	ldr	r3, [sp, #32]
   1ff18:	f853 2b04 	ldr.w	r2, [r3], #4
   1ff1c:	9308      	str	r3, [sp, #32]
   1ff1e:	2301      	movs	r3, #1
   1ff20:	f7ff bb97 	b.w	1f652 <_svfprintf_r+0x54a>
   1ff24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ff26:	2b00      	cmp	r3, #0
   1ff28:	f43f a9cf 	beq.w	1f2ca <_svfprintf_r+0x1c2>
   1ff2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ff2e:	781b      	ldrb	r3, [r3, #0]
   1ff30:	2b00      	cmp	r3, #0
   1ff32:	f43f a9ca 	beq.w	1f2ca <_svfprintf_r+0x1c2>
   1ff36:	f899 3000 	ldrb.w	r3, [r9]
   1ff3a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   1ff3e:	f7ff b93f 	b.w	1f1c0 <_svfprintf_r+0xb8>
   1ff42:	930b      	str	r3, [sp, #44]	; 0x2c
   1ff44:	f8cd 8008 	str.w	r8, [sp, #8]
   1ff48:	f7ff bbf1 	b.w	1f72e <_svfprintf_r+0x626>
   1ff4c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ff4e:	4b9a      	ldr	r3, [pc, #616]	; (201b8 <_svfprintf_r+0x10b0>)
   1ff50:	9311      	str	r3, [sp, #68]	; 0x44
   1ff52:	f018 0120 	ands.w	r1, r8, #32
   1ff56:	f000 8105 	beq.w	20164 <_svfprintf_r+0x105c>
   1ff5a:	9b08      	ldr	r3, [sp, #32]
   1ff5c:	3307      	adds	r3, #7
   1ff5e:	f023 0307 	bic.w	r3, r3, #7
   1ff62:	6859      	ldr	r1, [r3, #4]
   1ff64:	f853 2b08 	ldr.w	r2, [r3], #8
   1ff68:	9308      	str	r3, [sp, #32]
   1ff6a:	f018 0f01 	tst.w	r8, #1
   1ff6e:	d00a      	beq.n	1ff86 <_svfprintf_r+0xe7e>
   1ff70:	ea52 0301 	orrs.w	r3, r2, r1
   1ff74:	d007      	beq.n	1ff86 <_svfprintf_r+0xe7e>
   1ff76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ff78:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   1ff7c:	2330      	movs	r3, #48	; 0x30
   1ff7e:	f048 0802 	orr.w	r8, r8, #2
   1ff82:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   1ff86:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   1ff8a:	9302      	str	r3, [sp, #8]
   1ff8c:	2302      	movs	r3, #2
   1ff8e:	f7ff bb60 	b.w	1f652 <_svfprintf_r+0x54a>
   1ff92:	930b      	str	r3, [sp, #44]	; 0x2c
   1ff94:	f7ff bbb6 	b.w	1f704 <_svfprintf_r+0x5fc>
   1ff98:	930b      	str	r3, [sp, #44]	; 0x2c
   1ff9a:	4b88      	ldr	r3, [pc, #544]	; (201bc <_svfprintf_r+0x10b4>)
   1ff9c:	9311      	str	r3, [sp, #68]	; 0x44
   1ff9e:	e7d8      	b.n	1ff52 <_svfprintf_r+0xe4a>
   1ffa0:	9b08      	ldr	r3, [sp, #32]
   1ffa2:	2101      	movs	r1, #1
   1ffa4:	f853 2b04 	ldr.w	r2, [r3], #4
   1ffa8:	9102      	str	r1, [sp, #8]
   1ffaa:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   1ffae:	9308      	str	r3, [sp, #32]
   1ffb0:	9105      	str	r1, [sp, #20]
   1ffb2:	ac37      	add	r4, sp, #220	; 0xdc
   1ffb4:	f7ff baaf 	b.w	1f516 <_svfprintf_r+0x40e>
   1ffb8:	ee1b 1a10 	vmov	r1, s22
   1ffbc:	aa24      	add	r2, sp, #144	; 0x90
   1ffbe:	4658      	mov	r0, fp
   1ffc0:	f002 f842 	bl	22048 <__ssprint_r>
   1ffc4:	2800      	cmp	r0, #0
   1ffc6:	f47f ad04 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   1ffca:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1ffcc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1ffd0:	e45d      	b.n	1f88e <_svfprintf_r+0x786>
   1ffd2:	9b03      	ldr	r3, [sp, #12]
   1ffd4:	9407      	str	r4, [sp, #28]
   1ffd6:	2b06      	cmp	r3, #6
   1ffd8:	4622      	mov	r2, r4
   1ffda:	bf28      	it	cs
   1ffdc:	2306      	movcs	r3, #6
   1ffde:	9403      	str	r4, [sp, #12]
   1ffe0:	4621      	mov	r1, r4
   1ffe2:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   1ffe6:	4c76      	ldr	r4, [pc, #472]	; (201c0 <_svfprintf_r+0x10b8>)
   1ffe8:	9302      	str	r3, [sp, #8]
   1ffea:	9305      	str	r3, [sp, #20]
   1ffec:	920f      	str	r2, [sp, #60]	; 0x3c
   1ffee:	f7ff ba6c 	b.w	1f4ca <_svfprintf_r+0x3c2>
   1fff2:	2140      	movs	r1, #64	; 0x40
   1fff4:	4658      	mov	r0, fp
   1fff6:	f7f9 fca9 	bl	1994c <_malloc_r>
   1fffa:	6020      	str	r0, [r4, #0]
   1fffc:	6120      	str	r0, [r4, #16]
   1fffe:	2800      	cmp	r0, #0
   20000:	f000 860f 	beq.w	20c22 <_svfprintf_r+0x1b1a>
   20004:	2340      	movs	r3, #64	; 0x40
   20006:	6163      	str	r3, [r4, #20]
   20008:	f7ff b89e 	b.w	1f148 <_svfprintf_r+0x40>
   2000c:	2d10      	cmp	r5, #16
   2000e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20010:	f340 825d 	ble.w	204ce <_svfprintf_r+0x13c6>
   20014:	4651      	mov	r1, sl
   20016:	2610      	movs	r6, #16
   20018:	ee1b aa10 	vmov	sl, s22
   2001c:	e004      	b.n	20028 <_svfprintf_r+0xf20>
   2001e:	3108      	adds	r1, #8
   20020:	3d10      	subs	r5, #16
   20022:	2d10      	cmp	r5, #16
   20024:	f340 8252 	ble.w	204cc <_svfprintf_r+0x13c4>
   20028:	3301      	adds	r3, #1
   2002a:	4866      	ldr	r0, [pc, #408]	; (201c4 <_svfprintf_r+0x10bc>)
   2002c:	3210      	adds	r2, #16
   2002e:	2b07      	cmp	r3, #7
   20030:	e9c1 0600 	strd	r0, r6, [r1]
   20034:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20038:	ddf1      	ble.n	2001e <_svfprintf_r+0xf16>
   2003a:	aa24      	add	r2, sp, #144	; 0x90
   2003c:	4651      	mov	r1, sl
   2003e:	4658      	mov	r0, fp
   20040:	f002 f802 	bl	22048 <__ssprint_r>
   20044:	2800      	cmp	r0, #0
   20046:	f47f acc4 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   2004a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   2004e:	a927      	add	r1, sp, #156	; 0x9c
   20050:	e7e6      	b.n	20020 <_svfprintf_r+0xf18>
   20052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20054:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   20058:	18e3      	adds	r3, r4, r3
   2005a:	9303      	str	r3, [sp, #12]
   2005c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2005e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   20062:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   20064:	9d05      	ldr	r5, [sp, #20]
   20066:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   2006a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   2006e:	940b      	str	r4, [sp, #44]	; 0x2c
   20070:	ee1b 1a10 	vmov	r1, s22
   20074:	4650      	mov	r0, sl
   20076:	2b00      	cmp	r3, #0
   20078:	d034      	beq.n	200e4 <_svfprintf_r+0xfdc>
   2007a:	f1b8 0f00 	cmp.w	r8, #0
   2007e:	d135      	bne.n	200ec <_svfprintf_r+0xfe4>
   20080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20082:	3b01      	subs	r3, #1
   20084:	3e01      	subs	r6, #1
   20086:	930d      	str	r3, [sp, #52]	; 0x34
   20088:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2008a:	e9c0 3900 	strd	r3, r9, [r0]
   2008e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20090:	3301      	adds	r3, #1
   20092:	444a      	add	r2, r9
   20094:	2b07      	cmp	r3, #7
   20096:	9226      	str	r2, [sp, #152]	; 0x98
   20098:	9325      	str	r3, [sp, #148]	; 0x94
   2009a:	dc6c      	bgt.n	20176 <_svfprintf_r+0x106e>
   2009c:	3008      	adds	r0, #8
   2009e:	9b03      	ldr	r3, [sp, #12]
   200a0:	f896 c000 	ldrb.w	ip, [r6]
   200a4:	1b5b      	subs	r3, r3, r5
   200a6:	4563      	cmp	r3, ip
   200a8:	bfa8      	it	ge
   200aa:	4663      	movge	r3, ip
   200ac:	2b00      	cmp	r3, #0
   200ae:	469a      	mov	sl, r3
   200b0:	dd0c      	ble.n	200cc <_svfprintf_r+0xfc4>
   200b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   200b4:	3401      	adds	r4, #1
   200b6:	441a      	add	r2, r3
   200b8:	2c07      	cmp	r4, #7
   200ba:	e9c0 5300 	strd	r5, r3, [r0]
   200be:	9226      	str	r2, [sp, #152]	; 0x98
   200c0:	9425      	str	r4, [sp, #148]	; 0x94
   200c2:	f300 8177 	bgt.w	203b4 <_svfprintf_r+0x12ac>
   200c6:	f896 c000 	ldrb.w	ip, [r6]
   200ca:	3008      	adds	r0, #8
   200cc:	f1ba 0f00 	cmp.w	sl, #0
   200d0:	bfac      	ite	ge
   200d2:	ebac 040a 	subge.w	r4, ip, sl
   200d6:	4664      	movlt	r4, ip
   200d8:	2c00      	cmp	r4, #0
   200da:	dc0a      	bgt.n	200f2 <_svfprintf_r+0xfea>
   200dc:	4465      	add	r5, ip
   200de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   200e0:	2b00      	cmp	r3, #0
   200e2:	d1ca      	bne.n	2007a <_svfprintf_r+0xf72>
   200e4:	f1b8 0f00 	cmp.w	r8, #0
   200e8:	f000 83ac 	beq.w	20844 <_svfprintf_r+0x173c>
   200ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   200f0:	e7ca      	b.n	20088 <_svfprintf_r+0xf80>
   200f2:	2c10      	cmp	r4, #16
   200f4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   200f8:	dd24      	ble.n	20144 <_svfprintf_r+0x103c>
   200fa:	9505      	str	r5, [sp, #20]
   200fc:	f04f 0a10 	mov.w	sl, #16
   20100:	4663      	mov	r3, ip
   20102:	460d      	mov	r5, r1
   20104:	e004      	b.n	20110 <_svfprintf_r+0x1008>
   20106:	3c10      	subs	r4, #16
   20108:	2c10      	cmp	r4, #16
   2010a:	f100 0008 	add.w	r0, r0, #8
   2010e:	dd16      	ble.n	2013e <_svfprintf_r+0x1036>
   20110:	3301      	adds	r3, #1
   20112:	492c      	ldr	r1, [pc, #176]	; (201c4 <_svfprintf_r+0x10bc>)
   20114:	3210      	adds	r2, #16
   20116:	2b07      	cmp	r3, #7
   20118:	e9c0 1a00 	strd	r1, sl, [r0]
   2011c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20120:	ddf1      	ble.n	20106 <_svfprintf_r+0xffe>
   20122:	aa24      	add	r2, sp, #144	; 0x90
   20124:	4629      	mov	r1, r5
   20126:	4658      	mov	r0, fp
   20128:	f001 ff8e 	bl	22048 <__ssprint_r>
   2012c:	2800      	cmp	r0, #0
   2012e:	f47f ac50 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20132:	3c10      	subs	r4, #16
   20134:	2c10      	cmp	r4, #16
   20136:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   2013a:	a827      	add	r0, sp, #156	; 0x9c
   2013c:	dce8      	bgt.n	20110 <_svfprintf_r+0x1008>
   2013e:	4629      	mov	r1, r5
   20140:	9d05      	ldr	r5, [sp, #20]
   20142:	469c      	mov	ip, r3
   20144:	f10c 0301 	add.w	r3, ip, #1
   20148:	4422      	add	r2, r4
   2014a:	6044      	str	r4, [r0, #4]
   2014c:	2b07      	cmp	r3, #7
   2014e:	4c1d      	ldr	r4, [pc, #116]	; (201c4 <_svfprintf_r+0x10bc>)
   20150:	6004      	str	r4, [r0, #0]
   20152:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20156:	f300 83c6 	bgt.w	208e6 <_svfprintf_r+0x17de>
   2015a:	f896 c000 	ldrb.w	ip, [r6]
   2015e:	3008      	adds	r0, #8
   20160:	4465      	add	r5, ip
   20162:	e7bc      	b.n	200de <_svfprintf_r+0xfd6>
   20164:	f018 0310 	ands.w	r3, r8, #16
   20168:	f000 80c2 	beq.w	202f0 <_svfprintf_r+0x11e8>
   2016c:	9b08      	ldr	r3, [sp, #32]
   2016e:	f853 2b04 	ldr.w	r2, [r3], #4
   20172:	9308      	str	r3, [sp, #32]
   20174:	e6f9      	b.n	1ff6a <_svfprintf_r+0xe62>
   20176:	aa24      	add	r2, sp, #144	; 0x90
   20178:	4658      	mov	r0, fp
   2017a:	9105      	str	r1, [sp, #20]
   2017c:	f001 ff64 	bl	22048 <__ssprint_r>
   20180:	2800      	cmp	r0, #0
   20182:	f47f ac26 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20186:	9a26      	ldr	r2, [sp, #152]	; 0x98
   20188:	9905      	ldr	r1, [sp, #20]
   2018a:	a827      	add	r0, sp, #156	; 0x9c
   2018c:	e787      	b.n	2009e <_svfprintf_r+0xf96>
   2018e:	9802      	ldr	r0, [sp, #8]
   20190:	f8cd a01c 	str.w	sl, [sp, #28]
   20194:	ac50      	add	r4, sp, #320	; 0x140
   20196:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   2019a:	2500      	movs	r5, #0
   2019c:	ee0a ba10 	vmov	s20, fp
   201a0:	4b09      	ldr	r3, [pc, #36]	; (201c8 <_svfprintf_r+0x10c0>)
   201a2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   201a6:	f8cd 9014 	str.w	r9, [sp, #20]
   201aa:	46a3      	mov	fp, r4
   201ac:	f04f 0805 	mov.w	r8, #5
   201b0:	46ac      	mov	ip, r5
   201b2:	4604      	mov	r4, r0
   201b4:	e010      	b.n	201d8 <_svfprintf_r+0x10d0>
   201b6:	bf00      	nop
   201b8:	20008d04 	.word	0x20008d04
   201bc:	20008d18 	.word	0x20008d18
   201c0:	20008d2c 	.word	0x20008d2c
   201c4:	200025fc 	.word	0x200025fc
   201c8:	cccccccd 	.word	0xcccccccd
   201cc:	2a0a      	cmp	r2, #10
   201ce:	f171 0100 	sbcs.w	r1, r1, #0
   201d2:	d336      	bcc.n	20242 <_svfprintf_r+0x113a>
   201d4:	464a      	mov	r2, r9
   201d6:	4631      	mov	r1, r6
   201d8:	1850      	adds	r0, r2, r1
   201da:	f140 0000 	adc.w	r0, r0, #0
   201de:	fba3 5600 	umull	r5, r6, r3, r0
   201e2:	f026 0503 	bic.w	r5, r6, #3
   201e6:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   201ea:	1b40      	subs	r0, r0, r5
   201ec:	1a15      	subs	r5, r2, r0
   201ee:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   201f2:	f161 0e00 	sbc.w	lr, r1, #0
   201f6:	fb06 f605 	mul.w	r6, r6, r5
   201fa:	fba5 9503 	umull	r9, r5, r5, r3
   201fe:	fb03 660e 	mla	r6, r3, lr, r6
   20202:	f009 0e01 	and.w	lr, r9, #1
   20206:	442e      	add	r6, r5
   20208:	fbae 5e08 	umull	r5, lr, lr, r8
   2020c:	182d      	adds	r5, r5, r0
   2020e:	ea4f 0959 	mov.w	r9, r9, lsr #1
   20212:	3530      	adds	r5, #48	; 0x30
   20214:	f80b 5c01 	strb.w	r5, [fp, #-1]
   20218:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   2021c:	f10c 0c01 	add.w	ip, ip, #1
   20220:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   20224:	0876      	lsrs	r6, r6, #1
   20226:	2c00      	cmp	r4, #0
   20228:	d0d0      	beq.n	201cc <_svfprintf_r+0x10c4>
   2022a:	f89a 0000 	ldrb.w	r0, [sl]
   2022e:	4584      	cmp	ip, r0
   20230:	d1cc      	bne.n	201cc <_svfprintf_r+0x10c4>
   20232:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   20236:	d0c9      	beq.n	201cc <_svfprintf_r+0x10c4>
   20238:	2a0a      	cmp	r2, #10
   2023a:	f171 0100 	sbcs.w	r1, r1, #0
   2023e:	f080 818f 	bcs.w	20560 <_svfprintf_r+0x1458>
   20242:	465c      	mov	r4, fp
   20244:	ab50      	add	r3, sp, #320	; 0x140
   20246:	1b1b      	subs	r3, r3, r4
   20248:	f8dd 9014 	ldr.w	r9, [sp, #20]
   2024c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   20250:	ee1a ba10 	vmov	fp, s20
   20254:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20258:	f8dd 8008 	ldr.w	r8, [sp, #8]
   2025c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   20260:	9305      	str	r3, [sp, #20]
   20262:	f7ff bac2 	b.w	1f7ea <_svfprintf_r+0x6e2>
   20266:	ee1b 1a10 	vmov	r1, s22
   2026a:	aa24      	add	r2, sp, #144	; 0x90
   2026c:	4658      	mov	r0, fp
   2026e:	f001 feeb 	bl	22048 <__ssprint_r>
   20272:	2800      	cmp	r0, #0
   20274:	f47f abad 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20278:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2027c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2027e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20282:	f7ff b896 	b.w	1f3b2 <_svfprintf_r+0x2aa>
   20286:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20288:	48be      	ldr	r0, [pc, #760]	; (20584 <_svfprintf_r+0x147c>)
   2028a:	f8ca 0000 	str.w	r0, [sl]
   2028e:	3301      	adds	r3, #1
   20290:	3201      	adds	r2, #1
   20292:	2001      	movs	r0, #1
   20294:	2b07      	cmp	r3, #7
   20296:	9226      	str	r2, [sp, #152]	; 0x98
   20298:	9325      	str	r3, [sp, #148]	; 0x94
   2029a:	f8ca 0004 	str.w	r0, [sl, #4]
   2029e:	f300 8177 	bgt.w	20590 <_svfprintf_r+0x1488>
   202a2:	f10a 0a08 	add.w	sl, sl, #8
   202a6:	2900      	cmp	r1, #0
   202a8:	f040 80af 	bne.w	2040a <_svfprintf_r+0x1302>
   202ac:	990e      	ldr	r1, [sp, #56]	; 0x38
   202ae:	f008 0301 	and.w	r3, r8, #1
   202b2:	430b      	orrs	r3, r1
   202b4:	f43f a8c0 	beq.w	1f438 <_svfprintf_r+0x330>
   202b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   202ba:	9912      	ldr	r1, [sp, #72]	; 0x48
   202bc:	441a      	add	r2, r3
   202be:	e9ca 1300 	strd	r1, r3, [sl]
   202c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   202c4:	9226      	str	r2, [sp, #152]	; 0x98
   202c6:	3301      	adds	r3, #1
   202c8:	2b07      	cmp	r3, #7
   202ca:	9325      	str	r3, [sp, #148]	; 0x94
   202cc:	f300 8252 	bgt.w	20774 <_svfprintf_r+0x166c>
   202d0:	f10a 0a08 	add.w	sl, sl, #8
   202d4:	990e      	ldr	r1, [sp, #56]	; 0x38
   202d6:	f8ca 4000 	str.w	r4, [sl]
   202da:	3301      	adds	r3, #1
   202dc:	440a      	add	r2, r1
   202de:	2b07      	cmp	r3, #7
   202e0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   202e4:	f8ca 1004 	str.w	r1, [sl, #4]
   202e8:	f77f a8a4 	ble.w	1f434 <_svfprintf_r+0x32c>
   202ec:	f7ff bbbd 	b.w	1fa6a <_svfprintf_r+0x962>
   202f0:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   202f4:	f000 80dd 	beq.w	204b2 <_svfprintf_r+0x13aa>
   202f8:	9808      	ldr	r0, [sp, #32]
   202fa:	f850 2b04 	ldr.w	r2, [r0], #4
   202fe:	9008      	str	r0, [sp, #32]
   20300:	4619      	mov	r1, r3
   20302:	b292      	uxth	r2, r2
   20304:	e631      	b.n	1ff6a <_svfprintf_r+0xe62>
   20306:	ee1b 1a10 	vmov	r1, s22
   2030a:	aa24      	add	r2, sp, #144	; 0x90
   2030c:	4658      	mov	r0, fp
   2030e:	f001 fe9b 	bl	22048 <__ssprint_r>
   20312:	2800      	cmp	r0, #0
   20314:	f47f ab5d 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20318:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2031a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2031e:	f7ff baa3 	b.w	1f868 <_svfprintf_r+0x760>
   20322:	ae22      	add	r6, sp, #136	; 0x88
   20324:	2208      	movs	r2, #8
   20326:	2100      	movs	r1, #0
   20328:	4630      	mov	r0, r6
   2032a:	941d      	str	r4, [sp, #116]	; 0x74
   2032c:	f7fb fc14 	bl	1bb58 <memset>
   20330:	9b03      	ldr	r3, [sp, #12]
   20332:	1c5a      	adds	r2, r3, #1
   20334:	f000 80db 	beq.w	204ee <_svfprintf_r+0x13e6>
   20338:	2500      	movs	r5, #0
   2033a:	f8cd 9008 	str.w	r9, [sp, #8]
   2033e:	f8cd 801c 	str.w	r8, [sp, #28]
   20342:	4699      	mov	r9, r3
   20344:	46a8      	mov	r8, r5
   20346:	e00c      	b.n	20362 <_svfprintf_r+0x125a>
   20348:	a937      	add	r1, sp, #220	; 0xdc
   2034a:	4658      	mov	r0, fp
   2034c:	f001 fdea 	bl	21f24 <_wcrtomb_r>
   20350:	1c43      	adds	r3, r0, #1
   20352:	4440      	add	r0, r8
   20354:	f000 83c8 	beq.w	20ae8 <_svfprintf_r+0x19e0>
   20358:	4548      	cmp	r0, r9
   2035a:	dc08      	bgt.n	2036e <_svfprintf_r+0x1266>
   2035c:	f000 8418 	beq.w	20b90 <_svfprintf_r+0x1a88>
   20360:	4680      	mov	r8, r0
   20362:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20364:	5952      	ldr	r2, [r2, r5]
   20366:	4633      	mov	r3, r6
   20368:	3504      	adds	r5, #4
   2036a:	2a00      	cmp	r2, #0
   2036c:	d1ec      	bne.n	20348 <_svfprintf_r+0x1240>
   2036e:	f8cd 8014 	str.w	r8, [sp, #20]
   20372:	f8dd 9008 	ldr.w	r9, [sp, #8]
   20376:	f8dd 801c 	ldr.w	r8, [sp, #28]
   2037a:	e0c5      	b.n	20508 <_svfprintf_r+0x1400>
   2037c:	3301      	adds	r3, #1
   2037e:	4982      	ldr	r1, [pc, #520]	; (20588 <_svfprintf_r+0x1480>)
   20380:	f8ca 4004 	str.w	r4, [sl, #4]
   20384:	4422      	add	r2, r4
   20386:	2b07      	cmp	r3, #7
   20388:	f8ca 1000 	str.w	r1, [sl]
   2038c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20390:	f77f a850 	ble.w	1f434 <_svfprintf_r+0x32c>
   20394:	f7ff bb69 	b.w	1fa6a <_svfprintf_r+0x962>
   20398:	ee1b 1a10 	vmov	r1, s22
   2039c:	aa24      	add	r2, sp, #144	; 0x90
   2039e:	4658      	mov	r0, fp
   203a0:	f001 fe52 	bl	22048 <__ssprint_r>
   203a4:	2800      	cmp	r0, #0
   203a6:	f47f ab14 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   203aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   203ac:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   203b0:	f7ff b829 	b.w	1f406 <_svfprintf_r+0x2fe>
   203b4:	aa24      	add	r2, sp, #144	; 0x90
   203b6:	4658      	mov	r0, fp
   203b8:	9105      	str	r1, [sp, #20]
   203ba:	f001 fe45 	bl	22048 <__ssprint_r>
   203be:	2800      	cmp	r0, #0
   203c0:	f47f ab07 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   203c4:	f896 c000 	ldrb.w	ip, [r6]
   203c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   203ca:	9905      	ldr	r1, [sp, #20]
   203cc:	a827      	add	r0, sp, #156	; 0x9c
   203ce:	e67d      	b.n	200cc <_svfprintf_r+0xfc4>
   203d0:	2b01      	cmp	r3, #1
   203d2:	f8cd 8008 	str.w	r8, [sp, #8]
   203d6:	f47f a9f3 	bne.w	1f7c0 <_svfprintf_r+0x6b8>
   203da:	f7ff bb93 	b.w	1fb04 <_svfprintf_r+0x9fc>
   203de:	9b08      	ldr	r3, [sp, #32]
   203e0:	9904      	ldr	r1, [sp, #16]
   203e2:	f853 2b04 	ldr.w	r2, [r3], #4
   203e6:	464c      	mov	r4, r9
   203e8:	6011      	str	r1, [r2, #0]
   203ea:	9308      	str	r3, [sp, #32]
   203ec:	f7fe bebe 	b.w	1f16c <_svfprintf_r+0x64>
   203f0:	3301      	adds	r3, #1
   203f2:	4965      	ldr	r1, [pc, #404]	; (20588 <_svfprintf_r+0x1480>)
   203f4:	f8ca 4004 	str.w	r4, [sl, #4]
   203f8:	4422      	add	r2, r4
   203fa:	2b07      	cmp	r3, #7
   203fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20400:	f8ca 1000 	str.w	r1, [sl]
   20404:	f77f ab22 	ble.w	1fa4c <_svfprintf_r+0x944>
   20408:	e47b      	b.n	1fd02 <_svfprintf_r+0xbfa>
   2040a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2040c:	9812      	ldr	r0, [sp, #72]	; 0x48
   2040e:	441a      	add	r2, r3
   20410:	e9ca 0300 	strd	r0, r3, [sl]
   20414:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20416:	9226      	str	r2, [sp, #152]	; 0x98
   20418:	3301      	adds	r3, #1
   2041a:	2b07      	cmp	r3, #7
   2041c:	9325      	str	r3, [sp, #148]	; 0x94
   2041e:	f300 81a9 	bgt.w	20774 <_svfprintf_r+0x166c>
   20422:	f10a 0a08 	add.w	sl, sl, #8
   20426:	2900      	cmp	r1, #0
   20428:	f6bf af54 	bge.w	202d4 <_svfprintf_r+0x11cc>
   2042c:	424d      	negs	r5, r1
   2042e:	3110      	adds	r1, #16
   20430:	f280 830f 	bge.w	20a52 <_svfprintf_r+0x194a>
   20434:	ee1b 1a10 	vmov	r1, s22
   20438:	2610      	movs	r6, #16
   2043a:	e005      	b.n	20448 <_svfprintf_r+0x1340>
   2043c:	f10a 0a08 	add.w	sl, sl, #8
   20440:	3d10      	subs	r5, #16
   20442:	2d10      	cmp	r5, #16
   20444:	f340 8305 	ble.w	20a52 <_svfprintf_r+0x194a>
   20448:	3301      	adds	r3, #1
   2044a:	484f      	ldr	r0, [pc, #316]	; (20588 <_svfprintf_r+0x1480>)
   2044c:	3210      	adds	r2, #16
   2044e:	2b07      	cmp	r3, #7
   20450:	e9ca 0600 	strd	r0, r6, [sl]
   20454:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20458:	ddf0      	ble.n	2043c <_svfprintf_r+0x1334>
   2045a:	aa24      	add	r2, sp, #144	; 0x90
   2045c:	4658      	mov	r0, fp
   2045e:	9103      	str	r1, [sp, #12]
   20460:	f001 fdf2 	bl	22048 <__ssprint_r>
   20464:	2800      	cmp	r0, #0
   20466:	f47f aab4 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   2046a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   2046e:	9903      	ldr	r1, [sp, #12]
   20470:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20474:	e7e4      	b.n	20440 <_svfprintf_r+0x1338>
   20476:	9b08      	ldr	r3, [sp, #32]
   20478:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   2047c:	bf1a      	itte	ne
   2047e:	4611      	movne	r1, r2
   20480:	f853 2b04 	ldrne.w	r2, [r3], #4
   20484:	f853 2b04 	ldreq.w	r2, [r3], #4
   20488:	9308      	str	r3, [sp, #32]
   2048a:	bf18      	it	ne
   2048c:	b2d2      	uxtbne	r2, r2
   2048e:	f7ff b945 	b.w	1f71c <_svfprintf_r+0x614>
   20492:	9b02      	ldr	r3, [sp, #8]
   20494:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   20498:	9b08      	ldr	r3, [sp, #32]
   2049a:	bf1a      	itte	ne
   2049c:	4611      	movne	r1, r2
   2049e:	f853 2b04 	ldrne.w	r2, [r3], #4
   204a2:	f853 2b04 	ldreq.w	r2, [r3], #4
   204a6:	9308      	str	r3, [sp, #32]
   204a8:	bf18      	it	ne
   204aa:	b2d2      	uxtbne	r2, r2
   204ac:	2301      	movs	r3, #1
   204ae:	f7ff b8d0 	b.w	1f652 <_svfprintf_r+0x54a>
   204b2:	9b08      	ldr	r3, [sp, #32]
   204b4:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   204b8:	bf1a      	itte	ne
   204ba:	4611      	movne	r1, r2
   204bc:	f853 2b04 	ldrne.w	r2, [r3], #4
   204c0:	f853 2b04 	ldreq.w	r2, [r3], #4
   204c4:	9308      	str	r3, [sp, #32]
   204c6:	bf18      	it	ne
   204c8:	b2d2      	uxtbne	r2, r2
   204ca:	e54e      	b.n	1ff6a <_svfprintf_r+0xe62>
   204cc:	468a      	mov	sl, r1
   204ce:	3301      	adds	r3, #1
   204d0:	492d      	ldr	r1, [pc, #180]	; (20588 <_svfprintf_r+0x1480>)
   204d2:	f8ca 5004 	str.w	r5, [sl, #4]
   204d6:	442a      	add	r2, r5
   204d8:	2b07      	cmp	r3, #7
   204da:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   204de:	f8ca 1000 	str.w	r1, [sl]
   204e2:	f300 8139 	bgt.w	20758 <_svfprintf_r+0x1650>
   204e6:	f10a 0a08 	add.w	sl, sl, #8
   204ea:	f7ff bb8c 	b.w	1fc06 <_svfprintf_r+0xafe>
   204ee:	2300      	movs	r3, #0
   204f0:	4619      	mov	r1, r3
   204f2:	9600      	str	r6, [sp, #0]
   204f4:	aa1d      	add	r2, sp, #116	; 0x74
   204f6:	4658      	mov	r0, fp
   204f8:	f001 fd66 	bl	21fc8 <_wcsrtombs_r>
   204fc:	4603      	mov	r3, r0
   204fe:	3301      	adds	r3, #1
   20500:	9005      	str	r0, [sp, #20]
   20502:	f000 82f1 	beq.w	20ae8 <_svfprintf_r+0x19e0>
   20506:	941d      	str	r4, [sp, #116]	; 0x74
   20508:	9b05      	ldr	r3, [sp, #20]
   2050a:	2b00      	cmp	r3, #0
   2050c:	d04e      	beq.n	205ac <_svfprintf_r+0x14a4>
   2050e:	2b63      	cmp	r3, #99	; 0x63
   20510:	f300 8118 	bgt.w	20744 <_svfprintf_r+0x163c>
   20514:	2300      	movs	r3, #0
   20516:	9307      	str	r3, [sp, #28]
   20518:	ac37      	add	r4, sp, #220	; 0xdc
   2051a:	2208      	movs	r2, #8
   2051c:	2100      	movs	r1, #0
   2051e:	4630      	mov	r0, r6
   20520:	f7fb fb1a 	bl	1bb58 <memset>
   20524:	9d05      	ldr	r5, [sp, #20]
   20526:	9600      	str	r6, [sp, #0]
   20528:	462b      	mov	r3, r5
   2052a:	aa1d      	add	r2, sp, #116	; 0x74
   2052c:	4621      	mov	r1, r4
   2052e:	4658      	mov	r0, fp
   20530:	f001 fd4a 	bl	21fc8 <_wcsrtombs_r>
   20534:	4285      	cmp	r5, r0
   20536:	f040 837c 	bne.w	20c32 <_svfprintf_r+0x1b2a>
   2053a:	9a05      	ldr	r2, [sp, #20]
   2053c:	2300      	movs	r3, #0
   2053e:	54a3      	strb	r3, [r4, r2]
   20540:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   20544:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   20548:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2054c:	9303      	str	r3, [sp, #12]
   2054e:	9202      	str	r2, [sp, #8]
   20550:	930f      	str	r3, [sp, #60]	; 0x3c
   20552:	f7fe bfba 	b.w	1f4ca <_svfprintf_r+0x3c2>
   20556:	212d      	movs	r1, #45	; 0x2d
   20558:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   2055c:	f7fe bfa4 	b.w	1f4a8 <_svfprintf_r+0x3a0>
   20560:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20562:	9915      	ldr	r1, [sp, #84]	; 0x54
   20564:	ebab 0b03 	sub.w	fp, fp, r3
   20568:	461a      	mov	r2, r3
   2056a:	4658      	mov	r0, fp
   2056c:	f7fb fc20 	bl	1bdb0 <strncpy>
   20570:	f89a 2001 	ldrb.w	r2, [sl, #1]
   20574:	4b05      	ldr	r3, [pc, #20]	; (2058c <_svfprintf_r+0x1484>)
   20576:	b10a      	cbz	r2, 2057c <_svfprintf_r+0x1474>
   20578:	f10a 0a01 	add.w	sl, sl, #1
   2057c:	f04f 0c00 	mov.w	ip, #0
   20580:	e628      	b.n	201d4 <_svfprintf_r+0x10cc>
   20582:	bf00      	nop
   20584:	200035f0 	.word	0x200035f0
   20588:	200025fc 	.word	0x200025fc
   2058c:	cccccccd 	.word	0xcccccccd
   20590:	ee1b 1a10 	vmov	r1, s22
   20594:	aa24      	add	r2, sp, #144	; 0x90
   20596:	4658      	mov	r0, fp
   20598:	f001 fd56 	bl	22048 <__ssprint_r>
   2059c:	2800      	cmp	r0, #0
   2059e:	f47f aa18 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   205a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   205a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   205a6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   205aa:	e67c      	b.n	202a6 <_svfprintf_r+0x119e>
   205ac:	9b05      	ldr	r3, [sp, #20]
   205ae:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   205b2:	930f      	str	r3, [sp, #60]	; 0x3c
   205b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   205b8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   205bc:	9307      	str	r3, [sp, #28]
   205be:	f7fe bf84 	b.w	1f4ca <_svfprintf_r+0x3c2>
   205c2:	990e      	ldr	r1, [sp, #56]	; 0x38
   205c4:	9805      	ldr	r0, [sp, #20]
   205c6:	1865      	adds	r5, r4, r1
   205c8:	1a2d      	subs	r5, r5, r0
   205ca:	1acc      	subs	r4, r1, r3
   205cc:	42a5      	cmp	r5, r4
   205ce:	bfa8      	it	ge
   205d0:	4625      	movge	r5, r4
   205d2:	f7ff bb4d 	b.w	1fc70 <_svfprintf_r+0xb68>
   205d6:	9b08      	ldr	r3, [sp, #32]
   205d8:	9904      	ldr	r1, [sp, #16]
   205da:	f853 2b04 	ldr.w	r2, [r3], #4
   205de:	9308      	str	r3, [sp, #32]
   205e0:	8011      	strh	r1, [r2, #0]
   205e2:	464c      	mov	r4, r9
   205e4:	f7fe bdc2 	b.w	1f16c <_svfprintf_r+0x64>
   205e8:	f913 2b04 	ldrsb.w	r2, [r3], #4
   205ec:	9308      	str	r3, [sp, #32]
   205ee:	17d1      	asrs	r1, r2, #31
   205f0:	460b      	mov	r3, r1
   205f2:	f7fe bfdb 	b.w	1f5ac <_svfprintf_r+0x4a4>
   205f6:	9a03      	ldr	r2, [sp, #12]
   205f8:	2102      	movs	r1, #2
   205fa:	ab22      	add	r3, sp, #136	; 0x88
   205fc:	9301      	str	r3, [sp, #4]
   205fe:	ab1d      	add	r3, sp, #116	; 0x74
   20600:	9300      	str	r3, [sp, #0]
   20602:	4658      	mov	r0, fp
   20604:	ab1b      	add	r3, sp, #108	; 0x6c
   20606:	eeb0 0b4a 	vmov.f64	d0, d10
   2060a:	9202      	str	r2, [sp, #8]
   2060c:	f000 fe08 	bl	21220 <_dtoa_r>
   20610:	2d47      	cmp	r5, #71	; 0x47
   20612:	9a02      	ldr	r2, [sp, #8]
   20614:	4604      	mov	r4, r0
   20616:	f000 8161 	beq.w	208dc <_svfprintf_r+0x17d4>
   2061a:	2d46      	cmp	r5, #70	; 0x46
   2061c:	4410      	add	r0, r2
   2061e:	d105      	bne.n	2062c <_svfprintf_r+0x1524>
   20620:	7823      	ldrb	r3, [r4, #0]
   20622:	2b30      	cmp	r3, #48	; 0x30
   20624:	f000 826f 	beq.w	20b06 <_svfprintf_r+0x19fe>
   20628:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2062a:	4410      	add	r0, r2
   2062c:	eeb5 ab40 	vcmp.f64	d10, #0.0
   20630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20634:	f040 8146 	bne.w	208c4 <_svfprintf_r+0x17bc>
   20638:	4603      	mov	r3, r0
   2063a:	1b1b      	subs	r3, r3, r4
   2063c:	930e      	str	r3, [sp, #56]	; 0x38
   2063e:	2d47      	cmp	r5, #71	; 0x47
   20640:	f000 8110 	beq.w	20864 <_svfprintf_r+0x175c>
   20644:	2d46      	cmp	r5, #70	; 0x46
   20646:	f000 81b5 	beq.w	209b4 <_svfprintf_r+0x18ac>
   2064a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2064c:	930c      	str	r3, [sp, #48]	; 0x30
   2064e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20650:	2d41      	cmp	r5, #65	; 0x41
   20652:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   20656:	931b      	str	r3, [sp, #108]	; 0x6c
   20658:	f000 81e5 	beq.w	20a26 <_svfprintf_r+0x191e>
   2065c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   20660:	2100      	movs	r1, #0
   20662:	2b00      	cmp	r3, #0
   20664:	bfb8      	it	lt
   20666:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   20668:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2066c:	bfba      	itte	lt
   2066e:	f1c3 0301 	rsblt	r3, r3, #1
   20672:	222d      	movlt	r2, #45	; 0x2d
   20674:	222b      	movge	r2, #43	; 0x2b
   20676:	2b09      	cmp	r3, #9
   20678:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2067c:	f340 81da 	ble.w	20a34 <_svfprintf_r+0x192c>
   20680:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   20684:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 20aa4 <_svfprintf_r+0x199c>
   20688:	462a      	mov	r2, r5
   2068a:	4610      	mov	r0, r2
   2068c:	fb8c 2103 	smull	r2, r1, ip, r3
   20690:	17da      	asrs	r2, r3, #31
   20692:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   20696:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   2069a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   2069e:	3130      	adds	r1, #48	; 0x30
   206a0:	f800 1c01 	strb.w	r1, [r0, #-1]
   206a4:	4619      	mov	r1, r3
   206a6:	2963      	cmp	r1, #99	; 0x63
   206a8:	4613      	mov	r3, r2
   206aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   206ae:	dcec      	bgt.n	2068a <_svfprintf_r+0x1582>
   206b0:	3330      	adds	r3, #48	; 0x30
   206b2:	b2d9      	uxtb	r1, r3
   206b4:	1e83      	subs	r3, r0, #2
   206b6:	429d      	cmp	r5, r3
   206b8:	f802 1c01 	strb.w	r1, [r2, #-1]
   206bc:	f240 828b 	bls.w	20bd6 <_svfprintf_r+0x1ace>
   206c0:	4613      	mov	r3, r2
   206c2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   206c6:	e001      	b.n	206cc <_svfprintf_r+0x15c4>
   206c8:	f813 1b01 	ldrb.w	r1, [r3], #1
   206cc:	f802 1b01 	strb.w	r1, [r2], #1
   206d0:	429d      	cmp	r5, r3
   206d2:	d1f9      	bne.n	206c8 <_svfprintf_r+0x15c0>
   206d4:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   206d8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   206dc:	1a1b      	subs	r3, r3, r0
   206de:	4413      	add	r3, r2
   206e0:	aa1e      	add	r2, sp, #120	; 0x78
   206e2:	1a9b      	subs	r3, r3, r2
   206e4:	9314      	str	r3, [sp, #80]	; 0x50
   206e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   206e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   206ea:	2b01      	cmp	r3, #1
   206ec:	441a      	add	r2, r3
   206ee:	9205      	str	r2, [sp, #20]
   206f0:	f340 8203 	ble.w	20afa <_svfprintf_r+0x19f2>
   206f4:	9b05      	ldr	r3, [sp, #20]
   206f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   206f8:	4413      	add	r3, r2
   206fa:	9305      	str	r3, [sp, #20]
   206fc:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   20700:	9a05      	ldr	r2, [sp, #20]
   20702:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   20706:	2300      	movs	r3, #0
   20708:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   2070c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   20710:	930f      	str	r3, [sp, #60]	; 0x3c
   20712:	9202      	str	r2, [sp, #8]
   20714:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20716:	2b00      	cmp	r3, #0
   20718:	f040 80b1 	bne.w	2087e <_svfprintf_r+0x1776>
   2071c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   20720:	9303      	str	r3, [sp, #12]
   20722:	f7fe bed2 	b.w	1f4ca <_svfprintf_r+0x3c2>
   20726:	4620      	mov	r0, r4
   20728:	f7fc fdca 	bl	1d2c0 <strlen>
   2072c:	4602      	mov	r2, r0
   2072e:	9005      	str	r0, [sp, #20]
   20730:	f7fe bf20 	b.w	1f574 <_svfprintf_r+0x46c>
   20734:	ee1b 1a10 	vmov	r1, s22
   20738:	aa24      	add	r2, sp, #144	; 0x90
   2073a:	4658      	mov	r0, fp
   2073c:	f001 fc84 	bl	22048 <__ssprint_r>
   20740:	f7fe bded 	b.w	1f31e <_svfprintf_r+0x216>
   20744:	1c59      	adds	r1, r3, #1
   20746:	4658      	mov	r0, fp
   20748:	f7f9 f900 	bl	1994c <_malloc_r>
   2074c:	4604      	mov	r4, r0
   2074e:	2800      	cmp	r0, #0
   20750:	f000 81ca 	beq.w	20ae8 <_svfprintf_r+0x19e0>
   20754:	9007      	str	r0, [sp, #28]
   20756:	e6e0      	b.n	2051a <_svfprintf_r+0x1412>
   20758:	ee1b 1a10 	vmov	r1, s22
   2075c:	aa24      	add	r2, sp, #144	; 0x90
   2075e:	4658      	mov	r0, fp
   20760:	f001 fc72 	bl	22048 <__ssprint_r>
   20764:	2800      	cmp	r0, #0
   20766:	f47f a934 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   2076a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2076c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20770:	f7ff ba49 	b.w	1fc06 <_svfprintf_r+0xafe>
   20774:	ee1b 1a10 	vmov	r1, s22
   20778:	aa24      	add	r2, sp, #144	; 0x90
   2077a:	4658      	mov	r0, fp
   2077c:	f001 fc64 	bl	22048 <__ssprint_r>
   20780:	2800      	cmp	r0, #0
   20782:	f47f a926 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20786:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   2078a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   2078c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20790:	e649      	b.n	20426 <_svfprintf_r+0x131e>
   20792:	2306      	movs	r3, #6
   20794:	9303      	str	r3, [sp, #12]
   20796:	f7ff bb83 	b.w	1fea0 <_svfprintf_r+0xd98>
   2079a:	9b03      	ldr	r3, [sp, #12]
   2079c:	2102      	movs	r1, #2
   2079e:	1c5a      	adds	r2, r3, #1
   207a0:	e72b      	b.n	205fa <_svfprintf_r+0x14f2>
   207a2:	9a03      	ldr	r2, [sp, #12]
   207a4:	2103      	movs	r1, #3
   207a6:	e728      	b.n	205fa <_svfprintf_r+0x14f2>
   207a8:	a81b      	add	r0, sp, #108	; 0x6c
   207aa:	eeb0 0b4a 	vmov.f64	d0, d10
   207ae:	f000 fc3f 	bl	21030 <frexp>
   207b2:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   207b6:	ee20 0b07 	vmul.f64	d0, d0, d7
   207ba:	eeb5 0b40 	vcmp.f64	d0, #0.0
   207be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   207c2:	d101      	bne.n	207c8 <_svfprintf_r+0x16c0>
   207c4:	2301      	movs	r3, #1
   207c6:	931b      	str	r3, [sp, #108]	; 0x6c
   207c8:	48b3      	ldr	r0, [pc, #716]	; (20a98 <_svfprintf_r+0x1990>)
   207ca:	9b03      	ldr	r3, [sp, #12]
   207cc:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   207d0:	3b01      	subs	r3, #1
   207d2:	4622      	mov	r2, r4
   207d4:	e004      	b.n	207e0 <_svfprintf_r+0x16d8>
   207d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
   207da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   207de:	d013      	beq.n	20808 <_svfprintf_r+0x1700>
   207e0:	ee20 0b05 	vmul.f64	d0, d0, d5
   207e4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   207e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   207ec:	ee17 1a90 	vmov	r1, s15
   207f0:	5c41      	ldrb	r1, [r0, r1]
   207f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   207f6:	4694      	mov	ip, r2
   207f8:	ee30 0b46 	vsub.f64	d0, d0, d6
   207fc:	f802 1b01 	strb.w	r1, [r2], #1
   20800:	4619      	mov	r1, r3
   20802:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   20806:	d1e6      	bne.n	207d6 <_svfprintf_r+0x16ce>
   20808:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   2080c:	eeb4 0bc6 	vcmpe.f64	d0, d6
   20810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20814:	f300 8148 	bgt.w	20aa8 <_svfprintf_r+0x19a0>
   20818:	eeb4 0b46 	vcmp.f64	d0, d6
   2081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20820:	d104      	bne.n	2082c <_svfprintf_r+0x1724>
   20822:	ee17 3a90 	vmov	r3, s15
   20826:	07db      	lsls	r3, r3, #31
   20828:	f100 813e 	bmi.w	20aa8 <_svfprintf_r+0x19a0>
   2082c:	2900      	cmp	r1, #0
   2082e:	db06      	blt.n	2083e <_svfprintf_r+0x1736>
   20830:	1c4b      	adds	r3, r1, #1
   20832:	4413      	add	r3, r2
   20834:	2130      	movs	r1, #48	; 0x30
   20836:	f802 1b01 	strb.w	r1, [r2], #1
   2083a:	4293      	cmp	r3, r2
   2083c:	d1fb      	bne.n	20836 <_svfprintf_r+0x172e>
   2083e:	1b13      	subs	r3, r2, r4
   20840:	930e      	str	r3, [sp, #56]	; 0x38
   20842:	e6fc      	b.n	2063e <_svfprintf_r+0x1536>
   20844:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   20846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20848:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   2084c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   20850:	9613      	str	r6, [sp, #76]	; 0x4c
   20852:	18e3      	adds	r3, r4, r3
   20854:	429d      	cmp	r5, r3
   20856:	4629      	mov	r1, r5
   20858:	bf28      	it	cs
   2085a:	4619      	movcs	r1, r3
   2085c:	4682      	mov	sl, r0
   2085e:	9105      	str	r1, [sp, #20]
   20860:	f7ff b9d8 	b.w	1fc14 <_svfprintf_r+0xb0c>
   20864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   20866:	930c      	str	r3, [sp, #48]	; 0x30
   20868:	1cda      	adds	r2, r3, #3
   2086a:	db02      	blt.n	20872 <_svfprintf_r+0x176a>
   2086c:	9a03      	ldr	r2, [sp, #12]
   2086e:	4293      	cmp	r3, r2
   20870:	dd0c      	ble.n	2088c <_svfprintf_r+0x1784>
   20872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20874:	3b02      	subs	r3, #2
   20876:	930b      	str	r3, [sp, #44]	; 0x2c
   20878:	f023 0520 	bic.w	r5, r3, #32
   2087c:	e6e7      	b.n	2064e <_svfprintf_r+0x1546>
   2087e:	212d      	movs	r1, #45	; 0x2d
   20880:	2300      	movs	r3, #0
   20882:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   20886:	9303      	str	r3, [sp, #12]
   20888:	f7fe be22 	b.w	1f4d0 <_svfprintf_r+0x3c8>
   2088c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2088e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20890:	4293      	cmp	r3, r2
   20892:	f2c0 80bd 	blt.w	20a10 <_svfprintf_r+0x1908>
   20896:	07f0      	lsls	r0, r6, #31
   20898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2089a:	f140 8132 	bpl.w	20b02 <_svfprintf_r+0x19fa>
   2089e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   208a0:	4413      	add	r3, r2
   208a2:	9305      	str	r3, [sp, #20]
   208a4:	0571      	lsls	r1, r6, #21
   208a6:	d503      	bpl.n	208b0 <_svfprintf_r+0x17a8>
   208a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   208aa:	2b00      	cmp	r3, #0
   208ac:	f300 8135 	bgt.w	20b1a <_svfprintf_r+0x1a12>
   208b0:	9b05      	ldr	r3, [sp, #20]
   208b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   208b6:	9302      	str	r3, [sp, #8]
   208b8:	2367      	movs	r3, #103	; 0x67
   208ba:	930b      	str	r3, [sp, #44]	; 0x2c
   208bc:	2300      	movs	r3, #0
   208be:	930f      	str	r3, [sp, #60]	; 0x3c
   208c0:	930d      	str	r3, [sp, #52]	; 0x34
   208c2:	e727      	b.n	20714 <_svfprintf_r+0x160c>
   208c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   208c6:	4283      	cmp	r3, r0
   208c8:	f4bf aeb7 	bcs.w	2063a <_svfprintf_r+0x1532>
   208cc:	2130      	movs	r1, #48	; 0x30
   208ce:	1c5a      	adds	r2, r3, #1
   208d0:	9222      	str	r2, [sp, #136]	; 0x88
   208d2:	7019      	strb	r1, [r3, #0]
   208d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   208d6:	4298      	cmp	r0, r3
   208d8:	d8f9      	bhi.n	208ce <_svfprintf_r+0x17c6>
   208da:	e6ae      	b.n	2063a <_svfprintf_r+0x1532>
   208dc:	07f3      	lsls	r3, r6, #31
   208de:	f100 80a7 	bmi.w	20a30 <_svfprintf_r+0x1928>
   208e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   208e4:	e6a9      	b.n	2063a <_svfprintf_r+0x1532>
   208e6:	aa24      	add	r2, sp, #144	; 0x90
   208e8:	4658      	mov	r0, fp
   208ea:	9105      	str	r1, [sp, #20]
   208ec:	f001 fbac 	bl	22048 <__ssprint_r>
   208f0:	2800      	cmp	r0, #0
   208f2:	f47f a86e 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   208f6:	f896 c000 	ldrb.w	ip, [r6]
   208fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   208fc:	9905      	ldr	r1, [sp, #20]
   208fe:	a827      	add	r0, sp, #156	; 0x9c
   20900:	4465      	add	r5, ip
   20902:	f7ff bbec 	b.w	200de <_svfprintf_r+0xfd6>
   20906:	ee1b 1a10 	vmov	r1, s22
   2090a:	aa24      	add	r2, sp, #144	; 0x90
   2090c:	4658      	mov	r0, fp
   2090e:	f001 fb9b 	bl	22048 <__ssprint_r>
   20912:	2800      	cmp	r0, #0
   20914:	f47f a85d 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20918:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2091a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2091e:	f7ff b96b 	b.w	1fbf8 <_svfprintf_r+0xaf0>
   20922:	2378      	movs	r3, #120	; 0x78
   20924:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   20928:	2330      	movs	r3, #48	; 0x30
   2092a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   2092e:	9b03      	ldr	r3, [sp, #12]
   20930:	2b63      	cmp	r3, #99	; 0x63
   20932:	f048 0602 	orr.w	r6, r8, #2
   20936:	f300 80a6 	bgt.w	20a86 <_svfprintf_r+0x197e>
   2093a:	2300      	movs	r3, #0
   2093c:	9307      	str	r3, [sp, #28]
   2093e:	ac37      	add	r4, sp, #220	; 0xdc
   20940:	ee18 3a90 	vmov	r3, s17
   20944:	2b00      	cmp	r3, #0
   20946:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   2094a:	db2b      	blt.n	209a4 <_svfprintf_r+0x189c>
   2094c:	eeb0 ab48 	vmov.f64	d10, d8
   20950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20952:	f023 0520 	bic.w	r5, r3, #32
   20956:	2300      	movs	r3, #0
   20958:	9309      	str	r3, [sp, #36]	; 0x24
   2095a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2095c:	2b61      	cmp	r3, #97	; 0x61
   2095e:	f47f aaad 	bne.w	1febc <_svfprintf_r+0xdb4>
   20962:	eeb0 0b4a 	vmov.f64	d0, d10
   20966:	a81b      	add	r0, sp, #108	; 0x6c
   20968:	f000 fb62 	bl	21030 <frexp>
   2096c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   20970:	ee20 0b07 	vmul.f64	d0, d0, d7
   20974:	eeb5 0b40 	vcmp.f64	d0, #0.0
   20978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2097c:	d101      	bne.n	20982 <_svfprintf_r+0x187a>
   2097e:	2301      	movs	r3, #1
   20980:	931b      	str	r3, [sp, #108]	; 0x6c
   20982:	4846      	ldr	r0, [pc, #280]	; (20a9c <_svfprintf_r+0x1994>)
   20984:	e721      	b.n	207ca <_svfprintf_r+0x16c2>
   20986:	ee1b 1a10 	vmov	r1, s22
   2098a:	aa24      	add	r2, sp, #144	; 0x90
   2098c:	4658      	mov	r0, fp
   2098e:	f001 fb5b 	bl	22048 <__ssprint_r>
   20992:	2800      	cmp	r0, #0
   20994:	f47f a81d 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20998:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2099a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2099c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   209a0:	f7ff b94e 	b.w	1fc40 <_svfprintf_r+0xb38>
   209a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   209a6:	f023 0520 	bic.w	r5, r3, #32
   209aa:	232d      	movs	r3, #45	; 0x2d
   209ac:	9309      	str	r3, [sp, #36]	; 0x24
   209ae:	eeb1 ab48 	vneg.f64	d10, d8
   209b2:	e7d2      	b.n	2095a <_svfprintf_r+0x1852>
   209b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   209b6:	920c      	str	r2, [sp, #48]	; 0x30
   209b8:	2a00      	cmp	r2, #0
   209ba:	f006 0301 	and.w	r3, r6, #1
   209be:	f340 810d 	ble.w	20bdc <_svfprintf_r+0x1ad4>
   209c2:	9903      	ldr	r1, [sp, #12]
   209c4:	430b      	orrs	r3, r1
   209c6:	f040 80cf 	bne.w	20b68 <_svfprintf_r+0x1a60>
   209ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   209cc:	9305      	str	r3, [sp, #20]
   209ce:	2366      	movs	r3, #102	; 0x66
   209d0:	930b      	str	r3, [sp, #44]	; 0x2c
   209d2:	0572      	lsls	r2, r6, #21
   209d4:	f100 80a3 	bmi.w	20b1e <_svfprintf_r+0x1a16>
   209d8:	9b05      	ldr	r3, [sp, #20]
   209da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   209de:	9302      	str	r3, [sp, #8]
   209e0:	e76c      	b.n	208bc <_svfprintf_r+0x17b4>
   209e2:	ee1b 1a10 	vmov	r1, s22
   209e6:	aa24      	add	r2, sp, #144	; 0x90
   209e8:	4658      	mov	r0, fp
   209ea:	f001 fb2d 	bl	22048 <__ssprint_r>
   209ee:	2800      	cmp	r0, #0
   209f0:	f47e afef 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   209f4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   209f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   209f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   209fa:	1b1c      	subs	r4, r3, r4
   209fc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20a00:	f7ff b936 	b.w	1fc70 <_svfprintf_r+0xb68>
   20a04:	2358      	movs	r3, #88	; 0x58
   20a06:	e78d      	b.n	20924 <_svfprintf_r+0x181c>
   20a08:	2200      	movs	r2, #0
   20a0a:	9203      	str	r2, [sp, #12]
   20a0c:	f7fe bbda 	b.w	1f1c4 <_svfprintf_r+0xbc>
   20a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20a12:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20a14:	189a      	adds	r2, r3, r2
   20a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20a18:	9205      	str	r2, [sp, #20]
   20a1a:	2b00      	cmp	r3, #0
   20a1c:	f340 80ab 	ble.w	20b76 <_svfprintf_r+0x1a6e>
   20a20:	2367      	movs	r3, #103	; 0x67
   20a22:	930b      	str	r3, [sp, #44]	; 0x2c
   20a24:	e7d5      	b.n	209d2 <_svfprintf_r+0x18ca>
   20a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20a28:	320f      	adds	r2, #15
   20a2a:	b2d2      	uxtb	r2, r2
   20a2c:	2101      	movs	r1, #1
   20a2e:	e618      	b.n	20662 <_svfprintf_r+0x155a>
   20a30:	18a0      	adds	r0, r4, r2
   20a32:	e5fb      	b.n	2062c <_svfprintf_r+0x1524>
   20a34:	2900      	cmp	r1, #0
   20a36:	f040 80a8 	bne.w	20b8a <_svfprintf_r+0x1a82>
   20a3a:	2230      	movs	r2, #48	; 0x30
   20a3c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   20a40:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   20a44:	3330      	adds	r3, #48	; 0x30
   20a46:	f802 3b01 	strb.w	r3, [r2], #1
   20a4a:	ab1e      	add	r3, sp, #120	; 0x78
   20a4c:	1ad3      	subs	r3, r2, r3
   20a4e:	9314      	str	r3, [sp, #80]	; 0x50
   20a50:	e649      	b.n	206e6 <_svfprintf_r+0x15de>
   20a52:	3301      	adds	r3, #1
   20a54:	4912      	ldr	r1, [pc, #72]	; (20aa0 <_svfprintf_r+0x1998>)
   20a56:	f8ca 5004 	str.w	r5, [sl, #4]
   20a5a:	442a      	add	r2, r5
   20a5c:	2b07      	cmp	r3, #7
   20a5e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   20a62:	f8ca 1000 	str.w	r1, [sl]
   20a66:	f77f ac33 	ble.w	202d0 <_svfprintf_r+0x11c8>
   20a6a:	ee1b 1a10 	vmov	r1, s22
   20a6e:	aa24      	add	r2, sp, #144	; 0x90
   20a70:	4658      	mov	r0, fp
   20a72:	f001 fae9 	bl	22048 <__ssprint_r>
   20a76:	2800      	cmp	r0, #0
   20a78:	f47e afab 	bne.w	1f9d2 <_svfprintf_r+0x8ca>
   20a7c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   20a80:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20a84:	e426      	b.n	202d4 <_svfprintf_r+0x11cc>
   20a86:	1c59      	adds	r1, r3, #1
   20a88:	4658      	mov	r0, fp
   20a8a:	f7f8 ff5f 	bl	1994c <_malloc_r>
   20a8e:	4604      	mov	r4, r0
   20a90:	b350      	cbz	r0, 20ae8 <_svfprintf_r+0x19e0>
   20a92:	9007      	str	r0, [sp, #28]
   20a94:	e754      	b.n	20940 <_svfprintf_r+0x1838>
   20a96:	bf00      	nop
   20a98:	20008d18 	.word	0x20008d18
   20a9c:	20008d04 	.word	0x20008d04
   20aa0:	200025fc 	.word	0x200025fc
   20aa4:	66666667 	.word	0x66666667
   20aa8:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   20aac:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   20ab0:	f890 c00f 	ldrb.w	ip, [r0, #15]
   20ab4:	4561      	cmp	r1, ip
   20ab6:	4613      	mov	r3, r2
   20ab8:	d10a      	bne.n	20ad0 <_svfprintf_r+0x19c8>
   20aba:	f04f 0e30 	mov.w	lr, #48	; 0x30
   20abe:	f803 ec01 	strb.w	lr, [r3, #-1]
   20ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20ac4:	1e59      	subs	r1, r3, #1
   20ac6:	9122      	str	r1, [sp, #136]	; 0x88
   20ac8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   20acc:	458c      	cmp	ip, r1
   20ace:	d0f6      	beq.n	20abe <_svfprintf_r+0x19b6>
   20ad0:	2939      	cmp	r1, #57	; 0x39
   20ad2:	bf16      	itet	ne
   20ad4:	3101      	addne	r1, #1
   20ad6:	7a81      	ldrbeq	r1, [r0, #10]
   20ad8:	b2c9      	uxtbne	r1, r1
   20ada:	f803 1c01 	strb.w	r1, [r3, #-1]
   20ade:	e6ae      	b.n	2083e <_svfprintf_r+0x1736>
   20ae0:	2300      	movs	r3, #0
   20ae2:	4690      	mov	r8, r2
   20ae4:	9307      	str	r3, [sp, #28]
   20ae6:	e760      	b.n	209aa <_svfprintf_r+0x18a2>
   20ae8:	ee1b 2a10 	vmov	r2, s22
   20aec:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   20af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20af4:	8193      	strh	r3, [r2, #12]
   20af6:	f7fe bc16 	b.w	1f326 <_svfprintf_r+0x21e>
   20afa:	07f5      	lsls	r5, r6, #31
   20afc:	f57f adfe 	bpl.w	206fc <_svfprintf_r+0x15f4>
   20b00:	e5f8      	b.n	206f4 <_svfprintf_r+0x15ec>
   20b02:	9305      	str	r3, [sp, #20]
   20b04:	e6ce      	b.n	208a4 <_svfprintf_r+0x179c>
   20b06:	eeb5 ab40 	vcmp.f64	d10, #0.0
   20b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20b0e:	f43f ad8b 	beq.w	20628 <_svfprintf_r+0x1520>
   20b12:	f1c2 0201 	rsb	r2, r2, #1
   20b16:	921b      	str	r2, [sp, #108]	; 0x6c
   20b18:	e587      	b.n	2062a <_svfprintf_r+0x1522>
   20b1a:	2367      	movs	r3, #103	; 0x67
   20b1c:	930b      	str	r3, [sp, #44]	; 0x2c
   20b1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   20b20:	780b      	ldrb	r3, [r1, #0]
   20b22:	2bff      	cmp	r3, #255	; 0xff
   20b24:	d079      	beq.n	20c1a <_svfprintf_r+0x1b12>
   20b26:	2500      	movs	r5, #0
   20b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20b2a:	4628      	mov	r0, r5
   20b2c:	e003      	b.n	20b36 <_svfprintf_r+0x1a2e>
   20b2e:	3001      	adds	r0, #1
   20b30:	3101      	adds	r1, #1
   20b32:	2bff      	cmp	r3, #255	; 0xff
   20b34:	d008      	beq.n	20b48 <_svfprintf_r+0x1a40>
   20b36:	4293      	cmp	r3, r2
   20b38:	da06      	bge.n	20b48 <_svfprintf_r+0x1a40>
   20b3a:	1ad2      	subs	r2, r2, r3
   20b3c:	784b      	ldrb	r3, [r1, #1]
   20b3e:	2b00      	cmp	r3, #0
   20b40:	d1f5      	bne.n	20b2e <_svfprintf_r+0x1a26>
   20b42:	780b      	ldrb	r3, [r1, #0]
   20b44:	3501      	adds	r5, #1
   20b46:	e7f4      	b.n	20b32 <_svfprintf_r+0x1a2a>
   20b48:	920c      	str	r2, [sp, #48]	; 0x30
   20b4a:	9113      	str	r1, [sp, #76]	; 0x4c
   20b4c:	900d      	str	r0, [sp, #52]	; 0x34
   20b4e:	950f      	str	r5, [sp, #60]	; 0x3c
   20b50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20b54:	9916      	ldr	r1, [sp, #88]	; 0x58
   20b56:	4413      	add	r3, r2
   20b58:	9a05      	ldr	r2, [sp, #20]
   20b5a:	fb01 2303 	mla	r3, r1, r3, r2
   20b5e:	9305      	str	r3, [sp, #20]
   20b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20b64:	9302      	str	r3, [sp, #8]
   20b66:	e5d5      	b.n	20714 <_svfprintf_r+0x160c>
   20b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20b6a:	18d3      	adds	r3, r2, r3
   20b6c:	4419      	add	r1, r3
   20b6e:	2366      	movs	r3, #102	; 0x66
   20b70:	9105      	str	r1, [sp, #20]
   20b72:	930b      	str	r3, [sp, #44]	; 0x2c
   20b74:	e72d      	b.n	209d2 <_svfprintf_r+0x18ca>
   20b76:	f1c3 0301 	rsb	r3, r3, #1
   20b7a:	441a      	add	r2, r3
   20b7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20b80:	9302      	str	r3, [sp, #8]
   20b82:	2367      	movs	r3, #103	; 0x67
   20b84:	9205      	str	r2, [sp, #20]
   20b86:	930b      	str	r3, [sp, #44]	; 0x2c
   20b88:	e698      	b.n	208bc <_svfprintf_r+0x17b4>
   20b8a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   20b8e:	e759      	b.n	20a44 <_svfprintf_r+0x193c>
   20b90:	9b03      	ldr	r3, [sp, #12]
   20b92:	f8dd 9008 	ldr.w	r9, [sp, #8]
   20b96:	f8dd 801c 	ldr.w	r8, [sp, #28]
   20b9a:	9305      	str	r3, [sp, #20]
   20b9c:	e4b4      	b.n	20508 <_svfprintf_r+0x1400>
   20b9e:	ee18 3a90 	vmov	r3, s17
   20ba2:	2b00      	cmp	r3, #0
   20ba4:	bfb4      	ite	lt
   20ba6:	212d      	movlt	r1, #45	; 0x2d
   20ba8:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   20bac:	4c25      	ldr	r4, [pc, #148]	; (20c44 <_svfprintf_r+0x1b3c>)
   20bae:	4b26      	ldr	r3, [pc, #152]	; (20c48 <_svfprintf_r+0x1b40>)
   20bb0:	bfb8      	it	lt
   20bb2:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   20bb6:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   20bba:	f7fe bc79 	b.w	1f4b0 <_svfprintf_r+0x3a8>
   20bbe:	9b03      	ldr	r3, [sp, #12]
   20bc0:	9302      	str	r3, [sp, #8]
   20bc2:	9305      	str	r3, [sp, #20]
   20bc4:	2373      	movs	r3, #115	; 0x73
   20bc6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   20bca:	9003      	str	r0, [sp, #12]
   20bcc:	900f      	str	r0, [sp, #60]	; 0x3c
   20bce:	900d      	str	r0, [sp, #52]	; 0x34
   20bd0:	930b      	str	r3, [sp, #44]	; 0x2c
   20bd2:	f7fe bc7a 	b.w	1f4ca <_svfprintf_r+0x3c2>
   20bd6:	2302      	movs	r3, #2
   20bd8:	9314      	str	r3, [sp, #80]	; 0x50
   20bda:	e584      	b.n	206e6 <_svfprintf_r+0x15de>
   20bdc:	9a03      	ldr	r2, [sp, #12]
   20bde:	4313      	orrs	r3, r2
   20be0:	d105      	bne.n	20bee <_svfprintf_r+0x1ae6>
   20be2:	2301      	movs	r3, #1
   20be4:	2266      	movs	r2, #102	; 0x66
   20be6:	9302      	str	r3, [sp, #8]
   20be8:	920b      	str	r2, [sp, #44]	; 0x2c
   20bea:	9305      	str	r3, [sp, #20]
   20bec:	e666      	b.n	208bc <_svfprintf_r+0x17b4>
   20bee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20bf0:	3301      	adds	r3, #1
   20bf2:	441a      	add	r2, r3
   20bf4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20bf8:	9302      	str	r3, [sp, #8]
   20bfa:	2366      	movs	r3, #102	; 0x66
   20bfc:	9205      	str	r2, [sp, #20]
   20bfe:	930b      	str	r3, [sp, #44]	; 0x2c
   20c00:	e65c      	b.n	208bc <_svfprintf_r+0x17b4>
   20c02:	9a08      	ldr	r2, [sp, #32]
   20c04:	f899 3001 	ldrb.w	r3, [r9, #1]
   20c08:	4689      	mov	r9, r1
   20c0a:	f852 1b04 	ldr.w	r1, [r2], #4
   20c0e:	9208      	str	r2, [sp, #32]
   20c10:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   20c14:	9103      	str	r1, [sp, #12]
   20c16:	f7fe bad3 	b.w	1f1c0 <_svfprintf_r+0xb8>
   20c1a:	2300      	movs	r3, #0
   20c1c:	930f      	str	r3, [sp, #60]	; 0x3c
   20c1e:	930d      	str	r3, [sp, #52]	; 0x34
   20c20:	e796      	b.n	20b50 <_svfprintf_r+0x1a48>
   20c22:	230c      	movs	r3, #12
   20c24:	f8cb 3000 	str.w	r3, [fp]
   20c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20c2c:	9304      	str	r3, [sp, #16]
   20c2e:	f7fe bb81 	b.w	1f334 <_svfprintf_r+0x22c>
   20c32:	ee1b 2a10 	vmov	r2, s22
   20c36:	8993      	ldrh	r3, [r2, #12]
   20c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20c3c:	8193      	strh	r3, [r2, #12]
   20c3e:	f7fe bec8 	b.w	1f9d2 <_svfprintf_r+0x8ca>
   20c42:	bf00      	nop
   20c44:	20008cfc 	.word	0x20008cfc
   20c48:	20008d00 	.word	0x20008d00

00020c4c <_fclose_r>:
   20c4c:	b570      	push	{r4, r5, r6, lr}
   20c4e:	2900      	cmp	r1, #0
   20c50:	d04b      	beq.n	20cea <_fclose_r+0x9e>
   20c52:	4606      	mov	r6, r0
   20c54:	460c      	mov	r4, r1
   20c56:	b110      	cbz	r0, 20c5e <_fclose_r+0x12>
   20c58:	6b43      	ldr	r3, [r0, #52]	; 0x34
   20c5a:	2b00      	cmp	r3, #0
   20c5c:	d048      	beq.n	20cf0 <_fclose_r+0xa4>
   20c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20c60:	07d8      	lsls	r0, r3, #31
   20c62:	d534      	bpl.n	20cce <_fclose_r+0x82>
   20c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20c68:	2b00      	cmp	r3, #0
   20c6a:	d03e      	beq.n	20cea <_fclose_r+0x9e>
   20c6c:	4621      	mov	r1, r4
   20c6e:	4630      	mov	r0, r6
   20c70:	f000 f858 	bl	20d24 <__sflush_r>
   20c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20c76:	4605      	mov	r5, r0
   20c78:	b133      	cbz	r3, 20c88 <_fclose_r+0x3c>
   20c7a:	69e1      	ldr	r1, [r4, #28]
   20c7c:	4630      	mov	r0, r6
   20c7e:	4798      	blx	r3
   20c80:	2800      	cmp	r0, #0
   20c82:	bfb8      	it	lt
   20c84:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   20c88:	89a3      	ldrh	r3, [r4, #12]
   20c8a:	061a      	lsls	r2, r3, #24
   20c8c:	d43c      	bmi.n	20d08 <_fclose_r+0xbc>
   20c8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20c90:	b141      	cbz	r1, 20ca4 <_fclose_r+0x58>
   20c92:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20c96:	4299      	cmp	r1, r3
   20c98:	d002      	beq.n	20ca0 <_fclose_r+0x54>
   20c9a:	4630      	mov	r0, r6
   20c9c:	f7fc fc22 	bl	1d4e4 <_free_r>
   20ca0:	2300      	movs	r3, #0
   20ca2:	6323      	str	r3, [r4, #48]	; 0x30
   20ca4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   20ca6:	b121      	cbz	r1, 20cb2 <_fclose_r+0x66>
   20ca8:	4630      	mov	r0, r6
   20caa:	f7fc fc1b 	bl	1d4e4 <_free_r>
   20cae:	2300      	movs	r3, #0
   20cb0:	6463      	str	r3, [r4, #68]	; 0x44
   20cb2:	f7fa fceb 	bl	1b68c <__sfp_lock_acquire>
   20cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20cb8:	2200      	movs	r2, #0
   20cba:	07db      	lsls	r3, r3, #31
   20cbc:	81a2      	strh	r2, [r4, #12]
   20cbe:	d51f      	bpl.n	20d00 <_fclose_r+0xb4>
   20cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20cc2:	f7fc f8bb 	bl	1ce3c <__retarget_lock_close_recursive>
   20cc6:	f7fa fce7 	bl	1b698 <__sfp_lock_release>
   20cca:	4628      	mov	r0, r5
   20ccc:	bd70      	pop	{r4, r5, r6, pc}
   20cce:	89a3      	ldrh	r3, [r4, #12]
   20cd0:	0599      	lsls	r1, r3, #22
   20cd2:	d4cb      	bmi.n	20c6c <_fclose_r+0x20>
   20cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20cd6:	f7fc f8b5 	bl	1ce44 <__retarget_lock_acquire_recursive>
   20cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20cde:	2b00      	cmp	r3, #0
   20ce0:	d1c4      	bne.n	20c6c <_fclose_r+0x20>
   20ce2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   20ce4:	f015 0501 	ands.w	r5, r5, #1
   20ce8:	d005      	beq.n	20cf6 <_fclose_r+0xaa>
   20cea:	2500      	movs	r5, #0
   20cec:	4628      	mov	r0, r5
   20cee:	bd70      	pop	{r4, r5, r6, pc}
   20cf0:	f7fa fcac 	bl	1b64c <__sinit>
   20cf4:	e7b3      	b.n	20c5e <_fclose_r+0x12>
   20cf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20cf8:	f7fc f8ac 	bl	1ce54 <__retarget_lock_release_recursive>
   20cfc:	4628      	mov	r0, r5
   20cfe:	bd70      	pop	{r4, r5, r6, pc}
   20d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20d02:	f7fc f8a7 	bl	1ce54 <__retarget_lock_release_recursive>
   20d06:	e7db      	b.n	20cc0 <_fclose_r+0x74>
   20d08:	6921      	ldr	r1, [r4, #16]
   20d0a:	4630      	mov	r0, r6
   20d0c:	f7fc fbea 	bl	1d4e4 <_free_r>
   20d10:	e7bd      	b.n	20c8e <_fclose_r+0x42>
   20d12:	bf00      	nop

00020d14 <fclose>:
   20d14:	4b02      	ldr	r3, [pc, #8]	; (20d20 <fclose+0xc>)
   20d16:	4601      	mov	r1, r0
   20d18:	6818      	ldr	r0, [r3, #0]
   20d1a:	f7ff bf97 	b.w	20c4c <_fclose_r>
   20d1e:	bf00      	nop
   20d20:	20008e58 	.word	0x20008e58

00020d24 <__sflush_r>:
   20d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   20d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d2c:	460c      	mov	r4, r1
   20d2e:	0711      	lsls	r1, r2, #28
   20d30:	4680      	mov	r8, r0
   20d32:	d447      	bmi.n	20dc4 <__sflush_r+0xa0>
   20d34:	6863      	ldr	r3, [r4, #4]
   20d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   20d3a:	2b00      	cmp	r3, #0
   20d3c:	81a2      	strh	r2, [r4, #12]
   20d3e:	dd5e      	ble.n	20dfe <__sflush_r+0xda>
   20d40:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   20d42:	2d00      	cmp	r5, #0
   20d44:	d058      	beq.n	20df8 <__sflush_r+0xd4>
   20d46:	2300      	movs	r3, #0
   20d48:	f8d8 6000 	ldr.w	r6, [r8]
   20d4c:	f8c8 3000 	str.w	r3, [r8]
   20d50:	b293      	uxth	r3, r2
   20d52:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   20d56:	d156      	bne.n	20e06 <__sflush_r+0xe2>
   20d58:	2301      	movs	r3, #1
   20d5a:	69e1      	ldr	r1, [r4, #28]
   20d5c:	4640      	mov	r0, r8
   20d5e:	47a8      	blx	r5
   20d60:	1c43      	adds	r3, r0, #1
   20d62:	d067      	beq.n	20e34 <__sflush_r+0x110>
   20d64:	89a3      	ldrh	r3, [r4, #12]
   20d66:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   20d68:	075f      	lsls	r7, r3, #29
   20d6a:	d505      	bpl.n	20d78 <__sflush_r+0x54>
   20d6c:	6863      	ldr	r3, [r4, #4]
   20d6e:	1ac0      	subs	r0, r0, r3
   20d70:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20d72:	b10b      	cbz	r3, 20d78 <__sflush_r+0x54>
   20d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   20d76:	1ac0      	subs	r0, r0, r3
   20d78:	69e1      	ldr	r1, [r4, #28]
   20d7a:	4602      	mov	r2, r0
   20d7c:	2300      	movs	r3, #0
   20d7e:	4640      	mov	r0, r8
   20d80:	47a8      	blx	r5
   20d82:	1c41      	adds	r1, r0, #1
   20d84:	d141      	bne.n	20e0a <__sflush_r+0xe6>
   20d86:	f8d8 3000 	ldr.w	r3, [r8]
   20d8a:	2b00      	cmp	r3, #0
   20d8c:	d03d      	beq.n	20e0a <__sflush_r+0xe6>
   20d8e:	2b1d      	cmp	r3, #29
   20d90:	d001      	beq.n	20d96 <__sflush_r+0x72>
   20d92:	2b16      	cmp	r3, #22
   20d94:	d156      	bne.n	20e44 <__sflush_r+0x120>
   20d96:	89a3      	ldrh	r3, [r4, #12]
   20d98:	6922      	ldr	r2, [r4, #16]
   20d9a:	6022      	str	r2, [r4, #0]
   20d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   20da0:	2100      	movs	r1, #0
   20da2:	6061      	str	r1, [r4, #4]
   20da4:	81a3      	strh	r3, [r4, #12]
   20da6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20da8:	f8c8 6000 	str.w	r6, [r8]
   20dac:	b321      	cbz	r1, 20df8 <__sflush_r+0xd4>
   20dae:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20db2:	4299      	cmp	r1, r3
   20db4:	d002      	beq.n	20dbc <__sflush_r+0x98>
   20db6:	4640      	mov	r0, r8
   20db8:	f7fc fb94 	bl	1d4e4 <_free_r>
   20dbc:	2000      	movs	r0, #0
   20dbe:	6320      	str	r0, [r4, #48]	; 0x30
   20dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20dc4:	6926      	ldr	r6, [r4, #16]
   20dc6:	b1be      	cbz	r6, 20df8 <__sflush_r+0xd4>
   20dc8:	b293      	uxth	r3, r2
   20dca:	6825      	ldr	r5, [r4, #0]
   20dcc:	6026      	str	r6, [r4, #0]
   20dce:	079a      	lsls	r2, r3, #30
   20dd0:	bf0c      	ite	eq
   20dd2:	6963      	ldreq	r3, [r4, #20]
   20dd4:	2300      	movne	r3, #0
   20dd6:	1bad      	subs	r5, r5, r6
   20dd8:	60a3      	str	r3, [r4, #8]
   20dda:	e00b      	b.n	20df4 <__sflush_r+0xd0>
   20ddc:	462b      	mov	r3, r5
   20dde:	4632      	mov	r2, r6
   20de0:	69e1      	ldr	r1, [r4, #28]
   20de2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   20de4:	4640      	mov	r0, r8
   20de6:	47b8      	blx	r7
   20de8:	f1b0 0c00 	subs.w	ip, r0, #0
   20dec:	eba5 050c 	sub.w	r5, r5, ip
   20df0:	4466      	add	r6, ip
   20df2:	dd17      	ble.n	20e24 <__sflush_r+0x100>
   20df4:	2d00      	cmp	r5, #0
   20df6:	dcf1      	bgt.n	20ddc <__sflush_r+0xb8>
   20df8:	2000      	movs	r0, #0
   20dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20dfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   20e00:	2b00      	cmp	r3, #0
   20e02:	dc9d      	bgt.n	20d40 <__sflush_r+0x1c>
   20e04:	e7f8      	b.n	20df8 <__sflush_r+0xd4>
   20e06:	6d20      	ldr	r0, [r4, #80]	; 0x50
   20e08:	e7ae      	b.n	20d68 <__sflush_r+0x44>
   20e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20e0e:	6922      	ldr	r2, [r4, #16]
   20e10:	6022      	str	r2, [r4, #0]
   20e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   20e16:	81a3      	strh	r3, [r4, #12]
   20e18:	2200      	movs	r2, #0
   20e1a:	04db      	lsls	r3, r3, #19
   20e1c:	6062      	str	r2, [r4, #4]
   20e1e:	d5c2      	bpl.n	20da6 <__sflush_r+0x82>
   20e20:	6520      	str	r0, [r4, #80]	; 0x50
   20e22:	e7c0      	b.n	20da6 <__sflush_r+0x82>
   20e24:	89a3      	ldrh	r3, [r4, #12]
   20e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e2e:	81a3      	strh	r3, [r4, #12]
   20e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20e34:	f8d8 3000 	ldr.w	r3, [r8]
   20e38:	2b00      	cmp	r3, #0
   20e3a:	d093      	beq.n	20d64 <__sflush_r+0x40>
   20e3c:	2b1d      	cmp	r3, #29
   20e3e:	d006      	beq.n	20e4e <__sflush_r+0x12a>
   20e40:	2b16      	cmp	r3, #22
   20e42:	d004      	beq.n	20e4e <__sflush_r+0x12a>
   20e44:	89a3      	ldrh	r3, [r4, #12]
   20e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20e4a:	81a3      	strh	r3, [r4, #12]
   20e4c:	e7d5      	b.n	20dfa <__sflush_r+0xd6>
   20e4e:	f8c8 6000 	str.w	r6, [r8]
   20e52:	e7d1      	b.n	20df8 <__sflush_r+0xd4>

00020e54 <_fflush_r>:
   20e54:	b538      	push	{r3, r4, r5, lr}
   20e56:	460c      	mov	r4, r1
   20e58:	4605      	mov	r5, r0
   20e5a:	b108      	cbz	r0, 20e60 <_fflush_r+0xc>
   20e5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   20e5e:	b303      	cbz	r3, 20ea2 <_fflush_r+0x4e>
   20e60:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   20e64:	b188      	cbz	r0, 20e8a <_fflush_r+0x36>
   20e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20e68:	07db      	lsls	r3, r3, #31
   20e6a:	d401      	bmi.n	20e70 <_fflush_r+0x1c>
   20e6c:	0581      	lsls	r1, r0, #22
   20e6e:	d50f      	bpl.n	20e90 <_fflush_r+0x3c>
   20e70:	4628      	mov	r0, r5
   20e72:	4621      	mov	r1, r4
   20e74:	f7ff ff56 	bl	20d24 <__sflush_r>
   20e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20e7a:	07da      	lsls	r2, r3, #31
   20e7c:	4605      	mov	r5, r0
   20e7e:	d402      	bmi.n	20e86 <_fflush_r+0x32>
   20e80:	89a3      	ldrh	r3, [r4, #12]
   20e82:	059b      	lsls	r3, r3, #22
   20e84:	d508      	bpl.n	20e98 <_fflush_r+0x44>
   20e86:	4628      	mov	r0, r5
   20e88:	bd38      	pop	{r3, r4, r5, pc}
   20e8a:	4605      	mov	r5, r0
   20e8c:	4628      	mov	r0, r5
   20e8e:	bd38      	pop	{r3, r4, r5, pc}
   20e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20e92:	f7fb ffd7 	bl	1ce44 <__retarget_lock_acquire_recursive>
   20e96:	e7eb      	b.n	20e70 <_fflush_r+0x1c>
   20e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20e9a:	f7fb ffdb 	bl	1ce54 <__retarget_lock_release_recursive>
   20e9e:	4628      	mov	r0, r5
   20ea0:	bd38      	pop	{r3, r4, r5, pc}
   20ea2:	f7fa fbd3 	bl	1b64c <__sinit>
   20ea6:	e7db      	b.n	20e60 <_fflush_r+0xc>

00020ea8 <fflush>:
   20ea8:	b350      	cbz	r0, 20f00 <fflush+0x58>
   20eaa:	b538      	push	{r3, r4, r5, lr}
   20eac:	4b17      	ldr	r3, [pc, #92]	; (20f0c <fflush+0x64>)
   20eae:	681d      	ldr	r5, [r3, #0]
   20eb0:	4604      	mov	r4, r0
   20eb2:	b10d      	cbz	r5, 20eb8 <fflush+0x10>
   20eb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20eb6:	b1bb      	cbz	r3, 20ee8 <fflush+0x40>
   20eb8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   20ebc:	b188      	cbz	r0, 20ee2 <fflush+0x3a>
   20ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20ec0:	07db      	lsls	r3, r3, #31
   20ec2:	d401      	bmi.n	20ec8 <fflush+0x20>
   20ec4:	0581      	lsls	r1, r0, #22
   20ec6:	d513      	bpl.n	20ef0 <fflush+0x48>
   20ec8:	4628      	mov	r0, r5
   20eca:	4621      	mov	r1, r4
   20ecc:	f7ff ff2a 	bl	20d24 <__sflush_r>
   20ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20ed2:	07da      	lsls	r2, r3, #31
   20ed4:	4605      	mov	r5, r0
   20ed6:	d402      	bmi.n	20ede <fflush+0x36>
   20ed8:	89a3      	ldrh	r3, [r4, #12]
   20eda:	059b      	lsls	r3, r3, #22
   20edc:	d50c      	bpl.n	20ef8 <fflush+0x50>
   20ede:	4628      	mov	r0, r5
   20ee0:	bd38      	pop	{r3, r4, r5, pc}
   20ee2:	4605      	mov	r5, r0
   20ee4:	4628      	mov	r0, r5
   20ee6:	bd38      	pop	{r3, r4, r5, pc}
   20ee8:	4628      	mov	r0, r5
   20eea:	f7fa fbaf 	bl	1b64c <__sinit>
   20eee:	e7e3      	b.n	20eb8 <fflush+0x10>
   20ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20ef2:	f7fb ffa7 	bl	1ce44 <__retarget_lock_acquire_recursive>
   20ef6:	e7e7      	b.n	20ec8 <fflush+0x20>
   20ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20efa:	f7fb ffab 	bl	1ce54 <__retarget_lock_release_recursive>
   20efe:	e7ee      	b.n	20ede <fflush+0x36>
   20f00:	4a03      	ldr	r2, [pc, #12]	; (20f10 <fflush+0x68>)
   20f02:	4904      	ldr	r1, [pc, #16]	; (20f14 <fflush+0x6c>)
   20f04:	4804      	ldr	r0, [pc, #16]	; (20f18 <fflush+0x70>)
   20f06:	f7fa bbf1 	b.w	1b6ec <_fwalk_sglue>
   20f0a:	bf00      	nop
   20f0c:	20008e58 	.word	0x20008e58
   20f10:	20009394 	.word	0x20009394
   20f14:	00020e55 	.word	0x00020e55
   20f18:	20008e60 	.word	0x20008e60

00020f1c <strcasecmp>:
   20f1c:	b430      	push	{r4, r5}
   20f1e:	4d13      	ldr	r5, [pc, #76]	; (20f6c <strcasecmp+0x50>)
   20f20:	f810 4b01 	ldrb.w	r4, [r0], #1
   20f24:	5d2b      	ldrb	r3, [r5, r4]
   20f26:	f003 0303 	and.w	r3, r3, #3
   20f2a:	2b01      	cmp	r3, #1
   20f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   20f30:	f815 c003 	ldrb.w	ip, [r5, r3]
   20f34:	f00c 0c03 	and.w	ip, ip, #3
   20f38:	4622      	mov	r2, r4
   20f3a:	bf08      	it	eq
   20f3c:	f104 0220 	addeq.w	r2, r4, #32
   20f40:	f1bc 0f01 	cmp.w	ip, #1
   20f44:	461c      	mov	r4, r3
   20f46:	d006      	beq.n	20f56 <strcasecmp+0x3a>
   20f48:	1ad2      	subs	r2, r2, r3
   20f4a:	d10a      	bne.n	20f62 <strcasecmp+0x46>
   20f4c:	2b00      	cmp	r3, #0
   20f4e:	d1e7      	bne.n	20f20 <strcasecmp+0x4>
   20f50:	4620      	mov	r0, r4
   20f52:	bc30      	pop	{r4, r5}
   20f54:	4770      	bx	lr
   20f56:	3320      	adds	r3, #32
   20f58:	1ad4      	subs	r4, r2, r3
   20f5a:	d0e1      	beq.n	20f20 <strcasecmp+0x4>
   20f5c:	4620      	mov	r0, r4
   20f5e:	bc30      	pop	{r4, r5}
   20f60:	4770      	bx	lr
   20f62:	4614      	mov	r4, r2
   20f64:	4620      	mov	r0, r4
   20f66:	bc30      	pop	{r4, r5}
   20f68:	4770      	bx	lr
   20f6a:	bf00      	nop
   20f6c:	200021d1 	.word	0x200021d1

00020f70 <strcat>:
   20f70:	0783      	lsls	r3, r0, #30
   20f72:	b510      	push	{r4, lr}
   20f74:	4604      	mov	r4, r0
   20f76:	d110      	bne.n	20f9a <strcat+0x2a>
   20f78:	6802      	ldr	r2, [r0, #0]
   20f7a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   20f7e:	ea23 0302 	bic.w	r3, r3, r2
   20f82:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   20f86:	d108      	bne.n	20f9a <strcat+0x2a>
   20f88:	f850 2f04 	ldr.w	r2, [r0, #4]!
   20f8c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   20f90:	ea23 0302 	bic.w	r3, r3, r2
   20f94:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   20f98:	d0f6      	beq.n	20f88 <strcat+0x18>
   20f9a:	7803      	ldrb	r3, [r0, #0]
   20f9c:	b11b      	cbz	r3, 20fa6 <strcat+0x36>
   20f9e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   20fa2:	2b00      	cmp	r3, #0
   20fa4:	d1fb      	bne.n	20f9e <strcat+0x2e>
   20fa6:	f7fc f8c9 	bl	1d13c <strcpy>
   20faa:	4620      	mov	r0, r4
   20fac:	bd10      	pop	{r4, pc}
   20fae:	bf00      	nop

00020fb0 <strlcpy>:
   20fb0:	b1c2      	cbz	r2, 20fe4 <strlcpy+0x34>
   20fb2:	eb00 0c02 	add.w	ip, r0, r2
   20fb6:	b500      	push	{lr}
   20fb8:	460b      	mov	r3, r1
   20fba:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
   20fbe:	e004      	b.n	20fca <strlcpy+0x1a>
   20fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
   20fc4:	f800 2b01 	strb.w	r2, [r0], #1
   20fc8:	b142      	cbz	r2, 20fdc <strlcpy+0x2c>
   20fca:	4586      	cmp	lr, r0
   20fcc:	d1f8      	bne.n	20fc0 <strlcpy+0x10>
   20fce:	2200      	movs	r2, #0
   20fd0:	f80c 2c01 	strb.w	r2, [ip, #-1]
   20fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
   20fd8:	2a00      	cmp	r2, #0
   20fda:	d1fb      	bne.n	20fd4 <strlcpy+0x24>
   20fdc:	1a59      	subs	r1, r3, r1
   20fde:	1e48      	subs	r0, r1, #1
   20fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   20fe4:	460b      	mov	r3, r1
   20fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
   20fea:	2a00      	cmp	r2, #0
   20fec:	d1fb      	bne.n	20fe6 <strlcpy+0x36>
   20fee:	1a59      	subs	r1, r3, r1
   20ff0:	1e48      	subs	r0, r1, #1
   20ff2:	4770      	bx	lr

00020ff4 <strnlen>:
   20ff4:	b171      	cbz	r1, 21014 <strnlen+0x20>
   20ff6:	4603      	mov	r3, r0
   20ff8:	eb00 0c01 	add.w	ip, r0, r1
   20ffc:	e001      	b.n	21002 <strnlen+0xe>
   20ffe:	4563      	cmp	r3, ip
   21000:	d006      	beq.n	21010 <strnlen+0x1c>
   21002:	461a      	mov	r2, r3
   21004:	3301      	adds	r3, #1
   21006:	7811      	ldrb	r1, [r2, #0]
   21008:	2900      	cmp	r1, #0
   2100a:	d1f8      	bne.n	20ffe <strnlen+0xa>
   2100c:	1a10      	subs	r0, r2, r0
   2100e:	4770      	bx	lr
   21010:	1a18      	subs	r0, r3, r0
   21012:	4770      	bx	lr
   21014:	4608      	mov	r0, r1
   21016:	4770      	bx	lr

00021018 <__localeconv_l>:
   21018:	30f0      	adds	r0, #240	; 0xf0
   2101a:	4770      	bx	lr

0002101c <_localeconv_r>:
   2101c:	4800      	ldr	r0, [pc, #0]	; (21020 <_localeconv_r+0x4>)
   2101e:	4770      	bx	lr
   21020:	20009490 	.word	0x20009490

00021024 <localeconv>:
   21024:	4800      	ldr	r0, [pc, #0]	; (21028 <localeconv+0x4>)
   21026:	4770      	bx	lr
   21028:	20009490 	.word	0x20009490
   2102c:	00000000 	.word	0x00000000

00021030 <frexp>:
   21030:	b430      	push	{r4, r5}
   21032:	b082      	sub	sp, #8
   21034:	ed8d 0b00 	vstr	d0, [sp]
   21038:	9a01      	ldr	r2, [sp, #4]
   2103a:	4c19      	ldr	r4, [pc, #100]	; (210a0 <frexp+0x70>)
   2103c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   21040:	2100      	movs	r1, #0
   21042:	42a3      	cmp	r3, r4
   21044:	6001      	str	r1, [r0, #0]
   21046:	dc21      	bgt.n	2108c <frexp+0x5c>
   21048:	9c00      	ldr	r4, [sp, #0]
   2104a:	431c      	orrs	r4, r3
   2104c:	d01e      	beq.n	2108c <frexp+0x5c>
   2104e:	4c15      	ldr	r4, [pc, #84]	; (210a4 <frexp+0x74>)
   21050:	4014      	ands	r4, r2
   21052:	b954      	cbnz	r4, 2106a <frexp+0x3a>
   21054:	ed9f 7b10 	vldr	d7, [pc, #64]	; 21098 <frexp+0x68>
   21058:	ee20 7b07 	vmul.f64	d7, d0, d7
   2105c:	ed8d 7b00 	vstr	d7, [sp]
   21060:	9a01      	ldr	r2, [sp, #4]
   21062:	f06f 0135 	mvn.w	r1, #53	; 0x35
   21066:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   2106a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   2106e:	e9dd 4500 	ldrd	r4, r5, [sp]
   21072:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   21076:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   2107a:	151b      	asrs	r3, r3, #20
   2107c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   21080:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   21084:	e9cd 4500 	strd	r4, r5, [sp]
   21088:	440b      	add	r3, r1
   2108a:	6003      	str	r3, [r0, #0]
   2108c:	ed9d 0b00 	vldr	d0, [sp]
   21090:	b002      	add	sp, #8
   21092:	bc30      	pop	{r4, r5}
   21094:	4770      	bx	lr
   21096:	bf00      	nop
   21098:	00000000 	.word	0x00000000
   2109c:	43500000 	.word	0x43500000
   210a0:	7fefffff 	.word	0x7fefffff
   210a4:	7ff00000 	.word	0x7ff00000

000210a8 <__assert_func>:
   210a8:	b500      	push	{lr}
   210aa:	4c0b      	ldr	r4, [pc, #44]	; (210d8 <__assert_func+0x30>)
   210ac:	6825      	ldr	r5, [r4, #0]
   210ae:	4614      	mov	r4, r2
   210b0:	68ee      	ldr	r6, [r5, #12]
   210b2:	461a      	mov	r2, r3
   210b4:	b085      	sub	sp, #20
   210b6:	4603      	mov	r3, r0
   210b8:	460d      	mov	r5, r1
   210ba:	b14c      	cbz	r4, 210d0 <__assert_func+0x28>
   210bc:	4907      	ldr	r1, [pc, #28]	; (210dc <__assert_func+0x34>)
   210be:	9500      	str	r5, [sp, #0]
   210c0:	e9cd 1401 	strd	r1, r4, [sp, #4]
   210c4:	4630      	mov	r0, r6
   210c6:	4906      	ldr	r1, [pc, #24]	; (210e0 <__assert_func+0x38>)
   210c8:	f000 ffaa 	bl	22020 <fiprintf>
   210cc:	f7f5 ff20 	bl	16f10 <abort>
   210d0:	4904      	ldr	r1, [pc, #16]	; (210e4 <__assert_func+0x3c>)
   210d2:	460c      	mov	r4, r1
   210d4:	e7f3      	b.n	210be <__assert_func+0x16>
   210d6:	bf00      	nop
   210d8:	20008e58 	.word	0x20008e58
   210dc:	20008d34 	.word	0x20008d34
   210e0:	20008d44 	.word	0x20008d44
   210e4:	2000577c 	.word	0x2000577c

000210e8 <__assert>:
   210e8:	b508      	push	{r3, lr}
   210ea:	4613      	mov	r3, r2
   210ec:	2200      	movs	r2, #0
   210ee:	f7ff ffdb 	bl	210a8 <__assert_func>
   210f2:	bf00      	nop
   210f4:	0000      	movs	r0, r0
   210f6:	0000      	movs	r0, r0
   210f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210fc:	6903      	ldr	r3, [r0, #16]
   210fe:	690c      	ldr	r4, [r1, #16]
   21100:	42a3      	cmp	r3, r4
   21102:	b083      	sub	sp, #12
   21104:	f2c0 8087 	blt.w	21216 <__assert+0x12e>
   21108:	3c01      	subs	r4, #1
   2110a:	f101 0514 	add.w	r5, r1, #20
   2110e:	00a3      	lsls	r3, r4, #2
   21110:	f100 0814 	add.w	r8, r0, #20
   21114:	9300      	str	r3, [sp, #0]
   21116:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2111a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   2111e:	3301      	adds	r3, #1
   21120:	4681      	mov	r9, r0
   21122:	429a      	cmp	r2, r3
   21124:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   21128:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   2112c:	9001      	str	r0, [sp, #4]
   2112e:	fbb2 f6f3 	udiv	r6, r2, r3
   21132:	d33b      	bcc.n	211ac <__assert+0xc4>
   21134:	f04f 0c00 	mov.w	ip, #0
   21138:	46ae      	mov	lr, r5
   2113a:	4640      	mov	r0, r8
   2113c:	46e2      	mov	sl, ip
   2113e:	4663      	mov	r3, ip
   21140:	f85e bb04 	ldr.w	fp, [lr], #4
   21144:	6802      	ldr	r2, [r0, #0]
   21146:	fa1f fc8b 	uxth.w	ip, fp
   2114a:	fb06 330c 	mla	r3, r6, ip, r3
   2114e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   21152:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   21156:	fb06 cc0b 	mla	ip, r6, fp, ip
   2115a:	b29b      	uxth	r3, r3
   2115c:	ebaa 0303 	sub.w	r3, sl, r3
   21160:	fa1f fa8c 	uxth.w	sl, ip
   21164:	fa13 f382 	uxtah	r3, r3, r2
   21168:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   2116c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   21170:	b29b      	uxth	r3, r3
   21172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21176:	4577      	cmp	r7, lr
   21178:	f840 3b04 	str.w	r3, [r0], #4
   2117c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   21180:	ea4f 431c 	mov.w	r3, ip, lsr #16
   21184:	d2dc      	bcs.n	21140 <__assert+0x58>
   21186:	9b00      	ldr	r3, [sp, #0]
   21188:	f858 3003 	ldr.w	r3, [r8, r3]
   2118c:	b973      	cbnz	r3, 211ac <__assert+0xc4>
   2118e:	9b01      	ldr	r3, [sp, #4]
   21190:	3b04      	subs	r3, #4
   21192:	4598      	cmp	r8, r3
   21194:	d304      	bcc.n	211a0 <__assert+0xb8>
   21196:	e007      	b.n	211a8 <__assert+0xc0>
   21198:	4598      	cmp	r8, r3
   2119a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2119e:	d203      	bcs.n	211a8 <__assert+0xc0>
   211a0:	f853 2904 	ldr.w	r2, [r3], #-4
   211a4:	2a00      	cmp	r2, #0
   211a6:	d0f7      	beq.n	21198 <__assert+0xb0>
   211a8:	f8c9 4010 	str.w	r4, [r9, #16]
   211ac:	4648      	mov	r0, r9
   211ae:	f7fd fc29 	bl	1ea04 <__mcmp>
   211b2:	2800      	cmp	r0, #0
   211b4:	db2b      	blt.n	2120e <__assert+0x126>
   211b6:	3601      	adds	r6, #1
   211b8:	4641      	mov	r1, r8
   211ba:	2300      	movs	r3, #0
   211bc:	f855 0b04 	ldr.w	r0, [r5], #4
   211c0:	f8d1 c000 	ldr.w	ip, [r1]
   211c4:	b282      	uxth	r2, r0
   211c6:	1a9a      	subs	r2, r3, r2
   211c8:	0c03      	lsrs	r3, r0, #16
   211ca:	fa12 f28c 	uxtah	r2, r2, ip
   211ce:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   211d2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   211d6:	b292      	uxth	r2, r2
   211d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   211dc:	42af      	cmp	r7, r5
   211de:	f841 2b04 	str.w	r2, [r1], #4
   211e2:	ea4f 4323 	mov.w	r3, r3, asr #16
   211e6:	d2e9      	bcs.n	211bc <__assert+0xd4>
   211e8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   211ec:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   211f0:	b96a      	cbnz	r2, 2120e <__assert+0x126>
   211f2:	3b04      	subs	r3, #4
   211f4:	4598      	cmp	r8, r3
   211f6:	d304      	bcc.n	21202 <__assert+0x11a>
   211f8:	e007      	b.n	2120a <__assert+0x122>
   211fa:	4598      	cmp	r8, r3
   211fc:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   21200:	d203      	bcs.n	2120a <__assert+0x122>
   21202:	f853 2904 	ldr.w	r2, [r3], #-4
   21206:	2a00      	cmp	r2, #0
   21208:	d0f7      	beq.n	211fa <__assert+0x112>
   2120a:	f8c9 4010 	str.w	r4, [r9, #16]
   2120e:	4630      	mov	r0, r6
   21210:	b003      	add	sp, #12
   21212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21216:	2000      	movs	r0, #0
   21218:	b003      	add	sp, #12
   2121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2121e:	bf00      	nop

00021220 <_dtoa_r>:
   21220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21224:	ed2d 8b02 	vpush	{d8}
   21228:	b08f      	sub	sp, #60	; 0x3c
   2122a:	ed8d 0b02 	vstr	d0, [sp, #8]
   2122e:	9101      	str	r1, [sp, #4]
   21230:	6b81      	ldr	r1, [r0, #56]	; 0x38
   21232:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   21234:	9305      	str	r3, [sp, #20]
   21236:	ec57 6b10 	vmov	r6, r7, d0
   2123a:	4604      	mov	r4, r0
   2123c:	4693      	mov	fp, r2
   2123e:	b141      	cbz	r1, 21252 <_dtoa_r+0x32>
   21240:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   21242:	604a      	str	r2, [r1, #4]
   21244:	2301      	movs	r3, #1
   21246:	4093      	lsls	r3, r2
   21248:	608b      	str	r3, [r1, #8]
   2124a:	f7fd f923 	bl	1e494 <_Bfree>
   2124e:	2300      	movs	r3, #0
   21250:	63a3      	str	r3, [r4, #56]	; 0x38
   21252:	f1b7 0800 	subs.w	r8, r7, #0
   21256:	bfb4      	ite	lt
   21258:	2301      	movlt	r3, #1
   2125a:	2300      	movge	r3, #0
   2125c:	602b      	str	r3, [r5, #0]
   2125e:	4bbe      	ldr	r3, [pc, #760]	; (21558 <_dtoa_r+0x338>)
   21260:	bfbc      	itt	lt
   21262:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   21266:	f8cd 800c 	strlt.w	r8, [sp, #12]
   2126a:	ea33 0308 	bics.w	r3, r3, r8
   2126e:	f000 809f 	beq.w	213b0 <_dtoa_r+0x190>
   21272:	ed9d 8b02 	vldr	d8, [sp, #8]
   21276:	eeb5 8b40 	vcmp.f64	d8, #0.0
   2127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2127e:	d111      	bne.n	212a4 <_dtoa_r+0x84>
   21280:	9a05      	ldr	r2, [sp, #20]
   21282:	2301      	movs	r3, #1
   21284:	6013      	str	r3, [r2, #0]
   21286:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21288:	2b00      	cmp	r3, #0
   2128a:	f000 823f 	beq.w	2170c <_dtoa_r+0x4ec>
   2128e:	4bb3      	ldr	r3, [pc, #716]	; (2155c <_dtoa_r+0x33c>)
   21290:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   21292:	6013      	str	r3, [r2, #0]
   21294:	3b01      	subs	r3, #1
   21296:	9300      	str	r3, [sp, #0]
   21298:	9800      	ldr	r0, [sp, #0]
   2129a:	b00f      	add	sp, #60	; 0x3c
   2129c:	ecbd 8b02 	vpop	{d8}
   212a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212a4:	aa0c      	add	r2, sp, #48	; 0x30
   212a6:	a90d      	add	r1, sp, #52	; 0x34
   212a8:	4620      	mov	r0, r4
   212aa:	eeb0 0b48 	vmov.f64	d0, d8
   212ae:	f7fd fd09 	bl	1ecc4 <__d2b>
   212b2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   212b6:	4605      	mov	r5, r0
   212b8:	f040 8092 	bne.w	213e0 <_dtoa_r+0x1c0>
   212bc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   212c0:	440b      	add	r3, r1
   212c2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   212c6:	2a20      	cmp	r2, #32
   212c8:	f340 82fa 	ble.w	218c0 <_dtoa_r+0x6a0>
   212cc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   212d0:	fa08 f802 	lsl.w	r8, r8, r2
   212d4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   212d8:	40d6      	lsrs	r6, r2
   212da:	ea48 0206 	orr.w	r2, r8, r6
   212de:	ee07 2a10 	vmov	s14, r2
   212e2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   212e6:	1e58      	subs	r0, r3, #1
   212e8:	ee17 6a90 	vmov	r6, s15
   212ec:	ec53 2b17 	vmov	r2, r3, d7
   212f0:	f04f 0a01 	mov.w	sl, #1
   212f4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   212f8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 21540 <_dtoa_r+0x320>
   212fc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 21548 <_dtoa_r+0x328>
   21300:	ed9f 5b93 	vldr	d5, [pc, #588]	; 21550 <_dtoa_r+0x330>
   21304:	ee06 0a90 	vmov	s13, r0
   21308:	ec43 2b12 	vmov	d2, r2, r3
   2130c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   21310:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   21314:	ee32 6b46 	vsub.f64	d6, d2, d6
   21318:	eea6 7b03 	vfma.f64	d7, d6, d3
   2131c:	eea4 7b05 	vfma.f64	d7, d4, d5
   21320:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   21324:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   21328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2132c:	ee16 7a90 	vmov	r7, s13
   21330:	d508      	bpl.n	21344 <_dtoa_r+0x124>
   21332:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   21336:	eeb4 6b47 	vcmp.f64	d6, d7
   2133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2133e:	bf18      	it	ne
   21340:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   21344:	2f16      	cmp	r7, #22
   21346:	f200 8145 	bhi.w	215d4 <_dtoa_r+0x3b4>
   2134a:	4b85      	ldr	r3, [pc, #532]	; (21560 <_dtoa_r+0x340>)
   2134c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   21350:	ed93 7b00 	vldr	d7, [r3]
   21354:	eeb4 8bc7 	vcmpe.f64	d8, d7
   21358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2135c:	d557      	bpl.n	2140e <_dtoa_r+0x1ee>
   2135e:	1a09      	subs	r1, r1, r0
   21360:	2300      	movs	r3, #0
   21362:	f1b1 0801 	subs.w	r8, r1, #1
   21366:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   2136a:	930a      	str	r3, [sp, #40]	; 0x28
   2136c:	f100 8139 	bmi.w	215e2 <_dtoa_r+0x3c2>
   21370:	2300      	movs	r3, #0
   21372:	9306      	str	r3, [sp, #24]
   21374:	2f00      	cmp	r7, #0
   21376:	da52      	bge.n	2141e <_dtoa_r+0x1fe>
   21378:	9b06      	ldr	r3, [sp, #24]
   2137a:	9704      	str	r7, [sp, #16]
   2137c:	1bdb      	subs	r3, r3, r7
   2137e:	9306      	str	r3, [sp, #24]
   21380:	427b      	negs	r3, r7
   21382:	9308      	str	r3, [sp, #32]
   21384:	9b01      	ldr	r3, [sp, #4]
   21386:	2b09      	cmp	r3, #9
   21388:	f04f 0700 	mov.w	r7, #0
   2138c:	d84e      	bhi.n	2142c <_dtoa_r+0x20c>
   2138e:	2b05      	cmp	r3, #5
   21390:	f340 829d 	ble.w	218ce <_dtoa_r+0x6ae>
   21394:	3b04      	subs	r3, #4
   21396:	9301      	str	r3, [sp, #4]
   21398:	2600      	movs	r6, #0
   2139a:	9b01      	ldr	r3, [sp, #4]
   2139c:	1e9a      	subs	r2, r3, #2
   2139e:	2a03      	cmp	r2, #3
   213a0:	f200 8125 	bhi.w	215ee <_dtoa_r+0x3ce>
   213a4:	e8df f012 	tbh	[pc, r2, lsl #1]
   213a8:	03a703aa 	.word	0x03a703aa
   213ac:	037e039d 	.word	0x037e039d
   213b0:	9a05      	ldr	r2, [sp, #20]
   213b2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   213b6:	f242 730f 	movw	r3, #9999	; 0x270f
   213ba:	ea58 0806 	orrs.w	r8, r8, r6
   213be:	6013      	str	r3, [r2, #0]
   213c0:	d11e      	bne.n	21400 <_dtoa_r+0x1e0>
   213c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   213c4:	2b00      	cmp	r3, #0
   213c6:	f000 8591 	beq.w	21eec <_dtoa_r+0xccc>
   213ca:	4b66      	ldr	r3, [pc, #408]	; (21564 <_dtoa_r+0x344>)
   213cc:	9300      	str	r3, [sp, #0]
   213ce:	3308      	adds	r3, #8
   213d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   213d2:	9800      	ldr	r0, [sp, #0]
   213d4:	6013      	str	r3, [r2, #0]
   213d6:	b00f      	add	sp, #60	; 0x3c
   213d8:	ecbd 8b02 	vpop	{d8}
   213dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213e0:	ee18 6a90 	vmov	r6, s17
   213e4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   213e8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   213ec:	ec53 2b18 	vmov	r2, r3, d8
   213f0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   213f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   213f6:	f04f 0a00 	mov.w	sl, #0
   213fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   213fe:	e77b      	b.n	212f8 <_dtoa_r+0xd8>
   21400:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21402:	2b00      	cmp	r3, #0
   21404:	f040 833b 	bne.w	21a7e <_dtoa_r+0x85e>
   21408:	4b57      	ldr	r3, [pc, #348]	; (21568 <_dtoa_r+0x348>)
   2140a:	9300      	str	r3, [sp, #0]
   2140c:	e744      	b.n	21298 <_dtoa_r+0x78>
   2140e:	1a09      	subs	r1, r1, r0
   21410:	2300      	movs	r3, #0
   21412:	f1b1 0801 	subs.w	r8, r1, #1
   21416:	930a      	str	r3, [sp, #40]	; 0x28
   21418:	f100 80e3 	bmi.w	215e2 <_dtoa_r+0x3c2>
   2141c:	9306      	str	r3, [sp, #24]
   2141e:	2300      	movs	r3, #0
   21420:	9308      	str	r3, [sp, #32]
   21422:	9b01      	ldr	r3, [sp, #4]
   21424:	9704      	str	r7, [sp, #16]
   21426:	2b09      	cmp	r3, #9
   21428:	44b8      	add	r8, r7
   2142a:	d9b0      	bls.n	2138e <_dtoa_r+0x16e>
   2142c:	2300      	movs	r3, #0
   2142e:	2601      	movs	r6, #1
   21430:	9301      	str	r3, [sp, #4]
   21432:	9607      	str	r6, [sp, #28]
   21434:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   21438:	469b      	mov	fp, r3
   2143a:	2100      	movs	r1, #0
   2143c:	63e1      	str	r1, [r4, #60]	; 0x3c
   2143e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   21442:	4620      	mov	r0, r4
   21444:	f7fd f800 	bl	1e448 <_Balloc>
   21448:	9000      	str	r0, [sp, #0]
   2144a:	2800      	cmp	r0, #0
   2144c:	f000 8540 	beq.w	21ed0 <_dtoa_r+0xcb0>
   21450:	9b00      	ldr	r3, [sp, #0]
   21452:	63a3      	str	r3, [r4, #56]	; 0x38
   21454:	f1b9 0f0e 	cmp.w	r9, #14
   21458:	f200 80dc 	bhi.w	21614 <_dtoa_r+0x3f4>
   2145c:	2e00      	cmp	r6, #0
   2145e:	f000 80d9 	beq.w	21614 <_dtoa_r+0x3f4>
   21462:	9b04      	ldr	r3, [sp, #16]
   21464:	2b00      	cmp	r3, #0
   21466:	f340 83de 	ble.w	21c26 <_dtoa_r+0xa06>
   2146a:	4a3d      	ldr	r2, [pc, #244]	; (21560 <_dtoa_r+0x340>)
   2146c:	f003 010f 	and.w	r1, r3, #15
   21470:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   21474:	ed92 7b00 	vldr	d7, [r2]
   21478:	111a      	asrs	r2, r3, #4
   2147a:	05db      	lsls	r3, r3, #23
   2147c:	f140 8382 	bpl.w	21b84 <_dtoa_r+0x964>
   21480:	493a      	ldr	r1, [pc, #232]	; (2156c <_dtoa_r+0x34c>)
   21482:	ed91 6b08 	vldr	d6, [r1, #32]
   21486:	f002 020f 	and.w	r2, r2, #15
   2148a:	2003      	movs	r0, #3
   2148c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   21490:	b15a      	cbz	r2, 214aa <_dtoa_r+0x28a>
   21492:	4936      	ldr	r1, [pc, #216]	; (2156c <_dtoa_r+0x34c>)
   21494:	07d6      	lsls	r6, r2, #31
   21496:	d504      	bpl.n	214a2 <_dtoa_r+0x282>
   21498:	ed91 6b00 	vldr	d6, [r1]
   2149c:	3001      	adds	r0, #1
   2149e:	ee27 7b06 	vmul.f64	d7, d7, d6
   214a2:	1052      	asrs	r2, r2, #1
   214a4:	f101 0108 	add.w	r1, r1, #8
   214a8:	d1f4      	bne.n	21494 <_dtoa_r+0x274>
   214aa:	ee85 6b07 	vdiv.f64	d6, d5, d7
   214ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   214b0:	b13b      	cbz	r3, 214c2 <_dtoa_r+0x2a2>
   214b2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   214b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   214ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   214be:	f100 84ae 	bmi.w	21e1e <_dtoa_r+0xbfe>
   214c2:	ee07 0a90 	vmov	s15, r0
   214c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   214ca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   214ce:	eea5 7b06 	vfma.f64	d7, d5, d6
   214d2:	ee17 2a90 	vmov	r2, s15
   214d6:	ec51 0b17 	vmov	r0, r1, d7
   214da:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   214de:	f1b9 0f00 	cmp.w	r9, #0
   214e2:	f000 8388 	beq.w	21bf6 <_dtoa_r+0x9d6>
   214e6:	9e04      	ldr	r6, [sp, #16]
   214e8:	464a      	mov	r2, r9
   214ea:	9b07      	ldr	r3, [sp, #28]
   214ec:	2b00      	cmp	r3, #0
   214ee:	f000 8447 	beq.w	21d80 <_dtoa_r+0xb60>
   214f2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   214f6:	4b1a      	ldr	r3, [pc, #104]	; (21560 <_dtoa_r+0x340>)
   214f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   214fc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   21500:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   21504:	ee36 7b47 	vsub.f64	d7, d6, d7
   21508:	ed1c 6b02 	vldr	d6, [ip, #-8]
   2150c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   21510:	ec41 0b16 	vmov	d6, r0, r1
   21514:	ee14 0a90 	vmov	r0, s9
   21518:	ee35 5b46 	vsub.f64	d5, d5, d6
   2151c:	9900      	ldr	r1, [sp, #0]
   2151e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   21522:	3030      	adds	r0, #48	; 0x30
   21524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21528:	f801 0b01 	strb.w	r0, [r1], #1
   2152c:	f300 84ac 	bgt.w	21e88 <_dtoa_r+0xc68>
   21530:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   21534:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   21538:	f04f 0c00 	mov.w	ip, #0
   2153c:	e031      	b.n	215a2 <_dtoa_r+0x382>
   2153e:	bf00      	nop
   21540:	636f4361 	.word	0x636f4361
   21544:	3fd287a7 	.word	0x3fd287a7
   21548:	8b60c8b3 	.word	0x8b60c8b3
   2154c:	3fc68a28 	.word	0x3fc68a28
   21550:	509f79fb 	.word	0x509f79fb
   21554:	3fd34413 	.word	0x3fd34413
   21558:	7ff00000 	.word	0x7ff00000
   2155c:	200035f1 	.word	0x200035f1
   21560:	20001cd8 	.word	0x20001cd8
   21564:	20008d74 	.word	0x20008d74
   21568:	20008d80 	.word	0x20008d80
   2156c:	20001dc8 	.word	0x20001dc8
   21570:	f10c 0c01 	add.w	ip, ip, #1
   21574:	4594      	cmp	ip, r2
   21576:	da4d      	bge.n	21614 <_dtoa_r+0x3f4>
   21578:	ee27 7b04 	vmul.f64	d7, d7, d4
   2157c:	ee25 5b04 	vmul.f64	d5, d5, d4
   21580:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   21584:	ee16 3a90 	vmov	r3, s13
   21588:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   2158c:	3330      	adds	r3, #48	; 0x30
   2158e:	ee37 7b43 	vsub.f64	d7, d7, d3
   21592:	eeb4 7bc5 	vcmpe.f64	d7, d5
   21596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2159a:	f801 3b01 	strb.w	r3, [r1], #1
   2159e:	f100 8473 	bmi.w	21e88 <_dtoa_r+0xc68>
   215a2:	ee32 6b47 	vsub.f64	d6, d2, d7
   215a6:	eeb4 6bc5 	vcmpe.f64	d6, d5
   215aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   215ae:	d5df      	bpl.n	21570 <_dtoa_r+0x350>
   215b0:	9a00      	ldr	r2, [sp, #0]
   215b2:	9604      	str	r6, [sp, #16]
   215b4:	e002      	b.n	215bc <_dtoa_r+0x39c>
   215b6:	428a      	cmp	r2, r1
   215b8:	f000 8450 	beq.w	21e5c <_dtoa_r+0xc3c>
   215bc:	4689      	mov	r9, r1
   215be:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   215c2:	2b39      	cmp	r3, #57	; 0x39
   215c4:	d0f7      	beq.n	215b6 <_dtoa_r+0x396>
   215c6:	3301      	adds	r3, #1
   215c8:	b2db      	uxtb	r3, r3
   215ca:	700b      	strb	r3, [r1, #0]
   215cc:	9b04      	ldr	r3, [sp, #16]
   215ce:	3301      	adds	r3, #1
   215d0:	9304      	str	r3, [sp, #16]
   215d2:	e155      	b.n	21880 <_dtoa_r+0x660>
   215d4:	1a09      	subs	r1, r1, r0
   215d6:	2301      	movs	r3, #1
   215d8:	f1b1 0801 	subs.w	r8, r1, #1
   215dc:	930a      	str	r3, [sp, #40]	; 0x28
   215de:	f57f aec7 	bpl.w	21370 <_dtoa_r+0x150>
   215e2:	f1c1 0301 	rsb	r3, r1, #1
   215e6:	9306      	str	r3, [sp, #24]
   215e8:	f04f 0800 	mov.w	r8, #0
   215ec:	e6c2      	b.n	21374 <_dtoa_r+0x154>
   215ee:	2600      	movs	r6, #0
   215f0:	63e6      	str	r6, [r4, #60]	; 0x3c
   215f2:	4631      	mov	r1, r6
   215f4:	4620      	mov	r0, r4
   215f6:	f7fc ff27 	bl	1e448 <_Balloc>
   215fa:	9000      	str	r0, [sp, #0]
   215fc:	2800      	cmp	r0, #0
   215fe:	f000 8467 	beq.w	21ed0 <_dtoa_r+0xcb0>
   21602:	9b00      	ldr	r3, [sp, #0]
   21604:	63a3      	str	r3, [r4, #56]	; 0x38
   21606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2160a:	930b      	str	r3, [sp, #44]	; 0x2c
   2160c:	4699      	mov	r9, r3
   2160e:	2301      	movs	r3, #1
   21610:	46b3      	mov	fp, r6
   21612:	9307      	str	r3, [sp, #28]
   21614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   21616:	2a00      	cmp	r2, #0
   21618:	db55      	blt.n	216c6 <_dtoa_r+0x4a6>
   2161a:	9904      	ldr	r1, [sp, #16]
   2161c:	290e      	cmp	r1, #14
   2161e:	dc52      	bgt.n	216c6 <_dtoa_r+0x4a6>
   21620:	4bb7      	ldr	r3, [pc, #732]	; (21900 <_dtoa_r+0x6e0>)
   21622:	f1bb 0f00 	cmp.w	fp, #0
   21626:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   2162a:	ed93 6b00 	vldr	d6, [r3]
   2162e:	da15      	bge.n	2165c <_dtoa_r+0x43c>
   21630:	f1b9 0f00 	cmp.w	r9, #0
   21634:	dc12      	bgt.n	2165c <_dtoa_r+0x43c>
   21636:	f040 82f2 	bne.w	21c1e <_dtoa_r+0x9fe>
   2163a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   2163e:	ee26 7b07 	vmul.f64	d7, d6, d7
   21642:	eeb4 8bc7 	vcmpe.f64	d8, d7
   21646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2164a:	46ca      	mov	sl, r9
   2164c:	464e      	mov	r6, r9
   2164e:	f200 826d 	bhi.w	21b2c <_dtoa_r+0x90c>
   21652:	f8dd 8000 	ldr.w	r8, [sp]
   21656:	ea6f 0b0b 	mvn.w	fp, fp
   2165a:	e270      	b.n	21b3e <_dtoa_r+0x91e>
   2165c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   21660:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   21664:	9900      	ldr	r1, [sp, #0]
   21666:	ee17 3a10 	vmov	r3, s14
   2166a:	f1b9 0f01 	cmp.w	r9, #1
   2166e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   21672:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   21676:	f801 3b01 	strb.w	r3, [r1], #1
   2167a:	eea5 8b46 	vfms.f64	d8, d5, d6
   2167e:	f000 8334 	beq.w	21cea <_dtoa_r+0xaca>
   21682:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   21686:	2301      	movs	r3, #1
   21688:	e011      	b.n	216ae <_dtoa_r+0x48e>
   2168a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   2168e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   21692:	3301      	adds	r3, #1
   21694:	ee17 2a10 	vmov	r2, s14
   21698:	454b      	cmp	r3, r9
   2169a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   2169e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   216a2:	f801 2b01 	strb.w	r2, [r1], #1
   216a6:	eea5 8b46 	vfms.f64	d8, d5, d6
   216aa:	f000 831e 	beq.w	21cea <_dtoa_r+0xaca>
   216ae:	ee28 8b04 	vmul.f64	d8, d8, d4
   216b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   216b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   216ba:	d1e6      	bne.n	2168a <_dtoa_r+0x46a>
   216bc:	9b04      	ldr	r3, [sp, #16]
   216be:	3301      	adds	r3, #1
   216c0:	9304      	str	r3, [sp, #16]
   216c2:	4689      	mov	r9, r1
   216c4:	e0dc      	b.n	21880 <_dtoa_r+0x660>
   216c6:	9b07      	ldr	r3, [sp, #28]
   216c8:	b343      	cbz	r3, 2171c <_dtoa_r+0x4fc>
   216ca:	9b01      	ldr	r3, [sp, #4]
   216cc:	2b01      	cmp	r3, #1
   216ce:	f340 8276 	ble.w	21bbe <_dtoa_r+0x99e>
   216d2:	9b08      	ldr	r3, [sp, #32]
   216d4:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   216d8:	4553      	cmp	r3, sl
   216da:	f280 823f 	bge.w	21b5c <_dtoa_r+0x93c>
   216de:	9b08      	ldr	r3, [sp, #32]
   216e0:	f8cd a020 	str.w	sl, [sp, #32]
   216e4:	ebaa 0203 	sub.w	r2, sl, r3
   216e8:	4417      	add	r7, r2
   216ea:	f04f 0a00 	mov.w	sl, #0
   216ee:	f1b9 0f00 	cmp.w	r9, #0
   216f2:	f2c0 8325 	blt.w	21d40 <_dtoa_r+0xb20>
   216f6:	9b06      	ldr	r3, [sp, #24]
   216f8:	9309      	str	r3, [sp, #36]	; 0x24
   216fa:	444b      	add	r3, r9
   216fc:	44c8      	add	r8, r9
   216fe:	9306      	str	r3, [sp, #24]
   21700:	2101      	movs	r1, #1
   21702:	4620      	mov	r0, r4
   21704:	f7fc ffca 	bl	1e69c <__i2b>
   21708:	4606      	mov	r6, r0
   2170a:	e00c      	b.n	21726 <_dtoa_r+0x506>
   2170c:	4b7d      	ldr	r3, [pc, #500]	; (21904 <_dtoa_r+0x6e4>)
   2170e:	9300      	str	r3, [sp, #0]
   21710:	9800      	ldr	r0, [sp, #0]
   21712:	b00f      	add	sp, #60	; 0x3c
   21714:	ecbd 8b02 	vpop	{d8}
   21718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2171c:	9b06      	ldr	r3, [sp, #24]
   2171e:	f8dd a020 	ldr.w	sl, [sp, #32]
   21722:	9e07      	ldr	r6, [sp, #28]
   21724:	9309      	str	r3, [sp, #36]	; 0x24
   21726:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21728:	b16b      	cbz	r3, 21746 <_dtoa_r+0x526>
   2172a:	f1b8 0f00 	cmp.w	r8, #0
   2172e:	dd0a      	ble.n	21746 <_dtoa_r+0x526>
   21730:	4543      	cmp	r3, r8
   21732:	9906      	ldr	r1, [sp, #24]
   21734:	461a      	mov	r2, r3
   21736:	bfa8      	it	ge
   21738:	4642      	movge	r2, r8
   2173a:	1a89      	subs	r1, r1, r2
   2173c:	1a9b      	subs	r3, r3, r2
   2173e:	9106      	str	r1, [sp, #24]
   21740:	9309      	str	r3, [sp, #36]	; 0x24
   21742:	eba8 0802 	sub.w	r8, r8, r2
   21746:	9b08      	ldr	r3, [sp, #32]
   21748:	b163      	cbz	r3, 21764 <_dtoa_r+0x544>
   2174a:	9b07      	ldr	r3, [sp, #28]
   2174c:	2b00      	cmp	r3, #0
   2174e:	f000 82a7 	beq.w	21ca0 <_dtoa_r+0xa80>
   21752:	f1ba 0f00 	cmp.w	sl, #0
   21756:	f300 8204 	bgt.w	21b62 <_dtoa_r+0x942>
   2175a:	9b08      	ldr	r3, [sp, #32]
   2175c:	ebb3 020a 	subs.w	r2, r3, sl
   21760:	f040 82ff 	bne.w	21d62 <_dtoa_r+0xb42>
   21764:	2101      	movs	r1, #1
   21766:	4620      	mov	r0, r4
   21768:	f7fc ff98 	bl	1e69c <__i2b>
   2176c:	2f00      	cmp	r7, #0
   2176e:	4682      	mov	sl, r0
   21770:	f300 80af 	bgt.w	218d2 <_dtoa_r+0x6b2>
   21774:	9b01      	ldr	r3, [sp, #4]
   21776:	2b01      	cmp	r3, #1
   21778:	f340 8187 	ble.w	21a8a <_dtoa_r+0x86a>
   2177c:	2300      	movs	r3, #0
   2177e:	9308      	str	r3, [sp, #32]
   21780:	2001      	movs	r0, #1
   21782:	2f00      	cmp	r7, #0
   21784:	f040 80b1 	bne.w	218ea <_dtoa_r+0x6ca>
   21788:	4440      	add	r0, r8
   2178a:	f010 001f 	ands.w	r0, r0, #31
   2178e:	f000 817a 	beq.w	21a86 <_dtoa_r+0x866>
   21792:	f1c0 0220 	rsb	r2, r0, #32
   21796:	2a04      	cmp	r2, #4
   21798:	f300 8088 	bgt.w	218ac <_dtoa_r+0x68c>
   2179c:	f040 81f6 	bne.w	21b8c <_dtoa_r+0x96c>
   217a0:	9b06      	ldr	r3, [sp, #24]
   217a2:	2b00      	cmp	r3, #0
   217a4:	dd05      	ble.n	217b2 <_dtoa_r+0x592>
   217a6:	4629      	mov	r1, r5
   217a8:	461a      	mov	r2, r3
   217aa:	4620      	mov	r0, r4
   217ac:	f7fd f8b2 	bl	1e914 <__lshift>
   217b0:	4605      	mov	r5, r0
   217b2:	f1b8 0f00 	cmp.w	r8, #0
   217b6:	dd05      	ble.n	217c4 <_dtoa_r+0x5a4>
   217b8:	4651      	mov	r1, sl
   217ba:	4642      	mov	r2, r8
   217bc:	4620      	mov	r0, r4
   217be:	f7fd f8a9 	bl	1e914 <__lshift>
   217c2:	4682      	mov	sl, r0
   217c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   217c6:	2b00      	cmp	r3, #0
   217c8:	f040 813f 	bne.w	21a4a <_dtoa_r+0x82a>
   217cc:	f1b9 0f00 	cmp.w	r9, #0
   217d0:	f340 8125 	ble.w	21a1e <_dtoa_r+0x7fe>
   217d4:	9b07      	ldr	r3, [sp, #28]
   217d6:	2b00      	cmp	r3, #0
   217d8:	f040 80a3 	bne.w	21922 <_dtoa_r+0x702>
   217dc:	9b04      	ldr	r3, [sp, #16]
   217de:	3301      	adds	r3, #1
   217e0:	9304      	str	r3, [sp, #16]
   217e2:	f8dd 8000 	ldr.w	r8, [sp]
   217e6:	2701      	movs	r7, #1
   217e8:	e007      	b.n	217fa <_dtoa_r+0x5da>
   217ea:	4629      	mov	r1, r5
   217ec:	2300      	movs	r3, #0
   217ee:	220a      	movs	r2, #10
   217f0:	4620      	mov	r0, r4
   217f2:	f7fc fe59 	bl	1e4a8 <__multadd>
   217f6:	3701      	adds	r7, #1
   217f8:	4605      	mov	r5, r0
   217fa:	4651      	mov	r1, sl
   217fc:	4628      	mov	r0, r5
   217fe:	f7ff fc7b 	bl	210f8 <__assert+0x10>
   21802:	45b9      	cmp	r9, r7
   21804:	f100 0030 	add.w	r0, r0, #48	; 0x30
   21808:	f808 0b01 	strb.w	r0, [r8], #1
   2180c:	dced      	bgt.n	217ea <_dtoa_r+0x5ca>
   2180e:	f1b9 0f00 	cmp.w	r9, #0
   21812:	9a00      	ldr	r2, [sp, #0]
   21814:	bfcc      	ite	gt
   21816:	46cb      	movgt	fp, r9
   21818:	f04f 0b01 	movle.w	fp, #1
   2181c:	4603      	mov	r3, r0
   2181e:	4493      	add	fp, r2
   21820:	2700      	movs	r7, #0
   21822:	4629      	mov	r1, r5
   21824:	2201      	movs	r2, #1
   21826:	4620      	mov	r0, r4
   21828:	9301      	str	r3, [sp, #4]
   2182a:	f7fd f873 	bl	1e914 <__lshift>
   2182e:	4651      	mov	r1, sl
   21830:	4605      	mov	r5, r0
   21832:	f7fd f8e7 	bl	1ea04 <__mcmp>
   21836:	2800      	cmp	r0, #0
   21838:	f340 81af 	ble.w	21b9a <_dtoa_r+0x97a>
   2183c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   21840:	9a00      	ldr	r2, [sp, #0]
   21842:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   21846:	e004      	b.n	21852 <_dtoa_r+0x632>
   21848:	455a      	cmp	r2, fp
   2184a:	f000 81b1 	beq.w	21bb0 <_dtoa_r+0x990>
   2184e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   21852:	2b39      	cmp	r3, #57	; 0x39
   21854:	f10b 0901 	add.w	r9, fp, #1
   21858:	d0f6      	beq.n	21848 <_dtoa_r+0x628>
   2185a:	3301      	adds	r3, #1
   2185c:	f88b 3000 	strb.w	r3, [fp]
   21860:	4651      	mov	r1, sl
   21862:	4620      	mov	r0, r4
   21864:	f7fc fe16 	bl	1e494 <_Bfree>
   21868:	b156      	cbz	r6, 21880 <_dtoa_r+0x660>
   2186a:	b12f      	cbz	r7, 21878 <_dtoa_r+0x658>
   2186c:	42b7      	cmp	r7, r6
   2186e:	d003      	beq.n	21878 <_dtoa_r+0x658>
   21870:	4639      	mov	r1, r7
   21872:	4620      	mov	r0, r4
   21874:	f7fc fe0e 	bl	1e494 <_Bfree>
   21878:	4631      	mov	r1, r6
   2187a:	4620      	mov	r0, r4
   2187c:	f7fc fe0a 	bl	1e494 <_Bfree>
   21880:	4629      	mov	r1, r5
   21882:	4620      	mov	r0, r4
   21884:	f7fc fe06 	bl	1e494 <_Bfree>
   21888:	2300      	movs	r3, #0
   2188a:	f889 3000 	strb.w	r3, [r9]
   2188e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21892:	601a      	str	r2, [r3, #0]
   21894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21896:	2b00      	cmp	r3, #0
   21898:	f43f acfe 	beq.w	21298 <_dtoa_r+0x78>
   2189c:	9800      	ldr	r0, [sp, #0]
   2189e:	f8c3 9000 	str.w	r9, [r3]
   218a2:	b00f      	add	sp, #60	; 0x3c
   218a4:	ecbd 8b02 	vpop	{d8}
   218a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218ac:	f1c0 001c 	rsb	r0, r0, #28
   218b0:	9b06      	ldr	r3, [sp, #24]
   218b2:	4403      	add	r3, r0
   218b4:	9306      	str	r3, [sp, #24]
   218b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   218b8:	4403      	add	r3, r0
   218ba:	9309      	str	r3, [sp, #36]	; 0x24
   218bc:	4480      	add	r8, r0
   218be:	e76f      	b.n	217a0 <_dtoa_r+0x580>
   218c0:	f1c2 0220 	rsb	r2, r2, #32
   218c4:	fa06 f202 	lsl.w	r2, r6, r2
   218c8:	ee07 2a10 	vmov	s14, r2
   218cc:	e509      	b.n	212e2 <_dtoa_r+0xc2>
   218ce:	2601      	movs	r6, #1
   218d0:	e563      	b.n	2139a <_dtoa_r+0x17a>
   218d2:	4601      	mov	r1, r0
   218d4:	463a      	mov	r2, r7
   218d6:	4620      	mov	r0, r4
   218d8:	f7fc ffbc 	bl	1e854 <__pow5mult>
   218dc:	9b01      	ldr	r3, [sp, #4]
   218de:	2b01      	cmp	r3, #1
   218e0:	4682      	mov	sl, r0
   218e2:	f340 81c5 	ble.w	21c70 <_dtoa_r+0xa50>
   218e6:	2300      	movs	r3, #0
   218e8:	9308      	str	r3, [sp, #32]
   218ea:	f8da 2010 	ldr.w	r2, [sl, #16]
   218ee:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   218f2:	6910      	ldr	r0, [r2, #16]
   218f4:	f7fc fe82 	bl	1e5fc <__hi0bits>
   218f8:	f1c0 0020 	rsb	r0, r0, #32
   218fc:	e744      	b.n	21788 <_dtoa_r+0x568>
   218fe:	bf00      	nop
   21900:	20001cd8 	.word	0x20001cd8
   21904:	200035f0 	.word	0x200035f0
   21908:	4631      	mov	r1, r6
   2190a:	2300      	movs	r3, #0
   2190c:	220a      	movs	r2, #10
   2190e:	4620      	mov	r0, r4
   21910:	f7fc fdca 	bl	1e4a8 <__multadd>
   21914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21916:	2b00      	cmp	r3, #0
   21918:	4606      	mov	r6, r0
   2191a:	f340 82ce 	ble.w	21eba <_dtoa_r+0xc9a>
   2191e:	9704      	str	r7, [sp, #16]
   21920:	4699      	mov	r9, r3
   21922:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21924:	2b00      	cmp	r3, #0
   21926:	dd05      	ble.n	21934 <_dtoa_r+0x714>
   21928:	4631      	mov	r1, r6
   2192a:	461a      	mov	r2, r3
   2192c:	4620      	mov	r0, r4
   2192e:	f7fc fff1 	bl	1e914 <__lshift>
   21932:	4606      	mov	r6, r0
   21934:	9b08      	ldr	r3, [sp, #32]
   21936:	2b00      	cmp	r3, #0
   21938:	f040 81eb 	bne.w	21d12 <_dtoa_r+0xaf2>
   2193c:	46b0      	mov	r8, r6
   2193e:	9b02      	ldr	r3, [sp, #8]
   21940:	9f00      	ldr	r7, [sp, #0]
   21942:	f003 0201 	and.w	r2, r3, #1
   21946:	1e7b      	subs	r3, r7, #1
   21948:	444b      	add	r3, r9
   2194a:	9308      	str	r3, [sp, #32]
   2194c:	9b01      	ldr	r3, [sp, #4]
   2194e:	920a      	str	r2, [sp, #40]	; 0x28
   21950:	4313      	orrs	r3, r2
   21952:	9309      	str	r3, [sp, #36]	; 0x24
   21954:	4651      	mov	r1, sl
   21956:	4628      	mov	r0, r5
   21958:	f7ff fbce 	bl	210f8 <__assert+0x10>
   2195c:	4631      	mov	r1, r6
   2195e:	4683      	mov	fp, r0
   21960:	4628      	mov	r0, r5
   21962:	f7fd f84f 	bl	1ea04 <__mcmp>
   21966:	4642      	mov	r2, r8
   21968:	4651      	mov	r1, sl
   2196a:	4681      	mov	r9, r0
   2196c:	4620      	mov	r0, r4
   2196e:	f7fd f86b 	bl	1ea48 <__mdiff>
   21972:	68c2      	ldr	r2, [r0, #12]
   21974:	4601      	mov	r1, r0
   21976:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   2197a:	2a00      	cmp	r2, #0
   2197c:	d142      	bne.n	21a04 <_dtoa_r+0x7e4>
   2197e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   21982:	4628      	mov	r0, r5
   21984:	f7fd f83e 	bl	1ea04 <__mcmp>
   21988:	9906      	ldr	r1, [sp, #24]
   2198a:	9002      	str	r0, [sp, #8]
   2198c:	4620      	mov	r0, r4
   2198e:	f7fc fd81 	bl	1e494 <_Bfree>
   21992:	9a02      	ldr	r2, [sp, #8]
   21994:	9b07      	ldr	r3, [sp, #28]
   21996:	b91a      	cbnz	r2, 219a0 <_dtoa_r+0x780>
   21998:	9909      	ldr	r1, [sp, #36]	; 0x24
   2199a:	2900      	cmp	r1, #0
   2199c:	f000 827e 	beq.w	21e9c <_dtoa_r+0xc7c>
   219a0:	f1b9 0f00 	cmp.w	r9, #0
   219a4:	f2c0 8183 	blt.w	21cae <_dtoa_r+0xa8e>
   219a8:	9901      	ldr	r1, [sp, #4]
   219aa:	ea49 0901 	orr.w	r9, r9, r1
   219ae:	990a      	ldr	r1, [sp, #40]	; 0x28
   219b0:	ea51 0909 	orrs.w	r9, r1, r9
   219b4:	f000 817b 	beq.w	21cae <_dtoa_r+0xa8e>
   219b8:	2a00      	cmp	r2, #0
   219ba:	f300 81c6 	bgt.w	21d4a <_dtoa_r+0xb2a>
   219be:	9a08      	ldr	r2, [sp, #32]
   219c0:	703b      	strb	r3, [r7, #0]
   219c2:	f107 0901 	add.w	r9, r7, #1
   219c6:	4297      	cmp	r7, r2
   219c8:	46cb      	mov	fp, r9
   219ca:	f000 81c4 	beq.w	21d56 <_dtoa_r+0xb36>
   219ce:	4629      	mov	r1, r5
   219d0:	2300      	movs	r3, #0
   219d2:	220a      	movs	r2, #10
   219d4:	4620      	mov	r0, r4
   219d6:	f7fc fd67 	bl	1e4a8 <__multadd>
   219da:	4546      	cmp	r6, r8
   219dc:	4605      	mov	r5, r0
   219de:	4631      	mov	r1, r6
   219e0:	f04f 0300 	mov.w	r3, #0
   219e4:	f04f 020a 	mov.w	r2, #10
   219e8:	4620      	mov	r0, r4
   219ea:	d012      	beq.n	21a12 <_dtoa_r+0x7f2>
   219ec:	f7fc fd5c 	bl	1e4a8 <__multadd>
   219f0:	4641      	mov	r1, r8
   219f2:	4606      	mov	r6, r0
   219f4:	2300      	movs	r3, #0
   219f6:	220a      	movs	r2, #10
   219f8:	4620      	mov	r0, r4
   219fa:	f7fc fd55 	bl	1e4a8 <__multadd>
   219fe:	464f      	mov	r7, r9
   21a00:	4680      	mov	r8, r0
   21a02:	e7a7      	b.n	21954 <_dtoa_r+0x734>
   21a04:	4620      	mov	r0, r4
   21a06:	9302      	str	r3, [sp, #8]
   21a08:	f7fc fd44 	bl	1e494 <_Bfree>
   21a0c:	9b02      	ldr	r3, [sp, #8]
   21a0e:	2201      	movs	r2, #1
   21a10:	e7c6      	b.n	219a0 <_dtoa_r+0x780>
   21a12:	f7fc fd49 	bl	1e4a8 <__multadd>
   21a16:	464f      	mov	r7, r9
   21a18:	4606      	mov	r6, r0
   21a1a:	4680      	mov	r8, r0
   21a1c:	e79a      	b.n	21954 <_dtoa_r+0x734>
   21a1e:	9b01      	ldr	r3, [sp, #4]
   21a20:	2b02      	cmp	r3, #2
   21a22:	dc71      	bgt.n	21b08 <_dtoa_r+0x8e8>
   21a24:	9b07      	ldr	r3, [sp, #28]
   21a26:	2b00      	cmp	r3, #0
   21a28:	f47f af7b 	bne.w	21922 <_dtoa_r+0x702>
   21a2c:	9b04      	ldr	r3, [sp, #16]
   21a2e:	4651      	mov	r1, sl
   21a30:	3301      	adds	r3, #1
   21a32:	4628      	mov	r0, r5
   21a34:	9304      	str	r3, [sp, #16]
   21a36:	f7ff fb5f 	bl	210f8 <__assert+0x10>
   21a3a:	f8dd b000 	ldr.w	fp, [sp]
   21a3e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   21a42:	f80b 3b01 	strb.w	r3, [fp], #1
   21a46:	2700      	movs	r7, #0
   21a48:	e6eb      	b.n	21822 <_dtoa_r+0x602>
   21a4a:	4651      	mov	r1, sl
   21a4c:	4628      	mov	r0, r5
   21a4e:	f7fc ffd9 	bl	1ea04 <__mcmp>
   21a52:	2800      	cmp	r0, #0
   21a54:	f6bf aeba 	bge.w	217cc <_dtoa_r+0x5ac>
   21a58:	4629      	mov	r1, r5
   21a5a:	2300      	movs	r3, #0
   21a5c:	220a      	movs	r2, #10
   21a5e:	4620      	mov	r0, r4
   21a60:	f7fc fd22 	bl	1e4a8 <__multadd>
   21a64:	9b04      	ldr	r3, [sp, #16]
   21a66:	1e5f      	subs	r7, r3, #1
   21a68:	9b07      	ldr	r3, [sp, #28]
   21a6a:	4605      	mov	r5, r0
   21a6c:	2b00      	cmp	r3, #0
   21a6e:	f47f af4b 	bne.w	21908 <_dtoa_r+0x6e8>
   21a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21a74:	2b00      	cmp	r3, #0
   21a76:	f340 8218 	ble.w	21eaa <_dtoa_r+0xc8a>
   21a7a:	4699      	mov	r9, r3
   21a7c:	e6b1      	b.n	217e2 <_dtoa_r+0x5c2>
   21a7e:	4bbc      	ldr	r3, [pc, #752]	; (21d70 <_dtoa_r+0xb50>)
   21a80:	9300      	str	r3, [sp, #0]
   21a82:	3303      	adds	r3, #3
   21a84:	e4a4      	b.n	213d0 <_dtoa_r+0x1b0>
   21a86:	201c      	movs	r0, #28
   21a88:	e712      	b.n	218b0 <_dtoa_r+0x690>
   21a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21a8e:	2800      	cmp	r0, #0
   21a90:	f47f ae74 	bne.w	2177c <_dtoa_r+0x55c>
   21a94:	f3c1 0213 	ubfx	r2, r1, #0, #20
   21a98:	2a00      	cmp	r2, #0
   21a9a:	f000 80f4 	beq.w	21c86 <_dtoa_r+0xa66>
   21a9e:	9b02      	ldr	r3, [sp, #8]
   21aa0:	9308      	str	r3, [sp, #32]
   21aa2:	e66d      	b.n	21780 <_dtoa_r+0x560>
   21aa4:	2301      	movs	r3, #1
   21aa6:	9307      	str	r3, [sp, #28]
   21aa8:	9b04      	ldr	r3, [sp, #16]
   21aaa:	445b      	add	r3, fp
   21aac:	f103 0901 	add.w	r9, r3, #1
   21ab0:	f1b9 0f01 	cmp.w	r9, #1
   21ab4:	46cc      	mov	ip, r9
   21ab6:	930b      	str	r3, [sp, #44]	; 0x2c
   21ab8:	bfb8      	it	lt
   21aba:	f04f 0c01 	movlt.w	ip, #1
   21abe:	2100      	movs	r1, #0
   21ac0:	f1bc 0f17 	cmp.w	ip, #23
   21ac4:	63e1      	str	r1, [r4, #60]	; 0x3c
   21ac6:	f77f acbc 	ble.w	21442 <_dtoa_r+0x222>
   21aca:	2001      	movs	r0, #1
   21acc:	2204      	movs	r2, #4
   21ace:	0052      	lsls	r2, r2, #1
   21ad0:	f102 0314 	add.w	r3, r2, #20
   21ad4:	4563      	cmp	r3, ip
   21ad6:	4601      	mov	r1, r0
   21ad8:	f100 0001 	add.w	r0, r0, #1
   21adc:	d9f7      	bls.n	21ace <_dtoa_r+0x8ae>
   21ade:	63e1      	str	r1, [r4, #60]	; 0x3c
   21ae0:	e4af      	b.n	21442 <_dtoa_r+0x222>
   21ae2:	2301      	movs	r3, #1
   21ae4:	9307      	str	r3, [sp, #28]
   21ae6:	f1bb 0f00 	cmp.w	fp, #0
   21aea:	dd52      	ble.n	21b92 <_dtoa_r+0x972>
   21aec:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   21af0:	46d9      	mov	r9, fp
   21af2:	46dc      	mov	ip, fp
   21af4:	e7e3      	b.n	21abe <_dtoa_r+0x89e>
   21af6:	2300      	movs	r3, #0
   21af8:	9307      	str	r3, [sp, #28]
   21afa:	e7d5      	b.n	21aa8 <_dtoa_r+0x888>
   21afc:	2300      	movs	r3, #0
   21afe:	9307      	str	r3, [sp, #28]
   21b00:	e7f1      	b.n	21ae6 <_dtoa_r+0x8c6>
   21b02:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   21b06:	9704      	str	r7, [sp, #16]
   21b08:	f1b9 0f00 	cmp.w	r9, #0
   21b0c:	f47f ada1 	bne.w	21652 <_dtoa_r+0x432>
   21b10:	4651      	mov	r1, sl
   21b12:	464b      	mov	r3, r9
   21b14:	2205      	movs	r2, #5
   21b16:	4620      	mov	r0, r4
   21b18:	f7fc fcc6 	bl	1e4a8 <__multadd>
   21b1c:	4601      	mov	r1, r0
   21b1e:	4682      	mov	sl, r0
   21b20:	4628      	mov	r0, r5
   21b22:	f7fc ff6f 	bl	1ea04 <__mcmp>
   21b26:	2800      	cmp	r0, #0
   21b28:	f77f ad93 	ble.w	21652 <_dtoa_r+0x432>
   21b2c:	9b04      	ldr	r3, [sp, #16]
   21b2e:	f103 0b01 	add.w	fp, r3, #1
   21b32:	9b00      	ldr	r3, [sp, #0]
   21b34:	2231      	movs	r2, #49	; 0x31
   21b36:	4698      	mov	r8, r3
   21b38:	f803 2b01 	strb.w	r2, [r3], #1
   21b3c:	9300      	str	r3, [sp, #0]
   21b3e:	4651      	mov	r1, sl
   21b40:	4620      	mov	r0, r4
   21b42:	f7fc fca7 	bl	1e494 <_Bfree>
   21b46:	f10b 0301 	add.w	r3, fp, #1
   21b4a:	f8dd 9000 	ldr.w	r9, [sp]
   21b4e:	9304      	str	r3, [sp, #16]
   21b50:	f8cd 8000 	str.w	r8, [sp]
   21b54:	2e00      	cmp	r6, #0
   21b56:	f47f ae8f 	bne.w	21878 <_dtoa_r+0x658>
   21b5a:	e691      	b.n	21880 <_dtoa_r+0x660>
   21b5c:	eba3 0a0a 	sub.w	sl, r3, sl
   21b60:	e5c5      	b.n	216ee <_dtoa_r+0x4ce>
   21b62:	4631      	mov	r1, r6
   21b64:	4652      	mov	r2, sl
   21b66:	4620      	mov	r0, r4
   21b68:	f7fc fe74 	bl	1e854 <__pow5mult>
   21b6c:	462a      	mov	r2, r5
   21b6e:	4601      	mov	r1, r0
   21b70:	4606      	mov	r6, r0
   21b72:	4620      	mov	r0, r4
   21b74:	f7fc fdc0 	bl	1e6f8 <__multiply>
   21b78:	4629      	mov	r1, r5
   21b7a:	4605      	mov	r5, r0
   21b7c:	4620      	mov	r0, r4
   21b7e:	f7fc fc89 	bl	1e494 <_Bfree>
   21b82:	e5ea      	b.n	2175a <_dtoa_r+0x53a>
   21b84:	2002      	movs	r0, #2
   21b86:	eeb0 5b48 	vmov.f64	d5, d8
   21b8a:	e481      	b.n	21490 <_dtoa_r+0x270>
   21b8c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21b90:	e68e      	b.n	218b0 <_dtoa_r+0x690>
   21b92:	f04f 0b01 	mov.w	fp, #1
   21b96:	46d9      	mov	r9, fp
   21b98:	e44f      	b.n	2143a <_dtoa_r+0x21a>
   21b9a:	d103      	bne.n	21ba4 <_dtoa_r+0x984>
   21b9c:	9b01      	ldr	r3, [sp, #4]
   21b9e:	07db      	lsls	r3, r3, #31
   21ba0:	f53f ae4c 	bmi.w	2183c <_dtoa_r+0x61c>
   21ba4:	46d9      	mov	r9, fp
   21ba6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   21baa:	2b30      	cmp	r3, #48	; 0x30
   21bac:	d0fa      	beq.n	21ba4 <_dtoa_r+0x984>
   21bae:	e657      	b.n	21860 <_dtoa_r+0x640>
   21bb0:	9b04      	ldr	r3, [sp, #16]
   21bb2:	9a00      	ldr	r2, [sp, #0]
   21bb4:	3301      	adds	r3, #1
   21bb6:	9304      	str	r3, [sp, #16]
   21bb8:	2331      	movs	r3, #49	; 0x31
   21bba:	7013      	strb	r3, [r2, #0]
   21bbc:	e650      	b.n	21860 <_dtoa_r+0x640>
   21bbe:	f1ba 0f00 	cmp.w	sl, #0
   21bc2:	f000 8123 	beq.w	21e0c <_dtoa_r+0xbec>
   21bc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   21bca:	9b06      	ldr	r3, [sp, #24]
   21bcc:	9309      	str	r3, [sp, #36]	; 0x24
   21bce:	4413      	add	r3, r2
   21bd0:	f8dd a020 	ldr.w	sl, [sp, #32]
   21bd4:	9306      	str	r3, [sp, #24]
   21bd6:	4490      	add	r8, r2
   21bd8:	e592      	b.n	21700 <_dtoa_r+0x4e0>
   21bda:	ee07 0a90 	vmov	s15, r0
   21bde:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   21be2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   21be6:	eea6 5b07 	vfma.f64	d5, d6, d7
   21bea:	ee15 2a90 	vmov	r2, s11
   21bee:	ec51 0b15 	vmov	r0, r1, d5
   21bf2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   21bf6:	ec41 0b15 	vmov	d5, r0, r1
   21bfa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   21bfe:	ee36 7b47 	vsub.f64	d7, d6, d7
   21c02:	eeb4 7bc5 	vcmpe.f64	d7, d5
   21c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21c0a:	f300 8137 	bgt.w	21e7c <_dtoa_r+0xc5c>
   21c0e:	eeb1 5b45 	vneg.f64	d5, d5
   21c12:	eeb4 7bc5 	vcmpe.f64	d7, d5
   21c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21c1a:	f57f acfb 	bpl.w	21614 <_dtoa_r+0x3f4>
   21c1e:	f04f 0a00 	mov.w	sl, #0
   21c22:	4656      	mov	r6, sl
   21c24:	e515      	b.n	21652 <_dtoa_r+0x432>
   21c26:	f000 80f5 	beq.w	21e14 <_dtoa_r+0xbf4>
   21c2a:	9b04      	ldr	r3, [sp, #16]
   21c2c:	4951      	ldr	r1, [pc, #324]	; (21d74 <_dtoa_r+0xb54>)
   21c2e:	425a      	negs	r2, r3
   21c30:	f002 000f 	and.w	r0, r2, #15
   21c34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   21c38:	ed91 6b00 	vldr	d6, [r1]
   21c3c:	1112      	asrs	r2, r2, #4
   21c3e:	ee28 6b06 	vmul.f64	d6, d8, d6
   21c42:	f000 8142 	beq.w	21eca <_dtoa_r+0xcaa>
   21c46:	eeb0 7b46 	vmov.f64	d7, d6
   21c4a:	494b      	ldr	r1, [pc, #300]	; (21d78 <_dtoa_r+0xb58>)
   21c4c:	2600      	movs	r6, #0
   21c4e:	2002      	movs	r0, #2
   21c50:	07d3      	lsls	r3, r2, #31
   21c52:	d505      	bpl.n	21c60 <_dtoa_r+0xa40>
   21c54:	ed91 5b00 	vldr	d5, [r1]
   21c58:	3001      	adds	r0, #1
   21c5a:	2601      	movs	r6, #1
   21c5c:	ee27 7b05 	vmul.f64	d7, d7, d5
   21c60:	1052      	asrs	r2, r2, #1
   21c62:	f101 0108 	add.w	r1, r1, #8
   21c66:	d1f3      	bne.n	21c50 <_dtoa_r+0xa30>
   21c68:	2e00      	cmp	r6, #0
   21c6a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   21c6e:	e41e      	b.n	214ae <_dtoa_r+0x28e>
   21c70:	9b02      	ldr	r3, [sp, #8]
   21c72:	2b00      	cmp	r3, #0
   21c74:	f47f ae37 	bne.w	218e6 <_dtoa_r+0x6c6>
   21c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21c7c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   21c80:	2a00      	cmp	r2, #0
   21c82:	f040 8137 	bne.w	21ef4 <_dtoa_r+0xcd4>
   21c86:	4a3d      	ldr	r2, [pc, #244]	; (21d7c <_dtoa_r+0xb5c>)
   21c88:	400a      	ands	r2, r1
   21c8a:	2a00      	cmp	r2, #0
   21c8c:	f000 80fa 	beq.w	21e84 <_dtoa_r+0xc64>
   21c90:	9b06      	ldr	r3, [sp, #24]
   21c92:	3301      	adds	r3, #1
   21c94:	9306      	str	r3, [sp, #24]
   21c96:	2301      	movs	r3, #1
   21c98:	f108 0801 	add.w	r8, r8, #1
   21c9c:	9308      	str	r3, [sp, #32]
   21c9e:	e56f      	b.n	21780 <_dtoa_r+0x560>
   21ca0:	4629      	mov	r1, r5
   21ca2:	9a08      	ldr	r2, [sp, #32]
   21ca4:	4620      	mov	r0, r4
   21ca6:	f7fc fdd5 	bl	1e854 <__pow5mult>
   21caa:	4605      	mov	r5, r0
   21cac:	e55a      	b.n	21764 <_dtoa_r+0x544>
   21cae:	2a00      	cmp	r2, #0
   21cb0:	dd12      	ble.n	21cd8 <_dtoa_r+0xab8>
   21cb2:	4629      	mov	r1, r5
   21cb4:	2201      	movs	r2, #1
   21cb6:	4620      	mov	r0, r4
   21cb8:	9301      	str	r3, [sp, #4]
   21cba:	f7fc fe2b 	bl	1e914 <__lshift>
   21cbe:	4651      	mov	r1, sl
   21cc0:	4605      	mov	r5, r0
   21cc2:	f7fc fe9f 	bl	1ea04 <__mcmp>
   21cc6:	2800      	cmp	r0, #0
   21cc8:	9b01      	ldr	r3, [sp, #4]
   21cca:	f340 80e1 	ble.w	21e90 <_dtoa_r+0xc70>
   21cce:	2b39      	cmp	r3, #57	; 0x39
   21cd0:	f000 80ca 	beq.w	21e68 <_dtoa_r+0xc48>
   21cd4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   21cd8:	46b9      	mov	r9, r7
   21cda:	f809 3b01 	strb.w	r3, [r9], #1
   21cde:	9b04      	ldr	r3, [sp, #16]
   21ce0:	3301      	adds	r3, #1
   21ce2:	4637      	mov	r7, r6
   21ce4:	9304      	str	r3, [sp, #16]
   21ce6:	4646      	mov	r6, r8
   21ce8:	e5ba      	b.n	21860 <_dtoa_r+0x640>
   21cea:	ee38 8b08 	vadd.f64	d8, d8, d8
   21cee:	eeb4 8bc6 	vcmpe.f64	d8, d6
   21cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21cf6:	dc0a      	bgt.n	21d0e <_dtoa_r+0xaee>
   21cf8:	eeb4 8b46 	vcmp.f64	d8, d6
   21cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21d00:	f47f acdc 	bne.w	216bc <_dtoa_r+0x49c>
   21d04:	ee17 3a10 	vmov	r3, s14
   21d08:	07d8      	lsls	r0, r3, #31
   21d0a:	f57f acd7 	bpl.w	216bc <_dtoa_r+0x49c>
   21d0e:	9a00      	ldr	r2, [sp, #0]
   21d10:	e454      	b.n	215bc <_dtoa_r+0x39c>
   21d12:	6871      	ldr	r1, [r6, #4]
   21d14:	4620      	mov	r0, r4
   21d16:	f7fc fb97 	bl	1e448 <_Balloc>
   21d1a:	4607      	mov	r7, r0
   21d1c:	2800      	cmp	r0, #0
   21d1e:	f000 80de 	beq.w	21ede <_dtoa_r+0xcbe>
   21d22:	6933      	ldr	r3, [r6, #16]
   21d24:	3302      	adds	r3, #2
   21d26:	009a      	lsls	r2, r3, #2
   21d28:	f106 010c 	add.w	r1, r6, #12
   21d2c:	300c      	adds	r0, #12
   21d2e:	f7f4 fcb9 	bl	166a4 <memcpy>
   21d32:	4639      	mov	r1, r7
   21d34:	2201      	movs	r2, #1
   21d36:	4620      	mov	r0, r4
   21d38:	f7fc fdec 	bl	1e914 <__lshift>
   21d3c:	4680      	mov	r8, r0
   21d3e:	e5fe      	b.n	2193e <_dtoa_r+0x71e>
   21d40:	9b06      	ldr	r3, [sp, #24]
   21d42:	eba3 0309 	sub.w	r3, r3, r9
   21d46:	9309      	str	r3, [sp, #36]	; 0x24
   21d48:	e4da      	b.n	21700 <_dtoa_r+0x4e0>
   21d4a:	2b39      	cmp	r3, #57	; 0x39
   21d4c:	f000 808c 	beq.w	21e68 <_dtoa_r+0xc48>
   21d50:	46b9      	mov	r9, r7
   21d52:	3301      	adds	r3, #1
   21d54:	e7c1      	b.n	21cda <_dtoa_r+0xaba>
   21d56:	9a04      	ldr	r2, [sp, #16]
   21d58:	3201      	adds	r2, #1
   21d5a:	4637      	mov	r7, r6
   21d5c:	9204      	str	r2, [sp, #16]
   21d5e:	4646      	mov	r6, r8
   21d60:	e55f      	b.n	21822 <_dtoa_r+0x602>
   21d62:	4629      	mov	r1, r5
   21d64:	4620      	mov	r0, r4
   21d66:	f7fc fd75 	bl	1e854 <__pow5mult>
   21d6a:	4605      	mov	r5, r0
   21d6c:	e4fa      	b.n	21764 <_dtoa_r+0x544>
   21d6e:	bf00      	nop
   21d70:	20008d80 	.word	0x20008d80
   21d74:	20001cd8 	.word	0x20001cd8
   21d78:	20001dc8 	.word	0x20001dc8
   21d7c:	7ff00000 	.word	0x7ff00000
   21d80:	4b5e      	ldr	r3, [pc, #376]	; (21efc <_dtoa_r+0xcdc>)
   21d82:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   21d86:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   21d8a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   21d8e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   21d92:	ee36 7b47 	vsub.f64	d7, d6, d7
   21d96:	ec41 0b16 	vmov	d6, r0, r1
   21d9a:	ee15 1a90 	vmov	r1, s11
   21d9e:	ee23 3b06 	vmul.f64	d3, d3, d6
   21da2:	9800      	ldr	r0, [sp, #0]
   21da4:	3130      	adds	r1, #48	; 0x30
   21da6:	2a01      	cmp	r2, #1
   21da8:	f800 1b01 	strb.w	r1, [r0], #1
   21dac:	f000 8083 	beq.w	21eb6 <_dtoa_r+0xc96>
   21db0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   21db4:	9b00      	ldr	r3, [sp, #0]
   21db6:	1899      	adds	r1, r3, r2
   21db8:	ee27 7b04 	vmul.f64	d7, d7, d4
   21dbc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   21dc0:	ee16 3a90 	vmov	r3, s13
   21dc4:	3330      	adds	r3, #48	; 0x30
   21dc6:	f800 3b01 	strb.w	r3, [r0], #1
   21dca:	4281      	cmp	r1, r0
   21dcc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   21dd0:	ee37 7b45 	vsub.f64	d7, d7, d5
   21dd4:	d1f0      	bne.n	21db8 <_dtoa_r+0xb98>
   21dd6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   21dda:	ee33 5b06 	vadd.f64	d5, d3, d6
   21dde:	eeb4 5bc7 	vcmpe.f64	d5, d7
   21de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21de6:	f53f abe3 	bmi.w	215b0 <_dtoa_r+0x390>
   21dea:	ee36 6b43 	vsub.f64	d6, d6, d3
   21dee:	eeb4 6bc7 	vcmpe.f64	d6, d7
   21df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21df6:	f77f ac0d 	ble.w	21614 <_dtoa_r+0x3f4>
   21dfa:	4689      	mov	r9, r1
   21dfc:	3901      	subs	r1, #1
   21dfe:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   21e02:	2b30      	cmp	r3, #48	; 0x30
   21e04:	d0f9      	beq.n	21dfa <_dtoa_r+0xbda>
   21e06:	1c73      	adds	r3, r6, #1
   21e08:	9304      	str	r3, [sp, #16]
   21e0a:	e539      	b.n	21880 <_dtoa_r+0x660>
   21e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   21e0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   21e12:	e6da      	b.n	21bca <_dtoa_r+0x9aa>
   21e14:	2002      	movs	r0, #2
   21e16:	eeb0 6b48 	vmov.f64	d6, d8
   21e1a:	f7ff bb48 	b.w	214ae <_dtoa_r+0x28e>
   21e1e:	f1b9 0f00 	cmp.w	r9, #0
   21e22:	f43f aeda 	beq.w	21bda <_dtoa_r+0x9ba>
   21e26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21e28:	2a00      	cmp	r2, #0
   21e2a:	f77f abf3 	ble.w	21614 <_dtoa_r+0x3f4>
   21e2e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   21e32:	ee26 6b04 	vmul.f64	d6, d6, d4
   21e36:	3001      	adds	r0, #1
   21e38:	ee07 0a90 	vmov	s15, r0
   21e3c:	9b04      	ldr	r3, [sp, #16]
   21e3e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   21e42:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   21e46:	eea6 7b05 	vfma.f64	d7, d6, d5
   21e4a:	ee17 ca90 	vmov	ip, s15
   21e4e:	ec51 0b17 	vmov	r0, r1, d7
   21e52:	1e5e      	subs	r6, r3, #1
   21e54:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   21e58:	f7ff bb47 	b.w	214ea <_dtoa_r+0x2ca>
   21e5c:	9b04      	ldr	r3, [sp, #16]
   21e5e:	3301      	adds	r3, #1
   21e60:	9304      	str	r3, [sp, #16]
   21e62:	2331      	movs	r3, #49	; 0x31
   21e64:	f7ff bbb1 	b.w	215ca <_dtoa_r+0x3aa>
   21e68:	9b04      	ldr	r3, [sp, #16]
   21e6a:	46bb      	mov	fp, r7
   21e6c:	3301      	adds	r3, #1
   21e6e:	9304      	str	r3, [sp, #16]
   21e70:	2339      	movs	r3, #57	; 0x39
   21e72:	4637      	mov	r7, r6
   21e74:	f80b 3b01 	strb.w	r3, [fp], #1
   21e78:	4646      	mov	r6, r8
   21e7a:	e4e1      	b.n	21840 <_dtoa_r+0x620>
   21e7c:	f04f 0a00 	mov.w	sl, #0
   21e80:	4656      	mov	r6, sl
   21e82:	e653      	b.n	21b2c <_dtoa_r+0x90c>
   21e84:	9208      	str	r2, [sp, #32]
   21e86:	e47b      	b.n	21780 <_dtoa_r+0x560>
   21e88:	1c73      	adds	r3, r6, #1
   21e8a:	9304      	str	r3, [sp, #16]
   21e8c:	4689      	mov	r9, r1
   21e8e:	e4f7      	b.n	21880 <_dtoa_r+0x660>
   21e90:	f47f af22 	bne.w	21cd8 <_dtoa_r+0xab8>
   21e94:	07da      	lsls	r2, r3, #31
   21e96:	f57f af1f 	bpl.w	21cd8 <_dtoa_r+0xab8>
   21e9a:	e718      	b.n	21cce <_dtoa_r+0xaae>
   21e9c:	2b39      	cmp	r3, #57	; 0x39
   21e9e:	d0e3      	beq.n	21e68 <_dtoa_r+0xc48>
   21ea0:	f1b9 0f00 	cmp.w	r9, #0
   21ea4:	f73f af16 	bgt.w	21cd4 <_dtoa_r+0xab4>
   21ea8:	e716      	b.n	21cd8 <_dtoa_r+0xab8>
   21eaa:	9b01      	ldr	r3, [sp, #4]
   21eac:	2b02      	cmp	r3, #2
   21eae:	f73f ae28 	bgt.w	21b02 <_dtoa_r+0x8e2>
   21eb2:	9704      	str	r7, [sp, #16]
   21eb4:	e5ba      	b.n	21a2c <_dtoa_r+0x80c>
   21eb6:	4601      	mov	r1, r0
   21eb8:	e78d      	b.n	21dd6 <_dtoa_r+0xbb6>
   21eba:	9b01      	ldr	r3, [sp, #4]
   21ebc:	2b02      	cmp	r3, #2
   21ebe:	f73f ae20 	bgt.w	21b02 <_dtoa_r+0x8e2>
   21ec2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   21ec6:	9704      	str	r7, [sp, #16]
   21ec8:	e52b      	b.n	21922 <_dtoa_r+0x702>
   21eca:	2002      	movs	r0, #2
   21ecc:	f7ff baef 	b.w	214ae <_dtoa_r+0x28e>
   21ed0:	4b0b      	ldr	r3, [pc, #44]	; (21f00 <_dtoa_r+0xce0>)
   21ed2:	480c      	ldr	r0, [pc, #48]	; (21f04 <_dtoa_r+0xce4>)
   21ed4:	2200      	movs	r2, #0
   21ed6:	f240 11af 	movw	r1, #431	; 0x1af
   21eda:	f7ff f8e5 	bl	210a8 <__assert_func>
   21ede:	4b08      	ldr	r3, [pc, #32]	; (21f00 <_dtoa_r+0xce0>)
   21ee0:	4808      	ldr	r0, [pc, #32]	; (21f04 <_dtoa_r+0xce4>)
   21ee2:	463a      	mov	r2, r7
   21ee4:	f240 21ef 	movw	r1, #751	; 0x2ef
   21ee8:	f7ff f8de 	bl	210a8 <__assert_func>
   21eec:	4b06      	ldr	r3, [pc, #24]	; (21f08 <_dtoa_r+0xce8>)
   21eee:	9300      	str	r3, [sp, #0]
   21ef0:	f7ff b9d2 	b.w	21298 <_dtoa_r+0x78>
   21ef4:	9b02      	ldr	r3, [sp, #8]
   21ef6:	9308      	str	r3, [sp, #32]
   21ef8:	e4f7      	b.n	218ea <_dtoa_r+0x6ca>
   21efa:	bf00      	nop
   21efc:	20001cd8 	.word	0x20001cd8
   21f00:	20008c38 	.word	0x20008c38
   21f04:	20008d84 	.word	0x20008d84
   21f08:	20008d74 	.word	0x20008d74

00021f0c <__env_lock>:
   21f0c:	4801      	ldr	r0, [pc, #4]	; (21f14 <__env_lock+0x8>)
   21f0e:	f7fa bf99 	b.w	1ce44 <__retarget_lock_acquire_recursive>
   21f12:	bf00      	nop
   21f14:	2000e530 	.word	0x2000e530

00021f18 <__env_unlock>:
   21f18:	4801      	ldr	r0, [pc, #4]	; (21f20 <__env_unlock+0x8>)
   21f1a:	f7fa bf9b 	b.w	1ce54 <__retarget_lock_release_recursive>
   21f1e:	bf00      	nop
   21f20:	2000e530 	.word	0x2000e530

00021f24 <_wcrtomb_r>:
   21f24:	b570      	push	{r4, r5, r6, lr}
   21f26:	4605      	mov	r5, r0
   21f28:	b084      	sub	sp, #16
   21f2a:	b15b      	cbz	r3, 21f44 <_wcrtomb_r+0x20>
   21f2c:	461c      	mov	r4, r3
   21f2e:	b169      	cbz	r1, 21f4c <_wcrtomb_r+0x28>
   21f30:	4b0e      	ldr	r3, [pc, #56]	; (21f6c <_wcrtomb_r+0x48>)
   21f32:	4628      	mov	r0, r5
   21f34:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   21f38:	4623      	mov	r3, r4
   21f3a:	47b0      	blx	r6
   21f3c:	1c43      	adds	r3, r0, #1
   21f3e:	d00f      	beq.n	21f60 <_wcrtomb_r+0x3c>
   21f40:	b004      	add	sp, #16
   21f42:	bd70      	pop	{r4, r5, r6, pc}
   21f44:	f500 7482 	add.w	r4, r0, #260	; 0x104
   21f48:	2900      	cmp	r1, #0
   21f4a:	d1f1      	bne.n	21f30 <_wcrtomb_r+0xc>
   21f4c:	4a07      	ldr	r2, [pc, #28]	; (21f6c <_wcrtomb_r+0x48>)
   21f4e:	4623      	mov	r3, r4
   21f50:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   21f54:	4628      	mov	r0, r5
   21f56:	460a      	mov	r2, r1
   21f58:	a901      	add	r1, sp, #4
   21f5a:	47b0      	blx	r6
   21f5c:	1c43      	adds	r3, r0, #1
   21f5e:	d1ef      	bne.n	21f40 <_wcrtomb_r+0x1c>
   21f60:	2200      	movs	r2, #0
   21f62:	238a      	movs	r3, #138	; 0x8a
   21f64:	6022      	str	r2, [r4, #0]
   21f66:	602b      	str	r3, [r5, #0]
   21f68:	b004      	add	sp, #16
   21f6a:	bd70      	pop	{r4, r5, r6, pc}
   21f6c:	200093a0 	.word	0x200093a0

00021f70 <wcrtomb>:
   21f70:	b570      	push	{r4, r5, r6, lr}
   21f72:	4b13      	ldr	r3, [pc, #76]	; (21fc0 <wcrtomb+0x50>)
   21f74:	b084      	sub	sp, #16
   21f76:	681d      	ldr	r5, [r3, #0]
   21f78:	b16a      	cbz	r2, 21f96 <wcrtomb+0x26>
   21f7a:	4614      	mov	r4, r2
   21f7c:	b178      	cbz	r0, 21f9e <wcrtomb+0x2e>
   21f7e:	4b11      	ldr	r3, [pc, #68]	; (21fc4 <wcrtomb+0x54>)
   21f80:	460a      	mov	r2, r1
   21f82:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   21f86:	4601      	mov	r1, r0
   21f88:	4623      	mov	r3, r4
   21f8a:	4628      	mov	r0, r5
   21f8c:	47b0      	blx	r6
   21f8e:	1c43      	adds	r3, r0, #1
   21f90:	d00f      	beq.n	21fb2 <wcrtomb+0x42>
   21f92:	b004      	add	sp, #16
   21f94:	bd70      	pop	{r4, r5, r6, pc}
   21f96:	f505 7482 	add.w	r4, r5, #260	; 0x104
   21f9a:	2800      	cmp	r0, #0
   21f9c:	d1ef      	bne.n	21f7e <wcrtomb+0xe>
   21f9e:	4a09      	ldr	r2, [pc, #36]	; (21fc4 <wcrtomb+0x54>)
   21fa0:	4623      	mov	r3, r4
   21fa2:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   21fa6:	a901      	add	r1, sp, #4
   21fa8:	4602      	mov	r2, r0
   21faa:	4628      	mov	r0, r5
   21fac:	47b0      	blx	r6
   21fae:	1c43      	adds	r3, r0, #1
   21fb0:	d1ef      	bne.n	21f92 <wcrtomb+0x22>
   21fb2:	2200      	movs	r2, #0
   21fb4:	238a      	movs	r3, #138	; 0x8a
   21fb6:	6022      	str	r2, [r4, #0]
   21fb8:	602b      	str	r3, [r5, #0]
   21fba:	b004      	add	sp, #16
   21fbc:	bd70      	pop	{r4, r5, r6, pc}
   21fbe:	bf00      	nop
   21fc0:	20008e58 	.word	0x20008e58
   21fc4:	200093a0 	.word	0x200093a0

00021fc8 <_wcsrtombs_r>:
   21fc8:	b510      	push	{r4, lr}
   21fca:	b082      	sub	sp, #8
   21fcc:	9c04      	ldr	r4, [sp, #16]
   21fce:	e9cd 3400 	strd	r3, r4, [sp]
   21fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21fd6:	f002 fac7 	bl	24568 <_wcsnrtombs_r>
   21fda:	b002      	add	sp, #8
   21fdc:	bd10      	pop	{r4, pc}
   21fde:	bf00      	nop

00021fe0 <wcsrtombs>:
   21fe0:	b510      	push	{r4, lr}
   21fe2:	4c07      	ldr	r4, [pc, #28]	; (22000 <wcsrtombs+0x20>)
   21fe4:	b082      	sub	sp, #8
   21fe6:	4684      	mov	ip, r0
   21fe8:	e9cd 2300 	strd	r2, r3, [sp]
   21fec:	6820      	ldr	r0, [r4, #0]
   21fee:	460a      	mov	r2, r1
   21ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21ff4:	4661      	mov	r1, ip
   21ff6:	f002 fab7 	bl	24568 <_wcsnrtombs_r>
   21ffa:	b002      	add	sp, #8
   21ffc:	bd10      	pop	{r4, pc}
   21ffe:	bf00      	nop
   22000:	20008e58 	.word	0x20008e58

00022004 <_fiprintf_r>:
   22004:	b40c      	push	{r2, r3}
   22006:	b500      	push	{lr}
   22008:	b083      	sub	sp, #12
   2200a:	ab04      	add	r3, sp, #16
   2200c:	f853 2b04 	ldr.w	r2, [r3], #4
   22010:	9301      	str	r3, [sp, #4]
   22012:	f000 ff6d 	bl	22ef0 <_vfiprintf_r>
   22016:	b003      	add	sp, #12
   22018:	f85d eb04 	ldr.w	lr, [sp], #4
   2201c:	b002      	add	sp, #8
   2201e:	4770      	bx	lr

00022020 <fiprintf>:
   22020:	b40e      	push	{r1, r2, r3}
   22022:	b510      	push	{r4, lr}
   22024:	b083      	sub	sp, #12
   22026:	ab05      	add	r3, sp, #20
   22028:	4c06      	ldr	r4, [pc, #24]	; (22044 <fiprintf+0x24>)
   2202a:	f853 2b04 	ldr.w	r2, [r3], #4
   2202e:	9301      	str	r3, [sp, #4]
   22030:	4601      	mov	r1, r0
   22032:	6820      	ldr	r0, [r4, #0]
   22034:	f000 ff5c 	bl	22ef0 <_vfiprintf_r>
   22038:	b003      	add	sp, #12
   2203a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2203e:	b003      	add	sp, #12
   22040:	4770      	bx	lr
   22042:	bf00      	nop
   22044:	20008e58 	.word	0x20008e58

00022048 <__ssprint_r>:
   22048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2204c:	6893      	ldr	r3, [r2, #8]
   2204e:	6817      	ldr	r7, [r2, #0]
   22050:	b083      	sub	sp, #12
   22052:	4692      	mov	sl, r2
   22054:	2b00      	cmp	r3, #0
   22056:	d070      	beq.n	2213a <__ssprint_r+0xf2>
   22058:	4681      	mov	r9, r0
   2205a:	688a      	ldr	r2, [r1, #8]
   2205c:	6808      	ldr	r0, [r1, #0]
   2205e:	460c      	mov	r4, r1
   22060:	3708      	adds	r7, #8
   22062:	e043      	b.n	220ec <__ssprint_r+0xa4>
   22064:	89a3      	ldrh	r3, [r4, #12]
   22066:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2206a:	d02e      	beq.n	220ca <__ssprint_r+0x82>
   2206c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   22070:	eba0 0801 	sub.w	r8, r0, r1
   22074:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   22078:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   2207c:	f108 0001 	add.w	r0, r8, #1
   22080:	1076      	asrs	r6, r6, #1
   22082:	4428      	add	r0, r5
   22084:	42b0      	cmp	r0, r6
   22086:	4632      	mov	r2, r6
   22088:	bf84      	itt	hi
   2208a:	4606      	movhi	r6, r0
   2208c:	4632      	movhi	r2, r6
   2208e:	055b      	lsls	r3, r3, #21
   22090:	d537      	bpl.n	22102 <__ssprint_r+0xba>
   22092:	4611      	mov	r1, r2
   22094:	4648      	mov	r0, r9
   22096:	f7f7 fc59 	bl	1994c <_malloc_r>
   2209a:	9001      	str	r0, [sp, #4]
   2209c:	2800      	cmp	r0, #0
   2209e:	d03a      	beq.n	22116 <__ssprint_r+0xce>
   220a0:	4642      	mov	r2, r8
   220a2:	6921      	ldr	r1, [r4, #16]
   220a4:	f7f4 fafe 	bl	166a4 <memcpy>
   220a8:	89a2      	ldrh	r2, [r4, #12]
   220aa:	9b01      	ldr	r3, [sp, #4]
   220ac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   220b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   220b4:	81a2      	strh	r2, [r4, #12]
   220b6:	eba6 0208 	sub.w	r2, r6, r8
   220ba:	eb03 0008 	add.w	r0, r3, r8
   220be:	6166      	str	r6, [r4, #20]
   220c0:	60a2      	str	r2, [r4, #8]
   220c2:	6123      	str	r3, [r4, #16]
   220c4:	6020      	str	r0, [r4, #0]
   220c6:	462e      	mov	r6, r5
   220c8:	46a8      	mov	r8, r5
   220ca:	4642      	mov	r2, r8
   220cc:	4659      	mov	r1, fp
   220ce:	f7f9 fcc7 	bl	1ba60 <memmove>
   220d2:	f8da 3008 	ldr.w	r3, [sl, #8]
   220d6:	68a2      	ldr	r2, [r4, #8]
   220d8:	6820      	ldr	r0, [r4, #0]
   220da:	1b92      	subs	r2, r2, r6
   220dc:	4440      	add	r0, r8
   220de:	1b5b      	subs	r3, r3, r5
   220e0:	60a2      	str	r2, [r4, #8]
   220e2:	6020      	str	r0, [r4, #0]
   220e4:	f8ca 3008 	str.w	r3, [sl, #8]
   220e8:	b33b      	cbz	r3, 2213a <__ssprint_r+0xf2>
   220ea:	3708      	adds	r7, #8
   220ec:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   220f0:	2d00      	cmp	r5, #0
   220f2:	d0fa      	beq.n	220ea <__ssprint_r+0xa2>
   220f4:	42aa      	cmp	r2, r5
   220f6:	4616      	mov	r6, r2
   220f8:	4690      	mov	r8, r2
   220fa:	d9b3      	bls.n	22064 <__ssprint_r+0x1c>
   220fc:	462e      	mov	r6, r5
   220fe:	46a8      	mov	r8, r5
   22100:	e7e3      	b.n	220ca <__ssprint_r+0x82>
   22102:	4648      	mov	r0, r9
   22104:	f7f7 fed8 	bl	19eb8 <_realloc_r>
   22108:	4603      	mov	r3, r0
   2210a:	2800      	cmp	r0, #0
   2210c:	d1d3      	bne.n	220b6 <__ssprint_r+0x6e>
   2210e:	6921      	ldr	r1, [r4, #16]
   22110:	4648      	mov	r0, r9
   22112:	f7fb f9e7 	bl	1d4e4 <_free_r>
   22116:	89a3      	ldrh	r3, [r4, #12]
   22118:	220c      	movs	r2, #12
   2211a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2211e:	f8c9 2000 	str.w	r2, [r9]
   22122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22126:	81a3      	strh	r3, [r4, #12]
   22128:	2200      	movs	r2, #0
   2212a:	2300      	movs	r3, #0
   2212c:	f8ca 2008 	str.w	r2, [sl, #8]
   22130:	f8ca 3004 	str.w	r3, [sl, #4]
   22134:	b003      	add	sp, #12
   22136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2213a:	2000      	movs	r0, #0
   2213c:	2300      	movs	r3, #0
   2213e:	f8ca 3004 	str.w	r3, [sl, #4]
   22142:	b003      	add	sp, #12
   22144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022148 <_svfiprintf_r>:
   22148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2214c:	ed2d 8b02 	vpush	{d8}
   22150:	b0c5      	sub	sp, #276	; 0x114
   22152:	460c      	mov	r4, r1
   22154:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   22158:	ee08 1a10 	vmov	s16, r1
   2215c:	4683      	mov	fp, r0
   2215e:	4616      	mov	r6, r2
   22160:	2100      	movs	r1, #0
   22162:	2208      	movs	r2, #8
   22164:	4650      	mov	r0, sl
   22166:	9308      	str	r3, [sp, #32]
   22168:	f7f9 fcf6 	bl	1bb58 <memset>
   2216c:	89a3      	ldrh	r3, [r4, #12]
   2216e:	061f      	lsls	r7, r3, #24
   22170:	d503      	bpl.n	2217a <_svfiprintf_r+0x32>
   22172:	6923      	ldr	r3, [r4, #16]
   22174:	2b00      	cmp	r3, #0
   22176:	f000 855b 	beq.w	22c30 <_svfiprintf_r+0xae8>
   2217a:	2300      	movs	r3, #0
   2217c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   22180:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   22184:	aa1b      	add	r2, sp, #108	; 0x6c
   22186:	930c      	str	r3, [sp, #48]	; 0x30
   22188:	9218      	str	r2, [sp, #96]	; 0x60
   2218a:	4691      	mov	r9, r2
   2218c:	930b      	str	r3, [sp, #44]	; 0x2c
   2218e:	9304      	str	r3, [sp, #16]
   22190:	46b0      	mov	r8, r6
   22192:	4644      	mov	r4, r8
   22194:	4b97      	ldr	r3, [pc, #604]	; (223f4 <_svfiprintf_r+0x2ac>)
   22196:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   2219a:	f7fa fd9b 	bl	1ccd4 <__locale_mb_cur_max>
   2219e:	4622      	mov	r2, r4
   221a0:	4603      	mov	r3, r0
   221a2:	a912      	add	r1, sp, #72	; 0x48
   221a4:	f8cd a000 	str.w	sl, [sp]
   221a8:	4658      	mov	r0, fp
   221aa:	47a8      	blx	r5
   221ac:	2800      	cmp	r0, #0
   221ae:	f000 8123 	beq.w	223f8 <_svfiprintf_r+0x2b0>
   221b2:	f2c0 8116 	blt.w	223e2 <_svfiprintf_r+0x29a>
   221b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   221b8:	2a25      	cmp	r2, #37	; 0x25
   221ba:	4603      	mov	r3, r0
   221bc:	d001      	beq.n	221c2 <_svfiprintf_r+0x7a>
   221be:	441c      	add	r4, r3
   221c0:	e7e8      	b.n	22194 <_svfiprintf_r+0x4c>
   221c2:	ebb4 0608 	subs.w	r6, r4, r8
   221c6:	4605      	mov	r5, r0
   221c8:	f040 811a 	bne.w	22400 <_svfiprintf_r+0x2b8>
   221cc:	2300      	movs	r3, #0
   221ce:	7861      	ldrb	r1, [r4, #1]
   221d0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   221d4:	f104 0801 	add.w	r8, r4, #1
   221d8:	9306      	str	r3, [sp, #24]
   221da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   221de:	461e      	mov	r6, r3
   221e0:	242b      	movs	r4, #43	; 0x2b
   221e2:	f108 0801 	add.w	r8, r8, #1
   221e6:	f1a1 0320 	sub.w	r3, r1, #32
   221ea:	2b5a      	cmp	r3, #90	; 0x5a
   221ec:	f200 813a 	bhi.w	22464 <_svfiprintf_r+0x31c>
   221f0:	e8df f013 	tbh	[pc, r3, lsl #1]
   221f4:	0138028c 	.word	0x0138028c
   221f8:	02870138 	.word	0x02870138
   221fc:	01380138 	.word	0x01380138
   22200:	006a0138 	.word	0x006a0138
   22204:	01380138 	.word	0x01380138
   22208:	0272027c 	.word	0x0272027c
   2220c:	00f20138 	.word	0x00f20138
   22210:	01380259 	.word	0x01380259
   22214:	005b0277 	.word	0x005b0277
   22218:	005b005b 	.word	0x005b005b
   2221c:	005b005b 	.word	0x005b005b
   22220:	005b005b 	.word	0x005b005b
   22224:	005b005b 	.word	0x005b005b
   22228:	01380138 	.word	0x01380138
   2222c:	01380138 	.word	0x01380138
   22230:	01380138 	.word	0x01380138
   22234:	01380138 	.word	0x01380138
   22238:	02000138 	.word	0x02000138
   2223c:	01380084 	.word	0x01380084
   22240:	01380138 	.word	0x01380138
   22244:	01380138 	.word	0x01380138
   22248:	01380138 	.word	0x01380138
   2224c:	01380138 	.word	0x01380138
   22250:	00ae0138 	.word	0x00ae0138
   22254:	01380138 	.word	0x01380138
   22258:	01cb0138 	.word	0x01cb0138
   2225c:	02970138 	.word	0x02970138
   22260:	01380138 	.word	0x01380138
   22264:	013804ea 	.word	0x013804ea
   22268:	01380138 	.word	0x01380138
   2226c:	01380138 	.word	0x01380138
   22270:	01380138 	.word	0x01380138
   22274:	01380138 	.word	0x01380138
   22278:	02000138 	.word	0x02000138
   2227c:	01380086 	.word	0x01380086
   22280:	01380138 	.word	0x01380138
   22284:	008602ca 	.word	0x008602ca
   22288:	0138007f 	.word	0x0138007f
   2228c:	013802bd 	.word	0x013802bd
   22290:	00b002aa 	.word	0x00b002aa
   22294:	007f02d7 	.word	0x007f02d7
   22298:	01cb0138 	.word	0x01cb0138
   2229c:	04e8007c 	.word	0x04e8007c
   222a0:	01380138 	.word	0x01380138
   222a4:	013804c8 	.word	0x013804c8
   222a8:	007c      	.short	0x007c
   222aa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   222ae:	2200      	movs	r2, #0
   222b0:	f818 1b01 	ldrb.w	r1, [r8], #1
   222b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   222b8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   222bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   222c0:	2b09      	cmp	r3, #9
   222c2:	d9f5      	bls.n	222b0 <_svfiprintf_r+0x168>
   222c4:	9206      	str	r2, [sp, #24]
   222c6:	e78e      	b.n	221e6 <_svfiprintf_r+0x9e>
   222c8:	4658      	mov	r0, fp
   222ca:	f7fe fea7 	bl	2101c <_localeconv_r>
   222ce:	6843      	ldr	r3, [r0, #4]
   222d0:	930d      	str	r3, [sp, #52]	; 0x34
   222d2:	4618      	mov	r0, r3
   222d4:	f7fa fff4 	bl	1d2c0 <strlen>
   222d8:	900e      	str	r0, [sp, #56]	; 0x38
   222da:	4605      	mov	r5, r0
   222dc:	4658      	mov	r0, fp
   222de:	f7fe fe9d 	bl	2101c <_localeconv_r>
   222e2:	6883      	ldr	r3, [r0, #8]
   222e4:	930b      	str	r3, [sp, #44]	; 0x2c
   222e6:	2d00      	cmp	r5, #0
   222e8:	f040 843d 	bne.w	22b66 <_svfiprintf_r+0xa1e>
   222ec:	f898 1000 	ldrb.w	r1, [r8]
   222f0:	e777      	b.n	221e2 <_svfiprintf_r+0x9a>
   222f2:	f898 1000 	ldrb.w	r1, [r8]
   222f6:	f046 0620 	orr.w	r6, r6, #32
   222fa:	e772      	b.n	221e2 <_svfiprintf_r+0x9a>
   222fc:	f046 0610 	orr.w	r6, r6, #16
   22300:	06b4      	lsls	r4, r6, #26
   22302:	f140 8137 	bpl.w	22574 <_svfiprintf_r+0x42c>
   22306:	9b08      	ldr	r3, [sp, #32]
   22308:	3307      	adds	r3, #7
   2230a:	f023 0307 	bic.w	r3, r3, #7
   2230e:	461a      	mov	r2, r3
   22310:	6859      	ldr	r1, [r3, #4]
   22312:	f852 3b08 	ldr.w	r3, [r2], #8
   22316:	9208      	str	r2, [sp, #32]
   22318:	460a      	mov	r2, r1
   2231a:	2900      	cmp	r1, #0
   2231c:	f2c0 819e 	blt.w	2265c <_svfiprintf_r+0x514>
   22320:	1c79      	adds	r1, r7, #1
   22322:	f000 84b8 	beq.w	22c96 <_svfiprintf_r+0xb4e>
   22326:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   2232a:	ea53 0102 	orrs.w	r1, r3, r2
   2232e:	9603      	str	r6, [sp, #12]
   22330:	f000 8385 	beq.w	22a3e <_svfiprintf_r+0x8f6>
   22334:	2b0a      	cmp	r3, #10
   22336:	f172 0100 	sbcs.w	r1, r2, #0
   2233a:	f080 83a6 	bcs.w	22a8a <_svfiprintf_r+0x942>
   2233e:	3330      	adds	r3, #48	; 0x30
   22340:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   22344:	2301      	movs	r3, #1
   22346:	9e03      	ldr	r6, [sp, #12]
   22348:	9305      	str	r3, [sp, #20]
   2234a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   2234e:	e030      	b.n	223b2 <_svfiprintf_r+0x26a>
   22350:	f046 0610 	orr.w	r6, r6, #16
   22354:	f016 0220 	ands.w	r2, r6, #32
   22358:	f000 80ff 	beq.w	2255a <_svfiprintf_r+0x412>
   2235c:	9b08      	ldr	r3, [sp, #32]
   2235e:	3307      	adds	r3, #7
   22360:	f023 0307 	bic.w	r3, r3, #7
   22364:	4619      	mov	r1, r3
   22366:	685a      	ldr	r2, [r3, #4]
   22368:	f851 3b08 	ldr.w	r3, [r1], #8
   2236c:	9108      	str	r1, [sp, #32]
   2236e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   22372:	9103      	str	r1, [sp, #12]
   22374:	2100      	movs	r1, #0
   22376:	2000      	movs	r0, #0
   22378:	1c7e      	adds	r6, r7, #1
   2237a:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   2237e:	f000 8179 	beq.w	22674 <_svfiprintf_r+0x52c>
   22382:	9803      	ldr	r0, [sp, #12]
   22384:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   22388:	ea53 0002 	orrs.w	r0, r3, r2
   2238c:	f040 82c6 	bne.w	2291c <_svfiprintf_r+0x7d4>
   22390:	2f00      	cmp	r7, #0
   22392:	f040 8483 	bne.w	22c9c <_svfiprintf_r+0xb54>
   22396:	2900      	cmp	r1, #0
   22398:	f040 8354 	bne.w	22a44 <_svfiprintf_r+0x8fc>
   2239c:	9b03      	ldr	r3, [sp, #12]
   2239e:	f013 0301 	ands.w	r3, r3, #1
   223a2:	9305      	str	r3, [sp, #20]
   223a4:	f000 83cd 	beq.w	22b42 <_svfiprintf_r+0x9fa>
   223a8:	2330      	movs	r3, #48	; 0x30
   223aa:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   223ae:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   223b2:	9b05      	ldr	r3, [sp, #20]
   223b4:	42bb      	cmp	r3, r7
   223b6:	bfb8      	it	lt
   223b8:	463b      	movlt	r3, r7
   223ba:	9303      	str	r3, [sp, #12]
   223bc:	2300      	movs	r3, #0
   223be:	9307      	str	r3, [sp, #28]
   223c0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   223c4:	2b00      	cmp	r3, #0
   223c6:	d05b      	beq.n	22480 <_svfiprintf_r+0x338>
   223c8:	9b03      	ldr	r3, [sp, #12]
   223ca:	3301      	adds	r3, #1
   223cc:	9303      	str	r3, [sp, #12]
   223ce:	e057      	b.n	22480 <_svfiprintf_r+0x338>
   223d0:	9a06      	ldr	r2, [sp, #24]
   223d2:	9308      	str	r3, [sp, #32]
   223d4:	4252      	negs	r2, r2
   223d6:	9206      	str	r2, [sp, #24]
   223d8:	f898 1000 	ldrb.w	r1, [r8]
   223dc:	f046 0604 	orr.w	r6, r6, #4
   223e0:	e6ff      	b.n	221e2 <_svfiprintf_r+0x9a>
   223e2:	2208      	movs	r2, #8
   223e4:	2100      	movs	r1, #0
   223e6:	4650      	mov	r0, sl
   223e8:	f7f9 fbb6 	bl	1bb58 <memset>
   223ec:	2301      	movs	r3, #1
   223ee:	441c      	add	r4, r3
   223f0:	e6d0      	b.n	22194 <_svfiprintf_r+0x4c>
   223f2:	bf00      	nop
   223f4:	200093a0 	.word	0x200093a0
   223f8:	ebb4 0608 	subs.w	r6, r4, r8
   223fc:	4605      	mov	r5, r0
   223fe:	d011      	beq.n	22424 <_svfiprintf_r+0x2dc>
   22400:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   22402:	4433      	add	r3, r6
   22404:	931a      	str	r3, [sp, #104]	; 0x68
   22406:	9b19      	ldr	r3, [sp, #100]	; 0x64
   22408:	3301      	adds	r3, #1
   2240a:	2b07      	cmp	r3, #7
   2240c:	e9c9 8600 	strd	r8, r6, [r9]
   22410:	9319      	str	r3, [sp, #100]	; 0x64
   22412:	dc1c      	bgt.n	2244e <_svfiprintf_r+0x306>
   22414:	f109 0908 	add.w	r9, r9, #8
   22418:	9b04      	ldr	r3, [sp, #16]
   2241a:	4433      	add	r3, r6
   2241c:	9304      	str	r3, [sp, #16]
   2241e:	2d00      	cmp	r5, #0
   22420:	f47f aed4 	bne.w	221cc <_svfiprintf_r+0x84>
   22424:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   22426:	2b00      	cmp	r3, #0
   22428:	f040 84cb 	bne.w	22dc2 <_svfiprintf_r+0xc7a>
   2242c:	ee18 3a10 	vmov	r3, s16
   22430:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   22434:	f013 0f40 	tst.w	r3, #64	; 0x40
   22438:	9b04      	ldr	r3, [sp, #16]
   2243a:	bf18      	it	ne
   2243c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   22440:	9304      	str	r3, [sp, #16]
   22442:	9804      	ldr	r0, [sp, #16]
   22444:	b045      	add	sp, #276	; 0x114
   22446:	ecbd 8b02 	vpop	{d8}
   2244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2244e:	ee18 1a10 	vmov	r1, s16
   22452:	aa18      	add	r2, sp, #96	; 0x60
   22454:	4658      	mov	r0, fp
   22456:	f7ff fdf7 	bl	22048 <__ssprint_r>
   2245a:	2800      	cmp	r0, #0
   2245c:	d1e6      	bne.n	2242c <_svfiprintf_r+0x2e4>
   2245e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22462:	e7d9      	b.n	22418 <_svfiprintf_r+0x2d0>
   22464:	2900      	cmp	r1, #0
   22466:	d0dd      	beq.n	22424 <_svfiprintf_r+0x2dc>
   22468:	2300      	movs	r3, #0
   2246a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2246e:	2301      	movs	r3, #1
   22470:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   22474:	9303      	str	r3, [sp, #12]
   22476:	9305      	str	r3, [sp, #20]
   22478:	ac2b      	add	r4, sp, #172	; 0xac
   2247a:	2300      	movs	r3, #0
   2247c:	9307      	str	r3, [sp, #28]
   2247e:	461f      	mov	r7, r3
   22480:	f016 0302 	ands.w	r3, r6, #2
   22484:	9309      	str	r3, [sp, #36]	; 0x24
   22486:	d002      	beq.n	2248e <_svfiprintf_r+0x346>
   22488:	9b03      	ldr	r3, [sp, #12]
   2248a:	3302      	adds	r3, #2
   2248c:	9303      	str	r3, [sp, #12]
   2248e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   22492:	930a      	str	r3, [sp, #40]	; 0x28
   22494:	d105      	bne.n	224a2 <_svfiprintf_r+0x35a>
   22496:	9b06      	ldr	r3, [sp, #24]
   22498:	9a03      	ldr	r2, [sp, #12]
   2249a:	1a9d      	subs	r5, r3, r2
   2249c:	2d00      	cmp	r5, #0
   2249e:	f300 823f 	bgt.w	22920 <_svfiprintf_r+0x7d8>
   224a2:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   224a6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   224aa:	b178      	cbz	r0, 224cc <_svfiprintf_r+0x384>
   224ac:	3201      	adds	r2, #1
   224ae:	3101      	adds	r1, #1
   224b0:	2301      	movs	r3, #1
   224b2:	f10d 0043 	add.w	r0, sp, #67	; 0x43
   224b6:	2a07      	cmp	r2, #7
   224b8:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   224bc:	f8c9 3004 	str.w	r3, [r9, #4]
   224c0:	f8c9 0000 	str.w	r0, [r9]
   224c4:	f300 8265 	bgt.w	22992 <_svfiprintf_r+0x84a>
   224c8:	f109 0908 	add.w	r9, r9, #8
   224cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   224ce:	b17b      	cbz	r3, 224f0 <_svfiprintf_r+0x3a8>
   224d0:	3201      	adds	r2, #1
   224d2:	ab11      	add	r3, sp, #68	; 0x44
   224d4:	3102      	adds	r1, #2
   224d6:	f8c9 3000 	str.w	r3, [r9]
   224da:	2a07      	cmp	r2, #7
   224dc:	f04f 0302 	mov.w	r3, #2
   224e0:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   224e4:	f8c9 3004 	str.w	r3, [r9, #4]
   224e8:	f300 8260 	bgt.w	229ac <_svfiprintf_r+0x864>
   224ec:	f109 0908 	add.w	r9, r9, #8
   224f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   224f2:	2b80      	cmp	r3, #128	; 0x80
   224f4:	f000 8183 	beq.w	227fe <_svfiprintf_r+0x6b6>
   224f8:	9b05      	ldr	r3, [sp, #20]
   224fa:	1afd      	subs	r5, r7, r3
   224fc:	2d00      	cmp	r5, #0
   224fe:	f300 81bf 	bgt.w	22880 <_svfiprintf_r+0x738>
   22502:	9b05      	ldr	r3, [sp, #20]
   22504:	f8c9 4000 	str.w	r4, [r9]
   22508:	3201      	adds	r2, #1
   2250a:	4419      	add	r1, r3
   2250c:	2a07      	cmp	r2, #7
   2250e:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   22512:	f8c9 3004 	str.w	r3, [r9, #4]
   22516:	f300 81e4 	bgt.w	228e2 <_svfiprintf_r+0x79a>
   2251a:	f109 0908 	add.w	r9, r9, #8
   2251e:	0770      	lsls	r0, r6, #29
   22520:	d505      	bpl.n	2252e <_svfiprintf_r+0x3e6>
   22522:	9b06      	ldr	r3, [sp, #24]
   22524:	9a03      	ldr	r2, [sp, #12]
   22526:	1a9c      	subs	r4, r3, r2
   22528:	2c00      	cmp	r4, #0
   2252a:	f300 824c 	bgt.w	229c6 <_svfiprintf_r+0x87e>
   2252e:	9b04      	ldr	r3, [sp, #16]
   22530:	9a06      	ldr	r2, [sp, #24]
   22532:	9803      	ldr	r0, [sp, #12]
   22534:	4282      	cmp	r2, r0
   22536:	bfac      	ite	ge
   22538:	189b      	addge	r3, r3, r2
   2253a:	181b      	addlt	r3, r3, r0
   2253c:	9304      	str	r3, [sp, #16]
   2253e:	2900      	cmp	r1, #0
   22540:	f040 81da 	bne.w	228f8 <_svfiprintf_r+0x7b0>
   22544:	2300      	movs	r3, #0
   22546:	9319      	str	r3, [sp, #100]	; 0x64
   22548:	9b07      	ldr	r3, [sp, #28]
   2254a:	b11b      	cbz	r3, 22554 <_svfiprintf_r+0x40c>
   2254c:	9907      	ldr	r1, [sp, #28]
   2254e:	4658      	mov	r0, fp
   22550:	f7fa ffc8 	bl	1d4e4 <_free_r>
   22554:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22558:	e61b      	b.n	22192 <_svfiprintf_r+0x4a>
   2255a:	f016 0310 	ands.w	r3, r6, #16
   2255e:	9908      	ldr	r1, [sp, #32]
   22560:	d16d      	bne.n	2263e <_svfiprintf_r+0x4f6>
   22562:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   22566:	d066      	beq.n	22636 <_svfiprintf_r+0x4ee>
   22568:	461a      	mov	r2, r3
   2256a:	f851 3b04 	ldr.w	r3, [r1], #4
   2256e:	9108      	str	r1, [sp, #32]
   22570:	b29b      	uxth	r3, r3
   22572:	e6fc      	b.n	2236e <_svfiprintf_r+0x226>
   22574:	06f0      	lsls	r0, r6, #27
   22576:	9a08      	ldr	r2, [sp, #32]
   22578:	d468      	bmi.n	2264c <_svfiprintf_r+0x504>
   2257a:	0671      	lsls	r1, r6, #25
   2257c:	d563      	bpl.n	22646 <_svfiprintf_r+0x4fe>
   2257e:	f932 3b04 	ldrsh.w	r3, [r2], #4
   22582:	9208      	str	r2, [sp, #32]
   22584:	17da      	asrs	r2, r3, #31
   22586:	4611      	mov	r1, r2
   22588:	e6c7      	b.n	2231a <_svfiprintf_r+0x1d2>
   2258a:	9b08      	ldr	r3, [sp, #32]
   2258c:	461a      	mov	r2, r3
   2258e:	2300      	movs	r3, #0
   22590:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   22594:	4613      	mov	r3, r2
   22596:	f853 4b04 	ldr.w	r4, [r3], #4
   2259a:	9303      	str	r3, [sp, #12]
   2259c:	2c00      	cmp	r4, #0
   2259e:	f000 8399 	beq.w	22cd4 <_svfiprintf_r+0xb8c>
   225a2:	2953      	cmp	r1, #83	; 0x53
   225a4:	d003      	beq.n	225ae <_svfiprintf_r+0x466>
   225a6:	f016 0510 	ands.w	r5, r6, #16
   225aa:	f000 832a 	beq.w	22c02 <_svfiprintf_r+0xaba>
   225ae:	2100      	movs	r1, #0
   225b0:	2208      	movs	r2, #8
   225b2:	a816      	add	r0, sp, #88	; 0x58
   225b4:	9413      	str	r4, [sp, #76]	; 0x4c
   225b6:	f7f9 facf 	bl	1bb58 <memset>
   225ba:	1c79      	adds	r1, r7, #1
   225bc:	f000 83a5 	beq.w	22d0a <_svfiprintf_r+0xbc2>
   225c0:	2500      	movs	r5, #0
   225c2:	9407      	str	r4, [sp, #28]
   225c4:	462c      	mov	r4, r5
   225c6:	e00c      	b.n	225e2 <_svfiprintf_r+0x49a>
   225c8:	a92b      	add	r1, sp, #172	; 0xac
   225ca:	4658      	mov	r0, fp
   225cc:	f7ff fcaa 	bl	21f24 <_wcrtomb_r>
   225d0:	1c42      	adds	r2, r0, #1
   225d2:	4420      	add	r0, r4
   225d4:	f000 841d 	beq.w	22e12 <_svfiprintf_r+0xcca>
   225d8:	42b8      	cmp	r0, r7
   225da:	dc08      	bgt.n	225ee <_svfiprintf_r+0x4a6>
   225dc:	f000 8422 	beq.w	22e24 <_svfiprintf_r+0xcdc>
   225e0:	4604      	mov	r4, r0
   225e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   225e4:	5952      	ldr	r2, [r2, r5]
   225e6:	ab16      	add	r3, sp, #88	; 0x58
   225e8:	3504      	adds	r5, #4
   225ea:	2a00      	cmp	r2, #0
   225ec:	d1ec      	bne.n	225c8 <_svfiprintf_r+0x480>
   225ee:	9405      	str	r4, [sp, #20]
   225f0:	9c07      	ldr	r4, [sp, #28]
   225f2:	e397      	b.n	22d24 <_svfiprintf_r+0xbdc>
   225f4:	2943      	cmp	r1, #67	; 0x43
   225f6:	d002      	beq.n	225fe <_svfiprintf_r+0x4b6>
   225f8:	06f5      	lsls	r5, r6, #27
   225fa:	f140 82f7 	bpl.w	22bec <_svfiprintf_r+0xaa4>
   225fe:	9d08      	ldr	r5, [sp, #32]
   22600:	2208      	movs	r2, #8
   22602:	2100      	movs	r1, #0
   22604:	a816      	add	r0, sp, #88	; 0x58
   22606:	ac2b      	add	r4, sp, #172	; 0xac
   22608:	f7f9 faa6 	bl	1bb58 <memset>
   2260c:	ab16      	add	r3, sp, #88	; 0x58
   2260e:	f855 2b04 	ldr.w	r2, [r5], #4
   22612:	4621      	mov	r1, r4
   22614:	4658      	mov	r0, fp
   22616:	f7ff fc85 	bl	21f24 <_wcrtomb_r>
   2261a:	4603      	mov	r3, r0
   2261c:	3301      	adds	r3, #1
   2261e:	9005      	str	r0, [sp, #20]
   22620:	f000 83f7 	beq.w	22e12 <_svfiprintf_r+0xcca>
   22624:	9b05      	ldr	r3, [sp, #20]
   22626:	9508      	str	r5, [sp, #32]
   22628:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2262c:	9303      	str	r3, [sp, #12]
   2262e:	2300      	movs	r3, #0
   22630:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   22634:	e721      	b.n	2247a <_svfiprintf_r+0x332>
   22636:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   2263a:	f040 83ad 	bne.w	22d98 <_svfiprintf_r+0xc50>
   2263e:	f851 3b04 	ldr.w	r3, [r1], #4
   22642:	9108      	str	r1, [sp, #32]
   22644:	e693      	b.n	2236e <_svfiprintf_r+0x226>
   22646:	05b3      	lsls	r3, r6, #22
   22648:	f100 8396 	bmi.w	22d78 <_svfiprintf_r+0xc30>
   2264c:	f852 3b04 	ldr.w	r3, [r2], #4
   22650:	9208      	str	r2, [sp, #32]
   22652:	17da      	asrs	r2, r3, #31
   22654:	4611      	mov	r1, r2
   22656:	2900      	cmp	r1, #0
   22658:	f6bf ae62 	bge.w	22320 <_svfiprintf_r+0x1d8>
   2265c:	425b      	negs	r3, r3
   2265e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   22662:	9603      	str	r6, [sp, #12]
   22664:	202d      	movs	r0, #45	; 0x2d
   22666:	1c7e      	adds	r6, r7, #1
   22668:	f04f 0101 	mov.w	r1, #1
   2266c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   22670:	f47f ae87 	bne.w	22382 <_svfiprintf_r+0x23a>
   22674:	2901      	cmp	r1, #1
   22676:	f43f ae5d 	beq.w	22334 <_svfiprintf_r+0x1ec>
   2267a:	2902      	cmp	r1, #2
   2267c:	ac44      	add	r4, sp, #272	; 0x110
   2267e:	f040 80a0 	bne.w	227c2 <_svfiprintf_r+0x67a>
   22682:	980c      	ldr	r0, [sp, #48]	; 0x30
   22684:	f003 010f 	and.w	r1, r3, #15
   22688:	091b      	lsrs	r3, r3, #4
   2268a:	5c41      	ldrb	r1, [r0, r1]
   2268c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   22690:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   22694:	0912      	lsrs	r2, r2, #4
   22696:	ea53 0102 	orrs.w	r1, r3, r2
   2269a:	d1f3      	bne.n	22684 <_svfiprintf_r+0x53c>
   2269c:	9e03      	ldr	r6, [sp, #12]
   2269e:	ab44      	add	r3, sp, #272	; 0x110
   226a0:	1b1b      	subs	r3, r3, r4
   226a2:	9305      	str	r3, [sp, #20]
   226a4:	e685      	b.n	223b2 <_svfiprintf_r+0x26a>
   226a6:	4642      	mov	r2, r8
   226a8:	f812 1b01 	ldrb.w	r1, [r2], #1
   226ac:	292a      	cmp	r1, #42	; 0x2a
   226ae:	f000 83bc 	beq.w	22e2a <_svfiprintf_r+0xce2>
   226b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   226b6:	2b09      	cmp	r3, #9
   226b8:	4690      	mov	r8, r2
   226ba:	f04f 0700 	mov.w	r7, #0
   226be:	f63f ad92 	bhi.w	221e6 <_svfiprintf_r+0x9e>
   226c2:	f818 1b01 	ldrb.w	r1, [r8], #1
   226c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   226ca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   226ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   226d2:	2b09      	cmp	r3, #9
   226d4:	d9f5      	bls.n	226c2 <_svfiprintf_r+0x57a>
   226d6:	e586      	b.n	221e6 <_svfiprintf_r+0x9e>
   226d8:	f898 1000 	ldrb.w	r1, [r8]
   226dc:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   226e0:	e57f      	b.n	221e2 <_svfiprintf_r+0x9a>
   226e2:	f898 1000 	ldrb.w	r1, [r8]
   226e6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   226ea:	e57a      	b.n	221e2 <_svfiprintf_r+0x9a>
   226ec:	9b08      	ldr	r3, [sp, #32]
   226ee:	f853 2b04 	ldr.w	r2, [r3], #4
   226f2:	9206      	str	r2, [sp, #24]
   226f4:	2a00      	cmp	r2, #0
   226f6:	f6ff ae6b 	blt.w	223d0 <_svfiprintf_r+0x288>
   226fa:	f898 1000 	ldrb.w	r1, [r8]
   226fe:	9308      	str	r3, [sp, #32]
   22700:	e56f      	b.n	221e2 <_svfiprintf_r+0x9a>
   22702:	f898 1000 	ldrb.w	r1, [r8]
   22706:	f046 0601 	orr.w	r6, r6, #1
   2270a:	e56a      	b.n	221e2 <_svfiprintf_r+0x9a>
   2270c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   22710:	2b00      	cmp	r3, #0
   22712:	f47f adeb 	bne.w	222ec <_svfiprintf_r+0x1a4>
   22716:	2320      	movs	r3, #32
   22718:	f898 1000 	ldrb.w	r1, [r8]
   2271c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   22720:	e55f      	b.n	221e2 <_svfiprintf_r+0x9a>
   22722:	f046 0310 	orr.w	r3, r6, #16
   22726:	9303      	str	r3, [sp, #12]
   22728:	9b03      	ldr	r3, [sp, #12]
   2272a:	f013 0220 	ands.w	r2, r3, #32
   2272e:	f000 818d 	beq.w	22a4c <_svfiprintf_r+0x904>
   22732:	9b08      	ldr	r3, [sp, #32]
   22734:	3307      	adds	r3, #7
   22736:	f023 0307 	bic.w	r3, r3, #7
   2273a:	4619      	mov	r1, r3
   2273c:	685a      	ldr	r2, [r3, #4]
   2273e:	f851 3b08 	ldr.w	r3, [r1], #8
   22742:	9108      	str	r1, [sp, #32]
   22744:	2101      	movs	r1, #1
   22746:	e616      	b.n	22376 <_svfiprintf_r+0x22e>
   22748:	06b7      	lsls	r7, r6, #26
   2274a:	f100 8202 	bmi.w	22b52 <_svfiprintf_r+0xa0a>
   2274e:	06f5      	lsls	r5, r6, #27
   22750:	f100 82b8 	bmi.w	22cc4 <_svfiprintf_r+0xb7c>
   22754:	0674      	lsls	r4, r6, #25
   22756:	f100 832c 	bmi.w	22db2 <_svfiprintf_r+0xc6a>
   2275a:	05b0      	lsls	r0, r6, #22
   2275c:	f140 82b2 	bpl.w	22cc4 <_svfiprintf_r+0xb7c>
   22760:	9b08      	ldr	r3, [sp, #32]
   22762:	9904      	ldr	r1, [sp, #16]
   22764:	f853 2b04 	ldr.w	r2, [r3], #4
   22768:	9308      	str	r3, [sp, #32]
   2276a:	7011      	strb	r1, [r2, #0]
   2276c:	e511      	b.n	22192 <_svfiprintf_r+0x4a>
   2276e:	f898 1000 	ldrb.w	r1, [r8]
   22772:	296c      	cmp	r1, #108	; 0x6c
   22774:	bf03      	ittte	eq
   22776:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   2277a:	f046 0620 	orreq.w	r6, r6, #32
   2277e:	f108 0801 	addeq.w	r8, r8, #1
   22782:	f046 0610 	orrne.w	r6, r6, #16
   22786:	e52c      	b.n	221e2 <_svfiprintf_r+0x9a>
   22788:	f898 1000 	ldrb.w	r1, [r8]
   2278c:	2968      	cmp	r1, #104	; 0x68
   2278e:	bf03      	ittte	eq
   22790:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   22794:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   22798:	f108 0801 	addeq.w	r8, r8, #1
   2279c:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   227a0:	e51f      	b.n	221e2 <_svfiprintf_r+0x9a>
   227a2:	9a08      	ldr	r2, [sp, #32]
   227a4:	f046 0302 	orr.w	r3, r6, #2
   227a8:	9303      	str	r3, [sp, #12]
   227aa:	f852 3b04 	ldr.w	r3, [r2], #4
   227ae:	9208      	str	r2, [sp, #32]
   227b0:	f647 0230 	movw	r2, #30768	; 0x7830
   227b4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   227b8:	4aba      	ldr	r2, [pc, #744]	; (22aa4 <_svfiprintf_r+0x95c>)
   227ba:	920c      	str	r2, [sp, #48]	; 0x30
   227bc:	2102      	movs	r1, #2
   227be:	2200      	movs	r2, #0
   227c0:	e5d9      	b.n	22376 <_svfiprintf_r+0x22e>
   227c2:	f003 0107 	and.w	r1, r3, #7
   227c6:	08db      	lsrs	r3, r3, #3
   227c8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   227cc:	08d2      	lsrs	r2, r2, #3
   227ce:	3130      	adds	r1, #48	; 0x30
   227d0:	ea53 0502 	orrs.w	r5, r3, r2
   227d4:	4620      	mov	r0, r4
   227d6:	f804 1d01 	strb.w	r1, [r4, #-1]!
   227da:	d1f2      	bne.n	227c2 <_svfiprintf_r+0x67a>
   227dc:	9e03      	ldr	r6, [sp, #12]
   227de:	07f5      	lsls	r5, r6, #31
   227e0:	f57f af5d 	bpl.w	2269e <_svfiprintf_r+0x556>
   227e4:	2930      	cmp	r1, #48	; 0x30
   227e6:	f43f af59 	beq.w	2269c <_svfiprintf_r+0x554>
   227ea:	2330      	movs	r3, #48	; 0x30
   227ec:	3802      	subs	r0, #2
   227ee:	f804 3c01 	strb.w	r3, [r4, #-1]
   227f2:	ab44      	add	r3, sp, #272	; 0x110
   227f4:	1a1b      	subs	r3, r3, r0
   227f6:	9e03      	ldr	r6, [sp, #12]
   227f8:	9305      	str	r3, [sp, #20]
   227fa:	4604      	mov	r4, r0
   227fc:	e5d9      	b.n	223b2 <_svfiprintf_r+0x26a>
   227fe:	9b06      	ldr	r3, [sp, #24]
   22800:	9803      	ldr	r0, [sp, #12]
   22802:	1a1d      	subs	r5, r3, r0
   22804:	2d00      	cmp	r5, #0
   22806:	f77f ae77 	ble.w	224f8 <_svfiprintf_r+0x3b0>
   2280a:	2d10      	cmp	r5, #16
   2280c:	dd25      	ble.n	2285a <_svfiprintf_r+0x712>
   2280e:	9409      	str	r4, [sp, #36]	; 0x24
   22810:	2310      	movs	r3, #16
   22812:	ee18 4a10 	vmov	r4, s16
   22816:	4608      	mov	r0, r1
   22818:	e004      	b.n	22824 <_svfiprintf_r+0x6dc>
   2281a:	3d10      	subs	r5, #16
   2281c:	2d10      	cmp	r5, #16
   2281e:	f109 0908 	add.w	r9, r9, #8
   22822:	dd18      	ble.n	22856 <_svfiprintf_r+0x70e>
   22824:	3201      	adds	r2, #1
   22826:	49a0      	ldr	r1, [pc, #640]	; (22aa8 <_svfiprintf_r+0x960>)
   22828:	3010      	adds	r0, #16
   2282a:	2a07      	cmp	r2, #7
   2282c:	e9c9 1300 	strd	r1, r3, [r9]
   22830:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   22834:	ddf1      	ble.n	2281a <_svfiprintf_r+0x6d2>
   22836:	aa18      	add	r2, sp, #96	; 0x60
   22838:	4621      	mov	r1, r4
   2283a:	4658      	mov	r0, fp
   2283c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22840:	f7ff fc02 	bl	22048 <__ssprint_r>
   22844:	2800      	cmp	r0, #0
   22846:	d160      	bne.n	2290a <_svfiprintf_r+0x7c2>
   22848:	3d10      	subs	r5, #16
   2284a:	2d10      	cmp	r5, #16
   2284c:	e9dd 2019 	ldrd	r2, r0, [sp, #100]	; 0x64
   22850:	f04f 0310 	mov.w	r3, #16
   22854:	dce6      	bgt.n	22824 <_svfiprintf_r+0x6dc>
   22856:	9c09      	ldr	r4, [sp, #36]	; 0x24
   22858:	4601      	mov	r1, r0
   2285a:	3201      	adds	r2, #1
   2285c:	4b92      	ldr	r3, [pc, #584]	; (22aa8 <_svfiprintf_r+0x960>)
   2285e:	f8c9 5004 	str.w	r5, [r9, #4]
   22862:	4429      	add	r1, r5
   22864:	2a07      	cmp	r2, #7
   22866:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   2286a:	f8c9 3000 	str.w	r3, [r9]
   2286e:	f300 821b 	bgt.w	22ca8 <_svfiprintf_r+0xb60>
   22872:	9b05      	ldr	r3, [sp, #20]
   22874:	1afd      	subs	r5, r7, r3
   22876:	2d00      	cmp	r5, #0
   22878:	f109 0908 	add.w	r9, r9, #8
   2287c:	f77f ae41 	ble.w	22502 <_svfiprintf_r+0x3ba>
   22880:	2d10      	cmp	r5, #16
   22882:	dd1f      	ble.n	228c4 <_svfiprintf_r+0x77c>
   22884:	464b      	mov	r3, r9
   22886:	2710      	movs	r7, #16
   22888:	ee18 9a10 	vmov	r9, s16
   2288c:	e004      	b.n	22898 <_svfiprintf_r+0x750>
   2288e:	3d10      	subs	r5, #16
   22890:	2d10      	cmp	r5, #16
   22892:	f103 0308 	add.w	r3, r3, #8
   22896:	dd14      	ble.n	228c2 <_svfiprintf_r+0x77a>
   22898:	3201      	adds	r2, #1
   2289a:	4883      	ldr	r0, [pc, #524]	; (22aa8 <_svfiprintf_r+0x960>)
   2289c:	3110      	adds	r1, #16
   2289e:	2a07      	cmp	r2, #7
   228a0:	e9c3 0700 	strd	r0, r7, [r3]
   228a4:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   228a8:	ddf1      	ble.n	2288e <_svfiprintf_r+0x746>
   228aa:	aa18      	add	r2, sp, #96	; 0x60
   228ac:	4649      	mov	r1, r9
   228ae:	4658      	mov	r0, fp
   228b0:	f7ff fbca 	bl	22048 <__ssprint_r>
   228b4:	bb48      	cbnz	r0, 2290a <_svfiprintf_r+0x7c2>
   228b6:	3d10      	subs	r5, #16
   228b8:	2d10      	cmp	r5, #16
   228ba:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   228be:	ab1b      	add	r3, sp, #108	; 0x6c
   228c0:	dcea      	bgt.n	22898 <_svfiprintf_r+0x750>
   228c2:	4699      	mov	r9, r3
   228c4:	3201      	adds	r2, #1
   228c6:	4b78      	ldr	r3, [pc, #480]	; (22aa8 <_svfiprintf_r+0x960>)
   228c8:	f8c9 5004 	str.w	r5, [r9, #4]
   228cc:	4429      	add	r1, r5
   228ce:	2a07      	cmp	r2, #7
   228d0:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   228d4:	f8c9 3000 	str.w	r3, [r9]
   228d8:	f300 80c9 	bgt.w	22a6e <_svfiprintf_r+0x926>
   228dc:	f109 0908 	add.w	r9, r9, #8
   228e0:	e60f      	b.n	22502 <_svfiprintf_r+0x3ba>
   228e2:	ee18 1a10 	vmov	r1, s16
   228e6:	aa18      	add	r2, sp, #96	; 0x60
   228e8:	4658      	mov	r0, fp
   228ea:	f7ff fbad 	bl	22048 <__ssprint_r>
   228ee:	b960      	cbnz	r0, 2290a <_svfiprintf_r+0x7c2>
   228f0:	991a      	ldr	r1, [sp, #104]	; 0x68
   228f2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   228f6:	e612      	b.n	2251e <_svfiprintf_r+0x3d6>
   228f8:	ee18 1a10 	vmov	r1, s16
   228fc:	aa18      	add	r2, sp, #96	; 0x60
   228fe:	4658      	mov	r0, fp
   22900:	f7ff fba2 	bl	22048 <__ssprint_r>
   22904:	2800      	cmp	r0, #0
   22906:	f43f ae1d 	beq.w	22544 <_svfiprintf_r+0x3fc>
   2290a:	9b07      	ldr	r3, [sp, #28]
   2290c:	2b00      	cmp	r3, #0
   2290e:	f43f ad8d 	beq.w	2242c <_svfiprintf_r+0x2e4>
   22912:	9907      	ldr	r1, [sp, #28]
   22914:	4658      	mov	r0, fp
   22916:	f7fa fde5 	bl	1d4e4 <_free_r>
   2291a:	e587      	b.n	2242c <_svfiprintf_r+0x2e4>
   2291c:	9603      	str	r6, [sp, #12]
   2291e:	e6a9      	b.n	22674 <_svfiprintf_r+0x52c>
   22920:	2d10      	cmp	r5, #16
   22922:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22926:	dd25      	ble.n	22974 <_svfiprintf_r+0x82c>
   22928:	940f      	str	r4, [sp, #60]	; 0x3c
   2292a:	2310      	movs	r3, #16
   2292c:	ee18 4a10 	vmov	r4, s16
   22930:	4608      	mov	r0, r1
   22932:	e004      	b.n	2293e <_svfiprintf_r+0x7f6>
   22934:	3d10      	subs	r5, #16
   22936:	2d10      	cmp	r5, #16
   22938:	f109 0908 	add.w	r9, r9, #8
   2293c:	dd18      	ble.n	22970 <_svfiprintf_r+0x828>
   2293e:	3201      	adds	r2, #1
   22940:	495a      	ldr	r1, [pc, #360]	; (22aac <_svfiprintf_r+0x964>)
   22942:	3010      	adds	r0, #16
   22944:	2a07      	cmp	r2, #7
   22946:	e9c9 1300 	strd	r1, r3, [r9]
   2294a:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   2294e:	ddf1      	ble.n	22934 <_svfiprintf_r+0x7ec>
   22950:	aa18      	add	r2, sp, #96	; 0x60
   22952:	4621      	mov	r1, r4
   22954:	4658      	mov	r0, fp
   22956:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2295a:	f7ff fb75 	bl	22048 <__ssprint_r>
   2295e:	2800      	cmp	r0, #0
   22960:	d1d3      	bne.n	2290a <_svfiprintf_r+0x7c2>
   22962:	3d10      	subs	r5, #16
   22964:	2d10      	cmp	r5, #16
   22966:	e9dd 2019 	ldrd	r2, r0, [sp, #100]	; 0x64
   2296a:	f04f 0310 	mov.w	r3, #16
   2296e:	dce6      	bgt.n	2293e <_svfiprintf_r+0x7f6>
   22970:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   22972:	4601      	mov	r1, r0
   22974:	3201      	adds	r2, #1
   22976:	4b4d      	ldr	r3, [pc, #308]	; (22aac <_svfiprintf_r+0x964>)
   22978:	f8c9 5004 	str.w	r5, [r9, #4]
   2297c:	4429      	add	r1, r5
   2297e:	2a07      	cmp	r2, #7
   22980:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   22984:	f8c9 3000 	str.w	r3, [r9]
   22988:	f300 8177 	bgt.w	22c7a <_svfiprintf_r+0xb32>
   2298c:	f109 0908 	add.w	r9, r9, #8
   22990:	e589      	b.n	224a6 <_svfiprintf_r+0x35e>
   22992:	ee18 1a10 	vmov	r1, s16
   22996:	aa18      	add	r2, sp, #96	; 0x60
   22998:	4658      	mov	r0, fp
   2299a:	f7ff fb55 	bl	22048 <__ssprint_r>
   2299e:	2800      	cmp	r0, #0
   229a0:	d1b3      	bne.n	2290a <_svfiprintf_r+0x7c2>
   229a2:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   229a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   229aa:	e58f      	b.n	224cc <_svfiprintf_r+0x384>
   229ac:	ee18 1a10 	vmov	r1, s16
   229b0:	aa18      	add	r2, sp, #96	; 0x60
   229b2:	4658      	mov	r0, fp
   229b4:	f7ff fb48 	bl	22048 <__ssprint_r>
   229b8:	2800      	cmp	r0, #0
   229ba:	d1a6      	bne.n	2290a <_svfiprintf_r+0x7c2>
   229bc:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   229c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   229c4:	e594      	b.n	224f0 <_svfiprintf_r+0x3a8>
   229c6:	2c10      	cmp	r4, #16
   229c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   229ca:	dd21      	ble.n	22a10 <_svfiprintf_r+0x8c8>
   229cc:	ee18 6a10 	vmov	r6, s16
   229d0:	2510      	movs	r5, #16
   229d2:	460a      	mov	r2, r1
   229d4:	e004      	b.n	229e0 <_svfiprintf_r+0x898>
   229d6:	3c10      	subs	r4, #16
   229d8:	2c10      	cmp	r4, #16
   229da:	f109 0908 	add.w	r9, r9, #8
   229de:	dd16      	ble.n	22a0e <_svfiprintf_r+0x8c6>
   229e0:	3301      	adds	r3, #1
   229e2:	4932      	ldr	r1, [pc, #200]	; (22aac <_svfiprintf_r+0x964>)
   229e4:	3210      	adds	r2, #16
   229e6:	2b07      	cmp	r3, #7
   229e8:	e9c9 1500 	strd	r1, r5, [r9]
   229ec:	e9cd 3219 	strd	r3, r2, [sp, #100]	; 0x64
   229f0:	ddf1      	ble.n	229d6 <_svfiprintf_r+0x88e>
   229f2:	aa18      	add	r2, sp, #96	; 0x60
   229f4:	4631      	mov	r1, r6
   229f6:	4658      	mov	r0, fp
   229f8:	f7ff fb26 	bl	22048 <__ssprint_r>
   229fc:	2800      	cmp	r0, #0
   229fe:	d184      	bne.n	2290a <_svfiprintf_r+0x7c2>
   22a00:	3c10      	subs	r4, #16
   22a02:	2c10      	cmp	r4, #16
   22a04:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
   22a08:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22a0c:	dce8      	bgt.n	229e0 <_svfiprintf_r+0x898>
   22a0e:	4611      	mov	r1, r2
   22a10:	3301      	adds	r3, #1
   22a12:	4a26      	ldr	r2, [pc, #152]	; (22aac <_svfiprintf_r+0x964>)
   22a14:	f8c9 4004 	str.w	r4, [r9, #4]
   22a18:	4421      	add	r1, r4
   22a1a:	2b07      	cmp	r3, #7
   22a1c:	e9cd 3119 	strd	r3, r1, [sp, #100]	; 0x64
   22a20:	f8c9 2000 	str.w	r2, [r9]
   22a24:	f77f ad83 	ble.w	2252e <_svfiprintf_r+0x3e6>
   22a28:	ee18 1a10 	vmov	r1, s16
   22a2c:	aa18      	add	r2, sp, #96	; 0x60
   22a2e:	4658      	mov	r0, fp
   22a30:	f7ff fb0a 	bl	22048 <__ssprint_r>
   22a34:	2800      	cmp	r0, #0
   22a36:	f47f af68 	bne.w	2290a <_svfiprintf_r+0x7c2>
   22a3a:	991a      	ldr	r1, [sp, #104]	; 0x68
   22a3c:	e577      	b.n	2252e <_svfiprintf_r+0x3e6>
   22a3e:	2f00      	cmp	r7, #0
   22a40:	f47f ac7d 	bne.w	2233e <_svfiprintf_r+0x1f6>
   22a44:	2700      	movs	r7, #0
   22a46:	9705      	str	r7, [sp, #20]
   22a48:	ac44      	add	r4, sp, #272	; 0x110
   22a4a:	e4b2      	b.n	223b2 <_svfiprintf_r+0x26a>
   22a4c:	9b03      	ldr	r3, [sp, #12]
   22a4e:	f013 0310 	ands.w	r3, r3, #16
   22a52:	d178      	bne.n	22b46 <_svfiprintf_r+0x9fe>
   22a54:	9a03      	ldr	r2, [sp, #12]
   22a56:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   22a5a:	f000 8146 	beq.w	22cea <_svfiprintf_r+0xba2>
   22a5e:	9908      	ldr	r1, [sp, #32]
   22a60:	461a      	mov	r2, r3
   22a62:	f851 3b04 	ldr.w	r3, [r1], #4
   22a66:	9108      	str	r1, [sp, #32]
   22a68:	b29b      	uxth	r3, r3
   22a6a:	2101      	movs	r1, #1
   22a6c:	e483      	b.n	22376 <_svfiprintf_r+0x22e>
   22a6e:	ee18 1a10 	vmov	r1, s16
   22a72:	aa18      	add	r2, sp, #96	; 0x60
   22a74:	4658      	mov	r0, fp
   22a76:	f7ff fae7 	bl	22048 <__ssprint_r>
   22a7a:	2800      	cmp	r0, #0
   22a7c:	f47f af45 	bne.w	2290a <_svfiprintf_r+0x7c2>
   22a80:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22a84:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22a88:	e53b      	b.n	22502 <_svfiprintf_r+0x3ba>
   22a8a:	9903      	ldr	r1, [sp, #12]
   22a8c:	9705      	str	r7, [sp, #20]
   22a8e:	ac44      	add	r4, sp, #272	; 0x110
   22a90:	469e      	mov	lr, r3
   22a92:	ee08 ba90 	vmov	s17, fp
   22a96:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   22a9a:	f04f 0c00 	mov.w	ip, #0
   22a9e:	4623      	mov	r3, r4
   22aa0:	e00d      	b.n	22abe <_svfiprintf_r+0x976>
   22aa2:	bf00      	nop
   22aa4:	20008d04 	.word	0x20008d04
   22aa8:	2000261c 	.word	0x2000261c
   22aac:	2000260c 	.word	0x2000260c
   22ab0:	f1be 0f0a 	cmp.w	lr, #10
   22ab4:	f172 0200 	sbcs.w	r2, r2, #0
   22ab8:	d33a      	bcc.n	22b30 <_svfiprintf_r+0x9e8>
   22aba:	46a6      	mov	lr, r4
   22abc:	462a      	mov	r2, r5
   22abe:	49b2      	ldr	r1, [pc, #712]	; (22d88 <_svfiprintf_r+0xc40>)
   22ac0:	eb1e 0002 	adds.w	r0, lr, r2
   22ac4:	f140 0000 	adc.w	r0, r0, #0
   22ac8:	460f      	mov	r7, r1
   22aca:	fba1 1400 	umull	r1, r4, r1, r0
   22ace:	f024 0103 	bic.w	r1, r4, #3
   22ad2:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   22ad6:	1a40      	subs	r0, r0, r1
   22ad8:	ebbe 0100 	subs.w	r1, lr, r0
   22adc:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   22ae0:	f162 0400 	sbc.w	r4, r2, #0
   22ae4:	fb05 f501 	mul.w	r5, r5, r1
   22ae8:	fb07 5504 	mla	r5, r7, r4, r5
   22aec:	fba1 4107 	umull	r4, r1, r1, r7
   22af0:	440d      	add	r5, r1
   22af2:	2705      	movs	r7, #5
   22af4:	f004 0101 	and.w	r1, r4, #1
   22af8:	fba1 1b07 	umull	r1, fp, r1, r7
   22afc:	1809      	adds	r1, r1, r0
   22afe:	0864      	lsrs	r4, r4, #1
   22b00:	3130      	adds	r1, #48	; 0x30
   22b02:	f803 1c01 	strb.w	r1, [r3, #-1]
   22b06:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   22b0a:	f10c 0c01 	add.w	ip, ip, #1
   22b0e:	3b01      	subs	r3, #1
   22b10:	086d      	lsrs	r5, r5, #1
   22b12:	2e00      	cmp	r6, #0
   22b14:	d0cc      	beq.n	22ab0 <_svfiprintf_r+0x968>
   22b16:	990b      	ldr	r1, [sp, #44]	; 0x2c
   22b18:	7809      	ldrb	r1, [r1, #0]
   22b1a:	4561      	cmp	r1, ip
   22b1c:	d1c8      	bne.n	22ab0 <_svfiprintf_r+0x968>
   22b1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   22b22:	d0c5      	beq.n	22ab0 <_svfiprintf_r+0x968>
   22b24:	f1be 0f0a 	cmp.w	lr, #10
   22b28:	f172 0200 	sbcs.w	r2, r2, #0
   22b2c:	f080 808d 	bcs.w	22c4a <_svfiprintf_r+0xb02>
   22b30:	461c      	mov	r4, r3
   22b32:	ab44      	add	r3, sp, #272	; 0x110
   22b34:	1b1b      	subs	r3, r3, r4
   22b36:	9f05      	ldr	r7, [sp, #20]
   22b38:	9e03      	ldr	r6, [sp, #12]
   22b3a:	9305      	str	r3, [sp, #20]
   22b3c:	ee18 ba90 	vmov	fp, s17
   22b40:	e437      	b.n	223b2 <_svfiprintf_r+0x26a>
   22b42:	ac44      	add	r4, sp, #272	; 0x110
   22b44:	e435      	b.n	223b2 <_svfiprintf_r+0x26a>
   22b46:	9908      	ldr	r1, [sp, #32]
   22b48:	f851 3b04 	ldr.w	r3, [r1], #4
   22b4c:	9108      	str	r1, [sp, #32]
   22b4e:	2101      	movs	r1, #1
   22b50:	e411      	b.n	22376 <_svfiprintf_r+0x22e>
   22b52:	9b08      	ldr	r3, [sp, #32]
   22b54:	9804      	ldr	r0, [sp, #16]
   22b56:	f853 1b04 	ldr.w	r1, [r3], #4
   22b5a:	9308      	str	r3, [sp, #32]
   22b5c:	17c2      	asrs	r2, r0, #31
   22b5e:	e9c1 0200 	strd	r0, r2, [r1]
   22b62:	f7ff bb16 	b.w	22192 <_svfiprintf_r+0x4a>
   22b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22b68:	2b00      	cmp	r3, #0
   22b6a:	f43f abbf 	beq.w	222ec <_svfiprintf_r+0x1a4>
   22b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22b70:	781b      	ldrb	r3, [r3, #0]
   22b72:	2b00      	cmp	r3, #0
   22b74:	f43f abba 	beq.w	222ec <_svfiprintf_r+0x1a4>
   22b78:	f898 1000 	ldrb.w	r1, [r8]
   22b7c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   22b80:	f7ff bb2f 	b.w	221e2 <_svfiprintf_r+0x9a>
   22b84:	4b81      	ldr	r3, [pc, #516]	; (22d8c <_svfiprintf_r+0xc44>)
   22b86:	930c      	str	r3, [sp, #48]	; 0x30
   22b88:	f016 0220 	ands.w	r2, r6, #32
   22b8c:	d021      	beq.n	22bd2 <_svfiprintf_r+0xa8a>
   22b8e:	9b08      	ldr	r3, [sp, #32]
   22b90:	3307      	adds	r3, #7
   22b92:	f023 0307 	bic.w	r3, r3, #7
   22b96:	4618      	mov	r0, r3
   22b98:	685a      	ldr	r2, [r3, #4]
   22b9a:	f850 3b08 	ldr.w	r3, [r0], #8
   22b9e:	9008      	str	r0, [sp, #32]
   22ba0:	07f0      	lsls	r0, r6, #31
   22ba2:	d509      	bpl.n	22bb8 <_svfiprintf_r+0xa70>
   22ba4:	ea53 0002 	orrs.w	r0, r3, r2
   22ba8:	d006      	beq.n	22bb8 <_svfiprintf_r+0xa70>
   22baa:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   22bae:	2130      	movs	r1, #48	; 0x30
   22bb0:	f046 0602 	orr.w	r6, r6, #2
   22bb4:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   22bb8:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   22bbc:	9103      	str	r1, [sp, #12]
   22bbe:	2102      	movs	r1, #2
   22bc0:	f7ff bbd9 	b.w	22376 <_svfiprintf_r+0x22e>
   22bc4:	9603      	str	r6, [sp, #12]
   22bc6:	e5af      	b.n	22728 <_svfiprintf_r+0x5e0>
   22bc8:	4b71      	ldr	r3, [pc, #452]	; (22d90 <_svfiprintf_r+0xc48>)
   22bca:	930c      	str	r3, [sp, #48]	; 0x30
   22bcc:	f016 0220 	ands.w	r2, r6, #32
   22bd0:	d1dd      	bne.n	22b8e <_svfiprintf_r+0xa46>
   22bd2:	f016 0310 	ands.w	r3, r6, #16
   22bd6:	9808      	ldr	r0, [sp, #32]
   22bd8:	d14b      	bne.n	22c72 <_svfiprintf_r+0xb2a>
   22bda:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   22bde:	d044      	beq.n	22c6a <_svfiprintf_r+0xb22>
   22be0:	461a      	mov	r2, r3
   22be2:	f850 3b04 	ldr.w	r3, [r0], #4
   22be6:	9008      	str	r0, [sp, #32]
   22be8:	b29b      	uxth	r3, r3
   22bea:	e7d9      	b.n	22ba0 <_svfiprintf_r+0xa58>
   22bec:	9b08      	ldr	r3, [sp, #32]
   22bee:	2101      	movs	r1, #1
   22bf0:	f853 2b04 	ldr.w	r2, [r3], #4
   22bf4:	9103      	str	r1, [sp, #12]
   22bf6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   22bfa:	9308      	str	r3, [sp, #32]
   22bfc:	9105      	str	r1, [sp, #20]
   22bfe:	ac2b      	add	r4, sp, #172	; 0xac
   22c00:	e515      	b.n	2262e <_svfiprintf_r+0x4e6>
   22c02:	1c7b      	adds	r3, r7, #1
   22c04:	f000 80f8 	beq.w	22df8 <_svfiprintf_r+0xcb0>
   22c08:	463a      	mov	r2, r7
   22c0a:	4629      	mov	r1, r5
   22c0c:	4620      	mov	r0, r4
   22c0e:	f7fa faf7 	bl	1d200 <memchr>
   22c12:	9007      	str	r0, [sp, #28]
   22c14:	2800      	cmp	r0, #0
   22c16:	f000 80e8 	beq.w	22dea <_svfiprintf_r+0xca2>
   22c1a:	1b03      	subs	r3, r0, r4
   22c1c:	9a03      	ldr	r2, [sp, #12]
   22c1e:	9305      	str	r3, [sp, #20]
   22c20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22c24:	462f      	mov	r7, r5
   22c26:	9208      	str	r2, [sp, #32]
   22c28:	9303      	str	r3, [sp, #12]
   22c2a:	9507      	str	r5, [sp, #28]
   22c2c:	f7ff bbc8 	b.w	223c0 <_svfiprintf_r+0x278>
   22c30:	2140      	movs	r1, #64	; 0x40
   22c32:	4658      	mov	r0, fp
   22c34:	f7f6 fe8a 	bl	1994c <_malloc_r>
   22c38:	6020      	str	r0, [r4, #0]
   22c3a:	6120      	str	r0, [r4, #16]
   22c3c:	2800      	cmp	r0, #0
   22c3e:	f000 80ff 	beq.w	22e40 <_svfiprintf_r+0xcf8>
   22c42:	2340      	movs	r3, #64	; 0x40
   22c44:	6163      	str	r3, [r4, #20]
   22c46:	f7ff ba98 	b.w	2217a <_svfiprintf_r+0x32>
   22c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22c4c:	990d      	ldr	r1, [sp, #52]	; 0x34
   22c4e:	1a9b      	subs	r3, r3, r2
   22c50:	4618      	mov	r0, r3
   22c52:	9307      	str	r3, [sp, #28]
   22c54:	f7f9 f8ac 	bl	1bdb0 <strncpy>
   22c58:	990b      	ldr	r1, [sp, #44]	; 0x2c
   22c5a:	9b07      	ldr	r3, [sp, #28]
   22c5c:	784a      	ldrb	r2, [r1, #1]
   22c5e:	b10a      	cbz	r2, 22c64 <_svfiprintf_r+0xb1c>
   22c60:	3101      	adds	r1, #1
   22c62:	910b      	str	r1, [sp, #44]	; 0x2c
   22c64:	f04f 0c00 	mov.w	ip, #0
   22c68:	e727      	b.n	22aba <_svfiprintf_r+0x972>
   22c6a:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   22c6e:	f040 809a 	bne.w	22da6 <_svfiprintf_r+0xc5e>
   22c72:	f850 3b04 	ldr.w	r3, [r0], #4
   22c76:	9008      	str	r0, [sp, #32]
   22c78:	e792      	b.n	22ba0 <_svfiprintf_r+0xa58>
   22c7a:	ee18 1a10 	vmov	r1, s16
   22c7e:	aa18      	add	r2, sp, #96	; 0x60
   22c80:	4658      	mov	r0, fp
   22c82:	f7ff f9e1 	bl	22048 <__ssprint_r>
   22c86:	2800      	cmp	r0, #0
   22c88:	f47f ae3f 	bne.w	2290a <_svfiprintf_r+0x7c2>
   22c8c:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22c90:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22c94:	e407      	b.n	224a6 <_svfiprintf_r+0x35e>
   22c96:	9603      	str	r6, [sp, #12]
   22c98:	f7ff bb4c 	b.w	22334 <_svfiprintf_r+0x1ec>
   22c9c:	2901      	cmp	r1, #1
   22c9e:	9603      	str	r6, [sp, #12]
   22ca0:	f47f aceb 	bne.w	2267a <_svfiprintf_r+0x532>
   22ca4:	f7ff bb4b 	b.w	2233e <_svfiprintf_r+0x1f6>
   22ca8:	ee18 1a10 	vmov	r1, s16
   22cac:	aa18      	add	r2, sp, #96	; 0x60
   22cae:	4658      	mov	r0, fp
   22cb0:	f7ff f9ca 	bl	22048 <__ssprint_r>
   22cb4:	2800      	cmp	r0, #0
   22cb6:	f47f ae28 	bne.w	2290a <_svfiprintf_r+0x7c2>
   22cba:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
   22cbe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   22cc2:	e419      	b.n	224f8 <_svfiprintf_r+0x3b0>
   22cc4:	9b08      	ldr	r3, [sp, #32]
   22cc6:	9904      	ldr	r1, [sp, #16]
   22cc8:	f853 2b04 	ldr.w	r2, [r3], #4
   22ccc:	6011      	str	r1, [r2, #0]
   22cce:	9308      	str	r3, [sp, #32]
   22cd0:	f7ff ba5f 	b.w	22192 <_svfiprintf_r+0x4a>
   22cd4:	2f06      	cmp	r7, #6
   22cd6:	463b      	mov	r3, r7
   22cd8:	9a03      	ldr	r2, [sp, #12]
   22cda:	4c2e      	ldr	r4, [pc, #184]	; (22d94 <_svfiprintf_r+0xc4c>)
   22cdc:	9208      	str	r2, [sp, #32]
   22cde:	bf28      	it	cs
   22ce0:	2306      	movcs	r3, #6
   22ce2:	9305      	str	r3, [sp, #20]
   22ce4:	9303      	str	r3, [sp, #12]
   22ce6:	f7ff bbc8 	b.w	2247a <_svfiprintf_r+0x332>
   22cea:	9b03      	ldr	r3, [sp, #12]
   22cec:	9908      	ldr	r1, [sp, #32]
   22cee:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   22cf2:	bf14      	ite	ne
   22cf4:	f851 3b04 	ldrne.w	r3, [r1], #4
   22cf8:	f851 3b04 	ldreq.w	r3, [r1], #4
   22cfc:	9108      	str	r1, [sp, #32]
   22cfe:	bf1c      	itt	ne
   22d00:	4602      	movne	r2, r0
   22d02:	b2db      	uxtbne	r3, r3
   22d04:	2101      	movs	r1, #1
   22d06:	f7ff bb36 	b.w	22376 <_svfiprintf_r+0x22e>
   22d0a:	ab16      	add	r3, sp, #88	; 0x58
   22d0c:	9300      	str	r3, [sp, #0]
   22d0e:	2300      	movs	r3, #0
   22d10:	4619      	mov	r1, r3
   22d12:	aa13      	add	r2, sp, #76	; 0x4c
   22d14:	4658      	mov	r0, fp
   22d16:	f7ff f957 	bl	21fc8 <_wcsrtombs_r>
   22d1a:	4603      	mov	r3, r0
   22d1c:	3301      	adds	r3, #1
   22d1e:	9005      	str	r0, [sp, #20]
   22d20:	d077      	beq.n	22e12 <_svfiprintf_r+0xcca>
   22d22:	9413      	str	r4, [sp, #76]	; 0x4c
   22d24:	9b05      	ldr	r3, [sp, #20]
   22d26:	b1fb      	cbz	r3, 22d68 <_svfiprintf_r+0xc20>
   22d28:	2b63      	cmp	r3, #99	; 0x63
   22d2a:	dc56      	bgt.n	22dda <_svfiprintf_r+0xc92>
   22d2c:	2300      	movs	r3, #0
   22d2e:	9307      	str	r3, [sp, #28]
   22d30:	ac2b      	add	r4, sp, #172	; 0xac
   22d32:	2208      	movs	r2, #8
   22d34:	2100      	movs	r1, #0
   22d36:	a816      	add	r0, sp, #88	; 0x58
   22d38:	f7f8 ff0e 	bl	1bb58 <memset>
   22d3c:	9d05      	ldr	r5, [sp, #20]
   22d3e:	ab16      	add	r3, sp, #88	; 0x58
   22d40:	9300      	str	r3, [sp, #0]
   22d42:	aa13      	add	r2, sp, #76	; 0x4c
   22d44:	462b      	mov	r3, r5
   22d46:	4621      	mov	r1, r4
   22d48:	4658      	mov	r0, fp
   22d4a:	f7ff f93d 	bl	21fc8 <_wcsrtombs_r>
   22d4e:	4285      	cmp	r5, r0
   22d50:	d17e      	bne.n	22e50 <_svfiprintf_r+0xd08>
   22d52:	9b03      	ldr	r3, [sp, #12]
   22d54:	9a05      	ldr	r2, [sp, #20]
   22d56:	9308      	str	r3, [sp, #32]
   22d58:	2300      	movs	r3, #0
   22d5a:	54a3      	strb	r3, [r4, r2]
   22d5c:	461f      	mov	r7, r3
   22d5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   22d62:	9303      	str	r3, [sp, #12]
   22d64:	f7ff bb2c 	b.w	223c0 <_svfiprintf_r+0x278>
   22d68:	9b03      	ldr	r3, [sp, #12]
   22d6a:	9308      	str	r3, [sp, #32]
   22d6c:	9b05      	ldr	r3, [sp, #20]
   22d6e:	9303      	str	r3, [sp, #12]
   22d70:	461f      	mov	r7, r3
   22d72:	9307      	str	r3, [sp, #28]
   22d74:	f7ff bb24 	b.w	223c0 <_svfiprintf_r+0x278>
   22d78:	f912 3b04 	ldrsb.w	r3, [r2], #4
   22d7c:	9208      	str	r2, [sp, #32]
   22d7e:	17da      	asrs	r2, r3, #31
   22d80:	4611      	mov	r1, r2
   22d82:	f7ff baca 	b.w	2231a <_svfiprintf_r+0x1d2>
   22d86:	bf00      	nop
   22d88:	cccccccd 	.word	0xcccccccd
   22d8c:	20008d04 	.word	0x20008d04
   22d90:	20008d18 	.word	0x20008d18
   22d94:	20008d2c 	.word	0x20008d2c
   22d98:	f851 3b04 	ldr.w	r3, [r1], #4
   22d9c:	9108      	str	r1, [sp, #32]
   22d9e:	4602      	mov	r2, r0
   22da0:	b2db      	uxtb	r3, r3
   22da2:	f7ff bae4 	b.w	2236e <_svfiprintf_r+0x226>
   22da6:	f850 3b04 	ldr.w	r3, [r0], #4
   22daa:	9008      	str	r0, [sp, #32]
   22dac:	4622      	mov	r2, r4
   22dae:	b2db      	uxtb	r3, r3
   22db0:	e6f6      	b.n	22ba0 <_svfiprintf_r+0xa58>
   22db2:	9b08      	ldr	r3, [sp, #32]
   22db4:	9904      	ldr	r1, [sp, #16]
   22db6:	f853 2b04 	ldr.w	r2, [r3], #4
   22dba:	9308      	str	r3, [sp, #32]
   22dbc:	8011      	strh	r1, [r2, #0]
   22dbe:	f7ff b9e8 	b.w	22192 <_svfiprintf_r+0x4a>
   22dc2:	ee18 4a10 	vmov	r4, s16
   22dc6:	ee18 1a10 	vmov	r1, s16
   22dca:	aa18      	add	r2, sp, #96	; 0x60
   22dcc:	4658      	mov	r0, fp
   22dce:	f7ff f93b 	bl	22048 <__ssprint_r>
   22dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22dd6:	f7ff bb2d 	b.w	22434 <_svfiprintf_r+0x2ec>
   22dda:	1c59      	adds	r1, r3, #1
   22ddc:	4658      	mov	r0, fp
   22dde:	f7f6 fdb5 	bl	1994c <_malloc_r>
   22de2:	4604      	mov	r4, r0
   22de4:	b1a8      	cbz	r0, 22e12 <_svfiprintf_r+0xcca>
   22de6:	9007      	str	r0, [sp, #28]
   22de8:	e7a3      	b.n	22d32 <_svfiprintf_r+0xbea>
   22dea:	9b03      	ldr	r3, [sp, #12]
   22dec:	9705      	str	r7, [sp, #20]
   22dee:	9703      	str	r7, [sp, #12]
   22df0:	9308      	str	r3, [sp, #32]
   22df2:	9f07      	ldr	r7, [sp, #28]
   22df4:	f7ff bae4 	b.w	223c0 <_svfiprintf_r+0x278>
   22df8:	9b03      	ldr	r3, [sp, #12]
   22dfa:	9308      	str	r3, [sp, #32]
   22dfc:	4620      	mov	r0, r4
   22dfe:	f7fa fa5f 	bl	1d2c0 <strlen>
   22e02:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   22e06:	462f      	mov	r7, r5
   22e08:	9005      	str	r0, [sp, #20]
   22e0a:	9303      	str	r3, [sp, #12]
   22e0c:	9507      	str	r5, [sp, #28]
   22e0e:	f7ff bad7 	b.w	223c0 <_svfiprintf_r+0x278>
   22e12:	ee18 2a10 	vmov	r2, s16
   22e16:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   22e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22e1e:	8193      	strh	r3, [r2, #12]
   22e20:	f7ff bb08 	b.w	22434 <_svfiprintf_r+0x2ec>
   22e24:	9c07      	ldr	r4, [sp, #28]
   22e26:	9705      	str	r7, [sp, #20]
   22e28:	e77c      	b.n	22d24 <_svfiprintf_r+0xbdc>
   22e2a:	9b08      	ldr	r3, [sp, #32]
   22e2c:	f898 1001 	ldrb.w	r1, [r8, #1]
   22e30:	f853 7b04 	ldr.w	r7, [r3], #4
   22e34:	9308      	str	r3, [sp, #32]
   22e36:	4690      	mov	r8, r2
   22e38:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   22e3c:	f7ff b9d1 	b.w	221e2 <_svfiprintf_r+0x9a>
   22e40:	230c      	movs	r3, #12
   22e42:	f8cb 3000 	str.w	r3, [fp]
   22e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22e4a:	9304      	str	r3, [sp, #16]
   22e4c:	f7ff baf9 	b.w	22442 <_svfiprintf_r+0x2fa>
   22e50:	ee18 2a10 	vmov	r2, s16
   22e54:	8993      	ldrh	r3, [r2, #12]
   22e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22e5a:	8193      	strh	r3, [r2, #12]
   22e5c:	e555      	b.n	2290a <_svfiprintf_r+0x7c2>
   22e5e:	bf00      	nop
   22e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   22e66:	049c      	lsls	r4, r3, #18
   22e68:	4690      	mov	r8, r2
   22e6a:	d52d      	bpl.n	22ec8 <_svfiprintf_r+0xd80>
   22e6c:	6893      	ldr	r3, [r2, #8]
   22e6e:	6812      	ldr	r2, [r2, #0]
   22e70:	b343      	cbz	r3, 22ec4 <_svfiprintf_r+0xd7c>
   22e72:	468b      	mov	fp, r1
   22e74:	4606      	mov	r6, r0
   22e76:	f102 0908 	add.w	r9, r2, #8
   22e7a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   22e7e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   22e82:	d015      	beq.n	22eb0 <_svfiprintf_r+0xd68>
   22e84:	3d04      	subs	r5, #4
   22e86:	2400      	movs	r4, #0
   22e88:	e001      	b.n	22e8e <_svfiprintf_r+0xd46>
   22e8a:	42a7      	cmp	r7, r4
   22e8c:	d00e      	beq.n	22eac <_svfiprintf_r+0xd64>
   22e8e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   22e92:	465a      	mov	r2, fp
   22e94:	4630      	mov	r0, r6
   22e96:	f001 fa75 	bl	24384 <_fputwc_r>
   22e9a:	1c43      	adds	r3, r0, #1
   22e9c:	f104 0401 	add.w	r4, r4, #1
   22ea0:	d1f3      	bne.n	22e8a <_svfiprintf_r+0xd42>
   22ea2:	2300      	movs	r3, #0
   22ea4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   22ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22eac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22eb0:	f02a 0a03 	bic.w	sl, sl, #3
   22eb4:	eba3 030a 	sub.w	r3, r3, sl
   22eb8:	f8c8 3008 	str.w	r3, [r8, #8]
   22ebc:	f109 0908 	add.w	r9, r9, #8
   22ec0:	2b00      	cmp	r3, #0
   22ec2:	d1da      	bne.n	22e7a <_svfiprintf_r+0xd32>
   22ec4:	2000      	movs	r0, #0
   22ec6:	e7ec      	b.n	22ea2 <_svfiprintf_r+0xd5a>
   22ec8:	f001 f826 	bl	23f18 <__sfvwrite_r>
   22ecc:	2300      	movs	r3, #0
   22ece:	e9c8 3301 	strd	r3, r3, [r8, #4]
   22ed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ed6:	bf00      	nop

00022ed8 <__sprint_r>:
   22ed8:	b410      	push	{r4}
   22eda:	6894      	ldr	r4, [r2, #8]
   22edc:	b114      	cbz	r4, 22ee4 <__sprint_r+0xc>
   22ede:	f85d 4b04 	ldr.w	r4, [sp], #4
   22ee2:	e7bd      	b.n	22e60 <_svfiprintf_r+0xd18>
   22ee4:	4620      	mov	r0, r4
   22ee6:	6054      	str	r4, [r2, #4]
   22ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
   22eec:	4770      	bx	lr
   22eee:	bf00      	nop

00022ef0 <_vfiprintf_r>:
   22ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ef4:	ed2d 8b02 	vpush	{d8}
   22ef8:	b0c5      	sub	sp, #276	; 0x114
   22efa:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   22efe:	4683      	mov	fp, r0
   22f00:	ee08 1a10 	vmov	s16, r1
   22f04:	4616      	mov	r6, r2
   22f06:	2100      	movs	r1, #0
   22f08:	2208      	movs	r2, #8
   22f0a:	4650      	mov	r0, sl
   22f0c:	461c      	mov	r4, r3
   22f0e:	9307      	str	r3, [sp, #28]
   22f10:	f7f8 fe22 	bl	1bb58 <memset>
   22f14:	f1bb 0f00 	cmp.w	fp, #0
   22f18:	d004      	beq.n	22f24 <_vfiprintf_r+0x34>
   22f1a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   22f1e:	2b00      	cmp	r3, #0
   22f20:	f000 86a0 	beq.w	23c64 <_vfiprintf_r+0xd74>
   22f24:	ee18 2a10 	vmov	r2, s16
   22f28:	6e53      	ldr	r3, [r2, #100]	; 0x64
   22f2a:	07db      	lsls	r3, r3, #31
   22f2c:	f140 8513 	bpl.w	23956 <_vfiprintf_r+0xa66>
   22f30:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   22f34:	b28a      	uxth	r2, r1
   22f36:	0495      	lsls	r5, r2, #18
   22f38:	d40b      	bmi.n	22f52 <_vfiprintf_r+0x62>
   22f3a:	ee18 3a10 	vmov	r3, s16
   22f3e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   22f42:	8199      	strh	r1, [r3, #12]
   22f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   22f46:	b28a      	uxth	r2, r1
   22f48:	ee18 1a10 	vmov	r1, s16
   22f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   22f50:	664b      	str	r3, [r1, #100]	; 0x64
   22f52:	0710      	lsls	r0, r2, #28
   22f54:	f140 8105 	bpl.w	23162 <_vfiprintf_r+0x272>
   22f58:	ee18 3a10 	vmov	r3, s16
   22f5c:	691b      	ldr	r3, [r3, #16]
   22f5e:	2b00      	cmp	r3, #0
   22f60:	f000 80ff 	beq.w	23162 <_vfiprintf_r+0x272>
   22f64:	f002 031a 	and.w	r3, r2, #26
   22f68:	2b0a      	cmp	r3, #10
   22f6a:	f000 810a 	beq.w	23182 <_vfiprintf_r+0x292>
   22f6e:	2300      	movs	r3, #0
   22f70:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   22f74:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   22f78:	aa1b      	add	r2, sp, #108	; 0x6c
   22f7a:	930c      	str	r3, [sp, #48]	; 0x30
   22f7c:	9218      	str	r2, [sp, #96]	; 0x60
   22f7e:	4691      	mov	r9, r2
   22f80:	930b      	str	r3, [sp, #44]	; 0x2c
   22f82:	9305      	str	r3, [sp, #20]
   22f84:	46b0      	mov	r8, r6
   22f86:	4644      	mov	r4, r8
   22f88:	4ba8      	ldr	r3, [pc, #672]	; (2322c <_vfiprintf_r+0x33c>)
   22f8a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   22f8e:	f7f9 fea1 	bl	1ccd4 <__locale_mb_cur_max>
   22f92:	4622      	mov	r2, r4
   22f94:	4603      	mov	r3, r0
   22f96:	a912      	add	r1, sp, #72	; 0x48
   22f98:	f8cd a000 	str.w	sl, [sp]
   22f9c:	4658      	mov	r0, fp
   22f9e:	47a8      	blx	r5
   22fa0:	2800      	cmp	r0, #0
   22fa2:	f000 8145 	beq.w	23230 <_vfiprintf_r+0x340>
   22fa6:	f2c0 8139 	blt.w	2321c <_vfiprintf_r+0x32c>
   22faa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22fac:	2a25      	cmp	r2, #37	; 0x25
   22fae:	4603      	mov	r3, r0
   22fb0:	d001      	beq.n	22fb6 <_vfiprintf_r+0xc6>
   22fb2:	441c      	add	r4, r3
   22fb4:	e7e8      	b.n	22f88 <_vfiprintf_r+0x98>
   22fb6:	ebb4 0608 	subs.w	r6, r4, r8
   22fba:	4605      	mov	r5, r0
   22fbc:	f040 813c 	bne.w	23238 <_vfiprintf_r+0x348>
   22fc0:	2300      	movs	r3, #0
   22fc2:	7861      	ldrb	r1, [r4, #1]
   22fc4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   22fc8:	f104 0801 	add.w	r8, r4, #1
   22fcc:	9306      	str	r3, [sp, #24]
   22fce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22fd2:	461e      	mov	r6, r3
   22fd4:	242b      	movs	r4, #43	; 0x2b
   22fd6:	f108 0801 	add.w	r8, r8, #1
   22fda:	f1a1 0320 	sub.w	r3, r1, #32
   22fde:	2b5a      	cmp	r3, #90	; 0x5a
   22fe0:	f200 8178 	bhi.w	232d4 <_vfiprintf_r+0x3e4>
   22fe4:	e8df f013 	tbh	[pc, r3, lsl #1]
   22fe8:	017602b5 	.word	0x017602b5
   22fec:	02b00176 	.word	0x02b00176
   22ff0:	01760176 	.word	0x01760176
   22ff4:	006a0176 	.word	0x006a0176
   22ff8:	01760176 	.word	0x01760176
   22ffc:	028d027d 	.word	0x028d027d
   23000:	02880176 	.word	0x02880176
   23004:	01760297 	.word	0x01760297
   23008:	005b0292 	.word	0x005b0292
   2300c:	005b005b 	.word	0x005b005b
   23010:	005b005b 	.word	0x005b005b
   23014:	005b005b 	.word	0x005b005b
   23018:	005b005b 	.word	0x005b005b
   2301c:	01760176 	.word	0x01760176
   23020:	01760176 	.word	0x01760176
   23024:	01760176 	.word	0x01760176
   23028:	01760176 	.word	0x01760176
   2302c:	025c0176 	.word	0x025c0176
   23030:	01760084 	.word	0x01760084
   23034:	01760176 	.word	0x01760176
   23038:	01760176 	.word	0x01760176
   2303c:	01760176 	.word	0x01760176
   23040:	01760176 	.word	0x01760176
   23044:	00e80176 	.word	0x00e80176
   23048:	01760176 	.word	0x01760176
   2304c:	02330176 	.word	0x02330176
   23050:	02da0176 	.word	0x02da0176
   23054:	01760176 	.word	0x01760176
   23058:	0176058b 	.word	0x0176058b
   2305c:	01760176 	.word	0x01760176
   23060:	01760176 	.word	0x01760176
   23064:	01760176 	.word	0x01760176
   23068:	01760176 	.word	0x01760176
   2306c:	025c0176 	.word	0x025c0176
   23070:	01760086 	.word	0x01760086
   23074:	01760176 	.word	0x01760176
   23078:	008602cd 	.word	0x008602cd
   2307c:	0176007f 	.word	0x0176007f
   23080:	017602c0 	.word	0x017602c0
   23084:	00ea02fd 	.word	0x00ea02fd
   23088:	007f02ed 	.word	0x007f02ed
   2308c:	02330176 	.word	0x02330176
   23090:	0569007c 	.word	0x0569007c
   23094:	01760176 	.word	0x01760176
   23098:	0176056b 	.word	0x0176056b
   2309c:	007c      	.short	0x007c
   2309e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   230a2:	2200      	movs	r2, #0
   230a4:	f818 1b01 	ldrb.w	r1, [r8], #1
   230a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   230ac:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   230b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   230b4:	2b09      	cmp	r3, #9
   230b6:	d9f5      	bls.n	230a4 <_vfiprintf_r+0x1b4>
   230b8:	9206      	str	r2, [sp, #24]
   230ba:	e78e      	b.n	22fda <_vfiprintf_r+0xea>
   230bc:	4658      	mov	r0, fp
   230be:	f7fd ffad 	bl	2101c <_localeconv_r>
   230c2:	6843      	ldr	r3, [r0, #4]
   230c4:	930d      	str	r3, [sp, #52]	; 0x34
   230c6:	4618      	mov	r0, r3
   230c8:	f7fa f8fa 	bl	1d2c0 <strlen>
   230cc:	900e      	str	r0, [sp, #56]	; 0x38
   230ce:	4605      	mov	r5, r0
   230d0:	4658      	mov	r0, fp
   230d2:	f7fd ffa3 	bl	2101c <_localeconv_r>
   230d6:	6883      	ldr	r3, [r0, #8]
   230d8:	930b      	str	r3, [sp, #44]	; 0x2c
   230da:	2d00      	cmp	r5, #0
   230dc:	f040 84d6 	bne.w	23a8c <_vfiprintf_r+0xb9c>
   230e0:	f898 1000 	ldrb.w	r1, [r8]
   230e4:	e777      	b.n	22fd6 <_vfiprintf_r+0xe6>
   230e6:	f898 1000 	ldrb.w	r1, [r8]
   230ea:	f046 0620 	orr.w	r6, r6, #32
   230ee:	e772      	b.n	22fd6 <_vfiprintf_r+0xe6>
   230f0:	f046 0610 	orr.w	r6, r6, #16
   230f4:	06b4      	lsls	r4, r6, #26
   230f6:	f140 818e 	bpl.w	23416 <_vfiprintf_r+0x526>
   230fa:	9b07      	ldr	r3, [sp, #28]
   230fc:	3307      	adds	r3, #7
   230fe:	f023 0307 	bic.w	r3, r3, #7
   23102:	461a      	mov	r2, r3
   23104:	6859      	ldr	r1, [r3, #4]
   23106:	f852 3b08 	ldr.w	r3, [r2], #8
   2310a:	9207      	str	r2, [sp, #28]
   2310c:	460a      	mov	r2, r1
   2310e:	2900      	cmp	r1, #0
   23110:	f2c0 8470 	blt.w	239f4 <_vfiprintf_r+0xb04>
   23114:	1c79      	adds	r1, r7, #1
   23116:	f000 85a2 	beq.w	23c5e <_vfiprintf_r+0xd6e>
   2311a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   2311e:	9103      	str	r1, [sp, #12]
   23120:	ea53 0102 	orrs.w	r1, r3, r2
   23124:	f000 843f 	beq.w	239a6 <_vfiprintf_r+0xab6>
   23128:	2b0a      	cmp	r3, #10
   2312a:	f172 0100 	sbcs.w	r1, r2, #0
   2312e:	f080 8541 	bcs.w	23bb4 <_vfiprintf_r+0xcc4>
   23132:	3330      	adds	r3, #48	; 0x30
   23134:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   23138:	9e03      	ldr	r6, [sp, #12]
   2313a:	2301      	movs	r3, #1
   2313c:	9304      	str	r3, [sp, #16]
   2313e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   23142:	9b04      	ldr	r3, [sp, #16]
   23144:	42bb      	cmp	r3, r7
   23146:	bfb8      	it	lt
   23148:	463b      	movlt	r3, r7
   2314a:	9303      	str	r3, [sp, #12]
   2314c:	2300      	movs	r3, #0
   2314e:	9308      	str	r3, [sp, #32]
   23150:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   23154:	2b00      	cmp	r3, #0
   23156:	f000 80cb 	beq.w	232f0 <_vfiprintf_r+0x400>
   2315a:	9b03      	ldr	r3, [sp, #12]
   2315c:	3301      	adds	r3, #1
   2315e:	9303      	str	r3, [sp, #12]
   23160:	e0c6      	b.n	232f0 <_vfiprintf_r+0x400>
   23162:	ee18 1a10 	vmov	r1, s16
   23166:	4658      	mov	r0, fp
   23168:	ee18 5a10 	vmov	r5, s16
   2316c:	f001 f84e 	bl	2420c <__swsetup_r>
   23170:	2800      	cmp	r0, #0
   23172:	f040 8652 	bne.w	23e1a <_vfiprintf_r+0xf2a>
   23176:	89aa      	ldrh	r2, [r5, #12]
   23178:	f002 031a 	and.w	r3, r2, #26
   2317c:	2b0a      	cmp	r3, #10
   2317e:	f47f aef6 	bne.w	22f6e <_vfiprintf_r+0x7e>
   23182:	ee18 1a10 	vmov	r1, s16
   23186:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   2318a:	2b00      	cmp	r3, #0
   2318c:	f6ff aeef 	blt.w	22f6e <_vfiprintf_r+0x7e>
   23190:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   23192:	07db      	lsls	r3, r3, #31
   23194:	d402      	bmi.n	2319c <_vfiprintf_r+0x2ac>
   23196:	0597      	lsls	r7, r2, #22
   23198:	f140 8612 	bpl.w	23dc0 <_vfiprintf_r+0xed0>
   2319c:	ee18 1a10 	vmov	r1, s16
   231a0:	4623      	mov	r3, r4
   231a2:	4632      	mov	r2, r6
   231a4:	4658      	mov	r0, fp
   231a6:	f000 fe77 	bl	23e98 <vfiprintf+0x1c>
   231aa:	9005      	str	r0, [sp, #20]
   231ac:	9805      	ldr	r0, [sp, #20]
   231ae:	b045      	add	sp, #276	; 0x114
   231b0:	ecbd 8b02 	vpop	{d8}
   231b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231b8:	f046 0610 	orr.w	r6, r6, #16
   231bc:	f016 0220 	ands.w	r2, r6, #32
   231c0:	f000 8136 	beq.w	23430 <_vfiprintf_r+0x540>
   231c4:	9b07      	ldr	r3, [sp, #28]
   231c6:	3307      	adds	r3, #7
   231c8:	f023 0307 	bic.w	r3, r3, #7
   231cc:	4619      	mov	r1, r3
   231ce:	685a      	ldr	r2, [r3, #4]
   231d0:	f851 3b08 	ldr.w	r3, [r1], #8
   231d4:	9107      	str	r1, [sp, #28]
   231d6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   231da:	9103      	str	r1, [sp, #12]
   231dc:	2100      	movs	r1, #0
   231de:	2000      	movs	r0, #0
   231e0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   231e4:	1c78      	adds	r0, r7, #1
   231e6:	f000 8210 	beq.w	2360a <_vfiprintf_r+0x71a>
   231ea:	9803      	ldr	r0, [sp, #12]
   231ec:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   231f0:	ea53 0002 	orrs.w	r0, r3, r2
   231f4:	f040 8208 	bne.w	23608 <_vfiprintf_r+0x718>
   231f8:	2f00      	cmp	r7, #0
   231fa:	f040 8538 	bne.w	23c6e <_vfiprintf_r+0xd7e>
   231fe:	2900      	cmp	r1, #0
   23200:	f040 83d5 	bne.w	239ae <_vfiprintf_r+0xabe>
   23204:	9b03      	ldr	r3, [sp, #12]
   23206:	f013 0301 	ands.w	r3, r3, #1
   2320a:	9304      	str	r3, [sp, #16]
   2320c:	f000 8411 	beq.w	23a32 <_vfiprintf_r+0xb42>
   23210:	2330      	movs	r3, #48	; 0x30
   23212:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   23216:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   2321a:	e792      	b.n	23142 <_vfiprintf_r+0x252>
   2321c:	2208      	movs	r2, #8
   2321e:	2100      	movs	r1, #0
   23220:	4650      	mov	r0, sl
   23222:	f7f8 fc99 	bl	1bb58 <memset>
   23226:	2301      	movs	r3, #1
   23228:	441c      	add	r4, r3
   2322a:	e6ad      	b.n	22f88 <_vfiprintf_r+0x98>
   2322c:	200093a0 	.word	0x200093a0
   23230:	ebb4 0608 	subs.w	r6, r4, r8
   23234:	4605      	mov	r5, r0
   23236:	d01b      	beq.n	23270 <_vfiprintf_r+0x380>
   23238:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2323a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2323c:	3301      	adds	r3, #1
   2323e:	4432      	add	r2, r6
   23240:	2b07      	cmp	r3, #7
   23242:	e9c9 8600 	strd	r8, r6, [r9]
   23246:	921a      	str	r2, [sp, #104]	; 0x68
   23248:	9319      	str	r3, [sp, #100]	; 0x64
   2324a:	dd1c      	ble.n	23286 <_vfiprintf_r+0x396>
   2324c:	2a00      	cmp	r2, #0
   2324e:	f000 83a6 	beq.w	2399e <_vfiprintf_r+0xaae>
   23252:	ee18 1a10 	vmov	r1, s16
   23256:	aa18      	add	r2, sp, #96	; 0x60
   23258:	4658      	mov	r0, fp
   2325a:	f7ff fe01 	bl	22e60 <_svfiprintf_r+0xd18>
   2325e:	bb20      	cbnz	r0, 232aa <_vfiprintf_r+0x3ba>
   23260:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23264:	9b05      	ldr	r3, [sp, #20]
   23266:	4433      	add	r3, r6
   23268:	9305      	str	r3, [sp, #20]
   2326a:	2d00      	cmp	r5, #0
   2326c:	f47f aea8 	bne.w	22fc0 <_vfiprintf_r+0xd0>
   23270:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23272:	2b00      	cmp	r3, #0
   23274:	f040 85c1 	bne.w	23dfa <_vfiprintf_r+0xf0a>
   23278:	ee18 3a10 	vmov	r3, s16
   2327c:	2200      	movs	r2, #0
   2327e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   23282:	9219      	str	r2, [sp, #100]	; 0x64
   23284:	e015      	b.n	232b2 <_vfiprintf_r+0x3c2>
   23286:	f109 0908 	add.w	r9, r9, #8
   2328a:	e7eb      	b.n	23264 <_vfiprintf_r+0x374>
   2328c:	ee18 1a10 	vmov	r1, s16
   23290:	aa18      	add	r2, sp, #96	; 0x60
   23292:	4658      	mov	r0, fp
   23294:	f7ff fde4 	bl	22e60 <_svfiprintf_r+0xd18>
   23298:	2800      	cmp	r0, #0
   2329a:	f000 80a6 	beq.w	233ea <_vfiprintf_r+0x4fa>
   2329e:	9b08      	ldr	r3, [sp, #32]
   232a0:	b11b      	cbz	r3, 232aa <_vfiprintf_r+0x3ba>
   232a2:	9908      	ldr	r1, [sp, #32]
   232a4:	4658      	mov	r0, fp
   232a6:	f7fa f91d 	bl	1d4e4 <_free_r>
   232aa:	ee18 3a10 	vmov	r3, s16
   232ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   232b2:	ee18 2a10 	vmov	r2, s16
   232b6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   232b8:	f012 0f01 	tst.w	r2, #1
   232bc:	b29a      	uxth	r2, r3
   232be:	f000 80a0 	beq.w	23402 <_vfiprintf_r+0x512>
   232c2:	0650      	lsls	r0, r2, #25
   232c4:	f100 85b2 	bmi.w	23e2c <_vfiprintf_r+0xf3c>
   232c8:	9805      	ldr	r0, [sp, #20]
   232ca:	b045      	add	sp, #276	; 0x114
   232cc:	ecbd 8b02 	vpop	{d8}
   232d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   232d4:	2900      	cmp	r1, #0
   232d6:	d0cb      	beq.n	23270 <_vfiprintf_r+0x380>
   232d8:	2300      	movs	r3, #0
   232da:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   232de:	2301      	movs	r3, #1
   232e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   232e4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   232e8:	ac2b      	add	r4, sp, #172	; 0xac
   232ea:	2300      	movs	r3, #0
   232ec:	9308      	str	r3, [sp, #32]
   232ee:	461f      	mov	r7, r3
   232f0:	f016 0302 	ands.w	r3, r6, #2
   232f4:	9309      	str	r3, [sp, #36]	; 0x24
   232f6:	d002      	beq.n	232fe <_vfiprintf_r+0x40e>
   232f8:	9b03      	ldr	r3, [sp, #12]
   232fa:	3302      	adds	r3, #2
   232fc:	9303      	str	r3, [sp, #12]
   232fe:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   23302:	930a      	str	r3, [sp, #40]	; 0x28
   23304:	d105      	bne.n	23312 <_vfiprintf_r+0x422>
   23306:	9b06      	ldr	r3, [sp, #24]
   23308:	9a03      	ldr	r2, [sp, #12]
   2330a:	1a9d      	subs	r5, r3, r2
   2330c:	2d00      	cmp	r5, #0
   2330e:	f300 827b 	bgt.w	23808 <_vfiprintf_r+0x918>
   23312:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   23316:	1c41      	adds	r1, r0, #1
   23318:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   2331c:	b182      	cbz	r2, 23340 <_vfiprintf_r+0x450>
   2331e:	2201      	movs	r2, #1
   23320:	3301      	adds	r3, #1
   23322:	f8c9 2004 	str.w	r2, [r9, #4]
   23326:	2907      	cmp	r1, #7
   23328:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   2332c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   23330:	f8c9 2000 	str.w	r2, [r9]
   23334:	f300 824a 	bgt.w	237cc <_vfiprintf_r+0x8dc>
   23338:	4608      	mov	r0, r1
   2333a:	f109 0908 	add.w	r9, r9, #8
   2333e:	3101      	adds	r1, #1
   23340:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23342:	b1e2      	cbz	r2, 2337e <_vfiprintf_r+0x48e>
   23344:	aa11      	add	r2, sp, #68	; 0x44
   23346:	3302      	adds	r3, #2
   23348:	f8c9 2000 	str.w	r2, [r9]
   2334c:	2907      	cmp	r1, #7
   2334e:	f04f 0202 	mov.w	r2, #2
   23352:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   23356:	f8c9 2004 	str.w	r2, [r9, #4]
   2335a:	f340 8250 	ble.w	237fe <_vfiprintf_r+0x90e>
   2335e:	2b00      	cmp	r3, #0
   23360:	f000 8343 	beq.w	239ea <_vfiprintf_r+0xafa>
   23364:	ee18 1a10 	vmov	r1, s16
   23368:	aa18      	add	r2, sp, #96	; 0x60
   2336a:	4658      	mov	r0, fp
   2336c:	f7ff fd78 	bl	22e60 <_svfiprintf_r+0xd18>
   23370:	2800      	cmp	r0, #0
   23372:	d194      	bne.n	2329e <_vfiprintf_r+0x3ae>
   23374:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   23378:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2337c:	1c41      	adds	r1, r0, #1
   2337e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23380:	2a80      	cmp	r2, #128	; 0x80
   23382:	f000 8184 	beq.w	2368e <_vfiprintf_r+0x79e>
   23386:	9a04      	ldr	r2, [sp, #16]
   23388:	1abd      	subs	r5, r7, r2
   2338a:	2d00      	cmp	r5, #0
   2338c:	f300 81d7 	bgt.w	2373e <_vfiprintf_r+0x84e>
   23390:	9a04      	ldr	r2, [sp, #16]
   23392:	f8c9 4000 	str.w	r4, [r9]
   23396:	4413      	add	r3, r2
   23398:	2907      	cmp	r1, #7
   2339a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   2339e:	f8c9 2004 	str.w	r2, [r9, #4]
   233a2:	f340 816e 	ble.w	23682 <_vfiprintf_r+0x792>
   233a6:	2b00      	cmp	r3, #0
   233a8:	f000 8275 	beq.w	23896 <_vfiprintf_r+0x9a6>
   233ac:	ee18 1a10 	vmov	r1, s16
   233b0:	aa18      	add	r2, sp, #96	; 0x60
   233b2:	4658      	mov	r0, fp
   233b4:	f7ff fd54 	bl	22e60 <_svfiprintf_r+0xd18>
   233b8:	2800      	cmp	r0, #0
   233ba:	f47f af70 	bne.w	2329e <_vfiprintf_r+0x3ae>
   233be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   233c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   233c4:	0775      	lsls	r5, r6, #29
   233c6:	d505      	bpl.n	233d4 <_vfiprintf_r+0x4e4>
   233c8:	9a06      	ldr	r2, [sp, #24]
   233ca:	9903      	ldr	r1, [sp, #12]
   233cc:	1a54      	subs	r4, r2, r1
   233ce:	2c00      	cmp	r4, #0
   233d0:	f300 826b 	bgt.w	238aa <_vfiprintf_r+0x9ba>
   233d4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   233d8:	9803      	ldr	r0, [sp, #12]
   233da:	4281      	cmp	r1, r0
   233dc:	bfac      	ite	ge
   233de:	1852      	addge	r2, r2, r1
   233e0:	1812      	addlt	r2, r2, r0
   233e2:	9205      	str	r2, [sp, #20]
   233e4:	2b00      	cmp	r3, #0
   233e6:	f47f af51 	bne.w	2328c <_vfiprintf_r+0x39c>
   233ea:	9908      	ldr	r1, [sp, #32]
   233ec:	2300      	movs	r3, #0
   233ee:	9319      	str	r3, [sp, #100]	; 0x64
   233f0:	2900      	cmp	r1, #0
   233f2:	f000 8149 	beq.w	23688 <_vfiprintf_r+0x798>
   233f6:	4658      	mov	r0, fp
   233f8:	f7fa f874 	bl	1d4e4 <_free_r>
   233fc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23400:	e5c1      	b.n	22f86 <_vfiprintf_r+0x96>
   23402:	059c      	lsls	r4, r3, #22
   23404:	f53f af5d 	bmi.w	232c2 <_vfiprintf_r+0x3d2>
   23408:	ee18 4a10 	vmov	r4, s16
   2340c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2340e:	f7f9 fd21 	bl	1ce54 <__retarget_lock_release_recursive>
   23412:	89a2      	ldrh	r2, [r4, #12]
   23414:	e755      	b.n	232c2 <_vfiprintf_r+0x3d2>
   23416:	06f0      	lsls	r0, r6, #27
   23418:	9a07      	ldr	r2, [sp, #28]
   2341a:	f100 831f 	bmi.w	23a5c <_vfiprintf_r+0xb6c>
   2341e:	0671      	lsls	r1, r6, #25
   23420:	f140 8319 	bpl.w	23a56 <_vfiprintf_r+0xb66>
   23424:	f932 3b04 	ldrsh.w	r3, [r2], #4
   23428:	9207      	str	r2, [sp, #28]
   2342a:	17da      	asrs	r2, r3, #31
   2342c:	4611      	mov	r1, r2
   2342e:	e66e      	b.n	2310e <_vfiprintf_r+0x21e>
   23430:	f016 0310 	ands.w	r3, r6, #16
   23434:	9907      	ldr	r1, [sp, #28]
   23436:	f040 8309 	bne.w	23a4c <_vfiprintf_r+0xb5c>
   2343a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   2343e:	f000 8301 	beq.w	23a44 <_vfiprintf_r+0xb54>
   23442:	461a      	mov	r2, r3
   23444:	f851 3b04 	ldr.w	r3, [r1], #4
   23448:	9107      	str	r1, [sp, #28]
   2344a:	b29b      	uxth	r3, r3
   2344c:	e6c3      	b.n	231d6 <_vfiprintf_r+0x2e6>
   2344e:	9b07      	ldr	r3, [sp, #28]
   23450:	461a      	mov	r2, r3
   23452:	2300      	movs	r3, #0
   23454:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   23458:	4613      	mov	r3, r2
   2345a:	f853 4b04 	ldr.w	r4, [r3], #4
   2345e:	9303      	str	r3, [sp, #12]
   23460:	2c00      	cmp	r4, #0
   23462:	f000 8412 	beq.w	23c8a <_vfiprintf_r+0xd9a>
   23466:	2953      	cmp	r1, #83	; 0x53
   23468:	f000 8365 	beq.w	23b36 <_vfiprintf_r+0xc46>
   2346c:	f016 0510 	ands.w	r5, r6, #16
   23470:	f040 8361 	bne.w	23b36 <_vfiprintf_r+0xc46>
   23474:	1c7b      	adds	r3, r7, #1
   23476:	f000 84b3 	beq.w	23de0 <_vfiprintf_r+0xef0>
   2347a:	463a      	mov	r2, r7
   2347c:	4629      	mov	r1, r5
   2347e:	4620      	mov	r0, r4
   23480:	f7f9 febe 	bl	1d200 <memchr>
   23484:	9008      	str	r0, [sp, #32]
   23486:	2800      	cmp	r0, #0
   23488:	f000 849f 	beq.w	23dca <_vfiprintf_r+0xeda>
   2348c:	1b03      	subs	r3, r0, r4
   2348e:	9a03      	ldr	r2, [sp, #12]
   23490:	9304      	str	r3, [sp, #16]
   23492:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23496:	462f      	mov	r7, r5
   23498:	9207      	str	r2, [sp, #28]
   2349a:	9303      	str	r3, [sp, #12]
   2349c:	9508      	str	r5, [sp, #32]
   2349e:	e657      	b.n	23150 <_vfiprintf_r+0x260>
   234a0:	2943      	cmp	r1, #67	; 0x43
   234a2:	d002      	beq.n	234aa <_vfiprintf_r+0x5ba>
   234a4:	06f5      	lsls	r5, r6, #27
   234a6:	f140 832d 	bpl.w	23b04 <_vfiprintf_r+0xc14>
   234aa:	9d07      	ldr	r5, [sp, #28]
   234ac:	2208      	movs	r2, #8
   234ae:	2100      	movs	r1, #0
   234b0:	a816      	add	r0, sp, #88	; 0x58
   234b2:	ac2b      	add	r4, sp, #172	; 0xac
   234b4:	f7f8 fb50 	bl	1bb58 <memset>
   234b8:	ab16      	add	r3, sp, #88	; 0x58
   234ba:	f855 2b04 	ldr.w	r2, [r5], #4
   234be:	4621      	mov	r1, r4
   234c0:	4658      	mov	r0, fp
   234c2:	f7fe fd2f 	bl	21f24 <_wcrtomb_r>
   234c6:	4603      	mov	r3, r0
   234c8:	3301      	adds	r3, #1
   234ca:	9004      	str	r0, [sp, #16]
   234cc:	f000 84b3 	beq.w	23e36 <_vfiprintf_r+0xf46>
   234d0:	9b04      	ldr	r3, [sp, #16]
   234d2:	9507      	str	r5, [sp, #28]
   234d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   234d8:	9303      	str	r3, [sp, #12]
   234da:	2300      	movs	r3, #0
   234dc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   234e0:	e703      	b.n	232ea <_vfiprintf_r+0x3fa>
   234e2:	9b07      	ldr	r3, [sp, #28]
   234e4:	f853 2b04 	ldr.w	r2, [r3], #4
   234e8:	9206      	str	r2, [sp, #24]
   234ea:	2a00      	cmp	r2, #0
   234ec:	f280 829c 	bge.w	23a28 <_vfiprintf_r+0xb38>
   234f0:	9a06      	ldr	r2, [sp, #24]
   234f2:	4252      	negs	r2, r2
   234f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   234f8:	f898 1000 	ldrb.w	r1, [r8]
   234fc:	f046 0604 	orr.w	r6, r6, #4
   23500:	e569      	b.n	22fd6 <_vfiprintf_r+0xe6>
   23502:	f898 1000 	ldrb.w	r1, [r8]
   23506:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   2350a:	e564      	b.n	22fd6 <_vfiprintf_r+0xe6>
   2350c:	f898 1000 	ldrb.w	r1, [r8]
   23510:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   23514:	e55f      	b.n	22fd6 <_vfiprintf_r+0xe6>
   23516:	4642      	mov	r2, r8
   23518:	f812 1b01 	ldrb.w	r1, [r2], #1
   2351c:	292a      	cmp	r1, #42	; 0x2a
   2351e:	f000 8496 	beq.w	23e4e <_vfiprintf_r+0xf5e>
   23522:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   23526:	2b09      	cmp	r3, #9
   23528:	4690      	mov	r8, r2
   2352a:	f04f 0700 	mov.w	r7, #0
   2352e:	f63f ad54 	bhi.w	22fda <_vfiprintf_r+0xea>
   23532:	f818 1b01 	ldrb.w	r1, [r8], #1
   23536:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   2353a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   2353e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   23542:	2b09      	cmp	r3, #9
   23544:	d9f5      	bls.n	23532 <_vfiprintf_r+0x642>
   23546:	e548      	b.n	22fda <_vfiprintf_r+0xea>
   23548:	f898 1000 	ldrb.w	r1, [r8]
   2354c:	f046 0601 	orr.w	r6, r6, #1
   23550:	e541      	b.n	22fd6 <_vfiprintf_r+0xe6>
   23552:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   23556:	2b00      	cmp	r3, #0
   23558:	f47f adc2 	bne.w	230e0 <_vfiprintf_r+0x1f0>
   2355c:	2320      	movs	r3, #32
   2355e:	f898 1000 	ldrb.w	r1, [r8]
   23562:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   23566:	e536      	b.n	22fd6 <_vfiprintf_r+0xe6>
   23568:	f898 1000 	ldrb.w	r1, [r8]
   2356c:	296c      	cmp	r1, #108	; 0x6c
   2356e:	bf03      	ittte	eq
   23570:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   23574:	f046 0620 	orreq.w	r6, r6, #32
   23578:	f108 0801 	addeq.w	r8, r8, #1
   2357c:	f046 0610 	orrne.w	r6, r6, #16
   23580:	e529      	b.n	22fd6 <_vfiprintf_r+0xe6>
   23582:	f898 1000 	ldrb.w	r1, [r8]
   23586:	2968      	cmp	r1, #104	; 0x68
   23588:	bf03      	ittte	eq
   2358a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   2358e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   23592:	f108 0801 	addeq.w	r8, r8, #1
   23596:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   2359a:	e51c      	b.n	22fd6 <_vfiprintf_r+0xe6>
   2359c:	f046 0310 	orr.w	r3, r6, #16
   235a0:	9303      	str	r3, [sp, #12]
   235a2:	9b03      	ldr	r3, [sp, #12]
   235a4:	f013 0220 	ands.w	r2, r3, #32
   235a8:	f000 8206 	beq.w	239b8 <_vfiprintf_r+0xac8>
   235ac:	9b07      	ldr	r3, [sp, #28]
   235ae:	3307      	adds	r3, #7
   235b0:	f023 0307 	bic.w	r3, r3, #7
   235b4:	4619      	mov	r1, r3
   235b6:	685a      	ldr	r2, [r3, #4]
   235b8:	f851 3b08 	ldr.w	r3, [r1], #8
   235bc:	9107      	str	r1, [sp, #28]
   235be:	2101      	movs	r1, #1
   235c0:	e60d      	b.n	231de <_vfiprintf_r+0x2ee>
   235c2:	9a07      	ldr	r2, [sp, #28]
   235c4:	f046 0302 	orr.w	r3, r6, #2
   235c8:	9303      	str	r3, [sp, #12]
   235ca:	f852 3b04 	ldr.w	r3, [r2], #4
   235ce:	9207      	str	r2, [sp, #28]
   235d0:	f647 0230 	movw	r2, #30768	; 0x7830
   235d4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   235d8:	4ab8      	ldr	r2, [pc, #736]	; (238bc <_vfiprintf_r+0x9cc>)
   235da:	920c      	str	r2, [sp, #48]	; 0x30
   235dc:	2102      	movs	r1, #2
   235de:	2200      	movs	r2, #0
   235e0:	e5fd      	b.n	231de <_vfiprintf_r+0x2ee>
   235e2:	06b7      	lsls	r7, r6, #26
   235e4:	f100 8248 	bmi.w	23a78 <_vfiprintf_r+0xb88>
   235e8:	06f5      	lsls	r5, r6, #27
   235ea:	f100 8346 	bmi.w	23c7a <_vfiprintf_r+0xd8a>
   235ee:	0674      	lsls	r4, r6, #25
   235f0:	f100 83d5 	bmi.w	23d9e <_vfiprintf_r+0xeae>
   235f4:	05b0      	lsls	r0, r6, #22
   235f6:	f140 8340 	bpl.w	23c7a <_vfiprintf_r+0xd8a>
   235fa:	9b07      	ldr	r3, [sp, #28]
   235fc:	9905      	ldr	r1, [sp, #20]
   235fe:	f853 2b04 	ldr.w	r2, [r3], #4
   23602:	9307      	str	r3, [sp, #28]
   23604:	7011      	strb	r1, [r2, #0]
   23606:	e4be      	b.n	22f86 <_vfiprintf_r+0x96>
   23608:	9603      	str	r6, [sp, #12]
   2360a:	2901      	cmp	r1, #1
   2360c:	f43f ad8c 	beq.w	23128 <_vfiprintf_r+0x238>
   23610:	2902      	cmp	r1, #2
   23612:	ac44      	add	r4, sp, #272	; 0x110
   23614:	d111      	bne.n	2363a <_vfiprintf_r+0x74a>
   23616:	980c      	ldr	r0, [sp, #48]	; 0x30
   23618:	f003 010f 	and.w	r1, r3, #15
   2361c:	091b      	lsrs	r3, r3, #4
   2361e:	5c41      	ldrb	r1, [r0, r1]
   23620:	f804 1d01 	strb.w	r1, [r4, #-1]!
   23624:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   23628:	0912      	lsrs	r2, r2, #4
   2362a:	ea53 0102 	orrs.w	r1, r3, r2
   2362e:	d1f3      	bne.n	23618 <_vfiprintf_r+0x728>
   23630:	9e03      	ldr	r6, [sp, #12]
   23632:	ab44      	add	r3, sp, #272	; 0x110
   23634:	1b1b      	subs	r3, r3, r4
   23636:	9304      	str	r3, [sp, #16]
   23638:	e583      	b.n	23142 <_vfiprintf_r+0x252>
   2363a:	f003 0107 	and.w	r1, r3, #7
   2363e:	08db      	lsrs	r3, r3, #3
   23640:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   23644:	08d2      	lsrs	r2, r2, #3
   23646:	3130      	adds	r1, #48	; 0x30
   23648:	ea53 0502 	orrs.w	r5, r3, r2
   2364c:	4620      	mov	r0, r4
   2364e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   23652:	d1f2      	bne.n	2363a <_vfiprintf_r+0x74a>
   23654:	9e03      	ldr	r6, [sp, #12]
   23656:	07f3      	lsls	r3, r6, #31
   23658:	d5eb      	bpl.n	23632 <_vfiprintf_r+0x742>
   2365a:	2930      	cmp	r1, #48	; 0x30
   2365c:	d0e8      	beq.n	23630 <_vfiprintf_r+0x740>
   2365e:	2330      	movs	r3, #48	; 0x30
   23660:	3802      	subs	r0, #2
   23662:	f804 3c01 	strb.w	r3, [r4, #-1]
   23666:	ab44      	add	r3, sp, #272	; 0x110
   23668:	1a1b      	subs	r3, r3, r0
   2366a:	9e03      	ldr	r6, [sp, #12]
   2366c:	9304      	str	r3, [sp, #16]
   2366e:	4604      	mov	r4, r0
   23670:	e567      	b.n	23142 <_vfiprintf_r+0x252>
   23672:	9b04      	ldr	r3, [sp, #16]
   23674:	941b      	str	r4, [sp, #108]	; 0x6c
   23676:	2201      	movs	r2, #1
   23678:	931c      	str	r3, [sp, #112]	; 0x70
   2367a:	931a      	str	r3, [sp, #104]	; 0x68
   2367c:	9219      	str	r2, [sp, #100]	; 0x64
   2367e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23682:	f109 0908 	add.w	r9, r9, #8
   23686:	e69d      	b.n	233c4 <_vfiprintf_r+0x4d4>
   23688:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2368c:	e47b      	b.n	22f86 <_vfiprintf_r+0x96>
   2368e:	9a06      	ldr	r2, [sp, #24]
   23690:	9d03      	ldr	r5, [sp, #12]
   23692:	1b55      	subs	r5, r2, r5
   23694:	2d00      	cmp	r5, #0
   23696:	f77f ae76 	ble.w	23386 <_vfiprintf_r+0x496>
   2369a:	2d10      	cmp	r5, #16
   2369c:	f340 83bb 	ble.w	23e16 <_vfiprintf_r+0xf26>
   236a0:	9409      	str	r4, [sp, #36]	; 0x24
   236a2:	ee18 4a10 	vmov	r4, s16
   236a6:	e007      	b.n	236b8 <_vfiprintf_r+0x7c8>
   236a8:	f100 0c02 	add.w	ip, r0, #2
   236ac:	f109 0908 	add.w	r9, r9, #8
   236b0:	4610      	mov	r0, r2
   236b2:	3d10      	subs	r5, #16
   236b4:	2d10      	cmp	r5, #16
   236b6:	dd1e      	ble.n	236f6 <_vfiprintf_r+0x806>
   236b8:	4981      	ldr	r1, [pc, #516]	; (238c0 <_vfiprintf_r+0x9d0>)
   236ba:	f8c9 1000 	str.w	r1, [r9]
   236be:	1c42      	adds	r2, r0, #1
   236c0:	3310      	adds	r3, #16
   236c2:	2110      	movs	r1, #16
   236c4:	2a07      	cmp	r2, #7
   236c6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   236ca:	f8c9 1004 	str.w	r1, [r9, #4]
   236ce:	ddeb      	ble.n	236a8 <_vfiprintf_r+0x7b8>
   236d0:	aa18      	add	r2, sp, #96	; 0x60
   236d2:	2b00      	cmp	r3, #0
   236d4:	d074      	beq.n	237c0 <_vfiprintf_r+0x8d0>
   236d6:	4621      	mov	r1, r4
   236d8:	4658      	mov	r0, fp
   236da:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   236de:	f7ff fbbf 	bl	22e60 <_svfiprintf_r+0xd18>
   236e2:	2800      	cmp	r0, #0
   236e4:	f47f addb 	bne.w	2329e <_vfiprintf_r+0x3ae>
   236e8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   236ec:	3d10      	subs	r5, #16
   236ee:	2d10      	cmp	r5, #16
   236f0:	f100 0c01 	add.w	ip, r0, #1
   236f4:	dce0      	bgt.n	236b8 <_vfiprintf_r+0x7c8>
   236f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   236f8:	4a71      	ldr	r2, [pc, #452]	; (238c0 <_vfiprintf_r+0x9d0>)
   236fa:	f8c9 5004 	str.w	r5, [r9, #4]
   236fe:	442b      	add	r3, r5
   23700:	f1bc 0f07 	cmp.w	ip, #7
   23704:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   23708:	f8c9 2000 	str.w	r2, [r9]
   2370c:	f340 8194 	ble.w	23a38 <_vfiprintf_r+0xb48>
   23710:	2b00      	cmp	r3, #0
   23712:	f000 831f 	beq.w	23d54 <_vfiprintf_r+0xe64>
   23716:	ee18 1a10 	vmov	r1, s16
   2371a:	aa18      	add	r2, sp, #96	; 0x60
   2371c:	4658      	mov	r0, fp
   2371e:	f7ff fb9f 	bl	22e60 <_svfiprintf_r+0xd18>
   23722:	2800      	cmp	r0, #0
   23724:	f47f adbb 	bne.w	2329e <_vfiprintf_r+0x3ae>
   23728:	9a04      	ldr	r2, [sp, #16]
   2372a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   2372e:	1abd      	subs	r5, r7, r2
   23730:	2d00      	cmp	r5, #0
   23732:	f100 0101 	add.w	r1, r0, #1
   23736:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2373a:	f77f ae29 	ble.w	23390 <_vfiprintf_r+0x4a0>
   2373e:	2d10      	cmp	r5, #16
   23740:	dd29      	ble.n	23796 <_vfiprintf_r+0x8a6>
   23742:	9409      	str	r4, [sp, #36]	; 0x24
   23744:	2710      	movs	r7, #16
   23746:	ee18 4a10 	vmov	r4, s16
   2374a:	e007      	b.n	2375c <_vfiprintf_r+0x86c>
   2374c:	f100 0c02 	add.w	ip, r0, #2
   23750:	f109 0908 	add.w	r9, r9, #8
   23754:	4610      	mov	r0, r2
   23756:	3d10      	subs	r5, #16
   23758:	2d10      	cmp	r5, #16
   2375a:	dd1a      	ble.n	23792 <_vfiprintf_r+0x8a2>
   2375c:	1c42      	adds	r2, r0, #1
   2375e:	4958      	ldr	r1, [pc, #352]	; (238c0 <_vfiprintf_r+0x9d0>)
   23760:	3310      	adds	r3, #16
   23762:	2a07      	cmp	r2, #7
   23764:	e9c9 1700 	strd	r1, r7, [r9]
   23768:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   2376c:	ddee      	ble.n	2374c <_vfiprintf_r+0x85c>
   2376e:	aa18      	add	r2, sp, #96	; 0x60
   23770:	b303      	cbz	r3, 237b4 <_vfiprintf_r+0x8c4>
   23772:	4621      	mov	r1, r4
   23774:	4658      	mov	r0, fp
   23776:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2377a:	f7ff fb71 	bl	22e60 <_svfiprintf_r+0xd18>
   2377e:	2800      	cmp	r0, #0
   23780:	f47f ad8d 	bne.w	2329e <_vfiprintf_r+0x3ae>
   23784:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   23788:	3d10      	subs	r5, #16
   2378a:	2d10      	cmp	r5, #16
   2378c:	f100 0c01 	add.w	ip, r0, #1
   23790:	dce4      	bgt.n	2375c <_vfiprintf_r+0x86c>
   23792:	9c09      	ldr	r4, [sp, #36]	; 0x24
   23794:	4661      	mov	r1, ip
   23796:	4a4a      	ldr	r2, [pc, #296]	; (238c0 <_vfiprintf_r+0x9d0>)
   23798:	f8c9 5004 	str.w	r5, [r9, #4]
   2379c:	442b      	add	r3, r5
   2379e:	2907      	cmp	r1, #7
   237a0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   237a4:	f8c9 2000 	str.w	r2, [r9]
   237a8:	f300 80e7 	bgt.w	2397a <_vfiprintf_r+0xa8a>
   237ac:	f109 0908 	add.w	r9, r9, #8
   237b0:	3101      	adds	r1, #1
   237b2:	e5ed      	b.n	23390 <_vfiprintf_r+0x4a0>
   237b4:	f04f 0c01 	mov.w	ip, #1
   237b8:	4618      	mov	r0, r3
   237ba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   237be:	e7ca      	b.n	23756 <_vfiprintf_r+0x866>
   237c0:	f04f 0c01 	mov.w	ip, #1
   237c4:	4618      	mov	r0, r3
   237c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   237ca:	e772      	b.n	236b2 <_vfiprintf_r+0x7c2>
   237cc:	2b00      	cmp	r3, #0
   237ce:	f000 8104 	beq.w	239da <_vfiprintf_r+0xaea>
   237d2:	ee18 1a10 	vmov	r1, s16
   237d6:	aa18      	add	r2, sp, #96	; 0x60
   237d8:	4658      	mov	r0, fp
   237da:	f7ff fb41 	bl	22e60 <_svfiprintf_r+0xd18>
   237de:	2800      	cmp	r0, #0
   237e0:	f47f ad5d 	bne.w	2329e <_vfiprintf_r+0x3ae>
   237e4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   237e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   237ec:	1c41      	adds	r1, r0, #1
   237ee:	e5a7      	b.n	23340 <_vfiprintf_r+0x450>
   237f0:	2302      	movs	r3, #2
   237f2:	aa11      	add	r2, sp, #68	; 0x44
   237f4:	931c      	str	r3, [sp, #112]	; 0x70
   237f6:	921b      	str	r2, [sp, #108]	; 0x6c
   237f8:	2101      	movs	r1, #1
   237fa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   237fe:	4608      	mov	r0, r1
   23800:	f109 0908 	add.w	r9, r9, #8
   23804:	1c41      	adds	r1, r0, #1
   23806:	e5ba      	b.n	2337e <_vfiprintf_r+0x48e>
   23808:	2d10      	cmp	r5, #16
   2380a:	f340 82e5 	ble.w	23dd8 <_vfiprintf_r+0xee8>
   2380e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   23812:	940f      	str	r4, [sp, #60]	; 0x3c
   23814:	4608      	mov	r0, r1
   23816:	ee18 4a10 	vmov	r4, s16
   2381a:	e007      	b.n	2382c <_vfiprintf_r+0x93c>
   2381c:	f100 0c02 	add.w	ip, r0, #2
   23820:	f109 0908 	add.w	r9, r9, #8
   23824:	4610      	mov	r0, r2
   23826:	3d10      	subs	r5, #16
   23828:	2d10      	cmp	r5, #16
   2382a:	dd1d      	ble.n	23868 <_vfiprintf_r+0x978>
   2382c:	4925      	ldr	r1, [pc, #148]	; (238c4 <_vfiprintf_r+0x9d4>)
   2382e:	f8c9 1000 	str.w	r1, [r9]
   23832:	1c42      	adds	r2, r0, #1
   23834:	3310      	adds	r3, #16
   23836:	2110      	movs	r1, #16
   23838:	2a07      	cmp	r2, #7
   2383a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   2383e:	f8c9 1004 	str.w	r1, [r9, #4]
   23842:	ddeb      	ble.n	2381c <_vfiprintf_r+0x92c>
   23844:	aa18      	add	r2, sp, #96	; 0x60
   23846:	b303      	cbz	r3, 2388a <_vfiprintf_r+0x99a>
   23848:	4621      	mov	r1, r4
   2384a:	4658      	mov	r0, fp
   2384c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23850:	f7ff fb06 	bl	22e60 <_svfiprintf_r+0xd18>
   23854:	2800      	cmp	r0, #0
   23856:	f47f ad22 	bne.w	2329e <_vfiprintf_r+0x3ae>
   2385a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   2385e:	3d10      	subs	r5, #16
   23860:	2d10      	cmp	r5, #16
   23862:	f100 0c01 	add.w	ip, r0, #1
   23866:	dce1      	bgt.n	2382c <_vfiprintf_r+0x93c>
   23868:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2386a:	4660      	mov	r0, ip
   2386c:	4a15      	ldr	r2, [pc, #84]	; (238c4 <_vfiprintf_r+0x9d4>)
   2386e:	f8c9 5004 	str.w	r5, [r9, #4]
   23872:	442b      	add	r3, r5
   23874:	2807      	cmp	r0, #7
   23876:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   2387a:	f8c9 2000 	str.w	r2, [r9]
   2387e:	f300 80c1 	bgt.w	23a04 <_vfiprintf_r+0xb14>
   23882:	f109 0908 	add.w	r9, r9, #8
   23886:	1c41      	adds	r1, r0, #1
   23888:	e546      	b.n	23318 <_vfiprintf_r+0x428>
   2388a:	4618      	mov	r0, r3
   2388c:	f04f 0c01 	mov.w	ip, #1
   23890:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23894:	e7c7      	b.n	23826 <_vfiprintf_r+0x936>
   23896:	0776      	lsls	r6, r6, #29
   23898:	9319      	str	r3, [sp, #100]	; 0x64
   2389a:	d553      	bpl.n	23944 <_vfiprintf_r+0xa54>
   2389c:	9a06      	ldr	r2, [sp, #24]
   2389e:	9903      	ldr	r1, [sp, #12]
   238a0:	1a54      	subs	r4, r2, r1
   238a2:	2c00      	cmp	r4, #0
   238a4:	dd4e      	ble.n	23944 <_vfiprintf_r+0xa54>
   238a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   238aa:	2c10      	cmp	r4, #16
   238ac:	f340 82b0 	ble.w	23e10 <_vfiprintf_r+0xf20>
   238b0:	9919      	ldr	r1, [sp, #100]	; 0x64
   238b2:	ee18 6a10 	vmov	r6, s16
   238b6:	2510      	movs	r5, #16
   238b8:	e00d      	b.n	238d6 <_vfiprintf_r+0x9e6>
   238ba:	bf00      	nop
   238bc:	20008d04 	.word	0x20008d04
   238c0:	2000263c 	.word	0x2000263c
   238c4:	2000262c 	.word	0x2000262c
   238c8:	1c88      	adds	r0, r1, #2
   238ca:	f109 0908 	add.w	r9, r9, #8
   238ce:	4611      	mov	r1, r2
   238d0:	3c10      	subs	r4, #16
   238d2:	2c10      	cmp	r4, #16
   238d4:	dd1a      	ble.n	2390c <_vfiprintf_r+0xa1c>
   238d6:	1c4a      	adds	r2, r1, #1
   238d8:	48b3      	ldr	r0, [pc, #716]	; (23ba8 <_vfiprintf_r+0xcb8>)
   238da:	3310      	adds	r3, #16
   238dc:	2a07      	cmp	r2, #7
   238de:	e9c9 0500 	strd	r0, r5, [r9]
   238e2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   238e6:	ddef      	ble.n	238c8 <_vfiprintf_r+0x9d8>
   238e8:	aa18      	add	r2, sp, #96	; 0x60
   238ea:	b333      	cbz	r3, 2393a <_vfiprintf_r+0xa4a>
   238ec:	4631      	mov	r1, r6
   238ee:	4658      	mov	r0, fp
   238f0:	f7ff fab6 	bl	22e60 <_svfiprintf_r+0xd18>
   238f4:	2800      	cmp	r0, #0
   238f6:	f47f acd2 	bne.w	2329e <_vfiprintf_r+0x3ae>
   238fa:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   238fe:	3c10      	subs	r4, #16
   23900:	2c10      	cmp	r4, #16
   23902:	f101 0001 	add.w	r0, r1, #1
   23906:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2390a:	dce4      	bgt.n	238d6 <_vfiprintf_r+0x9e6>
   2390c:	4aa6      	ldr	r2, [pc, #664]	; (23ba8 <_vfiprintf_r+0xcb8>)
   2390e:	f8c9 4004 	str.w	r4, [r9, #4]
   23912:	4423      	add	r3, r4
   23914:	2807      	cmp	r0, #7
   23916:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   2391a:	f8c9 2000 	str.w	r2, [r9]
   2391e:	f77f ad59 	ble.w	233d4 <_vfiprintf_r+0x4e4>
   23922:	b17b      	cbz	r3, 23944 <_vfiprintf_r+0xa54>
   23924:	ee18 1a10 	vmov	r1, s16
   23928:	aa18      	add	r2, sp, #96	; 0x60
   2392a:	4658      	mov	r0, fp
   2392c:	f7ff fa98 	bl	22e60 <_svfiprintf_r+0xd18>
   23930:	2800      	cmp	r0, #0
   23932:	f47f acb4 	bne.w	2329e <_vfiprintf_r+0x3ae>
   23936:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23938:	e54c      	b.n	233d4 <_vfiprintf_r+0x4e4>
   2393a:	2001      	movs	r0, #1
   2393c:	4619      	mov	r1, r3
   2393e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23942:	e7c5      	b.n	238d0 <_vfiprintf_r+0x9e0>
   23944:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   23948:	9903      	ldr	r1, [sp, #12]
   2394a:	428a      	cmp	r2, r1
   2394c:	bfac      	ite	ge
   2394e:	189b      	addge	r3, r3, r2
   23950:	185b      	addlt	r3, r3, r1
   23952:	9305      	str	r3, [sp, #20]
   23954:	e549      	b.n	233ea <_vfiprintf_r+0x4fa>
   23956:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   2395a:	058f      	lsls	r7, r1, #22
   2395c:	ee18 3a10 	vmov	r3, s16
   23960:	b28a      	uxth	r2, r1
   23962:	f53f aae8 	bmi.w	22f36 <_vfiprintf_r+0x46>
   23966:	ee18 5a10 	vmov	r5, s16
   2396a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   2396c:	f7f9 fa6a 	bl	1ce44 <__retarget_lock_acquire_recursive>
   23970:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   23974:	b28a      	uxth	r2, r1
   23976:	f7ff bade 	b.w	22f36 <_vfiprintf_r+0x46>
   2397a:	2b00      	cmp	r3, #0
   2397c:	f43f ae79 	beq.w	23672 <_vfiprintf_r+0x782>
   23980:	ee18 1a10 	vmov	r1, s16
   23984:	aa18      	add	r2, sp, #96	; 0x60
   23986:	4658      	mov	r0, fp
   23988:	f7ff fa6a 	bl	22e60 <_svfiprintf_r+0xd18>
   2398c:	2800      	cmp	r0, #0
   2398e:	f47f ac86 	bne.w	2329e <_vfiprintf_r+0x3ae>
   23992:	9919      	ldr	r1, [sp, #100]	; 0x64
   23994:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23996:	3101      	adds	r1, #1
   23998:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2399c:	e4f8      	b.n	23390 <_vfiprintf_r+0x4a0>
   2399e:	9219      	str	r2, [sp, #100]	; 0x64
   239a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   239a4:	e45e      	b.n	23264 <_vfiprintf_r+0x374>
   239a6:	2f00      	cmp	r7, #0
   239a8:	f47f abc3 	bne.w	23132 <_vfiprintf_r+0x242>
   239ac:	9e03      	ldr	r6, [sp, #12]
   239ae:	2700      	movs	r7, #0
   239b0:	9704      	str	r7, [sp, #16]
   239b2:	ac44      	add	r4, sp, #272	; 0x110
   239b4:	f7ff bbc5 	b.w	23142 <_vfiprintf_r+0x252>
   239b8:	9b03      	ldr	r3, [sp, #12]
   239ba:	f013 0310 	ands.w	r3, r3, #16
   239be:	d154      	bne.n	23a6a <_vfiprintf_r+0xb7a>
   239c0:	9a03      	ldr	r2, [sp, #12]
   239c2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   239c6:	f000 816b 	beq.w	23ca0 <_vfiprintf_r+0xdb0>
   239ca:	9907      	ldr	r1, [sp, #28]
   239cc:	461a      	mov	r2, r3
   239ce:	f851 3b04 	ldr.w	r3, [r1], #4
   239d2:	9107      	str	r1, [sp, #28]
   239d4:	b29b      	uxth	r3, r3
   239d6:	2101      	movs	r1, #1
   239d8:	e401      	b.n	231de <_vfiprintf_r+0x2ee>
   239da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   239dc:	2a00      	cmp	r2, #0
   239de:	d164      	bne.n	23aaa <_vfiprintf_r+0xbba>
   239e0:	4618      	mov	r0, r3
   239e2:	2101      	movs	r1, #1
   239e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   239e8:	e4c9      	b.n	2337e <_vfiprintf_r+0x48e>
   239ea:	2101      	movs	r1, #1
   239ec:	4618      	mov	r0, r3
   239ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   239f2:	e4c4      	b.n	2337e <_vfiprintf_r+0x48e>
   239f4:	425b      	negs	r3, r3
   239f6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   239fa:	9603      	str	r6, [sp, #12]
   239fc:	202d      	movs	r0, #45	; 0x2d
   239fe:	2101      	movs	r1, #1
   23a00:	f7ff bbee 	b.w	231e0 <_vfiprintf_r+0x2f0>
   23a04:	2b00      	cmp	r3, #0
   23a06:	f000 8088 	beq.w	23b1a <_vfiprintf_r+0xc2a>
   23a0a:	ee18 1a10 	vmov	r1, s16
   23a0e:	aa18      	add	r2, sp, #96	; 0x60
   23a10:	4658      	mov	r0, fp
   23a12:	f7ff fa25 	bl	22e60 <_svfiprintf_r+0xd18>
   23a16:	2800      	cmp	r0, #0
   23a18:	f47f ac41 	bne.w	2329e <_vfiprintf_r+0x3ae>
   23a1c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   23a20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23a24:	1c41      	adds	r1, r0, #1
   23a26:	e477      	b.n	23318 <_vfiprintf_r+0x428>
   23a28:	f898 1000 	ldrb.w	r1, [r8]
   23a2c:	9307      	str	r3, [sp, #28]
   23a2e:	f7ff bad2 	b.w	22fd6 <_vfiprintf_r+0xe6>
   23a32:	ac44      	add	r4, sp, #272	; 0x110
   23a34:	f7ff bb85 	b.w	23142 <_vfiprintf_r+0x252>
   23a38:	f109 0908 	add.w	r9, r9, #8
   23a3c:	f10c 0101 	add.w	r1, ip, #1
   23a40:	4660      	mov	r0, ip
   23a42:	e4a0      	b.n	23386 <_vfiprintf_r+0x496>
   23a44:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   23a48:	f040 8197 	bne.w	23d7a <_vfiprintf_r+0xe8a>
   23a4c:	f851 3b04 	ldr.w	r3, [r1], #4
   23a50:	9107      	str	r1, [sp, #28]
   23a52:	f7ff bbc0 	b.w	231d6 <_vfiprintf_r+0x2e6>
   23a56:	05b3      	lsls	r3, r6, #22
   23a58:	f100 8188 	bmi.w	23d6c <_vfiprintf_r+0xe7c>
   23a5c:	f852 3b04 	ldr.w	r3, [r2], #4
   23a60:	9207      	str	r2, [sp, #28]
   23a62:	17da      	asrs	r2, r3, #31
   23a64:	4611      	mov	r1, r2
   23a66:	f7ff bb52 	b.w	2310e <_vfiprintf_r+0x21e>
   23a6a:	9907      	ldr	r1, [sp, #28]
   23a6c:	f851 3b04 	ldr.w	r3, [r1], #4
   23a70:	9107      	str	r1, [sp, #28]
   23a72:	2101      	movs	r1, #1
   23a74:	f7ff bbb3 	b.w	231de <_vfiprintf_r+0x2ee>
   23a78:	9b07      	ldr	r3, [sp, #28]
   23a7a:	9805      	ldr	r0, [sp, #20]
   23a7c:	f853 1b04 	ldr.w	r1, [r3], #4
   23a80:	9307      	str	r3, [sp, #28]
   23a82:	17c2      	asrs	r2, r0, #31
   23a84:	e9c1 0200 	strd	r0, r2, [r1]
   23a88:	f7ff ba7d 	b.w	22f86 <_vfiprintf_r+0x96>
   23a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23a8e:	2b00      	cmp	r3, #0
   23a90:	f43f ab26 	beq.w	230e0 <_vfiprintf_r+0x1f0>
   23a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23a96:	781b      	ldrb	r3, [r3, #0]
   23a98:	2b00      	cmp	r3, #0
   23a9a:	f43f ab21 	beq.w	230e0 <_vfiprintf_r+0x1f0>
   23a9e:	f898 1000 	ldrb.w	r1, [r8]
   23aa2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   23aa6:	f7ff ba96 	b.w	22fd6 <_vfiprintf_r+0xe6>
   23aaa:	2302      	movs	r3, #2
   23aac:	aa11      	add	r2, sp, #68	; 0x44
   23aae:	931c      	str	r3, [sp, #112]	; 0x70
   23ab0:	921b      	str	r2, [sp, #108]	; 0x6c
   23ab2:	2001      	movs	r0, #1
   23ab4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23ab8:	e6a2      	b.n	23800 <_vfiprintf_r+0x910>
   23aba:	9603      	str	r6, [sp, #12]
   23abc:	e571      	b.n	235a2 <_vfiprintf_r+0x6b2>
   23abe:	4b3b      	ldr	r3, [pc, #236]	; (23bac <_vfiprintf_r+0xcbc>)
   23ac0:	930c      	str	r3, [sp, #48]	; 0x30
   23ac2:	f016 0220 	ands.w	r2, r6, #32
   23ac6:	d059      	beq.n	23b7c <_vfiprintf_r+0xc8c>
   23ac8:	9b07      	ldr	r3, [sp, #28]
   23aca:	3307      	adds	r3, #7
   23acc:	f023 0307 	bic.w	r3, r3, #7
   23ad0:	4618      	mov	r0, r3
   23ad2:	685a      	ldr	r2, [r3, #4]
   23ad4:	f850 3b08 	ldr.w	r3, [r0], #8
   23ad8:	9007      	str	r0, [sp, #28]
   23ada:	07f4      	lsls	r4, r6, #31
   23adc:	d509      	bpl.n	23af2 <_vfiprintf_r+0xc02>
   23ade:	ea53 0002 	orrs.w	r0, r3, r2
   23ae2:	d006      	beq.n	23af2 <_vfiprintf_r+0xc02>
   23ae4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   23ae8:	2130      	movs	r1, #48	; 0x30
   23aea:	f046 0602 	orr.w	r6, r6, #2
   23aee:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   23af2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   23af6:	9103      	str	r1, [sp, #12]
   23af8:	2102      	movs	r1, #2
   23afa:	f7ff bb70 	b.w	231de <_vfiprintf_r+0x2ee>
   23afe:	4b2c      	ldr	r3, [pc, #176]	; (23bb0 <_vfiprintf_r+0xcc0>)
   23b00:	930c      	str	r3, [sp, #48]	; 0x30
   23b02:	e7de      	b.n	23ac2 <_vfiprintf_r+0xbd2>
   23b04:	9b07      	ldr	r3, [sp, #28]
   23b06:	2101      	movs	r1, #1
   23b08:	f853 2b04 	ldr.w	r2, [r3], #4
   23b0c:	9103      	str	r1, [sp, #12]
   23b0e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   23b12:	9307      	str	r3, [sp, #28]
   23b14:	9104      	str	r1, [sp, #16]
   23b16:	ac2b      	add	r4, sp, #172	; 0xac
   23b18:	e4df      	b.n	234da <_vfiprintf_r+0x5ea>
   23b1a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   23b1e:	2a00      	cmp	r2, #0
   23b20:	f040 8132 	bne.w	23d88 <_vfiprintf_r+0xe98>
   23b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23b26:	2a00      	cmp	r2, #0
   23b28:	f47f ae62 	bne.w	237f0 <_vfiprintf_r+0x900>
   23b2c:	4618      	mov	r0, r3
   23b2e:	2101      	movs	r1, #1
   23b30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23b34:	e427      	b.n	23386 <_vfiprintf_r+0x496>
   23b36:	2100      	movs	r1, #0
   23b38:	2208      	movs	r2, #8
   23b3a:	a816      	add	r0, sp, #88	; 0x58
   23b3c:	9413      	str	r4, [sp, #76]	; 0x4c
   23b3e:	f7f8 f80b 	bl	1bb58 <memset>
   23b42:	1c79      	adds	r1, r7, #1
   23b44:	f000 80bc 	beq.w	23cc0 <_vfiprintf_r+0xdd0>
   23b48:	2500      	movs	r5, #0
   23b4a:	9407      	str	r4, [sp, #28]
   23b4c:	462c      	mov	r4, r5
   23b4e:	e00c      	b.n	23b6a <_vfiprintf_r+0xc7a>
   23b50:	a92b      	add	r1, sp, #172	; 0xac
   23b52:	4658      	mov	r0, fp
   23b54:	f7fe f9e6 	bl	21f24 <_wcrtomb_r>
   23b58:	1c42      	adds	r2, r0, #1
   23b5a:	4420      	add	r0, r4
   23b5c:	f000 816b 	beq.w	23e36 <_vfiprintf_r+0xf46>
   23b60:	42b8      	cmp	r0, r7
   23b62:	dc08      	bgt.n	23b76 <_vfiprintf_r+0xc86>
   23b64:	f000 8170 	beq.w	23e48 <_vfiprintf_r+0xf58>
   23b68:	4604      	mov	r4, r0
   23b6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   23b6c:	5952      	ldr	r2, [r2, r5]
   23b6e:	ab16      	add	r3, sp, #88	; 0x58
   23b70:	3504      	adds	r5, #4
   23b72:	2a00      	cmp	r2, #0
   23b74:	d1ec      	bne.n	23b50 <_vfiprintf_r+0xc60>
   23b76:	9404      	str	r4, [sp, #16]
   23b78:	9c07      	ldr	r4, [sp, #28]
   23b7a:	e0af      	b.n	23cdc <_vfiprintf_r+0xdec>
   23b7c:	f016 0310 	ands.w	r3, r6, #16
   23b80:	9807      	ldr	r0, [sp, #28]
   23b82:	d10c      	bne.n	23b9e <_vfiprintf_r+0xcae>
   23b84:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   23b88:	d005      	beq.n	23b96 <_vfiprintf_r+0xca6>
   23b8a:	461a      	mov	r2, r3
   23b8c:	f850 3b04 	ldr.w	r3, [r0], #4
   23b90:	9007      	str	r0, [sp, #28]
   23b92:	b29b      	uxth	r3, r3
   23b94:	e7a1      	b.n	23ada <_vfiprintf_r+0xbea>
   23b96:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   23b9a:	f040 80e1 	bne.w	23d60 <_vfiprintf_r+0xe70>
   23b9e:	f850 3b04 	ldr.w	r3, [r0], #4
   23ba2:	9007      	str	r0, [sp, #28]
   23ba4:	e799      	b.n	23ada <_vfiprintf_r+0xbea>
   23ba6:	bf00      	nop
   23ba8:	2000262c 	.word	0x2000262c
   23bac:	20008d04 	.word	0x20008d04
   23bb0:	20008d18 	.word	0x20008d18
   23bb4:	9903      	ldr	r1, [sp, #12]
   23bb6:	9704      	str	r7, [sp, #16]
   23bb8:	ac44      	add	r4, sp, #272	; 0x110
   23bba:	469e      	mov	lr, r3
   23bbc:	ee08 ba90 	vmov	s17, fp
   23bc0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   23bc4:	f04f 0c00 	mov.w	ip, #0
   23bc8:	4623      	mov	r3, r4
   23bca:	e006      	b.n	23bda <_vfiprintf_r+0xcea>
   23bcc:	f1be 0f0a 	cmp.w	lr, #10
   23bd0:	f172 0200 	sbcs.w	r2, r2, #0
   23bd4:	d339      	bcc.n	23c4a <_vfiprintf_r+0xd5a>
   23bd6:	46a6      	mov	lr, r4
   23bd8:	462a      	mov	r2, r5
   23bda:	49a6      	ldr	r1, [pc, #664]	; (23e74 <_vfiprintf_r+0xf84>)
   23bdc:	eb1e 0002 	adds.w	r0, lr, r2
   23be0:	f140 0000 	adc.w	r0, r0, #0
   23be4:	460f      	mov	r7, r1
   23be6:	fba1 1400 	umull	r1, r4, r1, r0
   23bea:	f024 0103 	bic.w	r1, r4, #3
   23bee:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   23bf2:	1a40      	subs	r0, r0, r1
   23bf4:	ebbe 0100 	subs.w	r1, lr, r0
   23bf8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   23bfc:	f162 0400 	sbc.w	r4, r2, #0
   23c00:	fb05 f501 	mul.w	r5, r5, r1
   23c04:	fb07 5504 	mla	r5, r7, r4, r5
   23c08:	fba1 4107 	umull	r4, r1, r1, r7
   23c0c:	440d      	add	r5, r1
   23c0e:	2705      	movs	r7, #5
   23c10:	f004 0101 	and.w	r1, r4, #1
   23c14:	fba1 1b07 	umull	r1, fp, r1, r7
   23c18:	1809      	adds	r1, r1, r0
   23c1a:	0864      	lsrs	r4, r4, #1
   23c1c:	3130      	adds	r1, #48	; 0x30
   23c1e:	f803 1c01 	strb.w	r1, [r3, #-1]
   23c22:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   23c26:	f10c 0c01 	add.w	ip, ip, #1
   23c2a:	3b01      	subs	r3, #1
   23c2c:	086d      	lsrs	r5, r5, #1
   23c2e:	2e00      	cmp	r6, #0
   23c30:	d0cc      	beq.n	23bcc <_vfiprintf_r+0xcdc>
   23c32:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23c34:	7809      	ldrb	r1, [r1, #0]
   23c36:	4561      	cmp	r1, ip
   23c38:	d1c8      	bne.n	23bcc <_vfiprintf_r+0xcdc>
   23c3a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   23c3e:	d0c5      	beq.n	23bcc <_vfiprintf_r+0xcdc>
   23c40:	f1be 0f0a 	cmp.w	lr, #10
   23c44:	f172 0200 	sbcs.w	r2, r2, #0
   23c48:	d26c      	bcs.n	23d24 <_vfiprintf_r+0xe34>
   23c4a:	461c      	mov	r4, r3
   23c4c:	ab44      	add	r3, sp, #272	; 0x110
   23c4e:	1b1b      	subs	r3, r3, r4
   23c50:	9f04      	ldr	r7, [sp, #16]
   23c52:	9e03      	ldr	r6, [sp, #12]
   23c54:	9304      	str	r3, [sp, #16]
   23c56:	ee18 ba90 	vmov	fp, s17
   23c5a:	f7ff ba72 	b.w	23142 <_vfiprintf_r+0x252>
   23c5e:	9603      	str	r6, [sp, #12]
   23c60:	f7ff ba62 	b.w	23128 <_vfiprintf_r+0x238>
   23c64:	4658      	mov	r0, fp
   23c66:	f7f7 fcf1 	bl	1b64c <__sinit>
   23c6a:	f7ff b95b 	b.w	22f24 <_vfiprintf_r+0x34>
   23c6e:	2901      	cmp	r1, #1
   23c70:	9603      	str	r6, [sp, #12]
   23c72:	f47f accd 	bne.w	23610 <_vfiprintf_r+0x720>
   23c76:	f7ff ba5c 	b.w	23132 <_vfiprintf_r+0x242>
   23c7a:	9b07      	ldr	r3, [sp, #28]
   23c7c:	9905      	ldr	r1, [sp, #20]
   23c7e:	f853 2b04 	ldr.w	r2, [r3], #4
   23c82:	6011      	str	r1, [r2, #0]
   23c84:	9307      	str	r3, [sp, #28]
   23c86:	f7ff b97e 	b.w	22f86 <_vfiprintf_r+0x96>
   23c8a:	2f06      	cmp	r7, #6
   23c8c:	463b      	mov	r3, r7
   23c8e:	9a03      	ldr	r2, [sp, #12]
   23c90:	4c79      	ldr	r4, [pc, #484]	; (23e78 <_vfiprintf_r+0xf88>)
   23c92:	9207      	str	r2, [sp, #28]
   23c94:	bf28      	it	cs
   23c96:	2306      	movcs	r3, #6
   23c98:	9304      	str	r3, [sp, #16]
   23c9a:	9303      	str	r3, [sp, #12]
   23c9c:	f7ff bb25 	b.w	232ea <_vfiprintf_r+0x3fa>
   23ca0:	9b03      	ldr	r3, [sp, #12]
   23ca2:	9907      	ldr	r1, [sp, #28]
   23ca4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   23ca8:	bf14      	ite	ne
   23caa:	f851 3b04 	ldrne.w	r3, [r1], #4
   23cae:	f851 3b04 	ldreq.w	r3, [r1], #4
   23cb2:	9107      	str	r1, [sp, #28]
   23cb4:	bf1c      	itt	ne
   23cb6:	4602      	movne	r2, r0
   23cb8:	b2db      	uxtbne	r3, r3
   23cba:	2101      	movs	r1, #1
   23cbc:	f7ff ba8f 	b.w	231de <_vfiprintf_r+0x2ee>
   23cc0:	ab16      	add	r3, sp, #88	; 0x58
   23cc2:	9300      	str	r3, [sp, #0]
   23cc4:	2300      	movs	r3, #0
   23cc6:	4619      	mov	r1, r3
   23cc8:	aa13      	add	r2, sp, #76	; 0x4c
   23cca:	4658      	mov	r0, fp
   23ccc:	f7fe f97c 	bl	21fc8 <_wcsrtombs_r>
   23cd0:	4603      	mov	r3, r0
   23cd2:	3301      	adds	r3, #1
   23cd4:	9004      	str	r0, [sp, #16]
   23cd6:	f000 80ae 	beq.w	23e36 <_vfiprintf_r+0xf46>
   23cda:	9413      	str	r4, [sp, #76]	; 0x4c
   23cdc:	9b04      	ldr	r3, [sp, #16]
   23cde:	2b00      	cmp	r3, #0
   23ce0:	d030      	beq.n	23d44 <_vfiprintf_r+0xe54>
   23ce2:	2b63      	cmp	r3, #99	; 0x63
   23ce4:	dc63      	bgt.n	23dae <_vfiprintf_r+0xebe>
   23ce6:	2300      	movs	r3, #0
   23ce8:	9308      	str	r3, [sp, #32]
   23cea:	ac2b      	add	r4, sp, #172	; 0xac
   23cec:	2208      	movs	r2, #8
   23cee:	2100      	movs	r1, #0
   23cf0:	a816      	add	r0, sp, #88	; 0x58
   23cf2:	f7f7 ff31 	bl	1bb58 <memset>
   23cf6:	9d04      	ldr	r5, [sp, #16]
   23cf8:	ab16      	add	r3, sp, #88	; 0x58
   23cfa:	9300      	str	r3, [sp, #0]
   23cfc:	aa13      	add	r2, sp, #76	; 0x4c
   23cfe:	462b      	mov	r3, r5
   23d00:	4621      	mov	r1, r4
   23d02:	4658      	mov	r0, fp
   23d04:	f7fe f960 	bl	21fc8 <_wcsrtombs_r>
   23d08:	4285      	cmp	r5, r0
   23d0a:	f040 80ab 	bne.w	23e64 <_vfiprintf_r+0xf74>
   23d0e:	9b03      	ldr	r3, [sp, #12]
   23d10:	9a04      	ldr	r2, [sp, #16]
   23d12:	9307      	str	r3, [sp, #28]
   23d14:	2300      	movs	r3, #0
   23d16:	54a3      	strb	r3, [r4, r2]
   23d18:	461f      	mov	r7, r3
   23d1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   23d1e:	9303      	str	r3, [sp, #12]
   23d20:	f7ff ba16 	b.w	23150 <_vfiprintf_r+0x260>
   23d24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23d26:	990d      	ldr	r1, [sp, #52]	; 0x34
   23d28:	1a9b      	subs	r3, r3, r2
   23d2a:	4618      	mov	r0, r3
   23d2c:	9308      	str	r3, [sp, #32]
   23d2e:	f7f8 f83f 	bl	1bdb0 <strncpy>
   23d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23d34:	9b08      	ldr	r3, [sp, #32]
   23d36:	784a      	ldrb	r2, [r1, #1]
   23d38:	b10a      	cbz	r2, 23d3e <_vfiprintf_r+0xe4e>
   23d3a:	3101      	adds	r1, #1
   23d3c:	910b      	str	r1, [sp, #44]	; 0x2c
   23d3e:	f04f 0c00 	mov.w	ip, #0
   23d42:	e748      	b.n	23bd6 <_vfiprintf_r+0xce6>
   23d44:	9b03      	ldr	r3, [sp, #12]
   23d46:	9307      	str	r3, [sp, #28]
   23d48:	9b04      	ldr	r3, [sp, #16]
   23d4a:	9303      	str	r3, [sp, #12]
   23d4c:	461f      	mov	r7, r3
   23d4e:	9308      	str	r3, [sp, #32]
   23d50:	f7ff b9fe 	b.w	23150 <_vfiprintf_r+0x260>
   23d54:	2101      	movs	r1, #1
   23d56:	4618      	mov	r0, r3
   23d58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23d5c:	f7ff bb13 	b.w	23386 <_vfiprintf_r+0x496>
   23d60:	f850 3b04 	ldr.w	r3, [r0], #4
   23d64:	9007      	str	r0, [sp, #28]
   23d66:	4622      	mov	r2, r4
   23d68:	b2db      	uxtb	r3, r3
   23d6a:	e6b6      	b.n	23ada <_vfiprintf_r+0xbea>
   23d6c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   23d70:	9207      	str	r2, [sp, #28]
   23d72:	17da      	asrs	r2, r3, #31
   23d74:	4611      	mov	r1, r2
   23d76:	f7ff b9ca 	b.w	2310e <_vfiprintf_r+0x21e>
   23d7a:	f851 3b04 	ldr.w	r3, [r1], #4
   23d7e:	9107      	str	r1, [sp, #28]
   23d80:	4602      	mov	r2, r0
   23d82:	b2db      	uxtb	r3, r3
   23d84:	f7ff ba27 	b.w	231d6 <_vfiprintf_r+0x2e6>
   23d88:	2301      	movs	r3, #1
   23d8a:	931c      	str	r3, [sp, #112]	; 0x70
   23d8c:	2101      	movs	r1, #1
   23d8e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   23d92:	931b      	str	r3, [sp, #108]	; 0x6c
   23d94:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   23d98:	460b      	mov	r3, r1
   23d9a:	f7ff bacd 	b.w	23338 <_vfiprintf_r+0x448>
   23d9e:	9b07      	ldr	r3, [sp, #28]
   23da0:	9905      	ldr	r1, [sp, #20]
   23da2:	f853 2b04 	ldr.w	r2, [r3], #4
   23da6:	9307      	str	r3, [sp, #28]
   23da8:	8011      	strh	r1, [r2, #0]
   23daa:	f7ff b8ec 	b.w	22f86 <_vfiprintf_r+0x96>
   23dae:	1c59      	adds	r1, r3, #1
   23db0:	4658      	mov	r0, fp
   23db2:	f7f5 fdcb 	bl	1994c <_malloc_r>
   23db6:	4604      	mov	r4, r0
   23db8:	2800      	cmp	r0, #0
   23dba:	d03c      	beq.n	23e36 <_vfiprintf_r+0xf46>
   23dbc:	9008      	str	r0, [sp, #32]
   23dbe:	e795      	b.n	23cec <_vfiprintf_r+0xdfc>
   23dc0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   23dc2:	f7f9 f847 	bl	1ce54 <__retarget_lock_release_recursive>
   23dc6:	f7ff b9e9 	b.w	2319c <_vfiprintf_r+0x2ac>
   23dca:	9b03      	ldr	r3, [sp, #12]
   23dcc:	9307      	str	r3, [sp, #28]
   23dce:	e9cd 7703 	strd	r7, r7, [sp, #12]
   23dd2:	9f08      	ldr	r7, [sp, #32]
   23dd4:	f7ff b9bc 	b.w	23150 <_vfiprintf_r+0x260>
   23dd8:	9819      	ldr	r0, [sp, #100]	; 0x64
   23dda:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23ddc:	3001      	adds	r0, #1
   23dde:	e545      	b.n	2386c <_vfiprintf_r+0x97c>
   23de0:	9b03      	ldr	r3, [sp, #12]
   23de2:	9307      	str	r3, [sp, #28]
   23de4:	4620      	mov	r0, r4
   23de6:	f7f9 fa6b 	bl	1d2c0 <strlen>
   23dea:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   23dee:	462f      	mov	r7, r5
   23df0:	9004      	str	r0, [sp, #16]
   23df2:	9303      	str	r3, [sp, #12]
   23df4:	9508      	str	r5, [sp, #32]
   23df6:	f7ff b9ab 	b.w	23150 <_vfiprintf_r+0x260>
   23dfa:	ee18 1a10 	vmov	r1, s16
   23dfe:	aa18      	add	r2, sp, #96	; 0x60
   23e00:	4658      	mov	r0, fp
   23e02:	f7ff f82d 	bl	22e60 <_svfiprintf_r+0xd18>
   23e06:	2800      	cmp	r0, #0
   23e08:	f43f aa36 	beq.w	23278 <_vfiprintf_r+0x388>
   23e0c:	f7ff ba4d 	b.w	232aa <_vfiprintf_r+0x3ba>
   23e10:	9819      	ldr	r0, [sp, #100]	; 0x64
   23e12:	3001      	adds	r0, #1
   23e14:	e57a      	b.n	2390c <_vfiprintf_r+0xa1c>
   23e16:	468c      	mov	ip, r1
   23e18:	e46e      	b.n	236f8 <_vfiprintf_r+0x808>
   23e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23e1c:	07d9      	lsls	r1, r3, #31
   23e1e:	d405      	bmi.n	23e2c <_vfiprintf_r+0xf3c>
   23e20:	89ab      	ldrh	r3, [r5, #12]
   23e22:	059a      	lsls	r2, r3, #22
   23e24:	d402      	bmi.n	23e2c <_vfiprintf_r+0xf3c>
   23e26:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23e28:	f7f9 f814 	bl	1ce54 <__retarget_lock_release_recursive>
   23e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23e30:	9305      	str	r3, [sp, #20]
   23e32:	f7ff ba49 	b.w	232c8 <_vfiprintf_r+0x3d8>
   23e36:	ee18 2a10 	vmov	r2, s16
   23e3a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   23e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23e42:	8193      	strh	r3, [r2, #12]
   23e44:	f7ff ba35 	b.w	232b2 <_vfiprintf_r+0x3c2>
   23e48:	9c07      	ldr	r4, [sp, #28]
   23e4a:	9704      	str	r7, [sp, #16]
   23e4c:	e746      	b.n	23cdc <_vfiprintf_r+0xdec>
   23e4e:	9b07      	ldr	r3, [sp, #28]
   23e50:	f898 1001 	ldrb.w	r1, [r8, #1]
   23e54:	f853 7b04 	ldr.w	r7, [r3], #4
   23e58:	9307      	str	r3, [sp, #28]
   23e5a:	4690      	mov	r8, r2
   23e5c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   23e60:	f7ff b8b9 	b.w	22fd6 <_vfiprintf_r+0xe6>
   23e64:	ee18 2a10 	vmov	r2, s16
   23e68:	8993      	ldrh	r3, [r2, #12]
   23e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23e6e:	8193      	strh	r3, [r2, #12]
   23e70:	f7ff ba15 	b.w	2329e <_vfiprintf_r+0x3ae>
   23e74:	cccccccd 	.word	0xcccccccd
   23e78:	20008d2c 	.word	0x20008d2c

00023e7c <vfiprintf>:
   23e7c:	b410      	push	{r4}
   23e7e:	4c05      	ldr	r4, [pc, #20]	; (23e94 <vfiprintf+0x18>)
   23e80:	4684      	mov	ip, r0
   23e82:	4613      	mov	r3, r2
   23e84:	6820      	ldr	r0, [r4, #0]
   23e86:	f85d 4b04 	ldr.w	r4, [sp], #4
   23e8a:	460a      	mov	r2, r1
   23e8c:	4661      	mov	r1, ip
   23e8e:	f7ff b82f 	b.w	22ef0 <_vfiprintf_r>
   23e92:	bf00      	nop
   23e94:	20008e58 	.word	0x20008e58
   23e98:	b570      	push	{r4, r5, r6, lr}
   23e9a:	460c      	mov	r4, r1
   23e9c:	8989      	ldrh	r1, [r1, #12]
   23e9e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   23ea2:	f021 0102 	bic.w	r1, r1, #2
   23ea6:	f8ad 1014 	strh.w	r1, [sp, #20]
   23eaa:	6e61      	ldr	r1, [r4, #100]	; 0x64
   23eac:	911b      	str	r1, [sp, #108]	; 0x6c
   23eae:	89e1      	ldrh	r1, [r4, #14]
   23eb0:	f8ad 1016 	strh.w	r1, [sp, #22]
   23eb4:	69e1      	ldr	r1, [r4, #28]
   23eb6:	9109      	str	r1, [sp, #36]	; 0x24
   23eb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23eba:	910b      	str	r1, [sp, #44]	; 0x2c
   23ebc:	a91c      	add	r1, sp, #112	; 0x70
   23ebe:	9102      	str	r1, [sp, #8]
   23ec0:	9106      	str	r1, [sp, #24]
   23ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   23ec6:	4606      	mov	r6, r0
   23ec8:	9104      	str	r1, [sp, #16]
   23eca:	9107      	str	r1, [sp, #28]
   23ecc:	a818      	add	r0, sp, #96	; 0x60
   23ece:	2100      	movs	r1, #0
   23ed0:	e9cd 3200 	strd	r3, r2, [sp]
   23ed4:	9108      	str	r1, [sp, #32]
   23ed6:	f7f8 ffad 	bl	1ce34 <__retarget_lock_init_recursive>
   23eda:	e9dd 3200 	ldrd	r3, r2, [sp]
   23ede:	a902      	add	r1, sp, #8
   23ee0:	4630      	mov	r0, r6
   23ee2:	f7ff f805 	bl	22ef0 <_vfiprintf_r>
   23ee6:	1e05      	subs	r5, r0, #0
   23ee8:	db07      	blt.n	23efa <vfiprintf+0x7e>
   23eea:	a902      	add	r1, sp, #8
   23eec:	4630      	mov	r0, r6
   23eee:	f7fc ffb1 	bl	20e54 <_fflush_r>
   23ef2:	2800      	cmp	r0, #0
   23ef4:	bf18      	it	ne
   23ef6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   23efa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   23efe:	065b      	lsls	r3, r3, #25
   23f00:	d503      	bpl.n	23f0a <vfiprintf+0x8e>
   23f02:	89a3      	ldrh	r3, [r4, #12]
   23f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23f08:	81a3      	strh	r3, [r4, #12]
   23f0a:	9818      	ldr	r0, [sp, #96]	; 0x60
   23f0c:	f7f8 ff96 	bl	1ce3c <__retarget_lock_close_recursive>
   23f10:	4628      	mov	r0, r5
   23f12:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   23f16:	bd70      	pop	{r4, r5, r6, pc}

00023f18 <__sfvwrite_r>:
   23f18:	6893      	ldr	r3, [r2, #8]
   23f1a:	2b00      	cmp	r3, #0
   23f1c:	f000 8085 	beq.w	2402a <__sfvwrite_r+0x112>
   23f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f24:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   23f28:	460c      	mov	r4, r1
   23f2a:	0719      	lsls	r1, r3, #28
   23f2c:	4680      	mov	r8, r0
   23f2e:	b083      	sub	sp, #12
   23f30:	4617      	mov	r7, r2
   23f32:	b298      	uxth	r0, r3
   23f34:	d525      	bpl.n	23f82 <__sfvwrite_r+0x6a>
   23f36:	6923      	ldr	r3, [r4, #16]
   23f38:	b31b      	cbz	r3, 23f82 <__sfvwrite_r+0x6a>
   23f3a:	f010 0302 	ands.w	r3, r0, #2
   23f3e:	683d      	ldr	r5, [r7, #0]
   23f40:	d02d      	beq.n	23f9e <__sfvwrite_r+0x86>
   23f42:	f04f 0a00 	mov.w	sl, #0
   23f46:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 24208 <__sfvwrite_r+0x2f0>
   23f4a:	4656      	mov	r6, sl
   23f4c:	46b9      	mov	r9, r7
   23f4e:	455e      	cmp	r6, fp
   23f50:	4633      	mov	r3, r6
   23f52:	4652      	mov	r2, sl
   23f54:	bf28      	it	cs
   23f56:	465b      	movcs	r3, fp
   23f58:	4640      	mov	r0, r8
   23f5a:	2e00      	cmp	r6, #0
   23f5c:	d052      	beq.n	24004 <__sfvwrite_r+0xec>
   23f5e:	69e1      	ldr	r1, [r4, #28]
   23f60:	6a67      	ldr	r7, [r4, #36]	; 0x24
   23f62:	47b8      	blx	r7
   23f64:	2800      	cmp	r0, #0
   23f66:	dd56      	ble.n	24016 <__sfvwrite_r+0xfe>
   23f68:	f8d9 3008 	ldr.w	r3, [r9, #8]
   23f6c:	1a1b      	subs	r3, r3, r0
   23f6e:	4482      	add	sl, r0
   23f70:	1a36      	subs	r6, r6, r0
   23f72:	f8c9 3008 	str.w	r3, [r9, #8]
   23f76:	2b00      	cmp	r3, #0
   23f78:	d1e9      	bne.n	23f4e <__sfvwrite_r+0x36>
   23f7a:	2000      	movs	r0, #0
   23f7c:	b003      	add	sp, #12
   23f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f82:	4621      	mov	r1, r4
   23f84:	4640      	mov	r0, r8
   23f86:	f000 f941 	bl	2420c <__swsetup_r>
   23f8a:	2800      	cmp	r0, #0
   23f8c:	f040 8138 	bne.w	24200 <__sfvwrite_r+0x2e8>
   23f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23f94:	683d      	ldr	r5, [r7, #0]
   23f96:	b298      	uxth	r0, r3
   23f98:	f010 0302 	ands.w	r3, r0, #2
   23f9c:	d1d1      	bne.n	23f42 <__sfvwrite_r+0x2a>
   23f9e:	f010 0901 	ands.w	r9, r0, #1
   23fa2:	d144      	bne.n	2402e <__sfvwrite_r+0x116>
   23fa4:	464e      	mov	r6, r9
   23fa6:	9700      	str	r7, [sp, #0]
   23fa8:	b346      	cbz	r6, 23ffc <__sfvwrite_r+0xe4>
   23faa:	0582      	lsls	r2, r0, #22
   23fac:	f8d4 b008 	ldr.w	fp, [r4, #8]
   23fb0:	f140 8085 	bpl.w	240be <__sfvwrite_r+0x1a6>
   23fb4:	45b3      	cmp	fp, r6
   23fb6:	465a      	mov	r2, fp
   23fb8:	f200 80b4 	bhi.w	24124 <__sfvwrite_r+0x20c>
   23fbc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   23fc0:	f040 80c1 	bne.w	24146 <__sfvwrite_r+0x22e>
   23fc4:	6820      	ldr	r0, [r4, #0]
   23fc6:	9201      	str	r2, [sp, #4]
   23fc8:	4649      	mov	r1, r9
   23fca:	f7f7 fd49 	bl	1ba60 <memmove>
   23fce:	68a3      	ldr	r3, [r4, #8]
   23fd0:	9a01      	ldr	r2, [sp, #4]
   23fd2:	eba3 010b 	sub.w	r1, r3, fp
   23fd6:	6823      	ldr	r3, [r4, #0]
   23fd8:	60a1      	str	r1, [r4, #8]
   23fda:	4413      	add	r3, r2
   23fdc:	46b2      	mov	sl, r6
   23fde:	6023      	str	r3, [r4, #0]
   23fe0:	2600      	movs	r6, #0
   23fe2:	9a00      	ldr	r2, [sp, #0]
   23fe4:	6893      	ldr	r3, [r2, #8]
   23fe6:	eba3 030a 	sub.w	r3, r3, sl
   23fea:	44d1      	add	r9, sl
   23fec:	6093      	str	r3, [r2, #8]
   23fee:	2b00      	cmp	r3, #0
   23ff0:	d0c3      	beq.n	23f7a <__sfvwrite_r+0x62>
   23ff2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   23ff6:	b280      	uxth	r0, r0
   23ff8:	2e00      	cmp	r6, #0
   23ffa:	d1d6      	bne.n	23faa <__sfvwrite_r+0x92>
   23ffc:	e9d5 9600 	ldrd	r9, r6, [r5]
   24000:	3508      	adds	r5, #8
   24002:	e7d1      	b.n	23fa8 <__sfvwrite_r+0x90>
   24004:	e9d5 a600 	ldrd	sl, r6, [r5]
   24008:	3508      	adds	r5, #8
   2400a:	e7a0      	b.n	23f4e <__sfvwrite_r+0x36>
   2400c:	4621      	mov	r1, r4
   2400e:	4640      	mov	r0, r8
   24010:	f7fc ff20 	bl	20e54 <_fflush_r>
   24014:	b388      	cbz	r0, 2407a <__sfvwrite_r+0x162>
   24016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2401a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2401e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24022:	81a3      	strh	r3, [r4, #12]
   24024:	b003      	add	sp, #12
   24026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2402a:	2000      	movs	r0, #0
   2402c:	4770      	bx	lr
   2402e:	461e      	mov	r6, r3
   24030:	46ba      	mov	sl, r7
   24032:	4699      	mov	r9, r3
   24034:	4618      	mov	r0, r3
   24036:	9500      	str	r5, [sp, #0]
   24038:	461f      	mov	r7, r3
   2403a:	b366      	cbz	r6, 24096 <__sfvwrite_r+0x17e>
   2403c:	2800      	cmp	r0, #0
   2403e:	d032      	beq.n	240a6 <__sfvwrite_r+0x18e>
   24040:	464a      	mov	r2, r9
   24042:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   24046:	6820      	ldr	r0, [r4, #0]
   24048:	68a5      	ldr	r5, [r4, #8]
   2404a:	42b2      	cmp	r2, r6
   2404c:	bf28      	it	cs
   2404e:	4632      	movcs	r2, r6
   24050:	4288      	cmp	r0, r1
   24052:	d904      	bls.n	2405e <__sfvwrite_r+0x146>
   24054:	eb05 0b03 	add.w	fp, r5, r3
   24058:	455a      	cmp	r2, fp
   2405a:	f300 80a7 	bgt.w	241ac <__sfvwrite_r+0x294>
   2405e:	4293      	cmp	r3, r2
   24060:	dc64      	bgt.n	2412c <__sfvwrite_r+0x214>
   24062:	69e1      	ldr	r1, [r4, #28]
   24064:	6a65      	ldr	r5, [r4, #36]	; 0x24
   24066:	463a      	mov	r2, r7
   24068:	4640      	mov	r0, r8
   2406a:	47a8      	blx	r5
   2406c:	f1b0 0b00 	subs.w	fp, r0, #0
   24070:	ddd1      	ble.n	24016 <__sfvwrite_r+0xfe>
   24072:	ebb9 090b 	subs.w	r9, r9, fp
   24076:	d0c9      	beq.n	2400c <__sfvwrite_r+0xf4>
   24078:	2001      	movs	r0, #1
   2407a:	f8da 3008 	ldr.w	r3, [sl, #8]
   2407e:	eba3 030b 	sub.w	r3, r3, fp
   24082:	445f      	add	r7, fp
   24084:	eba6 060b 	sub.w	r6, r6, fp
   24088:	f8ca 3008 	str.w	r3, [sl, #8]
   2408c:	2b00      	cmp	r3, #0
   2408e:	f43f af74 	beq.w	23f7a <__sfvwrite_r+0x62>
   24092:	2e00      	cmp	r6, #0
   24094:	d1d2      	bne.n	2403c <__sfvwrite_r+0x124>
   24096:	9a00      	ldr	r2, [sp, #0]
   24098:	6856      	ldr	r6, [r2, #4]
   2409a:	4613      	mov	r3, r2
   2409c:	3208      	adds	r2, #8
   2409e:	9200      	str	r2, [sp, #0]
   240a0:	2e00      	cmp	r6, #0
   240a2:	d0f8      	beq.n	24096 <__sfvwrite_r+0x17e>
   240a4:	681f      	ldr	r7, [r3, #0]
   240a6:	4632      	mov	r2, r6
   240a8:	210a      	movs	r1, #10
   240aa:	4638      	mov	r0, r7
   240ac:	f7f9 f8a8 	bl	1d200 <memchr>
   240b0:	2800      	cmp	r0, #0
   240b2:	f000 809c 	beq.w	241ee <__sfvwrite_r+0x2d6>
   240b6:	3001      	adds	r0, #1
   240b8:	eba0 0907 	sub.w	r9, r0, r7
   240bc:	e7c0      	b.n	24040 <__sfvwrite_r+0x128>
   240be:	6820      	ldr	r0, [r4, #0]
   240c0:	6923      	ldr	r3, [r4, #16]
   240c2:	4298      	cmp	r0, r3
   240c4:	d816      	bhi.n	240f4 <__sfvwrite_r+0x1dc>
   240c6:	6962      	ldr	r2, [r4, #20]
   240c8:	42b2      	cmp	r2, r6
   240ca:	d813      	bhi.n	240f4 <__sfvwrite_r+0x1dc>
   240cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   240d0:	42b3      	cmp	r3, r6
   240d2:	bf28      	it	cs
   240d4:	4633      	movcs	r3, r6
   240d6:	69e1      	ldr	r1, [r4, #28]
   240d8:	fb93 f3f2 	sdiv	r3, r3, r2
   240dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   240de:	fb02 f303 	mul.w	r3, r2, r3
   240e2:	4640      	mov	r0, r8
   240e4:	464a      	mov	r2, r9
   240e6:	47b8      	blx	r7
   240e8:	f1b0 0a00 	subs.w	sl, r0, #0
   240ec:	dd93      	ble.n	24016 <__sfvwrite_r+0xfe>
   240ee:	eba6 060a 	sub.w	r6, r6, sl
   240f2:	e776      	b.n	23fe2 <__sfvwrite_r+0xca>
   240f4:	45b3      	cmp	fp, r6
   240f6:	46da      	mov	sl, fp
   240f8:	bf28      	it	cs
   240fa:	46b2      	movcs	sl, r6
   240fc:	4652      	mov	r2, sl
   240fe:	4649      	mov	r1, r9
   24100:	f7f7 fcae 	bl	1ba60 <memmove>
   24104:	68a3      	ldr	r3, [r4, #8]
   24106:	6822      	ldr	r2, [r4, #0]
   24108:	eba3 030a 	sub.w	r3, r3, sl
   2410c:	4452      	add	r2, sl
   2410e:	60a3      	str	r3, [r4, #8]
   24110:	6022      	str	r2, [r4, #0]
   24112:	2b00      	cmp	r3, #0
   24114:	d1eb      	bne.n	240ee <__sfvwrite_r+0x1d6>
   24116:	4621      	mov	r1, r4
   24118:	4640      	mov	r0, r8
   2411a:	f7fc fe9b 	bl	20e54 <_fflush_r>
   2411e:	2800      	cmp	r0, #0
   24120:	d0e5      	beq.n	240ee <__sfvwrite_r+0x1d6>
   24122:	e778      	b.n	24016 <__sfvwrite_r+0xfe>
   24124:	6820      	ldr	r0, [r4, #0]
   24126:	46b3      	mov	fp, r6
   24128:	4632      	mov	r2, r6
   2412a:	e74c      	b.n	23fc6 <__sfvwrite_r+0xae>
   2412c:	4639      	mov	r1, r7
   2412e:	9201      	str	r2, [sp, #4]
   24130:	f7f7 fc96 	bl	1ba60 <memmove>
   24134:	9a01      	ldr	r2, [sp, #4]
   24136:	68a3      	ldr	r3, [r4, #8]
   24138:	1a9b      	subs	r3, r3, r2
   2413a:	60a3      	str	r3, [r4, #8]
   2413c:	6823      	ldr	r3, [r4, #0]
   2413e:	4413      	add	r3, r2
   24140:	6023      	str	r3, [r4, #0]
   24142:	4693      	mov	fp, r2
   24144:	e795      	b.n	24072 <__sfvwrite_r+0x15a>
   24146:	6823      	ldr	r3, [r4, #0]
   24148:	6921      	ldr	r1, [r4, #16]
   2414a:	eba3 0b01 	sub.w	fp, r3, r1
   2414e:	6963      	ldr	r3, [r4, #20]
   24150:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   24154:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   24158:	f10b 0301 	add.w	r3, fp, #1
   2415c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   24160:	4433      	add	r3, r6
   24162:	4553      	cmp	r3, sl
   24164:	4652      	mov	r2, sl
   24166:	bf84      	itt	hi
   24168:	469a      	movhi	sl, r3
   2416a:	4652      	movhi	r2, sl
   2416c:	0543      	lsls	r3, r0, #21
   2416e:	d52c      	bpl.n	241ca <__sfvwrite_r+0x2b2>
   24170:	4611      	mov	r1, r2
   24172:	4640      	mov	r0, r8
   24174:	f7f5 fbea 	bl	1994c <_malloc_r>
   24178:	2800      	cmp	r0, #0
   2417a:	d03b      	beq.n	241f4 <__sfvwrite_r+0x2dc>
   2417c:	465a      	mov	r2, fp
   2417e:	6921      	ldr	r1, [r4, #16]
   24180:	9001      	str	r0, [sp, #4]
   24182:	f7f2 fa8f 	bl	166a4 <memcpy>
   24186:	89a2      	ldrh	r2, [r4, #12]
   24188:	9b01      	ldr	r3, [sp, #4]
   2418a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2418e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   24192:	81a2      	strh	r2, [r4, #12]
   24194:	eb03 000b 	add.w	r0, r3, fp
   24198:	6123      	str	r3, [r4, #16]
   2419a:	ebaa 030b 	sub.w	r3, sl, fp
   2419e:	f8c4 a014 	str.w	sl, [r4, #20]
   241a2:	60a3      	str	r3, [r4, #8]
   241a4:	6020      	str	r0, [r4, #0]
   241a6:	46b3      	mov	fp, r6
   241a8:	4632      	mov	r2, r6
   241aa:	e70c      	b.n	23fc6 <__sfvwrite_r+0xae>
   241ac:	4639      	mov	r1, r7
   241ae:	465a      	mov	r2, fp
   241b0:	f7f7 fc56 	bl	1ba60 <memmove>
   241b4:	6823      	ldr	r3, [r4, #0]
   241b6:	445b      	add	r3, fp
   241b8:	6023      	str	r3, [r4, #0]
   241ba:	4621      	mov	r1, r4
   241bc:	4640      	mov	r0, r8
   241be:	f7fc fe49 	bl	20e54 <_fflush_r>
   241c2:	2800      	cmp	r0, #0
   241c4:	f43f af55 	beq.w	24072 <__sfvwrite_r+0x15a>
   241c8:	e725      	b.n	24016 <__sfvwrite_r+0xfe>
   241ca:	4640      	mov	r0, r8
   241cc:	f7f5 fe74 	bl	19eb8 <_realloc_r>
   241d0:	4603      	mov	r3, r0
   241d2:	2800      	cmp	r0, #0
   241d4:	d1de      	bne.n	24194 <__sfvwrite_r+0x27c>
   241d6:	6921      	ldr	r1, [r4, #16]
   241d8:	4640      	mov	r0, r8
   241da:	f7f9 f983 	bl	1d4e4 <_free_r>
   241de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   241e2:	220c      	movs	r2, #12
   241e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   241e8:	f8c8 2000 	str.w	r2, [r8]
   241ec:	e715      	b.n	2401a <__sfvwrite_r+0x102>
   241ee:	1c72      	adds	r2, r6, #1
   241f0:	4691      	mov	r9, r2
   241f2:	e726      	b.n	24042 <__sfvwrite_r+0x12a>
   241f4:	220c      	movs	r2, #12
   241f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   241fa:	f8c8 2000 	str.w	r2, [r8]
   241fe:	e70c      	b.n	2401a <__sfvwrite_r+0x102>
   24200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24204:	e6ba      	b.n	23f7c <__sfvwrite_r+0x64>
   24206:	bf00      	nop
   24208:	7ffffc00 	.word	0x7ffffc00

0002420c <__swsetup_r>:
   2420c:	b538      	push	{r3, r4, r5, lr}
   2420e:	4b31      	ldr	r3, [pc, #196]	; (242d4 <__swsetup_r+0xc8>)
   24210:	681b      	ldr	r3, [r3, #0]
   24212:	4605      	mov	r5, r0
   24214:	460c      	mov	r4, r1
   24216:	b113      	cbz	r3, 2421e <__swsetup_r+0x12>
   24218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2421a:	2a00      	cmp	r2, #0
   2421c:	d04e      	beq.n	242bc <__swsetup_r+0xb0>
   2421e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24222:	0718      	lsls	r0, r3, #28
   24224:	b29a      	uxth	r2, r3
   24226:	d51c      	bpl.n	24262 <__swsetup_r+0x56>
   24228:	6921      	ldr	r1, [r4, #16]
   2422a:	b329      	cbz	r1, 24278 <__swsetup_r+0x6c>
   2422c:	f012 0001 	ands.w	r0, r2, #1
   24230:	d007      	beq.n	24242 <__swsetup_r+0x36>
   24232:	2000      	movs	r0, #0
   24234:	60a0      	str	r0, [r4, #8]
   24236:	6960      	ldr	r0, [r4, #20]
   24238:	4240      	negs	r0, r0
   2423a:	61a0      	str	r0, [r4, #24]
   2423c:	b139      	cbz	r1, 2424e <__swsetup_r+0x42>
   2423e:	2000      	movs	r0, #0
   24240:	bd38      	pop	{r3, r4, r5, pc}
   24242:	0795      	lsls	r5, r2, #30
   24244:	bf58      	it	pl
   24246:	6960      	ldrpl	r0, [r4, #20]
   24248:	60a0      	str	r0, [r4, #8]
   2424a:	2900      	cmp	r1, #0
   2424c:	d1f7      	bne.n	2423e <__swsetup_r+0x32>
   2424e:	0612      	lsls	r2, r2, #24
   24250:	bf58      	it	pl
   24252:	4608      	movpl	r0, r1
   24254:	d5f4      	bpl.n	24240 <__swsetup_r+0x34>
   24256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2425a:	81a3      	strh	r3, [r4, #12]
   2425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24260:	bd38      	pop	{r3, r4, r5, pc}
   24262:	06d1      	lsls	r1, r2, #27
   24264:	d52e      	bpl.n	242c4 <__swsetup_r+0xb8>
   24266:	0752      	lsls	r2, r2, #29
   24268:	d414      	bmi.n	24294 <__swsetup_r+0x88>
   2426a:	6921      	ldr	r1, [r4, #16]
   2426c:	f043 0308 	orr.w	r3, r3, #8
   24270:	81a3      	strh	r3, [r4, #12]
   24272:	b29a      	uxth	r2, r3
   24274:	2900      	cmp	r1, #0
   24276:	d1d9      	bne.n	2422c <__swsetup_r+0x20>
   24278:	f402 7020 	and.w	r0, r2, #640	; 0x280
   2427c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   24280:	d0d4      	beq.n	2422c <__swsetup_r+0x20>
   24282:	4621      	mov	r1, r4
   24284:	4628      	mov	r0, r5
   24286:	f000 f997 	bl	245b8 <__smakebuf_r>
   2428a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2428e:	6921      	ldr	r1, [r4, #16]
   24290:	b29a      	uxth	r2, r3
   24292:	e7cb      	b.n	2422c <__swsetup_r+0x20>
   24294:	6b21      	ldr	r1, [r4, #48]	; 0x30
   24296:	b151      	cbz	r1, 242ae <__swsetup_r+0xa2>
   24298:	f104 0240 	add.w	r2, r4, #64	; 0x40
   2429c:	4291      	cmp	r1, r2
   2429e:	d004      	beq.n	242aa <__swsetup_r+0x9e>
   242a0:	4628      	mov	r0, r5
   242a2:	f7f9 f91f 	bl	1d4e4 <_free_r>
   242a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   242aa:	2200      	movs	r2, #0
   242ac:	6322      	str	r2, [r4, #48]	; 0x30
   242ae:	6921      	ldr	r1, [r4, #16]
   242b0:	2200      	movs	r2, #0
   242b2:	e9c4 1200 	strd	r1, r2, [r4]
   242b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   242ba:	e7d7      	b.n	2426c <__swsetup_r+0x60>
   242bc:	4618      	mov	r0, r3
   242be:	f7f7 f9c5 	bl	1b64c <__sinit>
   242c2:	e7ac      	b.n	2421e <__swsetup_r+0x12>
   242c4:	2209      	movs	r2, #9
   242c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   242ca:	602a      	str	r2, [r5, #0]
   242cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   242d0:	81a3      	strh	r3, [r4, #12]
   242d2:	bd38      	pop	{r3, r4, r5, pc}
   242d4:	20008e58 	.word	0x20008e58

000242d8 <__fputwc>:
   242d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   242dc:	b082      	sub	sp, #8
   242de:	4682      	mov	sl, r0
   242e0:	4688      	mov	r8, r1
   242e2:	4614      	mov	r4, r2
   242e4:	f7f8 fcf6 	bl	1ccd4 <__locale_mb_cur_max>
   242e8:	2801      	cmp	r0, #1
   242ea:	d103      	bne.n	242f4 <__fputwc+0x1c>
   242ec:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   242f0:	2bfe      	cmp	r3, #254	; 0xfe
   242f2:	d937      	bls.n	24364 <__fputwc+0x8c>
   242f4:	466d      	mov	r5, sp
   242f6:	4642      	mov	r2, r8
   242f8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   242fc:	4629      	mov	r1, r5
   242fe:	4650      	mov	r0, sl
   24300:	f7fd fe10 	bl	21f24 <_wcrtomb_r>
   24304:	1c42      	adds	r2, r0, #1
   24306:	4606      	mov	r6, r0
   24308:	d033      	beq.n	24372 <__fputwc+0x9a>
   2430a:	b330      	cbz	r0, 2435a <__fputwc+0x82>
   2430c:	f89d c000 	ldrb.w	ip, [sp]
   24310:	f1c5 0901 	rsb	r9, r5, #1
   24314:	e00a      	b.n	2432c <__fputwc+0x54>
   24316:	6823      	ldr	r3, [r4, #0]
   24318:	1c5a      	adds	r2, r3, #1
   2431a:	6022      	str	r2, [r4, #0]
   2431c:	f883 c000 	strb.w	ip, [r3]
   24320:	eb09 0305 	add.w	r3, r9, r5
   24324:	42b3      	cmp	r3, r6
   24326:	d218      	bcs.n	2435a <__fputwc+0x82>
   24328:	f815 cf01 	ldrb.w	ip, [r5, #1]!
   2432c:	68a3      	ldr	r3, [r4, #8]
   2432e:	3b01      	subs	r3, #1
   24330:	2b00      	cmp	r3, #0
   24332:	60a3      	str	r3, [r4, #8]
   24334:	daef      	bge.n	24316 <__fputwc+0x3e>
   24336:	69a7      	ldr	r7, [r4, #24]
   24338:	42bb      	cmp	r3, r7
   2433a:	4661      	mov	r1, ip
   2433c:	4622      	mov	r2, r4
   2433e:	4650      	mov	r0, sl
   24340:	db02      	blt.n	24348 <__fputwc+0x70>
   24342:	f1bc 0f0a 	cmp.w	ip, #10
   24346:	d1e6      	bne.n	24316 <__fputwc+0x3e>
   24348:	f000 f9d2 	bl	246f0 <__swbuf_r>
   2434c:	1c43      	adds	r3, r0, #1
   2434e:	d1e7      	bne.n	24320 <__fputwc+0x48>
   24350:	4606      	mov	r6, r0
   24352:	4630      	mov	r0, r6
   24354:	b002      	add	sp, #8
   24356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2435a:	4646      	mov	r6, r8
   2435c:	4630      	mov	r0, r6
   2435e:	b002      	add	sp, #8
   24360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24364:	fa5f fc88 	uxtb.w	ip, r8
   24368:	f88d c000 	strb.w	ip, [sp]
   2436c:	4606      	mov	r6, r0
   2436e:	466d      	mov	r5, sp
   24370:	e7ce      	b.n	24310 <__fputwc+0x38>
   24372:	89a3      	ldrh	r3, [r4, #12]
   24374:	4630      	mov	r0, r6
   24376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2437a:	81a3      	strh	r3, [r4, #12]
   2437c:	b002      	add	sp, #8
   2437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24382:	bf00      	nop

00024384 <_fputwc_r>:
   24384:	b530      	push	{r4, r5, lr}
   24386:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24388:	f013 0f01 	tst.w	r3, #1
   2438c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   24390:	4614      	mov	r4, r2
   24392:	b083      	sub	sp, #12
   24394:	4605      	mov	r5, r0
   24396:	b29a      	uxth	r2, r3
   24398:	d101      	bne.n	2439e <_fputwc_r+0x1a>
   2439a:	0598      	lsls	r0, r3, #22
   2439c:	d51c      	bpl.n	243d8 <_fputwc_r+0x54>
   2439e:	0490      	lsls	r0, r2, #18
   243a0:	d406      	bmi.n	243b0 <_fputwc_r+0x2c>
   243a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   243a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   243a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   243ac:	81a3      	strh	r3, [r4, #12]
   243ae:	6662      	str	r2, [r4, #100]	; 0x64
   243b0:	4622      	mov	r2, r4
   243b2:	4628      	mov	r0, r5
   243b4:	f7ff ff90 	bl	242d8 <__fputwc>
   243b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   243ba:	07da      	lsls	r2, r3, #31
   243bc:	4605      	mov	r5, r0
   243be:	d402      	bmi.n	243c6 <_fputwc_r+0x42>
   243c0:	89a3      	ldrh	r3, [r4, #12]
   243c2:	059b      	lsls	r3, r3, #22
   243c4:	d502      	bpl.n	243cc <_fputwc_r+0x48>
   243c6:	4628      	mov	r0, r5
   243c8:	b003      	add	sp, #12
   243ca:	bd30      	pop	{r4, r5, pc}
   243cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   243ce:	f7f8 fd41 	bl	1ce54 <__retarget_lock_release_recursive>
   243d2:	4628      	mov	r0, r5
   243d4:	b003      	add	sp, #12
   243d6:	bd30      	pop	{r4, r5, pc}
   243d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   243da:	9101      	str	r1, [sp, #4]
   243dc:	f7f8 fd32 	bl	1ce44 <__retarget_lock_acquire_recursive>
   243e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   243e4:	9901      	ldr	r1, [sp, #4]
   243e6:	b29a      	uxth	r2, r3
   243e8:	e7d9      	b.n	2439e <_fputwc_r+0x1a>
   243ea:	bf00      	nop

000243ec <fputwc>:
   243ec:	4b1b      	ldr	r3, [pc, #108]	; (2445c <fputwc+0x70>)
   243ee:	b570      	push	{r4, r5, r6, lr}
   243f0:	681e      	ldr	r6, [r3, #0]
   243f2:	4605      	mov	r5, r0
   243f4:	460c      	mov	r4, r1
   243f6:	b10e      	cbz	r6, 243fc <fputwc+0x10>
   243f8:	6b73      	ldr	r3, [r6, #52]	; 0x34
   243fa:	b35b      	cbz	r3, 24454 <fputwc+0x68>
   243fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   243fe:	f013 0f01 	tst.w	r3, #1
   24402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24406:	b29a      	uxth	r2, r3
   24408:	d101      	bne.n	2440e <fputwc+0x22>
   2440a:	0598      	lsls	r0, r3, #22
   2440c:	d51b      	bpl.n	24446 <fputwc+0x5a>
   2440e:	0491      	lsls	r1, r2, #18
   24410:	d406      	bmi.n	24420 <fputwc+0x34>
   24412:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24414:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   24418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2441c:	81a3      	strh	r3, [r4, #12]
   2441e:	6662      	str	r2, [r4, #100]	; 0x64
   24420:	4622      	mov	r2, r4
   24422:	4629      	mov	r1, r5
   24424:	4630      	mov	r0, r6
   24426:	f7ff ff57 	bl	242d8 <__fputwc>
   2442a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2442c:	07da      	lsls	r2, r3, #31
   2442e:	4605      	mov	r5, r0
   24430:	d402      	bmi.n	24438 <fputwc+0x4c>
   24432:	89a3      	ldrh	r3, [r4, #12]
   24434:	059b      	lsls	r3, r3, #22
   24436:	d501      	bpl.n	2443c <fputwc+0x50>
   24438:	4628      	mov	r0, r5
   2443a:	bd70      	pop	{r4, r5, r6, pc}
   2443c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2443e:	f7f8 fd09 	bl	1ce54 <__retarget_lock_release_recursive>
   24442:	4628      	mov	r0, r5
   24444:	bd70      	pop	{r4, r5, r6, pc}
   24446:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24448:	f7f8 fcfc 	bl	1ce44 <__retarget_lock_acquire_recursive>
   2444c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24450:	b29a      	uxth	r2, r3
   24452:	e7dc      	b.n	2440e <fputwc+0x22>
   24454:	4630      	mov	r0, r6
   24456:	f7f7 f8f9 	bl	1b64c <__sinit>
   2445a:	e7cf      	b.n	243fc <fputwc+0x10>
   2445c:	20008e58 	.word	0x20008e58

00024460 <_wcsnrtombs_l>:
   24460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24464:	b08b      	sub	sp, #44	; 0x2c
   24466:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   2446a:	9f14      	ldr	r7, [sp, #80]	; 0x50
   2446c:	9103      	str	r1, [sp, #12]
   2446e:	4681      	mov	r9, r0
   24470:	9205      	str	r2, [sp, #20]
   24472:	461e      	mov	r6, r3
   24474:	f1b8 0f00 	cmp.w	r8, #0
   24478:	d05c      	beq.n	24534 <_wcsnrtombs_l+0xd4>
   2447a:	9b03      	ldr	r3, [sp, #12]
   2447c:	2b00      	cmp	r3, #0
   2447e:	d05e      	beq.n	2453e <_wcsnrtombs_l+0xde>
   24480:	9b05      	ldr	r3, [sp, #20]
   24482:	681d      	ldr	r5, [r3, #0]
   24484:	2f00      	cmp	r7, #0
   24486:	d06a      	beq.n	2455e <_wcsnrtombs_l+0xfe>
   24488:	1e74      	subs	r4, r6, #1
   2448a:	b34e      	cbz	r6, 244e0 <_wcsnrtombs_l+0x80>
   2448c:	9b03      	ldr	r3, [sp, #12]
   2448e:	9304      	str	r3, [sp, #16]
   24490:	3d04      	subs	r5, #4
   24492:	2600      	movs	r6, #0
   24494:	9501      	str	r5, [sp, #4]
   24496:	e00b      	b.n	244b0 <_wcsnrtombs_l+0x50>
   24498:	9b03      	ldr	r3, [sp, #12]
   2449a:	bb2b      	cbnz	r3, 244e8 <_wcsnrtombs_l+0x88>
   2449c:	9b01      	ldr	r3, [sp, #4]
   2449e:	681a      	ldr	r2, [r3, #0]
   244a0:	2a00      	cmp	r2, #0
   244a2:	d03a      	beq.n	2451a <_wcsnrtombs_l+0xba>
   244a4:	45bc      	cmp	ip, r7
   244a6:	d25c      	bcs.n	24562 <_wcsnrtombs_l+0x102>
   244a8:	3c01      	subs	r4, #1
   244aa:	1c63      	adds	r3, r4, #1
   244ac:	4666      	mov	r6, ip
   244ae:	d017      	beq.n	244e0 <_wcsnrtombs_l+0x80>
   244b0:	f8d8 3000 	ldr.w	r3, [r8]
   244b4:	9302      	str	r3, [sp, #8]
   244b6:	9b01      	ldr	r3, [sp, #4]
   244b8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   244bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
   244c0:	9301      	str	r3, [sp, #4]
   244c2:	a907      	add	r1, sp, #28
   244c4:	4643      	mov	r3, r8
   244c6:	4648      	mov	r0, r9
   244c8:	f8d8 b004 	ldr.w	fp, [r8, #4]
   244cc:	47a8      	blx	r5
   244ce:	1c42      	adds	r2, r0, #1
   244d0:	d03a      	beq.n	24548 <_wcsnrtombs_l+0xe8>
   244d2:	eb00 0c06 	add.w	ip, r0, r6
   244d6:	45bc      	cmp	ip, r7
   244d8:	d9de      	bls.n	24498 <_wcsnrtombs_l+0x38>
   244da:	9b02      	ldr	r3, [sp, #8]
   244dc:	e9c8 3b00 	strd	r3, fp, [r8]
   244e0:	4630      	mov	r0, r6
   244e2:	b00b      	add	sp, #44	; 0x2c
   244e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244e8:	2800      	cmp	r0, #0
   244ea:	dd0e      	ble.n	2450a <_wcsnrtombs_l+0xaa>
   244ec:	9b04      	ldr	r3, [sp, #16]
   244ee:	9d01      	ldr	r5, [sp, #4]
   244f0:	4418      	add	r0, r3
   244f2:	1e5a      	subs	r2, r3, #1
   244f4:	a907      	add	r1, sp, #28
   244f6:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   244fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   244fe:	f802 3f01 	strb.w	r3, [r2, #1]!
   24502:	4572      	cmp	r2, lr
   24504:	d1f9      	bne.n	244fa <_wcsnrtombs_l+0x9a>
   24506:	9501      	str	r5, [sp, #4]
   24508:	9004      	str	r0, [sp, #16]
   2450a:	9b05      	ldr	r3, [sp, #20]
   2450c:	681a      	ldr	r2, [r3, #0]
   2450e:	3204      	adds	r2, #4
   24510:	601a      	str	r2, [r3, #0]
   24512:	9b01      	ldr	r3, [sp, #4]
   24514:	681a      	ldr	r2, [r3, #0]
   24516:	2a00      	cmp	r2, #0
   24518:	d1c4      	bne.n	244a4 <_wcsnrtombs_l+0x44>
   2451a:	9b03      	ldr	r3, [sp, #12]
   2451c:	b10b      	cbz	r3, 24522 <_wcsnrtombs_l+0xc2>
   2451e:	9b05      	ldr	r3, [sp, #20]
   24520:	601a      	str	r2, [r3, #0]
   24522:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   24526:	2200      	movs	r2, #0
   24528:	4630      	mov	r0, r6
   2452a:	f8c8 2000 	str.w	r2, [r8]
   2452e:	b00b      	add	sp, #44	; 0x2c
   24530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24534:	9b03      	ldr	r3, [sp, #12]
   24536:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   2453a:	2b00      	cmp	r3, #0
   2453c:	d1a0      	bne.n	24480 <_wcsnrtombs_l+0x20>
   2453e:	9b05      	ldr	r3, [sp, #20]
   24540:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   24544:	681d      	ldr	r5, [r3, #0]
   24546:	e79f      	b.n	24488 <_wcsnrtombs_l+0x28>
   24548:	4606      	mov	r6, r0
   2454a:	218a      	movs	r1, #138	; 0x8a
   2454c:	2200      	movs	r2, #0
   2454e:	4630      	mov	r0, r6
   24550:	f8c9 1000 	str.w	r1, [r9]
   24554:	f8c8 2000 	str.w	r2, [r8]
   24558:	b00b      	add	sp, #44	; 0x2c
   2455a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2455e:	463e      	mov	r6, r7
   24560:	e7be      	b.n	244e0 <_wcsnrtombs_l+0x80>
   24562:	4666      	mov	r6, ip
   24564:	e7bc      	b.n	244e0 <_wcsnrtombs_l+0x80>
   24566:	bf00      	nop

00024568 <_wcsnrtombs_r>:
   24568:	b510      	push	{r4, lr}
   2456a:	b084      	sub	sp, #16
   2456c:	4c05      	ldr	r4, [pc, #20]	; (24584 <_wcsnrtombs_r+0x1c>)
   2456e:	9806      	ldr	r0, [sp, #24]
   24570:	9000      	str	r0, [sp, #0]
   24572:	9807      	ldr	r0, [sp, #28]
   24574:	9001      	str	r0, [sp, #4]
   24576:	4804      	ldr	r0, [pc, #16]	; (24588 <_wcsnrtombs_r+0x20>)
   24578:	6800      	ldr	r0, [r0, #0]
   2457a:	9402      	str	r4, [sp, #8]
   2457c:	f7ff ff70 	bl	24460 <_wcsnrtombs_l>
   24580:	b004      	add	sp, #16
   24582:	bd10      	pop	{r4, pc}
   24584:	200093a0 	.word	0x200093a0
   24588:	20008e58 	.word	0x20008e58

0002458c <wcsnrtombs>:
   2458c:	b500      	push	{lr}
   2458e:	b085      	sub	sp, #20
   24590:	4684      	mov	ip, r0
   24592:	9300      	str	r3, [sp, #0]
   24594:	4806      	ldr	r0, [pc, #24]	; (245b0 <wcsnrtombs+0x24>)
   24596:	9b06      	ldr	r3, [sp, #24]
   24598:	9301      	str	r3, [sp, #4]
   2459a:	4b06      	ldr	r3, [pc, #24]	; (245b4 <wcsnrtombs+0x28>)
   2459c:	6800      	ldr	r0, [r0, #0]
   2459e:	9302      	str	r3, [sp, #8]
   245a0:	4613      	mov	r3, r2
   245a2:	460a      	mov	r2, r1
   245a4:	4661      	mov	r1, ip
   245a6:	f7ff ff5b 	bl	24460 <_wcsnrtombs_l>
   245aa:	b005      	add	sp, #20
   245ac:	f85d fb04 	ldr.w	pc, [sp], #4
   245b0:	20008e58 	.word	0x20008e58
   245b4:	200093a0 	.word	0x200093a0

000245b8 <__smakebuf_r>:
   245b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245bc:	898b      	ldrh	r3, [r1, #12]
   245be:	460c      	mov	r4, r1
   245c0:	0799      	lsls	r1, r3, #30
   245c2:	b096      	sub	sp, #88	; 0x58
   245c4:	d508      	bpl.n	245d8 <__smakebuf_r+0x20>
   245c6:	f104 0343 	add.w	r3, r4, #67	; 0x43
   245ca:	2201      	movs	r2, #1
   245cc:	e9c4 3204 	strd	r3, r2, [r4, #16]
   245d0:	6023      	str	r3, [r4, #0]
   245d2:	b016      	add	sp, #88	; 0x58
   245d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   245d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   245dc:	2900      	cmp	r1, #0
   245de:	4606      	mov	r6, r0
   245e0:	db25      	blt.n	2462e <__smakebuf_r+0x76>
   245e2:	466a      	mov	r2, sp
   245e4:	f000 f8e8 	bl	247b8 <_fstat_r>
   245e8:	2800      	cmp	r0, #0
   245ea:	db1f      	blt.n	2462c <__smakebuf_r+0x74>
   245ec:	9d01      	ldr	r5, [sp, #4]
   245ee:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   245f2:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   245f6:	fab5 f585 	clz	r5, r5
   245fa:	f44f 6880 	mov.w	r8, #1024	; 0x400
   245fe:	096d      	lsrs	r5, r5, #5
   24600:	f44f 6700 	mov.w	r7, #2048	; 0x800
   24604:	4641      	mov	r1, r8
   24606:	4630      	mov	r0, r6
   24608:	f7f5 f9a0 	bl	1994c <_malloc_r>
   2460c:	b1e0      	cbz	r0, 24648 <__smakebuf_r+0x90>
   2460e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24612:	f8c4 8014 	str.w	r8, [r4, #20]
   24616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2461a:	6020      	str	r0, [r4, #0]
   2461c:	6120      	str	r0, [r4, #16]
   2461e:	81a3      	strh	r3, [r4, #12]
   24620:	bb35      	cbnz	r5, 24670 <__smakebuf_r+0xb8>
   24622:	433b      	orrs	r3, r7
   24624:	81a3      	strh	r3, [r4, #12]
   24626:	b016      	add	sp, #88	; 0x58
   24628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2462c:	89a3      	ldrh	r3, [r4, #12]
   2462e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   24632:	d019      	beq.n	24668 <__smakebuf_r+0xb0>
   24634:	f04f 0840 	mov.w	r8, #64	; 0x40
   24638:	2500      	movs	r5, #0
   2463a:	4641      	mov	r1, r8
   2463c:	4630      	mov	r0, r6
   2463e:	462f      	mov	r7, r5
   24640:	f7f5 f984 	bl	1994c <_malloc_r>
   24644:	2800      	cmp	r0, #0
   24646:	d1e2      	bne.n	2460e <__smakebuf_r+0x56>
   24648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2464c:	059a      	lsls	r2, r3, #22
   2464e:	d4c0      	bmi.n	245d2 <__smakebuf_r+0x1a>
   24650:	f023 0303 	bic.w	r3, r3, #3
   24654:	f104 0243 	add.w	r2, r4, #67	; 0x43
   24658:	f043 0302 	orr.w	r3, r3, #2
   2465c:	2101      	movs	r1, #1
   2465e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   24662:	81a3      	strh	r3, [r4, #12]
   24664:	6022      	str	r2, [r4, #0]
   24666:	e7b4      	b.n	245d2 <__smakebuf_r+0x1a>
   24668:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2466c:	462f      	mov	r7, r5
   2466e:	e7c9      	b.n	24604 <__smakebuf_r+0x4c>
   24670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24674:	4630      	mov	r0, r6
   24676:	f000 f8b5 	bl	247e4 <_isatty_r>
   2467a:	b910      	cbnz	r0, 24682 <__smakebuf_r+0xca>
   2467c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24680:	e7cf      	b.n	24622 <__smakebuf_r+0x6a>
   24682:	89a3      	ldrh	r3, [r4, #12]
   24684:	f023 0303 	bic.w	r3, r3, #3
   24688:	f043 0301 	orr.w	r3, r3, #1
   2468c:	b21b      	sxth	r3, r3
   2468e:	e7c8      	b.n	24622 <__smakebuf_r+0x6a>

00024690 <__swhatbuf_r>:
   24690:	b570      	push	{r4, r5, r6, lr}
   24692:	460c      	mov	r4, r1
   24694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24698:	2900      	cmp	r1, #0
   2469a:	b096      	sub	sp, #88	; 0x58
   2469c:	4615      	mov	r5, r2
   2469e:	461e      	mov	r6, r3
   246a0:	db14      	blt.n	246cc <__swhatbuf_r+0x3c>
   246a2:	466a      	mov	r2, sp
   246a4:	f000 f888 	bl	247b8 <_fstat_r>
   246a8:	2800      	cmp	r0, #0
   246aa:	db0f      	blt.n	246cc <__swhatbuf_r+0x3c>
   246ac:	9901      	ldr	r1, [sp, #4]
   246ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   246b2:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
   246b6:	fab1 f181 	clz	r1, r1
   246ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   246be:	0949      	lsrs	r1, r1, #5
   246c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
   246c4:	6031      	str	r1, [r6, #0]
   246c6:	602b      	str	r3, [r5, #0]
   246c8:	b016      	add	sp, #88	; 0x58
   246ca:	bd70      	pop	{r4, r5, r6, pc}
   246cc:	89a1      	ldrh	r1, [r4, #12]
   246ce:	f011 0180 	ands.w	r1, r1, #128	; 0x80
   246d2:	d006      	beq.n	246e2 <__swhatbuf_r+0x52>
   246d4:	2100      	movs	r1, #0
   246d6:	2340      	movs	r3, #64	; 0x40
   246d8:	4608      	mov	r0, r1
   246da:	6031      	str	r1, [r6, #0]
   246dc:	602b      	str	r3, [r5, #0]
   246de:	b016      	add	sp, #88	; 0x58
   246e0:	bd70      	pop	{r4, r5, r6, pc}
   246e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   246e6:	4608      	mov	r0, r1
   246e8:	6031      	str	r1, [r6, #0]
   246ea:	602b      	str	r3, [r5, #0]
   246ec:	b016      	add	sp, #88	; 0x58
   246ee:	bd70      	pop	{r4, r5, r6, pc}

000246f0 <__swbuf_r>:
   246f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246f2:	460d      	mov	r5, r1
   246f4:	4614      	mov	r4, r2
   246f6:	4606      	mov	r6, r0
   246f8:	b110      	cbz	r0, 24700 <__swbuf_r+0x10>
   246fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   246fc:	2b00      	cmp	r3, #0
   246fe:	d04c      	beq.n	2479a <__swbuf_r+0xaa>
   24700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   24704:	69a3      	ldr	r3, [r4, #24]
   24706:	60a3      	str	r3, [r4, #8]
   24708:	0717      	lsls	r7, r2, #28
   2470a:	b290      	uxth	r0, r2
   2470c:	d51b      	bpl.n	24746 <__swbuf_r+0x56>
   2470e:	6923      	ldr	r3, [r4, #16]
   24710:	b1cb      	cbz	r3, 24746 <__swbuf_r+0x56>
   24712:	b2ed      	uxtb	r5, r5
   24714:	0481      	lsls	r1, r0, #18
   24716:	462f      	mov	r7, r5
   24718:	d522      	bpl.n	24760 <__swbuf_r+0x70>
   2471a:	6822      	ldr	r2, [r4, #0]
   2471c:	6961      	ldr	r1, [r4, #20]
   2471e:	1ad3      	subs	r3, r2, r3
   24720:	4299      	cmp	r1, r3
   24722:	dd29      	ble.n	24778 <__swbuf_r+0x88>
   24724:	3301      	adds	r3, #1
   24726:	68a1      	ldr	r1, [r4, #8]
   24728:	3901      	subs	r1, #1
   2472a:	60a1      	str	r1, [r4, #8]
   2472c:	1c51      	adds	r1, r2, #1
   2472e:	6021      	str	r1, [r4, #0]
   24730:	7015      	strb	r5, [r2, #0]
   24732:	6962      	ldr	r2, [r4, #20]
   24734:	429a      	cmp	r2, r3
   24736:	d027      	beq.n	24788 <__swbuf_r+0x98>
   24738:	89a3      	ldrh	r3, [r4, #12]
   2473a:	07db      	lsls	r3, r3, #31
   2473c:	d501      	bpl.n	24742 <__swbuf_r+0x52>
   2473e:	2d0a      	cmp	r5, #10
   24740:	d022      	beq.n	24788 <__swbuf_r+0x98>
   24742:	4638      	mov	r0, r7
   24744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24746:	4621      	mov	r1, r4
   24748:	4630      	mov	r0, r6
   2474a:	f7ff fd5f 	bl	2420c <__swsetup_r>
   2474e:	bb08      	cbnz	r0, 24794 <__swbuf_r+0xa4>
   24750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   24754:	6923      	ldr	r3, [r4, #16]
   24756:	b290      	uxth	r0, r2
   24758:	b2ed      	uxtb	r5, r5
   2475a:	0481      	lsls	r1, r0, #18
   2475c:	462f      	mov	r7, r5
   2475e:	d4dc      	bmi.n	2471a <__swbuf_r+0x2a>
   24760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   24764:	81a2      	strh	r2, [r4, #12]
   24766:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24768:	6961      	ldr	r1, [r4, #20]
   2476a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   2476e:	6662      	str	r2, [r4, #100]	; 0x64
   24770:	6822      	ldr	r2, [r4, #0]
   24772:	1ad3      	subs	r3, r2, r3
   24774:	4299      	cmp	r1, r3
   24776:	dcd5      	bgt.n	24724 <__swbuf_r+0x34>
   24778:	4621      	mov	r1, r4
   2477a:	4630      	mov	r0, r6
   2477c:	f7fc fb6a 	bl	20e54 <_fflush_r>
   24780:	b940      	cbnz	r0, 24794 <__swbuf_r+0xa4>
   24782:	6822      	ldr	r2, [r4, #0]
   24784:	2301      	movs	r3, #1
   24786:	e7ce      	b.n	24726 <__swbuf_r+0x36>
   24788:	4621      	mov	r1, r4
   2478a:	4630      	mov	r0, r6
   2478c:	f7fc fb62 	bl	20e54 <_fflush_r>
   24790:	2800      	cmp	r0, #0
   24792:	d0d6      	beq.n	24742 <__swbuf_r+0x52>
   24794:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   24798:	e7d3      	b.n	24742 <__swbuf_r+0x52>
   2479a:	f7f6 ff57 	bl	1b64c <__sinit>
   2479e:	e7af      	b.n	24700 <__swbuf_r+0x10>

000247a0 <__swbuf>:
   247a0:	b410      	push	{r4}
   247a2:	4c04      	ldr	r4, [pc, #16]	; (247b4 <__swbuf+0x14>)
   247a4:	4603      	mov	r3, r0
   247a6:	460a      	mov	r2, r1
   247a8:	6820      	ldr	r0, [r4, #0]
   247aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   247ae:	4619      	mov	r1, r3
   247b0:	f7ff bf9e 	b.w	246f0 <__swbuf_r>
   247b4:	20008e58 	.word	0x20008e58

000247b8 <_fstat_r>:
   247b8:	b570      	push	{r4, r5, r6, lr}
   247ba:	460c      	mov	r4, r1
   247bc:	4d08      	ldr	r5, [pc, #32]	; (247e0 <_fstat_r+0x28>)
   247be:	4603      	mov	r3, r0
   247c0:	2600      	movs	r6, #0
   247c2:	4620      	mov	r0, r4
   247c4:	4611      	mov	r1, r2
   247c6:	461c      	mov	r4, r3
   247c8:	602e      	str	r6, [r5, #0]
   247ca:	f7f2 fb93 	bl	16ef4 <_fstat>
   247ce:	1c43      	adds	r3, r0, #1
   247d0:	d000      	beq.n	247d4 <_fstat_r+0x1c>
   247d2:	bd70      	pop	{r4, r5, r6, pc}
   247d4:	682b      	ldr	r3, [r5, #0]
   247d6:	2b00      	cmp	r3, #0
   247d8:	d0fb      	beq.n	247d2 <_fstat_r+0x1a>
   247da:	6023      	str	r3, [r4, #0]
   247dc:	bd70      	pop	{r4, r5, r6, pc}
   247de:	bf00      	nop
   247e0:	2000e520 	.word	0x2000e520

000247e4 <_isatty_r>:
   247e4:	b538      	push	{r3, r4, r5, lr}
   247e6:	4d07      	ldr	r5, [pc, #28]	; (24804 <_isatty_r+0x20>)
   247e8:	2200      	movs	r2, #0
   247ea:	4604      	mov	r4, r0
   247ec:	4608      	mov	r0, r1
   247ee:	602a      	str	r2, [r5, #0]
   247f0:	f7f2 fb86 	bl	16f00 <_isatty>
   247f4:	1c43      	adds	r3, r0, #1
   247f6:	d000      	beq.n	247fa <_isatty_r+0x16>
   247f8:	bd38      	pop	{r3, r4, r5, pc}
   247fa:	682b      	ldr	r3, [r5, #0]
   247fc:	2b00      	cmp	r3, #0
   247fe:	d0fb      	beq.n	247f8 <_isatty_r+0x14>
   24800:	6023      	str	r3, [r4, #0]
   24802:	bd38      	pop	{r3, r4, r5, pc}
   24804:	2000e520 	.word	0x2000e520

00024808 <__aeabi_d2lz>:
   24808:	b508      	push	{r3, lr}
   2480a:	4602      	mov	r2, r0
   2480c:	460b      	mov	r3, r1
   2480e:	ec43 2b17 	vmov	d7, r2, r3
   24812:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   24816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2481a:	d403      	bmi.n	24824 <__aeabi_d2lz+0x1c>
   2481c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24820:	f000 b80a 	b.w	24838 <__aeabi_d2ulz>
   24824:	eeb1 7b47 	vneg.f64	d7, d7
   24828:	ec51 0b17 	vmov	r0, r1, d7
   2482c:	f000 f804 	bl	24838 <__aeabi_d2ulz>
   24830:	4240      	negs	r0, r0
   24832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24836:	bd08      	pop	{r3, pc}

00024838 <__aeabi_d2ulz>:
   24838:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 24868 <__aeabi_d2ulz+0x30>
   2483c:	ec41 0b17 	vmov	d7, r0, r1
   24840:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 24870 <__aeabi_d2ulz+0x38>
   24844:	ee27 6b06 	vmul.f64	d6, d7, d6
   24848:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   2484c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   24850:	eea4 7b45 	vfms.f64	d7, d4, d5
   24854:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   24858:	ee16 1a10 	vmov	r1, s12
   2485c:	ee17 0a90 	vmov	r0, s15
   24860:	4770      	bx	lr
   24862:	bf00      	nop
   24864:	f3af 8000 	nop.w
   24868:	00000000 	.word	0x00000000
   2486c:	3df00000 	.word	0x3df00000
   24870:	00000000 	.word	0x00000000
   24874:	41f00000 	.word	0x41f00000

00024878 <___init_veneer>:
   24878:	f85f f000 	ldr.w	pc, [pc]	; 2487c <___init_veneer+0x4>
   2487c:	60001fb1 	.word	0x60001fb1

00024880 <___reboot_Teensyduino__veneer>:
   24880:	f85f f000 	ldr.w	pc, [pc]	; 24884 <___reboot_Teensyduino__veneer+0x4>
   24884:	60001f09 	.word	0x60001f09

00024888 <___ZN7TwoWire5beginEv_veneer>:
   24888:	f85f f000 	ldr.w	pc, [pc]	; 2488c <___ZN7TwoWire5beginEv_veneer+0x4>
   2488c:	60001789 	.word	0x60001789

Disassembly of section .fini:

00024890 <_fini>:
   24890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24892:	bf00      	nop
