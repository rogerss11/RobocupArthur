
/home/local/svn/robobot/teensy_firmware_8/build/teensy_firmware_8.ino.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60002060 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00024890 l    d  .fini	00000000 .fini
00024894 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
2000a2c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60031260 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000012 memory_copy
60001414 l     F .text.code	0000001c memory_clear.constprop.0
60001430 l     F .text.code	0000021c ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 tempmon.c
2000f9d0 l     O .bss	00000004 s_hotCount
2000f9d4 l     O .bss	00000004 s_hotTemp
2000f9d8 l     O .bss	00000004 s_hot_ROOM
2000f9dc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 usb.c
00016f78 l     F .text.itcm	00000088 schedule_transfer
00017000 l     F .text.itcm	00000036 run_callbacks
00017038 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
2000f17c l     O .bss	00000008 endpoint0_buffer
2000f184 l     O .bss	00000004 endpoint0_notify_mask
2000dfc8 l     O .bss	00000008 endpoint0_setupdata
2000f188 l     O .bss	00000004 endpointN_notify_mask
2000f658 l     O .bss	00000008 reply_buffer
2000fc40 l     O .bss	00000001 sof_usage
2000fc47 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 analog.c
2000fc3b l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
000000e0 l     F .text.itcm	00000000 deregister_tm_clones
000000fc l     F .text.itcm	00000000 register_tm_clones
00000120 l     F .text.itcm	00000000 __do_global_dtors_aux
2000e0e8 l       .bss	00000001 completed.1
00000148 l     F .text.itcm	00000000 frame_dummy
2000e0ec l       .bss	00000018 object.0
60002000 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 udemo_behave.cpp
000001f8 l     F .text.itcm	00000070 UDemo_Behave::followLine(float) [clone .part.0]
0000072c l     F .text.itcm	00000020 _GLOBAL__sub_I_dbehave
00000000 l    df *ABS*	00000000 uad.cpp
00001d68 l     F .text.itcm	00000094 _GLOBAL__sub_I_ad
00000000 l    df *ABS*	00000000 uasenc.cpp
000021b0 l     F .text.itcm	00000048 _GLOBAL__sub_I_asenc
00000000 l    df *ABS*	00000000 ucommand.cpp
00002534 l     F .text.itcm	0000002c _GLOBAL__sub_I_command
00000000 l    df *ABS*	00000000 ucurrent.cpp
00002a10 l     F .text.itcm	00000050 _GLOBAL__sub_I_current
00000000 l    df *ABS*	00000000 udisplay.cpp
00002eb4 l     F .text.itcm	00000040 _GLOBAL__sub_I_display
00000000 l    df *ABS*	00000000 ueeconfig.cpp
00003310 l     F .text.itcm	00000068 EEConfig::decode(char const*) [clone .part.0]
00003658 l     F .text.itcm	00000024 _GLOBAL__sub_I_eeConfig
00000000 l    df *ABS*	00000000 uencoder.cpp
00004654 l     F .text.itcm	00000130 _GLOBAL__sub_I_encoder
00000000 l    df *ABS*	00000000 uimu2.cpp
000051dc l     F .text.itcm	000000a4 _GLOBAL__sub_I_imu2
00000000 l    df *ABS*	00000000 uirdist.cpp
000052d8 l     F .text.itcm	000000f0 UIrDist::estimateIrDistance() [clone .part.0]
0000570c l     F .text.itcm	00000058 _GLOBAL__sub_I_irdist
00000000 l    df *ABS*	00000000 uledband.cpp
00006034 l     F .text.itcm	0000004c _GLOBAL__sub_I_ledband
00000000 l    df *ABS*	00000000 ulinesensor.cpp
00006e8c l     F .text.itcm	000000d8 _GLOBAL__sub_I_ls
00000000 l    df *ABS*	00000000 ulog.cpp
00008508 l     F .text.itcm	00000058 _GLOBAL__sub_I_logger
2000264c l     O .data	00000023 CSWTCH.137
00000000 l    df *ABS*	00000000 umotor.cpp
0000901c l     F .text.itcm	00000058 _GLOBAL__sub_I_motor
00000000 l    df *ABS*	00000000 umotortest.cpp
0000a488 l     F .text.itcm	000000f8 _GLOBAL__sub_I_motortest
00000000 l    df *ABS*	00000000 urobot.cpp
0000b69c l     F .text.itcm	000000f0 _GLOBAL__sub_I_robot
00000000 l    df *ABS*	00000000 uservice.cpp
0000bacc l     F .text.itcm	0000002c _GLOBAL__sub_I_service
00000000 l    df *ABS*	00000000 uservo.cpp
0000c0bc l     F .text.itcm	0000002c _GLOBAL__sub_I_servo
00000000 l    df *ABS*	00000000 uusb.cpp
0000cec4 l     F .text.itcm	00000078 _GLOBAL__sub_I_usb
00000000 l    df *ABS*	00000000 uusbhost.cpp
0000dbd4 l     F .text.itcm	00000024 _GLOBAL__sub_I_usbhost
00000000 l    df *ABS*	00000000 bluetooth.cpp
0000fd9c l     F .text.itcm	00000024 _GLOBAL__sub_I_em_rx_tx2
00000000 l    df *ABS*	00000000 joystick.cpp
00014f54 l     F .text.itcm	00000028 _GLOBAL__sub_I_ack_rvd
2000fc33 l     O .bss	00000001 rumble_counter
2000fc34 l     O .bss	00000001 switch_packet_num
2000995c l     O .data	00000002 switch_start_input
20009960 l     O .data	00000005 xboxone_start_input
20009968 l     O .data	0000000c xbox360w_inquire_present
200026c0 l     O .data	00000006 xbox_axis_order_mapping
20008170 l     O .data	00000004 JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)::switch_bt_axis_order_mapping
20008174 l     O .data	00000020 JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)::dpad_to_buttons
20008194 l     O .data	00000006 JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)::xbox_bt_axis_order_mapping
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
00015920 l     F .text.itcm	00000084 pit_isr()
000159a4 l     F .text.itcm	00000020 __tcf_0
00015b38 l     F .text.itcm	0000002c _GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE
2000b080 l     O .bss	00000060 funct_table
00000000 l    df *ABS*	00000000 Adafruit_SSD1306_mod.cpp
00000dac l     F .text.itcm	00000088 Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]
00000e34 l     F .text.itcm	00000160 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]
60002060 l     O .text.progmem	00000008 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::premask
60002068 l     O .text.progmem	00000008 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::postmask
60002070 l     O .text.progmem	000002c0 splash1_data
60002330 l     O .text.progmem	000001a0 dtu_data
600024d0 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1
600024d4 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2
600024d8 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3
600024dc l     O .text.progmem	00000006 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5
600024e4 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrollright(unsigned char, unsigned char)::scrollList1a
600024e8 l     O .text.progmem	00000003 Adafruit_SSD1306::startscrollright(unsigned char, unsigned char)::scrollList1b
600024ec l     O .text.progmem	00000002 Adafruit_SSD1306::startscrollleft(unsigned char, unsigned char)::scrollList2a
600024f0 l     O .text.progmem	00000003 Adafruit_SSD1306::startscrollleft(unsigned char, unsigned char)::scrollList2b
600024f4 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3a
600024f8 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3b
600024fc l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3c
60002500 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4a
60002504 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4b
60002508 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4c
00000000 l    df *ABS*	00000000 usb_desc.c
200099dc l     O .data	00000012 device_descriptor
20009c0c l     O .data	00000028 microsoft_os_compatible_id_desc
20009c34 l     O .data	00000012 microsoft_os_string_desc
600026f8 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 interrupt.c
0001658c l     F .text.itcm	00000002 dummy_isr
20002670 l     O .data	00000014 CSWTCH.6
00000000 l    df *ABS*	00000000 teensy_firmware_8.ino.cpp
00000000 l    df *ABS*	00000000 AS5X47.cpp
00000000 l    df *ABS*	00000000 AS5X47Spi.cpp
00000000 l    df *ABS*	00000000 usubs.cpp
00000000 l    df *ABS*	00000000 usubss.cpp
00000000 l    df *ABS*	00000000 ADC.cpp
00000000 l    df *ABS*	00000000 ADC_Module.cpp
00000000 l    df *ABS*	00000000 MPU9250_asukiaaa.cpp
00000000 l    df *ABS*	00000000 Adafruit_GFX.cpp
200026c8 l     O .data	00000500 font
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 BluetoothConnection.cpp
00000000 l    df *ABS*	00000000 MassStorageDriver.cpp
00000000 l    df *ABS*	00000000 SerEMU.cpp
00000000 l    df *ABS*	00000000 adk.cpp
00000000 l    df *ABS*	00000000 antplus.cpp
00000000 l    df *ABS*	00000000 digitizer.cpp
00000000 l    df *ABS*	00000000 ehci.cpp
2000fc32 l     O .bss	00000001 port_state
2000e710 l     O .bss	00000004 active_timers
2000b000 l     O .bss	00000080 periodictable
2000e744 l     O .bss	00000100 uframe_bandwidth
2000e84c l     O .bss	00000004 async_followup_last
2000e850 l     O .bss	00000004 async_followup_first
2000e854 l     O .bss	00000004 periodic_followup_last
2000e858 l     O .bss	00000004 periodic_followup_first
2000e860 l     O .bss	00000004 rootdev
00000000 l    df *ABS*	00000000 enumeration.cpp
2000e844 l     O .bss	00000004 available_drivers
2000e85c l     O .bss	00000004 devlist
2000d7c0 l     O .bss	00000800 enumbuf
2000fc28 l     O .bss	00000002 enumlen
2000dfc0 l     O .bss	00000008 enumsetup
2000fc3a l     O .bss	00000001 USBHost::assign_address()::last_assigned_address
00000000 l    df *ABS*	00000000 hid.cpp
0001136c l     F .text.itcm	00000048 bitfield(unsigned char const*, unsigned long, unsigned long)
200099d4 l     O .data	00000004 USBHIDParser::control(Transfer_struct const*)::ps3_feature_F4_report
00000000 l    df *ABS*	00000000 hub.cpp
00012680 l     F .text.itcm	00000148 USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 memory.cpp
2000b0e0 l     O .bss	00000060 memory_Pipe
2000e714 l     O .bss	00000024 memory_Device
2000e738 l     O .bss	00000004 free_Pipe_list
2000b140 l     O .bss	00000100 memory_Transfer
2000e73c l     O .bss	00000004 free_Device_list
2000e740 l     O .bss	00000004 free_strbuf_list
2000e848 l     O .bss	00000004 free_Transfer_list
00000000 l    df *ABS*	00000000 WS2812Serial.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 eeprom.c
000160e4 l     F .text.itcm	0000005c flash_wait
2000fc3d l     O .bss	00000001 initialized
2000f9e4 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.S.o
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
000178e4 l     F .text.itcm	00000060 rx_queue_transfer
20200160 l     O .bss.dma	00001000 rx_buffer
00017944 l     F .text.itcm	000000b4 rx_event
000179f8 l     F .text.itcm	00000090 usb_serial_flush_callback
20201160 l     O .bss.dma	00002000 txbuffer
00017a88 l     F .text.itcm	000001b8 usb_serial_write.part.0
2000f9a0 l     O .bss	00000004 rx_available
2000f9a4 l     O .bss	00000010 rx_count
2000fc3e l     O .bss	00000001 rx_head
2000f9b4 l     O .bss	00000010 rx_index
2000f9c4 l     O .bss	00000009 rx_list
2000fc2c l     O .bss	00000002 rx_packet_size
2000fc3f l     O .bss	00000001 rx_tail
2000b280 l     O .bss	00000100 rx_transfer
2000fc41 l     O .bss	00000001 transmit_previous_timeout
2000fc2e l     O .bss	00000002 tx_available
2000fc42 l     O .bss	00000001 tx_head
2000fc43 l     O .bss	00000001 tx_noautoflush
2000fc30 l     O .bss	00000002 tx_packet_size
2000b380 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 yield.cpp
2000fc39 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 libm_a-wf_atan2.o
00000000 l    df *ABS*	00000000 libm_a-wf_sqrt.o
00000000 l    df *ABS*	00000000 libm_a-pow.o
00000000 l    df *ABS*	00000000 libm_a-sinf.o
00000000 l    df *ABS*	00000000 libm_a-cosf.o
00000000 l    df *ABS*	00000000 libm_a-math_errf.o
00000000 l    df *ABS*	00000000 libm_a-ef_sqrt.o
00000000 l    df *ABS*	00000000 libm_a-ef_atan2.o
00000000 l    df *ABS*	00000000 libm_a-sf_atan.o
00000000 l    df *ABS*	00000000 libm_a-sf_fabs.o
00000000 l    df *ABS*	00000000 libm_a-math_err.o
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
00000000 l    df *ABS*	00000000 libc_a-strtol.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-isalnum.o
00000000 l    df *ABS*	00000000 libc_a-isspace.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0001b424 l     F .text.itcm	00000018 stdio_exit_handler
0001b43c l     F .text.itcm	00000040 cleanup_stdio
0001b47c l     F .text.itcm	0000001c __fp_lock
0001b498 l     F .text.itcm	0000001c __fp_unlock
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strchr.o
00000000 l    df *ABS*	00000000 libc_a-strncasecmp.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-strstr.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
00000000 l    df *ABS*	00000000 libc_a-getenv_r.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-strcasecmp.o
00000000 l    df *ABS*	00000000 libc_a-strcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strnlen.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00000000 l    df *ABS*	00000000 libc_a-envlock.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libm_a-pow_log_data.o
00000000 l    df *ABS*	00000000 libm_a-sincosf_data.o
00000000 l    df *ABS*	00000000 libm_a-exp_data.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 libc_a-environ.o
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00024878 l     F .text.itcm	00000008 ___init_veneer
00024880 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00024888 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
60001fc0 l     F .text.code	00000008 __memset_veneer
60001fc8 l     F .text.code	00000008 __pwm_init_veneer
60001fd0 l     F .text.code	00000008 ____libc_init_array_veneer
60001fd8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001fe0 l     F .text.code	00000008 __delay_veneer
60001fe8 l     F .text.code	00000008 __main_veneer
60001ff0 l     F .text.code	00000008 __sm_set_pool_veneer
60001ff8 l     F .text.code	00000008 __set_arm_clock_veneer
0000fc68  w    F .text.itcm	00000004 USBHIDInput::hid_process_control(Transfer_struct const*)
00007bf4 g     F .text.itcm	00000184 ULog::setLogFlagsOther(char const*)
00015048 g     F .text.itcm	00000010 USBHost::free_string_buffer(strbuf_t*)
0001edfc g     F .text.itcm	00000028 _mprec_log10
000122c8 g     F .text.itcm	00000058 USBHub::send_poweron(unsigned long)
2000e89c g     O .bss	00000140 ad
00017e68 g     F .text.itcm	00000018 usb_serial_available
00014f7c g     F .text.itcm	00000050 USBHost::init_Device_Pipe_Transfer_memory()
20008004 g     O .data	00000014 vtable for UUSB
0001ee80 g     F .text.itcm	00000062 __any_on
00011790 g     F .text.itcm	00000028 USBHIDParser::sendControlPacket(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void*)
000247e4 g     F .text.itcm	00000024 _isatty_r
20001da0 g     O .data	00000028 __mprec_tinytens
0001d13c g     F .text.itcm	000000ba strcpy
00013ce0 g     F .text.itcm	000001b0 JoystickController::sw_parseAckMsg(unsigned char const*)
00003d8c g     F .text.itcm	00000050 UEncoder::sendData(int)
20008040 g     O .data	00000014 vtable for UMotor
000035f4 g     F .text.itcm	00000064 EEConfig::readBlock(char*, int)
00012c08 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::hid_process_control(Transfer_struct const*)
0000b80c  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
0000e7b4 g     F .text.itcm	00000024 MPU9250_asukiaaa::accelX()
0000e8f4 g     F .text.itcm	00000024 MPU9250_asukiaaa::gyroZ()
600017f8 g     F .text.code	00000002 startup_default_late_hook
0001cd34 g     F .text.itcm	0000002c _lseek_r
00018038  w    F .text.itcm	000000d8 yield
000070a4 g     F .text.itcm	00000044 ULog::sendData(int)
2000fc24 g     O .bss	00000004 usb_timer1_callback
000067f0 g     F .text.itcm	00000170 ULineSensor::sendStatusLineSensor(bool)
0000eee0 g     F .text.itcm	0000001e Adafruit_GFX::fillScreen(unsigned short)
000146c8 g     F .text.itcm	00000374 JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)
00012c38 g     F .text.itcm	0000006c JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)
2000ec3c g     O .bss	00000004 em_rx_tx2
20008054 g     O .data	00000014 vtable for URobot
20007ff0 g     O .data	00000014 vtable for ULog
000007f4 g     F .text.itcm	00000248 AS5X47::printDebugString()
60002614 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000eeb4 g     F .text.itcm	00000012 Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)
00012424 g     F .text.itcm	0000004a USBHub::callback(Transfer_struct const*)
2000f19c g     O .bss	00000050 irdist
60001910 g     F .text.code	00000384 configure_external_ram
20008148 g     O .data	00000014 vtable for ULedBand
00013808 g     F .text.itcm	000000b4 JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)
200096dc g     O .data	00000140 Wire1
00001be4 g     F .text.itcm	00000048 UAd::sendData(int)
00002f9c g     F .text.itcm	00000044 EEConfig::EEConfig()
00019340 g     F .text.itcm	0000005a .hidden __floatdidf
20005fd0  w    O .data	00000010 teensy::inplace_function_detail::empty_vtable<void>
0000288c g     F .text.itcm	00000068 UCurrent::sendMotorCurrent()
0000c154 g     F .text.itcm	00000044 USubs::tick()
2000e53c g     O .bss	00000001 __lock___atexit_recursive_mutex
00021f24 g     F .text.itcm	0000004c _wcrtomb_r
00010f14 g     F .text.itcm	00000110 USBHost::claim_drivers(Device_struct*)
0000c108 g     F .text.itcm	0000004a USubs::decode(char const*, bool)
60001674 g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00012ff8 g     F .text.itcm	0000003c JoystickController::init()
00015bbc g     F .text.itcm	0000001c Print::println()
0000ed44 g     F .text.itcm	000000aa TwoWire::isr()
00009074 g     F .text.itcm	00000048 UMotorTest::sendHelp()
000045f4 g     F .text.itcm	00000020 m2EncoderA()
0001b8a4 g     F .text.itcm	00000020 __sseek
0001b64c g     F .text.itcm	00000040 __sinit
000246f0 g     F .text.itcm	000000b0 __swbuf_r
000022c8 g     F .text.itcm	00000074 UCommand::decode(char const*)
00002aac g     F .text.itcm	0000005c UDisplay::decode(char const*)
0001cca4 g     F .text.itcm	00000030 _setlocale_r
00006fb8  w    F .text.itcm	0000001c ULog::~ULog()
00002a60 g     F .text.itcm	00000030 UDisplay::sendHelp()
000103c8 g     F .text.itcm	0000015c USBHost::followup_Error()
0000d9d8 g     F .text.itcm	00000038 UUsbHost::sendData(int)
0001511c g     F .text.itcm	000001e0 WS2812Serial::begin()
00019eac g     F .text.itcm	0000000c __malloc_unlock
0000bd88 g     F .text.itcm	000000d4 UServo::setOneServo(char const*)
0000fc70  w    F .text.itcm	00000002 USBDriver::control(Transfer_struct const*)
000030d8 g     F .text.itcm	00000036 EEConfig::push32(unsigned long)
20007e88 g     O .data	00000058 vtable for Adafruit_SSD1306
2000fc38 g     O .bss	00000001 USBHost::enumeration_busy
000150ec g     F .text.itcm	00000030 USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)
2000fc36 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00008884 g     F .text.itcm	0000009c UMotor::motorSetPWM(int, int)
60001f5c g     F .text.code	00000054 analog_init
0000542c g     F .text.itcm	00000058 UIrDist::sendStatusDistIR()
2000802c g     O .data	00000014 vtable for UAsEnc
0001b100 g     F .text.itcm	0000000c _strtod_r
00008620  w    F .text.itcm	0000001c UMotor::~UMotor()
0000c57c g     F .text.itcm	00000090 UUSB::client_send_str(char const*, int)
0000c1f4 g     F .text.itcm	00000034 USubs::sendHelpLine()
0001b8cc g     F .text.itcm	0000004a _vdprintf_r
20001408 g     O .data	00000870 .hidden __exp_data
00016140 g     F .text.itcm	00000048 eeprom_initialize
0000b808  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)
2000e524 g     O .bss	00000001 __lock___arc4random_mutex
00015914  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)
0000e2bc g     F .text.itcm	00000046 ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)
00018f98 g     F .text.itcm	00000030 .hidden __math_divzero
20009538 g     O .data	00000004 F_CPU_ACTUAL
0001b3f8 g     F .text.itcm	0000000c __set_ctype
0000e894 g     F .text.itcm	00000018 MPU9250_asukiaaa::gyroUpdate()
0001ba60 g     F .text.itcm	000000f8 memmove
00016528 g     F .text.itcm	00000018 eeprom_write_word
000098d0 g     F .text.itcm	000004a8 UMotorTest::testModel()
00014024 g     F .text.itcm	00000024 non-virtual thunk to JoystickController::hid_timer_event(USBDriverTimer*)
0001b7b4 g     F .text.itcm	00000088 snprintf
0001500c g     F .text.itcm	00000010 USBHost::allocate_Transfer()
0001e448 g     F .text.itcm	0000004c _Balloc
0000cddc g     F .text.itcm	000000b8 UUSB::setup()
0002489c g       .ARM.exidx	00000000 __exidx_end
00005658 g     F .text.itcm	00000034 UIrDist::eePromSave()
0000c4ac  w    F .text.itcm	00000034 UUSB::~UUSB()
2000fc35 g     O .bss	00000001 EventResponder::runningFromYield
20009a70 g     O .data	00000080 isr_table_gpio2
00008a88 g     F .text.itcm	00000284 UMotor::decode(char const*)
00013034 g     F .text.itcm	000000a4 JoystickController::transmitPS4UserFeedbackMsg()
20008540 g     O .data	000000dc pwm_pin_info
0000233c g     F .text.itcm	00000024 UCommand::setup()
00016f18 g     F .text.itcm	00000060 tempmonGetTemp
00010d98 g     F .text.itcm	00000038 USBHost::Task()
0000747c g     F .text.itcm	00000060 ULog::writeTime(signed char*, int, char*, int)
000120a8 g     F .text.itcm	0000000c USBHIDParser::in_callback(Transfer_struct const*)
00015b6c g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
2000952c g     O .data	00000004 __atexit_recursive_mutex
0001cddc g     F .text.itcm	0000000c __errno
0001ce38 g     F .text.itcm	00000002 __retarget_lock_close
000117b8 g     F .text.itcm	00000020 USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)
20008068 g     O .data	0000001c vtable for USBHub
00018bd4 g     F .text.itcm	0000000c .hidden __math_may_uflowf
60001000 g     O .text.headers	00000020 ImageVectorTable
2000e870 g     O .bss	00000004 EventResponder::firstInterrupt
0000074c g     F .text.itcm	0000000c AS5X47::AS5X47(unsigned char)
00017868 g     F .text.itcm	00000004 usb_transfer_status
2000f654 g     O .bss	00000004 p12b
00021018 g     F .text.itcm	00000004 __localeconv_l
00018180 g     F .text.itcm	00000084 sm_set_pool
00010e94 g     F .text.itcm	0000007e USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)
2000e87c g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
000120b4 g     F .text.itcm	00000068 USBHub::disconnect()
000127c8 g     F .text.itcm	00000234 USBHub::control(Transfer_struct const*)
00012578 g     F .text.itcm	00000058 USBHub::send_clearstatus_overcurrent(unsigned long)
0000218c g     F .text.itcm	00000024 UAsEnc::eePromLoad()
2000e270 g     O .bss	00000004 __stdio_exit_handler
0000f1e4 g     F .text.itcm	00000118 Adafruit_GFX::writeLine(short, short, short, short, unsigned short)
0001621c g     F .text.itcm	0000002e eeprom_read_dword
000054cc g     F .text.itcm	00000010 UIrDist::sendData(int)
00001e50  w    F .text.itcm	0000001c UAsEnc::~UAsEnc()
20009c66 g     O .data	00000001 analog_write_res
00024808 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
0001efb4 g     F .text.itcm	00000056 __sjis_wctomb
0000ac78 g     F .text.itcm	00000118 URobot::powerOff(float)
00013e90 g     F .text.itcm	00000170 JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)
00002e80 g     F .text.itcm	00000034 UDisplay::eePromLoad()
000178dc  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00006080 g     F .text.itcm	000002a8 ULineSensor::decode(char const*)
000247b8 g     F .text.itcm	0000002c _fstat_r
200081bc g     O .data	00000370 digital_pin_to_info_PGM
0000bcec g     F .text.itcm	0000009c UServo::setServoConfig(char const*)
2000e520 g     O .bss	00000004 errno
0000e7fc g     F .text.itcm	00000024 MPU9250_asukiaaa::accelZ()
6000255c  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
0001b860 g     F .text.itcm	00000004 __seofread
00024898 g       .text.itcm	00000000 _etext
00012380 g     F .text.itcm	000000a4 USBHub::timer_event(USBDriverTimer*)
0000f950 g     F .text.itcm	000000dc _spi_dma_rxISR0()
0000e610 g     F .text.itcm	00000004 MPU9250_asukiaaa::setWire(TwoWire*)
2000a2c0 g       .bss	00000000 _sbss
00010524 g     F .text.itcm	00000250 USBHost::isr()
00001f5c g     F .text.itcm	00000104 UAsEnc::sendData(int)
00001210 g     F .text.itcm	000000f6 Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)
0000efd8 g     F .text.itcm	000000a4 Adafruit_GFX::drawLine(short, short, short, short, unsigned short)
00007b0c g     F .text.itcm	00000070 ULog::writeBufferMsg()
000193a8 g     F .text.itcm	00000160 .hidden __aeabi_fadd
00010df0 g     F .text.itcm	000000a4 USBHost::new_Device(unsigned long, unsigned long, unsigned long)
000193a4 g     F .text.itcm	00000164 .hidden __subsf3
00016050 g     F .text.itcm	00000024 digitalRead
00000b4c g     F .text.itcm	00000028 AS5X47Spi::AS5X47Spi(unsigned char)
60002704 g       *ABS*	00000000 _stextload
000065cc g     F .text.itcm	000000d0 ULineSensor::calibrateWhiteNow()
0000019c g     F .text.itcm	0000005c loop
00016b9c g     F .text.itcm	0000007a flexpwm_init
00016250 g     F .text.itcm	000000ec eepromemu_flash_write
2000e878 g     O .bss	00000004 BluetoothController::available_bthid_drivers_list
00016844 g     F .text.itcm	000000b4 flexpwmWrite
2000fac0 g     O .bss	00000004 tried
00002574  w    F .text.itcm	0000001c UCurrent::~UCurrent()
00002118 g     F .text.itcm	0000004c UAsEnc::tick()
600017fc g     F .text.code	00000004 startup_debug_reset
0001772c g     F .text.itcm	00000064 usb_config_rx
00003ddc g     F .text.itcm	00000040 UEncoder::eePromSave()
00018208 g     F .text.itcm	00000044 sqrtf
00007dd8 g     F .text.itcm	0000016c ULog::decode(char const*)
0000fc6c  w    F .text.itcm	00000002 USBDriver::Task()
20008084 g     O .data	00000014 vtable for UServo
20007e00 g     O .data	00000014 vtable for ULineSensor
00004be4 g     F .text.itcm	000000c0 UImu2::sendRawGyro()
0000367c g     F .text.itcm	00000080 UEncoder::sendHelp()
00002b08 g     F .text.itcm	00000038 UDisplay::sendData(int)
00011024 g     F .text.itcm	000002a0 USBHost::enumeration(Transfer_struct const*)
00014180 g     F .text.itcm	00000022 JoystickController::bt_hid_timer_event(USBDriverTimer*)
00013928 g     F .text.itcm	000000d8 JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)
0000f2fc g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
0001f00c g     F .text.itcm	0000007c __eucjp_wctomb
0000eae4 g     F .text.itcm	00000100 TwoWire::endTransmission(unsigned char)
0000cc98 g     F .text.itcm	0000006e UUSB::decodeAll(char const*)
00013aa0 g     F .text.itcm	00000054 JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)
0000e614 g     F .text.itcm	0000002c MPU9250_asukiaaa::readId(unsigned char*)
2000e86c g     O .bss	00000004 EventResponder::lastInterrupt
00012c10 g     F .text.itcm	00000028 JoystickController::disconnect_collection(Device_struct*)
000166a4 g     F .text.itcm	00000134 memcpy
00012ccc g     F .text.itcm	00000004 non-virtual thunk to JoystickController::hid_process_out_data(Transfer_struct const*)
0001dd60 g     F .text.itcm	000001b0 __hexnan
0001201c g     F .text.itcm	0000008c USBHIDParser::in_data(Transfer_struct const*)
0000cc30 g     F .text.itcm	00000068 UUSB::sendAllHelp()
0000b1a8 g     F .text.itcm	0000038c URobot::decode(char const*)
2000a2c0 g     O .data	00000000 .hidden __TMC_END__
00018fc8 g     F .text.itcm	0000001c .hidden __math_invalid
00009238 g     F .text.itcm	000000a0 UMotorTest::sendMotorParameters()
00008920 g     F .text.itcm	00000164 UMotor::motorSetAnchorVoltage()
00012d00 g     F .text.itcm	0000000e non-virtual thunk to JoystickController::hid_input_end()
00001a48 g     F .text.itcm	000000b8 UAd::tick()
0001f108 g     F .text.itcm	00001b44 _svfprintf_r
000192c8 g     F .text.itcm	00000022 .hidden __floatsidf
0000c300 g     F .text.itcm	0000004c USubss::serviceStatus(int)
0000cc08 g     F .text.itcm	00000028 UUSB::stopAllSubscriptions()
2000fab8 g     O .bss	00000004 systick_millis_count
0000794c g     F .text.itcm	000000c4 ULog::writeLineSensor(signed char*, int, char*, int)
200080f8 g     O .data	00000014 vtable for UCommand
0000eaa4 g     F .text.itcm	00000040 TwoWire::wait_idle()
00012d9c g     F .text.itcm	0000000a non-virtual thunk to JoystickController::bt_hid_input_data(unsigned long, long)
000195b8 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
00001308 g     F .text.itcm	0000039c Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)
2000fc45 g     O .bss	00000001 usb_configuration
00012ca4 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)
00018134 g     F .text.itcm	0000004c sm_align_pool
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
00000330 g     F .text.itcm	000003fc UDemo_Behave::tick()
0000c60c g     F .text.itcm	00000074 UUSB::send(char const*)
0000d83c g     F .text.itcm	0000008c UUsbHost::sendAxis()
0000ddac g     F .text.itcm	00000056 ADC_Module::setReference(ADC_settings::ADC_REFERENCE)
00006468 g     F .text.itcm	00000164 ULineSensor::lineDetect()
0001ed98 g     F .text.itcm	00000062 __ratio
0000da10 g     F .text.itcm	00000110 UUsbHost::PrintDeviceListChanges()
00016a60 g     F .text.itcm	000000cc analogWrite
00008ed0 g     F .text.itcm	00000044 UMotor::eePromLoad()
0000dd68 g     F .text.itcm	00000010 ADC::readSingle(signed char)
00011620 g     F .text.itcm	0000004c USBHIDParser::out_data(Transfer_struct const*)
60002614  w    O .text.progmem	00000018 usb_string_manufacturer_name
000052bc  w    F .text.itcm	0000001c UIrDist::~UIrDist()
0001992c g     F .text.itcm	00000010 malloc
0001211c g     F .text.itcm	00000178 USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)
000010d8 g     F .text.itcm	00000092 Adafruit_SSD1306::ssd1306_command1(unsigned char)
600025ac  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000eaf0 g     O .bss	00000028 dbehave
00016ef4  w    F .text.itcm	0000000a _fstat
0000e4e8  w    F .text.itcm	0000001e TwoWire::read()
000210a8 g     F .text.itcm	00000040 __assert_func
00019510 g     F .text.itcm	0000001c .hidden __aeabi_i2f
0000f938  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
20001cd8 g     O .data	000000c8 __mprec_tens
60001e20 g     F .text.code	000000e8 usb_init
0000e8d0 g     F .text.itcm	00000024 MPU9250_asukiaaa::gyroY()
2000fc37 g     O .bss	00000001 USBHub::reset_busy
0000ef00 g     F .text.itcm	00000002 Adafruit_GFX::invertDisplay(bool)
00002fe0 g     F .text.itcm	000000f8 EEConfig::stringConfigToUSB(unsigned char const*, int)
2000e104 g     O .bss	00000004 __malloc_top_pad
000031d0 g     F .text.itcm	00000026 EEConfig::readWord()
0000e6ac g     F .text.itcm	0000004a MPU9250_asukiaaa::magReadAdjustValues()
2000fabc g     O .bss	00000004 systick_safe_read
00002560 g     F .text.itcm	00000004 UCurrent::decode(char const*)
0000e99c g     F .text.itcm	00000108 TwoWire::force_clock()
20008120 g     O .data	00000014 vtable for UDisplay
2000819c  w    O .data	00000010 teensy::inplace_function<void (), 16u, 8u>::inplace_function<void (&)(), void (*)(), void>(void (&)())::vt
aaaaabff g       *ABS*	00000000 _flexram_bank_config
0000e18c g     F .text.itcm	00000078 ADC_Module::setResolution(unsigned char)
20008f80 g     O .data	00000000 .hidden __dso_handle
0001633c g     F .text.itcm	000000b8 eepromemu_flash_erase_sector
000192a8 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
00006398 g     F .text.itcm	000000cc ULineSensor::setup()
0002101c g     F .text.itcm	00000008 _localeconv_r
0000b9ec g     F .text.itcm	00000078 UService::updateSensors()
00004404 g     F .text.itcm	000001d0 UEncoder::encoderInterrupt(int, bool)
00023f18 g     F .text.itcm	000002f4 __sfvwrite_r
0001e69c g     F .text.itcm	0000005c __i2b
0000e8ac g     F .text.itcm	00000024 MPU9250_asukiaaa::gyroX()
20000000 g       .data	00000000 _sdata
00012628 g     F .text.itcm	00000058 USBHub::send_setreset(unsigned long)
60002694 g     O .text.progmem	00000062 usb_config_descriptor_480
000195e8 g     F .text.itcm	000002c8 .hidden __udivmoddi4
00019024 g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000c848 g     F .text.itcm	00000208 UUSB::receivedCharFromUSB(unsigned char)
000022ac  w    F .text.itcm	0000001c UCommand::~UCommand()
2000ec40 g     O .bss	0000053c encoder
00012b68 g     F .text.itcm	00000002 JoystickController::tx_data(Transfer_struct const*)
00009eb4 g     F .text.itcm	00000238 UMotorTest::getMotorTestLog()
0001cd8c g     F .text.itcm	00000024 _sbrk_r
000070f0 g     F .text.itcm	0000038c ULog::stateToLog()
2000ebf4 g     O .bss	00000044 eeConfig
600017f0 g     F .text.code	00000002 startup_default_early_hook
00000cb8 g     F .text.itcm	000000f2 Adafruit_SSD1306::drawPixel(short, short, unsigned short)
6000164c g     F .text.code	00000028 ResetHandler
00018c0c g     F .text.itcm	0000001c .hidden __math_invalidf
00017ef0 g     F .text.itcm	00000020 usb_serial_getchar
00003180 g     F .text.itcm	00000026 EEConfig::read32()
2000fc14 g     O .bss	00000008 usb_cdc_line_coding
00015088 g     F .text.itcm	00000030 USBHost::contribute_Pipes(Pipe_struct*, unsigned long)
00015ffc g     F .text.itcm	00000054 digitalWrite
00018f1c g     F .text.itcm	0000000e fabsf
2000e874 g     O .bss	00000004 EventResponder::lastYield
20003c4c g     O .data	0000002a ADC::channel2sc1aADC0
0000d8c8 g     F .text.itcm	00000034 UUsbHost::sendButtons()
0001cd60 g     F .text.itcm	0000002c _read_r
2000ea18 g     O .bss	00000078 command
000138c4 g     F .text.itcm	00000032 JoystickController::remoteNameComplete(unsigned char const*)
0001b414 g     F .text.itcm	00000010 isspace
00008620  w    F .text.itcm	0000001c UMotor::~UMotor()
00002958 g     F .text.itcm	00000064 UCurrent::sendData(int)
00020c4c g     F .text.itcm	000000c6 _fclose_r
0000baf8  w    F .text.itcm	0000001c UServo::~UServo()
00006328 g     F .text.itcm	00000054 ULineSensor::sendHelp()
2000f18c g     O .bss	00000010 extmem_smalloc_pool
00020ea8 g     F .text.itcm	00000074 fflush
000087cc g     F .text.itcm	000000b8 UMotor::motorSetEnable(bool, bool)
2000e130 g     O .bss	00000004 __malloc_max_sbrked_mem
000129fc g     F .text.itcm	00000002 JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)
00016074 g     F .text.itcm	00000070 pinMode
2000e6f4 g     O .bss	0000001c SWStickCal
00014ef8 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)
000192ec g     F .text.itcm	00000042 .hidden __extendsfdf2
000049f4 g     F .text.itcm	00000034 UImu2::eePromLoad()
000152fc g     F .text.itcm	00000474 WS2812Serial::show()
00019030 g     F .text.itcm	00000276 .hidden __adddf3
600016a8 g     F .text.code	00000054 TwoWire::setSDA(unsigned char)
00002094 g     F .text.itcm	00000084 UAsEnc::setup()
2000981c g     O .data	00000140 Wire2
60031400 g     O .text.csf	00000c00 hab_csf
20280000 g       .text.csf	00000000 _heap_end
000115f4 g     F .text.itcm	0000002a USBHIDParser::init()
000047d4  w    F .text.itcm	0000001c UImu2::~UImu2()
0001ec00 g     F .text.itcm	000000c2 __b2d
00024894 g       .ARM.exidx	00000000 __exidx_start
0000c704 g     F .text.itcm	00000084 UUSB::sendHelp()
70000000 g       .bss.extram	00000000 _extram_end
2000e530 g     O .bss	00000001 __lock___env_recursive_mutex
00016f00  w    F .text.itcm	00000004 _isatty
2000e868 g     O .bss	00000004 EventResponder::firstYield
0000e204 g     F .text.itcm	000000b8 ADC_Module::analog_init()
20007dec g     O .data	00000014 vtable for UMotorTest
00012294 g     F .text.itcm	00000034 USBHub::init()
20009c48 g     O .data	00000008 sampleTimer
000057b0 g     F .text.itcm	0000017c ULedBand::decode(char const*)
0000eec8 g     F .text.itcm	00000018 Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)
00019eb8 g     F .text.itcm	000003d8 _realloc_r
0001bcc8 g     F .text.itcm	0000005c strncasecmp
0001cde8 g     F .text.itcm	00000048 __libc_init_array
0000e4dc  w    F .text.itcm	0000000c TwoWire::available()
0000c0e8 g     F .text.itcm	00000020 USubs::USubs(char const*, char const*)
2000eb18 g     O .bss	000000a4 display
0001b3bc g     F .text.itcm	00000018 strtol_l
0002458c g     F .text.itcm	0000002c wcsnrtombs
0000c838 g     F .text.itcm	00000010 UUSB::sendData(int)
000054dc g     F .text.itcm	0000007c UIrDist::calibrateIr()
2000245c g     O .data	00000100 __hexdig
200099f0 g     O .data	00000080 isr_table_gpio1
00008dc8 g     F .text.itcm	000000d8 UMotor::tick()
00000b74 g     F .text.itcm	0000013c AS5X47Spi::readData(unsigned short, unsigned short)
00024384 g     F .text.itcm	00000066 _fputwc_r
0000c0e8 g     F .text.itcm	00000000 std::__throw_length_error(char const*)
20001dc8 g     O .data	00000028 __mprec_bigtens
0001e54c g     F .text.itcm	000000b0 __s2b
00016f10  w    F .text.itcm	00000004 abort
0000ebe4 g     F .text.itcm	00000160 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
00010070 g     F .text.itcm	000000e8 USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)
000178c4  w    F .text.itcm	00000004 usb_serial_class::clear()
000192a8 g     F .text.itcm	0000001e .hidden __floatunsidf
00016eb4  w    F .text.itcm	00000034 _sbrk
60026fa0 g       *ABS*	00000000 _sdataload
0001ea04 g     F .text.itcm	00000042 __mcmp
00002e70 g     F .text.itcm	00000010 UDisplay::eePromSave()
2000ebbc g     O .bss	00000036 drawingMemory
20008098  w    O .data	00000014 vtable for USubss
0000863c g     F .text.itcm	00000190 UMotor::setup()
00011344 g     F .text.itcm	00000026 USBHIDParser::disconnect()
00016590 g     F .text.itcm	00000104 attachInterrupt
200099d8 g     O .data	00000004 __brkval
2000fc44 g     O .bss	00000001 usb_cdc_line_rtsdtr
0001b6a4 g     F .text.itcm	00000024 __fp_lock_all
0000c39c  w    F .text.itcm	000000d4 void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)
0000dc38 g     F .text.itcm	0000009c ADC::analogRead(unsigned char, signed char)
60001fb0 g     F .text.code	00000000 _init
00012b64 g     F .text.itcm	00000004 JoystickController::hid_process_out_data(Transfer_struct const*)
00017c40 g     F .text.itcm	00000002 usb_serial_reset
00004ca4 g     F .text.itcm	00000068 UImu2::sendData(int)
00005484 g     F .text.itcm	00000048 UIrDist::sendStatusDistIR2()
0000fc98 g     F .text.itcm	00000054 BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)
00012b4c g     F .text.itcm	00000008 non-virtual thunk to JoystickController::hid_input_data(unsigned long, long)
0001b3d4 g     F .text.itcm	00000018 strtol
00002658 g     F .text.itcm	00000234 UCurrent::tick()
000163f4 g     F .text.itcm	00000134 eeprom_write_byte
20001328 g     O .data	000000e0 .hidden __sincosf_table
000189d8 g     F .text.itcm	000001bc cosf
00020ff4 g     F .text.itcm	00000024 strnlen
00010dd0 g     F .text.itcm	00000020 USBHost::driver_ready_for_device(USBDriver*)
000138f8 g     F .text.itcm	0000002e non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)
00011814 g     F .text.itcm	000000fc USBHIDParser::parse()
00012d74 g     F .text.itcm	00000028 non-virtual thunk to JoystickController::bt_hid_input_end()
00024838 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
0000c34c g     F .text.itcm	00000028 USubss::stopSubscriptions()
0000fdc0  w    F .text.itcm	00000004 USBHIDInput::hid_process_in_data(Transfer_struct const*)
000193a4 g     F .text.itcm	00000164 .hidden __aeabi_fsub
60002630 g     O .text.progmem	00000062 usb_config_descriptor_12
00000020 g     F .text.itcm	000000c0 irq_gpio6789
200080ac g     O .data	00000024 vtable for TwoWire
0001a290 g     F .text.itcm	00000e70 _strtod_l
0001dd28 g     F .text.itcm	00000036 __match
00016b2c g     F .text.itcm	00000070 analogWriteFrequency
00005764 g     F .text.itcm	00000030 ULedBand::sendHelp()
0000e820 g     F .text.itcm	00000074 MPU9250_asukiaaa::beginGyro(unsigned char)
00004634 g     F .text.itcm	00000020 m2EncoderB()
0001f088 g     F .text.itcm	0000007a __jis_wctomb
000007a0 g     F .text.itcm	00000040 AS5X47::readVel()
2000fc80 g       .bss	00000000 _ebss
0000ee90 g     F .text.itcm	0000000e Adafruit_GFX::writePixel(short, short, unsigned short)
0000f7f4 g     F .text.itcm	00000136 Adafruit_GFX::write(unsigned char)
00013af4 g     F .text.itcm	0000011c JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)
0000bb58 g     F .text.itcm	000000b4 UServo::setup()
0000dd78 g     F .text.itcm	00000034 ADC_Module::calibrate()
600016fc g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0001e5fc g     F .text.itcm	00000040 __hi0bits
0000dbf8 g     F .text.itcm	00000040 ADC::ADC()
0000edfc g     F .text.itcm	0000000c lpi2c3_isr()
0000e640 g     F .text.itcm	0000006c MPU9250_asukiaaa::beginAccel(unsigned char)
00013738 g     F .text.itcm	00000018 JoystickController::joystickDataClear()
00000f94 g     F .text.itcm	00000076 Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)
20203160 g       .bss.dma	00000000 _heap_start
00011744 g     F .text.itcm	0000004c USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)
000117d8 g     F .text.itcm	0000003c USBHIDParser::find_driver(unsigned long)
2000e534 g     O .bss	00000001 __lock___malloc_recursive_mutex
000029bc g     F .text.itcm	00000020 UCurrent::getSupplyCurrent()
0001953c g     F .text.itcm	0000007c .hidden __floatdisf
0001b128 g     F .text.itcm	00000020 strtod
00012cac g     F .text.itcm	0000001c JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)
00015058 g     F .text.itcm	00000030 USBHost::contribute_Devices(Device_struct*, unsigned long)
0000c228 g     F .text.itcm	00000014 USubss::USubss()
000169d4 g     F .text.itcm	0000008c quadtimerFrequency
6000250c  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
00002ef4 g     F .text.itcm	0000008c EEConfig::sendHelp()
2000e138 g     O .bss	00000138 __sf
0000074c g     F .text.itcm	0000000c AS5X47::AS5X47(unsigned char)
0000e5c0 g     F .text.itcm	00000038 MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)
00012d10 g     F .text.itcm	00000028 non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)
0000a6c0 g     F .text.itcm	00000114 URobot::setup()
000053c8 g     F .text.itcm	00000050 UIrDist::setup()
0001624c g     F .text.itcm	00000004 eeprom_is_ready
00000005 g       *ABS*	00000000 _itcm_block_count
2000b260 g     O .bss	00000020 endpoint0_transfer_data
20009530 g     O .data	00000004 environ
000018d8 g     F .text.itcm	00000004 UAd::decode(char const*)
00003700 g     F .text.itcm	0000022c UEncoder::decode(char const*)
00000758 g     F .text.itcm	00000012 AS5X47::readRegister(unsigned short)
000167dc g     F .text.itcm	00000004 operator delete(void*, unsigned int)
00004b24 g     F .text.itcm	000000c0 UImu2::sendRawAcc()
00016c18 g     F .text.itcm	000000f4 pwm_init
000007e0 g     F .text.itcm	00000014 AS5X47::readErr()
00019030 g     F .text.itcm	00000276 .hidden __aeabi_dadd
00003ad8 g     F .text.itcm	00000090 UEncoder::sendRobotConfig()
0000e378 g     F .text.itcm	000000e8 ADC_Module::analogRead(unsigned char)
00004a28 g     F .text.itcm	0000007c UImu2::sendStatusGyro()
00006d8c g     F .text.itcm	00000100 ULineSensor::eePromLoadLinesensor()
00005418 g     F .text.itcm	00000014 UIrDist::tick()
00020f70 g     F .text.itcm	0000003e strcat
60032000 g       .text.csf	00000000 __text_csf_end
00018f88 g     F .text.itcm	00000010 .hidden __math_oflow
0000eea0 g     F .text.itcm	00000012 Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)
00002e5c g     F .text.itcm	00000014 UDisplay::setLine(char const*)
60001c94 g     F .text.code	0000005c usb_pll_start
0001b148 g     F .text.itcm	00000084 strtof_l
0000a580 g     F .text.itcm	00000120 URobot::sendHelp()
000076c0 g     F .text.itcm	00000054 ULog::writeEnc(signed char*, int, char*, int)
0001e854 g     F .text.itcm	000000c0 __pow5mult
00019330 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
0000ee08 g     F .text.itcm	0000000c lpi2c4_isr()
00003378 g     F .text.itcm	000001e0 EEConfig::eePromLoadStatus(bool)
000130d8 g     F .text.itcm	0000012c JoystickController::transmitPS3UserFeedbackMsg()
0000a6a0  w    F .text.itcm	0000001c URobot::~URobot()
00004150 g     F .text.itcm	000001a4 UEncoder::updateVelocityEstimate()
0000568c g     F .text.itcm	00000080 UIrDist::eePromLoad()
000075dc g     F .text.itcm	0000007c ULog::writeCurrent(signed char*, int, char*, int)
2000b240 g     O .bss	00000020 endpoint0_transfer_ack
2000fc1c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00008fd4 g     F .text.itcm	00000048 UMotor::stopAllMotors()
00017824 g     F .text.itcm	00000028 usb_transmit
00007658 g     F .text.itcm	00000068 ULog::writeVel(signed char*, int, char*, int)
20009bf0 g     O .data	0000001c leds
000158f0 g     F .text.itcm	00000020 systick_isr
00014a90 g     F .text.itcm	00000468 JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)
000125d0 g     F .text.itcm	00000058 USBHub::send_clearstatus_reset(unsigned long)
0001ce54 g     F .text.itcm	00000002 __retarget_lock_release_recursive
20007e6c g     O .data	0000001c vtable for USBHIDParser
00006f64 g     F .text.itcm	00000054 ULog::sendHelp()
0001028c g     F .text.itcm	0000013c USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)
200022f0 g     O .data	0000016c __C_locale
2000958c g     O .data	00000010 Serial
0000e5f8 g     F .text.itcm	00000018 MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)
0000cf98  w    F .text.itcm	00000460 UUsbHost::UUsbHost()
00013a00 g     F .text.itcm	00000098 JoystickController::connectionComplete()
0001ce4c g     F .text.itcm	00000004 __retarget_lock_try_acquire_recursive
00018bc8 g     F .text.itcm	0000000c .hidden __math_uflowf
20000280 g     O .data	00001048 .hidden __pow_log_data
0000d8fc g     F .text.itcm	000000dc UUsbHost::sendJoy()
00015b64  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
600017f0  w    F .text.code	00000002 startup_early_hook
00018ff4 g     F .text.itcm	00000024 .hidden __math_check_oflow
2000f1ec g     O .bss	00000060 ledband
00013750 g     F .text.itcm	000000b8 JoystickController::mapNameToJoystickType(unsigned char const*)
00017e24 g     F .text.itcm	00000044 usb_serial_peekchar
00018f78 g     F .text.itcm	00000010 .hidden __math_may_uflow
0001b734 g     F .text.itcm	0000007e _snprintf_r
0000ce94 g     F .text.itcm	0000002e UUSB::addSubscriptionService(USubss*)
0001ca3c g     F .text.itcm	00000050 __get_locale_env
00014f00 g     F .text.itcm	00000054 non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)
0001b68c g     F .text.itcm	0000000c __sfp_lock_acquire
0001d200 g     F .text.itcm	00000000 memchr
00015c10 g     F .text.itcm	000002f0 set_arm_clock
2000fab4 g     O .bss	00000004 systick_cycle_count
00012b70 g     F .text.itcm	0000000e JoystickController::disconnect()
20009c50 g     O .data	00000016 usb_string_serial_number_default
00016540 g     F .text.itcm	0000002c eeprom_write_dword
0001d4e4 g     F .text.itcm	0000020c _free_r
00014048 g     F .text.itcm	00000138 JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)
0001ccd4 g     F .text.itcm	0000000c __locale_mb_cur_max
00021fc8 g     F .text.itcm	00000016 _wcsrtombs_r
0000392c  w    F .text.itcm	0000001c UEncoder::~UEncoder()
00008d10 g     F .text.itcm	00000058 UMotor::sendMotorValues()
2000e544 g     O .bss	00000190 __atexit0
000178d4  w    F .text.itcm	00000004 usb_serial_class::flush()
00002a90  w    F .text.itcm	0000001c UDisplay::~UDisplay()
00008d68 g     F .text.itcm	0000004c UMotor::sendMotorPWM()
00014a3c g     F .text.itcm	00000052 JoystickController::hid_process_in_data(Transfer_struct const*)
0001902c g     F .text.itcm	0000027a .hidden __aeabi_dsub
00012ce0 g     F .text.itcm	00000020 JoystickController::bt_hid_input_end()
2000950c g     O .data	00000020 __default_locale
2000938c g     O .data	00000004 __malloc_sbrk_base
000178cc  w    F .text.itcm	00000004 usb_serial_class::read()
00012e0c g     F .text.itcm	000001ec JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)
0001c254 g     F .text.itcm	00000166 strstr
00012b80 g     F .text.itcm	00000006 JoystickController::bt_hid_input_data(unsigned long, long)
0001ce48 g     F .text.itcm	00000004 __retarget_lock_try_acquire
00002a90  w    F .text.itcm	0000001c UDisplay::~UDisplay()
00019330 g     F .text.itcm	0000006a .hidden __floatundidf
0000f07c g     F .text.itcm	00000094 Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
00016f04  w    F .text.itcm	00000006 _lseek
00016f0c  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ca50 g     F .text.itcm	00000042 UUSB::handleIncoming()
0000cf98  w    F .text.itcm	00000460 UUsbHost::UUsbHost()
00008004 g     F .text.itcm	000002cc ULog::logWriteBufferTo(int)
0001e914 g     F .text.itcm	000000f0 __lshift
00007020 g     F .text.itcm	00000084 ULog::sendLogFlagsOther()
000177f4 g     F .text.itcm	00000030 usb_prepare_transfer
0000db20 g     F .text.itcm	000000b4 UUsbHost::decode(char const*)
0000e6f8 g     F .text.itcm	000000a4 MPU9250_asukiaaa::beginMag(unsigned char)
00016d28 g     F .text.itcm	0000018c unused_interrupt_vector
00001d5c g     F .text.itcm	0000000c adc1_isr()
00002590 g     F .text.itcm	000000c8 UCurrent::setup()
00019510 g     F .text.itcm	0000001c .hidden __floatsisf
00022048 g     F .text.itcm	00000100 __ssprint_r
2000fc20 g     O .bss	00000004 usb_timer0_callback
60001cf0 g     F .text.code	00000130 tempmon_init
0001b934 g     F .text.itcm	00000062 _vasnprintf_r
0000592c g     F .text.itcm	000000a8 ULedBand::setup()
000150b8 g     F .text.itcm	00000034 USBHost::contribute_Transfers(Transfer_struct*, unsigned long)
00003574 g     F .text.itcm	0000002c EEConfig::decode(char const*)
0001d3bc g     F .text.itcm	00000088 __register_exitproc
0000e360 g     F .text.itcm	00000018 ADC_Module::checkPin(unsigned char)
00003148 g     F .text.itcm	00000036 EEConfig::pushWord(unsigned short)
0001591c  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)
00016188 g     F .text.itcm	0000007c eeprom_read_byte
0001e1b0 g     F .text.itcm	0000008e __sjis_mbtowc
00020fb0 g     F .text.itcm	00000044 strlcpy
000059d8 g     F .text.itcm	00000550 ULedBand::tick()
0001bd24 g     F .text.itcm	0000008a strncmp
0001b998 g     F .text.itcm	00000068 vasnprintf
00017e80 g     F .text.itcm	00000070 usb_serial_flush_input
000048f4 g     F .text.itcm	000000d0 UImu2::decode(char const*)
00021fe0 g     F .text.itcm	00000024 wcsrtombs
0000c228 g     F .text.itcm	00000014 USubss::USubss()
2000f24c g     O .bss	00000144 logger
0001e6f8 g     F .text.itcm	0000015c __multiply
2000ea90 g     O .bss	00000060 current
0000a954 g     F .text.itcm	0000007c URobot::sendData(int)
2000fa64 g     O .bss	00000050 servo
000018ec  w    F .text.itcm	0000001c UAd::~UAd()
00018250 g     F .text.itcm	0000057c pow
00017f10 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00012cd0 g     F .text.itcm	0000000e non-virtual thunk to JoystickController::release_bluetooth()
000035a0 g     F .text.itcm	00000052 EEConfig::pushBlock(char const*, int)
0001bdb0 g     F .text.itcm	00000064 strncpy
00002470 g     F .text.itcm	00000008 UCommand::sendData(int)
2000e108 g     O .bss	00000028 __malloc_current_mallinfo
20007190 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0001ecc4 g     F .text.itcm	000000d4 __d2b
00020f1c g     F .text.itcm	00000054 strcasecmp
0000ee8c g     F .text.itcm	00000002 Adafruit_GFX::endWrite()
0000c05c g     F .text.itcm	0000002c UServo::eePromSave()
000066f4 g     F .text.itcm	00000054 ULineSensor::sendLineSensorPosition()
00002164 g     F .text.itcm	00000028 UAsEnc::eePromSave()
60001f08 g     F .text.code	00000054 _reboot_Teensyduino_
0000637c  w    F .text.itcm	0000001c ULineSensor::~ULineSensor()
000141a4 g     F .text.itcm	00000024 non-virtual thunk to JoystickController::bt_hid_timer_event(USBDriverTimer*)
00013c18 g     F .text.itcm	000000c8 JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)
00009330 g     F .text.itcm	00000080 UMotorTest::eePromSave()
600017f4 g     F .text.code	00000002 startup_default_middle_hook
20007fdc g     O .data	00000014 vtable for UAd
00002360 g     F .text.itcm	00000030 UCommand::getRevisionNumber()
0000392c  w    F .text.itcm	0000001c UEncoder::~UEncoder()
0000b790 g     F .text.itcm	00000064 UService::sampleTimeInterrupt()
00010774 g     F .text.itcm	00000240 USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)
000170fc g     F .text.itcm	00000630 usb_isr
0001b3ec g     F .text.itcm	0000000c __cxa_atexit
00010158 g     F .text.itcm	00000134 USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)
00003a70 g     F .text.itcm	00000064 UEncoder::sendEncoderErrors()
0001cd10 g     F .text.itcm	00000024 _close_r
0000bc0c g     F .text.itcm	00000034 UServo::setServo(signed char, short, bool, signed char)
000192c8 g     F .text.itcm	00000022 .hidden __aeabi_i2d
000159c4 g     F .text.itcm	00000104 IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)
0000b65c g     F .text.itcm	00000040 URobot::eePromSave()
00005f28 g     F .text.itcm	00000078 ULedBand::setPixel(int, int, int, int)
0001502c g     F .text.itcm	0000001c USBHost::allocate_string_buffer()
0000c7e8 g     F .text.itcm	00000050 UUSB::sendSubscriptionStatus()
0000f32c g     F .text.itcm	000000f4 Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)
0000116c g     F .text.itcm	000000a2 Adafruit_SSD1306::invertDisplay(bool)
000018dc g     F .text.itcm	00000010 UAd::sendHelp()
2000953c g     O .data	00000050 SPI
20009af0 g     O .data	00000080 isr_table_gpio3
0001ba00 g     F .text.itcm	00000060 memcmp
20007ee0  w    O .data	00000028 vtable for usb_serial_class
0000cf78  w    F .text.itcm	0000001c UUsbHost::~UUsbHost()
0001ce3c g     F .text.itcm	00000002 __retarget_lock_close_recursive
000016c4 g     F .text.itcm	00000208 Adafruit_SSD1306::display(unsigned char, unsigned char)
0000a204 g     F .text.itcm	00000284 UMotorTest::tick()
0001952c g     F .text.itcm	0000008c .hidden __floatundisf
0000fdcc g     F .text.itcm	00000178 USBHost::begin()
2000f660 g     O .bss	00000340 robot
2000f9e0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0002420c g     F .text.itcm	000000cc __swsetup_r
0000b818 g     F .text.itcm	00000128 UService::setup()
000198b0  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
20007e14 g     O .data	00000058 vtable for Adafruit_GFX
20008018 g     O .data	00000014 vtable for UImu2
000109b4 g     F .text.itcm	0000007c USBHost::add_qh_to_periodic_schedule(Pipe_struct*)
0001b584 g     F .text.itcm	000000c8 __sfp
0000ef80 g     F .text.itcm	00000058 Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)
0001ee24 g     F .text.itcm	0000005c __copybits
0000921c  w    F .text.itcm	0000001c UMotorTest::~UMotorTest()
20008f84 g     O .data	00000408 __malloc_av_
00019508 g     F .text.itcm	00000024 .hidden __aeabi_ui2f
2000e6d4 g     O .bss	00000004 __atexit
0001b83c g     F .text.itcm	00000022 __sread
20009978 g     O .data	0000005a JoystickController::pid_vid_mapping
00002f80  w    F .text.itcm	0000001c EEConfig::~EEConfig()
00005280 g     F .text.itcm	0000003c UIrDist::sendHelp()
00017fa4 g     F .text.itcm	00000094 usb_serial_flush_output
000146bc g     F .text.itcm	0000000c JoystickController::rx_callback(Transfer_struct const*)
00019ea0 g     F .text.itcm	0000000c __malloc_lock
000119e0 g     F .text.itcm	0000063a USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)
2000a000 g     O .data	000002c0 _VectorsRam
0000fc64  w    F .text.itcm	00000002 USBDriver::timer_event(USBDriverTimer*)
00020e54 g     F .text.itcm	00000054 _fflush_r
00000168 g     F .text.itcm	00000008 getRevisionString()
0001dfe0 g     F .text.itcm	000001d0 __utf8_mbtowc
00008448 g     F .text.itcm	00000044 ULog::eePromSaveStatusLog()
000198b4 g     F .text.itcm	00000078 _calloc_r
00004f1c g     F .text.itcm	000002c0 UImu2::tick()
000093b0 g     F .text.itcm	00000140 UMotorTest::eePromLoad()
0000fa2c g     F .text.itcm	00000234 SPIClass::begin()
2000fc48 g     O .bss	00000001 yield_active_check_flags
0001ce44 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
2000fc46 g     O .bss	00000001 usb_high_speed
0000a7d8 g     F .text.itcm	000000d0 URobot::sendState()
00002bf0 g     F .text.itcm	0000026c UDisplay::tick()
0000bc40 g     F .text.itcm	000000a4 UServo::sendServoStatus()
0000a9d0 g     F .text.itcm	00000070 URobot::saveCycleTime()
00004784 g     F .text.itcm	00000050 UImu2::sendHelp()
00012470 g     F .text.itcm	00000058 USBHub::send_clearstatus_connect(unsigned long)
000069e8 g     F .text.itcm	00000040 ULineSensor::sendData(int)
0001bb58 g     F .text.itcm	000000a4 memset
00018c28 g     F .text.itcm	00000006 __ieee754_sqrtf
0000bebc g     F .text.itcm	000001a0 UServo::tick()
00011678 g     F .text.itcm	000000cc USBHIDParser::sendPacket(unsigned char const*, int)
00016694 g     F .text.itcm	00000010 main
000115dc g     F .text.itcm	00000018 USBHIDParser::timer_event(USBDriverTimer*)
0000ef28 g     F .text.itcm	00000058 Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
2000e134 g     O .bss	00000004 __malloc_max_total_mem
0000bce4 g     F .text.itcm	00000008 UServo::sendData(int)
0000baf8  w    F .text.itcm	0000001c UServo::~UServo()
00002b40 g     F .text.itcm	000000ac UDisplay::setup()
0001ce34 g     F .text.itcm	00000002 __retarget_lock_init_recursive
202000e0 g     O .bss.dma	00000062 usb_descriptor_buffer
0001953c g     F .text.itcm	0000007c .hidden __aeabi_l2f
0000e7d8 g     F .text.itcm	00000024 MPU9250_asukiaaa::accelY()
000247a0 g     F .text.itcm	00000018 __swbuf
00003bf8 g     F .text.itcm	000000d4 UEncoder::sendVelocity()
00014fcc g     F .text.itcm	00000010 USBHost::allocate_Device()
0000c198 g     F .text.itcm	0000005c USubs::serviceStatus(int)
0001e240 g     F .text.itcm	000000be __eucjp_mbtowc
0001166c g     F .text.itcm	0000000c USBHIDParser::out_callback(Transfer_struct const*)
00006a28 g     F .text.itcm	00000150 ULineSensor::normalize()
0000c4e0 g     F .text.itcm	0000009c UUSB::decode(char const*)
00001b48 g     F .text.itcm	0000009c UAd::sendStatusLSRaw()
0001b8c4 g     F .text.itcm	00000008 __sclose
0001786c g     F .text.itcm	00000058 usb_init_serialnumber
00013204 g     F .text.itcm	00000076 JoystickController::transmitPS3MotionUserFeedbackMsg()
00020d14 g     F .text.itcm	00000010 fclose
0000c088 g     F .text.itcm	00000034 UServo::eePromLoad()
0001b3b8 g     F .text.itcm	00000002 _strtol_r
0000ee8c g     F .text.itcm	00000002 Adafruit_GFX::startWrite()
0001df10 g     F .text.itcm	00000080 _findenv_r
60002060 g       .text.code	00000000 __init_array_end
00021220 g     F .text.itcm	00000cec _dtoa_r
0001994c g     F .text.itcm	00000554 _malloc_r
0001eef8 g     F .text.itcm	0000001a __ascii_wctomb
00012dec g     F .text.itcm	00000020 non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)
00019340 g     F .text.itcm	0000005a .hidden __aeabi_l2d
00001908 g     F .text.itcm	00000140 UAd::setup()
00006c80 g     F .text.itcm	0000010c ULineSensor::eePromSaveLinesensor()
00002564 g     F .text.itcm	00000010 UCurrent::sendHelp()
0001ef14 g     F .text.itcm	0000009e __utf8_wctomb
00022004 g     F .text.itcm	0000001c _fiprintf_r
0000dcd4 g     F .text.itcm	00000094 ADC::startSingleRead(unsigned char, signed char)
200081ac  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00015824 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
00021f18 g     F .text.itcm	0000000c __env_unlock
00015fa8 g     F .text.itcm	00000054 micros
0001b404 g     F .text.itcm	00000010 isalnum
0000fc78 g     F .text.itcm	00000020 BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)
00002478 g     F .text.itcm	000000bc UCommand::parse_and_execute_command(char*)
0001dfa0 g     F .text.itcm	00000014 _mbtowc_r
0001952c g     F .text.itcm	0000008c .hidden __aeabi_ul2f
00001e6c g     F .text.itcm	000000f0 UAsEnc::decode(char const*)
2000e864 g     O .bss	00000004 USBHIDParser::available_hid_drivers_list
0000ee14 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
0001d444 g     F .text.itcm	000000a0 _malloc_trim_r
00024460 g     F .text.itcm	00000106 _wcsnrtombs_l
6000262c g     O .text.progmem	00000004 string0
00017f3c g     F .text.itcm	00000018 usb_serial_write
00003e20 g     F .text.itcm	00000110 UEncoder::eePromLoad()
0000ff44 g     F .text.itcm	000000bc USBDriverTimer::start(unsigned long)
600017f8  w    F .text.code	00000002 startup_late_hook
2000e6dc g     O .bss	00000018 SWIMUCal
00003f58 g     F .text.itcm	000001f8 UEncoder::updatePose(unsigned long)
0000fc74  w    F .text.itcm	00000004 BTHIDInput::claim_bluetooth(BluetoothController*, unsigned long, unsigned char*)
000168f8 g     F .text.itcm	000000dc flexpwmFrequency
00018fe4 g     F .text.itcm	00000010 .hidden __math_check_uflow
000178d0  w    F .text.itcm	00000004 usb_serial_class::available()
0001ce68 g     F .text.itcm	000002dc strcmp
0000e304 g     F .text.itcm	0000005c ADC_Module::enableInterrupts(void (*)(), unsigned char)
00001dfc g     F .text.itcm	00000054 UAsEnc::sendHelp()
0000a0f0 g     F .text.itcm	00000114 UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)
00002574  w    F .text.itcm	0000001c UCurrent::~UCurrent()
00023e7c g     F .text.itcm	0000001c vfiprintf
00007b7c g     F .text.itcm	00000078 ULog::initLogStructure()
0001ce30 g     F .text.itcm	00000002 __retarget_lock_init
20000000 g     O .data	00000280 endpoint_queue_head
600025fc  w    O .text.progmem	00000016 usb_string_product_name
0000bb14 g     F .text.itcm	00000044 UServo::sendHelp()
00015f00 g     F .text.itcm	000000a8 delay
00024838 g     F .text.itcm	00000040 .hidden __fixunsdfdi
2000fc2a g     O .bss	00000002 dma_channel_allocated_mask
000074dc g     F .text.itcm	00000080 ULog::writeAcc(signed char*, int, char*, int)
00024890 g     F .fini	00000000 _fini
0000e934 g     F .text.itcm	0000002a TwoWire::write(unsigned char)
60001020 g     O .text.headers	0000000c BootData
00015bf4 g     F .text.itcm	0000001c Print::printf(char const*, ...)
00007d78 g     F .text.itcm	00000060 ULog::startLogging(int, bool)
00016f14 g     F .text.itcm	00000004 Panic_Temp_isr
2000e51c g     O .bss	00000004 _PathLocale
00024808 g     F .text.itcm	00000030 .hidden __fixdfdi
2000fac4 g     O .bss	00000150 usb
0001b1cc g     F .text.itcm	000000a8 strtof
0001b10c g     F .text.itcm	0000001c strtod_l
0000dbf8 g     F .text.itcm	00000040 ADC::ADC()
0000b9a8 g     F .text.itcm	00000044 UService::setSampleTime(long)
00024568 g     F .text.itcm	00000024 _wcsnrtombs_r
0001cdb0 g     F .text.itcm	0000002c _write_r
0000ad90 g     F .text.itcm	00000418 URobot::tick()
00015918  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)
00016d0c g     F .text.itcm	0000001c analogWriteRes
0000e2bc g     F .text.itcm	00000046 ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)
000096d0 g     F .text.itcm	00000200 UMotorTest::estimateFriction(float, float, float, float&)
0001cce0 g     F .text.itcm	00000030 setlocale
0001939c g     F .text.itcm	0000016c .hidden __aeabi_frsub
0000f110 g     F .text.itcm	000000d4 Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
0000e5f8 g     F .text.itcm	00000018 MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)
0000cf78  w    F .text.itcm	0000001c UUsbHost::~UUsbHost()
00013c10 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)
0001d3b0 g     F .text.itcm	0000000c nanf
000022ac  w    F .text.itcm	0000001c UCommand::~UCommand()
20008e58 g     O .data	00000004 _impure_ptr
0000a8a8 g     F .text.itcm	0000004c URobot::sendPinValue()
2000b400 g     O .bss	000023c0 usbhost
00020d24 g     F .text.itcm	00000130 __sflush_r
2000959c g     O .data	00000140 Wire
0000c374 g     F .text.itcm	00000028 USubss::subscribeSendHelp()
00018204 g     F .text.itcm	00000004 atan2f
00008560 g     F .text.itcm	000000c0 UMotor::sendHelp()
20008134 g     O .data	00000014 vtable for UEncoder
0001b6ec g     F .text.itcm	00000046 _fwalk_sglue
00015ac8 g     F .text.itcm	00000070 IntervalTimer::end()
000083b8 g     F .text.itcm	00000090 ULog::setLogFlagDefault()
0000602c g     F .text.itcm	00000008 ULedBand::sendData(int)
000042f8 g     F .text.itcm	0000010c UEncoder::tick()
000049c4 g     F .text.itcm	00000030 UImu2::eePromSave()
60002000 g       .text.code	00000000 __preinit_array_end
000133ec g     F .text.itcm	0000034c JoystickController::setRumble(unsigned char, unsigned char, unsigned char)
000018d0  w    F .text.itcm	00000002 USubss::sendHelp()
00007714 g     F .text.itcm	00000068 ULog::writeMotVolt(signed char*, int, char*, int)
0000e138 g     F .text.itcm	00000052 ADC_Module::wait_for_cal()
00022148 g     F .text.itcm	00000d16 _svfiprintf_r
0001c414 g     F .text.itcm	00000628 __loadlocale
00001080 g     F .text.itcm	00000058 Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)
00007a10 g     F .text.itcm	000000fc ULog::writeDistSensor(signed char*, int, char*, int)
0000cd08  w    F .text.itcm	000000d4 void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)
00003948 g     F .text.itcm	00000128 UEncoder::setup()
0000e508 g     F .text.itcm	000000b8 MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)
00008ea0 g     F .text.itcm	00000030 UMotor::eePromSave()
0001dfb4 g     F .text.itcm	0000002a __ascii_mbtowc
0000e05c g     F .text.itcm	000000dc ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)
0001eb9c g     F .text.itcm	00000064 __ulp
0001b6c8 g     F .text.itcm	00000024 __fp_unlock_all
00006fd4 g     F .text.itcm	0000004c ULog::setup()
000170d0 g     F .text.itcm	0000002c usb_stop_sof_interrupts
000018ec  w    F .text.itcm	0000001c UAd::~UAd()
00012cc8 g     F .text.itcm	00000002 non-virtual thunk to JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)
0000e918  w    F .text.itcm	00000018 TwoWire::peek()
0000e930  w    F .text.itcm	00000002 TwoWire::flush()
00000170 g     F .text.itcm	0000002c setup
20008dd4 g     O .data	00000084 usb_descriptor_list
00005558 g     F .text.itcm	00000100 UIrDist::decode(char const*)
00014000 g     F .text.itcm	00000022 JoystickController::hid_timer_event(USBDriverTimer*)
0000e79c g     F .text.itcm	00000018 MPU9250_asukiaaa::accelUpdate()
000187d0 g     F .text.itcm	00000204 sinf
00000cb4  w    F .text.itcm	00000002 Print::flush()
2000f64c g     O .bss	00000004 p11
2000810c g     O .data	00000014 vtable for UCurrent
0000679c g     F .text.itcm	00000054 ULineSensor::sendStatusLineSensorLimitsBlack()
2000e9dc g     O .bss	0000003c asenc
2000f650 g     O .bss	00000004 p12a
0000f420 g     F .text.itcm	000003d4 Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)
0000c0e8 g     F .text.itcm	00000020 USubs::USubs(char const*, char const*)
0001d3a0 g     F .text.itcm	00000010 nan
0000c788 g     F .text.itcm	00000060 UUSB::sendInfoAsCommentWithTime(char const*, char const*)
0000fd90 g     F .text.itcm	0000000a BluetoothController::useHIDProtocol(bool)
000094f0 g     F .text.itcm	000001e0 UMotorTest::testCurrent(float, float, float, float&)
00021024 g     F .text.itcm	00000008 localeconv
00003110 g     F .text.itcm	00000036 EEConfig::pushByte(unsigned char)
2000f4c8 g     O .bss	0000005c motor
0001501c g     F .text.itcm	00000010 USBHost::free_Transfer(Transfer_struct*)
00024690 g     F .text.itcm	00000060 __swhatbuf_r
20058000 g       .text.csf	00000000 _estack
000092d8 g     F .text.itcm	00000058 UMotorTest::sendData(int)
0000c470 g     F .text.itcm	0000003a USubss::addPublistItem(char const*, char const*)
00014fec g     F .text.itcm	00000010 USBHost::allocate_Pipe()
00003558 g     F .text.itcm	0000001c EEConfig::setup()
00017f54 g     F .text.itcm	00000050 usb_serial_write_buffer_free
0000b7f4  w    F .text.itcm	00000004 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)
0000d3f8 g     F .text.itcm	0000005c UUsbHost::setup()
0000c680 g     F .text.itcm	00000084 UUSB::sendUSBstatus()
60001730 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
00000b4c g     F .text.itcm	00000028 AS5X47Spi::AS5X47Spi(unsigned char)
000113b4 g     F .text.itcm	00000228 USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)
20009394 g     O .data	0000000c __sglue
00017c44 g     F .text.itcm	00000100 usb_serial_configure
0000e960 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
00012b88 g     F .text.itcm	00000010 JoystickController::release_bluetooth()
000023e0 g     F .text.itcm	00000090 UCommand::sendStatusVersion()
00015bd8  w    F .text.itcm	0000001c _write
00004614 g     F .text.itcm	00000020 m1EncoderB()
00008db4 g     F .text.itcm	00000010 UMotor::sendData(int)
00012da8 g     F .text.itcm	00000044 non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)
2000a2c0 g       .data	00000000 _edata
000029dc g     F .text.itcm	00000034 UCurrent::logIntervalChanged()
2000fc3c g     O .bss	00000001 external_psram_size
000045d4 g     F .text.itcm	00000020 m1EncoderA()
2000815c g     O .data	00000014 vtable for UUsbHost
000242d8 g     F .text.itcm	000000aa __fputwc
00005794  w    F .text.itcm	0000001c ULedBand::~ULedBand()
000178d8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000047d4  w    F .text.itcm	0000001c UImu2::~UImu2()
2000e538 g     O .bss	00000001 __lock___at_quick_exit_mutex
0000edf0 g     F .text.itcm	0000000c lpi2c1_isr()
0000b800  w    F .text.itcm	00000006 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)
20003c78 g     O .data	0000002a ADC::channel2sc1aADC1
00004aa8 g     F .text.itcm	0000007c UImu2::sendStatusAcc()
000031a8 g     F .text.itcm	00000026 EEConfig::readByte()
00014ffc g     F .text.itcm	00000010 USBHost::free_Pipe(Pipe_struct*)
00011910 g     F .text.itcm	000000d0 USBHIDParser::control(Transfer_struct const*)
0000c29c g     F .text.itcm	00000064 USubss::subscribeService()
20009b70 g     O .data	00000080 isr_table_gpio4
000124c8 g     F .text.itcm	00000058 USBHub::send_clearstatus_enable(unsigned long)
00006b78 g     F .text.itcm	00000104 ULineSensor::tick()
000031f8 g     F .text.itcm	00000118 EEConfig::eePromSaveStatus(bool)
00018bec g     F .text.itcm	00000020 .hidden __math_divzerof
000167e0 g     F .text.itcm	00000062 ultoa
2000f524 g     O .bss	00000128 motortest
60001788 g     F .text.code	00000068 TwoWire::begin()
0000ca94 g     F .text.itcm	00000174 UUSB::tick()
0000100c g     F .text.itcm	00000074 Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)
00004880 g     F .text.itcm	00000074 UImu2::setup()
00003cd0 g     F .text.itcm	000000bc UEncoder::sendMotorVelocity()
0000777c g     F .text.itcm	00000098 ULog::writePose(signed char*, int, char*, int)
0000637c  w    F .text.itcm	0000001c ULineSensor::~ULineSensor()
0001b864 g     F .text.itcm	0000003e __swrite
000167d8 g     F .text.itcm	00000004 operator new(unsigned int)
000158a8 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20009390 g     O .data	00000004 __malloc_trim_threshold
000178c8  w    F .text.itcm	00000004 usb_serial_class::peek()
00004d10 g     F .text.itcm	0000020c UImu2::estimateTilt()
0000848c g     F .text.itcm	0000007c ULog::eePromLoadStatusLog()
2000f390 g     O .bss	00000138 ls
00012520 g     F .text.itcm	00000058 USBHub::send_clearstatus_suspend(unsigned long)
00022020 g     F .text.itcm	00000028 fiprintf
00022ef0 g     F .text.itcm	00000f8c _vfiprintf_r
000141c8 g     F .text.itcm	00000170 JoystickController::CalcAnalogStick(float&, float&, short, short, bool)
00000a3c  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
0001e300 g     F .text.itcm	00000148 __jis_mbtowc
0000fdc8  w    F .text.itcm	00000002 USBHIDInput::hid_timer_event(USBDriverTimer*)
00019508 g     F .text.itcm	00000024 .hidden __floatunsisf
0001ea48 g     F .text.itcm	00000154 __mdiff
00001b00 g     F .text.itcm	00000048 UAd::tickHalfTime()
00018f68 g     F .text.itcm	00000010 .hidden __math_uflow
00001d50 g     F .text.itcm	0000000c adc0_isr()
00008f18 g     F .text.itcm	000000bc UMotor::setMotorVoltage(float, float)
0000b538 g     F .text.itcm	00000124 URobot::eePromLoad()
000016a4 g     F .text.itcm	0000001e Adafruit_SSD1306::clearDisplay()
00010000 g     F .text.itcm	00000070 USBDriverTimer::stop()
20008e60 g     O .data	00000120 _impure_data
00002f80  w    F .text.itcm	0000001c EEConfig::~EEConfig()
00001080 g     F .text.itcm	00000058 Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)
0001b698 g     F .text.itcm	0000000c __sfp_lock_release
00018d78 g     F .text.itcm	000001a4 atanf
0000ba64 g     F .text.itcm	00000068 UService::updateActuators()
200021d0 g     O .data	00000101 _ctype_
00016ee8  w    F .text.itcm	00000004 _read
60002000 g       .text.code	00000000 __init_array_start
000198b0  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0001327c g     F .text.itcm	00000170 JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)
0001ce40 g     F .text.itcm	00000002 __retarget_lock_acquire
000021f8 g     F .text.itcm	000000b4 UCommand::sendHelp()
20009534 g     O .data	00000004 F_BUS_ACTUAL
00002060 g     F .text.itcm	00000034 UAsEnc::initEnc()
0001ce50 g     F .text.itcm	00000002 __retarget_lock_release
2000ec38 g     O .bss	00000004 em_rx_tx
000138bc g     F .text.itcm	00000008 non-virtual thunk to JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)
00015910  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)
00003b68 g     F .text.itcm	0000008c UEncoder::sendPose()
00012320 g     F .text.itcm	0000005e USBHub::send_getstatus(unsigned long)
00005fa0 g     F .text.itcm	0000008c ULedBand::sendLedsData()
00007f48 g     F .text.itcm	000000bc ULog::addMsgLog(char const*)
0000c4ac  w    F .text.itcm	00000034 UUSB::~UUSB()
0000de04 g     F .text.itcm	00000258 ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)
00005794  w    F .text.itcm	0000001c ULedBand::~ULedBand()
0000669c g     F .text.itcm	00000058 ULineSensor::sendLineSensorStatus()
2000e528 g     O .bss	00000001 __lock___dd_hash_mutex
000245b8 g     F .text.itcm	000000d8 __smakebuf_r
2000e52c g     O .bss	00000001 __lock___tz_mutex
00000000 g       .text.itcm	00000000 _stext
00012b98 g     F .text.itcm	00000070 JoystickController::hid_process_control(Transfer_struct const*)
000052bc  w    F .text.itcm	0000001c UIrDist::~UIrDist()
00015770 g     F .text.itcm	000000b4 DMAChannel::begin(bool)
00018be0 g     F .text.itcm	0000000c .hidden __math_oflowf
20009974 g     O .data	00000004 IntervalTimer::nvic_priorites
0000b7f8  w    F .text.itcm	00000006 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)
0001d2c0 g     F .text.itcm	000000dc strlen
00013a98 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::connectionComplete()
00014fdc g     F .text.itcm	00000010 USBHost::free_Device(Device_struct*)
00012b54 g     F .text.itcm	0000000e JoystickController::hid_input_end()
00006748 g     F .text.itcm	00000054 ULineSensor::sendStatusLineSensorLimitsWhite()
0000b940 g     F .text.itcm	00000068 UService::isSampleTime()
0000aa40 g     F .text.itcm	00000238 URobot::batteryMonitoring()
0000e460 g     F .text.itcm	0000007c ADC_Module::startSingleRead(unsigned char)
00006fb8  w    F .text.itcm	0000001c ULog::~ULog()
0000b80c  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
0001d794 g     F .text.itcm	00000594 __gethex
600025fc g     O .text.progmem	00000016 usb_string_product_name_default
2000dfd0 g     O .bss	000000f8 imu2
0001b918 g     F .text.itcm	0000001c vdprintf
00001e50  w    F .text.itcm	0000001c UAsEnc::~UAsEnc()
000210e8 g     F .text.itcm	0000000a __assert
00022ed8 g     F .text.itcm	00000016 __sprint_r
00002f9c g     F .text.itcm	00000044 EEConfig::EEConfig()
0001bbfc g     F .text.itcm	000000cc strchr
00012d38 g     F .text.itcm	0000003c JoystickController::bt_disconnect_collection(Device_struct*)
00012a00 g     F .text.itcm	0000014a JoystickController::hid_input_data(unsigned long, long)
600017f4  w    F .text.code	00000002 startup_middle_hook
000192ec g     F .text.itcm	00000042 .hidden __aeabi_f2d
00012b68 g     F .text.itcm	00000002 JoystickController::control(Transfer_struct const*)
200012c8 g     O .data	00000060 .hidden __inv_pio4
60001800 g     F .text.code	00000110 configure_cache
0001656c g     F .text.itcm	0000001e eeprom_write_block
0000cf3c g     F .text.itcm	0000003c UUsbHost::sendHelp()
0000fcec g     F .text.itcm	000000a4 BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)
000028f4 g     F .text.itcm	00000064 UCurrent::sendSupplyCurrent()
20007f08 g     O .data	000000d4 vtable for JoystickController
0000755c g     F .text.itcm	00000080 ULog::writeGyro(signed char*, int, char*, int)
200080d0 g     O .data	00000014 vtable for UIrDist
00002390 g     F .text.itcm	00000050 UCommand::getCompileDate()
000112c4 g     F .text.itcm	00000080 USBHost::disconnect_Device(Device_struct*)
00009d78 g     F .text.itcm	0000013c UMotorTest::estimateMotorParams()
0001eee4 g     F .text.itcm	00000014 _wctomb_r
00021f0c g     F .text.itcm	0000000c __env_lock
0000a6a0  w    F .text.itcm	0000001c URobot::~URobot()
0000921c  w    F .text.itcm	0000001c UMotorTest::~UMotorTest()
0000a8f4 g     F .text.itcm	00000060 URobot::sendTiming()
0000be5c g     F .text.itcm	00000060 UServo::decode(char const*)
0001902c g     F .text.itcm	0000027a .hidden __subdf3
60002000 g       .text.code	00000000 __preinit_array_start
0001784c g     F .text.itcm	0000001c usb_receive
00007814 g     F .text.itcm	00000084 ULog::writeTiming(signed char*, int, char*, int)
000082d0 g     F .text.itcm	000000e8 ULog::tick()
0001e63c g     F .text.itcm	00000060 __lo0bits
000018d4  w    F .text.itcm	00000004 USubss::decode(char const*)
000070e8 g     F .text.itcm	00000008 ULog::stopLogging()
00010b7c g     F .text.itcm	0000021c USBHost::delete_Pipe(Pipe_struct*)
00032000 g       *ABS*	00000000 _flashimagelen
0000fdc4  w    F .text.itcm	00000004 USBHIDInput::hid_process_out_data(Transfer_struct const*)
0000c23c g     F .text.itcm	00000060 USubss::subscribeDecode(char const*)
0000f2fc g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
000047f0 g     F .text.itcm	00000090 UImu2::initMpu()
00019018 g     F .text.itcm	0000000a __aeabi_atexit
00012b6c g     F .text.itcm	00000002 JoystickController::tx_callback(Transfer_struct const*)
00018110 g     F .text.itcm	00000024 rtc_get
00003f30 g     F .text.itcm	00000022 UEncoder::clearPose()
0000f92c g     F .text.itcm	0000000c Adafruit_GFX::setTextSize(unsigned char)
00021f70 g     F .text.itcm	00000058 wcrtomb
00000770 g     F .text.itcm	00000030 AS5X47::readAngle()
20200000 g     O .bss.dma	000000d8 displayMemory
0000fc60  w    F .text.itcm	00000002 BTHIDInput::sdp_command_completed(bool)
00021030 g     F .text.itcm	00000078 frexp
000193a8 g     F .text.itcm	00000160 .hidden __addsf3
70000000 g       .bss.extram	00000000 _extram_start
000158ec g     F .text.itcm	00000004 pendablesrvreq_isr
00000cb0  w    F .text.itcm	00000004 Print::availableForWrite()
200093a0 g     O .data	0000016c __global_locale
00016204 g     F .text.itcm	00000018 eeprom_read_word
00007898 g     F .text.itcm	000000b4 ULog::writeExtra(signed char*, int, char*, int)
00010a30 g     F .text.itcm	0000014c USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
00014338 g     F .text.itcm	00000384 JoystickController::rx_data(Transfer_struct const*)
00006960 g     F .text.itcm	00000088 ULineSensor::sendLineSensorGain()
200080e4 g     O .data	00000014 vtable for EEConfig
000018cc  w    F .text.itcm	00000002 USubss::sendData(int)
00017d44 g     F .text.itcm	000000e0 usb_serial_read
2000e540 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000ef04 g     F .text.itcm	00000022 Adafruit_GFX::setRotation(unsigned char)
000243ec g     F .text.itcm	00000074 fputwc
00017790 g     F .text.itcm	00000064 usb_config_tx
00016eec  w    F .text.itcm	00000006 _close
0000d458 g     F .text.itcm	000003e4 UUsbHost::tick()
0001993c g     F .text.itcm	00000010 free
00000268 g     F .text.itcm	000000c8 ULead::setup(float, float, float)
0001e4a8 g     F .text.itcm	000000a4 __multadd
2000e0c8 g     O .bss	00000020 service
00001c2c g     F .text.itcm	00000124 UAd::adInterrupt(int)
0001e494 g     F .text.itcm	00000012 _Bfree
000090c0 g     F .text.itcm	0000015c UMotorTest::decode(char const*)
00018c30 g     F .text.itcm	00000148 __ieee754_atan2f
0001df90 g     F .text.itcm	00000010 _getenv_r
20009c50  w    O .data	00000016 usb_string_serial_number


